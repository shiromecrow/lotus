
half_mouse2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002410c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000900  080242f0  080242f0  000342f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024bf0  08024bf0  000401fc  2**0
                  CONTENTS
  4 .ARM          00000008  08024bf0  08024bf0  00034bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024bf8  08024bf8  000401fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024bf8  08024bf8  00034bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024bfc  08024bfc  00034bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08024c00  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f724  200001fc  08024dfc  000401fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000f920  08024dfc  0004f920  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027a8a  00000000  00000000  0004022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006071  00000000  00000000  00067cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fc8  00000000  00000000  0006dd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cd0  00000000  00000000  0006fcf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028697  00000000  00000000  000719c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031c4f  00000000  00000000  0009a057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb479  00000000  00000000  000cbca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b711f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a28  00000000  00000000  001b7170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	080242d4 	.word	0x080242d4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	080242d4 	.word	0x080242d4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <reset_distance>:
//float angle_R_database[ANGLE_MEAN_SIZE];

//float E_speedR0,E_speedL0;
//float E_accelerationR,E_accelerationL;

void reset_distance(void) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

	E_distanceL = 0;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <reset_distance+0x5c>)
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
	E_distanceR = 0;
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <reset_distance+0x60>)
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
	E_lpf_distanceL = 0;
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <reset_distance+0x64>)
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
	E_lpf_distanceR = 0;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <reset_distance+0x68>)
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
	G_hpf_distanceL = 0;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <reset_distance+0x6c>)
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
	G_hpf_distanceR = 0;
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <reset_distance+0x70>)
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
	fusion_distanceL=0;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <reset_distance+0x74>)
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
	fusion_distanceR=0;
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <reset_distance+0x78>)
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
	straight_alpha=0.85;
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <reset_distance+0x7c>)
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <reset_distance+0x80>)
 8000fe4:	601a      	str	r2, [r3, #0]
	theta_comp_gain=1;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <reset_distance+0x84>)
 8000fe8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000fec:	601a      	str	r2, [r3, #0]

}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	20000220 	.word	0x20000220
 8000ffc:	20000224 	.word	0x20000224
 8001000:	20000230 	.word	0x20000230
 8001004:	20000234 	.word	0x20000234
 8001008:	20000240 	.word	0x20000240
 800100c:	20000244 	.word	0x20000244
 8001010:	20000250 	.word	0x20000250
 8001014:	20000254 	.word	0x20000254
 8001018:	20000260 	.word	0x20000260
 800101c:	3f59999a 	.word	0x3f59999a
 8001020:	20000264 	.word	0x20000264

08001024 <reset_speed>:

void reset_speed(void) {
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

	G_hpf_speedL=0;
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <reset_speed+0x44>)
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
	G_hpf_speedR=0;
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <reset_speed+0x48>)
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
	E_lpf_speedL=0;
 8001038:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <reset_speed+0x4c>)
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
	E_lpf_speedR=0;
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <reset_speed+0x50>)
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
	fusion_speedL=0;
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <reset_speed+0x54>)
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
	fusion_speedR=0;
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <reset_speed+0x58>)
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
	straight_alpha=0.85;
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <reset_speed+0x5c>)
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <reset_speed+0x60>)
 800105c:	601a      	str	r2, [r3, #0]

}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	20000248 	.word	0x20000248
 800106c:	2000024c 	.word	0x2000024c
 8001070:	20000238 	.word	0x20000238
 8001074:	2000023c 	.word	0x2000023c
 8001078:	20000258 	.word	0x20000258
 800107c:	2000025c 	.word	0x2000025c
 8001080:	20000260 	.word	0x20000260
 8001084:	3f59999a 	.word	0x3f59999a

08001088 <interupt_calEncoder>:

void interupt_calEncoder(void) {
 8001088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
	float angle_R,angle_L;
	float angle_R_mean,angle_L_mean;
	angle_R=encoder_R-encoder_R0;
 8001090:	4be5      	ldr	r3, [pc, #916]	; (8001428 <interupt_calEncoder+0x3a0>)
 8001092:	ed93 7a00 	vldr	s14, [r3]
 8001096:	4be5      	ldr	r3, [pc, #916]	; (800142c <interupt_calEncoder+0x3a4>)
 8001098:	edd3 7a00 	vldr	s15, [r3]
 800109c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a0:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R>180){angle_R=angle_R-360;}
 80010a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80010a8:	ed9f 7ae1 	vldr	s14, [pc, #900]	; 8001430 <interupt_calEncoder+0x3a8>
 80010ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b4:	dd07      	ble.n	80010c6 <interupt_calEncoder+0x3e>
 80010b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ba:	ed9f 7ade 	vldr	s14, [pc, #888]	; 8001434 <interupt_calEncoder+0x3ac>
 80010be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010c2:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R<-180){angle_R=angle_R+360;}
 80010c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ca:	ed9f 7adb 	vldr	s14, [pc, #876]	; 8001438 <interupt_calEncoder+0x3b0>
 80010ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d6:	d507      	bpl.n	80010e8 <interupt_calEncoder+0x60>
 80010d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80010dc:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 8001434 <interupt_calEncoder+0x3ac>
 80010e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010e4:	edc7 7a01 	vstr	s15, [r7, #4]
	angle_L=-(encoder_L-encoder_L0);
 80010e8:	4bd4      	ldr	r3, [pc, #848]	; (800143c <interupt_calEncoder+0x3b4>)
 80010ea:	ed93 7a00 	vldr	s14, [r3]
 80010ee:	4bd4      	ldr	r3, [pc, #848]	; (8001440 <interupt_calEncoder+0x3b8>)
 80010f0:	edd3 7a00 	vldr	s15, [r3]
 80010f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f8:	eef1 7a67 	vneg.f32	s15, s15
 80010fc:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L>180){angle_L=angle_L-360;}
 8001100:	edd7 7a00 	vldr	s15, [r7]
 8001104:	ed9f 7aca 	vldr	s14, [pc, #808]	; 8001430 <interupt_calEncoder+0x3a8>
 8001108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800110c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001110:	dd07      	ble.n	8001122 <interupt_calEncoder+0x9a>
 8001112:	edd7 7a00 	vldr	s15, [r7]
 8001116:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 8001434 <interupt_calEncoder+0x3ac>
 800111a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800111e:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L<-180){angle_L=angle_L+360;}
 8001122:	edd7 7a00 	vldr	s15, [r7]
 8001126:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8001438 <interupt_calEncoder+0x3b0>
 800112a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800112e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001132:	d507      	bpl.n	8001144 <interupt_calEncoder+0xbc>
 8001134:	edd7 7a00 	vldr	s15, [r7]
 8001138:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8001434 <interupt_calEncoder+0x3ac>
 800113c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001140:	edc7 7a00 	vstr	s15, [r7]

	//E_speedR0 = E_speedR;
	//E_speedL0 = E_speedL;
	//one_countL = pl_count_encoderL();
	//one_countR = pl_count_encoderR();
	E_speedL = (angle_L) * pi / 180 * TIRE_DIAMETER_L /2 * 1000  / INTERRUPT_TIME*THETA_COMP_L0
 8001144:	6838      	ldr	r0, [r7, #0]
 8001146:	f7ff fa27 	bl	8000598 <__aeabi_f2d>
 800114a:	a39d      	add	r3, pc, #628	; (adr r3, 80013c0 <interupt_calEncoder+0x338>)
 800114c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001150:	f7ff fa7a 	bl	8000648 <__aeabi_dmul>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4610      	mov	r0, r2
 800115a:	4619      	mov	r1, r3
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	4bb8      	ldr	r3, [pc, #736]	; (8001444 <interupt_calEncoder+0x3bc>)
 8001162:	f7ff fb9b 	bl	800089c <__aeabi_ddiv>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4610      	mov	r0, r2
 800116c:	4619      	mov	r1, r3
 800116e:	a396      	add	r3, pc, #600	; (adr r3, 80013c8 <interupt_calEncoder+0x340>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	f7ff fa68 	bl	8000648 <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4610      	mov	r0, r2
 800117e:	4619      	mov	r1, r3
 8001180:	a393      	add	r3, pc, #588	; (adr r3, 80013d0 <interupt_calEncoder+0x348>)
 8001182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001186:	f7ff fa5f 	bl	8000648 <__aeabi_dmul>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4610      	mov	r0, r2
 8001190:	4619      	mov	r1, r3
 8001192:	a391      	add	r3, pc, #580	; (adr r3, 80013d8 <interupt_calEncoder+0x350>)
 8001194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001198:	f7ff fa56 	bl	8000648 <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4610      	mov	r0, r2
 80011a2:	4619      	mov	r1, r3
 80011a4:	a38e      	add	r3, pc, #568	; (adr r3, 80013e0 <interupt_calEncoder+0x358>)
 80011a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011aa:	f7ff fb77 	bl	800089c <__aeabi_ddiv>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4610      	mov	r0, r2
 80011b4:	4619      	mov	r1, r3
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	4ba3      	ldr	r3, [pc, #652]	; (8001448 <interupt_calEncoder+0x3c0>)
 80011bc:	f7ff fa44 	bl	8000648 <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	a387      	add	r3, pc, #540	; (adr r3, 80013e8 <interupt_calEncoder+0x360>)
 80011ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ce:	f7ff fb65 	bl	800089c <__aeabi_ddiv>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	4b9b      	ldr	r3, [pc, #620]	; (800144c <interupt_calEncoder+0x3c4>)
 80011e0:	f7ff fa32 	bl	8000648 <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	4b97      	ldr	r3, [pc, #604]	; (8001450 <interupt_calEncoder+0x3c8>)
 80011f2:	f7ff fb53 	bl	800089c <__aeabi_ddiv>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	a37c      	add	r3, pc, #496	; (adr r3, 80013f0 <interupt_calEncoder+0x368>)
 8001200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001204:	f7ff fa20 	bl	8000648 <__aeabi_dmul>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4610      	mov	r0, r2
 800120e:	4619      	mov	r1, r3
 8001210:	a379      	add	r3, pc, #484	; (adr r3, 80013f8 <interupt_calEncoder+0x370>)
 8001212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001216:	f7ff fb41 	bl	800089c <__aeabi_ddiv>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800122a:	f7ff fb37 	bl	800089c <__aeabi_ddiv>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	4b86      	ldr	r3, [pc, #536]	; (8001454 <interupt_calEncoder+0x3cc>)
 800123c:	f7ff fa04 	bl	8000648 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	a36d      	add	r3, pc, #436	; (adr r3, 8001400 <interupt_calEncoder+0x378>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	f7ff fb25 	bl	800089c <__aeabi_ddiv>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	a36b      	add	r3, pc, #428	; (adr r3, 8001408 <interupt_calEncoder+0x380>)
 800125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001260:	f7ff f9f2 	bl	8000648 <__aeabi_dmul>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4690      	mov	r8, r2
 800126a:	4699      	mov	r9, r3
			/(THETA_COMP_L0 + theta_comp_gain*(THETA_COMP_L1*sin(encoder_L*pi/180)+THETA_COMP_L2*cos(encoder_L*pi/180)
 800126c:	4b7a      	ldr	r3, [pc, #488]	; (8001458 <interupt_calEncoder+0x3d0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f991 	bl	8000598 <__aeabi_f2d>
 8001276:	4604      	mov	r4, r0
 8001278:	460d      	mov	r5, r1
 800127a:	4b70      	ldr	r3, [pc, #448]	; (800143c <interupt_calEncoder+0x3b4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f98a 	bl	8000598 <__aeabi_f2d>
 8001284:	a34e      	add	r3, pc, #312	; (adr r3, 80013c0 <interupt_calEncoder+0x338>)
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	f7ff f9dd 	bl	8000648 <__aeabi_dmul>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	4b6a      	ldr	r3, [pc, #424]	; (8001444 <interupt_calEncoder+0x3bc>)
 800129c:	f7ff fafe 	bl	800089c <__aeabi_ddiv>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	ec43 2b17 	vmov	d7, r2, r3
 80012a8:	eeb0 0a47 	vmov.f32	s0, s14
 80012ac:	eef0 0a67 	vmov.f32	s1, s15
 80012b0:	f021 fdbe 	bl	8022e30 <sin>
 80012b4:	ec51 0b10 	vmov	r0, r1, d0
 80012b8:	a355      	add	r3, pc, #340	; (adr r3, 8001410 <interupt_calEncoder+0x388>)
 80012ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012be:	f7ff f9c3 	bl	8000648 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4692      	mov	sl, r2
 80012c8:	469b      	mov	fp, r3
 80012ca:	4b5c      	ldr	r3, [pc, #368]	; (800143c <interupt_calEncoder+0x3b4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f962 	bl	8000598 <__aeabi_f2d>
 80012d4:	a33a      	add	r3, pc, #232	; (adr r3, 80013c0 <interupt_calEncoder+0x338>)
 80012d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012da:	f7ff f9b5 	bl	8000648 <__aeabi_dmul>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	4b56      	ldr	r3, [pc, #344]	; (8001444 <interupt_calEncoder+0x3bc>)
 80012ec:	f7ff fad6 	bl	800089c <__aeabi_ddiv>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	ec43 2b17 	vmov	d7, r2, r3
 80012f8:	eeb0 0a47 	vmov.f32	s0, s14
 80012fc:	eef0 0a67 	vmov.f32	s1, s15
 8001300:	f021 fd42 	bl	8022d88 <cos>
 8001304:	ec51 0b10 	vmov	r0, r1, d0
 8001308:	a343      	add	r3, pc, #268	; (adr r3, 8001418 <interupt_calEncoder+0x390>)
 800130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130e:	f7ff f99b 	bl	8000648 <__aeabi_dmul>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4650      	mov	r0, sl
 8001318:	4659      	mov	r1, fp
 800131a:	f7fe ffdf 	bl	80002dc <__adddf3>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4692      	mov	sl, r2
 8001324:	469b      	mov	fp, r3

	+THETA_COMP_L3*sin(2*encoder_L*pi/180)+THETA_COMP_L4*cos(2*encoder_L*pi/180)));
 8001326:	4b45      	ldr	r3, [pc, #276]	; (800143c <interupt_calEncoder+0x3b4>)
 8001328:	edd3 7a00 	vldr	s15, [r3]
 800132c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001330:	ee17 0a90 	vmov	r0, s15
 8001334:	f7ff f930 	bl	8000598 <__aeabi_f2d>
 8001338:	a321      	add	r3, pc, #132	; (adr r3, 80013c0 <interupt_calEncoder+0x338>)
 800133a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133e:	f7ff f983 	bl	8000648 <__aeabi_dmul>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4610      	mov	r0, r2
 8001348:	4619      	mov	r1, r3
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	4b3d      	ldr	r3, [pc, #244]	; (8001444 <interupt_calEncoder+0x3bc>)
 8001350:	f7ff faa4 	bl	800089c <__aeabi_ddiv>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	ec43 2b17 	vmov	d7, r2, r3
 800135c:	eeb0 0a47 	vmov.f32	s0, s14
 8001360:	eef0 0a67 	vmov.f32	s1, s15
 8001364:	f021 fd64 	bl	8022e30 <sin>
 8001368:	ec51 0b10 	vmov	r0, r1, d0
 800136c:	a32c      	add	r3, pc, #176	; (adr r3, 8001420 <interupt_calEncoder+0x398>)
 800136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001372:	f7ff f969 	bl	8000648 <__aeabi_dmul>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4650      	mov	r0, sl
 800137c:	4659      	mov	r1, fp
 800137e:	f7fe ffad 	bl	80002dc <__adddf3>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4692      	mov	sl, r2
 8001388:	469b      	mov	fp, r3
 800138a:	4b2c      	ldr	r3, [pc, #176]	; (800143c <interupt_calEncoder+0x3b4>)
 800138c:	edd3 7a00 	vldr	s15, [r3]
 8001390:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001394:	ee17 0a90 	vmov	r0, s15
 8001398:	f7ff f8fe 	bl	8000598 <__aeabi_f2d>
 800139c:	a308      	add	r3, pc, #32	; (adr r3, 80013c0 <interupt_calEncoder+0x338>)
 800139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a2:	f7ff f951 	bl	8000648 <__aeabi_dmul>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	4b24      	ldr	r3, [pc, #144]	; (8001444 <interupt_calEncoder+0x3bc>)
 80013b4:	f7ff fa72 	bl	800089c <__aeabi_ddiv>
 80013b8:	e050      	b.n	800145c <interupt_calEncoder+0x3d4>
 80013ba:	bf00      	nop
 80013bc:	f3af 8000 	nop.w
 80013c0:	54411744 	.word	0x54411744
 80013c4:	400921fb 	.word	0x400921fb
 80013c8:	4e70a65b 	.word	0x4e70a65b
 80013cc:	3f882f36 	.word	0x3f882f36
 80013d0:	a858793e 	.word	0xa858793e
 80013d4:	3ff1cd35 	.word	0x3ff1cd35
 80013d8:	00000000 	.word	0x00000000
 80013dc:	4078c000 	.word	0x4078c000
 80013e0:	147ae148 	.word	0x147ae148
 80013e4:	4078fbae 	.word	0x4078fbae
 80013e8:	0a3d70a4 	.word	0x0a3d70a4
 80013ec:	4078efd7 	.word	0x4078efd7
 80013f0:	00000000 	.word	0x00000000
 80013f4:	4125eb2e 	.word	0x4125eb2e
 80013f8:	33333333 	.word	0x33333333
 80013fc:	4125f7be 	.word	0x4125f7be
 8001400:	d2f1a9fc 	.word	0xd2f1a9fc
 8001404:	3f50624d 	.word	0x3f50624d
 8001408:	d0353719 	.word	0xd0353719
 800140c:	409a862c 	.word	0x409a862c
 8001410:	aa14ef84 	.word	0xaa14ef84
 8001414:	400ca14f 	.word	0x400ca14f
 8001418:	74decf2e 	.word	0x74decf2e
 800141c:	c05a4d26 	.word	0xc05a4d26
 8001420:	19d7419b 	.word	0x19d7419b
 8001424:	c0710f5a 	.word	0xc0710f5a
 8001428:	200006dc 	.word	0x200006dc
 800142c:	20000218 	.word	0x20000218
 8001430:	43340000 	.word	0x43340000
 8001434:	43b40000 	.word	0x43b40000
 8001438:	c3340000 	.word	0xc3340000
 800143c:	200006e0 	.word	0x200006e0
 8001440:	2000021c 	.word	0x2000021c
 8001444:	40668000 	.word	0x40668000
 8001448:	40790000 	.word	0x40790000
 800144c:	40870800 	.word	0x40870800
 8001450:	40868000 	.word	0x40868000
 8001454:	408f4000 	.word	0x408f4000
 8001458:	20000264 	.word	0x20000264
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	ec43 2b17 	vmov	d7, r2, r3
 8001464:	eeb0 0a47 	vmov.f32	s0, s14
 8001468:	eef0 0a67 	vmov.f32	s1, s15
 800146c:	f021 fc8c 	bl	8022d88 <cos>
 8001470:	ec51 0b10 	vmov	r0, r1, d0
 8001474:	a3fd      	add	r3, pc, #1012	; (adr r3, 800186c <interupt_calEncoder+0x7e4>)
 8001476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147a:	f7ff f8e5 	bl	8000648 <__aeabi_dmul>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4650      	mov	r0, sl
 8001484:	4659      	mov	r1, fp
 8001486:	f7fe ff29 	bl	80002dc <__adddf3>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
			/(THETA_COMP_L0 + theta_comp_gain*(THETA_COMP_L1*sin(encoder_L*pi/180)+THETA_COMP_L2*cos(encoder_L*pi/180)
 800148e:	4620      	mov	r0, r4
 8001490:	4629      	mov	r1, r5
 8001492:	f7ff f8d9 	bl	8000648 <__aeabi_dmul>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4610      	mov	r0, r2
 800149c:	4619      	mov	r1, r3
 800149e:	a3f5      	add	r3, pc, #980	; (adr r3, 8001874 <interupt_calEncoder+0x7ec>)
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	f7fe ff1a 	bl	80002dc <__adddf3>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4640      	mov	r0, r8
 80014ae:	4649      	mov	r1, r9
 80014b0:	f7ff f9f4 	bl	800089c <__aeabi_ddiv>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4610      	mov	r0, r2
 80014ba:	4619      	mov	r1, r3
 80014bc:	f7ff fb9c 	bl	8000bf8 <__aeabi_d2f>
 80014c0:	4603      	mov	r3, r0
	E_speedL = (angle_L) * pi / 180 * TIRE_DIAMETER_L /2 * 1000  / INTERRUPT_TIME*THETA_COMP_L0
 80014c2:	4adf      	ldr	r2, [pc, #892]	; (8001840 <interupt_calEncoder+0x7b8>)
 80014c4:	6013      	str	r3, [r2, #0]
	E_speedR = (angle_R) * pi / 180 * TIRE_DIAMETER_R /2 * 1000 / INTERRUPT_TIME*THETA_COMP_R0
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff f866 	bl	8000598 <__aeabi_f2d>
 80014cc:	a3c4      	add	r3, pc, #784	; (adr r3, 80017e0 <interupt_calEncoder+0x758>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7ff f8b9 	bl	8000648 <__aeabi_dmul>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	4bd8      	ldr	r3, [pc, #864]	; (8001844 <interupt_calEncoder+0x7bc>)
 80014e4:	f7ff f9da 	bl	800089c <__aeabi_ddiv>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4610      	mov	r0, r2
 80014ee:	4619      	mov	r1, r3
 80014f0:	a3bd      	add	r3, pc, #756	; (adr r3, 80017e8 <interupt_calEncoder+0x760>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	f7ff f8a7 	bl	8000648 <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	a3bb      	add	r3, pc, #748	; (adr r3, 80017f0 <interupt_calEncoder+0x768>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7ff f89e 	bl	8000648 <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	a3b8      	add	r3, pc, #736	; (adr r3, 80017f8 <interupt_calEncoder+0x770>)
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	f7ff f895 	bl	8000648 <__aeabi_dmul>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	a3b6      	add	r3, pc, #728	; (adr r3, 8001800 <interupt_calEncoder+0x778>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f9b6 	bl	800089c <__aeabi_ddiv>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4610      	mov	r0, r2
 8001536:	4619      	mov	r1, r3
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	4bc2      	ldr	r3, [pc, #776]	; (8001848 <interupt_calEncoder+0x7c0>)
 800153e:	f7ff f883 	bl	8000648 <__aeabi_dmul>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4610      	mov	r0, r2
 8001548:	4619      	mov	r1, r3
 800154a:	a3af      	add	r3, pc, #700	; (adr r3, 8001808 <interupt_calEncoder+0x780>)
 800154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001550:	f7ff f9a4 	bl	800089c <__aeabi_ddiv>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4610      	mov	r0, r2
 800155a:	4619      	mov	r1, r3
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	4bba      	ldr	r3, [pc, #744]	; (800184c <interupt_calEncoder+0x7c4>)
 8001562:	f7ff f871 	bl	8000648 <__aeabi_dmul>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	4bb7      	ldr	r3, [pc, #732]	; (8001850 <interupt_calEncoder+0x7c8>)
 8001574:	f7ff f992 	bl	800089c <__aeabi_ddiv>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001588:	f7ff f988 	bl	800089c <__aeabi_ddiv>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4610      	mov	r0, r2
 8001592:	4619      	mov	r1, r3
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	4bae      	ldr	r3, [pc, #696]	; (8001854 <interupt_calEncoder+0x7cc>)
 800159a:	f7ff f855 	bl	8000648 <__aeabi_dmul>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	a39a      	add	r3, pc, #616	; (adr r3, 8001810 <interupt_calEncoder+0x788>)
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	f7ff f976 	bl	800089c <__aeabi_ddiv>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	a397      	add	r3, pc, #604	; (adr r3, 8001818 <interupt_calEncoder+0x790>)
 80015ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015be:	f7ff f843 	bl	8000648 <__aeabi_dmul>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4690      	mov	r8, r2
 80015c8:	4699      	mov	r9, r3
			/ (THETA_COMP_R0 + theta_comp_gain*(THETA_COMP_R1*sin(encoder_R*pi/180)+THETA_COMP_R2*cos(encoder_R*pi/180)
 80015ca:	4ba3      	ldr	r3, [pc, #652]	; (8001858 <interupt_calEncoder+0x7d0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ffe2 	bl	8000598 <__aeabi_f2d>
 80015d4:	4604      	mov	r4, r0
 80015d6:	460d      	mov	r5, r1
 80015d8:	4ba0      	ldr	r3, [pc, #640]	; (800185c <interupt_calEncoder+0x7d4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ffdb 	bl	8000598 <__aeabi_f2d>
 80015e2:	a37f      	add	r3, pc, #508	; (adr r3, 80017e0 <interupt_calEncoder+0x758>)
 80015e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e8:	f7ff f82e 	bl	8000648 <__aeabi_dmul>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4610      	mov	r0, r2
 80015f2:	4619      	mov	r1, r3
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	4b92      	ldr	r3, [pc, #584]	; (8001844 <interupt_calEncoder+0x7bc>)
 80015fa:	f7ff f94f 	bl	800089c <__aeabi_ddiv>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	ec43 2b17 	vmov	d7, r2, r3
 8001606:	eeb0 0a47 	vmov.f32	s0, s14
 800160a:	eef0 0a67 	vmov.f32	s1, s15
 800160e:	f021 fc0f 	bl	8022e30 <sin>
 8001612:	ec51 0b10 	vmov	r0, r1, d0
 8001616:	a382      	add	r3, pc, #520	; (adr r3, 8001820 <interupt_calEncoder+0x798>)
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	f7ff f814 	bl	8000648 <__aeabi_dmul>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4692      	mov	sl, r2
 8001626:	469b      	mov	fp, r3
 8001628:	4b8c      	ldr	r3, [pc, #560]	; (800185c <interupt_calEncoder+0x7d4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe ffb3 	bl	8000598 <__aeabi_f2d>
 8001632:	a36b      	add	r3, pc, #428	; (adr r3, 80017e0 <interupt_calEncoder+0x758>)
 8001634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001638:	f7ff f806 	bl	8000648 <__aeabi_dmul>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	4b7e      	ldr	r3, [pc, #504]	; (8001844 <interupt_calEncoder+0x7bc>)
 800164a:	f7ff f927 	bl	800089c <__aeabi_ddiv>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	ec43 2b17 	vmov	d7, r2, r3
 8001656:	eeb0 0a47 	vmov.f32	s0, s14
 800165a:	eef0 0a67 	vmov.f32	s1, s15
 800165e:	f021 fb93 	bl	8022d88 <cos>
 8001662:	ec51 0b10 	vmov	r0, r1, d0
 8001666:	a370      	add	r3, pc, #448	; (adr r3, 8001828 <interupt_calEncoder+0x7a0>)
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	f7fe ffec 	bl	8000648 <__aeabi_dmul>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4650      	mov	r0, sl
 8001676:	4659      	mov	r1, fp
 8001678:	f7fe fe30 	bl	80002dc <__adddf3>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4692      	mov	sl, r2
 8001682:	469b      	mov	fp, r3
							  +THETA_COMP_R3*sin(2*encoder_R*pi/180)+THETA_COMP_R4*cos(2*encoder_R*pi/180)));
 8001684:	4b75      	ldr	r3, [pc, #468]	; (800185c <interupt_calEncoder+0x7d4>)
 8001686:	edd3 7a00 	vldr	s15, [r3]
 800168a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800168e:	ee17 0a90 	vmov	r0, s15
 8001692:	f7fe ff81 	bl	8000598 <__aeabi_f2d>
 8001696:	a352      	add	r3, pc, #328	; (adr r3, 80017e0 <interupt_calEncoder+0x758>)
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	f7fe ffd4 	bl	8000648 <__aeabi_dmul>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	4b65      	ldr	r3, [pc, #404]	; (8001844 <interupt_calEncoder+0x7bc>)
 80016ae:	f7ff f8f5 	bl	800089c <__aeabi_ddiv>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	ec43 2b17 	vmov	d7, r2, r3
 80016ba:	eeb0 0a47 	vmov.f32	s0, s14
 80016be:	eef0 0a67 	vmov.f32	s1, s15
 80016c2:	f021 fbb5 	bl	8022e30 <sin>
 80016c6:	ec51 0b10 	vmov	r0, r1, d0
 80016ca:	a359      	add	r3, pc, #356	; (adr r3, 8001830 <interupt_calEncoder+0x7a8>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7fe ffba 	bl	8000648 <__aeabi_dmul>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4650      	mov	r0, sl
 80016da:	4659      	mov	r1, fp
 80016dc:	f7fe fdfe 	bl	80002dc <__adddf3>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4692      	mov	sl, r2
 80016e6:	469b      	mov	fp, r3
 80016e8:	4b5c      	ldr	r3, [pc, #368]	; (800185c <interupt_calEncoder+0x7d4>)
 80016ea:	edd3 7a00 	vldr	s15, [r3]
 80016ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016f2:	ee17 0a90 	vmov	r0, s15
 80016f6:	f7fe ff4f 	bl	8000598 <__aeabi_f2d>
 80016fa:	a339      	add	r3, pc, #228	; (adr r3, 80017e0 <interupt_calEncoder+0x758>)
 80016fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001700:	f7fe ffa2 	bl	8000648 <__aeabi_dmul>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4610      	mov	r0, r2
 800170a:	4619      	mov	r1, r3
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	4b4c      	ldr	r3, [pc, #304]	; (8001844 <interupt_calEncoder+0x7bc>)
 8001712:	f7ff f8c3 	bl	800089c <__aeabi_ddiv>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	ec43 2b17 	vmov	d7, r2, r3
 800171e:	eeb0 0a47 	vmov.f32	s0, s14
 8001722:	eef0 0a67 	vmov.f32	s1, s15
 8001726:	f021 fb2f 	bl	8022d88 <cos>
 800172a:	ec51 0b10 	vmov	r0, r1, d0
 800172e:	a342      	add	r3, pc, #264	; (adr r3, 8001838 <interupt_calEncoder+0x7b0>)
 8001730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001734:	f7fe ff88 	bl	8000648 <__aeabi_dmul>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4650      	mov	r0, sl
 800173e:	4659      	mov	r1, fp
 8001740:	f7fe fdcc 	bl	80002dc <__adddf3>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
			/ (THETA_COMP_R0 + theta_comp_gain*(THETA_COMP_R1*sin(encoder_R*pi/180)+THETA_COMP_R2*cos(encoder_R*pi/180)
 8001748:	4620      	mov	r0, r4
 800174a:	4629      	mov	r1, r5
 800174c:	f7fe ff7c 	bl	8000648 <__aeabi_dmul>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	a32f      	add	r3, pc, #188	; (adr r3, 8001818 <interupt_calEncoder+0x790>)
 800175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175e:	f7fe fdbd 	bl	80002dc <__adddf3>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4640      	mov	r0, r8
 8001768:	4649      	mov	r1, r9
 800176a:	f7ff f897 	bl	800089c <__aeabi_ddiv>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4610      	mov	r0, r2
 8001774:	4619      	mov	r1, r3
 8001776:	f7ff fa3f 	bl	8000bf8 <__aeabi_d2f>
 800177a:	4603      	mov	r3, r0
	E_speedR = (angle_R) * pi / 180 * TIRE_DIAMETER_R /2 * 1000 / INTERRUPT_TIME*THETA_COMP_R0
 800177c:	4a38      	ldr	r2, [pc, #224]	; (8001860 <interupt_calEncoder+0x7d8>)
 800177e:	6013      	str	r3, [r2, #0]
	E_distanceL += E_speedL * INTERRUPT_TIME;
 8001780:	4b38      	ldr	r3, [pc, #224]	; (8001864 <interupt_calEncoder+0x7dc>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe ff07 	bl	8000598 <__aeabi_f2d>
 800178a:	4604      	mov	r4, r0
 800178c:	460d      	mov	r5, r1
 800178e:	4b2c      	ldr	r3, [pc, #176]	; (8001840 <interupt_calEncoder+0x7b8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe ff00 	bl	8000598 <__aeabi_f2d>
 8001798:	a31d      	add	r3, pc, #116	; (adr r3, 8001810 <interupt_calEncoder+0x788>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	f7fe ff53 	bl	8000648 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4620      	mov	r0, r4
 80017a8:	4629      	mov	r1, r5
 80017aa:	f7fe fd97 	bl	80002dc <__adddf3>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4610      	mov	r0, r2
 80017b4:	4619      	mov	r1, r3
 80017b6:	f7ff fa1f 	bl	8000bf8 <__aeabi_d2f>
 80017ba:	4603      	mov	r3, r0
 80017bc:	4a29      	ldr	r2, [pc, #164]	; (8001864 <interupt_calEncoder+0x7dc>)
 80017be:	6013      	str	r3, [r2, #0]
	E_distanceR += E_speedR * INTERRUPT_TIME;
 80017c0:	4b29      	ldr	r3, [pc, #164]	; (8001868 <interupt_calEncoder+0x7e0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fee7 	bl	8000598 <__aeabi_f2d>
 80017ca:	4604      	mov	r4, r0
 80017cc:	460d      	mov	r5, r1
 80017ce:	4b24      	ldr	r3, [pc, #144]	; (8001860 <interupt_calEncoder+0x7d8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fee0 	bl	8000598 <__aeabi_f2d>
 80017d8:	e050      	b.n	800187c <interupt_calEncoder+0x7f4>
 80017da:	bf00      	nop
 80017dc:	f3af 8000 	nop.w
 80017e0:	54411744 	.word	0x54411744
 80017e4:	400921fb 	.word	0x400921fb
 80017e8:	4e70a65b 	.word	0x4e70a65b
 80017ec:	3f882f36 	.word	0x3f882f36
 80017f0:	a858793e 	.word	0xa858793e
 80017f4:	3ff1cd35 	.word	0x3ff1cd35
 80017f8:	00000000 	.word	0x00000000
 80017fc:	4078c000 	.word	0x4078c000
 8001800:	147ae148 	.word	0x147ae148
 8001804:	4078fbae 	.word	0x4078fbae
 8001808:	5c28f5c3 	.word	0x5c28f5c3
 800180c:	40792a8f 	.word	0x40792a8f
 8001810:	d2f1a9fc 	.word	0xd2f1a9fc
 8001814:	3f50624d 	.word	0x3f50624d
 8001818:	11d3671b 	.word	0x11d3671b
 800181c:	409c0a10 	.word	0x409c0a10
 8001820:	27aee802 	.word	0x27aee802
 8001824:	c0234be5 	.word	0xc0234be5
 8001828:	578a2a91 	.word	0x578a2a91
 800182c:	405f0f59 	.word	0x405f0f59
 8001830:	cccccccd 	.word	0xcccccccd
 8001834:	404d0ccc 	.word	0x404d0ccc
 8001838:	45e8419d 	.word	0x45e8419d
 800183c:	4075ef32 	.word	0x4075ef32
 8001840:	20000228 	.word	0x20000228
 8001844:	40668000 	.word	0x40668000
 8001848:	40790000 	.word	0x40790000
 800184c:	40870800 	.word	0x40870800
 8001850:	40868000 	.word	0x40868000
 8001854:	408f4000 	.word	0x408f4000
 8001858:	20000264 	.word	0x20000264
 800185c:	200006dc 	.word	0x200006dc
 8001860:	2000022c 	.word	0x2000022c
 8001864:	20000220 	.word	0x20000220
 8001868:	20000224 	.word	0x20000224
 800186c:	a96b73c1 	.word	0xa96b73c1
 8001870:	4058baae 	.word	0x4058baae
 8001874:	d0353719 	.word	0xd0353719
 8001878:	409a862c 	.word	0x409a862c
 800187c:	a315      	add	r3, pc, #84	; (adr r3, 80018d4 <interupt_calEncoder+0x84c>)
 800187e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001882:	f7fe fee1 	bl	8000648 <__aeabi_dmul>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4620      	mov	r0, r4
 800188c:	4629      	mov	r1, r5
 800188e:	f7fe fd25 	bl	80002dc <__adddf3>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4610      	mov	r0, r2
 8001898:	4619      	mov	r1, r3
 800189a:	f7ff f9ad 	bl	8000bf8 <__aeabi_d2f>
 800189e:	4603      	mov	r3, r0
 80018a0:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <interupt_calEncoder+0x838>)
 80018a2:	6013      	str	r3, [r2, #0]

	encoder_L0=encoder_L;
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <interupt_calEncoder+0x83c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <interupt_calEncoder+0x840>)
 80018aa:	6013      	str	r3, [r2, #0]
	encoder_R0=encoder_R;
 80018ac:	4b07      	ldr	r3, [pc, #28]	; (80018cc <interupt_calEncoder+0x844>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <interupt_calEncoder+0x848>)
 80018b2:	6013      	str	r3, [r2, #0]

}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018be:	bf00      	nop
 80018c0:	20000224 	.word	0x20000224
 80018c4:	200006e0 	.word	0x200006e0
 80018c8:	2000021c 	.word	0x2000021c
 80018cc:	200006dc 	.word	0x200006dc
 80018d0:	20000218 	.word	0x20000218
 80018d4:	d2f1a9fc 	.word	0xd2f1a9fc
 80018d8:	3f50624d 	.word	0x3f50624d
 80018dc:	00000000 	.word	0x00000000

080018e0 <interupt_calFusion>:


void interupt_calFusion(void) {
 80018e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018e4:	af00      	add	r7, sp, #0


	E_lpf_speedL = straight_alpha * E_lpf_speedL + (1 - straight_alpha) * E_speedL;
 80018e6:	4ba4      	ldr	r3, [pc, #656]	; (8001b78 <interupt_calFusion+0x298>)
 80018e8:	ed93 7a00 	vldr	s14, [r3]
 80018ec:	4ba3      	ldr	r3, [pc, #652]	; (8001b7c <interupt_calFusion+0x29c>)
 80018ee:	edd3 7a00 	vldr	s15, [r3]
 80018f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018f6:	4ba0      	ldr	r3, [pc, #640]	; (8001b78 <interupt_calFusion+0x298>)
 80018f8:	edd3 7a00 	vldr	s15, [r3]
 80018fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001900:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001904:	4b9e      	ldr	r3, [pc, #632]	; (8001b80 <interupt_calFusion+0x2a0>)
 8001906:	edd3 7a00 	vldr	s15, [r3]
 800190a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800190e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001912:	4b9a      	ldr	r3, [pc, #616]	; (8001b7c <interupt_calFusion+0x29c>)
 8001914:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_speedR = straight_alpha * E_lpf_speedR + (1 - straight_alpha) * E_speedR;
 8001918:	4b97      	ldr	r3, [pc, #604]	; (8001b78 <interupt_calFusion+0x298>)
 800191a:	ed93 7a00 	vldr	s14, [r3]
 800191e:	4b99      	ldr	r3, [pc, #612]	; (8001b84 <interupt_calFusion+0x2a4>)
 8001920:	edd3 7a00 	vldr	s15, [r3]
 8001924:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001928:	4b93      	ldr	r3, [pc, #588]	; (8001b78 <interupt_calFusion+0x298>)
 800192a:	edd3 7a00 	vldr	s15, [r3]
 800192e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001932:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001936:	4b94      	ldr	r3, [pc, #592]	; (8001b88 <interupt_calFusion+0x2a8>)
 8001938:	edd3 7a00 	vldr	s15, [r3]
 800193c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001940:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001944:	4b8f      	ldr	r3, [pc, #572]	; (8001b84 <interupt_calFusion+0x2a4>)
 8001946:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_distanceL += E_lpf_speedL * INTERRUPT_TIME;
 800194a:	4b90      	ldr	r3, [pc, #576]	; (8001b8c <interupt_calFusion+0x2ac>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fe22 	bl	8000598 <__aeabi_f2d>
 8001954:	4604      	mov	r4, r0
 8001956:	460d      	mov	r5, r1
 8001958:	4b88      	ldr	r3, [pc, #544]	; (8001b7c <interupt_calFusion+0x29c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f7fe fe1b 	bl	8000598 <__aeabi_f2d>
 8001962:	a383      	add	r3, pc, #524	; (adr r3, 8001b70 <interupt_calFusion+0x290>)
 8001964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001968:	f7fe fe6e 	bl	8000648 <__aeabi_dmul>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4620      	mov	r0, r4
 8001972:	4629      	mov	r1, r5
 8001974:	f7fe fcb2 	bl	80002dc <__adddf3>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4610      	mov	r0, r2
 800197e:	4619      	mov	r1, r3
 8001980:	f7ff f93a 	bl	8000bf8 <__aeabi_d2f>
 8001984:	4603      	mov	r3, r0
 8001986:	4a81      	ldr	r2, [pc, #516]	; (8001b8c <interupt_calFusion+0x2ac>)
 8001988:	6013      	str	r3, [r2, #0]
	E_lpf_distanceR += E_lpf_speedR * INTERRUPT_TIME;
 800198a:	4b81      	ldr	r3, [pc, #516]	; (8001b90 <interupt_calFusion+0x2b0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fe02 	bl	8000598 <__aeabi_f2d>
 8001994:	4604      	mov	r4, r0
 8001996:	460d      	mov	r5, r1
 8001998:	4b7a      	ldr	r3, [pc, #488]	; (8001b84 <interupt_calFusion+0x2a4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fdfb 	bl	8000598 <__aeabi_f2d>
 80019a2:	a373      	add	r3, pc, #460	; (adr r3, 8001b70 <interupt_calFusion+0x290>)
 80019a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a8:	f7fe fe4e 	bl	8000648 <__aeabi_dmul>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4620      	mov	r0, r4
 80019b2:	4629      	mov	r1, r5
 80019b4:	f7fe fc92 	bl	80002dc <__adddf3>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	f7ff f91a 	bl	8000bf8 <__aeabi_d2f>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4a72      	ldr	r2, [pc, #456]	; (8001b90 <interupt_calFusion+0x2b0>)
 80019c8:	6013      	str	r3, [r2, #0]
	//G_hpf_speedR = straight_alpha * (G_hpf_speedL + INTERRUPT_TIME * gf_accel);
	//G_hpf_distanceL += G_hpf_speedL * INTERRUPT_TIME;
	//G_hpf_distanceR += G_hpf_speedR * INTERRUPT_TIME;


	fusion_speedL = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedL;
 80019ca:	4b6b      	ldr	r3, [pc, #428]	; (8001b78 <interupt_calFusion+0x298>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fde2 	bl	8000598 <__aeabi_f2d>
 80019d4:	4604      	mov	r4, r0
 80019d6:	460d      	mov	r5, r1
 80019d8:	4b6e      	ldr	r3, [pc, #440]	; (8001b94 <interupt_calFusion+0x2b4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fddb 	bl	8000598 <__aeabi_f2d>
 80019e2:	4680      	mov	r8, r0
 80019e4:	4689      	mov	r9, r1
 80019e6:	4b6c      	ldr	r3, [pc, #432]	; (8001b98 <interupt_calFusion+0x2b8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fdd4 	bl	8000598 <__aeabi_f2d>
 80019f0:	a35f      	add	r3, pc, #380	; (adr r3, 8001b70 <interupt_calFusion+0x290>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	f7fe fe27 	bl	8000648 <__aeabi_dmul>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4640      	mov	r0, r8
 8001a00:	4649      	mov	r1, r9
 8001a02:	f7fe fc6b 	bl	80002dc <__adddf3>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	f7fe fe1b 	bl	8000648 <__aeabi_dmul>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4614      	mov	r4, r2
 8001a18:	461d      	mov	r5, r3
 8001a1a:	4b57      	ldr	r3, [pc, #348]	; (8001b78 <interupt_calFusion+0x298>)
 8001a1c:	edd3 7a00 	vldr	s15, [r3]
 8001a20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a28:	4b55      	ldr	r3, [pc, #340]	; (8001b80 <interupt_calFusion+0x2a0>)
 8001a2a:	edd3 7a00 	vldr	s15, [r3]
 8001a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a32:	ee17 0a90 	vmov	r0, s15
 8001a36:	f7fe fdaf 	bl	8000598 <__aeabi_f2d>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4620      	mov	r0, r4
 8001a40:	4629      	mov	r1, r5
 8001a42:	f7fe fc4b 	bl	80002dc <__adddf3>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f7ff f8d3 	bl	8000bf8 <__aeabi_d2f>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4a4f      	ldr	r2, [pc, #316]	; (8001b94 <interupt_calFusion+0x2b4>)
 8001a56:	6013      	str	r3, [r2, #0]
	fusion_speedR = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedR;
 8001a58:	4b47      	ldr	r3, [pc, #284]	; (8001b78 <interupt_calFusion+0x298>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fd9b 	bl	8000598 <__aeabi_f2d>
 8001a62:	4604      	mov	r4, r0
 8001a64:	460d      	mov	r5, r1
 8001a66:	4b4b      	ldr	r3, [pc, #300]	; (8001b94 <interupt_calFusion+0x2b4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7fe fd94 	bl	8000598 <__aeabi_f2d>
 8001a70:	4680      	mov	r8, r0
 8001a72:	4689      	mov	r9, r1
 8001a74:	4b48      	ldr	r3, [pc, #288]	; (8001b98 <interupt_calFusion+0x2b8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fd8d 	bl	8000598 <__aeabi_f2d>
 8001a7e:	a33c      	add	r3, pc, #240	; (adr r3, 8001b70 <interupt_calFusion+0x290>)
 8001a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a84:	f7fe fde0 	bl	8000648 <__aeabi_dmul>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4640      	mov	r0, r8
 8001a8e:	4649      	mov	r1, r9
 8001a90:	f7fe fc24 	bl	80002dc <__adddf3>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4620      	mov	r0, r4
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	f7fe fdd4 	bl	8000648 <__aeabi_dmul>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4614      	mov	r4, r2
 8001aa6:	461d      	mov	r5, r3
 8001aa8:	4b33      	ldr	r3, [pc, #204]	; (8001b78 <interupt_calFusion+0x298>)
 8001aaa:	edd3 7a00 	vldr	s15, [r3]
 8001aae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ab2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ab6:	4b34      	ldr	r3, [pc, #208]	; (8001b88 <interupt_calFusion+0x2a8>)
 8001ab8:	edd3 7a00 	vldr	s15, [r3]
 8001abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac0:	ee17 0a90 	vmov	r0, s15
 8001ac4:	f7fe fd68 	bl	8000598 <__aeabi_f2d>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4620      	mov	r0, r4
 8001ace:	4629      	mov	r1, r5
 8001ad0:	f7fe fc04 	bl	80002dc <__adddf3>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	f7ff f88c 	bl	8000bf8 <__aeabi_d2f>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4a2e      	ldr	r2, [pc, #184]	; (8001b9c <interupt_calFusion+0x2bc>)
 8001ae4:	6013      	str	r3, [r2, #0]
	fusion_distanceL += fusion_speedL * INTERRUPT_TIME;
 8001ae6:	4b2e      	ldr	r3, [pc, #184]	; (8001ba0 <interupt_calFusion+0x2c0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe fd54 	bl	8000598 <__aeabi_f2d>
 8001af0:	4604      	mov	r4, r0
 8001af2:	460d      	mov	r5, r1
 8001af4:	4b27      	ldr	r3, [pc, #156]	; (8001b94 <interupt_calFusion+0x2b4>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd4d 	bl	8000598 <__aeabi_f2d>
 8001afe:	a31c      	add	r3, pc, #112	; (adr r3, 8001b70 <interupt_calFusion+0x290>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	f7fe fda0 	bl	8000648 <__aeabi_dmul>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	4629      	mov	r1, r5
 8001b10:	f7fe fbe4 	bl	80002dc <__adddf3>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f7ff f86c 	bl	8000bf8 <__aeabi_d2f>
 8001b20:	4603      	mov	r3, r0
 8001b22:	4a1f      	ldr	r2, [pc, #124]	; (8001ba0 <interupt_calFusion+0x2c0>)
 8001b24:	6013      	str	r3, [r2, #0]
	fusion_distanceR += fusion_speedR * INTERRUPT_TIME;
 8001b26:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <interupt_calFusion+0x2c4>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fd34 	bl	8000598 <__aeabi_f2d>
 8001b30:	4604      	mov	r4, r0
 8001b32:	460d      	mov	r5, r1
 8001b34:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <interupt_calFusion+0x2bc>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7fe fd2d 	bl	8000598 <__aeabi_f2d>
 8001b3e:	a30c      	add	r3, pc, #48	; (adr r3, 8001b70 <interupt_calFusion+0x290>)
 8001b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b44:	f7fe fd80 	bl	8000648 <__aeabi_dmul>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	4629      	mov	r1, r5
 8001b50:	f7fe fbc4 	bl	80002dc <__adddf3>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f7ff f84c 	bl	8000bf8 <__aeabi_d2f>
 8001b60:	4603      	mov	r3, r0
 8001b62:	4a10      	ldr	r2, [pc, #64]	; (8001ba4 <interupt_calFusion+0x2c4>)
 8001b64:	6013      	str	r3, [r2, #0]

}
 8001b66:	bf00      	nop
 8001b68:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b6c:	f3af 8000 	nop.w
 8001b70:	d2f1a9fc 	.word	0xd2f1a9fc
 8001b74:	3f50624d 	.word	0x3f50624d
 8001b78:	20000260 	.word	0x20000260
 8001b7c:	20000238 	.word	0x20000238
 8001b80:	20000228 	.word	0x20000228
 8001b84:	2000023c 	.word	0x2000023c
 8001b88:	2000022c 	.word	0x2000022c
 8001b8c:	20000230 	.word	0x20000230
 8001b90:	20000234 	.word	0x20000234
 8001b94:	20000258 	.word	0x20000258
 8001b98:	20000284 	.word	0x20000284
 8001b9c:	2000025c 	.word	0x2000025c
 8001ba0:	20000250 	.word	0x20000250
 8001ba4:	20000254 	.word	0x20000254

08001ba8 <reset_gyro>:
float accelY_offset;

float angle_speed_ave[10];


void reset_gyro(void) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
	int s = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]
	angle = 0;
 8001bb2:	4b3c      	ldr	r3, [pc, #240]	; (8001ca4 <reset_gyro+0xfc>)
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
	omegaZ_offset=0;
 8001bba:	4b3b      	ldr	r3, [pc, #236]	; (8001ca8 <reset_gyro+0x100>)
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]

	for (s = 1; s <= 1000; s++) {
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	e026      	b.n	8001c16 <reset_gyro+0x6e>
		//ICM20602_DataUpdate();
		omegaZ_offset += gyro.omega_z;
 8001bc8:	4b38      	ldr	r3, [pc, #224]	; (8001cac <reset_gyro+0x104>)
 8001bca:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bce:	4b36      	ldr	r3, [pc, #216]	; (8001ca8 <reset_gyro+0x100>)
 8001bd0:	edd3 7a00 	vldr	s15, [r3]
 8001bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd8:	4b33      	ldr	r3, [pc, #204]	; (8001ca8 <reset_gyro+0x100>)
 8001bda:	edc3 7a00 	vstr	s15, [r3]
		omegaX_offset += gyro.omega_x;
 8001bde:	4b33      	ldr	r3, [pc, #204]	; (8001cac <reset_gyro+0x104>)
 8001be0:	ed93 7a00 	vldr	s14, [r3]
 8001be4:	4b32      	ldr	r3, [pc, #200]	; (8001cb0 <reset_gyro+0x108>)
 8001be6:	edd3 7a00 	vldr	s15, [r3]
 8001bea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bee:	4b30      	ldr	r3, [pc, #192]	; (8001cb0 <reset_gyro+0x108>)
 8001bf0:	edc3 7a00 	vstr	s15, [r3]
		accelY_offset += gyro.accel_y;
 8001bf4:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <reset_gyro+0x104>)
 8001bf6:	ed93 7a04 	vldr	s14, [r3, #16]
 8001bfa:	4b2e      	ldr	r3, [pc, #184]	; (8001cb4 <reset_gyro+0x10c>)
 8001bfc:	edd3 7a00 	vldr	s15, [r3]
 8001c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c04:	4b2b      	ldr	r3, [pc, #172]	; (8001cb4 <reset_gyro+0x10c>)
 8001c06:	edc3 7a00 	vstr	s15, [r3]
		wait_ms_NoReset(1);
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	f006 fbc8 	bl	80083a0 <wait_ms_NoReset>
	for (s = 1; s <= 1000; s++) {
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3301      	adds	r3, #1
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c1c:	ddd4      	ble.n	8001bc8 <reset_gyro+0x20>
	}
	omegaZ_offset = omegaZ_offset / 1000;
 8001c1e:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <reset_gyro+0x100>)
 8001c20:	ed93 7a00 	vldr	s14, [r3]
 8001c24:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001cb8 <reset_gyro+0x110>
 8001c28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <reset_gyro+0x100>)
 8001c2e:	edc3 7a00 	vstr	s15, [r3]
	omegaX_offset = omegaX_offset / 1000;
 8001c32:	4b1f      	ldr	r3, [pc, #124]	; (8001cb0 <reset_gyro+0x108>)
 8001c34:	ed93 7a00 	vldr	s14, [r3]
 8001c38:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001cb8 <reset_gyro+0x110>
 8001c3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c40:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <reset_gyro+0x108>)
 8001c42:	edc3 7a00 	vstr	s15, [r3]
	accelY_offset = accelY_offset / 1000;
 8001c46:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <reset_gyro+0x10c>)
 8001c48:	ed93 7a00 	vldr	s14, [r3]
 8001c4c:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001cb8 <reset_gyro+0x110>
 8001c50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c54:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <reset_gyro+0x10c>)
 8001c56:	edc3 7a00 	vstr	s15, [r3]
	//オフセットする文
	//printf("%f,%f\n",gyro.omega_z,omegaZ_offset);

	angle = 0;
 8001c5a:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <reset_gyro+0xfc>)
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
	anglex = 0;
 8001c62:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <reset_gyro+0x114>)
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
	gf_speed = 0;
 8001c6a:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <reset_gyro+0x118>)
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
	gf_distance = 0;
 8001c72:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <reset_gyro+0x11c>)
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	e009      	b.n	8001c94 <reset_gyro+0xec>
		angle_speed_ave[s] = 0;
 8001c80:	4a11      	ldr	r2, [pc, #68]	; (8001cc8 <reset_gyro+0x120>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3301      	adds	r3, #1
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b09      	cmp	r3, #9
 8001c98:	ddf2      	ble.n	8001c80 <reset_gyro+0xd8>
	}
}
 8001c9a:	bf00      	nop
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000268 	.word	0x20000268
 8001ca8:	2000028c 	.word	0x2000028c
 8001cac:	200006e8 	.word	0x200006e8
 8001cb0:	20000288 	.word	0x20000288
 8001cb4:	20000290 	.word	0x20000290
 8001cb8:	447a0000 	.word	0x447a0000
 8001cbc:	20000270 	.word	0x20000270
 8001cc0:	2000027c 	.word	0x2000027c
 8001cc4:	20000280 	.word	0x20000280
 8001cc8:	20000294 	.word	0x20000294
 8001ccc:	00000000 	.word	0x00000000

08001cd0 <interrupt_calGyro>:

void interrupt_calGyro(void) {
 8001cd0:	b5b0      	push	{r4, r5, r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
	int j = 9;
 8001cd6:	2309      	movs	r3, #9
 8001cd8:	607b      	str	r3, [r7, #4]
	//angle_speed0 = angle_speed;

	for (j = 9; j >= 1; j--) {
 8001cda:	2309      	movs	r3, #9
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	e00d      	b.n	8001cfc <interrupt_calGyro+0x2c>
		angle_speed_ave[j] = angle_speed_ave[j - 1];
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	4aa6      	ldr	r2, [pc, #664]	; (8001f80 <interrupt_calGyro+0x2b0>)
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	49a4      	ldr	r1, [pc, #656]	; (8001f80 <interrupt_calGyro+0x2b0>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	601a      	str	r2, [r3, #0]
	for (j = 9; j >= 1; j--) {
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	dcee      	bgt.n	8001ce0 <interrupt_calGyro+0x10>
	}
	angle_speed_ave[0] = (gyro.omega_z - omegaZ_offset)*GYRO_COEFFICIENT;//*0.9525321206299 ;//* 90 / 96*3690/3600*(3600-17)/3600;
 8001d02:	4ba0      	ldr	r3, [pc, #640]	; (8001f84 <interrupt_calGyro+0x2b4>)
 8001d04:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d08:	4b9f      	ldr	r3, [pc, #636]	; (8001f88 <interrupt_calGyro+0x2b8>)
 8001d0a:	edd3 7a00 	vldr	s15, [r3]
 8001d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d12:	ee17 0a90 	vmov	r0, s15
 8001d16:	f7fe fc3f 	bl	8000598 <__aeabi_f2d>
 8001d1a:	a387      	add	r3, pc, #540	; (adr r3, 8001f38 <interrupt_calGyro+0x268>)
 8001d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d20:	f7fe fc92 	bl	8000648 <__aeabi_dmul>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	a384      	add	r3, pc, #528	; (adr r3, 8001f40 <interrupt_calGyro+0x270>)
 8001d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d32:	f7fe fc89 	bl	8000648 <__aeabi_dmul>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	a382      	add	r3, pc, #520	; (adr r3, 8001f48 <interrupt_calGyro+0x278>)
 8001d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d44:	f7fe fdaa 	bl	800089c <__aeabi_ddiv>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f7fe ff52 	bl	8000bf8 <__aeabi_d2f>
 8001d54:	4603      	mov	r3, r0
 8001d56:	4a8a      	ldr	r2, [pc, #552]	; (8001f80 <interrupt_calGyro+0x2b0>)
 8001d58:	6013      	str	r3, [r2, #0]

	/*angle_speed = ((angle_speed_ave[0] + angle_speed_ave[1] + angle_speed_ave[2]
			+ angle_speed_ave[3] + angle_speed_ave[4] + angle_speed_ave[5]
			+ angle_speed_ave[6] + angle_speed_ave[7] + angle_speed_ave[8]
			+ angle_speed_ave[9]) / 10);*/
	angle_speed = angle_speed_ave[0];
 8001d5a:	4b89      	ldr	r3, [pc, #548]	; (8001f80 <interrupt_calGyro+0x2b0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a8b      	ldr	r2, [pc, #556]	; (8001f8c <interrupt_calGyro+0x2bc>)
 8001d60:	6013      	str	r3, [r2, #0]
	//angle_speed=(gyro.omega_z-omegaZ_offset)*90/94;//deg/sec
	angle_speedx=gyro.omega_x;
 8001d62:	4b88      	ldr	r3, [pc, #544]	; (8001f84 <interrupt_calGyro+0x2b4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a8a      	ldr	r2, [pc, #552]	; (8001f90 <interrupt_calGyro+0x2c0>)
 8001d68:	6013      	str	r3, [r2, #0]
	angle_speedx_set=(gyro.omega_x - omegaX_offset);
 8001d6a:	4b86      	ldr	r3, [pc, #536]	; (8001f84 <interrupt_calGyro+0x2b4>)
 8001d6c:	ed93 7a00 	vldr	s14, [r3]
 8001d70:	4b88      	ldr	r3, [pc, #544]	; (8001f94 <interrupt_calGyro+0x2c4>)
 8001d72:	edd3 7a00 	vldr	s15, [r3]
 8001d76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d7a:	4b87      	ldr	r3, [pc, #540]	; (8001f98 <interrupt_calGyro+0x2c8>)
 8001d7c:	edc3 7a00 	vstr	s15, [r3]
	angle += 0.001 * angle_speed; //deg
 8001d80:	4b86      	ldr	r3, [pc, #536]	; (8001f9c <interrupt_calGyro+0x2cc>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fc07 	bl	8000598 <__aeabi_f2d>
 8001d8a:	4604      	mov	r4, r0
 8001d8c:	460d      	mov	r5, r1
 8001d8e:	4b7f      	ldr	r3, [pc, #508]	; (8001f8c <interrupt_calGyro+0x2bc>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fc00 	bl	8000598 <__aeabi_f2d>
 8001d98:	a36d      	add	r3, pc, #436	; (adr r3, 8001f50 <interrupt_calGyro+0x280>)
 8001d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9e:	f7fe fc53 	bl	8000648 <__aeabi_dmul>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	4620      	mov	r0, r4
 8001da8:	4629      	mov	r1, r5
 8001daa:	f7fe fa97 	bl	80002dc <__adddf3>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	4610      	mov	r0, r2
 8001db4:	4619      	mov	r1, r3
 8001db6:	f7fe ff1f 	bl	8000bf8 <__aeabi_d2f>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	4a77      	ldr	r2, [pc, #476]	; (8001f9c <interrupt_calGyro+0x2cc>)
 8001dbe:	6013      	str	r3, [r2, #0]
	anglex += 0.001 * (gyro.omega_x - omegaX_offset); //deg
 8001dc0:	4b77      	ldr	r3, [pc, #476]	; (8001fa0 <interrupt_calGyro+0x2d0>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe fbe7 	bl	8000598 <__aeabi_f2d>
 8001dca:	4604      	mov	r4, r0
 8001dcc:	460d      	mov	r5, r1
 8001dce:	4b6d      	ldr	r3, [pc, #436]	; (8001f84 <interrupt_calGyro+0x2b4>)
 8001dd0:	ed93 7a00 	vldr	s14, [r3]
 8001dd4:	4b6f      	ldr	r3, [pc, #444]	; (8001f94 <interrupt_calGyro+0x2c4>)
 8001dd6:	edd3 7a00 	vldr	s15, [r3]
 8001dda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dde:	ee17 0a90 	vmov	r0, s15
 8001de2:	f7fe fbd9 	bl	8000598 <__aeabi_f2d>
 8001de6:	a35a      	add	r3, pc, #360	; (adr r3, 8001f50 <interrupt_calGyro+0x280>)
 8001de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dec:	f7fe fc2c 	bl	8000648 <__aeabi_dmul>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4620      	mov	r0, r4
 8001df6:	4629      	mov	r1, r5
 8001df8:	f7fe fa70 	bl	80002dc <__adddf3>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	f7fe fef8 	bl	8000bf8 <__aeabi_d2f>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	4a65      	ldr	r2, [pc, #404]	; (8001fa0 <interrupt_calGyro+0x2d0>)
 8001e0c:	6013      	str	r3, [r2, #0]
	//angle_acceleration = (angle_speed - angle_speed0) * 1000; //deg/sec^2
//+0.12*0.02*angle_speed*angle_speed
	gf_accel = (gyro.accel_y - accelY_offset)*ACCEL_COEFFICIENT*1000*GRAVITATION;
 8001e0e:	4b5d      	ldr	r3, [pc, #372]	; (8001f84 <interrupt_calGyro+0x2b4>)
 8001e10:	ed93 7a04 	vldr	s14, [r3, #16]
 8001e14:	4b63      	ldr	r3, [pc, #396]	; (8001fa4 <interrupt_calGyro+0x2d4>)
 8001e16:	edd3 7a00 	vldr	s15, [r3]
 8001e1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e1e:	ee17 0a90 	vmov	r0, s15
 8001e22:	f7fe fbb9 	bl	8000598 <__aeabi_f2d>
 8001e26:	a34c      	add	r3, pc, #304	; (adr r3, 8001f58 <interrupt_calGyro+0x288>)
 8001e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2c:	f7fe fc0c 	bl	8000648 <__aeabi_dmul>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4610      	mov	r0, r2
 8001e36:	4619      	mov	r1, r3
 8001e38:	a349      	add	r3, pc, #292	; (adr r3, 8001f60 <interrupt_calGyro+0x290>)
 8001e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3e:	f7fe fc03 	bl	8000648 <__aeabi_dmul>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	a347      	add	r3, pc, #284	; (adr r3, 8001f68 <interrupt_calGyro+0x298>)
 8001e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e50:	f7fe fd24 	bl	800089c <__aeabi_ddiv>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	4b51      	ldr	r3, [pc, #324]	; (8001fa8 <interrupt_calGyro+0x2d8>)
 8001e62:	f7fe fbf1 	bl	8000648 <__aeabi_dmul>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	a340      	add	r3, pc, #256	; (adr r3, 8001f70 <interrupt_calGyro+0x2a0>)
 8001e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e74:	f7fe fd12 	bl	800089c <__aeabi_ddiv>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	4b49      	ldr	r3, [pc, #292]	; (8001fac <interrupt_calGyro+0x2dc>)
 8001e86:	f7fe fbdf 	bl	8000648 <__aeabi_dmul>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4610      	mov	r0, r2
 8001e90:	4619      	mov	r1, r3
 8001e92:	a339      	add	r3, pc, #228	; (adr r3, 8001f78 <interrupt_calGyro+0x2a8>)
 8001e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e98:	f7fe fbd6 	bl	8000648 <__aeabi_dmul>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f7fe fea8 	bl	8000bf8 <__aeabi_d2f>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	4a41      	ldr	r2, [pc, #260]	; (8001fb0 <interrupt_calGyro+0x2e0>)
 8001eac:	6013      	str	r3, [r2, #0]
	gf_speed += gf_accel * INTERRUPT_TIME;
 8001eae:	4b41      	ldr	r3, [pc, #260]	; (8001fb4 <interrupt_calGyro+0x2e4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe fb70 	bl	8000598 <__aeabi_f2d>
 8001eb8:	4604      	mov	r4, r0
 8001eba:	460d      	mov	r5, r1
 8001ebc:	4b3c      	ldr	r3, [pc, #240]	; (8001fb0 <interrupt_calGyro+0x2e0>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe fb69 	bl	8000598 <__aeabi_f2d>
 8001ec6:	a322      	add	r3, pc, #136	; (adr r3, 8001f50 <interrupt_calGyro+0x280>)
 8001ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ecc:	f7fe fbbc 	bl	8000648 <__aeabi_dmul>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	4629      	mov	r1, r5
 8001ed8:	f7fe fa00 	bl	80002dc <__adddf3>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f7fe fe88 	bl	8000bf8 <__aeabi_d2f>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	4a32      	ldr	r2, [pc, #200]	; (8001fb4 <interrupt_calGyro+0x2e4>)
 8001eec:	6013      	str	r3, [r2, #0]
	gf_distance += gf_speed * INTERRUPT_TIME;
 8001eee:	4b32      	ldr	r3, [pc, #200]	; (8001fb8 <interrupt_calGyro+0x2e8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7fe fb50 	bl	8000598 <__aeabi_f2d>
 8001ef8:	4604      	mov	r4, r0
 8001efa:	460d      	mov	r5, r1
 8001efc:	4b2d      	ldr	r3, [pc, #180]	; (8001fb4 <interrupt_calGyro+0x2e4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fb49 	bl	8000598 <__aeabi_f2d>
 8001f06:	a312      	add	r3, pc, #72	; (adr r3, 8001f50 <interrupt_calGyro+0x280>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe fb9c 	bl	8000648 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4620      	mov	r0, r4
 8001f16:	4629      	mov	r1, r5
 8001f18:	f7fe f9e0 	bl	80002dc <__adddf3>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	f7fe fe68 	bl	8000bf8 <__aeabi_d2f>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	4a23      	ldr	r2, [pc, #140]	; (8001fb8 <interrupt_calGyro+0x2e8>)
 8001f2c:	6013      	str	r3, [r2, #0]




}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bdb0      	pop	{r4, r5, r7, pc}
 8001f36:	bf00      	nop
 8001f38:	70a3d70a 	.word	0x70a3d70a
 8001f3c:	3fef0a3d 	.word	0x3fef0a3d
 8001f40:	00000000 	.word	0x00000000
 8001f44:	40acd400 	.word	0x40acd400
 8001f48:	00000000 	.word	0x00000000
 8001f4c:	40ac2000 	.word	0x40ac2000
 8001f50:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f54:	3f50624d 	.word	0x3f50624d
 8001f58:	0fcf80dc 	.word	0x0fcf80dc
 8001f5c:	3ff0a423 	.word	0x3ff0a423
 8001f60:	00000000 	.word	0x00000000
 8001f64:	4078c000 	.word	0x4078c000
 8001f68:	00000000 	.word	0x00000000
 8001f6c:	4077d000 	.word	0x4077d000
 8001f70:	00000000 	.word	0x00000000
 8001f74:	407a7000 	.word	0x407a7000
 8001f78:	3a92a305 	.word	0x3a92a305
 8001f7c:	40239d01 	.word	0x40239d01
 8001f80:	20000294 	.word	0x20000294
 8001f84:	200006e8 	.word	0x200006e8
 8001f88:	2000028c 	.word	0x2000028c
 8001f8c:	2000026c 	.word	0x2000026c
 8001f90:	20000274 	.word	0x20000274
 8001f94:	20000288 	.word	0x20000288
 8001f98:	20000278 	.word	0x20000278
 8001f9c:	20000268 	.word	0x20000268
 8001fa0:	20000270 	.word	0x20000270
 8001fa4:	20000290 	.word	0x20000290
 8001fa8:	40790000 	.word	0x40790000
 8001fac:	408f4000 	.word	0x408f4000
 8001fb0:	20000284 	.word	0x20000284
 8001fb4:	2000027c 	.word	0x2000027c
 8001fb8:	20000280 	.word	0x20000280
 8001fbc:	00000000 	.word	0x00000000

08001fc0 <battcheak>:
/*******************************************************************/
/*	バッテリーの確認				(battcheak)	*/
/*******************************************************************/
/*	バッテリーの残電圧のチェックし、小さい場合は機能の停止を行う．	．						*/
/*******************************************************************/
void battcheak(void){
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
int i;
	for(i = 0;i <= 20-1;i++){
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	e00f      	b.n	8001fec <battcheak+0x2c>
		g_V_battery[i]=pl_getbatt();
 8001fcc:	f005 ff8c 	bl	8007ee8 <pl_getbatt>
 8001fd0:	eef0 7a40 	vmov.f32	s15, s0
 8001fd4:	4a34      	ldr	r2, [pc, #208]	; (80020a8 <battcheak+0xe8>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	edc3 7a00 	vstr	s15, [r3]
		wait_ms(10);
 8001fe0:	200a      	movs	r0, #10
 8001fe2:	f006 f999 	bl	8008318 <wait_ms>
	for(i = 0;i <= 20-1;i++){
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	607b      	str	r3, [r7, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b13      	cmp	r3, #19
 8001ff0:	ddec      	ble.n	8001fcc <battcheak+0xc>
	}

	g_V_battery_mean=0;
 8001ff2:	4b2e      	ldr	r3, [pc, #184]	; (80020ac <battcheak+0xec>)
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
	for(i = 0;i <= 20-1;i++){
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	607b      	str	r3, [r7, #4]
 8001ffe:	e010      	b.n	8002022 <battcheak+0x62>
	g_V_battery_mean+=g_V_battery[i];
 8002000:	4a29      	ldr	r2, [pc, #164]	; (80020a8 <battcheak+0xe8>)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	ed93 7a00 	vldr	s14, [r3]
 800200c:	4b27      	ldr	r3, [pc, #156]	; (80020ac <battcheak+0xec>)
 800200e:	edd3 7a00 	vldr	s15, [r3]
 8002012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002016:	4b25      	ldr	r3, [pc, #148]	; (80020ac <battcheak+0xec>)
 8002018:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0;i <= 20-1;i++){
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3301      	adds	r3, #1
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b13      	cmp	r3, #19
 8002026:	ddeb      	ble.n	8002000 <battcheak+0x40>
	}
	g_V_battery_mean/=20;
 8002028:	4b20      	ldr	r3, [pc, #128]	; (80020ac <battcheak+0xec>)
 800202a:	ed93 7a00 	vldr	s14, [r3]
 800202e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8002032:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002036:	4b1d      	ldr	r3, [pc, #116]	; (80020ac <battcheak+0xec>)
 8002038:	edc3 7a00 	vstr	s15, [r3]
	printf("BATT=%f\n",g_V_battery_mean);
 800203c:	4b1b      	ldr	r3, [pc, #108]	; (80020ac <battcheak+0xec>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe faa9 	bl	8000598 <__aeabi_f2d>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	4819      	ldr	r0, [pc, #100]	; (80020b0 <battcheak+0xf0>)
 800204c:	f01e fc90 	bl	8020970 <iprintf>
	//printf("%f",g_V_battery_mean);
	if(g_V_battery_mean <= BATTLIMIT){
 8002050:	4b16      	ldr	r3, [pc, #88]	; (80020ac <battcheak+0xec>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fa9f 	bl	8000598 <__aeabi_f2d>
 800205a:	a311      	add	r3, pc, #68	; (adr r3, 80020a0 <battcheak+0xe0>)
 800205c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002060:	f7fe fd6e 	bl	8000b40 <__aeabi_dcmple>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d100      	bne.n	800206c <battcheak+0xac>
		pl_r_blue_LED(OFF);
		pl_l_blue_LED(OFF);
		wait_ms(500);
		}
	}
}
 800206a:	e014      	b.n	8002096 <battcheak+0xd6>
		pl_r_blue_LED(ON);
 800206c:	2001      	movs	r0, #1
 800206e:	f005 f9c3 	bl	80073f8 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8002072:	2001      	movs	r0, #1
 8002074:	f005 f9d2 	bl	800741c <pl_l_blue_LED>
		wait_ms(500);
 8002078:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800207c:	f006 f94c 	bl	8008318 <wait_ms>
		pl_r_blue_LED(OFF);
 8002080:	2000      	movs	r0, #0
 8002082:	f005 f9b9 	bl	80073f8 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8002086:	2000      	movs	r0, #0
 8002088:	f005 f9c8 	bl	800741c <pl_l_blue_LED>
		wait_ms(500);
 800208c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002090:	f006 f942 	bl	8008318 <wait_ms>
		pl_r_blue_LED(ON);
 8002094:	e7ea      	b.n	800206c <battcheak+0xac>
}
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	f3af 8000 	nop.w
 80020a0:	9999999a 	.word	0x9999999a
 80020a4:	400d9999 	.word	0x400d9999
 80020a8:	20000488 	.word	0x20000488
 80020ac:	200004d8 	.word	0x200004d8
 80020b0:	080242f0 	.word	0x080242f0

080020b4 <interupt_calSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー処理)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を処理する割り込み関数．						*/
/*******************************************************************/
void interupt_calSensor(void){
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
	int j;

	pl_interupt_getSensor();
 80020ba:	f006 f8b3 	bl	8008224 <pl_interupt_getSensor>

	for (j = 19; j >= 1; j--) {
 80020be:	2313      	movs	r3, #19
 80020c0:	607b      	str	r3, [r7, #4]
 80020c2:	e037      	b.n	8002134 <interupt_calSensor+0x80>
		//g_V_battery[j] = g_V_battery[j - 1];
		g_sensor[0][j] = g_sensor[0][j - 1];
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	4a56      	ldr	r2, [pc, #344]	; (8002224 <interupt_calSensor+0x170>)
 80020ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80020ce:	4955      	ldr	r1, [pc, #340]	; (8002224 <interupt_calSensor+0x170>)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[1][j] = g_sensor[1][j - 1];
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3b01      	subs	r3, #1
 80020da:	4a52      	ldr	r2, [pc, #328]	; (8002224 <interupt_calSensor+0x170>)
 80020dc:	3314      	adds	r3, #20
 80020de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80020e2:	4950      	ldr	r1, [pc, #320]	; (8002224 <interupt_calSensor+0x170>)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3314      	adds	r3, #20
 80020e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[2][j] = g_sensor[2][j - 1];
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	4a4c      	ldr	r2, [pc, #304]	; (8002224 <interupt_calSensor+0x170>)
 80020f2:	3328      	adds	r3, #40	; 0x28
 80020f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80020f8:	494a      	ldr	r1, [pc, #296]	; (8002224 <interupt_calSensor+0x170>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3328      	adds	r3, #40	; 0x28
 80020fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[3][j] = g_sensor[3][j - 1];
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3b01      	subs	r3, #1
 8002106:	4a47      	ldr	r2, [pc, #284]	; (8002224 <interupt_calSensor+0x170>)
 8002108:	333c      	adds	r3, #60	; 0x3c
 800210a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800210e:	4945      	ldr	r1, [pc, #276]	; (8002224 <interupt_calSensor+0x170>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	333c      	adds	r3, #60	; 0x3c
 8002114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[4][j] = g_sensor[4][j - 1];
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3b01      	subs	r3, #1
 800211c:	4a41      	ldr	r2, [pc, #260]	; (8002224 <interupt_calSensor+0x170>)
 800211e:	3350      	adds	r3, #80	; 0x50
 8002120:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002124:	493f      	ldr	r1, [pc, #252]	; (8002224 <interupt_calSensor+0x170>)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3350      	adds	r3, #80	; 0x50
 800212a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 19; j >= 1; j--) {
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3b01      	subs	r3, #1
 8002132:	607b      	str	r3, [r7, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	dcc4      	bgt.n	80020c4 <interupt_calSensor+0x10>
	}
	//g_V_battery[0] = g_V_batt;
	g_sensor[0][0] = g_sensor_on[0] - g_sensor_off[0];
 800213a:	4b3b      	ldr	r3, [pc, #236]	; (8002228 <interupt_calSensor+0x174>)
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	4b3a      	ldr	r3, [pc, #232]	; (800222c <interupt_calSensor+0x178>)
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	4a37      	ldr	r2, [pc, #220]	; (8002224 <interupt_calSensor+0x170>)
 8002148:	6013      	str	r3, [r2, #0]
	g_sensor[1][0] = g_sensor_on[1] - g_sensor_off[1];
 800214a:	4b37      	ldr	r3, [pc, #220]	; (8002228 <interupt_calSensor+0x174>)
 800214c:	885b      	ldrh	r3, [r3, #2]
 800214e:	461a      	mov	r2, r3
 8002150:	4b36      	ldr	r3, [pc, #216]	; (800222c <interupt_calSensor+0x178>)
 8002152:	885b      	ldrh	r3, [r3, #2]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	4a33      	ldr	r2, [pc, #204]	; (8002224 <interupt_calSensor+0x170>)
 8002158:	6513      	str	r3, [r2, #80]	; 0x50
	g_sensor[2][0] = g_sensor_on[2] - g_sensor_off[2];
 800215a:	4b33      	ldr	r3, [pc, #204]	; (8002228 <interupt_calSensor+0x174>)
 800215c:	889b      	ldrh	r3, [r3, #4]
 800215e:	461a      	mov	r2, r3
 8002160:	4b32      	ldr	r3, [pc, #200]	; (800222c <interupt_calSensor+0x178>)
 8002162:	889b      	ldrh	r3, [r3, #4]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	4a2f      	ldr	r2, [pc, #188]	; (8002224 <interupt_calSensor+0x170>)
 8002168:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	g_sensor[3][0] = g_sensor_on[3] - g_sensor_off[3];
 800216c:	4b2e      	ldr	r3, [pc, #184]	; (8002228 <interupt_calSensor+0x174>)
 800216e:	88db      	ldrh	r3, [r3, #6]
 8002170:	461a      	mov	r2, r3
 8002172:	4b2e      	ldr	r3, [pc, #184]	; (800222c <interupt_calSensor+0x178>)
 8002174:	88db      	ldrh	r3, [r3, #6]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	4a2a      	ldr	r2, [pc, #168]	; (8002224 <interupt_calSensor+0x170>)
 800217a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	g_sensor[4][0] = g_sensor_on[4] - g_sensor_off[4];
 800217e:	4b2a      	ldr	r3, [pc, #168]	; (8002228 <interupt_calSensor+0x174>)
 8002180:	891b      	ldrh	r3, [r3, #8]
 8002182:	461a      	mov	r2, r3
 8002184:	4b29      	ldr	r3, [pc, #164]	; (800222c <interupt_calSensor+0x178>)
 8002186:	891b      	ldrh	r3, [r3, #8]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	4a26      	ldr	r2, [pc, #152]	; (8002224 <interupt_calSensor+0x170>)
 800218c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	for (j = 0; j <= 4; j++) {
 8002190:	2300      	movs	r3, #0
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	e03d      	b.n	8002212 <interupt_calSensor+0x15e>
		g_sensor_diff[j]=g_sensor[j][0]-g_sensor[j][11];
 8002196:	4923      	ldr	r1, [pc, #140]	; (8002224 <interupt_calSensor+0x170>)
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	011b      	lsls	r3, r3, #4
 80021a2:	440b      	add	r3, r1
 80021a4:	6819      	ldr	r1, [r3, #0]
 80021a6:	481f      	ldr	r0, [pc, #124]	; (8002224 <interupt_calSensor+0x170>)
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	4403      	add	r3, r0
 80021b4:	332c      	adds	r3, #44	; 0x2c
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	1aca      	subs	r2, r1, r3
 80021ba:	491d      	ldr	r1, [pc, #116]	; (8002230 <interupt_calSensor+0x17c>)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][6];
		g_sensor_mean[j] = (g_sensor[j][0] + g_sensor[j][1] + g_sensor[j][2]) / 3;
 80021c2:	4918      	ldr	r1, [pc, #96]	; (8002224 <interupt_calSensor+0x170>)
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	011b      	lsls	r3, r3, #4
 80021ce:	440b      	add	r3, r1
 80021d0:	6819      	ldr	r1, [r3, #0]
 80021d2:	4814      	ldr	r0, [pc, #80]	; (8002224 <interupt_calSensor+0x170>)
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	011b      	lsls	r3, r3, #4
 80021de:	4403      	add	r3, r0
 80021e0:	3304      	adds	r3, #4
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4419      	add	r1, r3
 80021e6:	480f      	ldr	r0, [pc, #60]	; (8002224 <interupt_calSensor+0x170>)
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	4403      	add	r3, r0
 80021f4:	3308      	adds	r3, #8
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	440b      	add	r3, r1
 80021fa:	4a0e      	ldr	r2, [pc, #56]	; (8002234 <interupt_calSensor+0x180>)
 80021fc:	fb82 1203 	smull	r1, r2, r2, r3
 8002200:	17db      	asrs	r3, r3, #31
 8002202:	1ad2      	subs	r2, r2, r3
 8002204:	490c      	ldr	r1, [pc, #48]	; (8002238 <interupt_calSensor+0x184>)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 0; j <= 4; j++) {
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3301      	adds	r3, #1
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b04      	cmp	r3, #4
 8002216:	ddbe      	ble.n	8002196 <interupt_calSensor+0xe2>
//	}
//	g_V_battery_mean/=20;



}
 8002218:	bf00      	nop
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	200002bc 	.word	0x200002bc
 8002228:	20000710 	.word	0x20000710
 800222c:	2000071c 	.word	0x2000071c
 8002230:	2000044c 	.word	0x2000044c
 8002234:	55555556 	.word	0x55555556
 8002238:	20000474 	.word	0x20000474

0800223c <Control_mode_Init>:

uint8_t noGoalPillarMode;

float g_V_L,g_V_R;

void Control_mode_Init(void){
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0

	modeacc = 0;
 8002240:	4b08      	ldr	r3, [pc, #32]	; (8002264 <Control_mode_Init+0x28>)
 8002242:	2200      	movs	r2, #0
 8002244:	701a      	strb	r2, [r3, #0]
	g_MotorEnd_flag=0;
 8002246:	4b08      	ldr	r3, [pc, #32]	; (8002268 <Control_mode_Init+0x2c>)
 8002248:	2200      	movs	r2, #0
 800224a:	701a      	strb	r2, [r3, #0]
	mollifier_timer=0;
 800224c:	4b07      	ldr	r3, [pc, #28]	; (800226c <Control_mode_Init+0x30>)
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
	noGoalPillarMode=0;
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <Control_mode_Init+0x34>)
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]

}
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	2000052c 	.word	0x2000052c
 8002268:	20000809 	.word	0x20000809
 800226c:	20000804 	.word	0x20000804
 8002270:	2000052d 	.word	0x2000052d

08002274 <get_duty>:


void get_duty(float V_L, float V_R,int *duty_L,int *duty_R) {
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	ed87 0a03 	vstr	s0, [r7, #12]
 800227e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
//トルクの方向決定
// BATT_MEANをいつか可変にしたい願望
	if (V_L >= 0) {
 8002286:	edd7 7a03 	vldr	s15, [r7, #12]
 800228a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800228e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002292:	db14      	blt.n	80022be <get_duty+0x4a>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 8002294:	2001      	movs	r0, #1
 8002296:	f005 fd5d 	bl	8007d54 <pl_L_DriveMotor_mode>
		*duty_L = (int) (V_L / g_V_battery_mean * MAXMOTOR);
 800229a:	4b3d      	ldr	r3, [pc, #244]	; (8002390 <get_duty+0x11c>)
 800229c:	ed93 7a00 	vldr	s14, [r3]
 80022a0:	edd7 6a03 	vldr	s13, [r7, #12]
 80022a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022a8:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002394 <get_duty+0x120>
 80022ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022b4:	ee17 2a90 	vmov	r2, s15
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	e015      	b.n	80022ea <get_duty+0x76>
	}
	else{
		pl_L_DriveMotor_mode(MOTOR_BACK);
 80022be:	2002      	movs	r0, #2
 80022c0:	f005 fd48 	bl	8007d54 <pl_L_DriveMotor_mode>
	    *duty_L = (int) (-V_L / g_V_battery_mean * MAXMOTOR);
 80022c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80022c8:	eef1 6a67 	vneg.f32	s13, s15
 80022cc:	4b30      	ldr	r3, [pc, #192]	; (8002390 <get_duty+0x11c>)
 80022ce:	ed93 7a00 	vldr	s14, [r3]
 80022d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022d6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002394 <get_duty+0x120>
 80022da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022e2:	ee17 2a90 	vmov	r2, s15
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	601a      	str	r2, [r3, #0]
	}
	if (V_R >= 0) {
 80022ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80022ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f6:	db14      	blt.n	8002322 <get_duty+0xae>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 80022f8:	2001      	movs	r0, #1
 80022fa:	f005 fd53 	bl	8007da4 <pl_R_DriveMotor_mode>
		*duty_R = (int) (V_R / g_V_battery_mean * MAXMOTOR);
 80022fe:	4b24      	ldr	r3, [pc, #144]	; (8002390 <get_duty+0x11c>)
 8002300:	ed93 7a00 	vldr	s14, [r3]
 8002304:	edd7 6a02 	vldr	s13, [r7, #8]
 8002308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800230c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002394 <get_duty+0x120>
 8002310:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002314:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002318:	ee17 2a90 	vmov	r2, s15
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	e015      	b.n	800234e <get_duty+0xda>
	}
	else{
		pl_R_DriveMotor_mode(MOTOR_BACK);
 8002322:	2002      	movs	r0, #2
 8002324:	f005 fd3e 	bl	8007da4 <pl_R_DriveMotor_mode>
	    *duty_R = (int) (-V_R / g_V_battery_mean * MAXMOTOR);
 8002328:	edd7 7a02 	vldr	s15, [r7, #8]
 800232c:	eef1 6a67 	vneg.f32	s13, s15
 8002330:	4b17      	ldr	r3, [pc, #92]	; (8002390 <get_duty+0x11c>)
 8002332:	ed93 7a00 	vldr	s14, [r3]
 8002336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800233a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002394 <get_duty+0x120>
 800233e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002342:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002346:	ee17 2a90 	vmov	r2, s15
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	601a      	str	r2, [r3, #0]
	}
	*duty_L=*duty_L;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	601a      	str	r2, [r3, #0]
	*duty_R=*duty_R;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	601a      	str	r2, [r3, #0]
	//XX
	if (*duty_L >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f240 628c 	movw	r2, #1676	; 0x68c
 8002366:	4293      	cmp	r3, r2
 8002368:	dd03      	ble.n	8002372 <get_duty+0xfe>
		*duty_L = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f240 628d 	movw	r2, #1677	; 0x68d
 8002370:	601a      	str	r2, [r3, #0]
//		pl_r_blue_LED(ON);
	}
	if (*duty_R >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f240 628c 	movw	r2, #1676	; 0x68c
 800237a:	4293      	cmp	r3, r2
 800237c:	dd03      	ble.n	8002386 <get_duty+0x112>
		*duty_R = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	f240 628d 	movw	r2, #1677	; 0x68d
 8002384:	601a      	str	r2, [r3, #0]
//		pl_l_blue_LED(ON);
	}

}
 8002386:	bf00      	nop
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	200004d8 	.word	0x200004d8
 8002394:	44d1e000 	.word	0x44d1e000

08002398 <interupt_DriveMotor>:



void interupt_DriveMotor(void){
 8002398:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800239c:	b08c      	sub	sp, #48	; 0x30
 800239e:	af02      	add	r7, sp, #8
	int duty_L=0, duty_R=0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61bb      	str	r3, [r7, #24]
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
	float V_L=0, V_R=0;
 80023a8:	f04f 0300 	mov.w	r3, #0
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
 80023ae:	f04f 0300 	mov.w	r3, #0
 80023b2:	623b      	str	r3, [r7, #32]
	float PID_all_L,PID_all_R,PID_s,PID_t;
	float PID_w=0;
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
	float feedforward_straight=0,feedforward_turning=0;
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	607b      	str	r3, [r7, #4]



	if (modeacc == 0) {
 80023c6:	4bd2      	ldr	r3, [pc, #840]	; (8002710 <interupt_DriveMotor+0x378>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d108      	bne.n	80023e0 <interupt_DriveMotor+0x48>
		g_acc_flag=4;
 80023ce:	4bd1      	ldr	r3, [pc, #836]	; (8002714 <interupt_DriveMotor+0x37c>)
 80023d0:	2204      	movs	r2, #4
 80023d2:	701a      	strb	r2, [r3, #0]
		g_WallControl_mode=0;
 80023d4:	4bd0      	ldr	r3, [pc, #832]	; (8002718 <interupt_DriveMotor+0x380>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 80023da:	4bd0      	ldr	r3, [pc, #832]	; (800271c <interupt_DriveMotor+0x384>)
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]

	}
	if (modeacc == 1) {
 80023e0:	4bcb      	ldr	r3, [pc, #812]	; (8002710 <interupt_DriveMotor+0x378>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	f040 828f 	bne.w	8002908 <interupt_DriveMotor+0x570>
		g_wallCut_mode=1;
 80023ea:	4bcc      	ldr	r3, [pc, #816]	; (800271c <interupt_DriveMotor+0x384>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 80023f0:	4bcb      	ldr	r3, [pc, #812]	; (8002720 <interupt_DriveMotor+0x388>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	3301      	adds	r3, #1
 80023f6:	4aca      	ldr	r2, [pc, #808]	; (8002720 <interupt_DriveMotor+0x388>)
 80023f8:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80023fa:	4bca      	ldr	r3, [pc, #808]	; (8002724 <interupt_DriveMotor+0x38c>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe f8ca 	bl	8000598 <__aeabi_f2d>
 8002404:	4604      	mov	r4, r0
 8002406:	460d      	mov	r5, r1
 8002408:	4bc6      	ldr	r3, [pc, #792]	; (8002724 <interupt_DriveMotor+0x38c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe f8c3 	bl	8000598 <__aeabi_f2d>
 8002412:	a3bb      	add	r3, pc, #748	; (adr r3, 8002700 <interupt_DriveMotor+0x368>)
 8002414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002418:	f7fe f916 	bl	8000648 <__aeabi_dmul>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4690      	mov	r8, r2
 8002422:	4699      	mov	r9, r3
 8002424:	4bbf      	ldr	r3, [pc, #764]	; (8002724 <interupt_DriveMotor+0x38c>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe f8b5 	bl	8000598 <__aeabi_f2d>
 800242e:	a3b4      	add	r3, pc, #720	; (adr r3, 8002700 <interupt_DriveMotor+0x368>)
 8002430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002434:	f7fe f908 	bl	8000648 <__aeabi_dmul>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4610      	mov	r0, r2
 800243e:	4619      	mov	r1, r3
 8002440:	a3af      	add	r3, pc, #700	; (adr r3, 8002700 <interupt_DriveMotor+0x368>)
 8002442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002446:	f7fe f8ff 	bl	8000648 <__aeabi_dmul>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800245a:	f7fe fa1f 	bl	800089c <__aeabi_ddiv>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	4640      	mov	r0, r8
 8002464:	4649      	mov	r1, r9
 8002466:	f7fd ff39 	bl	80002dc <__adddf3>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4620      	mov	r0, r4
 8002470:	4629      	mov	r1, r5
 8002472:	f7fd ff33 	bl	80002dc <__adddf3>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4610      	mov	r0, r2
 800247c:	4619      	mov	r1, r3
 800247e:	f7fe fbbb 	bl	8000bf8 <__aeabi_d2f>
 8002482:	4603      	mov	r3, r0
 8002484:	4aa7      	ldr	r2, [pc, #668]	; (8002724 <interupt_DriveMotor+0x38c>)
 8002486:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002488:	4ba6      	ldr	r3, [pc, #664]	; (8002724 <interupt_DriveMotor+0x38c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe f883 	bl	8000598 <__aeabi_f2d>
 8002492:	4604      	mov	r4, r0
 8002494:	460d      	mov	r5, r1
 8002496:	4ba3      	ldr	r3, [pc, #652]	; (8002724 <interupt_DriveMotor+0x38c>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe f87c 	bl	8000598 <__aeabi_f2d>
 80024a0:	a397      	add	r3, pc, #604	; (adr r3, 8002700 <interupt_DriveMotor+0x368>)
 80024a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a6:	f7fe f8cf 	bl	8000648 <__aeabi_dmul>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4620      	mov	r0, r4
 80024b0:	4629      	mov	r1, r5
 80024b2:	f7fd ff13 	bl	80002dc <__adddf3>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	4610      	mov	r0, r2
 80024bc:	4619      	mov	r1, r3
 80024be:	f7fe fb9b 	bl	8000bf8 <__aeabi_d2f>
 80024c2:	4603      	mov	r3, r0
 80024c4:	4a97      	ldr	r2, [pc, #604]	; (8002724 <interupt_DriveMotor+0x38c>)
 80024c6:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80024c8:	4b97      	ldr	r3, [pc, #604]	; (8002728 <interupt_DriveMotor+0x390>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe f863 	bl	8000598 <__aeabi_f2d>
 80024d2:	4604      	mov	r4, r0
 80024d4:	460d      	mov	r5, r1
 80024d6:	4b94      	ldr	r3, [pc, #592]	; (8002728 <interupt_DriveMotor+0x390>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe f85c 	bl	8000598 <__aeabi_f2d>
 80024e0:	a387      	add	r3, pc, #540	; (adr r3, 8002700 <interupt_DriveMotor+0x368>)
 80024e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e6:	f7fe f8af 	bl	8000648 <__aeabi_dmul>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4690      	mov	r8, r2
 80024f0:	4699      	mov	r9, r3
 80024f2:	4b8d      	ldr	r3, [pc, #564]	; (8002728 <interupt_DriveMotor+0x390>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe f84e 	bl	8000598 <__aeabi_f2d>
 80024fc:	a380      	add	r3, pc, #512	; (adr r3, 8002700 <interupt_DriveMotor+0x368>)
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002502:	f7fe f8a1 	bl	8000648 <__aeabi_dmul>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	a37c      	add	r3, pc, #496	; (adr r3, 8002700 <interupt_DriveMotor+0x368>)
 8002510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002514:	f7fe f898 	bl	8000648 <__aeabi_dmul>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4610      	mov	r0, r2
 800251e:	4619      	mov	r1, r3
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002528:	f7fe f9b8 	bl	800089c <__aeabi_ddiv>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4640      	mov	r0, r8
 8002532:	4649      	mov	r1, r9
 8002534:	f7fd fed2 	bl	80002dc <__adddf3>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4620      	mov	r0, r4
 800253e:	4629      	mov	r1, r5
 8002540:	f7fd fecc 	bl	80002dc <__adddf3>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	f7fe fb54 	bl	8000bf8 <__aeabi_d2f>
 8002550:	4603      	mov	r3, r0
 8002552:	4a75      	ldr	r2, [pc, #468]	; (8002728 <interupt_DriveMotor+0x390>)
 8002554:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002556:	4b74      	ldr	r3, [pc, #464]	; (8002728 <interupt_DriveMotor+0x390>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7fe f81c 	bl	8000598 <__aeabi_f2d>
 8002560:	4604      	mov	r4, r0
 8002562:	460d      	mov	r5, r1
 8002564:	4b70      	ldr	r3, [pc, #448]	; (8002728 <interupt_DriveMotor+0x390>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4618      	mov	r0, r3
 800256a:	f7fe f815 	bl	8000598 <__aeabi_f2d>
 800256e:	a364      	add	r3, pc, #400	; (adr r3, 8002700 <interupt_DriveMotor+0x368>)
 8002570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002574:	f7fe f868 	bl	8000648 <__aeabi_dmul>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4620      	mov	r0, r4
 800257e:	4629      	mov	r1, r5
 8002580:	f7fd feac 	bl	80002dc <__adddf3>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	f7fe fb34 	bl	8000bf8 <__aeabi_d2f>
 8002590:	4603      	mov	r3, r0
 8002592:	4a65      	ldr	r2, [pc, #404]	; (8002728 <interupt_DriveMotor+0x390>)
 8002594:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_straight,&straight);
 8002596:	4b65      	ldr	r3, [pc, #404]	; (800272c <interupt_DriveMotor+0x394>)
 8002598:	4a62      	ldr	r2, [pc, #392]	; (8002724 <interupt_DriveMotor+0x38c>)
 800259a:	9201      	str	r2, [sp, #4]
 800259c:	691a      	ldr	r2, [r3, #16]
 800259e:	9200      	str	r2, [sp, #0]
 80025a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025a2:	f006 f8b7 	bl	8008714 <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 80025a6:	4b5f      	ldr	r3, [pc, #380]	; (8002724 <interupt_DriveMotor+0x38c>)
 80025a8:	edd3 7a00 	vldr	s15, [r3]
 80025ac:	4b5e      	ldr	r3, [pc, #376]	; (8002728 <interupt_DriveMotor+0x390>)
 80025ae:	ed93 7a00 	vldr	s14, [r3]
 80025b2:	f107 020c 	add.w	r2, r7, #12
 80025b6:	f107 0310 	add.w	r3, r7, #16
 80025ba:	eef0 0a47 	vmov.f32	s1, s14
 80025be:	eeb0 0a67 	vmov.f32	s0, s15
 80025c2:	4611      	mov	r1, r2
 80025c4:	4618      	mov	r0, r3
 80025c6:	f002 fa3b 	bl	8004a40 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 80025ca:	4b59      	ldr	r3, [pc, #356]	; (8002730 <interupt_DriveMotor+0x398>)
 80025cc:	ed93 7a00 	vldr	s14, [r3]
 80025d0:	4b58      	ldr	r3, [pc, #352]	; (8002734 <interupt_DriveMotor+0x39c>)
 80025d2:	edd3 7a00 	vldr	s15, [r3]
 80025d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025da:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80025de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80025e2:	4b50      	ldr	r3, [pc, #320]	; (8002724 <interupt_DriveMotor+0x38c>)
 80025e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80025e8:	4b53      	ldr	r3, [pc, #332]	; (8002738 <interupt_DriveMotor+0x3a0>)
 80025ea:	edd3 6a00 	vldr	s13, [r3]
 80025ee:	4b4e      	ldr	r3, [pc, #312]	; (8002728 <interupt_DriveMotor+0x390>)
 80025f0:	ed93 6a01 	vldr	s12, [r3, #4]
 80025f4:	1d3a      	adds	r2, r7, #4
 80025f6:	f107 0308 	add.w	r3, r7, #8
 80025fa:	eef0 1a46 	vmov.f32	s3, s12
 80025fe:	eeb0 1a66 	vmov.f32	s2, s13
 8002602:	4611      	mov	r1, r2
 8002604:	eef0 0a67 	vmov.f32	s1, s15
 8002608:	eeb0 0a47 	vmov.f32	s0, s14
 800260c:	4618      	mov	r0, r3
 800260e:	f001 ff6b 	bl	80044e8 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		PID_w = calWallConrol();
 8002612:	f002 fc2d 	bl	8004e70 <calWallConrol>
 8002616:	ed87 0a07 	vstr	s0, [r7, #28]
		V_L = PID_s-PID_t-PID_w+feedforward_straight-feedforward_turning;
 800261a:	ed97 7a04 	vldr	s14, [r7, #16]
 800261e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002622:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002626:	edd7 7a07 	vldr	s15, [r7, #28]
 800262a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800262e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002632:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002636:	edd7 7a01 	vldr	s15, [r7, #4]
 800263a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800263e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+PID_w+feedforward_straight+feedforward_turning;
 8002642:	ed97 7a04 	vldr	s14, [r7, #16]
 8002646:	edd7 7a03 	vldr	s15, [r7, #12]
 800264a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800264e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002652:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002656:	edd7 7a02 	vldr	s15, [r7, #8]
 800265a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800265e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002666:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 800266a:	ed97 7a04 	vldr	s14, [r7, #16]
 800266e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002676:	ee17 0a90 	vmov	r0, s15
 800267a:	f7fd ff8d 	bl	8000598 <__aeabi_f2d>
 800267e:	4604      	mov	r4, r0
 8002680:	460d      	mov	r5, r1
 8002682:	4b2e      	ldr	r3, [pc, #184]	; (800273c <interupt_DriveMotor+0x3a4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7fd ff86 	bl	8000598 <__aeabi_f2d>
 800268c:	a31e      	add	r3, pc, #120	; (adr r3, 8002708 <interupt_DriveMotor+0x370>)
 800268e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002692:	f7fd ffd9 	bl	8000648 <__aeabi_dmul>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4620      	mov	r0, r4
 800269c:	4629      	mov	r1, r5
 800269e:	f7fe fa63 	bl	8000b68 <__aeabi_dcmpgt>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 808d 	beq.w	80027c4 <interupt_DriveMotor+0x42c>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80026aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026ac:	f7fd ff74 	bl	8000598 <__aeabi_f2d>
 80026b0:	4604      	mov	r4, r0
 80026b2:	460d      	mov	r5, r1
 80026b4:	4b21      	ldr	r3, [pc, #132]	; (800273c <interupt_DriveMotor+0x3a4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fd ff6d 	bl	8000598 <__aeabi_f2d>
 80026be:	a312      	add	r3, pc, #72	; (adr r3, 8002708 <interupt_DriveMotor+0x370>)
 80026c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c4:	f7fd ffc0 	bl	8000648 <__aeabi_dmul>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4690      	mov	r8, r2
 80026ce:	4699      	mov	r9, r3
 80026d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80026d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80026d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026dc:	ee17 0a90 	vmov	r0, s15
 80026e0:	f7fd ff5a 	bl	8000598 <__aeabi_f2d>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4640      	mov	r0, r8
 80026ea:	4649      	mov	r1, r9
 80026ec:	f7fd fdf4 	bl	80002d8 <__aeabi_dsub>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4620      	mov	r0, r4
 80026f6:	4629      	mov	r1, r5
 80026f8:	e022      	b.n	8002740 <interupt_DriveMotor+0x3a8>
 80026fa:	bf00      	nop
 80026fc:	f3af 8000 	nop.w
 8002700:	d2f1a9fc 	.word	0xd2f1a9fc
 8002704:	3f50624d 	.word	0x3f50624d
 8002708:	d916872b 	.word	0xd916872b
 800270c:	3feff7ce 	.word	0x3feff7ce
 8002710:	2000052c 	.word	0x2000052c
 8002714:	20000808 	.word	0x20000808
 8002718:	20000594 	.word	0x20000594
 800271c:	20000596 	.word	0x20000596
 8002720:	20000528 	.word	0x20000528
 8002724:	200004dc 	.word	0x200004dc
 8002728:	200004e8 	.word	0x200004e8
 800272c:	200004f4 	.word	0x200004f4
 8002730:	20000238 	.word	0x20000238
 8002734:	2000023c 	.word	0x2000023c
 8002738:	2000026c 	.word	0x2000026c
 800273c:	200004d8 	.word	0x200004d8
 8002740:	f7fd fdcc 	bl	80002dc <__adddf3>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4610      	mov	r0, r2
 800274a:	4619      	mov	r1, r3
 800274c:	f7fe fa54 	bl	8000bf8 <__aeabi_d2f>
 8002750:	4603      	mov	r3, r0
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002754:	6a38      	ldr	r0, [r7, #32]
 8002756:	f7fd ff1f 	bl	8000598 <__aeabi_f2d>
 800275a:	4604      	mov	r4, r0
 800275c:	460d      	mov	r5, r1
 800275e:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <interupt_DriveMotor+0x428>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7fd ff18 	bl	8000598 <__aeabi_f2d>
 8002768:	a313      	add	r3, pc, #76	; (adr r3, 80027b8 <interupt_DriveMotor+0x420>)
 800276a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276e:	f7fd ff6b 	bl	8000648 <__aeabi_dmul>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4690      	mov	r8, r2
 8002778:	4699      	mov	r9, r3
 800277a:	ed97 7a04 	vldr	s14, [r7, #16]
 800277e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002786:	ee17 0a90 	vmov	r0, s15
 800278a:	f7fd ff05 	bl	8000598 <__aeabi_f2d>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4640      	mov	r0, r8
 8002794:	4649      	mov	r1, r9
 8002796:	f7fd fd9f 	bl	80002d8 <__aeabi_dsub>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	4620      	mov	r0, r4
 80027a0:	4629      	mov	r1, r5
 80027a2:	f7fd fd9b 	bl	80002dc <__adddf3>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4610      	mov	r0, r2
 80027ac:	4619      	mov	r1, r3
 80027ae:	f7fe fa23 	bl	8000bf8 <__aeabi_d2f>
 80027b2:	4603      	mov	r3, r0
 80027b4:	623b      	str	r3, [r7, #32]
 80027b6:	e095      	b.n	80028e4 <interupt_DriveMotor+0x54c>
 80027b8:	d916872b 	.word	0xd916872b
 80027bc:	3feff7ce 	.word	0x3feff7ce
 80027c0:	200004d8 	.word	0x200004d8
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 80027c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80027c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80027cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d0:	ee17 0a90 	vmov	r0, s15
 80027d4:	f7fd fee0 	bl	8000598 <__aeabi_f2d>
 80027d8:	4604      	mov	r4, r0
 80027da:	460d      	mov	r5, r1
 80027dc:	4bce      	ldr	r3, [pc, #824]	; (8002b18 <interupt_DriveMotor+0x780>)
 80027de:	edd3 7a00 	vldr	s15, [r3]
 80027e2:	eef1 7a67 	vneg.f32	s15, s15
 80027e6:	ee17 3a90 	vmov	r3, s15
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fd fed4 	bl	8000598 <__aeabi_f2d>
 80027f0:	a3c5      	add	r3, pc, #788	; (adr r3, 8002b08 <interupt_DriveMotor+0x770>)
 80027f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f6:	f7fd ff27 	bl	8000648 <__aeabi_dmul>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4620      	mov	r0, r4
 8002800:	4629      	mov	r1, r5
 8002802:	f7fe f993 	bl	8000b2c <__aeabi_dcmplt>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d06b      	beq.n	80028e4 <interupt_DriveMotor+0x54c>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 800280c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800280e:	f7fd fec3 	bl	8000598 <__aeabi_f2d>
 8002812:	4604      	mov	r4, r0
 8002814:	460d      	mov	r5, r1
 8002816:	4bc0      	ldr	r3, [pc, #768]	; (8002b18 <interupt_DriveMotor+0x780>)
 8002818:	edd3 7a00 	vldr	s15, [r3]
 800281c:	eef1 7a67 	vneg.f32	s15, s15
 8002820:	ee17 3a90 	vmov	r3, s15
 8002824:	4618      	mov	r0, r3
 8002826:	f7fd feb7 	bl	8000598 <__aeabi_f2d>
 800282a:	a3b7      	add	r3, pc, #732	; (adr r3, 8002b08 <interupt_DriveMotor+0x770>)
 800282c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002830:	f7fd ff0a 	bl	8000648 <__aeabi_dmul>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4690      	mov	r8, r2
 800283a:	4699      	mov	r9, r3
 800283c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002840:	edd7 7a02 	vldr	s15, [r7, #8]
 8002844:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002848:	ee17 0a90 	vmov	r0, s15
 800284c:	f7fd fea4 	bl	8000598 <__aeabi_f2d>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4640      	mov	r0, r8
 8002856:	4649      	mov	r1, r9
 8002858:	f7fd fd3e 	bl	80002d8 <__aeabi_dsub>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4620      	mov	r0, r4
 8002862:	4629      	mov	r1, r5
 8002864:	f7fd fd3a 	bl	80002dc <__adddf3>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	f7fe f9c2 	bl	8000bf8 <__aeabi_d2f>
 8002874:	4603      	mov	r3, r0
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002878:	6a38      	ldr	r0, [r7, #32]
 800287a:	f7fd fe8d 	bl	8000598 <__aeabi_f2d>
 800287e:	4604      	mov	r4, r0
 8002880:	460d      	mov	r5, r1
 8002882:	4ba5      	ldr	r3, [pc, #660]	; (8002b18 <interupt_DriveMotor+0x780>)
 8002884:	edd3 7a00 	vldr	s15, [r3]
 8002888:	eef1 7a67 	vneg.f32	s15, s15
 800288c:	ee17 3a90 	vmov	r3, s15
 8002890:	4618      	mov	r0, r3
 8002892:	f7fd fe81 	bl	8000598 <__aeabi_f2d>
 8002896:	a39c      	add	r3, pc, #624	; (adr r3, 8002b08 <interupt_DriveMotor+0x770>)
 8002898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289c:	f7fd fed4 	bl	8000648 <__aeabi_dmul>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4690      	mov	r8, r2
 80028a6:	4699      	mov	r9, r3
 80028a8:	ed97 7a04 	vldr	s14, [r7, #16]
 80028ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80028b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b4:	ee17 0a90 	vmov	r0, s15
 80028b8:	f7fd fe6e 	bl	8000598 <__aeabi_f2d>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4640      	mov	r0, r8
 80028c2:	4649      	mov	r1, r9
 80028c4:	f7fd fd08 	bl	80002d8 <__aeabi_dsub>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4620      	mov	r0, r4
 80028ce:	4629      	mov	r1, r5
 80028d0:	f7fd fd04 	bl	80002dc <__adddf3>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4610      	mov	r0, r2
 80028da:	4619      	mov	r1, r3
 80028dc:	f7fe f98c 	bl	8000bf8 <__aeabi_d2f>
 80028e0:	4603      	mov	r3, r0
 80028e2:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 80028e4:	f107 0214 	add.w	r2, r7, #20
 80028e8:	f107 0318 	add.w	r3, r7, #24
 80028ec:	4611      	mov	r1, r2
 80028ee:	4618      	mov	r0, r3
 80028f0:	edd7 0a08 	vldr	s1, [r7, #32]
 80028f4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80028f8:	f7ff fcbc 	bl	8002274 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	4611      	mov	r1, r2
 8002902:	4618      	mov	r0, r3
 8002904:	f005 fa90 	bl	8007e28 <pl_DriveMotor_duty>
	}
	if (modeacc == 2 || modeacc == 4) {//旋回とスラローム
 8002908:	4b84      	ldr	r3, [pc, #528]	; (8002b1c <interupt_DriveMotor+0x784>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b02      	cmp	r3, #2
 800290e:	d004      	beq.n	800291a <interupt_DriveMotor+0x582>
 8002910:	4b82      	ldr	r3, [pc, #520]	; (8002b1c <interupt_DriveMotor+0x784>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b04      	cmp	r3, #4
 8002916:	f040 8287 	bne.w	8002e28 <interupt_DriveMotor+0xa90>
		g_WallControl_mode=0;
 800291a:	4b81      	ldr	r3, [pc, #516]	; (8002b20 <interupt_DriveMotor+0x788>)
 800291c:	2200      	movs	r2, #0
 800291e:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 8002920:	4b80      	ldr	r3, [pc, #512]	; (8002b24 <interupt_DriveMotor+0x78c>)
 8002922:	2200      	movs	r2, #0
 8002924:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8002926:	4b80      	ldr	r3, [pc, #512]	; (8002b28 <interupt_DriveMotor+0x790>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	3301      	adds	r3, #1
 800292c:	4a7e      	ldr	r2, [pc, #504]	; (8002b28 <interupt_DriveMotor+0x790>)
 800292e:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002930:	4b7e      	ldr	r3, [pc, #504]	; (8002b2c <interupt_DriveMotor+0x794>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4618      	mov	r0, r3
 8002936:	f7fd fe2f 	bl	8000598 <__aeabi_f2d>
 800293a:	4604      	mov	r4, r0
 800293c:	460d      	mov	r5, r1
 800293e:	4b7b      	ldr	r3, [pc, #492]	; (8002b2c <interupt_DriveMotor+0x794>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7fd fe28 	bl	8000598 <__aeabi_f2d>
 8002948:	a371      	add	r3, pc, #452	; (adr r3, 8002b10 <interupt_DriveMotor+0x778>)
 800294a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294e:	f7fd fe7b 	bl	8000648 <__aeabi_dmul>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4690      	mov	r8, r2
 8002958:	4699      	mov	r9, r3
 800295a:	4b74      	ldr	r3, [pc, #464]	; (8002b2c <interupt_DriveMotor+0x794>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	4618      	mov	r0, r3
 8002960:	f7fd fe1a 	bl	8000598 <__aeabi_f2d>
 8002964:	a36a      	add	r3, pc, #424	; (adr r3, 8002b10 <interupt_DriveMotor+0x778>)
 8002966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296a:	f7fd fe6d 	bl	8000648 <__aeabi_dmul>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	4610      	mov	r0, r2
 8002974:	4619      	mov	r1, r3
 8002976:	a366      	add	r3, pc, #408	; (adr r3, 8002b10 <interupt_DriveMotor+0x778>)
 8002978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297c:	f7fd fe64 	bl	8000648 <__aeabi_dmul>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4610      	mov	r0, r2
 8002986:	4619      	mov	r1, r3
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002990:	f7fd ff84 	bl	800089c <__aeabi_ddiv>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4640      	mov	r0, r8
 800299a:	4649      	mov	r1, r9
 800299c:	f7fd fc9e 	bl	80002dc <__adddf3>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4620      	mov	r0, r4
 80029a6:	4629      	mov	r1, r5
 80029a8:	f7fd fc98 	bl	80002dc <__adddf3>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4610      	mov	r0, r2
 80029b2:	4619      	mov	r1, r3
 80029b4:	f7fe f920 	bl	8000bf8 <__aeabi_d2f>
 80029b8:	4603      	mov	r3, r0
 80029ba:	4a5c      	ldr	r2, [pc, #368]	; (8002b2c <interupt_DriveMotor+0x794>)
 80029bc:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 80029be:	4b5b      	ldr	r3, [pc, #364]	; (8002b2c <interupt_DriveMotor+0x794>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fd fde8 	bl	8000598 <__aeabi_f2d>
 80029c8:	4604      	mov	r4, r0
 80029ca:	460d      	mov	r5, r1
 80029cc:	4b57      	ldr	r3, [pc, #348]	; (8002b2c <interupt_DriveMotor+0x794>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fd fde1 	bl	8000598 <__aeabi_f2d>
 80029d6:	a34e      	add	r3, pc, #312	; (adr r3, 8002b10 <interupt_DriveMotor+0x778>)
 80029d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029dc:	f7fd fe34 	bl	8000648 <__aeabi_dmul>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4620      	mov	r0, r4
 80029e6:	4629      	mov	r1, r5
 80029e8:	f7fd fc78 	bl	80002dc <__adddf3>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4610      	mov	r0, r2
 80029f2:	4619      	mov	r1, r3
 80029f4:	f7fe f900 	bl	8000bf8 <__aeabi_d2f>
 80029f8:	4603      	mov	r3, r0
 80029fa:	4a4c      	ldr	r2, [pc, #304]	; (8002b2c <interupt_DriveMotor+0x794>)
 80029fc:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80029fe:	4b4c      	ldr	r3, [pc, #304]	; (8002b30 <interupt_DriveMotor+0x798>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fd fdc8 	bl	8000598 <__aeabi_f2d>
 8002a08:	4604      	mov	r4, r0
 8002a0a:	460d      	mov	r5, r1
 8002a0c:	4b48      	ldr	r3, [pc, #288]	; (8002b30 <interupt_DriveMotor+0x798>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fd fdc1 	bl	8000598 <__aeabi_f2d>
 8002a16:	a33e      	add	r3, pc, #248	; (adr r3, 8002b10 <interupt_DriveMotor+0x778>)
 8002a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1c:	f7fd fe14 	bl	8000648 <__aeabi_dmul>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4690      	mov	r8, r2
 8002a26:	4699      	mov	r9, r3
 8002a28:	4b41      	ldr	r3, [pc, #260]	; (8002b30 <interupt_DriveMotor+0x798>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fd fdb3 	bl	8000598 <__aeabi_f2d>
 8002a32:	a337      	add	r3, pc, #220	; (adr r3, 8002b10 <interupt_DriveMotor+0x778>)
 8002a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a38:	f7fd fe06 	bl	8000648 <__aeabi_dmul>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4610      	mov	r0, r2
 8002a42:	4619      	mov	r1, r3
 8002a44:	a332      	add	r3, pc, #200	; (adr r3, 8002b10 <interupt_DriveMotor+0x778>)
 8002a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4a:	f7fd fdfd 	bl	8000648 <__aeabi_dmul>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4610      	mov	r0, r2
 8002a54:	4619      	mov	r1, r3
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a5e:	f7fd ff1d 	bl	800089c <__aeabi_ddiv>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4640      	mov	r0, r8
 8002a68:	4649      	mov	r1, r9
 8002a6a:	f7fd fc37 	bl	80002dc <__adddf3>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	4620      	mov	r0, r4
 8002a74:	4629      	mov	r1, r5
 8002a76:	f7fd fc31 	bl	80002dc <__adddf3>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4610      	mov	r0, r2
 8002a80:	4619      	mov	r1, r3
 8002a82:	f7fe f8b9 	bl	8000bf8 <__aeabi_d2f>
 8002a86:	4603      	mov	r3, r0
 8002a88:	4a29      	ldr	r2, [pc, #164]	; (8002b30 <interupt_DriveMotor+0x798>)
 8002a8a:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002a8c:	4b28      	ldr	r3, [pc, #160]	; (8002b30 <interupt_DriveMotor+0x798>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7fd fd81 	bl	8000598 <__aeabi_f2d>
 8002a96:	4604      	mov	r4, r0
 8002a98:	460d      	mov	r5, r1
 8002a9a:	4b25      	ldr	r3, [pc, #148]	; (8002b30 <interupt_DriveMotor+0x798>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fd fd7a 	bl	8000598 <__aeabi_f2d>
 8002aa4:	a31a      	add	r3, pc, #104	; (adr r3, 8002b10 <interupt_DriveMotor+0x778>)
 8002aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aaa:	f7fd fdcd 	bl	8000648 <__aeabi_dmul>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	f7fd fc11 	bl	80002dc <__adddf3>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4610      	mov	r0, r2
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f7fe f899 	bl	8000bf8 <__aeabi_d2f>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4a19      	ldr	r2, [pc, #100]	; (8002b30 <interupt_DriveMotor+0x798>)
 8002aca:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_turning,&turning);
 8002acc:	4b19      	ldr	r3, [pc, #100]	; (8002b34 <interupt_DriveMotor+0x79c>)
 8002ace:	4a18      	ldr	r2, [pc, #96]	; (8002b30 <interupt_DriveMotor+0x798>)
 8002ad0:	9201      	str	r2, [sp, #4]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	9200      	str	r2, [sp, #0]
 8002ad6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ad8:	f005 fe1c 	bl	8008714 <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002adc:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <interupt_DriveMotor+0x794>)
 8002ade:	edd3 7a00 	vldr	s15, [r3]
 8002ae2:	4b13      	ldr	r3, [pc, #76]	; (8002b30 <interupt_DriveMotor+0x798>)
 8002ae4:	ed93 7a00 	vldr	s14, [r3]
 8002ae8:	f107 020c 	add.w	r2, r7, #12
 8002aec:	f107 0310 	add.w	r3, r7, #16
 8002af0:	eef0 0a47 	vmov.f32	s1, s14
 8002af4:	eeb0 0a67 	vmov.f32	s0, s15
 8002af8:	4611      	mov	r1, r2
 8002afa:	4618      	mov	r0, r3
 8002afc:	f001 ffa0 	bl	8004a40 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002b00:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <interupt_DriveMotor+0x7a0>)
 8002b02:	ed93 7a00 	vldr	s14, [r3]
 8002b06:	e019      	b.n	8002b3c <interupt_DriveMotor+0x7a4>
 8002b08:	d916872b 	.word	0xd916872b
 8002b0c:	3feff7ce 	.word	0x3feff7ce
 8002b10:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b14:	3f50624d 	.word	0x3f50624d
 8002b18:	200004d8 	.word	0x200004d8
 8002b1c:	2000052c 	.word	0x2000052c
 8002b20:	20000594 	.word	0x20000594
 8002b24:	20000596 	.word	0x20000596
 8002b28:	20000528 	.word	0x20000528
 8002b2c:	200004dc 	.word	0x200004dc
 8002b30:	200004e8 	.word	0x200004e8
 8002b34:	20000508 	.word	0x20000508
 8002b38:	20000238 	.word	0x20000238
 8002b3c:	4b64      	ldr	r3, [pc, #400]	; (8002cd0 <interupt_DriveMotor+0x938>)
 8002b3e:	edd3 7a00 	vldr	s15, [r3]
 8002b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b46:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002b4a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b4e:	4b61      	ldr	r3, [pc, #388]	; (8002cd4 <interupt_DriveMotor+0x93c>)
 8002b50:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b54:	4b60      	ldr	r3, [pc, #384]	; (8002cd8 <interupt_DriveMotor+0x940>)
 8002b56:	edd3 6a00 	vldr	s13, [r3]
 8002b5a:	4b60      	ldr	r3, [pc, #384]	; (8002cdc <interupt_DriveMotor+0x944>)
 8002b5c:	ed93 6a01 	vldr	s12, [r3, #4]
 8002b60:	1d3a      	adds	r2, r7, #4
 8002b62:	f107 0308 	add.w	r3, r7, #8
 8002b66:	eef0 1a46 	vmov.f32	s3, s12
 8002b6a:	eeb0 1a66 	vmov.f32	s2, s13
 8002b6e:	4611      	mov	r1, r2
 8002b70:	eef0 0a67 	vmov.f32	s1, s15
 8002b74:	eeb0 0a47 	vmov.f32	s0, s14
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f001 fcb5 	bl	80044e8 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002b7e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b82:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b92:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b9a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002b9e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ba2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ba6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002baa:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bba:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002bbe:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bca:	ee17 0a90 	vmov	r0, s15
 8002bce:	f7fd fce3 	bl	8000598 <__aeabi_f2d>
 8002bd2:	4604      	mov	r4, r0
 8002bd4:	460d      	mov	r5, r1
 8002bd6:	4b42      	ldr	r3, [pc, #264]	; (8002ce0 <interupt_DriveMotor+0x948>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fd fcdc 	bl	8000598 <__aeabi_f2d>
 8002be0:	a339      	add	r3, pc, #228	; (adr r3, 8002cc8 <interupt_DriveMotor+0x930>)
 8002be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be6:	f7fd fd2f 	bl	8000648 <__aeabi_dmul>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4620      	mov	r0, r4
 8002bf0:	4629      	mov	r1, r5
 8002bf2:	f7fd ffb9 	bl	8000b68 <__aeabi_dcmpgt>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d073      	beq.n	8002ce4 <interupt_DriveMotor+0x94c>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002bfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bfe:	f7fd fccb 	bl	8000598 <__aeabi_f2d>
 8002c02:	4604      	mov	r4, r0
 8002c04:	460d      	mov	r5, r1
 8002c06:	4b36      	ldr	r3, [pc, #216]	; (8002ce0 <interupt_DriveMotor+0x948>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fd fcc4 	bl	8000598 <__aeabi_f2d>
 8002c10:	a32d      	add	r3, pc, #180	; (adr r3, 8002cc8 <interupt_DriveMotor+0x930>)
 8002c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c16:	f7fd fd17 	bl	8000648 <__aeabi_dmul>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4690      	mov	r8, r2
 8002c20:	4699      	mov	r9, r3
 8002c22:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c26:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c2e:	ee17 0a90 	vmov	r0, s15
 8002c32:	f7fd fcb1 	bl	8000598 <__aeabi_f2d>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4640      	mov	r0, r8
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	f7fd fb4b 	bl	80002d8 <__aeabi_dsub>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	4620      	mov	r0, r4
 8002c48:	4629      	mov	r1, r5
 8002c4a:	f7fd fb47 	bl	80002dc <__adddf3>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4610      	mov	r0, r2
 8002c54:	4619      	mov	r1, r3
 8002c56:	f7fd ffcf 	bl	8000bf8 <__aeabi_d2f>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002c5e:	6a38      	ldr	r0, [r7, #32]
 8002c60:	f7fd fc9a 	bl	8000598 <__aeabi_f2d>
 8002c64:	4604      	mov	r4, r0
 8002c66:	460d      	mov	r5, r1
 8002c68:	4b1d      	ldr	r3, [pc, #116]	; (8002ce0 <interupt_DriveMotor+0x948>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fd fc93 	bl	8000598 <__aeabi_f2d>
 8002c72:	a315      	add	r3, pc, #84	; (adr r3, 8002cc8 <interupt_DriveMotor+0x930>)
 8002c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c78:	f7fd fce6 	bl	8000648 <__aeabi_dmul>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4690      	mov	r8, r2
 8002c82:	4699      	mov	r9, r3
 8002c84:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c88:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c90:	ee17 0a90 	vmov	r0, s15
 8002c94:	f7fd fc80 	bl	8000598 <__aeabi_f2d>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4640      	mov	r0, r8
 8002c9e:	4649      	mov	r1, r9
 8002ca0:	f7fd fb1a 	bl	80002d8 <__aeabi_dsub>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4620      	mov	r0, r4
 8002caa:	4629      	mov	r1, r5
 8002cac:	f7fd fb16 	bl	80002dc <__adddf3>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f7fd ff9e 	bl	8000bf8 <__aeabi_d2f>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	623b      	str	r3, [r7, #32]
 8002cc0:	e0a0      	b.n	8002e04 <interupt_DriveMotor+0xa6c>
 8002cc2:	bf00      	nop
 8002cc4:	f3af 8000 	nop.w
 8002cc8:	d916872b 	.word	0xd916872b
 8002ccc:	3feff7ce 	.word	0x3feff7ce
 8002cd0:	2000023c 	.word	0x2000023c
 8002cd4:	200004dc 	.word	0x200004dc
 8002cd8:	2000026c 	.word	0x2000026c
 8002cdc:	200004e8 	.word	0x200004e8
 8002ce0:	200004d8 	.word	0x200004d8
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002ce4:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ce8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf0:	ee17 0a90 	vmov	r0, s15
 8002cf4:	f7fd fc50 	bl	8000598 <__aeabi_f2d>
 8002cf8:	4604      	mov	r4, r0
 8002cfa:	460d      	mov	r5, r1
 8002cfc:	4bd6      	ldr	r3, [pc, #856]	; (8003058 <interupt_DriveMotor+0xcc0>)
 8002cfe:	edd3 7a00 	vldr	s15, [r3]
 8002d02:	eef1 7a67 	vneg.f32	s15, s15
 8002d06:	ee17 3a90 	vmov	r3, s15
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fd fc44 	bl	8000598 <__aeabi_f2d>
 8002d10:	a3cd      	add	r3, pc, #820	; (adr r3, 8003048 <interupt_DriveMotor+0xcb0>)
 8002d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d16:	f7fd fc97 	bl	8000648 <__aeabi_dmul>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4620      	mov	r0, r4
 8002d20:	4629      	mov	r1, r5
 8002d22:	f7fd ff03 	bl	8000b2c <__aeabi_dcmplt>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d06b      	beq.n	8002e04 <interupt_DriveMotor+0xa6c>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002d2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d2e:	f7fd fc33 	bl	8000598 <__aeabi_f2d>
 8002d32:	4604      	mov	r4, r0
 8002d34:	460d      	mov	r5, r1
 8002d36:	4bc8      	ldr	r3, [pc, #800]	; (8003058 <interupt_DriveMotor+0xcc0>)
 8002d38:	edd3 7a00 	vldr	s15, [r3]
 8002d3c:	eef1 7a67 	vneg.f32	s15, s15
 8002d40:	ee17 3a90 	vmov	r3, s15
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7fd fc27 	bl	8000598 <__aeabi_f2d>
 8002d4a:	a3bf      	add	r3, pc, #764	; (adr r3, 8003048 <interupt_DriveMotor+0xcb0>)
 8002d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d50:	f7fd fc7a 	bl	8000648 <__aeabi_dmul>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4690      	mov	r8, r2
 8002d5a:	4699      	mov	r9, r3
 8002d5c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d60:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d68:	ee17 0a90 	vmov	r0, s15
 8002d6c:	f7fd fc14 	bl	8000598 <__aeabi_f2d>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4640      	mov	r0, r8
 8002d76:	4649      	mov	r1, r9
 8002d78:	f7fd faae 	bl	80002d8 <__aeabi_dsub>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4620      	mov	r0, r4
 8002d82:	4629      	mov	r1, r5
 8002d84:	f7fd faaa 	bl	80002dc <__adddf3>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4619      	mov	r1, r3
 8002d90:	f7fd ff32 	bl	8000bf8 <__aeabi_d2f>
 8002d94:	4603      	mov	r3, r0
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002d98:	6a38      	ldr	r0, [r7, #32]
 8002d9a:	f7fd fbfd 	bl	8000598 <__aeabi_f2d>
 8002d9e:	4604      	mov	r4, r0
 8002da0:	460d      	mov	r5, r1
 8002da2:	4bad      	ldr	r3, [pc, #692]	; (8003058 <interupt_DriveMotor+0xcc0>)
 8002da4:	edd3 7a00 	vldr	s15, [r3]
 8002da8:	eef1 7a67 	vneg.f32	s15, s15
 8002dac:	ee17 3a90 	vmov	r3, s15
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fd fbf1 	bl	8000598 <__aeabi_f2d>
 8002db6:	a3a4      	add	r3, pc, #656	; (adr r3, 8003048 <interupt_DriveMotor+0xcb0>)
 8002db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbc:	f7fd fc44 	bl	8000648 <__aeabi_dmul>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4690      	mov	r8, r2
 8002dc6:	4699      	mov	r9, r3
 8002dc8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002dcc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd4:	ee17 0a90 	vmov	r0, s15
 8002dd8:	f7fd fbde 	bl	8000598 <__aeabi_f2d>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4640      	mov	r0, r8
 8002de2:	4649      	mov	r1, r9
 8002de4:	f7fd fa78 	bl	80002d8 <__aeabi_dsub>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4620      	mov	r0, r4
 8002dee:	4629      	mov	r1, r5
 8002df0:	f7fd fa74 	bl	80002dc <__adddf3>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4610      	mov	r0, r2
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	f7fd fefc 	bl	8000bf8 <__aeabi_d2f>
 8002e00:	4603      	mov	r3, r0
 8002e02:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002e04:	f107 0214 	add.w	r2, r7, #20
 8002e08:	f107 0318 	add.w	r3, r7, #24
 8002e0c:	4611      	mov	r1, r2
 8002e0e:	4618      	mov	r0, r3
 8002e10:	edd7 0a08 	vldr	s1, [r7, #32]
 8002e14:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002e18:	f7ff fa2c 	bl	8002274 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4611      	mov	r1, r2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f005 f800 	bl	8007e28 <pl_DriveMotor_duty>
	}
	if (modeacc == 3) {//宴会芸
 8002e28:	4b8c      	ldr	r3, [pc, #560]	; (800305c <interupt_DriveMotor+0xcc4>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b03      	cmp	r3, #3
 8002e2e:	f040 8137 	bne.w	80030a0 <interupt_DriveMotor+0xd08>
		g_WallControl_mode=0;
 8002e32:	4b8b      	ldr	r3, [pc, #556]	; (8003060 <interupt_DriveMotor+0xcc8>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002e38:	4b8a      	ldr	r3, [pc, #552]	; (8003064 <interupt_DriveMotor+0xccc>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8002e3e:	4b8a      	ldr	r3, [pc, #552]	; (8003068 <interupt_DriveMotor+0xcd0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	3301      	adds	r3, #1
 8002e44:	4a88      	ldr	r2, [pc, #544]	; (8003068 <interupt_DriveMotor+0xcd0>)
 8002e46:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002e48:	4b88      	ldr	r3, [pc, #544]	; (800306c <interupt_DriveMotor+0xcd4>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fd fba3 	bl	8000598 <__aeabi_f2d>
 8002e52:	4604      	mov	r4, r0
 8002e54:	460d      	mov	r5, r1
 8002e56:	4b85      	ldr	r3, [pc, #532]	; (800306c <interupt_DriveMotor+0xcd4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fd fb9c 	bl	8000598 <__aeabi_f2d>
 8002e60:	a37b      	add	r3, pc, #492	; (adr r3, 8003050 <interupt_DriveMotor+0xcb8>)
 8002e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e66:	f7fd fbef 	bl	8000648 <__aeabi_dmul>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4690      	mov	r8, r2
 8002e70:	4699      	mov	r9, r3
 8002e72:	4b7e      	ldr	r3, [pc, #504]	; (800306c <interupt_DriveMotor+0xcd4>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fd fb8e 	bl	8000598 <__aeabi_f2d>
 8002e7c:	a374      	add	r3, pc, #464	; (adr r3, 8003050 <interupt_DriveMotor+0xcb8>)
 8002e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e82:	f7fd fbe1 	bl	8000648 <__aeabi_dmul>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	a370      	add	r3, pc, #448	; (adr r3, 8003050 <interupt_DriveMotor+0xcb8>)
 8002e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e94:	f7fd fbd8 	bl	8000648 <__aeabi_dmul>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ea8:	f7fd fcf8 	bl	800089c <__aeabi_ddiv>
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4640      	mov	r0, r8
 8002eb2:	4649      	mov	r1, r9
 8002eb4:	f7fd fa12 	bl	80002dc <__adddf3>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4620      	mov	r0, r4
 8002ebe:	4629      	mov	r1, r5
 8002ec0:	f7fd fa0c 	bl	80002dc <__adddf3>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4610      	mov	r0, r2
 8002eca:	4619      	mov	r1, r3
 8002ecc:	f7fd fe94 	bl	8000bf8 <__aeabi_d2f>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	4a66      	ldr	r2, [pc, #408]	; (800306c <interupt_DriveMotor+0xcd4>)
 8002ed4:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002ed6:	4b65      	ldr	r3, [pc, #404]	; (800306c <interupt_DriveMotor+0xcd4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fd fb5c 	bl	8000598 <__aeabi_f2d>
 8002ee0:	4604      	mov	r4, r0
 8002ee2:	460d      	mov	r5, r1
 8002ee4:	4b61      	ldr	r3, [pc, #388]	; (800306c <interupt_DriveMotor+0xcd4>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fd fb55 	bl	8000598 <__aeabi_f2d>
 8002eee:	a358      	add	r3, pc, #352	; (adr r3, 8003050 <interupt_DriveMotor+0xcb8>)
 8002ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef4:	f7fd fba8 	bl	8000648 <__aeabi_dmul>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4620      	mov	r0, r4
 8002efe:	4629      	mov	r1, r5
 8002f00:	f7fd f9ec 	bl	80002dc <__adddf3>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4610      	mov	r0, r2
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	f7fd fe74 	bl	8000bf8 <__aeabi_d2f>
 8002f10:	4603      	mov	r3, r0
 8002f12:	4a56      	ldr	r2, [pc, #344]	; (800306c <interupt_DriveMotor+0xcd4>)
 8002f14:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002f16:	4b56      	ldr	r3, [pc, #344]	; (8003070 <interupt_DriveMotor+0xcd8>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fd fb3c 	bl	8000598 <__aeabi_f2d>
 8002f20:	4604      	mov	r4, r0
 8002f22:	460d      	mov	r5, r1
 8002f24:	4b52      	ldr	r3, [pc, #328]	; (8003070 <interupt_DriveMotor+0xcd8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fd fb35 	bl	8000598 <__aeabi_f2d>
 8002f2e:	a348      	add	r3, pc, #288	; (adr r3, 8003050 <interupt_DriveMotor+0xcb8>)
 8002f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f34:	f7fd fb88 	bl	8000648 <__aeabi_dmul>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4690      	mov	r8, r2
 8002f3e:	4699      	mov	r9, r3
 8002f40:	4b4b      	ldr	r3, [pc, #300]	; (8003070 <interupt_DriveMotor+0xcd8>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fd fb27 	bl	8000598 <__aeabi_f2d>
 8002f4a:	a341      	add	r3, pc, #260	; (adr r3, 8003050 <interupt_DriveMotor+0xcb8>)
 8002f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f50:	f7fd fb7a 	bl	8000648 <__aeabi_dmul>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4610      	mov	r0, r2
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	a33c      	add	r3, pc, #240	; (adr r3, 8003050 <interupt_DriveMotor+0xcb8>)
 8002f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f62:	f7fd fb71 	bl	8000648 <__aeabi_dmul>
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f76:	f7fd fc91 	bl	800089c <__aeabi_ddiv>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4640      	mov	r0, r8
 8002f80:	4649      	mov	r1, r9
 8002f82:	f7fd f9ab 	bl	80002dc <__adddf3>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	4629      	mov	r1, r5
 8002f8e:	f7fd f9a5 	bl	80002dc <__adddf3>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4610      	mov	r0, r2
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f7fd fe2d 	bl	8000bf8 <__aeabi_d2f>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4a33      	ldr	r2, [pc, #204]	; (8003070 <interupt_DriveMotor+0xcd8>)
 8002fa2:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002fa4:	4b32      	ldr	r3, [pc, #200]	; (8003070 <interupt_DriveMotor+0xcd8>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fd faf5 	bl	8000598 <__aeabi_f2d>
 8002fae:	4604      	mov	r4, r0
 8002fb0:	460d      	mov	r5, r1
 8002fb2:	4b2f      	ldr	r3, [pc, #188]	; (8003070 <interupt_DriveMotor+0xcd8>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fd faee 	bl	8000598 <__aeabi_f2d>
 8002fbc:	a324      	add	r3, pc, #144	; (adr r3, 8003050 <interupt_DriveMotor+0xcb8>)
 8002fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc2:	f7fd fb41 	bl	8000648 <__aeabi_dmul>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4620      	mov	r0, r4
 8002fcc:	4629      	mov	r1, r5
 8002fce:	f7fd f985 	bl	80002dc <__adddf3>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f7fd fe0d 	bl	8000bf8 <__aeabi_d2f>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	4a23      	ldr	r2, [pc, #140]	; (8003070 <interupt_DriveMotor+0xcd8>)
 8002fe2:	6013      	str	r3, [r2, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002fe4:	4b21      	ldr	r3, [pc, #132]	; (800306c <interupt_DriveMotor+0xcd4>)
 8002fe6:	edd3 7a00 	vldr	s15, [r3]
 8002fea:	4b21      	ldr	r3, [pc, #132]	; (8003070 <interupt_DriveMotor+0xcd8>)
 8002fec:	ed93 7a00 	vldr	s14, [r3]
 8002ff0:	f107 020c 	add.w	r2, r7, #12
 8002ff4:	f107 0310 	add.w	r3, r7, #16
 8002ff8:	eef0 0a47 	vmov.f32	s1, s14
 8002ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8003000:	4611      	mov	r1, r2
 8003002:	4618      	mov	r0, r3
 8003004:	f001 fd1c 	bl	8004a40 <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8003008:	ed97 7a04 	vldr	s14, [r7, #16]
 800300c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003010:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003014:	edd7 7a02 	vldr	s15, [r7, #8]
 8003018:	ee37 7a27 	vadd.f32	s14, s14, s15
 800301c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003020:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003024:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8003028:	ed97 7a04 	vldr	s14, [r7, #16]
 800302c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003030:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003034:	edd7 7a02 	vldr	s15, [r7, #8]
 8003038:	ee37 7a27 	vadd.f32	s14, s14, s15
 800303c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003040:	e018      	b.n	8003074 <interupt_DriveMotor+0xcdc>
 8003042:	bf00      	nop
 8003044:	f3af 8000 	nop.w
 8003048:	d916872b 	.word	0xd916872b
 800304c:	3feff7ce 	.word	0x3feff7ce
 8003050:	d2f1a9fc 	.word	0xd2f1a9fc
 8003054:	3f50624d 	.word	0x3f50624d
 8003058:	200004d8 	.word	0x200004d8
 800305c:	2000052c 	.word	0x2000052c
 8003060:	20000594 	.word	0x20000594
 8003064:	20000596 	.word	0x20000596
 8003068:	20000528 	.word	0x20000528
 800306c:	200004dc 	.word	0x200004dc
 8003070:	200004e8 	.word	0x200004e8
 8003074:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003078:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 800307c:	f107 0214 	add.w	r2, r7, #20
 8003080:	f107 0318 	add.w	r3, r7, #24
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	edd7 0a08 	vldr	s1, [r7, #32]
 800308c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8003090:	f7ff f8f0 	bl	8002274 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	4611      	mov	r1, r2
 800309a:	4618      	mov	r0, r3
 800309c:	f004 fec4 	bl	8007e28 <pl_DriveMotor_duty>
	}if (modeacc == 5) {//前壁制御
 80030a0:	4bd3      	ldr	r3, [pc, #844]	; (80033f0 <interupt_DriveMotor+0x1058>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b05      	cmp	r3, #5
 80030a6:	d137      	bne.n	8003118 <interupt_DriveMotor+0xd80>
		g_WallControl_mode=0;
 80030a8:	4bd2      	ldr	r3, [pc, #840]	; (80033f4 <interupt_DriveMotor+0x105c>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 80030ae:	4bd2      	ldr	r3, [pc, #840]	; (80033f8 <interupt_DriveMotor+0x1060>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
		//calFrontWallConrol(&PID_frontwall_l,&PID_frontwall_r);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 80030b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80030b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80030bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80030c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80030cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030d0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 80030d4:	ed97 7a04 	vldr	s14, [r7, #16]
 80030d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80030dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80030e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80030ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030f0:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 80030f4:	f107 0214 	add.w	r2, r7, #20
 80030f8:	f107 0318 	add.w	r3, r7, #24
 80030fc:	4611      	mov	r1, r2
 80030fe:	4618      	mov	r0, r3
 8003100:	edd7 0a08 	vldr	s1, [r7, #32]
 8003104:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8003108:	f7ff f8b4 	bl	8002274 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4611      	mov	r1, r2
 8003112:	4618      	mov	r0, r3
 8003114:	f004 fe88 	bl	8007e28 <pl_DriveMotor_duty>
	}if (modeacc == 6) {//ネイピア加速
 8003118:	4bb5      	ldr	r3, [pc, #724]	; (80033f0 <interupt_DriveMotor+0x1058>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b06      	cmp	r3, #6
 800311e:	f040 8105 	bne.w	800332c <interupt_DriveMotor+0xf94>
		g_WallControl_mode=0;
 8003122:	4bb4      	ldr	r3, [pc, #720]	; (80033f4 <interupt_DriveMotor+0x105c>)
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8003128:	4bb3      	ldr	r3, [pc, #716]	; (80033f8 <interupt_DriveMotor+0x1060>)
 800312a:	2200      	movs	r2, #0
 800312c:	701a      	strb	r2, [r3, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 800312e:	4bb3      	ldr	r3, [pc, #716]	; (80033fc <interupt_DriveMotor+0x1064>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	4618      	mov	r0, r3
 8003134:	f7fd fa30 	bl	8000598 <__aeabi_f2d>
 8003138:	4604      	mov	r4, r0
 800313a:	460d      	mov	r5, r1
 800313c:	4baf      	ldr	r3, [pc, #700]	; (80033fc <interupt_DriveMotor+0x1064>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f7fd fa29 	bl	8000598 <__aeabi_f2d>
 8003146:	a3a8      	add	r3, pc, #672	; (adr r3, 80033e8 <interupt_DriveMotor+0x1050>)
 8003148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314c:	f7fd fa7c 	bl	8000648 <__aeabi_dmul>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4690      	mov	r8, r2
 8003156:	4699      	mov	r9, r3
 8003158:	4ba8      	ldr	r3, [pc, #672]	; (80033fc <interupt_DriveMotor+0x1064>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4618      	mov	r0, r3
 800315e:	f7fd fa1b 	bl	8000598 <__aeabi_f2d>
 8003162:	a3a1      	add	r3, pc, #644	; (adr r3, 80033e8 <interupt_DriveMotor+0x1050>)
 8003164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003168:	f7fd fa6e 	bl	8000648 <__aeabi_dmul>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4610      	mov	r0, r2
 8003172:	4619      	mov	r1, r3
 8003174:	a39c      	add	r3, pc, #624	; (adr r3, 80033e8 <interupt_DriveMotor+0x1050>)
 8003176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317a:	f7fd fa65 	bl	8000648 <__aeabi_dmul>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4610      	mov	r0, r2
 8003184:	4619      	mov	r1, r3
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800318e:	f7fd fb85 	bl	800089c <__aeabi_ddiv>
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	4640      	mov	r0, r8
 8003198:	4649      	mov	r1, r9
 800319a:	f7fd f89f 	bl	80002dc <__adddf3>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	4620      	mov	r0, r4
 80031a4:	4629      	mov	r1, r5
 80031a6:	f7fd f899 	bl	80002dc <__adddf3>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4610      	mov	r0, r2
 80031b0:	4619      	mov	r1, r3
 80031b2:	f7fd fd21 	bl	8000bf8 <__aeabi_d2f>
 80031b6:	4603      	mov	r3, r0
 80031b8:	4a90      	ldr	r2, [pc, #576]	; (80033fc <interupt_DriveMotor+0x1064>)
 80031ba:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 80031bc:	4b8f      	ldr	r3, [pc, #572]	; (80033fc <interupt_DriveMotor+0x1064>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fd f9e9 	bl	8000598 <__aeabi_f2d>
 80031c6:	4604      	mov	r4, r0
 80031c8:	460d      	mov	r5, r1
 80031ca:	4b8c      	ldr	r3, [pc, #560]	; (80033fc <interupt_DriveMotor+0x1064>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fd f9e2 	bl	8000598 <__aeabi_f2d>
 80031d4:	a384      	add	r3, pc, #528	; (adr r3, 80033e8 <interupt_DriveMotor+0x1050>)
 80031d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031da:	f7fd fa35 	bl	8000648 <__aeabi_dmul>
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	4620      	mov	r0, r4
 80031e4:	4629      	mov	r1, r5
 80031e6:	f7fd f879 	bl	80002dc <__adddf3>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	4610      	mov	r0, r2
 80031f0:	4619      	mov	r1, r3
 80031f2:	f7fd fd01 	bl	8000bf8 <__aeabi_d2f>
 80031f6:	4603      	mov	r3, r0
 80031f8:	4a80      	ldr	r2, [pc, #512]	; (80033fc <interupt_DriveMotor+0x1064>)
 80031fa:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME;// + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80031fc:	4b80      	ldr	r3, [pc, #512]	; (8003400 <interupt_DriveMotor+0x1068>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	4618      	mov	r0, r3
 8003202:	f7fd f9c9 	bl	8000598 <__aeabi_f2d>
 8003206:	4604      	mov	r4, r0
 8003208:	460d      	mov	r5, r1
 800320a:	4b7d      	ldr	r3, [pc, #500]	; (8003400 <interupt_DriveMotor+0x1068>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7fd f9c2 	bl	8000598 <__aeabi_f2d>
 8003214:	a374      	add	r3, pc, #464	; (adr r3, 80033e8 <interupt_DriveMotor+0x1050>)
 8003216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321a:	f7fd fa15 	bl	8000648 <__aeabi_dmul>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4620      	mov	r0, r4
 8003224:	4629      	mov	r1, r5
 8003226:	f7fd f859 	bl	80002dc <__adddf3>
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	4610      	mov	r0, r2
 8003230:	4619      	mov	r1, r3
 8003232:	f7fd fce1 	bl	8000bf8 <__aeabi_d2f>
 8003236:	4603      	mov	r3, r0
 8003238:	4a71      	ldr	r2, [pc, #452]	; (8003400 <interupt_DriveMotor+0x1068>)
 800323a:	6093      	str	r3, [r2, #8]
		cal_mollifier_table(Mollifier_turning,&turning);//角速度と角加速度はここで決定
 800323c:	4b71      	ldr	r3, [pc, #452]	; (8003404 <interupt_DriveMotor+0x106c>)
 800323e:	edd3 6a00 	vldr	s13, [r3]
 8003242:	ed93 7a01 	vldr	s14, [r3, #4]
 8003246:	edd3 7a02 	vldr	s15, [r3, #8]
 800324a:	486d      	ldr	r0, [pc, #436]	; (8003400 <interupt_DriveMotor+0x1068>)
 800324c:	eeb0 0a66 	vmov.f32	s0, s13
 8003250:	eef0 0a47 	vmov.f32	s1, s14
 8003254:	eeb0 1a67 	vmov.f32	s2, s15
 8003258:	f005 fdb6 	bl	8008dc8 <cal_mollifier_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 800325c:	4b67      	ldr	r3, [pc, #412]	; (80033fc <interupt_DriveMotor+0x1064>)
 800325e:	edd3 7a00 	vldr	s15, [r3]
 8003262:	4b67      	ldr	r3, [pc, #412]	; (8003400 <interupt_DriveMotor+0x1068>)
 8003264:	ed93 7a00 	vldr	s14, [r3]
 8003268:	f107 020c 	add.w	r2, r7, #12
 800326c:	f107 0310 	add.w	r3, r7, #16
 8003270:	eef0 0a47 	vmov.f32	s1, s14
 8003274:	eeb0 0a67 	vmov.f32	s0, s15
 8003278:	4611      	mov	r1, r2
 800327a:	4618      	mov	r0, r3
 800327c:	f001 fbe0 	bl	8004a40 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8003280:	4b61      	ldr	r3, [pc, #388]	; (8003408 <interupt_DriveMotor+0x1070>)
 8003282:	ed93 7a00 	vldr	s14, [r3]
 8003286:	4b61      	ldr	r3, [pc, #388]	; (800340c <interupt_DriveMotor+0x1074>)
 8003288:	edd3 7a00 	vldr	s15, [r3]
 800328c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003290:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003294:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003298:	4b58      	ldr	r3, [pc, #352]	; (80033fc <interupt_DriveMotor+0x1064>)
 800329a:	edd3 7a01 	vldr	s15, [r3, #4]
 800329e:	4b5c      	ldr	r3, [pc, #368]	; (8003410 <interupt_DriveMotor+0x1078>)
 80032a0:	edd3 6a00 	vldr	s13, [r3]
 80032a4:	4b56      	ldr	r3, [pc, #344]	; (8003400 <interupt_DriveMotor+0x1068>)
 80032a6:	ed93 6a01 	vldr	s12, [r3, #4]
 80032aa:	1d3a      	adds	r2, r7, #4
 80032ac:	f107 0308 	add.w	r3, r7, #8
 80032b0:	eef0 1a46 	vmov.f32	s3, s12
 80032b4:	eeb0 1a66 	vmov.f32	s2, s13
 80032b8:	4611      	mov	r1, r2
 80032ba:	eef0 0a67 	vmov.f32	s1, s15
 80032be:	eeb0 0a47 	vmov.f32	s0, s14
 80032c2:	4618      	mov	r0, r3
 80032c4:	f001 f910 	bl	80044e8 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 80032c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80032cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80032d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80032d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80032e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032e4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 80032e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80032ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80032f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80032f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003304:	edc7 7a08 	vstr	s15, [r7, #32]
//			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
//			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8003308:	f107 0214 	add.w	r2, r7, #20
 800330c:	f107 0318 	add.w	r3, r7, #24
 8003310:	4611      	mov	r1, r2
 8003312:	4618      	mov	r0, r3
 8003314:	edd7 0a08 	vldr	s1, [r7, #32]
 8003318:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800331c:	f7fe ffaa 	bl	8002274 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4611      	mov	r1, r2
 8003326:	4618      	mov	r0, r3
 8003328:	f004 fd7e 	bl	8007e28 <pl_DriveMotor_duty>

	}if (modeacc == 100) {
 800332c:	4b30      	ldr	r3, [pc, #192]	; (80033f0 <interupt_DriveMotor+0x1058>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b64      	cmp	r3, #100	; 0x64
 8003332:	d14b      	bne.n	80033cc <interupt_DriveMotor+0x1034>
		straight.velocity = 0;
 8003334:	4b31      	ldr	r3, [pc, #196]	; (80033fc <interupt_DriveMotor+0x1064>)
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
		turning.velocity=0;
 800333c:	4b30      	ldr	r3, [pc, #192]	; (8003400 <interupt_DriveMotor+0x1068>)
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8003344:	4b2d      	ldr	r3, [pc, #180]	; (80033fc <interupt_DriveMotor+0x1064>)
 8003346:	edd3 7a00 	vldr	s15, [r3]
 800334a:	4b2d      	ldr	r3, [pc, #180]	; (8003400 <interupt_DriveMotor+0x1068>)
 800334c:	ed93 7a00 	vldr	s14, [r3]
 8003350:	f107 020c 	add.w	r2, r7, #12
 8003354:	f107 0310 	add.w	r3, r7, #16
 8003358:	eef0 0a47 	vmov.f32	s1, s14
 800335c:	eeb0 0a67 	vmov.f32	s0, s15
 8003360:	4611      	mov	r1, r2
 8003362:	4618      	mov	r0, r3
 8003364:	f001 fb6c 	bl	8004a40 <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8003368:	ed97 7a04 	vldr	s14, [r7, #16]
 800336c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003370:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003374:	edd7 7a02 	vldr	s15, [r7, #8]
 8003378:	ee37 7a27 	vadd.f32	s14, s14, s15
 800337c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003380:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003384:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8003388:	ed97 7a04 	vldr	s14, [r7, #16]
 800338c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003390:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003394:	edd7 7a02 	vldr	s15, [r7, #8]
 8003398:	ee37 7a27 	vadd.f32	s14, s14, s15
 800339c:	edd7 7a01 	vldr	s15, [r7, #4]
 80033a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033a4:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 80033a8:	f107 0214 	add.w	r2, r7, #20
 80033ac:	f107 0318 	add.w	r3, r7, #24
 80033b0:	4611      	mov	r1, r2
 80033b2:	4618      	mov	r0, r3
 80033b4:	edd7 0a08 	vldr	s1, [r7, #32]
 80033b8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80033bc:	f7fe ff5a 	bl	8002274 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4611      	mov	r1, r2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f004 fd2e 	bl	8007e28 <pl_DriveMotor_duty>
	}
		g_V_L=(float)(V_L);//V_L;
 80033cc:	4a11      	ldr	r2, [pc, #68]	; (8003414 <interupt_DriveMotor+0x107c>)
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	6013      	str	r3, [r2, #0]
		g_V_R=(float)(V_R);//V_R;
 80033d2:	4a11      	ldr	r2, [pc, #68]	; (8003418 <interupt_DriveMotor+0x1080>)
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	6013      	str	r3, [r2, #0]



}
 80033d8:	bf00      	nop
 80033da:	3728      	adds	r7, #40	; 0x28
 80033dc:	46bd      	mov	sp, r7
 80033de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033e2:	bf00      	nop
 80033e4:	f3af 8000 	nop.w
 80033e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80033ec:	3f50624d 	.word	0x3f50624d
 80033f0:	2000052c 	.word	0x2000052c
 80033f4:	20000594 	.word	0x20000594
 80033f8:	20000596 	.word	0x20000596
 80033fc:	200004dc 	.word	0x200004dc
 8003400:	200004e8 	.word	0x200004e8
 8003404:	2000051c 	.word	0x2000051c
 8003408:	20000238 	.word	0x20000238
 800340c:	2000023c 	.word	0x2000023c
 8003410:	2000026c 	.word	0x2000026c
 8003414:	20000530 	.word	0x20000530
 8003418:	20000534 	.word	0x20000534

0800341c <straight_table2>:



float straight_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration,MOTOR_MODE motor_mode) {
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af00      	add	r7, sp, #0
 8003422:	ed87 0a05 	vstr	s0, [r7, #20]
 8003426:	edc7 0a04 	vstr	s1, [r7, #16]
 800342a:	ed87 1a03 	vstr	s2, [r7, #12]
 800342e:	edc7 1a02 	vstr	s3, [r7, #8]
 8003432:	ed87 2a01 	vstr	s4, [r7, #4]
 8003436:	6038      	str	r0, [r7, #0]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003438:	edd7 7a03 	vldr	s15, [r7, #12]
 800343c:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003440:	edd7 7a04 	vldr	s15, [r7, #16]
 8003444:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003448:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 800344c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003450:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003454:	ed97 7a01 	vldr	s14, [r7, #4]
 8003458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800345c:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003460:	edd7 7a01 	vldr	s15, [r7, #4]
 8003464:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800346c:	d505      	bpl.n	800347a <straight_table2+0x5e>
 800346e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003472:	eef1 7a67 	vneg.f32	s15, s15
 8003476:	edc7 7a01 	vstr	s15, [r7, #4]

	if(noGoalPillarMode==1 && motor_mode.WallCutMode==1){
 800347a:	4bba      	ldr	r3, [pc, #744]	; (8003764 <straight_table2+0x348>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d10c      	bne.n	800349c <straight_table2+0x80>
 8003482:	78fb      	ldrb	r3, [r7, #3]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d109      	bne.n	800349c <straight_table2+0x80>
		motor_mode.WallCutMode=0;
 8003488:	2300      	movs	r3, #0
 800348a:	70fb      	strb	r3, [r7, #3]
		input_displacement=input_displacement-MAZE_OFFSET;
 800348c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003490:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003494:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003498:	edc7 7a05 	vstr	s15, [r7, #20]
	}


	Trapezoid_straight.displacement = input_displacement;
 800349c:	4ab2      	ldr	r2, [pc, #712]	; (8003768 <straight_table2+0x34c>)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 80034a2:	4ab1      	ldr	r2, [pc, #708]	; (8003768 <straight_table2+0x34c>)
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 80034a8:	4aaf      	ldr	r2, [pc, #700]	; (8003768 <straight_table2+0x34c>)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 80034ae:	4aae      	ldr	r2, [pc, #696]	; (8003768 <straight_table2+0x34c>)
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 80034b4:	4aac      	ldr	r2, [pc, #688]	; (8003768 <straight_table2+0x34c>)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80034ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80034be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c6:	db03      	blt.n	80034d0 <straight_table2+0xb4>
 80034c8:	4aa8      	ldr	r2, [pc, #672]	; (800376c <straight_table2+0x350>)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6053      	str	r3, [r2, #4]
 80034ce:	e006      	b.n	80034de <straight_table2+0xc2>
	}else{straight.acceleration = -input_acceleration;}
 80034d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80034d4:	eef1 7a67 	vneg.f32	s15, s15
 80034d8:	4ba4      	ldr	r3, [pc, #656]	; (800376c <straight_table2+0x350>)
 80034da:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 80034de:	4aa3      	ldr	r2, [pc, #652]	; (800376c <straight_table2+0x350>)
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 80034e4:	4ba1      	ldr	r3, [pc, #644]	; (800376c <straight_table2+0x350>)
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 80034ec:	4ba0      	ldr	r3, [pc, #640]	; (8003770 <straight_table2+0x354>)
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 80034f4:	4b9e      	ldr	r3, [pc, #632]	; (8003770 <straight_table2+0x354>)
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 80034fc:	4b9c      	ldr	r3, [pc, #624]	; (8003770 <straight_table2+0x354>)
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003504:	4b9b      	ldr	r3, [pc, #620]	; (8003774 <straight_table2+0x358>)
 8003506:	2200      	movs	r2, #0
 8003508:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 800350a:	4b9b      	ldr	r3, [pc, #620]	; (8003778 <straight_table2+0x35c>)
 800350c:	2201      	movs	r2, #1
 800350e:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003510:	edd7 7a05 	vldr	s15, [r7, #20]
 8003514:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800351c:	dd0e      	ble.n	800353c <straight_table2+0x120>
 800351e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003522:	edd7 7a05 	vldr	s15, [r7, #20]
 8003526:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800352a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800352e:	dd05      	ble.n	800353c <straight_table2+0x120>
 8003530:	4b91      	ldr	r3, [pc, #580]	; (8003778 <straight_table2+0x35c>)
 8003532:	2205      	movs	r2, #5
 8003534:	701a      	strb	r2, [r3, #0]
 8003536:	4a8d      	ldr	r2, [pc, #564]	; (800376c <straight_table2+0x350>)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 800353c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003540:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003548:	dd14      	ble.n	8003574 <straight_table2+0x158>
 800354a:	edd7 7a05 	vldr	s15, [r7, #20]
 800354e:	eef1 7a67 	vneg.f32	s15, s15
 8003552:	ed97 7a07 	vldr	s14, [r7, #28]
 8003556:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800355a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355e:	d509      	bpl.n	8003574 <straight_table2+0x158>
 8003560:	4b85      	ldr	r3, [pc, #532]	; (8003778 <straight_table2+0x35c>)
 8003562:	2206      	movs	r2, #6
 8003564:	701a      	strb	r2, [r3, #0]
 8003566:	edd7 7a01 	vldr	s15, [r7, #4]
 800356a:	eef1 7a67 	vneg.f32	s15, s15
 800356e:	4b7f      	ldr	r3, [pc, #508]	; (800376c <straight_table2+0x350>)
 8003570:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003574:	edd7 7a05 	vldr	s15, [r7, #20]
 8003578:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800357c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003580:	d514      	bpl.n	80035ac <straight_table2+0x190>
 8003582:	edd7 7a05 	vldr	s15, [r7, #20]
 8003586:	eef1 7a67 	vneg.f32	s15, s15
 800358a:	ed97 7a07 	vldr	s14, [r7, #28]
 800358e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003596:	dd09      	ble.n	80035ac <straight_table2+0x190>
 8003598:	4b77      	ldr	r3, [pc, #476]	; (8003778 <straight_table2+0x35c>)
 800359a:	2205      	movs	r2, #5
 800359c:	701a      	strb	r2, [r3, #0]
 800359e:	edd7 7a01 	vldr	s15, [r7, #4]
 80035a2:	eef1 7a67 	vneg.f32	s15, s15
 80035a6:	4b71      	ldr	r3, [pc, #452]	; (800376c <straight_table2+0x350>)
 80035a8:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80035ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80035b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b8:	d50e      	bpl.n	80035d8 <straight_table2+0x1bc>
 80035ba:	ed97 7a07 	vldr	s14, [r7, #28]
 80035be:	edd7 7a05 	vldr	s15, [r7, #20]
 80035c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ca:	d505      	bpl.n	80035d8 <straight_table2+0x1bc>
 80035cc:	4b6a      	ldr	r3, [pc, #424]	; (8003778 <straight_table2+0x35c>)
 80035ce:	2206      	movs	r2, #6
 80035d0:	701a      	strb	r2, [r3, #0]
 80035d2:	4a66      	ldr	r2, [pc, #408]	; (800376c <straight_table2+0x350>)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 80035d8:	4b68      	ldr	r3, [pc, #416]	; (800377c <straight_table2+0x360>)
 80035da:	2201      	movs	r2, #1
 80035dc:	701a      	strb	r2, [r3, #0]
	g_WallControl_mode=motor_mode.WallControlMode;
 80035de:	783a      	ldrb	r2, [r7, #0]
 80035e0:	4b67      	ldr	r3, [pc, #412]	; (8003780 <straight_table2+0x364>)
 80035e2:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 80035e4:	f004 fc04 	bl	8007df0 <pl_DriveMotor_start>
	if(motor_mode.WallCutMode==1){
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	f040 80d4 	bne.w	8003798 <straight_table2+0x37c>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 80035f0:	4b64      	ldr	r3, [pc, #400]	; (8003784 <straight_table2+0x368>)
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 80035f8:	4b5f      	ldr	r3, [pc, #380]	; (8003778 <straight_table2+0x35c>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 80035fe:	4b5b      	ldr	r3, [pc, #364]	; (800376c <straight_table2+0x350>)
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 8003606:	bf00      	nop
 8003608:	4b5f      	ldr	r3, [pc, #380]	; (8003788 <straight_table2+0x36c>)
 800360a:	edd3 7a00 	vldr	s15, [r3]
 800360e:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8003612:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800361a:	d409      	bmi.n	8003630 <straight_table2+0x214>
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 800361c:	4b5a      	ldr	r3, [pc, #360]	; (8003788 <straight_table2+0x36c>)
 800361e:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 8003622:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800378c <straight_table2+0x370>
 8003626:	eef4 7ac7 	vcmpe.f32	s15, s14
 800362a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800362e:	dd18      	ble.n	8003662 <straight_table2+0x246>
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 8003630:	4b57      	ldr	r3, [pc, #348]	; (8003790 <straight_table2+0x374>)
 8003632:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 8003636:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800363a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800363e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003642:	d409      	bmi.n	8003658 <straight_table2+0x23c>
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 8003644:	4b52      	ldr	r3, [pc, #328]	; (8003790 <straight_table2+0x374>)
 8003646:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 800364a:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800378c <straight_table2+0x370>
 800364e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003656:	dd04      	ble.n	8003662 <straight_table2+0x246>
			  front_wall_break_90==0){}
 8003658:	4b4e      	ldr	r3, [pc, #312]	; (8003794 <straight_table2+0x378>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0d2      	beq.n	8003608 <straight_table2+0x1ec>
		straight.displacement=0;
 8003662:	4b42      	ldr	r3, [pc, #264]	; (800376c <straight_table2+0x350>)
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 800366a:	edd7 7a02 	vldr	s15, [r7, #8]
 800366e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003676:	db03      	blt.n	8003680 <straight_table2+0x264>
 8003678:	4a3c      	ldr	r2, [pc, #240]	; (800376c <straight_table2+0x350>)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6053      	str	r3, [r2, #4]
 800367e:	e006      	b.n	800368e <straight_table2+0x272>
			}else{straight.acceleration = -input_acceleration;}
 8003680:	edd7 7a01 	vldr	s15, [r7, #4]
 8003684:	eef1 7a67 	vneg.f32	s15, s15
 8003688:	4b38      	ldr	r3, [pc, #224]	; (800376c <straight_table2+0x350>)
 800368a:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 800368e:	4b3a      	ldr	r3, [pc, #232]	; (8003778 <straight_table2+0x35c>)
 8003690:	2201      	movs	r2, #1
 8003692:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003694:	edd7 7a05 	vldr	s15, [r7, #20]
 8003698:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800369c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a0:	dd0e      	ble.n	80036c0 <straight_table2+0x2a4>
 80036a2:	ed97 7a07 	vldr	s14, [r7, #28]
 80036a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80036aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b2:	dd05      	ble.n	80036c0 <straight_table2+0x2a4>
 80036b4:	4b30      	ldr	r3, [pc, #192]	; (8003778 <straight_table2+0x35c>)
 80036b6:	2205      	movs	r2, #5
 80036b8:	701a      	strb	r2, [r3, #0]
 80036ba:	4a2c      	ldr	r2, [pc, #176]	; (800376c <straight_table2+0x350>)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80036c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80036c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036cc:	dd14      	ble.n	80036f8 <straight_table2+0x2dc>
 80036ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80036d2:	eef1 7a67 	vneg.f32	s15, s15
 80036d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80036da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e2:	d509      	bpl.n	80036f8 <straight_table2+0x2dc>
 80036e4:	4b24      	ldr	r3, [pc, #144]	; (8003778 <straight_table2+0x35c>)
 80036e6:	2206      	movs	r2, #6
 80036e8:	701a      	strb	r2, [r3, #0]
 80036ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80036ee:	eef1 7a67 	vneg.f32	s15, s15
 80036f2:	4b1e      	ldr	r3, [pc, #120]	; (800376c <straight_table2+0x350>)
 80036f4:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80036f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80036fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003704:	d514      	bpl.n	8003730 <straight_table2+0x314>
 8003706:	edd7 7a05 	vldr	s15, [r7, #20]
 800370a:	eef1 7a67 	vneg.f32	s15, s15
 800370e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003712:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371a:	dd09      	ble.n	8003730 <straight_table2+0x314>
 800371c:	4b16      	ldr	r3, [pc, #88]	; (8003778 <straight_table2+0x35c>)
 800371e:	2205      	movs	r2, #5
 8003720:	701a      	strb	r2, [r3, #0]
 8003722:	edd7 7a01 	vldr	s15, [r7, #4]
 8003726:	eef1 7a67 	vneg.f32	s15, s15
 800372a:	4b10      	ldr	r3, [pc, #64]	; (800376c <straight_table2+0x350>)
 800372c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003730:	edd7 7a05 	vldr	s15, [r7, #20]
 8003734:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800373c:	f140 825c 	bpl.w	8003bf8 <straight_table2+0x7dc>
 8003740:	ed97 7a07 	vldr	s14, [r7, #28]
 8003744:	edd7 7a05 	vldr	s15, [r7, #20]
 8003748:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800374c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003750:	f140 8252 	bpl.w	8003bf8 <straight_table2+0x7dc>
 8003754:	4b08      	ldr	r3, [pc, #32]	; (8003778 <straight_table2+0x35c>)
 8003756:	2206      	movs	r2, #6
 8003758:	701a      	strb	r2, [r3, #0]
 800375a:	4a04      	ldr	r2, [pc, #16]	; (800376c <straight_table2+0x350>)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6053      	str	r3, [r2, #4]
 8003760:	e24a      	b.n	8003bf8 <straight_table2+0x7dc>
 8003762:	bf00      	nop
 8003764:	2000052d 	.word	0x2000052d
 8003768:	200004f4 	.word	0x200004f4
 800376c:	200004dc 	.word	0x200004dc
 8003770:	200004e8 	.word	0x200004e8
 8003774:	20000809 	.word	0x20000809
 8003778:	20000808 	.word	0x20000808
 800377c:	2000052c 	.word	0x2000052c
 8003780:	20000594 	.word	0x20000594
 8003784:	20000538 	.word	0x20000538
 8003788:	200005d0 	.word	0x200005d0
 800378c:	425c0000 	.word	0x425c0000
 8003790:	200005d4 	.word	0x200005d4
 8003794:	200005f6 	.word	0x200005f6
	}else if(motor_mode.WallCutMode==2){
 8003798:	78fb      	ldrb	r3, [r7, #3]
 800379a:	2b02      	cmp	r3, #2
 800379c:	f040 80c9 	bne.w	8003932 <straight_table2+0x516>
		//左壁or右壁がstart～endの中にあれば抜ける
		g_acc_flag=0;
 80037a0:	4bb8      	ldr	r3, [pc, #736]	; (8003a84 <straight_table2+0x668>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 80037a6:	4bb8      	ldr	r3, [pc, #736]	; (8003a88 <straight_table2+0x66c>)
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 80037ae:	bf00      	nop
 80037b0:	4bb6      	ldr	r3, [pc, #728]	; (8003a8c <straight_table2+0x670>)
 80037b2:	edd3 7a00 	vldr	s15, [r3]
 80037b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037be:	d913      	bls.n	80037e8 <straight_table2+0x3cc>
 80037c0:	4bb2      	ldr	r3, [pc, #712]	; (8003a8c <straight_table2+0x670>)
 80037c2:	edd3 7a00 	vldr	s15, [r3]
 80037c6:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 80037ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d2:	d909      	bls.n	80037e8 <straight_table2+0x3cc>
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 80037d4:	4bad      	ldr	r3, [pc, #692]	; (8003a8c <straight_table2+0x670>)
 80037d6:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 80037da:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8003a90 <straight_table2+0x674>
 80037de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e6:	db20      	blt.n	800382a <straight_table2+0x40e>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 80037e8:	4baa      	ldr	r3, [pc, #680]	; (8003a94 <straight_table2+0x678>)
 80037ea:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 80037ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f6:	d913      	bls.n	8003820 <straight_table2+0x404>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 80037f8:	4ba6      	ldr	r3, [pc, #664]	; (8003a94 <straight_table2+0x678>)
 80037fa:	edd3 7a00 	vldr	s15, [r3]
 80037fe:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8003802:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800380a:	d909      	bls.n	8003820 <straight_table2+0x404>
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 800380c:	4ba1      	ldr	r3, [pc, #644]	; (8003a94 <straight_table2+0x678>)
 800380e:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 8003812:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8003a90 <straight_table2+0x674>
 8003816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800381a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800381e:	db04      	blt.n	800382a <straight_table2+0x40e>
			  front_wall_break_45==0){}
 8003820:	4b9d      	ldr	r3, [pc, #628]	; (8003a98 <straight_table2+0x67c>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0c2      	beq.n	80037b0 <straight_table2+0x394>
//		while((NoWallDisplacementR90<=0 ||
//				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R45) &&
//				(NoWallDisplacementL90<=0 ||
//			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L45) &&
//			  front_wall_break_90==0){}
		enc.sigma_error=0;
 800382a:	4b9c      	ldr	r3, [pc, #624]	; (8003a9c <straight_table2+0x680>)
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	609a      	str	r2, [r3, #8]
		straight.displacement=0;
 8003832:	4b95      	ldr	r3, [pc, #596]	; (8003a88 <straight_table2+0x66c>)
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 800383a:	edd7 7a02 	vldr	s15, [r7, #8]
 800383e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003846:	db03      	blt.n	8003850 <straight_table2+0x434>
 8003848:	4a8f      	ldr	r2, [pc, #572]	; (8003a88 <straight_table2+0x66c>)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6053      	str	r3, [r2, #4]
 800384e:	e006      	b.n	800385e <straight_table2+0x442>
			}else{straight.acceleration = -input_acceleration;}
 8003850:	edd7 7a01 	vldr	s15, [r7, #4]
 8003854:	eef1 7a67 	vneg.f32	s15, s15
 8003858:	4b8b      	ldr	r3, [pc, #556]	; (8003a88 <straight_table2+0x66c>)
 800385a:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 800385e:	4b89      	ldr	r3, [pc, #548]	; (8003a84 <straight_table2+0x668>)
 8003860:	2201      	movs	r2, #1
 8003862:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003864:	edd7 7a05 	vldr	s15, [r7, #20]
 8003868:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800386c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003870:	dd0e      	ble.n	8003890 <straight_table2+0x474>
 8003872:	ed97 7a07 	vldr	s14, [r7, #28]
 8003876:	edd7 7a05 	vldr	s15, [r7, #20]
 800387a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800387e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003882:	dd05      	ble.n	8003890 <straight_table2+0x474>
 8003884:	4b7f      	ldr	r3, [pc, #508]	; (8003a84 <straight_table2+0x668>)
 8003886:	2205      	movs	r2, #5
 8003888:	701a      	strb	r2, [r3, #0]
 800388a:	4a7f      	ldr	r2, [pc, #508]	; (8003a88 <straight_table2+0x66c>)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003890:	edd7 7a05 	vldr	s15, [r7, #20]
 8003894:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800389c:	dd14      	ble.n	80038c8 <straight_table2+0x4ac>
 800389e:	edd7 7a05 	vldr	s15, [r7, #20]
 80038a2:	eef1 7a67 	vneg.f32	s15, s15
 80038a6:	ed97 7a07 	vldr	s14, [r7, #28]
 80038aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b2:	d509      	bpl.n	80038c8 <straight_table2+0x4ac>
 80038b4:	4b73      	ldr	r3, [pc, #460]	; (8003a84 <straight_table2+0x668>)
 80038b6:	2206      	movs	r2, #6
 80038b8:	701a      	strb	r2, [r3, #0]
 80038ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80038be:	eef1 7a67 	vneg.f32	s15, s15
 80038c2:	4b71      	ldr	r3, [pc, #452]	; (8003a88 <straight_table2+0x66c>)
 80038c4:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80038c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80038cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d4:	d514      	bpl.n	8003900 <straight_table2+0x4e4>
 80038d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80038da:	eef1 7a67 	vneg.f32	s15, s15
 80038de:	ed97 7a07 	vldr	s14, [r7, #28]
 80038e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ea:	dd09      	ble.n	8003900 <straight_table2+0x4e4>
 80038ec:	4b65      	ldr	r3, [pc, #404]	; (8003a84 <straight_table2+0x668>)
 80038ee:	2205      	movs	r2, #5
 80038f0:	701a      	strb	r2, [r3, #0]
 80038f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80038f6:	eef1 7a67 	vneg.f32	s15, s15
 80038fa:	4b63      	ldr	r3, [pc, #396]	; (8003a88 <straight_table2+0x66c>)
 80038fc:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003900:	edd7 7a05 	vldr	s15, [r7, #20]
 8003904:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800390c:	f140 8174 	bpl.w	8003bf8 <straight_table2+0x7dc>
 8003910:	ed97 7a07 	vldr	s14, [r7, #28]
 8003914:	edd7 7a05 	vldr	s15, [r7, #20]
 8003918:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800391c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003920:	f140 816a 	bpl.w	8003bf8 <straight_table2+0x7dc>
 8003924:	4b57      	ldr	r3, [pc, #348]	; (8003a84 <straight_table2+0x668>)
 8003926:	2206      	movs	r2, #6
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	4a57      	ldr	r2, [pc, #348]	; (8003a88 <straight_table2+0x66c>)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6053      	str	r3, [r2, #4]
 8003930:	e162      	b.n	8003bf8 <straight_table2+0x7dc>
	}else if(motor_mode.WallCutMode==3){
 8003932:	78fb      	ldrb	r3, [r7, #3]
 8003934:	2b03      	cmp	r3, #3
 8003936:	f040 80b9 	bne.w	8003aac <straight_table2+0x690>
		//斜めの右旋回
		//左壁or右壁がstart～endの中にあれば抜ける

		g_acc_flag=0;
 800393a:	4b52      	ldr	r3, [pc, #328]	; (8003a84 <straight_table2+0x668>)
 800393c:	2200      	movs	r2, #0
 800393e:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8003940:	4b51      	ldr	r3, [pc, #324]	; (8003a88 <straight_table2+0x66c>)
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 8003948:	bf00      	nop
 800394a:	4b55      	ldr	r3, [pc, #340]	; (8003aa0 <straight_table2+0x684>)
 800394c:	edd3 7a00 	vldr	s15, [r3]
 8003950:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003954:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800395c:	d409      	bmi.n	8003972 <straight_table2+0x556>
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 800395e:	4b50      	ldr	r3, [pc, #320]	; (8003aa0 <straight_table2+0x684>)
 8003960:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 8003964:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003aa4 <straight_table2+0x688>
 8003968:	eef4 7ac7 	vcmpe.f32	s15, s14
 800396c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003970:	dd04      	ble.n	800397c <straight_table2+0x560>
				  front_wall_break_45slant==0){}
 8003972:	4b4d      	ldr	r3, [pc, #308]	; (8003aa8 <straight_table2+0x68c>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	b2db      	uxtb	r3, r3
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0e6      	beq.n	800394a <straight_table2+0x52e>
		enc.sigma_error=0;
 800397c:	4b47      	ldr	r3, [pc, #284]	; (8003a9c <straight_table2+0x680>)
 800397e:	f04f 0200 	mov.w	r2, #0
 8003982:	609a      	str	r2, [r3, #8]
		straight.displacement=0;
 8003984:	4b40      	ldr	r3, [pc, #256]	; (8003a88 <straight_table2+0x66c>)
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 800398c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003990:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003998:	db03      	blt.n	80039a2 <straight_table2+0x586>
 800399a:	4a3b      	ldr	r2, [pc, #236]	; (8003a88 <straight_table2+0x66c>)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6053      	str	r3, [r2, #4]
 80039a0:	e006      	b.n	80039b0 <straight_table2+0x594>
			}else{straight.acceleration = -input_acceleration;}
 80039a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80039a6:	eef1 7a67 	vneg.f32	s15, s15
 80039aa:	4b37      	ldr	r3, [pc, #220]	; (8003a88 <straight_table2+0x66c>)
 80039ac:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 80039b0:	4b34      	ldr	r3, [pc, #208]	; (8003a84 <straight_table2+0x668>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80039b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80039ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c2:	dd0e      	ble.n	80039e2 <straight_table2+0x5c6>
 80039c4:	ed97 7a07 	vldr	s14, [r7, #28]
 80039c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80039cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d4:	dd05      	ble.n	80039e2 <straight_table2+0x5c6>
 80039d6:	4b2b      	ldr	r3, [pc, #172]	; (8003a84 <straight_table2+0x668>)
 80039d8:	2205      	movs	r2, #5
 80039da:	701a      	strb	r2, [r3, #0]
 80039dc:	4a2a      	ldr	r2, [pc, #168]	; (8003a88 <straight_table2+0x66c>)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80039e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80039e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ee:	dd14      	ble.n	8003a1a <straight_table2+0x5fe>
 80039f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80039f4:	eef1 7a67 	vneg.f32	s15, s15
 80039f8:	ed97 7a07 	vldr	s14, [r7, #28]
 80039fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a04:	d509      	bpl.n	8003a1a <straight_table2+0x5fe>
 8003a06:	4b1f      	ldr	r3, [pc, #124]	; (8003a84 <straight_table2+0x668>)
 8003a08:	2206      	movs	r2, #6
 8003a0a:	701a      	strb	r2, [r3, #0]
 8003a0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a10:	eef1 7a67 	vneg.f32	s15, s15
 8003a14:	4b1c      	ldr	r3, [pc, #112]	; (8003a88 <straight_table2+0x66c>)
 8003a16:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003a1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a26:	d514      	bpl.n	8003a52 <straight_table2+0x636>
 8003a28:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a2c:	eef1 7a67 	vneg.f32	s15, s15
 8003a30:	ed97 7a07 	vldr	s14, [r7, #28]
 8003a34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3c:	dd09      	ble.n	8003a52 <straight_table2+0x636>
 8003a3e:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <straight_table2+0x668>)
 8003a40:	2205      	movs	r2, #5
 8003a42:	701a      	strb	r2, [r3, #0]
 8003a44:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a48:	eef1 7a67 	vneg.f32	s15, s15
 8003a4c:	4b0e      	ldr	r3, [pc, #56]	; (8003a88 <straight_table2+0x66c>)
 8003a4e:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003a52:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a5e:	f140 80cb 	bpl.w	8003bf8 <straight_table2+0x7dc>
 8003a62:	ed97 7a07 	vldr	s14, [r7, #28]
 8003a66:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a72:	f140 80c1 	bpl.w	8003bf8 <straight_table2+0x7dc>
 8003a76:	4b03      	ldr	r3, [pc, #12]	; (8003a84 <straight_table2+0x668>)
 8003a78:	2206      	movs	r2, #6
 8003a7a:	701a      	strb	r2, [r3, #0]
 8003a7c:	4a02      	ldr	r2, [pc, #8]	; (8003a88 <straight_table2+0x66c>)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6053      	str	r3, [r2, #4]
 8003a82:	e0b9      	b.n	8003bf8 <straight_table2+0x7dc>
 8003a84:	20000808 	.word	0x20000808
 8003a88:	200004dc 	.word	0x200004dc
 8003a8c:	200005d8 	.word	0x200005d8
 8003a90:	42000000 	.word	0x42000000
 8003a94:	200005dc 	.word	0x200005dc
 8003a98:	200005f7 	.word	0x200005f7
 8003a9c:	20000538 	.word	0x20000538
 8003aa0:	200005e8 	.word	0x200005e8
 8003aa4:	420c0000 	.word	0x420c0000
 8003aa8:	200005f8 	.word	0x200005f8
	}else if(motor_mode.WallCutMode==4){
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	f040 80a2 	bne.w	8003bf8 <straight_table2+0x7dc>
		//斜めの左旋回
		//左壁or右壁がstart～endの中にあれば抜ける

		g_acc_flag=0;
 8003ab4:	4ba6      	ldr	r3, [pc, #664]	; (8003d50 <straight_table2+0x934>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8003aba:	4ba6      	ldr	r3, [pc, #664]	; (8003d54 <straight_table2+0x938>)
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 8003ac2:	bf00      	nop
 8003ac4:	4ba4      	ldr	r3, [pc, #656]	; (8003d58 <straight_table2+0x93c>)
 8003ac6:	edd3 7a00 	vldr	s15, [r3]
 8003aca:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003ace:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad6:	d409      	bmi.n	8003aec <straight_table2+0x6d0>
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 8003ad8:	4b9f      	ldr	r3, [pc, #636]	; (8003d58 <straight_table2+0x93c>)
 8003ada:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 8003ade:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8003d5c <straight_table2+0x940>
 8003ae2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aea:	dd04      	ble.n	8003af6 <straight_table2+0x6da>
				  front_wall_break_45slant==0){}
 8003aec:	4b9c      	ldr	r3, [pc, #624]	; (8003d60 <straight_table2+0x944>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0e6      	beq.n	8003ac4 <straight_table2+0x6a8>
		enc.sigma_error=0;
 8003af6:	4b9b      	ldr	r3, [pc, #620]	; (8003d64 <straight_table2+0x948>)
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	609a      	str	r2, [r3, #8]
		straight.displacement=0;
 8003afe:	4b95      	ldr	r3, [pc, #596]	; (8003d54 <straight_table2+0x938>)
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003b06:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b12:	db03      	blt.n	8003b1c <straight_table2+0x700>
 8003b14:	4a8f      	ldr	r2, [pc, #572]	; (8003d54 <straight_table2+0x938>)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6053      	str	r3, [r2, #4]
 8003b1a:	e006      	b.n	8003b2a <straight_table2+0x70e>
			}else{straight.acceleration = -input_acceleration;}
 8003b1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b20:	eef1 7a67 	vneg.f32	s15, s15
 8003b24:	4b8b      	ldr	r3, [pc, #556]	; (8003d54 <straight_table2+0x938>)
 8003b26:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003b2a:	4b89      	ldr	r3, [pc, #548]	; (8003d50 <straight_table2+0x934>)
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003b30:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b3c:	dd0e      	ble.n	8003b5c <straight_table2+0x740>
 8003b3e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b42:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4e:	dd05      	ble.n	8003b5c <straight_table2+0x740>
 8003b50:	4b7f      	ldr	r3, [pc, #508]	; (8003d50 <straight_table2+0x934>)
 8003b52:	2205      	movs	r2, #5
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	4a7f      	ldr	r2, [pc, #508]	; (8003d54 <straight_table2+0x938>)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003b5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b68:	dd14      	ble.n	8003b94 <straight_table2+0x778>
 8003b6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b6e:	eef1 7a67 	vneg.f32	s15, s15
 8003b72:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b7e:	d509      	bpl.n	8003b94 <straight_table2+0x778>
 8003b80:	4b73      	ldr	r3, [pc, #460]	; (8003d50 <straight_table2+0x934>)
 8003b82:	2206      	movs	r2, #6
 8003b84:	701a      	strb	r2, [r3, #0]
 8003b86:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b8a:	eef1 7a67 	vneg.f32	s15, s15
 8003b8e:	4b71      	ldr	r3, [pc, #452]	; (8003d54 <straight_table2+0x938>)
 8003b90:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003b94:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ba0:	d514      	bpl.n	8003bcc <straight_table2+0x7b0>
 8003ba2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ba6:	eef1 7a67 	vneg.f32	s15, s15
 8003baa:	ed97 7a07 	vldr	s14, [r7, #28]
 8003bae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb6:	dd09      	ble.n	8003bcc <straight_table2+0x7b0>
 8003bb8:	4b65      	ldr	r3, [pc, #404]	; (8003d50 <straight_table2+0x934>)
 8003bba:	2205      	movs	r2, #5
 8003bbc:	701a      	strb	r2, [r3, #0]
 8003bbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bc2:	eef1 7a67 	vneg.f32	s15, s15
 8003bc6:	4b63      	ldr	r3, [pc, #396]	; (8003d54 <straight_table2+0x938>)
 8003bc8:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003bcc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd8:	d50e      	bpl.n	8003bf8 <straight_table2+0x7dc>
 8003bda:	ed97 7a07 	vldr	s14, [r7, #28]
 8003bde:	edd7 7a05 	vldr	s15, [r7, #20]
 8003be2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bea:	d505      	bpl.n	8003bf8 <straight_table2+0x7dc>
 8003bec:	4b58      	ldr	r3, [pc, #352]	; (8003d50 <straight_table2+0x934>)
 8003bee:	2206      	movs	r2, #6
 8003bf0:	701a      	strb	r2, [r3, #0]
 8003bf2:	4a58      	ldr	r2, [pc, #352]	; (8003d54 <straight_table2+0x938>)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6053      	str	r3, [r2, #4]
	}

	if(motor_mode.calMazeMode==0){
 8003bf8:	78bb      	ldrb	r3, [r7, #2]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f040 809e 	bne.w	8003d3c <straight_table2+0x920>
	while (g_acc_flag!=4){
 8003c00:	e074      	b.n	8003cec <straight_table2+0x8d0>
		if(motor_mode.WallCutMode==1){
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d120      	bne.n	8003c4a <straight_table2+0x82e>
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003c08:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c0c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003c10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c14:	4b54      	ldr	r3, [pc, #336]	; (8003d68 <straight_table2+0x94c>)
 8003c16:	edd3 7a00 	vldr	s15, [r3]
 8003c1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c22:	d90e      	bls.n	8003c42 <straight_table2+0x826>
			   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90)){
 8003c24:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c28:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8003c2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c30:	4b4e      	ldr	r3, [pc, #312]	; (8003d6c <straight_table2+0x950>)
 8003c32:	edd3 7a00 	vldr	s15, [r3]
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003c36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c3e:	d900      	bls.n	8003c42 <straight_table2+0x826>
 8003c40:	e054      	b.n	8003cec <straight_table2+0x8d0>
				g_acc_flag=4;
 8003c42:	4b43      	ldr	r3, [pc, #268]	; (8003d50 <straight_table2+0x934>)
 8003c44:	2204      	movs	r2, #4
 8003c46:	701a      	strb	r2, [r3, #0]
				break;
 8003c48:	e055      	b.n	8003cf6 <straight_table2+0x8da>
			}
		}else if(motor_mode.WallCutMode==2){
 8003c4a:	78fb      	ldrb	r3, [r7, #3]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d121      	bne.n	8003c94 <straight_table2+0x878>
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 8003c50:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c54:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003c58:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003c5c:	4b44      	ldr	r3, [pc, #272]	; (8003d70 <straight_table2+0x954>)
 8003c5e:	edd3 7a00 	vldr	s15, [r3]
 8003c62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c6a:	d900      	bls.n	8003c6e <straight_table2+0x852>
 8003c6c:	e03e      	b.n	8003cec <straight_table2+0x8d0>
			   NoWallDisplacementR45>=input_displacement+CUTPLACE_TO_CENTER_R45 ){
 8003c6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c72:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003c76:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003c7a:	4b3e      	ldr	r3, [pc, #248]	; (8003d74 <straight_table2+0x958>)
 8003c7c:	edd3 7a00 	vldr	s15, [r3]
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 8003c80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c88:	d900      	bls.n	8003c8c <straight_table2+0x870>
 8003c8a:	e02f      	b.n	8003cec <straight_table2+0x8d0>
				g_acc_flag=4;
 8003c8c:	4b30      	ldr	r3, [pc, #192]	; (8003d50 <straight_table2+0x934>)
 8003c8e:	2204      	movs	r2, #4
 8003c90:	701a      	strb	r2, [r3, #0]
				break;
 8003c92:	e030      	b.n	8003cf6 <straight_table2+0x8da>
			}
		}else if(motor_mode.WallCutMode==3){
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	d112      	bne.n	8003cc0 <straight_table2+0x8a4>
			if(NoWallDisplacementR45slant2>=input_displacement+CUTPLACE_TO_CENTER_R45_SLANT ){
 8003c9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ca2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ca6:	4b34      	ldr	r3, [pc, #208]	; (8003d78 <straight_table2+0x95c>)
 8003ca8:	edd3 7a00 	vldr	s15, [r3]
 8003cac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb4:	d900      	bls.n	8003cb8 <straight_table2+0x89c>
 8003cb6:	e019      	b.n	8003cec <straight_table2+0x8d0>
				g_acc_flag=4;
 8003cb8:	4b25      	ldr	r3, [pc, #148]	; (8003d50 <straight_table2+0x934>)
 8003cba:	2204      	movs	r2, #4
 8003cbc:	701a      	strb	r2, [r3, #0]
				break;
 8003cbe:	e01a      	b.n	8003cf6 <straight_table2+0x8da>
			}
		}else if(motor_mode.WallCutMode==4){
 8003cc0:	78fb      	ldrb	r3, [r7, #3]
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d112      	bne.n	8003cec <straight_table2+0x8d0>
			if(NoWallDisplacementL45slant2>=input_displacement+CUTPLACE_TO_CENTER_L45_SLANT){
 8003cc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8003cca:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003cce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cd2:	4b21      	ldr	r3, [pc, #132]	; (8003d58 <straight_table2+0x93c>)
 8003cd4:	edd3 7a00 	vldr	s15, [r3]
 8003cd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce0:	d900      	bls.n	8003ce4 <straight_table2+0x8c8>
 8003ce2:	e003      	b.n	8003cec <straight_table2+0x8d0>
				g_acc_flag=4;
 8003ce4:	4b1a      	ldr	r3, [pc, #104]	; (8003d50 <straight_table2+0x934>)
 8003ce6:	2204      	movs	r2, #4
 8003ce8:	701a      	strb	r2, [r3, #0]
				break;
 8003cea:	e004      	b.n	8003cf6 <straight_table2+0x8da>
	while (g_acc_flag!=4){
 8003cec:	4b18      	ldr	r3, [pc, #96]	; (8003d50 <straight_table2+0x934>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d185      	bne.n	8003c02 <straight_table2+0x7e6>
			}
		}

	}
	if(input_end_velocity==0){//BREAK
 8003cf6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cfa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d02:	d105      	bne.n	8003d10 <straight_table2+0x8f4>
		wait_ms_NoReset(100);
 8003d04:	2064      	movs	r0, #100	; 0x64
 8003d06:	f004 fb4b 	bl	80083a0 <wait_ms_NoReset>
		modeacc = 0;
 8003d0a:	4b1c      	ldr	r3, [pc, #112]	; (8003d7c <straight_table2+0x960>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 8003d10:	4b1b      	ldr	r3, [pc, #108]	; (8003d80 <straight_table2+0x964>)
 8003d12:	ed93 7a00 	vldr	s14, [r3]
 8003d16:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d1e:	4b18      	ldr	r3, [pc, #96]	; (8003d80 <straight_table2+0x964>)
 8003d20:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 8003d24:	4b17      	ldr	r3, [pc, #92]	; (8003d84 <straight_table2+0x968>)
 8003d26:	ed93 7a00 	vldr	s14, [r3]
 8003d2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d32:	4b14      	ldr	r3, [pc, #80]	; (8003d84 <straight_table2+0x968>)
 8003d34:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 8003d38:	f004 f868 	bl	8007e0c <pl_DriveMotor_stop>

	}

	return straight.velocity;
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <straight_table2+0x938>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	ee07 3a90 	vmov	s15, r3



}
 8003d44:	eeb0 0a67 	vmov.f32	s0, s15
 8003d48:	3720      	adds	r7, #32
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20000808 	.word	0x20000808
 8003d54:	200004dc 	.word	0x200004dc
 8003d58:	200005ec 	.word	0x200005ec
 8003d5c:	420c0000 	.word	0x420c0000
 8003d60:	200005f8 	.word	0x200005f8
 8003d64:	20000538 	.word	0x20000538
 8003d68:	200005d4 	.word	0x200005d4
 8003d6c:	200005d0 	.word	0x200005d0
 8003d70:	200005dc 	.word	0x200005dc
 8003d74:	200005d8 	.word	0x200005d8
 8003d78:	200005e8 	.word	0x200005e8
 8003d7c:	2000052c 	.word	0x2000052c
 8003d80:	20000220 	.word	0x20000220
 8003d84:	20000224 	.word	0x20000224

08003d88 <End_straight>:

void End_straight(float input_displacement,MOTOR_MODE motor_mode,_Bool right_wall,_Bool left_wall){
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003d92:	60b8      	str	r0, [r7, #8]
 8003d94:	460b      	mov	r3, r1
 8003d96:	71fb      	strb	r3, [r7, #7]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	71bb      	strb	r3, [r7, #6]
	if(noGoalPillarMode==1){
 8003d9c:	4b2a      	ldr	r3, [pc, #168]	; (8003e48 <End_straight+0xc0>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d132      	bne.n	8003e0a <End_straight+0x82>
		motor_mode.WallCutMode=0;
 8003da4:	2300      	movs	r3, #0
 8003da6:	72fb      	strb	r3, [r7, #11]
	}
	while (g_acc_flag!=4){
 8003da8:	e02f      	b.n	8003e0a <End_straight+0x82>
		if(right_wall == 0 || left_wall == 0){
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	f083 0301 	eor.w	r3, r3, #1
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d105      	bne.n	8003dc2 <End_straight+0x3a>
 8003db6:	79bb      	ldrb	r3, [r7, #6]
 8003db8:	f083 0301 	eor.w	r3, r3, #1
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d023      	beq.n	8003e0a <End_straight+0x82>
		if(motor_mode.WallCutMode==1){
 8003dc2:	7afb      	ldrb	r3, [r7, #11]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d120      	bne.n	8003e0a <End_straight+0x82>
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003dc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003dcc:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003dd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dd4:	4b1d      	ldr	r3, [pc, #116]	; (8003e4c <End_straight+0xc4>)
 8003dd6:	edd3 7a00 	vldr	s15, [r3]
 8003dda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de2:	d90e      	bls.n	8003e02 <End_straight+0x7a>
					   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90 ){
 8003de4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003de8:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8003dec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003df0:	4b17      	ldr	r3, [pc, #92]	; (8003e50 <End_straight+0xc8>)
 8003df2:	edd3 7a00 	vldr	s15, [r3]
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003df6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfe:	d900      	bls.n	8003e02 <End_straight+0x7a>
 8003e00:	e003      	b.n	8003e0a <End_straight+0x82>
						g_acc_flag=4;
 8003e02:	4b14      	ldr	r3, [pc, #80]	; (8003e54 <End_straight+0xcc>)
 8003e04:	2204      	movs	r2, #4
 8003e06:	701a      	strb	r2, [r3, #0]
						break;
 8003e08:	e004      	b.n	8003e14 <End_straight+0x8c>
	while (g_acc_flag!=4){
 8003e0a:	4b12      	ldr	r3, [pc, #72]	; (8003e54 <End_straight+0xcc>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d1ca      	bne.n	8003daa <End_straight+0x22>
//			}
//		}

	}
//	while(g_MotorEnd_flag==0){}
	E_distanceL = E_distanceL - input_displacement;
 8003e14:	4b10      	ldr	r3, [pc, #64]	; (8003e58 <End_straight+0xd0>)
 8003e16:	ed93 7a00 	vldr	s14, [r3]
 8003e1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e22:	4b0d      	ldr	r3, [pc, #52]	; (8003e58 <End_straight+0xd0>)
 8003e24:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 8003e28:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <End_straight+0xd4>)
 8003e2a:	ed93 7a00 	vldr	s14, [r3]
 8003e2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e36:	4b09      	ldr	r3, [pc, #36]	; (8003e5c <End_straight+0xd4>)
 8003e38:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 8003e3c:	f003 ffe6 	bl	8007e0c <pl_DriveMotor_stop>
}
 8003e40:	bf00      	nop
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	2000052d 	.word	0x2000052d
 8003e4c:	200005d4 	.word	0x200005d4
 8003e50:	200005d0 	.word	0x200005d0
 8003e54:	20000808 	.word	0x20000808
 8003e58:	20000220 	.word	0x20000220
 8003e5c:	20000224 	.word	0x20000224

08003e60 <turning_table2>:

float turning_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	ed87 0a05 	vstr	s0, [r7, #20]
 8003e6a:	edc7 0a04 	vstr	s1, [r7, #16]
 8003e6e:	ed87 1a03 	vstr	s2, [r7, #12]
 8003e72:	edc7 1a02 	vstr	s3, [r7, #8]
 8003e76:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003e7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e7e:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003e82:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e86:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003e8a:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003e8e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003e92:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003e96:	ed97 7a01 	vldr	s14, [r7, #4]
 8003e9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e9e:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003ea2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ea6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eae:	d505      	bpl.n	8003ebc <turning_table2+0x5c>
 8003eb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003eb4:	eef1 7a67 	vneg.f32	s15, s15
 8003eb8:	edc7 7a01 	vstr	s15, [r7, #4]

	Trapezoid_turning.displacement = input_displacement;
 8003ebc:	4a69      	ldr	r2, [pc, #420]	; (8004064 <turning_table2+0x204>)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8003ec2:	4a68      	ldr	r2, [pc, #416]	; (8004064 <turning_table2+0x204>)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8003ec8:	4a66      	ldr	r2, [pc, #408]	; (8004064 <turning_table2+0x204>)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8003ece:	4a65      	ldr	r2, [pc, #404]	; (8004064 <turning_table2+0x204>)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8003ed4:	4a63      	ldr	r2, [pc, #396]	; (8004064 <turning_table2+0x204>)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8003eda:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ede:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee6:	db03      	blt.n	8003ef0 <turning_table2+0x90>
 8003ee8:	4a5f      	ldr	r2, [pc, #380]	; (8004068 <turning_table2+0x208>)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6053      	str	r3, [r2, #4]
 8003eee:	e006      	b.n	8003efe <turning_table2+0x9e>
	}else{turning.acceleration = -input_acceleration;}
 8003ef0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ef4:	eef1 7a67 	vneg.f32	s15, s15
 8003ef8:	4b5b      	ldr	r3, [pc, #364]	; (8004068 <turning_table2+0x208>)
 8003efa:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8003efe:	4a5a      	ldr	r2, [pc, #360]	; (8004068 <turning_table2+0x208>)
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8003f04:	4b58      	ldr	r3, [pc, #352]	; (8004068 <turning_table2+0x208>)
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003f0c:	4b57      	ldr	r3, [pc, #348]	; (800406c <turning_table2+0x20c>)
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003f14:	4b55      	ldr	r3, [pc, #340]	; (800406c <turning_table2+0x20c>)
 8003f16:	f04f 0200 	mov.w	r2, #0
 8003f1a:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003f1c:	4b53      	ldr	r3, [pc, #332]	; (800406c <turning_table2+0x20c>)
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003f24:	4b52      	ldr	r3, [pc, #328]	; (8004070 <turning_table2+0x210>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003f2a:	4b52      	ldr	r3, [pc, #328]	; (8004074 <turning_table2+0x214>)
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8003f30:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f3c:	dd0e      	ble.n	8003f5c <turning_table2+0xfc>
 8003f3e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003f42:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f4e:	dd05      	ble.n	8003f5c <turning_table2+0xfc>
 8003f50:	4b48      	ldr	r3, [pc, #288]	; (8004074 <turning_table2+0x214>)
 8003f52:	2205      	movs	r2, #5
 8003f54:	701a      	strb	r2, [r3, #0]
 8003f56:	4a44      	ldr	r2, [pc, #272]	; (8004068 <turning_table2+0x208>)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8003f5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f68:	dd14      	ble.n	8003f94 <turning_table2+0x134>
 8003f6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f6e:	eef1 7a67 	vneg.f32	s15, s15
 8003f72:	ed97 7a07 	vldr	s14, [r7, #28]
 8003f76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f7e:	d509      	bpl.n	8003f94 <turning_table2+0x134>
 8003f80:	4b3c      	ldr	r3, [pc, #240]	; (8004074 <turning_table2+0x214>)
 8003f82:	2206      	movs	r2, #6
 8003f84:	701a      	strb	r2, [r3, #0]
 8003f86:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f8a:	eef1 7a67 	vneg.f32	s15, s15
 8003f8e:	4b36      	ldr	r3, [pc, #216]	; (8004068 <turning_table2+0x208>)
 8003f90:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8003f94:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fa0:	d514      	bpl.n	8003fcc <turning_table2+0x16c>
 8003fa2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003fa6:	eef1 7a67 	vneg.f32	s15, s15
 8003faa:	ed97 7a07 	vldr	s14, [r7, #28]
 8003fae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb6:	dd09      	ble.n	8003fcc <turning_table2+0x16c>
 8003fb8:	4b2e      	ldr	r3, [pc, #184]	; (8004074 <turning_table2+0x214>)
 8003fba:	2205      	movs	r2, #5
 8003fbc:	701a      	strb	r2, [r3, #0]
 8003fbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fc2:	eef1 7a67 	vneg.f32	s15, s15
 8003fc6:	4b28      	ldr	r3, [pc, #160]	; (8004068 <turning_table2+0x208>)
 8003fc8:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8003fcc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003fd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd8:	d50e      	bpl.n	8003ff8 <turning_table2+0x198>
 8003fda:	ed97 7a07 	vldr	s14, [r7, #28]
 8003fde:	edd7 7a05 	vldr	s15, [r7, #20]
 8003fe2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fea:	d505      	bpl.n	8003ff8 <turning_table2+0x198>
 8003fec:	4b21      	ldr	r3, [pc, #132]	; (8004074 <turning_table2+0x214>)
 8003fee:	2206      	movs	r2, #6
 8003ff0:	701a      	strb	r2, [r3, #0]
 8003ff2:	4a1d      	ldr	r2, [pc, #116]	; (8004068 <turning_table2+0x208>)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8003ff8:	4b1f      	ldr	r3, [pc, #124]	; (8004078 <turning_table2+0x218>)
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003ffe:	f003 fef7 	bl	8007df0 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8004002:	bf00      	nop
 8004004:	4b1b      	ldr	r3, [pc, #108]	; (8004074 <turning_table2+0x214>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b04      	cmp	r3, #4
 800400c:	d1fa      	bne.n	8004004 <turning_table2+0x1a4>

	}
	if(input_end_velocity==0){//BREAK
 800400e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004012:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800401a:	d106      	bne.n	800402a <turning_table2+0x1ca>
		wait_ms_NoReset(300);
 800401c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004020:	f004 f9be 	bl	80083a0 <wait_ms_NoReset>
		modeacc = 0;
 8004024:	4b14      	ldr	r3, [pc, #80]	; (8004078 <turning_table2+0x218>)
 8004026:	2200      	movs	r2, #0
 8004028:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	angle = angle - input_displacement;
 800402a:	4b14      	ldr	r3, [pc, #80]	; (800407c <turning_table2+0x21c>)
 800402c:	ed93 7a00 	vldr	s14, [r3]
 8004030:	edd7 7a05 	vldr	s15, [r7, #20]
 8004034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004038:	4b10      	ldr	r3, [pc, #64]	; (800407c <turning_table2+0x21c>)
 800403a:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 800403e:	f003 fee5 	bl	8007e0c <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8004042:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <turning_table2+0x220>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a0f      	ldr	r2, [pc, #60]	; (8004084 <turning_table2+0x224>)
 8004048:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 800404a:	4b0f      	ldr	r3, [pc, #60]	; (8004088 <turning_table2+0x228>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a0f      	ldr	r2, [pc, #60]	; (800408c <turning_table2+0x22c>)
 8004050:	6013      	str	r3, [r2, #0]

	return turning.velocity;
 8004052:	4b05      	ldr	r3, [pc, #20]	; (8004068 <turning_table2+0x208>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	ee07 3a90 	vmov	s15, r3
}
 800405a:	eeb0 0a67 	vmov.f32	s0, s15
 800405e:	3720      	adds	r7, #32
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20000508 	.word	0x20000508
 8004068:	200004e8 	.word	0x200004e8
 800406c:	200004dc 	.word	0x200004dc
 8004070:	20000809 	.word	0x20000809
 8004074:	20000808 	.word	0x20000808
 8004078:	2000052c 	.word	0x2000052c
 800407c:	20000268 	.word	0x20000268
 8004080:	20000228 	.word	0x20000228
 8004084:	20000258 	.word	0x20000258
 8004088:	2000022c 	.word	0x2000022c
 800408c:	2000025c 	.word	0x2000025c

08004090 <slalom_table2>:



float slalom_table2(float input_center_velocity,float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8004090:	b580      	push	{r7, lr}
 8004092:	b088      	sub	sp, #32
 8004094:	af00      	add	r7, sp, #0
 8004096:	ed87 0a05 	vstr	s0, [r7, #20]
 800409a:	edc7 0a04 	vstr	s1, [r7, #16]
 800409e:	ed87 1a03 	vstr	s2, [r7, #12]
 80040a2:	edc7 1a02 	vstr	s3, [r7, #8]
 80040a6:	ed87 2a01 	vstr	s4, [r7, #4]
 80040aa:	edc7 2a00 	vstr	s5, [r7]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 80040ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80040b2:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 80040b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80040ba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80040be:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 80040c2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80040c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 80040ca:	ed97 7a00 	vldr	s14, [r7]
 80040ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040d2:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 80040d6:	edd7 7a00 	vldr	s15, [r7]
 80040da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040e2:	d505      	bpl.n	80040f0 <slalom_table2+0x60>
 80040e4:	edd7 7a00 	vldr	s15, [r7]
 80040e8:	eef1 7a67 	vneg.f32	s15, s15
 80040ec:	edc7 7a00 	vstr	s15, [r7]

	Trapezoid_turning.displacement = input_displacement;
 80040f0:	4a5e      	ldr	r2, [pc, #376]	; (800426c <slalom_table2+0x1dc>)
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 80040f6:	4a5d      	ldr	r2, [pc, #372]	; (800426c <slalom_table2+0x1dc>)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 80040fc:	4a5b      	ldr	r2, [pc, #364]	; (800426c <slalom_table2+0x1dc>)
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8004102:	4a5a      	ldr	r2, [pc, #360]	; (800426c <slalom_table2+0x1dc>)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8004108:	4a58      	ldr	r2, [pc, #352]	; (800426c <slalom_table2+0x1dc>)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 800410e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004112:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411a:	db03      	blt.n	8004124 <slalom_table2+0x94>
 800411c:	4a54      	ldr	r2, [pc, #336]	; (8004270 <slalom_table2+0x1e0>)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	6053      	str	r3, [r2, #4]
 8004122:	e006      	b.n	8004132 <slalom_table2+0xa2>
	}else{turning.acceleration = -input_acceleration;}
 8004124:	edd7 7a00 	vldr	s15, [r7]
 8004128:	eef1 7a67 	vneg.f32	s15, s15
 800412c:	4b50      	ldr	r3, [pc, #320]	; (8004270 <slalom_table2+0x1e0>)
 800412e:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8004132:	4a4f      	ldr	r2, [pc, #316]	; (8004270 <slalom_table2+0x1e0>)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8004138:	4b4d      	ldr	r3, [pc, #308]	; (8004270 <slalom_table2+0x1e0>)
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8004140:	4a4c      	ldr	r2, [pc, #304]	; (8004274 <slalom_table2+0x1e4>)
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8004146:	4b4b      	ldr	r3, [pc, #300]	; (8004274 <slalom_table2+0x1e4>)
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 800414e:	4b49      	ldr	r3, [pc, #292]	; (8004274 <slalom_table2+0x1e4>)
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8004156:	4b48      	ldr	r3, [pc, #288]	; (8004278 <slalom_table2+0x1e8>)
 8004158:	2200      	movs	r2, #0
 800415a:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 800415c:	4b47      	ldr	r3, [pc, #284]	; (800427c <slalom_table2+0x1ec>)
 800415e:	2201      	movs	r2, #1
 8004160:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8004162:	edd7 7a04 	vldr	s15, [r7, #16]
 8004166:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800416a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800416e:	dd0e      	ble.n	800418e <slalom_table2+0xfe>
 8004170:	ed97 7a07 	vldr	s14, [r7, #28]
 8004174:	edd7 7a04 	vldr	s15, [r7, #16]
 8004178:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800417c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004180:	dd05      	ble.n	800418e <slalom_table2+0xfe>
 8004182:	4b3e      	ldr	r3, [pc, #248]	; (800427c <slalom_table2+0x1ec>)
 8004184:	2205      	movs	r2, #5
 8004186:	701a      	strb	r2, [r3, #0]
 8004188:	4a39      	ldr	r2, [pc, #228]	; (8004270 <slalom_table2+0x1e0>)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 800418e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004192:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800419a:	dd14      	ble.n	80041c6 <slalom_table2+0x136>
 800419c:	edd7 7a04 	vldr	s15, [r7, #16]
 80041a0:	eef1 7a67 	vneg.f32	s15, s15
 80041a4:	ed97 7a07 	vldr	s14, [r7, #28]
 80041a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b0:	d509      	bpl.n	80041c6 <slalom_table2+0x136>
 80041b2:	4b32      	ldr	r3, [pc, #200]	; (800427c <slalom_table2+0x1ec>)
 80041b4:	2206      	movs	r2, #6
 80041b6:	701a      	strb	r2, [r3, #0]
 80041b8:	edd7 7a00 	vldr	s15, [r7]
 80041bc:	eef1 7a67 	vneg.f32	s15, s15
 80041c0:	4b2b      	ldr	r3, [pc, #172]	; (8004270 <slalom_table2+0x1e0>)
 80041c2:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 80041c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80041ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d2:	d514      	bpl.n	80041fe <slalom_table2+0x16e>
 80041d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80041d8:	eef1 7a67 	vneg.f32	s15, s15
 80041dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80041e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e8:	dd09      	ble.n	80041fe <slalom_table2+0x16e>
 80041ea:	4b24      	ldr	r3, [pc, #144]	; (800427c <slalom_table2+0x1ec>)
 80041ec:	2205      	movs	r2, #5
 80041ee:	701a      	strb	r2, [r3, #0]
 80041f0:	edd7 7a00 	vldr	s15, [r7]
 80041f4:	eef1 7a67 	vneg.f32	s15, s15
 80041f8:	4b1d      	ldr	r3, [pc, #116]	; (8004270 <slalom_table2+0x1e0>)
 80041fa:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 80041fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8004202:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800420a:	d50e      	bpl.n	800422a <slalom_table2+0x19a>
 800420c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004210:	edd7 7a04 	vldr	s15, [r7, #16]
 8004214:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800421c:	d505      	bpl.n	800422a <slalom_table2+0x19a>
 800421e:	4b17      	ldr	r3, [pc, #92]	; (800427c <slalom_table2+0x1ec>)
 8004220:	2206      	movs	r2, #6
 8004222:	701a      	strb	r2, [r3, #0]
 8004224:	4a12      	ldr	r2, [pc, #72]	; (8004270 <slalom_table2+0x1e0>)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	6053      	str	r3, [r2, #4]
	modeacc = 4;
 800422a:	4b15      	ldr	r3, [pc, #84]	; (8004280 <slalom_table2+0x1f0>)
 800422c:	2204      	movs	r2, #4
 800422e:	701a      	strb	r2, [r3, #0]
//	enc.sigma_error=0;
	pl_DriveMotor_start();
 8004230:	f003 fdde 	bl	8007df0 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8004234:	bf00      	nop
 8004236:	4b11      	ldr	r3, [pc, #68]	; (800427c <slalom_table2+0x1ec>)
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b04      	cmp	r3, #4
 800423e:	d1fa      	bne.n	8004236 <slalom_table2+0x1a6>

	}
//	modeacc = 0;
//	enc.sigma_error=0;

	angle = angle - input_displacement;
 8004240:	4b10      	ldr	r3, [pc, #64]	; (8004284 <slalom_table2+0x1f4>)
 8004242:	ed93 7a00 	vldr	s14, [r3]
 8004246:	edd7 7a04 	vldr	s15, [r7, #16]
 800424a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800424e:	4b0d      	ldr	r3, [pc, #52]	; (8004284 <slalom_table2+0x1f4>)
 8004250:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8004254:	f003 fdda 	bl	8007e0c <pl_DriveMotor_stop>

	return turning.velocity;
 8004258:	4b05      	ldr	r3, [pc, #20]	; (8004270 <slalom_table2+0x1e0>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	ee07 3a90 	vmov	s15, r3
}
 8004260:	eeb0 0a67 	vmov.f32	s0, s15
 8004264:	3720      	adds	r7, #32
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	20000508 	.word	0x20000508
 8004270:	200004e8 	.word	0x200004e8
 8004274:	200004dc 	.word	0x200004dc
 8004278:	20000809 	.word	0x20000809
 800427c:	20000808 	.word	0x20000808
 8004280:	2000052c 	.word	0x2000052c
 8004284:	20000268 	.word	0x20000268

08004288 <no_angle>:

void no_angle(void){
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 800428c:	4b20      	ldr	r3, [pc, #128]	; (8004310 <no_angle+0x88>)
 800428e:	f04f 0200 	mov.w	r2, #0
 8004292:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8004294:	4b1e      	ldr	r3, [pc, #120]	; (8004310 <no_angle+0x88>)
 8004296:	f04f 0200 	mov.w	r2, #0
 800429a:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 800429c:	4b1c      	ldr	r3, [pc, #112]	; (8004310 <no_angle+0x88>)
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 80042a4:	4b1b      	ldr	r3, [pc, #108]	; (8004314 <no_angle+0x8c>)
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 80042ac:	4b19      	ldr	r3, [pc, #100]	; (8004314 <no_angle+0x8c>)
 80042ae:	f04f 0200 	mov.w	r2, #0
 80042b2:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 80042b4:	4b17      	ldr	r3, [pc, #92]	; (8004314 <no_angle+0x8c>)
 80042b6:	f04f 0200 	mov.w	r2, #0
 80042ba:	609a      	str	r2, [r3, #8]

	modeacc = 3;
 80042bc:	4b16      	ldr	r3, [pc, #88]	; (8004318 <no_angle+0x90>)
 80042be:	2203      	movs	r2, #3
 80042c0:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 80042c2:	f003 fd95 	bl	8007df0 <pl_DriveMotor_start>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80042c6:	e002      	b.n	80042ce <no_angle+0x46>
		HAL_Delay(1);
 80042c8:	2001      	movs	r0, #1
 80042ca:	f014 fbff 	bl	8018acc <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80042ce:	4b13      	ldr	r3, [pc, #76]	; (800431c <no_angle+0x94>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80042d6:	ddf7      	ble.n	80042c8 <no_angle+0x40>
 80042d8:	4b10      	ldr	r3, [pc, #64]	; (800431c <no_angle+0x94>)
 80042da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042de:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80042e2:	ddf1      	ble.n	80042c8 <no_angle+0x40>
 80042e4:	4b0d      	ldr	r3, [pc, #52]	; (800431c <no_angle+0x94>)
 80042e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80042ea:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80042ee:	ddeb      	ble.n	80042c8 <no_angle+0x40>
//		if(record_time >= max_record_time){
//			break;
//		}
	}
	modeacc = 0;
 80042f0:	4b09      	ldr	r3, [pc, #36]	; (8004318 <no_angle+0x90>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 80042f6:	f003 fd89 	bl	8007e0c <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 80042fa:	4b09      	ldr	r3, [pc, #36]	; (8004320 <no_angle+0x98>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a09      	ldr	r2, [pc, #36]	; (8004324 <no_angle+0x9c>)
 8004300:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8004302:	4b09      	ldr	r3, [pc, #36]	; (8004328 <no_angle+0xa0>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a09      	ldr	r2, [pc, #36]	; (800432c <no_angle+0xa4>)
 8004308:	6013      	str	r3, [r2, #0]

}
 800430a:	bf00      	nop
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	200004e8 	.word	0x200004e8
 8004314:	200004dc 	.word	0x200004dc
 8004318:	2000052c 	.word	0x2000052c
 800431c:	200002bc 	.word	0x200002bc
 8004320:	20000228 	.word	0x20000228
 8004324:	20000258 	.word	0x20000258
 8004328:	2000022c 	.word	0x2000022c
 800432c:	2000025c 	.word	0x2000025c

08004330 <mollifier_slalom_table>:


void mollifier_slalom_table(float input_center_velocity,float input_displacement, float input_max_turning_velocity) {
 8004330:	b5b0      	push	{r4, r5, r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	ed87 0a03 	vstr	s0, [r7, #12]
 800433a:	edc7 0a02 	vstr	s1, [r7, #8]
 800433e:	ed87 1a01 	vstr	s2, [r7, #4]

	// 例外処理

	Mollifier_turning.center_velocity = input_center_velocity;
 8004342:	4a3d      	ldr	r2, [pc, #244]	; (8004438 <mollifier_slalom_table+0x108>)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6053      	str	r3, [r2, #4]
	Mollifier_turning.displacement = input_displacement;
 8004348:	4a3b      	ldr	r2, [pc, #236]	; (8004438 <mollifier_slalom_table+0x108>)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	6013      	str	r3, [r2, #0]
	Mollifier_turning.max_turning_velocity = input_max_turning_velocity;
 800434e:	4a3a      	ldr	r2, [pc, #232]	; (8004438 <mollifier_slalom_table+0x108>)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6093      	str	r3, [r2, #8]


	turning.velocity = 0;
 8004354:	4b39      	ldr	r3, [pc, #228]	; (800443c <mollifier_slalom_table+0x10c>)
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 800435c:	4b37      	ldr	r3, [pc, #220]	; (800443c <mollifier_slalom_table+0x10c>)
 800435e:	f04f 0200 	mov.w	r2, #0
 8004362:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8004364:	4a36      	ldr	r2, [pc, #216]	; (8004440 <mollifier_slalom_table+0x110>)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 800436a:	4b35      	ldr	r3, [pc, #212]	; (8004440 <mollifier_slalom_table+0x110>)
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8004372:	4b33      	ldr	r3, [pc, #204]	; (8004440 <mollifier_slalom_table+0x110>)
 8004374:	f04f 0200 	mov.w	r2, #0
 8004378:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 800437a:	4b32      	ldr	r3, [pc, #200]	; (8004444 <mollifier_slalom_table+0x114>)
 800437c:	2200      	movs	r2, #0
 800437e:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8004380:	4b31      	ldr	r3, [pc, #196]	; (8004448 <mollifier_slalom_table+0x118>)
 8004382:	2201      	movs	r2, #1
 8004384:	701a      	strb	r2, [r3, #0]
	mollifier_timer=-fabs(input_displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input_max_turning_velocity;
 8004386:	edd7 7a02 	vldr	s15, [r7, #8]
 800438a:	eef0 7ae7 	vabs.f32	s15, s15
 800438e:	ee17 0a90 	vmov	r0, s15
 8004392:	f7fc f901 	bl	8000598 <__aeabi_f2d>
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	4614      	mov	r4, r2
 800439c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80043a0:	a321      	add	r3, pc, #132	; (adr r3, 8004428 <mollifier_slalom_table+0xf8>)
 80043a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a6:	4620      	mov	r0, r4
 80043a8:	4629      	mov	r1, r5
 80043aa:	f7fc fa77 	bl	800089c <__aeabi_ddiv>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	4610      	mov	r0, r2
 80043b4:	4619      	mov	r1, r3
 80043b6:	a31e      	add	r3, pc, #120	; (adr r3, 8004430 <mollifier_slalom_table+0x100>)
 80043b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043bc:	f7fc f944 	bl	8000648 <__aeabi_dmul>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	4614      	mov	r4, r2
 80043c6:	461d      	mov	r5, r3
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7fc f8e5 	bl	8000598 <__aeabi_f2d>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	4620      	mov	r0, r4
 80043d4:	4629      	mov	r1, r5
 80043d6:	f7fc fa61 	bl	800089c <__aeabi_ddiv>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4610      	mov	r0, r2
 80043e0:	4619      	mov	r1, r3
 80043e2:	f7fc fc09 	bl	8000bf8 <__aeabi_d2f>
 80043e6:	4603      	mov	r3, r0
 80043e8:	4a18      	ldr	r2, [pc, #96]	; (800444c <mollifier_slalom_table+0x11c>)
 80043ea:	6013      	str	r3, [r2, #0]
	modeacc = 6;
 80043ec:	4b18      	ldr	r3, [pc, #96]	; (8004450 <mollifier_slalom_table+0x120>)
 80043ee:	2206      	movs	r2, #6
 80043f0:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 80043f2:	f003 fcfd 	bl	8007df0 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 80043f6:	bf00      	nop
 80043f8:	4b13      	ldr	r3, [pc, #76]	; (8004448 <mollifier_slalom_table+0x118>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d1fa      	bne.n	80043f8 <mollifier_slalom_table+0xc8>

	}
//	modeacc = 0;


	angle = angle - input_displacement;
 8004402:	4b14      	ldr	r3, [pc, #80]	; (8004454 <mollifier_slalom_table+0x124>)
 8004404:	ed93 7a00 	vldr	s14, [r3]
 8004408:	edd7 7a02 	vldr	s15, [r7, #8]
 800440c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004410:	4b10      	ldr	r3, [pc, #64]	; (8004454 <mollifier_slalom_table+0x124>)
 8004412:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8004416:	f003 fcf9 	bl	8007e0c <pl_DriveMotor_stop>

}
 800441a:	bf00      	nop
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bdb0      	pop	{r4, r5, r7, pc}
 8004422:	bf00      	nop
 8004424:	f3af 8000 	nop.w
 8004428:	f9db22d1 	.word	0xf9db22d1
 800442c:	3fdc6a7e 	.word	0x3fdc6a7e
 8004430:	362cef38 	.word	0x362cef38
 8004434:	3fd78b56 	.word	0x3fd78b56
 8004438:	2000051c 	.word	0x2000051c
 800443c:	200004e8 	.word	0x200004e8
 8004440:	200004dc 	.word	0x200004dc
 8004444:	20000809 	.word	0x20000809
 8004448:	20000808 	.word	0x20000808
 800444c:	20000804 	.word	0x20000804
 8004450:	2000052c 	.word	0x2000052c
 8004454:	20000268 	.word	0x20000268

08004458 <no_frontwall_straight>:


void no_frontwall_straight(void){
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 800445c:	4b1a      	ldr	r3, [pc, #104]	; (80044c8 <no_frontwall_straight+0x70>)
 800445e:	f04f 0200 	mov.w	r2, #0
 8004462:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8004464:	4b18      	ldr	r3, [pc, #96]	; (80044c8 <no_frontwall_straight+0x70>)
 8004466:	f04f 0200 	mov.w	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 800446c:	4b16      	ldr	r3, [pc, #88]	; (80044c8 <no_frontwall_straight+0x70>)
 800446e:	f04f 0200 	mov.w	r2, #0
 8004472:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8004474:	4b15      	ldr	r3, [pc, #84]	; (80044cc <no_frontwall_straight+0x74>)
 8004476:	f04f 0200 	mov.w	r2, #0
 800447a:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 800447c:	4b13      	ldr	r3, [pc, #76]	; (80044cc <no_frontwall_straight+0x74>)
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8004484:	4b11      	ldr	r3, [pc, #68]	; (80044cc <no_frontwall_straight+0x74>)
 8004486:	f04f 0200 	mov.w	r2, #0
 800448a:	609a      	str	r2, [r3, #8]

	g_FrontWallControl_mode=1;
 800448c:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <no_frontwall_straight+0x78>)
 800448e:	2201      	movs	r2, #1
 8004490:	701a      	strb	r2, [r3, #0]
	modeacc = 5;
 8004492:	4b10      	ldr	r3, [pc, #64]	; (80044d4 <no_frontwall_straight+0x7c>)
 8004494:	2205      	movs	r2, #5
 8004496:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8004498:	f003 fcaa 	bl	8007df0 <pl_DriveMotor_start>
	wait_ms_NoReset(150);
 800449c:	2096      	movs	r0, #150	; 0x96
 800449e:	f003 ff7f 	bl	80083a0 <wait_ms_NoReset>
//		HAL_Delay(1);
////		if(record_time >= max_record_time){
////			break;
////		}
//	}
	g_FrontWallControl_mode=0;
 80044a2:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <no_frontwall_straight+0x78>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	701a      	strb	r2, [r3, #0]
	modeacc = 0;
 80044a8:	4b0a      	ldr	r3, [pc, #40]	; (80044d4 <no_frontwall_straight+0x7c>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 80044ae:	f003 fcad 	bl	8007e0c <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 80044b2:	4b09      	ldr	r3, [pc, #36]	; (80044d8 <no_frontwall_straight+0x80>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a09      	ldr	r2, [pc, #36]	; (80044dc <no_frontwall_straight+0x84>)
 80044b8:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 80044ba:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <no_frontwall_straight+0x88>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a09      	ldr	r2, [pc, #36]	; (80044e4 <no_frontwall_straight+0x8c>)
 80044c0:	6013      	str	r3, [r2, #0]

}
 80044c2:	bf00      	nop
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	200004e8 	.word	0x200004e8
 80044cc:	200004dc 	.word	0x200004dc
 80044d0:	20000595 	.word	0x20000595
 80044d4:	2000052c 	.word	0x2000052c
 80044d8:	20000228 	.word	0x20000228
 80044dc:	20000258 	.word	0x20000258
 80044e0:	2000022c 	.word	0x2000022c
 80044e4:	2000025c 	.word	0x2000025c

080044e8 <feedforward_const_accel>:
#include "fail_safe.h"

void feedforward_const_accel(float *feedforward_straight,
		float straight_velocity, float straight_acceleration,
		float *feedforward_turning, float turning_velocity,
		float turning_acceleration) {
 80044e8:	b5b0      	push	{r4, r5, r7, lr}
 80044ea:	b088      	sub	sp, #32
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6178      	str	r0, [r7, #20]
 80044f0:	ed87 0a04 	vstr	s0, [r7, #16]
 80044f4:	edc7 0a03 	vstr	s1, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	ed87 1a01 	vstr	s2, [r7, #4]
 80044fe:	edc7 1a00 	vstr	s3, [r7]

float ImT;//0.00000116 //kg/m^2 ロータ慣性モーメントターン用

if(highspeed_mode == 1){
 8004502:	4bd3      	ldr	r3, [pc, #844]	; (8004850 <feedforward_const_accel+0x368>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d102      	bne.n	8004510 <feedforward_const_accel+0x28>
	ImT=0.00000052;
 800450a:	4bd2      	ldr	r3, [pc, #840]	; (8004854 <feedforward_const_accel+0x36c>)
 800450c:	61fb      	str	r3, [r7, #28]
 800450e:	e001      	b.n	8004514 <feedforward_const_accel+0x2c>
}else{
	ImT=0.00000035;
 8004510:	4bd1      	ldr	r3, [pc, #836]	; (8004858 <feedforward_const_accel+0x370>)
 8004512:	61fb      	str	r3, [r7, #28]

}

	if (straight_velocity >= 0) {
 8004514:	edd7 7a04 	vldr	s15, [r7, #16]
 8004518:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800451c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004520:	db7c      	blt.n	800461c <feedforward_const_accel+0x134>
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f7fc f838 	bl	8000598 <__aeabi_f2d>
 8004528:	a3bd      	add	r3, pc, #756	; (adr r3, 8004820 <feedforward_const_accel+0x338>)
 800452a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452e:	f7fc f88b 	bl	8000648 <__aeabi_dmul>
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	4610      	mov	r0, r2
 8004538:	4619      	mov	r1, r3
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	4bc7      	ldr	r3, [pc, #796]	; (800485c <feedforward_const_accel+0x374>)
 8004540:	f7fc f9ac 	bl	800089c <__aeabi_ddiv>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	4610      	mov	r0, r2
 800454a:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 800454c:	a3b6      	add	r3, pc, #728	; (adr r3, 8004828 <feedforward_const_accel+0x340>)
 800454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004552:	f7fc f9a3 	bl	800089c <__aeabi_ddiv>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	4610      	mov	r0, r2
 800455c:	4619      	mov	r1, r3
 800455e:	f04f 0200 	mov.w	r2, #0
 8004562:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004566:	f7fc f999 	bl	800089c <__aeabi_ddiv>
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	4610      	mov	r0, r2
 8004570:	4619      	mov	r1, r3
 8004572:	a3af      	add	r3, pc, #700	; (adr r3, 8004830 <feedforward_const_accel+0x348>)
 8004574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004578:	f7fb feb0 	bl	80002dc <__adddf3>
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	4610      	mov	r0, r2
 8004582:	4619      	mov	r1, r3
 8004584:	a3ac      	add	r3, pc, #688	; (adr r3, 8004838 <feedforward_const_accel+0x350>)
 8004586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458a:	f7fc f85d 	bl	8000648 <__aeabi_dmul>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4610      	mov	r0, r2
 8004594:	4619      	mov	r1, r3
 8004596:	a3aa      	add	r3, pc, #680	; (adr r3, 8004840 <feedforward_const_accel+0x358>)
 8004598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459c:	f7fc f97e 	bl	800089c <__aeabi_ddiv>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4614      	mov	r4, r2
 80045a6:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 80045a8:	ed97 7a04 	vldr	s14, [r7, #16]
 80045ac:	eddf 6aad 	vldr	s13, [pc, #692]	; 8004864 <feedforward_const_accel+0x37c>
 80045b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045b4:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8004860 <feedforward_const_accel+0x378>
 80045b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045bc:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80045c0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80045c4:	ee16 0a90 	vmov	r0, s13
 80045c8:	f7fb ffe6 	bl	8000598 <__aeabi_f2d>
 80045cc:	a39e      	add	r3, pc, #632	; (adr r3, 8004848 <feedforward_const_accel+0x360>)
 80045ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d2:	f7fc f839 	bl	8000648 <__aeabi_dmul>
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	4610      	mov	r0, r2
 80045dc:	4619      	mov	r1, r3
 80045de:	a392      	add	r3, pc, #584	; (adr r3, 8004828 <feedforward_const_accel+0x340>)
 80045e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e4:	f7fc f95a 	bl	800089c <__aeabi_ddiv>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4610      	mov	r0, r2
 80045ee:	4619      	mov	r1, r3
 80045f0:	f04f 0200 	mov.w	r2, #0
 80045f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80045f8:	f7fc f950 	bl	800089c <__aeabi_ddiv>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4620      	mov	r0, r4
 8004602:	4629      	mov	r1, r5
 8004604:	f7fb fe6a 	bl	80002dc <__adddf3>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4610      	mov	r0, r2
 800460e:	4619      	mov	r1, r3
 8004610:	f7fc faf2 	bl	8000bf8 <__aeabi_d2f>
 8004614:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	e07b      	b.n	8004714 <feedforward_const_accel+0x22c>
	} else {
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f7fb ffbb 	bl	8000598 <__aeabi_f2d>
 8004622:	a37f      	add	r3, pc, #508	; (adr r3, 8004820 <feedforward_const_accel+0x338>)
 8004624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004628:	f7fc f80e 	bl	8000648 <__aeabi_dmul>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	4610      	mov	r0, r2
 8004632:	4619      	mov	r1, r3
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	4b88      	ldr	r3, [pc, #544]	; (800485c <feedforward_const_accel+0x374>)
 800463a:	f7fc f92f 	bl	800089c <__aeabi_ddiv>
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	4610      	mov	r0, r2
 8004644:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 8004646:	a378      	add	r3, pc, #480	; (adr r3, 8004828 <feedforward_const_accel+0x340>)
 8004648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464c:	f7fc f926 	bl	800089c <__aeabi_ddiv>
 8004650:	4602      	mov	r2, r0
 8004652:	460b      	mov	r3, r1
 8004654:	4610      	mov	r0, r2
 8004656:	4619      	mov	r1, r3
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004660:	f7fc f91c 	bl	800089c <__aeabi_ddiv>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4610      	mov	r0, r2
 800466a:	4619      	mov	r1, r3
 800466c:	a370      	add	r3, pc, #448	; (adr r3, 8004830 <feedforward_const_accel+0x348>)
 800466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004672:	f7fb fe31 	bl	80002d8 <__aeabi_dsub>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4610      	mov	r0, r2
 800467c:	4619      	mov	r1, r3
 800467e:	a36e      	add	r3, pc, #440	; (adr r3, 8004838 <feedforward_const_accel+0x350>)
 8004680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004684:	f7fb ffe0 	bl	8000648 <__aeabi_dmul>
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	4610      	mov	r0, r2
 800468e:	4619      	mov	r1, r3
 8004690:	a36b      	add	r3, pc, #428	; (adr r3, 8004840 <feedforward_const_accel+0x358>)
 8004692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004696:	f7fc f901 	bl	800089c <__aeabi_ddiv>
 800469a:	4602      	mov	r2, r0
 800469c:	460b      	mov	r3, r1
 800469e:	4614      	mov	r4, r2
 80046a0:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 80046a2:	ed97 7a04 	vldr	s14, [r7, #16]
 80046a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004864 <feedforward_const_accel+0x37c>
 80046aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046ae:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8004860 <feedforward_const_accel+0x378>
 80046b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046b6:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80046ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80046be:	ee16 0a90 	vmov	r0, s13
 80046c2:	f7fb ff69 	bl	8000598 <__aeabi_f2d>
 80046c6:	a360      	add	r3, pc, #384	; (adr r3, 8004848 <feedforward_const_accel+0x360>)
 80046c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046cc:	f7fb ffbc 	bl	8000648 <__aeabi_dmul>
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4610      	mov	r0, r2
 80046d6:	4619      	mov	r1, r3
 80046d8:	a353      	add	r3, pc, #332	; (adr r3, 8004828 <feedforward_const_accel+0x340>)
 80046da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046de:	f7fc f8dd 	bl	800089c <__aeabi_ddiv>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4610      	mov	r0, r2
 80046e8:	4619      	mov	r1, r3
 80046ea:	f04f 0200 	mov.w	r2, #0
 80046ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80046f2:	f7fc f8d3 	bl	800089c <__aeabi_ddiv>
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	4620      	mov	r0, r4
 80046fc:	4629      	mov	r1, r5
 80046fe:	f7fb fded 	bl	80002dc <__adddf3>
 8004702:	4602      	mov	r2, r0
 8004704:	460b      	mov	r3, r1
 8004706:	4610      	mov	r0, r2
 8004708:	4619      	mov	r1, r3
 800470a:	f7fc fa75 	bl	8000bf8 <__aeabi_d2f>
 800470e:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	601a      	str	r2, [r3, #0]
	}
	if (turning_velocity >= 0) {
 8004714:	edd7 7a01 	vldr	s15, [r7, #4]
 8004718:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800471c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004720:	f2c0 80a2 	blt.w	8004868 <feedforward_const_accel+0x380>
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 8004724:	edd7 7a07 	vldr	s15, [r7, #28]
 8004728:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8004860 <feedforward_const_accel+0x378>
 800472c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004730:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 8004734:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004738:	edd7 7a00 	vldr	s15, [r7]
 800473c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004740:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8004864 <feedforward_const_accel+0x37c>
 8004744:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004748:	ee16 0a90 	vmov	r0, s13
 800474c:	f7fb ff24 	bl	8000598 <__aeabi_f2d>
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 8004750:	a335      	add	r3, pc, #212	; (adr r3, 8004828 <feedforward_const_accel+0x340>)
 8004752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004756:	f7fc f8a1 	bl	800089c <__aeabi_ddiv>
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	4610      	mov	r0, r2
 8004760:	4619      	mov	r1, r3
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800476a:	f7fc f897 	bl	800089c <__aeabi_ddiv>
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	4610      	mov	r0, r2
 8004774:	4619      	mov	r1, r3
 8004776:	a32e      	add	r3, pc, #184	; (adr r3, 8004830 <feedforward_const_accel+0x348>)
 8004778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477c:	f7fb fdae 	bl	80002dc <__adddf3>
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4610      	mov	r0, r2
 8004786:	4619      	mov	r1, r3
 8004788:	a32b      	add	r3, pc, #172	; (adr r3, 8004838 <feedforward_const_accel+0x350>)
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	f7fb ff5b 	bl	8000648 <__aeabi_dmul>
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	4610      	mov	r0, r2
 8004798:	4619      	mov	r1, r3
 800479a:	a329      	add	r3, pc, #164	; (adr r3, 8004840 <feedforward_const_accel+0x358>)
 800479c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a0:	f7fc f87c 	bl	800089c <__aeabi_ddiv>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	4614      	mov	r4, r2
 80047aa:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 80047ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80047b0:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8004864 <feedforward_const_accel+0x37c>
 80047b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047b8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8004860 <feedforward_const_accel+0x378>
 80047bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047c0:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80047c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80047c8:	ee16 0a90 	vmov	r0, s13
 80047cc:	f7fb fee4 	bl	8000598 <__aeabi_f2d>
 80047d0:	a31d      	add	r3, pc, #116	; (adr r3, 8004848 <feedforward_const_accel+0x360>)
 80047d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d6:	f7fb ff37 	bl	8000648 <__aeabi_dmul>
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	4610      	mov	r0, r2
 80047e0:	4619      	mov	r1, r3
 80047e2:	a311      	add	r3, pc, #68	; (adr r3, 8004828 <feedforward_const_accel+0x340>)
 80047e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e8:	f7fc f858 	bl	800089c <__aeabi_ddiv>
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	4610      	mov	r0, r2
 80047f2:	4619      	mov	r1, r3
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80047fc:	f7fc f84e 	bl	800089c <__aeabi_ddiv>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4620      	mov	r0, r4
 8004806:	4629      	mov	r1, r5
 8004808:	f7fb fd68 	bl	80002dc <__adddf3>
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	4610      	mov	r0, r2
 8004812:	4619      	mov	r1, r3
 8004814:	f7fc f9f0 	bl	8000bf8 <__aeabi_d2f>
 8004818:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	601a      	str	r2, [r3, #0]
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
	}
	//*feedforward_straight=0;
	//*feedforward_turning =0;

}
 800481e:	e0a0      	b.n	8004962 <feedforward_const_accel+0x47a>
 8004820:	7df8b79b 	.word	0x7df8b79b
 8004824:	3ed5fdfc 	.word	0x3ed5fdfc
 8004828:	ca619631 	.word	0xca619631
 800482c:	3f9b3322 	.word	0x3f9b3322
 8004830:	eb1c432d 	.word	0xeb1c432d
 8004834:	3f1a36e2 	.word	0x3f1a36e2
 8004838:	51eb851f 	.word	0x51eb851f
 800483c:	3ff11eb8 	.word	0x3ff11eb8
 8004840:	b7952d23 	.word	0xb7952d23
 8004844:	3f569c23 	.word	0x3f569c23
 8004848:	761b0f50 	.word	0x761b0f50
 800484c:	3f66bf29 	.word	0x3f66bf29
 8004850:	2000080c 	.word	0x2000080c
 8004854:	350b9621 	.word	0x350b9621
 8004858:	34bbe7a2 	.word	0x34bbe7a2
 800485c:	408f4000 	.word	0x408f4000
 8004860:	421c0000 	.word	0x421c0000
 8004864:	447a0000 	.word	0x447a0000
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 8004868:	edd7 7a07 	vldr	s15, [r7, #28]
 800486c:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8004860 <feedforward_const_accel+0x378>
 8004870:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004874:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 8004878:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800487c:	edd7 7a00 	vldr	s15, [r7]
 8004880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004884:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8004864 <feedforward_const_accel+0x37c>
 8004888:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800488c:	ee16 0a90 	vmov	r0, s13
 8004890:	f7fb fe82 	bl	8000598 <__aeabi_f2d>
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 8004894:	a338      	add	r3, pc, #224	; (adr r3, 8004978 <feedforward_const_accel+0x490>)
 8004896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489a:	f7fb ffff 	bl	800089c <__aeabi_ddiv>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	4610      	mov	r0, r2
 80048a4:	4619      	mov	r1, r3
 80048a6:	f04f 0200 	mov.w	r2, #0
 80048aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80048ae:	f7fb fff5 	bl	800089c <__aeabi_ddiv>
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	4610      	mov	r0, r2
 80048b8:	4619      	mov	r1, r3
 80048ba:	a333      	add	r3, pc, #204	; (adr r3, 8004988 <feedforward_const_accel+0x4a0>)
 80048bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c0:	f7fb fd0a 	bl	80002d8 <__aeabi_dsub>
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	4610      	mov	r0, r2
 80048ca:	4619      	mov	r1, r3
 80048cc:	a330      	add	r3, pc, #192	; (adr r3, 8004990 <feedforward_const_accel+0x4a8>)
 80048ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d2:	f7fb feb9 	bl	8000648 <__aeabi_dmul>
 80048d6:	4602      	mov	r2, r0
 80048d8:	460b      	mov	r3, r1
 80048da:	4610      	mov	r0, r2
 80048dc:	4619      	mov	r1, r3
 80048de:	a32e      	add	r3, pc, #184	; (adr r3, 8004998 <feedforward_const_accel+0x4b0>)
 80048e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e4:	f7fb ffda 	bl	800089c <__aeabi_ddiv>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4614      	mov	r4, r2
 80048ee:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 80048f0:	ed97 7a01 	vldr	s14, [r7, #4]
 80048f4:	eddf 6a22 	vldr	s13, [pc, #136]	; 8004980 <feedforward_const_accel+0x498>
 80048f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048fc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004984 <feedforward_const_accel+0x49c>
 8004900:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004904:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004908:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800490c:	ee16 0a90 	vmov	r0, s13
 8004910:	f7fb fe42 	bl	8000598 <__aeabi_f2d>
 8004914:	a316      	add	r3, pc, #88	; (adr r3, 8004970 <feedforward_const_accel+0x488>)
 8004916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491a:	f7fb fe95 	bl	8000648 <__aeabi_dmul>
 800491e:	4602      	mov	r2, r0
 8004920:	460b      	mov	r3, r1
 8004922:	4610      	mov	r0, r2
 8004924:	4619      	mov	r1, r3
 8004926:	a314      	add	r3, pc, #80	; (adr r3, 8004978 <feedforward_const_accel+0x490>)
 8004928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492c:	f7fb ffb6 	bl	800089c <__aeabi_ddiv>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	4610      	mov	r0, r2
 8004936:	4619      	mov	r1, r3
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004940:	f7fb ffac 	bl	800089c <__aeabi_ddiv>
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	4620      	mov	r0, r4
 800494a:	4629      	mov	r1, r5
 800494c:	f7fb fcc6 	bl	80002dc <__adddf3>
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	4610      	mov	r0, r2
 8004956:	4619      	mov	r1, r3
 8004958:	f7fc f94e 	bl	8000bf8 <__aeabi_d2f>
 800495c:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	601a      	str	r2, [r3, #0]
}
 8004962:	bf00      	nop
 8004964:	3720      	adds	r7, #32
 8004966:	46bd      	mov	sp, r7
 8004968:	bdb0      	pop	{r4, r5, r7, pc}
 800496a:	bf00      	nop
 800496c:	f3af 8000 	nop.w
 8004970:	761b0f50 	.word	0x761b0f50
 8004974:	3f66bf29 	.word	0x3f66bf29
 8004978:	ca619631 	.word	0xca619631
 800497c:	3f9b3322 	.word	0x3f9b3322
 8004980:	447a0000 	.word	0x447a0000
 8004984:	421c0000 	.word	0x421c0000
 8004988:	eb1c432d 	.word	0xeb1c432d
 800498c:	3f1a36e2 	.word	0x3f1a36e2
 8004990:	51eb851f 	.word	0x51eb851f
 8004994:	3ff11eb8 	.word	0x3ff11eb8
 8004998:	b7952d23 	.word	0xb7952d23
 800499c:	3f569c23 	.word	0x3f569c23

080049a0 <PID_Init>:
struct PID Gyro;

float Ksp, Ksi, Ksd;
float Ktp, Kti, Ktd;

void PID_Init(void) {
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0

	Ksp = 3.1; //3//P項の制御量直進*****************************************************
 80049a4:	4b0f      	ldr	r3, [pc, #60]	; (80049e4 <PID_Init+0x44>)
 80049a6:	4a10      	ldr	r2, [pc, #64]	; (80049e8 <PID_Init+0x48>)
 80049a8:	601a      	str	r2, [r3, #0]
	Ksi = 0.08; //80//5//43//I項の制御量直進*****************************************************
 80049aa:	4b10      	ldr	r3, [pc, #64]	; (80049ec <PID_Init+0x4c>)
 80049ac:	4a10      	ldr	r2, [pc, #64]	; (80049f0 <PID_Init+0x50>)
 80049ae:	601a      	str	r2, [r3, #0]
	Ksd = 0.00; //D項の制御量直進*****************************************************
 80049b0:	4b10      	ldr	r3, [pc, #64]	; (80049f4 <PID_Init+0x54>)
 80049b2:	f04f 0200 	mov.w	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]
	Ktp = 1.6; //295//P項の制御量旋回*****************************************************
 80049b8:	4b0f      	ldr	r3, [pc, #60]	; (80049f8 <PID_Init+0x58>)
 80049ba:	4a10      	ldr	r2, [pc, #64]	; (80049fc <PID_Init+0x5c>)
 80049bc:	601a      	str	r2, [r3, #0]
	Kti = 0.06; //1//.6//I項の制御量旋回*****************************************************
 80049be:	4b10      	ldr	r3, [pc, #64]	; (8004a00 <PID_Init+0x60>)
 80049c0:	4a10      	ldr	r2, [pc, #64]	; (8004a04 <PID_Init+0x64>)
 80049c2:	601a      	str	r2, [r3, #0]
	Ktd = 0.002; //205//D項の制御量旋回*****************************************************
 80049c4:	4b10      	ldr	r3, [pc, #64]	; (8004a08 <PID_Init+0x68>)
 80049c6:	4a11      	ldr	r2, [pc, #68]	; (8004a0c <PID_Init+0x6c>)
 80049c8:	601a      	str	r2, [r3, #0]
	enc.sigma_error = 0;
 80049ca:	4b11      	ldr	r3, [pc, #68]	; (8004a10 <PID_Init+0x70>)
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 80049d2:	4b10      	ldr	r3, [pc, #64]	; (8004a14 <PID_Init+0x74>)
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	609a      	str	r2, [r3, #8]

}
 80049da:	bf00      	nop
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	20000558 	.word	0x20000558
 80049e8:	40466666 	.word	0x40466666
 80049ec:	2000055c 	.word	0x2000055c
 80049f0:	3da3d70a 	.word	0x3da3d70a
 80049f4:	20000560 	.word	0x20000560
 80049f8:	20000564 	.word	0x20000564
 80049fc:	3fcccccd 	.word	0x3fcccccd
 8004a00:	20000568 	.word	0x20000568
 8004a04:	3d75c28f 	.word	0x3d75c28f
 8004a08:	2000056c 	.word	0x2000056c
 8004a0c:	3b03126f 	.word	0x3b03126f
 8004a10:	20000538 	.word	0x20000538
 8004a14:	20000548 	.word	0x20000548

08004a18 <clear_Ierror>:

void clear_Ierror(void) {
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
	enc.sigma_error = 0;
 8004a1c:	4b06      	ldr	r3, [pc, #24]	; (8004a38 <clear_Ierror+0x20>)
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 8004a24:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <clear_Ierror+0x24>)
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	609a      	str	r2, [r3, #8]
}
 8004a2c:	bf00      	nop
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	20000538 	.word	0x20000538
 8004a3c:	20000548 	.word	0x20000548

08004a40 <EncoderGyro_PID>:


void EncoderGyro_PID(float *PID_s, float *PID_t,float straight_velocity,float turning_velocity) {
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	ed87 0a01 	vstr	s0, [r7, #4]
 8004a4e:	edc7 0a00 	vstr	s1, [r7]
	float PID_stra = 0;
 8004a52:	f04f 0300 	mov.w	r3, #0
 8004a56:	617b      	str	r3, [r7, #20]
	float PID_turn = 0;
 8004a58:	f04f 0300 	mov.w	r3, #0
 8004a5c:	613b      	str	r3, [r7, #16]
	if(highspeed_mode == 1){
 8004a5e:	4b80      	ldr	r3, [pc, #512]	; (8004c60 <EncoderGyro_PID+0x220>)
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d111      	bne.n	8004a8a <EncoderGyro_PID+0x4a>
		Ksp = 5.7; //3//P項の制御量直進*****************************************************
 8004a66:	4b7f      	ldr	r3, [pc, #508]	; (8004c64 <EncoderGyro_PID+0x224>)
 8004a68:	4a7f      	ldr	r2, [pc, #508]	; (8004c68 <EncoderGyro_PID+0x228>)
 8004a6a:	601a      	str	r2, [r3, #0]
		Ksi = 0.09; //80//5//43//I項の制御量直進*****************************************************
 8004a6c:	4b7f      	ldr	r3, [pc, #508]	; (8004c6c <EncoderGyro_PID+0x22c>)
 8004a6e:	4a80      	ldr	r2, [pc, #512]	; (8004c70 <EncoderGyro_PID+0x230>)
 8004a70:	601a      	str	r2, [r3, #0]
		Ksd = -0.007; //D項の制御量直進*****************************************************
 8004a72:	4b80      	ldr	r3, [pc, #512]	; (8004c74 <EncoderGyro_PID+0x234>)
 8004a74:	4a80      	ldr	r2, [pc, #512]	; (8004c78 <EncoderGyro_PID+0x238>)
 8004a76:	601a      	str	r2, [r3, #0]
		Ktp = 4.2; //295//P項の制御量旋回*****************************************************
 8004a78:	4b80      	ldr	r3, [pc, #512]	; (8004c7c <EncoderGyro_PID+0x23c>)
 8004a7a:	4a81      	ldr	r2, [pc, #516]	; (8004c80 <EncoderGyro_PID+0x240>)
 8004a7c:	601a      	str	r2, [r3, #0]
		Kti = 0.07; //1//.6//I項の制御量旋回*****************************************************
 8004a7e:	4b81      	ldr	r3, [pc, #516]	; (8004c84 <EncoderGyro_PID+0x244>)
 8004a80:	4a81      	ldr	r2, [pc, #516]	; (8004c88 <EncoderGyro_PID+0x248>)
 8004a82:	601a      	str	r2, [r3, #0]
		Ktd = -0.003; //205//D項の制御量旋回*****************************************************
 8004a84:	4b81      	ldr	r3, [pc, #516]	; (8004c8c <EncoderGyro_PID+0x24c>)
 8004a86:	4a82      	ldr	r2, [pc, #520]	; (8004c90 <EncoderGyro_PID+0x250>)
 8004a88:	601a      	str	r2, [r3, #0]
	}

	if (straight_velocity == 0) {
 8004a8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a96:	d101      	bne.n	8004a9c <EncoderGyro_PID+0x5c>
		reset_speed();
 8004a98:	f7fc fac4 	bl	8001024 <reset_speed>
	}
	//straight.velocity>=2500 && fabs(angle_speed)<100
	if (fabs(angle_speed) < 120 && straight_velocity >= 100 && modeacc!=4) {
 8004a9c:	4b7d      	ldr	r3, [pc, #500]	; (8004c94 <EncoderGyro_PID+0x254>)
 8004a9e:	edd3 7a00 	vldr	s15, [r3]
 8004aa2:	eef0 7ae7 	vabs.f32	s15, s15
 8004aa6:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8004c98 <EncoderGyro_PID+0x258>
 8004aaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab2:	d520      	bpl.n	8004af6 <EncoderGyro_PID+0xb6>
 8004ab4:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ab8:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8004c9c <EncoderGyro_PID+0x25c>
 8004abc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac4:	db17      	blt.n	8004af6 <EncoderGyro_PID+0xb6>
 8004ac6:	4b76      	ldr	r3, [pc, #472]	; (8004ca0 <EncoderGyro_PID+0x260>)
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d013      	beq.n	8004af6 <EncoderGyro_PID+0xb6>
		enc.error = (straight_velocity - (fusion_speedR + fusion_speedL) / 2);
 8004ace:	4b75      	ldr	r3, [pc, #468]	; (8004ca4 <EncoderGyro_PID+0x264>)
 8004ad0:	ed93 7a00 	vldr	s14, [r3]
 8004ad4:	4b74      	ldr	r3, [pc, #464]	; (8004ca8 <EncoderGyro_PID+0x268>)
 8004ad6:	edd3 7a00 	vldr	s15, [r3]
 8004ada:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ade:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004ae2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ae6:	ed97 7a01 	vldr	s14, [r7, #4]
 8004aea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004aee:	4b6f      	ldr	r3, [pc, #444]	; (8004cac <EncoderGyro_PID+0x26c>)
 8004af0:	edc3 7a00 	vstr	s15, [r3]
 8004af4:	e01a      	b.n	8004b2c <EncoderGyro_PID+0xec>
	} else {
		enc.error = (straight_velocity - (E_speedR + E_speedL) / 2);
 8004af6:	4b6e      	ldr	r3, [pc, #440]	; (8004cb0 <EncoderGyro_PID+0x270>)
 8004af8:	ed93 7a00 	vldr	s14, [r3]
 8004afc:	4b6d      	ldr	r3, [pc, #436]	; (8004cb4 <EncoderGyro_PID+0x274>)
 8004afe:	edd3 7a00 	vldr	s15, [r3]
 8004b02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b06:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004b0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b0e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b16:	4b65      	ldr	r3, [pc, #404]	; (8004cac <EncoderGyro_PID+0x26c>)
 8004b18:	edc3 7a00 	vstr	s15, [r3]
		fusion_speedL = E_lpf_speedL;
 8004b1c:	4b66      	ldr	r3, [pc, #408]	; (8004cb8 <EncoderGyro_PID+0x278>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a61      	ldr	r2, [pc, #388]	; (8004ca8 <EncoderGyro_PID+0x268>)
 8004b22:	6013      	str	r3, [r2, #0]
		fusion_speedR = E_lpf_speedR;
 8004b24:	4b65      	ldr	r3, [pc, #404]	; (8004cbc <EncoderGyro_PID+0x27c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a5e      	ldr	r2, [pc, #376]	; (8004ca4 <EncoderGyro_PID+0x264>)
 8004b2a:	6013      	str	r3, [r2, #0]
	}
	//enc.error = (straight.velocity - (fusion_speedR + fusion_speedL) / 2);
	enc.delta_error = enc.error - enc.old_error;
 8004b2c:	4b5f      	ldr	r3, [pc, #380]	; (8004cac <EncoderGyro_PID+0x26c>)
 8004b2e:	ed93 7a00 	vldr	s14, [r3]
 8004b32:	4b5e      	ldr	r3, [pc, #376]	; (8004cac <EncoderGyro_PID+0x26c>)
 8004b34:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b3c:	4b5b      	ldr	r3, [pc, #364]	; (8004cac <EncoderGyro_PID+0x26c>)
 8004b3e:	edc3 7a03 	vstr	s15, [r3, #12]
	enc.old_error = enc.error;
 8004b42:	4b5a      	ldr	r3, [pc, #360]	; (8004cac <EncoderGyro_PID+0x26c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a59      	ldr	r2, [pc, #356]	; (8004cac <EncoderGyro_PID+0x26c>)
 8004b48:	6053      	str	r3, [r2, #4]
	enc.sigma_error += enc.error;
 8004b4a:	4b58      	ldr	r3, [pc, #352]	; (8004cac <EncoderGyro_PID+0x26c>)
 8004b4c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004b50:	4b56      	ldr	r3, [pc, #344]	; (8004cac <EncoderGyro_PID+0x26c>)
 8004b52:	edd3 7a00 	vldr	s15, [r3]
 8004b56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b5a:	4b54      	ldr	r3, [pc, #336]	; (8004cac <EncoderGyro_PID+0x26c>)
 8004b5c:	edc3 7a02 	vstr	s15, [r3, #8]
	PID_stra = Ksp * enc.error + Ksi * enc.sigma_error + Ksd * enc.delta_error;
 8004b60:	4b52      	ldr	r3, [pc, #328]	; (8004cac <EncoderGyro_PID+0x26c>)
 8004b62:	ed93 7a00 	vldr	s14, [r3]
 8004b66:	4b3f      	ldr	r3, [pc, #252]	; (8004c64 <EncoderGyro_PID+0x224>)
 8004b68:	edd3 7a00 	vldr	s15, [r3]
 8004b6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b70:	4b4e      	ldr	r3, [pc, #312]	; (8004cac <EncoderGyro_PID+0x26c>)
 8004b72:	edd3 6a02 	vldr	s13, [r3, #8]
 8004b76:	4b3d      	ldr	r3, [pc, #244]	; (8004c6c <EncoderGyro_PID+0x22c>)
 8004b78:	edd3 7a00 	vldr	s15, [r3]
 8004b7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b84:	4b49      	ldr	r3, [pc, #292]	; (8004cac <EncoderGyro_PID+0x26c>)
 8004b86:	edd3 6a03 	vldr	s13, [r3, #12]
 8004b8a:	4b3a      	ldr	r3, [pc, #232]	; (8004c74 <EncoderGyro_PID+0x234>)
 8004b8c:	edd3 7a00 	vldr	s15, [r3]
 8004b90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b98:	edc7 7a05 	vstr	s15, [r7, #20]



//	if ((g_WallControl_mode == 3 || g_WallControl_mode == 1)
//			&& (highspeed_mode == 1)) {
		Gyro.error = (turning_velocity - angle_speed);
 8004b9c:	4b3d      	ldr	r3, [pc, #244]	; (8004c94 <EncoderGyro_PID+0x254>)
 8004b9e:	edd3 7a00 	vldr	s15, [r3]
 8004ba2:	ed97 7a00 	vldr	s14, [r7]
 8004ba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004baa:	4b45      	ldr	r3, [pc, #276]	; (8004cc0 <EncoderGyro_PID+0x280>)
 8004bac:	edc3 7a00 	vstr	s15, [r3]
		Gyro.delta_error = Gyro.error - Gyro.old_error;
 8004bb0:	4b43      	ldr	r3, [pc, #268]	; (8004cc0 <EncoderGyro_PID+0x280>)
 8004bb2:	ed93 7a00 	vldr	s14, [r3]
 8004bb6:	4b42      	ldr	r3, [pc, #264]	; (8004cc0 <EncoderGyro_PID+0x280>)
 8004bb8:	edd3 7a01 	vldr	s15, [r3, #4]
 8004bbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bc0:	4b3f      	ldr	r3, [pc, #252]	; (8004cc0 <EncoderGyro_PID+0x280>)
 8004bc2:	edc3 7a03 	vstr	s15, [r3, #12]
		Gyro.old_error = Gyro.error;
 8004bc6:	4b3e      	ldr	r3, [pc, #248]	; (8004cc0 <EncoderGyro_PID+0x280>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a3d      	ldr	r2, [pc, #244]	; (8004cc0 <EncoderGyro_PID+0x280>)
 8004bcc:	6053      	str	r3, [r2, #4]
		Gyro.sigma_error += Gyro.error;
 8004bce:	4b3c      	ldr	r3, [pc, #240]	; (8004cc0 <EncoderGyro_PID+0x280>)
 8004bd0:	ed93 7a02 	vldr	s14, [r3, #8]
 8004bd4:	4b3a      	ldr	r3, [pc, #232]	; (8004cc0 <EncoderGyro_PID+0x280>)
 8004bd6:	edd3 7a00 	vldr	s15, [r3]
 8004bda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bde:	4b38      	ldr	r3, [pc, #224]	; (8004cc0 <EncoderGyro_PID+0x280>)
 8004be0:	edc3 7a02 	vstr	s15, [r3, #8]
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 8004be4:	4b36      	ldr	r3, [pc, #216]	; (8004cc0 <EncoderGyro_PID+0x280>)
 8004be6:	ed93 7a00 	vldr	s14, [r3]
 8004bea:	4b24      	ldr	r3, [pc, #144]	; (8004c7c <EncoderGyro_PID+0x23c>)
 8004bec:	edd3 7a00 	vldr	s15, [r3]
 8004bf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bf4:	4b32      	ldr	r3, [pc, #200]	; (8004cc0 <EncoderGyro_PID+0x280>)
 8004bf6:	edd3 6a02 	vldr	s13, [r3, #8]
 8004bfa:	4b22      	ldr	r3, [pc, #136]	; (8004c84 <EncoderGyro_PID+0x244>)
 8004bfc:	edd3 7a00 	vldr	s15, [r3]
 8004c00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c04:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ Ktd * Gyro.delta_error;
 8004c08:	4b2d      	ldr	r3, [pc, #180]	; (8004cc0 <EncoderGyro_PID+0x280>)
 8004c0a:	edd3 6a03 	vldr	s13, [r3, #12]
 8004c0e:	4b1f      	ldr	r3, [pc, #124]	; (8004c8c <EncoderGyro_PID+0x24c>)
 8004c10:	edd3 7a00 	vldr	s15, [r3]
 8004c14:	ee66 7aa7 	vmul.f32	s15, s13, s15
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 8004c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c1c:	edc7 7a04 	vstr	s15, [r7, #16]
//
//		*PID_all_R += PID_turn;
//		*PID_all_L -= PID_turn;
//	}

	*PID_s = PID_stra / MAXMOTOR * g_V_battery_mean;
 8004c20:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c24:	eddf 6a27 	vldr	s13, [pc, #156]	; 8004cc4 <EncoderGyro_PID+0x284>
 8004c28:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004c2c:	4b26      	ldr	r3, [pc, #152]	; (8004cc8 <EncoderGyro_PID+0x288>)
 8004c2e:	edd3 7a00 	vldr	s15, [r3]
 8004c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	edc3 7a00 	vstr	s15, [r3]
	*PID_t = PID_turn / MAXMOTOR * g_V_battery_mean;
 8004c3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c40:	eddf 6a20 	vldr	s13, [pc, #128]	; 8004cc4 <EncoderGyro_PID+0x284>
 8004c44:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004c48:	4b1f      	ldr	r3, [pc, #124]	; (8004cc8 <EncoderGyro_PID+0x288>)
 8004c4a:	edd3 7a00 	vldr	s15, [r3]
 8004c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	edc3 7a00 	vstr	s15, [r3]

}
 8004c58:	bf00      	nop
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	2000080c 	.word	0x2000080c
 8004c64:	20000558 	.word	0x20000558
 8004c68:	40b66666 	.word	0x40b66666
 8004c6c:	2000055c 	.word	0x2000055c
 8004c70:	3db851ec 	.word	0x3db851ec
 8004c74:	20000560 	.word	0x20000560
 8004c78:	bbe56042 	.word	0xbbe56042
 8004c7c:	20000564 	.word	0x20000564
 8004c80:	40866666 	.word	0x40866666
 8004c84:	20000568 	.word	0x20000568
 8004c88:	3d8f5c29 	.word	0x3d8f5c29
 8004c8c:	2000056c 	.word	0x2000056c
 8004c90:	bb449ba6 	.word	0xbb449ba6
 8004c94:	2000026c 	.word	0x2000026c
 8004c98:	42f00000 	.word	0x42f00000
 8004c9c:	42c80000 	.word	0x42c80000
 8004ca0:	2000052c 	.word	0x2000052c
 8004ca4:	2000025c 	.word	0x2000025c
 8004ca8:	20000258 	.word	0x20000258
 8004cac:	20000538 	.word	0x20000538
 8004cb0:	2000022c 	.word	0x2000022c
 8004cb4:	20000228 	.word	0x20000228
 8004cb8:	20000238 	.word	0x20000238
 8004cbc:	2000023c 	.word	0x2000023c
 8004cc0:	20000548 	.word	0x20000548
 8004cc4:	44d1e000 	.word	0x44d1e000
 8004cc8:	200004d8 	.word	0x200004d8

08004ccc <init_WallControl>:
float g_CenterSlantR90_diff, g_CenterSlantL90_diff, g_CenterSlantR45_diff,
		g_CenterSlantL45_diff;



void init_WallControl(void) {
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
	g_WallControl_mode = 0;
 8004cd0:	4b3f      	ldr	r3, [pc, #252]	; (8004dd0 <init_WallControl+0x104>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	701a      	strb	r2, [r3, #0]
	g_FrontWallControl_mode = 0;
 8004cd6:	4b3f      	ldr	r3, [pc, #252]	; (8004dd4 <init_WallControl+0x108>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]
	g_WallControlStatus = 0;
 8004cdc:	4b3e      	ldr	r3, [pc, #248]	; (8004dd8 <init_WallControl+0x10c>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	701a      	strb	r2, [r3, #0]
	g_wallCut_mode = 0;
 8004ce2:	4b3e      	ldr	r3, [pc, #248]	; (8004ddc <init_WallControl+0x110>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	701a      	strb	r2, [r3, #0]
	StabilityCount_reset = 0;
 8004ce8:	4b3d      	ldr	r3, [pc, #244]	; (8004de0 <init_WallControl+0x114>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	701a      	strb	r2, [r3, #0]
	StabilityCount_L = 0;
 8004cee:	4b3d      	ldr	r3, [pc, #244]	; (8004de4 <init_WallControl+0x118>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	701a      	strb	r2, [r3, #0]
	StabilityCount_R = 0;
 8004cf4:	4b3c      	ldr	r3, [pc, #240]	; (8004de8 <init_WallControl+0x11c>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	701a      	strb	r2, [r3, #0]
	g_sensor_max_l = CENTER_L;
 8004cfa:	4b3c      	ldr	r3, [pc, #240]	; (8004dec <init_WallControl+0x120>)
 8004cfc:	4a3c      	ldr	r2, [pc, #240]	; (8004df0 <init_WallControl+0x124>)
 8004cfe:	601a      	str	r2, [r3, #0]
	g_sensor_max_r = CENTER_R;
 8004d00:	4b3c      	ldr	r3, [pc, #240]	; (8004df4 <init_WallControl+0x128>)
 8004d02:	4a3d      	ldr	r2, [pc, #244]	; (8004df8 <init_WallControl+0x12c>)
 8004d04:	601a      	str	r2, [r3, #0]
	g_skewer_displacement = SKEWER_LIMIT;
 8004d06:	4b3d      	ldr	r3, [pc, #244]	; (8004dfc <init_WallControl+0x130>)
 8004d08:	4a3d      	ldr	r2, [pc, #244]	; (8004e00 <init_WallControl+0x134>)
 8004d0a:	601a      	str	r2, [r3, #0]

	NoWallCountL90 = 0;
 8004d0c:	4b3d      	ldr	r3, [pc, #244]	; (8004e04 <init_WallControl+0x138>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]
	NoWallCountR90 = 0;
 8004d12:	4b3d      	ldr	r3, [pc, #244]	; (8004e08 <init_WallControl+0x13c>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]
	NoWallCountL45 = 0;
 8004d18:	4b3c      	ldr	r3, [pc, #240]	; (8004e0c <init_WallControl+0x140>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
	NoWallCountR45 = 0;
 8004d1e:	4b3c      	ldr	r3, [pc, #240]	; (8004e10 <init_WallControl+0x144>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]
	NoWallCountL45slant = 0;
 8004d24:	4b3b      	ldr	r3, [pc, #236]	; (8004e14 <init_WallControl+0x148>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]
	NoWallCountR45slant = 0;
 8004d2a:	4b3b      	ldr	r3, [pc, #236]	; (8004e18 <init_WallControl+0x14c>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	601a      	str	r2, [r3, #0]

	NoWallDisplacementL90 = 0;
 8004d30:	4b3a      	ldr	r3, [pc, #232]	; (8004e1c <init_WallControl+0x150>)
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR90 = 0;
 8004d38:	4b39      	ldr	r3, [pc, #228]	; (8004e20 <init_WallControl+0x154>)
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 8004d40:	4b38      	ldr	r3, [pc, #224]	; (8004e24 <init_WallControl+0x158>)
 8004d42:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8004d46:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 8004d48:	4b37      	ldr	r3, [pc, #220]	; (8004e28 <init_WallControl+0x15c>)
 8004d4a:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8004d4e:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant = 0;
 8004d50:	4b36      	ldr	r3, [pc, #216]	; (8004e2c <init_WallControl+0x160>)
 8004d52:	f04f 0200 	mov.w	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant = 0;
 8004d58:	4b35      	ldr	r3, [pc, #212]	; (8004e30 <init_WallControl+0x164>)
 8004d5a:	f04f 0200 	mov.w	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant2 = 0;
 8004d60:	4b34      	ldr	r3, [pc, #208]	; (8004e34 <init_WallControl+0x168>)
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant2 = 0;
 8004d68:	4b33      	ldr	r3, [pc, #204]	; (8004e38 <init_WallControl+0x16c>)
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]

	NoWallCountL45_flag = 0;
 8004d70:	4b32      	ldr	r3, [pc, #200]	; (8004e3c <init_WallControl+0x170>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	701a      	strb	r2, [r3, #0]
	NoWallCountR45_flag = 0;
 8004d76:	4b32      	ldr	r3, [pc, #200]	; (8004e40 <init_WallControl+0x174>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	701a      	strb	r2, [r3, #0]
	NoWallCountL45slant_flag = 0;
 8004d7c:	4b31      	ldr	r3, [pc, #196]	; (8004e44 <init_WallControl+0x178>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	701a      	strb	r2, [r3, #0]
	NoWallCountR45slant_flag = 0;
 8004d82:	4b31      	ldr	r3, [pc, #196]	; (8004e48 <init_WallControl+0x17c>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	701a      	strb	r2, [r3, #0]
	slantWallControlL_flag = 0;
 8004d88:	4b30      	ldr	r3, [pc, #192]	; (8004e4c <init_WallControl+0x180>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	701a      	strb	r2, [r3, #0]
	slantWallControlR_flag = 0;
 8004d8e:	4b30      	ldr	r3, [pc, #192]	; (8004e50 <init_WallControl+0x184>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	701a      	strb	r2, [r3, #0]

	front_wall_break_90 = 0;
 8004d94:	4b2f      	ldr	r3, [pc, #188]	; (8004e54 <init_WallControl+0x188>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	701a      	strb	r2, [r3, #0]
	front_wall_break_45 = 0;
 8004d9a:	4b2f      	ldr	r3, [pc, #188]	; (8004e58 <init_WallControl+0x18c>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	701a      	strb	r2, [r3, #0]
	front_wall_break_45slant = 0;
 8004da0:	4b2e      	ldr	r3, [pc, #184]	; (8004e5c <init_WallControl+0x190>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	701a      	strb	r2, [r3, #0]

	g_sensor_max_fl = 0;
 8004da6:	4b2e      	ldr	r3, [pc, #184]	; (8004e60 <init_WallControl+0x194>)
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr = 0;
 8004dae:	4b2d      	ldr	r3, [pc, #180]	; (8004e64 <init_WallControl+0x198>)
 8004db0:	f04f 0200 	mov.w	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]
	g_sensor_max_fl_slant = 0;
 8004db6:	4b2c      	ldr	r3, [pc, #176]	; (8004e68 <init_WallControl+0x19c>)
 8004db8:	f04f 0200 	mov.w	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr_slant = 0;
 8004dbe:	4b2b      	ldr	r3, [pc, #172]	; (8004e6c <init_WallControl+0x1a0>)
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]
}
 8004dc6:	bf00      	nop
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	20000594 	.word	0x20000594
 8004dd4:	20000595 	.word	0x20000595
 8004dd8:	20000597 	.word	0x20000597
 8004ddc:	20000596 	.word	0x20000596
 8004de0:	20000599 	.word	0x20000599
 8004de4:	2000059a 	.word	0x2000059a
 8004de8:	2000059b 	.word	0x2000059b
 8004dec:	2000059c 	.word	0x2000059c
 8004df0:	44be6000 	.word	0x44be6000
 8004df4:	200005a0 	.word	0x200005a0
 8004df8:	44974000 	.word	0x44974000
 8004dfc:	200005a4 	.word	0x200005a4
 8004e00:	41a00000 	.word	0x41a00000
 8004e04:	200005bc 	.word	0x200005bc
 8004e08:	200005b8 	.word	0x200005b8
 8004e0c:	200005c4 	.word	0x200005c4
 8004e10:	200005c0 	.word	0x200005c0
 8004e14:	200005cc 	.word	0x200005cc
 8004e18:	200005c8 	.word	0x200005c8
 8004e1c:	200005d4 	.word	0x200005d4
 8004e20:	200005d0 	.word	0x200005d0
 8004e24:	200005dc 	.word	0x200005dc
 8004e28:	200005d8 	.word	0x200005d8
 8004e2c:	200005e4 	.word	0x200005e4
 8004e30:	200005e0 	.word	0x200005e0
 8004e34:	200005ec 	.word	0x200005ec
 8004e38:	200005e8 	.word	0x200005e8
 8004e3c:	200005f0 	.word	0x200005f0
 8004e40:	200005f1 	.word	0x200005f1
 8004e44:	200005f2 	.word	0x200005f2
 8004e48:	200005f3 	.word	0x200005f3
 8004e4c:	200005f4 	.word	0x200005f4
 8004e50:	200005f5 	.word	0x200005f5
 8004e54:	200005f6 	.word	0x200005f6
 8004e58:	200005f7 	.word	0x200005f7
 8004e5c:	200005f8 	.word	0x200005f8
 8004e60:	200005fc 	.word	0x200005fc
 8004e64:	20000600 	.word	0x20000600
 8004e68:	20000604 	.word	0x20000604
 8004e6c:	20000608 	.word	0x20000608

08004e70 <calWallConrol>:


float calWallConrol(void) {
 8004e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e74:	b0aa      	sub	sp, #168	; 0xa8
 8004e76:	af00      	add	r7, sp, #0
	float PID_wall,PID_w;
	float sensor_gain_p, sensor_gain_d;
	float sensorWall_L, sensorWall_R;
	float wallcut_threshold_L, wallcut_threshold_R;

	if (highspeed_mode == 1) {
 8004e78:	4ba1      	ldr	r3, [pc, #644]	; (8005100 <calWallConrol+0x290>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d13d      	bne.n	8004efc <calWallConrol+0x8c>
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_SHORT_L;
 8004e80:	4ba0      	ldr	r3, [pc, #640]	; (8005104 <calWallConrol+0x294>)
 8004e82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_SHORT_R;
 8004e86:	4ba0      	ldr	r3, [pc, #640]	; (8005108 <calWallConrol+0x298>)
 8004e88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		if (straight.velocity > 1000) {
 8004e8c:	4b9f      	ldr	r3, [pc, #636]	; (800510c <calWallConrol+0x29c>)
 8004e8e:	edd3 7a00 	vldr	s15, [r3]
 8004e92:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8005110 <calWallConrol+0x2a0>
 8004e96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e9e:	dd06      	ble.n	8004eae <calWallConrol+0x3e>
			sensor_gain_p = SENSOR_GAIN_SHORT_P * 1000;
 8004ea0:	4b9c      	ldr	r3, [pc, #624]	; (8005114 <calWallConrol+0x2a4>)
 8004ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * 1000;
 8004ea6:	4b9c      	ldr	r3, [pc, #624]	; (8005118 <calWallConrol+0x2a8>)
 8004ea8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004eac:	e052      	b.n	8004f54 <calWallConrol+0xe4>
		} else {
			sensor_gain_p = SENSOR_GAIN_SHORT_P * straight.velocity;
 8004eae:	4b97      	ldr	r3, [pc, #604]	; (800510c <calWallConrol+0x29c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fb fb70 	bl	8000598 <__aeabi_f2d>
 8004eb8:	a389      	add	r3, pc, #548	; (adr r3, 80050e0 <calWallConrol+0x270>)
 8004eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebe:	f7fb fbc3 	bl	8000648 <__aeabi_dmul>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	4619      	mov	r1, r3
 8004eca:	f7fb fe95 	bl	8000bf8 <__aeabi_d2f>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * straight.velocity;
 8004ed4:	4b8d      	ldr	r3, [pc, #564]	; (800510c <calWallConrol+0x29c>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7fb fb5d 	bl	8000598 <__aeabi_f2d>
 8004ede:	a382      	add	r3, pc, #520	; (adr r3, 80050e8 <calWallConrol+0x278>)
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	f7fb fbb0 	bl	8000648 <__aeabi_dmul>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4610      	mov	r0, r2
 8004eee:	4619      	mov	r1, r3
 8004ef0:	f7fb fe82 	bl	8000bf8 <__aeabi_d2f>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004efa:	e02b      	b.n	8004f54 <calWallConrol+0xe4>
		}
	} else {
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_L;
 8004efc:	4b87      	ldr	r3, [pc, #540]	; (800511c <calWallConrol+0x2ac>)
 8004efe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_R;
 8004f02:	4b87      	ldr	r3, [pc, #540]	; (8005120 <calWallConrol+0x2b0>)
 8004f04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		sensor_gain_p = SENSOR_GAIN_P * straight.velocity;
 8004f08:	4b80      	ldr	r3, [pc, #512]	; (800510c <calWallConrol+0x29c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7fb fb43 	bl	8000598 <__aeabi_f2d>
 8004f12:	a377      	add	r3, pc, #476	; (adr r3, 80050f0 <calWallConrol+0x280>)
 8004f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f18:	f7fb fb96 	bl	8000648 <__aeabi_dmul>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4610      	mov	r0, r2
 8004f22:	4619      	mov	r1, r3
 8004f24:	f7fb fe68 	bl	8000bf8 <__aeabi_d2f>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		sensor_gain_d = SENSOR_GAIN_D * straight.velocity;
 8004f2e:	4b77      	ldr	r3, [pc, #476]	; (800510c <calWallConrol+0x29c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fb fb30 	bl	8000598 <__aeabi_f2d>
 8004f38:	a36f      	add	r3, pc, #444	; (adr r3, 80050f8 <calWallConrol+0x288>)
 8004f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3e:	f7fb fb83 	bl	8000648 <__aeabi_dmul>
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	4610      	mov	r0, r2
 8004f48:	4619      	mov	r1, r3
 8004f4a:	f7fb fe55 	bl	8000bf8 <__aeabi_d2f>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	}
	if (g_sensor[SENSOR_LEFT][0] < SENSOR_L_MIN) {
 8004f54:	4b73      	ldr	r3, [pc, #460]	; (8005124 <calWallConrol+0x2b4>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f240 2289 	movw	r2, #649	; 0x289
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	dc03      	bgt.n	8004f68 <calWallConrol+0xf8>
		sensorWall_L = SENSOR_L_MIN;
 8004f60:	4b71      	ldr	r3, [pc, #452]	; (8005128 <calWallConrol+0x2b8>)
 8004f62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f66:	e011      	b.n	8004f8c <calWallConrol+0x11c>
	} else if (g_sensor[SENSOR_LEFT][0] > SENSOR_L_MAX) {
 8004f68:	4b6e      	ldr	r3, [pc, #440]	; (8005124 <calWallConrol+0x2b4>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8004f70:	4293      	cmp	r3, r2
 8004f72:	dd03      	ble.n	8004f7c <calWallConrol+0x10c>
		sensorWall_L = SENSOR_L_MAX;
 8004f74:	4b6d      	ldr	r3, [pc, #436]	; (800512c <calWallConrol+0x2bc>)
 8004f76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f7a:	e007      	b.n	8004f8c <calWallConrol+0x11c>
	} else {
		sensorWall_L = (float) (g_sensor[SENSOR_LEFT][0]);
 8004f7c:	4b69      	ldr	r3, [pc, #420]	; (8005124 <calWallConrol+0x2b4>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	ee07 3a90 	vmov	s15, r3
 8004f84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f88:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	}
	if (g_sensor[SENSOR_RIGHT][0] < SENSOR_R_MIN) {
 8004f8c:	4b65      	ldr	r3, [pc, #404]	; (8005124 <calWallConrol+0x2b4>)
 8004f8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004f92:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004f96:	da03      	bge.n	8004fa0 <calWallConrol+0x130>
		sensorWall_R = SENSOR_R_MIN;
 8004f98:	4b65      	ldr	r3, [pc, #404]	; (8005130 <calWallConrol+0x2c0>)
 8004f9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f9e:	e012      	b.n	8004fc6 <calWallConrol+0x156>
	} else if (g_sensor[SENSOR_RIGHT][0] > SENSOR_R_MAX) {
 8004fa0:	4b60      	ldr	r3, [pc, #384]	; (8005124 <calWallConrol+0x2b4>)
 8004fa2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004fa6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004faa:	dd03      	ble.n	8004fb4 <calWallConrol+0x144>
		sensorWall_R = SENSOR_R_MAX;
 8004fac:	4b61      	ldr	r3, [pc, #388]	; (8005134 <calWallConrol+0x2c4>)
 8004fae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004fb2:	e008      	b.n	8004fc6 <calWallConrol+0x156>
	} else {
		sensorWall_R = (float) (g_sensor[SENSOR_RIGHT][0]);
 8004fb4:	4b5b      	ldr	r3, [pc, #364]	; (8005124 <calWallConrol+0x2b4>)
 8004fb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004fba:	ee07 3a90 	vmov	s15, r3
 8004fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fc2:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
//
//	SensorDistanceR = -0.0000001684 * g_sensor[2][0] * g_sensor[2][0] * g_sensor[2][0]
//				+ 0.0004061427 * g_sensor[2][0] * g_sensor[2][0] - 0.3784837856 * g_sensor[2][0]
//				+ 197.1162;

	PID_wall = 0;
 8004fc6:	f04f 0300 	mov.w	r3, #0
 8004fca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	PID_w = 0;
 8004fce:	f04f 0300 	mov.w	r3, #0
 8004fd2:	66bb      	str	r3, [r7, #104]	; 0x68
	if (g_WallControl_mode == 0) {
 8004fd4:	4b58      	ldr	r3, [pc, #352]	; (8005138 <calWallConrol+0x2c8>)
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d11c      	bne.n	8005016 <calWallConrol+0x1a6>
		g_WallControlStatus = 0;
 8004fdc:	4b57      	ldr	r3, [pc, #348]	; (800513c <calWallConrol+0x2cc>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	701a      	strb	r2, [r3, #0]
		StabilityCount_reset = 0;
 8004fe2:	4b57      	ldr	r3, [pc, #348]	; (8005140 <calWallConrol+0x2d0>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	701a      	strb	r2, [r3, #0]
		StabilityCount_L = 0;
 8004fe8:	4b56      	ldr	r3, [pc, #344]	; (8005144 <calWallConrol+0x2d4>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	701a      	strb	r2, [r3, #0]
		StabilityCount_R = 0;
 8004fee:	4b56      	ldr	r3, [pc, #344]	; (8005148 <calWallConrol+0x2d8>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	701a      	strb	r2, [r3, #0]
		g_sensor_max_l = CENTER_L;
 8004ff4:	4b55      	ldr	r3, [pc, #340]	; (800514c <calWallConrol+0x2dc>)
 8004ff6:	4a56      	ldr	r2, [pc, #344]	; (8005150 <calWallConrol+0x2e0>)
 8004ff8:	601a      	str	r2, [r3, #0]
		g_sensor_max_r = CENTER_R;
 8004ffa:	4b56      	ldr	r3, [pc, #344]	; (8005154 <calWallConrol+0x2e4>)
 8004ffc:	4a56      	ldr	r2, [pc, #344]	; (8005158 <calWallConrol+0x2e8>)
 8004ffe:	601a      	str	r2, [r3, #0]
		g_skewer_displacement = SKEWER_LIMIT;
 8005000:	4b56      	ldr	r3, [pc, #344]	; (800515c <calWallConrol+0x2ec>)
 8005002:	4a57      	ldr	r2, [pc, #348]	; (8005160 <calWallConrol+0x2f0>)
 8005004:	601a      	str	r2, [r3, #0]
		PID_wall = 0;
 8005006:	f04f 0300 	mov.w	r3, #0
 800500a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		pl_yellow_LED_off();
 800500e:	f002 f909 	bl	8007224 <pl_yellow_LED_off>
 8005012:	f001 ba4c 	b.w	80064ae <calWallConrol+0x163e>

	} else if (g_WallControl_mode == 1) {
 8005016:	4b48      	ldr	r3, [pc, #288]	; (8005138 <calWallConrol+0x2c8>)
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	2b01      	cmp	r3, #1
 800501c:	f040 82ef 	bne.w	80055fe <calWallConrol+0x78e>

		// 左壁の有無の判定
		if (((g_WallControlStatus >> 0) & 1) == 1) {
 8005020:	4b46      	ldr	r3, [pc, #280]	; (800513c <calWallConrol+0x2cc>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 809d 	beq.w	8005168 <calWallConrol+0x2f8>
			//前回左壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_L
 800502e:	4b3d      	ldr	r3, [pc, #244]	; (8005124 <calWallConrol+0x2b4>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8005036:	db16      	blt.n	8005066 <calWallConrol+0x1f6>
					|| fabs(g_sensor_diff[SENSOR_LEFT]) > wallcut_threshold_L) {
 8005038:	4b4a      	ldr	r3, [pc, #296]	; (8005164 <calWallConrol+0x2f4>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4618      	mov	r0, r3
 800503e:	f7fb fa99 	bl	8000574 <__aeabi_i2d>
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	4690      	mov	r8, r2
 8005048:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800504c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005050:	f7fb faa2 	bl	8000598 <__aeabi_f2d>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	4640      	mov	r0, r8
 800505a:	4649      	mov	r1, r9
 800505c:	f7fb fd84 	bl	8000b68 <__aeabi_dcmpgt>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d037      	beq.n	80050d6 <calWallConrol+0x266>
				g_WallControlStatus = g_WallControlStatus - 1;
 8005066:	4b35      	ldr	r3, [pc, #212]	; (800513c <calWallConrol+0x2cc>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	3b01      	subs	r3, #1
 800506c:	b2da      	uxtb	r2, r3
 800506e:	4b33      	ldr	r3, [pc, #204]	; (800513c <calWallConrol+0x2cc>)
 8005070:	701a      	strb	r2, [r3, #0]
				g_sensor_max_l = 0;
 8005072:	4b36      	ldr	r3, [pc, #216]	; (800514c <calWallConrol+0x2dc>)
 8005074:	f04f 0200 	mov.w	r2, #0
 8005078:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 800507a:	2300      	movs	r3, #0
 800507c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005080:	e021      	b.n	80050c6 <calWallConrol+0x256>
					if (g_sensor_max_l < (float) (g_sensor[SENSOR_LEFT][i])) {
 8005082:	4a28      	ldr	r2, [pc, #160]	; (8005124 <calWallConrol+0x2b4>)
 8005084:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800508c:	ee07 3a90 	vmov	s15, r3
 8005090:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005094:	4b2d      	ldr	r3, [pc, #180]	; (800514c <calWallConrol+0x2dc>)
 8005096:	edd3 7a00 	vldr	s15, [r3]
 800509a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800509e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a2:	dd0b      	ble.n	80050bc <calWallConrol+0x24c>
						g_sensor_max_l = (float) (g_sensor[SENSOR_LEFT][i]);
 80050a4:	4a1f      	ldr	r2, [pc, #124]	; (8005124 <calWallConrol+0x2b4>)
 80050a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ae:	ee07 3a90 	vmov	s15, r3
 80050b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050b6:	4b25      	ldr	r3, [pc, #148]	; (800514c <calWallConrol+0x2dc>)
 80050b8:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80050bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050c0:	3301      	adds	r3, #1
 80050c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050ca:	2b13      	cmp	r3, #19
 80050cc:	ddd9      	ble.n	8005082 <calWallConrol+0x212>
					}
				}
				g_skewer_displacement = 0;
 80050ce:	4b23      	ldr	r3, [pc, #140]	; (800515c <calWallConrol+0x2ec>)
 80050d0:	f04f 0200 	mov.w	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_L = 0;
 80050d6:	4b1b      	ldr	r3, [pc, #108]	; (8005144 <calWallConrol+0x2d4>)
 80050d8:	2200      	movs	r2, #0
 80050da:	701a      	strb	r2, [r3, #0]
 80050dc:	e066      	b.n	80051ac <calWallConrol+0x33c>
 80050de:	bf00      	nop
 80050e0:	33333333 	.word	0x33333333
 80050e4:	3fd33333 	.word	0x3fd33333
 80050e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80050ec:	bf70624d 	.word	0xbf70624d
 80050f0:	33333333 	.word	0x33333333
 80050f4:	3fe33333 	.word	0x3fe33333
 80050f8:	bc6a7efa 	.word	0xbc6a7efa
 80050fc:	3f789374 	.word	0x3f789374
 8005100:	2000080c 	.word	0x2000080c
 8005104:	435c0000 	.word	0x435c0000
 8005108:	43480000 	.word	0x43480000
 800510c:	200004dc 	.word	0x200004dc
 8005110:	447a0000 	.word	0x447a0000
 8005114:	43960000 	.word	0x43960000
 8005118:	c0800000 	.word	0xc0800000
 800511c:	431d0000 	.word	0x431d0000
 8005120:	42dc0000 	.word	0x42dc0000
 8005124:	200002bc 	.word	0x200002bc
 8005128:	44228000 	.word	0x44228000
 800512c:	450fc000 	.word	0x450fc000
 8005130:	44160000 	.word	0x44160000
 8005134:	44fa0000 	.word	0x44fa0000
 8005138:	20000594 	.word	0x20000594
 800513c:	20000597 	.word	0x20000597
 8005140:	20000599 	.word	0x20000599
 8005144:	2000059a 	.word	0x2000059a
 8005148:	2000059b 	.word	0x2000059b
 800514c:	2000059c 	.word	0x2000059c
 8005150:	44be6000 	.word	0x44be6000
 8005154:	200005a0 	.word	0x200005a0
 8005158:	44974000 	.word	0x44974000
 800515c:	200005a4 	.word	0x200005a4
 8005160:	41a00000 	.word	0x41a00000
 8005164:	2000044c 	.word	0x2000044c
		} else {
			//前回左壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_L
 8005168:	4bbf      	ldr	r3, [pc, #764]	; (8005468 <calWallConrol+0x5f8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8005170:	dd1c      	ble.n	80051ac <calWallConrol+0x33c>
					&& fabs(g_sensor_diff[SENSOR_LEFT]) < wallcut_threshold_L) {
 8005172:	4bbe      	ldr	r3, [pc, #760]	; (800546c <calWallConrol+0x5fc>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	f7fb f9fc 	bl	8000574 <__aeabi_i2d>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	4614      	mov	r4, r2
 8005182:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8005186:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800518a:	f7fb fa05 	bl	8000598 <__aeabi_f2d>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	4620      	mov	r0, r4
 8005194:	4629      	mov	r1, r5
 8005196:	f7fb fcc9 	bl	8000b2c <__aeabi_dcmplt>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d005      	beq.n	80051ac <calWallConrol+0x33c>
				g_WallControlStatus = g_WallControlStatus + 1;
 80051a0:	4bb3      	ldr	r3, [pc, #716]	; (8005470 <calWallConrol+0x600>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	3301      	adds	r3, #1
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	4bb1      	ldr	r3, [pc, #708]	; (8005470 <calWallConrol+0x600>)
 80051aa:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_L >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 1;
//			}
		}
		// 右壁の有無の判定
		if (((g_WallControlStatus >> 1) & 1) == 1) {
 80051ac:	4bb0      	ldr	r3, [pc, #704]	; (8005470 <calWallConrol+0x600>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	085b      	lsrs	r3, r3, #1
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d05c      	beq.n	8005276 <calWallConrol+0x406>
			//前回右壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_R
 80051bc:	4baa      	ldr	r3, [pc, #680]	; (8005468 <calWallConrol+0x5f8>)
 80051be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80051c2:	f240 2225 	movw	r2, #549	; 0x225
 80051c6:	4293      	cmp	r3, r2
 80051c8:	dd17      	ble.n	80051fa <calWallConrol+0x38a>
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 80051ca:	4ba8      	ldr	r3, [pc, #672]	; (800546c <calWallConrol+0x5fc>)
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fb f9d0 	bl	8000574 <__aeabi_i2d>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	613a      	str	r2, [r7, #16]
 80051da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051de:	617b      	str	r3, [r7, #20]
							> wallcut_threshold_R) {
 80051e0:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80051e4:	f7fb f9d8 	bl	8000598 <__aeabi_f2d>
 80051e8:	4602      	mov	r2, r0
 80051ea:	460b      	mov	r3, r1
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 80051ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80051f0:	f7fb fcba 	bl	8000b68 <__aeabi_dcmpgt>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d039      	beq.n	800526e <calWallConrol+0x3fe>
				g_WallControlStatus = g_WallControlStatus - 2;
 80051fa:	4b9d      	ldr	r3, [pc, #628]	; (8005470 <calWallConrol+0x600>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	3b02      	subs	r3, #2
 8005200:	b2da      	uxtb	r2, r3
 8005202:	4b9b      	ldr	r3, [pc, #620]	; (8005470 <calWallConrol+0x600>)
 8005204:	701a      	strb	r2, [r3, #0]
				g_sensor_max_r = 0;
 8005206:	4b9b      	ldr	r3, [pc, #620]	; (8005474 <calWallConrol+0x604>)
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 800520e:	2300      	movs	r3, #0
 8005210:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005214:	e023      	b.n	800525e <calWallConrol+0x3ee>
					if (g_sensor_max_r < (float) (g_sensor[SENSOR_RIGHT][i])) {
 8005216:	4a94      	ldr	r2, [pc, #592]	; (8005468 <calWallConrol+0x5f8>)
 8005218:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800521c:	3350      	adds	r3, #80	; 0x50
 800521e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005222:	ee07 3a90 	vmov	s15, r3
 8005226:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800522a:	4b92      	ldr	r3, [pc, #584]	; (8005474 <calWallConrol+0x604>)
 800522c:	edd3 7a00 	vldr	s15, [r3]
 8005230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005238:	dd0c      	ble.n	8005254 <calWallConrol+0x3e4>
						g_sensor_max_r = (float) (g_sensor[SENSOR_RIGHT][i]);
 800523a:	4a8b      	ldr	r2, [pc, #556]	; (8005468 <calWallConrol+0x5f8>)
 800523c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005240:	3350      	adds	r3, #80	; 0x50
 8005242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005246:	ee07 3a90 	vmov	s15, r3
 800524a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800524e:	4b89      	ldr	r3, [pc, #548]	; (8005474 <calWallConrol+0x604>)
 8005250:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8005254:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005258:	3301      	adds	r3, #1
 800525a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800525e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005262:	2b13      	cmp	r3, #19
 8005264:	ddd7      	ble.n	8005216 <calWallConrol+0x3a6>
					}
				}
				g_skewer_displacement = 0;
 8005266:	4b84      	ldr	r3, [pc, #528]	; (8005478 <calWallConrol+0x608>)
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_R = 0;
 800526e:	4b83      	ldr	r3, [pc, #524]	; (800547c <calWallConrol+0x60c>)
 8005270:	2200      	movs	r2, #0
 8005272:	701a      	strb	r2, [r3, #0]
 8005274:	e024      	b.n	80052c0 <calWallConrol+0x450>
		} else {
			//前回右壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_R
 8005276:	4b7c      	ldr	r3, [pc, #496]	; (8005468 <calWallConrol+0x5f8>)
 8005278:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800527c:	f240 2226 	movw	r2, #550	; 0x226
 8005280:	4293      	cmp	r3, r2
 8005282:	dd1d      	ble.n	80052c0 <calWallConrol+0x450>
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8005284:	4b79      	ldr	r3, [pc, #484]	; (800546c <calWallConrol+0x5fc>)
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	4618      	mov	r0, r3
 800528a:	f7fb f973 	bl	8000574 <__aeabi_i2d>
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	60ba      	str	r2, [r7, #8]
 8005294:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005298:	60fb      	str	r3, [r7, #12]
							< wallcut_threshold_R) {
 800529a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800529e:	f7fb f97b 	bl	8000598 <__aeabi_f2d>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 80052a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80052aa:	f7fb fc3f 	bl	8000b2c <__aeabi_dcmplt>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d005      	beq.n	80052c0 <calWallConrol+0x450>
				//StabilityCount_R++;
				g_WallControlStatus = g_WallControlStatus + 2;			//安定消す
 80052b4:	4b6e      	ldr	r3, [pc, #440]	; (8005470 <calWallConrol+0x600>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	3302      	adds	r3, #2
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	4b6c      	ldr	r3, [pc, #432]	; (8005470 <calWallConrol+0x600>)
 80052be:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_R >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 2;
//			}
		}

		switch (g_WallControlStatus) {
 80052c0:	4b6b      	ldr	r3, [pc, #428]	; (8005470 <calWallConrol+0x600>)
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	2b03      	cmp	r3, #3
 80052c6:	f201 80f2 	bhi.w	80064ae <calWallConrol+0x163e>
 80052ca:	a201      	add	r2, pc, #4	; (adr r2, 80052d0 <calWallConrol+0x460>)
 80052cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d0:	080052e1 	.word	0x080052e1
 80052d4:	080053e7 	.word	0x080053e7
 80052d8:	08005495 	.word	0x08005495
 80052dc:	080054ff 	.word	0x080054ff
		case 0:			//両壁なし
			g_skewer_displacement += straight.velocity * INTERRUPT_TIME;
 80052e0:	4b65      	ldr	r3, [pc, #404]	; (8005478 <calWallConrol+0x608>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7fb f957 	bl	8000598 <__aeabi_f2d>
 80052ea:	4604      	mov	r4, r0
 80052ec:	460d      	mov	r5, r1
 80052ee:	4b64      	ldr	r3, [pc, #400]	; (8005480 <calWallConrol+0x610>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fb f950 	bl	8000598 <__aeabi_f2d>
 80052f8:	a357      	add	r3, pc, #348	; (adr r3, 8005458 <calWallConrol+0x5e8>)
 80052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fe:	f7fb f9a3 	bl	8000648 <__aeabi_dmul>
 8005302:	4602      	mov	r2, r0
 8005304:	460b      	mov	r3, r1
 8005306:	4620      	mov	r0, r4
 8005308:	4629      	mov	r1, r5
 800530a:	f7fa ffe7 	bl	80002dc <__adddf3>
 800530e:	4602      	mov	r2, r0
 8005310:	460b      	mov	r3, r1
 8005312:	4610      	mov	r0, r2
 8005314:	4619      	mov	r1, r3
 8005316:	f7fb fc6f 	bl	8000bf8 <__aeabi_d2f>
 800531a:	4603      	mov	r3, r0
 800531c:	4a56      	ldr	r2, [pc, #344]	; (8005478 <calWallConrol+0x608>)
 800531e:	6013      	str	r3, [r2, #0]
			if (g_skewer_displacement < SKEWER_LIMIT) {
 8005320:	4b55      	ldr	r3, [pc, #340]	; (8005478 <calWallConrol+0x608>)
 8005322:	edd3 7a00 	vldr	s15, [r3]
 8005326:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800532a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800532e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005332:	d52e      	bpl.n	8005392 <calWallConrol+0x522>
				wall_normal.error = 0.7
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8005334:	4b53      	ldr	r3, [pc, #332]	; (8005484 <calWallConrol+0x614>)
 8005336:	edd3 7a00 	vldr	s15, [r3]
 800533a:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8005488 <calWallConrol+0x618>
 800533e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005342:	eef1 6a67 	vneg.f32	s13, s15
 8005346:	4b4f      	ldr	r3, [pc, #316]	; (8005484 <calWallConrol+0x614>)
 8005348:	edd3 7a00 	vldr	s15, [r3]
 800534c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
								+ (g_sensor_max_r - CENTER_R) / g_sensor_max_r);
 8005350:	4b48      	ldr	r3, [pc, #288]	; (8005474 <calWallConrol+0x604>)
 8005352:	edd3 7a00 	vldr	s15, [r3]
 8005356:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005490 <calWallConrol+0x620>
 800535a:	ee37 6ae6 	vsub.f32	s12, s15, s13
 800535e:	4b45      	ldr	r3, [pc, #276]	; (8005474 <calWallConrol+0x604>)
 8005360:	edd3 6a00 	vldr	s13, [r3]
 8005364:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800536c:	ee17 0a90 	vmov	r0, s15
 8005370:	f7fb f912 	bl	8000598 <__aeabi_f2d>
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8005374:	a33a      	add	r3, pc, #232	; (adr r3, 8005460 <calWallConrol+0x5f0>)
 8005376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537a:	f7fb f965 	bl	8000648 <__aeabi_dmul>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4610      	mov	r0, r2
 8005384:	4619      	mov	r1, r3
 8005386:	f7fb fc37 	bl	8000bf8 <__aeabi_d2f>
 800538a:	4603      	mov	r3, r0
				wall_normal.error = 0.7
 800538c:	4a3f      	ldr	r2, [pc, #252]	; (800548c <calWallConrol+0x61c>)
 800538e:	6013      	str	r3, [r2, #0]
 8005390:	e003      	b.n	800539a <calWallConrol+0x52a>
			} else {
				wall_normal.error = 0;
 8005392:	4b3e      	ldr	r3, [pc, #248]	; (800548c <calWallConrol+0x61c>)
 8005394:	f04f 0200 	mov.w	r2, #0
 8005398:	601a      	str	r2, [r3, #0]
			}
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 800539a:	4b3c      	ldr	r3, [pc, #240]	; (800548c <calWallConrol+0x61c>)
 800539c:	ed93 7a00 	vldr	s14, [r3]
 80053a0:	4b3a      	ldr	r3, [pc, #232]	; (800548c <calWallConrol+0x61c>)
 80053a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80053a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053aa:	4b38      	ldr	r3, [pc, #224]	; (800548c <calWallConrol+0x61c>)
 80053ac:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 80053b0:	4b36      	ldr	r3, [pc, #216]	; (800548c <calWallConrol+0x61c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a35      	ldr	r2, [pc, #212]	; (800548c <calWallConrol+0x61c>)
 80053b6:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 80053b8:	4b34      	ldr	r3, [pc, #208]	; (800548c <calWallConrol+0x61c>)
 80053ba:	ed93 7a00 	vldr	s14, [r3]
 80053be:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80053c2:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 80053c6:	4b31      	ldr	r3, [pc, #196]	; (800548c <calWallConrol+0x61c>)
 80053c8:	edd3 6a02 	vldr	s13, [r3, #8]
 80053cc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80053d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 80053d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053d8:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_count(0);
 80053dc:	2000      	movs	r0, #0
 80053de:	f001 ff5b 	bl	8007298 <pl_yellow_LED_count>
			break;
 80053e2:	f001 b864 	b.w	80064ae <calWallConrol+0x163e>
		case 1:			//左壁のみ
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 80053e6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80053ea:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005488 <calWallConrol+0x618>
 80053ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80053f2:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80053f6:	ee67 6a87 	vmul.f32	s13, s15, s14
					/ (float) (sensorWall_L));
 80053fa:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80053fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 8005402:	4b22      	ldr	r3, [pc, #136]	; (800548c <calWallConrol+0x61c>)
 8005404:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005408:	4b20      	ldr	r3, [pc, #128]	; (800548c <calWallConrol+0x61c>)
 800540a:	ed93 7a00 	vldr	s14, [r3]
 800540e:	4b1f      	ldr	r3, [pc, #124]	; (800548c <calWallConrol+0x61c>)
 8005410:	edd3 7a01 	vldr	s15, [r3, #4]
 8005414:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005418:	4b1c      	ldr	r3, [pc, #112]	; (800548c <calWallConrol+0x61c>)
 800541a:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 800541e:	4b1b      	ldr	r3, [pc, #108]	; (800548c <calWallConrol+0x61c>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a1a      	ldr	r2, [pc, #104]	; (800548c <calWallConrol+0x61c>)
 8005424:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8005426:	4b19      	ldr	r3, [pc, #100]	; (800548c <calWallConrol+0x61c>)
 8005428:	ed93 7a00 	vldr	s14, [r3]
 800542c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005430:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005434:	4b15      	ldr	r3, [pc, #84]	; (800548c <calWallConrol+0x61c>)
 8005436:	edd3 6a02 	vldr	s13, [r3, #8]
 800543a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800543e:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005446:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-2 * (float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0]));
			pl_yellow_LED_count(128);
 800544a:	2080      	movs	r0, #128	; 0x80
 800544c:	f001 ff24 	bl	8007298 <pl_yellow_LED_count>
			break;
 8005450:	f001 b82d 	b.w	80064ae <calWallConrol+0x163e>
 8005454:	f3af 8000 	nop.w
 8005458:	d2f1a9fc 	.word	0xd2f1a9fc
 800545c:	3f50624d 	.word	0x3f50624d
 8005460:	66666666 	.word	0x66666666
 8005464:	3fe66666 	.word	0x3fe66666
 8005468:	200002bc 	.word	0x200002bc
 800546c:	2000044c 	.word	0x2000044c
 8005470:	20000597 	.word	0x20000597
 8005474:	200005a0 	.word	0x200005a0
 8005478:	200005a4 	.word	0x200005a4
 800547c:	2000059b 	.word	0x2000059b
 8005480:	200004dc 	.word	0x200004dc
 8005484:	2000059c 	.word	0x2000059c
 8005488:	44be6000 	.word	0x44be6000
 800548c:	20000570 	.word	0x20000570
 8005490:	44974000 	.word	0x44974000
		case 2:			//右壁のみ
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 8005494:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005498:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8005490 <calWallConrol+0x620>
 800549c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80054a0:	ee77 6aa7 	vadd.f32	s13, s15, s15
					/ (float) (sensorWall_R));
 80054a4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80054a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 80054ac:	4baa      	ldr	r3, [pc, #680]	; (8005758 <calWallConrol+0x8e8>)
 80054ae:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 80054b2:	4ba9      	ldr	r3, [pc, #676]	; (8005758 <calWallConrol+0x8e8>)
 80054b4:	ed93 7a00 	vldr	s14, [r3]
 80054b8:	4ba7      	ldr	r3, [pc, #668]	; (8005758 <calWallConrol+0x8e8>)
 80054ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80054be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054c2:	4ba5      	ldr	r3, [pc, #660]	; (8005758 <calWallConrol+0x8e8>)
 80054c4:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 80054c8:	4ba3      	ldr	r3, [pc, #652]	; (8005758 <calWallConrol+0x8e8>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4aa2      	ldr	r2, [pc, #648]	; (8005758 <calWallConrol+0x8e8>)
 80054ce:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 80054d0:	4ba1      	ldr	r3, [pc, #644]	; (8005758 <calWallConrol+0x8e8>)
 80054d2:	ed93 7a00 	vldr	s14, [r3]
 80054d6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80054da:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 80054de:	4b9e      	ldr	r3, [pc, #632]	; (8005758 <calWallConrol+0x8e8>)
 80054e0:	edd3 6a02 	vldr	s13, [r3, #8]
 80054e4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80054e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 80054ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054f0:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (2 * (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(1);
 80054f4:	2001      	movs	r0, #1
 80054f6:	f001 fecf 	bl	8007298 <pl_yellow_LED_count>
			break;
 80054fa:	f000 bfd8 	b.w	80064ae <calWallConrol+0x163e>
		case 3:			//両壁あり
			wall_normal.error =
					(-(float) (sensorWall_L - CENTER_L) / (float) (sensorWall_L)
 80054fe:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005502:	ed9f 7a96 	vldr	s14, [pc, #600]	; 800575c <calWallConrol+0x8ec>
 8005506:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800550a:	eef1 6a67 	vneg.f32	s13, s15
 800550e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
							+ (float) (sensorWall_R - CENTER_R)
 8005516:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800551a:	eddf 6a91 	vldr	s13, [pc, #580]	; 8005760 <calWallConrol+0x8f0>
 800551e:	ee37 6ae6 	vsub.f32	s12, s15, s13
									/ (float) (sensorWall_R));
 8005522:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8005526:	eec6 7a26 	vdiv.f32	s15, s12, s13
							+ (float) (sensorWall_R - CENTER_R)
 800552a:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_normal.error =
 800552e:	4b8a      	ldr	r3, [pc, #552]	; (8005758 <calWallConrol+0x8e8>)
 8005530:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005534:	4b88      	ldr	r3, [pc, #544]	; (8005758 <calWallConrol+0x8e8>)
 8005536:	ed93 7a00 	vldr	s14, [r3]
 800553a:	4b87      	ldr	r3, [pc, #540]	; (8005758 <calWallConrol+0x8e8>)
 800553c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005540:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005544:	4b84      	ldr	r3, [pc, #528]	; (8005758 <calWallConrol+0x8e8>)
 8005546:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 800554a:	4b83      	ldr	r3, [pc, #524]	; (8005758 <calWallConrol+0x8e8>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a82      	ldr	r2, [pc, #520]	; (8005758 <calWallConrol+0x8e8>)
 8005550:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8005552:	4b81      	ldr	r3, [pc, #516]	; (8005758 <calWallConrol+0x8e8>)
 8005554:	ed93 7a00 	vldr	s14, [r3]
 8005558:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800555c:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005560:	4b7d      	ldr	r3, [pc, #500]	; (8005758 <calWallConrol+0x8e8>)
 8005562:	edd3 6a02 	vldr	s13, [r3, #8]
 8005566:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800556a:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 800556e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005572:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-(float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0])
//							+ (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(129);
 8005576:	2081      	movs	r0, #129	; 0x81
 8005578:	f001 fe8e 	bl	8007298 <pl_yellow_LED_count>
			if ((fabs(g_sensor_diff[SENSOR_LEFT]) < 30)
 800557c:	4b79      	ldr	r3, [pc, #484]	; (8005764 <calWallConrol+0x8f4>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4618      	mov	r0, r3
 8005582:	f7fa fff7 	bl	8000574 <__aeabi_i2d>
 8005586:	4602      	mov	r2, r0
 8005588:	460b      	mov	r3, r1
 800558a:	603a      	str	r2, [r7, #0]
 800558c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005590:	607b      	str	r3, [r7, #4]
 8005592:	f04f 0200 	mov.w	r2, #0
 8005596:	4b74      	ldr	r3, [pc, #464]	; (8005768 <calWallConrol+0x8f8>)
 8005598:	e9d7 0100 	ldrd	r0, r1, [r7]
 800559c:	f7fb fac6 	bl	8000b2c <__aeabi_dcmplt>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d01a      	beq.n	80055dc <calWallConrol+0x76c>
					&& (fabs(g_sensor_diff[SENSOR_RIGHT]) < 30)) {
 80055a6:	4b6f      	ldr	r3, [pc, #444]	; (8005764 <calWallConrol+0x8f4>)
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fa ffe2 	bl	8000574 <__aeabi_i2d>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	4692      	mov	sl, r2
 80055b6:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80055ba:	f04f 0200 	mov.w	r2, #0
 80055be:	4b6a      	ldr	r3, [pc, #424]	; (8005768 <calWallConrol+0x8f8>)
 80055c0:	4650      	mov	r0, sl
 80055c2:	4659      	mov	r1, fp
 80055c4:	f7fb fab2 	bl	8000b2c <__aeabi_dcmplt>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d006      	beq.n	80055dc <calWallConrol+0x76c>
				StabilityCount_reset++;
 80055ce:	4b67      	ldr	r3, [pc, #412]	; (800576c <calWallConrol+0x8fc>)
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	3301      	adds	r3, #1
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	4b65      	ldr	r3, [pc, #404]	; (800576c <calWallConrol+0x8fc>)
 80055d8:	701a      	strb	r2, [r3, #0]
 80055da:	e002      	b.n	80055e2 <calWallConrol+0x772>
			} else {
				StabilityCount_reset = 0;
 80055dc:	4b63      	ldr	r3, [pc, #396]	; (800576c <calWallConrol+0x8fc>)
 80055de:	2200      	movs	r2, #0
 80055e0:	701a      	strb	r2, [r3, #0]
			}
			if (StabilityCount_reset >= 25) {
 80055e2:	4b62      	ldr	r3, [pc, #392]	; (800576c <calWallConrol+0x8fc>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b18      	cmp	r3, #24
 80055e8:	f240 8760 	bls.w	80064ac <calWallConrol+0x163c>
				Gyro.sigma_error = 0;
 80055ec:	4b60      	ldr	r3, [pc, #384]	; (8005770 <calWallConrol+0x900>)
 80055ee:	f04f 0200 	mov.w	r2, #0
 80055f2:	609a      	str	r2, [r3, #8]
				StabilityCount_reset = 0;
 80055f4:	4b5d      	ldr	r3, [pc, #372]	; (800576c <calWallConrol+0x8fc>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	701a      	strb	r2, [r3, #0]
			}
			break;
 80055fa:	f000 bf57 	b.w	80064ac <calWallConrol+0x163c>
		}
//		if (highspeed_mode == 1) {
//			PID_wall = PID_wall * 0.7;
//		}

	} else if (g_WallControl_mode == 2) {
 80055fe:	4b5d      	ldr	r3, [pc, #372]	; (8005774 <calWallConrol+0x904>)
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	2b02      	cmp	r3, #2
 8005604:	f000 8753 	beq.w	80064ae <calWallConrol+0x163e>
// 斜めの制御


	} else if (g_WallControl_mode == 3) {
 8005608:	4b5a      	ldr	r3, [pc, #360]	; (8005774 <calWallConrol+0x904>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	2b03      	cmp	r3, #3
 800560e:	f040 874e 	bne.w	80064ae <calWallConrol+0x163e>
		//g_WallControlStatus=3;
		float CenterSlantR, CenterSlantL;
		float coefficientR[4];
		float coefficientL[4];
		float sensor_gain_slant90_p, sensor_gain_slant90_d;
		if (straight.velocity > 1000) {
 8005612:	4b59      	ldr	r3, [pc, #356]	; (8005778 <calWallConrol+0x908>)
 8005614:	edd3 7a00 	vldr	s15, [r3]
 8005618:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800577c <calWallConrol+0x90c>
 800561c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005624:	dd05      	ble.n	8005632 <calWallConrol+0x7c2>
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * 1000;
 8005626:	4b56      	ldr	r3, [pc, #344]	; (8005780 <calWallConrol+0x910>)
 8005628:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * 1000;
 800562c:	4b55      	ldr	r3, [pc, #340]	; (8005784 <calWallConrol+0x914>)
 800562e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005630:	e024      	b.n	800567c <calWallConrol+0x80c>
		} else {
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * straight.velocity;
 8005632:	4b51      	ldr	r3, [pc, #324]	; (8005778 <calWallConrol+0x908>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4618      	mov	r0, r3
 8005638:	f7fa ffae 	bl	8000598 <__aeabi_f2d>
 800563c:	a342      	add	r3, pc, #264	; (adr r3, 8005748 <calWallConrol+0x8d8>)
 800563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005642:	f7fb f801 	bl	8000648 <__aeabi_dmul>
 8005646:	4602      	mov	r2, r0
 8005648:	460b      	mov	r3, r1
 800564a:	4610      	mov	r0, r2
 800564c:	4619      	mov	r1, r3
 800564e:	f7fb fad3 	bl	8000bf8 <__aeabi_d2f>
 8005652:	4603      	mov	r3, r0
 8005654:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * straight.velocity;
 8005658:	4b47      	ldr	r3, [pc, #284]	; (8005778 <calWallConrol+0x908>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4618      	mov	r0, r3
 800565e:	f7fa ff9b 	bl	8000598 <__aeabi_f2d>
 8005662:	a33b      	add	r3, pc, #236	; (adr r3, 8005750 <calWallConrol+0x8e0>)
 8005664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005668:	f7fa ffee 	bl	8000648 <__aeabi_dmul>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	4610      	mov	r0, r2
 8005672:	4619      	mov	r1, r3
 8005674:	f7fb fac0 	bl	8000bf8 <__aeabi_d2f>
 8005678:	4603      	mov	r3, r0
 800567a:	67fb      	str	r3, [r7, #124]	; 0x7c
		}

		if (NoWallDisplacementR45slant > AREAMIN_R0
 800567c:	4b42      	ldr	r3, [pc, #264]	; (8005788 <calWallConrol+0x918>)
 800567e:	edd3 7a00 	vldr	s15, [r3]
 8005682:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005686:	eef4 7ac7 	vcmpe.f32	s15, s14
 800568a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800568e:	dd12      	ble.n	80056b6 <calWallConrol+0x846>
				&& NoWallDisplacementR45slant <= AREAMAX_R0) {
 8005690:	4b3d      	ldr	r3, [pc, #244]	; (8005788 <calWallConrol+0x918>)
 8005692:	edd3 7a00 	vldr	s15, [r3]
 8005696:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800569a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800569e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056a2:	d808      	bhi.n	80056b6 <calWallConrol+0x846>
			coefficientR[0] = COEFFICIENT_R0_0;
 80056a4:	4b39      	ldr	r3, [pc, #228]	; (800578c <calWallConrol+0x91c>)
 80056a6:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R0_1;
 80056a8:	4b39      	ldr	r3, [pc, #228]	; (8005790 <calWallConrol+0x920>)
 80056aa:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R0_2;
 80056ac:	4b39      	ldr	r3, [pc, #228]	; (8005794 <calWallConrol+0x924>)
 80056ae:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R0_3;
 80056b0:	4b39      	ldr	r3, [pc, #228]	; (8005798 <calWallConrol+0x928>)
 80056b2:	657b      	str	r3, [r7, #84]	; 0x54
 80056b4:	e0a7      	b.n	8005806 <calWallConrol+0x996>
		} else if (NoWallDisplacementR45slant > AREAMIN_R1
 80056b6:	4b34      	ldr	r3, [pc, #208]	; (8005788 <calWallConrol+0x918>)
 80056b8:	edd3 7a00 	vldr	s15, [r3]
 80056bc:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800579c <calWallConrol+0x92c>
 80056c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056c8:	dd12      	ble.n	80056f0 <calWallConrol+0x880>
				&& NoWallDisplacementR45slant <= AREAMAX_R1) {
 80056ca:	4b2f      	ldr	r3, [pc, #188]	; (8005788 <calWallConrol+0x918>)
 80056cc:	edd3 7a00 	vldr	s15, [r3]
 80056d0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80057a0 <calWallConrol+0x930>
 80056d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056dc:	d808      	bhi.n	80056f0 <calWallConrol+0x880>
			coefficientR[0] = COEFFICIENT_R1_0;
 80056de:	4b31      	ldr	r3, [pc, #196]	; (80057a4 <calWallConrol+0x934>)
 80056e0:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R1_1;
 80056e2:	4b31      	ldr	r3, [pc, #196]	; (80057a8 <calWallConrol+0x938>)
 80056e4:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R1_2;
 80056e6:	4b31      	ldr	r3, [pc, #196]	; (80057ac <calWallConrol+0x93c>)
 80056e8:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R1_3;
 80056ea:	4b31      	ldr	r3, [pc, #196]	; (80057b0 <calWallConrol+0x940>)
 80056ec:	657b      	str	r3, [r7, #84]	; 0x54
 80056ee:	e08a      	b.n	8005806 <calWallConrol+0x996>
		} else if (NoWallDisplacementR45slant > AREAMIN_R2
 80056f0:	4b25      	ldr	r3, [pc, #148]	; (8005788 <calWallConrol+0x918>)
 80056f2:	edd3 7a00 	vldr	s15, [r3]
 80056f6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80057b4 <calWallConrol+0x944>
 80056fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005702:	dd12      	ble.n	800572a <calWallConrol+0x8ba>
				&& NoWallDisplacementR45slant <= AREAMAX_R2) {
 8005704:	4b20      	ldr	r3, [pc, #128]	; (8005788 <calWallConrol+0x918>)
 8005706:	edd3 7a00 	vldr	s15, [r3]
 800570a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80057b8 <calWallConrol+0x948>
 800570e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005716:	d808      	bhi.n	800572a <calWallConrol+0x8ba>
			coefficientR[0] = COEFFICIENT_R2_0;
 8005718:	4b28      	ldr	r3, [pc, #160]	; (80057bc <calWallConrol+0x94c>)
 800571a:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R2_1;
 800571c:	4b28      	ldr	r3, [pc, #160]	; (80057c0 <calWallConrol+0x950>)
 800571e:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R2_2;
 8005720:	4b28      	ldr	r3, [pc, #160]	; (80057c4 <calWallConrol+0x954>)
 8005722:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R2_3;
 8005724:	4b28      	ldr	r3, [pc, #160]	; (80057c8 <calWallConrol+0x958>)
 8005726:	657b      	str	r3, [r7, #84]	; 0x54
 8005728:	e06d      	b.n	8005806 <calWallConrol+0x996>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R) {
 800572a:	4b28      	ldr	r3, [pc, #160]	; (80057cc <calWallConrol+0x95c>)
 800572c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005730:	2bb4      	cmp	r3, #180	; 0xb4
 8005732:	dd4f      	ble.n	80057d4 <calWallConrol+0x964>
				g_WallControlStatus = g_WallControlStatus | (1 << 1);
 8005734:	4b26      	ldr	r3, [pc, #152]	; (80057d0 <calWallConrol+0x960>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	f043 0302 	orr.w	r3, r3, #2
 800573c:	b2da      	uxtb	r2, r3
 800573e:	4b24      	ldr	r3, [pc, #144]	; (80057d0 <calWallConrol+0x960>)
 8005740:	701a      	strb	r2, [r3, #0]
 8005742:	e04e      	b.n	80057e2 <calWallConrol+0x972>
 8005744:	f3af 8000 	nop.w
 8005748:	66666666 	.word	0x66666666
 800574c:	3fe66666 	.word	0x3fe66666
 8005750:	1eb851ec 	.word	0x1eb851ec
 8005754:	bfb1eb85 	.word	0xbfb1eb85
 8005758:	20000570 	.word	0x20000570
 800575c:	44be6000 	.word	0x44be6000
 8005760:	44974000 	.word	0x44974000
 8005764:	2000044c 	.word	0x2000044c
 8005768:	403e0000 	.word	0x403e0000
 800576c:	20000599 	.word	0x20000599
 8005770:	20000548 	.word	0x20000548
 8005774:	20000594 	.word	0x20000594
 8005778:	200004dc 	.word	0x200004dc
 800577c:	447a0000 	.word	0x447a0000
 8005780:	442f0000 	.word	0x442f0000
 8005784:	c28c0000 	.word	0xc28c0000
 8005788:	200005e0 	.word	0x200005e0
 800578c:	4519d2f5 	.word	0x4519d2f5
 8005790:	c40e02ec 	.word	0xc40e02ec
 8005794:	423da41a 	.word	0x423da41a
 8005798:	bfa28f5c 	.word	0xbfa28f5c
 800579c:	420c0000 	.word	0x420c0000
 80057a0:	42700000 	.word	0x42700000
 80057a4:	440d1857 	.word	0x440d1857
 80057a8:	c181619b 	.word	0xc181619b
 80057ac:	3eaab6f2 	.word	0x3eaab6f2
 80057b0:	bacaf00f 	.word	0xbacaf00f
 80057b4:	42c80000 	.word	0x42c80000
 80057b8:	42f00000 	.word	0x42f00000
 80057bc:	4559c991 	.word	0x4559c991
 80057c0:	41cef541 	.word	0x41cef541
 80057c4:	bfbda504 	.word	0xbfbda504
 80057c8:	3c22339c 	.word	0x3c22339c
 80057cc:	200002bc 	.word	0x200002bc
 80057d0:	20000597 	.word	0x20000597
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 80057d4:	4b79      	ldr	r3, [pc, #484]	; (80059bc <calWallConrol+0xb4c>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	f023 0302 	bic.w	r3, r3, #2
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	4b77      	ldr	r3, [pc, #476]	; (80059bc <calWallConrol+0xb4c>)
 80057e0:	701a      	strb	r2, [r3, #0]
			}
			coefficientR[0] = (float) (g_sensor[SENSOR_RIGHT][0]);
 80057e2:	4b77      	ldr	r3, [pc, #476]	; (80059c0 <calWallConrol+0xb50>)
 80057e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80057e8:	ee07 3a90 	vmov	s15, r3
 80057ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057f0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			coefficientR[1] = 0;
 80057f4:	f04f 0300 	mov.w	r3, #0
 80057f8:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = 0;
 80057fa:	f04f 0300 	mov.w	r3, #0
 80057fe:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = 0;
 8005800:	f04f 0300 	mov.w	r3, #0
 8005804:	657b      	str	r3, [r7, #84]	; 0x54
		}

		if (NoWallDisplacementL45slant > AREAMIN_L0
 8005806:	4b6f      	ldr	r3, [pc, #444]	; (80059c4 <calWallConrol+0xb54>)
 8005808:	edd3 7a00 	vldr	s15, [r3]
 800580c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005810:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005818:	dd12      	ble.n	8005840 <calWallConrol+0x9d0>
				&& NoWallDisplacementL45slant <= AREAMAX_L0) {
 800581a:	4b6a      	ldr	r3, [pc, #424]	; (80059c4 <calWallConrol+0xb54>)
 800581c:	edd3 7a00 	vldr	s15, [r3]
 8005820:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8005824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800582c:	d808      	bhi.n	8005840 <calWallConrol+0x9d0>
			coefficientL[0] = COEFFICIENT_L0_0;
 800582e:	4b66      	ldr	r3, [pc, #408]	; (80059c8 <calWallConrol+0xb58>)
 8005830:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L0_1;
 8005832:	4b66      	ldr	r3, [pc, #408]	; (80059cc <calWallConrol+0xb5c>)
 8005834:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L0_2;
 8005836:	4b66      	ldr	r3, [pc, #408]	; (80059d0 <calWallConrol+0xb60>)
 8005838:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L0_3;
 800583a:	4b66      	ldr	r3, [pc, #408]	; (80059d4 <calWallConrol+0xb64>)
 800583c:	647b      	str	r3, [r7, #68]	; 0x44
 800583e:	e05d      	b.n	80058fc <calWallConrol+0xa8c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L1
 8005840:	4b60      	ldr	r3, [pc, #384]	; (80059c4 <calWallConrol+0xb54>)
 8005842:	edd3 7a00 	vldr	s15, [r3]
 8005846:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80059d8 <calWallConrol+0xb68>
 800584a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800584e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005852:	dd12      	ble.n	800587a <calWallConrol+0xa0a>
				&& NoWallDisplacementL45slant <= AREAMAX_L1) {
 8005854:	4b5b      	ldr	r3, [pc, #364]	; (80059c4 <calWallConrol+0xb54>)
 8005856:	edd3 7a00 	vldr	s15, [r3]
 800585a:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80059dc <calWallConrol+0xb6c>
 800585e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005866:	d808      	bhi.n	800587a <calWallConrol+0xa0a>
			coefficientL[0] = COEFFICIENT_L1_0;
 8005868:	4b5d      	ldr	r3, [pc, #372]	; (80059e0 <calWallConrol+0xb70>)
 800586a:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L1_1;
 800586c:	4b5d      	ldr	r3, [pc, #372]	; (80059e4 <calWallConrol+0xb74>)
 800586e:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L1_2;
 8005870:	4b5d      	ldr	r3, [pc, #372]	; (80059e8 <calWallConrol+0xb78>)
 8005872:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L1_3;
 8005874:	4b5d      	ldr	r3, [pc, #372]	; (80059ec <calWallConrol+0xb7c>)
 8005876:	647b      	str	r3, [r7, #68]	; 0x44
 8005878:	e040      	b.n	80058fc <calWallConrol+0xa8c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L2
 800587a:	4b52      	ldr	r3, [pc, #328]	; (80059c4 <calWallConrol+0xb54>)
 800587c:	edd3 7a00 	vldr	s15, [r3]
 8005880:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80059f0 <calWallConrol+0xb80>
 8005884:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800588c:	dd12      	ble.n	80058b4 <calWallConrol+0xa44>
				&& NoWallDisplacementL45slant <= AREAMAX_L2) {
 800588e:	4b4d      	ldr	r3, [pc, #308]	; (80059c4 <calWallConrol+0xb54>)
 8005890:	edd3 7a00 	vldr	s15, [r3]
 8005894:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80059f4 <calWallConrol+0xb84>
 8005898:	eef4 7ac7 	vcmpe.f32	s15, s14
 800589c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058a0:	d808      	bhi.n	80058b4 <calWallConrol+0xa44>
			coefficientL[0] = COEFFICIENT_L2_0;
 80058a2:	4b55      	ldr	r3, [pc, #340]	; (80059f8 <calWallConrol+0xb88>)
 80058a4:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L2_1;
 80058a6:	4b55      	ldr	r3, [pc, #340]	; (80059fc <calWallConrol+0xb8c>)
 80058a8:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L2_2;
 80058aa:	4b55      	ldr	r3, [pc, #340]	; (8005a00 <calWallConrol+0xb90>)
 80058ac:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L2_3;
 80058ae:	4b55      	ldr	r3, [pc, #340]	; (8005a04 <calWallConrol+0xb94>)
 80058b0:	647b      	str	r3, [r7, #68]	; 0x44
 80058b2:	e023      	b.n	80058fc <calWallConrol+0xa8c>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L) {
 80058b4:	4b42      	ldr	r3, [pc, #264]	; (80059c0 <calWallConrol+0xb50>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2bb4      	cmp	r3, #180	; 0xb4
 80058ba:	dd07      	ble.n	80058cc <calWallConrol+0xa5c>
				g_WallControlStatus = g_WallControlStatus | (1 << 0);
 80058bc:	4b3f      	ldr	r3, [pc, #252]	; (80059bc <calWallConrol+0xb4c>)
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	f043 0301 	orr.w	r3, r3, #1
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	4b3d      	ldr	r3, [pc, #244]	; (80059bc <calWallConrol+0xb4c>)
 80058c8:	701a      	strb	r2, [r3, #0]
 80058ca:	e006      	b.n	80058da <calWallConrol+0xa6a>
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 80058cc:	4b3b      	ldr	r3, [pc, #236]	; (80059bc <calWallConrol+0xb4c>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	f023 0301 	bic.w	r3, r3, #1
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	4b39      	ldr	r3, [pc, #228]	; (80059bc <calWallConrol+0xb4c>)
 80058d8:	701a      	strb	r2, [r3, #0]
			}
			coefficientL[0] = (float) (g_sensor[SENSOR_LEFT][0]);
 80058da:	4b39      	ldr	r3, [pc, #228]	; (80059c0 <calWallConrol+0xb50>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	ee07 3a90 	vmov	s15, r3
 80058e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058e6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			coefficientL[1] = 0;
 80058ea:	f04f 0300 	mov.w	r3, #0
 80058ee:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = 0;
 80058f0:	f04f 0300 	mov.w	r3, #0
 80058f4:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = 0;
 80058f6:	f04f 0300 	mov.w	r3, #0
 80058fa:	647b      	str	r3, [r7, #68]	; 0x44
		}

		CenterSlantR = coefficientR[0]
 80058fc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
				+ coefficientR[1] * NoWallDisplacementR45slant
 8005900:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8005904:	4b40      	ldr	r3, [pc, #256]	; (8005a08 <calWallConrol+0xb98>)
 8005906:	edd3 7a00 	vldr	s15, [r3]
 800590a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800590e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 8005912:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8005916:	4b3c      	ldr	r3, [pc, #240]	; (8005a08 <calWallConrol+0xb98>)
 8005918:	edd3 7a00 	vldr	s15, [r3]
 800591c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005920:	4b39      	ldr	r3, [pc, #228]	; (8005a08 <calWallConrol+0xb98>)
 8005922:	edd3 7a00 	vldr	s15, [r3]
 8005926:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 800592a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[3] * NoWallDisplacementR45slant
 800592e:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8005932:	4b35      	ldr	r3, [pc, #212]	; (8005a08 <calWallConrol+0xb98>)
 8005934:	edd3 7a00 	vldr	s15, [r3]
 8005938:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 800593c:	4b32      	ldr	r3, [pc, #200]	; (8005a08 <calWallConrol+0xb98>)
 800593e:	edd3 7a00 	vldr	s15, [r3]
 8005942:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 8005946:	4b30      	ldr	r3, [pc, #192]	; (8005a08 <calWallConrol+0xb98>)
 8005948:	edd3 7a00 	vldr	s15, [r3]
 800594c:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR = coefficientR[0]
 8005950:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005954:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

		CenterSlantL = coefficientL[0]
 8005958:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
				+ coefficientL[1] * NoWallDisplacementL45slant
 800595c:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8005960:	4b18      	ldr	r3, [pc, #96]	; (80059c4 <calWallConrol+0xb54>)
 8005962:	edd3 7a00 	vldr	s15, [r3]
 8005966:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800596a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 800596e:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8005972:	4b14      	ldr	r3, [pc, #80]	; (80059c4 <calWallConrol+0xb54>)
 8005974:	edd3 7a00 	vldr	s15, [r3]
 8005978:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 800597c:	4b11      	ldr	r3, [pc, #68]	; (80059c4 <calWallConrol+0xb54>)
 800597e:	edd3 7a00 	vldr	s15, [r3]
 8005982:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 8005986:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[3] * NoWallDisplacementL45slant
 800598a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800598e:	4b0d      	ldr	r3, [pc, #52]	; (80059c4 <calWallConrol+0xb54>)
 8005990:	edd3 7a00 	vldr	s15, [r3]
 8005994:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005998:	4b0a      	ldr	r3, [pc, #40]	; (80059c4 <calWallConrol+0xb54>)
 800599a:	edd3 7a00 	vldr	s15, [r3]
 800599e:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 80059a2:	4b08      	ldr	r3, [pc, #32]	; (80059c4 <calWallConrol+0xb54>)
 80059a4:	edd3 7a00 	vldr	s15, [r3]
 80059a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL = coefficientL[0]
 80059ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059b0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		for (int j = 11; j >= 1; j--) {
 80059b4:	230b      	movs	r3, #11
 80059b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80059b8:	e041      	b.n	8005a3e <calWallConrol+0xbce>
 80059ba:	bf00      	nop
 80059bc:	20000597 	.word	0x20000597
 80059c0:	200002bc 	.word	0x200002bc
 80059c4:	200005e4 	.word	0x200005e4
 80059c8:	44f286e9 	.word	0x44f286e9
 80059cc:	c3c54757 	.word	0xc3c54757
 80059d0:	41e9f1c4 	.word	0x41e9f1c4
 80059d4:	bf307804 	.word	0xbf307804
 80059d8:	420c0000 	.word	0x420c0000
 80059dc:	42700000 	.word	0x42700000
 80059e0:	43b4a7f9 	.word	0x43b4a7f9
 80059e4:	c04f43da 	.word	0xc04f43da
 80059e8:	3a9164ed 	.word	0x3a9164ed
 80059ec:	3a8c6aa9 	.word	0x3a8c6aa9
 80059f0:	42c80000 	.word	0x42c80000
 80059f4:	42f00000 	.word	0x42f00000
 80059f8:	478c2a26 	.word	0x478c2a26
 80059fc:	c4fbb229 	.word	0xc4fbb229
 8005a00:	4195b611 	.word	0x4195b611
 8005a04:	bd67d567 	.word	0xbd67d567
 8005a08:	200005e0 	.word	0x200005e0
			g_CenterSlantR90[j] = g_CenterSlantR90[j - 1];
 8005a0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	4a9c      	ldr	r2, [pc, #624]	; (8005c84 <calWallConrol+0xe14>)
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	499a      	ldr	r1, [pc, #616]	; (8005c84 <calWallConrol+0xe14>)
 8005a1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	440b      	add	r3, r1
 8005a20:	601a      	str	r2, [r3, #0]
			g_CenterSlantL90[j] = g_CenterSlantL90[j - 1];
 8005a22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a24:	3b01      	subs	r3, #1
 8005a26:	4a98      	ldr	r2, [pc, #608]	; (8005c88 <calWallConrol+0xe18>)
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4413      	add	r3, r2
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	4996      	ldr	r1, [pc, #600]	; (8005c88 <calWallConrol+0xe18>)
 8005a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	440b      	add	r3, r1
 8005a36:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 8005a38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	dce3      	bgt.n	8005a0c <calWallConrol+0xb9c>
		}
		g_CenterSlantR90[0] = CenterSlantR;
 8005a44:	4a8f      	ldr	r2, [pc, #572]	; (8005c84 <calWallConrol+0xe14>)
 8005a46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a48:	6013      	str	r3, [r2, #0]
		g_CenterSlantL90[0] = CenterSlantL;
 8005a4a:	4a8f      	ldr	r2, [pc, #572]	; (8005c88 <calWallConrol+0xe18>)
 8005a4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a4e:	6013      	str	r3, [r2, #0]

		g_CenterSlantR90_diff = g_CenterSlantR90[0] - g_CenterSlantR90[11];
 8005a50:	4b8c      	ldr	r3, [pc, #560]	; (8005c84 <calWallConrol+0xe14>)
 8005a52:	ed93 7a00 	vldr	s14, [r3]
 8005a56:	4b8b      	ldr	r3, [pc, #556]	; (8005c84 <calWallConrol+0xe14>)
 8005a58:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005a5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a60:	4b8a      	ldr	r3, [pc, #552]	; (8005c8c <calWallConrol+0xe1c>)
 8005a62:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL90_diff = g_CenterSlantL90[0] - g_CenterSlantL90[11];
 8005a66:	4b88      	ldr	r3, [pc, #544]	; (8005c88 <calWallConrol+0xe18>)
 8005a68:	ed93 7a00 	vldr	s14, [r3]
 8005a6c:	4b86      	ldr	r3, [pc, #536]	; (8005c88 <calWallConrol+0xe18>)
 8005a6e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005a72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a76:	4b86      	ldr	r3, [pc, #536]	; (8005c90 <calWallConrol+0xe20>)
 8005a78:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R
 8005a7c:	4b85      	ldr	r3, [pc, #532]	; (8005c94 <calWallConrol+0xe24>)
 8005a7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005a82:	2bb4      	cmp	r3, #180	; 0xb4
 8005a84:	dd1a      	ble.n	8005abc <calWallConrol+0xc4c>
				&& fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 8005a86:	4b84      	ldr	r3, [pc, #528]	; (8005c98 <calWallConrol+0xe28>)
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	ee07 3a90 	vmov	s15, r3
 8005a8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a92:	4b7e      	ldr	r3, [pc, #504]	; (8005c8c <calWallConrol+0xe1c>)
 8005a94:	edd3 7a00 	vldr	s15, [r3]
 8005a98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a9c:	eef0 7ae7 	vabs.f32	s15, s15
 8005aa0:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8005c9c <calWallConrol+0xe2c>
 8005aa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aac:	d506      	bpl.n	8005abc <calWallConrol+0xc4c>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus | (1 << 1);
 8005aae:	4b7c      	ldr	r3, [pc, #496]	; (8005ca0 <calWallConrol+0xe30>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	f043 0302 	orr.w	r3, r3, #2
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	4b79      	ldr	r3, [pc, #484]	; (8005ca0 <calWallConrol+0xe30>)
 8005aba:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L
 8005abc:	4b75      	ldr	r3, [pc, #468]	; (8005c94 <calWallConrol+0xe24>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2bb4      	cmp	r3, #180	; 0xb4
 8005ac2:	dd1a      	ble.n	8005afa <calWallConrol+0xc8a>
				&& fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 8005ac4:	4b74      	ldr	r3, [pc, #464]	; (8005c98 <calWallConrol+0xe28>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	ee07 3a90 	vmov	s15, r3
 8005acc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ad0:	4b6f      	ldr	r3, [pc, #444]	; (8005c90 <calWallConrol+0xe20>)
 8005ad2:	edd3 7a00 	vldr	s15, [r3]
 8005ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ada:	eef0 7ae7 	vabs.f32	s15, s15
 8005ade:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8005c9c <calWallConrol+0xe2c>
 8005ae2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aea:	d506      	bpl.n	8005afa <calWallConrol+0xc8a>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus | (1 << 0);
 8005aec:	4b6c      	ldr	r3, [pc, #432]	; (8005ca0 <calWallConrol+0xe30>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	f043 0301 	orr.w	r3, r3, #1
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	4b6a      	ldr	r3, [pc, #424]	; (8005ca0 <calWallConrol+0xe30>)
 8005af8:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT_R
 8005afa:	4b66      	ldr	r3, [pc, #408]	; (8005c94 <calWallConrol+0xe24>)
 8005afc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005b00:	2bb3      	cmp	r3, #179	; 0xb3
 8005b02:	dd13      	ble.n	8005b2c <calWallConrol+0xcbc>
				|| fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 8005b04:	4b64      	ldr	r3, [pc, #400]	; (8005c98 <calWallConrol+0xe28>)
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	ee07 3a90 	vmov	s15, r3
 8005b0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b10:	4b5e      	ldr	r3, [pc, #376]	; (8005c8c <calWallConrol+0xe1c>)
 8005b12:	edd3 7a00 	vldr	s15, [r3]
 8005b16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b1a:	eef0 7ae7 	vabs.f32	s15, s15
 8005b1e:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8005c9c <calWallConrol+0xe2c>
 8005b22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b2a:	dd06      	ble.n	8005b3a <calWallConrol+0xcca>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 8005b2c:	4b5c      	ldr	r3, [pc, #368]	; (8005ca0 <calWallConrol+0xe30>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	f023 0302 	bic.w	r3, r3, #2
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	4b5a      	ldr	r3, [pc, #360]	; (8005ca0 <calWallConrol+0xe30>)
 8005b38:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT_L
 8005b3a:	4b56      	ldr	r3, [pc, #344]	; (8005c94 <calWallConrol+0xe24>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2bb3      	cmp	r3, #179	; 0xb3
 8005b40:	dd13      	ble.n	8005b6a <calWallConrol+0xcfa>
				|| fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 8005b42:	4b55      	ldr	r3, [pc, #340]	; (8005c98 <calWallConrol+0xe28>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	ee07 3a90 	vmov	s15, r3
 8005b4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b4e:	4b50      	ldr	r3, [pc, #320]	; (8005c90 <calWallConrol+0xe20>)
 8005b50:	edd3 7a00 	vldr	s15, [r3]
 8005b54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b58:	eef0 7ae7 	vabs.f32	s15, s15
 8005b5c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8005c9c <calWallConrol+0xe2c>
 8005b60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b68:	dd06      	ble.n	8005b78 <calWallConrol+0xd08>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 8005b6a:	4b4d      	ldr	r3, [pc, #308]	; (8005ca0 <calWallConrol+0xe30>)
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	f023 0301 	bic.w	r3, r3, #1
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	4b4a      	ldr	r3, [pc, #296]	; (8005ca0 <calWallConrol+0xe30>)
 8005b76:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus) {
 8005b78:	4b49      	ldr	r3, [pc, #292]	; (8005ca0 <calWallConrol+0xe30>)
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	f200 813d 	bhi.w	8005dfc <calWallConrol+0xf8c>
 8005b82:	a201      	add	r2, pc, #4	; (adr r2, 8005b88 <calWallConrol+0xd18>)
 8005b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b88:	08005b99 	.word	0x08005b99
 8005b8c:	08005bed 	.word	0x08005bed
 8005b90:	08005cb1 	.word	0x08005cb1
 8005b94:	08005d47 	.word	0x08005d47
		case 0:			//両壁なし
			PID_wall = 0;
 8005b98:	f04f 0300 	mov.w	r3, #0
 8005b9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			pl_yellow_LED_1(0);
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	f001 faf7 	bl	8007194 <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 8005ba6:	2000      	movs	r0, #0
 8005ba8:	f001 fb2a 	bl	8007200 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005bac:	4b39      	ldr	r3, [pc, #228]	; (8005c94 <calWallConrol+0xe24>)
 8005bae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005bb2:	ee07 3a90 	vmov	s15, r3
 8005bb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bba:	4b3a      	ldr	r3, [pc, #232]	; (8005ca4 <calWallConrol+0xe34>)
 8005bbc:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 8005bc0:	4b34      	ldr	r3, [pc, #208]	; (8005c94 <calWallConrol+0xe24>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	ee07 3a90 	vmov	s15, r3
 8005bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bcc:	4b36      	ldr	r3, [pc, #216]	; (8005ca8 <calWallConrol+0xe38>)
 8005bce:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = 0;
 8005bd2:	4b36      	ldr	r3, [pc, #216]	; (8005cac <calWallConrol+0xe3c>)
 8005bd4:	f04f 0200 	mov.w	r2, #0
 8005bd8:	601a      	str	r2, [r3, #0]
			wall_slant90.delta_error = 0;
 8005bda:	4b34      	ldr	r3, [pc, #208]	; (8005cac <calWallConrol+0xe3c>)
 8005bdc:	f04f 0200 	mov.w	r2, #0
 8005be0:	609a      	str	r2, [r3, #8]
			wall_slant90.old_error = 0;
 8005be2:	4b32      	ldr	r3, [pc, #200]	; (8005cac <calWallConrol+0xe3c>)
 8005be4:	f04f 0200 	mov.w	r2, #0
 8005be8:	605a      	str	r2, [r3, #4]
			break;
 8005bea:	e107      	b.n	8005dfc <calWallConrol+0xf8c>
		case 1:			//左壁のみ
			pl_yellow_LED_1(0);
 8005bec:	2000      	movs	r0, #0
 8005bee:	f001 fad1 	bl	8007194 <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 8005bf2:	2001      	movs	r0, #1
 8005bf4:	f001 fb04 	bl	8007200 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005bf8:	4b26      	ldr	r3, [pc, #152]	; (8005c94 <calWallConrol+0xe24>)
 8005bfa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005bfe:	ee07 3a90 	vmov	s15, r3
 8005c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c06:	4b27      	ldr	r3, [pc, #156]	; (8005ca4 <calWallConrol+0xe34>)
 8005c08:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = CenterSlantL;
 8005c0c:	4a26      	ldr	r2, [pc, #152]	; (8005ca8 <calWallConrol+0xe38>)
 8005c0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c10:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005c12:	4b20      	ldr	r3, [pc, #128]	; (8005c94 <calWallConrol+0xe24>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	ee07 3a90 	vmov	s15, r3
 8005c1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c1e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005c22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c26:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0]));
 8005c2a:	4b1a      	ldr	r3, [pc, #104]	; (8005c94 <calWallConrol+0xe24>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	ee07 3a90 	vmov	s15, r3
 8005c32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005c3a:	4b1c      	ldr	r3, [pc, #112]	; (8005cac <calWallConrol+0xe3c>)
 8005c3c:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005c40:	4b1a      	ldr	r3, [pc, #104]	; (8005cac <calWallConrol+0xe3c>)
 8005c42:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005c46:	4b19      	ldr	r3, [pc, #100]	; (8005cac <calWallConrol+0xe3c>)
 8005c48:	edd3 7a01 	vldr	s15, [r3, #4]
 8005c4c:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005c50:	4b16      	ldr	r3, [pc, #88]	; (8005cac <calWallConrol+0xe3c>)
 8005c52:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005c56:	4b15      	ldr	r3, [pc, #84]	; (8005cac <calWallConrol+0xe3c>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a14      	ldr	r2, [pc, #80]	; (8005cac <calWallConrol+0xe3c>)
 8005c5c:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005c5e:	4b13      	ldr	r3, [pc, #76]	; (8005cac <calWallConrol+0xe3c>)
 8005c60:	ed93 7a00 	vldr	s14, [r3]
 8005c64:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005c68:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005c6c:	4b0f      	ldr	r3, [pc, #60]	; (8005cac <calWallConrol+0xe3c>)
 8005c6e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005c72:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005c76:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c7e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005c82:	e0bb      	b.n	8005dfc <calWallConrol+0xf8c>
 8005c84:	2000060c 	.word	0x2000060c
 8005c88:	2000063c 	.word	0x2000063c
 8005c8c:	200006cc 	.word	0x200006cc
 8005c90:	200006d0 	.word	0x200006d0
 8005c94:	200002bc 	.word	0x200002bc
 8005c98:	2000044c 	.word	0x2000044c
 8005c9c:	42a00000 	.word	0x42a00000
 8005ca0:	20000597 	.word	0x20000597
 8005ca4:	200005b0 	.word	0x200005b0
 8005ca8:	200005b4 	.word	0x200005b4
 8005cac:	2000057c 	.word	0x2000057c
		case 2:			//右壁のみ
			pl_yellow_LED_1(1);
 8005cb0:	2001      	movs	r0, #1
 8005cb2:	f001 fa6f 	bl	8007194 <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 8005cb6:	2000      	movs	r0, #0
 8005cb8:	f001 faa2 	bl	8007200 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 8005cbc:	4aa4      	ldr	r2, [pc, #656]	; (8005f50 <calWallConrol+0x10e0>)
 8005cbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cc0:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 8005cc2:	4ba4      	ldr	r3, [pc, #656]	; (8005f54 <calWallConrol+0x10e4>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	ee07 3a90 	vmov	s15, r3
 8005cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cce:	4ba2      	ldr	r3, [pc, #648]	; (8005f58 <calWallConrol+0x10e8>)
 8005cd0:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 8005cd4:	4b9f      	ldr	r3, [pc, #636]	; (8005f54 <calWallConrol+0x10e4>)
 8005cd6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005cda:	ee07 3a90 	vmov	s15, r3
 8005cde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ce2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005ce6:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR) / (float) (g_sensor[SENSOR_RIGHT][0]));
 8005cea:	4b9a      	ldr	r3, [pc, #616]	; (8005f54 <calWallConrol+0x10e4>)
 8005cec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005cf0:	ee07 3a90 	vmov	s15, r3
 8005cf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 8005cfc:	4b97      	ldr	r3, [pc, #604]	; (8005f5c <calWallConrol+0x10ec>)
 8005cfe:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005d02:	4b96      	ldr	r3, [pc, #600]	; (8005f5c <calWallConrol+0x10ec>)
 8005d04:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005d08:	4b94      	ldr	r3, [pc, #592]	; (8005f5c <calWallConrol+0x10ec>)
 8005d0a:	edd3 7a01 	vldr	s15, [r3, #4]
 8005d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005d12:	4b92      	ldr	r3, [pc, #584]	; (8005f5c <calWallConrol+0x10ec>)
 8005d14:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005d18:	4b90      	ldr	r3, [pc, #576]	; (8005f5c <calWallConrol+0x10ec>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a8f      	ldr	r2, [pc, #572]	; (8005f5c <calWallConrol+0x10ec>)
 8005d1e:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005d20:	4b8e      	ldr	r3, [pc, #568]	; (8005f5c <calWallConrol+0x10ec>)
 8005d22:	ed93 7a00 	vldr	s14, [r3]
 8005d26:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005d2a:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005d2e:	4b8b      	ldr	r3, [pc, #556]	; (8005f5c <calWallConrol+0x10ec>)
 8005d30:	edd3 6a02 	vldr	s13, [r3, #8]
 8005d34:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005d38:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d40:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005d44:	e05a      	b.n	8005dfc <calWallConrol+0xf8c>
		case 3:			//両壁あり
			pl_yellow_LED_1(1);
 8005d46:	2001      	movs	r0, #1
 8005d48:	f001 fa24 	bl	8007194 <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 8005d4c:	2001      	movs	r0, #1
 8005d4e:	f001 fa57 	bl	8007200 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 8005d52:	4a7f      	ldr	r2, [pc, #508]	; (8005f50 <calWallConrol+0x10e0>)
 8005d54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d56:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = CenterSlantL;
 8005d58:	4a7f      	ldr	r2, [pc, #508]	; (8005f58 <calWallConrol+0x10e8>)
 8005d5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d5c:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005d5e:	4b7d      	ldr	r3, [pc, #500]	; (8005f54 <calWallConrol+0x10e4>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	ee07 3a90 	vmov	s15, r3
 8005d66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d6a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d72:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0])
 8005d76:	4b77      	ldr	r3, [pc, #476]	; (8005f54 <calWallConrol+0x10e4>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	ee07 3a90 	vmov	s15, r3
 8005d7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 8005d86:	4b73      	ldr	r3, [pc, #460]	; (8005f54 <calWallConrol+0x10e4>)
 8005d88:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005d8c:	ee07 3a90 	vmov	s15, r3
 8005d90:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005d94:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005d98:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_RIGHT][0]));
 8005d9c:	4b6d      	ldr	r3, [pc, #436]	; (8005f54 <calWallConrol+0x10e4>)
 8005d9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005da2:	ee07 3a90 	vmov	s15, r3
 8005da6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005daa:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 8005dae:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005db2:	4b6a      	ldr	r3, [pc, #424]	; (8005f5c <calWallConrol+0x10ec>)
 8005db4:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005db8:	4b68      	ldr	r3, [pc, #416]	; (8005f5c <calWallConrol+0x10ec>)
 8005dba:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005dbe:	4b67      	ldr	r3, [pc, #412]	; (8005f5c <calWallConrol+0x10ec>)
 8005dc0:	edd3 7a01 	vldr	s15, [r3, #4]
 8005dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005dc8:	4b64      	ldr	r3, [pc, #400]	; (8005f5c <calWallConrol+0x10ec>)
 8005dca:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005dce:	4b63      	ldr	r3, [pc, #396]	; (8005f5c <calWallConrol+0x10ec>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a62      	ldr	r2, [pc, #392]	; (8005f5c <calWallConrol+0x10ec>)
 8005dd4:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005dd6:	4b61      	ldr	r3, [pc, #388]	; (8005f5c <calWallConrol+0x10ec>)
 8005dd8:	ed93 7a00 	vldr	s14, [r3]
 8005ddc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005de0:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005de4:	4b5d      	ldr	r3, [pc, #372]	; (8005f5c <calWallConrol+0x10ec>)
 8005de6:	edd3 6a02 	vldr	s13, [r3, #8]
 8005dea:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005dee:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005df6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005dfa:	bf00      	nop
// 斜め45度
		float CenterSlantR45, CenterSlantL45;
		float coefficientR45[4];
		float coefficientL45[4];
		float sensor_gain_slant45_p, sensor_gain_slant45_d;
		if (straight.velocity > 1000) {
 8005dfc:	4b58      	ldr	r3, [pc, #352]	; (8005f60 <calWallConrol+0x10f0>)
 8005dfe:	edd3 7a00 	vldr	s15, [r3]
 8005e02:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8005f64 <calWallConrol+0x10f4>
 8005e06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e0e:	dd04      	ble.n	8005e1a <calWallConrol+0xfaa>
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * 1000;
 8005e10:	4b55      	ldr	r3, [pc, #340]	; (8005f68 <calWallConrol+0x10f8>)
 8005e12:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * 1000;
 8005e14:	4b55      	ldr	r3, [pc, #340]	; (8005f6c <calWallConrol+0x10fc>)
 8005e16:	673b      	str	r3, [r7, #112]	; 0x70
 8005e18:	e023      	b.n	8005e62 <calWallConrol+0xff2>
		} else {
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * straight.velocity;
 8005e1a:	4b51      	ldr	r3, [pc, #324]	; (8005f60 <calWallConrol+0x10f0>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fa fbba 	bl	8000598 <__aeabi_f2d>
 8005e24:	a346      	add	r3, pc, #280	; (adr r3, 8005f40 <calWallConrol+0x10d0>)
 8005e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2a:	f7fa fc0d 	bl	8000648 <__aeabi_dmul>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	460b      	mov	r3, r1
 8005e32:	4610      	mov	r0, r2
 8005e34:	4619      	mov	r1, r3
 8005e36:	f7fa fedf 	bl	8000bf8 <__aeabi_d2f>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * straight.velocity;
 8005e3e:	4b48      	ldr	r3, [pc, #288]	; (8005f60 <calWallConrol+0x10f0>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fa fba8 	bl	8000598 <__aeabi_f2d>
 8005e48:	a33f      	add	r3, pc, #252	; (adr r3, 8005f48 <calWallConrol+0x10d8>)
 8005e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4e:	f7fa fbfb 	bl	8000648 <__aeabi_dmul>
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	4610      	mov	r0, r2
 8005e58:	4619      	mov	r1, r3
 8005e5a:	f7fa fecd 	bl	8000bf8 <__aeabi_d2f>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	673b      	str	r3, [r7, #112]	; 0x70
		}

		if (NoWallDisplacementR45slant > AREAMIN45_R0
 8005e62:	4b43      	ldr	r3, [pc, #268]	; (8005f70 <calWallConrol+0x1100>)
 8005e64:	edd3 7a00 	vldr	s15, [r3]
 8005e68:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005e6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e74:	dd12      	ble.n	8005e9c <calWallConrol+0x102c>
				&& NoWallDisplacementR45slant <= AREAMAX45_R0) {
 8005e76:	4b3e      	ldr	r3, [pc, #248]	; (8005f70 <calWallConrol+0x1100>)
 8005e78:	edd3 7a00 	vldr	s15, [r3]
 8005e7c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8005f74 <calWallConrol+0x1104>
 8005e80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e88:	d808      	bhi.n	8005e9c <calWallConrol+0x102c>
			coefficientR45[0] = COEFFICIENT45_R0_0;
 8005e8a:	4b3b      	ldr	r3, [pc, #236]	; (8005f78 <calWallConrol+0x1108>)
 8005e8c:	62bb      	str	r3, [r7, #40]	; 0x28
			coefficientR45[1] = COEFFICIENT45_R0_1;
 8005e8e:	4b3b      	ldr	r3, [pc, #236]	; (8005f7c <calWallConrol+0x110c>)
 8005e90:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = COEFFICIENT45_R0_2;
 8005e92:	4b3b      	ldr	r3, [pc, #236]	; (8005f80 <calWallConrol+0x1110>)
 8005e94:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = COEFFICIENT45_R0_3;
 8005e96:	4b3b      	ldr	r3, [pc, #236]	; (8005f84 <calWallConrol+0x1114>)
 8005e98:	637b      	str	r3, [r7, #52]	; 0x34
 8005e9a:	e025      	b.n	8005ee8 <calWallConrol+0x1078>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_RIGHT][0]
 8005e9c:	4b2d      	ldr	r3, [pc, #180]	; (8005f54 <calWallConrol+0x10e4>)
 8005e9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ea2:	2bdc      	cmp	r3, #220	; 0xdc
 8005ea4:	dd07      	ble.n	8005eb6 <calWallConrol+0x1046>
					> CONTROLWALL_THRESHOLD_SLANT45_R) {
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8005ea6:	4b38      	ldr	r3, [pc, #224]	; (8005f88 <calWallConrol+0x1118>)
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	f043 0302 	orr.w	r3, r3, #2
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	4b35      	ldr	r3, [pc, #212]	; (8005f88 <calWallConrol+0x1118>)
 8005eb2:	701a      	strb	r2, [r3, #0]
 8005eb4:	e006      	b.n	8005ec4 <calWallConrol+0x1054>
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8005eb6:	4b34      	ldr	r3, [pc, #208]	; (8005f88 <calWallConrol+0x1118>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	f023 0302 	bic.w	r3, r3, #2
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	4b31      	ldr	r3, [pc, #196]	; (8005f88 <calWallConrol+0x1118>)
 8005ec2:	701a      	strb	r2, [r3, #0]
			}
			coefficientR45[0] = g_sensor[SENSOR_FRONT_RIGHT][0];
 8005ec4:	4b23      	ldr	r3, [pc, #140]	; (8005f54 <calWallConrol+0x10e4>)
 8005ec6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005eca:	ee07 3a90 	vmov	s15, r3
 8005ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ed2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			coefficientR45[1] = 0;
 8005ed6:	f04f 0300 	mov.w	r3, #0
 8005eda:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = 0;
 8005edc:	f04f 0300 	mov.w	r3, #0
 8005ee0:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = 0;
 8005ee2:	f04f 0300 	mov.w	r3, #0
 8005ee6:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if (NoWallDisplacementL45slant > AREAMIN45_L0
 8005ee8:	4b28      	ldr	r3, [pc, #160]	; (8005f8c <calWallConrol+0x111c>)
 8005eea:	edd3 7a00 	vldr	s15, [r3]
 8005eee:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005ef2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005efa:	dd12      	ble.n	8005f22 <calWallConrol+0x10b2>
				&& NoWallDisplacementL45slant <= AREAMAX45_L0) {
 8005efc:	4b23      	ldr	r3, [pc, #140]	; (8005f8c <calWallConrol+0x111c>)
 8005efe:	edd3 7a00 	vldr	s15, [r3]
 8005f02:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005f74 <calWallConrol+0x1104>
 8005f06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f0e:	d808      	bhi.n	8005f22 <calWallConrol+0x10b2>
			coefficientL45[0] = COEFFICIENT45_L0_0;
 8005f10:	4b1f      	ldr	r3, [pc, #124]	; (8005f90 <calWallConrol+0x1120>)
 8005f12:	61bb      	str	r3, [r7, #24]
			coefficientL45[1] = COEFFICIENT45_L0_1;
 8005f14:	4b1f      	ldr	r3, [pc, #124]	; (8005f94 <calWallConrol+0x1124>)
 8005f16:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = COEFFICIENT45_L0_2;
 8005f18:	4b1f      	ldr	r3, [pc, #124]	; (8005f98 <calWallConrol+0x1128>)
 8005f1a:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = COEFFICIENT45_L0_3;
 8005f1c:	4b1f      	ldr	r3, [pc, #124]	; (8005f9c <calWallConrol+0x112c>)
 8005f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f20:	e056      	b.n	8005fd0 <calWallConrol+0x1160>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L) {
 8005f22:	4b0c      	ldr	r3, [pc, #48]	; (8005f54 <calWallConrol+0x10e4>)
 8005f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f26:	2bdc      	cmp	r3, #220	; 0xdc
 8005f28:	dd3a      	ble.n	8005fa0 <calWallConrol+0x1130>
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8005f2a:	4b17      	ldr	r3, [pc, #92]	; (8005f88 <calWallConrol+0x1118>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	f043 0301 	orr.w	r3, r3, #1
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	4b14      	ldr	r3, [pc, #80]	; (8005f88 <calWallConrol+0x1118>)
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	e039      	b.n	8005fae <calWallConrol+0x113e>
 8005f3a:	bf00      	nop
 8005f3c:	f3af 8000 	nop.w
 8005f40:	33333333 	.word	0x33333333
 8005f44:	3fe33333 	.word	0x3fe33333
 8005f48:	eb851eb8 	.word	0xeb851eb8
 8005f4c:	bfaeb851 	.word	0xbfaeb851
 8005f50:	200005b0 	.word	0x200005b0
 8005f54:	200002bc 	.word	0x200002bc
 8005f58:	200005b4 	.word	0x200005b4
 8005f5c:	2000057c 	.word	0x2000057c
 8005f60:	200004dc 	.word	0x200004dc
 8005f64:	447a0000 	.word	0x447a0000
 8005f68:	44160000 	.word	0x44160000
 8005f6c:	c2700000 	.word	0xc2700000
 8005f70:	200005e0 	.word	0x200005e0
 8005f74:	42a00000 	.word	0x42a00000
 8005f78:	43e7e73c 	.word	0x43e7e73c
 8005f7c:	c0f9d45b 	.word	0xc0f9d45b
 8005f80:	3e043787 	.word	0x3e043787
 8005f84:	b83cbe62 	.word	0xb83cbe62
 8005f88:	20000598 	.word	0x20000598
 8005f8c:	200005e4 	.word	0x200005e4
 8005f90:	440fa6b0 	.word	0x440fa6b0
 8005f94:	c1892199 	.word	0xc1892199
 8005f98:	3ea1604b 	.word	0x3ea1604b
 8005f9c:	baa12c1b 	.word	0xbaa12c1b
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8005fa0:	4bb5      	ldr	r3, [pc, #724]	; (8006278 <calWallConrol+0x1408>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	f023 0301 	bic.w	r3, r3, #1
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	4bb3      	ldr	r3, [pc, #716]	; (8006278 <calWallConrol+0x1408>)
 8005fac:	701a      	strb	r2, [r3, #0]
			}
			coefficientL45[0] = g_sensor[SENSOR_FRONT_LEFT][0];
 8005fae:	4bb3      	ldr	r3, [pc, #716]	; (800627c <calWallConrol+0x140c>)
 8005fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb2:	ee07 3a90 	vmov	s15, r3
 8005fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fba:	edc7 7a06 	vstr	s15, [r7, #24]
			coefficientL45[1] = 0;
 8005fbe:	f04f 0300 	mov.w	r3, #0
 8005fc2:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = 0;
 8005fc4:	f04f 0300 	mov.w	r3, #0
 8005fc8:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = 0;
 8005fca:	f04f 0300 	mov.w	r3, #0
 8005fce:	627b      	str	r3, [r7, #36]	; 0x24
		}
		CenterSlantR45 = coefficientR45[0]
 8005fd0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
				+ coefficientR45[1] * NoWallDisplacementR45slant
 8005fd4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8005fd8:	4ba9      	ldr	r3, [pc, #676]	; (8006280 <calWallConrol+0x1410>)
 8005fda:	edd3 7a00 	vldr	s15, [r3]
 8005fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fe2:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8005fe6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8005fea:	4ba5      	ldr	r3, [pc, #660]	; (8006280 <calWallConrol+0x1410>)
 8005fec:	edd3 7a00 	vldr	s15, [r3]
 8005ff0:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005ff4:	4ba2      	ldr	r3, [pc, #648]	; (8006280 <calWallConrol+0x1410>)
 8005ff6:	edd3 7a00 	vldr	s15, [r3]
 8005ffa:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8005ffe:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[3] * NoWallDisplacementR45slant
 8006002:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8006006:	4b9e      	ldr	r3, [pc, #632]	; (8006280 <calWallConrol+0x1410>)
 8006008:	edd3 7a00 	vldr	s15, [r3]
 800600c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8006010:	4b9b      	ldr	r3, [pc, #620]	; (8006280 <calWallConrol+0x1410>)
 8006012:	edd3 7a00 	vldr	s15, [r3]
 8006016:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 800601a:	4b99      	ldr	r3, [pc, #612]	; (8006280 <calWallConrol+0x1410>)
 800601c:	edd3 7a00 	vldr	s15, [r3]
 8006020:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR45 = coefficientR45[0]
 8006024:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006028:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		CenterSlantL45 = coefficientL45[0]
 800602c:	ed97 7a06 	vldr	s14, [r7, #24]
				+ coefficientL45[1] * NoWallDisplacementL45slant
 8006030:	edd7 6a07 	vldr	s13, [r7, #28]
 8006034:	4b93      	ldr	r3, [pc, #588]	; (8006284 <calWallConrol+0x1414>)
 8006036:	edd3 7a00 	vldr	s15, [r3]
 800603a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800603e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 8006042:	edd7 6a08 	vldr	s13, [r7, #32]
 8006046:	4b8f      	ldr	r3, [pc, #572]	; (8006284 <calWallConrol+0x1414>)
 8006048:	edd3 7a00 	vldr	s15, [r3]
 800604c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8006050:	4b8c      	ldr	r3, [pc, #560]	; (8006284 <calWallConrol+0x1414>)
 8006052:	edd3 7a00 	vldr	s15, [r3]
 8006056:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 800605a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[3] * NoWallDisplacementL45slant
 800605e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006062:	4b88      	ldr	r3, [pc, #544]	; (8006284 <calWallConrol+0x1414>)
 8006064:	edd3 7a00 	vldr	s15, [r3]
 8006068:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 800606c:	4b85      	ldr	r3, [pc, #532]	; (8006284 <calWallConrol+0x1414>)
 800606e:	edd3 7a00 	vldr	s15, [r3]
 8006072:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 8006076:	4b83      	ldr	r3, [pc, #524]	; (8006284 <calWallConrol+0x1414>)
 8006078:	edd3 7a00 	vldr	s15, [r3]
 800607c:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL45 = coefficientL45[0]
 8006080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006084:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

		for (int j = 11; j >= 1; j--) {
 8006088:	230b      	movs	r3, #11
 800608a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800608c:	e018      	b.n	80060c0 <calWallConrol+0x1250>
			g_CenterSlantR45[j] = g_CenterSlantR45[j - 1];
 800608e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006090:	3b01      	subs	r3, #1
 8006092:	4a7d      	ldr	r2, [pc, #500]	; (8006288 <calWallConrol+0x1418>)
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	497b      	ldr	r1, [pc, #492]	; (8006288 <calWallConrol+0x1418>)
 800609c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	440b      	add	r3, r1
 80060a2:	601a      	str	r2, [r3, #0]
			g_CenterSlantL45[j] = g_CenterSlantL45[j - 1];
 80060a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a6:	3b01      	subs	r3, #1
 80060a8:	4a78      	ldr	r2, [pc, #480]	; (800628c <calWallConrol+0x141c>)
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	4976      	ldr	r1, [pc, #472]	; (800628c <calWallConrol+0x141c>)
 80060b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	440b      	add	r3, r1
 80060b8:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 80060ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060bc:	3b01      	subs	r3, #1
 80060be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	dce3      	bgt.n	800608e <calWallConrol+0x121e>
		}
		g_CenterSlantR45[0] = CenterSlantR45;
 80060c6:	4a70      	ldr	r2, [pc, #448]	; (8006288 <calWallConrol+0x1418>)
 80060c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060ca:	6013      	str	r3, [r2, #0]
		g_CenterSlantL45[0] = CenterSlantL45;
 80060cc:	4a6f      	ldr	r2, [pc, #444]	; (800628c <calWallConrol+0x141c>)
 80060ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060d0:	6013      	str	r3, [r2, #0]

		g_CenterSlantR45_diff = g_CenterSlantR45[0] - g_CenterSlantR45[11];
 80060d2:	4b6d      	ldr	r3, [pc, #436]	; (8006288 <calWallConrol+0x1418>)
 80060d4:	ed93 7a00 	vldr	s14, [r3]
 80060d8:	4b6b      	ldr	r3, [pc, #428]	; (8006288 <calWallConrol+0x1418>)
 80060da:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80060de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060e2:	4b6b      	ldr	r3, [pc, #428]	; (8006290 <calWallConrol+0x1420>)
 80060e4:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL45_diff = g_CenterSlantL45[0] - g_CenterSlantL45[11];
 80060e8:	4b68      	ldr	r3, [pc, #416]	; (800628c <calWallConrol+0x141c>)
 80060ea:	ed93 7a00 	vldr	s14, [r3]
 80060ee:	4b67      	ldr	r3, [pc, #412]	; (800628c <calWallConrol+0x141c>)
 80060f0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80060f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060f8:	4b66      	ldr	r3, [pc, #408]	; (8006294 <calWallConrol+0x1424>)
 80060fa:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_FRONT_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT45_R
 80060fe:	4b5f      	ldr	r3, [pc, #380]	; (800627c <calWallConrol+0x140c>)
 8006100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006104:	2bdc      	cmp	r3, #220	; 0xdc
 8006106:	dd1a      	ble.n	800613e <calWallConrol+0x12ce>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 8006108:	4b63      	ldr	r3, [pc, #396]	; (8006298 <calWallConrol+0x1428>)
 800610a:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 800610c:	ee07 3a90 	vmov	s15, r3
 8006110:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006114:	4b5e      	ldr	r3, [pc, #376]	; (8006290 <calWallConrol+0x1420>)
 8006116:	edd3 7a00 	vldr	s15, [r3]
 800611a:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 800611e:	eef0 7ae7 	vabs.f32	s15, s15
 8006122:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800629c <calWallConrol+0x142c>
 8006126:	eef4 7ac7 	vcmpe.f32	s15, s14
 800612a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800612e:	d506      	bpl.n	800613e <calWallConrol+0x12ce>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8006130:	4b51      	ldr	r3, [pc, #324]	; (8006278 <calWallConrol+0x1408>)
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	f043 0302 	orr.w	r3, r3, #2
 8006138:	b2da      	uxtb	r2, r3
 800613a:	4b4f      	ldr	r3, [pc, #316]	; (8006278 <calWallConrol+0x1408>)
 800613c:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L
 800613e:	4b4f      	ldr	r3, [pc, #316]	; (800627c <calWallConrol+0x140c>)
 8006140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006142:	2bdc      	cmp	r3, #220	; 0xdc
 8006144:	dd1a      	ble.n	800617c <calWallConrol+0x130c>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 8006146:	4b54      	ldr	r3, [pc, #336]	; (8006298 <calWallConrol+0x1428>)
 8006148:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 800614a:	ee07 3a90 	vmov	s15, r3
 800614e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006152:	4b50      	ldr	r3, [pc, #320]	; (8006294 <calWallConrol+0x1424>)
 8006154:	edd3 7a00 	vldr	s15, [r3]
 8006158:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 800615c:	eef0 7ae7 	vabs.f32	s15, s15
 8006160:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 800629c <calWallConrol+0x142c>
 8006164:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800616c:	d506      	bpl.n	800617c <calWallConrol+0x130c>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 800616e:	4b42      	ldr	r3, [pc, #264]	; (8006278 <calWallConrol+0x1408>)
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	f043 0301 	orr.w	r3, r3, #1
 8006176:	b2da      	uxtb	r2, r3
 8006178:	4b3f      	ldr	r3, [pc, #252]	; (8006278 <calWallConrol+0x1408>)
 800617a:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT45_R
 800617c:	4b3f      	ldr	r3, [pc, #252]	; (800627c <calWallConrol+0x140c>)
 800617e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006182:	2bdb      	cmp	r3, #219	; 0xdb
 8006184:	dd13      	ble.n	80061ae <calWallConrol+0x133e>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 8006186:	4b44      	ldr	r3, [pc, #272]	; (8006298 <calWallConrol+0x1428>)
 8006188:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 800618a:	ee07 3a90 	vmov	s15, r3
 800618e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006192:	4b3f      	ldr	r3, [pc, #252]	; (8006290 <calWallConrol+0x1420>)
 8006194:	edd3 7a00 	vldr	s15, [r3]
 8006198:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 800619c:	eef0 7ae7 	vabs.f32	s15, s15
 80061a0:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800629c <calWallConrol+0x142c>
 80061a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ac:	dd06      	ble.n	80061bc <calWallConrol+0x134c>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 80061ae:	4b32      	ldr	r3, [pc, #200]	; (8006278 <calWallConrol+0x1408>)
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	f023 0302 	bic.w	r3, r3, #2
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	4b2f      	ldr	r3, [pc, #188]	; (8006278 <calWallConrol+0x1408>)
 80061ba:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT45_L
 80061bc:	4b2f      	ldr	r3, [pc, #188]	; (800627c <calWallConrol+0x140c>)
 80061be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c0:	2bdb      	cmp	r3, #219	; 0xdb
 80061c2:	dd13      	ble.n	80061ec <calWallConrol+0x137c>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 80061c4:	4b34      	ldr	r3, [pc, #208]	; (8006298 <calWallConrol+0x1428>)
 80061c6:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 80061c8:	ee07 3a90 	vmov	s15, r3
 80061cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061d0:	4b30      	ldr	r3, [pc, #192]	; (8006294 <calWallConrol+0x1424>)
 80061d2:	edd3 7a00 	vldr	s15, [r3]
 80061d6:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 80061da:	eef0 7ae7 	vabs.f32	s15, s15
 80061de:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800629c <calWallConrol+0x142c>
 80061e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ea:	dd06      	ble.n	80061fa <calWallConrol+0x138a>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 80061ec:	4b22      	ldr	r3, [pc, #136]	; (8006278 <calWallConrol+0x1408>)
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	f023 0301 	bic.w	r3, r3, #1
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	4b20      	ldr	r3, [pc, #128]	; (8006278 <calWallConrol+0x1408>)
 80061f8:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus45) {
 80061fa:	4b1f      	ldr	r3, [pc, #124]	; (8006278 <calWallConrol+0x1408>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	2b03      	cmp	r3, #3
 8006200:	f200 8155 	bhi.w	80064ae <calWallConrol+0x163e>
 8006204:	a201      	add	r2, pc, #4	; (adr r2, 800620c <calWallConrol+0x139c>)
 8006206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620a:	bf00      	nop
 800620c:	0800621d 	.word	0x0800621d
 8006210:	080062b1 	.word	0x080062b1
 8006214:	08006351 	.word	0x08006351
 8006218:	080063ef 	.word	0x080063ef
		case 0:			//両壁なし
			PID_wall += 0;
 800621c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006220:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80062a0 <calWallConrol+0x1430>
 8006224:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006228:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_3(0);
 800622c:	2000      	movs	r0, #0
 800622e:	f000 ffc3 	bl	80071b8 <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 8006232:	2000      	movs	r0, #0
 8006234:	f000 ffd2 	bl	80071dc <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 8006238:	4b10      	ldr	r3, [pc, #64]	; (800627c <calWallConrol+0x140c>)
 800623a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800623e:	ee07 3a90 	vmov	s15, r3
 8006242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006246:	4b17      	ldr	r3, [pc, #92]	; (80062a4 <calWallConrol+0x1434>)
 8006248:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 800624c:	4b0b      	ldr	r3, [pc, #44]	; (800627c <calWallConrol+0x140c>)
 800624e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006250:	ee07 3a90 	vmov	s15, r3
 8006254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006258:	4b13      	ldr	r3, [pc, #76]	; (80062a8 <calWallConrol+0x1438>)
 800625a:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = 0;
 800625e:	4b13      	ldr	r3, [pc, #76]	; (80062ac <calWallConrol+0x143c>)
 8006260:	f04f 0200 	mov.w	r2, #0
 8006264:	601a      	str	r2, [r3, #0]
			wall_slant45.delta_error = 0;
 8006266:	4b11      	ldr	r3, [pc, #68]	; (80062ac <calWallConrol+0x143c>)
 8006268:	f04f 0200 	mov.w	r2, #0
 800626c:	609a      	str	r2, [r3, #8]
			wall_slant45.old_error = 0;
 800626e:	4b0f      	ldr	r3, [pc, #60]	; (80062ac <calWallConrol+0x143c>)
 8006270:	f04f 0200 	mov.w	r2, #0
 8006274:	605a      	str	r2, [r3, #4]
			break;
 8006276:	e11a      	b.n	80064ae <calWallConrol+0x163e>
 8006278:	20000598 	.word	0x20000598
 800627c:	200002bc 	.word	0x200002bc
 8006280:	200005e0 	.word	0x200005e0
 8006284:	200005e4 	.word	0x200005e4
 8006288:	2000066c 	.word	0x2000066c
 800628c:	2000069c 	.word	0x2000069c
 8006290:	200006d4 	.word	0x200006d4
 8006294:	200006d8 	.word	0x200006d8
 8006298:	2000044c 	.word	0x2000044c
 800629c:	42a00000 	.word	0x42a00000
 80062a0:	00000000 	.word	0x00000000
 80062a4:	200005a8 	.word	0x200005a8
 80062a8:	200005ac 	.word	0x200005ac
 80062ac:	20000588 	.word	0x20000588
		case 1:			//左壁のみ
			pl_yellow_LED_3(0);
 80062b0:	2000      	movs	r0, #0
 80062b2:	f000 ff81 	bl	80071b8 <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 80062b6:	2001      	movs	r0, #1
 80062b8:	f000 ff90 	bl	80071dc <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 80062bc:	4b87      	ldr	r3, [pc, #540]	; (80064dc <calWallConrol+0x166c>)
 80062be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062c2:	ee07 3a90 	vmov	s15, r3
 80062c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062ca:	4b85      	ldr	r3, [pc, #532]	; (80064e0 <calWallConrol+0x1670>)
 80062cc:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = CenterSlantL45;
 80062d0:	4a84      	ldr	r2, [pc, #528]	; (80064e4 <calWallConrol+0x1674>)
 80062d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062d4:	6013      	str	r3, [r2, #0]
			wall_slant45.error =
					(-(float) (g_sensor[SENSOR_FRONT_LEFT][0] - CenterSlantL45)
 80062d6:	4b81      	ldr	r3, [pc, #516]	; (80064dc <calWallConrol+0x166c>)
 80062d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062da:	ee07 3a90 	vmov	s15, r3
 80062de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062e2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80062e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062ea:	eef1 6a67 	vneg.f32	s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_LEFT][0]));
 80062ee:	4b7b      	ldr	r3, [pc, #492]	; (80064dc <calWallConrol+0x166c>)
 80062f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f2:	ee07 3a90 	vmov	s15, r3
 80062f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error =
 80062fe:	4b7a      	ldr	r3, [pc, #488]	; (80064e8 <calWallConrol+0x1678>)
 8006300:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8006304:	4b78      	ldr	r3, [pc, #480]	; (80064e8 <calWallConrol+0x1678>)
 8006306:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 800630a:	4b77      	ldr	r3, [pc, #476]	; (80064e8 <calWallConrol+0x1678>)
 800630c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006310:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8006314:	4b74      	ldr	r3, [pc, #464]	; (80064e8 <calWallConrol+0x1678>)
 8006316:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 800631a:	4b73      	ldr	r3, [pc, #460]	; (80064e8 <calWallConrol+0x1678>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a72      	ldr	r2, [pc, #456]	; (80064e8 <calWallConrol+0x1678>)
 8006320:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006322:	4b71      	ldr	r3, [pc, #452]	; (80064e8 <calWallConrol+0x1678>)
 8006324:	ed93 7a00 	vldr	s14, [r3]
 8006328:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800632c:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8006330:	4b6d      	ldr	r3, [pc, #436]	; (80064e8 <calWallConrol+0x1678>)
 8006332:	edd3 6a02 	vldr	s13, [r3, #8]
 8006336:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800633a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800633e:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006342:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800634a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 800634e:	e0ae      	b.n	80064ae <calWallConrol+0x163e>
		case 2:			//右壁のみ
			pl_yellow_LED_3(1);
 8006350:	2001      	movs	r0, #1
 8006352:	f000 ff31 	bl	80071b8 <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 8006356:	2000      	movs	r0, #0
 8006358:	f000 ff40 	bl	80071dc <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 800635c:	4a60      	ldr	r2, [pc, #384]	; (80064e0 <calWallConrol+0x1670>)
 800635e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006360:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 8006362:	4b5e      	ldr	r3, [pc, #376]	; (80064dc <calWallConrol+0x166c>)
 8006364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006366:	ee07 3a90 	vmov	s15, r3
 800636a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800636e:	4b5d      	ldr	r3, [pc, #372]	; (80064e4 <calWallConrol+0x1674>)
 8006370:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 8006374:	4b59      	ldr	r3, [pc, #356]	; (80064dc <calWallConrol+0x166c>)
 8006376:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800637a:	ee07 3a90 	vmov	s15, r3
 800637e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006382:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006386:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR45)
					/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 800638a:	4b54      	ldr	r3, [pc, #336]	; (80064dc <calWallConrol+0x166c>)
 800638c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006390:	ee07 3a90 	vmov	s15, r3
 8006394:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006398:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 800639c:	4b52      	ldr	r3, [pc, #328]	; (80064e8 <calWallConrol+0x1678>)
 800639e:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 80063a2:	4b51      	ldr	r3, [pc, #324]	; (80064e8 <calWallConrol+0x1678>)
 80063a4:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 80063a8:	4b4f      	ldr	r3, [pc, #316]	; (80064e8 <calWallConrol+0x1678>)
 80063aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80063ae:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 80063b2:	4b4d      	ldr	r3, [pc, #308]	; (80064e8 <calWallConrol+0x1678>)
 80063b4:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 80063b8:	4b4b      	ldr	r3, [pc, #300]	; (80064e8 <calWallConrol+0x1678>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a4a      	ldr	r2, [pc, #296]	; (80064e8 <calWallConrol+0x1678>)
 80063be:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 80063c0:	4b49      	ldr	r3, [pc, #292]	; (80064e8 <calWallConrol+0x1678>)
 80063c2:	ed93 7a00 	vldr	s14, [r3]
 80063c6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80063ca:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 80063ce:	4b46      	ldr	r3, [pc, #280]	; (80064e8 <calWallConrol+0x1678>)
 80063d0:	edd3 6a02 	vldr	s13, [r3, #8]
 80063d4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80063d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063dc:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 80063e0:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80063e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063e8:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 80063ec:	e05f      	b.n	80064ae <calWallConrol+0x163e>
		case 3:			//両壁あり
			pl_yellow_LED_3(1);
 80063ee:	2001      	movs	r0, #1
 80063f0:	f000 fee2 	bl	80071b8 <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 80063f4:	2001      	movs	r0, #1
 80063f6:	f000 fef1 	bl	80071dc <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 80063fa:	4a39      	ldr	r2, [pc, #228]	; (80064e0 <calWallConrol+0x1670>)
 80063fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063fe:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = CenterSlantL45;
 8006400:	4a38      	ldr	r2, [pc, #224]	; (80064e4 <calWallConrol+0x1674>)
 8006402:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006404:	6013      	str	r3, [r2, #0]
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 8006406:	4b35      	ldr	r3, [pc, #212]	; (80064dc <calWallConrol+0x166c>)
 8006408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800640a:	ee07 3a90 	vmov	s15, r3
 800640e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006412:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006416:	ee77 7a67 	vsub.f32	s15, s14, s15
 800641a:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL45) / (float) (g_sensor[SENSOR_FRONT_LEFT][0])
 800641e:	4b2f      	ldr	r3, [pc, #188]	; (80064dc <calWallConrol+0x166c>)
 8006420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006422:	ee07 3a90 	vmov	s15, r3
 8006426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800642a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 800642e:	4b2b      	ldr	r3, [pc, #172]	; (80064dc <calWallConrol+0x166c>)
 8006430:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006434:	ee07 3a90 	vmov	s15, r3
 8006438:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800643c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006440:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 8006444:	4b25      	ldr	r3, [pc, #148]	; (80064dc <calWallConrol+0x166c>)
 8006446:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800644a:	ee07 3a90 	vmov	s15, r3
 800644e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006452:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 8006456:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 800645a:	4b23      	ldr	r3, [pc, #140]	; (80064e8 <calWallConrol+0x1678>)
 800645c:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8006460:	4b21      	ldr	r3, [pc, #132]	; (80064e8 <calWallConrol+0x1678>)
 8006462:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8006466:	4b20      	ldr	r3, [pc, #128]	; (80064e8 <calWallConrol+0x1678>)
 8006468:	edd3 7a01 	vldr	s15, [r3, #4]
 800646c:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8006470:	4b1d      	ldr	r3, [pc, #116]	; (80064e8 <calWallConrol+0x1678>)
 8006472:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8006476:	4b1c      	ldr	r3, [pc, #112]	; (80064e8 <calWallConrol+0x1678>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a1b      	ldr	r2, [pc, #108]	; (80064e8 <calWallConrol+0x1678>)
 800647c:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 800647e:	4b1a      	ldr	r3, [pc, #104]	; (80064e8 <calWallConrol+0x1678>)
 8006480:	ed93 7a00 	vldr	s14, [r3]
 8006484:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006488:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 800648c:	4b16      	ldr	r3, [pc, #88]	; (80064e8 <calWallConrol+0x1678>)
 800648e:	edd3 6a02 	vldr	s13, [r3, #8]
 8006492:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006496:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800649a:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 800649e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80064a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064a6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 80064aa:	e000      	b.n	80064ae <calWallConrol+0x163e>
			break;
 80064ac:	bf00      	nop
		}

	}
	PID_w = PID_wall / MAXMOTOR * g_V_battery_mean;
 80064ae:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80064b2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80064ec <calWallConrol+0x167c>
 80064b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80064ba:	4b0d      	ldr	r3, [pc, #52]	; (80064f0 <calWallConrol+0x1680>)
 80064bc:	edd3 7a00 	vldr	s15, [r3]
 80064c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064c4:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	return PID_w;
 80064c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064ca:	ee07 3a90 	vmov	s15, r3
}
 80064ce:	eeb0 0a67 	vmov.f32	s0, s15
 80064d2:	37a8      	adds	r7, #168	; 0xa8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064da:	bf00      	nop
 80064dc:	200002bc 	.word	0x200002bc
 80064e0:	200005a8 	.word	0x200005a8
 80064e4:	200005ac 	.word	0x200005ac
 80064e8:	20000588 	.word	0x20000588
 80064ec:	44d1e000 	.word	0x44d1e000
 80064f0:	200004d8 	.word	0x200004d8
 80064f4:	00000000 	.word	0x00000000

080064f8 <interrupt_WallCut>:
			*PID_frontwall_r = 0;
		}
	}
}

void interrupt_WallCut(void) {
 80064f8:	b5b0      	push	{r4, r5, r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
	int del_time=ceil(3.5/INTERRUPT_TIME/fabs(straight.velocity));
 80064fe:	4ba2      	ldr	r3, [pc, #648]	; (8006788 <interrupt_WallCut+0x290>)
 8006500:	edd3 7a00 	vldr	s15, [r3]
 8006504:	eef0 7ae7 	vabs.f32	s15, s15
 8006508:	ee17 0a90 	vmov	r0, s15
 800650c:	f7fa f844 	bl	8000598 <__aeabi_f2d>
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	a198      	add	r1, pc, #608	; (adr r1, 8006778 <interrupt_WallCut+0x280>)
 8006516:	e9d1 0100 	ldrd	r0, r1, [r1]
 800651a:	f7fa f9bf 	bl	800089c <__aeabi_ddiv>
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	ec43 2b17 	vmov	d7, r2, r3
 8006526:	eeb0 0a47 	vmov.f32	s0, s14
 800652a:	eef0 0a67 	vmov.f32	s1, s15
 800652e:	f01c fba7 	bl	8022c80 <ceil>
 8006532:	ec53 2b10 	vmov	r2, r3, d0
 8006536:	4610      	mov	r0, r2
 8006538:	4619      	mov	r1, r3
 800653a:	f7fa fb35 	bl	8000ba8 <__aeabi_d2iz>
 800653e:	4603      	mov	r3, r0
 8006540:	617b      	str	r3, [r7, #20]
	if(del_time>=11){del_time=11;}
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2b0a      	cmp	r3, #10
 8006546:	dd01      	ble.n	800654c <interrupt_WallCut+0x54>
 8006548:	230b      	movs	r3, #11
 800654a:	617b      	str	r3, [r7, #20]
	if(del_time<=4){del_time=4;}
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	2b04      	cmp	r3, #4
 8006550:	dc01      	bgt.n	8006556 <interrupt_WallCut+0x5e>
 8006552:	2304      	movs	r3, #4
 8006554:	617b      	str	r3, [r7, #20]
	for (int j = 0; j <= 4; j++) {
 8006556:	2300      	movs	r3, #0
 8006558:	613b      	str	r3, [r7, #16]
 800655a:	e019      	b.n	8006590 <interrupt_WallCut+0x98>
		g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][del_time];
 800655c:	498b      	ldr	r1, [pc, #556]	; (800678c <interrupt_WallCut+0x294>)
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	4613      	mov	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	011b      	lsls	r3, r3, #4
 8006568:	440b      	add	r3, r1
 800656a:	6819      	ldr	r1, [r3, #0]
 800656c:	4887      	ldr	r0, [pc, #540]	; (800678c <interrupt_WallCut+0x294>)
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	4613      	mov	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	4413      	add	r3, r2
 800657c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006580:	1aca      	subs	r2, r1, r3
 8006582:	4983      	ldr	r1, [pc, #524]	; (8006790 <interrupt_WallCut+0x298>)
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int j = 0; j <= 4; j++) {
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	3301      	adds	r3, #1
 800658e:	613b      	str	r3, [r7, #16]
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	2b04      	cmp	r3, #4
 8006594:	dde2      	ble.n	800655c <interrupt_WallCut+0x64>
	}
//	if (maze_mode == 1 || (modeacc != 0 && modeacc != 3)) {}

	if (g_wallCut_mode == 1) {
 8006596:	4b7f      	ldr	r3, [pc, #508]	; (8006794 <interrupt_WallCut+0x29c>)
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	2b01      	cmp	r3, #1
 800659c:	f040 8555 	bne.w	800704a <interrupt_WallCut+0xb52>
// 壁壁の検知判定()
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_90) {
 80065a0:	4b7a      	ldr	r3, [pc, #488]	; (800678c <interrupt_WallCut+0x294>)
 80065a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065aa:	dd03      	ble.n	80065b4 <interrupt_WallCut+0xbc>
			front_wall_break_90 = 1;
 80065ac:	4b7a      	ldr	r3, [pc, #488]	; (8006798 <interrupt_WallCut+0x2a0>)
 80065ae:	2201      	movs	r2, #1
 80065b0:	701a      	strb	r2, [r3, #0]
 80065b2:	e002      	b.n	80065ba <interrupt_WallCut+0xc2>
		} else {
			front_wall_break_90 = 0;
 80065b4:	4b78      	ldr	r3, [pc, #480]	; (8006798 <interrupt_WallCut+0x2a0>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45) {
 80065ba:	4b74      	ldr	r3, [pc, #464]	; (800678c <interrupt_WallCut+0x294>)
 80065bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065c0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80065c4:	dd03      	ble.n	80065ce <interrupt_WallCut+0xd6>
			front_wall_break_45 = 1;
 80065c6:	4b75      	ldr	r3, [pc, #468]	; (800679c <interrupt_WallCut+0x2a4>)
 80065c8:	2201      	movs	r2, #1
 80065ca:	701a      	strb	r2, [r3, #0]
 80065cc:	e002      	b.n	80065d4 <interrupt_WallCut+0xdc>
		} else {
			front_wall_break_45 = 0;
 80065ce:	4b73      	ldr	r3, [pc, #460]	; (800679c <interrupt_WallCut+0x2a4>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45SLANT) {
 80065d4:	4b6d      	ldr	r3, [pc, #436]	; (800678c <interrupt_WallCut+0x294>)
 80065d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80065de:	dd03      	ble.n	80065e8 <interrupt_WallCut+0xf0>
			front_wall_break_45slant = 1;
 80065e0:	4b6f      	ldr	r3, [pc, #444]	; (80067a0 <interrupt_WallCut+0x2a8>)
 80065e2:	2201      	movs	r2, #1
 80065e4:	701a      	strb	r2, [r3, #0]
 80065e6:	e002      	b.n	80065ee <interrupt_WallCut+0xf6>
		} else {
			front_wall_break_45slant = 0;
 80065e8:	4b6d      	ldr	r3, [pc, #436]	; (80067a0 <interrupt_WallCut+0x2a8>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	701a      	strb	r2, [r3, #0]
		}

// スラロームで用いる90度センサーの壁切れ
		if (g_sensor[SENSOR_LEFT][0] < WALLCUT_THRESHOLD_L90) {
 80065ee:	4b67      	ldr	r3, [pc, #412]	; (800678c <interrupt_WallCut+0x294>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80065f6:	da30      	bge.n	800665a <interrupt_WallCut+0x162>
			NoWallCountL90++;
 80065f8:	4b6a      	ldr	r3, [pc, #424]	; (80067a4 <interrupt_WallCut+0x2ac>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3301      	adds	r3, #1
 80065fe:	4a69      	ldr	r2, [pc, #420]	; (80067a4 <interrupt_WallCut+0x2ac>)
 8006600:	6013      	str	r3, [r2, #0]
			//straight.velocityのほうが良き？
			NoWallDisplacementL90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006602:	4b69      	ldr	r3, [pc, #420]	; (80067a8 <interrupt_WallCut+0x2b0>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4618      	mov	r0, r3
 8006608:	f7f9 ffc6 	bl	8000598 <__aeabi_f2d>
 800660c:	4604      	mov	r4, r0
 800660e:	460d      	mov	r5, r1
 8006610:	4b66      	ldr	r3, [pc, #408]	; (80067ac <interrupt_WallCut+0x2b4>)
 8006612:	ed93 7a00 	vldr	s14, [r3]
 8006616:	4b66      	ldr	r3, [pc, #408]	; (80067b0 <interrupt_WallCut+0x2b8>)
 8006618:	edd3 7a00 	vldr	s15, [r3]
 800661c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006620:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006624:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006628:	ee16 0a90 	vmov	r0, s13
 800662c:	f7f9 ffb4 	bl	8000598 <__aeabi_f2d>
 8006630:	a353      	add	r3, pc, #332	; (adr r3, 8006780 <interrupt_WallCut+0x288>)
 8006632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006636:	f7fa f807 	bl	8000648 <__aeabi_dmul>
 800663a:	4602      	mov	r2, r0
 800663c:	460b      	mov	r3, r1
 800663e:	4620      	mov	r0, r4
 8006640:	4629      	mov	r1, r5
 8006642:	f7f9 fe4b 	bl	80002dc <__adddf3>
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	4610      	mov	r0, r2
 800664c:	4619      	mov	r1, r3
 800664e:	f7fa fad3 	bl	8000bf8 <__aeabi_d2f>
 8006652:	4603      	mov	r3, r0
 8006654:	4a54      	ldr	r2, [pc, #336]	; (80067a8 <interrupt_WallCut+0x2b0>)
 8006656:	6013      	str	r3, [r2, #0]
 8006658:	e006      	b.n	8006668 <interrupt_WallCut+0x170>
//			straight.velocity*INTERRUPT_TIME - straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2
		} else {
			NoWallCountL90 = 0;
 800665a:	4b52      	ldr	r3, [pc, #328]	; (80067a4 <interrupt_WallCut+0x2ac>)
 800665c:	2200      	movs	r2, #0
 800665e:	601a      	str	r2, [r3, #0]
			NoWallDisplacementL90 = 0;
 8006660:	4b51      	ldr	r3, [pc, #324]	; (80067a8 <interrupt_WallCut+0x2b0>)
 8006662:	f04f 0200 	mov.w	r2, #0
 8006666:	601a      	str	r2, [r3, #0]
		}

		if (g_sensor[SENSOR_RIGHT][0] < WALLCUT_THRESHOLD_R90) {
 8006668:	4b48      	ldr	r3, [pc, #288]	; (800678c <interrupt_WallCut+0x294>)
 800666a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800666e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006672:	da30      	bge.n	80066d6 <interrupt_WallCut+0x1de>
			NoWallCountR90++;
 8006674:	4b4f      	ldr	r3, [pc, #316]	; (80067b4 <interrupt_WallCut+0x2bc>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	3301      	adds	r3, #1
 800667a:	4a4e      	ldr	r2, [pc, #312]	; (80067b4 <interrupt_WallCut+0x2bc>)
 800667c:	6013      	str	r3, [r2, #0]
			NoWallDisplacementR90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 800667e:	4b4e      	ldr	r3, [pc, #312]	; (80067b8 <interrupt_WallCut+0x2c0>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4618      	mov	r0, r3
 8006684:	f7f9 ff88 	bl	8000598 <__aeabi_f2d>
 8006688:	4604      	mov	r4, r0
 800668a:	460d      	mov	r5, r1
 800668c:	4b47      	ldr	r3, [pc, #284]	; (80067ac <interrupt_WallCut+0x2b4>)
 800668e:	ed93 7a00 	vldr	s14, [r3]
 8006692:	4b47      	ldr	r3, [pc, #284]	; (80067b0 <interrupt_WallCut+0x2b8>)
 8006694:	edd3 7a00 	vldr	s15, [r3]
 8006698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800669c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80066a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80066a4:	ee16 0a90 	vmov	r0, s13
 80066a8:	f7f9 ff76 	bl	8000598 <__aeabi_f2d>
 80066ac:	a334      	add	r3, pc, #208	; (adr r3, 8006780 <interrupt_WallCut+0x288>)
 80066ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b2:	f7f9 ffc9 	bl	8000648 <__aeabi_dmul>
 80066b6:	4602      	mov	r2, r0
 80066b8:	460b      	mov	r3, r1
 80066ba:	4620      	mov	r0, r4
 80066bc:	4629      	mov	r1, r5
 80066be:	f7f9 fe0d 	bl	80002dc <__adddf3>
 80066c2:	4602      	mov	r2, r0
 80066c4:	460b      	mov	r3, r1
 80066c6:	4610      	mov	r0, r2
 80066c8:	4619      	mov	r1, r3
 80066ca:	f7fa fa95 	bl	8000bf8 <__aeabi_d2f>
 80066ce:	4603      	mov	r3, r0
 80066d0:	4a39      	ldr	r2, [pc, #228]	; (80067b8 <interrupt_WallCut+0x2c0>)
 80066d2:	6013      	str	r3, [r2, #0]
 80066d4:	e006      	b.n	80066e4 <interrupt_WallCut+0x1ec>
		} else {
			NoWallCountR90 = 0;
 80066d6:	4b37      	ldr	r3, [pc, #220]	; (80067b4 <interrupt_WallCut+0x2bc>)
 80066d8:	2200      	movs	r2, #0
 80066da:	601a      	str	r2, [r3, #0]
			NoWallDisplacementR90 = 0;
 80066dc:	4b36      	ldr	r3, [pc, #216]	; (80067b8 <interrupt_WallCut+0x2c0>)
 80066de:	f04f 0200 	mov.w	r2, #0
 80066e2:	601a      	str	r2, [r3, #0]
		}

// 大回りターンで用いる45度センサーの壁切れ
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 80066e4:	4b2a      	ldr	r3, [pc, #168]	; (8006790 <interrupt_WallCut+0x298>)
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f113 0f59 	cmn.w	r3, #89	; 0x59
 80066ec:	da03      	bge.n	80066f6 <interrupt_WallCut+0x1fe>
				> WALLCUT_THRESHOLD_DIFF_L45 || g_sensor[SENSOR_FRONT_LEFT][0]
 80066ee:	4b27      	ldr	r3, [pc, #156]	; (800678c <interrupt_WallCut+0x294>)
 80066f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f2:	2bc8      	cmp	r3, #200	; 0xc8
 80066f4:	dd37      	ble.n	8006766 <interrupt_WallCut+0x26e>
																				> WALLCUT_THRESHOLD_L45) {
			g_sensor_max_fl = 0;			//CENTER_FL;
 80066f6:	4b31      	ldr	r3, [pc, #196]	; (80067bc <interrupt_WallCut+0x2c4>)
 80066f8:	f04f 0200 	mov.w	r2, #0
 80066fc:	601a      	str	r2, [r3, #0]
			NoWallCountL45++;
 80066fe:	4b30      	ldr	r3, [pc, #192]	; (80067c0 <interrupt_WallCut+0x2c8>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	3301      	adds	r3, #1
 8006704:	4a2e      	ldr	r2, [pc, #184]	; (80067c0 <interrupt_WallCut+0x2c8>)
 8006706:	6013      	str	r3, [r2, #0]
			//pl_l_blue_LED(0);
			NoWallCountL45_flag = 0;
 8006708:	4b2e      	ldr	r3, [pc, #184]	; (80067c4 <interrupt_WallCut+0x2cc>)
 800670a:	2200      	movs	r2, #0
 800670c:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountL45_flag == 1) {
//			NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 800670e:	4b2e      	ldr	r3, [pc, #184]	; (80067c8 <interrupt_WallCut+0x2d0>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4618      	mov	r0, r3
 8006714:	f7f9 ff40 	bl	8000598 <__aeabi_f2d>
 8006718:	4604      	mov	r4, r0
 800671a:	460d      	mov	r5, r1
 800671c:	4b23      	ldr	r3, [pc, #140]	; (80067ac <interrupt_WallCut+0x2b4>)
 800671e:	ed93 7a00 	vldr	s14, [r3]
 8006722:	4b23      	ldr	r3, [pc, #140]	; (80067b0 <interrupt_WallCut+0x2b8>)
 8006724:	edd3 7a00 	vldr	s15, [r3]
 8006728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800672c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006730:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006734:	ee16 0a90 	vmov	r0, s13
 8006738:	f7f9 ff2e 	bl	8000598 <__aeabi_f2d>
 800673c:	a310      	add	r3, pc, #64	; (adr r3, 8006780 <interrupt_WallCut+0x288>)
 800673e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006742:	f7f9 ff81 	bl	8000648 <__aeabi_dmul>
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	4620      	mov	r0, r4
 800674c:	4629      	mov	r1, r5
 800674e:	f7f9 fdc5 	bl	80002dc <__adddf3>
 8006752:	4602      	mov	r2, r0
 8006754:	460b      	mov	r3, r1
 8006756:	4610      	mov	r0, r2
 8006758:	4619      	mov	r1, r3
 800675a:	f7fa fa4d 	bl	8000bf8 <__aeabi_d2f>
 800675e:	4603      	mov	r3, r0
 8006760:	4a19      	ldr	r2, [pc, #100]	; (80067c8 <interrupt_WallCut+0x2d0>)
 8006762:	6013      	str	r3, [r2, #0]
 8006764:	e09f      	b.n	80068a6 <interrupt_WallCut+0x3ae>
//			}
		} else {

			if (NoWallCountL45_flag == 0) {
 8006766:	4b17      	ldr	r3, [pc, #92]	; (80067c4 <interrupt_WallCut+0x2cc>)
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d16b      	bne.n	8006846 <interrupt_WallCut+0x34e>
				for (int i = 0; i <= 19; i++) {
 800676e:	2300      	movs	r3, #0
 8006770:	60fb      	str	r3, [r7, #12]
 8006772:	e04b      	b.n	800680c <interrupt_WallCut+0x314>
 8006774:	f3af 8000 	nop.w
 8006778:	00000000 	.word	0x00000000
 800677c:	40ab5800 	.word	0x40ab5800
 8006780:	d2f1a9fc 	.word	0xd2f1a9fc
 8006784:	3f50624d 	.word	0x3f50624d
 8006788:	200004dc 	.word	0x200004dc
 800678c:	200002bc 	.word	0x200002bc
 8006790:	20000460 	.word	0x20000460
 8006794:	20000596 	.word	0x20000596
 8006798:	200005f6 	.word	0x200005f6
 800679c:	200005f7 	.word	0x200005f7
 80067a0:	200005f8 	.word	0x200005f8
 80067a4:	200005bc 	.word	0x200005bc
 80067a8:	200005d4 	.word	0x200005d4
 80067ac:	20000258 	.word	0x20000258
 80067b0:	2000025c 	.word	0x2000025c
 80067b4:	200005b8 	.word	0x200005b8
 80067b8:	200005d0 	.word	0x200005d0
 80067bc:	200005fc 	.word	0x200005fc
 80067c0:	200005c4 	.word	0x200005c4
 80067c4:	200005f0 	.word	0x200005f0
 80067c8:	200005dc 	.word	0x200005dc
					if (g_sensor_max_fl
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 80067cc:	4a7c      	ldr	r2, [pc, #496]	; (80069c0 <interrupt_WallCut+0x4c8>)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3314      	adds	r3, #20
 80067d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067d6:	ee07 3a90 	vmov	s15, r3
 80067da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067de:	4b79      	ldr	r3, [pc, #484]	; (80069c4 <interrupt_WallCut+0x4cc>)
 80067e0:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl
 80067e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80067e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ec:	dd0b      	ble.n	8006806 <interrupt_WallCut+0x30e>
						g_sensor_max_fl =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 80067ee:	4a74      	ldr	r2, [pc, #464]	; (80069c0 <interrupt_WallCut+0x4c8>)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	3314      	adds	r3, #20
 80067f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067f8:	ee07 3a90 	vmov	s15, r3
 80067fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl =
 8006800:	4b70      	ldr	r3, [pc, #448]	; (80069c4 <interrupt_WallCut+0x4cc>)
 8006802:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	3301      	adds	r3, #1
 800680a:	60fb      	str	r3, [r7, #12]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2b13      	cmp	r3, #19
 8006810:	dddc      	ble.n	80067cc <interrupt_WallCut+0x2d4>
					}
				}
				NoWallCountL45 = 0;
 8006812:	4b6d      	ldr	r3, [pc, #436]	; (80069c8 <interrupt_WallCut+0x4d0>)
 8006814:	2200      	movs	r2, #0
 8006816:	601a      	str	r2, [r3, #0]
				NoWallCountL45_flag = 1;
 8006818:	4b6c      	ldr	r3, [pc, #432]	; (80069cc <interrupt_WallCut+0x4d4>)
 800681a:	2201      	movs	r2, #1
 800681c:	701a      	strb	r2, [r3, #0]
				//pl_l_blue_LED(1);
				//NoWallDisplacementL45 = 0;
				NoWallDisplacementL45 = GAIN_WALLCUT
						* (g_sensor_max_fl - CENTER_FL) / g_sensor_max_fl;
 800681e:	4b69      	ldr	r3, [pc, #420]	; (80069c4 <interrupt_WallCut+0x4cc>)
 8006820:	edd3 7a00 	vldr	s15, [r3]
 8006824:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80069d0 <interrupt_WallCut+0x4d8>
 8006828:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800682c:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80069d4 <interrupt_WallCut+0x4dc>
 8006830:	ee67 6a87 	vmul.f32	s13, s15, s14
 8006834:	4b63      	ldr	r3, [pc, #396]	; (80069c4 <interrupt_WallCut+0x4cc>)
 8006836:	ed93 7a00 	vldr	s14, [r3]
 800683a:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementL45 = GAIN_WALLCUT
 800683e:	4b66      	ldr	r3, [pc, #408]	; (80069d8 <interrupt_WallCut+0x4e0>)
 8006840:	edc3 7a00 	vstr	s15, [r3]
 8006844:	e02f      	b.n	80068a6 <interrupt_WallCut+0x3ae>
			} else {
				NoWallCountL45++;
 8006846:	4b60      	ldr	r3, [pc, #384]	; (80069c8 <interrupt_WallCut+0x4d0>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3301      	adds	r3, #1
 800684c:	4a5e      	ldr	r2, [pc, #376]	; (80069c8 <interrupt_WallCut+0x4d0>)
 800684e:	6013      	str	r3, [r2, #0]
//				NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 8006850:	4b61      	ldr	r3, [pc, #388]	; (80069d8 <interrupt_WallCut+0x4e0>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4618      	mov	r0, r3
 8006856:	f7f9 fe9f 	bl	8000598 <__aeabi_f2d>
 800685a:	4604      	mov	r4, r0
 800685c:	460d      	mov	r5, r1
 800685e:	4b5f      	ldr	r3, [pc, #380]	; (80069dc <interrupt_WallCut+0x4e4>)
 8006860:	ed93 7a00 	vldr	s14, [r3]
 8006864:	4b5e      	ldr	r3, [pc, #376]	; (80069e0 <interrupt_WallCut+0x4e8>)
 8006866:	edd3 7a00 	vldr	s15, [r3]
 800686a:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 800686e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006872:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006876:	ee16 0a90 	vmov	r0, s13
 800687a:	f7f9 fe8d 	bl	8000598 <__aeabi_f2d>
 800687e:	a34e      	add	r3, pc, #312	; (adr r3, 80069b8 <interrupt_WallCut+0x4c0>)
 8006880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006884:	f7f9 fee0 	bl	8000648 <__aeabi_dmul>
 8006888:	4602      	mov	r2, r0
 800688a:	460b      	mov	r3, r1
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 800688c:	4620      	mov	r0, r4
 800688e:	4629      	mov	r1, r5
 8006890:	f7f9 fd24 	bl	80002dc <__adddf3>
 8006894:	4602      	mov	r2, r0
 8006896:	460b      	mov	r3, r1
 8006898:	4610      	mov	r0, r2
 800689a:	4619      	mov	r1, r3
 800689c:	f7fa f9ac 	bl	8000bf8 <__aeabi_d2f>
 80068a0:	4603      	mov	r3, r0
 80068a2:	4a4d      	ldr	r2, [pc, #308]	; (80069d8 <interrupt_WallCut+0x4e0>)
 80068a4:	6013      	str	r3, [r2, #0]
			}
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 80068a6:	4b4f      	ldr	r3, [pc, #316]	; (80069e4 <interrupt_WallCut+0x4ec>)
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	f113 0f45 	cmn.w	r3, #69	; 0x45
 80068ae:	da05      	bge.n	80068bc <interrupt_WallCut+0x3c4>
				> WALLCUT_THRESHOLD_DIFF_R45 || g_sensor[SENSOR_FRONT_RIGHT][0]
 80068b0:	4b43      	ldr	r3, [pc, #268]	; (80069c0 <interrupt_WallCut+0x4c8>)
 80068b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068b6:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80068ba:	dd37      	ble.n	800692c <interrupt_WallCut+0x434>
																		> WALLCUT_THRESHOLD_R45) {
			g_sensor_max_fr = 0;			//CENTER_FR;
 80068bc:	4b4a      	ldr	r3, [pc, #296]	; (80069e8 <interrupt_WallCut+0x4f0>)
 80068be:	f04f 0200 	mov.w	r2, #0
 80068c2:	601a      	str	r2, [r3, #0]
			NoWallCountR45++;
 80068c4:	4b49      	ldr	r3, [pc, #292]	; (80069ec <interrupt_WallCut+0x4f4>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3301      	adds	r3, #1
 80068ca:	4a48      	ldr	r2, [pc, #288]	; (80069ec <interrupt_WallCut+0x4f4>)
 80068cc:	6013      	str	r3, [r2, #0]
			//pl_r_blue_LED(0);
			NoWallCountR45_flag = 0;
 80068ce:	4b48      	ldr	r3, [pc, #288]	; (80069f0 <interrupt_WallCut+0x4f8>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountR45_flag == 1) {
//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 80068d4:	4b47      	ldr	r3, [pc, #284]	; (80069f4 <interrupt_WallCut+0x4fc>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4618      	mov	r0, r3
 80068da:	f7f9 fe5d 	bl	8000598 <__aeabi_f2d>
 80068de:	4604      	mov	r4, r0
 80068e0:	460d      	mov	r5, r1
 80068e2:	4b3e      	ldr	r3, [pc, #248]	; (80069dc <interrupt_WallCut+0x4e4>)
 80068e4:	ed93 7a00 	vldr	s14, [r3]
 80068e8:	4b3d      	ldr	r3, [pc, #244]	; (80069e0 <interrupt_WallCut+0x4e8>)
 80068ea:	edd3 7a00 	vldr	s15, [r3]
 80068ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068f2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80068f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80068fa:	ee16 0a90 	vmov	r0, s13
 80068fe:	f7f9 fe4b 	bl	8000598 <__aeabi_f2d>
 8006902:	a32d      	add	r3, pc, #180	; (adr r3, 80069b8 <interrupt_WallCut+0x4c0>)
 8006904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006908:	f7f9 fe9e 	bl	8000648 <__aeabi_dmul>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	4620      	mov	r0, r4
 8006912:	4629      	mov	r1, r5
 8006914:	f7f9 fce2 	bl	80002dc <__adddf3>
 8006918:	4602      	mov	r2, r0
 800691a:	460b      	mov	r3, r1
 800691c:	4610      	mov	r0, r2
 800691e:	4619      	mov	r1, r3
 8006920:	f7fa f96a 	bl	8000bf8 <__aeabi_d2f>
 8006924:	4603      	mov	r3, r0
 8006926:	4a33      	ldr	r2, [pc, #204]	; (80069f4 <interrupt_WallCut+0x4fc>)
 8006928:	6013      	str	r3, [r2, #0]
 800692a:	e097      	b.n	8006a5c <interrupt_WallCut+0x564>
//			}
		} else {
			if (NoWallCountR45_flag == 0) {
 800692c:	4b30      	ldr	r3, [pc, #192]	; (80069f0 <interrupt_WallCut+0x4f8>)
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d163      	bne.n	80069fc <interrupt_WallCut+0x504>
				for (int i = 0; i <= 19; i++) {
 8006934:	2300      	movs	r3, #0
 8006936:	60bb      	str	r3, [r7, #8]
 8006938:	e01f      	b.n	800697a <interrupt_WallCut+0x482>
					if (g_sensor_max_fr
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 800693a:	4a21      	ldr	r2, [pc, #132]	; (80069c0 <interrupt_WallCut+0x4c8>)
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	333c      	adds	r3, #60	; 0x3c
 8006940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006944:	ee07 3a90 	vmov	s15, r3
 8006948:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800694c:	4b26      	ldr	r3, [pc, #152]	; (80069e8 <interrupt_WallCut+0x4f0>)
 800694e:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr
 8006952:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800695a:	dd0b      	ble.n	8006974 <interrupt_WallCut+0x47c>
						g_sensor_max_fr =
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 800695c:	4a18      	ldr	r2, [pc, #96]	; (80069c0 <interrupt_WallCut+0x4c8>)
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	333c      	adds	r3, #60	; 0x3c
 8006962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006966:	ee07 3a90 	vmov	s15, r3
 800696a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr =
 800696e:	4b1e      	ldr	r3, [pc, #120]	; (80069e8 <interrupt_WallCut+0x4f0>)
 8006970:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	3301      	adds	r3, #1
 8006978:	60bb      	str	r3, [r7, #8]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	2b13      	cmp	r3, #19
 800697e:	dddc      	ble.n	800693a <interrupt_WallCut+0x442>
					}
				}
				NoWallCountR45 = 0;
 8006980:	4b1a      	ldr	r3, [pc, #104]	; (80069ec <interrupt_WallCut+0x4f4>)
 8006982:	2200      	movs	r2, #0
 8006984:	601a      	str	r2, [r3, #0]
				NoWallCountR45_flag = 1;
 8006986:	4b1a      	ldr	r3, [pc, #104]	; (80069f0 <interrupt_WallCut+0x4f8>)
 8006988:	2201      	movs	r2, #1
 800698a:	701a      	strb	r2, [r3, #0]
				//pl_r_blue_LED(1);
				//NoWallDisplacementR45 = 0;
				NoWallDisplacementR45 = GAIN_WALLCUT
						* (g_sensor_max_fr - CENTER_FR) / g_sensor_max_fr;
 800698c:	4b16      	ldr	r3, [pc, #88]	; (80069e8 <interrupt_WallCut+0x4f0>)
 800698e:	edd3 7a00 	vldr	s15, [r3]
 8006992:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80069f8 <interrupt_WallCut+0x500>
 8006996:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800699a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80069d4 <interrupt_WallCut+0x4dc>
 800699e:	ee67 6a87 	vmul.f32	s13, s15, s14
 80069a2:	4b11      	ldr	r3, [pc, #68]	; (80069e8 <interrupt_WallCut+0x4f0>)
 80069a4:	ed93 7a00 	vldr	s14, [r3]
 80069a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementR45 = GAIN_WALLCUT
 80069ac:	4b11      	ldr	r3, [pc, #68]	; (80069f4 <interrupt_WallCut+0x4fc>)
 80069ae:	edc3 7a00 	vstr	s15, [r3]
 80069b2:	e053      	b.n	8006a5c <interrupt_WallCut+0x564>
 80069b4:	f3af 8000 	nop.w
 80069b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80069bc:	3f50624d 	.word	0x3f50624d
 80069c0:	200002bc 	.word	0x200002bc
 80069c4:	200005fc 	.word	0x200005fc
 80069c8:	200005c4 	.word	0x200005c4
 80069cc:	200005f0 	.word	0x200005f0
 80069d0:	43f68000 	.word	0x43f68000
 80069d4:	00000000 	.word	0x00000000
 80069d8:	200005dc 	.word	0x200005dc
 80069dc:	20000258 	.word	0x20000258
 80069e0:	2000025c 	.word	0x2000025c
 80069e4:	20000460 	.word	0x20000460
 80069e8:	20000600 	.word	0x20000600
 80069ec:	200005c0 	.word	0x200005c0
 80069f0:	200005f1 	.word	0x200005f1
 80069f4:	200005d8 	.word	0x200005d8
 80069f8:	44484000 	.word	0x44484000
			} else {
				NoWallCountR45++;
 80069fc:	4b94      	ldr	r3, [pc, #592]	; (8006c50 <interrupt_WallCut+0x758>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3301      	adds	r3, #1
 8006a02:	4a93      	ldr	r2, [pc, #588]	; (8006c50 <interrupt_WallCut+0x758>)
 8006a04:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 8006a06:	4b93      	ldr	r3, [pc, #588]	; (8006c54 <interrupt_WallCut+0x75c>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7f9 fdc4 	bl	8000598 <__aeabi_f2d>
 8006a10:	4604      	mov	r4, r0
 8006a12:	460d      	mov	r5, r1
 8006a14:	4b90      	ldr	r3, [pc, #576]	; (8006c58 <interrupt_WallCut+0x760>)
 8006a16:	ed93 7a00 	vldr	s14, [r3]
 8006a1a:	4b90      	ldr	r3, [pc, #576]	; (8006c5c <interrupt_WallCut+0x764>)
 8006a1c:	edd3 7a00 	vldr	s15, [r3]
 8006a20:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 8006a24:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006a28:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006a2c:	ee16 0a90 	vmov	r0, s13
 8006a30:	f7f9 fdb2 	bl	8000598 <__aeabi_f2d>
 8006a34:	a384      	add	r3, pc, #528	; (adr r3, 8006c48 <interrupt_WallCut+0x750>)
 8006a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3a:	f7f9 fe05 	bl	8000648 <__aeabi_dmul>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	460b      	mov	r3, r1
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 8006a42:	4620      	mov	r0, r4
 8006a44:	4629      	mov	r1, r5
 8006a46:	f7f9 fc49 	bl	80002dc <__adddf3>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4610      	mov	r0, r2
 8006a50:	4619      	mov	r1, r3
 8006a52:	f7fa f8d1 	bl	8000bf8 <__aeabi_d2f>
 8006a56:	4603      	mov	r3, r0
 8006a58:	4a7e      	ldr	r2, [pc, #504]	; (8006c54 <interrupt_WallCut+0x75c>)
 8006a5a:	6013      	str	r3, [r2, #0]
			}

		}

		// 大回りターンで用いる45度センサーの壁切れ(斜め)
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 8006a5c:	4b80      	ldr	r3, [pc, #512]	; (8006c60 <interrupt_WallCut+0x768>)
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f113 0fef 	cmn.w	r3, #239	; 0xef
 8006a64:	db5f      	blt.n	8006b26 <interrupt_WallCut+0x62e>
				> WALLCUT_THRESHOLD_DIFF_L45_SLANT) {
			g_sensor_max_fl_slant = 0;			//CENTER_FL_SLANT;
 8006a66:	4b7f      	ldr	r3, [pc, #508]	; (8006c64 <interrupt_WallCut+0x76c>)
 8006a68:	f04f 0200 	mov.w	r2, #0
 8006a6c:	601a      	str	r2, [r3, #0]
			NoWallCountL45slant++;
 8006a6e:	4b7e      	ldr	r3, [pc, #504]	; (8006c68 <interrupt_WallCut+0x770>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3301      	adds	r3, #1
 8006a74:	4a7c      	ldr	r2, [pc, #496]	; (8006c68 <interrupt_WallCut+0x770>)
 8006a76:	6013      	str	r3, [r2, #0]
			pl_l_blue_LED(0);
 8006a78:	2000      	movs	r0, #0
 8006a7a:	f000 fccf 	bl	800741c <pl_l_blue_LED>
			NoWallCountL45slant_flag = 0;
 8006a7e:	4b7b      	ldr	r3, [pc, #492]	; (8006c6c <interrupt_WallCut+0x774>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	701a      	strb	r2, [r3, #0]
			//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006a84:	4b7a      	ldr	r3, [pc, #488]	; (8006c70 <interrupt_WallCut+0x778>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7f9 fd85 	bl	8000598 <__aeabi_f2d>
 8006a8e:	4604      	mov	r4, r0
 8006a90:	460d      	mov	r5, r1
 8006a92:	4b71      	ldr	r3, [pc, #452]	; (8006c58 <interrupt_WallCut+0x760>)
 8006a94:	ed93 7a00 	vldr	s14, [r3]
 8006a98:	4b70      	ldr	r3, [pc, #448]	; (8006c5c <interrupt_WallCut+0x764>)
 8006a9a:	edd3 7a00 	vldr	s15, [r3]
 8006a9e:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 8006aa2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006aa6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006aaa:	ee16 0a90 	vmov	r0, s13
 8006aae:	f7f9 fd73 	bl	8000598 <__aeabi_f2d>
 8006ab2:	a365      	add	r3, pc, #404	; (adr r3, 8006c48 <interrupt_WallCut+0x750>)
 8006ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab8:	f7f9 fdc6 	bl	8000648 <__aeabi_dmul>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	4629      	mov	r1, r5
 8006ac4:	f7f9 fc0a 	bl	80002dc <__adddf3>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	4610      	mov	r0, r2
 8006ace:	4619      	mov	r1, r3
 8006ad0:	f7fa f892 	bl	8000bf8 <__aeabi_d2f>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	4a66      	ldr	r2, [pc, #408]	; (8006c70 <interrupt_WallCut+0x778>)
 8006ad8:	6013      	str	r3, [r2, #0]
			if (slantWallControlL_flag == 1) {
 8006ada:	4b66      	ldr	r3, [pc, #408]	; (8006c74 <interrupt_WallCut+0x77c>)
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	f040 812b 	bne.w	8006d3a <interrupt_WallCut+0x842>
				NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 8006ae4:	4b64      	ldr	r3, [pc, #400]	; (8006c78 <interrupt_WallCut+0x780>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7f9 fd55 	bl	8000598 <__aeabi_f2d>
 8006aee:	4604      	mov	r4, r0
 8006af0:	460d      	mov	r5, r1
 8006af2:	4b62      	ldr	r3, [pc, #392]	; (8006c7c <interrupt_WallCut+0x784>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7f9 fd4e 	bl	8000598 <__aeabi_f2d>
 8006afc:	a352      	add	r3, pc, #328	; (adr r3, 8006c48 <interrupt_WallCut+0x750>)
 8006afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b02:	f7f9 fda1 	bl	8000648 <__aeabi_dmul>
 8006b06:	4602      	mov	r2, r0
 8006b08:	460b      	mov	r3, r1
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	4629      	mov	r1, r5
 8006b0e:	f7f9 fbe5 	bl	80002dc <__adddf3>
 8006b12:	4602      	mov	r2, r0
 8006b14:	460b      	mov	r3, r1
 8006b16:	4610      	mov	r0, r2
 8006b18:	4619      	mov	r1, r3
 8006b1a:	f7fa f86d 	bl	8000bf8 <__aeabi_d2f>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	4a55      	ldr	r2, [pc, #340]	; (8006c78 <interrupt_WallCut+0x780>)
 8006b22:	6013      	str	r3, [r2, #0]
 8006b24:	e109      	b.n	8006d3a <interrupt_WallCut+0x842>
				//NoWallDisplacementL45slant += (E_speedL + E_speedR)
				//		/ 2*INTERRUPT_TIME;
			}
		} else {
			if (NoWallCountL45slant_flag == 0) {
 8006b26:	4b51      	ldr	r3, [pc, #324]	; (8006c6c <interrupt_WallCut+0x774>)
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f040 80ae 	bne.w	8006c8c <interrupt_WallCut+0x794>
				for (int i = 0; i <= 19; i++) {
 8006b30:	2300      	movs	r3, #0
 8006b32:	607b      	str	r3, [r7, #4]
 8006b34:	e01f      	b.n	8006b76 <interrupt_WallCut+0x67e>
					if (g_sensor_max_fl_slant
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 8006b36:	4a52      	ldr	r2, [pc, #328]	; (8006c80 <interrupt_WallCut+0x788>)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	3314      	adds	r3, #20
 8006b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b40:	ee07 3a90 	vmov	s15, r3
 8006b44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b48:	4b46      	ldr	r3, [pc, #280]	; (8006c64 <interrupt_WallCut+0x76c>)
 8006b4a:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl_slant
 8006b4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b56:	dd0b      	ble.n	8006b70 <interrupt_WallCut+0x678>
						g_sensor_max_fl_slant =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 8006b58:	4a49      	ldr	r2, [pc, #292]	; (8006c80 <interrupt_WallCut+0x788>)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	3314      	adds	r3, #20
 8006b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b62:	ee07 3a90 	vmov	s15, r3
 8006b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl_slant =
 8006b6a:	4b3e      	ldr	r3, [pc, #248]	; (8006c64 <interrupt_WallCut+0x76c>)
 8006b6c:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	3301      	adds	r3, #1
 8006b74:	607b      	str	r3, [r7, #4]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2b13      	cmp	r3, #19
 8006b7a:	dddc      	ble.n	8006b36 <interrupt_WallCut+0x63e>
					}
				}
				NoWallCountL45slant = 0;
 8006b7c:	4b3a      	ldr	r3, [pc, #232]	; (8006c68 <interrupt_WallCut+0x770>)
 8006b7e:	2200      	movs	r2, #0
 8006b80:	601a      	str	r2, [r3, #0]
				NoWallCountL45slant_flag = 1;
 8006b82:	4b3a      	ldr	r3, [pc, #232]	; (8006c6c <interrupt_WallCut+0x774>)
 8006b84:	2201      	movs	r2, #1
 8006b86:	701a      	strb	r2, [r3, #0]
				pl_l_blue_LED(1);
 8006b88:	2001      	movs	r0, #1
 8006b8a:	f000 fc47 	bl	800741c <pl_l_blue_LED>
				//			NoWallDisplacementL45slant = 0;
				//			NoWallDisplacementL45slant2 = 0;
				if (g_sensor_max_fl_slant - CENTER_FL_SLANT >= 0) {
 8006b8e:	4b35      	ldr	r3, [pc, #212]	; (8006c64 <interrupt_WallCut+0x76c>)
 8006b90:	edd3 7a00 	vldr	s15, [r3]
 8006b94:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006c84 <interrupt_WallCut+0x78c>
 8006b98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ba4:	db26      	blt.n	8006bf4 <interrupt_WallCut+0x6fc>
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006ba6:	4b2f      	ldr	r3, [pc, #188]	; (8006c64 <interrupt_WallCut+0x76c>)
 8006ba8:	edd3 7a00 	vldr	s15, [r3]
 8006bac:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8006c84 <interrupt_WallCut+0x78c>
 8006bb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006bb4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8006c88 <interrupt_WallCut+0x790>
 8006bb8:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006bbc:	4b29      	ldr	r3, [pc, #164]	; (8006c64 <interrupt_WallCut+0x76c>)
 8006bbe:	ed93 7a00 	vldr	s14, [r3]
 8006bc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
 8006bc6:	4b2c      	ldr	r3, [pc, #176]	; (8006c78 <interrupt_WallCut+0x780>)
 8006bc8:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006bcc:	4b25      	ldr	r3, [pc, #148]	; (8006c64 <interrupt_WallCut+0x76c>)
 8006bce:	edd3 7a00 	vldr	s15, [r3]
 8006bd2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006c84 <interrupt_WallCut+0x78c>
 8006bd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006bda:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006c88 <interrupt_WallCut+0x790>
 8006bde:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006be2:	4b20      	ldr	r3, [pc, #128]	; (8006c64 <interrupt_WallCut+0x76c>)
 8006be4:	ed93 7a00 	vldr	s14, [r3]
 8006be8:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
 8006bec:	4b20      	ldr	r3, [pc, #128]	; (8006c70 <interrupt_WallCut+0x778>)
 8006bee:	edc3 7a00 	vstr	s15, [r3]
 8006bf2:	e09f      	b.n	8006d34 <interrupt_WallCut+0x83c>
				} else {
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006bf4:	4b1b      	ldr	r3, [pc, #108]	; (8006c64 <interrupt_WallCut+0x76c>)
 8006bf6:	edd3 7a00 	vldr	s15, [r3]
 8006bfa:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006c84 <interrupt_WallCut+0x78c>
 8006bfe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c02:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8006c88 <interrupt_WallCut+0x790>
 8006c06:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006c0a:	4b16      	ldr	r3, [pc, #88]	; (8006c64 <interrupt_WallCut+0x76c>)
 8006c0c:	ed93 7a00 	vldr	s14, [r3]
 8006c10:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
 8006c14:	4b18      	ldr	r3, [pc, #96]	; (8006c78 <interrupt_WallCut+0x780>)
 8006c16:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006c1a:	4b12      	ldr	r3, [pc, #72]	; (8006c64 <interrupt_WallCut+0x76c>)
 8006c1c:	edd3 7a00 	vldr	s15, [r3]
 8006c20:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006c84 <interrupt_WallCut+0x78c>
 8006c24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c28:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006c88 <interrupt_WallCut+0x790>
 8006c2c:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006c30:	4b0c      	ldr	r3, [pc, #48]	; (8006c64 <interrupt_WallCut+0x76c>)
 8006c32:	ed93 7a00 	vldr	s14, [r3]
 8006c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
 8006c3a:	4b0d      	ldr	r3, [pc, #52]	; (8006c70 <interrupt_WallCut+0x778>)
 8006c3c:	edc3 7a00 	vstr	s15, [r3]
 8006c40:	e078      	b.n	8006d34 <interrupt_WallCut+0x83c>
 8006c42:	bf00      	nop
 8006c44:	f3af 8000 	nop.w
 8006c48:	d2f1a9fc 	.word	0xd2f1a9fc
 8006c4c:	3f50624d 	.word	0x3f50624d
 8006c50:	200005c0 	.word	0x200005c0
 8006c54:	200005d8 	.word	0x200005d8
 8006c58:	20000258 	.word	0x20000258
 8006c5c:	2000025c 	.word	0x2000025c
 8006c60:	20000460 	.word	0x20000460
 8006c64:	20000604 	.word	0x20000604
 8006c68:	200005cc 	.word	0x200005cc
 8006c6c:	200005f2 	.word	0x200005f2
 8006c70:	200005ec 	.word	0x200005ec
 8006c74:	200005f4 	.word	0x200005f4
 8006c78:	200005e4 	.word	0x200005e4
 8006c7c:	200004dc 	.word	0x200004dc
 8006c80:	200002bc 	.word	0x200002bc
 8006c84:	455ac000 	.word	0x455ac000
 8006c88:	00000000 	.word	0x00000000
				}

			} else {
				NoWallCountL45slant++;
 8006c8c:	4bac      	ldr	r3, [pc, #688]	; (8006f40 <interrupt_WallCut+0xa48>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	3301      	adds	r3, #1
 8006c92:	4aab      	ldr	r2, [pc, #684]	; (8006f40 <interrupt_WallCut+0xa48>)
 8006c94:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006c96:	4bab      	ldr	r3, [pc, #684]	; (8006f44 <interrupt_WallCut+0xa4c>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7f9 fc7c 	bl	8000598 <__aeabi_f2d>
 8006ca0:	4604      	mov	r4, r0
 8006ca2:	460d      	mov	r5, r1
 8006ca4:	4ba8      	ldr	r3, [pc, #672]	; (8006f48 <interrupt_WallCut+0xa50>)
 8006ca6:	ed93 7a00 	vldr	s14, [r3]
 8006caa:	4ba8      	ldr	r3, [pc, #672]	; (8006f4c <interrupt_WallCut+0xa54>)
 8006cac:	edd3 7a00 	vldr	s15, [r3]
 8006cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006cb4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006cb8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006cbc:	ee16 0a90 	vmov	r0, s13
 8006cc0:	f7f9 fc6a 	bl	8000598 <__aeabi_f2d>
 8006cc4:	a39c      	add	r3, pc, #624	; (adr r3, 8006f38 <interrupt_WallCut+0xa40>)
 8006cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cca:	f7f9 fcbd 	bl	8000648 <__aeabi_dmul>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	460b      	mov	r3, r1
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	4629      	mov	r1, r5
 8006cd6:	f7f9 fb01 	bl	80002dc <__adddf3>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4610      	mov	r0, r2
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	f7f9 ff89 	bl	8000bf8 <__aeabi_d2f>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	4a96      	ldr	r2, [pc, #600]	; (8006f44 <interrupt_WallCut+0xa4c>)
 8006cea:	6013      	str	r3, [r2, #0]
				if (slantWallControlL_flag == 1) {
 8006cec:	4b98      	ldr	r3, [pc, #608]	; (8006f50 <interrupt_WallCut+0xa58>)
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d11f      	bne.n	8006d34 <interrupt_WallCut+0x83c>
					NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 8006cf4:	4b97      	ldr	r3, [pc, #604]	; (8006f54 <interrupt_WallCut+0xa5c>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7f9 fc4d 	bl	8000598 <__aeabi_f2d>
 8006cfe:	4604      	mov	r4, r0
 8006d00:	460d      	mov	r5, r1
 8006d02:	4b95      	ldr	r3, [pc, #596]	; (8006f58 <interrupt_WallCut+0xa60>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7f9 fc46 	bl	8000598 <__aeabi_f2d>
 8006d0c:	a38a      	add	r3, pc, #552	; (adr r3, 8006f38 <interrupt_WallCut+0xa40>)
 8006d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d12:	f7f9 fc99 	bl	8000648 <__aeabi_dmul>
 8006d16:	4602      	mov	r2, r0
 8006d18:	460b      	mov	r3, r1
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	4629      	mov	r1, r5
 8006d1e:	f7f9 fadd 	bl	80002dc <__adddf3>
 8006d22:	4602      	mov	r2, r0
 8006d24:	460b      	mov	r3, r1
 8006d26:	4610      	mov	r0, r2
 8006d28:	4619      	mov	r1, r3
 8006d2a:	f7f9 ff65 	bl	8000bf8 <__aeabi_d2f>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	4a88      	ldr	r2, [pc, #544]	; (8006f54 <interrupt_WallCut+0xa5c>)
 8006d32:	6013      	str	r3, [r2, #0]
//					NoWallDisplacementL45slant += (E_speedL + E_speedR)
//							/ 2*INTERRUPT_TIME;
				}
			}

			slantWallControlL_flag = 1;
 8006d34:	4b86      	ldr	r3, [pc, #536]	; (8006f50 <interrupt_WallCut+0xa58>)
 8006d36:	2201      	movs	r2, #1
 8006d38:	701a      	strb	r2, [r3, #0]
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 8006d3a:	4b88      	ldr	r3, [pc, #544]	; (8006f5c <interrupt_WallCut+0xa64>)
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	f113 0fef 	cmn.w	r3, #239	; 0xef
 8006d42:	db6a      	blt.n	8006e1a <interrupt_WallCut+0x922>
				> WALLCUT_THRESHOLD_DIFF_R45_SLANT) {
			g_sensor_max_fr_slant = 0;				//CENTER_FR_SLANT;
 8006d44:	4b86      	ldr	r3, [pc, #536]	; (8006f60 <interrupt_WallCut+0xa68>)
 8006d46:	f04f 0200 	mov.w	r2, #0
 8006d4a:	601a      	str	r2, [r3, #0]
			NoWallCountR45slant++;
 8006d4c:	4b85      	ldr	r3, [pc, #532]	; (8006f64 <interrupt_WallCut+0xa6c>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	3301      	adds	r3, #1
 8006d52:	4a84      	ldr	r2, [pc, #528]	; (8006f64 <interrupt_WallCut+0xa6c>)
 8006d54:	6013      	str	r3, [r2, #0]
			pl_r_blue_LED(0);
 8006d56:	2000      	movs	r0, #0
 8006d58:	f000 fb4e 	bl	80073f8 <pl_r_blue_LED>
			NoWallCountR45slant_flag = 0;
 8006d5c:	4b82      	ldr	r3, [pc, #520]	; (8006f68 <interrupt_WallCut+0xa70>)
 8006d5e:	2200      	movs	r2, #0
 8006d60:	701a      	strb	r2, [r3, #0]
//	 		NoWallDisplacementR45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006d62:	4b82      	ldr	r3, [pc, #520]	; (8006f6c <interrupt_WallCut+0xa74>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7f9 fc16 	bl	8000598 <__aeabi_f2d>
 8006d6c:	4604      	mov	r4, r0
 8006d6e:	460d      	mov	r5, r1
 8006d70:	4b75      	ldr	r3, [pc, #468]	; (8006f48 <interrupt_WallCut+0xa50>)
 8006d72:	ed93 7a00 	vldr	s14, [r3]
 8006d76:	4b75      	ldr	r3, [pc, #468]	; (8006f4c <interrupt_WallCut+0xa54>)
 8006d78:	edd3 7a00 	vldr	s15, [r3]
 8006d7c:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 8006d80:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006d84:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006d88:	ee16 0a90 	vmov	r0, s13
 8006d8c:	f7f9 fc04 	bl	8000598 <__aeabi_f2d>
 8006d90:	a369      	add	r3, pc, #420	; (adr r3, 8006f38 <interrupt_WallCut+0xa40>)
 8006d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d96:	f7f9 fc57 	bl	8000648 <__aeabi_dmul>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006d9e:	4620      	mov	r0, r4
 8006da0:	4629      	mov	r1, r5
 8006da2:	f7f9 fa9b 	bl	80002dc <__adddf3>
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	4610      	mov	r0, r2
 8006dac:	4619      	mov	r1, r3
 8006dae:	f7f9 ff23 	bl	8000bf8 <__aeabi_d2f>
 8006db2:	4603      	mov	r3, r0
 8006db4:	4a6d      	ldr	r2, [pc, #436]	; (8006f6c <interrupt_WallCut+0xa74>)
 8006db6:	6013      	str	r3, [r2, #0]
			if (slantWallControlR_flag == 1) {
 8006db8:	4b6d      	ldr	r3, [pc, #436]	; (8006f70 <interrupt_WallCut+0xa78>)
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	f040 81a4 	bne.w	800710a <interrupt_WallCut+0xc12>
//				NoWallDisplacementR45slant += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006dc2:	4b6c      	ldr	r3, [pc, #432]	; (8006f74 <interrupt_WallCut+0xa7c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7f9 fbe6 	bl	8000598 <__aeabi_f2d>
 8006dcc:	4604      	mov	r4, r0
 8006dce:	460d      	mov	r5, r1
 8006dd0:	4b5d      	ldr	r3, [pc, #372]	; (8006f48 <interrupt_WallCut+0xa50>)
 8006dd2:	ed93 7a00 	vldr	s14, [r3]
 8006dd6:	4b5d      	ldr	r3, [pc, #372]	; (8006f4c <interrupt_WallCut+0xa54>)
 8006dd8:	edd3 7a00 	vldr	s15, [r3]
 8006ddc:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006de0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006de4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006de8:	ee16 0a90 	vmov	r0, s13
 8006dec:	f7f9 fbd4 	bl	8000598 <__aeabi_f2d>
 8006df0:	a351      	add	r3, pc, #324	; (adr r3, 8006f38 <interrupt_WallCut+0xa40>)
 8006df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df6:	f7f9 fc27 	bl	8000648 <__aeabi_dmul>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	460b      	mov	r3, r1
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006dfe:	4620      	mov	r0, r4
 8006e00:	4629      	mov	r1, r5
 8006e02:	f7f9 fa6b 	bl	80002dc <__adddf3>
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	4610      	mov	r0, r2
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	f7f9 fef3 	bl	8000bf8 <__aeabi_d2f>
 8006e12:	4603      	mov	r3, r0
 8006e14:	4a57      	ldr	r2, [pc, #348]	; (8006f74 <interrupt_WallCut+0xa7c>)
 8006e16:	6013      	str	r3, [r2, #0]
		g_sensor_max_fl_slant = 0;
		g_sensor_max_fr_slant = 0;

	}

}
 8006e18:	e177      	b.n	800710a <interrupt_WallCut+0xc12>
			if (NoWallCountR45slant_flag == 0) {
 8006e1a:	4b53      	ldr	r3, [pc, #332]	; (8006f68 <interrupt_WallCut+0xa70>)
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f040 80b0 	bne.w	8006f84 <interrupt_WallCut+0xa8c>
				for (int i = 0; i <= 19; i++) {
 8006e24:	2300      	movs	r3, #0
 8006e26:	603b      	str	r3, [r7, #0]
 8006e28:	e01f      	b.n	8006e6a <interrupt_WallCut+0x972>
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 8006e2a:	4a53      	ldr	r2, [pc, #332]	; (8006f78 <interrupt_WallCut+0xa80>)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	333c      	adds	r3, #60	; 0x3c
 8006e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e34:	ee07 3a90 	vmov	s15, r3
 8006e38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e3c:	4b48      	ldr	r3, [pc, #288]	; (8006f60 <interrupt_WallCut+0xa68>)
 8006e3e:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr_slant
 8006e42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e4a:	dd0b      	ble.n	8006e64 <interrupt_WallCut+0x96c>
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 8006e4c:	4a4a      	ldr	r2, [pc, #296]	; (8006f78 <interrupt_WallCut+0xa80>)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	333c      	adds	r3, #60	; 0x3c
 8006e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr_slant =
 8006e5e:	4b40      	ldr	r3, [pc, #256]	; (8006f60 <interrupt_WallCut+0xa68>)
 8006e60:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	3301      	adds	r3, #1
 8006e68:	603b      	str	r3, [r7, #0]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2b13      	cmp	r3, #19
 8006e6e:	dddc      	ble.n	8006e2a <interrupt_WallCut+0x932>
				NoWallCountR45slant = 0;
 8006e70:	4b3c      	ldr	r3, [pc, #240]	; (8006f64 <interrupt_WallCut+0xa6c>)
 8006e72:	2200      	movs	r2, #0
 8006e74:	601a      	str	r2, [r3, #0]
				NoWallCountR45slant_flag = 1;
 8006e76:	4b3c      	ldr	r3, [pc, #240]	; (8006f68 <interrupt_WallCut+0xa70>)
 8006e78:	2201      	movs	r2, #1
 8006e7a:	701a      	strb	r2, [r3, #0]
				pl_r_blue_LED(1);
 8006e7c:	2001      	movs	r0, #1
 8006e7e:	f000 fabb 	bl	80073f8 <pl_r_blue_LED>
				if (g_sensor_max_fr_slant - CENTER_FR_SLANT >= 0) {
 8006e82:	4b37      	ldr	r3, [pc, #220]	; (8006f60 <interrupt_WallCut+0xa68>)
 8006e84:	edd3 7a00 	vldr	s15, [r3]
 8006e88:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8006f7c <interrupt_WallCut+0xa84>
 8006e8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e98:	db26      	blt.n	8006ee8 <interrupt_WallCut+0x9f0>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006e9a:	4b31      	ldr	r3, [pc, #196]	; (8006f60 <interrupt_WallCut+0xa68>)
 8006e9c:	edd3 7a00 	vldr	s15, [r3]
 8006ea0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006f7c <interrupt_WallCut+0xa84>
 8006ea4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ea8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8006f80 <interrupt_WallCut+0xa88>
 8006eac:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006eb0:	4b2b      	ldr	r3, [pc, #172]	; (8006f60 <interrupt_WallCut+0xa68>)
 8006eb2:	ed93 7a00 	vldr	s14, [r3]
 8006eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT
 8006eba:	4b2e      	ldr	r3, [pc, #184]	; (8006f74 <interrupt_WallCut+0xa7c>)
 8006ebc:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006ec0:	4b27      	ldr	r3, [pc, #156]	; (8006f60 <interrupt_WallCut+0xa68>)
 8006ec2:	edd3 7a00 	vldr	s15, [r3]
 8006ec6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8006f7c <interrupt_WallCut+0xa84>
 8006eca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ece:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006f80 <interrupt_WallCut+0xa88>
 8006ed2:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006ed6:	4b22      	ldr	r3, [pc, #136]	; (8006f60 <interrupt_WallCut+0xa68>)
 8006ed8:	ed93 7a00 	vldr	s14, [r3]
 8006edc:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT
 8006ee0:	4b22      	ldr	r3, [pc, #136]	; (8006f6c <interrupt_WallCut+0xa74>)
 8006ee2:	edc3 7a00 	vstr	s15, [r3]
 8006ee6:	e0ac      	b.n	8007042 <interrupt_WallCut+0xb4a>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006ee8:	4b1d      	ldr	r3, [pc, #116]	; (8006f60 <interrupt_WallCut+0xa68>)
 8006eea:	edd3 7a00 	vldr	s15, [r3]
 8006eee:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8006f7c <interrupt_WallCut+0xa84>
 8006ef2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ef6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006f80 <interrupt_WallCut+0xa88>
 8006efa:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006efe:	4b18      	ldr	r3, [pc, #96]	; (8006f60 <interrupt_WallCut+0xa68>)
 8006f00:	ed93 7a00 	vldr	s14, [r3]
 8006f04:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT2
 8006f08:	4b1a      	ldr	r3, [pc, #104]	; (8006f74 <interrupt_WallCut+0xa7c>)
 8006f0a:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006f0e:	4b14      	ldr	r3, [pc, #80]	; (8006f60 <interrupt_WallCut+0xa68>)
 8006f10:	edd3 7a00 	vldr	s15, [r3]
 8006f14:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006f7c <interrupt_WallCut+0xa84>
 8006f18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006f1c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006f80 <interrupt_WallCut+0xa88>
 8006f20:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006f24:	4b0e      	ldr	r3, [pc, #56]	; (8006f60 <interrupt_WallCut+0xa68>)
 8006f26:	ed93 7a00 	vldr	s14, [r3]
 8006f2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT2
 8006f2e:	4b0f      	ldr	r3, [pc, #60]	; (8006f6c <interrupt_WallCut+0xa74>)
 8006f30:	edc3 7a00 	vstr	s15, [r3]
 8006f34:	e085      	b.n	8007042 <interrupt_WallCut+0xb4a>
 8006f36:	bf00      	nop
 8006f38:	d2f1a9fc 	.word	0xd2f1a9fc
 8006f3c:	3f50624d 	.word	0x3f50624d
 8006f40:	200005cc 	.word	0x200005cc
 8006f44:	200005ec 	.word	0x200005ec
 8006f48:	20000258 	.word	0x20000258
 8006f4c:	2000025c 	.word	0x2000025c
 8006f50:	200005f4 	.word	0x200005f4
 8006f54:	200005e4 	.word	0x200005e4
 8006f58:	200004dc 	.word	0x200004dc
 8006f5c:	20000460 	.word	0x20000460
 8006f60:	20000608 	.word	0x20000608
 8006f64:	200005c8 	.word	0x200005c8
 8006f68:	200005f3 	.word	0x200005f3
 8006f6c:	200005e8 	.word	0x200005e8
 8006f70:	200005f5 	.word	0x200005f5
 8006f74:	200005e0 	.word	0x200005e0
 8006f78:	200002bc 	.word	0x200002bc
 8006f7c:	455ac000 	.word	0x455ac000
 8006f80:	00000000 	.word	0x00000000
				NoWallCountR45slant++;
 8006f84:	4b66      	ldr	r3, [pc, #408]	; (8007120 <interrupt_WallCut+0xc28>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	4a65      	ldr	r2, [pc, #404]	; (8007120 <interrupt_WallCut+0xc28>)
 8006f8c:	6013      	str	r3, [r2, #0]
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006f8e:	4b65      	ldr	r3, [pc, #404]	; (8007124 <interrupt_WallCut+0xc2c>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7f9 fb00 	bl	8000598 <__aeabi_f2d>
 8006f98:	4604      	mov	r4, r0
 8006f9a:	460d      	mov	r5, r1
 8006f9c:	4b62      	ldr	r3, [pc, #392]	; (8007128 <interrupt_WallCut+0xc30>)
 8006f9e:	ed93 7a00 	vldr	s14, [r3]
 8006fa2:	4b62      	ldr	r3, [pc, #392]	; (800712c <interrupt_WallCut+0xc34>)
 8006fa4:	edd3 7a00 	vldr	s15, [r3]
 8006fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006fac:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006fb0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006fb4:	ee16 0a90 	vmov	r0, s13
 8006fb8:	f7f9 faee 	bl	8000598 <__aeabi_f2d>
 8006fbc:	a356      	add	r3, pc, #344	; (adr r3, 8007118 <interrupt_WallCut+0xc20>)
 8006fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc2:	f7f9 fb41 	bl	8000648 <__aeabi_dmul>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	460b      	mov	r3, r1
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006fca:	4620      	mov	r0, r4
 8006fcc:	4629      	mov	r1, r5
 8006fce:	f7f9 f985 	bl	80002dc <__adddf3>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	4610      	mov	r0, r2
 8006fd8:	4619      	mov	r1, r3
 8006fda:	f7f9 fe0d 	bl	8000bf8 <__aeabi_d2f>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	4a50      	ldr	r2, [pc, #320]	; (8007124 <interrupt_WallCut+0xc2c>)
 8006fe2:	6013      	str	r3, [r2, #0]
				if (slantWallControlR_flag == 1) {
 8006fe4:	4b52      	ldr	r3, [pc, #328]	; (8007130 <interrupt_WallCut+0xc38>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d12a      	bne.n	8007042 <interrupt_WallCut+0xb4a>
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006fec:	4b51      	ldr	r3, [pc, #324]	; (8007134 <interrupt_WallCut+0xc3c>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7f9 fad1 	bl	8000598 <__aeabi_f2d>
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	460d      	mov	r5, r1
 8006ffa:	4b4b      	ldr	r3, [pc, #300]	; (8007128 <interrupt_WallCut+0xc30>)
 8006ffc:	ed93 7a00 	vldr	s14, [r3]
 8007000:	4b4a      	ldr	r3, [pc, #296]	; (800712c <interrupt_WallCut+0xc34>)
 8007002:	edd3 7a00 	vldr	s15, [r3]
 8007006:	ee77 7a27 	vadd.f32	s15, s14, s15
							/ 2*INTERRUPT_TIME;
 800700a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800700e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007012:	ee16 0a90 	vmov	r0, s13
 8007016:	f7f9 fabf 	bl	8000598 <__aeabi_f2d>
 800701a:	a33f      	add	r3, pc, #252	; (adr r3, 8007118 <interrupt_WallCut+0xc20>)
 800701c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007020:	f7f9 fb12 	bl	8000648 <__aeabi_dmul>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8007028:	4620      	mov	r0, r4
 800702a:	4629      	mov	r1, r5
 800702c:	f7f9 f956 	bl	80002dc <__adddf3>
 8007030:	4602      	mov	r2, r0
 8007032:	460b      	mov	r3, r1
 8007034:	4610      	mov	r0, r2
 8007036:	4619      	mov	r1, r3
 8007038:	f7f9 fdde 	bl	8000bf8 <__aeabi_d2f>
 800703c:	4603      	mov	r3, r0
 800703e:	4a3d      	ldr	r2, [pc, #244]	; (8007134 <interrupt_WallCut+0xc3c>)
 8007040:	6013      	str	r3, [r2, #0]
			slantWallControlR_flag = 1;
 8007042:	4b3b      	ldr	r3, [pc, #236]	; (8007130 <interrupt_WallCut+0xc38>)
 8007044:	2201      	movs	r2, #1
 8007046:	701a      	strb	r2, [r3, #0]
}
 8007048:	e05f      	b.n	800710a <interrupt_WallCut+0xc12>
		NoWallCountL90 = 0;
 800704a:	4b3b      	ldr	r3, [pc, #236]	; (8007138 <interrupt_WallCut+0xc40>)
 800704c:	2200      	movs	r2, #0
 800704e:	601a      	str	r2, [r3, #0]
		NoWallCountR90 = 0;
 8007050:	4b3a      	ldr	r3, [pc, #232]	; (800713c <interrupt_WallCut+0xc44>)
 8007052:	2200      	movs	r2, #0
 8007054:	601a      	str	r2, [r3, #0]
		NoWallCountL45 = 0;
 8007056:	4b3a      	ldr	r3, [pc, #232]	; (8007140 <interrupt_WallCut+0xc48>)
 8007058:	2200      	movs	r2, #0
 800705a:	601a      	str	r2, [r3, #0]
		NoWallCountR45 = 0;
 800705c:	4b39      	ldr	r3, [pc, #228]	; (8007144 <interrupt_WallCut+0xc4c>)
 800705e:	2200      	movs	r2, #0
 8007060:	601a      	str	r2, [r3, #0]
		NoWallCountL45slant = 0;
 8007062:	4b39      	ldr	r3, [pc, #228]	; (8007148 <interrupt_WallCut+0xc50>)
 8007064:	2200      	movs	r2, #0
 8007066:	601a      	str	r2, [r3, #0]
		NoWallCountR45slant = 0;
 8007068:	4b2d      	ldr	r3, [pc, #180]	; (8007120 <interrupt_WallCut+0xc28>)
 800706a:	2200      	movs	r2, #0
 800706c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL90 = 0;
 800706e:	4b37      	ldr	r3, [pc, #220]	; (800714c <interrupt_WallCut+0xc54>)
 8007070:	f04f 0200 	mov.w	r2, #0
 8007074:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR90 = 0;
 8007076:	4b36      	ldr	r3, [pc, #216]	; (8007150 <interrupt_WallCut+0xc58>)
 8007078:	f04f 0200 	mov.w	r2, #0
 800707c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 800707e:	4b35      	ldr	r3, [pc, #212]	; (8007154 <interrupt_WallCut+0xc5c>)
 8007080:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8007084:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 8007086:	4b34      	ldr	r3, [pc, #208]	; (8007158 <interrupt_WallCut+0xc60>)
 8007088:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 800708c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant = 0;
 800708e:	4b33      	ldr	r3, [pc, #204]	; (800715c <interrupt_WallCut+0xc64>)
 8007090:	f04f 0200 	mov.w	r2, #0
 8007094:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant = 0;
 8007096:	4b27      	ldr	r3, [pc, #156]	; (8007134 <interrupt_WallCut+0xc3c>)
 8007098:	f04f 0200 	mov.w	r2, #0
 800709c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant2 = 0;			//単純な壁切れ用
 800709e:	4b30      	ldr	r3, [pc, #192]	; (8007160 <interrupt_WallCut+0xc68>)
 80070a0:	f04f 0200 	mov.w	r2, #0
 80070a4:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant2 = 0;			//単純な壁切れ用
 80070a6:	4b1f      	ldr	r3, [pc, #124]	; (8007124 <interrupt_WallCut+0xc2c>)
 80070a8:	f04f 0200 	mov.w	r2, #0
 80070ac:	601a      	str	r2, [r3, #0]
		NoWallCountL45_flag = 0;
 80070ae:	4b2d      	ldr	r3, [pc, #180]	; (8007164 <interrupt_WallCut+0xc6c>)
 80070b0:	2200      	movs	r2, #0
 80070b2:	701a      	strb	r2, [r3, #0]
		NoWallCountR45_flag = 0;
 80070b4:	4b2c      	ldr	r3, [pc, #176]	; (8007168 <interrupt_WallCut+0xc70>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	701a      	strb	r2, [r3, #0]
		NoWallCountL45slant_flag = 0;
 80070ba:	4b2c      	ldr	r3, [pc, #176]	; (800716c <interrupt_WallCut+0xc74>)
 80070bc:	2200      	movs	r2, #0
 80070be:	701a      	strb	r2, [r3, #0]
		NoWallCountR45slant_flag = 0;
 80070c0:	4b2b      	ldr	r3, [pc, #172]	; (8007170 <interrupt_WallCut+0xc78>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	701a      	strb	r2, [r3, #0]
		slantWallControlL_flag = 0;
 80070c6:	4b2b      	ldr	r3, [pc, #172]	; (8007174 <interrupt_WallCut+0xc7c>)
 80070c8:	2200      	movs	r2, #0
 80070ca:	701a      	strb	r2, [r3, #0]
		slantWallControlR_flag = 0;
 80070cc:	4b18      	ldr	r3, [pc, #96]	; (8007130 <interrupt_WallCut+0xc38>)
 80070ce:	2200      	movs	r2, #0
 80070d0:	701a      	strb	r2, [r3, #0]
		front_wall_break_90 = 0;
 80070d2:	4b29      	ldr	r3, [pc, #164]	; (8007178 <interrupt_WallCut+0xc80>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	701a      	strb	r2, [r3, #0]
		front_wall_break_45 = 0;
 80070d8:	4b28      	ldr	r3, [pc, #160]	; (800717c <interrupt_WallCut+0xc84>)
 80070da:	2200      	movs	r2, #0
 80070dc:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 80070de:	4b28      	ldr	r3, [pc, #160]	; (8007180 <interrupt_WallCut+0xc88>)
 80070e0:	2200      	movs	r2, #0
 80070e2:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 80070e4:	4b26      	ldr	r3, [pc, #152]	; (8007180 <interrupt_WallCut+0xc88>)
 80070e6:	2200      	movs	r2, #0
 80070e8:	701a      	strb	r2, [r3, #0]
		g_sensor_max_fl = 0;
 80070ea:	4b26      	ldr	r3, [pc, #152]	; (8007184 <interrupt_WallCut+0xc8c>)
 80070ec:	f04f 0200 	mov.w	r2, #0
 80070f0:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr = 0;
 80070f2:	4b25      	ldr	r3, [pc, #148]	; (8007188 <interrupt_WallCut+0xc90>)
 80070f4:	f04f 0200 	mov.w	r2, #0
 80070f8:	601a      	str	r2, [r3, #0]
		g_sensor_max_fl_slant = 0;
 80070fa:	4b24      	ldr	r3, [pc, #144]	; (800718c <interrupt_WallCut+0xc94>)
 80070fc:	f04f 0200 	mov.w	r2, #0
 8007100:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr_slant = 0;
 8007102:	4b23      	ldr	r3, [pc, #140]	; (8007190 <interrupt_WallCut+0xc98>)
 8007104:	f04f 0200 	mov.w	r2, #0
 8007108:	601a      	str	r2, [r3, #0]
}
 800710a:	bf00      	nop
 800710c:	3718      	adds	r7, #24
 800710e:	46bd      	mov	sp, r7
 8007110:	bdb0      	pop	{r4, r5, r7, pc}
 8007112:	bf00      	nop
 8007114:	f3af 8000 	nop.w
 8007118:	d2f1a9fc 	.word	0xd2f1a9fc
 800711c:	3f50624d 	.word	0x3f50624d
 8007120:	200005c8 	.word	0x200005c8
 8007124:	200005e8 	.word	0x200005e8
 8007128:	20000258 	.word	0x20000258
 800712c:	2000025c 	.word	0x2000025c
 8007130:	200005f5 	.word	0x200005f5
 8007134:	200005e0 	.word	0x200005e0
 8007138:	200005bc 	.word	0x200005bc
 800713c:	200005b8 	.word	0x200005b8
 8007140:	200005c4 	.word	0x200005c4
 8007144:	200005c0 	.word	0x200005c0
 8007148:	200005cc 	.word	0x200005cc
 800714c:	200005d4 	.word	0x200005d4
 8007150:	200005d0 	.word	0x200005d0
 8007154:	200005dc 	.word	0x200005dc
 8007158:	200005d8 	.word	0x200005d8
 800715c:	200005e4 	.word	0x200005e4
 8007160:	200005ec 	.word	0x200005ec
 8007164:	200005f0 	.word	0x200005f0
 8007168:	200005f1 	.word	0x200005f1
 800716c:	200005f2 	.word	0x200005f2
 8007170:	200005f3 	.word	0x200005f3
 8007174:	200005f4 	.word	0x200005f4
 8007178:	200005f6 	.word	0x200005f6
 800717c:	200005f7 	.word	0x200005f7
 8007180:	200005f8 	.word	0x200005f8
 8007184:	200005fc 	.word	0x200005fc
 8007188:	20000600 	.word	0x20000600
 800718c:	20000604 	.word	0x20000604
 8007190:	20000608 	.word	0x20000608

08007194 <pl_yellow_LED_1>:
#include "gpio.h"
#include "main.h"



void pl_yellow_LED_1(int pin){
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,pin);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	461a      	mov	r2, r3
 80071a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80071a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80071aa:	f014 fe4b 	bl	801be44 <HAL_GPIO_WritePin>
}
 80071ae:	bf00      	nop
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
	...

080071b8 <pl_yellow_LED_3>:
void pl_yellow_LED_2(int pin){
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,pin);
}
void pl_yellow_LED_3(int pin){
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,pin);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	461a      	mov	r2, r3
 80071c6:	2140      	movs	r1, #64	; 0x40
 80071c8:	4803      	ldr	r0, [pc, #12]	; (80071d8 <pl_yellow_LED_3+0x20>)
 80071ca:	f014 fe3b 	bl	801be44 <HAL_GPIO_WritePin>
}
 80071ce:	bf00      	nop
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	48000800 	.word	0x48000800

080071dc <pl_yellow_LED_6>:
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,pin);
}
void pl_yellow_LED_5(int pin){
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,pin);
}
void pl_yellow_LED_6(int pin){
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,pin);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	461a      	mov	r2, r3
 80071ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80071ee:	4803      	ldr	r0, [pc, #12]	; (80071fc <pl_yellow_LED_6+0x20>)
 80071f0:	f014 fe28 	bl	801be44 <HAL_GPIO_WritePin>
}
 80071f4:	bf00      	nop
 80071f6:	3708      	adds	r7, #8
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	48000400 	.word	0x48000400

08007200 <pl_yellow_LED_8>:
void pl_yellow_LED_7(int pin){
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,pin);
}
void pl_yellow_LED_8(int pin){
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,pin);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	b2db      	uxtb	r3, r3
 800720c:	461a      	mov	r2, r3
 800720e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007212:	4803      	ldr	r0, [pc, #12]	; (8007220 <pl_yellow_LED_8+0x20>)
 8007214:	f014 fe16 	bl	801be44 <HAL_GPIO_WritePin>
}
 8007218:	bf00      	nop
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	48000400 	.word	0x48000400

08007224 <pl_yellow_LED_off>:




void pl_yellow_LED_off(void){
 8007224:	b580      	push	{r7, lr}
 8007226:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8007228:	2200      	movs	r2, #0
 800722a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800722e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007232:	f014 fe07 	bl	801be44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8007236:	2200      	movs	r2, #0
 8007238:	f44f 7180 	mov.w	r1, #256	; 0x100
 800723c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007240:	f014 fe00 	bl	801be44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8007244:	2200      	movs	r2, #0
 8007246:	2140      	movs	r1, #64	; 0x40
 8007248:	4811      	ldr	r0, [pc, #68]	; (8007290 <pl_yellow_LED_off+0x6c>)
 800724a:	f014 fdfb 	bl	801be44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 800724e:	2200      	movs	r2, #0
 8007250:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007254:	480f      	ldr	r0, [pc, #60]	; (8007294 <pl_yellow_LED_off+0x70>)
 8007256:	f014 fdf5 	bl	801be44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 800725a:	2200      	movs	r2, #0
 800725c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007260:	480c      	ldr	r0, [pc, #48]	; (8007294 <pl_yellow_LED_off+0x70>)
 8007262:	f014 fdef 	bl	801be44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8007266:	2200      	movs	r2, #0
 8007268:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800726c:	4809      	ldr	r0, [pc, #36]	; (8007294 <pl_yellow_LED_off+0x70>)
 800726e:	f014 fde9 	bl	801be44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8007272:	2200      	movs	r2, #0
 8007274:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007278:	4806      	ldr	r0, [pc, #24]	; (8007294 <pl_yellow_LED_off+0x70>)
 800727a:	f014 fde3 	bl	801be44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 800727e:	2200      	movs	r2, #0
 8007280:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007284:	4803      	ldr	r0, [pc, #12]	; (8007294 <pl_yellow_LED_off+0x70>)
 8007286:	f014 fddd 	bl	801be44 <HAL_GPIO_WritePin>
}
 800728a:	bf00      	nop
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	48000800 	.word	0x48000800
 8007294:	48000400 	.word	0x48000400

08007298 <pl_yellow_LED_count>:
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
}


void pl_yellow_LED_count(unsigned char yy){
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	4603      	mov	r3, r0
 80072a0:	71fb      	strb	r3, [r7, #7]

unsigned char yy1,yy2,yy3,yy4,yy5,yy6,yy7,yy8;

yy1 = yy & 1;
 80072a2:	79fb      	ldrb	r3, [r7, #7]
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	73fb      	strb	r3, [r7, #15]
yy2 = yy & 2;
 80072aa:	79fb      	ldrb	r3, [r7, #7]
 80072ac:	f003 0302 	and.w	r3, r3, #2
 80072b0:	73bb      	strb	r3, [r7, #14]
yy3 = yy & 4;
 80072b2:	79fb      	ldrb	r3, [r7, #7]
 80072b4:	f003 0304 	and.w	r3, r3, #4
 80072b8:	737b      	strb	r3, [r7, #13]
yy4 = yy & 8;
 80072ba:	79fb      	ldrb	r3, [r7, #7]
 80072bc:	f003 0308 	and.w	r3, r3, #8
 80072c0:	733b      	strb	r3, [r7, #12]
yy5 = yy & 16;
 80072c2:	79fb      	ldrb	r3, [r7, #7]
 80072c4:	f003 0310 	and.w	r3, r3, #16
 80072c8:	72fb      	strb	r3, [r7, #11]
yy6 = yy & 32;
 80072ca:	79fb      	ldrb	r3, [r7, #7]
 80072cc:	f003 0320 	and.w	r3, r3, #32
 80072d0:	72bb      	strb	r3, [r7, #10]
yy7 = yy & 64;
 80072d2:	79fb      	ldrb	r3, [r7, #7]
 80072d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d8:	727b      	strb	r3, [r7, #9]
yy8 = yy & 128;
 80072da:	79fb      	ldrb	r3, [r7, #7]
 80072dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072e0:	723b      	strb	r3, [r7, #8]

if(yy1 >= 1){
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d007      	beq.n	80072f8 <pl_yellow_LED_count+0x60>
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 80072e8:	2201      	movs	r2, #1
 80072ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80072ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80072f2:	f014 fda7 	bl	801be44 <HAL_GPIO_WritePin>
 80072f6:	e006      	b.n	8007306 <pl_yellow_LED_count+0x6e>
}else{
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 80072f8:	2200      	movs	r2, #0
 80072fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80072fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007302:	f014 fd9f 	bl	801be44 <HAL_GPIO_WritePin>
}
if(yy2 >= 1){
 8007306:	7bbb      	ldrb	r3, [r7, #14]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d007      	beq.n	800731c <pl_yellow_LED_count+0x84>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 800730c:	2201      	movs	r2, #1
 800730e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007316:	f014 fd95 	bl	801be44 <HAL_GPIO_WritePin>
 800731a:	e006      	b.n	800732a <pl_yellow_LED_count+0x92>
}
else{
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 800731c:	2200      	movs	r2, #0
 800731e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007326:	f014 fd8d 	bl	801be44 <HAL_GPIO_WritePin>
}
if(yy3 >= 1){
 800732a:	7b7b      	ldrb	r3, [r7, #13]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d005      	beq.n	800733c <pl_yellow_LED_count+0xa4>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 8007330:	2201      	movs	r2, #1
 8007332:	2140      	movs	r1, #64	; 0x40
 8007334:	482e      	ldr	r0, [pc, #184]	; (80073f0 <pl_yellow_LED_count+0x158>)
 8007336:	f014 fd85 	bl	801be44 <HAL_GPIO_WritePin>
 800733a:	e004      	b.n	8007346 <pl_yellow_LED_count+0xae>
}else{
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 800733c:	2200      	movs	r2, #0
 800733e:	2140      	movs	r1, #64	; 0x40
 8007340:	482b      	ldr	r0, [pc, #172]	; (80073f0 <pl_yellow_LED_count+0x158>)
 8007342:	f014 fd7f 	bl	801be44 <HAL_GPIO_WritePin>
}
if(yy4 >= 1){
 8007346:	7b3b      	ldrb	r3, [r7, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d006      	beq.n	800735a <pl_yellow_LED_count+0xc2>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 800734c:	2201      	movs	r2, #1
 800734e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007352:	4828      	ldr	r0, [pc, #160]	; (80073f4 <pl_yellow_LED_count+0x15c>)
 8007354:	f014 fd76 	bl	801be44 <HAL_GPIO_WritePin>
 8007358:	e005      	b.n	8007366 <pl_yellow_LED_count+0xce>
}else{
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 800735a:	2200      	movs	r2, #0
 800735c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007360:	4824      	ldr	r0, [pc, #144]	; (80073f4 <pl_yellow_LED_count+0x15c>)
 8007362:	f014 fd6f 	bl	801be44 <HAL_GPIO_WritePin>
}
if(yy5 >= 1){
 8007366:	7afb      	ldrb	r3, [r7, #11]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d006      	beq.n	800737a <pl_yellow_LED_count+0xe2>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_SET);
 800736c:	2201      	movs	r2, #1
 800736e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007372:	4820      	ldr	r0, [pc, #128]	; (80073f4 <pl_yellow_LED_count+0x15c>)
 8007374:	f014 fd66 	bl	801be44 <HAL_GPIO_WritePin>
 8007378:	e005      	b.n	8007386 <pl_yellow_LED_count+0xee>
}else{
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 800737a:	2200      	movs	r2, #0
 800737c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007380:	481c      	ldr	r0, [pc, #112]	; (80073f4 <pl_yellow_LED_count+0x15c>)
 8007382:	f014 fd5f 	bl	801be44 <HAL_GPIO_WritePin>
}
if(yy6 >= 1){
 8007386:	7abb      	ldrb	r3, [r7, #10]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d006      	beq.n	800739a <pl_yellow_LED_count+0x102>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_SET);
 800738c:	2201      	movs	r2, #1
 800738e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007392:	4818      	ldr	r0, [pc, #96]	; (80073f4 <pl_yellow_LED_count+0x15c>)
 8007394:	f014 fd56 	bl	801be44 <HAL_GPIO_WritePin>
 8007398:	e005      	b.n	80073a6 <pl_yellow_LED_count+0x10e>
}else{
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 800739a:	2200      	movs	r2, #0
 800739c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80073a0:	4814      	ldr	r0, [pc, #80]	; (80073f4 <pl_yellow_LED_count+0x15c>)
 80073a2:	f014 fd4f 	bl	801be44 <HAL_GPIO_WritePin>
}
if(yy7 >= 1){
 80073a6:	7a7b      	ldrb	r3, [r7, #9]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d006      	beq.n	80073ba <pl_yellow_LED_count+0x122>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
 80073ac:	2201      	movs	r2, #1
 80073ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80073b2:	4810      	ldr	r0, [pc, #64]	; (80073f4 <pl_yellow_LED_count+0x15c>)
 80073b4:	f014 fd46 	bl	801be44 <HAL_GPIO_WritePin>
 80073b8:	e005      	b.n	80073c6 <pl_yellow_LED_count+0x12e>
}else{
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 80073ba:	2200      	movs	r2, #0
 80073bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80073c0:	480c      	ldr	r0, [pc, #48]	; (80073f4 <pl_yellow_LED_count+0x15c>)
 80073c2:	f014 fd3f 	bl	801be44 <HAL_GPIO_WritePin>
}
if(yy8 >= 1){
 80073c6:	7a3b      	ldrb	r3, [r7, #8]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d006      	beq.n	80073da <pl_yellow_LED_count+0x142>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
 80073cc:	2201      	movs	r2, #1
 80073ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80073d2:	4808      	ldr	r0, [pc, #32]	; (80073f4 <pl_yellow_LED_count+0x15c>)
 80073d4:	f014 fd36 	bl	801be44 <HAL_GPIO_WritePin>
}else{
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
}
}
 80073d8:	e005      	b.n	80073e6 <pl_yellow_LED_count+0x14e>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 80073da:	2200      	movs	r2, #0
 80073dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80073e0:	4804      	ldr	r0, [pc, #16]	; (80073f4 <pl_yellow_LED_count+0x15c>)
 80073e2:	f014 fd2f 	bl	801be44 <HAL_GPIO_WritePin>
}
 80073e6:	bf00      	nop
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	48000800 	.word	0x48000800
 80073f4:	48000400 	.word	0x48000400

080073f8 <pl_r_blue_LED>:


void pl_r_blue_LED(int pin){
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_R_LED_GPIO_Port,BLUE_R_LED_Pin,pin);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	b2db      	uxtb	r3, r3
 8007404:	461a      	mov	r2, r3
 8007406:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800740a:	4803      	ldr	r0, [pc, #12]	; (8007418 <pl_r_blue_LED+0x20>)
 800740c:	f014 fd1a 	bl	801be44 <HAL_GPIO_WritePin>
}
 8007410:	bf00      	nop
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	48000800 	.word	0x48000800

0800741c <pl_l_blue_LED>:

void pl_l_blue_LED(int pin){
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_L_LED_GPIO_Port,BLUE_L_LED_Pin,pin);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	b2db      	uxtb	r3, r3
 8007428:	461a      	mov	r2, r3
 800742a:	2104      	movs	r1, #4
 800742c:	4803      	ldr	r0, [pc, #12]	; (800743c <pl_l_blue_LED+0x20>)
 800742e:	f014 fd09 	bl	801be44 <HAL_GPIO_WritePin>
}
 8007432:	bf00      	nop
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	48000400 	.word	0x48000400

08007440 <encoder_read_byte_R>:
#include "spi.h"
#include <stdio.h>

float encoder_R,encoder_L;

uint16_t encoder_read_byte_R(uint16_t address,uint16_t data){
 8007440:	b580      	push	{r7, lr}
 8007442:	b088      	sub	sp, #32
 8007444:	af00      	add	r7, sp, #0
 8007446:	4603      	mov	r3, r0
 8007448:	460a      	mov	r2, r1
 800744a:	80fb      	strh	r3, [r7, #6]
 800744c:	4613      	mov	r3, r2
 800744e:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007450:	2200      	movs	r2, #0
 8007452:	2110      	movs	r1, #16
 8007454:	4833      	ldr	r0, [pc, #204]	; (8007524 <encoder_read_byte_R+0xe4>)
 8007456:	f014 fcf5 	bl	801be44 <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 800745a:	88fb      	ldrh	r3, [r7, #6]
 800745c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007460:	80fb      	strh	r3, [r7, #6]
	parity=0;
 8007462:	2300      	movs	r3, #0
 8007464:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 8007466:	2300      	movs	r3, #0
 8007468:	61bb      	str	r3, [r7, #24]
 800746a:	e00d      	b.n	8007488 <encoder_read_byte_R+0x48>
 800746c:	88fa      	ldrh	r2, [r7, #6]
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	fa42 f303 	asr.w	r3, r2, r3
 8007474:	b29b      	uxth	r3, r3
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	b29a      	uxth	r2, r3
 800747c:	8bfb      	ldrh	r3, [r7, #30]
 800747e:	4413      	add	r3, r2
 8007480:	83fb      	strh	r3, [r7, #30]
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	3301      	adds	r3, #1
 8007486:	61bb      	str	r3, [r7, #24]
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	2b0e      	cmp	r3, #14
 800748c:	ddee      	ble.n	800746c <encoder_read_byte_R+0x2c>
	address = address | ((parity % 2) << 15);
 800748e:	8bfb      	ldrh	r3, [r7, #30]
 8007490:	03db      	lsls	r3, r3, #15
 8007492:	b21a      	sxth	r2, r3
 8007494:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007498:	4313      	orrs	r3, r2
 800749a:	b21b      	sxth	r3, r3
 800749c:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 800749e:	88fb      	ldrh	r3, [r7, #6]
 80074a0:	0a1b      	lsrs	r3, r3, #8
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 80074a8:	88fb      	ldrh	r3, [r7, #6]
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	747b      	strb	r3, [r7, #17]


	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 80074ae:	f107 0110 	add.w	r1, r7, #16
 80074b2:	2364      	movs	r3, #100	; 0x64
 80074b4:	2202      	movs	r2, #2
 80074b6:	481c      	ldr	r0, [pc, #112]	; (8007528 <encoder_read_byte_R+0xe8>)
 80074b8:	f015 fda7 	bl	801d00a <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi3, address, 2, 100);

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 80074bc:	2201      	movs	r2, #1
 80074be:	2110      	movs	r1, #16
 80074c0:	4818      	ldr	r0, [pc, #96]	; (8007524 <encoder_read_byte_R+0xe4>)
 80074c2:	f014 fcbf 	bl	801be44 <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 80074c6:	2300      	movs	r3, #0
 80074c8:	617b      	str	r3, [r7, #20]
 80074ca:	e002      	b.n	80074d2 <encoder_read_byte_R+0x92>
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	3301      	adds	r3, #1
 80074d0:	617b      	str	r3, [r7, #20]
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	2b95      	cmp	r3, #149	; 0x95
 80074d6:	ddf9      	ble.n	80074cc <encoder_read_byte_R+0x8c>

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 80074d8:	2200      	movs	r2, #0
 80074da:	2110      	movs	r1, #16
 80074dc:	4811      	ldr	r0, [pc, #68]	; (8007524 <encoder_read_byte_R+0xe4>)
 80074de:	f014 fcb1 	bl	801be44 <HAL_GPIO_WritePin>

//	data=0xC000;
	dataBuffer[0]=data>>8;
 80074e2:	88bb      	ldrh	r3, [r7, #4]
 80074e4:	0a1b      	lsrs	r3, r3, #8
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 80074ec:	88bb      	ldrh	r3, [r7, #4]
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 80074f2:	f107 010c 	add.w	r1, r7, #12
 80074f6:	2364      	movs	r3, #100	; 0x64
 80074f8:	2202      	movs	r2, #2
 80074fa:	480b      	ldr	r0, [pc, #44]	; (8007528 <encoder_read_byte_R+0xe8>)
 80074fc:	f015 fef3 	bl	801d2e6 <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8007500:	7b3b      	ldrb	r3, [r7, #12]
 8007502:	021b      	lsls	r3, r3, #8
 8007504:	b21a      	sxth	r2, r3
 8007506:	7b7b      	ldrb	r3, [r7, #13]
 8007508:	b21b      	sxth	r3, r3
 800750a:	4313      	orrs	r3, r2
 800750c:	b21b      	sxth	r3, r3
 800750e:	80bb      	strh	r3, [r7, #4]
//	HAL_SPI_Transmit(&hspi3, data, 2, 100);
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007510:	2201      	movs	r2, #1
 8007512:	2110      	movs	r1, #16
 8007514:	4803      	ldr	r0, [pc, #12]	; (8007524 <encoder_read_byte_R+0xe4>)
 8007516:	f014 fc95 	bl	801be44 <HAL_GPIO_WritePin>

	return data;
 800751a:	88bb      	ldrh	r3, [r7, #4]

}
 800751c:	4618      	mov	r0, r3
 800751e:	3720      	adds	r7, #32
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	48000400 	.word	0x48000400
 8007528:	2000ee38 	.word	0x2000ee38

0800752c <encoder_read_byte_L>:
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;

}


uint16_t encoder_read_byte_L(uint16_t address,uint16_t data){
 800752c:	b580      	push	{r7, lr}
 800752e:	b088      	sub	sp, #32
 8007530:	af00      	add	r7, sp, #0
 8007532:	4603      	mov	r3, r0
 8007534:	460a      	mov	r2, r1
 8007536:	80fb      	strh	r3, [r7, #6]
 8007538:	4613      	mov	r3, r2
 800753a:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 800753c:	2200      	movs	r2, #0
 800753e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007546:	f014 fc7d 	bl	801be44 <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 800754a:	88fb      	ldrh	r3, [r7, #6]
 800754c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007550:	80fb      	strh	r3, [r7, #6]
	parity=0;
 8007552:	2300      	movs	r3, #0
 8007554:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 8007556:	2300      	movs	r3, #0
 8007558:	61bb      	str	r3, [r7, #24]
 800755a:	e00d      	b.n	8007578 <encoder_read_byte_L+0x4c>
 800755c:	88fa      	ldrh	r2, [r7, #6]
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	fa42 f303 	asr.w	r3, r2, r3
 8007564:	b29b      	uxth	r3, r3
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	b29a      	uxth	r2, r3
 800756c:	8bfb      	ldrh	r3, [r7, #30]
 800756e:	4413      	add	r3, r2
 8007570:	83fb      	strh	r3, [r7, #30]
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	3301      	adds	r3, #1
 8007576:	61bb      	str	r3, [r7, #24]
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	2b0e      	cmp	r3, #14
 800757c:	ddee      	ble.n	800755c <encoder_read_byte_L+0x30>
	address = address | ((parity % 2) << 15);
 800757e:	8bfb      	ldrh	r3, [r7, #30]
 8007580:	03db      	lsls	r3, r3, #15
 8007582:	b21a      	sxth	r2, r3
 8007584:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007588:	4313      	orrs	r3, r2
 800758a:	b21b      	sxth	r3, r3
 800758c:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 800758e:	88fb      	ldrh	r3, [r7, #6]
 8007590:	0a1b      	lsrs	r3, r3, #8
 8007592:	b29b      	uxth	r3, r3
 8007594:	b2db      	uxtb	r3, r3
 8007596:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 8007598:	88fb      	ldrh	r3, [r7, #6]
 800759a:	b2db      	uxtb	r3, r3
 800759c:	747b      	strb	r3, [r7, #17]

	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 800759e:	f107 0110 	add.w	r1, r7, #16
 80075a2:	2364      	movs	r3, #100	; 0x64
 80075a4:	2202      	movs	r2, #2
 80075a6:	481e      	ldr	r0, [pc, #120]	; (8007620 <encoder_read_byte_L+0xf4>)
 80075a8:	f015 fd2f 	bl	801d00a <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 80075ac:	2201      	movs	r2, #1
 80075ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80075b6:	f014 fc45 	bl	801be44 <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 80075ba:	2300      	movs	r3, #0
 80075bc:	617b      	str	r3, [r7, #20]
 80075be:	e002      	b.n	80075c6 <encoder_read_byte_L+0x9a>
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	3301      	adds	r3, #1
 80075c4:	617b      	str	r3, [r7, #20]
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	2b95      	cmp	r3, #149	; 0x95
 80075ca:	ddf9      	ble.n	80075c0 <encoder_read_byte_L+0x94>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 80075cc:	2200      	movs	r2, #0
 80075ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80075d6:	f014 fc35 	bl	801be44 <HAL_GPIO_WritePin>

//	data=0x0000;
	dataBuffer[0]=data>>8;
 80075da:	88bb      	ldrh	r3, [r7, #4]
 80075dc:	0a1b      	lsrs	r3, r3, #8
 80075de:	b29b      	uxth	r3, r3
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 80075e4:	88bb      	ldrh	r3, [r7, #4]
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 80075ea:	f107 010c 	add.w	r1, r7, #12
 80075ee:	2364      	movs	r3, #100	; 0x64
 80075f0:	2202      	movs	r2, #2
 80075f2:	480b      	ldr	r0, [pc, #44]	; (8007620 <encoder_read_byte_L+0xf4>)
 80075f4:	f015 fe77 	bl	801d2e6 <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 80075f8:	7b3b      	ldrb	r3, [r7, #12]
 80075fa:	021b      	lsls	r3, r3, #8
 80075fc:	b21a      	sxth	r2, r3
 80075fe:	7b7b      	ldrb	r3, [r7, #13]
 8007600:	b21b      	sxth	r3, r3
 8007602:	4313      	orrs	r3, r2
 8007604:	b21b      	sxth	r3, r3
 8007606:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007608:	2201      	movs	r2, #1
 800760a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800760e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007612:	f014 fc17 	bl	801be44 <HAL_GPIO_WritePin>

	return data;
 8007616:	88bb      	ldrh	r3, [r7, #4]

}
 8007618:	4618      	mov	r0, r3
 800761a:	3720      	adds	r7, #32
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	2000ee38 	.word	0x2000ee38

08007624 <AS5047_DataUpdate>:

}



void AS5047_DataUpdate(void){
 8007624:	b580      	push	{r7, lr}
 8007626:	af00      	add	r7, sp, #0

		//encoder_read_byte_L(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_R=(float)(encoder_read_byte_R(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 8007628:	2100      	movs	r1, #0
 800762a:	f643 70ff 	movw	r0, #16383	; 0x3fff
 800762e:	f7ff ff07 	bl	8007440 <encoder_read_byte_R>
 8007632:	4603      	mov	r3, r0
 8007634:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007638:	ee07 3a90 	vmov	s15, r3
 800763c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007640:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8007688 <AS5047_DataUpdate+0x64>
 8007644:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007648:	eddf 6a10 	vldr	s13, [pc, #64]	; 800768c <AS5047_DataUpdate+0x68>
 800764c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007650:	4b0f      	ldr	r3, [pc, #60]	; (8007690 <AS5047_DataUpdate+0x6c>)
 8007652:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(500);

		//encoder_read_byte_R(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_L=(float)(encoder_read_byte_L(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 8007656:	2100      	movs	r1, #0
 8007658:	f643 70ff 	movw	r0, #16383	; 0x3fff
 800765c:	f7ff ff66 	bl	800752c <encoder_read_byte_L>
 8007660:	4603      	mov	r3, r0
 8007662:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007666:	ee07 3a90 	vmov	s15, r3
 800766a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800766e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8007688 <AS5047_DataUpdate+0x64>
 8007672:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007676:	eddf 6a05 	vldr	s13, [pc, #20]	; 800768c <AS5047_DataUpdate+0x68>
 800767a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800767e:	4b05      	ldr	r3, [pc, #20]	; (8007694 <AS5047_DataUpdate+0x70>)
 8007680:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(5);

}
 8007684:	bf00      	nop
 8007686:	bd80      	pop	{r7, pc}
 8007688:	43b40000 	.word	0x43b40000
 800768c:	46800000 	.word	0x46800000
 8007690:	200006dc 	.word	0x200006dc
 8007694:	200006e0 	.word	0x200006e0

08007698 <test_flash>:


const uint32_t start_address = 0x807F000; //bank1 page last start address
const uint32_t end_adress = 0x807FFFF; // bank1 page last end address

void test_flash(void){
 8007698:	b580      	push	{r7, lr}
 800769a:	af00      	add	r7, sp, #0
		  record_out();
 800769c:	f000 f91a 	bl	80078d4 <record_out>
		  maze_display();
 80076a0:	f00d fa06 	bl	8014ab0 <maze_display>
		  flash_record_init();
 80076a4:	f000 f9c2 	bl	8007a2c <flash_record_init>
		  record_in();
 80076a8:	f000 f858 	bl	800775c <record_in>
}
 80076ac:	bf00      	nop
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <eraseFlash>:


void eraseFlash( void )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_PAGES;	// select page
 80076b6:	2300      	movs	r3, #0
 80076b8:	60bb      	str	r3, [r7, #8]
	erase.Banks = FLASH_BANK_1;		       // set bank1
 80076ba:	2301      	movs	r3, #1
 80076bc:	60fb      	str	r3, [r7, #12]
	erase.Page = 254;// set page254(127)
 80076be:	23fe      	movs	r3, #254	; 0xfe
 80076c0:	613b      	str	r3, [r7, #16]
	erase.NbPages = 1;//delete page
 80076c2:	2301      	movs	r3, #1
 80076c4:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 80076c6:	2300      	movs	r3, #0
 80076c8:	607b      	str	r3, [r7, #4]

	HAL_FLASHEx_Erase(&erase, &pageError);	// erase sector
 80076ca:	1d3a      	adds	r2, r7, #4
 80076cc:	f107 0308 	add.w	r3, r7, #8
 80076d0:	4611      	mov	r1, r2
 80076d2:	4618      	mov	r0, r3
 80076d4:	f014 f90e 	bl	801b8f4 <HAL_FLASHEx_Erase>

//	for (int i=0;i<10;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 80076d8:	bf00      	nop
 80076da:	3718      	adds	r7, #24
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <writeFlash>:


void writeFlash(uint32_t address, uint64_t *data, uint32_t size,uint8_t erasemode)
{
 80076e0:	b5b0      	push	{r4, r5, r7, lr}
 80076e2:	b086      	sub	sp, #24
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
 80076ec:	70fb      	strb	r3, [r7, #3]
	HAL_FLASH_Unlock();		// unlock flash
 80076ee:	f014 f815 	bl	801b71c <HAL_FLASH_Unlock>
	if(erasemode==1){eraseFlash();}
 80076f2:	78fb      	ldrb	r3, [r7, #3]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d101      	bne.n	80076fc <writeFlash+0x1c>
 80076f8:	f7ff ffda 	bl	80076b0 <eraseFlash>

	for ( uint32_t add = address; add < (address + size); add+=8 ){
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	617b      	str	r3, [r7, #20]
 8007700:	e00f      	b.n	8007722 <writeFlash+0x42>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, add, (uint64_t *)data); // write byte
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	17da      	asrs	r2, r3, #31
 8007706:	461c      	mov	r4, r3
 8007708:	4615      	mov	r5, r2
 800770a:	4622      	mov	r2, r4
 800770c:	462b      	mov	r3, r5
 800770e:	6979      	ldr	r1, [r7, #20]
 8007710:	2000      	movs	r0, #0
 8007712:	f013 ffad 	bl	801b670 <HAL_FLASH_Program>
		data=data+4;  // add data pointer
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	3320      	adds	r3, #32
 800771a:	60bb      	str	r3, [r7, #8]
	for ( uint32_t add = address; add < (address + size); add+=8 ){
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	3308      	adds	r3, #8
 8007720:	617b      	str	r3, [r7, #20]
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4413      	add	r3, r2
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	429a      	cmp	r2, r3
 800772c:	d3e9      	bcc.n	8007702 <writeFlash+0x22>
	}

	HAL_FLASH_Lock();		// lock flash
 800772e:	f014 f817 	bl	801b760 <HAL_FLASH_Lock>

}
 8007732:	bf00      	nop
 8007734:	3718      	adds	r7, #24
 8007736:	46bd      	mov	sp, r7
 8007738:	bdb0      	pop	{r4, r5, r7, pc}

0800773a <loadFlash>:

void loadFlash(uint32_t address, uint64_t *data, uint32_t size )
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b084      	sub	sp, #16
 800773e:	af00      	add	r7, sp, #0
 8007740:	60f8      	str	r0, [r7, #12]
 8007742:	60b9      	str	r1, [r7, #8]
 8007744:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*)address,size); // copy data
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	4619      	mov	r1, r3
 800774c:	68b8      	ldr	r0, [r7, #8]
 800774e:	f018 fc8f 	bl	8020070 <memcpy>

}
 8007752:	bf00      	nop
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
	...

0800775c <record_in>:


void record_in(void) {
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
	int t = 0;
 8007762:	2300      	movs	r3, #0
 8007764:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 8007766:	4b58      	ldr	r3, [pc, #352]	; (80078c8 <record_in+0x16c>)
 8007768:	603b      	str	r3, [r7, #0]

	while (t <= 14) {
 800776a:	e017      	b.n	800779c <record_in+0x40>
		record.row[t] = wall.row[t];
 800776c:	4a57      	ldr	r2, [pc, #348]	; (80078cc <record_in+0x170>)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8007774:	4a56      	ldr	r2, [pc, #344]	; (80078d0 <record_in+0x174>)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		record.column[t] = wall.column[t];
 800777c:	4a53      	ldr	r2, [pc, #332]	; (80078cc <record_in+0x170>)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	330c      	adds	r3, #12
 8007782:	005b      	lsls	r3, r3, #1
 8007784:	4413      	add	r3, r2
 8007786:	88d9      	ldrh	r1, [r3, #6]
 8007788:	4a51      	ldr	r2, [pc, #324]	; (80078d0 <record_in+0x174>)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	330c      	adds	r3, #12
 800778e:	005b      	lsls	r3, r3, #1
 8007790:	4413      	add	r3, r2
 8007792:	460a      	mov	r2, r1
 8007794:	80da      	strh	r2, [r3, #6]
		t++;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	3301      	adds	r3, #1
 800779a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b0e      	cmp	r3, #14
 80077a0:	dde4      	ble.n	800776c <record_in+0x10>
	}
	t = 0;
 80077a2:	2300      	movs	r3, #0
 80077a4:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80077a6:	e01c      	b.n	80077e2 <record_in+0x86>
		record.row_look[t] = wall.row_look[t];
 80077a8:	4a48      	ldr	r2, [pc, #288]	; (80078cc <record_in+0x170>)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	331c      	adds	r3, #28
 80077ae:	005b      	lsls	r3, r3, #1
 80077b0:	4413      	add	r3, r2
 80077b2:	8899      	ldrh	r1, [r3, #4]
 80077b4:	4a46      	ldr	r2, [pc, #280]	; (80078d0 <record_in+0x174>)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	331c      	adds	r3, #28
 80077ba:	005b      	lsls	r3, r3, #1
 80077bc:	4413      	add	r3, r2
 80077be:	460a      	mov	r2, r1
 80077c0:	809a      	strh	r2, [r3, #4]
		record.column_look[t] = wall.column_look[t];
 80077c2:	4a42      	ldr	r2, [pc, #264]	; (80078cc <record_in+0x170>)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	332c      	adds	r3, #44	; 0x2c
 80077c8:	005b      	lsls	r3, r3, #1
 80077ca:	4413      	add	r3, r2
 80077cc:	8859      	ldrh	r1, [r3, #2]
 80077ce:	4a40      	ldr	r2, [pc, #256]	; (80078d0 <record_in+0x174>)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	332c      	adds	r3, #44	; 0x2c
 80077d4:	005b      	lsls	r3, r3, #1
 80077d6:	4413      	add	r3, r2
 80077d8:	460a      	mov	r2, r1
 80077da:	805a      	strh	r2, [r3, #2]
		t++;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	3301      	adds	r3, #1
 80077e0:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2b0e      	cmp	r3, #14
 80077e6:	dddf      	ble.n	80077a8 <record_in+0x4c>
	}
	t = 0;
 80077e8:	2300      	movs	r3, #0
 80077ea:	607b      	str	r3, [r7, #4]

	writeFlash(address, (uint64_t*) record.row[0], 1, ON);
 80077ec:	4b38      	ldr	r3, [pc, #224]	; (80078d0 <record_in+0x174>)
 80077ee:	881b      	ldrh	r3, [r3, #0]
 80077f0:	4619      	mov	r1, r3
 80077f2:	2301      	movs	r3, #1
 80077f4:	2201      	movs	r2, #1
 80077f6:	6838      	ldr	r0, [r7, #0]
 80077f8:	f7ff ff72 	bl	80076e0 <writeFlash>
	address+=16;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	3310      	adds	r3, #16
 8007800:	603b      	str	r3, [r7, #0]
	t=1;
 8007802:	2301      	movs	r3, #1
 8007804:	607b      	str	r3, [r7, #4]

	while (t <= 14) {
 8007806:	e00f      	b.n	8007828 <record_in+0xcc>
	writeFlash(address, (uint64_t*) record.row[t], 1, OFF);
 8007808:	4a31      	ldr	r2, [pc, #196]	; (80078d0 <record_in+0x174>)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007810:	4619      	mov	r1, r3
 8007812:	2300      	movs	r3, #0
 8007814:	2201      	movs	r2, #1
 8007816:	6838      	ldr	r0, [r7, #0]
 8007818:	f7ff ff62 	bl	80076e0 <writeFlash>
	address+=16;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	3310      	adds	r3, #16
 8007820:	603b      	str	r3, [r7, #0]
	t++;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	3301      	adds	r3, #1
 8007826:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2b0e      	cmp	r3, #14
 800782c:	ddec      	ble.n	8007808 <record_in+0xac>
	}

	t=0;
 800782e:	2300      	movs	r3, #0
 8007830:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007832:	e011      	b.n	8007858 <record_in+0xfc>
	writeFlash(address, (uint64_t*) record.column[t], 1, OFF);
 8007834:	4a26      	ldr	r2, [pc, #152]	; (80078d0 <record_in+0x174>)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	330c      	adds	r3, #12
 800783a:	005b      	lsls	r3, r3, #1
 800783c:	4413      	add	r3, r2
 800783e:	88db      	ldrh	r3, [r3, #6]
 8007840:	4619      	mov	r1, r3
 8007842:	2300      	movs	r3, #0
 8007844:	2201      	movs	r2, #1
 8007846:	6838      	ldr	r0, [r7, #0]
 8007848:	f7ff ff4a 	bl	80076e0 <writeFlash>
	address+=16;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	3310      	adds	r3, #16
 8007850:	603b      	str	r3, [r7, #0]
	t++;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	3301      	adds	r3, #1
 8007856:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2b0e      	cmp	r3, #14
 800785c:	ddea      	ble.n	8007834 <record_in+0xd8>
	}

	t=0;
 800785e:	2300      	movs	r3, #0
 8007860:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007862:	e011      	b.n	8007888 <record_in+0x12c>
	writeFlash(address, (uint64_t*) record.row_look[t], 1, OFF);
 8007864:	4a1a      	ldr	r2, [pc, #104]	; (80078d0 <record_in+0x174>)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	331c      	adds	r3, #28
 800786a:	005b      	lsls	r3, r3, #1
 800786c:	4413      	add	r3, r2
 800786e:	889b      	ldrh	r3, [r3, #4]
 8007870:	4619      	mov	r1, r3
 8007872:	2300      	movs	r3, #0
 8007874:	2201      	movs	r2, #1
 8007876:	6838      	ldr	r0, [r7, #0]
 8007878:	f7ff ff32 	bl	80076e0 <writeFlash>
	address+=16;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	3310      	adds	r3, #16
 8007880:	603b      	str	r3, [r7, #0]
	t++;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	3301      	adds	r3, #1
 8007886:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b0e      	cmp	r3, #14
 800788c:	ddea      	ble.n	8007864 <record_in+0x108>
	}

	t=0;
 800788e:	2300      	movs	r3, #0
 8007890:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007892:	e011      	b.n	80078b8 <record_in+0x15c>
	writeFlash(address, (uint64_t*) record.column_look[t], 1, OFF);
 8007894:	4a0e      	ldr	r2, [pc, #56]	; (80078d0 <record_in+0x174>)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	332c      	adds	r3, #44	; 0x2c
 800789a:	005b      	lsls	r3, r3, #1
 800789c:	4413      	add	r3, r2
 800789e:	885b      	ldrh	r3, [r3, #2]
 80078a0:	4619      	mov	r1, r3
 80078a2:	2300      	movs	r3, #0
 80078a4:	2201      	movs	r2, #1
 80078a6:	6838      	ldr	r0, [r7, #0]
 80078a8:	f7ff ff1a 	bl	80076e0 <writeFlash>
	address+=16;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	3310      	adds	r3, #16
 80078b0:	603b      	str	r3, [r7, #0]
	t++;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	3301      	adds	r3, #1
 80078b6:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b0e      	cmp	r3, #14
 80078bc:	ddea      	ble.n	8007894 <record_in+0x138>

//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 80078be:	bf00      	nop
 80078c0:	bf00      	nop
 80078c2:	3708      	adds	r7, #8
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	0807f000 	.word	0x0807f000
 80078cc:	20000c40 	.word	0x20000c40
 80078d0:	20000cb8 	.word	0x20000cb8

080078d4 <record_out>:


void record_out(void) {
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

	int t=0;
 80078da:	2300      	movs	r3, #0
 80078dc:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 80078de:	4b50      	ldr	r3, [pc, #320]	; (8007a20 <record_out+0x14c>)
 80078e0:	603b      	str	r3, [r7, #0]
	while (t <= 14) {
 80078e2:	e00e      	b.n	8007902 <record_out+0x2e>
	loadFlash(address, (uint64_t*)&record.row[t], 2);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	005b      	lsls	r3, r3, #1
 80078e8:	4a4e      	ldr	r2, [pc, #312]	; (8007a24 <record_out+0x150>)
 80078ea:	4413      	add	r3, r2
 80078ec:	2202      	movs	r2, #2
 80078ee:	4619      	mov	r1, r3
 80078f0:	6838      	ldr	r0, [r7, #0]
 80078f2:	f7ff ff22 	bl	800773a <loadFlash>
	address+=16;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	3310      	adds	r3, #16
 80078fa:	603b      	str	r3, [r7, #0]
	t++;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	3301      	adds	r3, #1
 8007900:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2b0e      	cmp	r3, #14
 8007906:	dded      	ble.n	80078e4 <record_out+0x10>
	}

	t=0;
 8007908:	2300      	movs	r3, #0
 800790a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800790c:	e010      	b.n	8007930 <record_out+0x5c>
	loadFlash(address, (uint64_t*)&record.column[t], 2);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	330c      	adds	r3, #12
 8007912:	005b      	lsls	r3, r3, #1
 8007914:	4a43      	ldr	r2, [pc, #268]	; (8007a24 <record_out+0x150>)
 8007916:	4413      	add	r3, r2
 8007918:	3306      	adds	r3, #6
 800791a:	2202      	movs	r2, #2
 800791c:	4619      	mov	r1, r3
 800791e:	6838      	ldr	r0, [r7, #0]
 8007920:	f7ff ff0b 	bl	800773a <loadFlash>
	address+=16;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	3310      	adds	r3, #16
 8007928:	603b      	str	r3, [r7, #0]
	t++;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	3301      	adds	r3, #1
 800792e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2b0e      	cmp	r3, #14
 8007934:	ddeb      	ble.n	800790e <record_out+0x3a>
	}

	t=0;
 8007936:	2300      	movs	r3, #0
 8007938:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800793a:	e010      	b.n	800795e <record_out+0x8a>
		loadFlash(address, (uint64_t*)&record.row_look[t], 2);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	331c      	adds	r3, #28
 8007940:	005b      	lsls	r3, r3, #1
 8007942:	4a38      	ldr	r2, [pc, #224]	; (8007a24 <record_out+0x150>)
 8007944:	4413      	add	r3, r2
 8007946:	3304      	adds	r3, #4
 8007948:	2202      	movs	r2, #2
 800794a:	4619      	mov	r1, r3
 800794c:	6838      	ldr	r0, [r7, #0]
 800794e:	f7ff fef4 	bl	800773a <loadFlash>
		address+=16;
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	3310      	adds	r3, #16
 8007956:	603b      	str	r3, [r7, #0]
		t++;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	3301      	adds	r3, #1
 800795c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2b0e      	cmp	r3, #14
 8007962:	ddeb      	ble.n	800793c <record_out+0x68>
	}

	t=0;
 8007964:	2300      	movs	r3, #0
 8007966:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007968:	e010      	b.n	800798c <record_out+0xb8>
		loadFlash(address, (uint64_t*)&record.column_look[t], 2);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	332c      	adds	r3, #44	; 0x2c
 800796e:	005b      	lsls	r3, r3, #1
 8007970:	4a2c      	ldr	r2, [pc, #176]	; (8007a24 <record_out+0x150>)
 8007972:	4413      	add	r3, r2
 8007974:	3302      	adds	r3, #2
 8007976:	2202      	movs	r2, #2
 8007978:	4619      	mov	r1, r3
 800797a:	6838      	ldr	r0, [r7, #0]
 800797c:	f7ff fedd 	bl	800773a <loadFlash>
		address+=16;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	3310      	adds	r3, #16
 8007984:	603b      	str	r3, [r7, #0]
		t++;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	3301      	adds	r3, #1
 800798a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2b0e      	cmp	r3, #14
 8007990:	ddeb      	ble.n	800796a <record_out+0x96>
//			sizeof(record.column));
//	loadFlash(start_address + 2 * sizeof(record.row),
//			(uint64_t*) record.row_look, sizeof(record.row_look));
//	loadFlash(start_address + 3 * sizeof(record.row),
//			(uint64_t*) record.column_look, sizeof(record.column_look));
	t = 0;
 8007992:	2300      	movs	r3, #0
 8007994:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007996:	e017      	b.n	80079c8 <record_out+0xf4>
		wall.row[t] = record.row[t];
 8007998:	4a22      	ldr	r2, [pc, #136]	; (8007a24 <record_out+0x150>)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80079a0:	4a21      	ldr	r2, [pc, #132]	; (8007a28 <record_out+0x154>)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = record.column[t];
 80079a8:	4a1e      	ldr	r2, [pc, #120]	; (8007a24 <record_out+0x150>)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	330c      	adds	r3, #12
 80079ae:	005b      	lsls	r3, r3, #1
 80079b0:	4413      	add	r3, r2
 80079b2:	88d9      	ldrh	r1, [r3, #6]
 80079b4:	4a1c      	ldr	r2, [pc, #112]	; (8007a28 <record_out+0x154>)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	330c      	adds	r3, #12
 80079ba:	005b      	lsls	r3, r3, #1
 80079bc:	4413      	add	r3, r2
 80079be:	460a      	mov	r2, r1
 80079c0:	80da      	strh	r2, [r3, #6]
		t++;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	3301      	adds	r3, #1
 80079c6:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b0e      	cmp	r3, #14
 80079cc:	dde4      	ble.n	8007998 <record_out+0xc4>
	}
	t = 0;
 80079ce:	2300      	movs	r3, #0
 80079d0:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80079d2:	e01c      	b.n	8007a0e <record_out+0x13a>
		wall.row_look[t] = record.row_look[t];
 80079d4:	4a13      	ldr	r2, [pc, #76]	; (8007a24 <record_out+0x150>)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	331c      	adds	r3, #28
 80079da:	005b      	lsls	r3, r3, #1
 80079dc:	4413      	add	r3, r2
 80079de:	8899      	ldrh	r1, [r3, #4]
 80079e0:	4a11      	ldr	r2, [pc, #68]	; (8007a28 <record_out+0x154>)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	331c      	adds	r3, #28
 80079e6:	005b      	lsls	r3, r3, #1
 80079e8:	4413      	add	r3, r2
 80079ea:	460a      	mov	r2, r1
 80079ec:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = record.column_look[t];
 80079ee:	4a0d      	ldr	r2, [pc, #52]	; (8007a24 <record_out+0x150>)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	332c      	adds	r3, #44	; 0x2c
 80079f4:	005b      	lsls	r3, r3, #1
 80079f6:	4413      	add	r3, r2
 80079f8:	8859      	ldrh	r1, [r3, #2]
 80079fa:	4a0b      	ldr	r2, [pc, #44]	; (8007a28 <record_out+0x154>)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	332c      	adds	r3, #44	; 0x2c
 8007a00:	005b      	lsls	r3, r3, #1
 8007a02:	4413      	add	r3, r2
 8007a04:	460a      	mov	r2, r1
 8007a06:	805a      	strh	r2, [r3, #2]
		t++;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2b0e      	cmp	r3, #14
 8007a12:	dddf      	ble.n	80079d4 <record_out+0x100>
	}

	t = 0;
 8007a14:	2300      	movs	r3, #0
 8007a16:	607b      	str	r3, [r7, #4]

}
 8007a18:	bf00      	nop
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	0807f000 	.word	0x0807f000
 8007a24:	20000cb8 	.word	0x20000cb8
 8007a28:	20000c40 	.word	0x20000c40

08007a2c <flash_record_init>:

void flash_record_init(void){
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
	int t = 0;
 8007a32:	2300      	movs	r3, #0
 8007a34:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007a36:	e013      	b.n	8007a60 <flash_record_init+0x34>
		wall.row[t] = 0b111100011;
 8007a38:	4a1e      	ldr	r2, [pc, #120]	; (8007ab4 <flash_record_init+0x88>)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f240 11e3 	movw	r1, #483	; 0x1e3
 8007a40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = t*2;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	005b      	lsls	r3, r3, #1
 8007a4a:	b299      	uxth	r1, r3
 8007a4c:	4a19      	ldr	r2, [pc, #100]	; (8007ab4 <flash_record_init+0x88>)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	330c      	adds	r3, #12
 8007a52:	005b      	lsls	r3, r3, #1
 8007a54:	4413      	add	r3, r2
 8007a56:	460a      	mov	r2, r1
 8007a58:	80da      	strh	r2, [r3, #6]
		t++;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b0e      	cmp	r3, #14
 8007a64:	dde8      	ble.n	8007a38 <flash_record_init+0xc>
	}
	t = 0;
 8007a66:	2300      	movs	r3, #0
 8007a68:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007a6a:	e018      	b.n	8007a9e <flash_record_init+0x72>
		wall.row_look[t] = t*4;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	b299      	uxth	r1, r3
 8007a74:	4a0f      	ldr	r2, [pc, #60]	; (8007ab4 <flash_record_init+0x88>)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	331c      	adds	r3, #28
 8007a7a:	005b      	lsls	r3, r3, #1
 8007a7c:	4413      	add	r3, r2
 8007a7e:	460a      	mov	r2, r1
 8007a80:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = t*8;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	00db      	lsls	r3, r3, #3
 8007a88:	b299      	uxth	r1, r3
 8007a8a:	4a0a      	ldr	r2, [pc, #40]	; (8007ab4 <flash_record_init+0x88>)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	332c      	adds	r3, #44	; 0x2c
 8007a90:	005b      	lsls	r3, r3, #1
 8007a92:	4413      	add	r3, r2
 8007a94:	460a      	mov	r2, r1
 8007a96:	805a      	strh	r2, [r3, #2]
		t++;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2b0e      	cmp	r3, #14
 8007aa2:	dde3      	ble.n	8007a6c <flash_record_init+0x40>
	}

}
 8007aa4:	bf00      	nop
 8007aa6:	bf00      	nop
 8007aa8:	370c      	adds	r7, #12
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	20000c40 	.word	0x20000c40

08007ab8 <gyro_read_byte>:

GYRO_DATA gyro;

uint8_t gyro_read_byte(uint8_t reg)

{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	4603      	mov	r3, r0
 8007ac0:	71fb      	strb	r3, [r7, #7]

	uint8_t ret, val;

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	2110      	movs	r1, #16
 8007ac6:	4810      	ldr	r0, [pc, #64]	; (8007b08 <gyro_read_byte+0x50>)
 8007ac8:	f014 f9bc 	bl	801be44 <HAL_GPIO_WritePin>

	ret = reg | 0x80;//先頭のbitを1に
 8007acc:	79fb      	ldrb	r3, [r7, #7]
 8007ace:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 8007ad6:	f107 010f 	add.w	r1, r7, #15
 8007ada:	2364      	movs	r3, #100	; 0x64
 8007adc:	2201      	movs	r2, #1
 8007ade:	480b      	ldr	r0, [pc, #44]	; (8007b0c <gyro_read_byte+0x54>)
 8007ae0:	f015 fa93 	bl	801d00a <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &val, 1, 100);
 8007ae4:	f107 010e 	add.w	r1, r7, #14
 8007ae8:	2364      	movs	r3, #100	; 0x64
 8007aea:	2201      	movs	r2, #1
 8007aec:	4807      	ldr	r0, [pc, #28]	; (8007b0c <gyro_read_byte+0x54>)
 8007aee:	f015 fbfa 	bl	801d2e6 <HAL_SPI_Receive>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007af2:	2201      	movs	r2, #1
 8007af4:	2110      	movs	r1, #16
 8007af6:	4804      	ldr	r0, [pc, #16]	; (8007b08 <gyro_read_byte+0x50>)
 8007af8:	f014 f9a4 	bl	801be44 <HAL_GPIO_WritePin>

	return val;
 8007afc:	7bbb      	ldrb	r3, [r7, #14]

}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	48000800 	.word	0x48000800
 8007b0c:	2000edd4 	.word	0x2000edd4

08007b10 <gyro_write_byte>:

void gyro_write_byte(uint8_t reg, uint8_t val)

{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	4603      	mov	r3, r0
 8007b18:	460a      	mov	r2, r1
 8007b1a:	71fb      	strb	r3, [r7, #7]
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	71bb      	strb	r3, [r7, #6]

	uint8_t ret;

	ret = reg & 0x7F;//先頭のbitを0に
 8007b20:	79fb      	ldrb	r3, [r7, #7]
 8007b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	2110      	movs	r1, #16
 8007b2e:	480c      	ldr	r0, [pc, #48]	; (8007b60 <gyro_write_byte+0x50>)
 8007b30:	f014 f988 	bl	801be44 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 8007b34:	f107 010f 	add.w	r1, r7, #15
 8007b38:	2364      	movs	r3, #100	; 0x64
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	4809      	ldr	r0, [pc, #36]	; (8007b64 <gyro_write_byte+0x54>)
 8007b3e:	f015 fa64 	bl	801d00a <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, &val, 1, 100);
 8007b42:	1db9      	adds	r1, r7, #6
 8007b44:	2364      	movs	r3, #100	; 0x64
 8007b46:	2201      	movs	r2, #1
 8007b48:	4806      	ldr	r0, [pc, #24]	; (8007b64 <gyro_write_byte+0x54>)
 8007b4a:	f015 fa5e 	bl	801d00a <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8007b4e:	2201      	movs	r2, #1
 8007b50:	2110      	movs	r1, #16
 8007b52:	4803      	ldr	r0, [pc, #12]	; (8007b60 <gyro_write_byte+0x50>)
 8007b54:	f014 f976 	bl	801be44 <HAL_GPIO_WritePin>

}
 8007b58:	bf00      	nop
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	48000800 	.word	0x48000800
 8007b64:	2000edd4 	.word	0x2000edd4

08007b68 <pl_gyro_init>:

void pl_gyro_init(void)

{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	71fb      	strb	r3, [r7, #7]

// check WHO_AM_I (0x75)

	who_am_i = gyro_read_byte(0x75);
 8007b72:	2075      	movs	r0, #117	; 0x75
 8007b74:	f7ff ffa0 	bl	8007ab8 <gyro_read_byte>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	71fb      	strb	r3, [r7, #7]

// who am i = 0x12

	printf("\r\nwho_am_i = 0x%x\r\n", who_am_i);
 8007b7c:	79fb      	ldrb	r3, [r7, #7]
 8007b7e:	4619      	mov	r1, r3
 8007b80:	481b      	ldr	r0, [pc, #108]	; (8007bf0 <pl_gyro_init+0x88>)
 8007b82:	f018 fef5 	bl	8020970 <iprintf>

// recheck

	if (who_am_i != 0x98) {
 8007b86:	79fb      	ldrb	r3, [r7, #7]
 8007b88:	2b98      	cmp	r3, #152	; 0x98
 8007b8a:	d00e      	beq.n	8007baa <pl_gyro_init+0x42>

		HAL_Delay(100);
 8007b8c:	2064      	movs	r0, #100	; 0x64
 8007b8e:	f010 ff9d 	bl	8018acc <HAL_Delay>

		who_am_i = gyro_read_byte(0x75);
 8007b92:	2075      	movs	r0, #117	; 0x75
 8007b94:	f7ff ff90 	bl	8007ab8 <gyro_read_byte>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	71fb      	strb	r3, [r7, #7]

		if (who_am_i != 0x98) {
 8007b9c:	79fb      	ldrb	r3, [r7, #7]
 8007b9e:	2b98      	cmp	r3, #152	; 0x98
 8007ba0:	d003      	beq.n	8007baa <pl_gyro_init+0x42>

			while (1) {

				printf("gyro_error\r");
 8007ba2:	4814      	ldr	r0, [pc, #80]	; (8007bf4 <pl_gyro_init+0x8c>)
 8007ba4:	f018 fee4 	bl	8020970 <iprintf>
 8007ba8:	e7fb      	b.n	8007ba2 <pl_gyro_init+0x3a>

// set pwr might

// PWR_MIGHT_1 0x6B

	gyro_write_byte(0x6B, 0x00);
 8007baa:	2100      	movs	r1, #0
 8007bac:	206b      	movs	r0, #107	; 0x6b
 8007bae:	f7ff ffaf 	bl	8007b10 <gyro_write_byte>

	HAL_Delay(50);
 8007bb2:	2032      	movs	r0, #50	; 0x32
 8007bb4:	f010 ff8a 	bl	8018acc <HAL_Delay>

// PWR_MIGHT_2 0x6C

	gyro_write_byte(0x6C, 0x00);
 8007bb8:	2100      	movs	r1, #0
 8007bba:	206c      	movs	r0, #108	; 0x6c
 8007bbc:	f7ff ffa8 	bl	8007b10 <gyro_write_byte>

	HAL_Delay(50);
 8007bc0:	2032      	movs	r0, #50	; 0x32
 8007bc2:	f010 ff83 	bl	8018acc <HAL_Delay>

// set gyro config

// GYRO_CONFIG 0x1B

	gyro_write_byte(0x1B, 0x18); // use 2000 dps
 8007bc6:	2118      	movs	r1, #24
 8007bc8:	201b      	movs	r0, #27
 8007bca:	f7ff ffa1 	bl	8007b10 <gyro_write_byte>

	HAL_Delay(50);
 8007bce:	2032      	movs	r0, #50	; 0x32
 8007bd0:	f010 ff7c 	bl	8018acc <HAL_Delay>

// ACCEL_CONFIG 0x1C

	gyro_write_byte(0x1C, 0x18); // use pm 16g
 8007bd4:	2118      	movs	r1, #24
 8007bd6:	201c      	movs	r0, #28
 8007bd8:	f7ff ff9a 	bl	8007b10 <gyro_write_byte>

	HAL_Delay(50);
 8007bdc:	2032      	movs	r0, #50	; 0x32
 8007bde:	f010 ff75 	bl	8018acc <HAL_Delay>

	//gyro_write_byte(0x1D, 0x08);
	//HAL_Delay(50);

	set_flag = 1;
 8007be2:	4b05      	ldr	r3, [pc, #20]	; (8007bf8 <pl_gyro_init+0x90>)
 8007be4:	2201      	movs	r2, #1
 8007be6:	701a      	strb	r2, [r3, #0]

}
 8007be8:	bf00      	nop
 8007bea:	3708      	adds	r7, #8
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	08024350 	.word	0x08024350
 8007bf4:	08024364 	.word	0x08024364
 8007bf8:	200006e4 	.word	0x200006e4

08007bfc <ICM20602_GYRO_READ>:

float ICM20602_GYRO_READ(uint8_t H_reg)

{
 8007bfc:	b590      	push	{r4, r7, lr}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	4603      	mov	r3, r0
 8007c04:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8007c06:	79fb      	ldrb	r3, [r7, #7]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7ff ff55 	bl	8007ab8 <gyro_read_byte>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	021b      	lsls	r3, r3, #8
 8007c12:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 8007c14:	79fb      	ldrb	r3, [r7, #7]
 8007c16:	3301      	adds	r3, #1
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7ff ff4c 	bl	8007ab8 <gyro_read_byte>
 8007c20:	4603      	mov	r3, r0
 8007c22:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8007c24:	4323      	orrs	r3, r4
 8007c26:	81fb      	strh	r3, [r7, #14]

	float omega = (float) (data / 16.4f);
 8007c28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007c2c:	ee07 3a90 	vmov	s15, r3
 8007c30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c34:	eddf 6a06 	vldr	s13, [pc, #24]	; 8007c50 <ICM20602_GYRO_READ+0x54>
 8007c38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007c3c:	edc7 7a02 	vstr	s15, [r7, #8]

	return omega;
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	ee07 3a90 	vmov	s15, r3

}
 8007c46:	eeb0 0a67 	vmov.f32	s0, s15
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd90      	pop	{r4, r7, pc}
 8007c50:	41833333 	.word	0x41833333

08007c54 <ICM20602_ACCEL_READ>:

float ICM20602_ACCEL_READ(uint8_t H_reg)

{
 8007c54:	b590      	push	{r4, r7, lr}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8007c5e:	79fb      	ldrb	r3, [r7, #7]
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7ff ff29 	bl	8007ab8 <gyro_read_byte>
 8007c66:	4603      	mov	r3, r0
 8007c68:	021b      	lsls	r3, r3, #8
 8007c6a:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 8007c6c:	79fb      	ldrb	r3, [r7, #7]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7ff ff20 	bl	8007ab8 <gyro_read_byte>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8007c7c:	4323      	orrs	r3, r4
 8007c7e:	81fb      	strh	r3, [r7, #14]

	float accel = (float) (data / 2048.0f);
 8007c80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007c84:	ee07 3a90 	vmov	s15, r3
 8007c88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c8c:	eddf 6a06 	vldr	s13, [pc, #24]	; 8007ca8 <ICM20602_ACCEL_READ+0x54>
 8007c90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007c94:	edc7 7a02 	vstr	s15, [r7, #8]

	return accel;
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	ee07 3a90 	vmov	s15, r3

}
 8007c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8007ca2:	3714      	adds	r7, #20
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd90      	pop	{r4, r7, pc}
 8007ca8:	45000000 	.word	0x45000000

08007cac <ICM20602_DataUpdate>:

void ICM20602_DataUpdate(void)

{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	af00      	add	r7, sp, #0

	if (set_flag == 1) {
 8007cb0:	4b0e      	ldr	r3, [pc, #56]	; (8007cec <ICM20602_DataUpdate+0x40>)
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d117      	bne.n	8007ce8 <ICM20602_DataUpdate+0x3c>

// get yawrate

		//gyro.omega_y = ICM20602_GYRO_READ(0x43);

		gyro.omega_x = ICM20602_GYRO_READ(0x45);
 8007cb8:	2045      	movs	r0, #69	; 0x45
 8007cba:	f7ff ff9f 	bl	8007bfc <ICM20602_GYRO_READ>
 8007cbe:	eef0 7a40 	vmov.f32	s15, s0
 8007cc2:	4b0b      	ldr	r3, [pc, #44]	; (8007cf0 <ICM20602_DataUpdate+0x44>)
 8007cc4:	edc3 7a00 	vstr	s15, [r3]

		gyro.omega_z = ICM20602_GYRO_READ(0x47);
 8007cc8:	2047      	movs	r0, #71	; 0x47
 8007cca:	f7ff ff97 	bl	8007bfc <ICM20602_GYRO_READ>
 8007cce:	eef0 7a40 	vmov.f32	s15, s0
 8007cd2:	4b07      	ldr	r3, [pc, #28]	; (8007cf0 <ICM20602_DataUpdate+0x44>)
 8007cd4:	edc3 7a02 	vstr	s15, [r3, #8]

// get accel

		gyro.accel_y = ICM20602_ACCEL_READ(0x3B);
 8007cd8:	203b      	movs	r0, #59	; 0x3b
 8007cda:	f7ff ffbb 	bl	8007c54 <ICM20602_ACCEL_READ>
 8007cde:	eef0 7a40 	vmov.f32	s15, s0
 8007ce2:	4b03      	ldr	r3, [pc, #12]	; (8007cf0 <ICM20602_DataUpdate+0x44>)
 8007ce4:	edc3 7a04 	vstr	s15, [r3, #16]

		//gyro.accel_z = ICM20602_ACCEL_READ(0x3F);

	}

}
 8007ce8:	bf00      	nop
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	200006e4 	.word	0x200006e4
 8007cf0:	200006e8 	.word	0x200006e8

08007cf4 <pl_motor_init>:
#include "PL_motor.h"
#include "tim.h"
#include "gpio.h"
#include "define.h"

void pl_motor_init(void){
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim8);//モータ
 8007cf8:	480f      	ldr	r0, [pc, #60]	; (8007d38 <pl_motor_init+0x44>)
 8007cfa:	f016 f84b 	bl	801dd94 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim8);//モータ
 8007cfe:	480e      	ldr	r0, [pc, #56]	; (8007d38 <pl_motor_init+0x44>)
 8007d00:	f00f fd72 	bl	80177e8 <HAL_TIM_PWM_MspInit>
	  HAL_TIM_Base_Start_IT(&htim16);//吸
 8007d04:	480d      	ldr	r0, [pc, #52]	; (8007d3c <pl_motor_init+0x48>)
 8007d06:	f016 f845 	bl	801dd94 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim16);//吸
 8007d0a:	480c      	ldr	r0, [pc, #48]	; (8007d3c <pl_motor_init+0x48>)
 8007d0c:	f00f fd6c 	bl	80177e8 <HAL_TIM_PWM_MspInit>

	pl_L_DriveMotor_mode(MOTOR_FRONT);
 8007d10:	2001      	movs	r0, #1
 8007d12:	f000 f81f 	bl	8007d54 <pl_L_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,90);
 8007d16:	4b08      	ldr	r3, [pc, #32]	; (8007d38 <pl_motor_init+0x44>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	225a      	movs	r2, #90	; 0x5a
 8007d1c:	63da      	str	r2, [r3, #60]	; 0x3c
	pl_R_DriveMotor_mode(MOTOR_FRONT);
 8007d1e:	2001      	movs	r0, #1
 8007d20:	f000 f840 	bl	8007da4 <pl_R_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,90);
 8007d24:	4b04      	ldr	r3, [pc, #16]	; (8007d38 <pl_motor_init+0x44>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	225a      	movs	r2, #90	; 0x5a
 8007d2a:	635a      	str	r2, [r3, #52]	; 0x34

	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,30);
 8007d2c:	4b03      	ldr	r3, [pc, #12]	; (8007d3c <pl_motor_init+0x48>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	221e      	movs	r2, #30
 8007d32:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007d34:	bf00      	nop
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	2000eeec 	.word	0x2000eeec
 8007d3c:	2000ef38 	.word	0x2000ef38

08007d40 <pl_DriveMotor_standby>:

void pl_DriveMotor_standby(int pin){
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, pin);
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <pl_L_DriveMotor_mode>:

void pl_L_DriveMotor_mode(int l_motor_mode){
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]

switch (l_motor_mode){
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2b03      	cmp	r3, #3
 8007d60:	d819      	bhi.n	8007d96 <pl_L_DriveMotor_mode+0x42>
 8007d62:	a201      	add	r2, pc, #4	; (adr r2, 8007d68 <pl_L_DriveMotor_mode+0x14>)
 8007d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d68:	08007d95 	.word	0x08007d95
 8007d6c:	08007d79 	.word	0x08007d79
 8007d70:	08007d87 	.word	0x08007d87
 8007d74:	08007d95 	.word	0x08007d95
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_RESET);
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007d7e:	4808      	ldr	r0, [pc, #32]	; (8007da0 <pl_L_DriveMotor_mode+0x4c>)
 8007d80:	f014 f860 	bl	801be44 <HAL_GPIO_WritePin>
break;
 8007d84:	e007      	b.n	8007d96 <pl_L_DriveMotor_mode+0x42>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_SET);
 8007d86:	2201      	movs	r2, #1
 8007d88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007d8c:	4804      	ldr	r0, [pc, #16]	; (8007da0 <pl_L_DriveMotor_mode+0x4c>)
 8007d8e:	f014 f859 	bl	801be44 <HAL_GPIO_WritePin>
break;
 8007d92:	e000      	b.n	8007d96 <pl_L_DriveMotor_mode+0x42>
break;
 8007d94:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 8007d96:	bf00      	nop
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	48000800 	.word	0x48000800

08007da4 <pl_R_DriveMotor_mode>:

void pl_R_DriveMotor_mode(int r_motor_mode){
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]

switch (r_motor_mode){
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b03      	cmp	r3, #3
 8007db0:	d817      	bhi.n	8007de2 <pl_R_DriveMotor_mode+0x3e>
 8007db2:	a201      	add	r2, pc, #4	; (adr r2, 8007db8 <pl_R_DriveMotor_mode+0x14>)
 8007db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db8:	08007de1 	.word	0x08007de1
 8007dbc:	08007dc9 	.word	0x08007dc9
 8007dc0:	08007dd5 	.word	0x08007dd5
 8007dc4:	08007de1 	.word	0x08007de1
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_SET);
 8007dc8:	2201      	movs	r2, #1
 8007dca:	2180      	movs	r1, #128	; 0x80
 8007dcc:	4807      	ldr	r0, [pc, #28]	; (8007dec <pl_R_DriveMotor_mode+0x48>)
 8007dce:	f014 f839 	bl	801be44 <HAL_GPIO_WritePin>
break;
 8007dd2:	e006      	b.n	8007de2 <pl_R_DriveMotor_mode+0x3e>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_RESET);
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	2180      	movs	r1, #128	; 0x80
 8007dd8:	4804      	ldr	r0, [pc, #16]	; (8007dec <pl_R_DriveMotor_mode+0x48>)
 8007dda:	f014 f833 	bl	801be44 <HAL_GPIO_WritePin>
break;
 8007dde:	e000      	b.n	8007de2 <pl_R_DriveMotor_mode+0x3e>
break;
 8007de0:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 8007de2:	bf00      	nop
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	48000400 	.word	0x48000400

08007df0 <pl_DriveMotor_start>:



void pl_DriveMotor_start(void){
 8007df0:	b580      	push	{r7, lr}
 8007df2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8007df4:	2108      	movs	r1, #8
 8007df6:	4804      	ldr	r0, [pc, #16]	; (8007e08 <pl_DriveMotor_start+0x18>)
 8007df8:	f016 f894 	bl	801df24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	4802      	ldr	r0, [pc, #8]	; (8007e08 <pl_DriveMotor_start+0x18>)
 8007e00:	f016 f890 	bl	801df24 <HAL_TIM_PWM_Start>
}
 8007e04:	bf00      	nop
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	2000eeec 	.word	0x2000eeec

08007e0c <pl_DriveMotor_stop>:

void pl_DriveMotor_stop(void){
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8007e10:	2108      	movs	r1, #8
 8007e12:	4804      	ldr	r0, [pc, #16]	; (8007e24 <pl_DriveMotor_stop+0x18>)
 8007e14:	f016 f992 	bl	801e13c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8007e18:	2100      	movs	r1, #0
 8007e1a:	4802      	ldr	r0, [pc, #8]	; (8007e24 <pl_DriveMotor_stop+0x18>)
 8007e1c:	f016 f98e 	bl	801e13c <HAL_TIM_PWM_Stop>
}
 8007e20:	bf00      	nop
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	2000eeec 	.word	0x2000eeec

08007e28 <pl_DriveMotor_duty>:

void pl_DriveMotor_duty(int duty_l,int duty_r){
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,duty_l);
 8007e32:	4b07      	ldr	r3, [pc, #28]	; (8007e50 <pl_DriveMotor_duty+0x28>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,duty_r);
 8007e3a:	4b05      	ldr	r3, [pc, #20]	; (8007e50 <pl_DriveMotor_duty+0x28>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	683a      	ldr	r2, [r7, #0]
 8007e40:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007e42:	bf00      	nop
 8007e44:	370c      	adds	r7, #12
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr
 8007e4e:	bf00      	nop
 8007e50:	2000eeec 	.word	0x2000eeec

08007e54 <pl_FunMotor_start>:



void pl_FunMotor_start(void){
 8007e54:	b580      	push	{r7, lr}
 8007e56:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8007e58:	2100      	movs	r1, #0
 8007e5a:	4802      	ldr	r0, [pc, #8]	; (8007e64 <pl_FunMotor_start+0x10>)
 8007e5c:	f016 f862 	bl	801df24 <HAL_TIM_PWM_Start>
}
 8007e60:	bf00      	nop
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	2000ef38 	.word	0x2000ef38

08007e68 <pl_FunMotor_stop>:

void pl_FunMotor_stop(void){
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	4802      	ldr	r0, [pc, #8]	; (8007e78 <pl_FunMotor_stop+0x10>)
 8007e70:	f016 f964 	bl	801e13c <HAL_TIM_PWM_Stop>
}
 8007e74:	bf00      	nop
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	2000ef38 	.word	0x2000ef38

08007e7c <pl_FunMotor_duty>:

void pl_FunMotor_duty(float fun_ratio){
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	ed87 0a01 	vstr	s0, [r7, #4]
	int duty_fun=(int)(FUN_MAX_DUTY*fun_ratio);
 8007e86:	edd7 7a01 	vldr	s15, [r7, #4]
 8007e8a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007ec0 <pl_FunMotor_duty+0x44>
 8007e8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e96:	ee17 3a90 	vmov	r3, s15
 8007e9a:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim16, FUN_MAX_DUTY);
 8007e9c:	4b09      	ldr	r3, [pc, #36]	; (8007ec4 <pl_FunMotor_duty+0x48>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2264      	movs	r2, #100	; 0x64
 8007ea2:	62da      	str	r2, [r3, #44]	; 0x2c
 8007ea4:	4b07      	ldr	r3, [pc, #28]	; (8007ec4 <pl_FunMotor_duty+0x48>)
 8007ea6:	2264      	movs	r2, #100	; 0x64
 8007ea8:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,duty_fun);
 8007eaa:	4b06      	ldr	r3, [pc, #24]	; (8007ec4 <pl_FunMotor_duty+0x48>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	635a      	str	r2, [r3, #52]	; 0x34

}
 8007eb2:	bf00      	nop
 8007eb4:	3714      	adds	r7, #20
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	42c80000 	.word	0x42c80000
 8007ec4:	2000ef38 	.word	0x2000ef38

08007ec8 <pl_sensor_init>:
/*******************************************************************/
/*	sensorのinit					(pl_sensor_init)	*/
/*******************************************************************/
/*	sensorを初期設定						*/
/*******************************************************************/
void pl_sensor_init(void){
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	af00      	add	r7, sp, #0
	AD_step=0;
 8007ecc:	4b04      	ldr	r3, [pc, #16]	; (8007ee0 <pl_sensor_init+0x18>)
 8007ece:	2200      	movs	r2, #0
 8007ed0:	701a      	strb	r2, [r3, #0]
	//HAL_ADC_Init(&hadc1);
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8007ed2:	217f      	movs	r1, #127	; 0x7f
 8007ed4:	4803      	ldr	r0, [pc, #12]	; (8007ee4 <pl_sensor_init+0x1c>)
 8007ed6:	f012 fe73 	bl	801abc0 <HAL_ADCEx_Calibration_Start>
	//HAL_ADC_ConfigChannel(&hadc1,&sConfig);
}
 8007eda:	bf00      	nop
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	2000070c 	.word	0x2000070c
 8007ee4:	20000738 	.word	0x20000738

08007ee8 <pl_getbatt>:
/*******************************************************************/
/*	電圧の取得			(pl_getbatt)	*/
/*******************************************************************/
/*	戻り値に電圧を返す．						*/
/*******************************************************************/
float pl_getbatt(void){
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
	 float batt;
	 uint16_t battAD;


	HAL_ADC_Start(&hadc1);
 8007eee:	483c      	ldr	r0, [pc, #240]	; (8007fe0 <pl_getbatt+0xf8>)
 8007ef0:	f011 fa54 	bl	801939c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 8007ef4:	2132      	movs	r1, #50	; 0x32
 8007ef6:	483a      	ldr	r0, [pc, #232]	; (8007fe0 <pl_getbatt+0xf8>)
 8007ef8:	f011 fb4e 	bl	8019598 <HAL_ADC_PollForConversion>
	battAD = HAL_ADC_GetValue(&hadc1);
 8007efc:	4838      	ldr	r0, [pc, #224]	; (8007fe0 <pl_getbatt+0xf8>)
 8007efe:	f011 fd6a 	bl	80199d6 <HAL_ADC_GetValue>
 8007f02:	4603      	mov	r3, r0
 8007f04:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 8007f06:	4836      	ldr	r0, [pc, #216]	; (8007fe0 <pl_getbatt+0xf8>)
 8007f08:	f011 fb12 	bl	8019530 <HAL_ADC_Stop>
	batt = 3.3 * (float) battAD / 4095 * (10.0 + 10.0) / 10.0*1.15*3.7/3.86;//* 1.2975
 8007f0c:	88fb      	ldrh	r3, [r7, #6]
 8007f0e:	ee07 3a90 	vmov	s15, r3
 8007f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f16:	ee17 0a90 	vmov	r0, s15
 8007f1a:	f7f8 fb3d 	bl	8000598 <__aeabi_f2d>
 8007f1e:	a326      	add	r3, pc, #152	; (adr r3, 8007fb8 <pl_getbatt+0xd0>)
 8007f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f24:	f7f8 fb90 	bl	8000648 <__aeabi_dmul>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	4619      	mov	r1, r3
 8007f30:	a323      	add	r3, pc, #140	; (adr r3, 8007fc0 <pl_getbatt+0xd8>)
 8007f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f36:	f7f8 fcb1 	bl	800089c <__aeabi_ddiv>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	4610      	mov	r0, r2
 8007f40:	4619      	mov	r1, r3
 8007f42:	f04f 0200 	mov.w	r2, #0
 8007f46:	4b27      	ldr	r3, [pc, #156]	; (8007fe4 <pl_getbatt+0xfc>)
 8007f48:	f7f8 fb7e 	bl	8000648 <__aeabi_dmul>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4610      	mov	r0, r2
 8007f52:	4619      	mov	r1, r3
 8007f54:	f04f 0200 	mov.w	r2, #0
 8007f58:	4b23      	ldr	r3, [pc, #140]	; (8007fe8 <pl_getbatt+0x100>)
 8007f5a:	f7f8 fc9f 	bl	800089c <__aeabi_ddiv>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	460b      	mov	r3, r1
 8007f62:	4610      	mov	r0, r2
 8007f64:	4619      	mov	r1, r3
 8007f66:	a318      	add	r3, pc, #96	; (adr r3, 8007fc8 <pl_getbatt+0xe0>)
 8007f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6c:	f7f8 fb6c 	bl	8000648 <__aeabi_dmul>
 8007f70:	4602      	mov	r2, r0
 8007f72:	460b      	mov	r3, r1
 8007f74:	4610      	mov	r0, r2
 8007f76:	4619      	mov	r1, r3
 8007f78:	a315      	add	r3, pc, #84	; (adr r3, 8007fd0 <pl_getbatt+0xe8>)
 8007f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7e:	f7f8 fb63 	bl	8000648 <__aeabi_dmul>
 8007f82:	4602      	mov	r2, r0
 8007f84:	460b      	mov	r3, r1
 8007f86:	4610      	mov	r0, r2
 8007f88:	4619      	mov	r1, r3
 8007f8a:	a313      	add	r3, pc, #76	; (adr r3, 8007fd8 <pl_getbatt+0xf0>)
 8007f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f90:	f7f8 fc84 	bl	800089c <__aeabi_ddiv>
 8007f94:	4602      	mov	r2, r0
 8007f96:	460b      	mov	r3, r1
 8007f98:	4610      	mov	r0, r2
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	f7f8 fe2c 	bl	8000bf8 <__aeabi_d2f>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	603b      	str	r3, [r7, #0]
return batt;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	ee07 3a90 	vmov	s15, r3
}
 8007faa:	eeb0 0a67 	vmov.f32	s0, s15
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	f3af 8000 	nop.w
 8007fb8:	66666666 	.word	0x66666666
 8007fbc:	400a6666 	.word	0x400a6666
 8007fc0:	00000000 	.word	0x00000000
 8007fc4:	40affe00 	.word	0x40affe00
 8007fc8:	66666666 	.word	0x66666666
 8007fcc:	3ff26666 	.word	0x3ff26666
 8007fd0:	9999999a 	.word	0x9999999a
 8007fd4:	400d9999 	.word	0x400d9999
 8007fd8:	ae147ae1 	.word	0xae147ae1
 8007fdc:	400ee147 	.word	0x400ee147
 8007fe0:	20000738 	.word	0x20000738
 8007fe4:	40340000 	.word	0x40340000
 8007fe8:	40240000 	.word	0x40240000
 8007fec:	00000000 	.word	0x00000000

08007ff0 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 8007ff6:	4882      	ldr	r0, [pc, #520]	; (8008200 <pl_callback_getSensor+0x210>)
 8007ff8:	f011 fc8c 	bl	8019914 <HAL_ADC_Stop_DMA>


	switch (AD_step) {
 8007ffc:	4b81      	ldr	r3, [pc, #516]	; (8008204 <pl_callback_getSensor+0x214>)
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	2b04      	cmp	r3, #4
 8008002:	f200 80d9 	bhi.w	80081b8 <pl_callback_getSensor+0x1c8>
 8008006:	a201      	add	r2, pc, #4	; (adr r2, 800800c <pl_callback_getSensor+0x1c>)
 8008008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800c:	08008021 	.word	0x08008021
 8008010:	08008059 	.word	0x08008059
 8008014:	080080b9 	.word	0x080080b9
 8008018:	080080f9 	.word	0x080080f9
 800801c:	080081b9 	.word	0x080081b9
	case 0:
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin, GPIO_PIN_SET);
 8008020:	2201      	movs	r2, #1
 8008022:	2102      	movs	r1, #2
 8008024:	4878      	ldr	r0, [pc, #480]	; (8008208 <pl_callback_getSensor+0x218>)
 8008026:	f013 ff0d 	bl	801be44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 800802a:	2200      	movs	r2, #0
 800802c:	2110      	movs	r1, #16
 800802e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008032:	f013 ff07 	bl	801be44 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8008036:	2200      	movs	r2, #0
 8008038:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800803c:	4873      	ldr	r0, [pc, #460]	; (800820c <pl_callback_getSensor+0x21c>)
 800803e:	f013 ff01 	bl	801be44 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8008042:	2300      	movs	r3, #0
 8008044:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8008046:	e002      	b.n	800804e <pl_callback_getSensor+0x5e>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3301      	adds	r3, #1
 800804c:	607b      	str	r3, [r7, #4]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008054:	ddf8      	ble.n	8008048 <pl_callback_getSensor+0x58>
		break;
 8008056:	e0af      	b.n	80081b8 <pl_callback_getSensor+0x1c8>
	case 1:
		g_sensor_on[0] = g_ADCBuffer[1];
 8008058:	4b6d      	ldr	r3, [pc, #436]	; (8008210 <pl_callback_getSensor+0x220>)
 800805a:	885a      	ldrh	r2, [r3, #2]
 800805c:	4b6d      	ldr	r3, [pc, #436]	; (8008214 <pl_callback_getSensor+0x224>)
 800805e:	801a      	strh	r2, [r3, #0]
		g_sensor_on[1] = g_ADCBuffer[2];
 8008060:	4b6b      	ldr	r3, [pc, #428]	; (8008210 <pl_callback_getSensor+0x220>)
 8008062:	889a      	ldrh	r2, [r3, #4]
 8008064:	4b6b      	ldr	r3, [pc, #428]	; (8008214 <pl_callback_getSensor+0x224>)
 8008066:	805a      	strh	r2, [r3, #2]
		g_sensor_off[2] = g_ADCBuffer[3];
 8008068:	4b69      	ldr	r3, [pc, #420]	; (8008210 <pl_callback_getSensor+0x220>)
 800806a:	88da      	ldrh	r2, [r3, #6]
 800806c:	4b6a      	ldr	r3, [pc, #424]	; (8008218 <pl_callback_getSensor+0x228>)
 800806e:	809a      	strh	r2, [r3, #4]
		g_sensor_off[3] = g_ADCBuffer[4];
 8008070:	4b67      	ldr	r3, [pc, #412]	; (8008210 <pl_callback_getSensor+0x220>)
 8008072:	891a      	ldrh	r2, [r3, #8]
 8008074:	4b68      	ldr	r3, [pc, #416]	; (8008218 <pl_callback_getSensor+0x228>)
 8008076:	80da      	strh	r2, [r3, #6]
		g_sensor_off[4] = g_ADCBuffer[5];
 8008078:	4b65      	ldr	r3, [pc, #404]	; (8008210 <pl_callback_getSensor+0x220>)
 800807a:	895a      	ldrh	r2, [r3, #10]
 800807c:	4b66      	ldr	r3, [pc, #408]	; (8008218 <pl_callback_getSensor+0x228>)
 800807e:	811a      	strh	r2, [r3, #8]

		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8008080:	2200      	movs	r2, #0
 8008082:	2102      	movs	r1, #2
 8008084:	4860      	ldr	r0, [pc, #384]	; (8008208 <pl_callback_getSensor+0x218>)
 8008086:	f013 fedd 	bl	801be44 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin, GPIO_PIN_SET);
 800808a:	2201      	movs	r2, #1
 800808c:	2110      	movs	r1, #16
 800808e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008092:	f013 fed7 	bl	801be44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8008096:	2200      	movs	r2, #0
 8008098:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800809c:	485b      	ldr	r0, [pc, #364]	; (800820c <pl_callback_getSensor+0x21c>)
 800809e:	f013 fed1 	bl	801be44 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 80080a2:	2300      	movs	r3, #0
 80080a4:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 80080a6:	e002      	b.n	80080ae <pl_callback_getSensor+0xbe>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	3301      	adds	r3, #1
 80080ac:	607b      	str	r3, [r7, #4]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080b4:	ddf8      	ble.n	80080a8 <pl_callback_getSensor+0xb8>
		break;
 80080b6:	e07f      	b.n	80081b8 <pl_callback_getSensor+0x1c8>
	case 2:
		g_sensor_on[2] = g_ADCBuffer[3];
 80080b8:	4b55      	ldr	r3, [pc, #340]	; (8008210 <pl_callback_getSensor+0x220>)
 80080ba:	88da      	ldrh	r2, [r3, #6]
 80080bc:	4b55      	ldr	r3, [pc, #340]	; (8008214 <pl_callback_getSensor+0x224>)
 80080be:	809a      	strh	r2, [r3, #4]
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 80080c0:	2200      	movs	r2, #0
 80080c2:	2102      	movs	r1, #2
 80080c4:	4850      	ldr	r0, [pc, #320]	; (8008208 <pl_callback_getSensor+0x218>)
 80080c6:	f013 febd 	bl	801be44 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 80080ca:	2200      	movs	r2, #0
 80080cc:	2110      	movs	r1, #16
 80080ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80080d2:	f013 feb7 	bl	801be44 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin, GPIO_PIN_SET);
 80080d6:	2201      	movs	r2, #1
 80080d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80080dc:	484b      	ldr	r0, [pc, #300]	; (800820c <pl_callback_getSensor+0x21c>)
 80080de:	f013 feb1 	bl	801be44 <HAL_GPIO_WritePin>
		j=0;
 80080e2:	2300      	movs	r3, #0
 80080e4:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 80080e6:	e002      	b.n	80080ee <pl_callback_getSensor+0xfe>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	3301      	adds	r3, #1
 80080ec:	607b      	str	r3, [r7, #4]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080f4:	ddf8      	ble.n	80080e8 <pl_callback_getSensor+0xf8>
		break;
 80080f6:	e05f      	b.n	80081b8 <pl_callback_getSensor+0x1c8>
	case 3:
		g_sensor_off[0] = g_ADCBuffer[1];
 80080f8:	4b45      	ldr	r3, [pc, #276]	; (8008210 <pl_callback_getSensor+0x220>)
 80080fa:	885a      	ldrh	r2, [r3, #2]
 80080fc:	4b46      	ldr	r3, [pc, #280]	; (8008218 <pl_callback_getSensor+0x228>)
 80080fe:	801a      	strh	r2, [r3, #0]
		g_sensor_off[1] = g_ADCBuffer[2];
 8008100:	4b43      	ldr	r3, [pc, #268]	; (8008210 <pl_callback_getSensor+0x220>)
 8008102:	889a      	ldrh	r2, [r3, #4]
 8008104:	4b44      	ldr	r3, [pc, #272]	; (8008218 <pl_callback_getSensor+0x228>)
 8008106:	805a      	strh	r2, [r3, #2]
		g_sensor_on[3] = g_ADCBuffer[4];
 8008108:	4b41      	ldr	r3, [pc, #260]	; (8008210 <pl_callback_getSensor+0x220>)
 800810a:	891a      	ldrh	r2, [r3, #8]
 800810c:	4b41      	ldr	r3, [pc, #260]	; (8008214 <pl_callback_getSensor+0x224>)
 800810e:	80da      	strh	r2, [r3, #6]
		g_sensor_on[4] = g_ADCBuffer[5];
 8008110:	4b3f      	ldr	r3, [pc, #252]	; (8008210 <pl_callback_getSensor+0x220>)
 8008112:	895a      	ldrh	r2, [r3, #10]
 8008114:	4b3f      	ldr	r3, [pc, #252]	; (8008214 <pl_callback_getSensor+0x224>)
 8008116:	811a      	strh	r2, [r3, #8]


		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8008118:	2200      	movs	r2, #0
 800811a:	2102      	movs	r1, #2
 800811c:	483a      	ldr	r0, [pc, #232]	; (8008208 <pl_callback_getSensor+0x218>)
 800811e:	f013 fe91 	bl	801be44 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8008122:	2200      	movs	r2, #0
 8008124:	2110      	movs	r1, #16
 8008126:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800812a:	f013 fe8b 	bl	801be44 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 800812e:	2200      	movs	r2, #0
 8008130:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008134:	4835      	ldr	r0, [pc, #212]	; (800820c <pl_callback_getSensor+0x21c>)
 8008136:	f013 fe85 	bl	801be44 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 800813a:	2300      	movs	r3, #0
 800813c:	607b      	str	r3, [r7, #4]
		while (j <= 50) {j++;}
 800813e:	e002      	b.n	8008146 <pl_callback_getSensor+0x156>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	3301      	adds	r3, #1
 8008144:	607b      	str	r3, [r7, #4]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2b32      	cmp	r3, #50	; 0x32
 800814a:	ddf9      	ble.n	8008140 <pl_callback_getSensor+0x150>
		V_battAD = g_ADCBuffer[0];
 800814c:	4b30      	ldr	r3, [pc, #192]	; (8008210 <pl_callback_getSensor+0x220>)
 800814e:	881b      	ldrh	r3, [r3, #0]
 8008150:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 4095.0 * (100.0 + 50.0) / 50.0;
 8008152:	887b      	ldrh	r3, [r7, #2]
 8008154:	ee07 3a90 	vmov	s15, r3
 8008158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800815c:	ee17 0a90 	vmov	r0, s15
 8008160:	f7f8 fa1a 	bl	8000598 <__aeabi_f2d>
 8008164:	a320      	add	r3, pc, #128	; (adr r3, 80081e8 <pl_callback_getSensor+0x1f8>)
 8008166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816a:	f7f8 fa6d 	bl	8000648 <__aeabi_dmul>
 800816e:	4602      	mov	r2, r0
 8008170:	460b      	mov	r3, r1
 8008172:	4610      	mov	r0, r2
 8008174:	4619      	mov	r1, r3
 8008176:	a31e      	add	r3, pc, #120	; (adr r3, 80081f0 <pl_callback_getSensor+0x200>)
 8008178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817c:	f7f8 fb8e 	bl	800089c <__aeabi_ddiv>
 8008180:	4602      	mov	r2, r0
 8008182:	460b      	mov	r3, r1
 8008184:	4610      	mov	r0, r2
 8008186:	4619      	mov	r1, r3
 8008188:	a31b      	add	r3, pc, #108	; (adr r3, 80081f8 <pl_callback_getSensor+0x208>)
 800818a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818e:	f7f8 fa5b 	bl	8000648 <__aeabi_dmul>
 8008192:	4602      	mov	r2, r0
 8008194:	460b      	mov	r3, r1
 8008196:	4610      	mov	r0, r2
 8008198:	4619      	mov	r1, r3
 800819a:	f04f 0200 	mov.w	r2, #0
 800819e:	4b1f      	ldr	r3, [pc, #124]	; (800821c <pl_callback_getSensor+0x22c>)
 80081a0:	f7f8 fb7c 	bl	800089c <__aeabi_ddiv>
 80081a4:	4602      	mov	r2, r0
 80081a6:	460b      	mov	r3, r1
 80081a8:	4610      	mov	r0, r2
 80081aa:	4619      	mov	r1, r3
 80081ac:	f7f8 fd24 	bl	8000bf8 <__aeabi_d2f>
 80081b0:	4603      	mov	r3, r0
 80081b2:	4a1b      	ldr	r2, [pc, #108]	; (8008220 <pl_callback_getSensor+0x230>)
 80081b4:	6013      	str	r3, [r2, #0]
		break;
 80081b6:	bf00      	nop

		break;
	}


	AD_step++;
 80081b8:	4b12      	ldr	r3, [pc, #72]	; (8008204 <pl_callback_getSensor+0x214>)
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	3301      	adds	r3, #1
 80081be:	b2da      	uxtb	r2, r3
 80081c0:	4b10      	ldr	r3, [pc, #64]	; (8008204 <pl_callback_getSensor+0x214>)
 80081c2:	701a      	strb	r2, [r3, #0]
	//for(j=0;j<=2000;j++){}
	if (AD_step != 4) {
 80081c4:	4b0f      	ldr	r3, [pc, #60]	; (8008204 <pl_callback_getSensor+0x214>)
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	2b04      	cmp	r3, #4
 80081ca:	d005      	beq.n	80081d8 <pl_callback_getSensor+0x1e8>
		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 80081cc:	2206      	movs	r2, #6
 80081ce:	4910      	ldr	r1, [pc, #64]	; (8008210 <pl_callback_getSensor+0x220>)
 80081d0:	480b      	ldr	r0, [pc, #44]	; (8008200 <pl_callback_getSensor+0x210>)
 80081d2:	f011 fad5 	bl	8019780 <HAL_ADC_Start_DMA>
	 the HAL_ADC_ConvCpltCallback could be implemented in the user file
	 */
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer)/sizeof(uint16_t));
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
	//	sizeof(g_ADCBuffer) / sizeof(uint16_t));
}
 80081d6:	e002      	b.n	80081de <pl_callback_getSensor+0x1ee>
		AD_step = 0;
 80081d8:	4b0a      	ldr	r3, [pc, #40]	; (8008204 <pl_callback_getSensor+0x214>)
 80081da:	2200      	movs	r2, #0
 80081dc:	701a      	strb	r2, [r3, #0]
}
 80081de:	bf00      	nop
 80081e0:	3708      	adds	r7, #8
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	66666666 	.word	0x66666666
 80081ec:	400a6666 	.word	0x400a6666
 80081f0:	00000000 	.word	0x00000000
 80081f4:	40affe00 	.word	0x40affe00
 80081f8:	00000000 	.word	0x00000000
 80081fc:	4062c000 	.word	0x4062c000
 8008200:	20000738 	.word	0x20000738
 8008204:	2000070c 	.word	0x2000070c
 8008208:	48000400 	.word	0x48000400
 800820c:	48000800 	.word	0x48000800
 8008210:	20000700 	.word	0x20000700
 8008214:	20000710 	.word	0x20000710
 8008218:	2000071c 	.word	0x2000071c
 800821c:	40490000 	.word	0x40490000
 8008220:	20000728 	.word	0x20000728

08008224 <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 8008224:	b580      	push	{r7, lr}
 8008226:	af00      	add	r7, sp, #0

		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8008228:	2206      	movs	r2, #6
 800822a:	4903      	ldr	r1, [pc, #12]	; (8008238 <pl_interupt_getSensor+0x14>)
 800822c:	4803      	ldr	r0, [pc, #12]	; (800823c <pl_interupt_getSensor+0x18>)
 800822e:	f011 faa7 	bl	8019780 <HAL_ADC_Start_DMA>

}
 8008232:	bf00      	nop
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	20000700 	.word	0x20000700
 800823c:	20000738 	.word	0x20000738

08008240 <pl_timer_init>:

volatile uint32_t g_timCount;
float g_timCount_sec;
uint8_t count_mode;

void pl_timer_init(void){
 8008240:	b580      	push	{r7, lr}
 8008242:	af00      	add	r7, sp, #0
	count_mode=0;
 8008244:	4b05      	ldr	r3, [pc, #20]	; (800825c <pl_timer_init+0x1c>)
 8008246:	2200      	movs	r2, #0
 8008248:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 800824a:	4b05      	ldr	r3, [pc, #20]	; (8008260 <pl_timer_init+0x20>)
 800824c:	f04f 0200 	mov.w	r2, #0
 8008250:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);//割り込み
 8008252:	4804      	ldr	r0, [pc, #16]	; (8008264 <pl_timer_init+0x24>)
 8008254:	f015 fd9e 	bl	801dd94 <HAL_TIM_Base_Start_IT>
}
 8008258:	bf00      	nop
 800825a:	bd80      	pop	{r7, pc}
 800825c:	20000734 	.word	0x20000734
 8008260:	20000730 	.word	0x20000730
 8008264:	2000eea0 	.word	0x2000eea0

08008268 <interrupt_timer>:

void interrupt_timer(void){
 8008268:	b580      	push	{r7, lr}
 800826a:	af00      	add	r7, sp, #0
	g_timCount++;
 800826c:	4b10      	ldr	r3, [pc, #64]	; (80082b0 <interrupt_timer+0x48>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	3301      	adds	r3, #1
 8008272:	4a0f      	ldr	r2, [pc, #60]	; (80082b0 <interrupt_timer+0x48>)
 8008274:	6013      	str	r3, [r2, #0]
	if(count_mode==1){
 8008276:	4b0f      	ldr	r3, [pc, #60]	; (80082b4 <interrupt_timer+0x4c>)
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d112      	bne.n	80082a4 <interrupt_timer+0x3c>
	g_timCount_sec=g_timCount_sec + INTERRUPT_TIME;
 800827e:	4b0e      	ldr	r3, [pc, #56]	; (80082b8 <interrupt_timer+0x50>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4618      	mov	r0, r3
 8008284:	f7f8 f988 	bl	8000598 <__aeabi_f2d>
 8008288:	a307      	add	r3, pc, #28	; (adr r3, 80082a8 <interrupt_timer+0x40>)
 800828a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828e:	f7f8 f825 	bl	80002dc <__adddf3>
 8008292:	4602      	mov	r2, r0
 8008294:	460b      	mov	r3, r1
 8008296:	4610      	mov	r0, r2
 8008298:	4619      	mov	r1, r3
 800829a:	f7f8 fcad 	bl	8000bf8 <__aeabi_d2f>
 800829e:	4603      	mov	r3, r0
 80082a0:	4a05      	ldr	r2, [pc, #20]	; (80082b8 <interrupt_timer+0x50>)
 80082a2:	6013      	str	r3, [r2, #0]
	}

}
 80082a4:	bf00      	nop
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80082ac:	3f50624d 	.word	0x3f50624d
 80082b0:	2000072c 	.word	0x2000072c
 80082b4:	20000734 	.word	0x20000734
 80082b8:	20000730 	.word	0x20000730

080082bc <tic_timer>:

void tic_timer(void){
 80082bc:	b480      	push	{r7}
 80082be:	af00      	add	r7, sp, #0
	count_mode=1;
 80082c0:	4b05      	ldr	r3, [pc, #20]	; (80082d8 <tic_timer+0x1c>)
 80082c2:	2201      	movs	r2, #1
 80082c4:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 80082c6:	4b05      	ldr	r3, [pc, #20]	; (80082dc <tic_timer+0x20>)
 80082c8:	f04f 0200 	mov.w	r2, #0
 80082cc:	601a      	str	r2, [r3, #0]
}
 80082ce:	bf00      	nop
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr
 80082d8:	20000734 	.word	0x20000734
 80082dc:	20000730 	.word	0x20000730

080082e0 <toc_timer>:

float toc_timer(void){
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
	float timer;
	timer=g_timCount_sec;
 80082e6:	4b0a      	ldr	r3, [pc, #40]	; (8008310 <toc_timer+0x30>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	607b      	str	r3, [r7, #4]
	count_mode=0;
 80082ec:	4b09      	ldr	r3, [pc, #36]	; (8008314 <toc_timer+0x34>)
 80082ee:	2200      	movs	r2, #0
 80082f0:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 80082f2:	4b07      	ldr	r3, [pc, #28]	; (8008310 <toc_timer+0x30>)
 80082f4:	f04f 0200 	mov.w	r2, #0
 80082f8:	601a      	str	r2, [r3, #0]
	return timer;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	ee07 3a90 	vmov	s15, r3
}
 8008300:	eeb0 0a67 	vmov.f32	s0, s15
 8008304:	370c      	adds	r7, #12
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	20000730 	.word	0x20000730
 8008314:	20000734 	.word	0x20000734

08008318 <wait_ms>:

void wait_ms(uint32_t waitTime) {
 8008318:	b5b0      	push	{r4, r5, r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8008320:	4b1d      	ldr	r3, [pc, #116]	; (8008398 <wait_ms+0x80>)
 8008322:	2200      	movs	r2, #0
 8008324:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 8008326:	4b1d      	ldr	r3, [pc, #116]	; (800839c <wait_ms+0x84>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2200      	movs	r2, #0
 800832c:	625a      	str	r2, [r3, #36]	; 0x24
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 800832e:	bf00      	nop
 8008330:	4b19      	ldr	r3, [pc, #100]	; (8008398 <wait_ms+0x80>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	ee07 3a90 	vmov	s15, r3
 8008338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833c:	ee17 0a90 	vmov	r0, s15
 8008340:	f7f8 f92a 	bl	8000598 <__aeabi_f2d>
 8008344:	a312      	add	r3, pc, #72	; (adr r3, 8008390 <wait_ms+0x78>)
 8008346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834a:	f7f8 f97d 	bl	8000648 <__aeabi_dmul>
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	4610      	mov	r0, r2
 8008354:	4619      	mov	r1, r3
 8008356:	a30e      	add	r3, pc, #56	; (adr r3, 8008390 <wait_ms+0x78>)
 8008358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835c:	f7f8 fa9e 	bl	800089c <__aeabi_ddiv>
 8008360:	4602      	mov	r2, r0
 8008362:	460b      	mov	r3, r1
 8008364:	4614      	mov	r4, r2
 8008366:	461d      	mov	r5, r3
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f7f8 f8f3 	bl	8000554 <__aeabi_ui2d>
 800836e:	4602      	mov	r2, r0
 8008370:	460b      	mov	r3, r1
 8008372:	4620      	mov	r0, r4
 8008374:	4629      	mov	r1, r5
 8008376:	f7f8 fbd9 	bl	8000b2c <__aeabi_dcmplt>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1d7      	bne.n	8008330 <wait_ms+0x18>
        }

}
 8008380:	bf00      	nop
 8008382:	bf00      	nop
 8008384:	3708      	adds	r7, #8
 8008386:	46bd      	mov	sp, r7
 8008388:	bdb0      	pop	{r4, r5, r7, pc}
 800838a:	bf00      	nop
 800838c:	f3af 8000 	nop.w
 8008390:	d2f1a9fc 	.word	0xd2f1a9fc
 8008394:	3f50624d 	.word	0x3f50624d
 8008398:	2000072c 	.word	0x2000072c
 800839c:	2000eea0 	.word	0x2000eea0

080083a0 <wait_ms_NoReset>:

void wait_ms_NoReset(uint32_t waitTime) {
 80083a0:	b5b0      	push	{r4, r5, r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 80083a8:	4b1b      	ldr	r3, [pc, #108]	; (8008418 <wait_ms_NoReset+0x78>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	601a      	str	r2, [r3, #0]
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 80083ae:	bf00      	nop
 80083b0:	4b19      	ldr	r3, [pc, #100]	; (8008418 <wait_ms_NoReset+0x78>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	ee07 3a90 	vmov	s15, r3
 80083b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083bc:	ee17 0a90 	vmov	r0, s15
 80083c0:	f7f8 f8ea 	bl	8000598 <__aeabi_f2d>
 80083c4:	a312      	add	r3, pc, #72	; (adr r3, 8008410 <wait_ms_NoReset+0x70>)
 80083c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ca:	f7f8 f93d 	bl	8000648 <__aeabi_dmul>
 80083ce:	4602      	mov	r2, r0
 80083d0:	460b      	mov	r3, r1
 80083d2:	4610      	mov	r0, r2
 80083d4:	4619      	mov	r1, r3
 80083d6:	a30e      	add	r3, pc, #56	; (adr r3, 8008410 <wait_ms_NoReset+0x70>)
 80083d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083dc:	f7f8 fa5e 	bl	800089c <__aeabi_ddiv>
 80083e0:	4602      	mov	r2, r0
 80083e2:	460b      	mov	r3, r1
 80083e4:	4614      	mov	r4, r2
 80083e6:	461d      	mov	r5, r3
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7f8 f8b3 	bl	8000554 <__aeabi_ui2d>
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	4620      	mov	r0, r4
 80083f4:	4629      	mov	r1, r5
 80083f6:	f7f8 fb99 	bl	8000b2c <__aeabi_dcmplt>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1d7      	bne.n	80083b0 <wait_ms_NoReset+0x10>
        }

}
 8008400:	bf00      	nop
 8008402:	bf00      	nop
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bdb0      	pop	{r4, r5, r7, pc}
 800840a:	bf00      	nop
 800840c:	f3af 8000 	nop.w
 8008410:	d2f1a9fc 	.word	0xd2f1a9fc
 8008414:	3f50624d 	.word	0x3f50624d
 8008418:	2000072c 	.word	0x2000072c

0800841c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b08c      	sub	sp, #48	; 0x30
 8008420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8008422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008426:	2200      	movs	r2, #0
 8008428:	601a      	str	r2, [r3, #0]
 800842a:	605a      	str	r2, [r3, #4]
 800842c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800842e:	1d3b      	adds	r3, r7, #4
 8008430:	2220      	movs	r2, #32
 8008432:	2100      	movs	r1, #0
 8008434:	4618      	mov	r0, r3
 8008436:	f017 fe29 	bl	802008c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800843a:	4b56      	ldr	r3, [pc, #344]	; (8008594 <MX_ADC1_Init+0x178>)
 800843c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008440:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008442:	4b54      	ldr	r3, [pc, #336]	; (8008594 <MX_ADC1_Init+0x178>)
 8008444:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008448:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800844a:	4b52      	ldr	r3, [pc, #328]	; (8008594 <MX_ADC1_Init+0x178>)
 800844c:	2200      	movs	r2, #0
 800844e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008450:	4b50      	ldr	r3, [pc, #320]	; (8008594 <MX_ADC1_Init+0x178>)
 8008452:	2200      	movs	r2, #0
 8008454:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8008456:	4b4f      	ldr	r3, [pc, #316]	; (8008594 <MX_ADC1_Init+0x178>)
 8008458:	2200      	movs	r2, #0
 800845a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800845c:	4b4d      	ldr	r3, [pc, #308]	; (8008594 <MX_ADC1_Init+0x178>)
 800845e:	2201      	movs	r2, #1
 8008460:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8008462:	4b4c      	ldr	r3, [pc, #304]	; (8008594 <MX_ADC1_Init+0x178>)
 8008464:	2208      	movs	r2, #8
 8008466:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8008468:	4b4a      	ldr	r3, [pc, #296]	; (8008594 <MX_ADC1_Init+0x178>)
 800846a:	2200      	movs	r2, #0
 800846c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800846e:	4b49      	ldr	r3, [pc, #292]	; (8008594 <MX_ADC1_Init+0x178>)
 8008470:	2201      	movs	r2, #1
 8008472:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 8008474:	4b47      	ldr	r3, [pc, #284]	; (8008594 <MX_ADC1_Init+0x178>)
 8008476:	2206      	movs	r2, #6
 8008478:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800847a:	4b46      	ldr	r3, [pc, #280]	; (8008594 <MX_ADC1_Init+0x178>)
 800847c:	2200      	movs	r2, #0
 800847e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008482:	4b44      	ldr	r3, [pc, #272]	; (8008594 <MX_ADC1_Init+0x178>)
 8008484:	2200      	movs	r2, #0
 8008486:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008488:	4b42      	ldr	r3, [pc, #264]	; (8008594 <MX_ADC1_Init+0x178>)
 800848a:	2200      	movs	r2, #0
 800848c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800848e:	4b41      	ldr	r3, [pc, #260]	; (8008594 <MX_ADC1_Init+0x178>)
 8008490:	2201      	movs	r2, #1
 8008492:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008496:	4b3f      	ldr	r3, [pc, #252]	; (8008594 <MX_ADC1_Init+0x178>)
 8008498:	2200      	movs	r2, #0
 800849a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800849c:	4b3d      	ldr	r3, [pc, #244]	; (8008594 <MX_ADC1_Init+0x178>)
 800849e:	2200      	movs	r2, #0
 80084a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80084a4:	483b      	ldr	r0, [pc, #236]	; (8008594 <MX_ADC1_Init+0x178>)
 80084a6:	f010 fdc5 	bl	8019034 <HAL_ADC_Init>
 80084aa:	4603      	mov	r3, r0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d001      	beq.n	80084b4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80084b0:	f001 fac3 	bl	8009a3a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80084b4:	2300      	movs	r3, #0
 80084b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80084b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084bc:	4619      	mov	r1, r3
 80084be:	4835      	ldr	r0, [pc, #212]	; (8008594 <MX_ADC1_Init+0x178>)
 80084c0:	f012 fc12 	bl	801ace8 <HAL_ADCEx_MultiModeConfigChannel>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d001      	beq.n	80084ce <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80084ca:	f001 fab6 	bl	8009a3a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80084ce:	4b32      	ldr	r3, [pc, #200]	; (8008598 <MX_ADC1_Init+0x17c>)
 80084d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80084d2:	2306      	movs	r3, #6
 80084d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80084d6:	2301      	movs	r3, #1
 80084d8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80084da:	237f      	movs	r3, #127	; 0x7f
 80084dc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80084de:	2304      	movs	r3, #4
 80084e0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80084e2:	2300      	movs	r3, #0
 80084e4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80084e6:	1d3b      	adds	r3, r7, #4
 80084e8:	4619      	mov	r1, r3
 80084ea:	482a      	ldr	r0, [pc, #168]	; (8008594 <MX_ADC1_Init+0x178>)
 80084ec:	f011 fcd8 	bl	8019ea0 <HAL_ADC_ConfigChannel>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d001      	beq.n	80084fa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80084f6:	f001 faa0 	bl	8009a3a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80084fa:	4b28      	ldr	r3, [pc, #160]	; (800859c <MX_ADC1_Init+0x180>)
 80084fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80084fe:	230c      	movs	r3, #12
 8008500:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008502:	1d3b      	adds	r3, r7, #4
 8008504:	4619      	mov	r1, r3
 8008506:	4823      	ldr	r0, [pc, #140]	; (8008594 <MX_ADC1_Init+0x178>)
 8008508:	f011 fcca 	bl	8019ea0 <HAL_ADC_ConfigChannel>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8008512:	f001 fa92 	bl	8009a3a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8008516:	4b22      	ldr	r3, [pc, #136]	; (80085a0 <MX_ADC1_Init+0x184>)
 8008518:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800851a:	2312      	movs	r3, #18
 800851c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800851e:	1d3b      	adds	r3, r7, #4
 8008520:	4619      	mov	r1, r3
 8008522:	481c      	ldr	r0, [pc, #112]	; (8008594 <MX_ADC1_Init+0x178>)
 8008524:	f011 fcbc 	bl	8019ea0 <HAL_ADC_ConfigChannel>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800852e:	f001 fa84 	bl	8009a3a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8008532:	4b1c      	ldr	r3, [pc, #112]	; (80085a4 <MX_ADC1_Init+0x188>)
 8008534:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8008536:	2318      	movs	r3, #24
 8008538:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800853a:	1d3b      	adds	r3, r7, #4
 800853c:	4619      	mov	r1, r3
 800853e:	4815      	ldr	r0, [pc, #84]	; (8008594 <MX_ADC1_Init+0x178>)
 8008540:	f011 fcae 	bl	8019ea0 <HAL_ADC_ConfigChannel>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d001      	beq.n	800854e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800854a:	f001 fa76 	bl	8009a3a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800854e:	4b16      	ldr	r3, [pc, #88]	; (80085a8 <MX_ADC1_Init+0x18c>)
 8008550:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8008552:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008556:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008558:	1d3b      	adds	r3, r7, #4
 800855a:	4619      	mov	r1, r3
 800855c:	480d      	ldr	r0, [pc, #52]	; (8008594 <MX_ADC1_Init+0x178>)
 800855e:	f011 fc9f 	bl	8019ea0 <HAL_ADC_ConfigChannel>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d001      	beq.n	800856c <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8008568:	f001 fa67 	bl	8009a3a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800856c:	4b0f      	ldr	r3, [pc, #60]	; (80085ac <MX_ADC1_Init+0x190>)
 800856e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8008570:	f44f 7383 	mov.w	r3, #262	; 0x106
 8008574:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008576:	1d3b      	adds	r3, r7, #4
 8008578:	4619      	mov	r1, r3
 800857a:	4806      	ldr	r0, [pc, #24]	; (8008594 <MX_ADC1_Init+0x178>)
 800857c:	f011 fc90 	bl	8019ea0 <HAL_ADC_ConfigChannel>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d001      	beq.n	800858a <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8008586:	f001 fa58 	bl	8009a3a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800858a:	bf00      	nop
 800858c:	3730      	adds	r7, #48	; 0x30
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	20000738 	.word	0x20000738
 8008598:	2e300800 	.word	0x2e300800
 800859c:	3ef08000 	.word	0x3ef08000
 80085a0:	10c00010 	.word	0x10c00010
 80085a4:	0c900008 	.word	0x0c900008
 80085a8:	08600004 	.word	0x08600004
 80085ac:	04300002 	.word	0x04300002

080085b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b09e      	sub	sp, #120	; 0x78
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80085bc:	2200      	movs	r2, #0
 80085be:	601a      	str	r2, [r3, #0]
 80085c0:	605a      	str	r2, [r3, #4]
 80085c2:	609a      	str	r2, [r3, #8]
 80085c4:	60da      	str	r2, [r3, #12]
 80085c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80085c8:	f107 0314 	add.w	r3, r7, #20
 80085cc:	2250      	movs	r2, #80	; 0x50
 80085ce:	2100      	movs	r1, #0
 80085d0:	4618      	mov	r0, r3
 80085d2:	f017 fd5b 	bl	802008c <memset>
  if(adcHandle->Instance==ADC1)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085de:	f040 8082 	bne.w	80086e6 <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80085e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085e6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80085e8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80085ec:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80085ee:	f107 0314 	add.w	r3, r7, #20
 80085f2:	4618      	mov	r0, r3
 80085f4:	f014 fa22 	bl	801ca3c <HAL_RCCEx_PeriphCLKConfig>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80085fe:	f001 fa1c 	bl	8009a3a <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8008602:	4b3b      	ldr	r3, [pc, #236]	; (80086f0 <HAL_ADC_MspInit+0x140>)
 8008604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008606:	4a3a      	ldr	r2, [pc, #232]	; (80086f0 <HAL_ADC_MspInit+0x140>)
 8008608:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800860c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800860e:	4b38      	ldr	r3, [pc, #224]	; (80086f0 <HAL_ADC_MspInit+0x140>)
 8008610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008616:	613b      	str	r3, [r7, #16]
 8008618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800861a:	4b35      	ldr	r3, [pc, #212]	; (80086f0 <HAL_ADC_MspInit+0x140>)
 800861c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800861e:	4a34      	ldr	r2, [pc, #208]	; (80086f0 <HAL_ADC_MspInit+0x140>)
 8008620:	f043 0301 	orr.w	r3, r3, #1
 8008624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008626:	4b32      	ldr	r3, [pc, #200]	; (80086f0 <HAL_ADC_MspInit+0x140>)
 8008628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800862a:	f003 0301 	and.w	r3, r3, #1
 800862e:	60fb      	str	r3, [r7, #12]
 8008630:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008632:	4b2f      	ldr	r3, [pc, #188]	; (80086f0 <HAL_ADC_MspInit+0x140>)
 8008634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008636:	4a2e      	ldr	r2, [pc, #184]	; (80086f0 <HAL_ADC_MspInit+0x140>)
 8008638:	f043 0302 	orr.w	r3, r3, #2
 800863c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800863e:	4b2c      	ldr	r3, [pc, #176]	; (80086f0 <HAL_ADC_MspInit+0x140>)
 8008640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008642:	f003 0302 	and.w	r3, r3, #2
 8008646:	60bb      	str	r3, [r7, #8]
 8008648:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin;
 800864a:	230f      	movs	r3, #15
 800864c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800864e:	2303      	movs	r3, #3
 8008650:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008652:	2300      	movs	r3, #0
 8008654:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008656:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800865a:	4619      	mov	r1, r3
 800865c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008660:	f013 fa6e 	bl	801bb40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR1_Pin|BATT_Pin;
 8008664:	f241 0301 	movw	r3, #4097	; 0x1001
 8008668:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800866a:	2303      	movs	r3, #3
 800866c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800866e:	2300      	movs	r3, #0
 8008670:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008672:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008676:	4619      	mov	r1, r3
 8008678:	481e      	ldr	r0, [pc, #120]	; (80086f4 <HAL_ADC_MspInit+0x144>)
 800867a:	f013 fa61 	bl	801bb40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800867e:	4b1e      	ldr	r3, [pc, #120]	; (80086f8 <HAL_ADC_MspInit+0x148>)
 8008680:	4a1e      	ldr	r2, [pc, #120]	; (80086fc <HAL_ADC_MspInit+0x14c>)
 8008682:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8008684:	4b1c      	ldr	r3, [pc, #112]	; (80086f8 <HAL_ADC_MspInit+0x148>)
 8008686:	2205      	movs	r2, #5
 8008688:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800868a:	4b1b      	ldr	r3, [pc, #108]	; (80086f8 <HAL_ADC_MspInit+0x148>)
 800868c:	2200      	movs	r2, #0
 800868e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008690:	4b19      	ldr	r3, [pc, #100]	; (80086f8 <HAL_ADC_MspInit+0x148>)
 8008692:	2200      	movs	r2, #0
 8008694:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8008696:	4b18      	ldr	r3, [pc, #96]	; (80086f8 <HAL_ADC_MspInit+0x148>)
 8008698:	2280      	movs	r2, #128	; 0x80
 800869a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800869c:	4b16      	ldr	r3, [pc, #88]	; (80086f8 <HAL_ADC_MspInit+0x148>)
 800869e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086a2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80086a4:	4b14      	ldr	r3, [pc, #80]	; (80086f8 <HAL_ADC_MspInit+0x148>)
 80086a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80086aa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80086ac:	4b12      	ldr	r3, [pc, #72]	; (80086f8 <HAL_ADC_MspInit+0x148>)
 80086ae:	2220      	movs	r2, #32
 80086b0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80086b2:	4b11      	ldr	r3, [pc, #68]	; (80086f8 <HAL_ADC_MspInit+0x148>)
 80086b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80086b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80086ba:	480f      	ldr	r0, [pc, #60]	; (80086f8 <HAL_ADC_MspInit+0x148>)
 80086bc:	f012 fd0c 	bl	801b0d8 <HAL_DMA_Init>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d001      	beq.n	80086ca <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 80086c6:	f001 f9b8 	bl	8009a3a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a0a      	ldr	r2, [pc, #40]	; (80086f8 <HAL_ADC_MspInit+0x148>)
 80086ce:	655a      	str	r2, [r3, #84]	; 0x54
 80086d0:	4a09      	ldr	r2, [pc, #36]	; (80086f8 <HAL_ADC_MspInit+0x148>)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80086d6:	2200      	movs	r2, #0
 80086d8:	2100      	movs	r1, #0
 80086da:	2012      	movs	r0, #18
 80086dc:	f012 fcc7 	bl	801b06e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80086e0:	2012      	movs	r0, #18
 80086e2:	f012 fcde 	bl	801b0a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80086e6:	bf00      	nop
 80086e8:	3778      	adds	r7, #120	; 0x78
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	40021000 	.word	0x40021000
 80086f4:	48000400 	.word	0x48000400
 80086f8:	200007a4 	.word	0x200007a4
 80086fc:	40020008 	.word	0x40020008

08008700 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 8008708:	f7ff fc72 	bl	8007ff0 <pl_callback_getSensor>
}
 800870c:	bf00      	nop
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <cal_table>:

volatile char g_acc_flag;
volatile char g_MotorEnd_flag;


void cal_table(TRAPEZOID input,TARGET *target){
 8008714:	b084      	sub	sp, #16
 8008716:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	f107 0420 	add.w	r4, r7, #32
 8008722:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
if (input.displacement>=0){
 8008726:	edd7 7a08 	vldr	s15, [r7, #32]
 800872a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800872e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008732:	f2c0 819d 	blt.w	8008a70 <cal_table+0x35c>
	switch (g_acc_flag) {
 8008736:	4bcd      	ldr	r3, [pc, #820]	; (8008a6c <cal_table+0x358>)
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	b2db      	uxtb	r3, r3
 800873c:	2b06      	cmp	r3, #6
 800873e:	f200 833a 	bhi.w	8008db6 <cal_table+0x6a2>
 8008742:	a201      	add	r2, pc, #4	; (adr r2, 8008748 <cal_table+0x34>)
 8008744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008748:	08008da9 	.word	0x08008da9
 800874c:	08008765 	.word	0x08008765
 8008750:	080088d7 	.word	0x080088d7
 8008754:	080089f5 	.word	0x080089f5
 8008758:	08008da9 	.word	0x08008da9
 800875c:	08008a21 	.word	0x08008a21
 8008760:	08008a47 	.word	0x08008a47
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity >= input.count_velocity){
 8008764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008766:	ed93 7a00 	vldr	s14, [r3]
 800876a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800876e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008776:	db0a      	blt.n	800878e <cal_table+0x7a>
				target->velocity = input.count_velocity;
 8008778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800877a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800877c:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 800877e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008780:	f04f 0200 	mov.w	r2, #0
 8008784:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 8008786:	4bb9      	ldr	r3, [pc, #740]	; (8008a6c <cal_table+0x358>)
 8008788:	2202      	movs	r2, #2
 800878a:	701a      	strb	r2, [r3, #0]
				target->velocity -= input.acceleration*(2*time_over);

				target->acceleration = -input.acceleration;
				g_acc_flag=3;
			}
		break;
 800878c:	e313      	b.n	8008db6 <cal_table+0x6a2>
			else if((input.displacement <= (2*target->velocity*target->velocity
 800878e:	ed97 7a08 	vldr	s14, [r7, #32]
 8008792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008794:	edd3 7a00 	vldr	s15, [r3]
 8008798:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800879c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800879e:	edd3 7a00 	vldr	s15, [r3]
 80087a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 80087a6:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80087aa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80087ae:	ee66 7a27 	vmul.f32	s15, s12, s15
 80087b2:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 80087b6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80087ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80087be:	ee66 7a27 	vmul.f32	s15, s12, s15
 80087c2:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 80087c6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80087ca:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80087ce:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80087d2:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((input.displacement <= (2*target->velocity*target->velocity
 80087d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80087da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087de:	d900      	bls.n	80087e2 <cal_table+0xce>
		break;
 80087e0:	e2e9      	b.n	8008db6 <cal_table+0x6a2>
				time_over=((2*target->velocity*target->velocity
 80087e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087e4:	edd3 7a00 	vldr	s15, [r3]
 80087e8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80087ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ee:	edd3 7a00 	vldr	s15, [r3]
 80087f2:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 80087f6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80087fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80087fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008802:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 8008806:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800880a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800880e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008812:	ee77 7a67 	vsub.f32	s15, s14, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 8008816:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800881a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800881e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008826:	edd7 7a08 	vldr	s15, [r7, #32]
 800882a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800882e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008830:	ed93 7a00 	vldr	s14, [r3]
				time_over=((2*target->velocity*target->velocity
 8008834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008838:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 800883c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	4618      	mov	r0, r3
 8008842:	f7f7 fea9 	bl	8000598 <__aeabi_f2d>
 8008846:	4604      	mov	r4, r0
 8008848:	460d      	mov	r5, r1
 800884a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884c:	4618      	mov	r0, r3
 800884e:	f7f7 fea3 	bl	8000598 <__aeabi_f2d>
 8008852:	f04f 0200 	mov.w	r2, #0
 8008856:	f04f 0300 	mov.w	r3, #0
 800885a:	f7f7 fef5 	bl	8000648 <__aeabi_dmul>
 800885e:	4602      	mov	r2, r0
 8008860:	460b      	mov	r3, r1
 8008862:	4690      	mov	r8, r2
 8008864:	4699      	mov	r9, r3
 8008866:	edd7 7a01 	vldr	s15, [r7, #4]
 800886a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800886e:	ee17 0a90 	vmov	r0, s15
 8008872:	f7f7 fe91 	bl	8000598 <__aeabi_f2d>
 8008876:	4602      	mov	r2, r0
 8008878:	460b      	mov	r3, r1
 800887a:	4640      	mov	r0, r8
 800887c:	4649      	mov	r1, r9
 800887e:	f7f7 fee3 	bl	8000648 <__aeabi_dmul>
 8008882:	4602      	mov	r2, r0
 8008884:	460b      	mov	r3, r1
 8008886:	4620      	mov	r0, r4
 8008888:	4629      	mov	r1, r5
 800888a:	f7f7 fd25 	bl	80002d8 <__aeabi_dsub>
 800888e:	4602      	mov	r2, r0
 8008890:	460b      	mov	r3, r1
 8008892:	4610      	mov	r0, r2
 8008894:	4619      	mov	r1, r3
 8008896:	f7f8 f9af 	bl	8000bf8 <__aeabi_d2f>
 800889a:	4602      	mov	r2, r0
 800889c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889e:	609a      	str	r2, [r3, #8]
				target->velocity -= input.acceleration*(2*time_over);
 80088a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088a2:	ed93 7a00 	vldr	s14, [r3]
 80088a6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80088aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80088ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80088b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80088b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80088ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088bc:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = -input.acceleration;
 80088c0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80088c4:	eef1 7a67 	vneg.f32	s15, s15
 80088c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ca:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 80088ce:	4b67      	ldr	r3, [pc, #412]	; (8008a6c <cal_table+0x358>)
 80088d0:	2203      	movs	r2, #3
 80088d2:	701a      	strb	r2, [r3, #0]
		break;
 80088d4:	e26f      	b.n	8008db6 <cal_table+0x6a2>
	case 2:
		//定常
		if (input.displacement-target->displacement <=
 80088d6:	ed97 7a08 	vldr	s14, [r7, #32]
 80088da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80088e0:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 80088e4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80088e8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80088ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 80088f0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80088f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80088f8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80088fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008900:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008904:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008908:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800890c:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (input.displacement-target->displacement <=
 8008910:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008918:	d900      	bls.n	800891c <cal_table+0x208>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.acceleration;
			g_acc_flag=3;
		}
		break;
 800891a:	e24c      	b.n	8008db6 <cal_table+0x6a2>
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 800891c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800891e:	ed93 7a02 	vldr	s14, [r3, #8]
 8008922:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008926:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800892a:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 800892e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008932:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008936:	ee66 7a27 	vmul.f32	s15, s12, s15
 800893a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800893e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008942:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 8008946:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800894a:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 800894e:	ee37 7a27 	vadd.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 8008952:	edd7 7a08 	vldr	s15, [r7, #32]
 8008956:	ee77 6a67 	vsub.f32	s13, s14, s15
 800895a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800895c:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8008960:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008964:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8008968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	4618      	mov	r0, r3
 800896e:	f7f7 fe13 	bl	8000598 <__aeabi_f2d>
 8008972:	4604      	mov	r4, r0
 8008974:	460d      	mov	r5, r1
 8008976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008978:	4618      	mov	r0, r3
 800897a:	f7f7 fe0d 	bl	8000598 <__aeabi_f2d>
 800897e:	f04f 0200 	mov.w	r2, #0
 8008982:	f04f 0300 	mov.w	r3, #0
 8008986:	f7f7 fe5f 	bl	8000648 <__aeabi_dmul>
 800898a:	4602      	mov	r2, r0
 800898c:	460b      	mov	r3, r1
 800898e:	4690      	mov	r8, r2
 8008990:	4699      	mov	r9, r3
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f7f7 fe00 	bl	8000598 <__aeabi_f2d>
 8008998:	4602      	mov	r2, r0
 800899a:	460b      	mov	r3, r1
 800899c:	4640      	mov	r0, r8
 800899e:	4649      	mov	r1, r9
 80089a0:	f7f7 fe52 	bl	8000648 <__aeabi_dmul>
 80089a4:	4602      	mov	r2, r0
 80089a6:	460b      	mov	r3, r1
 80089a8:	4620      	mov	r0, r4
 80089aa:	4629      	mov	r1, r5
 80089ac:	f7f7 fc94 	bl	80002d8 <__aeabi_dsub>
 80089b0:	4602      	mov	r2, r0
 80089b2:	460b      	mov	r3, r1
 80089b4:	4610      	mov	r0, r2
 80089b6:	4619      	mov	r1, r3
 80089b8:	f7f8 f91e 	bl	8000bf8 <__aeabi_d2f>
 80089bc:	4602      	mov	r2, r0
 80089be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c0:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 80089c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c4:	ed93 7a00 	vldr	s14, [r3]
 80089c8:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80089cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80089d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80089d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089da:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.acceleration;
 80089de:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80089e2:	eef1 7a67 	vneg.f32	s15, s15
 80089e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e8:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 80089ec:	4b1f      	ldr	r3, [pc, #124]	; (8008a6c <cal_table+0x358>)
 80089ee:	2203      	movs	r2, #3
 80089f0:	701a      	strb	r2, [r3, #0]
		break;
 80089f2:	e1e0      	b.n	8008db6 <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 80089f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f6:	ed93 7a00 	vldr	s14, [r3]
 80089fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80089fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a06:	d900      	bls.n	8008a0a <cal_table+0x2f6>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008a08:	e1d5      	b.n	8008db6 <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 8008a0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a0e:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8008a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a12:	f04f 0200 	mov.w	r2, #0
 8008a16:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008a18:	4b14      	ldr	r3, [pc, #80]	; (8008a6c <cal_table+0x358>)
 8008a1a:	2204      	movs	r2, #4
 8008a1c:	701a      	strb	r2, [r3, #0]
		break;
 8008a1e:	e1ca      	b.n	8008db6 <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 8008a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a22:	ed93 7a02 	vldr	s14, [r3, #8]
 8008a26:	edd7 7a08 	vldr	s15, [r7, #32]
 8008a2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a32:	da00      	bge.n	8008a36 <cal_table+0x322>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008a34:	e1bf      	b.n	8008db6 <cal_table+0x6a2>
			target->acceleration = 0;
 8008a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a38:	f04f 0200 	mov.w	r2, #0
 8008a3c:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008a3e:	4b0b      	ldr	r3, [pc, #44]	; (8008a6c <cal_table+0x358>)
 8008a40:	2204      	movs	r2, #4
 8008a42:	701a      	strb	r2, [r3, #0]
		break;
 8008a44:	e1b7      	b.n	8008db6 <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 8008a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a48:	ed93 7a02 	vldr	s14, [r3, #8]
 8008a4c:	edd7 7a08 	vldr	s15, [r7, #32]
 8008a50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a58:	da00      	bge.n	8008a5c <cal_table+0x348>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008a5a:	e1ac      	b.n	8008db6 <cal_table+0x6a2>
			target->acceleration = 0;
 8008a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a5e:	f04f 0200 	mov.w	r2, #0
 8008a62:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008a64:	4b01      	ldr	r3, [pc, #4]	; (8008a6c <cal_table+0x358>)
 8008a66:	2204      	movs	r2, #4
 8008a68:	701a      	strb	r2, [r3, #0]
		break;
 8008a6a:	e1a4      	b.n	8008db6 <cal_table+0x6a2>
 8008a6c:	20000808 	.word	0x20000808
	}
}else{
	switch (g_acc_flag) {
 8008a70:	4bce      	ldr	r3, [pc, #824]	; (8008dac <cal_table+0x698>)
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	2b06      	cmp	r3, #6
 8008a78:	f200 819d 	bhi.w	8008db6 <cal_table+0x6a2>
 8008a7c:	a201      	add	r2, pc, #4	; (adr r2, 8008a84 <cal_table+0x370>)
 8008a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a82:	bf00      	nop
 8008a84:	08008db5 	.word	0x08008db5
 8008a88:	08008aa1 	.word	0x08008aa1
 8008a8c:	08008c13 	.word	0x08008c13
 8008a90:	08008d29 	.word	0x08008d29
 8008a94:	08008d55 	.word	0x08008d55
 8008a98:	08008d5d 	.word	0x08008d5d
 8008a9c:	08008d83 	.word	0x08008d83
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity <= input.count_velocity){
 8008aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aa2:	ed93 7a00 	vldr	s14, [r3]
 8008aa6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008aaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ab2:	d80a      	bhi.n	8008aca <cal_table+0x3b6>
				target->velocity = input.count_velocity;
 8008ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab8:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 8008aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008abc:	f04f 0200 	mov.w	r2, #0
 8008ac0:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 8008ac2:	4bba      	ldr	r3, [pc, #744]	; (8008dac <cal_table+0x698>)
 8008ac4:	2202      	movs	r2, #2
 8008ac6:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.acceleration;
				g_acc_flag=3;
			}
		break;
 8008ac8:	e175      	b.n	8008db6 <cal_table+0x6a2>
			else if((-input.displacement <= (2*target->velocity*target->velocity
 8008aca:	edd7 7a08 	vldr	s15, [r7, #32]
 8008ace:	eeb1 7a67 	vneg.f32	s14, s15
 8008ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ad4:	edd3 7a00 	vldr	s15, [r3]
 8008ad8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ade:	edd3 7a00 	vldr	s15, [r3]
 8008ae2:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 8008ae6:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8008aea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008aee:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008af2:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 8008af6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008afa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008afe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008b02:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 8008b06:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008b0a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008b0e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008b12:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((-input.displacement <= (2*target->velocity*target->velocity
 8008b16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b1e:	d900      	bls.n	8008b22 <cal_table+0x40e>
		break;
 8008b20:	e149      	b.n	8008db6 <cal_table+0x6a2>
				time_over=(-(2*target->velocity*target->velocity
 8008b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b24:	edd3 7a00 	vldr	s15, [r3]
 8008b28:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b2e:	edd3 7a00 	vldr	s15, [r3]
 8008b32:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 8008b36:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8008b3a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008b42:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 8008b46:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8008b4a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008b4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008b52:	ee77 7a67 	vsub.f32	s15, s14, s15
				time_over=(-(2*target->velocity*target->velocity
 8008b56:	eef1 7a67 	vneg.f32	s15, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 8008b5a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008b5e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008b62:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b6a:	edd7 7a08 	vldr	s15, [r7, #32]
 8008b6e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b74:	ed93 7a00 	vldr	s14, [r3]
				time_over=(-(2*target->velocity*target->velocity
 8008b78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b7c:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8008b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7f7 fd07 	bl	8000598 <__aeabi_f2d>
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	460d      	mov	r5, r1
 8008b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7f7 fd01 	bl	8000598 <__aeabi_f2d>
 8008b96:	f04f 0200 	mov.w	r2, #0
 8008b9a:	f04f 0300 	mov.w	r3, #0
 8008b9e:	f7f7 fd53 	bl	8000648 <__aeabi_dmul>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	4690      	mov	r8, r2
 8008ba8:	4699      	mov	r9, r3
 8008baa:	edd7 7a01 	vldr	s15, [r7, #4]
 8008bae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008bb2:	ee17 0a90 	vmov	r0, s15
 8008bb6:	f7f7 fcef 	bl	8000598 <__aeabi_f2d>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	4640      	mov	r0, r8
 8008bc0:	4649      	mov	r1, r9
 8008bc2:	f7f7 fd41 	bl	8000648 <__aeabi_dmul>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	4620      	mov	r0, r4
 8008bcc:	4629      	mov	r1, r5
 8008bce:	f7f7 fb85 	bl	80002dc <__adddf3>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	4610      	mov	r0, r2
 8008bd8:	4619      	mov	r1, r3
 8008bda:	f7f8 f80d 	bl	8000bf8 <__aeabi_d2f>
 8008bde:	4602      	mov	r2, r0
 8008be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be2:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 8008be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be6:	ed93 7a00 	vldr	s14, [r3]
 8008bea:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008bee:	edd7 7a01 	vldr	s15, [r7, #4]
 8008bf2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008bf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c00:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.acceleration;
 8008c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c08:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 8008c0a:	4b68      	ldr	r3, [pc, #416]	; (8008dac <cal_table+0x698>)
 8008c0c:	2203      	movs	r2, #3
 8008c0e:	701a      	strb	r2, [r3, #0]
		break;
 8008c10:	e0d1      	b.n	8008db6 <cal_table+0x6a2>
	case 2:
		//定常
		if (-input.displacement+target->displacement <=
 8008c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c14:	ed93 7a02 	vldr	s14, [r3, #8]
 8008c18:	edd7 7a08 	vldr	s15, [r7, #32]
 8008c1c:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 8008c20:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008c24:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008c28:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 8008c2c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008c30:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008c34:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008c38:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008c3c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008c40:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008c44:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008c48:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (-input.displacement+target->displacement <=
 8008c4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c54:	d900      	bls.n	8008c58 <cal_table+0x544>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.acceleration;
			g_acc_flag=3;
		}
		break;
 8008c56:	e0ae      	b.n	8008db6 <cal_table+0x6a2>
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8008c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c5a:	ed93 7a02 	vldr	s14, [r3, #8]
 8008c5e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008c62:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008c66:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 8008c6a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008c6e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008c72:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008c76:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008c7a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008c7e:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 8008c82:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008c86:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8008c8a:	ee37 7a67 	vsub.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 8008c8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8008c92:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c98:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8008c9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ca0:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8008ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7f7 fc75 	bl	8000598 <__aeabi_f2d>
 8008cae:	4604      	mov	r4, r0
 8008cb0:	460d      	mov	r5, r1
 8008cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7f7 fc6f 	bl	8000598 <__aeabi_f2d>
 8008cba:	f04f 0200 	mov.w	r2, #0
 8008cbe:	f04f 0300 	mov.w	r3, #0
 8008cc2:	f7f7 fcc1 	bl	8000648 <__aeabi_dmul>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	460b      	mov	r3, r1
 8008cca:	4690      	mov	r8, r2
 8008ccc:	4699      	mov	r9, r3
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f7f7 fc62 	bl	8000598 <__aeabi_f2d>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	4640      	mov	r0, r8
 8008cda:	4649      	mov	r1, r9
 8008cdc:	f7f7 fcb4 	bl	8000648 <__aeabi_dmul>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	4629      	mov	r1, r5
 8008ce8:	f7f7 faf8 	bl	80002dc <__adddf3>
 8008cec:	4602      	mov	r2, r0
 8008cee:	460b      	mov	r3, r1
 8008cf0:	4610      	mov	r0, r2
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	f7f7 ff80 	bl	8000bf8 <__aeabi_d2f>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cfc:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 8008cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d00:	ed93 7a00 	vldr	s14, [r3]
 8008d04:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008d08:	edd7 7a01 	vldr	s15, [r7, #4]
 8008d0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d16:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.acceleration;
 8008d1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d1e:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 8008d20:	4b22      	ldr	r3, [pc, #136]	; (8008dac <cal_table+0x698>)
 8008d22:	2203      	movs	r2, #3
 8008d24:	701a      	strb	r2, [r3, #0]
		break;
 8008d26:	e046      	b.n	8008db6 <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 8008d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d2a:	ed93 7a00 	vldr	s14, [r3]
 8008d2e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008d32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d3a:	da00      	bge.n	8008d3e <cal_table+0x62a>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008d3c:	e03b      	b.n	8008db6 <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 8008d3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d42:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8008d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d46:	f04f 0200 	mov.w	r2, #0
 8008d4a:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008d4c:	4b17      	ldr	r3, [pc, #92]	; (8008dac <cal_table+0x698>)
 8008d4e:	2204      	movs	r2, #4
 8008d50:	701a      	strb	r2, [r3, #0]
		break;
 8008d52:	e030      	b.n	8008db6 <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		g_MotorEnd_flag=1;
 8008d54:	4b16      	ldr	r3, [pc, #88]	; (8008db0 <cal_table+0x69c>)
 8008d56:	2201      	movs	r2, #1
 8008d58:	701a      	strb	r2, [r3, #0]
		break;
 8008d5a:	e02c      	b.n	8008db6 <cal_table+0x6a2>
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 8008d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d5e:	ed93 7a02 	vldr	s14, [r3, #8]
 8008d62:	edd7 7a08 	vldr	s15, [r7, #32]
 8008d66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d6e:	d900      	bls.n	8008d72 <cal_table+0x65e>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008d70:	e021      	b.n	8008db6 <cal_table+0x6a2>
			target->acceleration = 0;
 8008d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d74:	f04f 0200 	mov.w	r2, #0
 8008d78:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008d7a:	4b0c      	ldr	r3, [pc, #48]	; (8008dac <cal_table+0x698>)
 8008d7c:	2204      	movs	r2, #4
 8008d7e:	701a      	strb	r2, [r3, #0]
		break;
 8008d80:	e019      	b.n	8008db6 <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 8008d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d84:	ed93 7a02 	vldr	s14, [r3, #8]
 8008d88:	edd7 7a08 	vldr	s15, [r7, #32]
 8008d8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d94:	d900      	bls.n	8008d98 <cal_table+0x684>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008d96:	e00e      	b.n	8008db6 <cal_table+0x6a2>
			target->acceleration = 0;
 8008d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d9a:	f04f 0200 	mov.w	r2, #0
 8008d9e:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008da0:	4b02      	ldr	r3, [pc, #8]	; (8008dac <cal_table+0x698>)
 8008da2:	2204      	movs	r2, #4
 8008da4:	701a      	strb	r2, [r3, #0]
		break;
 8008da6:	e006      	b.n	8008db6 <cal_table+0x6a2>
		break;
 8008da8:	bf00      	nop
 8008daa:	e004      	b.n	8008db6 <cal_table+0x6a2>
 8008dac:	20000808 	.word	0x20000808
 8008db0:	20000809 	.word	0x20000809
		break;
 8008db4:	bf00      	nop
	}

}

}
 8008db6:	bf00      	nop
 8008db8:	3708      	adds	r7, #8
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8008dc0:	b004      	add	sp, #16
 8008dc2:	4770      	bx	lr
 8008dc4:	0000      	movs	r0, r0
	...

08008dc8 <cal_mollifier_table>:





void cal_mollifier_table(MOLLIFIER input,TARGET *target){
 8008dc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008dcc:	b088      	sub	sp, #32
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	eef0 6a40 	vmov.f32	s13, s0
 8008dd4:	eeb0 7a60 	vmov.f32	s14, s1
 8008dd8:	eef0 7a41 	vmov.f32	s15, s2
 8008ddc:	6038      	str	r0, [r7, #0]
 8008dde:	edc7 6a01 	vstr	s13, [r7, #4]
 8008de2:	ed87 7a02 	vstr	s14, [r7, #8]
 8008de6:	edc7 7a03 	vstr	s15, [r7, #12]

float mollifier_T;
float old_velocity;
float time_delay=12;
 8008dea:	4bbf      	ldr	r3, [pc, #764]	; (80090e8 <cal_mollifier_table+0x320>)
 8008dec:	61fb      	str	r3, [r7, #28]
float time_delay2=-10;
 8008dee:	4bbf      	ldr	r3, [pc, #764]	; (80090ec <cal_mollifier_table+0x324>)
 8008df0:	61bb      	str	r3, [r7, #24]
	mollifier_timer+=INTERRUPT_TIME;
 8008df2:	4bbf      	ldr	r3, [pc, #764]	; (80090f0 <cal_mollifier_table+0x328>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7f7 fbce 	bl	8000598 <__aeabi_f2d>
 8008dfc:	a3b2      	add	r3, pc, #712	; (adr r3, 80090c8 <cal_mollifier_table+0x300>)
 8008dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e02:	f7f7 fa6b 	bl	80002dc <__adddf3>
 8008e06:	4602      	mov	r2, r0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	4610      	mov	r0, r2
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	f7f7 fef3 	bl	8000bf8 <__aeabi_d2f>
 8008e12:	4603      	mov	r3, r0
 8008e14:	4ab6      	ldr	r2, [pc, #728]	; (80090f0 <cal_mollifier_table+0x328>)
 8008e16:	6013      	str	r3, [r2, #0]
		mollifier_T=2*fabs(input.displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input.max_turning_velocity;
 8008e18:	edd7 7a01 	vldr	s15, [r7, #4]
 8008e1c:	eef0 7ae7 	vabs.f32	s15, s15
 8008e20:	ee17 0a90 	vmov	r0, s15
 8008e24:	f7f7 fbb8 	bl	8000598 <__aeabi_f2d>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	f7f7 fa56 	bl	80002dc <__adddf3>
 8008e30:	4602      	mov	r2, r0
 8008e32:	460b      	mov	r3, r1
 8008e34:	4610      	mov	r0, r2
 8008e36:	4619      	mov	r1, r3
 8008e38:	a3a5      	add	r3, pc, #660	; (adr r3, 80090d0 <cal_mollifier_table+0x308>)
 8008e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3e:	f7f7 fd2d 	bl	800089c <__aeabi_ddiv>
 8008e42:	4602      	mov	r2, r0
 8008e44:	460b      	mov	r3, r1
 8008e46:	4610      	mov	r0, r2
 8008e48:	4619      	mov	r1, r3
 8008e4a:	a3a3      	add	r3, pc, #652	; (adr r3, 80090d8 <cal_mollifier_table+0x310>)
 8008e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e50:	f7f7 fbfa 	bl	8000648 <__aeabi_dmul>
 8008e54:	4602      	mov	r2, r0
 8008e56:	460b      	mov	r3, r1
 8008e58:	4614      	mov	r4, r2
 8008e5a:	461d      	mov	r5, r3
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7f7 fb9a 	bl	8000598 <__aeabi_f2d>
 8008e64:	4602      	mov	r2, r0
 8008e66:	460b      	mov	r3, r1
 8008e68:	4620      	mov	r0, r4
 8008e6a:	4629      	mov	r1, r5
 8008e6c:	f7f7 fd16 	bl	800089c <__aeabi_ddiv>
 8008e70:	4602      	mov	r2, r0
 8008e72:	460b      	mov	r3, r1
 8008e74:	4610      	mov	r0, r2
 8008e76:	4619      	mov	r1, r3
 8008e78:	f7f7 febe 	bl	8000bf8 <__aeabi_d2f>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	617b      	str	r3, [r7, #20]
		if (mollifier_timer>-mollifier_T/2 && mollifier_timer<mollifier_T/2){
 8008e80:	edd7 7a05 	vldr	s15, [r7, #20]
 8008e84:	eef1 7a67 	vneg.f32	s15, s15
 8008e88:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008e8c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008e90:	4b97      	ldr	r3, [pc, #604]	; (80090f0 <cal_mollifier_table+0x328>)
 8008e92:	edd3 7a00 	vldr	s15, [r3]
 8008e96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e9e:	f140 81a2 	bpl.w	80091e6 <cal_mollifier_table+0x41e>
 8008ea2:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ea6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008eaa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008eae:	4b90      	ldr	r3, [pc, #576]	; (80090f0 <cal_mollifier_table+0x328>)
 8008eb0:	edd3 7a00 	vldr	s15, [r3]
 8008eb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ebc:	f340 8193 	ble.w	80091e6 <cal_mollifier_table+0x41e>
			old_velocity=target->velocity;
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	613b      	str	r3, [r7, #16]
			target->velocity = cal_mollifier_velocity(mollifier_timer,mollifier_T,input.displacement);
 8008ec6:	4b8a      	ldr	r3, [pc, #552]	; (80090f0 <cal_mollifier_table+0x328>)
 8008ec8:	edd3 7a00 	vldr	s15, [r3]
 8008ecc:	ed97 7a01 	vldr	s14, [r7, #4]
 8008ed0:	eeb0 1a47 	vmov.f32	s2, s14
 8008ed4:	edd7 0a05 	vldr	s1, [r7, #20]
 8008ed8:	eeb0 0a67 	vmov.f32	s0, s15
 8008edc:	f000 f9ac 	bl	8009238 <cal_mollifier_velocity>
 8008ee0:	eef0 7a40 	vmov.f32	s15, s0
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	edc3 7a00 	vstr	s15, [r3]

			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8008eea:	4b81      	ldr	r3, [pc, #516]	; (80090f0 <cal_mollifier_table+0x328>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7f7 fb52 	bl	8000598 <__aeabi_f2d>
 8008ef4:	4604      	mov	r4, r0
 8008ef6:	460d      	mov	r5, r1
 8008ef8:	edd7 7a05 	vldr	s15, [r7, #20]
 8008efc:	eef1 7a67 	vneg.f32	s15, s15
 8008f00:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008f04:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008f08:	ee16 0a90 	vmov	r0, s13
 8008f0c:	f7f7 fb44 	bl	8000598 <__aeabi_f2d>
 8008f10:	a373      	add	r3, pc, #460	; (adr r3, 80090e0 <cal_mollifier_table+0x318>)
 8008f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f16:	f7f7 fcc1 	bl	800089c <__aeabi_ddiv>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	4690      	mov	r8, r2
 8008f20:	4699      	mov	r9, r3
 8008f22:	69f8      	ldr	r0, [r7, #28]
 8008f24:	f7f7 fb38 	bl	8000598 <__aeabi_f2d>
 8008f28:	a367      	add	r3, pc, #412	; (adr r3, 80090c8 <cal_mollifier_table+0x300>)
 8008f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2e:	f7f7 fb8b 	bl	8000648 <__aeabi_dmul>
 8008f32:	4602      	mov	r2, r0
 8008f34:	460b      	mov	r3, r1
 8008f36:	4640      	mov	r0, r8
 8008f38:	4649      	mov	r1, r9
 8008f3a:	f7f7 f9cf 	bl	80002dc <__adddf3>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	460b      	mov	r3, r1
 8008f42:	4620      	mov	r0, r4
 8008f44:	4629      	mov	r1, r5
 8008f46:	f7f7 fdf1 	bl	8000b2c <__aeabi_dcmplt>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d027      	beq.n	8008fa0 <cal_mollifier_table+0x1d8>
				target->acceleration = cal_mollifier_acceleration(-mollifier_T/2/1.316,mollifier_T,input.displacement);
 8008f50:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f54:	eef1 7a67 	vneg.f32	s15, s15
 8008f58:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008f5c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008f60:	ee16 0a90 	vmov	r0, s13
 8008f64:	f7f7 fb18 	bl	8000598 <__aeabi_f2d>
 8008f68:	a35d      	add	r3, pc, #372	; (adr r3, 80090e0 <cal_mollifier_table+0x318>)
 8008f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6e:	f7f7 fc95 	bl	800089c <__aeabi_ddiv>
 8008f72:	4602      	mov	r2, r0
 8008f74:	460b      	mov	r3, r1
 8008f76:	4610      	mov	r0, r2
 8008f78:	4619      	mov	r1, r3
 8008f7a:	f7f7 fe3d 	bl	8000bf8 <__aeabi_d2f>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	edd7 7a01 	vldr	s15, [r7, #4]
 8008f84:	eeb0 1a67 	vmov.f32	s2, s15
 8008f88:	edd7 0a05 	vldr	s1, [r7, #20]
 8008f8c:	ee00 3a10 	vmov	s0, r3
 8008f90:	f000 f9b2 	bl	80092f8 <cal_mollifier_acceleration>
 8008f94:	eef0 7a40 	vmov.f32	s15, s0
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8008f9e:	e137      	b.n	8009210 <cal_mollifier_table+0x448>
			}else if(mollifier_timer<0){
 8008fa0:	4b53      	ldr	r3, [pc, #332]	; (80090f0 <cal_mollifier_table+0x328>)
 8008fa2:	edd3 7a00 	vldr	s15, [r3]
 8008fa6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fae:	d52b      	bpl.n	8009008 <cal_mollifier_table+0x240>
				target->acceleration = cal_mollifier_acceleration(mollifier_timer-INTERRUPT_TIME*time_delay,mollifier_T,input.displacement);
 8008fb0:	4b4f      	ldr	r3, [pc, #316]	; (80090f0 <cal_mollifier_table+0x328>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7f7 faef 	bl	8000598 <__aeabi_f2d>
 8008fba:	4604      	mov	r4, r0
 8008fbc:	460d      	mov	r5, r1
 8008fbe:	69f8      	ldr	r0, [r7, #28]
 8008fc0:	f7f7 faea 	bl	8000598 <__aeabi_f2d>
 8008fc4:	a340      	add	r3, pc, #256	; (adr r3, 80090c8 <cal_mollifier_table+0x300>)
 8008fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fca:	f7f7 fb3d 	bl	8000648 <__aeabi_dmul>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	f7f7 f97f 	bl	80002d8 <__aeabi_dsub>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	460b      	mov	r3, r1
 8008fde:	4610      	mov	r0, r2
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	f7f7 fe09 	bl	8000bf8 <__aeabi_d2f>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	edd7 7a01 	vldr	s15, [r7, #4]
 8008fec:	eeb0 1a67 	vmov.f32	s2, s15
 8008ff0:	edd7 0a05 	vldr	s1, [r7, #20]
 8008ff4:	ee00 3a10 	vmov	s0, r3
 8008ff8:	f000 f97e 	bl	80092f8 <cal_mollifier_acceleration>
 8008ffc:	eef0 7a40 	vmov.f32	s15, s0
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009006:	e103      	b.n	8009210 <cal_mollifier_table+0x448>
			}else if(mollifier_timer<mollifier_T/2/1.316+time_delay2*INTERRUPT_TIME){
 8009008:	4b39      	ldr	r3, [pc, #228]	; (80090f0 <cal_mollifier_table+0x328>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4618      	mov	r0, r3
 800900e:	f7f7 fac3 	bl	8000598 <__aeabi_f2d>
 8009012:	4604      	mov	r4, r0
 8009014:	460d      	mov	r5, r1
 8009016:	edd7 7a05 	vldr	s15, [r7, #20]
 800901a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800901e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009022:	ee16 0a90 	vmov	r0, s13
 8009026:	f7f7 fab7 	bl	8000598 <__aeabi_f2d>
 800902a:	a32d      	add	r3, pc, #180	; (adr r3, 80090e0 <cal_mollifier_table+0x318>)
 800902c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009030:	f7f7 fc34 	bl	800089c <__aeabi_ddiv>
 8009034:	4602      	mov	r2, r0
 8009036:	460b      	mov	r3, r1
 8009038:	4690      	mov	r8, r2
 800903a:	4699      	mov	r9, r3
 800903c:	69b8      	ldr	r0, [r7, #24]
 800903e:	f7f7 faab 	bl	8000598 <__aeabi_f2d>
 8009042:	a321      	add	r3, pc, #132	; (adr r3, 80090c8 <cal_mollifier_table+0x300>)
 8009044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009048:	f7f7 fafe 	bl	8000648 <__aeabi_dmul>
 800904c:	4602      	mov	r2, r0
 800904e:	460b      	mov	r3, r1
 8009050:	4640      	mov	r0, r8
 8009052:	4649      	mov	r1, r9
 8009054:	f7f7 f942 	bl	80002dc <__adddf3>
 8009058:	4602      	mov	r2, r0
 800905a:	460b      	mov	r3, r1
 800905c:	4620      	mov	r0, r4
 800905e:	4629      	mov	r1, r5
 8009060:	f7f7 fd64 	bl	8000b2c <__aeabi_dcmplt>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d044      	beq.n	80090f4 <cal_mollifier_table+0x32c>
				target->acceleration = cal_mollifier_acceleration(mollifier_timer-INTERRUPT_TIME*time_delay,mollifier_T,input.displacement);
 800906a:	4b21      	ldr	r3, [pc, #132]	; (80090f0 <cal_mollifier_table+0x328>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4618      	mov	r0, r3
 8009070:	f7f7 fa92 	bl	8000598 <__aeabi_f2d>
 8009074:	4604      	mov	r4, r0
 8009076:	460d      	mov	r5, r1
 8009078:	69f8      	ldr	r0, [r7, #28]
 800907a:	f7f7 fa8d 	bl	8000598 <__aeabi_f2d>
 800907e:	a312      	add	r3, pc, #72	; (adr r3, 80090c8 <cal_mollifier_table+0x300>)
 8009080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009084:	f7f7 fae0 	bl	8000648 <__aeabi_dmul>
 8009088:	4602      	mov	r2, r0
 800908a:	460b      	mov	r3, r1
 800908c:	4620      	mov	r0, r4
 800908e:	4629      	mov	r1, r5
 8009090:	f7f7 f922 	bl	80002d8 <__aeabi_dsub>
 8009094:	4602      	mov	r2, r0
 8009096:	460b      	mov	r3, r1
 8009098:	4610      	mov	r0, r2
 800909a:	4619      	mov	r1, r3
 800909c:	f7f7 fdac 	bl	8000bf8 <__aeabi_d2f>
 80090a0:	4603      	mov	r3, r0
 80090a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80090a6:	eeb0 1a67 	vmov.f32	s2, s15
 80090aa:	edd7 0a05 	vldr	s1, [r7, #20]
 80090ae:	ee00 3a10 	vmov	s0, r3
 80090b2:	f000 f921 	bl	80092f8 <cal_mollifier_acceleration>
 80090b6:	eef0 7a40 	vmov.f32	s15, s0
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 80090c0:	e0a6      	b.n	8009210 <cal_mollifier_table+0x448>
 80090c2:	bf00      	nop
 80090c4:	f3af 8000 	nop.w
 80090c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80090cc:	3f50624d 	.word	0x3f50624d
 80090d0:	f9db22d1 	.word	0xf9db22d1
 80090d4:	3fdc6a7e 	.word	0x3fdc6a7e
 80090d8:	362cef38 	.word	0x362cef38
 80090dc:	3fd78b56 	.word	0x3fd78b56
 80090e0:	04189375 	.word	0x04189375
 80090e4:	3ff50e56 	.word	0x3ff50e56
 80090e8:	41400000 	.word	0x41400000
 80090ec:	c1200000 	.word	0xc1200000
 80090f0:	20000804 	.word	0x20000804
			}else if(mollifier_timer<mollifier_T/2+time_delay2*INTERRUPT_TIME){
 80090f4:	4b4e      	ldr	r3, [pc, #312]	; (8009230 <cal_mollifier_table+0x468>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7f7 fa4d 	bl	8000598 <__aeabi_f2d>
 80090fe:	4604      	mov	r4, r0
 8009100:	460d      	mov	r5, r1
 8009102:	edd7 7a05 	vldr	s15, [r7, #20]
 8009106:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800910a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800910e:	ee16 0a90 	vmov	r0, s13
 8009112:	f7f7 fa41 	bl	8000598 <__aeabi_f2d>
 8009116:	4680      	mov	r8, r0
 8009118:	4689      	mov	r9, r1
 800911a:	69b8      	ldr	r0, [r7, #24]
 800911c:	f7f7 fa3c 	bl	8000598 <__aeabi_f2d>
 8009120:	a33f      	add	r3, pc, #252	; (adr r3, 8009220 <cal_mollifier_table+0x458>)
 8009122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009126:	f7f7 fa8f 	bl	8000648 <__aeabi_dmul>
 800912a:	4602      	mov	r2, r0
 800912c:	460b      	mov	r3, r1
 800912e:	4640      	mov	r0, r8
 8009130:	4649      	mov	r1, r9
 8009132:	f7f7 f8d3 	bl	80002dc <__adddf3>
 8009136:	4602      	mov	r2, r0
 8009138:	460b      	mov	r3, r1
 800913a:	4620      	mov	r0, r4
 800913c:	4629      	mov	r1, r5
 800913e:	f7f7 fcf5 	bl	8000b2c <__aeabi_dcmplt>
 8009142:	4603      	mov	r3, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d028      	beq.n	800919a <cal_mollifier_table+0x3d2>
				time_delay=0;
 8009148:	f04f 0300 	mov.w	r3, #0
 800914c:	61fb      	str	r3, [r7, #28]
				target->acceleration = cal_mollifier_acceleration(mollifier_T/2/1.316,mollifier_T,input.displacement);
 800914e:	edd7 7a05 	vldr	s15, [r7, #20]
 8009152:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009156:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800915a:	ee16 0a90 	vmov	r0, s13
 800915e:	f7f7 fa1b 	bl	8000598 <__aeabi_f2d>
 8009162:	a331      	add	r3, pc, #196	; (adr r3, 8009228 <cal_mollifier_table+0x460>)
 8009164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009168:	f7f7 fb98 	bl	800089c <__aeabi_ddiv>
 800916c:	4602      	mov	r2, r0
 800916e:	460b      	mov	r3, r1
 8009170:	4610      	mov	r0, r2
 8009172:	4619      	mov	r1, r3
 8009174:	f7f7 fd40 	bl	8000bf8 <__aeabi_d2f>
 8009178:	4603      	mov	r3, r0
 800917a:	edd7 7a01 	vldr	s15, [r7, #4]
 800917e:	eeb0 1a67 	vmov.f32	s2, s15
 8009182:	edd7 0a05 	vldr	s1, [r7, #20]
 8009186:	ee00 3a10 	vmov	s0, r3
 800918a:	f000 f8b5 	bl	80092f8 <cal_mollifier_acceleration>
 800918e:	eef0 7a40 	vmov.f32	s15, s0
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009198:	e03a      	b.n	8009210 <cal_mollifier_table+0x448>
			}else{
				target->acceleration = cal_mollifier_acceleration(mollifier_T/2-INTERRUPT_TIME,mollifier_T,input.displacement);
 800919a:	edd7 7a05 	vldr	s15, [r7, #20]
 800919e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80091a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80091a6:	ee16 0a90 	vmov	r0, s13
 80091aa:	f7f7 f9f5 	bl	8000598 <__aeabi_f2d>
 80091ae:	a31c      	add	r3, pc, #112	; (adr r3, 8009220 <cal_mollifier_table+0x458>)
 80091b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b4:	f7f7 f890 	bl	80002d8 <__aeabi_dsub>
 80091b8:	4602      	mov	r2, r0
 80091ba:	460b      	mov	r3, r1
 80091bc:	4610      	mov	r0, r2
 80091be:	4619      	mov	r1, r3
 80091c0:	f7f7 fd1a 	bl	8000bf8 <__aeabi_d2f>
 80091c4:	4603      	mov	r3, r0
 80091c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80091ca:	eeb0 1a67 	vmov.f32	s2, s15
 80091ce:	edd7 0a05 	vldr	s1, [r7, #20]
 80091d2:	ee00 3a10 	vmov	s0, r3
 80091d6:	f000 f88f 	bl	80092f8 <cal_mollifier_acceleration>
 80091da:	eef0 7a40 	vmov.f32	s15, s0
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 80091e4:	e014      	b.n	8009210 <cal_mollifier_table+0x448>
//			}
//			if(mollifier_timer>mollifier_T/2*0.9){
//							target->acceleration = -0.6*target->acceleration;
//			}
		}else{
			old_velocity=target->velocity;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	613b      	str	r3, [r7, #16]
			target->velocity=0;
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	f04f 0200 	mov.w	r2, #0
 80091f2:	601a      	str	r2, [r3, #0]
			target->acceleration = -target->velocity+old_velocity;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	edd3 7a00 	vldr	s15, [r3]
 80091fa:	ed97 7a04 	vldr	s14, [r7, #16]
 80091fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=4;
 8009208:	4b0a      	ldr	r3, [pc, #40]	; (8009234 <cal_mollifier_table+0x46c>)
 800920a:	2204      	movs	r2, #4
 800920c:	701a      	strb	r2, [r3, #0]

		}

}
 800920e:	bf00      	nop
 8009210:	bf00      	nop
 8009212:	3720      	adds	r7, #32
 8009214:	46bd      	mov	sp, r7
 8009216:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800921a:	bf00      	nop
 800921c:	f3af 8000 	nop.w
 8009220:	d2f1a9fc 	.word	0xd2f1a9fc
 8009224:	3f50624d 	.word	0x3f50624d
 8009228:	04189375 	.word	0x04189375
 800922c:	3ff50e56 	.word	0x3ff50e56
 8009230:	20000804 	.word	0x20000804
 8009234:	20000808 	.word	0x20000808

08009238 <cal_mollifier_velocity>:


float cal_mollifier_velocity(float t_now,float mollifier_T,float integral){
 8009238:	b5b0      	push	{r4, r5, r7, lr}
 800923a:	b086      	sub	sp, #24
 800923c:	af00      	add	r7, sp, #0
 800923e:	ed87 0a03 	vstr	s0, [r7, #12]
 8009242:	edc7 0a02 	vstr	s1, [r7, #8]
 8009246:	ed87 1a01 	vstr	s2, [r7, #4]
	float velocity;
	velocity=(2/mollifier_T)*integral/MOLLIFIER_INTEGRAL*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-t_now*t_now));
 800924a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800924e:	edd7 7a02 	vldr	s15, [r7, #8]
 8009252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009256:	edd7 7a01 	vldr	s15, [r7, #4]
 800925a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800925e:	ee17 0a90 	vmov	r0, s15
 8009262:	f7f7 f999 	bl	8000598 <__aeabi_f2d>
 8009266:	a322      	add	r3, pc, #136	; (adr r3, 80092f0 <cal_mollifier_velocity+0xb8>)
 8009268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926c:	f7f7 fb16 	bl	800089c <__aeabi_ddiv>
 8009270:	4602      	mov	r2, r0
 8009272:	460b      	mov	r3, r1
 8009274:	4614      	mov	r4, r2
 8009276:	461d      	mov	r5, r3
 8009278:	edd7 7a02 	vldr	s15, [r7, #8]
 800927c:	eeb1 7a67 	vneg.f32	s14, s15
 8009280:	edd7 7a02 	vldr	s15, [r7, #8]
 8009284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009288:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800928c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009290:	edd7 7a02 	vldr	s15, [r7, #8]
 8009294:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009298:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800929c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80092a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80092a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80092a8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80092ac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80092b0:	ee16 0a90 	vmov	r0, s13
 80092b4:	f7f7 f970 	bl	8000598 <__aeabi_f2d>
 80092b8:	4602      	mov	r2, r0
 80092ba:	460b      	mov	r3, r1
 80092bc:	ec43 2b10 	vmov	d0, r2, r3
 80092c0:	f019 fe0e 	bl	8022ee0 <exp>
 80092c4:	ec53 2b10 	vmov	r2, r3, d0
 80092c8:	4620      	mov	r0, r4
 80092ca:	4629      	mov	r1, r5
 80092cc:	f7f7 f9bc 	bl	8000648 <__aeabi_dmul>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	4610      	mov	r0, r2
 80092d6:	4619      	mov	r1, r3
 80092d8:	f7f7 fc8e 	bl	8000bf8 <__aeabi_d2f>
 80092dc:	4603      	mov	r3, r0
 80092de:	617b      	str	r3, [r7, #20]
	return velocity;
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	ee07 3a90 	vmov	s15, r3
}
 80092e6:	eeb0 0a67 	vmov.f32	s0, s15
 80092ea:	3718      	adds	r7, #24
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bdb0      	pop	{r4, r5, r7, pc}
 80092f0:	f9db22d1 	.word	0xf9db22d1
 80092f4:	3fdc6a7e 	.word	0x3fdc6a7e

080092f8 <cal_mollifier_acceleration>:
float cal_mollifier_acceleration(float t_now,float mollifier_T,float integral){
 80092f8:	b5b0      	push	{r4, r5, r7, lr}
 80092fa:	b086      	sub	sp, #24
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	ed87 0a03 	vstr	s0, [r7, #12]
 8009302:	edc7 0a02 	vstr	s1, [r7, #8]
 8009306:	ed87 1a01 	vstr	s2, [r7, #4]
	float acceleration;
	acceleration= integral/MOLLIFIER_INTEGRAL*(-mollifier_T*t_now/(mollifier_T*mollifier_T/4-t_now*t_now)/(mollifier_T*mollifier_T/4-t_now*t_now))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-t_now*t_now));
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f7f7 f944 	bl	8000598 <__aeabi_f2d>
 8009310:	a33d      	add	r3, pc, #244	; (adr r3, 8009408 <cal_mollifier_acceleration+0x110>)
 8009312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009316:	f7f7 fac1 	bl	800089c <__aeabi_ddiv>
 800931a:	4602      	mov	r2, r0
 800931c:	460b      	mov	r3, r1
 800931e:	4614      	mov	r4, r2
 8009320:	461d      	mov	r5, r3
 8009322:	edd7 7a02 	vldr	s15, [r7, #8]
 8009326:	eeb1 7a67 	vneg.f32	s14, s15
 800932a:	edd7 7a03 	vldr	s15, [r7, #12]
 800932e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009332:	edd7 7a02 	vldr	s15, [r7, #8]
 8009336:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800933a:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800933e:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8009342:	edd7 7a03 	vldr	s15, [r7, #12]
 8009346:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800934a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800934e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009352:	edd7 7a02 	vldr	s15, [r7, #8]
 8009356:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800935a:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800935e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8009362:	edd7 7a03 	vldr	s15, [r7, #12]
 8009366:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800936a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800936e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009372:	ee16 0a90 	vmov	r0, s13
 8009376:	f7f7 f90f 	bl	8000598 <__aeabi_f2d>
 800937a:	4602      	mov	r2, r0
 800937c:	460b      	mov	r3, r1
 800937e:	4620      	mov	r0, r4
 8009380:	4629      	mov	r1, r5
 8009382:	f7f7 f961 	bl	8000648 <__aeabi_dmul>
 8009386:	4602      	mov	r2, r0
 8009388:	460b      	mov	r3, r1
 800938a:	4614      	mov	r4, r2
 800938c:	461d      	mov	r5, r3
 800938e:	edd7 7a02 	vldr	s15, [r7, #8]
 8009392:	eeb1 7a67 	vneg.f32	s14, s15
 8009396:	edd7 7a02 	vldr	s15, [r7, #8]
 800939a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800939e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80093a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80093a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80093aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80093ae:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 80093b2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80093b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80093ba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80093be:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80093c2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80093c6:	ee16 0a90 	vmov	r0, s13
 80093ca:	f7f7 f8e5 	bl	8000598 <__aeabi_f2d>
 80093ce:	4602      	mov	r2, r0
 80093d0:	460b      	mov	r3, r1
 80093d2:	ec43 2b10 	vmov	d0, r2, r3
 80093d6:	f019 fd83 	bl	8022ee0 <exp>
 80093da:	ec53 2b10 	vmov	r2, r3, d0
 80093de:	4620      	mov	r0, r4
 80093e0:	4629      	mov	r1, r5
 80093e2:	f7f7 f931 	bl	8000648 <__aeabi_dmul>
 80093e6:	4602      	mov	r2, r0
 80093e8:	460b      	mov	r3, r1
 80093ea:	4610      	mov	r0, r2
 80093ec:	4619      	mov	r1, r3
 80093ee:	f7f7 fc03 	bl	8000bf8 <__aeabi_d2f>
 80093f2:	4603      	mov	r3, r0
 80093f4:	617b      	str	r3, [r7, #20]
	return acceleration;
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	ee07 3a90 	vmov	s15, r3
}
 80093fc:	eeb0 0a67 	vmov.f32	s0, s15
 8009400:	3718      	adds	r7, #24
 8009402:	46bd      	mov	sp, r7
 8009404:	bdb0      	pop	{r4, r5, r7, pc}
 8009406:	bf00      	nop
 8009408:	f9db22d1 	.word	0xf9db22d1
 800940c:	3fdc6a7e 	.word	0x3fdc6a7e

08009410 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8009416:	4b12      	ldr	r3, [pc, #72]	; (8009460 <MX_DMA_Init+0x50>)
 8009418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800941a:	4a11      	ldr	r2, [pc, #68]	; (8009460 <MX_DMA_Init+0x50>)
 800941c:	f043 0304 	orr.w	r3, r3, #4
 8009420:	6493      	str	r3, [r2, #72]	; 0x48
 8009422:	4b0f      	ldr	r3, [pc, #60]	; (8009460 <MX_DMA_Init+0x50>)
 8009424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009426:	f003 0304 	and.w	r3, r3, #4
 800942a:	607b      	str	r3, [r7, #4]
 800942c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800942e:	4b0c      	ldr	r3, [pc, #48]	; (8009460 <MX_DMA_Init+0x50>)
 8009430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009432:	4a0b      	ldr	r2, [pc, #44]	; (8009460 <MX_DMA_Init+0x50>)
 8009434:	f043 0301 	orr.w	r3, r3, #1
 8009438:	6493      	str	r3, [r2, #72]	; 0x48
 800943a:	4b09      	ldr	r3, [pc, #36]	; (8009460 <MX_DMA_Init+0x50>)
 800943c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800943e:	f003 0301 	and.w	r3, r3, #1
 8009442:	603b      	str	r3, [r7, #0]
 8009444:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8009446:	2200      	movs	r2, #0
 8009448:	2100      	movs	r1, #0
 800944a:	200b      	movs	r0, #11
 800944c:	f011 fe0f 	bl	801b06e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8009450:	200b      	movs	r0, #11
 8009452:	f011 fe26 	bl	801b0a2 <HAL_NVIC_EnableIRQ>

}
 8009456:	bf00      	nop
 8009458:	3708      	adds	r7, #8
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	40021000 	.word	0x40021000

08009464 <init_FailSafe>:
float encoder_PID_error_highspeed;
float gyro_PID_error_highspeed;
float gyro_x_error_highspeed;
int error_time_count;

void init_FailSafe(void){
 8009464:	b480      	push	{r7}
 8009466:	af00      	add	r7, sp, #0
	error_mode=0;
 8009468:	4b11      	ldr	r3, [pc, #68]	; (80094b0 <init_FailSafe+0x4c>)
 800946a:	2200      	movs	r2, #0
 800946c:	701a      	strb	r2, [r3, #0]
	no_safty=0;
 800946e:	4b11      	ldr	r3, [pc, #68]	; (80094b4 <init_FailSafe+0x50>)
 8009470:	2200      	movs	r2, #0
 8009472:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 8009474:	4b10      	ldr	r3, [pc, #64]	; (80094b8 <init_FailSafe+0x54>)
 8009476:	2200      	movs	r2, #0
 8009478:	701a      	strb	r2, [r3, #0]
	error_time_count=0;
 800947a:	4b10      	ldr	r3, [pc, #64]	; (80094bc <init_FailSafe+0x58>)
 800947c:	2200      	movs	r2, #0
 800947e:	601a      	str	r2, [r3, #0]
	encoder_PID_error=1500;
 8009480:	4b0f      	ldr	r3, [pc, #60]	; (80094c0 <init_FailSafe+0x5c>)
 8009482:	4a10      	ldr	r2, [pc, #64]	; (80094c4 <init_FailSafe+0x60>)
 8009484:	601a      	str	r2, [r3, #0]
	gyro_PID_error=800;
 8009486:	4b10      	ldr	r3, [pc, #64]	; (80094c8 <init_FailSafe+0x64>)
 8009488:	4a10      	ldr	r2, [pc, #64]	; (80094cc <init_FailSafe+0x68>)
 800948a:	601a      	str	r2, [r3, #0]
	gyro_x_error=1500;
 800948c:	4b10      	ldr	r3, [pc, #64]	; (80094d0 <init_FailSafe+0x6c>)
 800948e:	4a0d      	ldr	r2, [pc, #52]	; (80094c4 <init_FailSafe+0x60>)
 8009490:	601a      	str	r2, [r3, #0]

	encoder_PID_error_highspeed=3500;//3000
 8009492:	4b10      	ldr	r3, [pc, #64]	; (80094d4 <init_FailSafe+0x70>)
 8009494:	4a10      	ldr	r2, [pc, #64]	; (80094d8 <init_FailSafe+0x74>)
 8009496:	601a      	str	r2, [r3, #0]
	gyro_PID_error_highspeed=1900;
 8009498:	4b10      	ldr	r3, [pc, #64]	; (80094dc <init_FailSafe+0x78>)
 800949a:	4a11      	ldr	r2, [pc, #68]	; (80094e0 <init_FailSafe+0x7c>)
 800949c:	601a      	str	r2, [r3, #0]
	gyro_x_error_highspeed=1900;
 800949e:	4b11      	ldr	r3, [pc, #68]	; (80094e4 <init_FailSafe+0x80>)
 80094a0:	4a0f      	ldr	r2, [pc, #60]	; (80094e0 <init_FailSafe+0x7c>)
 80094a2:	601a      	str	r2, [r3, #0]
}
 80094a4:	bf00      	nop
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr
 80094ae:	bf00      	nop
 80094b0:	2000080b 	.word	0x2000080b
 80094b4:	2000080a 	.word	0x2000080a
 80094b8:	2000080c 	.word	0x2000080c
 80094bc:	20000828 	.word	0x20000828
 80094c0:	20000810 	.word	0x20000810
 80094c4:	44bb8000 	.word	0x44bb8000
 80094c8:	20000814 	.word	0x20000814
 80094cc:	44480000 	.word	0x44480000
 80094d0:	20000818 	.word	0x20000818
 80094d4:	2000081c 	.word	0x2000081c
 80094d8:	455ac000 	.word	0x455ac000
 80094dc:	20000820 	.word	0x20000820
 80094e0:	44ed8000 	.word	0x44ed8000
 80094e4:	20000824 	.word	0x20000824

080094e8 <interrupt_FailSafe>:


void interrupt_FailSafe(void){
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
	float encoder_PID_error_in;
	float gyro_PID_error_in;
	float gyro_x_error_in;

	if (highspeed_mode == 0) {
 80094ee:	4b6e      	ldr	r3, [pc, #440]	; (80096a8 <interrupt_FailSafe+0x1c0>)
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d109      	bne.n	800950a <interrupt_FailSafe+0x22>
		encoder_PID_error_in=encoder_PID_error;
 80094f6:	4b6d      	ldr	r3, [pc, #436]	; (80096ac <interrupt_FailSafe+0x1c4>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error;
 80094fc:	4b6c      	ldr	r3, [pc, #432]	; (80096b0 <interrupt_FailSafe+0x1c8>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error;
 8009502:	4b6c      	ldr	r3, [pc, #432]	; (80096b4 <interrupt_FailSafe+0x1cc>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	607b      	str	r3, [r7, #4]
 8009508:	e008      	b.n	800951c <interrupt_FailSafe+0x34>
	}else{
		encoder_PID_error_in=encoder_PID_error_highspeed;
 800950a:	4b6b      	ldr	r3, [pc, #428]	; (80096b8 <interrupt_FailSafe+0x1d0>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error_highspeed;
 8009510:	4b6a      	ldr	r3, [pc, #424]	; (80096bc <interrupt_FailSafe+0x1d4>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error_highspeed;
 8009516:	4b6a      	ldr	r3, [pc, #424]	; (80096c0 <interrupt_FailSafe+0x1d8>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	607b      	str	r3, [r7, #4]
	}

	if (modeacc != 0 && modeacc != 3){
 800951c:	4b69      	ldr	r3, [pc, #420]	; (80096c4 <interrupt_FailSafe+0x1dc>)
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d062      	beq.n	80095ea <interrupt_FailSafe+0x102>
 8009524:	4b67      	ldr	r3, [pc, #412]	; (80096c4 <interrupt_FailSafe+0x1dc>)
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	2b03      	cmp	r3, #3
 800952a:	d05e      	beq.n	80095ea <interrupt_FailSafe+0x102>
		if (no_safty == 0 && error_mode == 0) {
 800952c:	4b66      	ldr	r3, [pc, #408]	; (80096c8 <interrupt_FailSafe+0x1e0>)
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d15a      	bne.n	80095ea <interrupt_FailSafe+0x102>
 8009534:	4b65      	ldr	r3, [pc, #404]	; (80096cc <interrupt_FailSafe+0x1e4>)
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d156      	bne.n	80095ea <interrupt_FailSafe+0x102>
			//ジャイロの誤差が一定以上
					if (fabs(turning.velocity - angle_speed) >= gyro_PID_error_in ) {
 800953c:	4b64      	ldr	r3, [pc, #400]	; (80096d0 <interrupt_FailSafe+0x1e8>)
 800953e:	ed93 7a00 	vldr	s14, [r3]
 8009542:	4b64      	ldr	r3, [pc, #400]	; (80096d4 <interrupt_FailSafe+0x1ec>)
 8009544:	edd3 7a00 	vldr	s15, [r3]
 8009548:	ee77 7a67 	vsub.f32	s15, s14, s15
 800954c:	eef0 7ae7 	vabs.f32	s15, s15
 8009550:	ed97 7a02 	vldr	s14, [r7, #8]
 8009554:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800955c:	d809      	bhi.n	8009572 <interrupt_FailSafe+0x8a>
						//(gyro.omega_x >= 320 && gyro.omega_y >= 320) ||
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 800955e:	f7fe fc83 	bl	8007e68 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(1);
 8009562:	2001      	movs	r0, #1
 8009564:	f7fd fe98 	bl	8007298 <pl_yellow_LED_count>
						error_mode = 1;
 8009568:	4b58      	ldr	r3, [pc, #352]	; (80096cc <interrupt_FailSafe+0x1e4>)
 800956a:	2201      	movs	r2, #1
 800956c:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 800956e:	f7fb fa53 	bl	8004a18 <clear_Ierror>
					}
					if (angle_speedx_set >= gyro_x_error_in) {
 8009572:	4b59      	ldr	r3, [pc, #356]	; (80096d8 <interrupt_FailSafe+0x1f0>)
 8009574:	edd3 7a00 	vldr	s15, [r3]
 8009578:	ed97 7a01 	vldr	s14, [r7, #4]
 800957c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009584:	d809      	bhi.n	800959a <interrupt_FailSafe+0xb2>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 8009586:	f7fe fc6f 	bl	8007e68 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(2);
 800958a:	2002      	movs	r0, #2
 800958c:	f7fd fe84 	bl	8007298 <pl_yellow_LED_count>
						error_mode = 1;
 8009590:	4b4e      	ldr	r3, [pc, #312]	; (80096cc <interrupt_FailSafe+0x1e4>)
 8009592:	2201      	movs	r2, #1
 8009594:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 8009596:	f7fb fa3f 	bl	8004a18 <clear_Ierror>
					}
					if(fabs(straight.velocity - (fusion_speedR+fusion_speedL)/2) >= encoder_PID_error_in && modeacc==1){
 800959a:	4b50      	ldr	r3, [pc, #320]	; (80096dc <interrupt_FailSafe+0x1f4>)
 800959c:	ed93 7a00 	vldr	s14, [r3]
 80095a0:	4b4f      	ldr	r3, [pc, #316]	; (80096e0 <interrupt_FailSafe+0x1f8>)
 80095a2:	edd3 6a00 	vldr	s13, [r3]
 80095a6:	4b4f      	ldr	r3, [pc, #316]	; (80096e4 <interrupt_FailSafe+0x1fc>)
 80095a8:	edd3 7a00 	vldr	s15, [r3]
 80095ac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80095b0:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80095b4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80095b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095bc:	eef0 7ae7 	vabs.f32	s15, s15
 80095c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80095c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095cc:	d80d      	bhi.n	80095ea <interrupt_FailSafe+0x102>
 80095ce:	4b3d      	ldr	r3, [pc, #244]	; (80096c4 <interrupt_FailSafe+0x1dc>)
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d109      	bne.n	80095ea <interrupt_FailSafe+0x102>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 80095d6:	f7fe fc47 	bl	8007e68 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(4);
 80095da:	2004      	movs	r0, #4
 80095dc:	f7fd fe5c 	bl	8007298 <pl_yellow_LED_count>
						error_mode = 1;
 80095e0:	4b3a      	ldr	r3, [pc, #232]	; (80096cc <interrupt_FailSafe+0x1e4>)
 80095e2:	2201      	movs	r2, #1
 80095e4:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 80095e6:	f7fb fa17 	bl	8004a18 <clear_Ierror>

				}

	}

	if(error_mode==1){
 80095ea:	4b38      	ldr	r3, [pc, #224]	; (80096cc <interrupt_FailSafe+0x1e4>)
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d153      	bne.n	800969a <interrupt_FailSafe+0x1b2>
		record_mode=0;
 80095f2:	4b3d      	ldr	r3, [pc, #244]	; (80096e8 <interrupt_FailSafe+0x200>)
 80095f4:	2200      	movs	r2, #0
 80095f6:	701a      	strb	r2, [r3, #0]
		error_time_count++;
 80095f8:	4b3c      	ldr	r3, [pc, #240]	; (80096ec <interrupt_FailSafe+0x204>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	3301      	adds	r3, #1
 80095fe:	4a3b      	ldr	r2, [pc, #236]	; (80096ec <interrupt_FailSafe+0x204>)
 8009600:	6013      	str	r3, [r2, #0]
		if(error_time_count<=1000){
 8009602:	4b3a      	ldr	r3, [pc, #232]	; (80096ec <interrupt_FailSafe+0x204>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800960a:	dc05      	bgt.n	8009618 <interrupt_FailSafe+0x130>
			init_WallControl();
 800960c:	f7fb fb5e 	bl	8004ccc <init_WallControl>
			modeacc=100;//エラー用
 8009610:	4b2c      	ldr	r3, [pc, #176]	; (80096c4 <interrupt_FailSafe+0x1dc>)
 8009612:	2264      	movs	r2, #100	; 0x64
 8009614:	701a      	strb	r2, [r3, #0]
 8009616:	e009      	b.n	800962c <interrupt_FailSafe+0x144>
			//pl_R_DriveMotor_mode(MOTOR_BREAK);
			//pl_L_DriveMotor_mode(MOTOR_BREAK);
		}else{
			pl_DriveMotor_standby(OFF);
 8009618:	2000      	movs	r0, #0
 800961a:	f7fe fb91 	bl	8007d40 <pl_DriveMotor_standby>
			pl_DriveMotor_stop();
 800961e:	f7fe fbf5 	bl	8007e0c <pl_DriveMotor_stop>
			pl_FunMotor_stop();
 8009622:	f7fe fc21 	bl	8007e68 <pl_FunMotor_stop>
			modeacc=0;
 8009626:	4b27      	ldr	r3, [pc, #156]	; (80096c4 <interrupt_FailSafe+0x1dc>)
 8009628:	2200      	movs	r2, #0
 800962a:	701a      	strb	r2, [r3, #0]
		}
					NoWallCountL90 = 4294967295;
 800962c:	4b30      	ldr	r3, [pc, #192]	; (80096f0 <interrupt_FailSafe+0x208>)
 800962e:	f04f 32ff 	mov.w	r2, #4294967295
 8009632:	601a      	str	r2, [r3, #0]
					NoWallCountR90 = 4294967295;
 8009634:	4b2f      	ldr	r3, [pc, #188]	; (80096f4 <interrupt_FailSafe+0x20c>)
 8009636:	f04f 32ff 	mov.w	r2, #4294967295
 800963a:	601a      	str	r2, [r3, #0]
					NoWallCountL45 = 4294967295;
 800963c:	4b2e      	ldr	r3, [pc, #184]	; (80096f8 <interrupt_FailSafe+0x210>)
 800963e:	f04f 32ff 	mov.w	r2, #4294967295
 8009642:	601a      	str	r2, [r3, #0]
					NoWallCountR45 = 4294967295;
 8009644:	4b2d      	ldr	r3, [pc, #180]	; (80096fc <interrupt_FailSafe+0x214>)
 8009646:	f04f 32ff 	mov.w	r2, #4294967295
 800964a:	601a      	str	r2, [r3, #0]
					NoWallCountL45slant = 4294967295;
 800964c:	4b2c      	ldr	r3, [pc, #176]	; (8009700 <interrupt_FailSafe+0x218>)
 800964e:	f04f 32ff 	mov.w	r2, #4294967295
 8009652:	601a      	str	r2, [r3, #0]
					NoWallCountR45slant = 4294967295;
 8009654:	4b2b      	ldr	r3, [pc, #172]	; (8009704 <interrupt_FailSafe+0x21c>)
 8009656:	f04f 32ff 	mov.w	r2, #4294967295
 800965a:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL90 = 50;
 800965c:	4b2a      	ldr	r3, [pc, #168]	; (8009708 <interrupt_FailSafe+0x220>)
 800965e:	4a2b      	ldr	r2, [pc, #172]	; (800970c <interrupt_FailSafe+0x224>)
 8009660:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR90 = 50;
 8009662:	4b2b      	ldr	r3, [pc, #172]	; (8009710 <interrupt_FailSafe+0x228>)
 8009664:	4a29      	ldr	r2, [pc, #164]	; (800970c <interrupt_FailSafe+0x224>)
 8009666:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45 = 20;
 8009668:	4b2a      	ldr	r3, [pc, #168]	; (8009714 <interrupt_FailSafe+0x22c>)
 800966a:	4a2b      	ldr	r2, [pc, #172]	; (8009718 <interrupt_FailSafe+0x230>)
 800966c:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45 = 20;
 800966e:	4b2b      	ldr	r3, [pc, #172]	; (800971c <interrupt_FailSafe+0x234>)
 8009670:	4a29      	ldr	r2, [pc, #164]	; (8009718 <interrupt_FailSafe+0x230>)
 8009672:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant = 35;
 8009674:	4b2a      	ldr	r3, [pc, #168]	; (8009720 <interrupt_FailSafe+0x238>)
 8009676:	4a2b      	ldr	r2, [pc, #172]	; (8009724 <interrupt_FailSafe+0x23c>)
 8009678:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant = 35;
 800967a:	4b2b      	ldr	r3, [pc, #172]	; (8009728 <interrupt_FailSafe+0x240>)
 800967c:	4a29      	ldr	r2, [pc, #164]	; (8009724 <interrupt_FailSafe+0x23c>)
 800967e:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant2 = 35;
 8009680:	4b2a      	ldr	r3, [pc, #168]	; (800972c <interrupt_FailSafe+0x244>)
 8009682:	4a28      	ldr	r2, [pc, #160]	; (8009724 <interrupt_FailSafe+0x23c>)
 8009684:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant2 = 35;
 8009686:	4b2a      	ldr	r3, [pc, #168]	; (8009730 <interrupt_FailSafe+0x248>)
 8009688:	4a26      	ldr	r2, [pc, #152]	; (8009724 <interrupt_FailSafe+0x23c>)
 800968a:	601a      	str	r2, [r3, #0]
					g_acc_flag=4;
 800968c:	4b29      	ldr	r3, [pc, #164]	; (8009734 <interrupt_FailSafe+0x24c>)
 800968e:	2204      	movs	r2, #4
 8009690:	701a      	strb	r2, [r3, #0]
					g_wallCut_mode = 0;
 8009692:	4b29      	ldr	r3, [pc, #164]	; (8009738 <interrupt_FailSafe+0x250>)
 8009694:	2200      	movs	r2, #0
 8009696:	701a      	strb	r2, [r3, #0]
	}else{
		error_time_count=0;
	}


}
 8009698:	e002      	b.n	80096a0 <interrupt_FailSafe+0x1b8>
		error_time_count=0;
 800969a:	4b14      	ldr	r3, [pc, #80]	; (80096ec <interrupt_FailSafe+0x204>)
 800969c:	2200      	movs	r2, #0
 800969e:	601a      	str	r2, [r3, #0]
}
 80096a0:	bf00      	nop
 80096a2:	3710      	adds	r7, #16
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	2000080c 	.word	0x2000080c
 80096ac:	20000810 	.word	0x20000810
 80096b0:	20000814 	.word	0x20000814
 80096b4:	20000818 	.word	0x20000818
 80096b8:	2000081c 	.word	0x2000081c
 80096bc:	20000820 	.word	0x20000820
 80096c0:	20000824 	.word	0x20000824
 80096c4:	2000052c 	.word	0x2000052c
 80096c8:	2000080a 	.word	0x2000080a
 80096cc:	2000080b 	.word	0x2000080b
 80096d0:	200004e8 	.word	0x200004e8
 80096d4:	2000026c 	.word	0x2000026c
 80096d8:	20000278 	.word	0x20000278
 80096dc:	200004dc 	.word	0x200004dc
 80096e0:	2000025c 	.word	0x2000025c
 80096e4:	20000258 	.word	0x20000258
 80096e8:	2000edc4 	.word	0x2000edc4
 80096ec:	20000828 	.word	0x20000828
 80096f0:	200005bc 	.word	0x200005bc
 80096f4:	200005b8 	.word	0x200005b8
 80096f8:	200005c4 	.word	0x200005c4
 80096fc:	200005c0 	.word	0x200005c0
 8009700:	200005cc 	.word	0x200005cc
 8009704:	200005c8 	.word	0x200005c8
 8009708:	200005d4 	.word	0x200005d4
 800970c:	42480000 	.word	0x42480000
 8009710:	200005d0 	.word	0x200005d0
 8009714:	200005dc 	.word	0x200005dc
 8009718:	41a00000 	.word	0x41a00000
 800971c:	200005d8 	.word	0x200005d8
 8009720:	200005e4 	.word	0x200005e4
 8009724:	420c0000 	.word	0x420c0000
 8009728:	200005e0 	.word	0x200005e0
 800972c:	200005ec 	.word	0x200005ec
 8009730:	200005e8 	.word	0x200005e8
 8009734:	20000808 	.word	0x20000808
 8009738:	20000596 	.word	0x20000596

0800973c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b08a      	sub	sp, #40	; 0x28
 8009740:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009742:	f107 0314 	add.w	r3, r7, #20
 8009746:	2200      	movs	r2, #0
 8009748:	601a      	str	r2, [r3, #0]
 800974a:	605a      	str	r2, [r3, #4]
 800974c:	609a      	str	r2, [r3, #8]
 800974e:	60da      	str	r2, [r3, #12]
 8009750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009752:	4b3a      	ldr	r3, [pc, #232]	; (800983c <MX_GPIO_Init+0x100>)
 8009754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009756:	4a39      	ldr	r2, [pc, #228]	; (800983c <MX_GPIO_Init+0x100>)
 8009758:	f043 0304 	orr.w	r3, r3, #4
 800975c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800975e:	4b37      	ldr	r3, [pc, #220]	; (800983c <MX_GPIO_Init+0x100>)
 8009760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009762:	f003 0304 	and.w	r3, r3, #4
 8009766:	613b      	str	r3, [r7, #16]
 8009768:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800976a:	4b34      	ldr	r3, [pc, #208]	; (800983c <MX_GPIO_Init+0x100>)
 800976c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800976e:	4a33      	ldr	r2, [pc, #204]	; (800983c <MX_GPIO_Init+0x100>)
 8009770:	f043 0320 	orr.w	r3, r3, #32
 8009774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009776:	4b31      	ldr	r3, [pc, #196]	; (800983c <MX_GPIO_Init+0x100>)
 8009778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800977a:	f003 0320 	and.w	r3, r3, #32
 800977e:	60fb      	str	r3, [r7, #12]
 8009780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009782:	4b2e      	ldr	r3, [pc, #184]	; (800983c <MX_GPIO_Init+0x100>)
 8009784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009786:	4a2d      	ldr	r2, [pc, #180]	; (800983c <MX_GPIO_Init+0x100>)
 8009788:	f043 0301 	orr.w	r3, r3, #1
 800978c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800978e:	4b2b      	ldr	r3, [pc, #172]	; (800983c <MX_GPIO_Init+0x100>)
 8009790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009792:	f003 0301 	and.w	r3, r3, #1
 8009796:	60bb      	str	r3, [r7, #8]
 8009798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800979a:	4b28      	ldr	r3, [pc, #160]	; (800983c <MX_GPIO_Init+0x100>)
 800979c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800979e:	4a27      	ldr	r2, [pc, #156]	; (800983c <MX_GPIO_Init+0x100>)
 80097a0:	f043 0302 	orr.w	r3, r3, #2
 80097a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80097a6:	4b25      	ldr	r3, [pc, #148]	; (800983c <MX_GPIO_Init+0x100>)
 80097a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097aa:	f003 0302 	and.w	r3, r3, #2
 80097ae:	607b      	str	r3, [r7, #4]
 80097b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 80097b2:	2200      	movs	r2, #0
 80097b4:	f24e 0150 	movw	r1, #57424	; 0xe050
 80097b8:	4821      	ldr	r0, [pc, #132]	; (8009840 <MX_GPIO_Init+0x104>)
 80097ba:	f012 fb43 	bl	801be44 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin, GPIO_PIN_RESET);
 80097be:	2200      	movs	r2, #0
 80097c0:	f648 1110 	movw	r1, #35088	; 0x8910
 80097c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80097c8:	f012 fb3c 	bl	801be44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 80097cc:	2200      	movs	r2, #0
 80097ce:	f64e 4196 	movw	r1, #60566	; 0xec96
 80097d2:	481c      	ldr	r0, [pc, #112]	; (8009844 <MX_GPIO_Init+0x108>)
 80097d4:	f012 fb36 	bl	801be44 <HAL_GPIO_WritePin>
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 80097d8:	f24e 0350 	movw	r3, #57424	; 0xe050
 80097dc:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80097de:	2301      	movs	r3, #1
 80097e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097e2:	2300      	movs	r3, #0
 80097e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097e6:	2300      	movs	r3, #0
 80097e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80097ea:	f107 0314 	add.w	r3, r7, #20
 80097ee:	4619      	mov	r1, r3
 80097f0:	4813      	ldr	r0, [pc, #76]	; (8009840 <MX_GPIO_Init+0x104>)
 80097f2:	f012 f9a5 	bl	801bb40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin;
 80097f6:	f648 1310 	movw	r3, #35088	; 0x8910
 80097fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80097fc:	2301      	movs	r3, #1
 80097fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009800:	2300      	movs	r3, #0
 8009802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009804:	2300      	movs	r3, #0
 8009806:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009808:	f107 0314 	add.w	r3, r7, #20
 800980c:	4619      	mov	r1, r3
 800980e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009812:	f012 f995 	bl	801bb40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8009816:	f64e 4396 	movw	r3, #60566	; 0xec96
 800981a:	617b      	str	r3, [r7, #20]
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800981c:	2301      	movs	r3, #1
 800981e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009820:	2300      	movs	r3, #0
 8009822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009824:	2300      	movs	r3, #0
 8009826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009828:	f107 0314 	add.w	r3, r7, #20
 800982c:	4619      	mov	r1, r3
 800982e:	4805      	ldr	r0, [pc, #20]	; (8009844 <MX_GPIO_Init+0x108>)
 8009830:	f012 f986 	bl	801bb40 <HAL_GPIO_Init>

}
 8009834:	bf00      	nop
 8009836:	3728      	adds	r7, #40	; 0x28
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}
 800983c:	40021000 	.word	0x40021000
 8009840:	48000800 	.word	0x48000800
 8009844:	48000400 	.word	0x48000400

08009848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009848:	b590      	push	{r4, r7, lr}
 800984a:	b087      	sub	sp, #28
 800984c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800984e:	f00f f8c5 	bl	80189dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009852:	f000 f8a7 	bl	80099a4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8009856:	f7ff fddb 	bl	8009410 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800985a:	f7ff ff6f 	bl	800973c <MX_GPIO_Init>
  MX_ADC1_Init();
 800985e:	f7fe fddd 	bl	800841c <MX_ADC1_Init>
  MX_SPI1_Init();
 8009862:	f00d fbcb 	bl	8016ffc <MX_SPI1_Init>
  MX_TIM6_Init();
 8009866:	f00d fe37 	bl	80174d8 <MX_TIM6_Init>
  MX_TIM8_Init();
 800986a:	f00d fe6b 	bl	8017544 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800986e:	f00e ffe7 	bl	8018840 <MX_USART1_UART_Init>
  //MX_DMA_Init();
  MX_SPI3_Init();
 8009872:	f00d fc01 	bl	8017078 <MX_SPI3_Init>
  MX_TIM16_Init();
 8009876:	f00d ff05 	bl	8017684 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  pl_timer_init();
 800987a:	f7fe fce1 	bl	8008240 <pl_timer_init>
  pl_gyro_init();
 800987e:	f7fe f973 	bl	8007b68 <pl_gyro_init>
  pl_sensor_init();
 8009882:	f7fe fb21 	bl	8007ec8 <pl_sensor_init>
  reset_distance();
 8009886:	f7f7 fb89 	bl	8000f9c <reset_distance>
  reset_gyro();
 800988a:	f7f8 f98d 	bl	8001ba8 <reset_gyro>
  reset_speed();
 800988e:	f7f7 fbc9 	bl	8001024 <reset_speed>
  record_reset();
 8009892:	f00d f921 	bl	8016ad8 <record_reset>
  pl_motor_init();
 8009896:	f7fe fa2d 	bl	8007cf4 <pl_motor_init>
  PID_Init();
 800989a:	f7fb f881 	bl	80049a0 <PID_Init>
  init_WallControl();
 800989e:	f7fb fa15 	bl	8004ccc <init_WallControl>
  Control_mode_Init();
 80098a2:	f7f8 fccb 	bl	800223c <Control_mode_Init>
  init_FailSafe();
 80098a6:	f7ff fddd 	bl	8009464 <init_FailSafe>
  input_parameter();
 80098aa:	f00e f8cb 	bl	8017a44 <input_parameter>

	//uint8_t hello[] = "Hello World\n\r";
  //float PI=3.14;
  //uint8_t hoge = 3;
  int mode=0;
 80098ae:	2300      	movs	r3, #0
 80098b0:	60fb      	str	r3, [r7, #12]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 80098b2:	4b37      	ldr	r3, [pc, #220]	; (8009990 <main+0x148>)
 80098b4:	881b      	ldrh	r3, [r3, #0]
 80098b6:	4619      	mov	r1, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 80098b8:	4b35      	ldr	r3, [pc, #212]	; (8009990 <main+0x148>)
 80098ba:	885b      	ldrh	r3, [r3, #2]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 80098bc:	4618      	mov	r0, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 80098be:	4b34      	ldr	r3, [pc, #208]	; (8009990 <main+0x148>)
 80098c0:	889b      	ldrh	r3, [r3, #4]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 80098c2:	461c      	mov	r4, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 80098c4:	4b32      	ldr	r3, [pc, #200]	; (8009990 <main+0x148>)
 80098c6:	88db      	ldrh	r3, [r3, #6]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 80098c8:	461a      	mov	r2, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 80098ca:	4b31      	ldr	r3, [pc, #196]	; (8009990 <main+0x148>)
 80098cc:	891b      	ldrh	r3, [r3, #8]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 80098ce:	9301      	str	r3, [sp, #4]
 80098d0:	9200      	str	r2, [sp, #0]
 80098d2:	4623      	mov	r3, r4
 80098d4:	4602      	mov	r2, r0
 80098d6:	482f      	ldr	r0, [pc, #188]	; (8009994 <main+0x14c>)
 80098d8:	f017 f84a 	bl	8020970 <iprintf>
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 80098dc:	4b2e      	ldr	r3, [pc, #184]	; (8009998 <main+0x150>)
 80098de:	881b      	ldrh	r3, [r3, #0]
 80098e0:	4619      	mov	r1, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 80098e2:	4b2d      	ldr	r3, [pc, #180]	; (8009998 <main+0x150>)
 80098e4:	885b      	ldrh	r3, [r3, #2]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 80098e6:	4618      	mov	r0, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 80098e8:	4b2b      	ldr	r3, [pc, #172]	; (8009998 <main+0x150>)
 80098ea:	889b      	ldrh	r3, [r3, #4]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 80098ec:	461c      	mov	r4, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 80098ee:	4b2a      	ldr	r3, [pc, #168]	; (8009998 <main+0x150>)
 80098f0:	88db      	ldrh	r3, [r3, #6]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 80098f2:	461a      	mov	r2, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 80098f4:	4b28      	ldr	r3, [pc, #160]	; (8009998 <main+0x150>)
 80098f6:	891b      	ldrh	r3, [r3, #8]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 80098f8:	9301      	str	r3, [sp, #4]
 80098fa:	9200      	str	r2, [sp, #0]
 80098fc:	4623      	mov	r3, r4
 80098fe:	4602      	mov	r2, r0
 8009900:	4826      	ldr	r0, [pc, #152]	; (800999c <main+0x154>)
 8009902:	f017 f835 	bl	8020970 <iprintf>
	battcheak();
 8009906:	f7f8 fb5b 	bl	8001fc0 <battcheak>

//起動cheak
	int yellow_count=1;
 800990a:	2301      	movs	r3, #1
 800990c:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<8;i++){
 800990e:	2300      	movs	r3, #0
 8009910:	607b      	str	r3, [r7, #4]
 8009912:	e00d      	b.n	8009930 <main+0xe8>
		pl_yellow_LED_count(yellow_count);
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	b2db      	uxtb	r3, r3
 8009918:	4618      	mov	r0, r3
 800991a:	f7fd fcbd 	bl	8007298 <pl_yellow_LED_count>
		HAL_Delay(50);
 800991e:	2032      	movs	r0, #50	; 0x32
 8009920:	f00f f8d4 	bl	8018acc <HAL_Delay>
		yellow_count=yellow_count*2;
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	005b      	lsls	r3, r3, #1
 8009928:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<8;i++){
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	3301      	adds	r3, #1
 800992e:	607b      	str	r3, [r7, #4]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2b07      	cmp	r3, #7
 8009934:	ddee      	ble.n	8009914 <main+0xcc>
	}
	for(int i=0;i<9;i++){
 8009936:	2300      	movs	r3, #0
 8009938:	603b      	str	r3, [r7, #0]
 800993a:	e00f      	b.n	800995c <main+0x114>
			pl_yellow_LED_count(yellow_count);
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	b2db      	uxtb	r3, r3
 8009940:	4618      	mov	r0, r3
 8009942:	f7fd fca9 	bl	8007298 <pl_yellow_LED_count>
			HAL_Delay(50);
 8009946:	2032      	movs	r0, #50	; 0x32
 8009948:	f00f f8c0 	bl	8018acc <HAL_Delay>
			yellow_count=yellow_count/2;
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	0fda      	lsrs	r2, r3, #31
 8009950:	4413      	add	r3, r2
 8009952:	105b      	asrs	r3, r3, #1
 8009954:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<9;i++){
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	3301      	adds	r3, #1
 800995a:	603b      	str	r3, [r7, #0]
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	2b08      	cmp	r3, #8
 8009960:	ddec      	ble.n	800993c <main+0xf4>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  		mode=mode_decision(mode);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	b2db      	uxtb	r3, r3
 8009966:	4618      	mov	r0, r3
 8009968:	f00b faa8 	bl	8014ebc <mode_decision>
 800996c:	4603      	mov	r3, r0
 800996e:	60fb      	str	r3, [r7, #12]
//	  		clear_Ierror();
	  		reset_distance();
 8009970:	f7f7 fb14 	bl	8000f9c <reset_distance>
	  		reset_gyro();
 8009974:	f7f8 f918 	bl	8001ba8 <reset_gyro>
	  		reset_speed();
 8009978:	f7f7 fb54 	bl	8001024 <reset_speed>

	  		mode_execution(mode);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	b2db      	uxtb	r3, r3
 8009980:	4618      	mov	r0, r3
 8009982:	f00b fb95 	bl	80150b0 <mode_execution>

	  		error_mode = 0;
 8009986:	4b06      	ldr	r3, [pc, #24]	; (80099a0 <main+0x158>)
 8009988:	2200      	movs	r2, #0
 800998a:	701a      	strb	r2, [r3, #0]
	  		mode=mode_decision(mode);
 800998c:	e7e9      	b.n	8009962 <main+0x11a>
 800998e:	bf00      	nop
 8009990:	20000710 	.word	0x20000710
 8009994:	08024370 	.word	0x08024370
 8009998:	2000071c 	.word	0x2000071c
 800999c:	0802439c 	.word	0x0802439c
 80099a0:	2000080b 	.word	0x2000080b

080099a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b094      	sub	sp, #80	; 0x50
 80099a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80099aa:	f107 0318 	add.w	r3, r7, #24
 80099ae:	2238      	movs	r2, #56	; 0x38
 80099b0:	2100      	movs	r1, #0
 80099b2:	4618      	mov	r0, r3
 80099b4:	f016 fb6a 	bl	802008c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80099b8:	1d3b      	adds	r3, r7, #4
 80099ba:	2200      	movs	r2, #0
 80099bc:	601a      	str	r2, [r3, #0]
 80099be:	605a      	str	r2, [r3, #4]
 80099c0:	609a      	str	r2, [r3, #8]
 80099c2:	60da      	str	r2, [r3, #12]
 80099c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80099c6:	2000      	movs	r0, #0
 80099c8:	f012 fa54 	bl	801be74 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80099cc:	2301      	movs	r3, #1
 80099ce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80099d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80099d4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80099d6:	2302      	movs	r3, #2
 80099d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80099da:	2303      	movs	r3, #3
 80099dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80099de:	2304      	movs	r3, #4
 80099e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80099e2:	2355      	movs	r3, #85	; 0x55
 80099e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80099e6:	2302      	movs	r3, #2
 80099e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80099ea:	2302      	movs	r3, #2
 80099ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80099ee:	2302      	movs	r3, #2
 80099f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80099f2:	f107 0318 	add.w	r3, r7, #24
 80099f6:	4618      	mov	r0, r3
 80099f8:	f012 faf0 	bl	801bfdc <HAL_RCC_OscConfig>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d001      	beq.n	8009a06 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8009a02:	f000 f81a 	bl	8009a3a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009a06:	230f      	movs	r3, #15
 8009a08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009a12:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8009a16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8009a1e:	1d3b      	adds	r3, r7, #4
 8009a20:	2104      	movs	r1, #4
 8009a22:	4618      	mov	r0, r3
 8009a24:	f012 fdf2 	bl	801c60c <HAL_RCC_ClockConfig>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d001      	beq.n	8009a32 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8009a2e:	f000 f804 	bl	8009a3a <Error_Handler>
  }
}
 8009a32:	bf00      	nop
 8009a34:	3750      	adds	r7, #80	; 0x50
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009a3a:	b480      	push	{r7}
 8009a3c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009a3e:	b672      	cpsid	i
}
 8009a40:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009a42:	e7fe      	b.n	8009a42 <Error_Handler+0x8>

08009a44 <backTurn_controlWall>:
		pl_L_DriveMotor_mode(MOTOR_BREAK);
	}

}

void backTurn_controlWall(float input_TurningVelocity,float input_TurningAcceleration,_Bool front_wall,_Bool left_wall,_Bool right_wall){
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	ed87 0a03 	vstr	s0, [r7, #12]
 8009a4e:	edc7 0a02 	vstr	s1, [r7, #8]
 8009a52:	4603      	mov	r3, r0
 8009a54:	71fb      	strb	r3, [r7, #7]
 8009a56:	460b      	mov	r3, r1
 8009a58:	71bb      	strb	r3, [r7, #6]
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	717b      	strb	r3, [r7, #5]
	if(front_wall){
 8009a5e:	79fb      	ldrb	r3, [r7, #7]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00a      	beq.n	8009a7a <backTurn_controlWall+0x36>
		no_frontwall_straight();
 8009a64:	f7fa fcf8 	bl	8004458 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009a68:	2003      	movs	r0, #3
 8009a6a:	f7fe f99b 	bl	8007da4 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009a6e:	2003      	movs	r0, #3
 8009a70:	f7fe f970 	bl	8007d54 <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009a74:	2032      	movs	r0, #50	; 0x32
 8009a76:	f7fe fc93 	bl	80083a0 <wait_ms_NoReset>
	}
	if(left_wall){
 8009a7a:	79bb      	ldrb	r3, [r7, #6]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d02c      	beq.n	8009ada <backTurn_controlWall+0x96>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009a80:	ed97 2a02 	vldr	s4, [r7, #8]
 8009a84:	edd7 1a03 	vldr	s3, [r7, #12]
 8009a88:	ed9f 1a50 	vldr	s2, [pc, #320]	; 8009bcc <backTurn_controlWall+0x188>
 8009a8c:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8009bcc <backTurn_controlWall+0x188>
 8009a90:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8009bd0 <backTurn_controlWall+0x18c>
 8009a94:	f7fa f9e4 	bl	8003e60 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009a98:	2003      	movs	r0, #3
 8009a9a:	f7fe f983 	bl	8007da4 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009a9e:	2003      	movs	r0, #3
 8009aa0:	f7fe f958 	bl	8007d54 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 8009aa4:	2032      	movs	r0, #50	; 0x32
 8009aa6:	f7fe fc7b 	bl	80083a0 <wait_ms_NoReset>
		no_frontwall_straight();
 8009aaa:	f7fa fcd5 	bl	8004458 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009aae:	2003      	movs	r0, #3
 8009ab0:	f7fe f978 	bl	8007da4 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009ab4:	2003      	movs	r0, #3
 8009ab6:	f7fe f94d 	bl	8007d54 <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009aba:	2032      	movs	r0, #50	; 0x32
 8009abc:	f7fe fc70 	bl	80083a0 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009ac0:	ed97 2a02 	vldr	s4, [r7, #8]
 8009ac4:	edd7 1a03 	vldr	s3, [r7, #12]
 8009ac8:	ed9f 1a40 	vldr	s2, [pc, #256]	; 8009bcc <backTurn_controlWall+0x188>
 8009acc:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8009bcc <backTurn_controlWall+0x188>
 8009ad0:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8009bd0 <backTurn_controlWall+0x18c>
 8009ad4:	f7fa f9c4 	bl	8003e60 <turning_table2>
 8009ad8:	e06a      	b.n	8009bb0 <backTurn_controlWall+0x16c>
	}else if(left_wall==0 && right_wall){
 8009ada:	79bb      	ldrb	r3, [r7, #6]
 8009adc:	f083 0301 	eor.w	r3, r3, #1
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d037      	beq.n	8009b56 <backTurn_controlWall+0x112>
 8009ae6:	797b      	ldrb	r3, [r7, #5]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d034      	beq.n	8009b56 <backTurn_controlWall+0x112>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 8009aec:	edd7 7a03 	vldr	s15, [r7, #12]
 8009af0:	eef1 7a67 	vneg.f32	s15, s15
 8009af4:	ed97 2a02 	vldr	s4, [r7, #8]
 8009af8:	eef0 1a67 	vmov.f32	s3, s15
 8009afc:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8009bcc <backTurn_controlWall+0x188>
 8009b00:	eddf 0a32 	vldr	s1, [pc, #200]	; 8009bcc <backTurn_controlWall+0x188>
 8009b04:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8009bd4 <backTurn_controlWall+0x190>
 8009b08:	f7fa f9aa 	bl	8003e60 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009b0c:	2003      	movs	r0, #3
 8009b0e:	f7fe f949 	bl	8007da4 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009b12:	2003      	movs	r0, #3
 8009b14:	f7fe f91e 	bl	8007d54 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 8009b18:	2032      	movs	r0, #50	; 0x32
 8009b1a:	f7fe fc41 	bl	80083a0 <wait_ms_NoReset>
		no_frontwall_straight();
 8009b1e:	f7fa fc9b 	bl	8004458 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009b22:	2003      	movs	r0, #3
 8009b24:	f7fe f93e 	bl	8007da4 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009b28:	2003      	movs	r0, #3
 8009b2a:	f7fe f913 	bl	8007d54 <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009b2e:	2032      	movs	r0, #50	; 0x32
 8009b30:	f7fe fc36 	bl	80083a0 <wait_ms_NoReset>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 8009b34:	edd7 7a03 	vldr	s15, [r7, #12]
 8009b38:	eef1 7a67 	vneg.f32	s15, s15
 8009b3c:	ed97 2a02 	vldr	s4, [r7, #8]
 8009b40:	eef0 1a67 	vmov.f32	s3, s15
 8009b44:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8009bcc <backTurn_controlWall+0x188>
 8009b48:	eddf 0a20 	vldr	s1, [pc, #128]	; 8009bcc <backTurn_controlWall+0x188>
 8009b4c:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8009bd4 <backTurn_controlWall+0x190>
 8009b50:	f7fa f986 	bl	8003e60 <turning_table2>
 8009b54:	e02c      	b.n	8009bb0 <backTurn_controlWall+0x16c>
	}else if(left_wall==0 && right_wall==0){
 8009b56:	79bb      	ldrb	r3, [r7, #6]
 8009b58:	f083 0301 	eor.w	r3, r3, #1
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d026      	beq.n	8009bb0 <backTurn_controlWall+0x16c>
 8009b62:	797b      	ldrb	r3, [r7, #5]
 8009b64:	f083 0301 	eor.w	r3, r3, #1
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d020      	beq.n	8009bb0 <backTurn_controlWall+0x16c>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009b6e:	ed97 2a02 	vldr	s4, [r7, #8]
 8009b72:	edd7 1a03 	vldr	s3, [r7, #12]
 8009b76:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8009bcc <backTurn_controlWall+0x188>
 8009b7a:	eddf 0a14 	vldr	s1, [pc, #80]	; 8009bcc <backTurn_controlWall+0x188>
 8009b7e:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8009bd0 <backTurn_controlWall+0x18c>
 8009b82:	f7fa f96d 	bl	8003e60 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009b86:	2003      	movs	r0, #3
 8009b88:	f7fe f90c 	bl	8007da4 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009b8c:	2003      	movs	r0, #3
 8009b8e:	f7fe f8e1 	bl	8007d54 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 8009b92:	2032      	movs	r0, #50	; 0x32
 8009b94:	f7fe fc04 	bl	80083a0 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009b98:	ed97 2a02 	vldr	s4, [r7, #8]
 8009b9c:	edd7 1a03 	vldr	s3, [r7, #12]
 8009ba0:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8009bcc <backTurn_controlWall+0x188>
 8009ba4:	eddf 0a09 	vldr	s1, [pc, #36]	; 8009bcc <backTurn_controlWall+0x188>
 8009ba8:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8009bd0 <backTurn_controlWall+0x18c>
 8009bac:	f7fa f958 	bl	8003e60 <turning_table2>
	}
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009bb0:	2003      	movs	r0, #3
 8009bb2:	f7fe f8f7 	bl	8007da4 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009bb6:	2003      	movs	r0, #3
 8009bb8:	f7fe f8cc 	bl	8007d54 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(50);
 8009bbc:	2032      	movs	r0, #50	; 0x32
 8009bbe:	f7fe fbef 	bl	80083a0 <wait_ms_NoReset>

}
 8009bc2:	bf00      	nop
 8009bc4:	3710      	adds	r7, #16
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	00000000 	.word	0x00000000
 8009bd0:	42b40000 	.word	0x42b40000
 8009bd4:	c2b40000 	.word	0xc2b40000

08009bd8 <slalomR>:


void slalomR(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 8009bd8:	b084      	sub	sp, #16
 8009bda:	b5b0      	push	{r4, r5, r7, lr}
 8009bdc:	ed2d 8b02 	vpush	{d8}
 8009be0:	b084      	sub	sp, #16
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8009be8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009bec:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 8009bf0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	f040 80f5 	bne.w	8009de4 <slalomR+0x20c>
		highspeed_mode = 0;
 8009bfa:	4be3      	ldr	r3, [pc, #908]	; (8009f88 <slalomR+0x3b0>)
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 8009c00:	2301      	movs	r3, #1
 8009c02:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 8009c04:	2300      	movs	r3, #0
 8009c06:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 8009c10:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d11f      	bne.n	8009c58 <slalomR+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009c18:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8009c1c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009c20:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009c24:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009c28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c2c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8009c30:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009c34:	eddf 5ad5 	vldr	s11, [pc, #852]	; 8009f8c <slalomR+0x3b4>
 8009c38:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8009c3c:	68f8      	ldr	r0, [r7, #12]
 8009c3e:	eeb0 2a47 	vmov.f32	s4, s14
 8009c42:	eef0 1a46 	vmov.f32	s3, s12
 8009c46:	eeb0 1a66 	vmov.f32	s2, s13
 8009c4a:	eddf 0ad1 	vldr	s1, [pc, #836]	; 8009f90 <slalomR+0x3b8>
 8009c4e:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 8009f94 <slalomR+0x3bc>
 8009c52:	f7f9 fbe3 	bl	800341c <straight_table2>
 8009c56:	e01e      	b.n	8009c96 <slalomR+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009c58:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8009c5c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009c60:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009c64:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009c68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c6c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8009c70:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009c74:	eddf 5ac5 	vldr	s11, [pc, #788]	; 8009f8c <slalomR+0x3b4>
 8009c78:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	eeb0 2a47 	vmov.f32	s4, s14
 8009c82:	eef0 1a46 	vmov.f32	s3, s12
 8009c86:	eeb0 1a66 	vmov.f32	s2, s13
 8009c8a:	eddf 0ac1 	vldr	s1, [pc, #772]	; 8009f90 <slalomR+0x3b8>
 8009c8e:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8009f98 <slalomR+0x3c0>
 8009c92:	f7f9 fbc3 	bl	800341c <straight_table2>
		}
		wallmode.WallCutMode=1;
 8009c96:	2301      	movs	r3, #1
 8009c98:	73fb      	strb	r3, [r7, #15]
		wallmode.WallControlMode=0;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	733b      	strb	r3, [r7, #12]
		if(shortest_mode==0){
 8009c9e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d127      	bne.n	8009cf6 <slalomR+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009ca6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009caa:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8009cae:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009cb2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009cb6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 8009cba:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009cbe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009cc2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009cc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009cca:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8009cce:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009cd2:	eddf 4aae 	vldr	s9, [pc, #696]	; 8009f8c <slalomR+0x3b4>
 8009cd6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8009cda:	68f8      	ldr	r0, [r7, #12]
 8009cdc:	eeb0 2a47 	vmov.f32	s4, s14
 8009ce0:	eef0 1a45 	vmov.f32	s3, s10
 8009ce4:	eeb0 1a65 	vmov.f32	s2, s11
 8009ce8:	eef0 0a46 	vmov.f32	s1, s12
 8009cec:	eeb0 0a66 	vmov.f32	s0, s13
 8009cf0:	f7f9 fb94 	bl	800341c <straight_table2>
 8009cf4:	e022      	b.n	8009d3c <slalomR+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009cf6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8009cfa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009cfe:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 8009d02:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009d06:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009d0a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009d0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d12:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8009d16:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009d1a:	eddf 4a9c 	vldr	s9, [pc, #624]	; 8009f8c <slalomR+0x3b4>
 8009d1e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8009d22:	68f8      	ldr	r0, [r7, #12]
 8009d24:	eeb0 2a47 	vmov.f32	s4, s14
 8009d28:	eef0 1a45 	vmov.f32	s3, s10
 8009d2c:	eeb0 1a65 	vmov.f32	s2, s11
 8009d30:	eef0 0a46 	vmov.f32	s1, s12
 8009d34:	eeb0 0a66 	vmov.f32	s0, s13
 8009d38:	f7f9 fb70 	bl	800341c <straight_table2>
		}
		if(mollifier_mode == ON){
 8009d3c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d10c      	bne.n	8009d5e <slalomR+0x186>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 8009d44:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009d48:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8009d4c:	eeb0 1a47 	vmov.f32	s2, s14
 8009d50:	eddf 0a92 	vldr	s1, [pc, #584]	; 8009f9c <slalomR+0x3c4>
 8009d54:	eeb0 0a67 	vmov.f32	s0, s15
 8009d58:	f7fa faea 	bl	8004330 <mollifier_slalom_table>
 8009d5c:	e015      	b.n	8009d8a <slalomR+0x1b2>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8009d5e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009d62:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009d66:	eef1 7a67 	vneg.f32	s15, s15
 8009d6a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8009d6e:	eef0 2a66 	vmov.f32	s5, s13
 8009d72:	eeb0 2a67 	vmov.f32	s4, s15
 8009d76:	eddf 1a86 	vldr	s3, [pc, #536]	; 8009f90 <slalomR+0x3b8>
 8009d7a:	ed9f 1a85 	vldr	s2, [pc, #532]	; 8009f90 <slalomR+0x3b8>
 8009d7e:	eddf 0a87 	vldr	s1, [pc, #540]	; 8009f9c <slalomR+0x3c4>
 8009d82:	eeb0 0a47 	vmov.f32	s0, s14
 8009d86:	f7fa f983 	bl	8004090 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8009d92:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009d96:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8009f8c <slalomR+0x3b4>
 8009d9a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009d9e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009da2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009da6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009daa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009dae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009db2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8009db6:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8009dba:	ed9f 5a74 	vldr	s10, [pc, #464]	; 8009f8c <slalomR+0x3b4>
 8009dbe:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8009dc2:	68f8      	ldr	r0, [r7, #12]
 8009dc4:	eeb0 2a47 	vmov.f32	s4, s14
 8009dc8:	eef0 1a65 	vmov.f32	s3, s11
 8009dcc:	ed9f 1a70 	vldr	s2, [pc, #448]	; 8009f90 <slalomR+0x3b8>
 8009dd0:	eef0 0a46 	vmov.f32	s1, s12
 8009dd4:	eeb0 0a66 	vmov.f32	s0, s13
 8009dd8:	f7f9 fb20 	bl	800341c <straight_table2>
		highspeed_mode = 0;
 8009ddc:	4b6a      	ldr	r3, [pc, #424]	; (8009f88 <slalomR+0x3b0>)
 8009dde:	2200      	movs	r2, #0
 8009de0:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
//		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
//										fabs(end_velocity*end_velocity-turnpara.g_speed * turnpara.g_speed)  / 2 / turnpara.e_ofset,wallmode);
	}
}
 8009de2:	e0c8      	b.n	8009f76 <slalomR+0x39e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 8009de4:	2300      	movs	r3, #0
 8009de6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 8009de8:	2300      	movs	r3, #0
 8009dea:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 8009dec:	2301      	movs	r3, #1
 8009dee:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 8009df0:	2300      	movs	r3, #0
 8009df2:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 8009df4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d127      	bne.n	8009e4c <slalomR+0x274>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009dfc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009e00:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8009e04:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009e08:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009e0c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 8009e10:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009e14:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009e18:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009e1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e20:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8009e24:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009e28:	eddf 4a58 	vldr	s9, [pc, #352]	; 8009f8c <slalomR+0x3b4>
 8009e2c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	eeb0 2a47 	vmov.f32	s4, s14
 8009e36:	eef0 1a45 	vmov.f32	s3, s10
 8009e3a:	eeb0 1a65 	vmov.f32	s2, s11
 8009e3e:	eef0 0a46 	vmov.f32	s1, s12
 8009e42:	eeb0 0a66 	vmov.f32	s0, s13
 8009e46:	f7f9 fae9 	bl	800341c <straight_table2>
 8009e4a:	e022      	b.n	8009e92 <slalomR+0x2ba>
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009e4c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8009e50:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009e54:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 8009e58:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009e5c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009e60:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009e64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e68:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8009e6c:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009e70:	eddf 4a46 	vldr	s9, [pc, #280]	; 8009f8c <slalomR+0x3b4>
 8009e74:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8009e78:	68f8      	ldr	r0, [r7, #12]
 8009e7a:	eeb0 2a47 	vmov.f32	s4, s14
 8009e7e:	eef0 1a45 	vmov.f32	s3, s10
 8009e82:	eeb0 1a65 	vmov.f32	s2, s11
 8009e86:	eef0 0a46 	vmov.f32	s1, s12
 8009e8a:	eeb0 0a66 	vmov.f32	s0, s13
 8009e8e:	f7f9 fac5 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 8009e92:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d10c      	bne.n	8009eb4 <slalomR+0x2dc>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 8009e9a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009e9e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8009ea2:	eeb0 1a47 	vmov.f32	s2, s14
 8009ea6:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8009f9c <slalomR+0x3c4>
 8009eaa:	eeb0 0a67 	vmov.f32	s0, s15
 8009eae:	f7fa fa3f 	bl	8004330 <mollifier_slalom_table>
 8009eb2:	e015      	b.n	8009ee0 <slalomR+0x308>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8009eb4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009eb8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009ebc:	eef1 7a67 	vneg.f32	s15, s15
 8009ec0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8009ec4:	eef0 2a66 	vmov.f32	s5, s13
 8009ec8:	eeb0 2a67 	vmov.f32	s4, s15
 8009ecc:	eddf 1a30 	vldr	s3, [pc, #192]	; 8009f90 <slalomR+0x3b8>
 8009ed0:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 8009f90 <slalomR+0x3b8>
 8009ed4:	eddf 0a31 	vldr	s1, [pc, #196]	; 8009f9c <slalomR+0x3c4>
 8009ed8:	eeb0 0a47 	vmov.f32	s0, s14
 8009edc:	f7fa f8d8 	bl	8004090 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 8009ee8:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 8009eec:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 8009ef0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009ef4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009ef8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009efc:	edd7 7a01 	vldr	s15, [r7, #4]
 8009f00:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009f04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f08:	eef0 7ae7 	vabs.f32	s15, s15
 8009f0c:	ee17 0a90 	vmov	r0, s15
 8009f10:	f7f6 fb42 	bl	8000598 <__aeabi_f2d>
 8009f14:	f04f 0200 	mov.w	r2, #0
 8009f18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009f1c:	f7f6 fcbe 	bl	800089c <__aeabi_ddiv>
 8009f20:	4602      	mov	r2, r0
 8009f22:	460b      	mov	r3, r1
 8009f24:	4614      	mov	r4, r2
 8009f26:	461d      	mov	r5, r3
 8009f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7f6 fb34 	bl	8000598 <__aeabi_f2d>
 8009f30:	4602      	mov	r2, r0
 8009f32:	460b      	mov	r3, r1
 8009f34:	4620      	mov	r0, r4
 8009f36:	4629      	mov	r1, r5
 8009f38:	f7f6 fcb0 	bl	800089c <__aeabi_ddiv>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	460b      	mov	r3, r1
 8009f40:	4610      	mov	r0, r2
 8009f42:	4619      	mov	r1, r3
 8009f44:	f04f 0200 	mov.w	r2, #0
 8009f48:	4b15      	ldr	r3, [pc, #84]	; (8009fa0 <slalomR+0x3c8>)
 8009f4a:	f7f6 f9c7 	bl	80002dc <__adddf3>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 8009f52:	4610      	mov	r0, r2
 8009f54:	4619      	mov	r1, r3
 8009f56:	f7f6 fe4f 	bl	8000bf8 <__aeabi_d2f>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	ee02 3a10 	vmov	s4, r3
 8009f62:	edd7 1a01 	vldr	s3, [r7, #4]
 8009f66:	ed97 1a01 	vldr	s2, [r7, #4]
 8009f6a:	eef0 0a68 	vmov.f32	s1, s17
 8009f6e:	eeb0 0a48 	vmov.f32	s0, s16
 8009f72:	f7f9 fa53 	bl	800341c <straight_table2>
}
 8009f76:	bf00      	nop
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	ecbd 8b02 	vpop	{d8}
 8009f80:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8009f84:	b004      	add	sp, #16
 8009f86:	4770      	bx	lr
 8009f88:	2000080c 	.word	0x2000080c
 8009f8c:	42340000 	.word	0x42340000
 8009f90:	00000000 	.word	0x00000000
 8009f94:	431b8000 	.word	0x431b8000
 8009f98:	43138000 	.word	0x43138000
 8009f9c:	c2b40000 	.word	0xc2b40000
 8009fa0:	408f4000 	.word	0x408f4000

08009fa4 <slalomL>:

void slalomL(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 8009fa4:	b084      	sub	sp, #16
 8009fa6:	b5b0      	push	{r4, r5, r7, lr}
 8009fa8:	ed2d 8b02 	vpush	{d8}
 8009fac:	b084      	sub	sp, #16
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8009fb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009fb8:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 8009fbc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	f040 80f3 	bne.w	800a1ac <slalomL+0x208>
		highspeed_mode = 0;
 8009fc6:	4be1      	ldr	r3, [pc, #900]	; (800a34c <slalomL+0x3a8>)
 8009fc8:	2200      	movs	r2, #0
 8009fca:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 8009fdc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d11f      	bne.n	800a024 <slalomL+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009fe4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8009fe8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009fec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009ff0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009ff4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009ff8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8009ffc:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a000:	eddf 5ad3 	vldr	s11, [pc, #844]	; 800a350 <slalomL+0x3ac>
 800a004:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	eeb0 2a47 	vmov.f32	s4, s14
 800a00e:	eef0 1a46 	vmov.f32	s3, s12
 800a012:	eeb0 1a66 	vmov.f32	s2, s13
 800a016:	eddf 0acf 	vldr	s1, [pc, #828]	; 800a354 <slalomL+0x3b0>
 800a01a:	ed9f 0acf 	vldr	s0, [pc, #828]	; 800a358 <slalomL+0x3b4>
 800a01e:	f7f9 f9fd 	bl	800341c <straight_table2>
 800a022:	e01e      	b.n	800a062 <slalomL+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a024:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a028:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a02c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a030:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a034:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a038:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a03c:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a040:	eddf 5ac3 	vldr	s11, [pc, #780]	; 800a350 <slalomL+0x3ac>
 800a044:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	eeb0 2a47 	vmov.f32	s4, s14
 800a04e:	eef0 1a46 	vmov.f32	s3, s12
 800a052:	eeb0 1a66 	vmov.f32	s2, s13
 800a056:	eddf 0abf 	vldr	s1, [pc, #764]	; 800a354 <slalomL+0x3b0>
 800a05a:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 800a35c <slalomL+0x3b8>
 800a05e:	f7f9 f9dd 	bl	800341c <straight_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800a062:	2300      	movs	r3, #0
 800a064:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=1;
 800a066:	2301      	movs	r3, #1
 800a068:	73fb      	strb	r3, [r7, #15]
		if(shortest_mode==0){
 800a06a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d127      	bne.n	800a0c2 <slalomL+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a072:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a076:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a07a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a07e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a082:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a086:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a08a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a08e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a092:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a096:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a09a:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a09e:	eddf 4aac 	vldr	s9, [pc, #688]	; 800a350 <slalomL+0x3ac>
 800a0a2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	eeb0 2a47 	vmov.f32	s4, s14
 800a0ac:	eef0 1a45 	vmov.f32	s3, s10
 800a0b0:	eeb0 1a65 	vmov.f32	s2, s11
 800a0b4:	eef0 0a46 	vmov.f32	s1, s12
 800a0b8:	eeb0 0a66 	vmov.f32	s0, s13
 800a0bc:	f7f9 f9ae 	bl	800341c <straight_table2>
 800a0c0:	e022      	b.n	800a108 <slalomL+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a0c2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a0c6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a0ca:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a0ce:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a0d2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a0d6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a0da:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a0de:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a0e2:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a0e6:	eddf 4a9a 	vldr	s9, [pc, #616]	; 800a350 <slalomL+0x3ac>
 800a0ea:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	eeb0 2a47 	vmov.f32	s4, s14
 800a0f4:	eef0 1a45 	vmov.f32	s3, s10
 800a0f8:	eeb0 1a65 	vmov.f32	s2, s11
 800a0fc:	eef0 0a46 	vmov.f32	s1, s12
 800a100:	eeb0 0a66 	vmov.f32	s0, s13
 800a104:	f7f9 f98a 	bl	800341c <straight_table2>
		}
		if(mollifier_mode == ON){
 800a108:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d10c      	bne.n	800a12a <slalomL+0x186>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a110:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a114:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a118:	eeb0 1a47 	vmov.f32	s2, s14
 800a11c:	eddf 0a90 	vldr	s1, [pc, #576]	; 800a360 <slalomL+0x3bc>
 800a120:	eeb0 0a67 	vmov.f32	s0, s15
 800a124:	f7fa f904 	bl	8004330 <mollifier_slalom_table>
 800a128:	e013      	b.n	800a152 <slalomL+0x1ae>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a12a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a12e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a132:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a136:	eef0 2a66 	vmov.f32	s5, s13
 800a13a:	eeb0 2a47 	vmov.f32	s4, s14
 800a13e:	eddf 1a85 	vldr	s3, [pc, #532]	; 800a354 <slalomL+0x3b0>
 800a142:	ed9f 1a84 	vldr	s2, [pc, #528]	; 800a354 <slalomL+0x3b0>
 800a146:	eddf 0a86 	vldr	s1, [pc, #536]	; 800a360 <slalomL+0x3bc>
 800a14a:	eeb0 0a67 	vmov.f32	s0, s15
 800a14e:	f7f9 ff9f 	bl	8004090 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800a152:	2300      	movs	r3, #0
 800a154:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a156:	2300      	movs	r3, #0
 800a158:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a15a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a15e:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800a350 <slalomL+0x3ac>
 800a162:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a166:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a16a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a16e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a172:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a176:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a17a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a17e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a182:	ed9f 5a73 	vldr	s10, [pc, #460]	; 800a350 <slalomL+0x3ac>
 800a186:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a18a:	68f8      	ldr	r0, [r7, #12]
 800a18c:	eeb0 2a47 	vmov.f32	s4, s14
 800a190:	eef0 1a65 	vmov.f32	s3, s11
 800a194:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800a354 <slalomL+0x3b0>
 800a198:	eef0 0a46 	vmov.f32	s1, s12
 800a19c:	eeb0 0a66 	vmov.f32	s0, s13
 800a1a0:	f7f9 f93c 	bl	800341c <straight_table2>
		highspeed_mode = 0;
 800a1a4:	4b69      	ldr	r3, [pc, #420]	; (800a34c <slalomL+0x3a8>)
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	701a      	strb	r2, [r3, #0]
		wallmode.WallCutMode=0;
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}
}
 800a1aa:	e0c6      	b.n	800a33a <slalomL+0x396>
		wallmode.WallControlMode=0;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800a1bc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d127      	bne.n	800a214 <slalomL+0x270>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a1c4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a1c8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a1cc:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a1d0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a1d4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a1d8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a1dc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a1e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a1e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a1e8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a1ec:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a1f0:	eddf 4a57 	vldr	s9, [pc, #348]	; 800a350 <slalomL+0x3ac>
 800a1f4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	eeb0 2a47 	vmov.f32	s4, s14
 800a1fe:	eef0 1a45 	vmov.f32	s3, s10
 800a202:	eeb0 1a65 	vmov.f32	s2, s11
 800a206:	eef0 0a46 	vmov.f32	s1, s12
 800a20a:	eeb0 0a66 	vmov.f32	s0, s13
 800a20e:	f7f9 f905 	bl	800341c <straight_table2>
 800a212:	e022      	b.n	800a25a <slalomL+0x2b6>
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a214:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a218:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a21c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a220:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a224:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a228:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a22c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a230:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a234:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a238:	eddf 4a45 	vldr	s9, [pc, #276]	; 800a350 <slalomL+0x3ac>
 800a23c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	eeb0 2a47 	vmov.f32	s4, s14
 800a246:	eef0 1a45 	vmov.f32	s3, s10
 800a24a:	eeb0 1a65 	vmov.f32	s2, s11
 800a24e:	eef0 0a46 	vmov.f32	s1, s12
 800a252:	eeb0 0a66 	vmov.f32	s0, s13
 800a256:	f7f9 f8e1 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800a25a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d10c      	bne.n	800a27c <slalomL+0x2d8>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a262:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a266:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a26a:	eeb0 1a47 	vmov.f32	s2, s14
 800a26e:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800a360 <slalomL+0x3bc>
 800a272:	eeb0 0a67 	vmov.f32	s0, s15
 800a276:	f7fa f85b 	bl	8004330 <mollifier_slalom_table>
 800a27a:	e013      	b.n	800a2a4 <slalomL+0x300>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a27c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a280:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a284:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a288:	eef0 2a66 	vmov.f32	s5, s13
 800a28c:	eeb0 2a47 	vmov.f32	s4, s14
 800a290:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a354 <slalomL+0x3b0>
 800a294:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a354 <slalomL+0x3b0>
 800a298:	eddf 0a31 	vldr	s1, [pc, #196]	; 800a360 <slalomL+0x3bc>
 800a29c:	eeb0 0a67 	vmov.f32	s0, s15
 800a2a0:	f7f9 fef6 	bl	8004090 <slalom_table2>
		wallmode.WallControlMode=0;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a2ac:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a2b0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a2b4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a2b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a2bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a2c0:	edd7 7a01 	vldr	s15, [r7, #4]
 800a2c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a2c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2cc:	eef0 7ae7 	vabs.f32	s15, s15
 800a2d0:	ee17 0a90 	vmov	r0, s15
 800a2d4:	f7f6 f960 	bl	8000598 <__aeabi_f2d>
 800a2d8:	f04f 0200 	mov.w	r2, #0
 800a2dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a2e0:	f7f6 fadc 	bl	800089c <__aeabi_ddiv>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	4614      	mov	r4, r2
 800a2ea:	461d      	mov	r5, r3
 800a2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7f6 f952 	bl	8000598 <__aeabi_f2d>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	4629      	mov	r1, r5
 800a2fc:	f7f6 face 	bl	800089c <__aeabi_ddiv>
 800a300:	4602      	mov	r2, r0
 800a302:	460b      	mov	r3, r1
 800a304:	4610      	mov	r0, r2
 800a306:	4619      	mov	r1, r3
 800a308:	f04f 0200 	mov.w	r2, #0
 800a30c:	4b15      	ldr	r3, [pc, #84]	; (800a364 <slalomL+0x3c0>)
 800a30e:	f7f5 ffe5 	bl	80002dc <__adddf3>
 800a312:	4602      	mov	r2, r0
 800a314:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a316:	4610      	mov	r0, r2
 800a318:	4619      	mov	r1, r3
 800a31a:	f7f6 fc6d 	bl	8000bf8 <__aeabi_d2f>
 800a31e:	4603      	mov	r3, r0
 800a320:	68f8      	ldr	r0, [r7, #12]
 800a322:	ee02 3a10 	vmov	s4, r3
 800a326:	edd7 1a01 	vldr	s3, [r7, #4]
 800a32a:	ed97 1a01 	vldr	s2, [r7, #4]
 800a32e:	eef0 0a68 	vmov.f32	s1, s17
 800a332:	eeb0 0a48 	vmov.f32	s0, s16
 800a336:	f7f9 f871 	bl	800341c <straight_table2>
}
 800a33a:	bf00      	nop
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	ecbd 8b02 	vpop	{d8}
 800a344:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a348:	b004      	add	sp, #16
 800a34a:	4770      	bx	lr
 800a34c:	2000080c 	.word	0x2000080c
 800a350:	42340000 	.word	0x42340000
 800a354:	00000000 	.word	0x00000000
 800a358:	431b8000 	.word	0x431b8000
 800a35c:	43138000 	.word	0x43138000
 800a360:	42b40000 	.word	0x42b40000
 800a364:	408f4000 	.word	0x408f4000

0800a368 <turn90R>:


void turn90R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800a368:	b084      	sub	sp, #16
 800a36a:	b5b0      	push	{r4, r5, r7, lr}
 800a36c:	ed2d 8b02 	vpush	{d8}
 800a370:	b084      	sub	sp, #16
 800a372:	af00      	add	r7, sp, #0
 800a374:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a378:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a37c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800a380:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a384:	2b01      	cmp	r3, #1
 800a386:	f040 80a5 	bne.w	800a4d4 <turn90R+0x16c>
		highspeed_mode = 1;
 800a38a:	4ba5      	ldr	r3, [pc, #660]	; (800a620 <turn90R+0x2b8>)
 800a38c:	2201      	movs	r2, #1
 800a38e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a390:	2301      	movs	r3, #1
 800a392:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a394:	2300      	movs	r3, #0
 800a396:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a398:	2300      	movs	r3, #0
 800a39a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a39c:	2300      	movs	r3, #0
 800a39e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a3a0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a3a4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a3a8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a3ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a3b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a3b4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a3b8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a3bc:	eddf 5a99 	vldr	s11, [pc, #612]	; 800a624 <turn90R+0x2bc>
 800a3c0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a3c4:	68f8      	ldr	r0, [r7, #12]
 800a3c6:	eeb0 2a47 	vmov.f32	s4, s14
 800a3ca:	eef0 1a46 	vmov.f32	s3, s12
 800a3ce:	eeb0 1a66 	vmov.f32	s2, s13
 800a3d2:	eddf 0a95 	vldr	s1, [pc, #596]	; 800a628 <turn90R+0x2c0>
 800a3d6:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800a62c <turn90R+0x2c4>
 800a3da:	f7f9 f81f 	bl	800341c <straight_table2>
		wallmode.WallControlMode=0;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800a3e2:	2302      	movs	r3, #2
 800a3e4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a3e6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a3ea:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a3ee:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a3f2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a3f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a3fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a3fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a402:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a406:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a40a:	eddf 4a86 	vldr	s9, [pc, #536]	; 800a624 <turn90R+0x2bc>
 800a40e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a412:	68f8      	ldr	r0, [r7, #12]
 800a414:	eeb0 2a47 	vmov.f32	s4, s14
 800a418:	eef0 1a45 	vmov.f32	s3, s10
 800a41c:	eeb0 1a65 	vmov.f32	s2, s11
 800a420:	eef0 0a46 	vmov.f32	s1, s12
 800a424:	eeb0 0a66 	vmov.f32	s0, s13
 800a428:	f7f8 fff8 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800a42c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a430:	2b01      	cmp	r3, #1
 800a432:	d10c      	bne.n	800a44e <turn90R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a434:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a438:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a43c:	eeb0 1a47 	vmov.f32	s2, s14
 800a440:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800a630 <turn90R+0x2c8>
 800a444:	eeb0 0a67 	vmov.f32	s0, s15
 800a448:	f7f9 ff72 	bl	8004330 <mollifier_slalom_table>
 800a44c:	e015      	b.n	800a47a <turn90R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a44e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a452:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a456:	eef1 7a67 	vneg.f32	s15, s15
 800a45a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a45e:	eef0 2a66 	vmov.f32	s5, s13
 800a462:	eeb0 2a67 	vmov.f32	s4, s15
 800a466:	eddf 1a70 	vldr	s3, [pc, #448]	; 800a628 <turn90R+0x2c0>
 800a46a:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800a628 <turn90R+0x2c0>
 800a46e:	eddf 0a70 	vldr	s1, [pc, #448]	; 800a630 <turn90R+0x2c8>
 800a472:	eeb0 0a47 	vmov.f32	s0, s14
 800a476:	f7f9 fe0b 	bl	8004090 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800a47a:	2300      	movs	r3, #0
 800a47c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a47e:	2300      	movs	r3, #0
 800a480:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a482:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a486:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800a634 <turn90R+0x2cc>
 800a48a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a48e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a492:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a496:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a49a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a49e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a4a2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a4a6:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a4aa:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800a624 <turn90R+0x2bc>
 800a4ae:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a4b2:	68f8      	ldr	r0, [r7, #12]
 800a4b4:	eeb0 2a47 	vmov.f32	s4, s14
 800a4b8:	eef0 1a65 	vmov.f32	s3, s11
 800a4bc:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800a628 <turn90R+0x2c0>
 800a4c0:	eef0 0a46 	vmov.f32	s1, s12
 800a4c4:	eeb0 0a66 	vmov.f32	s0, s13
 800a4c8:	f7f8 ffa8 	bl	800341c <straight_table2>
		highspeed_mode = 0;
 800a4cc:	4b54      	ldr	r3, [pc, #336]	; (800a620 <turn90R+0x2b8>)
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800a4d2:	e09c      	b.n	800a60e <turn90R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800a4dc:	2302      	movs	r3, #2
 800a4de:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a4e4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a4e8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a4ec:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a4f0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a4f4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a4f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a4fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a500:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a504:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a508:	eddf 4a46 	vldr	s9, [pc, #280]	; 800a624 <turn90R+0x2bc>
 800a50c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	eeb0 2a47 	vmov.f32	s4, s14
 800a516:	eef0 1a45 	vmov.f32	s3, s10
 800a51a:	eeb0 1a65 	vmov.f32	s2, s11
 800a51e:	eef0 0a46 	vmov.f32	s1, s12
 800a522:	eeb0 0a66 	vmov.f32	s0, s13
 800a526:	f7f8 ff79 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800a52a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d10c      	bne.n	800a54c <turn90R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a532:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a536:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a53a:	eeb0 1a47 	vmov.f32	s2, s14
 800a53e:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800a630 <turn90R+0x2c8>
 800a542:	eeb0 0a67 	vmov.f32	s0, s15
 800a546:	f7f9 fef3 	bl	8004330 <mollifier_slalom_table>
 800a54a:	e015      	b.n	800a578 <turn90R+0x210>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a54c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a550:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a554:	eef1 7a67 	vneg.f32	s15, s15
 800a558:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a55c:	eef0 2a66 	vmov.f32	s5, s13
 800a560:	eeb0 2a67 	vmov.f32	s4, s15
 800a564:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a628 <turn90R+0x2c0>
 800a568:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a628 <turn90R+0x2c0>
 800a56c:	eddf 0a30 	vldr	s1, [pc, #192]	; 800a630 <turn90R+0x2c8>
 800a570:	eeb0 0a47 	vmov.f32	s0, s14
 800a574:	f7f9 fd8c 	bl	8004090 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800a578:	2301      	movs	r3, #1
 800a57a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a57c:	2300      	movs	r3, #0
 800a57e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a580:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a584:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a588:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a58c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a590:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a594:	edd7 7a01 	vldr	s15, [r7, #4]
 800a598:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a59c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5a0:	eef0 7ae7 	vabs.f32	s15, s15
 800a5a4:	ee17 0a90 	vmov	r0, s15
 800a5a8:	f7f5 fff6 	bl	8000598 <__aeabi_f2d>
 800a5ac:	f04f 0200 	mov.w	r2, #0
 800a5b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a5b4:	f7f6 f972 	bl	800089c <__aeabi_ddiv>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	4614      	mov	r4, r2
 800a5be:	461d      	mov	r5, r3
 800a5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7f5 ffe8 	bl	8000598 <__aeabi_f2d>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	4629      	mov	r1, r5
 800a5d0:	f7f6 f964 	bl	800089c <__aeabi_ddiv>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	4610      	mov	r0, r2
 800a5da:	4619      	mov	r1, r3
 800a5dc:	f04f 0200 	mov.w	r2, #0
 800a5e0:	4b15      	ldr	r3, [pc, #84]	; (800a638 <turn90R+0x2d0>)
 800a5e2:	f7f5 fe7b 	bl	80002dc <__adddf3>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a5ea:	4610      	mov	r0, r2
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	f7f6 fb03 	bl	8000bf8 <__aeabi_d2f>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	68f8      	ldr	r0, [r7, #12]
 800a5f6:	ee02 3a10 	vmov	s4, r3
 800a5fa:	edd7 1a01 	vldr	s3, [r7, #4]
 800a5fe:	ed97 1a01 	vldr	s2, [r7, #4]
 800a602:	eef0 0a68 	vmov.f32	s1, s17
 800a606:	eeb0 0a48 	vmov.f32	s0, s16
 800a60a:	f7f8 ff07 	bl	800341c <straight_table2>
}
 800a60e:	bf00      	nop
 800a610:	3710      	adds	r7, #16
 800a612:	46bd      	mov	sp, r7
 800a614:	ecbd 8b02 	vpop	{d8}
 800a618:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a61c:	b004      	add	sp, #16
 800a61e:	4770      	bx	lr
 800a620:	2000080c 	.word	0x2000080c
 800a624:	42340000 	.word	0x42340000
 800a628:	00000000 	.word	0x00000000
 800a62c:	42cd0000 	.word	0x42cd0000
 800a630:	c2b40000 	.word	0xc2b40000
 800a634:	42b40000 	.word	0x42b40000
 800a638:	408f4000 	.word	0x408f4000

0800a63c <turn90L>:

void turn90L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800a63c:	b084      	sub	sp, #16
 800a63e:	b5b0      	push	{r4, r5, r7, lr}
 800a640:	ed2d 8b02 	vpush	{d8}
 800a644:	b084      	sub	sp, #16
 800a646:	af00      	add	r7, sp, #0
 800a648:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a64c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a650:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800a654:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a658:	2b01      	cmp	r3, #1
 800a65a:	f040 80a3 	bne.w	800a7a4 <turn90L+0x168>
		highspeed_mode = 1;
 800a65e:	4ba3      	ldr	r3, [pc, #652]	; (800a8ec <turn90L+0x2b0>)
 800a660:	2201      	movs	r2, #1
 800a662:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a664:	2301      	movs	r3, #1
 800a666:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a668:	2300      	movs	r3, #0
 800a66a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a66c:	2300      	movs	r3, #0
 800a66e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a670:	2300      	movs	r3, #0
 800a672:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a674:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a678:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a67c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a680:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a684:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a688:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a68c:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a690:	eddf 5a97 	vldr	s11, [pc, #604]	; 800a8f0 <turn90L+0x2b4>
 800a694:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a698:	68f8      	ldr	r0, [r7, #12]
 800a69a:	eeb0 2a47 	vmov.f32	s4, s14
 800a69e:	eef0 1a46 	vmov.f32	s3, s12
 800a6a2:	eeb0 1a66 	vmov.f32	s2, s13
 800a6a6:	eddf 0a93 	vldr	s1, [pc, #588]	; 800a8f4 <turn90L+0x2b8>
 800a6aa:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800a8f8 <turn90L+0x2bc>
 800a6ae:	f7f8 feb5 	bl	800341c <straight_table2>
		wallmode.WallControlMode=0;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800a6b6:	2302      	movs	r3, #2
 800a6b8:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a6ba:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a6be:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a6c2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a6c6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a6ca:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a6ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a6d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a6d6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a6da:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a6de:	eddf 4a84 	vldr	s9, [pc, #528]	; 800a8f0 <turn90L+0x2b4>
 800a6e2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	eeb0 2a47 	vmov.f32	s4, s14
 800a6ec:	eef0 1a45 	vmov.f32	s3, s10
 800a6f0:	eeb0 1a65 	vmov.f32	s2, s11
 800a6f4:	eef0 0a46 	vmov.f32	s1, s12
 800a6f8:	eeb0 0a66 	vmov.f32	s0, s13
 800a6fc:	f7f8 fe8e 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800a700:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a704:	2b01      	cmp	r3, #1
 800a706:	d10c      	bne.n	800a722 <turn90L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a708:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a70c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a710:	eeb0 1a47 	vmov.f32	s2, s14
 800a714:	eddf 0a79 	vldr	s1, [pc, #484]	; 800a8fc <turn90L+0x2c0>
 800a718:	eeb0 0a67 	vmov.f32	s0, s15
 800a71c:	f7f9 fe08 	bl	8004330 <mollifier_slalom_table>
 800a720:	e013      	b.n	800a74a <turn90L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a722:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a726:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a72a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a72e:	eef0 2a66 	vmov.f32	s5, s13
 800a732:	eeb0 2a47 	vmov.f32	s4, s14
 800a736:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800a8f4 <turn90L+0x2b8>
 800a73a:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800a8f4 <turn90L+0x2b8>
 800a73e:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800a8fc <turn90L+0x2c0>
 800a742:	eeb0 0a67 	vmov.f32	s0, s15
 800a746:	f7f9 fca3 	bl	8004090 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800a74a:	2300      	movs	r3, #0
 800a74c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a74e:	2300      	movs	r3, #0
 800a750:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a752:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a756:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800a8fc <turn90L+0x2c0>
 800a75a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a75e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a762:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a766:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a76a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a76e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a772:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a776:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a77a:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800a8f0 <turn90L+0x2b4>
 800a77e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a782:	68f8      	ldr	r0, [r7, #12]
 800a784:	eeb0 2a47 	vmov.f32	s4, s14
 800a788:	eef0 1a65 	vmov.f32	s3, s11
 800a78c:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800a8f4 <turn90L+0x2b8>
 800a790:	eef0 0a46 	vmov.f32	s1, s12
 800a794:	eeb0 0a66 	vmov.f32	s0, s13
 800a798:	f7f8 fe40 	bl	800341c <straight_table2>
		highspeed_mode = 0;
 800a79c:	4b53      	ldr	r3, [pc, #332]	; (800a8ec <turn90L+0x2b0>)
 800a79e:	2200      	movs	r2, #0
 800a7a0:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800a7a2:	e09a      	b.n	800a8da <turn90L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800a7ac:	2302      	movs	r3, #2
 800a7ae:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a7b4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a7b8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a7bc:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a7c0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a7c4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a7c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a7cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7d0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a7d4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a7d8:	eddf 4a45 	vldr	s9, [pc, #276]	; 800a8f0 <turn90L+0x2b4>
 800a7dc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a7e0:	68f8      	ldr	r0, [r7, #12]
 800a7e2:	eeb0 2a47 	vmov.f32	s4, s14
 800a7e6:	eef0 1a45 	vmov.f32	s3, s10
 800a7ea:	eeb0 1a65 	vmov.f32	s2, s11
 800a7ee:	eef0 0a46 	vmov.f32	s1, s12
 800a7f2:	eeb0 0a66 	vmov.f32	s0, s13
 800a7f6:	f7f8 fe11 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800a7fa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d10c      	bne.n	800a81c <turn90L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a802:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a806:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a80a:	eeb0 1a47 	vmov.f32	s2, s14
 800a80e:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800a8fc <turn90L+0x2c0>
 800a812:	eeb0 0a67 	vmov.f32	s0, s15
 800a816:	f7f9 fd8b 	bl	8004330 <mollifier_slalom_table>
 800a81a:	e013      	b.n	800a844 <turn90L+0x208>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a81c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a820:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a824:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a828:	eef0 2a66 	vmov.f32	s5, s13
 800a82c:	eeb0 2a47 	vmov.f32	s4, s14
 800a830:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a8f4 <turn90L+0x2b8>
 800a834:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a8f4 <turn90L+0x2b8>
 800a838:	eddf 0a30 	vldr	s1, [pc, #192]	; 800a8fc <turn90L+0x2c0>
 800a83c:	eeb0 0a67 	vmov.f32	s0, s15
 800a840:	f7f9 fc26 	bl	8004090 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800a844:	2301      	movs	r3, #1
 800a846:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a848:	2300      	movs	r3, #0
 800a84a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a84c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a850:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a854:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a858:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a85c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a860:	edd7 7a01 	vldr	s15, [r7, #4]
 800a864:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a868:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a86c:	eef0 7ae7 	vabs.f32	s15, s15
 800a870:	ee17 0a90 	vmov	r0, s15
 800a874:	f7f5 fe90 	bl	8000598 <__aeabi_f2d>
 800a878:	f04f 0200 	mov.w	r2, #0
 800a87c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a880:	f7f6 f80c 	bl	800089c <__aeabi_ddiv>
 800a884:	4602      	mov	r2, r0
 800a886:	460b      	mov	r3, r1
 800a888:	4614      	mov	r4, r2
 800a88a:	461d      	mov	r5, r3
 800a88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88e:	4618      	mov	r0, r3
 800a890:	f7f5 fe82 	bl	8000598 <__aeabi_f2d>
 800a894:	4602      	mov	r2, r0
 800a896:	460b      	mov	r3, r1
 800a898:	4620      	mov	r0, r4
 800a89a:	4629      	mov	r1, r5
 800a89c:	f7f5 fffe 	bl	800089c <__aeabi_ddiv>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	4610      	mov	r0, r2
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	f04f 0200 	mov.w	r2, #0
 800a8ac:	4b14      	ldr	r3, [pc, #80]	; (800a900 <turn90L+0x2c4>)
 800a8ae:	f7f5 fd15 	bl	80002dc <__adddf3>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a8b6:	4610      	mov	r0, r2
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	f7f6 f99d 	bl	8000bf8 <__aeabi_d2f>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	68f8      	ldr	r0, [r7, #12]
 800a8c2:	ee02 3a10 	vmov	s4, r3
 800a8c6:	edd7 1a01 	vldr	s3, [r7, #4]
 800a8ca:	ed97 1a01 	vldr	s2, [r7, #4]
 800a8ce:	eef0 0a68 	vmov.f32	s1, s17
 800a8d2:	eeb0 0a48 	vmov.f32	s0, s16
 800a8d6:	f7f8 fda1 	bl	800341c <straight_table2>
}
 800a8da:	bf00      	nop
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	ecbd 8b02 	vpop	{d8}
 800a8e4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a8e8:	b004      	add	sp, #16
 800a8ea:	4770      	bx	lr
 800a8ec:	2000080c 	.word	0x2000080c
 800a8f0:	42340000 	.word	0x42340000
 800a8f4:	00000000 	.word	0x00000000
 800a8f8:	42cd0000 	.word	0x42cd0000
 800a8fc:	42b40000 	.word	0x42b40000
 800a900:	408f4000 	.word	0x408f4000

0800a904 <turn180R>:


void turn180R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800a904:	b084      	sub	sp, #16
 800a906:	b5b0      	push	{r4, r5, r7, lr}
 800a908:	ed2d 8b02 	vpush	{d8}
 800a90c:	b084      	sub	sp, #16
 800a90e:	af00      	add	r7, sp, #0
 800a910:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a914:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a918:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800a91c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a920:	2b01      	cmp	r3, #1
 800a922:	f040 80a5 	bne.w	800aa70 <turn180R+0x16c>
		highspeed_mode = 1;
 800a926:	4ba5      	ldr	r3, [pc, #660]	; (800abbc <turn180R+0x2b8>)
 800a928:	2201      	movs	r2, #1
 800a92a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a92c:	2301      	movs	r3, #1
 800a92e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a930:	2300      	movs	r3, #0
 800a932:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a934:	2300      	movs	r3, #0
 800a936:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a938:	2300      	movs	r3, #0
 800a93a:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a93c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a940:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a944:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a948:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a94c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a950:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a954:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a958:	eddf 5a99 	vldr	s11, [pc, #612]	; 800abc0 <turn180R+0x2bc>
 800a95c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	eeb0 2a47 	vmov.f32	s4, s14
 800a966:	eef0 1a46 	vmov.f32	s3, s12
 800a96a:	eeb0 1a66 	vmov.f32	s2, s13
 800a96e:	eddf 0a95 	vldr	s1, [pc, #596]	; 800abc4 <turn180R+0x2c0>
 800a972:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800abc8 <turn180R+0x2c4>
 800a976:	f7f8 fd51 	bl	800341c <straight_table2>
		wallmode.WallControlMode=0;
 800a97a:	2300      	movs	r3, #0
 800a97c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800a97e:	2302      	movs	r3, #2
 800a980:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a982:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a986:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a98a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a98e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a992:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a996:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a99a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a99e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a9a2:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a9a6:	eddf 4a86 	vldr	s9, [pc, #536]	; 800abc0 <turn180R+0x2bc>
 800a9aa:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a9ae:	68f8      	ldr	r0, [r7, #12]
 800a9b0:	eeb0 2a47 	vmov.f32	s4, s14
 800a9b4:	eef0 1a45 	vmov.f32	s3, s10
 800a9b8:	eeb0 1a65 	vmov.f32	s2, s11
 800a9bc:	eef0 0a46 	vmov.f32	s1, s12
 800a9c0:	eeb0 0a66 	vmov.f32	s0, s13
 800a9c4:	f7f8 fd2a 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800a9c8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d10c      	bne.n	800a9ea <turn180R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800a9d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a9d4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a9d8:	eeb0 1a47 	vmov.f32	s2, s14
 800a9dc:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800abcc <turn180R+0x2c8>
 800a9e0:	eeb0 0a67 	vmov.f32	s0, s15
 800a9e4:	f7f9 fca4 	bl	8004330 <mollifier_slalom_table>
 800a9e8:	e015      	b.n	800aa16 <turn180R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a9ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a9ee:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a9f2:	eef1 7a67 	vneg.f32	s15, s15
 800a9f6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a9fa:	eef0 2a66 	vmov.f32	s5, s13
 800a9fe:	eeb0 2a67 	vmov.f32	s4, s15
 800aa02:	eddf 1a70 	vldr	s3, [pc, #448]	; 800abc4 <turn180R+0x2c0>
 800aa06:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800abc4 <turn180R+0x2c0>
 800aa0a:	eddf 0a70 	vldr	s1, [pc, #448]	; 800abcc <turn180R+0x2c8>
 800aa0e:	eeb0 0a47 	vmov.f32	s0, s14
 800aa12:	f7f9 fb3d 	bl	8004090 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800aa16:	2300      	movs	r3, #0
 800aa18:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800aa1e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800aa22:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800abd0 <turn180R+0x2cc>
 800aa26:	ee77 6a87 	vadd.f32	s13, s15, s14
 800aa2a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800aa2e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aa32:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aa36:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aa3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa3e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800aa42:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800aa46:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800abc0 <turn180R+0x2bc>
 800aa4a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800aa4e:	68f8      	ldr	r0, [r7, #12]
 800aa50:	eeb0 2a47 	vmov.f32	s4, s14
 800aa54:	eef0 1a65 	vmov.f32	s3, s11
 800aa58:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800abc4 <turn180R+0x2c0>
 800aa5c:	eef0 0a46 	vmov.f32	s1, s12
 800aa60:	eeb0 0a66 	vmov.f32	s0, s13
 800aa64:	f7f8 fcda 	bl	800341c <straight_table2>
		highspeed_mode = 0;
 800aa68:	4b54      	ldr	r3, [pc, #336]	; (800abbc <turn180R+0x2b8>)
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800aa6e:	e09c      	b.n	800abaa <turn180R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800aa70:	2300      	movs	r3, #0
 800aa72:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800aa74:	2300      	movs	r3, #0
 800aa76:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800aa78:	2302      	movs	r3, #2
 800aa7a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aa80:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800aa84:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800aa88:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800aa8c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aa90:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aa94:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aa98:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa9c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800aaa0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aaa4:	eddf 4a46 	vldr	s9, [pc, #280]	; 800abc0 <turn180R+0x2bc>
 800aaa8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	eeb0 2a47 	vmov.f32	s4, s14
 800aab2:	eef0 1a45 	vmov.f32	s3, s10
 800aab6:	eeb0 1a65 	vmov.f32	s2, s11
 800aaba:	eef0 0a46 	vmov.f32	s1, s12
 800aabe:	eeb0 0a66 	vmov.f32	s0, s13
 800aac2:	f7f8 fcab 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800aac6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d10c      	bne.n	800aae8 <turn180R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800aace:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aad2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800aad6:	eeb0 1a47 	vmov.f32	s2, s14
 800aada:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800abcc <turn180R+0x2c8>
 800aade:	eeb0 0a67 	vmov.f32	s0, s15
 800aae2:	f7f9 fc25 	bl	8004330 <mollifier_slalom_table>
 800aae6:	e015      	b.n	800ab14 <turn180R+0x210>
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800aae8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aaec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800aaf0:	eef1 7a67 	vneg.f32	s15, s15
 800aaf4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800aaf8:	eef0 2a66 	vmov.f32	s5, s13
 800aafc:	eeb0 2a67 	vmov.f32	s4, s15
 800ab00:	eddf 1a30 	vldr	s3, [pc, #192]	; 800abc4 <turn180R+0x2c0>
 800ab04:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800abc4 <turn180R+0x2c0>
 800ab08:	eddf 0a30 	vldr	s1, [pc, #192]	; 800abcc <turn180R+0x2c8>
 800ab0c:	eeb0 0a47 	vmov.f32	s0, s14
 800ab10:	f7f9 fabe 	bl	8004090 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800ab14:	2301      	movs	r3, #1
 800ab16:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ab1c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800ab20:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800ab24:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab28:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab30:	edd7 7a01 	vldr	s15, [r7, #4]
 800ab34:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ab38:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab3c:	eef0 7ae7 	vabs.f32	s15, s15
 800ab40:	ee17 0a90 	vmov	r0, s15
 800ab44:	f7f5 fd28 	bl	8000598 <__aeabi_f2d>
 800ab48:	f04f 0200 	mov.w	r2, #0
 800ab4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ab50:	f7f5 fea4 	bl	800089c <__aeabi_ddiv>
 800ab54:	4602      	mov	r2, r0
 800ab56:	460b      	mov	r3, r1
 800ab58:	4614      	mov	r4, r2
 800ab5a:	461d      	mov	r5, r3
 800ab5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7f5 fd1a 	bl	8000598 <__aeabi_f2d>
 800ab64:	4602      	mov	r2, r0
 800ab66:	460b      	mov	r3, r1
 800ab68:	4620      	mov	r0, r4
 800ab6a:	4629      	mov	r1, r5
 800ab6c:	f7f5 fe96 	bl	800089c <__aeabi_ddiv>
 800ab70:	4602      	mov	r2, r0
 800ab72:	460b      	mov	r3, r1
 800ab74:	4610      	mov	r0, r2
 800ab76:	4619      	mov	r1, r3
 800ab78:	f04f 0200 	mov.w	r2, #0
 800ab7c:	4b15      	ldr	r3, [pc, #84]	; (800abd4 <turn180R+0x2d0>)
 800ab7e:	f7f5 fbad 	bl	80002dc <__adddf3>
 800ab82:	4602      	mov	r2, r0
 800ab84:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ab86:	4610      	mov	r0, r2
 800ab88:	4619      	mov	r1, r3
 800ab8a:	f7f6 f835 	bl	8000bf8 <__aeabi_d2f>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	68f8      	ldr	r0, [r7, #12]
 800ab92:	ee02 3a10 	vmov	s4, r3
 800ab96:	edd7 1a01 	vldr	s3, [r7, #4]
 800ab9a:	ed97 1a01 	vldr	s2, [r7, #4]
 800ab9e:	eef0 0a68 	vmov.f32	s1, s17
 800aba2:	eeb0 0a48 	vmov.f32	s0, s16
 800aba6:	f7f8 fc39 	bl	800341c <straight_table2>
}
 800abaa:	bf00      	nop
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	ecbd 8b02 	vpop	{d8}
 800abb4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800abb8:	b004      	add	sp, #16
 800abba:	4770      	bx	lr
 800abbc:	2000080c 	.word	0x2000080c
 800abc0:	42340000 	.word	0x42340000
 800abc4:	00000000 	.word	0x00000000
 800abc8:	42cd0000 	.word	0x42cd0000
 800abcc:	c3340000 	.word	0xc3340000
 800abd0:	42b40000 	.word	0x42b40000
 800abd4:	408f4000 	.word	0x408f4000

0800abd8 <turn180L>:

void turn180L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800abd8:	b084      	sub	sp, #16
 800abda:	b5b0      	push	{r4, r5, r7, lr}
 800abdc:	ed2d 8b02 	vpush	{d8}
 800abe0:	b084      	sub	sp, #16
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800abe8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800abec:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800abf0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	f040 80a3 	bne.w	800ad40 <turn180L+0x168>
		highspeed_mode = 1;
 800abfa:	4ba3      	ldr	r3, [pc, #652]	; (800ae88 <turn180L+0x2b0>)
 800abfc:	2201      	movs	r2, #1
 800abfe:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800ac00:	2301      	movs	r3, #1
 800ac02:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ac04:	2300      	movs	r3, #0
 800ac06:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ac10:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ac14:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ac18:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ac1c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ac20:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac24:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800ac28:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ac2c:	eddf 5a97 	vldr	s11, [pc, #604]	; 800ae8c <turn180L+0x2b4>
 800ac30:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800ac34:	68f8      	ldr	r0, [r7, #12]
 800ac36:	eeb0 2a47 	vmov.f32	s4, s14
 800ac3a:	eef0 1a46 	vmov.f32	s3, s12
 800ac3e:	eeb0 1a66 	vmov.f32	s2, s13
 800ac42:	eddf 0a93 	vldr	s1, [pc, #588]	; 800ae90 <turn180L+0x2b8>
 800ac46:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800ae94 <turn180L+0x2bc>
 800ac4a:	f7f8 fbe7 	bl	800341c <straight_table2>
		wallmode.WallControlMode=0;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800ac52:	2302      	movs	r3, #2
 800ac54:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ac56:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ac5a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ac5e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ac62:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ac66:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ac6a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ac6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac72:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ac76:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ac7a:	eddf 4a84 	vldr	s9, [pc, #528]	; 800ae8c <turn180L+0x2b4>
 800ac7e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ac82:	68f8      	ldr	r0, [r7, #12]
 800ac84:	eeb0 2a47 	vmov.f32	s4, s14
 800ac88:	eef0 1a45 	vmov.f32	s3, s10
 800ac8c:	eeb0 1a65 	vmov.f32	s2, s11
 800ac90:	eef0 0a46 	vmov.f32	s1, s12
 800ac94:	eeb0 0a66 	vmov.f32	s0, s13
 800ac98:	f7f8 fbc0 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800ac9c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d10c      	bne.n	800acbe <turn180L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800aca4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aca8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800acac:	eeb0 1a47 	vmov.f32	s2, s14
 800acb0:	eddf 0a79 	vldr	s1, [pc, #484]	; 800ae98 <turn180L+0x2c0>
 800acb4:	eeb0 0a67 	vmov.f32	s0, s15
 800acb8:	f7f9 fb3a 	bl	8004330 <mollifier_slalom_table>
 800acbc:	e013      	b.n	800ace6 <turn180L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800acbe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800acc2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800acc6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800acca:	eef0 2a66 	vmov.f32	s5, s13
 800acce:	eeb0 2a47 	vmov.f32	s4, s14
 800acd2:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800ae90 <turn180L+0x2b8>
 800acd6:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800ae90 <turn180L+0x2b8>
 800acda:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800ae98 <turn180L+0x2c0>
 800acde:	eeb0 0a67 	vmov.f32	s0, s15
 800ace2:	f7f9 f9d5 	bl	8004090 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800ace6:	2300      	movs	r3, #0
 800ace8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800acea:	2300      	movs	r3, #0
 800acec:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800acee:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800acf2:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800ae9c <turn180L+0x2c4>
 800acf6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800acfa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800acfe:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ad02:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad06:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad0e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ad12:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ad16:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800ae8c <turn180L+0x2b4>
 800ad1a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ad1e:	68f8      	ldr	r0, [r7, #12]
 800ad20:	eeb0 2a47 	vmov.f32	s4, s14
 800ad24:	eef0 1a65 	vmov.f32	s3, s11
 800ad28:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800ae90 <turn180L+0x2b8>
 800ad2c:	eef0 0a46 	vmov.f32	s1, s12
 800ad30:	eeb0 0a66 	vmov.f32	s0, s13
 800ad34:	f7f8 fb72 	bl	800341c <straight_table2>
		highspeed_mode = 0;
 800ad38:	4b53      	ldr	r3, [pc, #332]	; (800ae88 <turn180L+0x2b0>)
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800ad3e:	e09a      	b.n	800ae76 <turn180L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800ad40:	2300      	movs	r3, #0
 800ad42:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ad44:	2300      	movs	r3, #0
 800ad46:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800ad48:	2302      	movs	r3, #2
 800ad4a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ad50:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ad54:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ad58:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ad5c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ad60:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad64:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad68:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad6c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ad70:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ad74:	eddf 4a45 	vldr	s9, [pc, #276]	; 800ae8c <turn180L+0x2b4>
 800ad78:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ad7c:	68f8      	ldr	r0, [r7, #12]
 800ad7e:	eeb0 2a47 	vmov.f32	s4, s14
 800ad82:	eef0 1a45 	vmov.f32	s3, s10
 800ad86:	eeb0 1a65 	vmov.f32	s2, s11
 800ad8a:	eef0 0a46 	vmov.f32	s1, s12
 800ad8e:	eeb0 0a66 	vmov.f32	s0, s13
 800ad92:	f7f8 fb43 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800ad96:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	d10c      	bne.n	800adb8 <turn180L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800ad9e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ada2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ada6:	eeb0 1a47 	vmov.f32	s2, s14
 800adaa:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800ae98 <turn180L+0x2c0>
 800adae:	eeb0 0a67 	vmov.f32	s0, s15
 800adb2:	f7f9 fabd 	bl	8004330 <mollifier_slalom_table>
 800adb6:	e013      	b.n	800ade0 <turn180L+0x208>
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800adb8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800adbc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800adc0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800adc4:	eef0 2a66 	vmov.f32	s5, s13
 800adc8:	eeb0 2a47 	vmov.f32	s4, s14
 800adcc:	eddf 1a30 	vldr	s3, [pc, #192]	; 800ae90 <turn180L+0x2b8>
 800add0:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800ae90 <turn180L+0x2b8>
 800add4:	eddf 0a30 	vldr	s1, [pc, #192]	; 800ae98 <turn180L+0x2c0>
 800add8:	eeb0 0a67 	vmov.f32	s0, s15
 800addc:	f7f9 f958 	bl	8004090 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800ade0:	2301      	movs	r3, #1
 800ade2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ade4:	2300      	movs	r3, #0
 800ade6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ade8:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800adec:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800adf0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800adf4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800adf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800adfc:	edd7 7a01 	vldr	s15, [r7, #4]
 800ae00:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ae04:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae08:	eef0 7ae7 	vabs.f32	s15, s15
 800ae0c:	ee17 0a90 	vmov	r0, s15
 800ae10:	f7f5 fbc2 	bl	8000598 <__aeabi_f2d>
 800ae14:	f04f 0200 	mov.w	r2, #0
 800ae18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae1c:	f7f5 fd3e 	bl	800089c <__aeabi_ddiv>
 800ae20:	4602      	mov	r2, r0
 800ae22:	460b      	mov	r3, r1
 800ae24:	4614      	mov	r4, r2
 800ae26:	461d      	mov	r5, r3
 800ae28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7f5 fbb4 	bl	8000598 <__aeabi_f2d>
 800ae30:	4602      	mov	r2, r0
 800ae32:	460b      	mov	r3, r1
 800ae34:	4620      	mov	r0, r4
 800ae36:	4629      	mov	r1, r5
 800ae38:	f7f5 fd30 	bl	800089c <__aeabi_ddiv>
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	460b      	mov	r3, r1
 800ae40:	4610      	mov	r0, r2
 800ae42:	4619      	mov	r1, r3
 800ae44:	f04f 0200 	mov.w	r2, #0
 800ae48:	4b15      	ldr	r3, [pc, #84]	; (800aea0 <turn180L+0x2c8>)
 800ae4a:	f7f5 fa47 	bl	80002dc <__adddf3>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ae52:	4610      	mov	r0, r2
 800ae54:	4619      	mov	r1, r3
 800ae56:	f7f5 fecf 	bl	8000bf8 <__aeabi_d2f>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	68f8      	ldr	r0, [r7, #12]
 800ae5e:	ee02 3a10 	vmov	s4, r3
 800ae62:	edd7 1a01 	vldr	s3, [r7, #4]
 800ae66:	ed97 1a01 	vldr	s2, [r7, #4]
 800ae6a:	eef0 0a68 	vmov.f32	s1, s17
 800ae6e:	eeb0 0a48 	vmov.f32	s0, s16
 800ae72:	f7f8 fad3 	bl	800341c <straight_table2>
}
 800ae76:	bf00      	nop
 800ae78:	3710      	adds	r7, #16
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	ecbd 8b02 	vpop	{d8}
 800ae80:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ae84:	b004      	add	sp, #16
 800ae86:	4770      	bx	lr
 800ae88:	2000080c 	.word	0x2000080c
 800ae8c:	42340000 	.word	0x42340000
 800ae90:	00000000 	.word	0x00000000
 800ae94:	42cd0000 	.word	0x42cd0000
 800ae98:	43340000 	.word	0x43340000
 800ae9c:	42b40000 	.word	0x42b40000
 800aea0:	408f4000 	.word	0x408f4000
 800aea4:	00000000 	.word	0x00000000

0800aea8 <turn45inR>:



void turn45inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800aea8:	b084      	sub	sp, #16
 800aeaa:	b5b0      	push	{r4, r5, r7, lr}
 800aeac:	ed2d 8b02 	vpush	{d8}
 800aeb0:	b084      	sub	sp, #16
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800aeb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800aebc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800aec0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	f040 80ae 	bne.w	800b026 <turn45inR+0x17e>
		highspeed_mode = 1;
 800aeca:	4bdd      	ldr	r3, [pc, #884]	; (800b240 <turn45inR+0x398>)
 800aecc:	2201      	movs	r2, #1
 800aece:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800aed0:	2301      	movs	r3, #1
 800aed2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800aed4:	2300      	movs	r3, #0
 800aed6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800aed8:	2300      	movs	r3, #0
 800aeda:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800aedc:	2300      	movs	r3, #0
 800aede:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800aee0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800aee4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aee8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aeec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aef0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aef4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800aef8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800aefc:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800b244 <turn45inR+0x39c>
 800af00:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800af04:	68f8      	ldr	r0, [r7, #12]
 800af06:	eeb0 2a47 	vmov.f32	s4, s14
 800af0a:	eef0 1a46 	vmov.f32	s3, s12
 800af0e:	eeb0 1a66 	vmov.f32	s2, s13
 800af12:	eddf 0acf 	vldr	s1, [pc, #828]	; 800b250 <turn45inR+0x3a8>
 800af16:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800b248 <turn45inR+0x3a0>
 800af1a:	f7f8 fa7f 	bl	800341c <straight_table2>
		wallmode.WallControlMode=0;
 800af1e:	2300      	movs	r3, #0
 800af20:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800af22:	2302      	movs	r3, #2
 800af24:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800af26:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800af2a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800af2e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800af32:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800af36:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800af3a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800af3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800af42:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800af46:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800af4a:	eddf 4abe 	vldr	s9, [pc, #760]	; 800b244 <turn45inR+0x39c>
 800af4e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800af52:	68f8      	ldr	r0, [r7, #12]
 800af54:	eeb0 2a47 	vmov.f32	s4, s14
 800af58:	eef0 1a45 	vmov.f32	s3, s10
 800af5c:	eeb0 1a65 	vmov.f32	s2, s11
 800af60:	eef0 0a46 	vmov.f32	s1, s12
 800af64:	eeb0 0a66 	vmov.f32	s0, s13
 800af68:	f7f8 fa58 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800af6c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800af70:	2b01      	cmp	r3, #1
 800af72:	d10c      	bne.n	800af8e <turn45inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800af74:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800af78:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800af7c:	eeb0 1a47 	vmov.f32	s2, s14
 800af80:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800b254 <turn45inR+0x3ac>
 800af84:	eeb0 0a67 	vmov.f32	s0, s15
 800af88:	f7f9 f9d2 	bl	8004330 <mollifier_slalom_table>
 800af8c:	e015      	b.n	800afba <turn45inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800af8e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800af92:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800af96:	eef1 7a67 	vneg.f32	s15, s15
 800af9a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800af9e:	eef0 2a66 	vmov.f32	s5, s13
 800afa2:	eeb0 2a67 	vmov.f32	s4, s15
 800afa6:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800b250 <turn45inR+0x3a8>
 800afaa:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800b250 <turn45inR+0x3a8>
 800afae:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800b254 <turn45inR+0x3ac>
 800afb2:	eeb0 0a47 	vmov.f32	s0, s14
 800afb6:	f7f9 f86b 	bl	8004090 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800afba:	2300      	movs	r3, #0
 800afbc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800afbe:	2300      	movs	r3, #0
 800afc0:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800afc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7f5 fae7 	bl	8000598 <__aeabi_f2d>
 800afca:	a39b      	add	r3, pc, #620	; (adr r3, 800b238 <turn45inR+0x390>)
 800afcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd0:	f7f5 f984 	bl	80002dc <__adddf3>
 800afd4:	4602      	mov	r2, r0
 800afd6:	460b      	mov	r3, r1
 800afd8:	4610      	mov	r0, r2
 800afda:	4619      	mov	r1, r3
 800afdc:	f7f5 fe0c 	bl	8000bf8 <__aeabi_d2f>
 800afe0:	4603      	mov	r3, r0
 800afe2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800afe6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800afea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800afee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aff2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aff6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800affa:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800affe:	eddf 5a91 	vldr	s11, [pc, #580]	; 800b244 <turn45inR+0x39c>
 800b002:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b006:	68f8      	ldr	r0, [r7, #12]
 800b008:	eeb0 2a47 	vmov.f32	s4, s14
 800b00c:	eef0 1a46 	vmov.f32	s3, s12
 800b010:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800b250 <turn45inR+0x3a8>
 800b014:	eef0 0a66 	vmov.f32	s1, s13
 800b018:	ee00 3a10 	vmov	s0, r3
 800b01c:	f7f8 f9fe 	bl	800341c <straight_table2>
		highspeed_mode = 0;
 800b020:	4b87      	ldr	r3, [pc, #540]	; (800b240 <turn45inR+0x398>)
 800b022:	2200      	movs	r2, #0
 800b024:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b026:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	f040 809d 	bne.w	800b16a <turn45inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b030:	2300      	movs	r3, #0
 800b032:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b034:	2300      	movs	r3, #0
 800b036:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b038:	2302      	movs	r3, #2
 800b03a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b03c:	2300      	movs	r3, #0
 800b03e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b040:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b044:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b048:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b04c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b050:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b054:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b058:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b05c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b060:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b064:	eddf 4a77 	vldr	s9, [pc, #476]	; 800b244 <turn45inR+0x39c>
 800b068:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b06c:	68f8      	ldr	r0, [r7, #12]
 800b06e:	eeb0 2a47 	vmov.f32	s4, s14
 800b072:	eef0 1a45 	vmov.f32	s3, s10
 800b076:	eeb0 1a65 	vmov.f32	s2, s11
 800b07a:	eef0 0a46 	vmov.f32	s1, s12
 800b07e:	eeb0 0a66 	vmov.f32	s0, s13
 800b082:	f7f8 f9cb 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800b086:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d10c      	bne.n	800b0a8 <turn45inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b08e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b092:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b096:	eeb0 1a47 	vmov.f32	s2, s14
 800b09a:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800b254 <turn45inR+0x3ac>
 800b09e:	eeb0 0a67 	vmov.f32	s0, s15
 800b0a2:	f7f9 f945 	bl	8004330 <mollifier_slalom_table>
 800b0a6:	e015      	b.n	800b0d4 <turn45inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b0a8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b0ac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b0b0:	eef1 7a67 	vneg.f32	s15, s15
 800b0b4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b0b8:	eef0 2a66 	vmov.f32	s5, s13
 800b0bc:	eeb0 2a67 	vmov.f32	s4, s15
 800b0c0:	eddf 1a63 	vldr	s3, [pc, #396]	; 800b250 <turn45inR+0x3a8>
 800b0c4:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800b250 <turn45inR+0x3a8>
 800b0c8:	eddf 0a62 	vldr	s1, [pc, #392]	; 800b254 <turn45inR+0x3ac>
 800b0cc:	eeb0 0a47 	vmov.f32	s0, s14
 800b0d0:	f7f8 ffde 	bl	8004090 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800b0d4:	2303      	movs	r3, #3
 800b0d6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b0dc:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b0e0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b0e4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b0e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b0ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b0f0:	edd7 7a01 	vldr	s15, [r7, #4]
 800b0f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b0f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0fc:	eef0 7ae7 	vabs.f32	s15, s15
 800b100:	ee17 0a90 	vmov	r0, s15
 800b104:	f7f5 fa48 	bl	8000598 <__aeabi_f2d>
 800b108:	f04f 0200 	mov.w	r2, #0
 800b10c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b110:	f7f5 fbc4 	bl	800089c <__aeabi_ddiv>
 800b114:	4602      	mov	r2, r0
 800b116:	460b      	mov	r3, r1
 800b118:	4614      	mov	r4, r2
 800b11a:	461d      	mov	r5, r3
 800b11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11e:	4618      	mov	r0, r3
 800b120:	f7f5 fa3a 	bl	8000598 <__aeabi_f2d>
 800b124:	4602      	mov	r2, r0
 800b126:	460b      	mov	r3, r1
 800b128:	4620      	mov	r0, r4
 800b12a:	4629      	mov	r1, r5
 800b12c:	f7f5 fbb6 	bl	800089c <__aeabi_ddiv>
 800b130:	4602      	mov	r2, r0
 800b132:	460b      	mov	r3, r1
 800b134:	4610      	mov	r0, r2
 800b136:	4619      	mov	r1, r3
 800b138:	f04f 0200 	mov.w	r2, #0
 800b13c:	4b43      	ldr	r3, [pc, #268]	; (800b24c <turn45inR+0x3a4>)
 800b13e:	f7f5 f8cd 	bl	80002dc <__adddf3>
 800b142:	4602      	mov	r2, r0
 800b144:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b146:	4610      	mov	r0, r2
 800b148:	4619      	mov	r1, r3
 800b14a:	f7f5 fd55 	bl	8000bf8 <__aeabi_d2f>
 800b14e:	4603      	mov	r3, r0
 800b150:	68f8      	ldr	r0, [r7, #12]
 800b152:	ee02 3a10 	vmov	s4, r3
 800b156:	edd7 1a01 	vldr	s3, [r7, #4]
 800b15a:	ed97 1a01 	vldr	s2, [r7, #4]
 800b15e:	eef0 0a68 	vmov.f32	s1, s17
 800b162:	eeb0 0a48 	vmov.f32	s0, s16
 800b166:	f7f8 f959 	bl	800341c <straight_table2>

	}
	if (test_mode >= 2) {
 800b16a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b16e:	2b01      	cmp	r3, #1
 800b170:	f240 80d0 	bls.w	800b314 <turn45inR+0x46c>

		highspeed_mode = 1;
 800b174:	4b32      	ldr	r3, [pc, #200]	; (800b240 <turn45inR+0x398>)
 800b176:	2201      	movs	r2, #1
 800b178:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b17a:	2301      	movs	r3, #1
 800b17c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b17e:	2300      	movs	r3, #0
 800b180:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b182:	2300      	movs	r3, #0
 800b184:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b186:	2300      	movs	r3, #0
 800b188:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b18a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b18e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b192:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b196:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b19a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b19e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b1a2:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b1a6:	eddf 5a27 	vldr	s11, [pc, #156]	; 800b244 <turn45inR+0x39c>
 800b1aa:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b1ae:	68f8      	ldr	r0, [r7, #12]
 800b1b0:	eeb0 2a47 	vmov.f32	s4, s14
 800b1b4:	eef0 1a46 	vmov.f32	s3, s12
 800b1b8:	eeb0 1a66 	vmov.f32	s2, s13
 800b1bc:	eddf 0a24 	vldr	s1, [pc, #144]	; 800b250 <turn45inR+0x3a8>
 800b1c0:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800b248 <turn45inR+0x3a0>
 800b1c4:	f7f8 f92a 	bl	800341c <straight_table2>
		wallmode.WallControlMode=0;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b1cc:	2302      	movs	r3, #2
 800b1ce:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b1d0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b1d4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b1d8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b1dc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b1e0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b1e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b1e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b1ec:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b1f0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b1f4:	eddf 4a13 	vldr	s9, [pc, #76]	; 800b244 <turn45inR+0x39c>
 800b1f8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b1fc:	68f8      	ldr	r0, [r7, #12]
 800b1fe:	eeb0 2a47 	vmov.f32	s4, s14
 800b202:	eef0 1a45 	vmov.f32	s3, s10
 800b206:	eeb0 1a65 	vmov.f32	s2, s11
 800b20a:	eef0 0a46 	vmov.f32	s1, s12
 800b20e:	eeb0 0a66 	vmov.f32	s0, s13
 800b212:	f7f8 f903 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800b216:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d11c      	bne.n	800b258 <turn45inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b21e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b222:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b226:	eeb0 1a47 	vmov.f32	s2, s14
 800b22a:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800b254 <turn45inR+0x3ac>
 800b22e:	eeb0 0a67 	vmov.f32	s0, s15
 800b232:	f7f9 f87d 	bl	8004330 <mollifier_slalom_table>
 800b236:	e025      	b.n	800b284 <turn45inR+0x3dc>
 800b238:	c022ec18 	.word	0xc022ec18
 800b23c:	405fd1de 	.word	0x405fd1de
 800b240:	2000080c 	.word	0x2000080c
 800b244:	42340000 	.word	0x42340000
 800b248:	42cd0000 	.word	0x42cd0000
 800b24c:	408f4000 	.word	0x408f4000
 800b250:	00000000 	.word	0x00000000
 800b254:	c2340000 	.word	0xc2340000
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b258:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b25c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b260:	eef1 7a67 	vneg.f32	s15, s15
 800b264:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b268:	eef0 2a66 	vmov.f32	s5, s13
 800b26c:	eeb0 2a67 	vmov.f32	s4, s15
 800b270:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800b250 <turn45inR+0x3a8>
 800b274:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800b250 <turn45inR+0x3a8>
 800b278:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800b254 <turn45inR+0x3ac>
 800b27c:	eeb0 0a47 	vmov.f32	s0, s14
 800b280:	f7f8 ff06 	bl	8004090 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b284:	2300      	movs	r3, #0
 800b286:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b288:	2300      	movs	r3, #0
 800b28a:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b28c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b290:	3b02      	subs	r3, #2
 800b292:	4618      	mov	r0, r3
 800b294:	f7f5 f96e 	bl	8000574 <__aeabi_i2d>
 800b298:	a325      	add	r3, pc, #148	; (adr r3, 800b330 <turn45inR+0x488>)
 800b29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29e:	f7f5 f9d3 	bl	8000648 <__aeabi_dmul>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	4614      	mov	r4, r2
 800b2a8:	461d      	mov	r5, r3
 800b2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7f5 f973 	bl	8000598 <__aeabi_f2d>
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	4629      	mov	r1, r5
 800b2ba:	f7f5 f80f 	bl	80002dc <__adddf3>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	4610      	mov	r0, r2
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	f7f5 fc97 	bl	8000bf8 <__aeabi_d2f>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b2d0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b2d4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b2d8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b2dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b2e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b2e4:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b2e8:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b2ec:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800b328 <turn45inR+0x480>
 800b2f0:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	eeb0 2a47 	vmov.f32	s4, s14
 800b2fa:	eef0 1a65 	vmov.f32	s3, s11
 800b2fe:	eeb0 1a46 	vmov.f32	s2, s12
 800b302:	eef0 0a66 	vmov.f32	s1, s13
 800b306:	ee00 3a10 	vmov	s0, r3
 800b30a:	f7f8 f887 	bl	800341c <straight_table2>
		highspeed_mode = 0;
 800b30e:	4b07      	ldr	r3, [pc, #28]	; (800b32c <turn45inR+0x484>)
 800b310:	2200      	movs	r2, #0
 800b312:	701a      	strb	r2, [r3, #0]
	}

}
 800b314:	bf00      	nop
 800b316:	3710      	adds	r7, #16
 800b318:	46bd      	mov	sp, r7
 800b31a:	ecbd 8b02 	vpop	{d8}
 800b31e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b322:	b004      	add	sp, #16
 800b324:	4770      	bx	lr
 800b326:	bf00      	nop
 800b328:	42340000 	.word	0x42340000
 800b32c:	2000080c 	.word	0x2000080c
 800b330:	c022ec18 	.word	0xc022ec18
 800b334:	404fd1de 	.word	0x404fd1de

0800b338 <turn45inL>:

void turn45inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b338:	b084      	sub	sp, #16
 800b33a:	b5b0      	push	{r4, r5, r7, lr}
 800b33c:	ed2d 8b02 	vpush	{d8}
 800b340:	b084      	sub	sp, #16
 800b342:	af00      	add	r7, sp, #0
 800b344:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b348:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b34c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b350:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b354:	2b01      	cmp	r3, #1
 800b356:	f040 80ac 	bne.w	800b4b2 <turn45inL+0x17a>
		highspeed_mode = 1;
 800b35a:	4bdb      	ldr	r3, [pc, #876]	; (800b6c8 <turn45inL+0x390>)
 800b35c:	2201      	movs	r2, #1
 800b35e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b360:	2301      	movs	r3, #1
 800b362:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b364:	2300      	movs	r3, #0
 800b366:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b368:	2300      	movs	r3, #0
 800b36a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b36c:	2300      	movs	r3, #0
 800b36e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b370:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b374:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b378:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b37c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b380:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b384:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b388:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b38c:	eddf 5ad2 	vldr	s11, [pc, #840]	; 800b6d8 <turn45inL+0x3a0>
 800b390:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b394:	68f8      	ldr	r0, [r7, #12]
 800b396:	eeb0 2a47 	vmov.f32	s4, s14
 800b39a:	eef0 1a46 	vmov.f32	s3, s12
 800b39e:	eeb0 1a66 	vmov.f32	s2, s13
 800b3a2:	eddf 0acc 	vldr	s1, [pc, #816]	; 800b6d4 <turn45inL+0x39c>
 800b3a6:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 800b6cc <turn45inL+0x394>
 800b3aa:	f7f8 f837 	bl	800341c <straight_table2>
		wallmode.WallControlMode=0;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b3b2:	2302      	movs	r3, #2
 800b3b4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b3b6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b3ba:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b3be:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b3c2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b3c6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b3ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b3ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b3d2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b3d6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b3da:	eddf 4abf 	vldr	s9, [pc, #764]	; 800b6d8 <turn45inL+0x3a0>
 800b3de:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	eeb0 2a47 	vmov.f32	s4, s14
 800b3e8:	eef0 1a45 	vmov.f32	s3, s10
 800b3ec:	eeb0 1a65 	vmov.f32	s2, s11
 800b3f0:	eef0 0a46 	vmov.f32	s1, s12
 800b3f4:	eeb0 0a66 	vmov.f32	s0, s13
 800b3f8:	f7f8 f810 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800b3fc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b400:	2b01      	cmp	r3, #1
 800b402:	d10c      	bne.n	800b41e <turn45inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b404:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b408:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b40c:	eeb0 1a47 	vmov.f32	s2, s14
 800b410:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800b6d8 <turn45inL+0x3a0>
 800b414:	eeb0 0a67 	vmov.f32	s0, s15
 800b418:	f7f8 ff8a 	bl	8004330 <mollifier_slalom_table>
 800b41c:	e013      	b.n	800b446 <turn45inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b41e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b422:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b426:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b42a:	eef0 2a66 	vmov.f32	s5, s13
 800b42e:	eeb0 2a47 	vmov.f32	s4, s14
 800b432:	eddf 1aa8 	vldr	s3, [pc, #672]	; 800b6d4 <turn45inL+0x39c>
 800b436:	ed9f 1aa7 	vldr	s2, [pc, #668]	; 800b6d4 <turn45inL+0x39c>
 800b43a:	eddf 0aa7 	vldr	s1, [pc, #668]	; 800b6d8 <turn45inL+0x3a0>
 800b43e:	eeb0 0a67 	vmov.f32	s0, s15
 800b442:	f7f8 fe25 	bl	8004090 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b446:	2300      	movs	r3, #0
 800b448:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b44a:	2300      	movs	r3, #0
 800b44c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b450:	4618      	mov	r0, r3
 800b452:	f7f5 f8a1 	bl	8000598 <__aeabi_f2d>
 800b456:	a39a      	add	r3, pc, #616	; (adr r3, 800b6c0 <turn45inL+0x388>)
 800b458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45c:	f7f4 ff3e 	bl	80002dc <__adddf3>
 800b460:	4602      	mov	r2, r0
 800b462:	460b      	mov	r3, r1
 800b464:	4610      	mov	r0, r2
 800b466:	4619      	mov	r1, r3
 800b468:	f7f5 fbc6 	bl	8000bf8 <__aeabi_d2f>
 800b46c:	4603      	mov	r3, r0
 800b46e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b472:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b476:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b47a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b47e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b482:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b486:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b48a:	eddf 5a93 	vldr	s11, [pc, #588]	; 800b6d8 <turn45inL+0x3a0>
 800b48e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b492:	68f8      	ldr	r0, [r7, #12]
 800b494:	eeb0 2a47 	vmov.f32	s4, s14
 800b498:	eef0 1a46 	vmov.f32	s3, s12
 800b49c:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 800b6d4 <turn45inL+0x39c>
 800b4a0:	eef0 0a66 	vmov.f32	s1, s13
 800b4a4:	ee00 3a10 	vmov	s0, r3
 800b4a8:	f7f7 ffb8 	bl	800341c <straight_table2>
		highspeed_mode = 0;
 800b4ac:	4b86      	ldr	r3, [pc, #536]	; (800b6c8 <turn45inL+0x390>)
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b4b2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	f040 809b 	bne.w	800b5f2 <turn45inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b4c4:	2302      	movs	r3, #2
 800b4c6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b4cc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b4d0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b4d4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b4d8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b4dc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b4e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b4e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b4e8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b4ec:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b4f0:	eddf 4a79 	vldr	s9, [pc, #484]	; 800b6d8 <turn45inL+0x3a0>
 800b4f4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	eeb0 2a47 	vmov.f32	s4, s14
 800b4fe:	eef0 1a45 	vmov.f32	s3, s10
 800b502:	eeb0 1a65 	vmov.f32	s2, s11
 800b506:	eef0 0a46 	vmov.f32	s1, s12
 800b50a:	eeb0 0a66 	vmov.f32	s0, s13
 800b50e:	f7f7 ff85 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800b512:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b516:	2b01      	cmp	r3, #1
 800b518:	d10c      	bne.n	800b534 <turn45inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b51a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b51e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b522:	eeb0 1a47 	vmov.f32	s2, s14
 800b526:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800b6d8 <turn45inL+0x3a0>
 800b52a:	eeb0 0a67 	vmov.f32	s0, s15
 800b52e:	f7f8 feff 	bl	8004330 <mollifier_slalom_table>
 800b532:	e013      	b.n	800b55c <turn45inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b534:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b538:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b53c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b540:	eef0 2a66 	vmov.f32	s5, s13
 800b544:	eeb0 2a47 	vmov.f32	s4, s14
 800b548:	eddf 1a62 	vldr	s3, [pc, #392]	; 800b6d4 <turn45inL+0x39c>
 800b54c:	ed9f 1a61 	vldr	s2, [pc, #388]	; 800b6d4 <turn45inL+0x39c>
 800b550:	eddf 0a61 	vldr	s1, [pc, #388]	; 800b6d8 <turn45inL+0x3a0>
 800b554:	eeb0 0a67 	vmov.f32	s0, s15
 800b558:	f7f8 fd9a 	bl	8004090 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800b55c:	2303      	movs	r3, #3
 800b55e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b560:	2300      	movs	r3, #0
 800b562:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b564:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b568:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b56c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b570:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b574:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b578:	edd7 7a01 	vldr	s15, [r7, #4]
 800b57c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b580:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b584:	eef0 7ae7 	vabs.f32	s15, s15
 800b588:	ee17 0a90 	vmov	r0, s15
 800b58c:	f7f5 f804 	bl	8000598 <__aeabi_f2d>
 800b590:	f04f 0200 	mov.w	r2, #0
 800b594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b598:	f7f5 f980 	bl	800089c <__aeabi_ddiv>
 800b59c:	4602      	mov	r2, r0
 800b59e:	460b      	mov	r3, r1
 800b5a0:	4614      	mov	r4, r2
 800b5a2:	461d      	mov	r5, r3
 800b5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7f4 fff6 	bl	8000598 <__aeabi_f2d>
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	4629      	mov	r1, r5
 800b5b4:	f7f5 f972 	bl	800089c <__aeabi_ddiv>
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	4610      	mov	r0, r2
 800b5be:	4619      	mov	r1, r3
 800b5c0:	f04f 0200 	mov.w	r2, #0
 800b5c4:	4b42      	ldr	r3, [pc, #264]	; (800b6d0 <turn45inL+0x398>)
 800b5c6:	f7f4 fe89 	bl	80002dc <__adddf3>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b5ce:	4610      	mov	r0, r2
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	f7f5 fb11 	bl	8000bf8 <__aeabi_d2f>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	68f8      	ldr	r0, [r7, #12]
 800b5da:	ee02 3a10 	vmov	s4, r3
 800b5de:	edd7 1a01 	vldr	s3, [r7, #4]
 800b5e2:	ed97 1a01 	vldr	s2, [r7, #4]
 800b5e6:	eef0 0a68 	vmov.f32	s1, s17
 800b5ea:	eeb0 0a48 	vmov.f32	s0, s16
 800b5ee:	f7f7 ff15 	bl	800341c <straight_table2>

	}
	if (test_mode >= 2) {
 800b5f2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	f240 80cc 	bls.w	800b794 <turn45inL+0x45c>

		highspeed_mode = 1;
 800b5fc:	4b32      	ldr	r3, [pc, #200]	; (800b6c8 <turn45inL+0x390>)
 800b5fe:	2201      	movs	r2, #1
 800b600:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b602:	2301      	movs	r3, #1
 800b604:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b606:	2300      	movs	r3, #0
 800b608:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b60a:	2300      	movs	r3, #0
 800b60c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b60e:	2300      	movs	r3, #0
 800b610:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b612:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b616:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b61a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b61e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b622:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b626:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b62a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b62e:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800b6d8 <turn45inL+0x3a0>
 800b632:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	eeb0 2a47 	vmov.f32	s4, s14
 800b63c:	eef0 1a46 	vmov.f32	s3, s12
 800b640:	eeb0 1a66 	vmov.f32	s2, s13
 800b644:	eddf 0a23 	vldr	s1, [pc, #140]	; 800b6d4 <turn45inL+0x39c>
 800b648:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800b6cc <turn45inL+0x394>
 800b64c:	f7f7 fee6 	bl	800341c <straight_table2>
		wallmode.WallControlMode=0;
 800b650:	2300      	movs	r3, #0
 800b652:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b654:	2302      	movs	r3, #2
 800b656:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b658:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b65c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b660:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b664:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b668:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b66c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b670:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b674:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b678:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b67c:	eddf 4a16 	vldr	s9, [pc, #88]	; 800b6d8 <turn45inL+0x3a0>
 800b680:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b684:	68f8      	ldr	r0, [r7, #12]
 800b686:	eeb0 2a47 	vmov.f32	s4, s14
 800b68a:	eef0 1a45 	vmov.f32	s3, s10
 800b68e:	eeb0 1a65 	vmov.f32	s2, s11
 800b692:	eef0 0a46 	vmov.f32	s1, s12
 800b696:	eeb0 0a66 	vmov.f32	s0, s13
 800b69a:	f7f7 febf 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800b69e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	d11a      	bne.n	800b6dc <turn45inL+0x3a4>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b6a6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b6aa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b6ae:	eeb0 1a47 	vmov.f32	s2, s14
 800b6b2:	eddf 0a09 	vldr	s1, [pc, #36]	; 800b6d8 <turn45inL+0x3a0>
 800b6b6:	eeb0 0a67 	vmov.f32	s0, s15
 800b6ba:	f7f8 fe39 	bl	8004330 <mollifier_slalom_table>
 800b6be:	e021      	b.n	800b704 <turn45inL+0x3cc>
 800b6c0:	c022ec18 	.word	0xc022ec18
 800b6c4:	405fd1de 	.word	0x405fd1de
 800b6c8:	2000080c 	.word	0x2000080c
 800b6cc:	42cd0000 	.word	0x42cd0000
 800b6d0:	408f4000 	.word	0x408f4000
 800b6d4:	00000000 	.word	0x00000000
 800b6d8:	42340000 	.word	0x42340000
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b6dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b6e0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b6e4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b6e8:	eef0 2a66 	vmov.f32	s5, s13
 800b6ec:	eeb0 2a47 	vmov.f32	s4, s14
 800b6f0:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800b6d4 <turn45inL+0x39c>
 800b6f4:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800b6d4 <turn45inL+0x39c>
 800b6f8:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800b6d8 <turn45inL+0x3a0>
 800b6fc:	eeb0 0a67 	vmov.f32	s0, s15
 800b700:	f7f8 fcc6 	bl	8004090 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b704:	2300      	movs	r3, #0
 800b706:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b708:	2300      	movs	r3, #0
 800b70a:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b70c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b710:	3b02      	subs	r3, #2
 800b712:	4618      	mov	r0, r3
 800b714:	f7f4 ff2e 	bl	8000574 <__aeabi_i2d>
 800b718:	a325      	add	r3, pc, #148	; (adr r3, 800b7b0 <turn45inL+0x478>)
 800b71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71e:	f7f4 ff93 	bl	8000648 <__aeabi_dmul>
 800b722:	4602      	mov	r2, r0
 800b724:	460b      	mov	r3, r1
 800b726:	4614      	mov	r4, r2
 800b728:	461d      	mov	r5, r3
 800b72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7f4 ff33 	bl	8000598 <__aeabi_f2d>
 800b732:	4602      	mov	r2, r0
 800b734:	460b      	mov	r3, r1
 800b736:	4620      	mov	r0, r4
 800b738:	4629      	mov	r1, r5
 800b73a:	f7f4 fdcf 	bl	80002dc <__adddf3>
 800b73e:	4602      	mov	r2, r0
 800b740:	460b      	mov	r3, r1
 800b742:	4610      	mov	r0, r2
 800b744:	4619      	mov	r1, r3
 800b746:	f7f5 fa57 	bl	8000bf8 <__aeabi_d2f>
 800b74a:	4603      	mov	r3, r0
 800b74c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b750:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b754:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b758:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b75c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b760:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b764:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b768:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b76c:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800b7a8 <turn45inL+0x470>
 800b770:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b774:	68f8      	ldr	r0, [r7, #12]
 800b776:	eeb0 2a47 	vmov.f32	s4, s14
 800b77a:	eef0 1a65 	vmov.f32	s3, s11
 800b77e:	eeb0 1a46 	vmov.f32	s2, s12
 800b782:	eef0 0a66 	vmov.f32	s1, s13
 800b786:	ee00 3a10 	vmov	s0, r3
 800b78a:	f7f7 fe47 	bl	800341c <straight_table2>
		highspeed_mode = 0;
 800b78e:	4b07      	ldr	r3, [pc, #28]	; (800b7ac <turn45inL+0x474>)
 800b790:	2200      	movs	r2, #0
 800b792:	701a      	strb	r2, [r3, #0]
	}

}
 800b794:	bf00      	nop
 800b796:	3710      	adds	r7, #16
 800b798:	46bd      	mov	sp, r7
 800b79a:	ecbd 8b02 	vpop	{d8}
 800b79e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b7a2:	b004      	add	sp, #16
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	42340000 	.word	0x42340000
 800b7ac:	2000080c 	.word	0x2000080c
 800b7b0:	c022ec18 	.word	0xc022ec18
 800b7b4:	404fd1de 	.word	0x404fd1de

0800b7b8 <turn135inR>:

void turn135inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b7b8:	b084      	sub	sp, #16
 800b7ba:	b5b0      	push	{r4, r5, r7, lr}
 800b7bc:	ed2d 8b02 	vpush	{d8}
 800b7c0:	b084      	sub	sp, #16
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b7c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b7cc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b7d0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	f040 80ae 	bne.w	800b936 <turn135inR+0x17e>
		highspeed_mode = 1;
 800b7da:	4bdd      	ldr	r3, [pc, #884]	; (800bb50 <turn135inR+0x398>)
 800b7dc:	2201      	movs	r2, #1
 800b7de:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b7f0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b7f4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b7f8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b7fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b800:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b804:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b808:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b80c:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800bb54 <turn135inR+0x39c>
 800b810:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b814:	68f8      	ldr	r0, [r7, #12]
 800b816:	eeb0 2a47 	vmov.f32	s4, s14
 800b81a:	eef0 1a46 	vmov.f32	s3, s12
 800b81e:	eeb0 1a66 	vmov.f32	s2, s13
 800b822:	eddf 0acf 	vldr	s1, [pc, #828]	; 800bb60 <turn135inR+0x3a8>
 800b826:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800bb58 <turn135inR+0x3a0>
 800b82a:	f7f7 fdf7 	bl	800341c <straight_table2>
		wallmode.WallControlMode=0;
 800b82e:	2300      	movs	r3, #0
 800b830:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b832:	2302      	movs	r3, #2
 800b834:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b836:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b83a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b83e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b842:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b846:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b84a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b84e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b852:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b856:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b85a:	eddf 4abe 	vldr	s9, [pc, #760]	; 800bb54 <turn135inR+0x39c>
 800b85e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b862:	68f8      	ldr	r0, [r7, #12]
 800b864:	eeb0 2a47 	vmov.f32	s4, s14
 800b868:	eef0 1a45 	vmov.f32	s3, s10
 800b86c:	eeb0 1a65 	vmov.f32	s2, s11
 800b870:	eef0 0a46 	vmov.f32	s1, s12
 800b874:	eeb0 0a66 	vmov.f32	s0, s13
 800b878:	f7f7 fdd0 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800b87c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b880:	2b01      	cmp	r3, #1
 800b882:	d10c      	bne.n	800b89e <turn135inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800b884:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b888:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b88c:	eeb0 1a47 	vmov.f32	s2, s14
 800b890:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800bb64 <turn135inR+0x3ac>
 800b894:	eeb0 0a67 	vmov.f32	s0, s15
 800b898:	f7f8 fd4a 	bl	8004330 <mollifier_slalom_table>
 800b89c:	e015      	b.n	800b8ca <turn135inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b89e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b8a2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b8a6:	eef1 7a67 	vneg.f32	s15, s15
 800b8aa:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b8ae:	eef0 2a66 	vmov.f32	s5, s13
 800b8b2:	eeb0 2a67 	vmov.f32	s4, s15
 800b8b6:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800bb60 <turn135inR+0x3a8>
 800b8ba:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800bb60 <turn135inR+0x3a8>
 800b8be:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800bb64 <turn135inR+0x3ac>
 800b8c2:	eeb0 0a47 	vmov.f32	s0, s14
 800b8c6:	f7f8 fbe3 	bl	8004090 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7f4 fe5f 	bl	8000598 <__aeabi_f2d>
 800b8da:	a39b      	add	r3, pc, #620	; (adr r3, 800bb48 <turn135inR+0x390>)
 800b8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e0:	f7f4 fcfc 	bl	80002dc <__adddf3>
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	460b      	mov	r3, r1
 800b8e8:	4610      	mov	r0, r2
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	f7f5 f984 	bl	8000bf8 <__aeabi_d2f>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b8f6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b8fa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b8fe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b902:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b906:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b90a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b90e:	eddf 5a91 	vldr	s11, [pc, #580]	; 800bb54 <turn135inR+0x39c>
 800b912:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b916:	68f8      	ldr	r0, [r7, #12]
 800b918:	eeb0 2a47 	vmov.f32	s4, s14
 800b91c:	eef0 1a46 	vmov.f32	s3, s12
 800b920:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800bb60 <turn135inR+0x3a8>
 800b924:	eef0 0a66 	vmov.f32	s1, s13
 800b928:	ee00 3a10 	vmov	s0, r3
 800b92c:	f7f7 fd76 	bl	800341c <straight_table2>
		highspeed_mode = 0;
 800b930:	4b87      	ldr	r3, [pc, #540]	; (800bb50 <turn135inR+0x398>)
 800b932:	2200      	movs	r2, #0
 800b934:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b936:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	f040 809d 	bne.w	800ba7a <turn135inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b940:	2300      	movs	r3, #0
 800b942:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b944:	2300      	movs	r3, #0
 800b946:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b948:	2302      	movs	r3, #2
 800b94a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b94c:	2300      	movs	r3, #0
 800b94e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b950:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b954:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b958:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b95c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b960:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b964:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b968:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b96c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b970:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b974:	eddf 4a77 	vldr	s9, [pc, #476]	; 800bb54 <turn135inR+0x39c>
 800b978:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b97c:	68f8      	ldr	r0, [r7, #12]
 800b97e:	eeb0 2a47 	vmov.f32	s4, s14
 800b982:	eef0 1a45 	vmov.f32	s3, s10
 800b986:	eeb0 1a65 	vmov.f32	s2, s11
 800b98a:	eef0 0a46 	vmov.f32	s1, s12
 800b98e:	eeb0 0a66 	vmov.f32	s0, s13
 800b992:	f7f7 fd43 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800b996:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b99a:	2b01      	cmp	r3, #1
 800b99c:	d10c      	bne.n	800b9b8 <turn135inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800b99e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b9a2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b9a6:	eeb0 1a47 	vmov.f32	s2, s14
 800b9aa:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800bb64 <turn135inR+0x3ac>
 800b9ae:	eeb0 0a67 	vmov.f32	s0, s15
 800b9b2:	f7f8 fcbd 	bl	8004330 <mollifier_slalom_table>
 800b9b6:	e015      	b.n	800b9e4 <turn135inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b9b8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b9bc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b9c0:	eef1 7a67 	vneg.f32	s15, s15
 800b9c4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b9c8:	eef0 2a66 	vmov.f32	s5, s13
 800b9cc:	eeb0 2a67 	vmov.f32	s4, s15
 800b9d0:	eddf 1a63 	vldr	s3, [pc, #396]	; 800bb60 <turn135inR+0x3a8>
 800b9d4:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800bb60 <turn135inR+0x3a8>
 800b9d8:	eddf 0a62 	vldr	s1, [pc, #392]	; 800bb64 <turn135inR+0x3ac>
 800b9dc:	eeb0 0a47 	vmov.f32	s0, s14
 800b9e0:	f7f8 fb56 	bl	8004090 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800b9e4:	2303      	movs	r3, #3
 800b9e6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b9ec:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b9f0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b9f4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b9f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b9fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba00:	edd7 7a01 	vldr	s15, [r7, #4]
 800ba04:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ba08:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba0c:	eef0 7ae7 	vabs.f32	s15, s15
 800ba10:	ee17 0a90 	vmov	r0, s15
 800ba14:	f7f4 fdc0 	bl	8000598 <__aeabi_f2d>
 800ba18:	f04f 0200 	mov.w	r2, #0
 800ba1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ba20:	f7f4 ff3c 	bl	800089c <__aeabi_ddiv>
 800ba24:	4602      	mov	r2, r0
 800ba26:	460b      	mov	r3, r1
 800ba28:	4614      	mov	r4, r2
 800ba2a:	461d      	mov	r5, r3
 800ba2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7f4 fdb2 	bl	8000598 <__aeabi_f2d>
 800ba34:	4602      	mov	r2, r0
 800ba36:	460b      	mov	r3, r1
 800ba38:	4620      	mov	r0, r4
 800ba3a:	4629      	mov	r1, r5
 800ba3c:	f7f4 ff2e 	bl	800089c <__aeabi_ddiv>
 800ba40:	4602      	mov	r2, r0
 800ba42:	460b      	mov	r3, r1
 800ba44:	4610      	mov	r0, r2
 800ba46:	4619      	mov	r1, r3
 800ba48:	f04f 0200 	mov.w	r2, #0
 800ba4c:	4b43      	ldr	r3, [pc, #268]	; (800bb5c <turn135inR+0x3a4>)
 800ba4e:	f7f4 fc45 	bl	80002dc <__adddf3>
 800ba52:	4602      	mov	r2, r0
 800ba54:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ba56:	4610      	mov	r0, r2
 800ba58:	4619      	mov	r1, r3
 800ba5a:	f7f5 f8cd 	bl	8000bf8 <__aeabi_d2f>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	68f8      	ldr	r0, [r7, #12]
 800ba62:	ee02 3a10 	vmov	s4, r3
 800ba66:	edd7 1a01 	vldr	s3, [r7, #4]
 800ba6a:	ed97 1a01 	vldr	s2, [r7, #4]
 800ba6e:	eef0 0a68 	vmov.f32	s1, s17
 800ba72:	eeb0 0a48 	vmov.f32	s0, s16
 800ba76:	f7f7 fcd1 	bl	800341c <straight_table2>

	}
	if (test_mode >= 2) {
 800ba7a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	f240 80d0 	bls.w	800bc24 <turn135inR+0x46c>

		highspeed_mode = 1;
 800ba84:	4b32      	ldr	r3, [pc, #200]	; (800bb50 <turn135inR+0x398>)
 800ba86:	2201      	movs	r2, #1
 800ba88:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800ba92:	2300      	movs	r3, #0
 800ba94:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ba96:	2300      	movs	r3, #0
 800ba98:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ba9a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ba9e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800baa2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800baa6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800baaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800baae:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bab2:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bab6:	eddf 5a27 	vldr	s11, [pc, #156]	; 800bb54 <turn135inR+0x39c>
 800baba:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800babe:	68f8      	ldr	r0, [r7, #12]
 800bac0:	eeb0 2a47 	vmov.f32	s4, s14
 800bac4:	eef0 1a46 	vmov.f32	s3, s12
 800bac8:	eeb0 1a66 	vmov.f32	s2, s13
 800bacc:	eddf 0a24 	vldr	s1, [pc, #144]	; 800bb60 <turn135inR+0x3a8>
 800bad0:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800bb58 <turn135inR+0x3a0>
 800bad4:	f7f7 fca2 	bl	800341c <straight_table2>
		wallmode.WallControlMode=0;
 800bad8:	2300      	movs	r3, #0
 800bada:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800badc:	2302      	movs	r3, #2
 800bade:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bae0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bae4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bae8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800baec:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800baf0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800baf4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800baf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bafc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bb00:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bb04:	eddf 4a13 	vldr	s9, [pc, #76]	; 800bb54 <turn135inR+0x39c>
 800bb08:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bb0c:	68f8      	ldr	r0, [r7, #12]
 800bb0e:	eeb0 2a47 	vmov.f32	s4, s14
 800bb12:	eef0 1a45 	vmov.f32	s3, s10
 800bb16:	eeb0 1a65 	vmov.f32	s2, s11
 800bb1a:	eef0 0a46 	vmov.f32	s1, s12
 800bb1e:	eeb0 0a66 	vmov.f32	s0, s13
 800bb22:	f7f7 fc7b 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800bb26:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d11c      	bne.n	800bb68 <turn135inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bb2e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb32:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bb36:	eeb0 1a47 	vmov.f32	s2, s14
 800bb3a:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800bb64 <turn135inR+0x3ac>
 800bb3e:	eeb0 0a67 	vmov.f32	s0, s15
 800bb42:	f7f8 fbf5 	bl	8004330 <mollifier_slalom_table>
 800bb46:	e025      	b.n	800bb94 <turn135inR+0x3dc>
 800bb48:	c022ec18 	.word	0xc022ec18
 800bb4c:	405fd1de 	.word	0x405fd1de
 800bb50:	2000080c 	.word	0x2000080c
 800bb54:	42340000 	.word	0x42340000
 800bb58:	42cd0000 	.word	0x42cd0000
 800bb5c:	408f4000 	.word	0x408f4000
 800bb60:	00000000 	.word	0x00000000
 800bb64:	c3070000 	.word	0xc3070000
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bb68:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bb6c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bb70:	eef1 7a67 	vneg.f32	s15, s15
 800bb74:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bb78:	eef0 2a66 	vmov.f32	s5, s13
 800bb7c:	eeb0 2a67 	vmov.f32	s4, s15
 800bb80:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800bb60 <turn135inR+0x3a8>
 800bb84:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800bb60 <turn135inR+0x3a8>
 800bb88:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800bb64 <turn135inR+0x3ac>
 800bb8c:	eeb0 0a47 	vmov.f32	s0, s14
 800bb90:	f7f8 fa7e 	bl	8004090 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bb94:	2300      	movs	r3, #0
 800bb96:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bb9c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bba0:	3b02      	subs	r3, #2
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7f4 fce6 	bl	8000574 <__aeabi_i2d>
 800bba8:	a325      	add	r3, pc, #148	; (adr r3, 800bc40 <turn135inR+0x488>)
 800bbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbae:	f7f4 fd4b 	bl	8000648 <__aeabi_dmul>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	4614      	mov	r4, r2
 800bbb8:	461d      	mov	r5, r3
 800bbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7f4 fceb 	bl	8000598 <__aeabi_f2d>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	4629      	mov	r1, r5
 800bbca:	f7f4 fb87 	bl	80002dc <__adddf3>
 800bbce:	4602      	mov	r2, r0
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	4610      	mov	r0, r2
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	f7f5 f80f 	bl	8000bf8 <__aeabi_d2f>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bbe0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bbe4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bbe8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bbec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bbf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bbf4:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800bbf8:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bbfc:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800bc38 <turn135inR+0x480>
 800bc00:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800bc04:	68f8      	ldr	r0, [r7, #12]
 800bc06:	eeb0 2a47 	vmov.f32	s4, s14
 800bc0a:	eef0 1a65 	vmov.f32	s3, s11
 800bc0e:	eeb0 1a46 	vmov.f32	s2, s12
 800bc12:	eef0 0a66 	vmov.f32	s1, s13
 800bc16:	ee00 3a10 	vmov	s0, r3
 800bc1a:	f7f7 fbff 	bl	800341c <straight_table2>
		highspeed_mode = 0;
 800bc1e:	4b07      	ldr	r3, [pc, #28]	; (800bc3c <turn135inR+0x484>)
 800bc20:	2200      	movs	r2, #0
 800bc22:	701a      	strb	r2, [r3, #0]
	}

}
 800bc24:	bf00      	nop
 800bc26:	3710      	adds	r7, #16
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	ecbd 8b02 	vpop	{d8}
 800bc2e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800bc32:	b004      	add	sp, #16
 800bc34:	4770      	bx	lr
 800bc36:	bf00      	nop
 800bc38:	42340000 	.word	0x42340000
 800bc3c:	2000080c 	.word	0x2000080c
 800bc40:	c022ec18 	.word	0xc022ec18
 800bc44:	404fd1de 	.word	0x404fd1de

0800bc48 <turn135inL>:

void turn135inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800bc48:	b084      	sub	sp, #16
 800bc4a:	b5b0      	push	{r4, r5, r7, lr}
 800bc4c:	ed2d 8b02 	vpush	{d8}
 800bc50:	b084      	sub	sp, #16
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800bc58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bc5c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800bc60:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	f040 80ac 	bne.w	800bdc2 <turn135inL+0x17a>
		highspeed_mode = 1;
 800bc6a:	4bdb      	ldr	r3, [pc, #876]	; (800bfd8 <turn135inL+0x390>)
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bc70:	2301      	movs	r3, #1
 800bc72:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bc74:	2300      	movs	r3, #0
 800bc76:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bc80:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bc84:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bc88:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc90:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc94:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bc98:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bc9c:	eddf 5acf 	vldr	s11, [pc, #828]	; 800bfdc <turn135inL+0x394>
 800bca0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bca4:	68f8      	ldr	r0, [r7, #12]
 800bca6:	eeb0 2a47 	vmov.f32	s4, s14
 800bcaa:	eef0 1a46 	vmov.f32	s3, s12
 800bcae:	eeb0 1a66 	vmov.f32	s2, s13
 800bcb2:	eddf 0acd 	vldr	s1, [pc, #820]	; 800bfe8 <turn135inL+0x3a0>
 800bcb6:	ed9f 0aca 	vldr	s0, [pc, #808]	; 800bfe0 <turn135inL+0x398>
 800bcba:	f7f7 fbaf 	bl	800341c <straight_table2>
		wallmode.WallControlMode=0;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800bcc2:	2302      	movs	r3, #2
 800bcc4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bcc6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bcca:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bcce:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bcd2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bcd6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bcda:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bcde:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bce2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bce6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bcea:	eddf 4abc 	vldr	s9, [pc, #752]	; 800bfdc <turn135inL+0x394>
 800bcee:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bcf2:	68f8      	ldr	r0, [r7, #12]
 800bcf4:	eeb0 2a47 	vmov.f32	s4, s14
 800bcf8:	eef0 1a45 	vmov.f32	s3, s10
 800bcfc:	eeb0 1a65 	vmov.f32	s2, s11
 800bd00:	eef0 0a46 	vmov.f32	s1, s12
 800bd04:	eeb0 0a66 	vmov.f32	s0, s13
 800bd08:	f7f7 fb88 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800bd0c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d10c      	bne.n	800bd2e <turn135inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800bd14:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd18:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bd1c:	eeb0 1a47 	vmov.f32	s2, s14
 800bd20:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800bfec <turn135inL+0x3a4>
 800bd24:	eeb0 0a67 	vmov.f32	s0, s15
 800bd28:	f7f8 fb02 	bl	8004330 <mollifier_slalom_table>
 800bd2c:	e013      	b.n	800bd56 <turn135inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800bd2e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd32:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bd36:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bd3a:	eef0 2a66 	vmov.f32	s5, s13
 800bd3e:	eeb0 2a47 	vmov.f32	s4, s14
 800bd42:	eddf 1aa9 	vldr	s3, [pc, #676]	; 800bfe8 <turn135inL+0x3a0>
 800bd46:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 800bfe8 <turn135inL+0x3a0>
 800bd4a:	eddf 0aa8 	vldr	s1, [pc, #672]	; 800bfec <turn135inL+0x3a4>
 800bd4e:	eeb0 0a67 	vmov.f32	s0, s15
 800bd52:	f7f8 f99d 	bl	8004090 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bd56:	2300      	movs	r3, #0
 800bd58:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7f4 fc19 	bl	8000598 <__aeabi_f2d>
 800bd66:	a39a      	add	r3, pc, #616	; (adr r3, 800bfd0 <turn135inL+0x388>)
 800bd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6c:	f7f4 fab6 	bl	80002dc <__adddf3>
 800bd70:	4602      	mov	r2, r0
 800bd72:	460b      	mov	r3, r1
 800bd74:	4610      	mov	r0, r2
 800bd76:	4619      	mov	r1, r3
 800bd78:	f7f4 ff3e 	bl	8000bf8 <__aeabi_d2f>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bd82:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bd86:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd8a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd92:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bd96:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bd9a:	eddf 5a90 	vldr	s11, [pc, #576]	; 800bfdc <turn135inL+0x394>
 800bd9e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bda2:	68f8      	ldr	r0, [r7, #12]
 800bda4:	eeb0 2a47 	vmov.f32	s4, s14
 800bda8:	eef0 1a46 	vmov.f32	s3, s12
 800bdac:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 800bfe8 <turn135inL+0x3a0>
 800bdb0:	eef0 0a66 	vmov.f32	s1, s13
 800bdb4:	ee00 3a10 	vmov	s0, r3
 800bdb8:	f7f7 fb30 	bl	800341c <straight_table2>
		highspeed_mode = 0;
 800bdbc:	4b86      	ldr	r3, [pc, #536]	; (800bfd8 <turn135inL+0x390>)
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800bdc2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	f040 809b 	bne.w	800bf02 <turn135inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800bdd4:	2302      	movs	r3, #2
 800bdd6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bddc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bde0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bde4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bde8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bdec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bdf0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bdf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdf8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bdfc:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800be00:	eddf 4a76 	vldr	s9, [pc, #472]	; 800bfdc <turn135inL+0x394>
 800be04:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800be08:	68f8      	ldr	r0, [r7, #12]
 800be0a:	eeb0 2a47 	vmov.f32	s4, s14
 800be0e:	eef0 1a45 	vmov.f32	s3, s10
 800be12:	eeb0 1a65 	vmov.f32	s2, s11
 800be16:	eef0 0a46 	vmov.f32	s1, s12
 800be1a:	eeb0 0a66 	vmov.f32	s0, s13
 800be1e:	f7f7 fafd 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800be22:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800be26:	2b01      	cmp	r3, #1
 800be28:	d10c      	bne.n	800be44 <turn135inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800be2a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be2e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800be32:	eeb0 1a47 	vmov.f32	s2, s14
 800be36:	eddf 0a6d 	vldr	s1, [pc, #436]	; 800bfec <turn135inL+0x3a4>
 800be3a:	eeb0 0a67 	vmov.f32	s0, s15
 800be3e:	f7f8 fa77 	bl	8004330 <mollifier_slalom_table>
 800be42:	e013      	b.n	800be6c <turn135inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800be44:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be48:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800be4c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800be50:	eef0 2a66 	vmov.f32	s5, s13
 800be54:	eeb0 2a47 	vmov.f32	s4, s14
 800be58:	eddf 1a63 	vldr	s3, [pc, #396]	; 800bfe8 <turn135inL+0x3a0>
 800be5c:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800bfe8 <turn135inL+0x3a0>
 800be60:	eddf 0a62 	vldr	s1, [pc, #392]	; 800bfec <turn135inL+0x3a4>
 800be64:	eeb0 0a67 	vmov.f32	s0, s15
 800be68:	f7f8 f912 	bl	8004090 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800be6c:	2303      	movs	r3, #3
 800be6e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800be70:	2300      	movs	r3, #0
 800be72:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800be74:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800be78:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800be7c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800be80:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be84:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be88:	edd7 7a01 	vldr	s15, [r7, #4]
 800be8c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800be90:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be94:	eef0 7ae7 	vabs.f32	s15, s15
 800be98:	ee17 0a90 	vmov	r0, s15
 800be9c:	f7f4 fb7c 	bl	8000598 <__aeabi_f2d>
 800bea0:	f04f 0200 	mov.w	r2, #0
 800bea4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bea8:	f7f4 fcf8 	bl	800089c <__aeabi_ddiv>
 800beac:	4602      	mov	r2, r0
 800beae:	460b      	mov	r3, r1
 800beb0:	4614      	mov	r4, r2
 800beb2:	461d      	mov	r5, r3
 800beb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7f4 fb6e 	bl	8000598 <__aeabi_f2d>
 800bebc:	4602      	mov	r2, r0
 800bebe:	460b      	mov	r3, r1
 800bec0:	4620      	mov	r0, r4
 800bec2:	4629      	mov	r1, r5
 800bec4:	f7f4 fcea 	bl	800089c <__aeabi_ddiv>
 800bec8:	4602      	mov	r2, r0
 800beca:	460b      	mov	r3, r1
 800becc:	4610      	mov	r0, r2
 800bece:	4619      	mov	r1, r3
 800bed0:	f04f 0200 	mov.w	r2, #0
 800bed4:	4b43      	ldr	r3, [pc, #268]	; (800bfe4 <turn135inL+0x39c>)
 800bed6:	f7f4 fa01 	bl	80002dc <__adddf3>
 800beda:	4602      	mov	r2, r0
 800bedc:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bede:	4610      	mov	r0, r2
 800bee0:	4619      	mov	r1, r3
 800bee2:	f7f4 fe89 	bl	8000bf8 <__aeabi_d2f>
 800bee6:	4603      	mov	r3, r0
 800bee8:	68f8      	ldr	r0, [r7, #12]
 800beea:	ee02 3a10 	vmov	s4, r3
 800beee:	edd7 1a01 	vldr	s3, [r7, #4]
 800bef2:	ed97 1a01 	vldr	s2, [r7, #4]
 800bef6:	eef0 0a68 	vmov.f32	s1, s17
 800befa:	eeb0 0a48 	vmov.f32	s0, s16
 800befe:	f7f7 fa8d 	bl	800341c <straight_table2>

	}
	if (test_mode >= 2) {
 800bf02:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	f240 80ce 	bls.w	800c0a8 <turn135inL+0x460>

		highspeed_mode = 1;
 800bf0c:	4b32      	ldr	r3, [pc, #200]	; (800bfd8 <turn135inL+0x390>)
 800bf0e:	2201      	movs	r2, #1
 800bf10:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bf12:	2301      	movs	r3, #1
 800bf14:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bf16:	2300      	movs	r3, #0
 800bf18:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bf22:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bf26:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bf2a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf2e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf32:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf36:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bf3a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bf3e:	eddf 5a27 	vldr	s11, [pc, #156]	; 800bfdc <turn135inL+0x394>
 800bf42:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bf46:	68f8      	ldr	r0, [r7, #12]
 800bf48:	eeb0 2a47 	vmov.f32	s4, s14
 800bf4c:	eef0 1a46 	vmov.f32	s3, s12
 800bf50:	eeb0 1a66 	vmov.f32	s2, s13
 800bf54:	eddf 0a24 	vldr	s1, [pc, #144]	; 800bfe8 <turn135inL+0x3a0>
 800bf58:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800bfe0 <turn135inL+0x398>
 800bf5c:	f7f7 fa5e 	bl	800341c <straight_table2>
		wallmode.WallControlMode=0;
 800bf60:	2300      	movs	r3, #0
 800bf62:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800bf64:	2302      	movs	r3, #2
 800bf66:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bf68:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bf6c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bf70:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bf74:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bf78:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf7c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf80:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf84:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bf88:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bf8c:	eddf 4a13 	vldr	s9, [pc, #76]	; 800bfdc <turn135inL+0x394>
 800bf90:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bf94:	68f8      	ldr	r0, [r7, #12]
 800bf96:	eeb0 2a47 	vmov.f32	s4, s14
 800bf9a:	eef0 1a45 	vmov.f32	s3, s10
 800bf9e:	eeb0 1a65 	vmov.f32	s2, s11
 800bfa2:	eef0 0a46 	vmov.f32	s1, s12
 800bfa6:	eeb0 0a66 	vmov.f32	s0, s13
 800bfaa:	f7f7 fa37 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800bfae:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	d11c      	bne.n	800bff0 <turn135inL+0x3a8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800bfb6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bfba:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bfbe:	eeb0 1a47 	vmov.f32	s2, s14
 800bfc2:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800bfec <turn135inL+0x3a4>
 800bfc6:	eeb0 0a67 	vmov.f32	s0, s15
 800bfca:	f7f8 f9b1 	bl	8004330 <mollifier_slalom_table>
 800bfce:	e023      	b.n	800c018 <turn135inL+0x3d0>
 800bfd0:	c022ec18 	.word	0xc022ec18
 800bfd4:	405fd1de 	.word	0x405fd1de
 800bfd8:	2000080c 	.word	0x2000080c
 800bfdc:	42340000 	.word	0x42340000
 800bfe0:	42cd0000 	.word	0x42cd0000
 800bfe4:	408f4000 	.word	0x408f4000
 800bfe8:	00000000 	.word	0x00000000
 800bfec:	43070000 	.word	0x43070000
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800bff0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bff4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bff8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bffc:	eef0 2a66 	vmov.f32	s5, s13
 800c000:	eeb0 2a47 	vmov.f32	s4, s14
 800c004:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800bfe8 <turn135inL+0x3a0>
 800c008:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800bfe8 <turn135inL+0x3a0>
 800c00c:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800bfec <turn135inL+0x3a4>
 800c010:	eeb0 0a67 	vmov.f32	s0, s15
 800c014:	f7f8 f83c 	bl	8004090 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c018:	2300      	movs	r3, #0
 800c01a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c01c:	2300      	movs	r3, #0
 800c01e:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c020:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c024:	3b02      	subs	r3, #2
 800c026:	4618      	mov	r0, r3
 800c028:	f7f4 faa4 	bl	8000574 <__aeabi_i2d>
 800c02c:	a326      	add	r3, pc, #152	; (adr r3, 800c0c8 <turn135inL+0x480>)
 800c02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c032:	f7f4 fb09 	bl	8000648 <__aeabi_dmul>
 800c036:	4602      	mov	r2, r0
 800c038:	460b      	mov	r3, r1
 800c03a:	4614      	mov	r4, r2
 800c03c:	461d      	mov	r5, r3
 800c03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c040:	4618      	mov	r0, r3
 800c042:	f7f4 faa9 	bl	8000598 <__aeabi_f2d>
 800c046:	4602      	mov	r2, r0
 800c048:	460b      	mov	r3, r1
 800c04a:	4620      	mov	r0, r4
 800c04c:	4629      	mov	r1, r5
 800c04e:	f7f4 f945 	bl	80002dc <__adddf3>
 800c052:	4602      	mov	r2, r0
 800c054:	460b      	mov	r3, r1
 800c056:	4610      	mov	r0, r2
 800c058:	4619      	mov	r1, r3
 800c05a:	f7f4 fdcd 	bl	8000bf8 <__aeabi_d2f>
 800c05e:	4603      	mov	r3, r0
 800c060:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c064:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c068:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c06c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c070:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c074:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c078:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c07c:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c080:	ed9f 5a0f 	vldr	s10, [pc, #60]	; 800c0c0 <turn135inL+0x478>
 800c084:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c088:	68f8      	ldr	r0, [r7, #12]
 800c08a:	eeb0 2a47 	vmov.f32	s4, s14
 800c08e:	eef0 1a65 	vmov.f32	s3, s11
 800c092:	eeb0 1a46 	vmov.f32	s2, s12
 800c096:	eef0 0a66 	vmov.f32	s1, s13
 800c09a:	ee00 3a10 	vmov	s0, r3
 800c09e:	f7f7 f9bd 	bl	800341c <straight_table2>
		highspeed_mode = 0;
 800c0a2:	4b08      	ldr	r3, [pc, #32]	; (800c0c4 <turn135inL+0x47c>)
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	701a      	strb	r2, [r3, #0]
	}

}
 800c0a8:	bf00      	nop
 800c0aa:	3710      	adds	r7, #16
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	ecbd 8b02 	vpop	{d8}
 800c0b2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c0b6:	b004      	add	sp, #16
 800c0b8:	4770      	bx	lr
 800c0ba:	bf00      	nop
 800c0bc:	f3af 8000 	nop.w
 800c0c0:	42340000 	.word	0x42340000
 800c0c4:	2000080c 	.word	0x2000080c
 800c0c8:	c022ec18 	.word	0xc022ec18
 800c0cc:	404fd1de 	.word	0x404fd1de

0800c0d0 <turn45outR>:


void turn45outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c0d0:	b084      	sub	sp, #16
 800c0d2:	b5b0      	push	{r4, r5, r7, lr}
 800c0d4:	ed2d 8b02 	vpush	{d8}
 800c0d8:	b084      	sub	sp, #16
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c0e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c0e4:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;

	if (test_mode == 1) {
 800c0e8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	f040 80a5 	bne.w	800c23c <turn45outR+0x16c>
		highspeed_mode = 1;
 800c0f2:	4be9      	ldr	r3, [pc, #932]	; (800c498 <turn45outR+0x3c8>)
 800c0f4:	2201      	movs	r2, #1
 800c0f6:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c100:	2300      	movs	r3, #0
 800c102:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c104:	2300      	movs	r3, #0
 800c106:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c108:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c10c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c110:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c114:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c118:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c11c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c120:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c124:	eddf 5add 	vldr	s11, [pc, #884]	; 800c49c <turn45outR+0x3cc>
 800c128:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c12c:	68f8      	ldr	r0, [r7, #12]
 800c12e:	eeb0 2a47 	vmov.f32	s4, s14
 800c132:	eef0 1a46 	vmov.f32	s3, s12
 800c136:	eeb0 1a66 	vmov.f32	s2, s13
 800c13a:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800c4a0 <turn45outR+0x3d0>
 800c13e:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800c4a4 <turn45outR+0x3d4>
 800c142:	f7f7 f96b 	bl	800341c <straight_table2>
		wallmode.WallControlMode=0;
 800c146:	2300      	movs	r3, #0
 800c148:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=3;
 800c14a:	2303      	movs	r3, #3
 800c14c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c14e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c152:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c156:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c15a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c15e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c162:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c166:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c16a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c16e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c172:	eddf 4aca 	vldr	s9, [pc, #808]	; 800c49c <turn45outR+0x3cc>
 800c176:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c17a:	68f8      	ldr	r0, [r7, #12]
 800c17c:	eeb0 2a47 	vmov.f32	s4, s14
 800c180:	eef0 1a45 	vmov.f32	s3, s10
 800c184:	eeb0 1a65 	vmov.f32	s2, s11
 800c188:	eef0 0a46 	vmov.f32	s1, s12
 800c18c:	eeb0 0a66 	vmov.f32	s0, s13
 800c190:	f7f7 f944 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800c194:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c198:	2b01      	cmp	r3, #1
 800c19a:	d10c      	bne.n	800c1b6 <turn45outR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c19c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c1a0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c1a4:	eeb0 1a47 	vmov.f32	s2, s14
 800c1a8:	eddf 0abf 	vldr	s1, [pc, #764]	; 800c4a8 <turn45outR+0x3d8>
 800c1ac:	eeb0 0a67 	vmov.f32	s0, s15
 800c1b0:	f7f8 f8be 	bl	8004330 <mollifier_slalom_table>
 800c1b4:	e015      	b.n	800c1e2 <turn45outR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c1b6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c1ba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c1be:	eef1 7a67 	vneg.f32	s15, s15
 800c1c2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c1c6:	eef0 2a66 	vmov.f32	s5, s13
 800c1ca:	eeb0 2a67 	vmov.f32	s4, s15
 800c1ce:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800c4a0 <turn45outR+0x3d0>
 800c1d2:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800c4a0 <turn45outR+0x3d0>
 800c1d6:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800c4a8 <turn45outR+0x3d8>
 800c1da:	eeb0 0a47 	vmov.f32	s0, s14
 800c1de:	f7f7 ff57 	bl	8004090 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c1ea:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c1ee:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800c4ac <turn45outR+0x3dc>
 800c1f2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c1f6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c1fa:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c1fe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c202:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c206:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c20a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c20e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c212:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800c49c <turn45outR+0x3cc>
 800c216:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c21a:	68f8      	ldr	r0, [r7, #12]
 800c21c:	eeb0 2a47 	vmov.f32	s4, s14
 800c220:	eef0 1a65 	vmov.f32	s3, s11
 800c224:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800c4a0 <turn45outR+0x3d0>
 800c228:	eef0 0a46 	vmov.f32	s1, s12
 800c22c:	eeb0 0a66 	vmov.f32	s0, s13
 800c230:	f7f7 f8f4 	bl	800341c <straight_table2>
		highspeed_mode = 0;
 800c234:	4b98      	ldr	r3, [pc, #608]	; (800c498 <turn45outR+0x3c8>)
 800c236:	2200      	movs	r2, #0
 800c238:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800c23a:	e123      	b.n	800c484 <turn45outR+0x3b4>
	}else if (test_mode >= 2) {
 800c23c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c240:	2b01      	cmp	r3, #1
 800c242:	f240 8082 	bls.w	800c34a <turn45outR+0x27a>
		highspeed_mode = 1;
 800c246:	4b94      	ldr	r3, [pc, #592]	; (800c498 <turn45outR+0x3c8>)
 800c248:	2201      	movs	r2, #1
 800c24a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c24c:	2300      	movs	r3, #0
 800c24e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c250:	2300      	movs	r3, #0
 800c252:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800c254:	2303      	movs	r3, #3
 800c256:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c258:	2300      	movs	r3, #0
 800c25a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c25c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c260:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c264:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c268:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c26c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c270:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c274:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c278:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c27c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c280:	eddf 4a86 	vldr	s9, [pc, #536]	; 800c49c <turn45outR+0x3cc>
 800c284:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c288:	68f8      	ldr	r0, [r7, #12]
 800c28a:	eeb0 2a47 	vmov.f32	s4, s14
 800c28e:	eef0 1a45 	vmov.f32	s3, s10
 800c292:	eeb0 1a65 	vmov.f32	s2, s11
 800c296:	eef0 0a46 	vmov.f32	s1, s12
 800c29a:	eeb0 0a66 	vmov.f32	s0, s13
 800c29e:	f7f7 f8bd 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800c2a2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d10c      	bne.n	800c2c4 <turn45outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c2aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c2ae:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c2b2:	eeb0 1a47 	vmov.f32	s2, s14
 800c2b6:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800c4a8 <turn45outR+0x3d8>
 800c2ba:	eeb0 0a67 	vmov.f32	s0, s15
 800c2be:	f7f8 f837 	bl	8004330 <mollifier_slalom_table>
 800c2c2:	e015      	b.n	800c2f0 <turn45outR+0x220>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c2c4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c2c8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c2cc:	eef1 7a67 	vneg.f32	s15, s15
 800c2d0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c2d4:	eef0 2a66 	vmov.f32	s5, s13
 800c2d8:	eeb0 2a67 	vmov.f32	s4, s15
 800c2dc:	eddf 1a70 	vldr	s3, [pc, #448]	; 800c4a0 <turn45outR+0x3d0>
 800c2e0:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800c4a0 <turn45outR+0x3d0>
 800c2e4:	eddf 0a70 	vldr	s1, [pc, #448]	; 800c4a8 <turn45outR+0x3d8>
 800c2e8:	eeb0 0a47 	vmov.f32	s0, s14
 800c2ec:	f7f7 fed0 	bl	8004090 <slalom_table2>
		wallmode.WallControlMode=0;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c2f8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c2fc:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800c4ac <turn45outR+0x3dc>
 800c300:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c304:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c308:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c30c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c310:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c314:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c318:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c31c:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c320:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800c49c <turn45outR+0x3cc>
 800c324:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c328:	68f8      	ldr	r0, [r7, #12]
 800c32a:	eeb0 2a47 	vmov.f32	s4, s14
 800c32e:	eef0 1a65 	vmov.f32	s3, s11
 800c332:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800c4a0 <turn45outR+0x3d0>
 800c336:	eef0 0a46 	vmov.f32	s1, s12
 800c33a:	eeb0 0a66 	vmov.f32	s0, s13
 800c33e:	f7f7 f86d 	bl	800341c <straight_table2>
		highspeed_mode = 0;
 800c342:	4b55      	ldr	r3, [pc, #340]	; (800c498 <turn45outR+0x3c8>)
 800c344:	2200      	movs	r2, #0
 800c346:	701a      	strb	r2, [r3, #0]
}
 800c348:	e09c      	b.n	800c484 <turn45outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800c34a:	2300      	movs	r3, #0
 800c34c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c34e:	2300      	movs	r3, #0
 800c350:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800c352:	2303      	movs	r3, #3
 800c354:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c356:	2300      	movs	r3, #0
 800c358:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c35a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c35e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c362:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c366:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c36a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c36e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c372:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c376:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c37a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c37e:	eddf 4a47 	vldr	s9, [pc, #284]	; 800c49c <turn45outR+0x3cc>
 800c382:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c386:	68f8      	ldr	r0, [r7, #12]
 800c388:	eeb0 2a47 	vmov.f32	s4, s14
 800c38c:	eef0 1a45 	vmov.f32	s3, s10
 800c390:	eeb0 1a65 	vmov.f32	s2, s11
 800c394:	eef0 0a46 	vmov.f32	s1, s12
 800c398:	eeb0 0a66 	vmov.f32	s0, s13
 800c39c:	f7f7 f83e 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800c3a0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d10c      	bne.n	800c3c2 <turn45outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c3a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c3ac:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c3b0:	eeb0 1a47 	vmov.f32	s2, s14
 800c3b4:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800c4a8 <turn45outR+0x3d8>
 800c3b8:	eeb0 0a67 	vmov.f32	s0, s15
 800c3bc:	f7f7 ffb8 	bl	8004330 <mollifier_slalom_table>
 800c3c0:	e015      	b.n	800c3ee <turn45outR+0x31e>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c3c2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c3c6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c3ca:	eef1 7a67 	vneg.f32	s15, s15
 800c3ce:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c3d2:	eef0 2a66 	vmov.f32	s5, s13
 800c3d6:	eeb0 2a67 	vmov.f32	s4, s15
 800c3da:	eddf 1a31 	vldr	s3, [pc, #196]	; 800c4a0 <turn45outR+0x3d0>
 800c3de:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800c4a0 <turn45outR+0x3d0>
 800c3e2:	eddf 0a31 	vldr	s1, [pc, #196]	; 800c4a8 <turn45outR+0x3d8>
 800c3e6:	eeb0 0a47 	vmov.f32	s0, s14
 800c3ea:	f7f7 fe51 	bl	8004090 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c3f6:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c3fa:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c3fe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c402:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c406:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c40a:	edd7 7a01 	vldr	s15, [r7, #4]
 800c40e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c412:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c416:	eef0 7ae7 	vabs.f32	s15, s15
 800c41a:	ee17 0a90 	vmov	r0, s15
 800c41e:	f7f4 f8bb 	bl	8000598 <__aeabi_f2d>
 800c422:	f04f 0200 	mov.w	r2, #0
 800c426:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c42a:	f7f4 fa37 	bl	800089c <__aeabi_ddiv>
 800c42e:	4602      	mov	r2, r0
 800c430:	460b      	mov	r3, r1
 800c432:	4614      	mov	r4, r2
 800c434:	461d      	mov	r5, r3
 800c436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c438:	4618      	mov	r0, r3
 800c43a:	f7f4 f8ad 	bl	8000598 <__aeabi_f2d>
 800c43e:	4602      	mov	r2, r0
 800c440:	460b      	mov	r3, r1
 800c442:	4620      	mov	r0, r4
 800c444:	4629      	mov	r1, r5
 800c446:	f7f4 fa29 	bl	800089c <__aeabi_ddiv>
 800c44a:	4602      	mov	r2, r0
 800c44c:	460b      	mov	r3, r1
 800c44e:	4610      	mov	r0, r2
 800c450:	4619      	mov	r1, r3
 800c452:	f04f 0200 	mov.w	r2, #0
 800c456:	4b16      	ldr	r3, [pc, #88]	; (800c4b0 <turn45outR+0x3e0>)
 800c458:	f7f3 ff40 	bl	80002dc <__adddf3>
 800c45c:	4602      	mov	r2, r0
 800c45e:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c460:	4610      	mov	r0, r2
 800c462:	4619      	mov	r1, r3
 800c464:	f7f4 fbc8 	bl	8000bf8 <__aeabi_d2f>
 800c468:	4603      	mov	r3, r0
 800c46a:	68f8      	ldr	r0, [r7, #12]
 800c46c:	ee02 3a10 	vmov	s4, r3
 800c470:	edd7 1a01 	vldr	s3, [r7, #4]
 800c474:	ed97 1a01 	vldr	s2, [r7, #4]
 800c478:	eef0 0a68 	vmov.f32	s1, s17
 800c47c:	eeb0 0a48 	vmov.f32	s0, s16
 800c480:	f7f6 ffcc 	bl	800341c <straight_table2>
}
 800c484:	bf00      	nop
 800c486:	3710      	adds	r7, #16
 800c488:	46bd      	mov	sp, r7
 800c48a:	ecbd 8b02 	vpop	{d8}
 800c48e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c492:	b004      	add	sp, #16
 800c494:	4770      	bx	lr
 800c496:	bf00      	nop
 800c498:	2000080c 	.word	0x2000080c
 800c49c:	42340000 	.word	0x42340000
 800c4a0:	00000000 	.word	0x00000000
 800c4a4:	42c4477b 	.word	0x42c4477b
 800c4a8:	c2340000 	.word	0xc2340000
 800c4ac:	42b40000 	.word	0x42b40000
 800c4b0:	408f4000 	.word	0x408f4000

0800c4b4 <turn45outL>:


void turn45outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c4b4:	b084      	sub	sp, #16
 800c4b6:	b5b0      	push	{r4, r5, r7, lr}
 800c4b8:	ed2d 8b02 	vpush	{d8}
 800c4bc:	b084      	sub	sp, #16
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c4c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c4c8:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c4cc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	f040 80a3 	bne.w	800c61c <turn45outL+0x168>
			highspeed_mode = 1;
 800c4d6:	4be5      	ldr	r3, [pc, #916]	; (800c86c <turn45outL+0x3b8>)
 800c4d8:	2201      	movs	r2, #1
 800c4da:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c4ec:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c4f0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c4f4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c4f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c4fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c500:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c504:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c508:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800c870 <turn45outL+0x3bc>
 800c50c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c510:	68f8      	ldr	r0, [r7, #12]
 800c512:	eeb0 2a47 	vmov.f32	s4, s14
 800c516:	eef0 1a46 	vmov.f32	s3, s12
 800c51a:	eeb0 1a66 	vmov.f32	s2, s13
 800c51e:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800c874 <turn45outL+0x3c0>
 800c522:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800c878 <turn45outL+0x3c4>
 800c526:	f7f6 ff79 	bl	800341c <straight_table2>
			wallmode.WallControlMode=0;
 800c52a:	2300      	movs	r3, #0
 800c52c:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=4;
 800c52e:	2304      	movs	r3, #4
 800c530:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c532:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c536:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c53a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c53e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c542:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c546:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c54a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c54e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c552:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c556:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800c870 <turn45outL+0x3bc>
 800c55a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c55e:	68f8      	ldr	r0, [r7, #12]
 800c560:	eeb0 2a47 	vmov.f32	s4, s14
 800c564:	eef0 1a45 	vmov.f32	s3, s10
 800c568:	eeb0 1a65 	vmov.f32	s2, s11
 800c56c:	eef0 0a46 	vmov.f32	s1, s12
 800c570:	eeb0 0a66 	vmov.f32	s0, s13
 800c574:	f7f6 ff52 	bl	800341c <straight_table2>
			if(mollifier_mode == ON){
 800c578:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d10c      	bne.n	800c59a <turn45outL+0xe6>
				mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c580:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c584:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c588:	eeb0 1a47 	vmov.f32	s2, s14
 800c58c:	eddf 0ab8 	vldr	s1, [pc, #736]	; 800c870 <turn45outL+0x3bc>
 800c590:	eeb0 0a67 	vmov.f32	s0, s15
 800c594:	f7f7 fecc 	bl	8004330 <mollifier_slalom_table>
 800c598:	e013      	b.n	800c5c2 <turn45outL+0x10e>
			}else{
				slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c59a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c59e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c5a2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c5a6:	eef0 2a66 	vmov.f32	s5, s13
 800c5aa:	eeb0 2a47 	vmov.f32	s4, s14
 800c5ae:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800c874 <turn45outL+0x3c0>
 800c5b2:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800c874 <turn45outL+0x3c0>
 800c5b6:	eddf 0aae 	vldr	s1, [pc, #696]	; 800c870 <turn45outL+0x3bc>
 800c5ba:	eeb0 0a67 	vmov.f32	s0, s15
 800c5be:	f7f7 fd67 	bl	8004090 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c5ca:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c5ce:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800c87c <turn45outL+0x3c8>
 800c5d2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c5d6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c5da:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c5de:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c5e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c5e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5ea:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c5ee:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c5f2:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800c870 <turn45outL+0x3bc>
 800c5f6:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c5fa:	68f8      	ldr	r0, [r7, #12]
 800c5fc:	eeb0 2a47 	vmov.f32	s4, s14
 800c600:	eef0 1a65 	vmov.f32	s3, s11
 800c604:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800c874 <turn45outL+0x3c0>
 800c608:	eef0 0a46 	vmov.f32	s1, s12
 800c60c:	eeb0 0a66 	vmov.f32	s0, s13
 800c610:	f7f6 ff04 	bl	800341c <straight_table2>
			highspeed_mode = 0;
 800c614:	4b95      	ldr	r3, [pc, #596]	; (800c86c <turn45outL+0x3b8>)
 800c616:	2200      	movs	r2, #0
 800c618:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800c61a:	e11e      	b.n	800c85a <turn45outL+0x3a6>
		}else if (test_mode >= 2) {
 800c61c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c620:	2b01      	cmp	r3, #1
 800c622:	d97f      	bls.n	800c724 <turn45outL+0x270>
		highspeed_mode = 1;
 800c624:	4b91      	ldr	r3, [pc, #580]	; (800c86c <turn45outL+0x3b8>)
 800c626:	2201      	movs	r2, #1
 800c628:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c62a:	2300      	movs	r3, #0
 800c62c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c62e:	2300      	movs	r3, #0
 800c630:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800c632:	2304      	movs	r3, #4
 800c634:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c636:	2300      	movs	r3, #0
 800c638:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c63a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c63e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c642:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c646:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c64a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c64e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c652:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c656:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c65a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c65e:	eddf 4a84 	vldr	s9, [pc, #528]	; 800c870 <turn45outL+0x3bc>
 800c662:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c666:	68f8      	ldr	r0, [r7, #12]
 800c668:	eeb0 2a47 	vmov.f32	s4, s14
 800c66c:	eef0 1a45 	vmov.f32	s3, s10
 800c670:	eeb0 1a65 	vmov.f32	s2, s11
 800c674:	eef0 0a46 	vmov.f32	s1, s12
 800c678:	eeb0 0a66 	vmov.f32	s0, s13
 800c67c:	f7f6 fece 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800c680:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c684:	2b01      	cmp	r3, #1
 800c686:	d10c      	bne.n	800c6a2 <turn45outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c688:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c68c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c690:	eeb0 1a47 	vmov.f32	s2, s14
 800c694:	eddf 0a76 	vldr	s1, [pc, #472]	; 800c870 <turn45outL+0x3bc>
 800c698:	eeb0 0a67 	vmov.f32	s0, s15
 800c69c:	f7f7 fe48 	bl	8004330 <mollifier_slalom_table>
 800c6a0:	e013      	b.n	800c6ca <turn45outL+0x216>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c6a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c6a6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c6aa:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c6ae:	eef0 2a66 	vmov.f32	s5, s13
 800c6b2:	eeb0 2a47 	vmov.f32	s4, s14
 800c6b6:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800c874 <turn45outL+0x3c0>
 800c6ba:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800c874 <turn45outL+0x3c0>
 800c6be:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800c870 <turn45outL+0x3bc>
 800c6c2:	eeb0 0a67 	vmov.f32	s0, s15
 800c6c6:	f7f7 fce3 	bl	8004090 <slalom_table2>
		wallmode.WallControlMode=0;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c6d2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c6d6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800c87c <turn45outL+0x3c8>
 800c6da:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c6de:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c6e2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c6e6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c6ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c6ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6f2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c6f6:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c6fa:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800c870 <turn45outL+0x3bc>
 800c6fe:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c702:	68f8      	ldr	r0, [r7, #12]
 800c704:	eeb0 2a47 	vmov.f32	s4, s14
 800c708:	eef0 1a65 	vmov.f32	s3, s11
 800c70c:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800c874 <turn45outL+0x3c0>
 800c710:	eef0 0a46 	vmov.f32	s1, s12
 800c714:	eeb0 0a66 	vmov.f32	s0, s13
 800c718:	f7f6 fe80 	bl	800341c <straight_table2>
		highspeed_mode = 0;
 800c71c:	4b53      	ldr	r3, [pc, #332]	; (800c86c <turn45outL+0x3b8>)
 800c71e:	2200      	movs	r2, #0
 800c720:	701a      	strb	r2, [r3, #0]
}
 800c722:	e09a      	b.n	800c85a <turn45outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800c724:	2300      	movs	r3, #0
 800c726:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c728:	2300      	movs	r3, #0
 800c72a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800c72c:	2304      	movs	r3, #4
 800c72e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c730:	2300      	movs	r3, #0
 800c732:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c734:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c738:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c73c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c740:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c744:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c748:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c74c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c750:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c754:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c758:	eddf 4a45 	vldr	s9, [pc, #276]	; 800c870 <turn45outL+0x3bc>
 800c75c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c760:	68f8      	ldr	r0, [r7, #12]
 800c762:	eeb0 2a47 	vmov.f32	s4, s14
 800c766:	eef0 1a45 	vmov.f32	s3, s10
 800c76a:	eeb0 1a65 	vmov.f32	s2, s11
 800c76e:	eef0 0a46 	vmov.f32	s1, s12
 800c772:	eeb0 0a66 	vmov.f32	s0, s13
 800c776:	f7f6 fe51 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800c77a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d10c      	bne.n	800c79c <turn45outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c782:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c786:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c78a:	eeb0 1a47 	vmov.f32	s2, s14
 800c78e:	eddf 0a38 	vldr	s1, [pc, #224]	; 800c870 <turn45outL+0x3bc>
 800c792:	eeb0 0a67 	vmov.f32	s0, s15
 800c796:	f7f7 fdcb 	bl	8004330 <mollifier_slalom_table>
 800c79a:	e013      	b.n	800c7c4 <turn45outL+0x310>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c79c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c7a0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c7a4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c7a8:	eef0 2a66 	vmov.f32	s5, s13
 800c7ac:	eeb0 2a47 	vmov.f32	s4, s14
 800c7b0:	eddf 1a30 	vldr	s3, [pc, #192]	; 800c874 <turn45outL+0x3c0>
 800c7b4:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800c874 <turn45outL+0x3c0>
 800c7b8:	eddf 0a2d 	vldr	s1, [pc, #180]	; 800c870 <turn45outL+0x3bc>
 800c7bc:	eeb0 0a67 	vmov.f32	s0, s15
 800c7c0:	f7f7 fc66 	bl	8004090 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c7cc:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c7d0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c7d4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c7d8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c7dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7e0:	edd7 7a01 	vldr	s15, [r7, #4]
 800c7e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c7e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7ec:	eef0 7ae7 	vabs.f32	s15, s15
 800c7f0:	ee17 0a90 	vmov	r0, s15
 800c7f4:	f7f3 fed0 	bl	8000598 <__aeabi_f2d>
 800c7f8:	f04f 0200 	mov.w	r2, #0
 800c7fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c800:	f7f4 f84c 	bl	800089c <__aeabi_ddiv>
 800c804:	4602      	mov	r2, r0
 800c806:	460b      	mov	r3, r1
 800c808:	4614      	mov	r4, r2
 800c80a:	461d      	mov	r5, r3
 800c80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c80e:	4618      	mov	r0, r3
 800c810:	f7f3 fec2 	bl	8000598 <__aeabi_f2d>
 800c814:	4602      	mov	r2, r0
 800c816:	460b      	mov	r3, r1
 800c818:	4620      	mov	r0, r4
 800c81a:	4629      	mov	r1, r5
 800c81c:	f7f4 f83e 	bl	800089c <__aeabi_ddiv>
 800c820:	4602      	mov	r2, r0
 800c822:	460b      	mov	r3, r1
 800c824:	4610      	mov	r0, r2
 800c826:	4619      	mov	r1, r3
 800c828:	f04f 0200 	mov.w	r2, #0
 800c82c:	4b14      	ldr	r3, [pc, #80]	; (800c880 <turn45outL+0x3cc>)
 800c82e:	f7f3 fd55 	bl	80002dc <__adddf3>
 800c832:	4602      	mov	r2, r0
 800c834:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c836:	4610      	mov	r0, r2
 800c838:	4619      	mov	r1, r3
 800c83a:	f7f4 f9dd 	bl	8000bf8 <__aeabi_d2f>
 800c83e:	4603      	mov	r3, r0
 800c840:	68f8      	ldr	r0, [r7, #12]
 800c842:	ee02 3a10 	vmov	s4, r3
 800c846:	edd7 1a01 	vldr	s3, [r7, #4]
 800c84a:	ed97 1a01 	vldr	s2, [r7, #4]
 800c84e:	eef0 0a68 	vmov.f32	s1, s17
 800c852:	eeb0 0a48 	vmov.f32	s0, s16
 800c856:	f7f6 fde1 	bl	800341c <straight_table2>
}
 800c85a:	bf00      	nop
 800c85c:	3710      	adds	r7, #16
 800c85e:	46bd      	mov	sp, r7
 800c860:	ecbd 8b02 	vpop	{d8}
 800c864:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c868:	b004      	add	sp, #16
 800c86a:	4770      	bx	lr
 800c86c:	2000080c 	.word	0x2000080c
 800c870:	42340000 	.word	0x42340000
 800c874:	00000000 	.word	0x00000000
 800c878:	42c4477b 	.word	0x42c4477b
 800c87c:	42b40000 	.word	0x42b40000
 800c880:	408f4000 	.word	0x408f4000

0800c884 <turn135outR>:



void turn135outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c884:	b084      	sub	sp, #16
 800c886:	b5b0      	push	{r4, r5, r7, lr}
 800c888:	ed2d 8b02 	vpush	{d8}
 800c88c:	b084      	sub	sp, #16
 800c88e:	af00      	add	r7, sp, #0
 800c890:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c894:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c898:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c89c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	f040 80a5 	bne.w	800c9f0 <turn135outR+0x16c>
			highspeed_mode = 1;
 800c8a6:	4be9      	ldr	r3, [pc, #932]	; (800cc4c <turn135outR+0x3c8>)
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c8bc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c8c0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c8c4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c8c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c8cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8d0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c8d4:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c8d8:	eddf 5add 	vldr	s11, [pc, #884]	; 800cc50 <turn135outR+0x3cc>
 800c8dc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c8e0:	68f8      	ldr	r0, [r7, #12]
 800c8e2:	eeb0 2a47 	vmov.f32	s4, s14
 800c8e6:	eef0 1a46 	vmov.f32	s3, s12
 800c8ea:	eeb0 1a66 	vmov.f32	s2, s13
 800c8ee:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800cc54 <turn135outR+0x3d0>
 800c8f2:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800cc58 <turn135outR+0x3d4>
 800c8f6:	f7f6 fd91 	bl	800341c <straight_table2>
			wallmode.WallControlMode=0;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800c8fe:	2303      	movs	r3, #3
 800c900:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c902:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c906:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c90a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c90e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c912:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c916:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c91a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c91e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c922:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c926:	eddf 4aca 	vldr	s9, [pc, #808]	; 800cc50 <turn135outR+0x3cc>
 800c92a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c92e:	68f8      	ldr	r0, [r7, #12]
 800c930:	eeb0 2a47 	vmov.f32	s4, s14
 800c934:	eef0 1a45 	vmov.f32	s3, s10
 800c938:	eeb0 1a65 	vmov.f32	s2, s11
 800c93c:	eef0 0a46 	vmov.f32	s1, s12
 800c940:	eeb0 0a66 	vmov.f32	s0, s13
 800c944:	f7f6 fd6a 	bl	800341c <straight_table2>
			if(mollifier_mode == ON){
 800c948:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c94c:	2b01      	cmp	r3, #1
 800c94e:	d10c      	bne.n	800c96a <turn135outR+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800c950:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c954:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c958:	eeb0 1a47 	vmov.f32	s2, s14
 800c95c:	eddf 0abf 	vldr	s1, [pc, #764]	; 800cc5c <turn135outR+0x3d8>
 800c960:	eeb0 0a67 	vmov.f32	s0, s15
 800c964:	f7f7 fce4 	bl	8004330 <mollifier_slalom_table>
 800c968:	e015      	b.n	800c996 <turn135outR+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c96a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c96e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c972:	eef1 7a67 	vneg.f32	s15, s15
 800c976:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c97a:	eef0 2a66 	vmov.f32	s5, s13
 800c97e:	eeb0 2a67 	vmov.f32	s4, s15
 800c982:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800cc54 <turn135outR+0x3d0>
 800c986:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800cc54 <turn135outR+0x3d0>
 800c98a:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800cc5c <turn135outR+0x3d8>
 800c98e:	eeb0 0a47 	vmov.f32	s0, s14
 800c992:	f7f7 fb7d 	bl	8004090 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800c996:	2300      	movs	r3, #0
 800c998:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800c99a:	2300      	movs	r3, #0
 800c99c:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c99e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c9a2:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800cc60 <turn135outR+0x3dc>
 800c9a6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c9aa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c9ae:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c9b2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c9b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c9ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9be:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c9c2:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c9c6:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800cc50 <turn135outR+0x3cc>
 800c9ca:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c9ce:	68f8      	ldr	r0, [r7, #12]
 800c9d0:	eeb0 2a47 	vmov.f32	s4, s14
 800c9d4:	eef0 1a65 	vmov.f32	s3, s11
 800c9d8:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800cc54 <turn135outR+0x3d0>
 800c9dc:	eef0 0a46 	vmov.f32	s1, s12
 800c9e0:	eeb0 0a66 	vmov.f32	s0, s13
 800c9e4:	f7f6 fd1a 	bl	800341c <straight_table2>
			highspeed_mode = 0;
 800c9e8:	4b98      	ldr	r3, [pc, #608]	; (800cc4c <turn135outR+0x3c8>)
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800c9ee:	e123      	b.n	800cc38 <turn135outR+0x3b4>
		}else if (test_mode >= 2) {
 800c9f0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	f240 8082 	bls.w	800cafe <turn135outR+0x27a>
		highspeed_mode = 1;
 800c9fa:	4b94      	ldr	r3, [pc, #592]	; (800cc4c <turn135outR+0x3c8>)
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800ca00:	2300      	movs	r3, #0
 800ca02:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ca04:	2300      	movs	r3, #0
 800ca06:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800ca08:	2303      	movs	r3, #3
 800ca0a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ca10:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ca14:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ca18:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ca1c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ca20:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ca24:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca28:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca2c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ca30:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ca34:	eddf 4a86 	vldr	s9, [pc, #536]	; 800cc50 <turn135outR+0x3cc>
 800ca38:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ca3c:	68f8      	ldr	r0, [r7, #12]
 800ca3e:	eeb0 2a47 	vmov.f32	s4, s14
 800ca42:	eef0 1a45 	vmov.f32	s3, s10
 800ca46:	eeb0 1a65 	vmov.f32	s2, s11
 800ca4a:	eef0 0a46 	vmov.f32	s1, s12
 800ca4e:	eeb0 0a66 	vmov.f32	s0, s13
 800ca52:	f7f6 fce3 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800ca56:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ca5a:	2b01      	cmp	r3, #1
 800ca5c:	d10c      	bne.n	800ca78 <turn135outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800ca5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca62:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ca66:	eeb0 1a47 	vmov.f32	s2, s14
 800ca6a:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800cc5c <turn135outR+0x3d8>
 800ca6e:	eeb0 0a67 	vmov.f32	s0, s15
 800ca72:	f7f7 fc5d 	bl	8004330 <mollifier_slalom_table>
 800ca76:	e015      	b.n	800caa4 <turn135outR+0x220>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ca78:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ca7c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ca80:	eef1 7a67 	vneg.f32	s15, s15
 800ca84:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ca88:	eef0 2a66 	vmov.f32	s5, s13
 800ca8c:	eeb0 2a67 	vmov.f32	s4, s15
 800ca90:	eddf 1a70 	vldr	s3, [pc, #448]	; 800cc54 <turn135outR+0x3d0>
 800ca94:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800cc54 <turn135outR+0x3d0>
 800ca98:	eddf 0a70 	vldr	s1, [pc, #448]	; 800cc5c <turn135outR+0x3d8>
 800ca9c:	eeb0 0a47 	vmov.f32	s0, s14
 800caa0:	f7f7 faf6 	bl	8004090 <slalom_table2>
		wallmode.WallControlMode=0;
 800caa4:	2300      	movs	r3, #0
 800caa6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800caa8:	2300      	movs	r3, #0
 800caaa:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800caac:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800cab0:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800cc60 <turn135outR+0x3dc>
 800cab4:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cab8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cabc:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cac0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cac4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cac8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cacc:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800cad0:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cad4:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800cc50 <turn135outR+0x3cc>
 800cad8:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cadc:	68f8      	ldr	r0, [r7, #12]
 800cade:	eeb0 2a47 	vmov.f32	s4, s14
 800cae2:	eef0 1a65 	vmov.f32	s3, s11
 800cae6:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800cc54 <turn135outR+0x3d0>
 800caea:	eef0 0a46 	vmov.f32	s1, s12
 800caee:	eeb0 0a66 	vmov.f32	s0, s13
 800caf2:	f7f6 fc93 	bl	800341c <straight_table2>
		highspeed_mode = 0;
 800caf6:	4b55      	ldr	r3, [pc, #340]	; (800cc4c <turn135outR+0x3c8>)
 800caf8:	2200      	movs	r2, #0
 800cafa:	701a      	strb	r2, [r3, #0]
}
 800cafc:	e09c      	b.n	800cc38 <turn135outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800cafe:	2300      	movs	r3, #0
 800cb00:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cb02:	2300      	movs	r3, #0
 800cb04:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800cb06:	2303      	movs	r3, #3
 800cb08:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cb0e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cb12:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cb16:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cb1a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cb1e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cb22:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb26:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb2a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cb2e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cb32:	eddf 4a47 	vldr	s9, [pc, #284]	; 800cc50 <turn135outR+0x3cc>
 800cb36:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cb3a:	68f8      	ldr	r0, [r7, #12]
 800cb3c:	eeb0 2a47 	vmov.f32	s4, s14
 800cb40:	eef0 1a45 	vmov.f32	s3, s10
 800cb44:	eeb0 1a65 	vmov.f32	s2, s11
 800cb48:	eef0 0a46 	vmov.f32	s1, s12
 800cb4c:	eeb0 0a66 	vmov.f32	s0, s13
 800cb50:	f7f6 fc64 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800cb54:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cb58:	2b01      	cmp	r3, #1
 800cb5a:	d10c      	bne.n	800cb76 <turn135outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800cb5c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb60:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cb64:	eeb0 1a47 	vmov.f32	s2, s14
 800cb68:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800cc5c <turn135outR+0x3d8>
 800cb6c:	eeb0 0a67 	vmov.f32	s0, s15
 800cb70:	f7f7 fbde 	bl	8004330 <mollifier_slalom_table>
 800cb74:	e015      	b.n	800cba2 <turn135outR+0x31e>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cb76:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cb7a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cb7e:	eef1 7a67 	vneg.f32	s15, s15
 800cb82:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cb86:	eef0 2a66 	vmov.f32	s5, s13
 800cb8a:	eeb0 2a67 	vmov.f32	s4, s15
 800cb8e:	eddf 1a31 	vldr	s3, [pc, #196]	; 800cc54 <turn135outR+0x3d0>
 800cb92:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800cc54 <turn135outR+0x3d0>
 800cb96:	eddf 0a31 	vldr	s1, [pc, #196]	; 800cc5c <turn135outR+0x3d8>
 800cb9a:	eeb0 0a47 	vmov.f32	s0, s14
 800cb9e:	f7f7 fa77 	bl	8004090 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800cba2:	2301      	movs	r3, #1
 800cba4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cba6:	2300      	movs	r3, #0
 800cba8:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cbaa:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800cbae:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800cbb2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cbb6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cbba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbbe:	edd7 7a01 	vldr	s15, [r7, #4]
 800cbc2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cbc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cbca:	eef0 7ae7 	vabs.f32	s15, s15
 800cbce:	ee17 0a90 	vmov	r0, s15
 800cbd2:	f7f3 fce1 	bl	8000598 <__aeabi_f2d>
 800cbd6:	f04f 0200 	mov.w	r2, #0
 800cbda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cbde:	f7f3 fe5d 	bl	800089c <__aeabi_ddiv>
 800cbe2:	4602      	mov	r2, r0
 800cbe4:	460b      	mov	r3, r1
 800cbe6:	4614      	mov	r4, r2
 800cbe8:	461d      	mov	r5, r3
 800cbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7f3 fcd3 	bl	8000598 <__aeabi_f2d>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	4629      	mov	r1, r5
 800cbfa:	f7f3 fe4f 	bl	800089c <__aeabi_ddiv>
 800cbfe:	4602      	mov	r2, r0
 800cc00:	460b      	mov	r3, r1
 800cc02:	4610      	mov	r0, r2
 800cc04:	4619      	mov	r1, r3
 800cc06:	f04f 0200 	mov.w	r2, #0
 800cc0a:	4b16      	ldr	r3, [pc, #88]	; (800cc64 <turn135outR+0x3e0>)
 800cc0c:	f7f3 fb66 	bl	80002dc <__adddf3>
 800cc10:	4602      	mov	r2, r0
 800cc12:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cc14:	4610      	mov	r0, r2
 800cc16:	4619      	mov	r1, r3
 800cc18:	f7f3 ffee 	bl	8000bf8 <__aeabi_d2f>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	68f8      	ldr	r0, [r7, #12]
 800cc20:	ee02 3a10 	vmov	s4, r3
 800cc24:	edd7 1a01 	vldr	s3, [r7, #4]
 800cc28:	ed97 1a01 	vldr	s2, [r7, #4]
 800cc2c:	eef0 0a68 	vmov.f32	s1, s17
 800cc30:	eeb0 0a48 	vmov.f32	s0, s16
 800cc34:	f7f6 fbf2 	bl	800341c <straight_table2>
}
 800cc38:	bf00      	nop
 800cc3a:	3710      	adds	r7, #16
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	ecbd 8b02 	vpop	{d8}
 800cc42:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800cc46:	b004      	add	sp, #16
 800cc48:	4770      	bx	lr
 800cc4a:	bf00      	nop
 800cc4c:	2000080c 	.word	0x2000080c
 800cc50:	42340000 	.word	0x42340000
 800cc54:	00000000 	.word	0x00000000
 800cc58:	42c4477b 	.word	0x42c4477b
 800cc5c:	c3070000 	.word	0xc3070000
 800cc60:	42b40000 	.word	0x42b40000
 800cc64:	408f4000 	.word	0x408f4000

0800cc68 <turn135outL>:


void turn135outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800cc68:	b084      	sub	sp, #16
 800cc6a:	b5b0      	push	{r4, r5, r7, lr}
 800cc6c:	ed2d 8b02 	vpush	{d8}
 800cc70:	b084      	sub	sp, #16
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800cc78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cc7c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800cc80:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	f040 80a3 	bne.w	800cdd0 <turn135outL+0x168>
		highspeed_mode = 1;
 800cc8a:	4be5      	ldr	r3, [pc, #916]	; (800d020 <turn135outL+0x3b8>)
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800cc90:	2300      	movs	r3, #0
 800cc92:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cc94:	2300      	movs	r3, #0
 800cc96:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cca0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cca4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cca8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ccac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ccb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccb4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800ccb8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800ccbc:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800d024 <turn135outL+0x3bc>
 800ccc0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800ccc4:	68f8      	ldr	r0, [r7, #12]
 800ccc6:	eeb0 2a47 	vmov.f32	s4, s14
 800ccca:	eef0 1a46 	vmov.f32	s3, s12
 800ccce:	eeb0 1a66 	vmov.f32	s2, s13
 800ccd2:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800d028 <turn135outL+0x3c0>
 800ccd6:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800d02c <turn135outL+0x3c4>
 800ccda:	f7f6 fb9f 	bl	800341c <straight_table2>
		wallmode.WallControlMode=0;
 800ccde:	2300      	movs	r3, #0
 800cce0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=4;
 800cce2:	2304      	movs	r3, #4
 800cce4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cce6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ccea:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ccee:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ccf2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ccf6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ccfa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ccfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd02:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cd06:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cd0a:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800d024 <turn135outL+0x3bc>
 800cd0e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cd12:	68f8      	ldr	r0, [r7, #12]
 800cd14:	eeb0 2a47 	vmov.f32	s4, s14
 800cd18:	eef0 1a45 	vmov.f32	s3, s10
 800cd1c:	eeb0 1a65 	vmov.f32	s2, s11
 800cd20:	eef0 0a46 	vmov.f32	s1, s12
 800cd24:	eeb0 0a66 	vmov.f32	s0, s13
 800cd28:	f7f6 fb78 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800cd2c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cd30:	2b01      	cmp	r3, #1
 800cd32:	d10c      	bne.n	800cd4e <turn135outL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800cd34:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd38:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cd3c:	eeb0 1a47 	vmov.f32	s2, s14
 800cd40:	eddf 0abb 	vldr	s1, [pc, #748]	; 800d030 <turn135outL+0x3c8>
 800cd44:	eeb0 0a67 	vmov.f32	s0, s15
 800cd48:	f7f7 faf2 	bl	8004330 <mollifier_slalom_table>
 800cd4c:	e013      	b.n	800cd76 <turn135outL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800cd4e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd52:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cd56:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cd5a:	eef0 2a66 	vmov.f32	s5, s13
 800cd5e:	eeb0 2a47 	vmov.f32	s4, s14
 800cd62:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800d028 <turn135outL+0x3c0>
 800cd66:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800d028 <turn135outL+0x3c0>
 800cd6a:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800d030 <turn135outL+0x3c8>
 800cd6e:	eeb0 0a67 	vmov.f32	s0, s15
 800cd72:	f7f7 f98d 	bl	8004090 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800cd76:	2300      	movs	r3, #0
 800cd78:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cd7e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800cd82:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800d034 <turn135outL+0x3cc>
 800cd86:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cd8a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cd8e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cd92:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cd96:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd9e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800cda2:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cda6:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800d024 <turn135outL+0x3bc>
 800cdaa:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cdae:	68f8      	ldr	r0, [r7, #12]
 800cdb0:	eeb0 2a47 	vmov.f32	s4, s14
 800cdb4:	eef0 1a65 	vmov.f32	s3, s11
 800cdb8:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800d028 <turn135outL+0x3c0>
 800cdbc:	eef0 0a46 	vmov.f32	s1, s12
 800cdc0:	eeb0 0a66 	vmov.f32	s0, s13
 800cdc4:	f7f6 fb2a 	bl	800341c <straight_table2>
		highspeed_mode = 0;
 800cdc8:	4b95      	ldr	r3, [pc, #596]	; (800d020 <turn135outL+0x3b8>)
 800cdca:	2200      	movs	r2, #0
 800cdcc:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800cdce:	e11e      	b.n	800d00e <turn135outL+0x3a6>
	}else if (test_mode >= 2) {
 800cdd0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d97f      	bls.n	800ced8 <turn135outL+0x270>
		highspeed_mode = 1;
 800cdd8:	4b91      	ldr	r3, [pc, #580]	; (800d020 <turn135outL+0x3b8>)
 800cdda:	2201      	movs	r2, #1
 800cddc:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800cdde:	2300      	movs	r3, #0
 800cde0:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cde2:	2300      	movs	r3, #0
 800cde4:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800cde6:	2304      	movs	r3, #4
 800cde8:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cdea:	2300      	movs	r3, #0
 800cdec:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cdee:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cdf2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cdf6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cdfa:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cdfe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ce02:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce06:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce0a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ce0e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ce12:	eddf 4a84 	vldr	s9, [pc, #528]	; 800d024 <turn135outL+0x3bc>
 800ce16:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ce1a:	68f8      	ldr	r0, [r7, #12]
 800ce1c:	eeb0 2a47 	vmov.f32	s4, s14
 800ce20:	eef0 1a45 	vmov.f32	s3, s10
 800ce24:	eeb0 1a65 	vmov.f32	s2, s11
 800ce28:	eef0 0a46 	vmov.f32	s1, s12
 800ce2c:	eeb0 0a66 	vmov.f32	s0, s13
 800ce30:	f7f6 faf4 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800ce34:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ce38:	2b01      	cmp	r3, #1
 800ce3a:	d10c      	bne.n	800ce56 <turn135outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800ce3c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce40:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ce44:	eeb0 1a47 	vmov.f32	s2, s14
 800ce48:	eddf 0a79 	vldr	s1, [pc, #484]	; 800d030 <turn135outL+0x3c8>
 800ce4c:	eeb0 0a67 	vmov.f32	s0, s15
 800ce50:	f7f7 fa6e 	bl	8004330 <mollifier_slalom_table>
 800ce54:	e013      	b.n	800ce7e <turn135outL+0x216>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ce56:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce5a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ce5e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ce62:	eef0 2a66 	vmov.f32	s5, s13
 800ce66:	eeb0 2a47 	vmov.f32	s4, s14
 800ce6a:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800d028 <turn135outL+0x3c0>
 800ce6e:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800d028 <turn135outL+0x3c0>
 800ce72:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800d030 <turn135outL+0x3c8>
 800ce76:	eeb0 0a67 	vmov.f32	s0, s15
 800ce7a:	f7f7 f909 	bl	8004090 <slalom_table2>
		wallmode.WallControlMode=0;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ce82:	2300      	movs	r3, #0
 800ce84:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ce86:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ce8a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800d034 <turn135outL+0x3cc>
 800ce8e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ce92:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ce96:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ce9a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ce9e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cea2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cea6:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ceaa:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ceae:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800d024 <turn135outL+0x3bc>
 800ceb2:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ceb6:	68f8      	ldr	r0, [r7, #12]
 800ceb8:	eeb0 2a47 	vmov.f32	s4, s14
 800cebc:	eef0 1a65 	vmov.f32	s3, s11
 800cec0:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800d028 <turn135outL+0x3c0>
 800cec4:	eef0 0a46 	vmov.f32	s1, s12
 800cec8:	eeb0 0a66 	vmov.f32	s0, s13
 800cecc:	f7f6 faa6 	bl	800341c <straight_table2>
		highspeed_mode = 0;
 800ced0:	4b53      	ldr	r3, [pc, #332]	; (800d020 <turn135outL+0x3b8>)
 800ced2:	2200      	movs	r2, #0
 800ced4:	701a      	strb	r2, [r3, #0]
}
 800ced6:	e09a      	b.n	800d00e <turn135outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800ced8:	2300      	movs	r3, #0
 800ceda:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cedc:	2300      	movs	r3, #0
 800cede:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800cee0:	2304      	movs	r3, #4
 800cee2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cee4:	2300      	movs	r3, #0
 800cee6:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cee8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ceec:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cef0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cef4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cef8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cefc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf00:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf04:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cf08:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cf0c:	eddf 4a45 	vldr	s9, [pc, #276]	; 800d024 <turn135outL+0x3bc>
 800cf10:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cf14:	68f8      	ldr	r0, [r7, #12]
 800cf16:	eeb0 2a47 	vmov.f32	s4, s14
 800cf1a:	eef0 1a45 	vmov.f32	s3, s10
 800cf1e:	eeb0 1a65 	vmov.f32	s2, s11
 800cf22:	eef0 0a46 	vmov.f32	s1, s12
 800cf26:	eeb0 0a66 	vmov.f32	s0, s13
 800cf2a:	f7f6 fa77 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800cf2e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cf32:	2b01      	cmp	r3, #1
 800cf34:	d10c      	bne.n	800cf50 <turn135outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800cf36:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf3a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cf3e:	eeb0 1a47 	vmov.f32	s2, s14
 800cf42:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800d030 <turn135outL+0x3c8>
 800cf46:	eeb0 0a67 	vmov.f32	s0, s15
 800cf4a:	f7f7 f9f1 	bl	8004330 <mollifier_slalom_table>
 800cf4e:	e013      	b.n	800cf78 <turn135outL+0x310>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800cf50:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf54:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cf58:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cf5c:	eef0 2a66 	vmov.f32	s5, s13
 800cf60:	eeb0 2a47 	vmov.f32	s4, s14
 800cf64:	eddf 1a30 	vldr	s3, [pc, #192]	; 800d028 <turn135outL+0x3c0>
 800cf68:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800d028 <turn135outL+0x3c0>
 800cf6c:	eddf 0a30 	vldr	s1, [pc, #192]	; 800d030 <turn135outL+0x3c8>
 800cf70:	eeb0 0a67 	vmov.f32	s0, s15
 800cf74:	f7f7 f88c 	bl	8004090 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800cf78:	2301      	movs	r3, #1
 800cf7a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cf80:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800cf84:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800cf88:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf90:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf94:	edd7 7a01 	vldr	s15, [r7, #4]
 800cf98:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cf9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfa0:	eef0 7ae7 	vabs.f32	s15, s15
 800cfa4:	ee17 0a90 	vmov	r0, s15
 800cfa8:	f7f3 faf6 	bl	8000598 <__aeabi_f2d>
 800cfac:	f04f 0200 	mov.w	r2, #0
 800cfb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cfb4:	f7f3 fc72 	bl	800089c <__aeabi_ddiv>
 800cfb8:	4602      	mov	r2, r0
 800cfba:	460b      	mov	r3, r1
 800cfbc:	4614      	mov	r4, r2
 800cfbe:	461d      	mov	r5, r3
 800cfc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7f3 fae8 	bl	8000598 <__aeabi_f2d>
 800cfc8:	4602      	mov	r2, r0
 800cfca:	460b      	mov	r3, r1
 800cfcc:	4620      	mov	r0, r4
 800cfce:	4629      	mov	r1, r5
 800cfd0:	f7f3 fc64 	bl	800089c <__aeabi_ddiv>
 800cfd4:	4602      	mov	r2, r0
 800cfd6:	460b      	mov	r3, r1
 800cfd8:	4610      	mov	r0, r2
 800cfda:	4619      	mov	r1, r3
 800cfdc:	f04f 0200 	mov.w	r2, #0
 800cfe0:	4b15      	ldr	r3, [pc, #84]	; (800d038 <turn135outL+0x3d0>)
 800cfe2:	f7f3 f97b 	bl	80002dc <__adddf3>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cfea:	4610      	mov	r0, r2
 800cfec:	4619      	mov	r1, r3
 800cfee:	f7f3 fe03 	bl	8000bf8 <__aeabi_d2f>
 800cff2:	4603      	mov	r3, r0
 800cff4:	68f8      	ldr	r0, [r7, #12]
 800cff6:	ee02 3a10 	vmov	s4, r3
 800cffa:	edd7 1a01 	vldr	s3, [r7, #4]
 800cffe:	ed97 1a01 	vldr	s2, [r7, #4]
 800d002:	eef0 0a68 	vmov.f32	s1, s17
 800d006:	eeb0 0a48 	vmov.f32	s0, s16
 800d00a:	f7f6 fa07 	bl	800341c <straight_table2>
}
 800d00e:	bf00      	nop
 800d010:	3710      	adds	r7, #16
 800d012:	46bd      	mov	sp, r7
 800d014:	ecbd 8b02 	vpop	{d8}
 800d018:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d01c:	b004      	add	sp, #16
 800d01e:	4770      	bx	lr
 800d020:	2000080c 	.word	0x2000080c
 800d024:	42340000 	.word	0x42340000
 800d028:	00000000 	.word	0x00000000
 800d02c:	42c4477b 	.word	0x42c4477b
 800d030:	43070000 	.word	0x43070000
 800d034:	42b40000 	.word	0x42b40000
 800d038:	408f4000 	.word	0x408f4000
 800d03c:	00000000 	.word	0x00000000

0800d040 <V90R>:


void V90R(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d040:	b084      	sub	sp, #16
 800d042:	b5b0      	push	{r4, r5, r7, lr}
 800d044:	ed2d 8b02 	vpush	{d8}
 800d048:	b084      	sub	sp, #16
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d050:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d054:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d058:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d05c:	2b01      	cmp	r3, #1
 800d05e:	f040 80af 	bne.w	800d1c0 <V90R+0x180>
			highspeed_mode = 1;
 800d062:	4bc1      	ldr	r3, [pc, #772]	; (800d368 <V90R+0x328>)
 800d064:	2201      	movs	r2, #1
 800d066:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800d068:	2300      	movs	r3, #0
 800d06a:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800d06c:	2300      	movs	r3, #0
 800d06e:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800d070:	2300      	movs	r3, #0
 800d072:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800d074:	2300      	movs	r3, #0
 800d076:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d078:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d07c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d080:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d084:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d088:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d08c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d090:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d094:	eddf 5ab5 	vldr	s11, [pc, #724]	; 800d36c <V90R+0x32c>
 800d098:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d09c:	68f8      	ldr	r0, [r7, #12]
 800d09e:	eeb0 2a47 	vmov.f32	s4, s14
 800d0a2:	eef0 1a46 	vmov.f32	s3, s12
 800d0a6:	eeb0 1a66 	vmov.f32	s2, s13
 800d0aa:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800d374 <V90R+0x334>
 800d0ae:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 800d370 <V90R+0x330>
 800d0b2:	f7f6 f9b3 	bl	800341c <straight_table2>
			wallmode.WallControlMode=0;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800d0ba:	2303      	movs	r3, #3
 800d0bc:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d0be:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d0c2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d0c6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d0ca:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d0ce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d0d2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d0d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0da:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d0de:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d0e2:	eddf 4aa2 	vldr	s9, [pc, #648]	; 800d36c <V90R+0x32c>
 800d0e6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d0ea:	68f8      	ldr	r0, [r7, #12]
 800d0ec:	eeb0 2a47 	vmov.f32	s4, s14
 800d0f0:	eef0 1a45 	vmov.f32	s3, s10
 800d0f4:	eeb0 1a65 	vmov.f32	s2, s11
 800d0f8:	eef0 0a46 	vmov.f32	s1, s12
 800d0fc:	eeb0 0a66 	vmov.f32	s0, s13
 800d100:	f7f6 f98c 	bl	800341c <straight_table2>
			if(mollifier_mode == ON){
 800d104:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d10c      	bne.n	800d126 <V90R+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d10c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d110:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d114:	eeb0 1a47 	vmov.f32	s2, s14
 800d118:	eddf 0a97 	vldr	s1, [pc, #604]	; 800d378 <V90R+0x338>
 800d11c:	eeb0 0a67 	vmov.f32	s0, s15
 800d120:	f7f7 f906 	bl	8004330 <mollifier_slalom_table>
 800d124:	e015      	b.n	800d152 <V90R+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d126:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d12a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d12e:	eef1 7a67 	vneg.f32	s15, s15
 800d132:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d136:	eef0 2a66 	vmov.f32	s5, s13
 800d13a:	eeb0 2a67 	vmov.f32	s4, s15
 800d13e:	eddf 1a8d 	vldr	s3, [pc, #564]	; 800d374 <V90R+0x334>
 800d142:	ed9f 1a8c 	vldr	s2, [pc, #560]	; 800d374 <V90R+0x334>
 800d146:	eddf 0a8c 	vldr	s1, [pc, #560]	; 800d378 <V90R+0x338>
 800d14a:	eeb0 0a47 	vmov.f32	s0, s14
 800d14e:	f7f6 ff9f 	bl	8004090 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800d152:	2300      	movs	r3, #0
 800d154:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800d156:	2300      	movs	r3, #0
 800d158:	73fb      	strb	r3, [r7, #15]
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d15c:	4618      	mov	r0, r3
 800d15e:	f7f3 fa1b 	bl	8000598 <__aeabi_f2d>
 800d162:	a37f      	add	r3, pc, #508	; (adr r3, 800d360 <V90R+0x320>)
 800d164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d168:	f7f3 f8b8 	bl	80002dc <__adddf3>
 800d16c:	4602      	mov	r2, r0
 800d16e:	460b      	mov	r3, r1
 800d170:	4610      	mov	r0, r2
 800d172:	4619      	mov	r1, r3
 800d174:	f7f3 fd40 	bl	8000bf8 <__aeabi_d2f>
 800d178:	4603      	mov	r3, r0
 800d17a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d17e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d182:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d186:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d18a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d18e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d192:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d196:	eddf 5a75 	vldr	s11, [pc, #468]	; 800d36c <V90R+0x32c>
 800d19a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d19e:	68f8      	ldr	r0, [r7, #12]
 800d1a0:	eeb0 2a47 	vmov.f32	s4, s14
 800d1a4:	eef0 1a46 	vmov.f32	s3, s12
 800d1a8:	ed9f 1a72 	vldr	s2, [pc, #456]	; 800d374 <V90R+0x334>
 800d1ac:	eef0 0a66 	vmov.f32	s1, s13
 800d1b0:	ee00 3a10 	vmov	s0, r3
 800d1b4:	f7f6 f932 	bl	800341c <straight_table2>
			highspeed_mode = 0;
 800d1b8:	4b6b      	ldr	r3, [pc, #428]	; (800d368 <V90R+0x328>)
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d1be:	e13e      	b.n	800d43e <V90R+0x3fe>
		}else if (test_mode >= 2) {
 800d1c0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d1c4:	2b01      	cmp	r3, #1
 800d1c6:	f240 808c 	bls.w	800d2e2 <V90R+0x2a2>
		highspeed_mode = 1;
 800d1ca:	4b67      	ldr	r3, [pc, #412]	; (800d368 <V90R+0x328>)
 800d1cc:	2201      	movs	r2, #1
 800d1ce:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d1d8:	2303      	movs	r3, #3
 800d1da:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d1e0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d1e4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d1e8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d1ec:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d1f0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d1f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d1f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1fc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d200:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d204:	eddf 4a59 	vldr	s9, [pc, #356]	; 800d36c <V90R+0x32c>
 800d208:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d20c:	68f8      	ldr	r0, [r7, #12]
 800d20e:	eeb0 2a47 	vmov.f32	s4, s14
 800d212:	eef0 1a45 	vmov.f32	s3, s10
 800d216:	eeb0 1a65 	vmov.f32	s2, s11
 800d21a:	eef0 0a46 	vmov.f32	s1, s12
 800d21e:	eeb0 0a66 	vmov.f32	s0, s13
 800d222:	f7f6 f8fb 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800d226:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d22a:	2b01      	cmp	r3, #1
 800d22c:	d10c      	bne.n	800d248 <V90R+0x208>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d22e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d232:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d236:	eeb0 1a47 	vmov.f32	s2, s14
 800d23a:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800d378 <V90R+0x338>
 800d23e:	eeb0 0a67 	vmov.f32	s0, s15
 800d242:	f7f7 f875 	bl	8004330 <mollifier_slalom_table>
 800d246:	e015      	b.n	800d274 <V90R+0x234>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d248:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d24c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d250:	eef1 7a67 	vneg.f32	s15, s15
 800d254:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d258:	eef0 2a66 	vmov.f32	s5, s13
 800d25c:	eeb0 2a67 	vmov.f32	s4, s15
 800d260:	eddf 1a44 	vldr	s3, [pc, #272]	; 800d374 <V90R+0x334>
 800d264:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800d374 <V90R+0x334>
 800d268:	eddf 0a43 	vldr	s1, [pc, #268]	; 800d378 <V90R+0x338>
 800d26c:	eeb0 0a47 	vmov.f32	s0, s14
 800d270:	f7f6 ff0e 	bl	8004090 <slalom_table2>
		wallmode.WallControlMode=0;
 800d274:	2300      	movs	r3, #0
 800d276:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d278:	2300      	movs	r3, #0
 800d27a:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d27e:	4618      	mov	r0, r3
 800d280:	f7f3 f98a 	bl	8000598 <__aeabi_f2d>
 800d284:	a336      	add	r3, pc, #216	; (adr r3, 800d360 <V90R+0x320>)
 800d286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d28a:	f7f3 f827 	bl	80002dc <__adddf3>
 800d28e:	4602      	mov	r2, r0
 800d290:	460b      	mov	r3, r1
 800d292:	4610      	mov	r0, r2
 800d294:	4619      	mov	r1, r3
 800d296:	f7f3 fcaf 	bl	8000bf8 <__aeabi_d2f>
 800d29a:	4603      	mov	r3, r0
 800d29c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d2a0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d2a4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d2a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2b0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d2b4:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d2b8:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800d36c <V90R+0x32c>
 800d2bc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d2c0:	68f8      	ldr	r0, [r7, #12]
 800d2c2:	eeb0 2a47 	vmov.f32	s4, s14
 800d2c6:	eef0 1a46 	vmov.f32	s3, s12
 800d2ca:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800d374 <V90R+0x334>
 800d2ce:	eef0 0a66 	vmov.f32	s1, s13
 800d2d2:	ee00 3a10 	vmov	s0, r3
 800d2d6:	f7f6 f8a1 	bl	800341c <straight_table2>
		highspeed_mode = 0;
 800d2da:	4b23      	ldr	r3, [pc, #140]	; (800d368 <V90R+0x328>)
 800d2dc:	2200      	movs	r2, #0
 800d2de:	701a      	strb	r2, [r3, #0]
}
 800d2e0:	e0ad      	b.n	800d43e <V90R+0x3fe>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d2ea:	2303      	movs	r3, #3
 800d2ec:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d2f2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d2f6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d2fa:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d2fe:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d302:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d306:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d30a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d30e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d312:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d316:	eddf 4a15 	vldr	s9, [pc, #84]	; 800d36c <V90R+0x32c>
 800d31a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d31e:	68f8      	ldr	r0, [r7, #12]
 800d320:	eeb0 2a47 	vmov.f32	s4, s14
 800d324:	eef0 1a45 	vmov.f32	s3, s10
 800d328:	eeb0 1a65 	vmov.f32	s2, s11
 800d32c:	eef0 0a46 	vmov.f32	s1, s12
 800d330:	eeb0 0a66 	vmov.f32	s0, s13
 800d334:	f7f6 f872 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800d338:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d33c:	2b01      	cmp	r3, #1
 800d33e:	d11d      	bne.n	800d37c <V90R+0x33c>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d340:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d344:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d348:	eeb0 1a47 	vmov.f32	s2, s14
 800d34c:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800d378 <V90R+0x338>
 800d350:	eeb0 0a67 	vmov.f32	s0, s15
 800d354:	f7f6 ffec 	bl	8004330 <mollifier_slalom_table>
 800d358:	e026      	b.n	800d3a8 <V90R+0x368>
 800d35a:	bf00      	nop
 800d35c:	f3af 8000 	nop.w
 800d360:	c022ec18 	.word	0xc022ec18
 800d364:	405fd1de 	.word	0x405fd1de
 800d368:	2000080c 	.word	0x2000080c
 800d36c:	42340000 	.word	0x42340000
 800d370:	42c4477b 	.word	0x42c4477b
 800d374:	00000000 	.word	0x00000000
 800d378:	c2b40000 	.word	0xc2b40000
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d37c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d380:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d384:	eef1 7a67 	vneg.f32	s15, s15
 800d388:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d38c:	eef0 2a66 	vmov.f32	s5, s13
 800d390:	eeb0 2a67 	vmov.f32	s4, s15
 800d394:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800d374 <V90R+0x334>
 800d398:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800d374 <V90R+0x334>
 800d39c:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800d378 <V90R+0x338>
 800d3a0:	eeb0 0a47 	vmov.f32	s0, s14
 800d3a4:	f7f6 fe74 	bl	8004090 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800d3a8:	2303      	movs	r3, #3
 800d3aa:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d3b0:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d3b4:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d3b8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d3bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d3c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d3c4:	edd7 7a01 	vldr	s15, [r7, #4]
 800d3c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d3cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3d0:	eef0 7ae7 	vabs.f32	s15, s15
 800d3d4:	ee17 0a90 	vmov	r0, s15
 800d3d8:	f7f3 f8de 	bl	8000598 <__aeabi_f2d>
 800d3dc:	f04f 0200 	mov.w	r2, #0
 800d3e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d3e4:	f7f3 fa5a 	bl	800089c <__aeabi_ddiv>
 800d3e8:	4602      	mov	r2, r0
 800d3ea:	460b      	mov	r3, r1
 800d3ec:	4614      	mov	r4, r2
 800d3ee:	461d      	mov	r5, r3
 800d3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f7f3 f8d0 	bl	8000598 <__aeabi_f2d>
 800d3f8:	4602      	mov	r2, r0
 800d3fa:	460b      	mov	r3, r1
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	4629      	mov	r1, r5
 800d400:	f7f3 fa4c 	bl	800089c <__aeabi_ddiv>
 800d404:	4602      	mov	r2, r0
 800d406:	460b      	mov	r3, r1
 800d408:	4610      	mov	r0, r2
 800d40a:	4619      	mov	r1, r3
 800d40c:	f04f 0200 	mov.w	r2, #0
 800d410:	4b0f      	ldr	r3, [pc, #60]	; (800d450 <V90R+0x410>)
 800d412:	f7f2 ff63 	bl	80002dc <__adddf3>
 800d416:	4602      	mov	r2, r0
 800d418:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d41a:	4610      	mov	r0, r2
 800d41c:	4619      	mov	r1, r3
 800d41e:	f7f3 fbeb 	bl	8000bf8 <__aeabi_d2f>
 800d422:	4603      	mov	r3, r0
 800d424:	68f8      	ldr	r0, [r7, #12]
 800d426:	ee02 3a10 	vmov	s4, r3
 800d42a:	edd7 1a01 	vldr	s3, [r7, #4]
 800d42e:	ed97 1a01 	vldr	s2, [r7, #4]
 800d432:	eef0 0a68 	vmov.f32	s1, s17
 800d436:	eeb0 0a48 	vmov.f32	s0, s16
 800d43a:	f7f5 ffef 	bl	800341c <straight_table2>
}
 800d43e:	bf00      	nop
 800d440:	3710      	adds	r7, #16
 800d442:	46bd      	mov	sp, r7
 800d444:	ecbd 8b02 	vpop	{d8}
 800d448:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d44c:	b004      	add	sp, #16
 800d44e:	4770      	bx	lr
 800d450:	408f4000 	.word	0x408f4000
 800d454:	00000000 	.word	0x00000000

0800d458 <V90L>:

void V90L(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d458:	b084      	sub	sp, #16
 800d45a:	b5b0      	push	{r4, r5, r7, lr}
 800d45c:	ed2d 8b02 	vpush	{d8}
 800d460:	b084      	sub	sp, #16
 800d462:	af00      	add	r7, sp, #0
 800d464:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d468:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d46c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d470:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d474:	2b01      	cmp	r3, #1
 800d476:	f040 80ad 	bne.w	800d5d4 <V90L+0x17c>
				highspeed_mode = 1;
 800d47a:	4bbf      	ldr	r3, [pc, #764]	; (800d778 <V90L+0x320>)
 800d47c:	2201      	movs	r2, #1
 800d47e:	701a      	strb	r2, [r3, #0]
				wallmode.WallControlMode=0;
 800d480:	2300      	movs	r3, #0
 800d482:	733b      	strb	r3, [r7, #12]
				wallmode.WallControlStatus=0;
 800d484:	2300      	movs	r3, #0
 800d486:	737b      	strb	r3, [r7, #13]
				wallmode.WallCutMode=0;
 800d488:	2300      	movs	r3, #0
 800d48a:	73fb      	strb	r3, [r7, #15]
				wallmode.calMazeMode=0;
 800d48c:	2300      	movs	r3, #0
 800d48e:	73bb      	strb	r3, [r7, #14]
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d490:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d494:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
							turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d498:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d49c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d4a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d4a4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d4a8:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d4ac:	eddf 5ab3 	vldr	s11, [pc, #716]	; 800d77c <V90L+0x324>
 800d4b0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d4b4:	68f8      	ldr	r0, [r7, #12]
 800d4b6:	eeb0 2a47 	vmov.f32	s4, s14
 800d4ba:	eef0 1a46 	vmov.f32	s3, s12
 800d4be:	eeb0 1a66 	vmov.f32	s2, s13
 800d4c2:	eddf 0ab0 	vldr	s1, [pc, #704]	; 800d784 <V90L+0x32c>
 800d4c6:	ed9f 0aae 	vldr	s0, [pc, #696]	; 800d780 <V90L+0x328>
 800d4ca:	f7f5 ffa7 	bl	800341c <straight_table2>
				wallmode.WallControlMode=0;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=4;
 800d4d2:	2304      	movs	r3, #4
 800d4d4:	73fb      	strb	r3, [r7, #15]
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d4d6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d4da:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d4de:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d4e2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d4e6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d4ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d4ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d4f2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d4f6:	eec7 7a24 	vdiv.f32	s15, s14, s9
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d4fa:	eddf 4aa0 	vldr	s9, [pc, #640]	; 800d77c <V90L+0x324>
 800d4fe:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d502:	68f8      	ldr	r0, [r7, #12]
 800d504:	eeb0 2a47 	vmov.f32	s4, s14
 800d508:	eef0 1a45 	vmov.f32	s3, s10
 800d50c:	eeb0 1a65 	vmov.f32	s2, s11
 800d510:	eef0 0a46 	vmov.f32	s1, s12
 800d514:	eeb0 0a66 	vmov.f32	s0, s13
 800d518:	f7f5 ff80 	bl	800341c <straight_table2>
				if(mollifier_mode == ON){
 800d51c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d520:	2b01      	cmp	r3, #1
 800d522:	d10c      	bne.n	800d53e <V90L+0xe6>
					mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800d524:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d528:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d52c:	eeb0 1a47 	vmov.f32	s2, s14
 800d530:	eddf 0a95 	vldr	s1, [pc, #596]	; 800d788 <V90L+0x330>
 800d534:	eeb0 0a67 	vmov.f32	s0, s15
 800d538:	f7f6 fefa 	bl	8004330 <mollifier_slalom_table>
 800d53c:	e013      	b.n	800d566 <V90L+0x10e>
				}else{
					slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d53e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d542:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d546:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d54a:	eef0 2a66 	vmov.f32	s5, s13
 800d54e:	eeb0 2a47 	vmov.f32	s4, s14
 800d552:	eddf 1a8c 	vldr	s3, [pc, #560]	; 800d784 <V90L+0x32c>
 800d556:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 800d784 <V90L+0x32c>
 800d55a:	eddf 0a8b 	vldr	s1, [pc, #556]	; 800d788 <V90L+0x330>
 800d55e:	eeb0 0a67 	vmov.f32	s0, s15
 800d562:	f7f6 fd95 	bl	8004090 <slalom_table2>
				}
				wallmode.WallControlMode=0;
 800d566:	2300      	movs	r3, #0
 800d568:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=0;
 800d56a:	2300      	movs	r3, #0
 800d56c:	73fb      	strb	r3, [r7, #15]
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d570:	4618      	mov	r0, r3
 800d572:	f7f3 f811 	bl	8000598 <__aeabi_f2d>
 800d576:	a37e      	add	r3, pc, #504	; (adr r3, 800d770 <V90L+0x318>)
 800d578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57c:	f7f2 feae 	bl	80002dc <__adddf3>
 800d580:	4602      	mov	r2, r0
 800d582:	460b      	mov	r3, r1
 800d584:	4610      	mov	r0, r2
 800d586:	4619      	mov	r1, r3
 800d588:	f7f3 fb36 	bl	8000bf8 <__aeabi_d2f>
 800d58c:	4603      	mov	r3, r0
 800d58e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d592:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d596:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d59a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d59e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5a2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d5a6:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d5aa:	eddf 5a74 	vldr	s11, [pc, #464]	; 800d77c <V90L+0x324>
 800d5ae:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d5b2:	68f8      	ldr	r0, [r7, #12]
 800d5b4:	eeb0 2a47 	vmov.f32	s4, s14
 800d5b8:	eef0 1a46 	vmov.f32	s3, s12
 800d5bc:	ed9f 1a71 	vldr	s2, [pc, #452]	; 800d784 <V90L+0x32c>
 800d5c0:	eef0 0a66 	vmov.f32	s1, s13
 800d5c4:	ee00 3a10 	vmov	s0, r3
 800d5c8:	f7f5 ff28 	bl	800341c <straight_table2>
				highspeed_mode = 0;
 800d5cc:	4b6a      	ldr	r3, [pc, #424]	; (800d778 <V90L+0x320>)
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d5d2:	e13a      	b.n	800d84a <V90L+0x3f2>
			}else if (test_mode >= 2) {
 800d5d4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d5d8:	2b01      	cmp	r3, #1
 800d5da:	f240 808a 	bls.w	800d6f2 <V90L+0x29a>
		highspeed_mode = 1;
 800d5de:	4b66      	ldr	r3, [pc, #408]	; (800d778 <V90L+0x320>)
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d5ec:	2304      	movs	r3, #4
 800d5ee:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d5f4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d5f8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d5fc:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d600:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d604:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d608:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d60c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d610:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d614:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d618:	eddf 4a58 	vldr	s9, [pc, #352]	; 800d77c <V90L+0x324>
 800d61c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d620:	68f8      	ldr	r0, [r7, #12]
 800d622:	eeb0 2a47 	vmov.f32	s4, s14
 800d626:	eef0 1a45 	vmov.f32	s3, s10
 800d62a:	eeb0 1a65 	vmov.f32	s2, s11
 800d62e:	eef0 0a46 	vmov.f32	s1, s12
 800d632:	eeb0 0a66 	vmov.f32	s0, s13
 800d636:	f7f5 fef1 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800d63a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d63e:	2b01      	cmp	r3, #1
 800d640:	d10c      	bne.n	800d65c <V90L+0x204>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800d642:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d646:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d64a:	eeb0 1a47 	vmov.f32	s2, s14
 800d64e:	eddf 0a4e 	vldr	s1, [pc, #312]	; 800d788 <V90L+0x330>
 800d652:	eeb0 0a67 	vmov.f32	s0, s15
 800d656:	f7f6 fe6b 	bl	8004330 <mollifier_slalom_table>
 800d65a:	e013      	b.n	800d684 <V90L+0x22c>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d65c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d660:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d664:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d668:	eef0 2a66 	vmov.f32	s5, s13
 800d66c:	eeb0 2a47 	vmov.f32	s4, s14
 800d670:	eddf 1a44 	vldr	s3, [pc, #272]	; 800d784 <V90L+0x32c>
 800d674:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800d784 <V90L+0x32c>
 800d678:	eddf 0a43 	vldr	s1, [pc, #268]	; 800d788 <V90L+0x330>
 800d67c:	eeb0 0a67 	vmov.f32	s0, s15
 800d680:	f7f6 fd06 	bl	8004090 <slalom_table2>
		wallmode.WallControlMode=0;
 800d684:	2300      	movs	r3, #0
 800d686:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d688:	2300      	movs	r3, #0
 800d68a:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d68e:	4618      	mov	r0, r3
 800d690:	f7f2 ff82 	bl	8000598 <__aeabi_f2d>
 800d694:	a336      	add	r3, pc, #216	; (adr r3, 800d770 <V90L+0x318>)
 800d696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d69a:	f7f2 fe1f 	bl	80002dc <__adddf3>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	460b      	mov	r3, r1
 800d6a2:	4610      	mov	r0, r2
 800d6a4:	4619      	mov	r1, r3
 800d6a6:	f7f3 faa7 	bl	8000bf8 <__aeabi_d2f>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d6b0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d6b4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d6b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d6bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6c0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d6c4:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d6c8:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800d77c <V90L+0x324>
 800d6cc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d6d0:	68f8      	ldr	r0, [r7, #12]
 800d6d2:	eeb0 2a47 	vmov.f32	s4, s14
 800d6d6:	eef0 1a46 	vmov.f32	s3, s12
 800d6da:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800d784 <V90L+0x32c>
 800d6de:	eef0 0a66 	vmov.f32	s1, s13
 800d6e2:	ee00 3a10 	vmov	s0, r3
 800d6e6:	f7f5 fe99 	bl	800341c <straight_table2>
		highspeed_mode = 0;
 800d6ea:	4b23      	ldr	r3, [pc, #140]	; (800d778 <V90L+0x320>)
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	701a      	strb	r2, [r3, #0]
}
 800d6f0:	e0ab      	b.n	800d84a <V90L+0x3f2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d6fa:	2304      	movs	r3, #4
 800d6fc:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d6fe:	2300      	movs	r3, #0
 800d700:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d702:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d706:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d70a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d70e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d712:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d716:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d71a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d71e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d722:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d726:	eddf 4a15 	vldr	s9, [pc, #84]	; 800d77c <V90L+0x324>
 800d72a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d72e:	68f8      	ldr	r0, [r7, #12]
 800d730:	eeb0 2a47 	vmov.f32	s4, s14
 800d734:	eef0 1a45 	vmov.f32	s3, s10
 800d738:	eeb0 1a65 	vmov.f32	s2, s11
 800d73c:	eef0 0a46 	vmov.f32	s1, s12
 800d740:	eeb0 0a66 	vmov.f32	s0, s13
 800d744:	f7f5 fe6a 	bl	800341c <straight_table2>
		if(mollifier_mode == ON){
 800d748:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d74c:	2b01      	cmp	r3, #1
 800d74e:	d11d      	bne.n	800d78c <V90L+0x334>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800d750:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d754:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d758:	eeb0 1a47 	vmov.f32	s2, s14
 800d75c:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800d788 <V90L+0x330>
 800d760:	eeb0 0a67 	vmov.f32	s0, s15
 800d764:	f7f6 fde4 	bl	8004330 <mollifier_slalom_table>
 800d768:	e024      	b.n	800d7b4 <V90L+0x35c>
 800d76a:	bf00      	nop
 800d76c:	f3af 8000 	nop.w
 800d770:	c022ec18 	.word	0xc022ec18
 800d774:	405fd1de 	.word	0x405fd1de
 800d778:	2000080c 	.word	0x2000080c
 800d77c:	42340000 	.word	0x42340000
 800d780:	42d4477b 	.word	0x42d4477b
 800d784:	00000000 	.word	0x00000000
 800d788:	42b40000 	.word	0x42b40000
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d78c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d790:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d794:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d798:	eef0 2a66 	vmov.f32	s5, s13
 800d79c:	eeb0 2a47 	vmov.f32	s4, s14
 800d7a0:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800d784 <V90L+0x32c>
 800d7a4:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800d784 <V90L+0x32c>
 800d7a8:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800d788 <V90L+0x330>
 800d7ac:	eeb0 0a67 	vmov.f32	s0, s15
 800d7b0:	f7f6 fc6e 	bl	8004090 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800d7b4:	2303      	movs	r3, #3
 800d7b6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d7bc:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d7c0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d7c4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d7c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d7cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7d0:	edd7 7a01 	vldr	s15, [r7, #4]
 800d7d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d7d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d7dc:	eef0 7ae7 	vabs.f32	s15, s15
 800d7e0:	ee17 0a90 	vmov	r0, s15
 800d7e4:	f7f2 fed8 	bl	8000598 <__aeabi_f2d>
 800d7e8:	f04f 0200 	mov.w	r2, #0
 800d7ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d7f0:	f7f3 f854 	bl	800089c <__aeabi_ddiv>
 800d7f4:	4602      	mov	r2, r0
 800d7f6:	460b      	mov	r3, r1
 800d7f8:	4614      	mov	r4, r2
 800d7fa:	461d      	mov	r5, r3
 800d7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7f2 feca 	bl	8000598 <__aeabi_f2d>
 800d804:	4602      	mov	r2, r0
 800d806:	460b      	mov	r3, r1
 800d808:	4620      	mov	r0, r4
 800d80a:	4629      	mov	r1, r5
 800d80c:	f7f3 f846 	bl	800089c <__aeabi_ddiv>
 800d810:	4602      	mov	r2, r0
 800d812:	460b      	mov	r3, r1
 800d814:	4610      	mov	r0, r2
 800d816:	4619      	mov	r1, r3
 800d818:	f04f 0200 	mov.w	r2, #0
 800d81c:	4b0f      	ldr	r3, [pc, #60]	; (800d85c <V90L+0x404>)
 800d81e:	f7f2 fd5d 	bl	80002dc <__adddf3>
 800d822:	4602      	mov	r2, r0
 800d824:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d826:	4610      	mov	r0, r2
 800d828:	4619      	mov	r1, r3
 800d82a:	f7f3 f9e5 	bl	8000bf8 <__aeabi_d2f>
 800d82e:	4603      	mov	r3, r0
 800d830:	68f8      	ldr	r0, [r7, #12]
 800d832:	ee02 3a10 	vmov	s4, r3
 800d836:	edd7 1a01 	vldr	s3, [r7, #4]
 800d83a:	ed97 1a01 	vldr	s2, [r7, #4]
 800d83e:	eef0 0a68 	vmov.f32	s1, s17
 800d842:	eeb0 0a48 	vmov.f32	s0, s16
 800d846:	f7f5 fde9 	bl	800341c <straight_table2>
}
 800d84a:	bf00      	nop
 800d84c:	3710      	adds	r7, #16
 800d84e:	46bd      	mov	sp, r7
 800d850:	ecbd 8b02 	vpop	{d8}
 800d854:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d858:	b004      	add	sp, #16
 800d85a:	4770      	bx	lr
 800d85c:	408f4000 	.word	0x408f4000

0800d860 <testturning>:


void testturning(parameter_speed Howspeed,int turnmode,char shortest_mode,char funmode,float funduty,char mollifier_mode){
 800d860:	b084      	sub	sp, #16
 800d862:	b580      	push	{r7, lr}
 800d864:	b086      	sub	sp, #24
 800d866:	af04      	add	r7, sp, #16
 800d868:	f107 0c10 	add.w	ip, r7, #16
 800d86c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800d870:	ed87 0a01 	vstr	s0, [r7, #4]
	//0=slalomR,1=slalomL,2=90R,3=90L,4=180R,5=180L,6=in45R,7=in45L,8=in135R,9=in135L
	//10=out45R,11=out45L,12=out135R,13=out135L,14=V90R,15=V90L
	if(funmode==ON){
 800d874:	f897 3160 	ldrb.w	r3, [r7, #352]	; 0x160
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d116      	bne.n	800d8aa <testturning+0x4a>
		pl_DriveMotor_standby(ON);
 800d87c:	2001      	movs	r0, #1
 800d87e:	f7fa fa5f 	bl	8007d40 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800d882:	2003      	movs	r0, #3
 800d884:	f7fa fa66 	bl	8007d54 <pl_L_DriveMotor_mode>
		pl_FunMotor_duty(funduty);
 800d888:	ed97 0a01 	vldr	s0, [r7, #4]
 800d88c:	f7fa faf6 	bl	8007e7c <pl_FunMotor_duty>
		pl_FunMotor_start();
 800d890:	f7fa fae0 	bl	8007e54 <pl_FunMotor_start>
		HAL_Delay(600);
 800d894:	f44f 7016 	mov.w	r0, #600	; 0x258
 800d898:	f00b f918 	bl	8018acc <HAL_Delay>
		reset_gyro();
 800d89c:	f7f4 f984 	bl	8001ba8 <reset_gyro>
		reset_speed();
 800d8a0:	f7f3 fbc0 	bl	8001024 <reset_speed>
		clear_Ierror();
 800d8a4:	f7f7 f8b8 	bl	8004a18 <clear_Ierror>
 800d8a8:	e00b      	b.n	800d8c2 <testturning+0x62>

	}else{
		pl_DriveMotor_standby(ON);
 800d8aa:	2001      	movs	r0, #1
 800d8ac:	f7fa fa48 	bl	8007d40 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800d8b0:	2003      	movs	r0, #3
 800d8b2:	f7fa fa4f 	bl	8007d54 <pl_L_DriveMotor_mode>
		reset_gyro();
 800d8b6:	f7f4 f977 	bl	8001ba8 <reset_gyro>
		reset_speed();
 800d8ba:	f7f3 fbb3 	bl	8001024 <reset_speed>
		clear_Ierror();
 800d8be:	f7f7 f8ab 	bl	8004a18 <clear_Ierror>

	}
	record_mode=2;
 800d8c2:	4ba8      	ldr	r3, [pc, #672]	; (800db64 <testturning+0x304>)
 800d8c4:	2202      	movs	r2, #2
 800d8c6:	701a      	strb	r2, [r3, #0]
//	if(turnmode==0){test_mollifier_slalomR(Howspeed.slalom_R);}
	if(turnmode==0){slalomR(Howspeed.slalom_R,ON,shortest_mode,mollifier_mode,-100);}
 800d8c8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d110      	bne.n	800d8f2 <testturning+0x92>
 800d8d0:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800d8d4:	9303      	str	r3, [sp, #12]
 800d8d6:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800d8da:	9302      	str	r3, [sp, #8]
 800d8dc:	2301      	movs	r3, #1
 800d8de:	9301      	str	r3, [sp, #4]
 800d8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e2:	9300      	str	r3, [sp, #0]
 800d8e4:	f107 0318 	add.w	r3, r7, #24
 800d8e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d8ea:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 800db68 <testturning+0x308>
 800d8ee:	f7fc f973 	bl	8009bd8 <slalomR>
	if(turnmode==1){slalomL(Howspeed.slalom_L,ON,shortest_mode,mollifier_mode,-100);}
 800d8f2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800d8f6:	2b01      	cmp	r3, #1
 800d8f8:	d110      	bne.n	800d91c <testturning+0xbc>
 800d8fa:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800d8fe:	9303      	str	r3, [sp, #12]
 800d900:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800d904:	9302      	str	r3, [sp, #8]
 800d906:	2301      	movs	r3, #1
 800d908:	9301      	str	r3, [sp, #4]
 800d90a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d90c:	9300      	str	r3, [sp, #0]
 800d90e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d912:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d914:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800db68 <testturning+0x308>
 800d918:	f7fc fb44 	bl	8009fa4 <slalomL>
	if(turnmode==2){turn90R(Howspeed.turn90_R,ON,mollifier_mode,-100);}
 800d91c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800d920:	2b02      	cmp	r3, #2
 800d922:	d10d      	bne.n	800d940 <testturning+0xe0>
 800d924:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800d928:	9302      	str	r3, [sp, #8]
 800d92a:	2301      	movs	r3, #1
 800d92c:	9301      	str	r3, [sp, #4]
 800d92e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d930:	9300      	str	r3, [sp, #0]
 800d932:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d936:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d938:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800db68 <testturning+0x308>
 800d93c:	f7fc fd14 	bl	800a368 <turn90R>
	if(turnmode==3){turn90L(Howspeed.turn90_L,ON,mollifier_mode,-100);}
 800d940:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800d944:	2b03      	cmp	r3, #3
 800d946:	d10d      	bne.n	800d964 <testturning+0x104>
 800d948:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800d94c:	9302      	str	r3, [sp, #8]
 800d94e:	2301      	movs	r3, #1
 800d950:	9301      	str	r3, [sp, #4]
 800d952:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d954:	9300      	str	r3, [sp, #0]
 800d956:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d95a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d95c:	ed9f 0a82 	vldr	s0, [pc, #520]	; 800db68 <testturning+0x308>
 800d960:	f7fc fe6c 	bl	800a63c <turn90L>
	if(turnmode==4){turn180R(Howspeed.turn180_R,ON,mollifier_mode,-100);}
 800d964:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800d968:	2b04      	cmp	r3, #4
 800d96a:	d10d      	bne.n	800d988 <testturning+0x128>
 800d96c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800d970:	9302      	str	r3, [sp, #8]
 800d972:	2301      	movs	r3, #1
 800d974:	9301      	str	r3, [sp, #4]
 800d976:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d978:	9300      	str	r3, [sp, #0]
 800d97a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d97e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d980:	ed9f 0a79 	vldr	s0, [pc, #484]	; 800db68 <testturning+0x308>
 800d984:	f7fc ffbe 	bl	800a904 <turn180R>
	if(turnmode==5){turn180L(Howspeed.turn180_L,ON,mollifier_mode,-100);}
 800d988:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800d98c:	2b05      	cmp	r3, #5
 800d98e:	d10e      	bne.n	800d9ae <testturning+0x14e>
 800d990:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800d994:	9302      	str	r3, [sp, #8]
 800d996:	2301      	movs	r3, #1
 800d998:	9301      	str	r3, [sp, #4]
 800d99a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d99e:	9300      	str	r3, [sp, #0]
 800d9a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d9a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d9a6:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800db68 <testturning+0x308>
 800d9aa:	f7fd f915 	bl	800abd8 <turn180L>
	if(turnmode==6){turn45inR(Howspeed.turn45in_R,ON,mollifier_mode,-100);}
 800d9ae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800d9b2:	2b06      	cmp	r3, #6
 800d9b4:	d10e      	bne.n	800d9d4 <testturning+0x174>
 800d9b6:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800d9ba:	9302      	str	r3, [sp, #8]
 800d9bc:	2301      	movs	r3, #1
 800d9be:	9301      	str	r3, [sp, #4]
 800d9c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d9c4:	9300      	str	r3, [sp, #0]
 800d9c6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800d9ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d9cc:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800db68 <testturning+0x308>
 800d9d0:	f7fd fa6a 	bl	800aea8 <turn45inR>
	if(turnmode==7){turn45inL(Howspeed.turn45in_L,ON,mollifier_mode,-100);}
 800d9d4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800d9d8:	2b07      	cmp	r3, #7
 800d9da:	d10e      	bne.n	800d9fa <testturning+0x19a>
 800d9dc:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800d9e0:	9302      	str	r3, [sp, #8]
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	9301      	str	r3, [sp, #4]
 800d9e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d9ea:	9300      	str	r3, [sp, #0]
 800d9ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d9f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d9f2:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800db68 <testturning+0x308>
 800d9f6:	f7fd fc9f 	bl	800b338 <turn45inL>
	if(turnmode==8){turn135inR(Howspeed.turn135in_R,ON,mollifier_mode,-100);}
 800d9fa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800d9fe:	2b08      	cmp	r3, #8
 800da00:	d10e      	bne.n	800da20 <testturning+0x1c0>
 800da02:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800da06:	9302      	str	r3, [sp, #8]
 800da08:	2301      	movs	r3, #1
 800da0a:	9301      	str	r3, [sp, #4]
 800da0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800da10:	9300      	str	r3, [sp, #0]
 800da12:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800da16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800da18:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800db68 <testturning+0x308>
 800da1c:	f7fd fecc 	bl	800b7b8 <turn135inR>
	if(turnmode==9){turn135inL(Howspeed.turn135in_L,ON,mollifier_mode,-100);}
 800da20:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800da24:	2b09      	cmp	r3, #9
 800da26:	d10e      	bne.n	800da46 <testturning+0x1e6>
 800da28:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800da2c:	9302      	str	r3, [sp, #8]
 800da2e:	2301      	movs	r3, #1
 800da30:	9301      	str	r3, [sp, #4]
 800da32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da36:	9300      	str	r3, [sp, #0]
 800da38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800da3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800da3e:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800db68 <testturning+0x308>
 800da42:	f7fe f901 	bl	800bc48 <turn135inL>
	if(turnmode==10){turn45outR(Howspeed.turn45out_R,ON,mollifier_mode,-100);}
 800da46:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800da4a:	2b0a      	cmp	r3, #10
 800da4c:	d10e      	bne.n	800da6c <testturning+0x20c>
 800da4e:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800da52:	9302      	str	r3, [sp, #8]
 800da54:	2301      	movs	r3, #1
 800da56:	9301      	str	r3, [sp, #4]
 800da58:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800da5c:	9300      	str	r3, [sp, #0]
 800da5e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800da62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800da64:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800db68 <testturning+0x308>
 800da68:	f7fe fb32 	bl	800c0d0 <turn45outR>
	if(turnmode==11){turn45outL(Howspeed.turn45out_L,ON,mollifier_mode,-100);}
 800da6c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800da70:	2b0b      	cmp	r3, #11
 800da72:	d10e      	bne.n	800da92 <testturning+0x232>
 800da74:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800da78:	9302      	str	r3, [sp, #8]
 800da7a:	2301      	movs	r3, #1
 800da7c:	9301      	str	r3, [sp, #4]
 800da7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da82:	9300      	str	r3, [sp, #0]
 800da84:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800da88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800da8a:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800db68 <testturning+0x308>
 800da8e:	f7fe fd11 	bl	800c4b4 <turn45outL>
	if(turnmode==12){turn135outR(Howspeed.turn135out_R,ON,mollifier_mode,-100);}
 800da92:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800da96:	2b0c      	cmp	r3, #12
 800da98:	d10e      	bne.n	800dab8 <testturning+0x258>
 800da9a:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800da9e:	9302      	str	r3, [sp, #8]
 800daa0:	2301      	movs	r3, #1
 800daa2:	9301      	str	r3, [sp, #4]
 800daa4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800daa8:	9300      	str	r3, [sp, #0]
 800daaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dab0:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800db68 <testturning+0x308>
 800dab4:	f7fe fee6 	bl	800c884 <turn135outR>
	if(turnmode==13){turn135outL(Howspeed.turn135out_L,ON,mollifier_mode,-100);}
 800dab8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dabc:	2b0d      	cmp	r3, #13
 800dabe:	d10e      	bne.n	800dade <testturning+0x27e>
 800dac0:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dac4:	9302      	str	r3, [sp, #8]
 800dac6:	2301      	movs	r3, #1
 800dac8:	9301      	str	r3, [sp, #4]
 800daca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dace:	9300      	str	r3, [sp, #0]
 800dad0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800dad4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dad6:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800db68 <testturning+0x308>
 800dada:	f7ff f8c5 	bl	800cc68 <turn135outL>
	if(turnmode==14){V90R(Howspeed.V90_R,ON,mollifier_mode,-100);}
 800dade:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dae2:	2b0e      	cmp	r3, #14
 800dae4:	d10e      	bne.n	800db04 <testturning+0x2a4>
 800dae6:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800daea:	9302      	str	r3, [sp, #8]
 800daec:	2301      	movs	r3, #1
 800daee:	9301      	str	r3, [sp, #4]
 800daf0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800daf4:	9300      	str	r3, [sp, #0]
 800daf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dafa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dafc:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800db68 <testturning+0x308>
 800db00:	f7ff fa9e 	bl	800d040 <V90R>
	if(turnmode==15){V90L(Howspeed.V90_L,ON,mollifier_mode,-100);}
 800db04:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800db08:	2b0f      	cmp	r3, #15
 800db0a:	d10e      	bne.n	800db2a <testturning+0x2ca>
 800db0c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800db10:	9302      	str	r3, [sp, #8]
 800db12:	2301      	movs	r3, #1
 800db14:	9301      	str	r3, [sp, #4]
 800db16:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800db1a:	9300      	str	r3, [sp, #0]
 800db1c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800db20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800db22:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800db68 <testturning+0x308>
 800db26:	f7ff fc97 	bl	800d458 <V90L>
//	if(turnmode==12){turn135inL(Howspeed.turn135in_L, CONNECT);turn135outR(Howspeed.turn135out_R,CONNECT);}
//	if(turnmode==13){turn135inR(Howspeed.turn135in_R, CONNECT);turn135outL(Howspeed.turn135out_L,CONNECT);}
//	if(turnmode==14){turn45inL(Howspeed.turn45in_L, CONNECT);V90R(Howspeed.V90_R,CONNECT);}
//	if(turnmode==15){turn45inR(Howspeed.turn45in_R, CONNECT);V90L(Howspeed.V90_L,CONNECT);}

	record_mode=0;
 800db2a:	4b0e      	ldr	r3, [pc, #56]	; (800db64 <testturning+0x304>)
 800db2c:	2200      	movs	r2, #0
 800db2e:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800db30:	2003      	movs	r0, #3
 800db32:	f7fa f937 	bl	8007da4 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800db36:	2003      	movs	r0, #3
 800db38:	f7fa f90c 	bl	8007d54 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800db3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800db40:	f7fa fc2e 	bl	80083a0 <wait_ms_NoReset>
	pl_FunMotor_stop();
 800db44:	f7fa f990 	bl	8007e68 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 800db48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800db4c:	f7fa fc28 	bl	80083a0 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 800db50:	2000      	movs	r0, #0
 800db52:	f7fa f8f5 	bl	8007d40 <pl_DriveMotor_standby>

}
 800db56:	bf00      	nop
 800db58:	3708      	adds	r7, #8
 800db5a:	46bd      	mov	sp, r7
 800db5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800db60:	b004      	add	sp, #16
 800db62:	4770      	bx	lr
 800db64:	2000edc4 	.word	0x2000edc4
 800db68:	c2c80000 	.word	0xc2c80000

0800db6c <update_coordinate>:
//char slant_break;
//拡張左手法***********************************************



void update_coordinate(int *x,int *y,int direction){
 800db6c:	b480      	push	{r7}
 800db6e:	b085      	sub	sp, #20
 800db70:	af00      	add	r7, sp, #0
 800db72:	60f8      	str	r0, [r7, #12]
 800db74:	60b9      	str	r1, [r7, #8]
 800db76:	607a      	str	r2, [r7, #4]
// int direction,int *x_coordinate,int *y_coordinate
//	*direction = *direction % 4;
//	if (*direction <= 0) {
//		*direction = *direction+4;
//	}
	switch (direction) {
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	3b01      	subs	r3, #1
 800db7c:	2b03      	cmp	r3, #3
 800db7e:	d823      	bhi.n	800dbc8 <update_coordinate+0x5c>
 800db80:	a201      	add	r2, pc, #4	; (adr r2, 800db88 <update_coordinate+0x1c>)
 800db82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db86:	bf00      	nop
 800db88:	0800db99 	.word	0x0800db99
 800db8c:	0800dba5 	.word	0x0800dba5
 800db90:	0800dbb1 	.word	0x0800dbb1
 800db94:	0800dbbd 	.word	0x0800dbbd
	case 1://北
		*y += 1;
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	1c5a      	adds	r2, r3, #1
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	601a      	str	r2, [r3, #0]
		break;
 800dba2:	e011      	b.n	800dbc8 <update_coordinate+0x5c>
	case 2://東
		*x += 1;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	1c5a      	adds	r2, r3, #1
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	601a      	str	r2, [r3, #0]
		break;
 800dbae:	e00b      	b.n	800dbc8 <update_coordinate+0x5c>
	case 3://南
		*y -= 1;
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	1e5a      	subs	r2, r3, #1
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	601a      	str	r2, [r3, #0]
		break;
 800dbba:	e005      	b.n	800dbc8 <update_coordinate+0x5c>
	case 4://西
		*x -= 1;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	1e5a      	subs	r2, r3, #1
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	601a      	str	r2, [r3, #0]
		break;
 800dbc6:	bf00      	nop
	}



}
 800dbc8:	bf00      	nop
 800dbca:	3714      	adds	r7, #20
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd2:	4770      	bx	lr

0800dbd4 <AdatiWayReturn>:




void AdatiWayReturn(float input_StraightVelocity, float input_TurningVelocity, float input_StraightAcceleration,
		float input_TurningAcceleration, parameter_speed howspeed,int know_mode,uint8_t Dijkstra_mode) {
 800dbd4:	b084      	sub	sp, #16
 800dbd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbd8:	b091      	sub	sp, #68	; 0x44
 800dbda:	af04      	add	r7, sp, #16
 800dbdc:	ed87 0a03 	vstr	s0, [r7, #12]
 800dbe0:	edc7 0a02 	vstr	s1, [r7, #8]
 800dbe4:	ed87 1a01 	vstr	s2, [r7, #4]
 800dbe8:	edc7 1a00 	vstr	s3, [r7]
 800dbec:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800dbf0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	unsigned short front_count, right_count, back_count, left_count;
//	float v_e,v_ea;

	maze_mode = 1; //***************************************************************************************
 800dbf4:	4b7e      	ldr	r3, [pc, #504]	; (800ddf0 <AdatiWayReturn+0x21c>)
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	701a      	strb	r2, [r3, #0]
	//Avespeed = 700;
	pl_DriveMotor_standby(ON);
 800dbfa:	2001      	movs	r0, #1
 800dbfc:	f7fa f8a0 	bl	8007d40 <pl_DriveMotor_standby>
	HAL_Delay(500);
 800dc00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dc04:	f00a ff62 	bl	8018acc <HAL_Delay>
//初期化
	//構造体にする
	int x=0;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	623b      	str	r3, [r7, #32]
	int y=0;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	61fb      	str	r3, [r7, #28]
	int direction=1;
 800dc10:	2301      	movs	r3, #1
 800dc12:	61bb      	str	r3, [r7, #24]
	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;
	char timer_end_mode=0;
 800dc14:	2300      	movs	r3, #0
 800dc16:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	753b      	strb	r3, [r7, #20]
	mode.WallControlStatus=0;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	757b      	strb	r3, [r7, #21]
	mode.WallCutMode=0;
 800dc22:	2300      	movs	r3, #0
 800dc24:	75fb      	strb	r3, [r7, #23]
	mode.calMazeMode=0;
 800dc26:	2300      	movs	r3, #0
 800dc28:	75bb      	strb	r3, [r7, #22]


//初期位置のセンサー確認
	front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800dc2a:	4b72      	ldr	r3, [pc, #456]	; (800ddf4 <AdatiWayReturn+0x220>)
 800dc2c:	689b      	ldr	r3, [r3, #8]
 800dc2e:	2b86      	cmp	r3, #134	; 0x86
 800dc30:	bfcc      	ite	gt
 800dc32:	2301      	movgt	r3, #1
 800dc34:	2300      	movle	r3, #0
 800dc36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800dc3a:	4b6e      	ldr	r3, [pc, #440]	; (800ddf4 <AdatiWayReturn+0x220>)
 800dc3c:	691b      	ldr	r3, [r3, #16]
 800dc3e:	f240 12f3 	movw	r2, #499	; 0x1f3
 800dc42:	4293      	cmp	r3, r2
 800dc44:	bfcc      	ite	gt
 800dc46:	2301      	movgt	r3, #1
 800dc48:	2300      	movle	r3, #0
 800dc4a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800dc4e:	4b69      	ldr	r3, [pc, #420]	; (800ddf4 <AdatiWayReturn+0x220>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	f240 12f3 	movw	r2, #499	; 0x1f3
 800dc56:	4293      	cmp	r3, r2
 800dc58:	bfcc      	ite	gt
 800dc5a:	2301      	movgt	r3, #1
 800dc5c:	2300      	movle	r3, #0
 800dc5e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800dc62:	6a38      	ldr	r0, [r7, #32]
 800dc64:	69f9      	ldr	r1, [r7, #28]
 800dc66:	69ba      	ldr	r2, [r7, #24]
 800dc68:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800dc6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dc70:	9301      	str	r3, [sp, #4]
 800dc72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800dc76:	9300      	str	r3, [sp, #0]
 800dc78:	4623      	mov	r3, r4
 800dc7a:	f002 fd17 	bl	80106ac <update_wall>
	//初期位置での迷路展開
	create_StepCountMap_queue();
 800dc7e:	f006 f8f1 	bl	8013e64 <create_StepCountMap_queue>
	HAL_Delay(100);
 800dc82:	2064      	movs	r0, #100	; 0x64
 800dc84:	f00a ff22 	bl	8018acc <HAL_Delay>
	straight_table2(90/2+BACK_TO_CENTER,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800dc88:	6978      	ldr	r0, [r7, #20]
 800dc8a:	ed97 2a01 	vldr	s4, [r7, #4]
 800dc8e:	edd7 1a03 	vldr	s3, [r7, #12]
 800dc92:	ed97 1a03 	vldr	s2, [r7, #12]
 800dc96:	eddf 0a58 	vldr	s1, [pc, #352]	; 800ddf8 <AdatiWayReturn+0x224>
 800dc9a:	ed9f 0a58 	vldr	s0, [pc, #352]	; 800ddfc <AdatiWayReturn+0x228>
 800dc9e:	f7f5 fbbd 	bl	800341c <straight_table2>

	while (1) {

		//straight_table2(90, 300, 300, 500);

		update_coordinate(&x,&y,direction);
 800dca2:	69ba      	ldr	r2, [r7, #24]
 800dca4:	f107 011c 	add.w	r1, r7, #28
 800dca8:	f107 0320 	add.w	r3, r7, #32
 800dcac:	4618      	mov	r0, r3
 800dcae:	f7ff ff5d 	bl	800db6c <update_coordinate>


		front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800dcb2:	4b50      	ldr	r3, [pc, #320]	; (800ddf4 <AdatiWayReturn+0x220>)
 800dcb4:	689b      	ldr	r3, [r3, #8]
 800dcb6:	2b86      	cmp	r3, #134	; 0x86
 800dcb8:	bfcc      	ite	gt
 800dcba:	2301      	movgt	r3, #1
 800dcbc:	2300      	movle	r3, #0
 800dcbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800dcc2:	4b4c      	ldr	r3, [pc, #304]	; (800ddf4 <AdatiWayReturn+0x220>)
 800dcc4:	691b      	ldr	r3, [r3, #16]
 800dcc6:	f240 12f3 	movw	r2, #499	; 0x1f3
 800dcca:	4293      	cmp	r3, r2
 800dccc:	bfcc      	ite	gt
 800dcce:	2301      	movgt	r3, #1
 800dcd0:	2300      	movle	r3, #0
 800dcd2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800dcd6:	4b47      	ldr	r3, [pc, #284]	; (800ddf4 <AdatiWayReturn+0x220>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f240 12f3 	movw	r2, #499	; 0x1f3
 800dcde:	4293      	cmp	r3, r2
 800dce0:	bfcc      	ite	gt
 800dce2:	2301      	movgt	r3, #1
 800dce4:	2300      	movle	r3, #0
 800dce6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

		mode.WallControlMode=1;
 800dcea:	2301      	movs	r3, #1
 800dcec:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=1;
 800dcee:	2301      	movs	r3, #1
 800dcf0:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	75fb      	strb	r3, [r7, #23]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800dcf6:	6978      	ldr	r0, [r7, #20]
 800dcf8:	ed97 2a01 	vldr	s4, [r7, #4]
 800dcfc:	edd7 1a03 	vldr	s3, [r7, #12]
 800dd00:	ed97 1a03 	vldr	s2, [r7, #12]
 800dd04:	edd7 0a03 	vldr	s1, [r7, #12]
 800dd08:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800dd0c:	f7f5 fb86 	bl	800341c <straight_table2>
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800dd10:	6a38      	ldr	r0, [r7, #32]
 800dd12:	69f9      	ldr	r1, [r7, #28]
 800dd14:	69ba      	ldr	r2, [r7, #24]
 800dd16:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800dd1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dd1e:	9301      	str	r3, [sp, #4]
 800dd20:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800dd24:	9300      	str	r3, [sp, #0]
 800dd26:	4623      	mov	r3, r4
 800dd28:	f002 fcc0 	bl	80106ac <update_wall>
		if(Dijkstra_mode==2){
 800dd2c:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800dd30:	2b02      	cmp	r3, #2
 800dd32:	d104      	bne.n	800dd3e <AdatiWayReturn+0x16a>
					route_Dijkstra();
 800dd34:	f005 f8a6 	bl	8012e84 <route_Dijkstra>
					create_StepCountMap_unknown();
 800dd38:	f005 fd5e 	bl	80137f8 <create_StepCountMap_unknown>
 800dd3c:	e001      	b.n	800dd42 <AdatiWayReturn+0x16e>
				}else{
					create_StepCountMap_queue();
 800dd3e:	f006 f891 	bl	8013e64 <create_StepCountMap_queue>
				}
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800dd42:	6a3b      	ldr	r3, [r7, #32]
 800dd44:	69fa      	ldr	r2, [r7, #28]
 800dd46:	69b9      	ldr	r1, [r7, #24]
 800dd48:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800dd4c:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800dd50:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800dd54:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800dd58:	9102      	str	r1, [sp, #8]
 800dd5a:	9201      	str	r2, [sp, #4]
 800dd5c:	9300      	str	r3, [sp, #0]
 800dd5e:	4633      	mov	r3, r6
 800dd60:	462a      	mov	r2, r5
 800dd62:	4621      	mov	r1, r4
 800dd64:	f003 fa1c 	bl	80111a0 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800dd68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d001      	beq.n	800dd74 <AdatiWayReturn+0x1a0>
 800dd70:	23ff      	movs	r3, #255	; 0xff
 800dd72:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800dd74:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d001      	beq.n	800dd80 <AdatiWayReturn+0x1ac>
 800dd7c:	23ff      	movs	r3, #255	; 0xff
 800dd7e:	853b      	strh	r3, [r7, #40]	; 0x28
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800dd80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d001      	beq.n	800dd8c <AdatiWayReturn+0x1b8>
 800dd88:	23ff      	movs	r3, #255	; 0xff
 800dd8a:	84bb      	strh	r3, [r7, #36]	; 0x24
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800dd8c:	6a38      	ldr	r0, [r7, #32]
 800dd8e:	69fc      	ldr	r4, [r7, #28]
 800dd90:	69bd      	ldr	r5, [r7, #24]
 800dd92:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
 800dd94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dd96:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dd98:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800dd9a:	9102      	str	r1, [sp, #8]
 800dd9c:	9201      	str	r2, [sp, #4]
 800dd9e:	9300      	str	r3, [sp, #0]
 800dda0:	4633      	mov	r3, r6
 800dda2:	462a      	mov	r2, r5
 800dda4:	4621      	mov	r1, r4
 800dda6:	f002 fa2d 	bl	8010204 <decision_kitiku>
		mode.WallCutMode=1;
 800ddaa:	2301      	movs	r3, #1
 800ddac:	75fb      	strb	r3, [r7, #23]
		End_straight(MAZE_OFFSET, mode,right_wall,left_wall);
 800ddae:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ddb2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	6978      	ldr	r0, [r7, #20]
 800ddba:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800ddbe:	f7f5 ffe3 	bl	8003d88 <End_straight>



		if (x == 0 && y == 0) {break;}
 800ddc2:	6a3b      	ldr	r3, [r7, #32]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d103      	bne.n	800ddd0 <AdatiWayReturn+0x1fc>
 800ddc8:	69fb      	ldr	r3, [r7, #28]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	f000 827e 	beq.w	800e2cc <AdatiWayReturn+0x6f8>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800ddd0:	6a3b      	ldr	r3, [r7, #32]
 800ddd2:	2b05      	cmp	r3, #5
 800ddd4:	d003      	beq.n	800ddde <AdatiWayReturn+0x20a>
 800ddd6:	6a3b      	ldr	r3, [r7, #32]
 800ddd8:	2b06      	cmp	r3, #6
 800ddda:	f040 810c 	bne.w	800dff6 <AdatiWayReturn+0x422>
 800ddde:	69fb      	ldr	r3, [r7, #28]
 800dde0:	2b04      	cmp	r3, #4
 800dde2:	f000 809a 	beq.w	800df1a <AdatiWayReturn+0x346>
 800dde6:	69fb      	ldr	r3, [r7, #28]
 800dde8:	2b05      	cmp	r3, #5
 800ddea:	f040 8104 	bne.w	800dff6 <AdatiWayReturn+0x422>


			while (front_wall==0) {
 800ddee:	e094      	b.n	800df1a <AdatiWayReturn+0x346>
 800ddf0:	20000838 	.word	0x20000838
 800ddf4:	20000474 	.word	0x20000474
 800ddf8:	00000000 	.word	0x00000000
 800ddfc:	42830000 	.word	0x42830000
 800de00:	42a40000 	.word	0x42a40000
				//直進
				mode.WallControlMode=1;
 800de04:	2301      	movs	r3, #1
 800de06:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800de08:	2300      	movs	r3, #0
 800de0a:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800de0c:	2300      	movs	r3, #0
 800de0e:	75fb      	strb	r3, [r7, #23]
				straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800de10:	6978      	ldr	r0, [r7, #20]
 800de12:	ed97 2a01 	vldr	s4, [r7, #4]
 800de16:	edd7 1a03 	vldr	s3, [r7, #12]
 800de1a:	ed97 1a03 	vldr	s2, [r7, #12]
 800de1e:	edd7 0a03 	vldr	s1, [r7, #12]
 800de22:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 800de00 <AdatiWayReturn+0x22c>
 800de26:	f7f5 faf9 	bl	800341c <straight_table2>

				update_coordinate(&x,&y,direction);
 800de2a:	69ba      	ldr	r2, [r7, #24]
 800de2c:	f107 011c 	add.w	r1, r7, #28
 800de30:	f107 0320 	add.w	r3, r7, #32
 800de34:	4618      	mov	r0, r3
 800de36:	f7ff fe99 	bl	800db6c <update_coordinate>

				front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800de3a:	4b7f      	ldr	r3, [pc, #508]	; (800e038 <AdatiWayReturn+0x464>)
 800de3c:	689b      	ldr	r3, [r3, #8]
 800de3e:	2b86      	cmp	r3, #134	; 0x86
 800de40:	bfcc      	ite	gt
 800de42:	2301      	movgt	r3, #1
 800de44:	2300      	movle	r3, #0
 800de46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800de4a:	4b7b      	ldr	r3, [pc, #492]	; (800e038 <AdatiWayReturn+0x464>)
 800de4c:	691b      	ldr	r3, [r3, #16]
 800de4e:	f240 12f3 	movw	r2, #499	; 0x1f3
 800de52:	4293      	cmp	r3, r2
 800de54:	bfcc      	ite	gt
 800de56:	2301      	movgt	r3, #1
 800de58:	2300      	movle	r3, #0
 800de5a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800de5e:	4b76      	ldr	r3, [pc, #472]	; (800e038 <AdatiWayReturn+0x464>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	f240 12f3 	movw	r2, #499	; 0x1f3
 800de66:	4293      	cmp	r3, r2
 800de68:	bfcc      	ite	gt
 800de6a:	2301      	movgt	r3, #1
 800de6c:	2300      	movle	r3, #0
 800de6e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

				mode.WallControlMode=1;
 800de72:	2301      	movs	r3, #1
 800de74:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=1;
 800de76:	2301      	movs	r3, #1
 800de78:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800de7a:	2300      	movs	r3, #0
 800de7c:	75fb      	strb	r3, [r7, #23]
				straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800de7e:	6978      	ldr	r0, [r7, #20]
 800de80:	ed97 2a01 	vldr	s4, [r7, #4]
 800de84:	edd7 1a03 	vldr	s3, [r7, #12]
 800de88:	ed97 1a03 	vldr	s2, [r7, #12]
 800de8c:	edd7 0a03 	vldr	s1, [r7, #12]
 800de90:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800de94:	f7f5 fac2 	bl	800341c <straight_table2>
				update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800de98:	6a38      	ldr	r0, [r7, #32]
 800de9a:	69f9      	ldr	r1, [r7, #28]
 800de9c:	69ba      	ldr	r2, [r7, #24]
 800de9e:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800dea2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dea6:	9301      	str	r3, [sp, #4]
 800dea8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800deac:	9300      	str	r3, [sp, #0]
 800deae:	4623      	mov	r3, r4
 800deb0:	f002 fbfc 	bl	80106ac <update_wall>
				create_StepCountMap_queue();
 800deb4:	f005 ffd6 	bl	8013e64 <create_StepCountMap_queue>
				search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800deb8:	6a3b      	ldr	r3, [r7, #32]
 800deba:	69fa      	ldr	r2, [r7, #28]
 800debc:	69b9      	ldr	r1, [r7, #24]
 800debe:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800dec2:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800dec6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800deca:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800dece:	9102      	str	r1, [sp, #8]
 800ded0:	9201      	str	r2, [sp, #4]
 800ded2:	9300      	str	r3, [sp, #0]
 800ded4:	4633      	mov	r3, r6
 800ded6:	462a      	mov	r2, r5
 800ded8:	4621      	mov	r1, r4
 800deda:	f003 f961 	bl	80111a0 <search_AroundWalkCount>
				if (front_wall) {front_count = MAX_WALKCOUNT;}
 800dede:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d001      	beq.n	800deea <AdatiWayReturn+0x316>
 800dee6:	23ff      	movs	r3, #255	; 0xff
 800dee8:	857b      	strh	r3, [r7, #42]	; 0x2a
				if (right_wall) {right_count = MAX_WALKCOUNT;}
 800deea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800deee:	2b00      	cmp	r3, #0
 800def0:	d001      	beq.n	800def6 <AdatiWayReturn+0x322>
 800def2:	23ff      	movs	r3, #255	; 0xff
 800def4:	853b      	strh	r3, [r7, #40]	; 0x28
				if (left_wall) {left_count = MAX_WALKCOUNT;}
 800def6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800defa:	2b00      	cmp	r3, #0
 800defc:	d001      	beq.n	800df02 <AdatiWayReturn+0x32e>
 800defe:	23ff      	movs	r3, #255	; 0xff
 800df00:	84bb      	strh	r3, [r7, #36]	; 0x24
				mode.WallCutMode=1;
 800df02:	2301      	movs	r3, #1
 800df04:	75fb      	strb	r3, [r7, #23]
				End_straight(MAZE_OFFSET,mode,right_wall,left_wall);
 800df06:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800df0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800df0e:	4619      	mov	r1, r3
 800df10:	6978      	ldr	r0, [r7, #20]
 800df12:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800df16:	f7f5 ff37 	bl	8003d88 <End_straight>
			while (front_wall==0) {
 800df1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df1e:	f083 0301 	eor.w	r3, r3, #1
 800df22:	b2db      	uxtb	r3, r3
 800df24:	2b00      	cmp	r3, #0
 800df26:	f47f af6d 	bne.w	800de04 <AdatiWayReturn+0x230>


			}
			mode.WallControlMode=0;
 800df2a:	2300      	movs	r3, #0
 800df2c:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800df2e:	2300      	movs	r3, #0
 800df30:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800df32:	2300      	movs	r3, #0
 800df34:	75fb      	strb	r3, [r7, #23]
			straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800df36:	6978      	ldr	r0, [r7, #20]
 800df38:	ed97 2a01 	vldr	s4, [r7, #4]
 800df3c:	edd7 1a03 	vldr	s3, [r7, #12]
 800df40:	ed9f 1a48 	vldr	s2, [pc, #288]	; 800e064 <AdatiWayReturn+0x490>
 800df44:	edd7 0a03 	vldr	s1, [r7, #12]
 800df48:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800e03c <AdatiWayReturn+0x468>
 800df4c:	f7f5 fa66 	bl	800341c <straight_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800df50:	2003      	movs	r0, #3
 800df52:	f7f9 ff27 	bl	8007da4 <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800df56:	2003      	movs	r0, #3
 800df58:	f7f9 fefc 	bl	8007d54 <pl_L_DriveMotor_mode>
			wait_ms_NoReset(500);
 800df5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800df60:	f7fa fa1e 	bl	80083a0 <wait_ms_NoReset>
			no_safty = 1;
 800df64:	4b36      	ldr	r3, [pc, #216]	; (800e040 <AdatiWayReturn+0x46c>)
 800df66:	2201      	movs	r2, #1
 800df68:	701a      	strb	r2, [r3, #0]
			turning_table2(180,0,0,input_TurningVelocity,input_TurningAcceleration);
 800df6a:	ed97 2a00 	vldr	s4, [r7]
 800df6e:	edd7 1a02 	vldr	s3, [r7, #8]
 800df72:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 800e064 <AdatiWayReturn+0x490>
 800df76:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800e064 <AdatiWayReturn+0x490>
 800df7a:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800e044 <AdatiWayReturn+0x470>
 800df7e:	f7f5 ff6f 	bl	8003e60 <turning_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800df82:	2003      	movs	r0, #3
 800df84:	f7f9 ff0e 	bl	8007da4 <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800df88:	2003      	movs	r0, #3
 800df8a:	f7f9 fee3 	bl	8007d54 <pl_L_DriveMotor_mode>
			wait_ms_NoReset(500);
 800df8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800df92:	f7fa fa05 	bl	80083a0 <wait_ms_NoReset>
			straight_table2(-BACK_TO_CENTER-20/2, 0,0,-150,1000, mode);
 800df96:	6978      	ldr	r0, [r7, #20]
 800df98:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 800e048 <AdatiWayReturn+0x474>
 800df9c:	eddf 1a2b 	vldr	s3, [pc, #172]	; 800e04c <AdatiWayReturn+0x478>
 800dfa0:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800e064 <AdatiWayReturn+0x490>
 800dfa4:	eddf 0a2f 	vldr	s1, [pc, #188]	; 800e064 <AdatiWayReturn+0x490>
 800dfa8:	ed9f 0a29 	vldr	s0, [pc, #164]	; 800e050 <AdatiWayReturn+0x47c>
 800dfac:	f7f5 fa36 	bl	800341c <straight_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800dfb0:	2003      	movs	r0, #3
 800dfb2:	f7f9 fef7 	bl	8007da4 <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800dfb6:	2003      	movs	r0, #3
 800dfb8:	f7f9 fecc 	bl	8007d54 <pl_L_DriveMotor_mode>
			wait_ms_NoReset(500);
 800dfbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dfc0:	f7fa f9ee 	bl	80083a0 <wait_ms_NoReset>
			no_safty = 0;
 800dfc4:	4b1e      	ldr	r3, [pc, #120]	; (800e040 <AdatiWayReturn+0x46c>)
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	701a      	strb	r2, [r3, #0]
			clear_Ierror();
 800dfca:	f7f6 fd25 	bl	8004a18 <clear_Ierror>
			maze_mode = 0;
 800dfce:	4b21      	ldr	r3, [pc, #132]	; (800e054 <AdatiWayReturn+0x480>)
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	701a      	strb	r2, [r3, #0]

			direction = direction + 2;
 800dfd4:	69bb      	ldr	r3, [r7, #24]
 800dfd6:	3302      	adds	r3, #2
 800dfd8:	61bb      	str	r3, [r7, #24]

			if (direction >= 5) {
 800dfda:	69bb      	ldr	r3, [r7, #24]
 800dfdc:	2b04      	cmp	r3, #4
 800dfde:	dd02      	ble.n	800dfe6 <AdatiWayReturn+0x412>
				direction = direction-4;
 800dfe0:	69bb      	ldr	r3, [r7, #24]
 800dfe2:	3b04      	subs	r3, #4
 800dfe4:	61bb      	str	r3, [r7, #24]
			}
			if (direction <= 0) {
 800dfe6:	69bb      	ldr	r3, [r7, #24]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	f300 8171 	bgt.w	800e2d0 <AdatiWayReturn+0x6fc>
				direction = direction+4;
 800dfee:	69bb      	ldr	r3, [r7, #24]
 800dff0:	3304      	adds	r3, #4
 800dff2:	61bb      	str	r3, [r7, #24]
			}

			break;
 800dff4:	e16c      	b.n	800e2d0 <AdatiWayReturn+0x6fc>
		}
		if(know_mode==0){
 800dff6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d102      	bne.n	800e004 <AdatiWayReturn+0x430>
			kitikukan = 0;
 800dffe:	4b16      	ldr	r3, [pc, #88]	; (800e058 <AdatiWayReturn+0x484>)
 800e000:	2200      	movs	r2, #0
 800e002:	601a      	str	r2, [r3, #0]
		}
		if (kitikukan == OFF) {
 800e004:	4b14      	ldr	r3, [pc, #80]	; (800e058 <AdatiWayReturn+0x484>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	f040 80f8 	bne.w	800e1fe <AdatiWayReturn+0x62a>

			// 移動の優先順位 ： 前→右→左→後
			if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800e00e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e010:	2bff      	cmp	r3, #255	; 0xff
 800e012:	d12b      	bne.n	800e06c <AdatiWayReturn+0x498>
 800e014:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e016:	2bff      	cmp	r3, #255	; 0xff
 800e018:	d128      	bne.n	800e06c <AdatiWayReturn+0x498>
 800e01a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e01c:	2bff      	cmp	r3, #255	; 0xff
 800e01e:	d125      	bne.n	800e06c <AdatiWayReturn+0x498>
 800e020:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e022:	2bff      	cmp	r3, #255	; 0xff
 800e024:	d122      	bne.n	800e06c <AdatiWayReturn+0x498>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
				error_mode=1;
 800e026:	4b0d      	ldr	r3, [pc, #52]	; (800e05c <AdatiWayReturn+0x488>)
 800e028:	2201      	movs	r2, #1
 800e02a:	701a      	strb	r2, [r3, #0]
				pl_DriveMotor_stop();
 800e02c:	f7f9 feee 	bl	8007e0c <pl_DriveMotor_stop>
				pl_DriveMotor_standby(OFF);
 800e030:	2000      	movs	r0, #0
 800e032:	f7f9 fe85 	bl	8007d40 <pl_DriveMotor_standby>
				break;
 800e036:	e14e      	b.n	800e2d6 <AdatiWayReturn+0x702>
 800e038:	20000474 	.word	0x20000474
 800e03c:	42140000 	.word	0x42140000
 800e040:	2000080a 	.word	0x2000080a
 800e044:	43340000 	.word	0x43340000
 800e048:	447a0000 	.word	0x447a0000
 800e04c:	c3160000 	.word	0xc3160000
 800e050:	c1f40000 	.word	0xc1f40000
 800e054:	20000838 	.word	0x20000838
 800e058:	2000083c 	.word	0x2000083c
 800e05c:	2000080b 	.word	0x2000080b
 800e060:	42a40000 	.word	0x42a40000
 800e064:	00000000 	.word	0x00000000
 800e068:	42080000 	.word	0x42080000
			}
			if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800e06c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e06e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e070:	429a      	cmp	r2, r3
 800e072:	d81a      	bhi.n	800e0aa <AdatiWayReturn+0x4d6>
 800e074:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e076:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e078:	429a      	cmp	r2, r3
 800e07a:	d816      	bhi.n	800e0aa <AdatiWayReturn+0x4d6>
 800e07c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e07e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e080:	429a      	cmp	r2, r3
 800e082:	d812      	bhi.n	800e0aa <AdatiWayReturn+0x4d6>
				// 直進
				mode.WallControlMode=1;
 800e084:	2301      	movs	r3, #1
 800e086:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e088:	2300      	movs	r3, #0
 800e08a:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e08c:	2300      	movs	r3, #0
 800e08e:	75fb      	strb	r3, [r7, #23]
				straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e090:	6978      	ldr	r0, [r7, #20]
 800e092:	ed97 2a01 	vldr	s4, [r7, #4]
 800e096:	edd7 1a03 	vldr	s3, [r7, #12]
 800e09a:	ed97 1a03 	vldr	s2, [r7, #12]
 800e09e:	edd7 0a03 	vldr	s1, [r7, #12]
 800e0a2:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 800e060 <AdatiWayReturn+0x48c>
 800e0a6:	f7f5 f9b9 	bl	800341c <straight_table2>
			}
			if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800e0aa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e0ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d219      	bcs.n	800e0e6 <AdatiWayReturn+0x512>
 800e0b2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e0b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0b6:	429a      	cmp	r2, r3
 800e0b8:	d815      	bhi.n	800e0e6 <AdatiWayReturn+0x512>
 800e0ba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e0bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d811      	bhi.n	800e0e6 <AdatiWayReturn+0x512>
				// 右旋回
				slalomR(howspeed.slalom_R, OFF,EXPLORATION,0,input_StraightVelocity);
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	9303      	str	r3, [sp, #12]
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	9302      	str	r3, [sp, #8]
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	9301      	str	r3, [sp, #4]
 800e0ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0d0:	9300      	str	r3, [sp, #0]
 800e0d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e0d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e0d8:	ed97 0a03 	vldr	s0, [r7, #12]
 800e0dc:	f7fb fd7c 	bl	8009bd8 <slalomR>
				direction++;
 800e0e0:	69bb      	ldr	r3, [r7, #24]
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	61bb      	str	r3, [r7, #24]
			}
			if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800e0e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e0e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d219      	bcs.n	800e122 <AdatiWayReturn+0x54e>
 800e0ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e0f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d215      	bcs.n	800e122 <AdatiWayReturn+0x54e>
 800e0f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e0f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d811      	bhi.n	800e122 <AdatiWayReturn+0x54e>
				// 左旋回
				slalomL(howspeed.slalom_L, OFF,EXPLORATION,0,input_StraightVelocity);
 800e0fe:	2300      	movs	r3, #0
 800e100:	9303      	str	r3, [sp, #12]
 800e102:	2300      	movs	r3, #0
 800e104:	9302      	str	r3, [sp, #8]
 800e106:	2300      	movs	r3, #0
 800e108:	9301      	str	r3, [sp, #4]
 800e10a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e10c:	9300      	str	r3, [sp, #0]
 800e10e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e112:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e114:	ed97 0a03 	vldr	s0, [r7, #12]
 800e118:	f7fb ff44 	bl	8009fa4 <slalomL>
				direction--;
 800e11c:	69bb      	ldr	r3, [r7, #24]
 800e11e:	3b01      	subs	r3, #1
 800e120:	61bb      	str	r3, [r7, #24]
			}
			if(back_count < front_count && back_count < right_count
 800e122:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e124:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e126:	429a      	cmp	r2, r3
 800e128:	f080 80ac 	bcs.w	800e284 <AdatiWayReturn+0x6b0>
 800e12c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e12e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e130:	429a      	cmp	r2, r3
 800e132:	f080 80a7 	bcs.w	800e284 <AdatiWayReturn+0x6b0>
					&& back_count < left_count){
 800e136:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e138:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e13a:	429a      	cmp	r2, r3
 800e13c:	f080 80a2 	bcs.w	800e284 <AdatiWayReturn+0x6b0>
				//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
				mode.WallControlMode=1;
 800e140:	2301      	movs	r3, #1
 800e142:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e144:	2300      	movs	r3, #0
 800e146:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e148:	2300      	movs	r3, #0
 800e14a:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET-3, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e14c:	6978      	ldr	r0, [r7, #20]
 800e14e:	ed97 2a01 	vldr	s4, [r7, #4]
 800e152:	edd7 1a03 	vldr	s3, [r7, #12]
 800e156:	ed1f 1a3d 	vldr	s2, [pc, #-244]	; 800e064 <AdatiWayReturn+0x490>
 800e15a:	edd7 0a03 	vldr	s1, [r7, #12]
 800e15e:	ed1f 0a3e 	vldr	s0, [pc, #-248]	; 800e068 <AdatiWayReturn+0x494>
 800e162:	f7f5 f95b 	bl	800341c <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e166:	2003      	movs	r0, #3
 800e168:	f7f9 fe1c 	bl	8007da4 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e16c:	2003      	movs	r0, #3
 800e16e:	f7f9 fdf1 	bl	8007d54 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e172:	2064      	movs	r0, #100	; 0x64
 800e174:	f7fa f914 	bl	80083a0 <wait_ms_NoReset>
				no_safty = 1;
 800e178:	4b97      	ldr	r3, [pc, #604]	; (800e3d8 <AdatiWayReturn+0x804>)
 800e17a:	2201      	movs	r2, #1
 800e17c:	701a      	strb	r2, [r3, #0]
				backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800e17e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e182:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 800e186:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e18a:	4618      	mov	r0, r3
 800e18c:	edd7 0a00 	vldr	s1, [r7]
 800e190:	ed97 0a02 	vldr	s0, [r7, #8]
 800e194:	f7fb fc56 	bl	8009a44 <backTurn_controlWall>
				//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
				wait_ms_NoReset(100);
 800e198:	2064      	movs	r0, #100	; 0x64
 800e19a:	f7fa f901 	bl	80083a0 <wait_ms_NoReset>
				no_safty = 0;
 800e19e:	4b8e      	ldr	r3, [pc, #568]	; (800e3d8 <AdatiWayReturn+0x804>)
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	701a      	strb	r2, [r3, #0]
				//clear_Ierror();
				mode.WallControlMode=0;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	753b      	strb	r3, [r7, #20]
				straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800e1a8:	6978      	ldr	r0, [r7, #20]
 800e1aa:	ed9f 2a8c 	vldr	s4, [pc, #560]	; 800e3dc <AdatiWayReturn+0x808>
 800e1ae:	eddf 1a8c 	vldr	s3, [pc, #560]	; 800e3e0 <AdatiWayReturn+0x80c>
 800e1b2:	ed9f 1a96 	vldr	s2, [pc, #600]	; 800e40c <AdatiWayReturn+0x838>
 800e1b6:	eddf 0a95 	vldr	s1, [pc, #596]	; 800e40c <AdatiWayReturn+0x838>
 800e1ba:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 800e3e4 <AdatiWayReturn+0x810>
 800e1be:	f7f5 f92d 	bl	800341c <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e1c2:	2003      	movs	r0, #3
 800e1c4:	f7f9 fdee 	bl	8007da4 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e1c8:	2003      	movs	r0, #3
 800e1ca:	f7f9 fdc3 	bl	8007d54 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e1ce:	2064      	movs	r0, #100	; 0x64
 800e1d0:	f7fa f8e6 	bl	80083a0 <wait_ms_NoReset>
				clear_Ierror();
 800e1d4:	f7f6 fc20 	bl	8004a18 <clear_Ierror>
				mode.WallControlMode=1;
 800e1d8:	2301      	movs	r3, #1
 800e1da:	753b      	strb	r3, [r7, #20]
				straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e1dc:	6978      	ldr	r0, [r7, #20]
 800e1de:	ed97 2a01 	vldr	s4, [r7, #4]
 800e1e2:	edd7 1a03 	vldr	s3, [r7, #12]
 800e1e6:	ed97 1a03 	vldr	s2, [r7, #12]
 800e1ea:	eddf 0a88 	vldr	s1, [pc, #544]	; 800e40c <AdatiWayReturn+0x838>
 800e1ee:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 800e3e8 <AdatiWayReturn+0x814>
 800e1f2:	f7f5 f913 	bl	800341c <straight_table2>
				//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
				direction = direction + 2;
 800e1f6:	69bb      	ldr	r3, [r7, #24]
 800e1f8:	3302      	adds	r3, #2
 800e1fa:	61bb      	str	r3, [r7, #24]
 800e1fc:	e042      	b.n	800e284 <AdatiWayReturn+0x6b0>

			}

		} else {
			mode.WallControlMode=1;
 800e1fe:	2301      	movs	r3, #1
 800e200:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e202:	2300      	movs	r3, #0
 800e204:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e206:	2300      	movs	r3, #0
 800e208:	75fb      	strb	r3, [r7, #23]
			straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e20a:	6978      	ldr	r0, [r7, #20]
 800e20c:	ed97 2a01 	vldr	s4, [r7, #4]
 800e210:	edd7 1a03 	vldr	s3, [r7, #12]
 800e214:	ed97 1a03 	vldr	s2, [r7, #12]
 800e218:	edd7 0a03 	vldr	s1, [r7, #12]
 800e21c:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 800e410 <AdatiWayReturn+0x83c>
 800e220:	f7f5 f8fc 	bl	800341c <straight_table2>
			compress_kitiku(&x,&y,&direction);
 800e224:	f107 0218 	add.w	r2, r7, #24
 800e228:	f107 011c 	add.w	r1, r7, #28
 800e22c:	f107 0320 	add.w	r3, r7, #32
 800e230:	4618      	mov	r0, r3
 800e232:	f002 f859 	bl	80102e8 <compress_kitiku>
			mode.WallCutMode=0;
 800e236:	2300      	movs	r3, #0
 800e238:	75fb      	strb	r3, [r7, #23]
			End_straight(90/2-MAZE_OFFSET,mode,1,1);
 800e23a:	2201      	movs	r2, #1
 800e23c:	2101      	movs	r1, #1
 800e23e:	6978      	ldr	r0, [r7, #20]
 800e240:	ed9f 0a73 	vldr	s0, [pc, #460]	; 800e410 <AdatiWayReturn+0x83c>
 800e244:	f7f5 fda0 	bl	8003d88 <End_straight>
			mode.WallControlMode=1;
 800e248:	2301      	movs	r3, #1
 800e24a:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e24c:	2300      	movs	r3, #0
 800e24e:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e250:	2300      	movs	r3, #0
 800e252:	75fb      	strb	r3, [r7, #23]
			straight_table2((90/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,900,input_StraightAcceleration, mode);
 800e254:	4b65      	ldr	r3, [pc, #404]	; (800e3ec <AdatiWayReturn+0x818>)
 800e256:	681a      	ldr	r2, [r3, #0]
 800e258:	4613      	mov	r3, r2
 800e25a:	005b      	lsls	r3, r3, #1
 800e25c:	4413      	add	r3, r2
 800e25e:	011a      	lsls	r2, r3, #4
 800e260:	1ad3      	subs	r3, r2, r3
 800e262:	ee07 3a90 	vmov	s15, r3
 800e266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e26a:	6978      	ldr	r0, [r7, #20]
 800e26c:	ed97 2a01 	vldr	s4, [r7, #4]
 800e270:	eddf 1a5f 	vldr	s3, [pc, #380]	; 800e3f0 <AdatiWayReturn+0x81c>
 800e274:	ed97 1a03 	vldr	s2, [r7, #12]
 800e278:	edd7 0a03 	vldr	s1, [r7, #12]
 800e27c:	eeb0 0a67 	vmov.f32	s0, s15
 800e280:	f7f5 f8cc 	bl	800341c <straight_table2>

		}

		if (direction >= 5) {
 800e284:	69bb      	ldr	r3, [r7, #24]
 800e286:	2b04      	cmp	r3, #4
 800e288:	dd02      	ble.n	800e290 <AdatiWayReturn+0x6bc>
			direction = direction-4;
 800e28a:	69bb      	ldr	r3, [r7, #24]
 800e28c:	3b04      	subs	r3, #4
 800e28e:	61bb      	str	r3, [r7, #24]
		}
		if (direction <= 0) {
 800e290:	69bb      	ldr	r3, [r7, #24]
 800e292:	2b00      	cmp	r3, #0
 800e294:	dc02      	bgt.n	800e29c <AdatiWayReturn+0x6c8>
			direction = direction+4;
 800e296:	69bb      	ldr	r3, [r7, #24]
 800e298:	3304      	adds	r3, #4
 800e29a:	61bb      	str	r3, [r7, #24]
//基地区間**********************************************************************
//		if (know_road == 1) {
//			most_speed_kitikukan_play(850, 1600);
//		}
//基地区間
		if(error_mode==1){break;}
 800e29c:	4b55      	ldr	r3, [pc, #340]	; (800e3f4 <AdatiWayReturn+0x820>)
 800e29e:	781b      	ldrb	r3, [r3, #0]
 800e2a0:	2b01      	cmp	r3, #1
 800e2a2:	d017      	beq.n	800e2d4 <AdatiWayReturn+0x700>
		if (g_timCount_sec>240){
 800e2a4:	4b54      	ldr	r3, [pc, #336]	; (800e3f8 <AdatiWayReturn+0x824>)
 800e2a6:	edd3 7a00 	vldr	s15, [r3]
 800e2aa:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800e3fc <AdatiWayReturn+0x828>
 800e2ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2b6:	dd08      	ble.n	800e2ca <AdatiWayReturn+0x6f6>
					// 秒数エンド
						timer_end_mode=1;
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
						pl_DriveMotor_stop();
 800e2be:	f7f9 fda5 	bl	8007e0c <pl_DriveMotor_stop>
						pl_DriveMotor_standby(OFF);
 800e2c2:	2000      	movs	r0, #0
 800e2c4:	f7f9 fd3c 	bl	8007d40 <pl_DriveMotor_standby>
						break;
 800e2c8:	e005      	b.n	800e2d6 <AdatiWayReturn+0x702>
		update_coordinate(&x,&y,direction);
 800e2ca:	e4ea      	b.n	800dca2 <AdatiWayReturn+0xce>
		if (x == 0 && y == 0) {break;}
 800e2cc:	bf00      	nop
 800e2ce:	e002      	b.n	800e2d6 <AdatiWayReturn+0x702>
			break;
 800e2d0:	bf00      	nop
 800e2d2:	e000      	b.n	800e2d6 <AdatiWayReturn+0x702>
		if(error_mode==1){break;}
 800e2d4:	bf00      	nop
					}

	}
	if(error_mode==0){
 800e2d6:	4b47      	ldr	r3, [pc, #284]	; (800e3f4 <AdatiWayReturn+0x820>)
 800e2d8:	781b      	ldrb	r3, [r3, #0]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d101      	bne.n	800e2e2 <AdatiWayReturn+0x70e>
	record_in();
 800e2de:	f7f9 fa3d 	bl	800775c <record_in>
	}
	create_DijkstraMap();
 800e2e2:	f003 f885 	bl	80113f0 <create_DijkstraMap>
	clear_Ierror();
 800e2e6:	f7f6 fb97 	bl	8004a18 <clear_Ierror>
	reset_gyro();
 800e2ea:	f7f3 fc5d 	bl	8001ba8 <reset_gyro>
	//reset_speed();
	maze_mode = 1;
 800e2ee:	4b44      	ldr	r3, [pc, #272]	; (800e400 <AdatiWayReturn+0x82c>)
 800e2f0:	2201      	movs	r2, #1
 800e2f2:	701a      	strb	r2, [r3, #0]
	straight_table2(90/2+BACK_TO_CENTER,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e2f4:	6978      	ldr	r0, [r7, #20]
 800e2f6:	ed97 2a01 	vldr	s4, [r7, #4]
 800e2fa:	edd7 1a03 	vldr	s3, [r7, #12]
 800e2fe:	ed97 1a03 	vldr	s2, [r7, #12]
 800e302:	eddf 0a42 	vldr	s1, [pc, #264]	; 800e40c <AdatiWayReturn+0x838>
 800e306:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800e3e8 <AdatiWayReturn+0x814>
 800e30a:	f7f5 f887 	bl	800341c <straight_table2>

	while (1) {
		noGoalPillarMode=0;
 800e30e:	4b3d      	ldr	r3, [pc, #244]	; (800e404 <AdatiWayReturn+0x830>)
 800e310:	2200      	movs	r2, #0
 800e312:	701a      	strb	r2, [r3, #0]
		//straight_table2(90, 300, 300, 500);

		update_coordinate(&x,&y,direction);
 800e314:	69ba      	ldr	r2, [r7, #24]
 800e316:	f107 011c 	add.w	r1, r7, #28
 800e31a:	f107 0320 	add.w	r3, r7, #32
 800e31e:	4618      	mov	r0, r3
 800e320:	f7ff fc24 	bl	800db6c <update_coordinate>
		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800e324:	6a3b      	ldr	r3, [r7, #32]
 800e326:	2b05      	cmp	r3, #5
 800e328:	d002      	beq.n	800e330 <AdatiWayReturn+0x75c>
 800e32a:	6a3b      	ldr	r3, [r7, #32]
 800e32c:	2b06      	cmp	r3, #6
 800e32e:	d109      	bne.n	800e344 <AdatiWayReturn+0x770>
 800e330:	69fb      	ldr	r3, [r7, #28]
 800e332:	2b04      	cmp	r3, #4
 800e334:	d002      	beq.n	800e33c <AdatiWayReturn+0x768>
 800e336:	69fb      	ldr	r3, [r7, #28]
 800e338:	2b05      	cmp	r3, #5
 800e33a:	d103      	bne.n	800e344 <AdatiWayReturn+0x770>
			noGoalPillarMode=1;
 800e33c:	4b31      	ldr	r3, [pc, #196]	; (800e404 <AdatiWayReturn+0x830>)
 800e33e:	2201      	movs	r2, #1
 800e340:	701a      	strb	r2, [r3, #0]
 800e342:	e002      	b.n	800e34a <AdatiWayReturn+0x776>
		}else{
			noGoalPillarMode=0;
 800e344:	4b2f      	ldr	r3, [pc, #188]	; (800e404 <AdatiWayReturn+0x830>)
 800e346:	2200      	movs	r2, #0
 800e348:	701a      	strb	r2, [r3, #0]
		}

		front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e34a:	4b2f      	ldr	r3, [pc, #188]	; (800e408 <AdatiWayReturn+0x834>)
 800e34c:	689b      	ldr	r3, [r3, #8]
 800e34e:	2b86      	cmp	r3, #134	; 0x86
 800e350:	bfcc      	ite	gt
 800e352:	2301      	movgt	r3, #1
 800e354:	2300      	movle	r3, #0
 800e356:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e35a:	4b2b      	ldr	r3, [pc, #172]	; (800e408 <AdatiWayReturn+0x834>)
 800e35c:	691b      	ldr	r3, [r3, #16]
 800e35e:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e362:	4293      	cmp	r3, r2
 800e364:	bfcc      	ite	gt
 800e366:	2301      	movgt	r3, #1
 800e368:	2300      	movle	r3, #0
 800e36a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e36e:	4b26      	ldr	r3, [pc, #152]	; (800e408 <AdatiWayReturn+0x834>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e376:	4293      	cmp	r3, r2
 800e378:	bfcc      	ite	gt
 800e37a:	2301      	movgt	r3, #1
 800e37c:	2300      	movle	r3, #0
 800e37e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

		mode.WallControlMode=1;
 800e382:	2301      	movs	r3, #1
 800e384:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=1;
 800e386:	2301      	movs	r3, #1
 800e388:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 800e38a:	2300      	movs	r3, #0
 800e38c:	75fb      	strb	r3, [r7, #23]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e38e:	6978      	ldr	r0, [r7, #20]
 800e390:	ed97 2a01 	vldr	s4, [r7, #4]
 800e394:	edd7 1a03 	vldr	s3, [r7, #12]
 800e398:	ed97 1a03 	vldr	s2, [r7, #12]
 800e39c:	edd7 0a03 	vldr	s1, [r7, #12]
 800e3a0:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e3a4:	f7f5 f83a 	bl	800341c <straight_table2>
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e3a8:	6a38      	ldr	r0, [r7, #32]
 800e3aa:	69f9      	ldr	r1, [r7, #28]
 800e3ac:	69ba      	ldr	r2, [r7, #24]
 800e3ae:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e3b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e3b6:	9301      	str	r3, [sp, #4]
 800e3b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e3bc:	9300      	str	r3, [sp, #0]
 800e3be:	4623      	mov	r3, r4
 800e3c0:	f002 f974 	bl	80106ac <update_wall>
		if(Dijkstra_mode==1){
 800e3c4:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800e3c8:	2b01      	cmp	r3, #1
 800e3ca:	d123      	bne.n	800e414 <AdatiWayReturn+0x840>
			route_Dijkstra();//ダイクストラ法の結果から最短ルートをスタックに入れる
 800e3cc:	f004 fd5a 	bl	8012e84 <route_Dijkstra>
			create_StepCountMap_unknown();
 800e3d0:	f005 fa12 	bl	80137f8 <create_StepCountMap_unknown>
 800e3d4:	e020      	b.n	800e418 <AdatiWayReturn+0x844>
 800e3d6:	bf00      	nop
 800e3d8:	2000080a 	.word	0x2000080a
 800e3dc:	447a0000 	.word	0x447a0000
 800e3e0:	c3160000 	.word	0xc3160000
 800e3e4:	c1a40000 	.word	0xc1a40000
 800e3e8:	42830000 	.word	0x42830000
 800e3ec:	20000830 	.word	0x20000830
 800e3f0:	44610000 	.word	0x44610000
 800e3f4:	2000080b 	.word	0x2000080b
 800e3f8:	20000730 	.word	0x20000730
 800e3fc:	43700000 	.word	0x43700000
 800e400:	20000838 	.word	0x20000838
 800e404:	2000052d 	.word	0x2000052d
 800e408:	20000474 	.word	0x20000474
 800e40c:	00000000 	.word	0x00000000
 800e410:	42140000 	.word	0x42140000
		}else{
			create_StepCountMapBack_queue();
 800e414:	f006 f810 	bl	8014438 <create_StepCountMapBack_queue>
		}
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e418:	6a3b      	ldr	r3, [r7, #32]
 800e41a:	69fa      	ldr	r2, [r7, #28]
 800e41c:	69b9      	ldr	r1, [r7, #24]
 800e41e:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e422:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e426:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e42a:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e42e:	9102      	str	r1, [sp, #8]
 800e430:	9201      	str	r2, [sp, #4]
 800e432:	9300      	str	r3, [sp, #0]
 800e434:	4633      	mov	r3, r6
 800e436:	462a      	mov	r2, r5
 800e438:	4621      	mov	r1, r4
 800e43a:	f002 feb1 	bl	80111a0 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e43e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e442:	2b00      	cmp	r3, #0
 800e444:	d001      	beq.n	800e44a <AdatiWayReturn+0x876>
 800e446:	23ff      	movs	r3, #255	; 0xff
 800e448:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e44a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d001      	beq.n	800e456 <AdatiWayReturn+0x882>
 800e452:	23ff      	movs	r3, #255	; 0xff
 800e454:	853b      	strh	r3, [r7, #40]	; 0x28
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e456:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d001      	beq.n	800e462 <AdatiWayReturn+0x88e>
 800e45e:	23ff      	movs	r3, #255	; 0xff
 800e460:	84bb      	strh	r3, [r7, #36]	; 0x24
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800e462:	6a38      	ldr	r0, [r7, #32]
 800e464:	69fc      	ldr	r4, [r7, #28]
 800e466:	69bd      	ldr	r5, [r7, #24]
 800e468:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
 800e46a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e46c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e46e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e470:	9102      	str	r1, [sp, #8]
 800e472:	9201      	str	r2, [sp, #4]
 800e474:	9300      	str	r3, [sp, #0]
 800e476:	4633      	mov	r3, r6
 800e478:	462a      	mov	r2, r5
 800e47a:	4621      	mov	r1, r4
 800e47c:	f001 fec2 	bl	8010204 <decision_kitiku>
		mode.WallCutMode=1;
 800e480:	2301      	movs	r3, #1
 800e482:	75fb      	strb	r3, [r7, #23]
		End_straight(MAZE_OFFSET,mode,right_wall,left_wall);
 800e484:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e488:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e48c:	4619      	mov	r1, r3
 800e48e:	6978      	ldr	r0, [r7, #20]
 800e490:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e494:	f7f5 fc78 	bl	8003d88 <End_straight>


			if(x == 0 && y == 0) {
 800e498:	6a3b      	ldr	r3, [r7, #32]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d165      	bne.n	800e56a <AdatiWayReturn+0x996>
 800e49e:	69fb      	ldr	r3, [r7, #28]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d162      	bne.n	800e56a <AdatiWayReturn+0x996>

				mode.WallControlMode=0;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e4b0:	6978      	ldr	r0, [r7, #20]
 800e4b2:	ed97 2a01 	vldr	s4, [r7, #4]
 800e4b6:	edd7 1a03 	vldr	s3, [r7, #12]
 800e4ba:	ed1f 1a2c 	vldr	s2, [pc, #-176]	; 800e40c <AdatiWayReturn+0x838>
 800e4be:	edd7 0a03 	vldr	s1, [r7, #12]
 800e4c2:	ed1f 0a2d 	vldr	s0, [pc, #-180]	; 800e410 <AdatiWayReturn+0x83c>
 800e4c6:	f7f4 ffa9 	bl	800341c <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e4ca:	2003      	movs	r0, #3
 800e4cc:	f7f9 fc6a 	bl	8007da4 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e4d0:	2003      	movs	r0, #3
 800e4d2:	f7f9 fc3f 	bl	8007d54 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(500);
 800e4d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e4da:	f7f9 ff61 	bl	80083a0 <wait_ms_NoReset>
				no_safty = 1;
 800e4de:	4b79      	ldr	r3, [pc, #484]	; (800e6c4 <AdatiWayReturn+0xaf0>)
 800e4e0:	2201      	movs	r2, #1
 800e4e2:	701a      	strb	r2, [r3, #0]
				turning_table2(180,0,0,input_TurningVelocity,input_TurningAcceleration);
 800e4e4:	ed97 2a00 	vldr	s4, [r7]
 800e4e8:	edd7 1a02 	vldr	s3, [r7, #8]
 800e4ec:	ed9f 1a7e 	vldr	s2, [pc, #504]	; 800e6e8 <AdatiWayReturn+0xb14>
 800e4f0:	eddf 0a7d 	vldr	s1, [pc, #500]	; 800e6e8 <AdatiWayReturn+0xb14>
 800e4f4:	ed9f 0a74 	vldr	s0, [pc, #464]	; 800e6c8 <AdatiWayReturn+0xaf4>
 800e4f8:	f7f5 fcb2 	bl	8003e60 <turning_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e4fc:	2003      	movs	r0, #3
 800e4fe:	f7f9 fc51 	bl	8007da4 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e502:	2003      	movs	r0, #3
 800e504:	f7f9 fc26 	bl	8007d54 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(500);
 800e508:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e50c:	f7f9 ff48 	bl	80083a0 <wait_ms_NoReset>
				straight_table2(-60/2, 0,0,-150,1000, mode);
 800e510:	6978      	ldr	r0, [r7, #20]
 800e512:	ed9f 2a6e 	vldr	s4, [pc, #440]	; 800e6cc <AdatiWayReturn+0xaf8>
 800e516:	eddf 1a6e 	vldr	s3, [pc, #440]	; 800e6d0 <AdatiWayReturn+0xafc>
 800e51a:	ed9f 1a73 	vldr	s2, [pc, #460]	; 800e6e8 <AdatiWayReturn+0xb14>
 800e51e:	eddf 0a72 	vldr	s1, [pc, #456]	; 800e6e8 <AdatiWayReturn+0xb14>
 800e522:	eebb 0a0e 	vmov.f32	s0, #190	; 0xc1f00000 -30.0
 800e526:	f7f4 ff79 	bl	800341c <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e52a:	2003      	movs	r0, #3
 800e52c:	f7f9 fc3a 	bl	8007da4 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e530:	2003      	movs	r0, #3
 800e532:	f7f9 fc0f 	bl	8007d54 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(500);
 800e536:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e53a:	f7f9 ff31 	bl	80083a0 <wait_ms_NoReset>
				no_safty = 0;
 800e53e:	4b61      	ldr	r3, [pc, #388]	; (800e6c4 <AdatiWayReturn+0xaf0>)
 800e540:	2200      	movs	r2, #0
 800e542:	701a      	strb	r2, [r3, #0]
				clear_Ierror();
 800e544:	f7f6 fa68 	bl	8004a18 <clear_Ierror>

				direction = direction + 2;
 800e548:	69bb      	ldr	r3, [r7, #24]
 800e54a:	3302      	adds	r3, #2
 800e54c:	61bb      	str	r3, [r7, #24]

				if (direction >= 5) {
 800e54e:	69bb      	ldr	r3, [r7, #24]
 800e550:	2b04      	cmp	r3, #4
 800e552:	dd02      	ble.n	800e55a <AdatiWayReturn+0x986>
					direction = direction-4;
 800e554:	69bb      	ldr	r3, [r7, #24]
 800e556:	3b04      	subs	r3, #4
 800e558:	61bb      	str	r3, [r7, #24]
				}
				if (direction <= 0) {
 800e55a:	69bb      	ldr	r3, [r7, #24]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	f300 8321 	bgt.w	800eba4 <AdatiWayReturn+0xfd0>
					direction = direction+4;
 800e562:	69bb      	ldr	r3, [r7, #24]
 800e564:	3304      	adds	r3, #4
 800e566:	61bb      	str	r3, [r7, #24]
				}

				break;
 800e568:	e31c      	b.n	800eba4 <AdatiWayReturn+0xfd0>
			}
			// 移動の優先順位 ： 前→右→左→後
			if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800e56a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e56c:	2bff      	cmp	r3, #255	; 0xff
 800e56e:	d10b      	bne.n	800e588 <AdatiWayReturn+0x9b4>
 800e570:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e572:	2bff      	cmp	r3, #255	; 0xff
 800e574:	d108      	bne.n	800e588 <AdatiWayReturn+0x9b4>
 800e576:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e578:	2bff      	cmp	r3, #255	; 0xff
 800e57a:	d105      	bne.n	800e588 <AdatiWayReturn+0x9b4>
 800e57c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e57e:	2bff      	cmp	r3, #255	; 0xff
 800e580:	d102      	bne.n	800e588 <AdatiWayReturn+0x9b4>
			// 迷路破損のため停止.ダイクストラ法更新
				Dijkstra_maker_flag=1;
 800e582:	4b54      	ldr	r3, [pc, #336]	; (800e6d4 <AdatiWayReturn+0xb00>)
 800e584:	2201      	movs	r2, #1
 800e586:	701a      	strb	r2, [r3, #0]
			}
			if (x<0 || y<0 || x>15 || y>15){
 800e588:	6a3b      	ldr	r3, [r7, #32]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	db08      	blt.n	800e5a0 <AdatiWayReturn+0x9cc>
 800e58e:	69fb      	ldr	r3, [r7, #28]
 800e590:	2b00      	cmp	r3, #0
 800e592:	db05      	blt.n	800e5a0 <AdatiWayReturn+0x9cc>
 800e594:	6a3b      	ldr	r3, [r7, #32]
 800e596:	2b0f      	cmp	r3, #15
 800e598:	dc02      	bgt.n	800e5a0 <AdatiWayReturn+0x9cc>
 800e59a:	69fb      	ldr	r3, [r7, #28]
 800e59c:	2b0f      	cmp	r3, #15
 800e59e:	dd0e      	ble.n	800e5be <AdatiWayReturn+0x9ea>
							// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
								error_mode=1;
 800e5a0:	4b4d      	ldr	r3, [pc, #308]	; (800e6d8 <AdatiWayReturn+0xb04>)
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	701a      	strb	r2, [r3, #0]
								g_WallControl_mode=0;
 800e5a6:	4b4d      	ldr	r3, [pc, #308]	; (800e6dc <AdatiWayReturn+0xb08>)
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	701a      	strb	r2, [r3, #0]
								pl_yellow_LED_count(2*2*2*2);
 800e5ac:	2010      	movs	r0, #16
 800e5ae:	f7f8 fe73 	bl	8007298 <pl_yellow_LED_count>
								pl_DriveMotor_stop();
 800e5b2:	f7f9 fc2b 	bl	8007e0c <pl_DriveMotor_stop>
								pl_DriveMotor_standby(OFF);
 800e5b6:	2000      	movs	r0, #0
 800e5b8:	f7f9 fbc2 	bl	8007d40 <pl_DriveMotor_standby>
								break;
 800e5bc:	e2f5      	b.n	800ebaa <AdatiWayReturn+0xfd6>
			}


			if(Dijkstra_maker_flag==1){
 800e5be:	4b45      	ldr	r3, [pc, #276]	; (800e6d4 <AdatiWayReturn+0xb00>)
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	2b01      	cmp	r3, #1
 800e5c4:	f040 8181 	bne.w	800e8ca <AdatiWayReturn+0xcf6>
				// 移動の優先順位 ： 前→右→左→後
				mode.WallControlMode=1;
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET-(BACK_TO_CENTER-BACK_TO_CENTER_FRONT), input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e5d4:	6978      	ldr	r0, [r7, #20]
 800e5d6:	ed97 2a01 	vldr	s4, [r7, #4]
 800e5da:	edd7 1a03 	vldr	s3, [r7, #12]
 800e5de:	ed9f 1a42 	vldr	s2, [pc, #264]	; 800e6e8 <AdatiWayReturn+0xb14>
 800e5e2:	edd7 0a03 	vldr	s1, [r7, #12]
 800e5e6:	eeb3 0a0d 	vmov.f32	s0, #61	; 0x41e80000  29.0
 800e5ea:	f7f4 ff17 	bl	800341c <straight_table2>

				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e5ee:	2003      	movs	r0, #3
 800e5f0:	f7f9 fbd8 	bl	8007da4 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e5f4:	2003      	movs	r0, #3
 800e5f6:	f7f9 fbad 	bl	8007d54 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e5fa:	2064      	movs	r0, #100	; 0x64
 800e5fc:	f7f9 fed0 	bl	80083a0 <wait_ms_NoReset>
				create_DijkstraMap();
 800e600:	f002 fef6 	bl	80113f0 <create_DijkstraMap>
				route_Dijkstra();//ダイクストラ法の結果から最短ルートをスタックに入れる
 800e604:	f004 fc3e 	bl	8012e84 <route_Dijkstra>
				create_StepCountMap_unknown();
 800e608:	f005 f8f6 	bl	80137f8 <create_StepCountMap_unknown>
				search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e60c:	6a3b      	ldr	r3, [r7, #32]
 800e60e:	69fa      	ldr	r2, [r7, #28]
 800e610:	69b9      	ldr	r1, [r7, #24]
 800e612:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e616:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e61a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e61e:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e622:	9102      	str	r1, [sp, #8]
 800e624:	9201      	str	r2, [sp, #4]
 800e626:	9300      	str	r3, [sp, #0]
 800e628:	4633      	mov	r3, r6
 800e62a:	462a      	mov	r2, r5
 800e62c:	4621      	mov	r1, r4
 800e62e:	f002 fdb7 	bl	80111a0 <search_AroundWalkCount>
				if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e632:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e636:	2b00      	cmp	r3, #0
 800e638:	d001      	beq.n	800e63e <AdatiWayReturn+0xa6a>
 800e63a:	23ff      	movs	r3, #255	; 0xff
 800e63c:	857b      	strh	r3, [r7, #42]	; 0x2a
				if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e63e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e642:	2b00      	cmp	r3, #0
 800e644:	d001      	beq.n	800e64a <AdatiWayReturn+0xa76>
 800e646:	23ff      	movs	r3, #255	; 0xff
 800e648:	853b      	strh	r3, [r7, #40]	; 0x28
				if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e64a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d001      	beq.n	800e656 <AdatiWayReturn+0xa82>
 800e652:	23ff      	movs	r3, #255	; 0xff
 800e654:	84bb      	strh	r3, [r7, #36]	; 0x24
								if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800e656:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e658:	2bff      	cmp	r3, #255	; 0xff
 800e65a:	d117      	bne.n	800e68c <AdatiWayReturn+0xab8>
 800e65c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e65e:	2bff      	cmp	r3, #255	; 0xff
 800e660:	d114      	bne.n	800e68c <AdatiWayReturn+0xab8>
 800e662:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e664:	2bff      	cmp	r3, #255	; 0xff
 800e666:	d111      	bne.n	800e68c <AdatiWayReturn+0xab8>
 800e668:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e66a:	2bff      	cmp	r3, #255	; 0xff
 800e66c:	d10e      	bne.n	800e68c <AdatiWayReturn+0xab8>
								// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
									error_mode=1;
 800e66e:	4b1a      	ldr	r3, [pc, #104]	; (800e6d8 <AdatiWayReturn+0xb04>)
 800e670:	2201      	movs	r2, #1
 800e672:	701a      	strb	r2, [r3, #0]
									g_WallControl_mode=0;
 800e674:	4b19      	ldr	r3, [pc, #100]	; (800e6dc <AdatiWayReturn+0xb08>)
 800e676:	2200      	movs	r2, #0
 800e678:	701a      	strb	r2, [r3, #0]
									pl_yellow_LED_count(2*2*2*2*2);
 800e67a:	2020      	movs	r0, #32
 800e67c:	f7f8 fe0c 	bl	8007298 <pl_yellow_LED_count>
									pl_DriveMotor_stop();
 800e680:	f7f9 fbc4 	bl	8007e0c <pl_DriveMotor_stop>
									pl_DriveMotor_standby(OFF);
 800e684:	2000      	movs	r0, #0
 800e686:	f7f9 fb5b 	bl	8007d40 <pl_DriveMotor_standby>
									break;
 800e68a:	e28e      	b.n	800ebaa <AdatiWayReturn+0xfd6>
								}
								if (x<0 || y<0 || x>15 || y>15){
 800e68c:	6a3b      	ldr	r3, [r7, #32]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	db08      	blt.n	800e6a4 <AdatiWayReturn+0xad0>
 800e692:	69fb      	ldr	r3, [r7, #28]
 800e694:	2b00      	cmp	r3, #0
 800e696:	db05      	blt.n	800e6a4 <AdatiWayReturn+0xad0>
 800e698:	6a3b      	ldr	r3, [r7, #32]
 800e69a:	2b0f      	cmp	r3, #15
 800e69c:	dc02      	bgt.n	800e6a4 <AdatiWayReturn+0xad0>
 800e69e:	69fb      	ldr	r3, [r7, #28]
 800e6a0:	2b0f      	cmp	r3, #15
 800e6a2:	dd25      	ble.n	800e6f0 <AdatiWayReturn+0xb1c>
								// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
									error_mode=1;
 800e6a4:	4b0c      	ldr	r3, [pc, #48]	; (800e6d8 <AdatiWayReturn+0xb04>)
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	701a      	strb	r2, [r3, #0]
									g_WallControl_mode=0;
 800e6aa:	4b0c      	ldr	r3, [pc, #48]	; (800e6dc <AdatiWayReturn+0xb08>)
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	701a      	strb	r2, [r3, #0]
									pl_yellow_LED_count(2*2*2*2);
 800e6b0:	2010      	movs	r0, #16
 800e6b2:	f7f8 fdf1 	bl	8007298 <pl_yellow_LED_count>
									pl_DriveMotor_stop();
 800e6b6:	f7f9 fba9 	bl	8007e0c <pl_DriveMotor_stop>
									pl_DriveMotor_standby(OFF);
 800e6ba:	2000      	movs	r0, #0
 800e6bc:	f7f9 fb40 	bl	8007d40 <pl_DriveMotor_standby>
									break;
 800e6c0:	e273      	b.n	800ebaa <AdatiWayReturn+0xfd6>
 800e6c2:	bf00      	nop
 800e6c4:	2000080a 	.word	0x2000080a
 800e6c8:	43340000 	.word	0x43340000
 800e6cc:	447a0000 	.word	0x447a0000
 800e6d0:	c3160000 	.word	0xc3160000
 800e6d4:	20000d30 	.word	0x20000d30
 800e6d8:	2000080b 	.word	0x2000080b
 800e6dc:	20000594 	.word	0x20000594
 800e6e0:	c2b40000 	.word	0xc2b40000
 800e6e4:	42b40000 	.word	0x42b40000
 800e6e8:	00000000 	.word	0x00000000
 800e6ec:	42540000 	.word	0x42540000
								}
								mode.WallControlMode=0;
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	753b      	strb	r3, [r7, #20]
								mode.WallCutMode=0;
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	75fb      	strb	r3, [r7, #23]
								mode.calMazeMode=0;
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	75bb      	strb	r3, [r7, #22]
								if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800e6fc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e6fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e700:	429a      	cmp	r2, r3
 800e702:	d814      	bhi.n	800e72e <AdatiWayReturn+0xb5a>
 800e704:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e706:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e708:	429a      	cmp	r2, r3
 800e70a:	d810      	bhi.n	800e72e <AdatiWayReturn+0xb5a>
 800e70c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e70e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e710:	429a      	cmp	r2, r3
 800e712:	d80c      	bhi.n	800e72e <AdatiWayReturn+0xb5a>
									// 直進
									straight_table2(90/2+(BACK_TO_CENTER-BACK_TO_CENTER_FRONT), 0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e714:	6978      	ldr	r0, [r7, #20]
 800e716:	ed97 2a01 	vldr	s4, [r7, #4]
 800e71a:	edd7 1a03 	vldr	s3, [r7, #12]
 800e71e:	ed97 1a03 	vldr	s2, [r7, #12]
 800e722:	ed5f 0a0f 	vldr	s1, [pc, #-60]	; 800e6e8 <AdatiWayReturn+0xb14>
 800e726:	ed1f 0a0f 	vldr	s0, [pc, #-60]	; 800e6ec <AdatiWayReturn+0xb18>
 800e72a:	f7f4 fe77 	bl	800341c <straight_table2>
								}
								if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800e72e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e730:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e732:	429a      	cmp	r2, r3
 800e734:	d230      	bcs.n	800e798 <AdatiWayReturn+0xbc4>
 800e736:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e738:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d82c      	bhi.n	800e798 <AdatiWayReturn+0xbc4>
 800e73e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e740:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e742:	429a      	cmp	r2, r3
 800e744:	d828      	bhi.n	800e798 <AdatiWayReturn+0xbc4>
									// 右旋回
									turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 800e746:	edd7 7a02 	vldr	s15, [r7, #8]
 800e74a:	eef1 7a67 	vneg.f32	s15, s15
 800e74e:	ed97 2a00 	vldr	s4, [r7]
 800e752:	eef0 1a67 	vmov.f32	s3, s15
 800e756:	ed1f 1a1c 	vldr	s2, [pc, #-112]	; 800e6e8 <AdatiWayReturn+0xb14>
 800e75a:	ed5f 0a1d 	vldr	s1, [pc, #-116]	; 800e6e8 <AdatiWayReturn+0xb14>
 800e75e:	ed1f 0a20 	vldr	s0, [pc, #-128]	; 800e6e0 <AdatiWayReturn+0xb0c>
 800e762:	f7f5 fb7d 	bl	8003e60 <turning_table2>
									pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e766:	2003      	movs	r0, #3
 800e768:	f7f9 fb1c 	bl	8007da4 <pl_R_DriveMotor_mode>
									pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e76c:	2003      	movs	r0, #3
 800e76e:	f7f9 faf1 	bl	8007d54 <pl_L_DriveMotor_mode>
									wait_ms_NoReset(100);
 800e772:	2064      	movs	r0, #100	; 0x64
 800e774:	f7f9 fe14 	bl	80083a0 <wait_ms_NoReset>
									straight_table2(90/2+(BACK_TO_CENTER-BACK_TO_CENTER_FRONT), 0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e778:	6978      	ldr	r0, [r7, #20]
 800e77a:	ed97 2a01 	vldr	s4, [r7, #4]
 800e77e:	edd7 1a03 	vldr	s3, [r7, #12]
 800e782:	ed97 1a03 	vldr	s2, [r7, #12]
 800e786:	ed5f 0a28 	vldr	s1, [pc, #-160]	; 800e6e8 <AdatiWayReturn+0xb14>
 800e78a:	ed1f 0a28 	vldr	s0, [pc, #-160]	; 800e6ec <AdatiWayReturn+0xb18>
 800e78e:	f7f4 fe45 	bl	800341c <straight_table2>
									direction++;
 800e792:	69bb      	ldr	r3, [r7, #24]
 800e794:	3301      	adds	r3, #1
 800e796:	61bb      	str	r3, [r7, #24]
								}
								if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800e798:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e79a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d22c      	bcs.n	800e7fa <AdatiWayReturn+0xc26>
 800e7a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e7a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d228      	bcs.n	800e7fa <AdatiWayReturn+0xc26>
 800e7a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e7aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d824      	bhi.n	800e7fa <AdatiWayReturn+0xc26>
									// 左旋回
									turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800e7b0:	ed97 2a00 	vldr	s4, [r7]
 800e7b4:	edd7 1a02 	vldr	s3, [r7, #8]
 800e7b8:	ed1f 1a35 	vldr	s2, [pc, #-212]	; 800e6e8 <AdatiWayReturn+0xb14>
 800e7bc:	ed5f 0a36 	vldr	s1, [pc, #-216]	; 800e6e8 <AdatiWayReturn+0xb14>
 800e7c0:	ed1f 0a38 	vldr	s0, [pc, #-224]	; 800e6e4 <AdatiWayReturn+0xb10>
 800e7c4:	f7f5 fb4c 	bl	8003e60 <turning_table2>
									pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e7c8:	2003      	movs	r0, #3
 800e7ca:	f7f9 faeb 	bl	8007da4 <pl_R_DriveMotor_mode>
									pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e7ce:	2003      	movs	r0, #3
 800e7d0:	f7f9 fac0 	bl	8007d54 <pl_L_DriveMotor_mode>
									wait_ms_NoReset(100);
 800e7d4:	2064      	movs	r0, #100	; 0x64
 800e7d6:	f7f9 fde3 	bl	80083a0 <wait_ms_NoReset>
									straight_table2(90/2+(BACK_TO_CENTER-BACK_TO_CENTER_FRONT), 0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e7da:	6978      	ldr	r0, [r7, #20]
 800e7dc:	ed97 2a01 	vldr	s4, [r7, #4]
 800e7e0:	edd7 1a03 	vldr	s3, [r7, #12]
 800e7e4:	ed97 1a03 	vldr	s2, [r7, #12]
 800e7e8:	ed5f 0a41 	vldr	s1, [pc, #-260]	; 800e6e8 <AdatiWayReturn+0xb14>
 800e7ec:	ed1f 0a41 	vldr	s0, [pc, #-260]	; 800e6ec <AdatiWayReturn+0xb18>
 800e7f0:	f7f4 fe14 	bl	800341c <straight_table2>
									direction--;
 800e7f4:	69bb      	ldr	r3, [r7, #24]
 800e7f6:	3b01      	subs	r3, #1
 800e7f8:	61bb      	str	r3, [r7, #24]
								}
								if(back_count < front_count && back_count < right_count
 800e7fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e7fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e7fe:	429a      	cmp	r2, r3
 800e800:	f080 81ab 	bcs.w	800eb5a <AdatiWayReturn+0xf86>
 800e804:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e806:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e808:	429a      	cmp	r2, r3
 800e80a:	f080 81a6 	bcs.w	800eb5a <AdatiWayReturn+0xf86>
										&& back_count < left_count){
 800e80e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e810:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e812:	429a      	cmp	r2, r3
 800e814:	f080 81a1 	bcs.w	800eb5a <AdatiWayReturn+0xf86>
									//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
									no_safty = 1;
 800e818:	4ba2      	ldr	r3, [pc, #648]	; (800eaa4 <AdatiWayReturn+0xed0>)
 800e81a:	2201      	movs	r2, #1
 800e81c:	701a      	strb	r2, [r3, #0]
									backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800e81e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e822:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 800e826:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e82a:	4618      	mov	r0, r3
 800e82c:	edd7 0a00 	vldr	s1, [r7]
 800e830:	ed97 0a02 	vldr	s0, [r7, #8]
 800e834:	f7fb f906 	bl	8009a44 <backTurn_controlWall>
									//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
									wait_ms_NoReset(100);
 800e838:	2064      	movs	r0, #100	; 0x64
 800e83a:	f7f9 fdb1 	bl	80083a0 <wait_ms_NoReset>
									no_safty = 0;
 800e83e:	4b99      	ldr	r3, [pc, #612]	; (800eaa4 <AdatiWayReturn+0xed0>)
 800e840:	2200      	movs	r2, #0
 800e842:	701a      	strb	r2, [r3, #0]
									//clear_Ierror();
									mode.WallControlMode=0;
 800e844:	2300      	movs	r3, #0
 800e846:	753b      	strb	r3, [r7, #20]
									if(front_wall){
 800e848:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d027      	beq.n	800e8a0 <AdatiWayReturn+0xccc>
									straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800e850:	6978      	ldr	r0, [r7, #20]
 800e852:	ed9f 2a95 	vldr	s4, [pc, #596]	; 800eaa8 <AdatiWayReturn+0xed4>
 800e856:	eddf 1a95 	vldr	s3, [pc, #596]	; 800eaac <AdatiWayReturn+0xed8>
 800e85a:	ed9f 1a95 	vldr	s2, [pc, #596]	; 800eab0 <AdatiWayReturn+0xedc>
 800e85e:	eddf 0a94 	vldr	s1, [pc, #592]	; 800eab0 <AdatiWayReturn+0xedc>
 800e862:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800eab4 <AdatiWayReturn+0xee0>
 800e866:	f7f4 fdd9 	bl	800341c <straight_table2>
									pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e86a:	2003      	movs	r0, #3
 800e86c:	f7f9 fa9a 	bl	8007da4 <pl_R_DriveMotor_mode>
									pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e870:	2003      	movs	r0, #3
 800e872:	f7f9 fa6f 	bl	8007d54 <pl_L_DriveMotor_mode>
									wait_ms_NoReset(100);
 800e876:	2064      	movs	r0, #100	; 0x64
 800e878:	f7f9 fd92 	bl	80083a0 <wait_ms_NoReset>

									clear_Ierror();
 800e87c:	f7f6 f8cc 	bl	8004a18 <clear_Ierror>
									mode.WallControlMode=1;
 800e880:	2301      	movs	r3, #1
 800e882:	753b      	strb	r3, [r7, #20]
									straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e884:	6978      	ldr	r0, [r7, #20]
 800e886:	ed97 2a01 	vldr	s4, [r7, #4]
 800e88a:	edd7 1a03 	vldr	s3, [r7, #12]
 800e88e:	ed97 1a03 	vldr	s2, [r7, #12]
 800e892:	eddf 0a87 	vldr	s1, [pc, #540]	; 800eab0 <AdatiWayReturn+0xedc>
 800e896:	ed9f 0a88 	vldr	s0, [pc, #544]	; 800eab8 <AdatiWayReturn+0xee4>
 800e89a:	f7f4 fdbf 	bl	800341c <straight_table2>
 800e89e:	e010      	b.n	800e8c2 <AdatiWayReturn+0xcee>
									}else{
										clear_Ierror();
 800e8a0:	f7f6 f8ba 	bl	8004a18 <clear_Ierror>
										mode.WallControlMode=0;
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	753b      	strb	r3, [r7, #20]
										straight_table2(90/2+(BACK_TO_CENTER-BACK_TO_CENTER_FRONT),0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e8a8:	6978      	ldr	r0, [r7, #20]
 800e8aa:	ed97 2a01 	vldr	s4, [r7, #4]
 800e8ae:	edd7 1a03 	vldr	s3, [r7, #12]
 800e8b2:	ed97 1a03 	vldr	s2, [r7, #12]
 800e8b6:	eddf 0a7e 	vldr	s1, [pc, #504]	; 800eab0 <AdatiWayReturn+0xedc>
 800e8ba:	ed9f 0a80 	vldr	s0, [pc, #512]	; 800eabc <AdatiWayReturn+0xee8>
 800e8be:	f7f4 fdad 	bl	800341c <straight_table2>

									}
									//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
									direction = direction + 2;
 800e8c2:	69bb      	ldr	r3, [r7, #24]
 800e8c4:	3302      	adds	r3, #2
 800e8c6:	61bb      	str	r3, [r7, #24]
 800e8c8:	e147      	b.n	800eb5a <AdatiWayReturn+0xf86>
								}


			}else{

				if(know_mode==0){
 800e8ca:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d102      	bne.n	800e8d8 <AdatiWayReturn+0xd04>
					kitikukan = 0;
 800e8d2:	4b7b      	ldr	r3, [pc, #492]	; (800eac0 <AdatiWayReturn+0xeec>)
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	601a      	str	r2, [r3, #0]
				}
			if (kitikukan == OFF) {
 800e8d8:	4b79      	ldr	r3, [pc, #484]	; (800eac0 <AdatiWayReturn+0xeec>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	f040 80f9 	bne.w	800ead4 <AdatiWayReturn+0xf00>


				if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800e8e2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e8e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	d81a      	bhi.n	800e920 <AdatiWayReturn+0xd4c>
 800e8ea:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e8ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d816      	bhi.n	800e920 <AdatiWayReturn+0xd4c>
 800e8f2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e8f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	d812      	bhi.n	800e920 <AdatiWayReturn+0xd4c>
					// 直進
					mode.WallControlMode=1;
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 800e8fe:	2300      	movs	r3, #0
 800e900:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 800e902:	2300      	movs	r3, #0
 800e904:	75fb      	strb	r3, [r7, #23]
					straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e906:	6978      	ldr	r0, [r7, #20]
 800e908:	ed97 2a01 	vldr	s4, [r7, #4]
 800e90c:	edd7 1a03 	vldr	s3, [r7, #12]
 800e910:	ed97 1a03 	vldr	s2, [r7, #12]
 800e914:	edd7 0a03 	vldr	s1, [r7, #12]
 800e918:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 800eac4 <AdatiWayReturn+0xef0>
 800e91c:	f7f4 fd7e 	bl	800341c <straight_table2>
				}
				if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800e920:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e922:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e924:	429a      	cmp	r2, r3
 800e926:	d219      	bcs.n	800e95c <AdatiWayReturn+0xd88>
 800e928:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e92a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d815      	bhi.n	800e95c <AdatiWayReturn+0xd88>
 800e930:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e932:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e934:	429a      	cmp	r2, r3
 800e936:	d811      	bhi.n	800e95c <AdatiWayReturn+0xd88>
					// 右旋回
					slalomR(speed300_exploration.slalom_R, OFF,EXPLORATION,0,input_StraightVelocity);
 800e938:	4b63      	ldr	r3, [pc, #396]	; (800eac8 <AdatiWayReturn+0xef4>)
 800e93a:	2200      	movs	r2, #0
 800e93c:	9203      	str	r2, [sp, #12]
 800e93e:	2200      	movs	r2, #0
 800e940:	9202      	str	r2, [sp, #8]
 800e942:	2200      	movs	r2, #0
 800e944:	9201      	str	r2, [sp, #4]
 800e946:	699a      	ldr	r2, [r3, #24]
 800e948:	9200      	str	r2, [sp, #0]
 800e94a:	3308      	adds	r3, #8
 800e94c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e94e:	ed97 0a03 	vldr	s0, [r7, #12]
 800e952:	f7fb f941 	bl	8009bd8 <slalomR>
					direction++;
 800e956:	69bb      	ldr	r3, [r7, #24]
 800e958:	3301      	adds	r3, #1
 800e95a:	61bb      	str	r3, [r7, #24]
				}
				if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800e95c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e95e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e960:	429a      	cmp	r2, r3
 800e962:	d219      	bcs.n	800e998 <AdatiWayReturn+0xdc4>
 800e964:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e966:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e968:	429a      	cmp	r2, r3
 800e96a:	d215      	bcs.n	800e998 <AdatiWayReturn+0xdc4>
 800e96c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e96e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e970:	429a      	cmp	r2, r3
 800e972:	d811      	bhi.n	800e998 <AdatiWayReturn+0xdc4>
					// 左旋回
					slalomL(speed300_exploration.slalom_L, OFF,EXPLORATION,0,input_StraightVelocity);
 800e974:	4b54      	ldr	r3, [pc, #336]	; (800eac8 <AdatiWayReturn+0xef4>)
 800e976:	2200      	movs	r2, #0
 800e978:	9203      	str	r2, [sp, #12]
 800e97a:	2200      	movs	r2, #0
 800e97c:	9202      	str	r2, [sp, #8]
 800e97e:	2200      	movs	r2, #0
 800e980:	9201      	str	r2, [sp, #4]
 800e982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e984:	9200      	str	r2, [sp, #0]
 800e986:	331c      	adds	r3, #28
 800e988:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e98a:	ed97 0a03 	vldr	s0, [r7, #12]
 800e98e:	f7fb fb09 	bl	8009fa4 <slalomL>
					direction--;
 800e992:	69bb      	ldr	r3, [r7, #24]
 800e994:	3b01      	subs	r3, #1
 800e996:	61bb      	str	r3, [r7, #24]
				}
				if(back_count < front_count && back_count < right_count
 800e998:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e99a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e99c:	429a      	cmp	r2, r3
 800e99e:	f080 80dc 	bcs.w	800eb5a <AdatiWayReturn+0xf86>
 800e9a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e9a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e9a6:	429a      	cmp	r2, r3
 800e9a8:	f080 80d7 	bcs.w	800eb5a <AdatiWayReturn+0xf86>
						&& back_count < left_count){
 800e9ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e9ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	f080 80d2 	bcs.w	800eb5a <AdatiWayReturn+0xf86>
					//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
					//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
					mode.WallControlMode=1;
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	75fb      	strb	r3, [r7, #23]
					straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e9c2:	6978      	ldr	r0, [r7, #20]
 800e9c4:	ed97 2a01 	vldr	s4, [r7, #4]
 800e9c8:	edd7 1a03 	vldr	s3, [r7, #12]
 800e9cc:	ed9f 1a38 	vldr	s2, [pc, #224]	; 800eab0 <AdatiWayReturn+0xedc>
 800e9d0:	edd7 0a03 	vldr	s1, [r7, #12]
 800e9d4:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 800ead0 <AdatiWayReturn+0xefc>
 800e9d8:	f7f4 fd20 	bl	800341c <straight_table2>
					pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e9dc:	2003      	movs	r0, #3
 800e9de:	f7f9 f9e1 	bl	8007da4 <pl_R_DriveMotor_mode>
					pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e9e2:	2003      	movs	r0, #3
 800e9e4:	f7f9 f9b6 	bl	8007d54 <pl_L_DriveMotor_mode>
					wait_ms_NoReset(100);
 800e9e8:	2064      	movs	r0, #100	; 0x64
 800e9ea:	f7f9 fcd9 	bl	80083a0 <wait_ms_NoReset>
					create_DijkstraMap();
 800e9ee:	f002 fcff 	bl	80113f0 <create_DijkstraMap>
					no_safty = 1;
 800e9f2:	4b2c      	ldr	r3, [pc, #176]	; (800eaa4 <AdatiWayReturn+0xed0>)
 800e9f4:	2201      	movs	r2, #1
 800e9f6:	701a      	strb	r2, [r3, #0]
					backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800e9f8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e9fc:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 800ea00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea04:	4618      	mov	r0, r3
 800ea06:	edd7 0a00 	vldr	s1, [r7]
 800ea0a:	ed97 0a02 	vldr	s0, [r7, #8]
 800ea0e:	f7fb f819 	bl	8009a44 <backTurn_controlWall>
					//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
					wait_ms_NoReset(100);
 800ea12:	2064      	movs	r0, #100	; 0x64
 800ea14:	f7f9 fcc4 	bl	80083a0 <wait_ms_NoReset>
					no_safty = 0;
 800ea18:	4b22      	ldr	r3, [pc, #136]	; (800eaa4 <AdatiWayReturn+0xed0>)
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	701a      	strb	r2, [r3, #0]
					//clear_Ierror();
					mode.WallControlMode=0;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	753b      	strb	r3, [r7, #20]
					if(front_wall){
 800ea22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d027      	beq.n	800ea7a <AdatiWayReturn+0xea6>
					straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800ea2a:	6978      	ldr	r0, [r7, #20]
 800ea2c:	ed9f 2a1e 	vldr	s4, [pc, #120]	; 800eaa8 <AdatiWayReturn+0xed4>
 800ea30:	eddf 1a1e 	vldr	s3, [pc, #120]	; 800eaac <AdatiWayReturn+0xed8>
 800ea34:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 800eab0 <AdatiWayReturn+0xedc>
 800ea38:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800eab0 <AdatiWayReturn+0xedc>
 800ea3c:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800eab4 <AdatiWayReturn+0xee0>
 800ea40:	f7f4 fcec 	bl	800341c <straight_table2>
					pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ea44:	2003      	movs	r0, #3
 800ea46:	f7f9 f9ad 	bl	8007da4 <pl_R_DriveMotor_mode>
					pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ea4a:	2003      	movs	r0, #3
 800ea4c:	f7f9 f982 	bl	8007d54 <pl_L_DriveMotor_mode>
					wait_ms_NoReset(100);
 800ea50:	2064      	movs	r0, #100	; 0x64
 800ea52:	f7f9 fca5 	bl	80083a0 <wait_ms_NoReset>

					clear_Ierror();
 800ea56:	f7f5 ffdf 	bl	8004a18 <clear_Ierror>
					mode.WallControlMode=1;
 800ea5a:	2301      	movs	r3, #1
 800ea5c:	753b      	strb	r3, [r7, #20]
					straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ea5e:	6978      	ldr	r0, [r7, #20]
 800ea60:	ed97 2a01 	vldr	s4, [r7, #4]
 800ea64:	edd7 1a03 	vldr	s3, [r7, #12]
 800ea68:	ed97 1a03 	vldr	s2, [r7, #12]
 800ea6c:	eddf 0a10 	vldr	s1, [pc, #64]	; 800eab0 <AdatiWayReturn+0xedc>
 800ea70:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800eab8 <AdatiWayReturn+0xee4>
 800ea74:	f7f4 fcd2 	bl	800341c <straight_table2>
 800ea78:	e010      	b.n	800ea9c <AdatiWayReturn+0xec8>
					}else{
						clear_Ierror();
 800ea7a:	f7f5 ffcd 	bl	8004a18 <clear_Ierror>
						mode.WallControlMode=0;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	753b      	strb	r3, [r7, #20]
						straight_table2(90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ea82:	6978      	ldr	r0, [r7, #20]
 800ea84:	ed97 2a01 	vldr	s4, [r7, #4]
 800ea88:	edd7 1a03 	vldr	s3, [r7, #12]
 800ea8c:	ed97 1a03 	vldr	s2, [r7, #12]
 800ea90:	eddf 0a07 	vldr	s1, [pc, #28]	; 800eab0 <AdatiWayReturn+0xedc>
 800ea94:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800eacc <AdatiWayReturn+0xef8>
 800ea98:	f7f4 fcc0 	bl	800341c <straight_table2>

					}
					//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
					direction = direction + 2;
 800ea9c:	69bb      	ldr	r3, [r7, #24]
 800ea9e:	3302      	adds	r3, #2
 800eaa0:	61bb      	str	r3, [r7, #24]
 800eaa2:	e05a      	b.n	800eb5a <AdatiWayReturn+0xf86>
 800eaa4:	2000080a 	.word	0x2000080a
 800eaa8:	447a0000 	.word	0x447a0000
 800eaac:	c3160000 	.word	0xc3160000
 800eab0:	00000000 	.word	0x00000000
 800eab4:	c1a40000 	.word	0xc1a40000
 800eab8:	42830000 	.word	0x42830000
 800eabc:	42540000 	.word	0x42540000
 800eac0:	2000083c 	.word	0x2000083c
 800eac4:	42a40000 	.word	0x42a40000
 800eac8:	2000ef84 	.word	0x2000ef84
 800eacc:	42340000 	.word	0x42340000
 800ead0:	42140000 	.word	0x42140000

				}

			} else {
				mode.WallControlMode=1;
 800ead4:	2301      	movs	r3, #1
 800ead6:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=1;
 800ead8:	2301      	movs	r3, #1
 800eada:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800eadc:	2300      	movs	r3, #0
 800eade:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800eae0:	6978      	ldr	r0, [r7, #20]
 800eae2:	ed97 2a01 	vldr	s4, [r7, #4]
 800eae6:	edd7 1a03 	vldr	s3, [r7, #12]
 800eaea:	ed97 1a03 	vldr	s2, [r7, #12]
 800eaee:	edd7 0a03 	vldr	s1, [r7, #12]
 800eaf2:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 800ead0 <AdatiWayReturn+0xefc>
 800eaf6:	f7f4 fc91 	bl	800341c <straight_table2>
				compress_kitiku(&x,&y,&direction);
 800eafa:	f107 0218 	add.w	r2, r7, #24
 800eafe:	f107 011c 	add.w	r1, r7, #28
 800eb02:	f107 0320 	add.w	r3, r7, #32
 800eb06:	4618      	mov	r0, r3
 800eb08:	f001 fbee 	bl	80102e8 <compress_kitiku>
				mode.WallCutMode=0;
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	75fb      	strb	r3, [r7, #23]
				End_straight(90/2-MAZE_OFFSET,mode,1,1);
 800eb10:	2201      	movs	r2, #1
 800eb12:	2101      	movs	r1, #1
 800eb14:	6978      	ldr	r0, [r7, #20]
 800eb16:	ed1f 0a12 	vldr	s0, [pc, #-72]	; 800ead0 <AdatiWayReturn+0xefc>
 800eb1a:	f7f5 f935 	bl	8003d88 <End_straight>
				mode.WallControlMode=1;
 800eb1e:	2301      	movs	r3, #1
 800eb20:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800eb22:	2300      	movs	r3, #0
 800eb24:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800eb26:	2300      	movs	r3, #0
 800eb28:	75fb      	strb	r3, [r7, #23]
				straight_table2((90/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,1000,input_StraightAcceleration, mode);
 800eb2a:	4b35      	ldr	r3, [pc, #212]	; (800ec00 <AdatiWayReturn+0x102c>)
 800eb2c:	681a      	ldr	r2, [r3, #0]
 800eb2e:	4613      	mov	r3, r2
 800eb30:	005b      	lsls	r3, r3, #1
 800eb32:	4413      	add	r3, r2
 800eb34:	011a      	lsls	r2, r3, #4
 800eb36:	1ad3      	subs	r3, r2, r3
 800eb38:	ee07 3a90 	vmov	s15, r3
 800eb3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eb40:	6978      	ldr	r0, [r7, #20]
 800eb42:	ed97 2a01 	vldr	s4, [r7, #4]
 800eb46:	eddf 1a2f 	vldr	s3, [pc, #188]	; 800ec04 <AdatiWayReturn+0x1030>
 800eb4a:	ed97 1a03 	vldr	s2, [r7, #12]
 800eb4e:	edd7 0a03 	vldr	s1, [r7, #12]
 800eb52:	eeb0 0a67 	vmov.f32	s0, s15
 800eb56:	f7f4 fc61 	bl	800341c <straight_table2>

			}
			}

			if (direction >= 5) {
 800eb5a:	69bb      	ldr	r3, [r7, #24]
 800eb5c:	2b04      	cmp	r3, #4
 800eb5e:	dd02      	ble.n	800eb66 <AdatiWayReturn+0xf92>
				direction = direction-4;
 800eb60:	69bb      	ldr	r3, [r7, #24]
 800eb62:	3b04      	subs	r3, #4
 800eb64:	61bb      	str	r3, [r7, #24]
			}
			if (direction <= 0) {
 800eb66:	69bb      	ldr	r3, [r7, #24]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	dc02      	bgt.n	800eb72 <AdatiWayReturn+0xf9e>
				direction = direction+4;
 800eb6c:	69bb      	ldr	r3, [r7, #24]
 800eb6e:	3304      	adds	r3, #4
 800eb70:	61bb      	str	r3, [r7, #24]
	//基地区間**********************************************************************
	//		if (know_road == 1) {
	//			most_speed_kitikukan_play(850, 1600);
	//		}
	//基地区間
			if(error_mode==1){break;}
 800eb72:	4b25      	ldr	r3, [pc, #148]	; (800ec08 <AdatiWayReturn+0x1034>)
 800eb74:	781b      	ldrb	r3, [r3, #0]
 800eb76:	2b01      	cmp	r3, #1
 800eb78:	d016      	beq.n	800eba8 <AdatiWayReturn+0xfd4>
			if (g_timCount_sec>240){
 800eb7a:	4b24      	ldr	r3, [pc, #144]	; (800ec0c <AdatiWayReturn+0x1038>)
 800eb7c:	edd3 7a00 	vldr	s15, [r3]
 800eb80:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800ec10 <AdatiWayReturn+0x103c>
 800eb84:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eb88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb8c:	dd08      	ble.n	800eba0 <AdatiWayReturn+0xfcc>
						// 秒数エンド
							timer_end_mode=1;
 800eb8e:	2301      	movs	r3, #1
 800eb90:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							pl_DriveMotor_stop();
 800eb94:	f7f9 f93a 	bl	8007e0c <pl_DriveMotor_stop>
							pl_DriveMotor_standby(OFF);
 800eb98:	2000      	movs	r0, #0
 800eb9a:	f7f9 f8d1 	bl	8007d40 <pl_DriveMotor_standby>
							break;
 800eb9e:	e004      	b.n	800ebaa <AdatiWayReturn+0xfd6>
		noGoalPillarMode=0;
 800eba0:	f7ff bbb5 	b.w	800e30e <AdatiWayReturn+0x73a>
				break;
 800eba4:	bf00      	nop
 800eba6:	e000      	b.n	800ebaa <AdatiWayReturn+0xfd6>
			if(error_mode==1){break;}
 800eba8:	bf00      	nop
						}
		}

	pl_DriveMotor_standby(OFF); //MTU2.TSTR.BIT.CST0 = 0;
 800ebaa:	2000      	movs	r0, #0
 800ebac:	f7f9 f8c8 	bl	8007d40 <pl_DriveMotor_standby>
	maze_mode = 0;
 800ebb0:	4b18      	ldr	r3, [pc, #96]	; (800ec14 <AdatiWayReturn+0x1040>)
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 800ebb6:	2064      	movs	r0, #100	; 0x64
 800ebb8:	f009 ff88 	bl	8018acc <HAL_Delay>
	maze_display();
 800ebbc:	f005 ff78 	bl	8014ab0 <maze_display>
	create_StepCountMap_queue();
 800ebc0:	f005 f950 	bl	8013e64 <create_StepCountMap_queue>
	if(walk_count[0][0] == 255){
 800ebc4:	4b14      	ldr	r3, [pc, #80]	; (800ec18 <AdatiWayReturn+0x1044>)
 800ebc6:	881b      	ldrh	r3, [r3, #0]
 800ebc8:	2bff      	cmp	r3, #255	; 0xff
 800ebca:	d102      	bne.n	800ebd2 <AdatiWayReturn+0xffe>
		error_mode = 1;
 800ebcc:	4b0e      	ldr	r3, [pc, #56]	; (800ec08 <AdatiWayReturn+0x1034>)
 800ebce:	2201      	movs	r2, #1
 800ebd0:	701a      	strb	r2, [r3, #0]
	}
	if (error_mode == 0) {
 800ebd2:	4b0d      	ldr	r3, [pc, #52]	; (800ec08 <AdatiWayReturn+0x1034>)
 800ebd4:	781b      	ldrb	r3, [r3, #0]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d102      	bne.n	800ebe0 <AdatiWayReturn+0x100c>
		record_in();
 800ebda:	f7f8 fdbf 	bl	800775c <record_in>
		record_out();
	}else{
		record_in();
	}

}
 800ebde:	e008      	b.n	800ebf2 <AdatiWayReturn+0x101e>
	} else if(timer_end_mode==0) {
 800ebe0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d102      	bne.n	800ebee <AdatiWayReturn+0x101a>
		record_out();
 800ebe8:	f7f8 fe74 	bl	80078d4 <record_out>
}
 800ebec:	e001      	b.n	800ebf2 <AdatiWayReturn+0x101e>
		record_in();
 800ebee:	f7f8 fdb5 	bl	800775c <record_in>
}
 800ebf2:	bf00      	nop
 800ebf4:	3734      	adds	r7, #52	; 0x34
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ebfc:	b004      	add	sp, #16
 800ebfe:	4770      	bx	lr
 800ec00:	20000830 	.word	0x20000830
 800ec04:	447a0000 	.word	0x447a0000
 800ec08:	2000080b 	.word	0x2000080b
 800ec0c:	20000730 	.word	0x20000730
 800ec10:	43700000 	.word	0x43700000
 800ec14:	20000838 	.word	0x20000838
 800ec18:	20000d34 	.word	0x20000d34

0800ec1c <pass_maker_Dijkstra>:





void pass_maker_Dijkstra(void){
 800ec1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec1e:	b08b      	sub	sp, #44	; 0x2c
 800ec20:	af04      	add	r7, sp, #16

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int x = 0;
 800ec22:	2300      	movs	r3, #0
 800ec24:	607b      	str	r3, [r7, #4]
	int y = 0;
 800ec26:	2300      	movs	r3, #0
 800ec28:	603b      	str	r3, [r7, #0]
	int direction = 1;
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	617b      	str	r3, [r7, #20]
	pass_count = 0;
 800ec2e:	4b8b      	ldr	r3, [pc, #556]	; (800ee5c <pass_maker_Dijkstra+0x240>)
 800ec30:	2200      	movs	r2, #0
 800ec32:	701a      	strb	r2, [r3, #0]
	create_DijkstraMap();
 800ec34:	f002 fbdc 	bl	80113f0 <create_DijkstraMap>
	maze_display_Dijkstra();
 800ec38:	f006 f858 	bl	8014cec <maze_display_Dijkstra>
	pass[0] = 1;
 800ec3c:	4b88      	ldr	r3, [pc, #544]	; (800ee60 <pass_maker_Dijkstra+0x244>)
 800ec3e:	2201      	movs	r2, #1
 800ec40:	601a      	str	r2, [r3, #0]
	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&x,&y,direction);
 800ec42:	4639      	mov	r1, r7
 800ec44:	1d3b      	adds	r3, r7, #4
 800ec46:	697a      	ldr	r2, [r7, #20]
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f7fe ff8f 	bl	800db6c <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2b05      	cmp	r3, #5
 800ec52:	d002      	beq.n	800ec5a <pass_maker_Dijkstra+0x3e>
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2b06      	cmp	r3, #6
 800ec58:	d13a      	bne.n	800ecd0 <pass_maker_Dijkstra+0xb4>
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	2b04      	cmp	r3, #4
 800ec5e:	d002      	beq.n	800ec66 <pass_maker_Dijkstra+0x4a>
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	2b05      	cmp	r3, #5
 800ec64:	d134      	bne.n	800ecd0 <pass_maker_Dijkstra+0xb4>

			if (pass[pass_count] >= 0) {
 800ec66:	4b7d      	ldr	r3, [pc, #500]	; (800ee5c <pass_maker_Dijkstra+0x240>)
 800ec68:	781b      	ldrb	r3, [r3, #0]
 800ec6a:	461a      	mov	r2, r3
 800ec6c:	4b7c      	ldr	r3, [pc, #496]	; (800ee60 <pass_maker_Dijkstra+0x244>)
 800ec6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	da05      	bge.n	800ec82 <pass_maker_Dijkstra+0x66>
					} else {
						pass_count++;
 800ec76:	4b79      	ldr	r3, [pc, #484]	; (800ee5c <pass_maker_Dijkstra+0x240>)
 800ec78:	781b      	ldrb	r3, [r3, #0]
 800ec7a:	3301      	adds	r3, #1
 800ec7c:	b2da      	uxtb	r2, r3
 800ec7e:	4b77      	ldr	r3, [pc, #476]	; (800ee5c <pass_maker_Dijkstra+0x240>)
 800ec80:	701a      	strb	r2, [r3, #0]
					}
					pass[pass_count] = pass[pass_count] + 1;
 800ec82:	4b76      	ldr	r3, [pc, #472]	; (800ee5c <pass_maker_Dijkstra+0x240>)
 800ec84:	781b      	ldrb	r3, [r3, #0]
 800ec86:	461a      	mov	r2, r3
 800ec88:	4b75      	ldr	r3, [pc, #468]	; (800ee60 <pass_maker_Dijkstra+0x244>)
 800ec8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec8e:	4a73      	ldr	r2, [pc, #460]	; (800ee5c <pass_maker_Dijkstra+0x240>)
 800ec90:	7812      	ldrb	r2, [r2, #0]
 800ec92:	4611      	mov	r1, r2
 800ec94:	3301      	adds	r3, #1
 800ec96:	4a72      	ldr	r2, [pc, #456]	; (800ee60 <pass_maker_Dijkstra+0x244>)
 800ec98:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//			wait(10);
		//			maze_display();
		//			x = 0;
		//			y = 0;
					direction = direction + 2;
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	3302      	adds	r3, #2
 800eca0:	617b      	str	r3, [r7, #20]
					if (direction == 5) {
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	2b05      	cmp	r3, #5
 800eca6:	d101      	bne.n	800ecac <pass_maker_Dijkstra+0x90>
						direction = 1;
 800eca8:	2301      	movs	r3, #1
 800ecaa:	617b      	str	r3, [r7, #20]
					}
					if (direction == 6) {
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	2b06      	cmp	r3, #6
 800ecb0:	d101      	bne.n	800ecb6 <pass_maker_Dijkstra+0x9a>
						direction = 2;
 800ecb2:	2302      	movs	r3, #2
 800ecb4:	617b      	str	r3, [r7, #20]
					}
					if (direction == 0) {
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d101      	bne.n	800ecc0 <pass_maker_Dijkstra+0xa4>
						direction = 4;
 800ecbc:	2304      	movs	r3, #4
 800ecbe:	617b      	str	r3, [r7, #20]
					}
					if (direction == -1) {
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecc6:	f040 80c2 	bne.w	800ee4e <pass_maker_Dijkstra+0x232>
						direction = 3;
 800ecca:	2303      	movs	r3, #3
 800eccc:	617b      	str	r3, [r7, #20]
					}
					break;
 800ecce:	e0be      	b.n	800ee4e <pass_maker_Dijkstra+0x232>

		}

		get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
 800ecd0:	6878      	ldr	r0, [r7, #4]
 800ecd2:	6839      	ldr	r1, [r7, #0]
 800ecd4:	f107 020b 	add.w	r2, r7, #11
 800ecd8:	f107 0309 	add.w	r3, r7, #9
 800ecdc:	9301      	str	r3, [sp, #4]
 800ecde:	f107 030a 	add.w	r3, r7, #10
 800ece2:	9300      	str	r3, [sp, #0]
 800ece4:	4613      	mov	r3, r2
 800ece6:	697a      	ldr	r2, [r7, #20]
 800ece8:	f001 ff66 	bl	8010bb8 <get_wall>
		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	683a      	ldr	r2, [r7, #0]
 800ecf0:	f107 060c 	add.w	r6, r7, #12
 800ecf4:	f107 050e 	add.w	r5, r7, #14
 800ecf8:	f107 0410 	add.w	r4, r7, #16
 800ecfc:	f107 0012 	add.w	r0, r7, #18
 800ed00:	6979      	ldr	r1, [r7, #20]
 800ed02:	9102      	str	r1, [sp, #8]
 800ed04:	9201      	str	r2, [sp, #4]
 800ed06:	9300      	str	r3, [sp, #0]
 800ed08:	4633      	mov	r3, r6
 800ed0a:	462a      	mov	r2, r5
 800ed0c:	4621      	mov	r1, r4
 800ed0e:	f002 fad5 	bl	80112bc <search_AroundDijkstraCount>
		if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
 800ed12:	7afb      	ldrb	r3, [r7, #11]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d002      	beq.n	800ed1e <pass_maker_Dijkstra+0x102>
 800ed18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ed1c:	827b      	strh	r3, [r7, #18]
		if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
 800ed1e:	7abb      	ldrb	r3, [r7, #10]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d002      	beq.n	800ed2a <pass_maker_Dijkstra+0x10e>
 800ed24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ed28:	823b      	strh	r3, [r7, #16]
		if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}
 800ed2a:	7a7b      	ldrb	r3, [r7, #9]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d002      	beq.n	800ed36 <pass_maker_Dijkstra+0x11a>
 800ed30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ed34:	81bb      	strh	r3, [r7, #12]

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 800ed36:	8a7b      	ldrh	r3, [r7, #18]
 800ed38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed3c:	4293      	cmp	r3, r2
 800ed3e:	d10e      	bne.n	800ed5e <pass_maker_Dijkstra+0x142>
 800ed40:	8a3b      	ldrh	r3, [r7, #16]
 800ed42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed46:	4293      	cmp	r3, r2
 800ed48:	d109      	bne.n	800ed5e <pass_maker_Dijkstra+0x142>
 800ed4a:	89bb      	ldrh	r3, [r7, #12]
 800ed4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed50:	4293      	cmp	r3, r2
 800ed52:	d104      	bne.n	800ed5e <pass_maker_Dijkstra+0x142>
 800ed54:	89fb      	ldrh	r3, [r7, #14]
 800ed56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed5a:	4293      	cmp	r3, r2
 800ed5c:	d079      	beq.n	800ee52 <pass_maker_Dijkstra+0x236>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800ed5e:	8a7a      	ldrh	r2, [r7, #18]
 800ed60:	8a3b      	ldrh	r3, [r7, #16]
 800ed62:	429a      	cmp	r2, r3
 800ed64:	d822      	bhi.n	800edac <pass_maker_Dijkstra+0x190>
 800ed66:	8a7a      	ldrh	r2, [r7, #18]
 800ed68:	89bb      	ldrh	r3, [r7, #12]
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d81e      	bhi.n	800edac <pass_maker_Dijkstra+0x190>
 800ed6e:	8a7a      	ldrh	r2, [r7, #18]
 800ed70:	89fb      	ldrh	r3, [r7, #14]
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d81a      	bhi.n	800edac <pass_maker_Dijkstra+0x190>
			// 直進
			if (pass[pass_count] >= 0) {} else {pass_count++;}
 800ed76:	4b39      	ldr	r3, [pc, #228]	; (800ee5c <pass_maker_Dijkstra+0x240>)
 800ed78:	781b      	ldrb	r3, [r3, #0]
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	4b38      	ldr	r3, [pc, #224]	; (800ee60 <pass_maker_Dijkstra+0x244>)
 800ed7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	da05      	bge.n	800ed92 <pass_maker_Dijkstra+0x176>
 800ed86:	4b35      	ldr	r3, [pc, #212]	; (800ee5c <pass_maker_Dijkstra+0x240>)
 800ed88:	781b      	ldrb	r3, [r3, #0]
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	b2da      	uxtb	r2, r3
 800ed8e:	4b33      	ldr	r3, [pc, #204]	; (800ee5c <pass_maker_Dijkstra+0x240>)
 800ed90:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = pass[pass_count] + 2;
 800ed92:	4b32      	ldr	r3, [pc, #200]	; (800ee5c <pass_maker_Dijkstra+0x240>)
 800ed94:	781b      	ldrb	r3, [r3, #0]
 800ed96:	461a      	mov	r2, r3
 800ed98:	4b31      	ldr	r3, [pc, #196]	; (800ee60 <pass_maker_Dijkstra+0x244>)
 800ed9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed9e:	4a2f      	ldr	r2, [pc, #188]	; (800ee5c <pass_maker_Dijkstra+0x240>)
 800eda0:	7812      	ldrb	r2, [r2, #0]
 800eda2:	4611      	mov	r1, r2
 800eda4:	3302      	adds	r3, #2
 800eda6:	4a2e      	ldr	r2, [pc, #184]	; (800ee60 <pass_maker_Dijkstra+0x244>)
 800eda8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800edac:	8a3a      	ldrh	r2, [r7, #16]
 800edae:	8a7b      	ldrh	r3, [r7, #18]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d218      	bcs.n	800ede6 <pass_maker_Dijkstra+0x1ca>
 800edb4:	8a3a      	ldrh	r2, [r7, #16]
 800edb6:	89bb      	ldrh	r3, [r7, #12]
 800edb8:	429a      	cmp	r2, r3
 800edba:	d814      	bhi.n	800ede6 <pass_maker_Dijkstra+0x1ca>
 800edbc:	8a3a      	ldrh	r2, [r7, #16]
 800edbe:	89fb      	ldrh	r3, [r7, #14]
 800edc0:	429a      	cmp	r2, r3
 800edc2:	d810      	bhi.n	800ede6 <pass_maker_Dijkstra+0x1ca>
			// 右旋回
			pass_count++;
 800edc4:	4b25      	ldr	r3, [pc, #148]	; (800ee5c <pass_maker_Dijkstra+0x240>)
 800edc6:	781b      	ldrb	r3, [r3, #0]
 800edc8:	3301      	adds	r3, #1
 800edca:	b2da      	uxtb	r2, r3
 800edcc:	4b23      	ldr	r3, [pc, #140]	; (800ee5c <pass_maker_Dijkstra+0x240>)
 800edce:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = -2;
 800edd0:	4b22      	ldr	r3, [pc, #136]	; (800ee5c <pass_maker_Dijkstra+0x240>)
 800edd2:	781b      	ldrb	r3, [r3, #0]
 800edd4:	4619      	mov	r1, r3
 800edd6:	4b22      	ldr	r3, [pc, #136]	; (800ee60 <pass_maker_Dijkstra+0x244>)
 800edd8:	f06f 0201 	mvn.w	r2, #1
 800eddc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction++;
 800ede0:	697b      	ldr	r3, [r7, #20]
 800ede2:	3301      	adds	r3, #1
 800ede4:	617b      	str	r3, [r7, #20]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800ede6:	89ba      	ldrh	r2, [r7, #12]
 800ede8:	8a7b      	ldrh	r3, [r7, #18]
 800edea:	429a      	cmp	r2, r3
 800edec:	d218      	bcs.n	800ee20 <pass_maker_Dijkstra+0x204>
 800edee:	89ba      	ldrh	r2, [r7, #12]
 800edf0:	8a3b      	ldrh	r3, [r7, #16]
 800edf2:	429a      	cmp	r2, r3
 800edf4:	d214      	bcs.n	800ee20 <pass_maker_Dijkstra+0x204>
 800edf6:	89ba      	ldrh	r2, [r7, #12]
 800edf8:	89fb      	ldrh	r3, [r7, #14]
 800edfa:	429a      	cmp	r2, r3
 800edfc:	d810      	bhi.n	800ee20 <pass_maker_Dijkstra+0x204>
			// 左旋回
			pass_count++;
 800edfe:	4b17      	ldr	r3, [pc, #92]	; (800ee5c <pass_maker_Dijkstra+0x240>)
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	3301      	adds	r3, #1
 800ee04:	b2da      	uxtb	r2, r3
 800ee06:	4b15      	ldr	r3, [pc, #84]	; (800ee5c <pass_maker_Dijkstra+0x240>)
 800ee08:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = -3;
 800ee0a:	4b14      	ldr	r3, [pc, #80]	; (800ee5c <pass_maker_Dijkstra+0x240>)
 800ee0c:	781b      	ldrb	r3, [r3, #0]
 800ee0e:	4619      	mov	r1, r3
 800ee10:	4b13      	ldr	r3, [pc, #76]	; (800ee60 <pass_maker_Dijkstra+0x244>)
 800ee12:	f06f 0202 	mvn.w	r2, #2
 800ee16:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction--;
 800ee1a:	697b      	ldr	r3, [r7, #20]
 800ee1c:	3b01      	subs	r3, #1
 800ee1e:	617b      	str	r3, [r7, #20]
		}

		if (direction == 5) {
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	2b05      	cmp	r3, #5
 800ee24:	d101      	bne.n	800ee2a <pass_maker_Dijkstra+0x20e>
			direction = 1;
 800ee26:	2301      	movs	r3, #1
 800ee28:	617b      	str	r3, [r7, #20]
		}
		if (direction == 6) {
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	2b06      	cmp	r3, #6
 800ee2e:	d101      	bne.n	800ee34 <pass_maker_Dijkstra+0x218>
			direction = 2;
 800ee30:	2302      	movs	r3, #2
 800ee32:	617b      	str	r3, [r7, #20]
		}
		if (direction == 0) {
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d101      	bne.n	800ee3e <pass_maker_Dijkstra+0x222>
			direction = 4;
 800ee3a:	2304      	movs	r3, #4
 800ee3c:	617b      	str	r3, [r7, #20]
		}
		if (direction == -1) {
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee44:	f47f aefd 	bne.w	800ec42 <pass_maker_Dijkstra+0x26>
			direction = 3;
 800ee48:	2303      	movs	r3, #3
 800ee4a:	617b      	str	r3, [r7, #20]
		update_coordinate(&x,&y,direction);
 800ee4c:	e6f9      	b.n	800ec42 <pass_maker_Dijkstra+0x26>
					break;
 800ee4e:	bf00      	nop
 800ee50:	e000      	b.n	800ee54 <pass_maker_Dijkstra+0x238>
			break;
 800ee52:	bf00      	nop
		}

	}
}
 800ee54:	bf00      	nop
 800ee56:	371c      	adds	r7, #28
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee5c:	2000082c 	.word	0x2000082c
 800ee60:	20000840 	.word	0x20000840
 800ee64:	00000000 	.word	0x00000000

0800ee68 <run_shortest>:


void run_shortest(float inspeed, float inacc, int stmass, char pass_mode, char fun_mode,
		char slant_mode, parameter_speed howspeed,float fun_ratio,char mollifier_mode) {
 800ee68:	b5b0      	push	{r4, r5, r7, lr}
 800ee6a:	b0e0      	sub	sp, #384	; 0x180
 800ee6c:	af50      	add	r7, sp, #320	; 0x140
 800ee6e:	ed87 0a05 	vstr	s0, [r7, #20]
 800ee72:	edc7 0a04 	vstr	s1, [r7, #16]
 800ee76:	60f8      	str	r0, [r7, #12]
 800ee78:	4608      	mov	r0, r1
 800ee7a:	4611      	mov	r1, r2
 800ee7c:	461a      	mov	r2, r3
 800ee7e:	ed87 1a01 	vstr	s2, [r7, #4]
 800ee82:	4603      	mov	r3, r0
 800ee84:	72fb      	strb	r3, [r7, #11]
 800ee86:	460b      	mov	r3, r1
 800ee88:	72bb      	strb	r3, [r7, #10]
 800ee8a:	4613      	mov	r3, r2
 800ee8c:	727b      	strb	r3, [r7, #9]
//	_Bool left_wall;
//
//	int x = 0;
//	int y = 0;
//	int direction = 1;
	slant_direction = -2;
 800ee8e:	f06f 0301 	mvn.w	r3, #1
 800ee92:	63bb      	str	r3, [r7, #56]	; 0x38

	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800ee94:	2301      	movs	r3, #1
 800ee96:	763b      	strb	r3, [r7, #24]
	mode.WallControlStatus=0;
 800ee98:	2300      	movs	r3, #0
 800ee9a:	767b      	strb	r3, [r7, #25]
	mode.WallCutMode=0;
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	76fb      	strb	r3, [r7, #27]
	mode.calMazeMode=0;
 800eea0:	2300      	movs	r3, #0
 800eea2:	76bb      	strb	r3, [r7, #26]

	//highspeed_mode = 1;
	for(int i = 0; i <= 254; i++){pass[i] = 0;}
 800eea4:	2300      	movs	r3, #0
 800eea6:	633b      	str	r3, [r7, #48]	; 0x30
 800eea8:	e007      	b.n	800eeba <run_shortest+0x52>
 800eeaa:	4a07      	ldr	r2, [pc, #28]	; (800eec8 <run_shortest+0x60>)
 800eeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeae:	2100      	movs	r1, #0
 800eeb0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800eeb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb6:	3301      	adds	r3, #1
 800eeb8:	633b      	str	r3, [r7, #48]	; 0x30
 800eeba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eebc:	2bfe      	cmp	r3, #254	; 0xfe
 800eebe:	ddf4      	ble.n	800eeaa <run_shortest+0x42>
	for(int i = 0; i <= 14; i++){
 800eec0:	2300      	movs	r3, #0
 800eec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eec4:	e077      	b.n	800efb6 <run_shortest+0x14e>
 800eec6:	bf00      	nop
 800eec8:	20000840 	.word	0x20000840
		record.row[i] = wall.row[i];
 800eecc:	4aa9      	ldr	r2, [pc, #676]	; (800f174 <run_shortest+0x30c>)
 800eece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800eed4:	4aa8      	ldr	r2, [pc, #672]	; (800f178 <run_shortest+0x310>)
 800eed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		record.column[i] = wall.column[i];
 800eedc:	4aa5      	ldr	r2, [pc, #660]	; (800f174 <run_shortest+0x30c>)
 800eede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee0:	330c      	adds	r3, #12
 800eee2:	005b      	lsls	r3, r3, #1
 800eee4:	4413      	add	r3, r2
 800eee6:	88d9      	ldrh	r1, [r3, #6]
 800eee8:	4aa3      	ldr	r2, [pc, #652]	; (800f178 <run_shortest+0x310>)
 800eeea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeec:	330c      	adds	r3, #12
 800eeee:	005b      	lsls	r3, r3, #1
 800eef0:	4413      	add	r3, r2
 800eef2:	460a      	mov	r2, r1
 800eef4:	80da      	strh	r2, [r3, #6]
		record.row_look[i] = wall.row_look[i];
 800eef6:	4a9f      	ldr	r2, [pc, #636]	; (800f174 <run_shortest+0x30c>)
 800eef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eefa:	331c      	adds	r3, #28
 800eefc:	005b      	lsls	r3, r3, #1
 800eefe:	4413      	add	r3, r2
 800ef00:	8899      	ldrh	r1, [r3, #4]
 800ef02:	4a9d      	ldr	r2, [pc, #628]	; (800f178 <run_shortest+0x310>)
 800ef04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef06:	331c      	adds	r3, #28
 800ef08:	005b      	lsls	r3, r3, #1
 800ef0a:	4413      	add	r3, r2
 800ef0c:	460a      	mov	r2, r1
 800ef0e:	809a      	strh	r2, [r3, #4]
		record.column_look[i] = wall.column_look[i];
 800ef10:	4a98      	ldr	r2, [pc, #608]	; (800f174 <run_shortest+0x30c>)
 800ef12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef14:	332c      	adds	r3, #44	; 0x2c
 800ef16:	005b      	lsls	r3, r3, #1
 800ef18:	4413      	add	r3, r2
 800ef1a:	8859      	ldrh	r1, [r3, #2]
 800ef1c:	4a96      	ldr	r2, [pc, #600]	; (800f178 <run_shortest+0x310>)
 800ef1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef20:	332c      	adds	r3, #44	; 0x2c
 800ef22:	005b      	lsls	r3, r3, #1
 800ef24:	4413      	add	r3, r2
 800ef26:	460a      	mov	r2, r1
 800ef28:	805a      	strh	r2, [r3, #2]
		wall.row_look[i] = ~wall.row_look[i];
 800ef2a:	4a92      	ldr	r2, [pc, #584]	; (800f174 <run_shortest+0x30c>)
 800ef2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef2e:	331c      	adds	r3, #28
 800ef30:	005b      	lsls	r3, r3, #1
 800ef32:	4413      	add	r3, r2
 800ef34:	889b      	ldrh	r3, [r3, #4]
 800ef36:	43db      	mvns	r3, r3
 800ef38:	b299      	uxth	r1, r3
 800ef3a:	4a8e      	ldr	r2, [pc, #568]	; (800f174 <run_shortest+0x30c>)
 800ef3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef3e:	331c      	adds	r3, #28
 800ef40:	005b      	lsls	r3, r3, #1
 800ef42:	4413      	add	r3, r2
 800ef44:	460a      	mov	r2, r1
 800ef46:	809a      	strh	r2, [r3, #4]
		wall.column_look[i] = ~wall.column_look[i];
 800ef48:	4a8a      	ldr	r2, [pc, #552]	; (800f174 <run_shortest+0x30c>)
 800ef4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef4c:	332c      	adds	r3, #44	; 0x2c
 800ef4e:	005b      	lsls	r3, r3, #1
 800ef50:	4413      	add	r3, r2
 800ef52:	885b      	ldrh	r3, [r3, #2]
 800ef54:	43db      	mvns	r3, r3
 800ef56:	b299      	uxth	r1, r3
 800ef58:	4a86      	ldr	r2, [pc, #536]	; (800f174 <run_shortest+0x30c>)
 800ef5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef5c:	332c      	adds	r3, #44	; 0x2c
 800ef5e:	005b      	lsls	r3, r3, #1
 800ef60:	4413      	add	r3, r2
 800ef62:	460a      	mov	r2, r1
 800ef64:	805a      	strh	r2, [r3, #2]
		wall.row[i] = wall.row[i] | wall.row_look[i];
 800ef66:	4a83      	ldr	r2, [pc, #524]	; (800f174 <run_shortest+0x30c>)
 800ef68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef6a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800ef6e:	4981      	ldr	r1, [pc, #516]	; (800f174 <run_shortest+0x30c>)
 800ef70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef72:	331c      	adds	r3, #28
 800ef74:	005b      	lsls	r3, r3, #1
 800ef76:	440b      	add	r3, r1
 800ef78:	889b      	ldrh	r3, [r3, #4]
 800ef7a:	4313      	orrs	r3, r2
 800ef7c:	b299      	uxth	r1, r3
 800ef7e:	4a7d      	ldr	r2, [pc, #500]	; (800f174 <run_shortest+0x30c>)
 800ef80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[i] = wall.column[i] | wall.column_look[i];
 800ef86:	4a7b      	ldr	r2, [pc, #492]	; (800f174 <run_shortest+0x30c>)
 800ef88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef8a:	330c      	adds	r3, #12
 800ef8c:	005b      	lsls	r3, r3, #1
 800ef8e:	4413      	add	r3, r2
 800ef90:	88da      	ldrh	r2, [r3, #6]
 800ef92:	4978      	ldr	r1, [pc, #480]	; (800f174 <run_shortest+0x30c>)
 800ef94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef96:	332c      	adds	r3, #44	; 0x2c
 800ef98:	005b      	lsls	r3, r3, #1
 800ef9a:	440b      	add	r3, r1
 800ef9c:	885b      	ldrh	r3, [r3, #2]
 800ef9e:	4313      	orrs	r3, r2
 800efa0:	b299      	uxth	r1, r3
 800efa2:	4a74      	ldr	r2, [pc, #464]	; (800f174 <run_shortest+0x30c>)
 800efa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa6:	330c      	adds	r3, #12
 800efa8:	005b      	lsls	r3, r3, #1
 800efaa:	4413      	add	r3, r2
 800efac:	460a      	mov	r2, r1
 800efae:	80da      	strh	r2, [r3, #6]
	for(int i = 0; i <= 14; i++){
 800efb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efb2:	3301      	adds	r3, #1
 800efb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800efb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efb8:	2b0e      	cmp	r3, #14
 800efba:	dd87      	ble.n	800eecc <run_shortest+0x64>
	}
	//pass_maker();
   pass_maker_Dijkstra();
 800efbc:	f7ff fe2e 	bl	800ec1c <pass_maker_Dijkstra>

	pass_count = 1;
 800efc0:	4b6e      	ldr	r3, [pc, #440]	; (800f17c <run_shortest+0x314>)
 800efc2:	2201      	movs	r2, #1
 800efc4:	701a      	strb	r2, [r3, #0]
if(pass_mode==1){
 800efc6:	7afb      	ldrb	r3, [r7, #11]
 800efc8:	2b01      	cmp	r3, #1
 800efca:	f040 84b5 	bne.w	800f938 <run_shortest+0xad0>
	while (1) {		//パス圧縮
//		if (mode_safty == 1) {
//
//			break;
//		}
		if (pass[pass_count] == 0) {
 800efce:	4b6b      	ldr	r3, [pc, #428]	; (800f17c <run_shortest+0x314>)
 800efd0:	781b      	ldrb	r3, [r3, #0]
 800efd2:	461a      	mov	r2, r3
 800efd4:	4b6a      	ldr	r3, [pc, #424]	; (800f180 <run_shortest+0x318>)
 800efd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	f000 813a 	beq.w	800f254 <run_shortest+0x3ec>
			break;
		}

		if (pass[pass_count] == -2 && pass[pass_count - 1] >= 1	//右90度大回りの条件
 800efe0:	4b66      	ldr	r3, [pc, #408]	; (800f17c <run_shortest+0x314>)
 800efe2:	781b      	ldrb	r3, [r3, #0]
 800efe4:	461a      	mov	r2, r3
 800efe6:	4b66      	ldr	r3, [pc, #408]	; (800f180 <run_shortest+0x318>)
 800efe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efec:	f113 0f02 	cmn.w	r3, #2
 800eff0:	d131      	bne.n	800f056 <run_shortest+0x1ee>
 800eff2:	4b62      	ldr	r3, [pc, #392]	; (800f17c <run_shortest+0x314>)
 800eff4:	781b      	ldrb	r3, [r3, #0]
 800eff6:	3b01      	subs	r3, #1
 800eff8:	4a61      	ldr	r2, [pc, #388]	; (800f180 <run_shortest+0x318>)
 800effa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800effe:	2b00      	cmp	r3, #0
 800f000:	dd29      	ble.n	800f056 <run_shortest+0x1ee>
		&& pass[pass_count + 1] >= 1) {
 800f002:	4b5e      	ldr	r3, [pc, #376]	; (800f17c <run_shortest+0x314>)
 800f004:	781b      	ldrb	r3, [r3, #0]
 800f006:	3301      	adds	r3, #1
 800f008:	4a5d      	ldr	r2, [pc, #372]	; (800f180 <run_shortest+0x318>)
 800f00a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	dd21      	ble.n	800f056 <run_shortest+0x1ee>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800f012:	4b5a      	ldr	r3, [pc, #360]	; (800f17c <run_shortest+0x314>)
 800f014:	781b      	ldrb	r3, [r3, #0]
 800f016:	3b01      	subs	r3, #1
 800f018:	4a59      	ldr	r2, [pc, #356]	; (800f180 <run_shortest+0x318>)
 800f01a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f01e:	4b57      	ldr	r3, [pc, #348]	; (800f17c <run_shortest+0x314>)
 800f020:	781b      	ldrb	r3, [r3, #0]
 800f022:	3b01      	subs	r3, #1
 800f024:	3a01      	subs	r2, #1
 800f026:	4956      	ldr	r1, [pc, #344]	; (800f180 <run_shortest+0x318>)
 800f028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800f02c:	4b53      	ldr	r3, [pc, #332]	; (800f17c <run_shortest+0x314>)
 800f02e:	781b      	ldrb	r3, [r3, #0]
 800f030:	3301      	adds	r3, #1
 800f032:	4a53      	ldr	r2, [pc, #332]	; (800f180 <run_shortest+0x318>)
 800f034:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f038:	4b50      	ldr	r3, [pc, #320]	; (800f17c <run_shortest+0x314>)
 800f03a:	781b      	ldrb	r3, [r3, #0]
 800f03c:	3301      	adds	r3, #1
 800f03e:	3a01      	subs	r2, #1
 800f040:	494f      	ldr	r1, [pc, #316]	; (800f180 <run_shortest+0x318>)
 800f042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -4;		//右90度大回り
 800f046:	4b4d      	ldr	r3, [pc, #308]	; (800f17c <run_shortest+0x314>)
 800f048:	781b      	ldrb	r3, [r3, #0]
 800f04a:	4619      	mov	r1, r3
 800f04c:	4b4c      	ldr	r3, [pc, #304]	; (800f180 <run_shortest+0x318>)
 800f04e:	f06f 0203 	mvn.w	r2, #3
 800f052:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count] == -3 && pass[pass_count - 1] >= 1	//左90度大回りの条件
 800f056:	4b49      	ldr	r3, [pc, #292]	; (800f17c <run_shortest+0x314>)
 800f058:	781b      	ldrb	r3, [r3, #0]
 800f05a:	461a      	mov	r2, r3
 800f05c:	4b48      	ldr	r3, [pc, #288]	; (800f180 <run_shortest+0x318>)
 800f05e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f062:	f113 0f03 	cmn.w	r3, #3
 800f066:	d131      	bne.n	800f0cc <run_shortest+0x264>
 800f068:	4b44      	ldr	r3, [pc, #272]	; (800f17c <run_shortest+0x314>)
 800f06a:	781b      	ldrb	r3, [r3, #0]
 800f06c:	3b01      	subs	r3, #1
 800f06e:	4a44      	ldr	r2, [pc, #272]	; (800f180 <run_shortest+0x318>)
 800f070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f074:	2b00      	cmp	r3, #0
 800f076:	dd29      	ble.n	800f0cc <run_shortest+0x264>
		&& pass[pass_count + 1] >= 1) {
 800f078:	4b40      	ldr	r3, [pc, #256]	; (800f17c <run_shortest+0x314>)
 800f07a:	781b      	ldrb	r3, [r3, #0]
 800f07c:	3301      	adds	r3, #1
 800f07e:	4a40      	ldr	r2, [pc, #256]	; (800f180 <run_shortest+0x318>)
 800f080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f084:	2b00      	cmp	r3, #0
 800f086:	dd21      	ble.n	800f0cc <run_shortest+0x264>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800f088:	4b3c      	ldr	r3, [pc, #240]	; (800f17c <run_shortest+0x314>)
 800f08a:	781b      	ldrb	r3, [r3, #0]
 800f08c:	3b01      	subs	r3, #1
 800f08e:	4a3c      	ldr	r2, [pc, #240]	; (800f180 <run_shortest+0x318>)
 800f090:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f094:	4b39      	ldr	r3, [pc, #228]	; (800f17c <run_shortest+0x314>)
 800f096:	781b      	ldrb	r3, [r3, #0]
 800f098:	3b01      	subs	r3, #1
 800f09a:	3a01      	subs	r2, #1
 800f09c:	4938      	ldr	r1, [pc, #224]	; (800f180 <run_shortest+0x318>)
 800f09e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800f0a2:	4b36      	ldr	r3, [pc, #216]	; (800f17c <run_shortest+0x314>)
 800f0a4:	781b      	ldrb	r3, [r3, #0]
 800f0a6:	3301      	adds	r3, #1
 800f0a8:	4a35      	ldr	r2, [pc, #212]	; (800f180 <run_shortest+0x318>)
 800f0aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f0ae:	4b33      	ldr	r3, [pc, #204]	; (800f17c <run_shortest+0x314>)
 800f0b0:	781b      	ldrb	r3, [r3, #0]
 800f0b2:	3301      	adds	r3, #1
 800f0b4:	3a01      	subs	r2, #1
 800f0b6:	4932      	ldr	r1, [pc, #200]	; (800f180 <run_shortest+0x318>)
 800f0b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -5;		//左90度大回り
 800f0bc:	4b2f      	ldr	r3, [pc, #188]	; (800f17c <run_shortest+0x314>)
 800f0be:	781b      	ldrb	r3, [r3, #0]
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	4b2f      	ldr	r3, [pc, #188]	; (800f180 <run_shortest+0x318>)
 800f0c4:	f06f 0204 	mvn.w	r2, #4
 800f0c8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -2
 800f0cc:	4b2b      	ldr	r3, [pc, #172]	; (800f17c <run_shortest+0x314>)
 800f0ce:	781b      	ldrb	r3, [r3, #0]
 800f0d0:	3b01      	subs	r3, #1
 800f0d2:	4a2b      	ldr	r2, [pc, #172]	; (800f180 <run_shortest+0x318>)
 800f0d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	dd43      	ble.n	800f164 <run_shortest+0x2fc>
 800f0dc:	4b27      	ldr	r3, [pc, #156]	; (800f17c <run_shortest+0x314>)
 800f0de:	781b      	ldrb	r3, [r3, #0]
 800f0e0:	461a      	mov	r2, r3
 800f0e2:	4b27      	ldr	r3, [pc, #156]	; (800f180 <run_shortest+0x318>)
 800f0e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0e8:	f113 0f02 	cmn.w	r3, #2
 800f0ec:	d13a      	bne.n	800f164 <run_shortest+0x2fc>
				&& pass[pass_count + 1] == -2 && pass[pass_count + 2] >= 1) {//右180度大回りの条件
 800f0ee:	4b23      	ldr	r3, [pc, #140]	; (800f17c <run_shortest+0x314>)
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	3301      	adds	r3, #1
 800f0f4:	4a22      	ldr	r2, [pc, #136]	; (800f180 <run_shortest+0x318>)
 800f0f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0fa:	f113 0f02 	cmn.w	r3, #2
 800f0fe:	d131      	bne.n	800f164 <run_shortest+0x2fc>
 800f100:	4b1e      	ldr	r3, [pc, #120]	; (800f17c <run_shortest+0x314>)
 800f102:	781b      	ldrb	r3, [r3, #0]
 800f104:	3302      	adds	r3, #2
 800f106:	4a1e      	ldr	r2, [pc, #120]	; (800f180 <run_shortest+0x318>)
 800f108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	dd29      	ble.n	800f164 <run_shortest+0x2fc>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f110:	4b1a      	ldr	r3, [pc, #104]	; (800f17c <run_shortest+0x314>)
 800f112:	781b      	ldrb	r3, [r3, #0]
 800f114:	3b01      	subs	r3, #1
 800f116:	4a1a      	ldr	r2, [pc, #104]	; (800f180 <run_shortest+0x318>)
 800f118:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f11c:	4b17      	ldr	r3, [pc, #92]	; (800f17c <run_shortest+0x314>)
 800f11e:	781b      	ldrb	r3, [r3, #0]
 800f120:	3b01      	subs	r3, #1
 800f122:	3a01      	subs	r2, #1
 800f124:	4916      	ldr	r1, [pc, #88]	; (800f180 <run_shortest+0x318>)
 800f126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -6;
 800f12a:	4b14      	ldr	r3, [pc, #80]	; (800f17c <run_shortest+0x314>)
 800f12c:	781b      	ldrb	r3, [r3, #0]
 800f12e:	4619      	mov	r1, r3
 800f130:	4b13      	ldr	r3, [pc, #76]	; (800f180 <run_shortest+0x318>)
 800f132:	f06f 0205 	mvn.w	r2, #5
 800f136:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800f13a:	4b10      	ldr	r3, [pc, #64]	; (800f17c <run_shortest+0x314>)
 800f13c:	781b      	ldrb	r3, [r3, #0]
 800f13e:	3301      	adds	r3, #1
 800f140:	4a0f      	ldr	r2, [pc, #60]	; (800f180 <run_shortest+0x318>)
 800f142:	f04f 31ff 	mov.w	r1, #4294967295
 800f146:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800f14a:	4b0c      	ldr	r3, [pc, #48]	; (800f17c <run_shortest+0x314>)
 800f14c:	781b      	ldrb	r3, [r3, #0]
 800f14e:	3302      	adds	r3, #2
 800f150:	4a0b      	ldr	r2, [pc, #44]	; (800f180 <run_shortest+0x318>)
 800f152:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f156:	4b09      	ldr	r3, [pc, #36]	; (800f17c <run_shortest+0x314>)
 800f158:	781b      	ldrb	r3, [r3, #0]
 800f15a:	3302      	adds	r3, #2
 800f15c:	3a01      	subs	r2, #1
 800f15e:	4908      	ldr	r1, [pc, #32]	; (800f180 <run_shortest+0x318>)
 800f160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -3
 800f164:	4b05      	ldr	r3, [pc, #20]	; (800f17c <run_shortest+0x314>)
 800f166:	781b      	ldrb	r3, [r3, #0]
 800f168:	3b01      	subs	r3, #1
 800f16a:	4a05      	ldr	r2, [pc, #20]	; (800f180 <run_shortest+0x318>)
 800f16c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f170:	2b00      	cmp	r3, #0
 800f172:	e007      	b.n	800f184 <run_shortest+0x31c>
 800f174:	20000c40 	.word	0x20000c40
 800f178:	20000cb8 	.word	0x20000cb8
 800f17c:	2000082c 	.word	0x2000082c
 800f180:	20000840 	.word	0x20000840
 800f184:	dd43      	ble.n	800f20e <run_shortest+0x3a6>
 800f186:	4b31      	ldr	r3, [pc, #196]	; (800f24c <run_shortest+0x3e4>)
 800f188:	781b      	ldrb	r3, [r3, #0]
 800f18a:	461a      	mov	r2, r3
 800f18c:	4b30      	ldr	r3, [pc, #192]	; (800f250 <run_shortest+0x3e8>)
 800f18e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f192:	f113 0f03 	cmn.w	r3, #3
 800f196:	d13a      	bne.n	800f20e <run_shortest+0x3a6>
				&& pass[pass_count + 1] == -3 && pass[pass_count + 2] >= 1) {//左180度大回りの条件
 800f198:	4b2c      	ldr	r3, [pc, #176]	; (800f24c <run_shortest+0x3e4>)
 800f19a:	781b      	ldrb	r3, [r3, #0]
 800f19c:	3301      	adds	r3, #1
 800f19e:	4a2c      	ldr	r2, [pc, #176]	; (800f250 <run_shortest+0x3e8>)
 800f1a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1a4:	f113 0f03 	cmn.w	r3, #3
 800f1a8:	d131      	bne.n	800f20e <run_shortest+0x3a6>
 800f1aa:	4b28      	ldr	r3, [pc, #160]	; (800f24c <run_shortest+0x3e4>)
 800f1ac:	781b      	ldrb	r3, [r3, #0]
 800f1ae:	3302      	adds	r3, #2
 800f1b0:	4a27      	ldr	r2, [pc, #156]	; (800f250 <run_shortest+0x3e8>)
 800f1b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	dd29      	ble.n	800f20e <run_shortest+0x3a6>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f1ba:	4b24      	ldr	r3, [pc, #144]	; (800f24c <run_shortest+0x3e4>)
 800f1bc:	781b      	ldrb	r3, [r3, #0]
 800f1be:	3b01      	subs	r3, #1
 800f1c0:	4a23      	ldr	r2, [pc, #140]	; (800f250 <run_shortest+0x3e8>)
 800f1c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f1c6:	4b21      	ldr	r3, [pc, #132]	; (800f24c <run_shortest+0x3e4>)
 800f1c8:	781b      	ldrb	r3, [r3, #0]
 800f1ca:	3b01      	subs	r3, #1
 800f1cc:	3a01      	subs	r2, #1
 800f1ce:	4920      	ldr	r1, [pc, #128]	; (800f250 <run_shortest+0x3e8>)
 800f1d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -7;
 800f1d4:	4b1d      	ldr	r3, [pc, #116]	; (800f24c <run_shortest+0x3e4>)
 800f1d6:	781b      	ldrb	r3, [r3, #0]
 800f1d8:	4619      	mov	r1, r3
 800f1da:	4b1d      	ldr	r3, [pc, #116]	; (800f250 <run_shortest+0x3e8>)
 800f1dc:	f06f 0206 	mvn.w	r2, #6
 800f1e0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800f1e4:	4b19      	ldr	r3, [pc, #100]	; (800f24c <run_shortest+0x3e4>)
 800f1e6:	781b      	ldrb	r3, [r3, #0]
 800f1e8:	3301      	adds	r3, #1
 800f1ea:	4a19      	ldr	r2, [pc, #100]	; (800f250 <run_shortest+0x3e8>)
 800f1ec:	f04f 31ff 	mov.w	r1, #4294967295
 800f1f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800f1f4:	4b15      	ldr	r3, [pc, #84]	; (800f24c <run_shortest+0x3e4>)
 800f1f6:	781b      	ldrb	r3, [r3, #0]
 800f1f8:	3302      	adds	r3, #2
 800f1fa:	4a15      	ldr	r2, [pc, #84]	; (800f250 <run_shortest+0x3e8>)
 800f1fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f200:	4b12      	ldr	r3, [pc, #72]	; (800f24c <run_shortest+0x3e4>)
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	3302      	adds	r3, #2
 800f206:	3a01      	subs	r2, #1
 800f208:	4911      	ldr	r1, [pc, #68]	; (800f250 <run_shortest+0x3e8>)
 800f20a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if (pass[pass_count] == -2 && pass[pass_count - 1] == -3	//左90度大回りの条件
 800f20e:	4b0f      	ldr	r3, [pc, #60]	; (800f24c <run_shortest+0x3e4>)
 800f210:	781b      	ldrb	r3, [r3, #0]
 800f212:	461a      	mov	r2, r3
 800f214:	4b0e      	ldr	r3, [pc, #56]	; (800f250 <run_shortest+0x3e8>)
 800f216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f21a:	f113 0f02 	cmn.w	r3, #2

				) {
		}
//		if(){}
		if (pass[pass_count - 1] == 0) {
 800f21e:	4b0b      	ldr	r3, [pc, #44]	; (800f24c <run_shortest+0x3e4>)
 800f220:	781b      	ldrb	r3, [r3, #0]
 800f222:	3b01      	subs	r3, #1
 800f224:	4a0a      	ldr	r2, [pc, #40]	; (800f250 <run_shortest+0x3e8>)
 800f226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d107      	bne.n	800f23e <run_shortest+0x3d6>
			pass[pass_count - 1] = -1;		//passが0になってしまったときの対策
 800f22e:	4b07      	ldr	r3, [pc, #28]	; (800f24c <run_shortest+0x3e4>)
 800f230:	781b      	ldrb	r3, [r3, #0]
 800f232:	3b01      	subs	r3, #1
 800f234:	4a06      	ldr	r2, [pc, #24]	; (800f250 <run_shortest+0x3e8>)
 800f236:	f04f 31ff 	mov.w	r1, #4294967295
 800f23a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		pass_count++;
 800f23e:	4b03      	ldr	r3, [pc, #12]	; (800f24c <run_shortest+0x3e4>)
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	3301      	adds	r3, #1
 800f244:	b2da      	uxtb	r2, r3
 800f246:	4b01      	ldr	r3, [pc, #4]	; (800f24c <run_shortest+0x3e4>)
 800f248:	701a      	strb	r2, [r3, #0]
		if (pass[pass_count] == 0) {
 800f24a:	e6c0      	b.n	800efce <run_shortest+0x166>
 800f24c:	2000082c 	.word	0x2000082c
 800f250:	20000840 	.word	0x20000840
			break;
 800f254:	bf00      	nop
	}

	pass_count = 1;
 800f256:	4b8c      	ldr	r3, [pc, #560]	; (800f488 <run_shortest+0x620>)
 800f258:	2201      	movs	r2, #1
 800f25a:	701a      	strb	r2, [r3, #0]
	if (slant_mode == 1) {
 800f25c:	7a7b      	ldrb	r3, [r7, #9]
 800f25e:	2b01      	cmp	r3, #1
 800f260:	f040 836a 	bne.w	800f938 <run_shortest+0xad0>
		while (1) {		//斜め入出の圧縮
			if (pass[pass_count] == 0) {
 800f264:	4b88      	ldr	r3, [pc, #544]	; (800f488 <run_shortest+0x620>)
 800f266:	781b      	ldrb	r3, [r3, #0]
 800f268:	461a      	mov	r2, r3
 800f26a:	4b88      	ldr	r3, [pc, #544]	; (800f48c <run_shortest+0x624>)
 800f26c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f270:	2b00      	cmp	r3, #0
 800f272:	f000 81f1 	beq.w	800f658 <run_shortest+0x7f0>
				break;
			}

			if (pass[pass_count - 1] >= 1) {
 800f276:	4b84      	ldr	r3, [pc, #528]	; (800f488 <run_shortest+0x620>)
 800f278:	781b      	ldrb	r3, [r3, #0]
 800f27a:	3b01      	subs	r3, #1
 800f27c:	4a83      	ldr	r2, [pc, #524]	; (800f48c <run_shortest+0x624>)
 800f27e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f282:	2b00      	cmp	r3, #0
 800f284:	f340 81dc 	ble.w	800f640 <run_shortest+0x7d8>
				if (pass[pass_count] == -2 || pass[pass_count] == -3) {
 800f288:	4b7f      	ldr	r3, [pc, #508]	; (800f488 <run_shortest+0x620>)
 800f28a:	781b      	ldrb	r3, [r3, #0]
 800f28c:	461a      	mov	r2, r3
 800f28e:	4b7f      	ldr	r3, [pc, #508]	; (800f48c <run_shortest+0x624>)
 800f290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f294:	f113 0f02 	cmn.w	r3, #2
 800f298:	d009      	beq.n	800f2ae <run_shortest+0x446>
 800f29a:	4b7b      	ldr	r3, [pc, #492]	; (800f488 <run_shortest+0x620>)
 800f29c:	781b      	ldrb	r3, [r3, #0]
 800f29e:	461a      	mov	r2, r3
 800f2a0:	4b7a      	ldr	r3, [pc, #488]	; (800f48c <run_shortest+0x624>)
 800f2a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2a6:	f113 0f03 	cmn.w	r3, #3
 800f2aa:	f040 81c9 	bne.w	800f640 <run_shortest+0x7d8>
//***************************************************************************************入りのモーションstart
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -3) {
 800f2ae:	4b76      	ldr	r3, [pc, #472]	; (800f488 <run_shortest+0x620>)
 800f2b0:	781b      	ldrb	r3, [r3, #0]
 800f2b2:	461a      	mov	r2, r3
 800f2b4:	4b75      	ldr	r3, [pc, #468]	; (800f48c <run_shortest+0x624>)
 800f2b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2ba:	f113 0f02 	cmn.w	r3, #2
 800f2be:	d12d      	bne.n	800f31c <run_shortest+0x4b4>
 800f2c0:	4b71      	ldr	r3, [pc, #452]	; (800f488 <run_shortest+0x620>)
 800f2c2:	781b      	ldrb	r3, [r3, #0]
 800f2c4:	3301      	adds	r3, #1
 800f2c6:	4a71      	ldr	r2, [pc, #452]	; (800f48c <run_shortest+0x624>)
 800f2c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2cc:	f113 0f03 	cmn.w	r3, #3
 800f2d0:	d124      	bne.n	800f31c <run_shortest+0x4b4>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f2d2:	4b6d      	ldr	r3, [pc, #436]	; (800f488 <run_shortest+0x620>)
 800f2d4:	781b      	ldrb	r3, [r3, #0]
 800f2d6:	3b01      	subs	r3, #1
 800f2d8:	4a6c      	ldr	r2, [pc, #432]	; (800f48c <run_shortest+0x624>)
 800f2da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f2de:	4b6a      	ldr	r3, [pc, #424]	; (800f488 <run_shortest+0x620>)
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	3b01      	subs	r3, #1
 800f2e4:	3a01      	subs	r2, #1
 800f2e6:	4969      	ldr	r1, [pc, #420]	; (800f48c <run_shortest+0x624>)
 800f2e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f2ec:	4b66      	ldr	r3, [pc, #408]	; (800f488 <run_shortest+0x620>)
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	3b01      	subs	r3, #1
 800f2f2:	4a66      	ldr	r2, [pc, #408]	; (800f48c <run_shortest+0x624>)
 800f2f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d107      	bne.n	800f30c <run_shortest+0x4a4>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f2fc:	4b62      	ldr	r3, [pc, #392]	; (800f488 <run_shortest+0x620>)
 800f2fe:	781b      	ldrb	r3, [r3, #0]
 800f300:	3b01      	subs	r3, #1
 800f302:	4a62      	ldr	r2, [pc, #392]	; (800f48c <run_shortest+0x624>)
 800f304:	f04f 31ff 	mov.w	r1, #4294967295
 800f308:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -8;		//右45
 800f30c:	4b5e      	ldr	r3, [pc, #376]	; (800f488 <run_shortest+0x620>)
 800f30e:	781b      	ldrb	r3, [r3, #0]
 800f310:	4619      	mov	r1, r3
 800f312:	4b5e      	ldr	r3, [pc, #376]	; (800f48c <run_shortest+0x624>)
 800f314:	f06f 0207 	mvn.w	r2, #7
 800f318:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -2) {
 800f31c:	4b5a      	ldr	r3, [pc, #360]	; (800f488 <run_shortest+0x620>)
 800f31e:	781b      	ldrb	r3, [r3, #0]
 800f320:	461a      	mov	r2, r3
 800f322:	4b5a      	ldr	r3, [pc, #360]	; (800f48c <run_shortest+0x624>)
 800f324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f328:	f113 0f03 	cmn.w	r3, #3
 800f32c:	d12d      	bne.n	800f38a <run_shortest+0x522>
 800f32e:	4b56      	ldr	r3, [pc, #344]	; (800f488 <run_shortest+0x620>)
 800f330:	781b      	ldrb	r3, [r3, #0]
 800f332:	3301      	adds	r3, #1
 800f334:	4a55      	ldr	r2, [pc, #340]	; (800f48c <run_shortest+0x624>)
 800f336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f33a:	f113 0f02 	cmn.w	r3, #2
 800f33e:	d124      	bne.n	800f38a <run_shortest+0x522>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f340:	4b51      	ldr	r3, [pc, #324]	; (800f488 <run_shortest+0x620>)
 800f342:	781b      	ldrb	r3, [r3, #0]
 800f344:	3b01      	subs	r3, #1
 800f346:	4a51      	ldr	r2, [pc, #324]	; (800f48c <run_shortest+0x624>)
 800f348:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f34c:	4b4e      	ldr	r3, [pc, #312]	; (800f488 <run_shortest+0x620>)
 800f34e:	781b      	ldrb	r3, [r3, #0]
 800f350:	3b01      	subs	r3, #1
 800f352:	3a01      	subs	r2, #1
 800f354:	494d      	ldr	r1, [pc, #308]	; (800f48c <run_shortest+0x624>)
 800f356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f35a:	4b4b      	ldr	r3, [pc, #300]	; (800f488 <run_shortest+0x620>)
 800f35c:	781b      	ldrb	r3, [r3, #0]
 800f35e:	3b01      	subs	r3, #1
 800f360:	4a4a      	ldr	r2, [pc, #296]	; (800f48c <run_shortest+0x624>)
 800f362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d107      	bne.n	800f37a <run_shortest+0x512>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f36a:	4b47      	ldr	r3, [pc, #284]	; (800f488 <run_shortest+0x620>)
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	3b01      	subs	r3, #1
 800f370:	4a46      	ldr	r2, [pc, #280]	; (800f48c <run_shortest+0x624>)
 800f372:	f04f 31ff 	mov.w	r1, #4294967295
 800f376:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -9;		//左45
 800f37a:	4b43      	ldr	r3, [pc, #268]	; (800f488 <run_shortest+0x620>)
 800f37c:	781b      	ldrb	r3, [r3, #0]
 800f37e:	4619      	mov	r1, r3
 800f380:	4b42      	ldr	r3, [pc, #264]	; (800f48c <run_shortest+0x624>)
 800f382:	f06f 0208 	mvn.w	r2, #8
 800f386:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -2) {
 800f38a:	4b3f      	ldr	r3, [pc, #252]	; (800f488 <run_shortest+0x620>)
 800f38c:	781b      	ldrb	r3, [r3, #0]
 800f38e:	461a      	mov	r2, r3
 800f390:	4b3e      	ldr	r3, [pc, #248]	; (800f48c <run_shortest+0x624>)
 800f392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f396:	f113 0f02 	cmn.w	r3, #2
 800f39a:	d135      	bne.n	800f408 <run_shortest+0x5a0>
 800f39c:	4b3a      	ldr	r3, [pc, #232]	; (800f488 <run_shortest+0x620>)
 800f39e:	781b      	ldrb	r3, [r3, #0]
 800f3a0:	3301      	adds	r3, #1
 800f3a2:	4a3a      	ldr	r2, [pc, #232]	; (800f48c <run_shortest+0x624>)
 800f3a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3a8:	f113 0f02 	cmn.w	r3, #2
 800f3ac:	d12c      	bne.n	800f408 <run_shortest+0x5a0>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f3ae:	4b36      	ldr	r3, [pc, #216]	; (800f488 <run_shortest+0x620>)
 800f3b0:	781b      	ldrb	r3, [r3, #0]
 800f3b2:	3b01      	subs	r3, #1
 800f3b4:	4a35      	ldr	r2, [pc, #212]	; (800f48c <run_shortest+0x624>)
 800f3b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f3ba:	4b33      	ldr	r3, [pc, #204]	; (800f488 <run_shortest+0x620>)
 800f3bc:	781b      	ldrb	r3, [r3, #0]
 800f3be:	3b01      	subs	r3, #1
 800f3c0:	3a01      	subs	r2, #1
 800f3c2:	4932      	ldr	r1, [pc, #200]	; (800f48c <run_shortest+0x624>)
 800f3c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f3c8:	4b2f      	ldr	r3, [pc, #188]	; (800f488 <run_shortest+0x620>)
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	3b01      	subs	r3, #1
 800f3ce:	4a2f      	ldr	r2, [pc, #188]	; (800f48c <run_shortest+0x624>)
 800f3d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d107      	bne.n	800f3e8 <run_shortest+0x580>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f3d8:	4b2b      	ldr	r3, [pc, #172]	; (800f488 <run_shortest+0x620>)
 800f3da:	781b      	ldrb	r3, [r3, #0]
 800f3dc:	3b01      	subs	r3, #1
 800f3de:	4a2b      	ldr	r2, [pc, #172]	; (800f48c <run_shortest+0x624>)
 800f3e0:	f04f 31ff 	mov.w	r1, #4294967295
 800f3e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -10;		//右135
 800f3e8:	4b27      	ldr	r3, [pc, #156]	; (800f488 <run_shortest+0x620>)
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	4619      	mov	r1, r3
 800f3ee:	4b27      	ldr	r3, [pc, #156]	; (800f48c <run_shortest+0x624>)
 800f3f0:	f06f 0209 	mvn.w	r2, #9
 800f3f4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800f3f8:	4b23      	ldr	r3, [pc, #140]	; (800f488 <run_shortest+0x620>)
 800f3fa:	781b      	ldrb	r3, [r3, #0]
 800f3fc:	3301      	adds	r3, #1
 800f3fe:	4a23      	ldr	r2, [pc, #140]	; (800f48c <run_shortest+0x624>)
 800f400:	f04f 31ff 	mov.w	r1, #4294967295
 800f404:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -3) {
 800f408:	4b1f      	ldr	r3, [pc, #124]	; (800f488 <run_shortest+0x620>)
 800f40a:	781b      	ldrb	r3, [r3, #0]
 800f40c:	461a      	mov	r2, r3
 800f40e:	4b1f      	ldr	r3, [pc, #124]	; (800f48c <run_shortest+0x624>)
 800f410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f414:	f113 0f03 	cmn.w	r3, #3
 800f418:	d140      	bne.n	800f49c <run_shortest+0x634>
 800f41a:	4b1b      	ldr	r3, [pc, #108]	; (800f488 <run_shortest+0x620>)
 800f41c:	781b      	ldrb	r3, [r3, #0]
 800f41e:	3301      	adds	r3, #1
 800f420:	4a1a      	ldr	r2, [pc, #104]	; (800f48c <run_shortest+0x624>)
 800f422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f426:	f113 0f03 	cmn.w	r3, #3
 800f42a:	d137      	bne.n	800f49c <run_shortest+0x634>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f42c:	4b16      	ldr	r3, [pc, #88]	; (800f488 <run_shortest+0x620>)
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	3b01      	subs	r3, #1
 800f432:	4a16      	ldr	r2, [pc, #88]	; (800f48c <run_shortest+0x624>)
 800f434:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f438:	4b13      	ldr	r3, [pc, #76]	; (800f488 <run_shortest+0x620>)
 800f43a:	781b      	ldrb	r3, [r3, #0]
 800f43c:	3b01      	subs	r3, #1
 800f43e:	3a01      	subs	r2, #1
 800f440:	4912      	ldr	r1, [pc, #72]	; (800f48c <run_shortest+0x624>)
 800f442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f446:	4b10      	ldr	r3, [pc, #64]	; (800f488 <run_shortest+0x620>)
 800f448:	781b      	ldrb	r3, [r3, #0]
 800f44a:	3b01      	subs	r3, #1
 800f44c:	4a0f      	ldr	r2, [pc, #60]	; (800f48c <run_shortest+0x624>)
 800f44e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d107      	bne.n	800f466 <run_shortest+0x5fe>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f456:	4b0c      	ldr	r3, [pc, #48]	; (800f488 <run_shortest+0x620>)
 800f458:	781b      	ldrb	r3, [r3, #0]
 800f45a:	3b01      	subs	r3, #1
 800f45c:	4a0b      	ldr	r2, [pc, #44]	; (800f48c <run_shortest+0x624>)
 800f45e:	f04f 31ff 	mov.w	r1, #4294967295
 800f462:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -11;		//左135
 800f466:	4b08      	ldr	r3, [pc, #32]	; (800f488 <run_shortest+0x620>)
 800f468:	781b      	ldrb	r3, [r3, #0]
 800f46a:	4619      	mov	r1, r3
 800f46c:	4b07      	ldr	r3, [pc, #28]	; (800f48c <run_shortest+0x624>)
 800f46e:	f06f 020a 	mvn.w	r2, #10
 800f472:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800f476:	4b04      	ldr	r3, [pc, #16]	; (800f488 <run_shortest+0x620>)
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	3301      	adds	r3, #1
 800f47c:	4a03      	ldr	r2, [pc, #12]	; (800f48c <run_shortest+0x624>)
 800f47e:	f04f 31ff 	mov.w	r1, #4294967295
 800f482:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
//***************************************************************************************入りのモーションend

//***************************************************************************************途中のモーションstart
					while (pass[pass_count] <= -1) {
 800f486:	e009      	b.n	800f49c <run_shortest+0x634>
 800f488:	2000082c 	.word	0x2000082c
 800f48c:	20000840 	.word	0x20000840
						pass_count++;
 800f490:	4b6f      	ldr	r3, [pc, #444]	; (800f650 <run_shortest+0x7e8>)
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	3301      	adds	r3, #1
 800f496:	b2da      	uxtb	r2, r3
 800f498:	4b6d      	ldr	r3, [pc, #436]	; (800f650 <run_shortest+0x7e8>)
 800f49a:	701a      	strb	r2, [r3, #0]
					while (pass[pass_count] <= -1) {
 800f49c:	4b6c      	ldr	r3, [pc, #432]	; (800f650 <run_shortest+0x7e8>)
 800f49e:	781b      	ldrb	r3, [r3, #0]
 800f4a0:	461a      	mov	r2, r3
 800f4a2:	4b6c      	ldr	r3, [pc, #432]	; (800f654 <run_shortest+0x7ec>)
 800f4a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	dbf1      	blt.n	800f490 <run_shortest+0x628>
					}
//***************************************************************************************途中のモーションend

//***************************************************************************************出のモーションstart
					if (pass[pass_count - 1] == -2) {
 800f4ac:	4b68      	ldr	r3, [pc, #416]	; (800f650 <run_shortest+0x7e8>)
 800f4ae:	781b      	ldrb	r3, [r3, #0]
 800f4b0:	3b01      	subs	r3, #1
 800f4b2:	4a68      	ldr	r2, [pc, #416]	; (800f654 <run_shortest+0x7ec>)
 800f4b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4b8:	f113 0f02 	cmn.w	r3, #2
 800f4bc:	d15b      	bne.n	800f576 <run_shortest+0x70e>
						if (pass[pass_count - 2] == -2) {
 800f4be:	4b64      	ldr	r3, [pc, #400]	; (800f650 <run_shortest+0x7e8>)
 800f4c0:	781b      	ldrb	r3, [r3, #0]
 800f4c2:	3b02      	subs	r3, #2
 800f4c4:	4a63      	ldr	r2, [pc, #396]	; (800f654 <run_shortest+0x7ec>)
 800f4c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4ca:	f113 0f02 	cmn.w	r3, #2
 800f4ce:	d12d      	bne.n	800f52c <run_shortest+0x6c4>
							pass[pass_count] = pass[pass_count] - 1;
 800f4d0:	4b5f      	ldr	r3, [pc, #380]	; (800f650 <run_shortest+0x7e8>)
 800f4d2:	781b      	ldrb	r3, [r3, #0]
 800f4d4:	461a      	mov	r2, r3
 800f4d6:	4b5f      	ldr	r3, [pc, #380]	; (800f654 <run_shortest+0x7ec>)
 800f4d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4dc:	4a5c      	ldr	r2, [pc, #368]	; (800f650 <run_shortest+0x7e8>)
 800f4de:	7812      	ldrb	r2, [r2, #0]
 800f4e0:	4611      	mov	r1, r2
 800f4e2:	3b01      	subs	r3, #1
 800f4e4:	4a5b      	ldr	r2, [pc, #364]	; (800f654 <run_shortest+0x7ec>)
 800f4e6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f4ea:	4b59      	ldr	r3, [pc, #356]	; (800f650 <run_shortest+0x7e8>)
 800f4ec:	781b      	ldrb	r3, [r3, #0]
 800f4ee:	461a      	mov	r2, r3
 800f4f0:	4b58      	ldr	r3, [pc, #352]	; (800f654 <run_shortest+0x7ec>)
 800f4f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d107      	bne.n	800f50a <run_shortest+0x6a2>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f4fa:	4b55      	ldr	r3, [pc, #340]	; (800f650 <run_shortest+0x7e8>)
 800f4fc:	781b      	ldrb	r3, [r3, #0]
 800f4fe:	4619      	mov	r1, r3
 800f500:	4b54      	ldr	r3, [pc, #336]	; (800f654 <run_shortest+0x7ec>)
 800f502:	f04f 32ff 	mov.w	r2, #4294967295
 800f506:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -14;		//右135
 800f50a:	4b51      	ldr	r3, [pc, #324]	; (800f650 <run_shortest+0x7e8>)
 800f50c:	781b      	ldrb	r3, [r3, #0]
 800f50e:	3b01      	subs	r3, #1
 800f510:	4a50      	ldr	r2, [pc, #320]	; (800f654 <run_shortest+0x7ec>)
 800f512:	f06f 010d 	mvn.w	r1, #13
 800f516:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 800f51a:	4b4d      	ldr	r3, [pc, #308]	; (800f650 <run_shortest+0x7e8>)
 800f51c:	781b      	ldrb	r3, [r3, #0]
 800f51e:	3b02      	subs	r3, #2
 800f520:	4a4c      	ldr	r2, [pc, #304]	; (800f654 <run_shortest+0x7ec>)
 800f522:	f04f 31ff 	mov.w	r1, #4294967295
 800f526:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f52a:	e024      	b.n	800f576 <run_shortest+0x70e>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 800f52c:	4b48      	ldr	r3, [pc, #288]	; (800f650 <run_shortest+0x7e8>)
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	461a      	mov	r2, r3
 800f532:	4b48      	ldr	r3, [pc, #288]	; (800f654 <run_shortest+0x7ec>)
 800f534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f538:	4a45      	ldr	r2, [pc, #276]	; (800f650 <run_shortest+0x7e8>)
 800f53a:	7812      	ldrb	r2, [r2, #0]
 800f53c:	4611      	mov	r1, r2
 800f53e:	3b01      	subs	r3, #1
 800f540:	4a44      	ldr	r2, [pc, #272]	; (800f654 <run_shortest+0x7ec>)
 800f542:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f546:	4b42      	ldr	r3, [pc, #264]	; (800f650 <run_shortest+0x7e8>)
 800f548:	781b      	ldrb	r3, [r3, #0]
 800f54a:	461a      	mov	r2, r3
 800f54c:	4b41      	ldr	r3, [pc, #260]	; (800f654 <run_shortest+0x7ec>)
 800f54e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d107      	bne.n	800f566 <run_shortest+0x6fe>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f556:	4b3e      	ldr	r3, [pc, #248]	; (800f650 <run_shortest+0x7e8>)
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	4619      	mov	r1, r3
 800f55c:	4b3d      	ldr	r3, [pc, #244]	; (800f654 <run_shortest+0x7ec>)
 800f55e:	f04f 32ff 	mov.w	r2, #4294967295
 800f562:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -12;		//右45
 800f566:	4b3a      	ldr	r3, [pc, #232]	; (800f650 <run_shortest+0x7e8>)
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	3b01      	subs	r3, #1
 800f56c:	4a39      	ldr	r2, [pc, #228]	; (800f654 <run_shortest+0x7ec>)
 800f56e:	f06f 010b 	mvn.w	r1, #11
 800f572:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}

					}
					if (pass[pass_count - 1] == -3) {
 800f576:	4b36      	ldr	r3, [pc, #216]	; (800f650 <run_shortest+0x7e8>)
 800f578:	781b      	ldrb	r3, [r3, #0]
 800f57a:	3b01      	subs	r3, #1
 800f57c:	4a35      	ldr	r2, [pc, #212]	; (800f654 <run_shortest+0x7ec>)
 800f57e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f582:	f113 0f03 	cmn.w	r3, #3
 800f586:	d15b      	bne.n	800f640 <run_shortest+0x7d8>
						if (pass[pass_count - 2] == -3) {
 800f588:	4b31      	ldr	r3, [pc, #196]	; (800f650 <run_shortest+0x7e8>)
 800f58a:	781b      	ldrb	r3, [r3, #0]
 800f58c:	3b02      	subs	r3, #2
 800f58e:	4a31      	ldr	r2, [pc, #196]	; (800f654 <run_shortest+0x7ec>)
 800f590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f594:	f113 0f03 	cmn.w	r3, #3
 800f598:	d12d      	bne.n	800f5f6 <run_shortest+0x78e>
							pass[pass_count] = pass[pass_count] - 1;
 800f59a:	4b2d      	ldr	r3, [pc, #180]	; (800f650 <run_shortest+0x7e8>)
 800f59c:	781b      	ldrb	r3, [r3, #0]
 800f59e:	461a      	mov	r2, r3
 800f5a0:	4b2c      	ldr	r3, [pc, #176]	; (800f654 <run_shortest+0x7ec>)
 800f5a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5a6:	4a2a      	ldr	r2, [pc, #168]	; (800f650 <run_shortest+0x7e8>)
 800f5a8:	7812      	ldrb	r2, [r2, #0]
 800f5aa:	4611      	mov	r1, r2
 800f5ac:	3b01      	subs	r3, #1
 800f5ae:	4a29      	ldr	r2, [pc, #164]	; (800f654 <run_shortest+0x7ec>)
 800f5b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f5b4:	4b26      	ldr	r3, [pc, #152]	; (800f650 <run_shortest+0x7e8>)
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	461a      	mov	r2, r3
 800f5ba:	4b26      	ldr	r3, [pc, #152]	; (800f654 <run_shortest+0x7ec>)
 800f5bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d107      	bne.n	800f5d4 <run_shortest+0x76c>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f5c4:	4b22      	ldr	r3, [pc, #136]	; (800f650 <run_shortest+0x7e8>)
 800f5c6:	781b      	ldrb	r3, [r3, #0]
 800f5c8:	4619      	mov	r1, r3
 800f5ca:	4b22      	ldr	r3, [pc, #136]	; (800f654 <run_shortest+0x7ec>)
 800f5cc:	f04f 32ff 	mov.w	r2, #4294967295
 800f5d0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -15;		//左135
 800f5d4:	4b1e      	ldr	r3, [pc, #120]	; (800f650 <run_shortest+0x7e8>)
 800f5d6:	781b      	ldrb	r3, [r3, #0]
 800f5d8:	3b01      	subs	r3, #1
 800f5da:	4a1e      	ldr	r2, [pc, #120]	; (800f654 <run_shortest+0x7ec>)
 800f5dc:	f06f 010e 	mvn.w	r1, #14
 800f5e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 800f5e4:	4b1a      	ldr	r3, [pc, #104]	; (800f650 <run_shortest+0x7e8>)
 800f5e6:	781b      	ldrb	r3, [r3, #0]
 800f5e8:	3b02      	subs	r3, #2
 800f5ea:	4a1a      	ldr	r2, [pc, #104]	; (800f654 <run_shortest+0x7ec>)
 800f5ec:	f04f 31ff 	mov.w	r1, #4294967295
 800f5f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f5f4:	e024      	b.n	800f640 <run_shortest+0x7d8>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 800f5f6:	4b16      	ldr	r3, [pc, #88]	; (800f650 <run_shortest+0x7e8>)
 800f5f8:	781b      	ldrb	r3, [r3, #0]
 800f5fa:	461a      	mov	r2, r3
 800f5fc:	4b15      	ldr	r3, [pc, #84]	; (800f654 <run_shortest+0x7ec>)
 800f5fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f602:	4a13      	ldr	r2, [pc, #76]	; (800f650 <run_shortest+0x7e8>)
 800f604:	7812      	ldrb	r2, [r2, #0]
 800f606:	4611      	mov	r1, r2
 800f608:	3b01      	subs	r3, #1
 800f60a:	4a12      	ldr	r2, [pc, #72]	; (800f654 <run_shortest+0x7ec>)
 800f60c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f610:	4b0f      	ldr	r3, [pc, #60]	; (800f650 <run_shortest+0x7e8>)
 800f612:	781b      	ldrb	r3, [r3, #0]
 800f614:	461a      	mov	r2, r3
 800f616:	4b0f      	ldr	r3, [pc, #60]	; (800f654 <run_shortest+0x7ec>)
 800f618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d107      	bne.n	800f630 <run_shortest+0x7c8>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f620:	4b0b      	ldr	r3, [pc, #44]	; (800f650 <run_shortest+0x7e8>)
 800f622:	781b      	ldrb	r3, [r3, #0]
 800f624:	4619      	mov	r1, r3
 800f626:	4b0b      	ldr	r3, [pc, #44]	; (800f654 <run_shortest+0x7ec>)
 800f628:	f04f 32ff 	mov.w	r2, #4294967295
 800f62c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -13;		//左45
 800f630:	4b07      	ldr	r3, [pc, #28]	; (800f650 <run_shortest+0x7e8>)
 800f632:	781b      	ldrb	r3, [r3, #0]
 800f634:	3b01      	subs	r3, #1
 800f636:	4a07      	ldr	r2, [pc, #28]	; (800f654 <run_shortest+0x7ec>)
 800f638:	f06f 010c 	mvn.w	r1, #12
 800f63c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//***************************************************************************************出のモーションend
				}
			}
			//		if(){}

			pass_count++;
 800f640:	4b03      	ldr	r3, [pc, #12]	; (800f650 <run_shortest+0x7e8>)
 800f642:	781b      	ldrb	r3, [r3, #0]
 800f644:	3301      	adds	r3, #1
 800f646:	b2da      	uxtb	r2, r3
 800f648:	4b01      	ldr	r3, [pc, #4]	; (800f650 <run_shortest+0x7e8>)
 800f64a:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 800f64c:	e60a      	b.n	800f264 <run_shortest+0x3fc>
 800f64e:	bf00      	nop
 800f650:	2000082c 	.word	0x2000082c
 800f654:	20000840 	.word	0x20000840
				break;
 800f658:	bf00      	nop
		}

		pass_count = 1;
 800f65a:	4ba3      	ldr	r3, [pc, #652]	; (800f8e8 <run_shortest+0xa80>)
 800f65c:	2201      	movs	r2, #1
 800f65e:	701a      	strb	r2, [r3, #0]
		while (1) {		//斜の圧縮
			if (pass[pass_count] == 0) {
 800f660:	4ba1      	ldr	r3, [pc, #644]	; (800f8e8 <run_shortest+0xa80>)
 800f662:	781b      	ldrb	r3, [r3, #0]
 800f664:	461a      	mov	r2, r3
 800f666:	4ba1      	ldr	r3, [pc, #644]	; (800f8ec <run_shortest+0xa84>)
 800f668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	f000 813f 	beq.w	800f8f0 <run_shortest+0xa88>
				break;
			}

			if (pass[pass_count] == -8 || pass[pass_count] == -9
 800f672:	4b9d      	ldr	r3, [pc, #628]	; (800f8e8 <run_shortest+0xa80>)
 800f674:	781b      	ldrb	r3, [r3, #0]
 800f676:	461a      	mov	r2, r3
 800f678:	4b9c      	ldr	r3, [pc, #624]	; (800f8ec <run_shortest+0xa84>)
 800f67a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f67e:	f113 0f08 	cmn.w	r3, #8
 800f682:	d01b      	beq.n	800f6bc <run_shortest+0x854>
 800f684:	4b98      	ldr	r3, [pc, #608]	; (800f8e8 <run_shortest+0xa80>)
 800f686:	781b      	ldrb	r3, [r3, #0]
 800f688:	461a      	mov	r2, r3
 800f68a:	4b98      	ldr	r3, [pc, #608]	; (800f8ec <run_shortest+0xa84>)
 800f68c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f690:	f113 0f09 	cmn.w	r3, #9
 800f694:	d012      	beq.n	800f6bc <run_shortest+0x854>
					|| pass[pass_count] == -10 || pass[pass_count] == -11) {
 800f696:	4b94      	ldr	r3, [pc, #592]	; (800f8e8 <run_shortest+0xa80>)
 800f698:	781b      	ldrb	r3, [r3, #0]
 800f69a:	461a      	mov	r2, r3
 800f69c:	4b93      	ldr	r3, [pc, #588]	; (800f8ec <run_shortest+0xa84>)
 800f69e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6a2:	f113 0f0a 	cmn.w	r3, #10
 800f6a6:	d009      	beq.n	800f6bc <run_shortest+0x854>
 800f6a8:	4b8f      	ldr	r3, [pc, #572]	; (800f8e8 <run_shortest+0xa80>)
 800f6aa:	781b      	ldrb	r3, [r3, #0]
 800f6ac:	461a      	mov	r2, r3
 800f6ae:	4b8f      	ldr	r3, [pc, #572]	; (800f8ec <run_shortest+0xa84>)
 800f6b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6b4:	f113 0f0b 	cmn.w	r3, #11
 800f6b8:	f040 810f 	bne.w	800f8da <run_shortest+0xa72>
				if (pass[pass_count] == -8 || pass[pass_count] == -10) {
 800f6bc:	4b8a      	ldr	r3, [pc, #552]	; (800f8e8 <run_shortest+0xa80>)
 800f6be:	781b      	ldrb	r3, [r3, #0]
 800f6c0:	461a      	mov	r2, r3
 800f6c2:	4b8a      	ldr	r3, [pc, #552]	; (800f8ec <run_shortest+0xa84>)
 800f6c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6c8:	f113 0f08 	cmn.w	r3, #8
 800f6cc:	d008      	beq.n	800f6e0 <run_shortest+0x878>
 800f6ce:	4b86      	ldr	r3, [pc, #536]	; (800f8e8 <run_shortest+0xa80>)
 800f6d0:	781b      	ldrb	r3, [r3, #0]
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	4b85      	ldr	r3, [pc, #532]	; (800f8ec <run_shortest+0xa84>)
 800f6d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6da:	f113 0f0a 	cmn.w	r3, #10
 800f6de:	d102      	bne.n	800f6e6 <run_shortest+0x87e>
					slant_direction = -3;
 800f6e0:	f06f 0302 	mvn.w	r3, #2
 800f6e4:	63bb      	str	r3, [r7, #56]	; 0x38
				}
				if (pass[pass_count] == -9 || pass[pass_count] == -11) {
 800f6e6:	4b80      	ldr	r3, [pc, #512]	; (800f8e8 <run_shortest+0xa80>)
 800f6e8:	781b      	ldrb	r3, [r3, #0]
 800f6ea:	461a      	mov	r2, r3
 800f6ec:	4b7f      	ldr	r3, [pc, #508]	; (800f8ec <run_shortest+0xa84>)
 800f6ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6f2:	f113 0f09 	cmn.w	r3, #9
 800f6f6:	d008      	beq.n	800f70a <run_shortest+0x8a2>
 800f6f8:	4b7b      	ldr	r3, [pc, #492]	; (800f8e8 <run_shortest+0xa80>)
 800f6fa:	781b      	ldrb	r3, [r3, #0]
 800f6fc:	461a      	mov	r2, r3
 800f6fe:	4b7b      	ldr	r3, [pc, #492]	; (800f8ec <run_shortest+0xa84>)
 800f700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f704:	f113 0f0b 	cmn.w	r3, #11
 800f708:	d102      	bne.n	800f710 <run_shortest+0x8a8>
					slant_direction = -2;
 800f70a:	f06f 0301 	mvn.w	r3, #1
 800f70e:	63bb      	str	r3, [r7, #56]	; 0x38
				}
				pass_count++;
 800f710:	4b75      	ldr	r3, [pc, #468]	; (800f8e8 <run_shortest+0xa80>)
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	3301      	adds	r3, #1
 800f716:	b2da      	uxtb	r2, r3
 800f718:	4b73      	ldr	r3, [pc, #460]	; (800f8e8 <run_shortest+0xa80>)
 800f71a:	701a      	strb	r2, [r3, #0]
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800f71c:	4b72      	ldr	r3, [pc, #456]	; (800f8e8 <run_shortest+0xa80>)
 800f71e:	781b      	ldrb	r3, [r3, #0]
 800f720:	461a      	mov	r2, r3
 800f722:	4b72      	ldr	r3, [pc, #456]	; (800f8ec <run_shortest+0xa84>)
 800f724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f72c:	d105      	bne.n	800f73a <run_shortest+0x8d2>
					pass_count++;
 800f72e:	4b6e      	ldr	r3, [pc, #440]	; (800f8e8 <run_shortest+0xa80>)
 800f730:	781b      	ldrb	r3, [r3, #0]
 800f732:	3301      	adds	r3, #1
 800f734:	b2da      	uxtb	r2, r3
 800f736:	4b6c      	ldr	r3, [pc, #432]	; (800f8e8 <run_shortest+0xa80>)
 800f738:	701a      	strb	r2, [r3, #0]
				}
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800f73a:	4b6b      	ldr	r3, [pc, #428]	; (800f8e8 <run_shortest+0xa80>)
 800f73c:	781b      	ldrb	r3, [r3, #0]
 800f73e:	461a      	mov	r2, r3
 800f740:	4b6a      	ldr	r3, [pc, #424]	; (800f8ec <run_shortest+0xa84>)
 800f742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f74a:	d105      	bne.n	800f758 <run_shortest+0x8f0>
					pass_count++;
 800f74c:	4b66      	ldr	r3, [pc, #408]	; (800f8e8 <run_shortest+0xa80>)
 800f74e:	781b      	ldrb	r3, [r3, #0]
 800f750:	3301      	adds	r3, #1
 800f752:	b2da      	uxtb	r2, r3
 800f754:	4b64      	ldr	r3, [pc, #400]	; (800f8e8 <run_shortest+0xa80>)
 800f756:	701a      	strb	r2, [r3, #0]
				}
				if (pass[pass_count] >= -3) {
 800f758:	4b63      	ldr	r3, [pc, #396]	; (800f8e8 <run_shortest+0xa80>)
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	461a      	mov	r2, r3
 800f75e:	4b63      	ldr	r3, [pc, #396]	; (800f8ec <run_shortest+0xa84>)
 800f760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f764:	f113 0f03 	cmn.w	r3, #3
 800f768:	f2c0 80ad 	blt.w	800f8c6 <run_shortest+0xa5e>
					slant_count = pass_count;
 800f76c:	4b5e      	ldr	r3, [pc, #376]	; (800f8e8 <run_shortest+0xa80>)
 800f76e:	781b      	ldrb	r3, [r3, #0]
 800f770:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					pass[slant_count] = 51;
 800f774:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f778:	4a5c      	ldr	r2, [pc, #368]	; (800f8ec <run_shortest+0xa84>)
 800f77a:	2133      	movs	r1, #51	; 0x33
 800f77c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					pass_count++;
 800f780:	4b59      	ldr	r3, [pc, #356]	; (800f8e8 <run_shortest+0xa80>)
 800f782:	781b      	ldrb	r3, [r3, #0]
 800f784:	3301      	adds	r3, #1
 800f786:	b2da      	uxtb	r2, r3
 800f788:	4b57      	ldr	r3, [pc, #348]	; (800f8e8 <run_shortest+0xa80>)
 800f78a:	701a      	strb	r2, [r3, #0]
				}

				//***************************************************************************************途中のモーションstart
				while (pass[pass_count] >= -3) {
 800f78c:	e09b      	b.n	800f8c6 <run_shortest+0xa5e>
					if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800f78e:	4b56      	ldr	r3, [pc, #344]	; (800f8e8 <run_shortest+0xa80>)
 800f790:	781b      	ldrb	r3, [r3, #0]
 800f792:	461a      	mov	r2, r3
 800f794:	4b55      	ldr	r3, [pc, #340]	; (800f8ec <run_shortest+0xa84>)
 800f796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f79a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f79e:	d105      	bne.n	800f7ac <run_shortest+0x944>
						pass_count++;
 800f7a0:	4b51      	ldr	r3, [pc, #324]	; (800f8e8 <run_shortest+0xa80>)
 800f7a2:	781b      	ldrb	r3, [r3, #0]
 800f7a4:	3301      	adds	r3, #1
 800f7a6:	b2da      	uxtb	r2, r3
 800f7a8:	4b4f      	ldr	r3, [pc, #316]	; (800f8e8 <run_shortest+0xa80>)
 800f7aa:	701a      	strb	r2, [r3, #0]
					}
					if (pass[pass_count] == -12 || pass[pass_count] == -13
 800f7ac:	4b4e      	ldr	r3, [pc, #312]	; (800f8e8 <run_shortest+0xa80>)
 800f7ae:	781b      	ldrb	r3, [r3, #0]
 800f7b0:	461a      	mov	r2, r3
 800f7b2:	4b4e      	ldr	r3, [pc, #312]	; (800f8ec <run_shortest+0xa84>)
 800f7b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7b8:	f113 0f0c 	cmn.w	r3, #12
 800f7bc:	f000 808d 	beq.w	800f8da <run_shortest+0xa72>
 800f7c0:	4b49      	ldr	r3, [pc, #292]	; (800f8e8 <run_shortest+0xa80>)
 800f7c2:	781b      	ldrb	r3, [r3, #0]
 800f7c4:	461a      	mov	r2, r3
 800f7c6:	4b49      	ldr	r3, [pc, #292]	; (800f8ec <run_shortest+0xa84>)
 800f7c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7cc:	f113 0f0d 	cmn.w	r3, #13
 800f7d0:	f000 8083 	beq.w	800f8da <run_shortest+0xa72>
							|| pass[pass_count] == -14
 800f7d4:	4b44      	ldr	r3, [pc, #272]	; (800f8e8 <run_shortest+0xa80>)
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	461a      	mov	r2, r3
 800f7da:	4b44      	ldr	r3, [pc, #272]	; (800f8ec <run_shortest+0xa84>)
 800f7dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7e0:	f113 0f0e 	cmn.w	r3, #14
 800f7e4:	d079      	beq.n	800f8da <run_shortest+0xa72>
							|| pass[pass_count] == -15) {
 800f7e6:	4b40      	ldr	r3, [pc, #256]	; (800f8e8 <run_shortest+0xa80>)
 800f7e8:	781b      	ldrb	r3, [r3, #0]
 800f7ea:	461a      	mov	r2, r3
 800f7ec:	4b3f      	ldr	r3, [pc, #252]	; (800f8ec <run_shortest+0xa84>)
 800f7ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7f2:	f113 0f0f 	cmn.w	r3, #15
 800f7f6:	d070      	beq.n	800f8da <run_shortest+0xa72>
						break;
					}
					if (pass[pass_count] == slant_direction) {
 800f7f8:	4b3b      	ldr	r3, [pc, #236]	; (800f8e8 <run_shortest+0xa80>)
 800f7fa:	781b      	ldrb	r3, [r3, #0]
 800f7fc:	461a      	mov	r2, r3
 800f7fe:	4b3b      	ldr	r3, [pc, #236]	; (800f8ec <run_shortest+0xa84>)
 800f800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f804:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f806:	429a      	cmp	r2, r3
 800f808:	d127      	bne.n	800f85a <run_shortest+0x9f2>
						pass[slant_count] = pass[slant_count] - 1;
 800f80a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f80e:	4a37      	ldr	r2, [pc, #220]	; (800f8ec <run_shortest+0xa84>)
 800f810:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f814:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f818:	3a01      	subs	r2, #1
 800f81a:	4934      	ldr	r1, [pc, #208]	; (800f8ec <run_shortest+0xa84>)
 800f81c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						slant_count = pass_count;
 800f820:	4b31      	ldr	r3, [pc, #196]	; (800f8e8 <run_shortest+0xa80>)
 800f822:	781b      	ldrb	r3, [r3, #0]
 800f824:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						if (slant_direction == -2) {
 800f828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f82a:	f113 0f02 	cmn.w	r3, #2
 800f82e:	d107      	bne.n	800f840 <run_shortest+0x9d8>
							pass[pass_count] = -16;
 800f830:	4b2d      	ldr	r3, [pc, #180]	; (800f8e8 <run_shortest+0xa80>)
 800f832:	781b      	ldrb	r3, [r3, #0]
 800f834:	4619      	mov	r1, r3
 800f836:	4b2d      	ldr	r3, [pc, #180]	; (800f8ec <run_shortest+0xa84>)
 800f838:	f06f 020f 	mvn.w	r2, #15
 800f83c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						}
						if (slant_direction == -3) {
 800f840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f842:	f113 0f03 	cmn.w	r3, #3
 800f846:	d138      	bne.n	800f8ba <run_shortest+0xa52>
							pass[pass_count] = -17;
 800f848:	4b27      	ldr	r3, [pc, #156]	; (800f8e8 <run_shortest+0xa80>)
 800f84a:	781b      	ldrb	r3, [r3, #0]
 800f84c:	4619      	mov	r1, r3
 800f84e:	4b27      	ldr	r3, [pc, #156]	; (800f8ec <run_shortest+0xa84>)
 800f850:	f06f 0210 	mvn.w	r2, #16
 800f854:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800f858:	e02f      	b.n	800f8ba <run_shortest+0xa52>
						}

					} else {
						if (pass[slant_count] >= 50) {
 800f85a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f85e:	4a23      	ldr	r2, [pc, #140]	; (800f8ec <run_shortest+0xa84>)
 800f860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f864:	2b31      	cmp	r3, #49	; 0x31
 800f866:	dd08      	ble.n	800f87a <run_shortest+0xa12>
							pass[pass_count] = -1;
 800f868:	4b1f      	ldr	r3, [pc, #124]	; (800f8e8 <run_shortest+0xa80>)
 800f86a:	781b      	ldrb	r3, [r3, #0]
 800f86c:	4619      	mov	r1, r3
 800f86e:	4b1f      	ldr	r3, [pc, #124]	; (800f8ec <run_shortest+0xa84>)
 800f870:	f04f 32ff 	mov.w	r2, #4294967295
 800f874:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800f878:	e009      	b.n	800f88e <run_shortest+0xa26>
						} else {
							slant_count = pass_count;
 800f87a:	4b1b      	ldr	r3, [pc, #108]	; (800f8e8 <run_shortest+0xa80>)
 800f87c:	781b      	ldrb	r3, [r3, #0]
 800f87e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							pass[slant_count] = 50;
 800f882:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f886:	4a19      	ldr	r2, [pc, #100]	; (800f8ec <run_shortest+0xa84>)
 800f888:	2132      	movs	r1, #50	; 0x32
 800f88a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[slant_count] = pass[slant_count] + 1;
 800f88e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f892:	4a16      	ldr	r2, [pc, #88]	; (800f8ec <run_shortest+0xa84>)
 800f894:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f898:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f89c:	3201      	adds	r2, #1
 800f89e:	4913      	ldr	r1, [pc, #76]	; (800f8ec <run_shortest+0xa84>)
 800f8a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (slant_direction == -2) {
 800f8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a6:	f113 0f02 	cmn.w	r3, #2
 800f8aa:	d103      	bne.n	800f8b4 <run_shortest+0xa4c>
							slant_direction = -3;
 800f8ac:	f06f 0302 	mvn.w	r3, #2
 800f8b0:	63bb      	str	r3, [r7, #56]	; 0x38
 800f8b2:	e002      	b.n	800f8ba <run_shortest+0xa52>
						} else {
							slant_direction = -2;
 800f8b4:	f06f 0301 	mvn.w	r3, #1
 800f8b8:	63bb      	str	r3, [r7, #56]	; 0x38
						}

					}

					pass_count++;
 800f8ba:	4b0b      	ldr	r3, [pc, #44]	; (800f8e8 <run_shortest+0xa80>)
 800f8bc:	781b      	ldrb	r3, [r3, #0]
 800f8be:	3301      	adds	r3, #1
 800f8c0:	b2da      	uxtb	r2, r3
 800f8c2:	4b09      	ldr	r3, [pc, #36]	; (800f8e8 <run_shortest+0xa80>)
 800f8c4:	701a      	strb	r2, [r3, #0]
				while (pass[pass_count] >= -3) {
 800f8c6:	4b08      	ldr	r3, [pc, #32]	; (800f8e8 <run_shortest+0xa80>)
 800f8c8:	781b      	ldrb	r3, [r3, #0]
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	4b07      	ldr	r3, [pc, #28]	; (800f8ec <run_shortest+0xa84>)
 800f8ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8d2:	f113 0f03 	cmn.w	r3, #3
 800f8d6:	f6bf af5a 	bge.w	800f78e <run_shortest+0x926>

			}

			//		if(){}

			pass_count++;
 800f8da:	4b03      	ldr	r3, [pc, #12]	; (800f8e8 <run_shortest+0xa80>)
 800f8dc:	781b      	ldrb	r3, [r3, #0]
 800f8de:	3301      	adds	r3, #1
 800f8e0:	b2da      	uxtb	r2, r3
 800f8e2:	4b01      	ldr	r3, [pc, #4]	; (800f8e8 <run_shortest+0xa80>)
 800f8e4:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 800f8e6:	e6bb      	b.n	800f660 <run_shortest+0x7f8>
 800f8e8:	2000082c 	.word	0x2000082c
 800f8ec:	20000840 	.word	0x20000840
				break;
 800f8f0:	bf00      	nop
		}
		pass_count=0;
 800f8f2:	4bb3      	ldr	r3, [pc, #716]	; (800fbc0 <run_shortest+0xd58>)
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	701a      	strb	r2, [r3, #0]
		while (1) {		//パス圧縮

			if (pass[pass_count] == 50) {
 800f8f8:	4bb1      	ldr	r3, [pc, #708]	; (800fbc0 <run_shortest+0xd58>)
 800f8fa:	781b      	ldrb	r3, [r3, #0]
 800f8fc:	461a      	mov	r2, r3
 800f8fe:	4bb1      	ldr	r3, [pc, #708]	; (800fbc4 <run_shortest+0xd5c>)
 800f900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f904:	2b32      	cmp	r3, #50	; 0x32
 800f906:	d107      	bne.n	800f918 <run_shortest+0xab0>
				pass[pass_count] =-1;
 800f908:	4bad      	ldr	r3, [pc, #692]	; (800fbc0 <run_shortest+0xd58>)
 800f90a:	781b      	ldrb	r3, [r3, #0]
 800f90c:	4619      	mov	r1, r3
 800f90e:	4bad      	ldr	r3, [pc, #692]	; (800fbc4 <run_shortest+0xd5c>)
 800f910:	f04f 32ff 	mov.w	r2, #4294967295
 800f914:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

			}
			if (pass[pass_count] == 0) {
 800f918:	4ba9      	ldr	r3, [pc, #676]	; (800fbc0 <run_shortest+0xd58>)
 800f91a:	781b      	ldrb	r3, [r3, #0]
 800f91c:	461a      	mov	r2, r3
 800f91e:	4ba9      	ldr	r3, [pc, #676]	; (800fbc4 <run_shortest+0xd5c>)
 800f920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d006      	beq.n	800f936 <run_shortest+0xace>
				break;
			}
			pass_count++;
 800f928:	4ba5      	ldr	r3, [pc, #660]	; (800fbc0 <run_shortest+0xd58>)
 800f92a:	781b      	ldrb	r3, [r3, #0]
 800f92c:	3301      	adds	r3, #1
 800f92e:	b2da      	uxtb	r2, r3
 800f930:	4ba3      	ldr	r3, [pc, #652]	; (800fbc0 <run_shortest+0xd58>)
 800f932:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 50) {
 800f934:	e7e0      	b.n	800f8f8 <run_shortest+0xa90>
				break;
 800f936:	bf00      	nop
		}

	}
}
	int j = 0;
 800f938:	2300      	movs	r3, #0
 800f93a:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pass[j] != 0) {
 800f93c:	e00b      	b.n	800f956 <run_shortest+0xaee>
		printf("pass_count %d pass %d\n", j, pass[j]);
 800f93e:	4aa1      	ldr	r2, [pc, #644]	; (800fbc4 <run_shortest+0xd5c>)
 800f940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f946:	461a      	mov	r2, r3
 800f948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f94a:	489f      	ldr	r0, [pc, #636]	; (800fbc8 <run_shortest+0xd60>)
 800f94c:	f011 f810 	bl	8020970 <iprintf>
		j++;
 800f950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f952:	3301      	adds	r3, #1
 800f954:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pass[j] != 0) {
 800f956:	4a9b      	ldr	r2, [pc, #620]	; (800fbc4 <run_shortest+0xd5c>)
 800f958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f95a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d1ed      	bne.n	800f93e <run_shortest+0xad6>
	}
	int pass_count2;
	pass_count2=0;
 800f962:	2300      	movs	r3, #0
 800f964:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800f966:	e002      	b.n	800f96e <run_shortest+0xb06>
		pass_count2++;
 800f968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f96a:	3301      	adds	r3, #1
 800f96c:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800f96e:	4a95      	ldr	r2, [pc, #596]	; (800fbc4 <run_shortest+0xd5c>)
 800f970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f97a:	d0f5      	beq.n	800f968 <run_shortest+0xb00>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800f97c:	4a91      	ldr	r2, [pc, #580]	; (800fbc4 <run_shortest+0xd5c>)
 800f97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f984:	934e      	str	r3, [sp, #312]	; 0x138
 800f986:	4668      	mov	r0, sp
 800f988:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f98c:	f44f 729c 	mov.w	r2, #312	; 0x138
 800f990:	4619      	mov	r1, r3
 800f992:	f010 fb6d 	bl	8020070 <memcpy>
 800f996:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f99a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f99c:	f007 ffb2 	bl	8017904 <get_center_velocity>
 800f9a0:	ed87 0a08 	vstr	s0, [r7, #32]
	printf("%d,%f\n",pass_count2, end_velocity);
 800f9a4:	6a38      	ldr	r0, [r7, #32]
 800f9a6:	f7f0 fdf7 	bl	8000598 <__aeabi_f2d>
 800f9aa:	4602      	mov	r2, r0
 800f9ac:	460b      	mov	r3, r1
 800f9ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f9b0:	4886      	ldr	r0, [pc, #536]	; (800fbcc <run_shortest+0xd64>)
 800f9b2:	f010 ffdd 	bl	8020970 <iprintf>

	HAL_Delay(500);
 800f9b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f9ba:	f009 f887 	bl	8018acc <HAL_Delay>
	pl_DriveMotor_standby(ON);
 800f9be:	2001      	movs	r0, #1
 800f9c0:	f7f8 f9be 	bl	8007d40 <pl_DriveMotor_standby>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800f9c4:	2003      	movs	r0, #3
 800f9c6:	f7f8 f9ed 	bl	8007da4 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800f9ca:	2003      	movs	r0, #3
 800f9cc:	f7f8 f9c2 	bl	8007d54 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800f9d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f9d4:	f7f8 fce4 	bl	80083a0 <wait_ms_NoReset>
	no_safty = 1;
 800f9d8:	4b7d      	ldr	r3, [pc, #500]	; (800fbd0 <run_shortest+0xd68>)
 800f9da:	2201      	movs	r2, #1
 800f9dc:	701a      	strb	r2, [r3, #0]
	no_safty = 0;
 800f9de:	4b7c      	ldr	r3, [pc, #496]	; (800fbd0 <run_shortest+0xd68>)
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	701a      	strb	r2, [r3, #0]
	clear_Ierror();
 800f9e4:	f7f5 f818 	bl	8004a18 <clear_Ierror>
	////wall_control_mode = 1;
	if (fun_mode == 1) {
 800f9e8:	7abb      	ldrb	r3, [r7, #10]
 800f9ea:	2b01      	cmp	r3, #1
 800f9ec:	d12d      	bne.n	800fa4a <run_shortest+0xbe2>
		pl_FunMotor_duty(fun_ratio*BATT_MAX/g_V_battery_mean);
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f7f0 fdd2 	bl	8000598 <__aeabi_f2d>
 800f9f4:	a370      	add	r3, pc, #448	; (adr r3, 800fbb8 <run_shortest+0xd50>)
 800f9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9fa:	f7f0 fe25 	bl	8000648 <__aeabi_dmul>
 800f9fe:	4602      	mov	r2, r0
 800fa00:	460b      	mov	r3, r1
 800fa02:	4614      	mov	r4, r2
 800fa04:	461d      	mov	r5, r3
 800fa06:	4b73      	ldr	r3, [pc, #460]	; (800fbd4 <run_shortest+0xd6c>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7f0 fdc4 	bl	8000598 <__aeabi_f2d>
 800fa10:	4602      	mov	r2, r0
 800fa12:	460b      	mov	r3, r1
 800fa14:	4620      	mov	r0, r4
 800fa16:	4629      	mov	r1, r5
 800fa18:	f7f0 ff40 	bl	800089c <__aeabi_ddiv>
 800fa1c:	4602      	mov	r2, r0
 800fa1e:	460b      	mov	r3, r1
 800fa20:	4610      	mov	r0, r2
 800fa22:	4619      	mov	r1, r3
 800fa24:	f7f1 f8e8 	bl	8000bf8 <__aeabi_d2f>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	ee00 3a10 	vmov	s0, r3
 800fa2e:	f7f8 fa25 	bl	8007e7c <pl_FunMotor_duty>
		pl_FunMotor_start();
 800fa32:	f7f8 fa0f 	bl	8007e54 <pl_FunMotor_start>
		HAL_Delay(600);
 800fa36:	f44f 7016 	mov.w	r0, #600	; 0x258
 800fa3a:	f009 f847 	bl	8018acc <HAL_Delay>
		reset_gyro();
 800fa3e:	f7f2 f8b3 	bl	8001ba8 <reset_gyro>
		reset_speed();
 800fa42:	f7f1 faef 	bl	8001024 <reset_speed>
		clear_Ierror();
 800fa46:	f7f4 ffe7 	bl	8004a18 <clear_Ierror>
//				pl_FunMotor_duty(160);
//		pl_FunMotor_start();
//						HAL_Delay(2000);	//候補1

	}
	maze_mode = 1;
 800fa4a:	4b63      	ldr	r3, [pc, #396]	; (800fbd8 <run_shortest+0xd70>)
 800fa4c:	2201      	movs	r2, #1
 800fa4e:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 1;
 800fa50:	4b62      	ldr	r3, [pc, #392]	; (800fbdc <run_shortest+0xd74>)
 800fa52:	2201      	movs	r2, #1
 800fa54:	701a      	strb	r2, [r3, #0]
//	record_mode=14;
	record_mode=18;
 800fa56:	4b62      	ldr	r3, [pc, #392]	; (800fbe0 <run_shortest+0xd78>)
 800fa58:	2212      	movs	r2, #18
 800fa5a:	701a      	strb	r2, [r3, #0]
//	encoder_PID_error=2500;
//	gyro_PID_error=1800;
	wall_control = 0;
 800fa5c:	4b61      	ldr	r3, [pc, #388]	; (800fbe4 <run_shortest+0xd7c>)
 800fa5e:	2200      	movs	r2, #0
 800fa60:	601a      	str	r2, [r3, #0]
	pass_count = 0;
 800fa62:	4b57      	ldr	r3, [pc, #348]	; (800fbc0 <run_shortest+0xd58>)
 800fa64:	2200      	movs	r2, #0
 800fa66:	701a      	strb	r2, [r3, #0]


	mode.WallControlMode=1;
 800fa68:	2301      	movs	r3, #1
 800fa6a:	763b      	strb	r3, [r7, #24]
	mode.WallControlStatus=0;
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	767b      	strb	r3, [r7, #25]
	mode.calMazeMode=0;
 800fa70:	2300      	movs	r3, #0
 800fa72:	76bb      	strb	r3, [r7, #26]
	mode.WallCutMode=0;
 800fa74:	2300      	movs	r3, #0
 800fa76:	76fb      	strb	r3, [r7, #27]
	pass_count2=0;
 800fa78:	2300      	movs	r3, #0
 800fa7a:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fa7c:	e002      	b.n	800fa84 <run_shortest+0xc1c>
		pass_count2++;
 800fa7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa80:	3301      	adds	r3, #1
 800fa82:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fa84:	4a4f      	ldr	r2, [pc, #316]	; (800fbc4 <run_shortest+0xd5c>)
 800fa86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa90:	d0f5      	beq.n	800fa7e <run_shortest+0xc16>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800fa92:	4a4c      	ldr	r2, [pc, #304]	; (800fbc4 <run_shortest+0xd5c>)
 800fa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa9a:	934e      	str	r3, [sp, #312]	; 0x138
 800fa9c:	4668      	mov	r0, sp
 800fa9e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800faa2:	f44f 729c 	mov.w	r2, #312	; 0x138
 800faa6:	4619      	mov	r1, r3
 800faa8:	f010 fae2 	bl	8020070 <memcpy>
 800faac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fab0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fab2:	f007 ff27 	bl	8017904 <get_center_velocity>
 800fab6:	ed87 0a08 	vstr	s0, [r7, #32]
	straight_table2(BACK_TO_CENTER_FRONT,0,end_velocity,end_velocity,end_velocity*end_velocity/ BACK_TO_CENTER_FRONT/2, mode);
 800faba:	edd7 7a08 	vldr	s15, [r7, #32]
 800fabe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fac2:	ee17 0a90 	vmov	r0, s15
 800fac6:	f7f0 fd67 	bl	8000598 <__aeabi_f2d>
 800faca:	f04f 0200 	mov.w	r2, #0
 800face:	4b46      	ldr	r3, [pc, #280]	; (800fbe8 <run_shortest+0xd80>)
 800fad0:	f7f0 fee4 	bl	800089c <__aeabi_ddiv>
 800fad4:	4602      	mov	r2, r0
 800fad6:	460b      	mov	r3, r1
 800fad8:	4610      	mov	r0, r2
 800fada:	4619      	mov	r1, r3
 800fadc:	f04f 0200 	mov.w	r2, #0
 800fae0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fae4:	f7f0 feda 	bl	800089c <__aeabi_ddiv>
 800fae8:	4602      	mov	r2, r0
 800faea:	460b      	mov	r3, r1
 800faec:	4610      	mov	r0, r2
 800faee:	4619      	mov	r1, r3
 800faf0:	f7f1 f882 	bl	8000bf8 <__aeabi_d2f>
 800faf4:	4603      	mov	r3, r0
 800faf6:	69b8      	ldr	r0, [r7, #24]
 800faf8:	ee02 3a10 	vmov	s4, r3
 800fafc:	edd7 1a08 	vldr	s3, [r7, #32]
 800fb00:	ed97 1a08 	vldr	s2, [r7, #32]
 800fb04:	eddf 0a39 	vldr	s1, [pc, #228]	; 800fbec <run_shortest+0xd84>
 800fb08:	eeb2 0a09 	vmov.f32	s0, #41	; 0x41480000  12.5
 800fb0c:	f7f3 fc86 	bl	800341c <straight_table2>


	while (pass_count <= 255) {
		pass_count2=pass_count+1;
 800fb10:	4b2b      	ldr	r3, [pc, #172]	; (800fbc0 <run_shortest+0xd58>)
 800fb12:	781b      	ldrb	r3, [r3, #0]
 800fb14:	3301      	adds	r3, #1
 800fb16:	627b      	str	r3, [r7, #36]	; 0x24
		while(pass[pass_count2] == -1){
 800fb18:	e002      	b.n	800fb20 <run_shortest+0xcb8>
			pass_count2++;
 800fb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb1c:	3301      	adds	r3, #1
 800fb1e:	627b      	str	r3, [r7, #36]	; 0x24
		while(pass[pass_count2] == -1){
 800fb20:	4a28      	ldr	r2, [pc, #160]	; (800fbc4 <run_shortest+0xd5c>)
 800fb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb2c:	d0f5      	beq.n	800fb1a <run_shortest+0xcb2>
		}
		end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800fb2e:	4a25      	ldr	r2, [pc, #148]	; (800fbc4 <run_shortest+0xd5c>)
 800fb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb36:	934e      	str	r3, [sp, #312]	; 0x138
 800fb38:	4668      	mov	r0, sp
 800fb3a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fb3e:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fb42:	4619      	mov	r1, r3
 800fb44:	f010 fa94 	bl	8020070 <memcpy>
 800fb48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fb4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fb4e:	f007 fed9 	bl	8017904 <get_center_velocity>
 800fb52:	ed87 0a08 	vstr	s0, [r7, #32]

		if (pass[pass_count] == -1) {
 800fb56:	4b1a      	ldr	r3, [pc, #104]	; (800fbc0 <run_shortest+0xd58>)
 800fb58:	781b      	ldrb	r3, [r3, #0]
 800fb5a:	461a      	mov	r2, r3
 800fb5c:	4b19      	ldr	r3, [pc, #100]	; (800fbc4 <run_shortest+0xd5c>)
 800fb5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb66:	d106      	bne.n	800fb76 <run_shortest+0xd0e>
			pass_count++;
 800fb68:	4b15      	ldr	r3, [pc, #84]	; (800fbc0 <run_shortest+0xd58>)
 800fb6a:	781b      	ldrb	r3, [r3, #0]
 800fb6c:	3301      	adds	r3, #1
 800fb6e:	b2da      	uxtb	r2, r3
 800fb70:	4b13      	ldr	r3, [pc, #76]	; (800fbc0 <run_shortest+0xd58>)
 800fb72:	701a      	strb	r2, [r3, #0]
 800fb74:	e2a1      	b.n	80100ba <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -2) {
 800fb76:	4b12      	ldr	r3, [pc, #72]	; (800fbc0 <run_shortest+0xd58>)
 800fb78:	781b      	ldrb	r3, [r3, #0]
 800fb7a:	461a      	mov	r2, r3
 800fb7c:	4b11      	ldr	r3, [pc, #68]	; (800fbc4 <run_shortest+0xd5c>)
 800fb7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb82:	f113 0f02 	cmn.w	r3, #2
 800fb86:	d133      	bne.n	800fbf0 <run_shortest+0xd88>

			slalomR(howspeed.slalom_R, OFF,SHORTEST,mollifier_mode,end_velocity);
 800fb88:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fb8c:	9303      	str	r3, [sp, #12]
 800fb8e:	2301      	movs	r3, #1
 800fb90:	9302      	str	r3, [sp, #8]
 800fb92:	2300      	movs	r3, #0
 800fb94:	9301      	str	r3, [sp, #4]
 800fb96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb98:	9300      	str	r3, [sp, #0]
 800fb9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fb9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fba0:	ed97 0a08 	vldr	s0, [r7, #32]
 800fba4:	f7fa f818 	bl	8009bd8 <slalomR>

			pass_count++;
 800fba8:	4b05      	ldr	r3, [pc, #20]	; (800fbc0 <run_shortest+0xd58>)
 800fbaa:	781b      	ldrb	r3, [r3, #0]
 800fbac:	3301      	adds	r3, #1
 800fbae:	b2da      	uxtb	r2, r3
 800fbb0:	4b03      	ldr	r3, [pc, #12]	; (800fbc0 <run_shortest+0xd58>)
 800fbb2:	701a      	strb	r2, [r3, #0]
 800fbb4:	e281      	b.n	80100ba <run_shortest+0x1252>
 800fbb6:	bf00      	nop
 800fbb8:	cccccccd 	.word	0xcccccccd
 800fbbc:	4010cccc 	.word	0x4010cccc
 800fbc0:	2000082c 	.word	0x2000082c
 800fbc4:	20000840 	.word	0x20000840
 800fbc8:	080243cc 	.word	0x080243cc
 800fbcc:	080243e4 	.word	0x080243e4
 800fbd0:	2000080a 	.word	0x2000080a
 800fbd4:	200004d8 	.word	0x200004d8
 800fbd8:	20000838 	.word	0x20000838
 800fbdc:	2000080c 	.word	0x2000080c
 800fbe0:	2000edc4 	.word	0x2000edc4
 800fbe4:	20000834 	.word	0x20000834
 800fbe8:	40290000 	.word	0x40290000
 800fbec:	00000000 	.word	0x00000000
		}
		else if (pass[pass_count] == -3) {
 800fbf0:	4baa      	ldr	r3, [pc, #680]	; (800fe9c <run_shortest+0x1034>)
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	461a      	mov	r2, r3
 800fbf6:	4baa      	ldr	r3, [pc, #680]	; (800fea0 <run_shortest+0x1038>)
 800fbf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbfc:	f113 0f03 	cmn.w	r3, #3
 800fc00:	d116      	bne.n	800fc30 <run_shortest+0xdc8>

			slalomL(howspeed.slalom_L, OFF,SHORTEST,mollifier_mode,end_velocity);
 800fc02:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fc06:	9303      	str	r3, [sp, #12]
 800fc08:	2301      	movs	r3, #1
 800fc0a:	9302      	str	r3, [sp, #8]
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	9301      	str	r3, [sp, #4]
 800fc10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fc12:	9300      	str	r3, [sp, #0]
 800fc14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800fc18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fc1a:	ed97 0a08 	vldr	s0, [r7, #32]
 800fc1e:	f7fa f9c1 	bl	8009fa4 <slalomL>

			pass_count++;
 800fc22:	4b9e      	ldr	r3, [pc, #632]	; (800fe9c <run_shortest+0x1034>)
 800fc24:	781b      	ldrb	r3, [r3, #0]
 800fc26:	3301      	adds	r3, #1
 800fc28:	b2da      	uxtb	r2, r3
 800fc2a:	4b9c      	ldr	r3, [pc, #624]	; (800fe9c <run_shortest+0x1034>)
 800fc2c:	701a      	strb	r2, [r3, #0]
 800fc2e:	e244      	b.n	80100ba <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -4) {
 800fc30:	4b9a      	ldr	r3, [pc, #616]	; (800fe9c <run_shortest+0x1034>)
 800fc32:	781b      	ldrb	r3, [r3, #0]
 800fc34:	461a      	mov	r2, r3
 800fc36:	4b9a      	ldr	r3, [pc, #616]	; (800fea0 <run_shortest+0x1038>)
 800fc38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc3c:	f113 0f04 	cmn.w	r3, #4
 800fc40:	d115      	bne.n	800fc6e <run_shortest+0xe06>
			turn90R(howspeed.turn90_R, OFF,mollifier_mode,end_velocity);
 800fc42:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fc46:	9302      	str	r3, [sp, #8]
 800fc48:	2300      	movs	r3, #0
 800fc4a:	9301      	str	r3, [sp, #4]
 800fc4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fc50:	9300      	str	r3, [sp, #0]
 800fc52:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800fc56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fc58:	ed97 0a08 	vldr	s0, [r7, #32]
 800fc5c:	f7fa fb84 	bl	800a368 <turn90R>
			pass_count++;
 800fc60:	4b8e      	ldr	r3, [pc, #568]	; (800fe9c <run_shortest+0x1034>)
 800fc62:	781b      	ldrb	r3, [r3, #0]
 800fc64:	3301      	adds	r3, #1
 800fc66:	b2da      	uxtb	r2, r3
 800fc68:	4b8c      	ldr	r3, [pc, #560]	; (800fe9c <run_shortest+0x1034>)
 800fc6a:	701a      	strb	r2, [r3, #0]
 800fc6c:	e225      	b.n	80100ba <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -5) {
 800fc6e:	4b8b      	ldr	r3, [pc, #556]	; (800fe9c <run_shortest+0x1034>)
 800fc70:	781b      	ldrb	r3, [r3, #0]
 800fc72:	461a      	mov	r2, r3
 800fc74:	4b8a      	ldr	r3, [pc, #552]	; (800fea0 <run_shortest+0x1038>)
 800fc76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc7a:	f113 0f05 	cmn.w	r3, #5
 800fc7e:	d115      	bne.n	800fcac <run_shortest+0xe44>
			turn90L(howspeed.turn90_L, OFF,mollifier_mode,end_velocity);
 800fc80:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fc84:	9302      	str	r3, [sp, #8]
 800fc86:	2300      	movs	r3, #0
 800fc88:	9301      	str	r3, [sp, #4]
 800fc8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fc8e:	9300      	str	r3, [sp, #0]
 800fc90:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800fc94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fc96:	ed97 0a08 	vldr	s0, [r7, #32]
 800fc9a:	f7fa fccf 	bl	800a63c <turn90L>
			pass_count++;
 800fc9e:	4b7f      	ldr	r3, [pc, #508]	; (800fe9c <run_shortest+0x1034>)
 800fca0:	781b      	ldrb	r3, [r3, #0]
 800fca2:	3301      	adds	r3, #1
 800fca4:	b2da      	uxtb	r2, r3
 800fca6:	4b7d      	ldr	r3, [pc, #500]	; (800fe9c <run_shortest+0x1034>)
 800fca8:	701a      	strb	r2, [r3, #0]
 800fcaa:	e206      	b.n	80100ba <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -6) {
 800fcac:	4b7b      	ldr	r3, [pc, #492]	; (800fe9c <run_shortest+0x1034>)
 800fcae:	781b      	ldrb	r3, [r3, #0]
 800fcb0:	461a      	mov	r2, r3
 800fcb2:	4b7b      	ldr	r3, [pc, #492]	; (800fea0 <run_shortest+0x1038>)
 800fcb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcb8:	f113 0f06 	cmn.w	r3, #6
 800fcbc:	d115      	bne.n	800fcea <run_shortest+0xe82>
			turn180R(howspeed.turn180_R, OFF,mollifier_mode,end_velocity);
 800fcbe:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fcc2:	9302      	str	r3, [sp, #8]
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	9301      	str	r3, [sp, #4]
 800fcc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fccc:	9300      	str	r3, [sp, #0]
 800fcce:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800fcd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fcd4:	ed97 0a08 	vldr	s0, [r7, #32]
 800fcd8:	f7fa fe14 	bl	800a904 <turn180R>
			pass_count++;
 800fcdc:	4b6f      	ldr	r3, [pc, #444]	; (800fe9c <run_shortest+0x1034>)
 800fcde:	781b      	ldrb	r3, [r3, #0]
 800fce0:	3301      	adds	r3, #1
 800fce2:	b2da      	uxtb	r2, r3
 800fce4:	4b6d      	ldr	r3, [pc, #436]	; (800fe9c <run_shortest+0x1034>)
 800fce6:	701a      	strb	r2, [r3, #0]
 800fce8:	e1e7      	b.n	80100ba <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -7) {
 800fcea:	4b6c      	ldr	r3, [pc, #432]	; (800fe9c <run_shortest+0x1034>)
 800fcec:	781b      	ldrb	r3, [r3, #0]
 800fcee:	461a      	mov	r2, r3
 800fcf0:	4b6b      	ldr	r3, [pc, #428]	; (800fea0 <run_shortest+0x1038>)
 800fcf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcf6:	f113 0f07 	cmn.w	r3, #7
 800fcfa:	d115      	bne.n	800fd28 <run_shortest+0xec0>
			turn180L(howspeed.turn180_L, OFF,mollifier_mode,end_velocity);
 800fcfc:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fd00:	9302      	str	r3, [sp, #8]
 800fd02:	2300      	movs	r3, #0
 800fd04:	9301      	str	r3, [sp, #4]
 800fd06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800fd0a:	9300      	str	r3, [sp, #0]
 800fd0c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800fd10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fd12:	ed97 0a08 	vldr	s0, [r7, #32]
 800fd16:	f7fa ff5f 	bl	800abd8 <turn180L>
			pass_count++;
 800fd1a:	4b60      	ldr	r3, [pc, #384]	; (800fe9c <run_shortest+0x1034>)
 800fd1c:	781b      	ldrb	r3, [r3, #0]
 800fd1e:	3301      	adds	r3, #1
 800fd20:	b2da      	uxtb	r2, r3
 800fd22:	4b5e      	ldr	r3, [pc, #376]	; (800fe9c <run_shortest+0x1034>)
 800fd24:	701a      	strb	r2, [r3, #0]
 800fd26:	e1c8      	b.n	80100ba <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -8) { //入り45R
 800fd28:	4b5c      	ldr	r3, [pc, #368]	; (800fe9c <run_shortest+0x1034>)
 800fd2a:	781b      	ldrb	r3, [r3, #0]
 800fd2c:	461a      	mov	r2, r3
 800fd2e:	4b5c      	ldr	r3, [pc, #368]	; (800fea0 <run_shortest+0x1038>)
 800fd30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd34:	f113 0f08 	cmn.w	r3, #8
 800fd38:	d115      	bne.n	800fd66 <run_shortest+0xefe>
			turn45inR(howspeed.turn45in_R, OFF,mollifier_mode,end_velocity);
 800fd3a:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fd3e:	9302      	str	r3, [sp, #8]
 800fd40:	2300      	movs	r3, #0
 800fd42:	9301      	str	r3, [sp, #4]
 800fd44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fd48:	9300      	str	r3, [sp, #0]
 800fd4a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800fd4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fd50:	ed97 0a08 	vldr	s0, [r7, #32]
 800fd54:	f7fb f8a8 	bl	800aea8 <turn45inR>
			pass_count++;
 800fd58:	4b50      	ldr	r3, [pc, #320]	; (800fe9c <run_shortest+0x1034>)
 800fd5a:	781b      	ldrb	r3, [r3, #0]
 800fd5c:	3301      	adds	r3, #1
 800fd5e:	b2da      	uxtb	r2, r3
 800fd60:	4b4e      	ldr	r3, [pc, #312]	; (800fe9c <run_shortest+0x1034>)
 800fd62:	701a      	strb	r2, [r3, #0]
 800fd64:	e1a9      	b.n	80100ba <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -9) { //入り45L
 800fd66:	4b4d      	ldr	r3, [pc, #308]	; (800fe9c <run_shortest+0x1034>)
 800fd68:	781b      	ldrb	r3, [r3, #0]
 800fd6a:	461a      	mov	r2, r3
 800fd6c:	4b4c      	ldr	r3, [pc, #304]	; (800fea0 <run_shortest+0x1038>)
 800fd6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd72:	f113 0f09 	cmn.w	r3, #9
 800fd76:	d115      	bne.n	800fda4 <run_shortest+0xf3c>
			turn45inL(howspeed.turn45in_L, OFF,mollifier_mode,end_velocity);
 800fd78:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fd7c:	9302      	str	r3, [sp, #8]
 800fd7e:	2300      	movs	r3, #0
 800fd80:	9301      	str	r3, [sp, #4]
 800fd82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fd86:	9300      	str	r3, [sp, #0]
 800fd88:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800fd8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fd8e:	ed97 0a08 	vldr	s0, [r7, #32]
 800fd92:	f7fb fad1 	bl	800b338 <turn45inL>
			pass_count++;
 800fd96:	4b41      	ldr	r3, [pc, #260]	; (800fe9c <run_shortest+0x1034>)
 800fd98:	781b      	ldrb	r3, [r3, #0]
 800fd9a:	3301      	adds	r3, #1
 800fd9c:	b2da      	uxtb	r2, r3
 800fd9e:	4b3f      	ldr	r3, [pc, #252]	; (800fe9c <run_shortest+0x1034>)
 800fda0:	701a      	strb	r2, [r3, #0]
 800fda2:	e18a      	b.n	80100ba <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -10) { //入り135R
 800fda4:	4b3d      	ldr	r3, [pc, #244]	; (800fe9c <run_shortest+0x1034>)
 800fda6:	781b      	ldrb	r3, [r3, #0]
 800fda8:	461a      	mov	r2, r3
 800fdaa:	4b3d      	ldr	r3, [pc, #244]	; (800fea0 <run_shortest+0x1038>)
 800fdac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdb0:	f113 0f0a 	cmn.w	r3, #10
 800fdb4:	d115      	bne.n	800fde2 <run_shortest+0xf7a>
			turn135inR(howspeed.turn135in_R, OFF,mollifier_mode,end_velocity);
 800fdb6:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fdba:	9302      	str	r3, [sp, #8]
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	9301      	str	r3, [sp, #4]
 800fdc0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800fdc4:	9300      	str	r3, [sp, #0]
 800fdc6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800fdca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fdcc:	ed97 0a08 	vldr	s0, [r7, #32]
 800fdd0:	f7fb fcf2 	bl	800b7b8 <turn135inR>
			pass_count++;
 800fdd4:	4b31      	ldr	r3, [pc, #196]	; (800fe9c <run_shortest+0x1034>)
 800fdd6:	781b      	ldrb	r3, [r3, #0]
 800fdd8:	3301      	adds	r3, #1
 800fdda:	b2da      	uxtb	r2, r3
 800fddc:	4b2f      	ldr	r3, [pc, #188]	; (800fe9c <run_shortest+0x1034>)
 800fdde:	701a      	strb	r2, [r3, #0]
 800fde0:	e16b      	b.n	80100ba <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -11) { //入り135L
 800fde2:	4b2e      	ldr	r3, [pc, #184]	; (800fe9c <run_shortest+0x1034>)
 800fde4:	781b      	ldrb	r3, [r3, #0]
 800fde6:	461a      	mov	r2, r3
 800fde8:	4b2d      	ldr	r3, [pc, #180]	; (800fea0 <run_shortest+0x1038>)
 800fdea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdee:	f113 0f0b 	cmn.w	r3, #11
 800fdf2:	d115      	bne.n	800fe20 <run_shortest+0xfb8>
			turn135inL(howspeed.turn135in_L, OFF,mollifier_mode,end_velocity);
 800fdf4:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fdf8:	9302      	str	r3, [sp, #8]
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	9301      	str	r3, [sp, #4]
 800fdfe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800fe02:	9300      	str	r3, [sp, #0]
 800fe04:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800fe08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe0a:	ed97 0a08 	vldr	s0, [r7, #32]
 800fe0e:	f7fb ff1b 	bl	800bc48 <turn135inL>
			pass_count++;
 800fe12:	4b22      	ldr	r3, [pc, #136]	; (800fe9c <run_shortest+0x1034>)
 800fe14:	781b      	ldrb	r3, [r3, #0]
 800fe16:	3301      	adds	r3, #1
 800fe18:	b2da      	uxtb	r2, r3
 800fe1a:	4b20      	ldr	r3, [pc, #128]	; (800fe9c <run_shortest+0x1034>)
 800fe1c:	701a      	strb	r2, [r3, #0]
 800fe1e:	e14c      	b.n	80100ba <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -12) { //出り45R
 800fe20:	4b1e      	ldr	r3, [pc, #120]	; (800fe9c <run_shortest+0x1034>)
 800fe22:	781b      	ldrb	r3, [r3, #0]
 800fe24:	461a      	mov	r2, r3
 800fe26:	4b1e      	ldr	r3, [pc, #120]	; (800fea0 <run_shortest+0x1038>)
 800fe28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe2c:	f113 0f0c 	cmn.w	r3, #12
 800fe30:	d115      	bne.n	800fe5e <run_shortest+0xff6>
			turn45outR(howspeed.turn45out_R, OFF,mollifier_mode,end_velocity);
 800fe32:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fe36:	9302      	str	r3, [sp, #8]
 800fe38:	2300      	movs	r3, #0
 800fe3a:	9301      	str	r3, [sp, #4]
 800fe3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800fe40:	9300      	str	r3, [sp, #0]
 800fe42:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fe46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe48:	ed97 0a08 	vldr	s0, [r7, #32]
 800fe4c:	f7fc f940 	bl	800c0d0 <turn45outR>
			pass_count++;
 800fe50:	4b12      	ldr	r3, [pc, #72]	; (800fe9c <run_shortest+0x1034>)
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	3301      	adds	r3, #1
 800fe56:	b2da      	uxtb	r2, r3
 800fe58:	4b10      	ldr	r3, [pc, #64]	; (800fe9c <run_shortest+0x1034>)
 800fe5a:	701a      	strb	r2, [r3, #0]
 800fe5c:	e12d      	b.n	80100ba <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -13) { //出り45L
 800fe5e:	4b0f      	ldr	r3, [pc, #60]	; (800fe9c <run_shortest+0x1034>)
 800fe60:	781b      	ldrb	r3, [r3, #0]
 800fe62:	461a      	mov	r2, r3
 800fe64:	4b0e      	ldr	r3, [pc, #56]	; (800fea0 <run_shortest+0x1038>)
 800fe66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe6a:	f113 0f0d 	cmn.w	r3, #13
 800fe6e:	d119      	bne.n	800fea4 <run_shortest+0x103c>
			turn45outL(howspeed.turn45out_L, OFF,mollifier_mode,end_velocity);
 800fe70:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fe74:	9302      	str	r3, [sp, #8]
 800fe76:	2300      	movs	r3, #0
 800fe78:	9301      	str	r3, [sp, #4]
 800fe7a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800fe7e:	9300      	str	r3, [sp, #0]
 800fe80:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800fe84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe86:	ed97 0a08 	vldr	s0, [r7, #32]
 800fe8a:	f7fc fb13 	bl	800c4b4 <turn45outL>
			pass_count++;
 800fe8e:	4b03      	ldr	r3, [pc, #12]	; (800fe9c <run_shortest+0x1034>)
 800fe90:	781b      	ldrb	r3, [r3, #0]
 800fe92:	3301      	adds	r3, #1
 800fe94:	b2da      	uxtb	r2, r3
 800fe96:	4b01      	ldr	r3, [pc, #4]	; (800fe9c <run_shortest+0x1034>)
 800fe98:	701a      	strb	r2, [r3, #0]
 800fe9a:	e10e      	b.n	80100ba <run_shortest+0x1252>
 800fe9c:	2000082c 	.word	0x2000082c
 800fea0:	20000840 	.word	0x20000840
		}
		else if (pass[pass_count] == -14) { //出り135R
 800fea4:	4ba0      	ldr	r3, [pc, #640]	; (8010128 <run_shortest+0x12c0>)
 800fea6:	781b      	ldrb	r3, [r3, #0]
 800fea8:	461a      	mov	r2, r3
 800feaa:	4ba0      	ldr	r3, [pc, #640]	; (801012c <run_shortest+0x12c4>)
 800feac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800feb0:	f113 0f0e 	cmn.w	r3, #14
 800feb4:	d115      	bne.n	800fee2 <run_shortest+0x107a>
			turn135outR(howspeed.turn135out_R, OFF,mollifier_mode,end_velocity);
 800feb6:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800feba:	9302      	str	r3, [sp, #8]
 800febc:	2300      	movs	r3, #0
 800febe:	9301      	str	r3, [sp, #4]
 800fec0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800fec4:	9300      	str	r3, [sp, #0]
 800fec6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800feca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fecc:	ed97 0a08 	vldr	s0, [r7, #32]
 800fed0:	f7fc fcd8 	bl	800c884 <turn135outR>
			pass_count++;
 800fed4:	4b94      	ldr	r3, [pc, #592]	; (8010128 <run_shortest+0x12c0>)
 800fed6:	781b      	ldrb	r3, [r3, #0]
 800fed8:	3301      	adds	r3, #1
 800feda:	b2da      	uxtb	r2, r3
 800fedc:	4b92      	ldr	r3, [pc, #584]	; (8010128 <run_shortest+0x12c0>)
 800fede:	701a      	strb	r2, [r3, #0]
 800fee0:	e0eb      	b.n	80100ba <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -15) { //出り135L
 800fee2:	4b91      	ldr	r3, [pc, #580]	; (8010128 <run_shortest+0x12c0>)
 800fee4:	781b      	ldrb	r3, [r3, #0]
 800fee6:	461a      	mov	r2, r3
 800fee8:	4b90      	ldr	r3, [pc, #576]	; (801012c <run_shortest+0x12c4>)
 800feea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800feee:	f113 0f0f 	cmn.w	r3, #15
 800fef2:	d115      	bne.n	800ff20 <run_shortest+0x10b8>
			turn135outL(howspeed.turn135out_L, OFF,mollifier_mode,end_velocity);
 800fef4:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fef8:	9302      	str	r3, [sp, #8]
 800fefa:	2300      	movs	r3, #0
 800fefc:	9301      	str	r3, [sp, #4]
 800fefe:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800ff02:	9300      	str	r3, [sp, #0]
 800ff04:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800ff08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff0a:	ed97 0a08 	vldr	s0, [r7, #32]
 800ff0e:	f7fc feab 	bl	800cc68 <turn135outL>
			pass_count++;
 800ff12:	4b85      	ldr	r3, [pc, #532]	; (8010128 <run_shortest+0x12c0>)
 800ff14:	781b      	ldrb	r3, [r3, #0]
 800ff16:	3301      	adds	r3, #1
 800ff18:	b2da      	uxtb	r2, r3
 800ff1a:	4b83      	ldr	r3, [pc, #524]	; (8010128 <run_shortest+0x12c0>)
 800ff1c:	701a      	strb	r2, [r3, #0]
 800ff1e:	e0cc      	b.n	80100ba <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -16) { //V90R
 800ff20:	4b81      	ldr	r3, [pc, #516]	; (8010128 <run_shortest+0x12c0>)
 800ff22:	781b      	ldrb	r3, [r3, #0]
 800ff24:	461a      	mov	r2, r3
 800ff26:	4b81      	ldr	r3, [pc, #516]	; (801012c <run_shortest+0x12c4>)
 800ff28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff2c:	f113 0f10 	cmn.w	r3, #16
 800ff30:	d115      	bne.n	800ff5e <run_shortest+0x10f6>
			V90R(howspeed.V90_R, OFF,mollifier_mode,end_velocity);
 800ff32:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ff36:	9302      	str	r3, [sp, #8]
 800ff38:	2300      	movs	r3, #0
 800ff3a:	9301      	str	r3, [sp, #4]
 800ff3c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800ff40:	9300      	str	r3, [sp, #0]
 800ff42:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800ff46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff48:	ed97 0a08 	vldr	s0, [r7, #32]
 800ff4c:	f7fd f878 	bl	800d040 <V90R>
			pass_count++;
 800ff50:	4b75      	ldr	r3, [pc, #468]	; (8010128 <run_shortest+0x12c0>)
 800ff52:	781b      	ldrb	r3, [r3, #0]
 800ff54:	3301      	adds	r3, #1
 800ff56:	b2da      	uxtb	r2, r3
 800ff58:	4b73      	ldr	r3, [pc, #460]	; (8010128 <run_shortest+0x12c0>)
 800ff5a:	701a      	strb	r2, [r3, #0]
 800ff5c:	e0ad      	b.n	80100ba <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -17) { //V90L
 800ff5e:	4b72      	ldr	r3, [pc, #456]	; (8010128 <run_shortest+0x12c0>)
 800ff60:	781b      	ldrb	r3, [r3, #0]
 800ff62:	461a      	mov	r2, r3
 800ff64:	4b71      	ldr	r3, [pc, #452]	; (801012c <run_shortest+0x12c4>)
 800ff66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff6a:	f113 0f11 	cmn.w	r3, #17
 800ff6e:	d115      	bne.n	800ff9c <run_shortest+0x1134>
			V90L(howspeed.V90_L, OFF,mollifier_mode,end_velocity);
 800ff70:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ff74:	9302      	str	r3, [sp, #8]
 800ff76:	2300      	movs	r3, #0
 800ff78:	9301      	str	r3, [sp, #4]
 800ff7a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800ff7e:	9300      	str	r3, [sp, #0]
 800ff80:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800ff84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff86:	ed97 0a08 	vldr	s0, [r7, #32]
 800ff8a:	f7fd fa65 	bl	800d458 <V90L>
			pass_count++;
 800ff8e:	4b66      	ldr	r3, [pc, #408]	; (8010128 <run_shortest+0x12c0>)
 800ff90:	781b      	ldrb	r3, [r3, #0]
 800ff92:	3301      	adds	r3, #1
 800ff94:	b2da      	uxtb	r2, r3
 800ff96:	4b64      	ldr	r3, [pc, #400]	; (8010128 <run_shortest+0x12c0>)
 800ff98:	701a      	strb	r2, [r3, #0]
 800ff9a:	e08e      	b.n	80100ba <run_shortest+0x1252>
		}
		else if (pass[pass_count] >= 1) {
 800ff9c:	4b62      	ldr	r3, [pc, #392]	; (8010128 <run_shortest+0x12c0>)
 800ff9e:	781b      	ldrb	r3, [r3, #0]
 800ffa0:	461a      	mov	r2, r3
 800ffa2:	4b62      	ldr	r3, [pc, #392]	; (801012c <run_shortest+0x12c4>)
 800ffa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	f340 8086 	ble.w	80100ba <run_shortest+0x1252>
			first_v = howspeed.TurnCentervelocity;
 800ffae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ffb0:	637b      	str	r3, [r7, #52]	; 0x34
			last_v = howspeed.TurnCentervelocity;
 800ffb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ffb4:	61fb      	str	r3, [r7, #28]
			if (pass_count >= 1) {
 800ffb6:	4b5c      	ldr	r3, [pc, #368]	; (8010128 <run_shortest+0x12c0>)
 800ffb8:	781b      	ldrb	r3, [r3, #0]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d013      	beq.n	800ffe6 <run_shortest+0x117e>

				if (pass[pass_count - 1] == -2 || pass[pass_count - 1] == -3) {
 800ffbe:	4b5a      	ldr	r3, [pc, #360]	; (8010128 <run_shortest+0x12c0>)
 800ffc0:	781b      	ldrb	r3, [r3, #0]
 800ffc2:	3b01      	subs	r3, #1
 800ffc4:	4a59      	ldr	r2, [pc, #356]	; (801012c <run_shortest+0x12c4>)
 800ffc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffca:	f113 0f02 	cmn.w	r3, #2
 800ffce:	d008      	beq.n	800ffe2 <run_shortest+0x117a>
 800ffd0:	4b55      	ldr	r3, [pc, #340]	; (8010128 <run_shortest+0x12c0>)
 800ffd2:	781b      	ldrb	r3, [r3, #0]
 800ffd4:	3b01      	subs	r3, #1
 800ffd6:	4a55      	ldr	r2, [pc, #340]	; (801012c <run_shortest+0x12c4>)
 800ffd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffdc:	f113 0f03 	cmn.w	r3, #3
 800ffe0:	d101      	bne.n	800ffe6 <run_shortest+0x117e>
					first_v = howspeed.SlalomCentervelocity;
 800ffe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffe4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
			if (pass[pass_count + 1] == -2 || pass[pass_count + 1] == -3) {
 800ffe6:	4b50      	ldr	r3, [pc, #320]	; (8010128 <run_shortest+0x12c0>)
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	3301      	adds	r3, #1
 800ffec:	4a4f      	ldr	r2, [pc, #316]	; (801012c <run_shortest+0x12c4>)
 800ffee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fff2:	f113 0f02 	cmn.w	r3, #2
 800fff6:	d008      	beq.n	801000a <run_shortest+0x11a2>
 800fff8:	4b4b      	ldr	r3, [pc, #300]	; (8010128 <run_shortest+0x12c0>)
 800fffa:	781b      	ldrb	r3, [r3, #0]
 800fffc:	3301      	adds	r3, #1
 800fffe:	4a4b      	ldr	r2, [pc, #300]	; (801012c <run_shortest+0x12c4>)
 8010000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010004:	f113 0f03 	cmn.w	r3, #3
 8010008:	d101      	bne.n	801000e <run_shortest+0x11a6>
				last_v = howspeed.SlalomCentervelocity;
 801000a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801000c:	61fb      	str	r3, [r7, #28]
			}
			if (pass[pass_count] >= 50) {
 801000e:	4b46      	ldr	r3, [pc, #280]	; (8010128 <run_shortest+0x12c0>)
 8010010:	781b      	ldrb	r3, [r3, #0]
 8010012:	461a      	mov	r2, r3
 8010014:	4b45      	ldr	r3, [pc, #276]	; (801012c <run_shortest+0x12c4>)
 8010016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801001a:	2b31      	cmp	r3, #49	; 0x31
 801001c:	dd27      	ble.n	801006e <run_shortest+0x1206>
				mode.WallControlMode=3;
 801001e:	2303      	movs	r3, #3
 8010020:	763b      	strb	r3, [r7, #24]
				mode.WallControlStatus=0;
 8010022:	2300      	movs	r3, #0
 8010024:	767b      	strb	r3, [r7, #25]
				straight_table2((45 * sqrt(2) * (pass[pass_count] - 50)),first_v, end_velocity,inspeed, inacc, mode);
 8010026:	4b40      	ldr	r3, [pc, #256]	; (8010128 <run_shortest+0x12c0>)
 8010028:	781b      	ldrb	r3, [r3, #0]
 801002a:	461a      	mov	r2, r3
 801002c:	4b3f      	ldr	r3, [pc, #252]	; (801012c <run_shortest+0x12c4>)
 801002e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010032:	3b32      	subs	r3, #50	; 0x32
 8010034:	4618      	mov	r0, r3
 8010036:	f7f0 fa9d 	bl	8000574 <__aeabi_i2d>
 801003a:	a339      	add	r3, pc, #228	; (adr r3, 8010120 <run_shortest+0x12b8>)
 801003c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010040:	f7f0 fb02 	bl	8000648 <__aeabi_dmul>
 8010044:	4602      	mov	r2, r0
 8010046:	460b      	mov	r3, r1
 8010048:	4610      	mov	r0, r2
 801004a:	4619      	mov	r1, r3
 801004c:	f7f0 fdd4 	bl	8000bf8 <__aeabi_d2f>
 8010050:	4603      	mov	r3, r0
 8010052:	69b8      	ldr	r0, [r7, #24]
 8010054:	ed97 2a04 	vldr	s4, [r7, #16]
 8010058:	edd7 1a05 	vldr	s3, [r7, #20]
 801005c:	ed97 1a08 	vldr	s2, [r7, #32]
 8010060:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 8010064:	ee00 3a10 	vmov	s0, r3
 8010068:	f7f3 f9d8 	bl	800341c <straight_table2>
 801006c:	e01f      	b.n	80100ae <run_shortest+0x1246>
			} else {
				mode.WallControlMode=1;
 801006e:	2301      	movs	r3, #1
 8010070:	763b      	strb	r3, [r7, #24]
				mode.WallControlStatus=0;
 8010072:	2300      	movs	r3, #0
 8010074:	767b      	strb	r3, [r7, #25]
				straight_table2((45 * pass[pass_count]),first_v, end_velocity,inspeed, inacc, mode);
 8010076:	4b2c      	ldr	r3, [pc, #176]	; (8010128 <run_shortest+0x12c0>)
 8010078:	781b      	ldrb	r3, [r3, #0]
 801007a:	461a      	mov	r2, r3
 801007c:	4b2b      	ldr	r3, [pc, #172]	; (801012c <run_shortest+0x12c4>)
 801007e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010082:	4613      	mov	r3, r2
 8010084:	005b      	lsls	r3, r3, #1
 8010086:	4413      	add	r3, r2
 8010088:	011a      	lsls	r2, r3, #4
 801008a:	1ad3      	subs	r3, r2, r3
 801008c:	ee07 3a90 	vmov	s15, r3
 8010090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010094:	69b8      	ldr	r0, [r7, #24]
 8010096:	ed97 2a04 	vldr	s4, [r7, #16]
 801009a:	edd7 1a05 	vldr	s3, [r7, #20]
 801009e:	ed97 1a08 	vldr	s2, [r7, #32]
 80100a2:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 80100a6:	eeb0 0a67 	vmov.f32	s0, s15
 80100aa:	f7f3 f9b7 	bl	800341c <straight_table2>
			}

			pass_count++;
 80100ae:	4b1e      	ldr	r3, [pc, #120]	; (8010128 <run_shortest+0x12c0>)
 80100b0:	781b      	ldrb	r3, [r3, #0]
 80100b2:	3301      	adds	r3, #1
 80100b4:	b2da      	uxtb	r2, r3
 80100b6:	4b1c      	ldr	r3, [pc, #112]	; (8010128 <run_shortest+0x12c0>)
 80100b8:	701a      	strb	r2, [r3, #0]
		}

		if (pass[pass_count] == 0) {
 80100ba:	4b1b      	ldr	r3, [pc, #108]	; (8010128 <run_shortest+0x12c0>)
 80100bc:	781b      	ldrb	r3, [r3, #0]
 80100be:	461a      	mov	r2, r3
 80100c0:	4b1a      	ldr	r3, [pc, #104]	; (801012c <run_shortest+0x12c4>)
 80100c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d000      	beq.n	80100cc <run_shortest+0x1264>
		pass_count2=pass_count+1;
 80100ca:	e521      	b.n	800fb10 <run_shortest+0xca8>
			break;
 80100cc:	bf00      	nop
//
//			break;
//		}
	}

		mode.WallControlMode=1;
 80100ce:	2301      	movs	r3, #1
 80100d0:	763b      	strb	r3, [r7, #24]
		mode.WallControlStatus=0;
 80100d2:	2300      	movs	r3, #0
 80100d4:	767b      	strb	r3, [r7, #25]
		straight_table2(90,end_velocity, 0,inspeed, inacc, mode);
 80100d6:	69b8      	ldr	r0, [r7, #24]
 80100d8:	ed97 2a04 	vldr	s4, [r7, #16]
 80100dc:	edd7 1a05 	vldr	s3, [r7, #20]
 80100e0:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8010130 <run_shortest+0x12c8>
 80100e4:	edd7 0a08 	vldr	s1, [r7, #32]
 80100e8:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8010134 <run_shortest+0x12cc>
 80100ec:	f7f3 f996 	bl	800341c <straight_table2>
		HAL_Delay(700);
 80100f0:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80100f4:	f008 fcea 	bl	8018acc <HAL_Delay>
		pl_FunMotor_stop();
 80100f8:	f7f7 feb6 	bl	8007e68 <pl_FunMotor_stop>
//		turning_table(180, 0, 0, 400, 5000);

	maze_mode = 0;
 80100fc:	4b0e      	ldr	r3, [pc, #56]	; (8010138 <run_shortest+0x12d0>)
 80100fe:	2200      	movs	r2, #0
 8010100:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 8010102:	4b0e      	ldr	r3, [pc, #56]	; (801013c <run_shortest+0x12d4>)
 8010104:	2200      	movs	r2, #0
 8010106:	701a      	strb	r2, [r3, #0]
	record_mode=0;
 8010108:	4b0d      	ldr	r3, [pc, #52]	; (8010140 <run_shortest+0x12d8>)
 801010a:	2200      	movs	r2, #0
 801010c:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_standby(OFF);
 801010e:	2000      	movs	r0, #0
 8010110:	f7f7 fe16 	bl	8007d40 <pl_DriveMotor_standby>
	t = 0;
 8010114:	4b0b      	ldr	r3, [pc, #44]	; (8010144 <run_shortest+0x12dc>)
 8010116:	2200      	movs	r2, #0
 8010118:	601a      	str	r2, [r3, #0]

	while (t <= 14) {
 801011a:	e034      	b.n	8010186 <run_shortest+0x131e>
 801011c:	f3af 8000 	nop.w
 8010120:	c022ec18 	.word	0xc022ec18
 8010124:	404fd1de 	.word	0x404fd1de
 8010128:	2000082c 	.word	0x2000082c
 801012c:	20000840 	.word	0x20000840
 8010130:	00000000 	.word	0x00000000
 8010134:	42b40000 	.word	0x42b40000
 8010138:	20000838 	.word	0x20000838
 801013c:	2000080c 	.word	0x2000080c
 8010140:	2000edc4 	.word	0x2000edc4
 8010144:	20000c3c 	.word	0x20000c3c
		wall.row[t] = record.row[t];
 8010148:	4b2b      	ldr	r3, [pc, #172]	; (80101f8 <run_shortest+0x1390>)
 801014a:	681a      	ldr	r2, [r3, #0]
 801014c:	4b2a      	ldr	r3, [pc, #168]	; (80101f8 <run_shortest+0x1390>)
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	492a      	ldr	r1, [pc, #168]	; (80101fc <run_shortest+0x1394>)
 8010152:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8010156:	4a2a      	ldr	r2, [pc, #168]	; (8010200 <run_shortest+0x1398>)
 8010158:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = record.column[t];
 801015c:	4b26      	ldr	r3, [pc, #152]	; (80101f8 <run_shortest+0x1390>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	4a25      	ldr	r2, [pc, #148]	; (80101f8 <run_shortest+0x1390>)
 8010162:	6812      	ldr	r2, [r2, #0]
 8010164:	4925      	ldr	r1, [pc, #148]	; (80101fc <run_shortest+0x1394>)
 8010166:	330c      	adds	r3, #12
 8010168:	005b      	lsls	r3, r3, #1
 801016a:	440b      	add	r3, r1
 801016c:	88d8      	ldrh	r0, [r3, #6]
 801016e:	4924      	ldr	r1, [pc, #144]	; (8010200 <run_shortest+0x1398>)
 8010170:	f102 030c 	add.w	r3, r2, #12
 8010174:	005b      	lsls	r3, r3, #1
 8010176:	440b      	add	r3, r1
 8010178:	4602      	mov	r2, r0
 801017a:	80da      	strh	r2, [r3, #6]
		t++;
 801017c:	4b1e      	ldr	r3, [pc, #120]	; (80101f8 <run_shortest+0x1390>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	3301      	adds	r3, #1
 8010182:	4a1d      	ldr	r2, [pc, #116]	; (80101f8 <run_shortest+0x1390>)
 8010184:	6013      	str	r3, [r2, #0]
	while (t <= 14) {
 8010186:	4b1c      	ldr	r3, [pc, #112]	; (80101f8 <run_shortest+0x1390>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	2b0e      	cmp	r3, #14
 801018c:	dddc      	ble.n	8010148 <run_shortest+0x12e0>
	}
	t = 0;
 801018e:	4b1a      	ldr	r3, [pc, #104]	; (80101f8 <run_shortest+0x1390>)
 8010190:	2200      	movs	r2, #0
 8010192:	601a      	str	r2, [r3, #0]
	while (t <= 14) {
 8010194:	e026      	b.n	80101e4 <run_shortest+0x137c>
		wall.row_look[t] = ~wall.row_look[t];
 8010196:	4b18      	ldr	r3, [pc, #96]	; (80101f8 <run_shortest+0x1390>)
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	4a19      	ldr	r2, [pc, #100]	; (8010200 <run_shortest+0x1398>)
 801019c:	331c      	adds	r3, #28
 801019e:	005b      	lsls	r3, r3, #1
 80101a0:	4413      	add	r3, r2
 80101a2:	889a      	ldrh	r2, [r3, #4]
 80101a4:	4b14      	ldr	r3, [pc, #80]	; (80101f8 <run_shortest+0x1390>)
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	43d2      	mvns	r2, r2
 80101aa:	b291      	uxth	r1, r2
 80101ac:	4a14      	ldr	r2, [pc, #80]	; (8010200 <run_shortest+0x1398>)
 80101ae:	331c      	adds	r3, #28
 80101b0:	005b      	lsls	r3, r3, #1
 80101b2:	4413      	add	r3, r2
 80101b4:	460a      	mov	r2, r1
 80101b6:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = ~wall.column_look[t];
 80101b8:	4b0f      	ldr	r3, [pc, #60]	; (80101f8 <run_shortest+0x1390>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	4a10      	ldr	r2, [pc, #64]	; (8010200 <run_shortest+0x1398>)
 80101be:	332c      	adds	r3, #44	; 0x2c
 80101c0:	005b      	lsls	r3, r3, #1
 80101c2:	4413      	add	r3, r2
 80101c4:	885a      	ldrh	r2, [r3, #2]
 80101c6:	4b0c      	ldr	r3, [pc, #48]	; (80101f8 <run_shortest+0x1390>)
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	43d2      	mvns	r2, r2
 80101cc:	b291      	uxth	r1, r2
 80101ce:	4a0c      	ldr	r2, [pc, #48]	; (8010200 <run_shortest+0x1398>)
 80101d0:	332c      	adds	r3, #44	; 0x2c
 80101d2:	005b      	lsls	r3, r3, #1
 80101d4:	4413      	add	r3, r2
 80101d6:	460a      	mov	r2, r1
 80101d8:	805a      	strh	r2, [r3, #2]
		t++;
 80101da:	4b07      	ldr	r3, [pc, #28]	; (80101f8 <run_shortest+0x1390>)
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	3301      	adds	r3, #1
 80101e0:	4a05      	ldr	r2, [pc, #20]	; (80101f8 <run_shortest+0x1390>)
 80101e2:	6013      	str	r3, [r2, #0]
	while (t <= 14) {
 80101e4:	4b04      	ldr	r3, [pc, #16]	; (80101f8 <run_shortest+0x1390>)
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	2b0e      	cmp	r3, #14
 80101ea:	ddd4      	ble.n	8010196 <run_shortest+0x132e>
	}

}
 80101ec:	bf00      	nop
 80101ee:	bf00      	nop
 80101f0:	3740      	adds	r7, #64	; 0x40
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bdb0      	pop	{r4, r5, r7, pc}
 80101f6:	bf00      	nop
 80101f8:	20000c3c 	.word	0x20000c3c
 80101fc:	20000cb8 	.word	0x20000cb8
 8010200:	20000c40 	.word	0x20000c40

08010204 <decision_kitiku>:





void decision_kitiku(int x,int y,int direction,unsigned short front_count,unsigned short right_count,unsigned short back_count,unsigned short left_count){
 8010204:	b580      	push	{r7, lr}
 8010206:	b08a      	sub	sp, #40	; 0x28
 8010208:	af02      	add	r7, sp, #8
 801020a:	60f8      	str	r0, [r7, #12]
 801020c:	60b9      	str	r1, [r7, #8]
 801020e:	607a      	str	r2, [r7, #4]
 8010210:	807b      	strh	r3, [r7, #2]
	_Bool front_wall=1;
 8010212:	2301      	movs	r3, #1
 8010214:	77bb      	strb	r3, [r7, #30]
	_Bool right_wall=1;
 8010216:	2301      	movs	r3, #1
 8010218:	777b      	strb	r3, [r7, #29]
	_Bool left_wall=1;
 801021a:	2301      	movs	r3, #1
 801021c:	773b      	strb	r3, [r7, #28]
	int x_front=x;
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	61bb      	str	r3, [r7, #24]
	int y_front=y;
 8010222:	68bb      	ldr	r3, [r7, #8]
 8010224:	617b      	str	r3, [r7, #20]
	update_coordinate(&x_front,&y_front,direction);
 8010226:	f107 0114 	add.w	r1, r7, #20
 801022a:	f107 0318 	add.w	r3, r7, #24
 801022e:	687a      	ldr	r2, [r7, #4]
 8010230:	4618      	mov	r0, r3
 8010232:	f7fd fc9b 	bl	800db6c <update_coordinate>
	get_wall_look(x_front,y_front,direction,&front_wall,&right_wall,&left_wall);
 8010236:	69b8      	ldr	r0, [r7, #24]
 8010238:	6979      	ldr	r1, [r7, #20]
 801023a:	f107 021e 	add.w	r2, r7, #30
 801023e:	f107 031c 	add.w	r3, r7, #28
 8010242:	9301      	str	r3, [sp, #4]
 8010244:	f107 031d 	add.w	r3, r7, #29
 8010248:	9300      	str	r3, [sp, #0]
 801024a:	4613      	mov	r3, r2
 801024c:	687a      	ldr	r2, [r7, #4]
 801024e:	f000 fe27 	bl	8010ea0 <get_wall_look>
	_Bool look_f=(front_wall && right_wall && left_wall);
 8010252:	7fbb      	ldrb	r3, [r7, #30]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d007      	beq.n	8010268 <decision_kitiku+0x64>
 8010258:	7f7b      	ldrb	r3, [r7, #29]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d004      	beq.n	8010268 <decision_kitiku+0x64>
 801025e:	7f3b      	ldrb	r3, [r7, #28]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d001      	beq.n	8010268 <decision_kitiku+0x64>
 8010264:	2301      	movs	r3, #1
 8010266:	e000      	b.n	801026a <decision_kitiku+0x66>
 8010268:	2300      	movs	r3, #0
 801026a:	77fb      	strb	r3, [r7, #31]
 801026c:	7ffb      	ldrb	r3, [r7, #31]
 801026e:	f003 0301 	and.w	r3, r3, #1
 8010272:	77fb      	strb	r3, [r7, #31]

	//ここに壁条件がない
	if (look_f && front_count <= right_count
 8010274:	7ffb      	ldrb	r3, [r7, #31]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d02b      	beq.n	80102d2 <decision_kitiku+0xce>
 801027a:	887a      	ldrh	r2, [r7, #2]
 801027c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801027e:	429a      	cmp	r2, r3
 8010280:	d827      	bhi.n	80102d2 <decision_kitiku+0xce>
			&& front_count <= left_count && front_count <= back_count) {
 8010282:	887a      	ldrh	r2, [r7, #2]
 8010284:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010286:	429a      	cmp	r2, r3
 8010288:	d823      	bhi.n	80102d2 <decision_kitiku+0xce>
 801028a:	887a      	ldrh	r2, [r7, #2]
 801028c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801028e:	429a      	cmp	r2, r3
 8010290:	d81f      	bhi.n	80102d2 <decision_kitiku+0xce>
		if ((direction==1 && y>=14) ||
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	2b01      	cmp	r3, #1
 8010296:	d102      	bne.n	801029e <decision_kitiku+0x9a>
 8010298:	68bb      	ldr	r3, [r7, #8]
 801029a:	2b0d      	cmp	r3, #13
 801029c:	dc11      	bgt.n	80102c2 <decision_kitiku+0xbe>
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2b02      	cmp	r3, #2
 80102a2:	d102      	bne.n	80102aa <decision_kitiku+0xa6>
			(direction==2 && x>=14) ||
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	2b0d      	cmp	r3, #13
 80102a8:	dc0b      	bgt.n	80102c2 <decision_kitiku+0xbe>
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2b03      	cmp	r3, #3
 80102ae:	d102      	bne.n	80102b6 <decision_kitiku+0xb2>
			(direction==3 && y<=1) ||
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	2b01      	cmp	r3, #1
 80102b4:	dd05      	ble.n	80102c2 <decision_kitiku+0xbe>
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2b04      	cmp	r3, #4
 80102ba:	d106      	bne.n	80102ca <decision_kitiku+0xc6>
			(direction==4 && x<=1) ){
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	2b01      	cmp	r3, #1
 80102c0:	dc03      	bgt.n	80102ca <decision_kitiku+0xc6>
			kitikukan = 0;
 80102c2:	4b08      	ldr	r3, [pc, #32]	; (80102e4 <decision_kitiku+0xe0>)
 80102c4:	2200      	movs	r2, #0
 80102c6:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 80102c8:	e007      	b.n	80102da <decision_kitiku+0xd6>
		}else{
			kitikukan = 1;
 80102ca:	4b06      	ldr	r3, [pc, #24]	; (80102e4 <decision_kitiku+0xe0>)
 80102cc:	2201      	movs	r2, #1
 80102ce:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 80102d0:	e003      	b.n	80102da <decision_kitiku+0xd6>
		}

	} else {
		kitikukan = 0;
 80102d2:	4b04      	ldr	r3, [pc, #16]	; (80102e4 <decision_kitiku+0xe0>)
 80102d4:	2200      	movs	r2, #0
 80102d6:	601a      	str	r2, [r3, #0]
	}


}
 80102d8:	bf00      	nop
 80102da:	bf00      	nop
 80102dc:	3720      	adds	r7, #32
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}
 80102e2:	bf00      	nop
 80102e4:	2000083c 	.word	0x2000083c

080102e8 <compress_kitiku>:

void compress_kitiku(int *x,int *y,int *direction) {
 80102e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102ea:	b099      	sub	sp, #100	; 0x64
 80102ec:	af04      	add	r7, sp, #16
 80102ee:	60f8      	str	r0, [r7, #12]
 80102f0:	60b9      	str	r1, [r7, #8]
 80102f2:	607a      	str	r2, [r7, #4]
	kitiku_distance = 1;
 80102f4:	4b9f      	ldr	r3, [pc, #636]	; (8010574 <compress_kitiku+0x28c>)
 80102f6:	2201      	movs	r2, #1
 80102f8:	601a      	str	r2, [r3, #0]
	kitiku = 1;
 80102fa:	4b9f      	ldr	r3, [pc, #636]	; (8010578 <compress_kitiku+0x290>)
 80102fc:	2201      	movs	r2, #1
 80102fe:	701a      	strb	r2, [r3, #0]
	_Bool look_f,look_r,look_l;
	int x_now,y_now,direction_now;
	int x_front,y_front,x_right,y_right,x_left,y_left;
	int direction_right,direction_left;
	unsigned short front_count, right_count, back_count, left_count;
	x_now=*x;y_now=*y;direction_now=*direction;
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	637b      	str	r3, [r7, #52]	; 0x34
 8010306:	68bb      	ldr	r3, [r7, #8]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	633b      	str	r3, [r7, #48]	; 0x30
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (1) {
		update_coordinate(&x_now,&y_now,direction_now);
 8010312:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8010316:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801031a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801031c:	4618      	mov	r0, r3
 801031e:	f7fd fc25 	bl	800db6c <update_coordinate>
		x_front=x_now;y_front=y_now;x_right=x_now;y_right=y_now;x_left=x_now;y_left=y_now;
 8010322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010328:	62bb      	str	r3, [r7, #40]	; 0x28
 801032a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801032c:	627b      	str	r3, [r7, #36]	; 0x24
 801032e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010330:	623b      	str	r3, [r7, #32]
 8010332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010334:	61fb      	str	r3, [r7, #28]
 8010336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010338:	61bb      	str	r3, [r7, #24]

		update_coordinate(&x_front,&y_front,direction_now);
 801033a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801033e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010342:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010344:	4618      	mov	r0, r3
 8010346:	f7fd fc11 	bl	800db6c <update_coordinate>
		get_wall_look(x_front,y_front,direction_now,&front_wall,&right_wall,&left_wall);
 801034a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801034c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801034e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8010352:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8010356:	9301      	str	r3, [sp, #4]
 8010358:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 801035c:	9300      	str	r3, [sp, #0]
 801035e:	4613      	mov	r3, r2
 8010360:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010362:	f000 fd9d 	bl	8010ea0 <get_wall_look>
		look_f=(front_wall && right_wall && left_wall);
 8010366:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801036a:	2b00      	cmp	r3, #0
 801036c:	d009      	beq.n	8010382 <compress_kitiku+0x9a>
 801036e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010372:	2b00      	cmp	r3, #0
 8010374:	d005      	beq.n	8010382 <compress_kitiku+0x9a>
 8010376:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 801037a:	2b00      	cmp	r3, #0
 801037c:	d001      	beq.n	8010382 <compress_kitiku+0x9a>
 801037e:	2301      	movs	r3, #1
 8010380:	e000      	b.n	8010384 <compress_kitiku+0x9c>
 8010382:	2300      	movs	r3, #0
 8010384:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010388:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801038c:	f003 0301 	and.w	r3, r3, #1
 8010390:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


		if(direction_now==4){direction_right=1;}else{direction_right=direction_now+1;}
 8010394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010396:	2b04      	cmp	r3, #4
 8010398:	d102      	bne.n	80103a0 <compress_kitiku+0xb8>
 801039a:	2301      	movs	r3, #1
 801039c:	64bb      	str	r3, [r7, #72]	; 0x48
 801039e:	e002      	b.n	80103a6 <compress_kitiku+0xbe>
 80103a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103a2:	3301      	adds	r3, #1
 80103a4:	64bb      	str	r3, [r7, #72]	; 0x48
		update_coordinate(&x_right,&y_right,direction_right);
 80103a6:	f107 0120 	add.w	r1, r7, #32
 80103aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80103ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80103b0:	4618      	mov	r0, r3
 80103b2:	f7fd fbdb 	bl	800db6c <update_coordinate>
		get_wall_look(x_right,y_right,direction_right,&front_wall,&right_wall,&left_wall);
 80103b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80103b8:	6a39      	ldr	r1, [r7, #32]
 80103ba:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80103be:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80103c2:	9301      	str	r3, [sp, #4]
 80103c4:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 80103c8:	9300      	str	r3, [sp, #0]
 80103ca:	4613      	mov	r3, r2
 80103cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80103ce:	f000 fd67 	bl	8010ea0 <get_wall_look>
		look_r=(front_wall && right_wall && left_wall);
 80103d2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d009      	beq.n	80103ee <compress_kitiku+0x106>
 80103da:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d005      	beq.n	80103ee <compress_kitiku+0x106>
 80103e2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d001      	beq.n	80103ee <compress_kitiku+0x106>
 80103ea:	2301      	movs	r3, #1
 80103ec:	e000      	b.n	80103f0 <compress_kitiku+0x108>
 80103ee:	2300      	movs	r3, #0
 80103f0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80103f4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80103f8:	f003 0301 	and.w	r3, r3, #1
 80103fc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e


		if(direction_now==1){direction_left=4;}else{direction_left=direction_now-1;}
 8010400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010402:	2b01      	cmp	r3, #1
 8010404:	d102      	bne.n	801040c <compress_kitiku+0x124>
 8010406:	2304      	movs	r3, #4
 8010408:	647b      	str	r3, [r7, #68]	; 0x44
 801040a:	e002      	b.n	8010412 <compress_kitiku+0x12a>
 801040c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801040e:	3b01      	subs	r3, #1
 8010410:	647b      	str	r3, [r7, #68]	; 0x44
		update_coordinate(&x_left,&y_left,direction_left);
 8010412:	f107 0118 	add.w	r1, r7, #24
 8010416:	f107 031c 	add.w	r3, r7, #28
 801041a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801041c:	4618      	mov	r0, r3
 801041e:	f7fd fba5 	bl	800db6c <update_coordinate>
		get_wall_look(x_left,y_left,direction_left,&front_wall,&right_wall,&left_wall);
 8010422:	69f8      	ldr	r0, [r7, #28]
 8010424:	69b9      	ldr	r1, [r7, #24]
 8010426:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801042a:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 801042e:	9301      	str	r3, [sp, #4]
 8010430:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8010434:	9300      	str	r3, [sp, #0]
 8010436:	4613      	mov	r3, r2
 8010438:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801043a:	f000 fd31 	bl	8010ea0 <get_wall_look>
		look_l=(front_wall && right_wall && left_wall);
 801043e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010442:	2b00      	cmp	r3, #0
 8010444:	d009      	beq.n	801045a <compress_kitiku+0x172>
 8010446:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801044a:	2b00      	cmp	r3, #0
 801044c:	d005      	beq.n	801045a <compress_kitiku+0x172>
 801044e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8010452:	2b00      	cmp	r3, #0
 8010454:	d001      	beq.n	801045a <compress_kitiku+0x172>
 8010456:	2301      	movs	r3, #1
 8010458:	e000      	b.n	801045c <compress_kitiku+0x174>
 801045a:	2300      	movs	r3, #0
 801045c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8010460:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8010464:	f003 0301 	and.w	r3, r3, #1
 8010468:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

		get_wall(x_now,y_now,direction_now,&front_wall,&right_wall,&left_wall);
 801046c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801046e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010470:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8010474:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8010478:	9301      	str	r3, [sp, #4]
 801047a:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 801047e:	9300      	str	r3, [sp, #0]
 8010480:	4613      	mov	r3, r2
 8010482:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010484:	f000 fb98 	bl	8010bb8 <get_wall>

		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x_now,y_now,direction_now);
 8010488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801048a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801048c:	f107 0610 	add.w	r6, r7, #16
 8010490:	f107 0512 	add.w	r5, r7, #18
 8010494:	f107 0414 	add.w	r4, r7, #20
 8010498:	f107 0016 	add.w	r0, r7, #22
 801049c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801049e:	9102      	str	r1, [sp, #8]
 80104a0:	9201      	str	r2, [sp, #4]
 80104a2:	9300      	str	r3, [sp, #0]
 80104a4:	4633      	mov	r3, r6
 80104a6:	462a      	mov	r2, r5
 80104a8:	4621      	mov	r1, r4
 80104aa:	f000 fe79 	bl	80111a0 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 80104ae:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d001      	beq.n	80104ba <compress_kitiku+0x1d2>
 80104b6:	23ff      	movs	r3, #255	; 0xff
 80104b8:	82fb      	strh	r3, [r7, #22]
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 80104ba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d001      	beq.n	80104c6 <compress_kitiku+0x1de>
 80104c2:	23ff      	movs	r3, #255	; 0xff
 80104c4:	82bb      	strh	r3, [r7, #20]
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 80104c6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d001      	beq.n	80104d2 <compress_kitiku+0x1ea>
 80104ce:	23ff      	movs	r3, #255	; 0xff
 80104d0:	823b      	strh	r3, [r7, #16]
		// 移動の優先順位 ： 前→右→左→後
		if (walk_count[x_now][y_now] <= 1) {
 80104d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d6:	4929      	ldr	r1, [pc, #164]	; (801057c <compress_kitiku+0x294>)
 80104d8:	0112      	lsls	r2, r2, #4
 80104da:	4413      	add	r3, r2
 80104dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80104e0:	2b01      	cmp	r3, #1
 80104e2:	f240 80a9 	bls.w	8010638 <compress_kitiku+0x350>
			//goal間近で停止
			break;
		}
		if (direction_now==1 && y_now>=14) {break;}
 80104e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104e8:	2b01      	cmp	r3, #1
 80104ea:	d103      	bne.n	80104f4 <compress_kitiku+0x20c>
 80104ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ee:	2b0d      	cmp	r3, #13
 80104f0:	f300 80a4 	bgt.w	801063c <compress_kitiku+0x354>
		if (direction_now==2 && x_now>=14) {break;}
 80104f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104f6:	2b02      	cmp	r3, #2
 80104f8:	d103      	bne.n	8010502 <compress_kitiku+0x21a>
 80104fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104fc:	2b0d      	cmp	r3, #13
 80104fe:	f300 809f 	bgt.w	8010640 <compress_kitiku+0x358>
		if (direction_now==3 && y_now<=1) {break;}
 8010502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010504:	2b03      	cmp	r3, #3
 8010506:	d103      	bne.n	8010510 <compress_kitiku+0x228>
 8010508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801050a:	2b01      	cmp	r3, #1
 801050c:	f340 809a 	ble.w	8010644 <compress_kitiku+0x35c>
		if (direction_now==4 && x_now<=1) {break;}
 8010510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010512:	2b04      	cmp	r3, #4
 8010514:	d103      	bne.n	801051e <compress_kitiku+0x236>
 8010516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010518:	2b01      	cmp	r3, #1
 801051a:	f340 8095 	ble.w	8010648 <compress_kitiku+0x360>
		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 801051e:	8afb      	ldrh	r3, [r7, #22]
 8010520:	2bff      	cmp	r3, #255	; 0xff
 8010522:	d10c      	bne.n	801053e <compress_kitiku+0x256>
 8010524:	8abb      	ldrh	r3, [r7, #20]
 8010526:	2bff      	cmp	r3, #255	; 0xff
 8010528:	d109      	bne.n	801053e <compress_kitiku+0x256>
 801052a:	8a3b      	ldrh	r3, [r7, #16]
 801052c:	2bff      	cmp	r3, #255	; 0xff
 801052e:	d106      	bne.n	801053e <compress_kitiku+0x256>
 8010530:	8a7b      	ldrh	r3, [r7, #18]
 8010532:	2bff      	cmp	r3, #255	; 0xff
 8010534:	d103      	bne.n	801053e <compress_kitiku+0x256>
		// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
			error_mode=1;
 8010536:	4b12      	ldr	r3, [pc, #72]	; (8010580 <compress_kitiku+0x298>)
 8010538:	2201      	movs	r2, #1
 801053a:	701a      	strb	r2, [r3, #0]
		break;
 801053c:	e087      	b.n	801064e <compress_kitiku+0x366>
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 801053e:	8afa      	ldrh	r2, [r7, #22]
 8010540:	8abb      	ldrh	r3, [r7, #20]
 8010542:	429a      	cmp	r2, r3
 8010544:	d81e      	bhi.n	8010584 <compress_kitiku+0x29c>
 8010546:	8afa      	ldrh	r2, [r7, #22]
 8010548:	8a3b      	ldrh	r3, [r7, #16]
 801054a:	429a      	cmp	r2, r3
 801054c:	d81a      	bhi.n	8010584 <compress_kitiku+0x29c>
 801054e:	8afa      	ldrh	r2, [r7, #22]
 8010550:	8a7b      	ldrh	r3, [r7, #18]
 8010552:	429a      	cmp	r2, r3
 8010554:	d816      	bhi.n	8010584 <compress_kitiku+0x29c>
		// 直進
			if(look_f){
 8010556:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801055a:	2b00      	cmp	r3, #0
 801055c:	d005      	beq.n	801056a <compress_kitiku+0x282>
				kitiku_distance += 2;
 801055e:	4b05      	ldr	r3, [pc, #20]	; (8010574 <compress_kitiku+0x28c>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	3302      	adds	r3, #2
 8010564:	4a03      	ldr	r2, [pc, #12]	; (8010574 <compress_kitiku+0x28c>)
 8010566:	6013      	str	r3, [r2, #0]
 8010568:	e00c      	b.n	8010584 <compress_kitiku+0x29c>
			}else{
				kitiku = 0;
 801056a:	4b03      	ldr	r3, [pc, #12]	; (8010578 <compress_kitiku+0x290>)
 801056c:	2200      	movs	r2, #0
 801056e:	701a      	strb	r2, [r3, #0]
				break;
 8010570:	e06d      	b.n	801064e <compress_kitiku+0x366>
 8010572:	bf00      	nop
 8010574:	20000830 	.word	0x20000830
 8010578:	2000082d 	.word	0x2000082d
 801057c:	20000d34 	.word	0x20000d34
 8010580:	2000080b 	.word	0x2000080b
			}
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 8010584:	8aba      	ldrh	r2, [r7, #20]
 8010586:	8afb      	ldrh	r3, [r7, #22]
 8010588:	429a      	cmp	r2, r3
 801058a:	d213      	bcs.n	80105b4 <compress_kitiku+0x2cc>
 801058c:	8aba      	ldrh	r2, [r7, #20]
 801058e:	8a3b      	ldrh	r3, [r7, #16]
 8010590:	429a      	cmp	r2, r3
 8010592:	d80f      	bhi.n	80105b4 <compress_kitiku+0x2cc>
 8010594:	8aba      	ldrh	r2, [r7, #20]
 8010596:	8a7b      	ldrh	r3, [r7, #18]
 8010598:	429a      	cmp	r2, r3
 801059a:	d80b      	bhi.n	80105b4 <compress_kitiku+0x2cc>
		// 右旋回
			if(look_r){
 801059c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d003      	beq.n	80105ac <compress_kitiku+0x2c4>
				kitiku = 0;
 80105a4:	4b40      	ldr	r3, [pc, #256]	; (80106a8 <compress_kitiku+0x3c0>)
 80105a6:	2200      	movs	r2, #0
 80105a8:	701a      	strb	r2, [r3, #0]
				break;
 80105aa:	e050      	b.n	801064e <compress_kitiku+0x366>
			}else{
				kitiku = 0;
 80105ac:	4b3e      	ldr	r3, [pc, #248]	; (80106a8 <compress_kitiku+0x3c0>)
 80105ae:	2200      	movs	r2, #0
 80105b0:	701a      	strb	r2, [r3, #0]
				break;
 80105b2:	e04c      	b.n	801064e <compress_kitiku+0x366>
			}
			direction_now++;
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 80105b4:	8a3a      	ldrh	r2, [r7, #16]
 80105b6:	8afb      	ldrh	r3, [r7, #22]
 80105b8:	429a      	cmp	r2, r3
 80105ba:	d213      	bcs.n	80105e4 <compress_kitiku+0x2fc>
 80105bc:	8a3a      	ldrh	r2, [r7, #16]
 80105be:	8abb      	ldrh	r3, [r7, #20]
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d20f      	bcs.n	80105e4 <compress_kitiku+0x2fc>
 80105c4:	8a3a      	ldrh	r2, [r7, #16]
 80105c6:	8a7b      	ldrh	r3, [r7, #18]
 80105c8:	429a      	cmp	r2, r3
 80105ca:	d80b      	bhi.n	80105e4 <compress_kitiku+0x2fc>
		// 左旋回
			if(look_l){
 80105cc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d003      	beq.n	80105dc <compress_kitiku+0x2f4>
				kitiku = 0;
 80105d4:	4b34      	ldr	r3, [pc, #208]	; (80106a8 <compress_kitiku+0x3c0>)
 80105d6:	2200      	movs	r2, #0
 80105d8:	701a      	strb	r2, [r3, #0]
				break;
 80105da:	e038      	b.n	801064e <compress_kitiku+0x366>
			}else{
				kitiku = 0;
 80105dc:	4b32      	ldr	r3, [pc, #200]	; (80106a8 <compress_kitiku+0x3c0>)
 80105de:	2200      	movs	r2, #0
 80105e0:	701a      	strb	r2, [r3, #0]
				break;
 80105e2:	e034      	b.n	801064e <compress_kitiku+0x366>
			}
			direction_now--;
		}
		if(back_count < front_count && back_count < right_count
 80105e4:	8a7a      	ldrh	r2, [r7, #18]
 80105e6:	8afb      	ldrh	r3, [r7, #22]
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d20b      	bcs.n	8010604 <compress_kitiku+0x31c>
 80105ec:	8a7a      	ldrh	r2, [r7, #18]
 80105ee:	8abb      	ldrh	r3, [r7, #20]
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d207      	bcs.n	8010604 <compress_kitiku+0x31c>
								&& back_count < left_count){
 80105f4:	8a7a      	ldrh	r2, [r7, #18]
 80105f6:	8a3b      	ldrh	r3, [r7, #16]
 80105f8:	429a      	cmp	r2, r3
 80105fa:	d203      	bcs.n	8010604 <compress_kitiku+0x31c>
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
			kitiku = 0;
 80105fc:	4b2a      	ldr	r3, [pc, #168]	; (80106a8 <compress_kitiku+0x3c0>)
 80105fe:	2200      	movs	r2, #0
 8010600:	701a      	strb	r2, [r3, #0]
			break;
 8010602:	e024      	b.n	801064e <compress_kitiku+0x366>
			direction_now+=2;
		}


		if (direction_now == 5) {
 8010604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010606:	2b05      	cmp	r3, #5
 8010608:	d101      	bne.n	801060e <compress_kitiku+0x326>
			direction_now = 1;
 801060a:	2301      	movs	r3, #1
 801060c:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == 6) {
 801060e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010610:	2b06      	cmp	r3, #6
 8010612:	d101      	bne.n	8010618 <compress_kitiku+0x330>
			direction_now = 2;
 8010614:	2302      	movs	r3, #2
 8010616:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == 0) {
 8010618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801061a:	2b00      	cmp	r3, #0
 801061c:	d101      	bne.n	8010622 <compress_kitiku+0x33a>
			direction_now = 4;
 801061e:	2304      	movs	r3, #4
 8010620:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == -1) {
 8010622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010628:	d101      	bne.n	801062e <compress_kitiku+0x346>
			direction_now = 3;
 801062a:	2303      	movs	r3, #3
 801062c:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (kitiku == 0) {
 801062e:	4b1e      	ldr	r3, [pc, #120]	; (80106a8 <compress_kitiku+0x3c0>)
 8010630:	781b      	ldrb	r3, [r3, #0]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d00a      	beq.n	801064c <compress_kitiku+0x364>
		update_coordinate(&x_now,&y_now,direction_now);
 8010636:	e66c      	b.n	8010312 <compress_kitiku+0x2a>
			break;
 8010638:	bf00      	nop
 801063a:	e008      	b.n	801064e <compress_kitiku+0x366>
		if (direction_now==1 && y_now>=14) {break;}
 801063c:	bf00      	nop
 801063e:	e006      	b.n	801064e <compress_kitiku+0x366>
		if (direction_now==2 && x_now>=14) {break;}
 8010640:	bf00      	nop
 8010642:	e004      	b.n	801064e <compress_kitiku+0x366>
		if (direction_now==3 && y_now<=1) {break;}
 8010644:	bf00      	nop
 8010646:	e002      	b.n	801064e <compress_kitiku+0x366>
		if (direction_now==4 && x_now<=1) {break;}
 8010648:	bf00      	nop
 801064a:	e000      	b.n	801064e <compress_kitiku+0x366>

			break;
 801064c:	bf00      	nop
		}

	}

	int direction2=direction_now+2;
 801064e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010650:	3302      	adds	r3, #2
 8010652:	643b      	str	r3, [r7, #64]	; 0x40
	if (direction2 == 5) {
 8010654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010656:	2b05      	cmp	r3, #5
 8010658:	d101      	bne.n	801065e <compress_kitiku+0x376>
				direction2 = 1;
 801065a:	2301      	movs	r3, #1
 801065c:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == 6) {
 801065e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010660:	2b06      	cmp	r3, #6
 8010662:	d101      	bne.n	8010668 <compress_kitiku+0x380>
				direction2 = 2;
 8010664:	2302      	movs	r3, #2
 8010666:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == 0) {
 8010668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801066a:	2b00      	cmp	r3, #0
 801066c:	d101      	bne.n	8010672 <compress_kitiku+0x38a>
				direction2 = 4;
 801066e:	2304      	movs	r3, #4
 8010670:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == -1) {
 8010672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010678:	d101      	bne.n	801067e <compress_kitiku+0x396>
				direction2 = 3;
 801067a:	2303      	movs	r3, #3
 801067c:	643b      	str	r3, [r7, #64]	; 0x40
			}

	update_coordinate(&x_now,&y_now,direction2);
 801067e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8010682:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010686:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010688:	4618      	mov	r0, r3
 801068a:	f7fd fa6f 	bl	800db6c <update_coordinate>

	*x=x_now;
 801068e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	601a      	str	r2, [r3, #0]
	*y=y_now;
 8010694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	601a      	str	r2, [r3, #0]
	*direction=direction_now;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801069e:	601a      	str	r2, [r3, #0]

}
 80106a0:	bf00      	nop
 80106a2:	3754      	adds	r7, #84	; 0x54
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106a8:	2000082d 	.word	0x2000082d

080106ac <update_wall>:

}



void update_wall(int x,int y,int direction,_Bool front_wall,_Bool right_wall,_Bool left_wall){
 80106ac:	b480      	push	{r7}
 80106ae:	b085      	sub	sp, #20
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	60f8      	str	r0, [r7, #12]
 80106b4:	60b9      	str	r1, [r7, #8]
 80106b6:	607a      	str	r2, [r7, #4]
 80106b8:	70fb      	strb	r3, [r7, #3]
// x:x座標, y:y座標, direction:向き(北1東2南3西4),
//front_wall:前壁の有無(Ture=1 false=0), right_wall:右壁の有無(Ture=1 false=0), left_wall:左壁の有無(Ture=1 false=0)

	switch (direction) {
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	3b01      	subs	r3, #1
 80106be:	2b03      	cmp	r3, #3
 80106c0:	f200 8272 	bhi.w	8010ba8 <update_wall+0x4fc>
 80106c4:	a201      	add	r2, pc, #4	; (adr r2, 80106cc <update_wall+0x20>)
 80106c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106ca:	bf00      	nop
 80106cc:	080106dd 	.word	0x080106dd
 80106d0:	08010803 	.word	0x08010803
 80106d4:	08010939 	.word	0x08010939
 80106d8:	08010a67 	.word	0x08010a67
	case 1:
		if (y <= 14) {
 80106dc:	68bb      	ldr	r3, [r7, #8]
 80106de:	2b0e      	cmp	r3, #14
 80106e0:	dc2e      	bgt.n	8010740 <update_wall+0x94>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 80106e2:	4a94      	ldr	r2, [pc, #592]	; (8010934 <update_wall+0x288>)
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	332c      	adds	r3, #44	; 0x2c
 80106e8:	005b      	lsls	r3, r3, #1
 80106ea:	4413      	add	r3, r2
 80106ec:	885b      	ldrh	r3, [r3, #2]
 80106ee:	b21a      	sxth	r2, r3
 80106f0:	2101      	movs	r1, #1
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	fa01 f303 	lsl.w	r3, r1, r3
 80106f8:	b21b      	sxth	r3, r3
 80106fa:	4313      	orrs	r3, r2
 80106fc:	b21b      	sxth	r3, r3
 80106fe:	b299      	uxth	r1, r3
 8010700:	4a8c      	ldr	r2, [pc, #560]	; (8010934 <update_wall+0x288>)
 8010702:	68bb      	ldr	r3, [r7, #8]
 8010704:	332c      	adds	r3, #44	; 0x2c
 8010706:	005b      	lsls	r3, r3, #1
 8010708:	4413      	add	r3, r2
 801070a:	460a      	mov	r2, r1
 801070c:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y] = wall.column[y] | (1 << x);}
 801070e:	78fb      	ldrb	r3, [r7, #3]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d015      	beq.n	8010740 <update_wall+0x94>
 8010714:	4a87      	ldr	r2, [pc, #540]	; (8010934 <update_wall+0x288>)
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	330c      	adds	r3, #12
 801071a:	005b      	lsls	r3, r3, #1
 801071c:	4413      	add	r3, r2
 801071e:	88db      	ldrh	r3, [r3, #6]
 8010720:	b21a      	sxth	r2, r3
 8010722:	2101      	movs	r1, #1
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	fa01 f303 	lsl.w	r3, r1, r3
 801072a:	b21b      	sxth	r3, r3
 801072c:	4313      	orrs	r3, r2
 801072e:	b21b      	sxth	r3, r3
 8010730:	b299      	uxth	r1, r3
 8010732:	4a80      	ldr	r2, [pc, #512]	; (8010934 <update_wall+0x288>)
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	330c      	adds	r3, #12
 8010738:	005b      	lsls	r3, r3, #1
 801073a:	4413      	add	r3, r2
 801073c:	460a      	mov	r2, r1
 801073e:	80da      	strh	r2, [r3, #6]
		}

		if (x >= 1) {
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	2b00      	cmp	r3, #0
 8010744:	dd2d      	ble.n	80107a2 <update_wall+0xf6>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	3b01      	subs	r3, #1
 801074a:	4a7a      	ldr	r2, [pc, #488]	; (8010934 <update_wall+0x288>)
 801074c:	331c      	adds	r3, #28
 801074e:	005b      	lsls	r3, r3, #1
 8010750:	4413      	add	r3, r2
 8010752:	889b      	ldrh	r3, [r3, #4]
 8010754:	b21a      	sxth	r2, r3
 8010756:	2101      	movs	r1, #1
 8010758:	68bb      	ldr	r3, [r7, #8]
 801075a:	fa01 f303 	lsl.w	r3, r1, r3
 801075e:	b21b      	sxth	r3, r3
 8010760:	4313      	orrs	r3, r2
 8010762:	b21a      	sxth	r2, r3
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	3b01      	subs	r3, #1
 8010768:	b291      	uxth	r1, r2
 801076a:	4a72      	ldr	r2, [pc, #456]	; (8010934 <update_wall+0x288>)
 801076c:	331c      	adds	r3, #28
 801076e:	005b      	lsls	r3, r3, #1
 8010770:	4413      	add	r3, r2
 8010772:	460a      	mov	r2, r1
 8010774:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010776:	7f3b      	ldrb	r3, [r7, #28]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d012      	beq.n	80107a2 <update_wall+0xf6>
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	3b01      	subs	r3, #1
 8010780:	4a6c      	ldr	r2, [pc, #432]	; (8010934 <update_wall+0x288>)
 8010782:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010786:	b21a      	sxth	r2, r3
 8010788:	2101      	movs	r1, #1
 801078a:	68bb      	ldr	r3, [r7, #8]
 801078c:	fa01 f303 	lsl.w	r3, r1, r3
 8010790:	b21b      	sxth	r3, r3
 8010792:	4313      	orrs	r3, r2
 8010794:	b21a      	sxth	r2, r3
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	3b01      	subs	r3, #1
 801079a:	b291      	uxth	r1, r2
 801079c:	4a65      	ldr	r2, [pc, #404]	; (8010934 <update_wall+0x288>)
 801079e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x <= 14) {
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	2b0e      	cmp	r3, #14
 80107a6:	f300 81f8 	bgt.w	8010b9a <update_wall+0x4ee>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 80107aa:	4a62      	ldr	r2, [pc, #392]	; (8010934 <update_wall+0x288>)
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	331c      	adds	r3, #28
 80107b0:	005b      	lsls	r3, r3, #1
 80107b2:	4413      	add	r3, r2
 80107b4:	889b      	ldrh	r3, [r3, #4]
 80107b6:	b21a      	sxth	r2, r3
 80107b8:	2101      	movs	r1, #1
 80107ba:	68bb      	ldr	r3, [r7, #8]
 80107bc:	fa01 f303 	lsl.w	r3, r1, r3
 80107c0:	b21b      	sxth	r3, r3
 80107c2:	4313      	orrs	r3, r2
 80107c4:	b21b      	sxth	r3, r3
 80107c6:	b299      	uxth	r1, r3
 80107c8:	4a5a      	ldr	r2, [pc, #360]	; (8010934 <update_wall+0x288>)
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	331c      	adds	r3, #28
 80107ce:	005b      	lsls	r3, r3, #1
 80107d0:	4413      	add	r3, r2
 80107d2:	460a      	mov	r2, r1
 80107d4:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x] = wall.row[x] | (1 << y);}
 80107d6:	7e3b      	ldrb	r3, [r7, #24]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	f000 81de 	beq.w	8010b9a <update_wall+0x4ee>
 80107de:	4a55      	ldr	r2, [pc, #340]	; (8010934 <update_wall+0x288>)
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80107e6:	b21a      	sxth	r2, r3
 80107e8:	2101      	movs	r1, #1
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	fa01 f303 	lsl.w	r3, r1, r3
 80107f0:	b21b      	sxth	r3, r3
 80107f2:	4313      	orrs	r3, r2
 80107f4:	b21b      	sxth	r3, r3
 80107f6:	b299      	uxth	r1, r3
 80107f8:	4a4e      	ldr	r2, [pc, #312]	; (8010934 <update_wall+0x288>)
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 8010800:	e1cb      	b.n	8010b9a <update_wall+0x4ee>
	case 2:
		if (x <= 14) {
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	2b0e      	cmp	r3, #14
 8010806:	dc29      	bgt.n	801085c <update_wall+0x1b0>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8010808:	4a4a      	ldr	r2, [pc, #296]	; (8010934 <update_wall+0x288>)
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	331c      	adds	r3, #28
 801080e:	005b      	lsls	r3, r3, #1
 8010810:	4413      	add	r3, r2
 8010812:	889b      	ldrh	r3, [r3, #4]
 8010814:	b21a      	sxth	r2, r3
 8010816:	2101      	movs	r1, #1
 8010818:	68bb      	ldr	r3, [r7, #8]
 801081a:	fa01 f303 	lsl.w	r3, r1, r3
 801081e:	b21b      	sxth	r3, r3
 8010820:	4313      	orrs	r3, r2
 8010822:	b21b      	sxth	r3, r3
 8010824:	b299      	uxth	r1, r3
 8010826:	4a43      	ldr	r2, [pc, #268]	; (8010934 <update_wall+0x288>)
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	331c      	adds	r3, #28
 801082c:	005b      	lsls	r3, r3, #1
 801082e:	4413      	add	r3, r2
 8010830:	460a      	mov	r2, r1
 8010832:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010834:	78fb      	ldrb	r3, [r7, #3]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d010      	beq.n	801085c <update_wall+0x1b0>
 801083a:	4a3e      	ldr	r2, [pc, #248]	; (8010934 <update_wall+0x288>)
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010842:	b21a      	sxth	r2, r3
 8010844:	2101      	movs	r1, #1
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	fa01 f303 	lsl.w	r3, r1, r3
 801084c:	b21b      	sxth	r3, r3
 801084e:	4313      	orrs	r3, r2
 8010850:	b21b      	sxth	r3, r3
 8010852:	b299      	uxth	r1, r3
 8010854:	4a37      	ldr	r2, [pc, #220]	; (8010934 <update_wall+0x288>)
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y <= 14) {
 801085c:	68bb      	ldr	r3, [r7, #8]
 801085e:	2b0e      	cmp	r3, #14
 8010860:	dc2e      	bgt.n	80108c0 <update_wall+0x214>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8010862:	4a34      	ldr	r2, [pc, #208]	; (8010934 <update_wall+0x288>)
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	332c      	adds	r3, #44	; 0x2c
 8010868:	005b      	lsls	r3, r3, #1
 801086a:	4413      	add	r3, r2
 801086c:	885b      	ldrh	r3, [r3, #2]
 801086e:	b21a      	sxth	r2, r3
 8010870:	2101      	movs	r1, #1
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	fa01 f303 	lsl.w	r3, r1, r3
 8010878:	b21b      	sxth	r3, r3
 801087a:	4313      	orrs	r3, r2
 801087c:	b21b      	sxth	r3, r3
 801087e:	b299      	uxth	r1, r3
 8010880:	4a2c      	ldr	r2, [pc, #176]	; (8010934 <update_wall+0x288>)
 8010882:	68bb      	ldr	r3, [r7, #8]
 8010884:	332c      	adds	r3, #44	; 0x2c
 8010886:	005b      	lsls	r3, r3, #1
 8010888:	4413      	add	r3, r2
 801088a:	460a      	mov	r2, r1
 801088c:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y] = wall.column[y] | (1 << x);}
 801088e:	7f3b      	ldrb	r3, [r7, #28]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d015      	beq.n	80108c0 <update_wall+0x214>
 8010894:	4a27      	ldr	r2, [pc, #156]	; (8010934 <update_wall+0x288>)
 8010896:	68bb      	ldr	r3, [r7, #8]
 8010898:	330c      	adds	r3, #12
 801089a:	005b      	lsls	r3, r3, #1
 801089c:	4413      	add	r3, r2
 801089e:	88db      	ldrh	r3, [r3, #6]
 80108a0:	b21a      	sxth	r2, r3
 80108a2:	2101      	movs	r1, #1
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	fa01 f303 	lsl.w	r3, r1, r3
 80108aa:	b21b      	sxth	r3, r3
 80108ac:	4313      	orrs	r3, r2
 80108ae:	b21b      	sxth	r3, r3
 80108b0:	b299      	uxth	r1, r3
 80108b2:	4a20      	ldr	r2, [pc, #128]	; (8010934 <update_wall+0x288>)
 80108b4:	68bb      	ldr	r3, [r7, #8]
 80108b6:	330c      	adds	r3, #12
 80108b8:	005b      	lsls	r3, r3, #1
 80108ba:	4413      	add	r3, r2
 80108bc:	460a      	mov	r2, r1
 80108be:	80da      	strh	r2, [r3, #6]
		}

		if (y >= 1) {
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	f340 816b 	ble.w	8010b9e <update_wall+0x4f2>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 80108c8:	68bb      	ldr	r3, [r7, #8]
 80108ca:	3b01      	subs	r3, #1
 80108cc:	4a19      	ldr	r2, [pc, #100]	; (8010934 <update_wall+0x288>)
 80108ce:	332c      	adds	r3, #44	; 0x2c
 80108d0:	005b      	lsls	r3, r3, #1
 80108d2:	4413      	add	r3, r2
 80108d4:	885b      	ldrh	r3, [r3, #2]
 80108d6:	b21a      	sxth	r2, r3
 80108d8:	2101      	movs	r1, #1
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	fa01 f303 	lsl.w	r3, r1, r3
 80108e0:	b21b      	sxth	r3, r3
 80108e2:	4313      	orrs	r3, r2
 80108e4:	b21a      	sxth	r2, r3
 80108e6:	68bb      	ldr	r3, [r7, #8]
 80108e8:	3b01      	subs	r3, #1
 80108ea:	b291      	uxth	r1, r2
 80108ec:	4a11      	ldr	r2, [pc, #68]	; (8010934 <update_wall+0x288>)
 80108ee:	332c      	adds	r3, #44	; 0x2c
 80108f0:	005b      	lsls	r3, r3, #1
 80108f2:	4413      	add	r3, r2
 80108f4:	460a      	mov	r2, r1
 80108f6:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 80108f8:	7e3b      	ldrb	r3, [r7, #24]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	f000 814f 	beq.w	8010b9e <update_wall+0x4f2>
 8010900:	68bb      	ldr	r3, [r7, #8]
 8010902:	3b01      	subs	r3, #1
 8010904:	4a0b      	ldr	r2, [pc, #44]	; (8010934 <update_wall+0x288>)
 8010906:	330c      	adds	r3, #12
 8010908:	005b      	lsls	r3, r3, #1
 801090a:	4413      	add	r3, r2
 801090c:	88db      	ldrh	r3, [r3, #6]
 801090e:	b21a      	sxth	r2, r3
 8010910:	2101      	movs	r1, #1
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	fa01 f303 	lsl.w	r3, r1, r3
 8010918:	b21b      	sxth	r3, r3
 801091a:	4313      	orrs	r3, r2
 801091c:	b21a      	sxth	r2, r3
 801091e:	68bb      	ldr	r3, [r7, #8]
 8010920:	3b01      	subs	r3, #1
 8010922:	b291      	uxth	r1, r2
 8010924:	4a03      	ldr	r2, [pc, #12]	; (8010934 <update_wall+0x288>)
 8010926:	330c      	adds	r3, #12
 8010928:	005b      	lsls	r3, r3, #1
 801092a:	4413      	add	r3, r2
 801092c:	460a      	mov	r2, r1
 801092e:	80da      	strh	r2, [r3, #6]
		}

		break;
 8010930:	e135      	b.n	8010b9e <update_wall+0x4f2>
 8010932:	bf00      	nop
 8010934:	20000c40 	.word	0x20000c40
	case 3:
		if (y >= 1) {
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	2b00      	cmp	r3, #0
 801093c:	dd32      	ble.n	80109a4 <update_wall+0x2f8>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 801093e:	68bb      	ldr	r3, [r7, #8]
 8010940:	3b01      	subs	r3, #1
 8010942:	4a9c      	ldr	r2, [pc, #624]	; (8010bb4 <update_wall+0x508>)
 8010944:	332c      	adds	r3, #44	; 0x2c
 8010946:	005b      	lsls	r3, r3, #1
 8010948:	4413      	add	r3, r2
 801094a:	885b      	ldrh	r3, [r3, #2]
 801094c:	b21a      	sxth	r2, r3
 801094e:	2101      	movs	r1, #1
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	fa01 f303 	lsl.w	r3, r1, r3
 8010956:	b21b      	sxth	r3, r3
 8010958:	4313      	orrs	r3, r2
 801095a:	b21a      	sxth	r2, r3
 801095c:	68bb      	ldr	r3, [r7, #8]
 801095e:	3b01      	subs	r3, #1
 8010960:	b291      	uxth	r1, r2
 8010962:	4a94      	ldr	r2, [pc, #592]	; (8010bb4 <update_wall+0x508>)
 8010964:	332c      	adds	r3, #44	; 0x2c
 8010966:	005b      	lsls	r3, r3, #1
 8010968:	4413      	add	r3, r2
 801096a:	460a      	mov	r2, r1
 801096c:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 801096e:	78fb      	ldrb	r3, [r7, #3]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d017      	beq.n	80109a4 <update_wall+0x2f8>
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	3b01      	subs	r3, #1
 8010978:	4a8e      	ldr	r2, [pc, #568]	; (8010bb4 <update_wall+0x508>)
 801097a:	330c      	adds	r3, #12
 801097c:	005b      	lsls	r3, r3, #1
 801097e:	4413      	add	r3, r2
 8010980:	88db      	ldrh	r3, [r3, #6]
 8010982:	b21a      	sxth	r2, r3
 8010984:	2101      	movs	r1, #1
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	fa01 f303 	lsl.w	r3, r1, r3
 801098c:	b21b      	sxth	r3, r3
 801098e:	4313      	orrs	r3, r2
 8010990:	b21a      	sxth	r2, r3
 8010992:	68bb      	ldr	r3, [r7, #8]
 8010994:	3b01      	subs	r3, #1
 8010996:	b291      	uxth	r1, r2
 8010998:	4a86      	ldr	r2, [pc, #536]	; (8010bb4 <update_wall+0x508>)
 801099a:	330c      	adds	r3, #12
 801099c:	005b      	lsls	r3, r3, #1
 801099e:	4413      	add	r3, r2
 80109a0:	460a      	mov	r2, r1
 80109a2:	80da      	strh	r2, [r3, #6]
		}

		if (x <= 14) {
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	2b0e      	cmp	r3, #14
 80109a8:	dc29      	bgt.n	80109fe <update_wall+0x352>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 80109aa:	4a82      	ldr	r2, [pc, #520]	; (8010bb4 <update_wall+0x508>)
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	331c      	adds	r3, #28
 80109b0:	005b      	lsls	r3, r3, #1
 80109b2:	4413      	add	r3, r2
 80109b4:	889b      	ldrh	r3, [r3, #4]
 80109b6:	b21a      	sxth	r2, r3
 80109b8:	2101      	movs	r1, #1
 80109ba:	68bb      	ldr	r3, [r7, #8]
 80109bc:	fa01 f303 	lsl.w	r3, r1, r3
 80109c0:	b21b      	sxth	r3, r3
 80109c2:	4313      	orrs	r3, r2
 80109c4:	b21b      	sxth	r3, r3
 80109c6:	b299      	uxth	r1, r3
 80109c8:	4a7a      	ldr	r2, [pc, #488]	; (8010bb4 <update_wall+0x508>)
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	331c      	adds	r3, #28
 80109ce:	005b      	lsls	r3, r3, #1
 80109d0:	4413      	add	r3, r2
 80109d2:	460a      	mov	r2, r1
 80109d4:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x] = wall.row[x] | (1 << y);}
 80109d6:	7f3b      	ldrb	r3, [r7, #28]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d010      	beq.n	80109fe <update_wall+0x352>
 80109dc:	4a75      	ldr	r2, [pc, #468]	; (8010bb4 <update_wall+0x508>)
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80109e4:	b21a      	sxth	r2, r3
 80109e6:	2101      	movs	r1, #1
 80109e8:	68bb      	ldr	r3, [r7, #8]
 80109ea:	fa01 f303 	lsl.w	r3, r1, r3
 80109ee:	b21b      	sxth	r3, r3
 80109f0:	4313      	orrs	r3, r2
 80109f2:	b21b      	sxth	r3, r3
 80109f4:	b299      	uxth	r1, r3
 80109f6:	4a6f      	ldr	r2, [pc, #444]	; (8010bb4 <update_wall+0x508>)
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x >= 1) {
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	f340 80ce 	ble.w	8010ba2 <update_wall+0x4f6>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	3b01      	subs	r3, #1
 8010a0a:	4a6a      	ldr	r2, [pc, #424]	; (8010bb4 <update_wall+0x508>)
 8010a0c:	331c      	adds	r3, #28
 8010a0e:	005b      	lsls	r3, r3, #1
 8010a10:	4413      	add	r3, r2
 8010a12:	889b      	ldrh	r3, [r3, #4]
 8010a14:	b21a      	sxth	r2, r3
 8010a16:	2101      	movs	r1, #1
 8010a18:	68bb      	ldr	r3, [r7, #8]
 8010a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8010a1e:	b21b      	sxth	r3, r3
 8010a20:	4313      	orrs	r3, r2
 8010a22:	b21a      	sxth	r2, r3
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	3b01      	subs	r3, #1
 8010a28:	b291      	uxth	r1, r2
 8010a2a:	4a62      	ldr	r2, [pc, #392]	; (8010bb4 <update_wall+0x508>)
 8010a2c:	331c      	adds	r3, #28
 8010a2e:	005b      	lsls	r3, r3, #1
 8010a30:	4413      	add	r3, r2
 8010a32:	460a      	mov	r2, r1
 8010a34:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010a36:	7e3b      	ldrb	r3, [r7, #24]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	f000 80b2 	beq.w	8010ba2 <update_wall+0x4f6>
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	3b01      	subs	r3, #1
 8010a42:	4a5c      	ldr	r2, [pc, #368]	; (8010bb4 <update_wall+0x508>)
 8010a44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a48:	b21a      	sxth	r2, r3
 8010a4a:	2101      	movs	r1, #1
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8010a52:	b21b      	sxth	r3, r3
 8010a54:	4313      	orrs	r3, r2
 8010a56:	b21a      	sxth	r2, r3
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	3b01      	subs	r3, #1
 8010a5c:	b291      	uxth	r1, r2
 8010a5e:	4a55      	ldr	r2, [pc, #340]	; (8010bb4 <update_wall+0x508>)
 8010a60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 8010a64:	e09d      	b.n	8010ba2 <update_wall+0x4f6>
	case 4:
		if (x >= 1) {
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	dd2d      	ble.n	8010ac8 <update_wall+0x41c>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	3b01      	subs	r3, #1
 8010a70:	4a50      	ldr	r2, [pc, #320]	; (8010bb4 <update_wall+0x508>)
 8010a72:	331c      	adds	r3, #28
 8010a74:	005b      	lsls	r3, r3, #1
 8010a76:	4413      	add	r3, r2
 8010a78:	889b      	ldrh	r3, [r3, #4]
 8010a7a:	b21a      	sxth	r2, r3
 8010a7c:	2101      	movs	r1, #1
 8010a7e:	68bb      	ldr	r3, [r7, #8]
 8010a80:	fa01 f303 	lsl.w	r3, r1, r3
 8010a84:	b21b      	sxth	r3, r3
 8010a86:	4313      	orrs	r3, r2
 8010a88:	b21a      	sxth	r2, r3
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	3b01      	subs	r3, #1
 8010a8e:	b291      	uxth	r1, r2
 8010a90:	4a48      	ldr	r2, [pc, #288]	; (8010bb4 <update_wall+0x508>)
 8010a92:	331c      	adds	r3, #28
 8010a94:	005b      	lsls	r3, r3, #1
 8010a96:	4413      	add	r3, r2
 8010a98:	460a      	mov	r2, r1
 8010a9a:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010a9c:	78fb      	ldrb	r3, [r7, #3]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d012      	beq.n	8010ac8 <update_wall+0x41c>
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	3b01      	subs	r3, #1
 8010aa6:	4a43      	ldr	r2, [pc, #268]	; (8010bb4 <update_wall+0x508>)
 8010aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010aac:	b21a      	sxth	r2, r3
 8010aae:	2101      	movs	r1, #1
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8010ab6:	b21b      	sxth	r3, r3
 8010ab8:	4313      	orrs	r3, r2
 8010aba:	b21a      	sxth	r2, r3
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	3b01      	subs	r3, #1
 8010ac0:	b291      	uxth	r1, r2
 8010ac2:	4a3c      	ldr	r2, [pc, #240]	; (8010bb4 <update_wall+0x508>)
 8010ac4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y >= 1) {
 8010ac8:	68bb      	ldr	r3, [r7, #8]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	dd32      	ble.n	8010b34 <update_wall+0x488>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010ace:	68bb      	ldr	r3, [r7, #8]
 8010ad0:	3b01      	subs	r3, #1
 8010ad2:	4a38      	ldr	r2, [pc, #224]	; (8010bb4 <update_wall+0x508>)
 8010ad4:	332c      	adds	r3, #44	; 0x2c
 8010ad6:	005b      	lsls	r3, r3, #1
 8010ad8:	4413      	add	r3, r2
 8010ada:	885b      	ldrh	r3, [r3, #2]
 8010adc:	b21a      	sxth	r2, r3
 8010ade:	2101      	movs	r1, #1
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8010ae6:	b21b      	sxth	r3, r3
 8010ae8:	4313      	orrs	r3, r2
 8010aea:	b21a      	sxth	r2, r3
 8010aec:	68bb      	ldr	r3, [r7, #8]
 8010aee:	3b01      	subs	r3, #1
 8010af0:	b291      	uxth	r1, r2
 8010af2:	4a30      	ldr	r2, [pc, #192]	; (8010bb4 <update_wall+0x508>)
 8010af4:	332c      	adds	r3, #44	; 0x2c
 8010af6:	005b      	lsls	r3, r3, #1
 8010af8:	4413      	add	r3, r2
 8010afa:	460a      	mov	r2, r1
 8010afc:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010afe:	7f3b      	ldrb	r3, [r7, #28]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d017      	beq.n	8010b34 <update_wall+0x488>
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	3b01      	subs	r3, #1
 8010b08:	4a2a      	ldr	r2, [pc, #168]	; (8010bb4 <update_wall+0x508>)
 8010b0a:	330c      	adds	r3, #12
 8010b0c:	005b      	lsls	r3, r3, #1
 8010b0e:	4413      	add	r3, r2
 8010b10:	88db      	ldrh	r3, [r3, #6]
 8010b12:	b21a      	sxth	r2, r3
 8010b14:	2101      	movs	r1, #1
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	fa01 f303 	lsl.w	r3, r1, r3
 8010b1c:	b21b      	sxth	r3, r3
 8010b1e:	4313      	orrs	r3, r2
 8010b20:	b21a      	sxth	r2, r3
 8010b22:	68bb      	ldr	r3, [r7, #8]
 8010b24:	3b01      	subs	r3, #1
 8010b26:	b291      	uxth	r1, r2
 8010b28:	4a22      	ldr	r2, [pc, #136]	; (8010bb4 <update_wall+0x508>)
 8010b2a:	330c      	adds	r3, #12
 8010b2c:	005b      	lsls	r3, r3, #1
 8010b2e:	4413      	add	r3, r2
 8010b30:	460a      	mov	r2, r1
 8010b32:	80da      	strh	r2, [r3, #6]
		}

		if (y <= 14) {
 8010b34:	68bb      	ldr	r3, [r7, #8]
 8010b36:	2b0e      	cmp	r3, #14
 8010b38:	dc35      	bgt.n	8010ba6 <update_wall+0x4fa>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8010b3a:	4a1e      	ldr	r2, [pc, #120]	; (8010bb4 <update_wall+0x508>)
 8010b3c:	68bb      	ldr	r3, [r7, #8]
 8010b3e:	332c      	adds	r3, #44	; 0x2c
 8010b40:	005b      	lsls	r3, r3, #1
 8010b42:	4413      	add	r3, r2
 8010b44:	885b      	ldrh	r3, [r3, #2]
 8010b46:	b21a      	sxth	r2, r3
 8010b48:	2101      	movs	r1, #1
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8010b50:	b21b      	sxth	r3, r3
 8010b52:	4313      	orrs	r3, r2
 8010b54:	b21b      	sxth	r3, r3
 8010b56:	b299      	uxth	r1, r3
 8010b58:	4a16      	ldr	r2, [pc, #88]	; (8010bb4 <update_wall+0x508>)
 8010b5a:	68bb      	ldr	r3, [r7, #8]
 8010b5c:	332c      	adds	r3, #44	; 0x2c
 8010b5e:	005b      	lsls	r3, r3, #1
 8010b60:	4413      	add	r3, r2
 8010b62:	460a      	mov	r2, r1
 8010b64:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y] = wall.column[y] | (1 << x);}
 8010b66:	7e3b      	ldrb	r3, [r7, #24]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d01c      	beq.n	8010ba6 <update_wall+0x4fa>
 8010b6c:	4a11      	ldr	r2, [pc, #68]	; (8010bb4 <update_wall+0x508>)
 8010b6e:	68bb      	ldr	r3, [r7, #8]
 8010b70:	330c      	adds	r3, #12
 8010b72:	005b      	lsls	r3, r3, #1
 8010b74:	4413      	add	r3, r2
 8010b76:	88db      	ldrh	r3, [r3, #6]
 8010b78:	b21a      	sxth	r2, r3
 8010b7a:	2101      	movs	r1, #1
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8010b82:	b21b      	sxth	r3, r3
 8010b84:	4313      	orrs	r3, r2
 8010b86:	b21b      	sxth	r3, r3
 8010b88:	b299      	uxth	r1, r3
 8010b8a:	4a0a      	ldr	r2, [pc, #40]	; (8010bb4 <update_wall+0x508>)
 8010b8c:	68bb      	ldr	r3, [r7, #8]
 8010b8e:	330c      	adds	r3, #12
 8010b90:	005b      	lsls	r3, r3, #1
 8010b92:	4413      	add	r3, r2
 8010b94:	460a      	mov	r2, r1
 8010b96:	80da      	strh	r2, [r3, #6]
		}

		break;
 8010b98:	e005      	b.n	8010ba6 <update_wall+0x4fa>
		break;
 8010b9a:	bf00      	nop
 8010b9c:	e004      	b.n	8010ba8 <update_wall+0x4fc>
		break;
 8010b9e:	bf00      	nop
 8010ba0:	e002      	b.n	8010ba8 <update_wall+0x4fc>
		break;
 8010ba2:	bf00      	nop
 8010ba4:	e000      	b.n	8010ba8 <update_wall+0x4fc>
		break;
 8010ba6:	bf00      	nop

	}


}
 8010ba8:	bf00      	nop
 8010baa:	3714      	adds	r7, #20
 8010bac:	46bd      	mov	sp, r7
 8010bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb2:	4770      	bx	lr
 8010bb4:	20000c40 	.word	0x20000c40

08010bb8 <get_wall>:



void get_wall(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 8010bb8:	b480      	push	{r7}
 8010bba:	b085      	sub	sp, #20
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	60f8      	str	r0, [r7, #12]
 8010bc0:	60b9      	str	r1, [r7, #8]
 8010bc2:	607a      	str	r2, [r7, #4]
 8010bc4:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	2201      	movs	r2, #1
 8010bca:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 8010bcc:	69bb      	ldr	r3, [r7, #24]
 8010bce:	2201      	movs	r2, #1
 8010bd0:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 8010bd2:	69fb      	ldr	r3, [r7, #28]
 8010bd4:	2201      	movs	r2, #1
 8010bd6:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	3b01      	subs	r3, #1
 8010bdc:	2b03      	cmp	r3, #3
 8010bde:	f200 8156 	bhi.w	8010e8e <get_wall+0x2d6>
 8010be2:	a201      	add	r2, pc, #4	; (adr r2, 8010be8 <get_wall+0x30>)
 8010be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010be8:	08010bf9 	.word	0x08010bf9
 8010bec:	08010c99 	.word	0x08010c99
 8010bf0:	08010d3d 	.word	0x08010d3d
 8010bf4:	08010ddd 	.word	0x08010ddd
	case 1:
		if (y <= 14) {
 8010bf8:	68bb      	ldr	r3, [r7, #8]
 8010bfa:	2b0e      	cmp	r3, #14
 8010bfc:	dc17      	bgt.n	8010c2e <get_wall+0x76>
			*front_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8010bfe:	4aa7      	ldr	r2, [pc, #668]	; (8010e9c <get_wall+0x2e4>)
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	330c      	adds	r3, #12
 8010c04:	005b      	lsls	r3, r3, #1
 8010c06:	4413      	add	r3, r2
 8010c08:	88db      	ldrh	r3, [r3, #6]
 8010c0a:	4619      	mov	r1, r3
 8010c0c:	2201      	movs	r2, #1
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	fa02 f303 	lsl.w	r3, r2, r3
 8010c14:	ea01 0203 	and.w	r2, r1, r3
 8010c18:	2101      	movs	r1, #1
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8010c20:	429a      	cmp	r2, r3
 8010c22:	bf0c      	ite	eq
 8010c24:	2301      	moveq	r3, #1
 8010c26:	2300      	movne	r3, #0
 8010c28:	b2da      	uxtb	r2, r3
 8010c2a:	683b      	ldr	r3, [r7, #0]
 8010c2c:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	dd16      	ble.n	8010c62 <get_wall+0xaa>
			*left_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	3b01      	subs	r3, #1
 8010c38:	4a98      	ldr	r2, [pc, #608]	; (8010e9c <get_wall+0x2e4>)
 8010c3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c3e:	4619      	mov	r1, r3
 8010c40:	2201      	movs	r2, #1
 8010c42:	68bb      	ldr	r3, [r7, #8]
 8010c44:	fa02 f303 	lsl.w	r3, r2, r3
 8010c48:	ea01 0203 	and.w	r2, r1, r3
 8010c4c:	2101      	movs	r1, #1
 8010c4e:	68bb      	ldr	r3, [r7, #8]
 8010c50:	fa01 f303 	lsl.w	r3, r1, r3
 8010c54:	429a      	cmp	r2, r3
 8010c56:	bf0c      	ite	eq
 8010c58:	2301      	moveq	r3, #1
 8010c5a:	2300      	movne	r3, #0
 8010c5c:	b2da      	uxtb	r2, r3
 8010c5e:	69fb      	ldr	r3, [r7, #28]
 8010c60:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	2b0e      	cmp	r3, #14
 8010c66:	f300 810b 	bgt.w	8010e80 <get_wall+0x2c8>
			*right_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8010c6a:	4a8c      	ldr	r2, [pc, #560]	; (8010e9c <get_wall+0x2e4>)
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c72:	4619      	mov	r1, r3
 8010c74:	2201      	movs	r2, #1
 8010c76:	68bb      	ldr	r3, [r7, #8]
 8010c78:	fa02 f303 	lsl.w	r3, r2, r3
 8010c7c:	ea01 0203 	and.w	r2, r1, r3
 8010c80:	2101      	movs	r1, #1
 8010c82:	68bb      	ldr	r3, [r7, #8]
 8010c84:	fa01 f303 	lsl.w	r3, r1, r3
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	bf0c      	ite	eq
 8010c8c:	2301      	moveq	r3, #1
 8010c8e:	2300      	movne	r3, #0
 8010c90:	b2da      	uxtb	r2, r3
 8010c92:	69bb      	ldr	r3, [r7, #24]
 8010c94:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010c96:	e0f3      	b.n	8010e80 <get_wall+0x2c8>
	case 2:
		if (x <= 14) {
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	2b0e      	cmp	r3, #14
 8010c9c:	dc15      	bgt.n	8010cca <get_wall+0x112>
			*front_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8010c9e:	4a7f      	ldr	r2, [pc, #508]	; (8010e9c <get_wall+0x2e4>)
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ca6:	4619      	mov	r1, r3
 8010ca8:	2201      	movs	r2, #1
 8010caa:	68bb      	ldr	r3, [r7, #8]
 8010cac:	fa02 f303 	lsl.w	r3, r2, r3
 8010cb0:	ea01 0203 	and.w	r2, r1, r3
 8010cb4:	2101      	movs	r1, #1
 8010cb6:	68bb      	ldr	r3, [r7, #8]
 8010cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8010cbc:	429a      	cmp	r2, r3
 8010cbe:	bf0c      	ite	eq
 8010cc0:	2301      	moveq	r3, #1
 8010cc2:	2300      	movne	r3, #0
 8010cc4:	b2da      	uxtb	r2, r3
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8010cca:	68bb      	ldr	r3, [r7, #8]
 8010ccc:	2b0e      	cmp	r3, #14
 8010cce:	dc17      	bgt.n	8010d00 <get_wall+0x148>
			*left_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8010cd0:	4a72      	ldr	r2, [pc, #456]	; (8010e9c <get_wall+0x2e4>)
 8010cd2:	68bb      	ldr	r3, [r7, #8]
 8010cd4:	330c      	adds	r3, #12
 8010cd6:	005b      	lsls	r3, r3, #1
 8010cd8:	4413      	add	r3, r2
 8010cda:	88db      	ldrh	r3, [r3, #6]
 8010cdc:	4619      	mov	r1, r3
 8010cde:	2201      	movs	r2, #1
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8010ce6:	ea01 0203 	and.w	r2, r1, r3
 8010cea:	2101      	movs	r1, #1
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	fa01 f303 	lsl.w	r3, r1, r3
 8010cf2:	429a      	cmp	r2, r3
 8010cf4:	bf0c      	ite	eq
 8010cf6:	2301      	moveq	r3, #1
 8010cf8:	2300      	movne	r3, #0
 8010cfa:	b2da      	uxtb	r2, r3
 8010cfc:	69fb      	ldr	r3, [r7, #28]
 8010cfe:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8010d00:	68bb      	ldr	r3, [r7, #8]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	f340 80be 	ble.w	8010e84 <get_wall+0x2cc>
			*right_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 8010d08:	68bb      	ldr	r3, [r7, #8]
 8010d0a:	3b01      	subs	r3, #1
 8010d0c:	4a63      	ldr	r2, [pc, #396]	; (8010e9c <get_wall+0x2e4>)
 8010d0e:	330c      	adds	r3, #12
 8010d10:	005b      	lsls	r3, r3, #1
 8010d12:	4413      	add	r3, r2
 8010d14:	88db      	ldrh	r3, [r3, #6]
 8010d16:	4619      	mov	r1, r3
 8010d18:	2201      	movs	r2, #1
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8010d20:	ea01 0203 	and.w	r2, r1, r3
 8010d24:	2101      	movs	r1, #1
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	fa01 f303 	lsl.w	r3, r1, r3
 8010d2c:	429a      	cmp	r2, r3
 8010d2e:	bf0c      	ite	eq
 8010d30:	2301      	moveq	r3, #1
 8010d32:	2300      	movne	r3, #0
 8010d34:	b2da      	uxtb	r2, r3
 8010d36:	69bb      	ldr	r3, [r7, #24]
 8010d38:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010d3a:	e0a3      	b.n	8010e84 <get_wall+0x2cc>
	case 3:
		if (y >= 1) {
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	dd18      	ble.n	8010d74 <get_wall+0x1bc>
			*front_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 8010d42:	68bb      	ldr	r3, [r7, #8]
 8010d44:	3b01      	subs	r3, #1
 8010d46:	4a55      	ldr	r2, [pc, #340]	; (8010e9c <get_wall+0x2e4>)
 8010d48:	330c      	adds	r3, #12
 8010d4a:	005b      	lsls	r3, r3, #1
 8010d4c:	4413      	add	r3, r2
 8010d4e:	88db      	ldrh	r3, [r3, #6]
 8010d50:	4619      	mov	r1, r3
 8010d52:	2201      	movs	r2, #1
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	fa02 f303 	lsl.w	r3, r2, r3
 8010d5a:	ea01 0203 	and.w	r2, r1, r3
 8010d5e:	2101      	movs	r1, #1
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	fa01 f303 	lsl.w	r3, r1, r3
 8010d66:	429a      	cmp	r2, r3
 8010d68:	bf0c      	ite	eq
 8010d6a:	2301      	moveq	r3, #1
 8010d6c:	2300      	movne	r3, #0
 8010d6e:	b2da      	uxtb	r2, r3
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	2b0e      	cmp	r3, #14
 8010d78:	dc15      	bgt.n	8010da6 <get_wall+0x1ee>
			*left_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8010d7a:	4a48      	ldr	r2, [pc, #288]	; (8010e9c <get_wall+0x2e4>)
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d82:	4619      	mov	r1, r3
 8010d84:	2201      	movs	r2, #1
 8010d86:	68bb      	ldr	r3, [r7, #8]
 8010d88:	fa02 f303 	lsl.w	r3, r2, r3
 8010d8c:	ea01 0203 	and.w	r2, r1, r3
 8010d90:	2101      	movs	r1, #1
 8010d92:	68bb      	ldr	r3, [r7, #8]
 8010d94:	fa01 f303 	lsl.w	r3, r1, r3
 8010d98:	429a      	cmp	r2, r3
 8010d9a:	bf0c      	ite	eq
 8010d9c:	2301      	moveq	r3, #1
 8010d9e:	2300      	movne	r3, #0
 8010da0:	b2da      	uxtb	r2, r3
 8010da2:	69fb      	ldr	r3, [r7, #28]
 8010da4:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	dd6d      	ble.n	8010e88 <get_wall+0x2d0>
			*right_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	3b01      	subs	r3, #1
 8010db0:	4a3a      	ldr	r2, [pc, #232]	; (8010e9c <get_wall+0x2e4>)
 8010db2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010db6:	4619      	mov	r1, r3
 8010db8:	2201      	movs	r2, #1
 8010dba:	68bb      	ldr	r3, [r7, #8]
 8010dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8010dc0:	ea01 0203 	and.w	r2, r1, r3
 8010dc4:	2101      	movs	r1, #1
 8010dc6:	68bb      	ldr	r3, [r7, #8]
 8010dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8010dcc:	429a      	cmp	r2, r3
 8010dce:	bf0c      	ite	eq
 8010dd0:	2301      	moveq	r3, #1
 8010dd2:	2300      	movne	r3, #0
 8010dd4:	b2da      	uxtb	r2, r3
 8010dd6:	69bb      	ldr	r3, [r7, #24]
 8010dd8:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010dda:	e055      	b.n	8010e88 <get_wall+0x2d0>
	case 4:
		if (x >= 1) {
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	dd16      	ble.n	8010e10 <get_wall+0x258>
			*front_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	3b01      	subs	r3, #1
 8010de6:	4a2d      	ldr	r2, [pc, #180]	; (8010e9c <get_wall+0x2e4>)
 8010de8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010dec:	4619      	mov	r1, r3
 8010dee:	2201      	movs	r2, #1
 8010df0:	68bb      	ldr	r3, [r7, #8]
 8010df2:	fa02 f303 	lsl.w	r3, r2, r3
 8010df6:	ea01 0203 	and.w	r2, r1, r3
 8010dfa:	2101      	movs	r1, #1
 8010dfc:	68bb      	ldr	r3, [r7, #8]
 8010dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8010e02:	429a      	cmp	r2, r3
 8010e04:	bf0c      	ite	eq
 8010e06:	2301      	moveq	r3, #1
 8010e08:	2300      	movne	r3, #0
 8010e0a:	b2da      	uxtb	r2, r3
 8010e0c:	683b      	ldr	r3, [r7, #0]
 8010e0e:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	dd18      	ble.n	8010e48 <get_wall+0x290>
			*left_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 8010e16:	68bb      	ldr	r3, [r7, #8]
 8010e18:	3b01      	subs	r3, #1
 8010e1a:	4a20      	ldr	r2, [pc, #128]	; (8010e9c <get_wall+0x2e4>)
 8010e1c:	330c      	adds	r3, #12
 8010e1e:	005b      	lsls	r3, r3, #1
 8010e20:	4413      	add	r3, r2
 8010e22:	88db      	ldrh	r3, [r3, #6]
 8010e24:	4619      	mov	r1, r3
 8010e26:	2201      	movs	r2, #1
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8010e2e:	ea01 0203 	and.w	r2, r1, r3
 8010e32:	2101      	movs	r1, #1
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	fa01 f303 	lsl.w	r3, r1, r3
 8010e3a:	429a      	cmp	r2, r3
 8010e3c:	bf0c      	ite	eq
 8010e3e:	2301      	moveq	r3, #1
 8010e40:	2300      	movne	r3, #0
 8010e42:	b2da      	uxtb	r2, r3
 8010e44:	69fb      	ldr	r3, [r7, #28]
 8010e46:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8010e48:	68bb      	ldr	r3, [r7, #8]
 8010e4a:	2b0e      	cmp	r3, #14
 8010e4c:	dc1e      	bgt.n	8010e8c <get_wall+0x2d4>
			*right_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8010e4e:	4a13      	ldr	r2, [pc, #76]	; (8010e9c <get_wall+0x2e4>)
 8010e50:	68bb      	ldr	r3, [r7, #8]
 8010e52:	330c      	adds	r3, #12
 8010e54:	005b      	lsls	r3, r3, #1
 8010e56:	4413      	add	r3, r2
 8010e58:	88db      	ldrh	r3, [r3, #6]
 8010e5a:	4619      	mov	r1, r3
 8010e5c:	2201      	movs	r2, #1
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	fa02 f303 	lsl.w	r3, r2, r3
 8010e64:	ea01 0203 	and.w	r2, r1, r3
 8010e68:	2101      	movs	r1, #1
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8010e70:	429a      	cmp	r2, r3
 8010e72:	bf0c      	ite	eq
 8010e74:	2301      	moveq	r3, #1
 8010e76:	2300      	movne	r3, #0
 8010e78:	b2da      	uxtb	r2, r3
 8010e7a:	69bb      	ldr	r3, [r7, #24]
 8010e7c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010e7e:	e005      	b.n	8010e8c <get_wall+0x2d4>
		break;
 8010e80:	bf00      	nop
 8010e82:	e004      	b.n	8010e8e <get_wall+0x2d6>
		break;
 8010e84:	bf00      	nop
 8010e86:	e002      	b.n	8010e8e <get_wall+0x2d6>
		break;
 8010e88:	bf00      	nop
 8010e8a:	e000      	b.n	8010e8e <get_wall+0x2d6>
		break;
 8010e8c:	bf00      	nop
	}

}
 8010e8e:	bf00      	nop
 8010e90:	3714      	adds	r7, #20
 8010e92:	46bd      	mov	sp, r7
 8010e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e98:	4770      	bx	lr
 8010e9a:	bf00      	nop
 8010e9c:	20000c40 	.word	0x20000c40

08010ea0 <get_wall_look>:


void get_wall_look(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 8010ea0:	b480      	push	{r7}
 8010ea2:	b085      	sub	sp, #20
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	60f8      	str	r0, [r7, #12]
 8010ea8:	60b9      	str	r1, [r7, #8]
 8010eaa:	607a      	str	r2, [r7, #4]
 8010eac:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 8010eae:	683b      	ldr	r3, [r7, #0]
 8010eb0:	2201      	movs	r2, #1
 8010eb2:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 8010eb4:	69bb      	ldr	r3, [r7, #24]
 8010eb6:	2201      	movs	r2, #1
 8010eb8:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 8010eba:	69fb      	ldr	r3, [r7, #28]
 8010ebc:	2201      	movs	r2, #1
 8010ebe:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	3b01      	subs	r3, #1
 8010ec4:	2b03      	cmp	r3, #3
 8010ec6:	f200 8162 	bhi.w	801118e <get_wall_look+0x2ee>
 8010eca:	a201      	add	r2, pc, #4	; (adr r2, 8010ed0 <get_wall_look+0x30>)
 8010ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ed0:	08010ee1 	.word	0x08010ee1
 8010ed4:	08010f89 	.word	0x08010f89
 8010ed8:	08011031 	.word	0x08011031
 8010edc:	080110d9 	.word	0x080110d9
	case 1:
		if (y <= 14) {
 8010ee0:	68bb      	ldr	r3, [r7, #8]
 8010ee2:	2b0e      	cmp	r3, #14
 8010ee4:	dc17      	bgt.n	8010f16 <get_wall_look+0x76>
			*front_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 8010ee6:	4aad      	ldr	r2, [pc, #692]	; (801119c <get_wall_look+0x2fc>)
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	332c      	adds	r3, #44	; 0x2c
 8010eec:	005b      	lsls	r3, r3, #1
 8010eee:	4413      	add	r3, r2
 8010ef0:	885b      	ldrh	r3, [r3, #2]
 8010ef2:	4619      	mov	r1, r3
 8010ef4:	2201      	movs	r2, #1
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8010efc:	ea01 0203 	and.w	r2, r1, r3
 8010f00:	2101      	movs	r1, #1
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	fa01 f303 	lsl.w	r3, r1, r3
 8010f08:	429a      	cmp	r2, r3
 8010f0a:	bf0c      	ite	eq
 8010f0c:	2301      	moveq	r3, #1
 8010f0e:	2300      	movne	r3, #0
 8010f10:	b2da      	uxtb	r2, r3
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	dd18      	ble.n	8010f4e <get_wall_look+0xae>
			*left_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	3b01      	subs	r3, #1
 8010f20:	4a9e      	ldr	r2, [pc, #632]	; (801119c <get_wall_look+0x2fc>)
 8010f22:	331c      	adds	r3, #28
 8010f24:	005b      	lsls	r3, r3, #1
 8010f26:	4413      	add	r3, r2
 8010f28:	889b      	ldrh	r3, [r3, #4]
 8010f2a:	4619      	mov	r1, r3
 8010f2c:	2201      	movs	r2, #1
 8010f2e:	68bb      	ldr	r3, [r7, #8]
 8010f30:	fa02 f303 	lsl.w	r3, r2, r3
 8010f34:	ea01 0203 	and.w	r2, r1, r3
 8010f38:	2101      	movs	r1, #1
 8010f3a:	68bb      	ldr	r3, [r7, #8]
 8010f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8010f40:	429a      	cmp	r2, r3
 8010f42:	bf0c      	ite	eq
 8010f44:	2301      	moveq	r3, #1
 8010f46:	2300      	movne	r3, #0
 8010f48:	b2da      	uxtb	r2, r3
 8010f4a:	69fb      	ldr	r3, [r7, #28]
 8010f4c:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	2b0e      	cmp	r3, #14
 8010f52:	f300 8115 	bgt.w	8011180 <get_wall_look+0x2e0>
			*right_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 8010f56:	4a91      	ldr	r2, [pc, #580]	; (801119c <get_wall_look+0x2fc>)
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	331c      	adds	r3, #28
 8010f5c:	005b      	lsls	r3, r3, #1
 8010f5e:	4413      	add	r3, r2
 8010f60:	889b      	ldrh	r3, [r3, #4]
 8010f62:	4619      	mov	r1, r3
 8010f64:	2201      	movs	r2, #1
 8010f66:	68bb      	ldr	r3, [r7, #8]
 8010f68:	fa02 f303 	lsl.w	r3, r2, r3
 8010f6c:	ea01 0203 	and.w	r2, r1, r3
 8010f70:	2101      	movs	r1, #1
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	fa01 f303 	lsl.w	r3, r1, r3
 8010f78:	429a      	cmp	r2, r3
 8010f7a:	bf0c      	ite	eq
 8010f7c:	2301      	moveq	r3, #1
 8010f7e:	2300      	movne	r3, #0
 8010f80:	b2da      	uxtb	r2, r3
 8010f82:	69bb      	ldr	r3, [r7, #24]
 8010f84:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010f86:	e0fb      	b.n	8011180 <get_wall_look+0x2e0>
	case 2:
		if (x <= 14) {
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	2b0e      	cmp	r3, #14
 8010f8c:	dc17      	bgt.n	8010fbe <get_wall_look+0x11e>
			*front_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 8010f8e:	4a83      	ldr	r2, [pc, #524]	; (801119c <get_wall_look+0x2fc>)
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	331c      	adds	r3, #28
 8010f94:	005b      	lsls	r3, r3, #1
 8010f96:	4413      	add	r3, r2
 8010f98:	889b      	ldrh	r3, [r3, #4]
 8010f9a:	4619      	mov	r1, r3
 8010f9c:	2201      	movs	r2, #1
 8010f9e:	68bb      	ldr	r3, [r7, #8]
 8010fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8010fa4:	ea01 0203 	and.w	r2, r1, r3
 8010fa8:	2101      	movs	r1, #1
 8010faa:	68bb      	ldr	r3, [r7, #8]
 8010fac:	fa01 f303 	lsl.w	r3, r1, r3
 8010fb0:	429a      	cmp	r2, r3
 8010fb2:	bf0c      	ite	eq
 8010fb4:	2301      	moveq	r3, #1
 8010fb6:	2300      	movne	r3, #0
 8010fb8:	b2da      	uxtb	r2, r3
 8010fba:	683b      	ldr	r3, [r7, #0]
 8010fbc:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8010fbe:	68bb      	ldr	r3, [r7, #8]
 8010fc0:	2b0e      	cmp	r3, #14
 8010fc2:	dc17      	bgt.n	8010ff4 <get_wall_look+0x154>
			*left_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 8010fc4:	4a75      	ldr	r2, [pc, #468]	; (801119c <get_wall_look+0x2fc>)
 8010fc6:	68bb      	ldr	r3, [r7, #8]
 8010fc8:	332c      	adds	r3, #44	; 0x2c
 8010fca:	005b      	lsls	r3, r3, #1
 8010fcc:	4413      	add	r3, r2
 8010fce:	885b      	ldrh	r3, [r3, #2]
 8010fd0:	4619      	mov	r1, r3
 8010fd2:	2201      	movs	r2, #1
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8010fda:	ea01 0203 	and.w	r2, r1, r3
 8010fde:	2101      	movs	r1, #1
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8010fe6:	429a      	cmp	r2, r3
 8010fe8:	bf0c      	ite	eq
 8010fea:	2301      	moveq	r3, #1
 8010fec:	2300      	movne	r3, #0
 8010fee:	b2da      	uxtb	r2, r3
 8010ff0:	69fb      	ldr	r3, [r7, #28]
 8010ff2:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8010ff4:	68bb      	ldr	r3, [r7, #8]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	f340 80c4 	ble.w	8011184 <get_wall_look+0x2e4>
			*right_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	3b01      	subs	r3, #1
 8011000:	4a66      	ldr	r2, [pc, #408]	; (801119c <get_wall_look+0x2fc>)
 8011002:	332c      	adds	r3, #44	; 0x2c
 8011004:	005b      	lsls	r3, r3, #1
 8011006:	4413      	add	r3, r2
 8011008:	885b      	ldrh	r3, [r3, #2]
 801100a:	4619      	mov	r1, r3
 801100c:	2201      	movs	r2, #1
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	fa02 f303 	lsl.w	r3, r2, r3
 8011014:	ea01 0203 	and.w	r2, r1, r3
 8011018:	2101      	movs	r1, #1
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	fa01 f303 	lsl.w	r3, r1, r3
 8011020:	429a      	cmp	r2, r3
 8011022:	bf0c      	ite	eq
 8011024:	2301      	moveq	r3, #1
 8011026:	2300      	movne	r3, #0
 8011028:	b2da      	uxtb	r2, r3
 801102a:	69bb      	ldr	r3, [r7, #24]
 801102c:	701a      	strb	r2, [r3, #0]
		}
		break;
 801102e:	e0a9      	b.n	8011184 <get_wall_look+0x2e4>
	case 3:
		if (y >= 1) {
 8011030:	68bb      	ldr	r3, [r7, #8]
 8011032:	2b00      	cmp	r3, #0
 8011034:	dd18      	ble.n	8011068 <get_wall_look+0x1c8>
			*front_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 8011036:	68bb      	ldr	r3, [r7, #8]
 8011038:	3b01      	subs	r3, #1
 801103a:	4a58      	ldr	r2, [pc, #352]	; (801119c <get_wall_look+0x2fc>)
 801103c:	332c      	adds	r3, #44	; 0x2c
 801103e:	005b      	lsls	r3, r3, #1
 8011040:	4413      	add	r3, r2
 8011042:	885b      	ldrh	r3, [r3, #2]
 8011044:	4619      	mov	r1, r3
 8011046:	2201      	movs	r2, #1
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	fa02 f303 	lsl.w	r3, r2, r3
 801104e:	ea01 0203 	and.w	r2, r1, r3
 8011052:	2101      	movs	r1, #1
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	fa01 f303 	lsl.w	r3, r1, r3
 801105a:	429a      	cmp	r2, r3
 801105c:	bf0c      	ite	eq
 801105e:	2301      	moveq	r3, #1
 8011060:	2300      	movne	r3, #0
 8011062:	b2da      	uxtb	r2, r3
 8011064:	683b      	ldr	r3, [r7, #0]
 8011066:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	2b0e      	cmp	r3, #14
 801106c:	dc17      	bgt.n	801109e <get_wall_look+0x1fe>
			*left_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 801106e:	4a4b      	ldr	r2, [pc, #300]	; (801119c <get_wall_look+0x2fc>)
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	331c      	adds	r3, #28
 8011074:	005b      	lsls	r3, r3, #1
 8011076:	4413      	add	r3, r2
 8011078:	889b      	ldrh	r3, [r3, #4]
 801107a:	4619      	mov	r1, r3
 801107c:	2201      	movs	r2, #1
 801107e:	68bb      	ldr	r3, [r7, #8]
 8011080:	fa02 f303 	lsl.w	r3, r2, r3
 8011084:	ea01 0203 	and.w	r2, r1, r3
 8011088:	2101      	movs	r1, #1
 801108a:	68bb      	ldr	r3, [r7, #8]
 801108c:	fa01 f303 	lsl.w	r3, r1, r3
 8011090:	429a      	cmp	r2, r3
 8011092:	bf0c      	ite	eq
 8011094:	2301      	moveq	r3, #1
 8011096:	2300      	movne	r3, #0
 8011098:	b2da      	uxtb	r2, r3
 801109a:	69fb      	ldr	r3, [r7, #28]
 801109c:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	dd71      	ble.n	8011188 <get_wall_look+0x2e8>
			*right_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	3b01      	subs	r3, #1
 80110a8:	4a3c      	ldr	r2, [pc, #240]	; (801119c <get_wall_look+0x2fc>)
 80110aa:	331c      	adds	r3, #28
 80110ac:	005b      	lsls	r3, r3, #1
 80110ae:	4413      	add	r3, r2
 80110b0:	889b      	ldrh	r3, [r3, #4]
 80110b2:	4619      	mov	r1, r3
 80110b4:	2201      	movs	r2, #1
 80110b6:	68bb      	ldr	r3, [r7, #8]
 80110b8:	fa02 f303 	lsl.w	r3, r2, r3
 80110bc:	ea01 0203 	and.w	r2, r1, r3
 80110c0:	2101      	movs	r1, #1
 80110c2:	68bb      	ldr	r3, [r7, #8]
 80110c4:	fa01 f303 	lsl.w	r3, r1, r3
 80110c8:	429a      	cmp	r2, r3
 80110ca:	bf0c      	ite	eq
 80110cc:	2301      	moveq	r3, #1
 80110ce:	2300      	movne	r3, #0
 80110d0:	b2da      	uxtb	r2, r3
 80110d2:	69bb      	ldr	r3, [r7, #24]
 80110d4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80110d6:	e057      	b.n	8011188 <get_wall_look+0x2e8>
	case 4:
		if (x >= 1) {
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	dd18      	ble.n	8011110 <get_wall_look+0x270>
			*front_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	3b01      	subs	r3, #1
 80110e2:	4a2e      	ldr	r2, [pc, #184]	; (801119c <get_wall_look+0x2fc>)
 80110e4:	331c      	adds	r3, #28
 80110e6:	005b      	lsls	r3, r3, #1
 80110e8:	4413      	add	r3, r2
 80110ea:	889b      	ldrh	r3, [r3, #4]
 80110ec:	4619      	mov	r1, r3
 80110ee:	2201      	movs	r2, #1
 80110f0:	68bb      	ldr	r3, [r7, #8]
 80110f2:	fa02 f303 	lsl.w	r3, r2, r3
 80110f6:	ea01 0203 	and.w	r2, r1, r3
 80110fa:	2101      	movs	r1, #1
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	fa01 f303 	lsl.w	r3, r1, r3
 8011102:	429a      	cmp	r2, r3
 8011104:	bf0c      	ite	eq
 8011106:	2301      	moveq	r3, #1
 8011108:	2300      	movne	r3, #0
 801110a:	b2da      	uxtb	r2, r3
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8011110:	68bb      	ldr	r3, [r7, #8]
 8011112:	2b00      	cmp	r3, #0
 8011114:	dd18      	ble.n	8011148 <get_wall_look+0x2a8>
			*left_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 8011116:	68bb      	ldr	r3, [r7, #8]
 8011118:	3b01      	subs	r3, #1
 801111a:	4a20      	ldr	r2, [pc, #128]	; (801119c <get_wall_look+0x2fc>)
 801111c:	332c      	adds	r3, #44	; 0x2c
 801111e:	005b      	lsls	r3, r3, #1
 8011120:	4413      	add	r3, r2
 8011122:	885b      	ldrh	r3, [r3, #2]
 8011124:	4619      	mov	r1, r3
 8011126:	2201      	movs	r2, #1
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	fa02 f303 	lsl.w	r3, r2, r3
 801112e:	ea01 0203 	and.w	r2, r1, r3
 8011132:	2101      	movs	r1, #1
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	fa01 f303 	lsl.w	r3, r1, r3
 801113a:	429a      	cmp	r2, r3
 801113c:	bf0c      	ite	eq
 801113e:	2301      	moveq	r3, #1
 8011140:	2300      	movne	r3, #0
 8011142:	b2da      	uxtb	r2, r3
 8011144:	69fb      	ldr	r3, [r7, #28]
 8011146:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8011148:	68bb      	ldr	r3, [r7, #8]
 801114a:	2b0e      	cmp	r3, #14
 801114c:	dc1e      	bgt.n	801118c <get_wall_look+0x2ec>
			*right_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 801114e:	4a13      	ldr	r2, [pc, #76]	; (801119c <get_wall_look+0x2fc>)
 8011150:	68bb      	ldr	r3, [r7, #8]
 8011152:	332c      	adds	r3, #44	; 0x2c
 8011154:	005b      	lsls	r3, r3, #1
 8011156:	4413      	add	r3, r2
 8011158:	885b      	ldrh	r3, [r3, #2]
 801115a:	4619      	mov	r1, r3
 801115c:	2201      	movs	r2, #1
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	fa02 f303 	lsl.w	r3, r2, r3
 8011164:	ea01 0203 	and.w	r2, r1, r3
 8011168:	2101      	movs	r1, #1
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	fa01 f303 	lsl.w	r3, r1, r3
 8011170:	429a      	cmp	r2, r3
 8011172:	bf0c      	ite	eq
 8011174:	2301      	moveq	r3, #1
 8011176:	2300      	movne	r3, #0
 8011178:	b2da      	uxtb	r2, r3
 801117a:	69bb      	ldr	r3, [r7, #24]
 801117c:	701a      	strb	r2, [r3, #0]
		}
		break;
 801117e:	e005      	b.n	801118c <get_wall_look+0x2ec>
		break;
 8011180:	bf00      	nop
 8011182:	e004      	b.n	801118e <get_wall_look+0x2ee>
		break;
 8011184:	bf00      	nop
 8011186:	e002      	b.n	801118e <get_wall_look+0x2ee>
		break;
 8011188:	bf00      	nop
 801118a:	e000      	b.n	801118e <get_wall_look+0x2ee>
		break;
 801118c:	bf00      	nop
	}

}
 801118e:	bf00      	nop
 8011190:	3714      	adds	r7, #20
 8011192:	46bd      	mov	sp, r7
 8011194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011198:	4770      	bx	lr
 801119a:	bf00      	nop
 801119c:	20000c40 	.word	0x20000c40

080111a0 <search_AroundWalkCount>:


void search_AroundWalkCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 80111a0:	b480      	push	{r7}
 80111a2:	b087      	sub	sp, #28
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	60f8      	str	r0, [r7, #12]
 80111a8:	60b9      	str	r1, [r7, #8]
 80111aa:	607a      	str	r2, [r7, #4]
 80111ac:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = MAX_WALKCOUNT;}
 80111ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111b0:	2b0e      	cmp	r3, #14
 80111b2:	dd02      	ble.n	80111ba <search_AroundWalkCount+0x1a>
 80111b4:	23ff      	movs	r3, #255	; 0xff
 80111b6:	82fb      	strh	r3, [r7, #22]
 80111b8:	e008      	b.n	80111cc <search_AroundWalkCount+0x2c>
	else {north_count = walk_count[x][y + 1];}
 80111ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111bc:	3301      	adds	r3, #1
 80111be:	493e      	ldr	r1, [pc, #248]	; (80112b8 <search_AroundWalkCount+0x118>)
 80111c0:	6a3a      	ldr	r2, [r7, #32]
 80111c2:	0112      	lsls	r2, r2, #4
 80111c4:	4413      	add	r3, r2
 80111c6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80111ca:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = MAX_WALKCOUNT;}
 80111cc:	6a3b      	ldr	r3, [r7, #32]
 80111ce:	2b0e      	cmp	r3, #14
 80111d0:	dd02      	ble.n	80111d8 <search_AroundWalkCount+0x38>
 80111d2:	23ff      	movs	r3, #255	; 0xff
 80111d4:	82bb      	strh	r3, [r7, #20]
 80111d6:	e008      	b.n	80111ea <search_AroundWalkCount+0x4a>
	else {east_count = walk_count[x + 1][y];}
 80111d8:	6a3b      	ldr	r3, [r7, #32]
 80111da:	3301      	adds	r3, #1
 80111dc:	4936      	ldr	r1, [pc, #216]	; (80112b8 <search_AroundWalkCount+0x118>)
 80111de:	011a      	lsls	r2, r3, #4
 80111e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111e2:	4413      	add	r3, r2
 80111e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80111e8:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = MAX_WALKCOUNT;}
 80111ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	dc02      	bgt.n	80111f6 <search_AroundWalkCount+0x56>
 80111f0:	23ff      	movs	r3, #255	; 0xff
 80111f2:	827b      	strh	r3, [r7, #18]
 80111f4:	e008      	b.n	8011208 <search_AroundWalkCount+0x68>
	else {south_count = walk_count[x][y - 1];}
 80111f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111f8:	3b01      	subs	r3, #1
 80111fa:	492f      	ldr	r1, [pc, #188]	; (80112b8 <search_AroundWalkCount+0x118>)
 80111fc:	6a3a      	ldr	r2, [r7, #32]
 80111fe:	0112      	lsls	r2, r2, #4
 8011200:	4413      	add	r3, r2
 8011202:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011206:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = MAX_WALKCOUNT;}
 8011208:	6a3b      	ldr	r3, [r7, #32]
 801120a:	2b00      	cmp	r3, #0
 801120c:	dc02      	bgt.n	8011214 <search_AroundWalkCount+0x74>
 801120e:	23ff      	movs	r3, #255	; 0xff
 8011210:	823b      	strh	r3, [r7, #16]
 8011212:	e008      	b.n	8011226 <search_AroundWalkCount+0x86>
	else {west_count = walk_count[x - 1][y];}
 8011214:	6a3b      	ldr	r3, [r7, #32]
 8011216:	3b01      	subs	r3, #1
 8011218:	4927      	ldr	r1, [pc, #156]	; (80112b8 <search_AroundWalkCount+0x118>)
 801121a:	011a      	lsls	r2, r3, #4
 801121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801121e:	4413      	add	r3, r2
 8011220:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011224:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 8011226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011228:	3b01      	subs	r3, #1
 801122a:	2b03      	cmp	r3, #3
 801122c:	d83e      	bhi.n	80112ac <search_AroundWalkCount+0x10c>
 801122e:	a201      	add	r2, pc, #4	; (adr r2, 8011234 <search_AroundWalkCount+0x94>)
 8011230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011234:	08011245 	.word	0x08011245
 8011238:	0801125f 	.word	0x0801125f
 801123c:	08011279 	.word	0x08011279
 8011240:	08011293 	.word	0x08011293
	case 1:
		*front_count = north_count;
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	8afa      	ldrh	r2, [r7, #22]
 8011248:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 801124a:	68bb      	ldr	r3, [r7, #8]
 801124c:	8aba      	ldrh	r2, [r7, #20]
 801124e:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	8a7a      	ldrh	r2, [r7, #18]
 8011254:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 8011256:	683b      	ldr	r3, [r7, #0]
 8011258:	8a3a      	ldrh	r2, [r7, #16]
 801125a:	801a      	strh	r2, [r3, #0]
		break;
 801125c:	e026      	b.n	80112ac <search_AroundWalkCount+0x10c>
	case 2:
		*front_count = east_count;
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	8aba      	ldrh	r2, [r7, #20]
 8011262:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 8011264:	68bb      	ldr	r3, [r7, #8]
 8011266:	8a7a      	ldrh	r2, [r7, #18]
 8011268:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	8a3a      	ldrh	r2, [r7, #16]
 801126e:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	8afa      	ldrh	r2, [r7, #22]
 8011274:	801a      	strh	r2, [r3, #0]
		break;
 8011276:	e019      	b.n	80112ac <search_AroundWalkCount+0x10c>
	case 3:
		*front_count = south_count;
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	8a7a      	ldrh	r2, [r7, #18]
 801127c:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	8a3a      	ldrh	r2, [r7, #16]
 8011282:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	8afa      	ldrh	r2, [r7, #22]
 8011288:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 801128a:	683b      	ldr	r3, [r7, #0]
 801128c:	8aba      	ldrh	r2, [r7, #20]
 801128e:	801a      	strh	r2, [r3, #0]
		break;
 8011290:	e00c      	b.n	80112ac <search_AroundWalkCount+0x10c>
	case 4:
		*front_count = west_count;
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	8a3a      	ldrh	r2, [r7, #16]
 8011296:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 8011298:	68bb      	ldr	r3, [r7, #8]
 801129a:	8afa      	ldrh	r2, [r7, #22]
 801129c:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	8aba      	ldrh	r2, [r7, #20]
 80112a2:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	8a7a      	ldrh	r2, [r7, #18]
 80112a8:	801a      	strh	r2, [r3, #0]
		break;
 80112aa:	bf00      	nop

	}


}
 80112ac:	bf00      	nop
 80112ae:	371c      	adds	r7, #28
 80112b0:	46bd      	mov	sp, r7
 80112b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b6:	4770      	bx	lr
 80112b8:	20000d34 	.word	0x20000d34

080112bc <search_AroundDijkstraCount>:





void search_AroundDijkstraCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 80112bc:	b480      	push	{r7}
 80112be:	b087      	sub	sp, #28
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	60f8      	str	r0, [r7, #12]
 80112c4:	60b9      	str	r1, [r7, #8]
 80112c6:	607a      	str	r2, [r7, #4]
 80112c8:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = 65535;}
 80112ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112cc:	2b0e      	cmp	r3, #14
 80112ce:	dd03      	ble.n	80112d8 <search_AroundDijkstraCount+0x1c>
 80112d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80112d4:	82fb      	strh	r3, [r7, #22]
 80112d6:	e00a      	b.n	80112ee <search_AroundDijkstraCount+0x32>
	else {north_count = Dijkstra.column_count[x][y];}
 80112d8:	4944      	ldr	r1, [pc, #272]	; (80113ec <search_AroundDijkstraCount+0x130>)
 80112da:	6a3a      	ldr	r2, [r7, #32]
 80112dc:	4613      	mov	r3, r2
 80112de:	011b      	lsls	r3, r3, #4
 80112e0:	1a9b      	subs	r3, r3, r2
 80112e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112e4:	4413      	add	r3, r2
 80112e6:	33f0      	adds	r3, #240	; 0xf0
 80112e8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80112ec:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = 65535;}
 80112ee:	6a3b      	ldr	r3, [r7, #32]
 80112f0:	2b0e      	cmp	r3, #14
 80112f2:	dd03      	ble.n	80112fc <search_AroundDijkstraCount+0x40>
 80112f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80112f8:	82bb      	strh	r3, [r7, #20]
 80112fa:	e009      	b.n	8011310 <search_AroundDijkstraCount+0x54>
	else {east_count = Dijkstra.row_count[y][x];}
 80112fc:	493b      	ldr	r1, [pc, #236]	; (80113ec <search_AroundDijkstraCount+0x130>)
 80112fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011300:	4613      	mov	r3, r2
 8011302:	011b      	lsls	r3, r3, #4
 8011304:	1a9b      	subs	r3, r3, r2
 8011306:	6a3a      	ldr	r2, [r7, #32]
 8011308:	4413      	add	r3, r2
 801130a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801130e:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = 65535;}
 8011310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011312:	2b00      	cmp	r3, #0
 8011314:	dc03      	bgt.n	801131e <search_AroundDijkstraCount+0x62>
 8011316:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801131a:	827b      	strh	r3, [r7, #18]
 801131c:	e00b      	b.n	8011336 <search_AroundDijkstraCount+0x7a>
	else {south_count = Dijkstra.column_count[x][y-1];}
 801131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011320:	1e59      	subs	r1, r3, #1
 8011322:	4832      	ldr	r0, [pc, #200]	; (80113ec <search_AroundDijkstraCount+0x130>)
 8011324:	6a3a      	ldr	r2, [r7, #32]
 8011326:	4613      	mov	r3, r2
 8011328:	011b      	lsls	r3, r3, #4
 801132a:	1a9b      	subs	r3, r3, r2
 801132c:	440b      	add	r3, r1
 801132e:	33f0      	adds	r3, #240	; 0xf0
 8011330:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011334:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = 65535;}
 8011336:	6a3b      	ldr	r3, [r7, #32]
 8011338:	2b00      	cmp	r3, #0
 801133a:	dc03      	bgt.n	8011344 <search_AroundDijkstraCount+0x88>
 801133c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011340:	823b      	strh	r3, [r7, #16]
 8011342:	e00a      	b.n	801135a <search_AroundDijkstraCount+0x9e>
	else {west_count = Dijkstra.row_count[y][x-1];}
 8011344:	6a3b      	ldr	r3, [r7, #32]
 8011346:	1e59      	subs	r1, r3, #1
 8011348:	4828      	ldr	r0, [pc, #160]	; (80113ec <search_AroundDijkstraCount+0x130>)
 801134a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801134c:	4613      	mov	r3, r2
 801134e:	011b      	lsls	r3, r3, #4
 8011350:	1a9b      	subs	r3, r3, r2
 8011352:	440b      	add	r3, r1
 8011354:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011358:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 801135a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801135c:	3b01      	subs	r3, #1
 801135e:	2b03      	cmp	r3, #3
 8011360:	d83e      	bhi.n	80113e0 <search_AroundDijkstraCount+0x124>
 8011362:	a201      	add	r2, pc, #4	; (adr r2, 8011368 <search_AroundDijkstraCount+0xac>)
 8011364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011368:	08011379 	.word	0x08011379
 801136c:	08011393 	.word	0x08011393
 8011370:	080113ad 	.word	0x080113ad
 8011374:	080113c7 	.word	0x080113c7
	case 1:
		*front_count = north_count;
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	8afa      	ldrh	r2, [r7, #22]
 801137c:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 801137e:	68bb      	ldr	r3, [r7, #8]
 8011380:	8aba      	ldrh	r2, [r7, #20]
 8011382:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	8a7a      	ldrh	r2, [r7, #18]
 8011388:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	8a3a      	ldrh	r2, [r7, #16]
 801138e:	801a      	strh	r2, [r3, #0]
		break;
 8011390:	e026      	b.n	80113e0 <search_AroundDijkstraCount+0x124>
	case 2:
		*front_count = east_count;
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	8aba      	ldrh	r2, [r7, #20]
 8011396:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 8011398:	68bb      	ldr	r3, [r7, #8]
 801139a:	8a7a      	ldrh	r2, [r7, #18]
 801139c:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	8a3a      	ldrh	r2, [r7, #16]
 80113a2:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 80113a4:	683b      	ldr	r3, [r7, #0]
 80113a6:	8afa      	ldrh	r2, [r7, #22]
 80113a8:	801a      	strh	r2, [r3, #0]
		break;
 80113aa:	e019      	b.n	80113e0 <search_AroundDijkstraCount+0x124>
	case 3:
		*front_count = south_count;
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	8a7a      	ldrh	r2, [r7, #18]
 80113b0:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 80113b2:	68bb      	ldr	r3, [r7, #8]
 80113b4:	8a3a      	ldrh	r2, [r7, #16]
 80113b6:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	8afa      	ldrh	r2, [r7, #22]
 80113bc:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 80113be:	683b      	ldr	r3, [r7, #0]
 80113c0:	8aba      	ldrh	r2, [r7, #20]
 80113c2:	801a      	strh	r2, [r3, #0]
		break;
 80113c4:	e00c      	b.n	80113e0 <search_AroundDijkstraCount+0x124>
	case 4:
		*front_count = west_count;
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	8a3a      	ldrh	r2, [r7, #16]
 80113ca:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 80113cc:	68bb      	ldr	r3, [r7, #8]
 80113ce:	8afa      	ldrh	r2, [r7, #22]
 80113d0:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	8aba      	ldrh	r2, [r7, #20]
 80113d6:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 80113d8:	683b      	ldr	r3, [r7, #0]
 80113da:	8a7a      	ldrh	r2, [r7, #18]
 80113dc:	801a      	strh	r2, [r3, #0]
		break;
 80113de:	bf00      	nop

	}


}
 80113e0:	bf00      	nop
 80113e2:	371c      	adds	r7, #28
 80113e4:	46bd      	mov	sp, r7
 80113e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ea:	4770      	bx	lr
 80113ec:	20000f34 	.word	0x20000f34

080113f0 <create_DijkstraMap>:




void create_DijkstraMap(void){
 80113f0:	b590      	push	{r4, r7, lr}
 80113f2:	f5ad 4d9d 	sub.w	sp, sp, #20096	; 0x4e80
 80113f6:	b081      	sub	sp, #4
 80113f8:	af00      	add	r7, sp, #0
	STACK_T stack_x;
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_direction;//向き(0北　1北東　2東　3南東　4南　5南西　6西　7北西　8エラー)
	STACK_T stack_cost;//引かれるコスト
	int16_t VerticalCost=VERTICALCOST;
 80113fa:	23b4      	movs	r3, #180	; 0xb4
 80113fc:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011400:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8011404:	8013      	strh	r3, [r2, #0]
	int16_t DiagonalCost=DIAGONALCOST;
 8011406:	237f      	movs	r3, #127	; 0x7f
 8011408:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801140c:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011410:	8013      	strh	r3, [r2, #0]
	int16_t discount_v[V_NUM_MAX]={180,118,100,91,90};
 8011412:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011416:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 801141a:	4a1d      	ldr	r2, [pc, #116]	; (8011490 <create_DijkstraMap+0xa0>)
 801141c:	ca07      	ldmia	r2, {r0, r1, r2}
 801141e:	c303      	stmia	r3!, {r0, r1}
 8011420:	801a      	strh	r2, [r3, #0]
	int16_t discount_d[D_NUM_MAX]={127,91,79,71,65,64};
 8011422:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011426:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801142a:	4a1a      	ldr	r2, [pc, #104]	; (8011494 <create_DijkstraMap+0xa4>)
 801142c:	ca07      	ldmia	r2, {r0, r1, r2}
 801142e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int16_t dis_cost_in;
	//printf("%d,%d,%d,%d,%d\n",discount_v[0],discount_v[1],discount_v[2],discount_v[3],discount_v[4]);
	//printf("%d,%d,%d,%d,%d,%d\n",discount_d[0],discount_d[1],discount_d[2],discount_d[3],discount_d[4],discount_d[5]);
	initStack_walk(&stack_x);
 8011432:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011436:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801143a:	4618      	mov	r0, r3
 801143c:	f003 fad4 	bl	80149e8 <initStack_walk>
	initStack_walk(&stack_y);
 8011440:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011444:	f103 0320 	add.w	r3, r3, #32
 8011448:	3b0c      	subs	r3, #12
 801144a:	4618      	mov	r0, r3
 801144c:	f003 facc 	bl	80149e8 <initStack_walk>
	initStack_walk(&stack_matrix);
 8011450:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011454:	3b14      	subs	r3, #20
 8011456:	4618      	mov	r0, r3
 8011458:	f003 fac6 	bl	80149e8 <initStack_walk>
	initStack_walk(&stack_direction);
 801145c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011460:	3b3c      	subs	r3, #60	; 0x3c
 8011462:	4618      	mov	r0, r3
 8011464:	f003 fac0 	bl	80149e8 <initStack_walk>
	initStack_walk(&stack_cost);
 8011468:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801146c:	3b64      	subs	r3, #100	; 0x64
 801146e:	4618      	mov	r0, r3
 8011470:	f003 faba 	bl	80149e8 <initStack_walk>
	for(int i=0;i<=15;i++){
 8011474:	2300      	movs	r3, #0
 8011476:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801147a:	f102 0274 	add.w	r2, r2, #116	; 0x74
 801147e:	6013      	str	r3, [r2, #0]
 8011480:	e04e      	b.n	8011520 <create_DijkstraMap+0x130>
		for(int j=0;j<=14;j++){
 8011482:	2300      	movs	r3, #0
 8011484:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011488:	f102 0270 	add.w	r2, r2, #112	; 0x70
 801148c:	6013      	str	r3, [r2, #0]
 801148e:	e035      	b.n	80114fc <create_DijkstraMap+0x10c>
 8011490:	080243ec 	.word	0x080243ec
 8011494:	080243f8 	.word	0x080243f8
			Dijkstra.column_count[i][j]=65535;
 8011498:	49c7      	ldr	r1, [pc, #796]	; (80117b8 <create_DijkstraMap+0x3c8>)
 801149a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801149e:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80114a2:	681a      	ldr	r2, [r3, #0]
 80114a4:	4613      	mov	r3, r2
 80114a6:	011b      	lsls	r3, r3, #4
 80114a8:	1a9b      	subs	r3, r3, r2
 80114aa:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80114ae:	f102 0270 	add.w	r2, r2, #112	; 0x70
 80114b2:	6812      	ldr	r2, [r2, #0]
 80114b4:	4413      	add	r3, r2
 80114b6:	33f0      	adds	r3, #240	; 0xf0
 80114b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80114bc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			Dijkstra.row_count[i][j]=65535;
 80114c0:	49bd      	ldr	r1, [pc, #756]	; (80117b8 <create_DijkstraMap+0x3c8>)
 80114c2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80114c6:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80114ca:	681a      	ldr	r2, [r3, #0]
 80114cc:	4613      	mov	r3, r2
 80114ce:	011b      	lsls	r3, r3, #4
 80114d0:	1a9b      	subs	r3, r3, r2
 80114d2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80114d6:	f102 0270 	add.w	r2, r2, #112	; 0x70
 80114da:	6812      	ldr	r2, [r2, #0]
 80114dc:	4413      	add	r3, r2
 80114de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80114e2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j=0;j<=14;j++){
 80114e6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80114ea:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	3301      	adds	r3, #1
 80114f2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80114f6:	f102 0270 	add.w	r2, r2, #112	; 0x70
 80114fa:	6013      	str	r3, [r2, #0]
 80114fc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011500:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	2b0e      	cmp	r3, #14
 8011508:	ddc6      	ble.n	8011498 <create_DijkstraMap+0xa8>
	for(int i=0;i<=15;i++){
 801150a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801150e:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	3301      	adds	r3, #1
 8011516:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801151a:	f102 0274 	add.w	r2, r2, #116	; 0x74
 801151e:	6013      	str	r3, [r2, #0]
 8011520:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011524:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	2b0f      	cmp	r3, #15
 801152c:	dda9      	ble.n	8011482 <create_DijkstraMap+0x92>
		}
	}
	Dijkstra.column_count[GOAL_X][GOAL_Y]=0;
 801152e:	4ba2      	ldr	r3, [pc, #648]	; (80117b8 <create_DijkstraMap+0x3c8>)
 8011530:	2200      	movs	r2, #0
 8011532:	f8a3 227e 	strh.w	r2, [r3, #638]	; 0x27e
	Dijkstra.column_count[GOAL_X+1][GOAL_Y]=0;
 8011536:	4ba0      	ldr	r3, [pc, #640]	; (80117b8 <create_DijkstraMap+0x3c8>)
 8011538:	2200      	movs	r2, #0
 801153a:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
	Dijkstra.row_count[GOAL_Y][GOAL_X]=0;
 801153e:	4b9e      	ldr	r3, [pc, #632]	; (80117b8 <create_DijkstraMap+0x3c8>)
 8011540:	2200      	movs	r2, #0
 8011542:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	Dijkstra.row_count[GOAL_Y+1][GOAL_X]=0;
 8011546:	4b9c      	ldr	r3, [pc, #624]	; (80117b8 <create_DijkstraMap+0x3c8>)
 8011548:	2200      	movs	r2, #0
 801154a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 801154e:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011552:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011556:	2105      	movs	r1, #5
 8011558:	4618      	mov	r0, r3
 801155a:	f003 fa55 	bl	8014a08 <pushStack_walk>
 801155e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011562:	f103 0320 	add.w	r3, r3, #32
 8011566:	3b0c      	subs	r3, #12
 8011568:	2104      	movs	r1, #4
 801156a:	4618      	mov	r0, r3
 801156c:	f003 fa4c 	bl	8014a08 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 8011570:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011574:	3b14      	subs	r3, #20
 8011576:	2100      	movs	r1, #0
 8011578:	4618      	mov	r0, r3
 801157a:	f003 fa45 	bl	8014a08 <pushStack_walk>
 801157e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011582:	3b3c      	subs	r3, #60	; 0x3c
 8011584:	2108      	movs	r1, #8
 8011586:	4618      	mov	r0, r3
 8011588:	f003 fa3e 	bl	8014a08 <pushStack_walk>
 801158c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011590:	3b64      	subs	r3, #100	; 0x64
 8011592:	2100      	movs	r1, #0
 8011594:	4618      	mov	r0, r3
 8011596:	f003 fa37 	bl	8014a08 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X+1);pushStack_walk(&stack_y,GOAL_Y);
 801159a:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801159e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80115a2:	2106      	movs	r1, #6
 80115a4:	4618      	mov	r0, r3
 80115a6:	f003 fa2f 	bl	8014a08 <pushStack_walk>
 80115aa:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80115ae:	f103 0320 	add.w	r3, r3, #32
 80115b2:	3b0c      	subs	r3, #12
 80115b4:	2104      	movs	r1, #4
 80115b6:	4618      	mov	r0, r3
 80115b8:	f003 fa26 	bl	8014a08 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 80115bc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80115c0:	3b14      	subs	r3, #20
 80115c2:	2100      	movs	r1, #0
 80115c4:	4618      	mov	r0, r3
 80115c6:	f003 fa1f 	bl	8014a08 <pushStack_walk>
 80115ca:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80115ce:	3b3c      	subs	r3, #60	; 0x3c
 80115d0:	2108      	movs	r1, #8
 80115d2:	4618      	mov	r0, r3
 80115d4:	f003 fa18 	bl	8014a08 <pushStack_walk>
 80115d8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80115dc:	3b64      	subs	r3, #100	; 0x64
 80115de:	2100      	movs	r1, #0
 80115e0:	4618      	mov	r0, r3
 80115e2:	f003 fa11 	bl	8014a08 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 80115e6:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80115ea:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80115ee:	2105      	movs	r1, #5
 80115f0:	4618      	mov	r0, r3
 80115f2:	f003 fa09 	bl	8014a08 <pushStack_walk>
 80115f6:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80115fa:	f103 0320 	add.w	r3, r3, #32
 80115fe:	3b0c      	subs	r3, #12
 8011600:	2104      	movs	r1, #4
 8011602:	4618      	mov	r0, r3
 8011604:	f003 fa00 	bl	8014a08 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 8011608:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801160c:	3b14      	subs	r3, #20
 801160e:	2101      	movs	r1, #1
 8011610:	4618      	mov	r0, r3
 8011612:	f003 f9f9 	bl	8014a08 <pushStack_walk>
 8011616:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801161a:	3b3c      	subs	r3, #60	; 0x3c
 801161c:	2108      	movs	r1, #8
 801161e:	4618      	mov	r0, r3
 8011620:	f003 f9f2 	bl	8014a08 <pushStack_walk>
 8011624:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011628:	3b64      	subs	r3, #100	; 0x64
 801162a:	2100      	movs	r1, #0
 801162c:	4618      	mov	r0, r3
 801162e:	f003 f9eb 	bl	8014a08 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y+1);
 8011632:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011636:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801163a:	2105      	movs	r1, #5
 801163c:	4618      	mov	r0, r3
 801163e:	f003 f9e3 	bl	8014a08 <pushStack_walk>
 8011642:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011646:	f103 0320 	add.w	r3, r3, #32
 801164a:	3b0c      	subs	r3, #12
 801164c:	2105      	movs	r1, #5
 801164e:	4618      	mov	r0, r3
 8011650:	f003 f9da 	bl	8014a08 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 8011654:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011658:	3b14      	subs	r3, #20
 801165a:	2101      	movs	r1, #1
 801165c:	4618      	mov	r0, r3
 801165e:	f003 f9d3 	bl	8014a08 <pushStack_walk>
 8011662:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011666:	3b3c      	subs	r3, #60	; 0x3c
 8011668:	2108      	movs	r1, #8
 801166a:	4618      	mov	r0, r3
 801166c:	f003 f9cc 	bl	8014a08 <pushStack_walk>
 8011670:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011674:	3b64      	subs	r3, #100	; 0x64
 8011676:	2100      	movs	r1, #0
 8011678:	4618      	mov	r0, r3
 801167a:	f003 f9c5 	bl	8014a08 <pushStack_walk>



	unsigned short count_number = 1;
 801167e:	2301      	movs	r3, #1
 8011680:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011684:	f102 026e 	add.w	r2, r2, #110	; 0x6e
 8011688:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate,Row_or_Column,Direction,dis_cost;
	while (1) {

		Xcoordinate = popStack_walk(&stack_x);
 801168a:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801168e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011692:	4618      	mov	r0, r3
 8011694:	f003 f9e2 	bl	8014a5c <popStack_walk>
 8011698:	4603      	mov	r3, r0
 801169a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801169e:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80116a2:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 80116a4:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80116a8:	f103 0320 	add.w	r3, r3, #32
 80116ac:	3b0c      	subs	r3, #12
 80116ae:	4618      	mov	r0, r3
 80116b0:	f003 f9d4 	bl	8014a5c <popStack_walk>
 80116b4:	4603      	mov	r3, r0
 80116b6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80116ba:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 80116be:	8013      	strh	r3, [r2, #0]
		Row_or_Column = popStack_walk(&stack_matrix);
 80116c0:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80116c4:	3b14      	subs	r3, #20
 80116c6:	4618      	mov	r0, r3
 80116c8:	f003 f9c8 	bl	8014a5c <popStack_walk>
 80116cc:	4603      	mov	r3, r0
 80116ce:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80116d2:	f102 0268 	add.w	r2, r2, #104	; 0x68
 80116d6:	8013      	strh	r3, [r2, #0]
		Direction = popStack_walk(&stack_direction);
 80116d8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80116dc:	3b3c      	subs	r3, #60	; 0x3c
 80116de:	4618      	mov	r0, r3
 80116e0:	f003 f9bc 	bl	8014a5c <popStack_walk>
 80116e4:	4603      	mov	r3, r0
 80116e6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80116ea:	f102 0266 	add.w	r2, r2, #102	; 0x66
 80116ee:	8013      	strh	r3, [r2, #0]
		dis_cost = popStack_walk(&stack_cost);
 80116f0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80116f4:	3b64      	subs	r3, #100	; 0x64
 80116f6:	4618      	mov	r0, r3
 80116f8:	f003 f9b0 	bl	8014a5c <popStack_walk>
 80116fc:	4603      	mov	r3, r0
 80116fe:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011702:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8011706:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
		//printf("cost_num %d\n",dis_cost);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8011708:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801170c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011710:	881b      	ldrh	r3, [r3, #0]
 8011712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011716:	4293      	cmp	r3, r2
 8011718:	f001 83a9 	beq.w	8012e6e <create_DijkstraMap+0x1a7e>
 801171c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011720:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011724:	881b      	ldrh	r3, [r3, #0]
 8011726:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801172a:	4293      	cmp	r3, r2
 801172c:	f001 839f 	beq.w	8012e6e <create_DijkstraMap+0x1a7e>
			//printf("stack_end\n");
			break;
		}
		if(Row_or_Column==COLUMN){
 8011730:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011734:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8011738:	881b      	ldrh	r3, [r3, #0]
 801173a:	2b00      	cmp	r3, #0
 801173c:	f040 85c5 	bne.w	80122ca <create_DijkstraMap+0xeda>
			if(Ycoordinate <= 13){
 8011740:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011744:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011748:	881b      	ldrh	r3, [r3, #0]
 801174a:	2b0d      	cmp	r3, #13
 801174c:	f200 80f2 	bhi.w	8011934 <create_DijkstraMap+0x544>
				if(Direction==SLANT_NORTH){
 8011750:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011754:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8011758:	881b      	ldrh	r3, [r3, #0]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d12e      	bne.n	80117bc <create_DijkstraMap+0x3cc>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 801175e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011762:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8011766:	881b      	ldrh	r3, [r3, #0]
 8011768:	3301      	adds	r3, #1
 801176a:	b29b      	uxth	r3, r3
 801176c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011770:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011774:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8011776:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801177a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801177e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011782:	2b04      	cmp	r3, #4
 8011784:	dd05      	ble.n	8011792 <create_DijkstraMap+0x3a2>
 8011786:	2304      	movs	r3, #4
 8011788:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801178c:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011790:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 8011792:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011796:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801179a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801179e:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80117a2:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 80117a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80117aa:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80117ae:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 80117b2:	8013      	strh	r3, [r2, #0]
 80117b4:	e012      	b.n	80117dc <create_DijkstraMap+0x3ec>
 80117b6:	bf00      	nop
 80117b8:	20000f34 	.word	0x20000f34
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 80117bc:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80117c0:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 80117c4:	881b      	ldrh	r3, [r3, #0]
 80117c6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80117ca:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 80117ce:	8013      	strh	r3, [r2, #0]
 80117d0:	2300      	movs	r3, #0
 80117d2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80117d6:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80117da:	8013      	strh	r3, [r2, #0]
				if((wall.column[Ycoordinate+1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate+1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost){
 80117dc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80117e0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80117e4:	881b      	ldrh	r3, [r3, #0]
 80117e6:	3301      	adds	r3, #1
 80117e8:	4a70      	ldr	r2, [pc, #448]	; (80119ac <create_DijkstraMap+0x5bc>)
 80117ea:	330c      	adds	r3, #12
 80117ec:	005b      	lsls	r3, r3, #1
 80117ee:	4413      	add	r3, r2
 80117f0:	88db      	ldrh	r3, [r3, #6]
 80117f2:	461a      	mov	r2, r3
 80117f4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80117f8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80117fc:	881b      	ldrh	r3, [r3, #0]
 80117fe:	fa42 f303 	asr.w	r3, r2, r3
 8011802:	f003 0301 	and.w	r3, r3, #1
 8011806:	2b00      	cmp	r3, #0
 8011808:	f040 8094 	bne.w	8011934 <create_DijkstraMap+0x544>
 801180c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011810:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011814:	881a      	ldrh	r2, [r3, #0]
 8011816:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801181a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801181e:	881b      	ldrh	r3, [r3, #0]
 8011820:	1c59      	adds	r1, r3, #1
 8011822:	4863      	ldr	r0, [pc, #396]	; (80119b0 <create_DijkstraMap+0x5c0>)
 8011824:	4613      	mov	r3, r2
 8011826:	011b      	lsls	r3, r3, #4
 8011828:	1a9b      	subs	r3, r3, r2
 801182a:	440b      	add	r3, r1
 801182c:	33f0      	adds	r3, #240	; 0xf0
 801182e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011832:	461c      	mov	r4, r3
 8011834:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011838:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801183c:	881a      	ldrh	r2, [r3, #0]
 801183e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011842:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011846:	8819      	ldrh	r1, [r3, #0]
 8011848:	4859      	ldr	r0, [pc, #356]	; (80119b0 <create_DijkstraMap+0x5c0>)
 801184a:	4613      	mov	r3, r2
 801184c:	011b      	lsls	r3, r3, #4
 801184e:	1a9b      	subs	r3, r3, r2
 8011850:	440b      	add	r3, r1
 8011852:	33f0      	adds	r3, #240	; 0xf0
 8011854:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011858:	461a      	mov	r2, r3
 801185a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801185e:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8011862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011866:	4413      	add	r3, r2
 8011868:	429c      	cmp	r4, r3
 801186a:	dd63      	ble.n	8011934 <create_DijkstraMap+0x544>
					Dijkstra.column_count[Xcoordinate][Ycoordinate+1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost;
 801186c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011870:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011874:	881a      	ldrh	r2, [r3, #0]
 8011876:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801187a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801187e:	8819      	ldrh	r1, [r3, #0]
 8011880:	484b      	ldr	r0, [pc, #300]	; (80119b0 <create_DijkstraMap+0x5c0>)
 8011882:	4613      	mov	r3, r2
 8011884:	011b      	lsls	r3, r3, #4
 8011886:	1a9b      	subs	r3, r3, r2
 8011888:	440b      	add	r3, r1
 801188a:	33f0      	adds	r3, #240	; 0xf0
 801188c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011890:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011894:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8011898:	881b      	ldrh	r3, [r3, #0]
 801189a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801189e:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80118a2:	8812      	ldrh	r2, [r2, #0]
 80118a4:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 80118a8:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 80118ac:	8809      	ldrh	r1, [r1, #0]
 80118ae:	3101      	adds	r1, #1
 80118b0:	4403      	add	r3, r0
 80118b2:	b29c      	uxth	r4, r3
 80118b4:	483e      	ldr	r0, [pc, #248]	; (80119b0 <create_DijkstraMap+0x5c0>)
 80118b6:	4613      	mov	r3, r2
 80118b8:	011b      	lsls	r3, r3, #4
 80118ba:	1a9b      	subs	r3, r3, r2
 80118bc:	440b      	add	r3, r1
 80118be:	33f0      	adds	r3, #240	; 0xf0
 80118c0:	4622      	mov	r2, r4
 80118c2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 80118c6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80118ca:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80118ce:	881a      	ldrh	r2, [r3, #0]
 80118d0:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80118d4:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80118d8:	4611      	mov	r1, r2
 80118da:	4618      	mov	r0, r3
 80118dc:	f003 f894 	bl	8014a08 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate + 1);
 80118e0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80118e4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80118e8:	881b      	ldrh	r3, [r3, #0]
 80118ea:	3301      	adds	r3, #1
 80118ec:	b29a      	uxth	r2, r3
 80118ee:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80118f2:	f103 0320 	add.w	r3, r3, #32
 80118f6:	3b0c      	subs	r3, #12
 80118f8:	4611      	mov	r1, r2
 80118fa:	4618      	mov	r0, r3
 80118fc:	f003 f884 	bl	8014a08 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8011900:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011904:	3b14      	subs	r3, #20
 8011906:	2100      	movs	r1, #0
 8011908:	4618      	mov	r0, r3
 801190a:	f003 f87d 	bl	8014a08 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH);
 801190e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011912:	3b3c      	subs	r3, #60	; 0x3c
 8011914:	2100      	movs	r1, #0
 8011916:	4618      	mov	r0, r3
 8011918:	f003 f876 	bl	8014a08 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 801191c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011920:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011924:	881a      	ldrh	r2, [r3, #0]
 8011926:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801192a:	3b64      	subs	r3, #100	; 0x64
 801192c:	4611      	mov	r1, r2
 801192e:	4618      	mov	r0, r3
 8011930:	f003 f86a 	bl	8014a08 <pushStack_walk>
				}
			}
			if (Ycoordinate >= 1) {
 8011934:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011938:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801193c:	881b      	ldrh	r3, [r3, #0]
 801193e:	2b00      	cmp	r3, #0
 8011940:	f000 80f4 	beq.w	8011b2c <create_DijkstraMap+0x73c>
				if(Direction==SLANT_SOUTH){
 8011944:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011948:	f103 0366 	add.w	r3, r3, #102	; 0x66
 801194c:	881b      	ldrh	r3, [r3, #0]
 801194e:	2b04      	cmp	r3, #4
 8011950:	d130      	bne.n	80119b4 <create_DijkstraMap+0x5c4>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8011952:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011956:	f103 0364 	add.w	r3, r3, #100	; 0x64
 801195a:	881b      	ldrh	r3, [r3, #0]
 801195c:	3301      	adds	r3, #1
 801195e:	b29b      	uxth	r3, r3
 8011960:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011964:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011968:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 801196a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801196e:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011976:	2b04      	cmp	r3, #4
 8011978:	dd05      	ble.n	8011986 <create_DijkstraMap+0x596>
 801197a:	2304      	movs	r3, #4
 801197c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011980:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011984:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 8011986:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801198a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801198e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011992:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011996:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 801199a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801199e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80119a2:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 80119a6:	8013      	strh	r3, [r2, #0]
 80119a8:	e014      	b.n	80119d4 <create_DijkstraMap+0x5e4>
 80119aa:	bf00      	nop
 80119ac:	20000c40 	.word	0x20000c40
 80119b0:	20000f34 	.word	0x20000f34
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 80119b4:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80119b8:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 80119bc:	881b      	ldrh	r3, [r3, #0]
 80119be:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80119c2:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 80119c6:	8013      	strh	r3, [r2, #0]
 80119c8:	2300      	movs	r3, #0
 80119ca:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80119ce:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80119d2:	8013      	strh	r3, [r2, #0]
				if((wall.column[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost){
 80119d4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80119d8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80119dc:	881b      	ldrh	r3, [r3, #0]
 80119de:	3b01      	subs	r3, #1
 80119e0:	4a70      	ldr	r2, [pc, #448]	; (8011ba4 <create_DijkstraMap+0x7b4>)
 80119e2:	330c      	adds	r3, #12
 80119e4:	005b      	lsls	r3, r3, #1
 80119e6:	4413      	add	r3, r2
 80119e8:	88db      	ldrh	r3, [r3, #6]
 80119ea:	461a      	mov	r2, r3
 80119ec:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80119f0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80119f4:	881b      	ldrh	r3, [r3, #0]
 80119f6:	fa42 f303 	asr.w	r3, r2, r3
 80119fa:	f003 0301 	and.w	r3, r3, #1
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	f040 8094 	bne.w	8011b2c <create_DijkstraMap+0x73c>
 8011a04:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a08:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011a0c:	881a      	ldrh	r2, [r3, #0]
 8011a0e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a12:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011a16:	881b      	ldrh	r3, [r3, #0]
 8011a18:	1e59      	subs	r1, r3, #1
 8011a1a:	4863      	ldr	r0, [pc, #396]	; (8011ba8 <create_DijkstraMap+0x7b8>)
 8011a1c:	4613      	mov	r3, r2
 8011a1e:	011b      	lsls	r3, r3, #4
 8011a20:	1a9b      	subs	r3, r3, r2
 8011a22:	440b      	add	r3, r1
 8011a24:	33f0      	adds	r3, #240	; 0xf0
 8011a26:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011a2a:	461c      	mov	r4, r3
 8011a2c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a30:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011a34:	881a      	ldrh	r2, [r3, #0]
 8011a36:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a3a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011a3e:	8819      	ldrh	r1, [r3, #0]
 8011a40:	4859      	ldr	r0, [pc, #356]	; (8011ba8 <create_DijkstraMap+0x7b8>)
 8011a42:	4613      	mov	r3, r2
 8011a44:	011b      	lsls	r3, r3, #4
 8011a46:	1a9b      	subs	r3, r3, r2
 8011a48:	440b      	add	r3, r1
 8011a4a:	33f0      	adds	r3, #240	; 0xf0
 8011a4c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011a50:	461a      	mov	r2, r3
 8011a52:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a56:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8011a5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a5e:	4413      	add	r3, r2
 8011a60:	429c      	cmp	r4, r3
 8011a62:	dd63      	ble.n	8011b2c <create_DijkstraMap+0x73c>
					Dijkstra.column_count[Xcoordinate][Ycoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost;
 8011a64:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a68:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011a6c:	881a      	ldrh	r2, [r3, #0]
 8011a6e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a72:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011a76:	8819      	ldrh	r1, [r3, #0]
 8011a78:	484b      	ldr	r0, [pc, #300]	; (8011ba8 <create_DijkstraMap+0x7b8>)
 8011a7a:	4613      	mov	r3, r2
 8011a7c:	011b      	lsls	r3, r3, #4
 8011a7e:	1a9b      	subs	r3, r3, r2
 8011a80:	440b      	add	r3, r1
 8011a82:	33f0      	adds	r3, #240	; 0xf0
 8011a84:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011a88:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a8c:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8011a90:	881b      	ldrh	r3, [r3, #0]
 8011a92:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011a96:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8011a9a:	8812      	ldrh	r2, [r2, #0]
 8011a9c:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8011aa0:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8011aa4:	8809      	ldrh	r1, [r1, #0]
 8011aa6:	3901      	subs	r1, #1
 8011aa8:	4403      	add	r3, r0
 8011aaa:	b29c      	uxth	r4, r3
 8011aac:	483e      	ldr	r0, [pc, #248]	; (8011ba8 <create_DijkstraMap+0x7b8>)
 8011aae:	4613      	mov	r3, r2
 8011ab0:	011b      	lsls	r3, r3, #4
 8011ab2:	1a9b      	subs	r3, r3, r2
 8011ab4:	440b      	add	r3, r1
 8011ab6:	33f0      	adds	r3, #240	; 0xf0
 8011ab8:	4622      	mov	r2, r4
 8011aba:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011abe:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ac2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011ac6:	881a      	ldrh	r2, [r3, #0]
 8011ac8:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011acc:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011ad0:	4611      	mov	r1, r2
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f002 ff98 	bl	8014a08 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate - 1);
 8011ad8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011adc:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011ae0:	881b      	ldrh	r3, [r3, #0]
 8011ae2:	3b01      	subs	r3, #1
 8011ae4:	b29a      	uxth	r2, r3
 8011ae6:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011aea:	f103 0320 	add.w	r3, r3, #32
 8011aee:	3b0c      	subs	r3, #12
 8011af0:	4611      	mov	r1, r2
 8011af2:	4618      	mov	r0, r3
 8011af4:	f002 ff88 	bl	8014a08 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8011af8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011afc:	3b14      	subs	r3, #20
 8011afe:	2100      	movs	r1, #0
 8011b00:	4618      	mov	r0, r3
 8011b02:	f002 ff81 	bl	8014a08 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH);
 8011b06:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011b0a:	3b3c      	subs	r3, #60	; 0x3c
 8011b0c:	2104      	movs	r1, #4
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f002 ff7a 	bl	8014a08 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011b14:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b18:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011b1c:	881a      	ldrh	r2, [r3, #0]
 8011b1e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011b22:	3b64      	subs	r3, #100	; 0x64
 8011b24:	4611      	mov	r1, r2
 8011b26:	4618      	mov	r0, r3
 8011b28:	f002 ff6e 	bl	8014a08 <pushStack_walk>
				}
			}
			if (Xcoordinate <= 14) {
 8011b2c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b30:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011b34:	881b      	ldrh	r3, [r3, #0]
 8011b36:	2b0e      	cmp	r3, #14
 8011b38:	f200 81da 	bhi.w	8011ef0 <create_DijkstraMap+0xb00>
				if(Direction==SLANT_SOUTH_EAST){
 8011b3c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b40:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8011b44:	881b      	ldrh	r3, [r3, #0]
 8011b46:	2b03      	cmp	r3, #3
 8011b48:	d130      	bne.n	8011bac <create_DijkstraMap+0x7bc>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8011b4a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b4e:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8011b52:	881b      	ldrh	r3, [r3, #0]
 8011b54:	3301      	adds	r3, #1
 8011b56:	b29b      	uxth	r3, r3
 8011b58:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011b5c:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011b60:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8011b62:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b66:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b6e:	2b05      	cmp	r3, #5
 8011b70:	dd05      	ble.n	8011b7e <create_DijkstraMap+0x78e>
 8011b72:	2305      	movs	r3, #5
 8011b74:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011b78:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011b7c:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8011b7e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b82:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011b86:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011b8a:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011b8e:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011b92:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011b96:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011b9a:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011b9e:	8013      	strh	r3, [r2, #0]
 8011ba0:	e014      	b.n	8011bcc <create_DijkstraMap+0x7dc>
 8011ba2:	bf00      	nop
 8011ba4:	20000c40 	.word	0x20000c40
 8011ba8:	20000f34 	.word	0x20000f34
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8011bac:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011bb0:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011bb4:	881b      	ldrh	r3, [r3, #0]
 8011bb6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011bba:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011bbe:	8013      	strh	r3, [r2, #0]
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011bc6:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011bca:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8011bcc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011bd0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011bd4:	881b      	ldrh	r3, [r3, #0]
 8011bd6:	4a68      	ldr	r2, [pc, #416]	; (8011d78 <create_DijkstraMap+0x988>)
 8011bd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011bdc:	461a      	mov	r2, r3
 8011bde:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011be2:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011be6:	881b      	ldrh	r3, [r3, #0]
 8011be8:	fa42 f303 	asr.w	r3, r2, r3
 8011bec:	f003 0301 	and.w	r3, r3, #1
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	f040 808e 	bne.w	8011d12 <create_DijkstraMap+0x922>
 8011bf6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011bfa:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011bfe:	881a      	ldrh	r2, [r3, #0]
 8011c00:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c04:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011c08:	8819      	ldrh	r1, [r3, #0]
 8011c0a:	485c      	ldr	r0, [pc, #368]	; (8011d7c <create_DijkstraMap+0x98c>)
 8011c0c:	4613      	mov	r3, r2
 8011c0e:	011b      	lsls	r3, r3, #4
 8011c10:	1a9b      	subs	r3, r3, r2
 8011c12:	440b      	add	r3, r1
 8011c14:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011c18:	461c      	mov	r4, r3
 8011c1a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c1e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011c22:	881a      	ldrh	r2, [r3, #0]
 8011c24:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c28:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011c2c:	8819      	ldrh	r1, [r3, #0]
 8011c2e:	4853      	ldr	r0, [pc, #332]	; (8011d7c <create_DijkstraMap+0x98c>)
 8011c30:	4613      	mov	r3, r2
 8011c32:	011b      	lsls	r3, r3, #4
 8011c34:	1a9b      	subs	r3, r3, r2
 8011c36:	440b      	add	r3, r1
 8011c38:	33f0      	adds	r3, #240	; 0xf0
 8011c3a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011c3e:	461a      	mov	r2, r3
 8011c40:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c44:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8011c48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c4c:	4413      	add	r3, r2
 8011c4e:	429c      	cmp	r4, r3
 8011c50:	dd5f      	ble.n	8011d12 <create_DijkstraMap+0x922>
					Dijkstra.row_count[Ycoordinate][Xcoordinate]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8011c52:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c56:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011c5a:	881a      	ldrh	r2, [r3, #0]
 8011c5c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c60:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011c64:	8819      	ldrh	r1, [r3, #0]
 8011c66:	4845      	ldr	r0, [pc, #276]	; (8011d7c <create_DijkstraMap+0x98c>)
 8011c68:	4613      	mov	r3, r2
 8011c6a:	011b      	lsls	r3, r3, #4
 8011c6c:	1a9b      	subs	r3, r3, r2
 8011c6e:	440b      	add	r3, r1
 8011c70:	33f0      	adds	r3, #240	; 0xf0
 8011c72:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011c76:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c7a:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8011c7e:	881b      	ldrh	r3, [r3, #0]
 8011c80:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011c84:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8011c88:	8812      	ldrh	r2, [r2, #0]
 8011c8a:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8011c8e:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8011c92:	8809      	ldrh	r1, [r1, #0]
 8011c94:	4403      	add	r3, r0
 8011c96:	b29c      	uxth	r4, r3
 8011c98:	4838      	ldr	r0, [pc, #224]	; (8011d7c <create_DijkstraMap+0x98c>)
 8011c9a:	4613      	mov	r3, r2
 8011c9c:	011b      	lsls	r3, r3, #4
 8011c9e:	1a9b      	subs	r3, r3, r2
 8011ca0:	440b      	add	r3, r1
 8011ca2:	4622      	mov	r2, r4
 8011ca4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011ca8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011cac:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011cb0:	881a      	ldrh	r2, [r3, #0]
 8011cb2:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011cb6:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011cba:	4611      	mov	r1, r2
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f002 fea3 	bl	8014a08 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 8011cc2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011cc6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011cca:	881a      	ldrh	r2, [r3, #0]
 8011ccc:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011cd0:	f103 0320 	add.w	r3, r3, #32
 8011cd4:	3b0c      	subs	r3, #12
 8011cd6:	4611      	mov	r1, r2
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f002 fe95 	bl	8014a08 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8011cde:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011ce2:	3b14      	subs	r3, #20
 8011ce4:	2101      	movs	r1, #1
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	f002 fe8e 	bl	8014a08 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 8011cec:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011cf0:	3b3c      	subs	r3, #60	; 0x3c
 8011cf2:	2103      	movs	r1, #3
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	f002 fe87 	bl	8014a08 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011cfa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011cfe:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011d02:	881a      	ldrh	r2, [r3, #0]
 8011d04:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011d08:	3b64      	subs	r3, #100	; 0x64
 8011d0a:	4611      	mov	r1, r2
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f002 fe7b 	bl	8014a08 <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_EAST){
 8011d12:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d16:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8011d1a:	881b      	ldrh	r3, [r3, #0]
 8011d1c:	2b01      	cmp	r3, #1
 8011d1e:	d12f      	bne.n	8011d80 <create_DijkstraMap+0x990>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8011d20:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d24:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8011d28:	881b      	ldrh	r3, [r3, #0]
 8011d2a:	3301      	adds	r3, #1
 8011d2c:	b29b      	uxth	r3, r3
 8011d2e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011d32:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011d36:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8011d38:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d3c:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011d44:	2b05      	cmp	r3, #5
 8011d46:	dd05      	ble.n	8011d54 <create_DijkstraMap+0x964>
 8011d48:	2305      	movs	r3, #5
 8011d4a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011d4e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011d52:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8011d54:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d58:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011d5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011d60:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011d64:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011d68:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011d6c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011d70:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011d74:	8013      	strh	r3, [r2, #0]
 8011d76:	e013      	b.n	8011da0 <create_DijkstraMap+0x9b0>
 8011d78:	20000c40 	.word	0x20000c40
 8011d7c:	20000f34 	.word	0x20000f34
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8011d80:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011d84:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011d88:	881b      	ldrh	r3, [r3, #0]
 8011d8a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011d8e:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011d92:	8013      	strh	r3, [r2, #0]
 8011d94:	2300      	movs	r3, #0
 8011d96:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011d9a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011d9e:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate] & (1 << (Ycoordinate+1)))==0 && Dijkstra.row_count[Ycoordinate+1][Xcoordinate]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8011da0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011da4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011da8:	881b      	ldrh	r3, [r3, #0]
 8011daa:	4a6f      	ldr	r2, [pc, #444]	; (8011f68 <create_DijkstraMap+0xb78>)
 8011dac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011db0:	461a      	mov	r2, r3
 8011db2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011db6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011dba:	881b      	ldrh	r3, [r3, #0]
 8011dbc:	3301      	adds	r3, #1
 8011dbe:	fa42 f303 	asr.w	r3, r2, r3
 8011dc2:	f003 0301 	and.w	r3, r3, #1
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	f040 8092 	bne.w	8011ef0 <create_DijkstraMap+0xb00>
 8011dcc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011dd0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011dd4:	881b      	ldrh	r3, [r3, #0]
 8011dd6:	1c5a      	adds	r2, r3, #1
 8011dd8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ddc:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011de0:	8819      	ldrh	r1, [r3, #0]
 8011de2:	4862      	ldr	r0, [pc, #392]	; (8011f6c <create_DijkstraMap+0xb7c>)
 8011de4:	4613      	mov	r3, r2
 8011de6:	011b      	lsls	r3, r3, #4
 8011de8:	1a9b      	subs	r3, r3, r2
 8011dea:	440b      	add	r3, r1
 8011dec:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011df0:	461c      	mov	r4, r3
 8011df2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011df6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011dfa:	881a      	ldrh	r2, [r3, #0]
 8011dfc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e00:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011e04:	8819      	ldrh	r1, [r3, #0]
 8011e06:	4859      	ldr	r0, [pc, #356]	; (8011f6c <create_DijkstraMap+0xb7c>)
 8011e08:	4613      	mov	r3, r2
 8011e0a:	011b      	lsls	r3, r3, #4
 8011e0c:	1a9b      	subs	r3, r3, r2
 8011e0e:	440b      	add	r3, r1
 8011e10:	33f0      	adds	r3, #240	; 0xf0
 8011e12:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011e16:	461a      	mov	r2, r3
 8011e18:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e1c:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8011e20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e24:	4413      	add	r3, r2
 8011e26:	429c      	cmp	r4, r3
 8011e28:	dd62      	ble.n	8011ef0 <create_DijkstraMap+0xb00>
					Dijkstra.row_count[Ycoordinate+1][Xcoordinate]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8011e2a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e2e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011e32:	881a      	ldrh	r2, [r3, #0]
 8011e34:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e38:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011e3c:	8819      	ldrh	r1, [r3, #0]
 8011e3e:	484b      	ldr	r0, [pc, #300]	; (8011f6c <create_DijkstraMap+0xb7c>)
 8011e40:	4613      	mov	r3, r2
 8011e42:	011b      	lsls	r3, r3, #4
 8011e44:	1a9b      	subs	r3, r3, r2
 8011e46:	440b      	add	r3, r1
 8011e48:	33f0      	adds	r3, #240	; 0xf0
 8011e4a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011e4e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e52:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8011e56:	881b      	ldrh	r3, [r3, #0]
 8011e58:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011e5c:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8011e60:	8812      	ldrh	r2, [r2, #0]
 8011e62:	3201      	adds	r2, #1
 8011e64:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8011e68:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8011e6c:	8809      	ldrh	r1, [r1, #0]
 8011e6e:	4403      	add	r3, r0
 8011e70:	b29c      	uxth	r4, r3
 8011e72:	483e      	ldr	r0, [pc, #248]	; (8011f6c <create_DijkstraMap+0xb7c>)
 8011e74:	4613      	mov	r3, r2
 8011e76:	011b      	lsls	r3, r3, #4
 8011e78:	1a9b      	subs	r3, r3, r2
 8011e7a:	440b      	add	r3, r1
 8011e7c:	4622      	mov	r2, r4
 8011e7e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011e82:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e86:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011e8a:	881a      	ldrh	r2, [r3, #0]
 8011e8c:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011e90:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011e94:	4611      	mov	r1, r2
 8011e96:	4618      	mov	r0, r3
 8011e98:	f002 fdb6 	bl	8014a08 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 8011e9c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ea0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011ea4:	881b      	ldrh	r3, [r3, #0]
 8011ea6:	3301      	adds	r3, #1
 8011ea8:	b29a      	uxth	r2, r3
 8011eaa:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011eae:	f103 0320 	add.w	r3, r3, #32
 8011eb2:	3b0c      	subs	r3, #12
 8011eb4:	4611      	mov	r1, r2
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f002 fda6 	bl	8014a08 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8011ebc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011ec0:	3b14      	subs	r3, #20
 8011ec2:	2101      	movs	r1, #1
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	f002 fd9f 	bl	8014a08 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 8011eca:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011ece:	3b3c      	subs	r3, #60	; 0x3c
 8011ed0:	2101      	movs	r1, #1
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f002 fd98 	bl	8014a08 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011ed8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011edc:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011ee0:	881a      	ldrh	r2, [r3, #0]
 8011ee2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011ee6:	3b64      	subs	r3, #100	; 0x64
 8011ee8:	4611      	mov	r1, r2
 8011eea:	4618      	mov	r0, r3
 8011eec:	f002 fd8c 	bl	8014a08 <pushStack_walk>
				}
			}
			if (Xcoordinate >= 1) {
 8011ef0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ef4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011ef8:	881b      	ldrh	r3, [r3, #0]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	f000 81e5 	beq.w	80122ca <create_DijkstraMap+0xeda>
				if(Direction==SLANT_SOUTH_WEST){
 8011f00:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f04:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8011f08:	881b      	ldrh	r3, [r3, #0]
 8011f0a:	2b05      	cmp	r3, #5
 8011f0c:	d130      	bne.n	8011f70 <create_DijkstraMap+0xb80>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8011f0e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f12:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8011f16:	881b      	ldrh	r3, [r3, #0]
 8011f18:	3301      	adds	r3, #1
 8011f1a:	b29b      	uxth	r3, r3
 8011f1c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011f20:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011f24:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8011f26:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f2a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011f2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011f32:	2b05      	cmp	r3, #5
 8011f34:	dd05      	ble.n	8011f42 <create_DijkstraMap+0xb52>
 8011f36:	2305      	movs	r3, #5
 8011f38:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011f3c:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011f40:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8011f42:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f46:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011f4a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011f4e:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011f52:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011f56:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011f5a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011f5e:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011f62:	8013      	strh	r3, [r2, #0]
 8011f64:	e014      	b.n	8011f90 <create_DijkstraMap+0xba0>
 8011f66:	bf00      	nop
 8011f68:	20000c40 	.word	0x20000c40
 8011f6c:	20000f34 	.word	0x20000f34
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8011f70:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011f74:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011f78:	881b      	ldrh	r3, [r3, #0]
 8011f7a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011f7e:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011f82:	8013      	strh	r3, [r2, #0]
 8011f84:	2300      	movs	r3, #0
 8011f86:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011f8a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011f8e:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8011f90:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f94:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011f98:	881b      	ldrh	r3, [r3, #0]
 8011f9a:	3b01      	subs	r3, #1
 8011f9c:	4a6a      	ldr	r2, [pc, #424]	; (8012148 <create_DijkstraMap+0xd58>)
 8011f9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011fa2:	461a      	mov	r2, r3
 8011fa4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011fa8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011fac:	881b      	ldrh	r3, [r3, #0]
 8011fae:	fa42 f303 	asr.w	r3, r2, r3
 8011fb2:	f003 0301 	and.w	r3, r3, #1
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	f040 8092 	bne.w	80120e0 <create_DijkstraMap+0xcf0>
 8011fbc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011fc0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011fc4:	881a      	ldrh	r2, [r3, #0]
 8011fc6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011fca:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011fce:	881b      	ldrh	r3, [r3, #0]
 8011fd0:	1e59      	subs	r1, r3, #1
 8011fd2:	485e      	ldr	r0, [pc, #376]	; (801214c <create_DijkstraMap+0xd5c>)
 8011fd4:	4613      	mov	r3, r2
 8011fd6:	011b      	lsls	r3, r3, #4
 8011fd8:	1a9b      	subs	r3, r3, r2
 8011fda:	440b      	add	r3, r1
 8011fdc:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011fe0:	461c      	mov	r4, r3
 8011fe2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011fe6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011fea:	881a      	ldrh	r2, [r3, #0]
 8011fec:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ff0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011ff4:	8819      	ldrh	r1, [r3, #0]
 8011ff6:	4855      	ldr	r0, [pc, #340]	; (801214c <create_DijkstraMap+0xd5c>)
 8011ff8:	4613      	mov	r3, r2
 8011ffa:	011b      	lsls	r3, r3, #4
 8011ffc:	1a9b      	subs	r3, r3, r2
 8011ffe:	440b      	add	r3, r1
 8012000:	33f0      	adds	r3, #240	; 0xf0
 8012002:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012006:	461a      	mov	r2, r3
 8012008:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801200c:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012010:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012014:	4413      	add	r3, r2
 8012016:	429c      	cmp	r4, r3
 8012018:	dd62      	ble.n	80120e0 <create_DijkstraMap+0xcf0>
					Dijkstra.row_count[Ycoordinate][Xcoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 801201a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801201e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012022:	881a      	ldrh	r2, [r3, #0]
 8012024:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012028:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801202c:	8819      	ldrh	r1, [r3, #0]
 801202e:	4847      	ldr	r0, [pc, #284]	; (801214c <create_DijkstraMap+0xd5c>)
 8012030:	4613      	mov	r3, r2
 8012032:	011b      	lsls	r3, r3, #4
 8012034:	1a9b      	subs	r3, r3, r2
 8012036:	440b      	add	r3, r1
 8012038:	33f0      	adds	r3, #240	; 0xf0
 801203a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 801203e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012042:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012046:	881b      	ldrh	r3, [r3, #0]
 8012048:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801204c:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012050:	8812      	ldrh	r2, [r2, #0]
 8012052:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012056:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 801205a:	8809      	ldrh	r1, [r1, #0]
 801205c:	3901      	subs	r1, #1
 801205e:	4403      	add	r3, r0
 8012060:	b29c      	uxth	r4, r3
 8012062:	483a      	ldr	r0, [pc, #232]	; (801214c <create_DijkstraMap+0xd5c>)
 8012064:	4613      	mov	r3, r2
 8012066:	011b      	lsls	r3, r3, #4
 8012068:	1a9b      	subs	r3, r3, r2
 801206a:	440b      	add	r3, r1
 801206c:	4622      	mov	r2, r4
 801206e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 8012072:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012076:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801207a:	881b      	ldrh	r3, [r3, #0]
 801207c:	3b01      	subs	r3, #1
 801207e:	b29a      	uxth	r2, r3
 8012080:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012084:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012088:	4611      	mov	r1, r2
 801208a:	4618      	mov	r0, r3
 801208c:	f002 fcbc 	bl	8014a08 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 8012090:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012094:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012098:	881a      	ldrh	r2, [r3, #0]
 801209a:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801209e:	f103 0320 	add.w	r3, r3, #32
 80120a2:	3b0c      	subs	r3, #12
 80120a4:	4611      	mov	r1, r2
 80120a6:	4618      	mov	r0, r3
 80120a8:	f002 fcae 	bl	8014a08 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 80120ac:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80120b0:	3b14      	subs	r3, #20
 80120b2:	2101      	movs	r1, #1
 80120b4:	4618      	mov	r0, r3
 80120b6:	f002 fca7 	bl	8014a08 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 80120ba:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80120be:	3b3c      	subs	r3, #60	; 0x3c
 80120c0:	2105      	movs	r1, #5
 80120c2:	4618      	mov	r0, r3
 80120c4:	f002 fca0 	bl	8014a08 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 80120c8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120cc:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80120d0:	881a      	ldrh	r2, [r3, #0]
 80120d2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80120d6:	3b64      	subs	r3, #100	; 0x64
 80120d8:	4611      	mov	r1, r2
 80120da:	4618      	mov	r0, r3
 80120dc:	f002 fc94 	bl	8014a08 <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_WEST){
 80120e0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120e4:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80120e8:	881b      	ldrh	r3, [r3, #0]
 80120ea:	2b07      	cmp	r3, #7
 80120ec:	d130      	bne.n	8012150 <create_DijkstraMap+0xd60>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80120ee:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120f2:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80120f6:	881b      	ldrh	r3, [r3, #0]
 80120f8:	3301      	adds	r3, #1
 80120fa:	b29b      	uxth	r3, r3
 80120fc:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012100:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012104:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012106:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801210a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801210e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012112:	2b05      	cmp	r3, #5
 8012114:	dd05      	ble.n	8012122 <create_DijkstraMap+0xd32>
 8012116:	2305      	movs	r3, #5
 8012118:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801211c:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012120:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8012122:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012126:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801212a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801212e:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012132:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012136:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801213a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801213e:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012142:	8013      	strh	r3, [r2, #0]
 8012144:	e014      	b.n	8012170 <create_DijkstraMap+0xd80>
 8012146:	bf00      	nop
 8012148:	20000c40 	.word	0x20000c40
 801214c:	20000f34 	.word	0x20000f34
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012150:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012154:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012158:	881b      	ldrh	r3, [r3, #0]
 801215a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801215e:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012162:	8013      	strh	r3, [r2, #0]
 8012164:	2300      	movs	r3, #0
 8012166:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801216a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801216e:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate-1] & (1 << (Ycoordinate+1)))==0 && Dijkstra.row_count[Ycoordinate+1][Xcoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8012170:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012174:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012178:	881b      	ldrh	r3, [r3, #0]
 801217a:	3b01      	subs	r3, #1
 801217c:	4a74      	ldr	r2, [pc, #464]	; (8012350 <create_DijkstraMap+0xf60>)
 801217e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012182:	461a      	mov	r2, r3
 8012184:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012188:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801218c:	881b      	ldrh	r3, [r3, #0]
 801218e:	3301      	adds	r3, #1
 8012190:	fa42 f303 	asr.w	r3, r2, r3
 8012194:	f003 0301 	and.w	r3, r3, #1
 8012198:	2b00      	cmp	r3, #0
 801219a:	f040 8096 	bne.w	80122ca <create_DijkstraMap+0xeda>
 801219e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121a2:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80121a6:	881b      	ldrh	r3, [r3, #0]
 80121a8:	1c5a      	adds	r2, r3, #1
 80121aa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121ae:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80121b2:	881b      	ldrh	r3, [r3, #0]
 80121b4:	1e59      	subs	r1, r3, #1
 80121b6:	4867      	ldr	r0, [pc, #412]	; (8012354 <create_DijkstraMap+0xf64>)
 80121b8:	4613      	mov	r3, r2
 80121ba:	011b      	lsls	r3, r3, #4
 80121bc:	1a9b      	subs	r3, r3, r2
 80121be:	440b      	add	r3, r1
 80121c0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80121c4:	461c      	mov	r4, r3
 80121c6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121ca:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80121ce:	881a      	ldrh	r2, [r3, #0]
 80121d0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121d4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80121d8:	8819      	ldrh	r1, [r3, #0]
 80121da:	485e      	ldr	r0, [pc, #376]	; (8012354 <create_DijkstraMap+0xf64>)
 80121dc:	4613      	mov	r3, r2
 80121de:	011b      	lsls	r3, r3, #4
 80121e0:	1a9b      	subs	r3, r3, r2
 80121e2:	440b      	add	r3, r1
 80121e4:	33f0      	adds	r3, #240	; 0xf0
 80121e6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80121ea:	461a      	mov	r2, r3
 80121ec:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121f0:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80121f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80121f8:	4413      	add	r3, r2
 80121fa:	429c      	cmp	r4, r3
 80121fc:	dd65      	ble.n	80122ca <create_DijkstraMap+0xeda>
					Dijkstra.row_count[Ycoordinate+1][Xcoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 80121fe:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012202:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012206:	881a      	ldrh	r2, [r3, #0]
 8012208:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801220c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012210:	8819      	ldrh	r1, [r3, #0]
 8012212:	4850      	ldr	r0, [pc, #320]	; (8012354 <create_DijkstraMap+0xf64>)
 8012214:	4613      	mov	r3, r2
 8012216:	011b      	lsls	r3, r3, #4
 8012218:	1a9b      	subs	r3, r3, r2
 801221a:	440b      	add	r3, r1
 801221c:	33f0      	adds	r3, #240	; 0xf0
 801221e:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012222:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012226:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 801222a:	881b      	ldrh	r3, [r3, #0]
 801222c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012230:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012234:	8812      	ldrh	r2, [r2, #0]
 8012236:	3201      	adds	r2, #1
 8012238:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 801223c:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8012240:	8809      	ldrh	r1, [r1, #0]
 8012242:	3901      	subs	r1, #1
 8012244:	4403      	add	r3, r0
 8012246:	b29c      	uxth	r4, r3
 8012248:	4842      	ldr	r0, [pc, #264]	; (8012354 <create_DijkstraMap+0xf64>)
 801224a:	4613      	mov	r3, r2
 801224c:	011b      	lsls	r3, r3, #4
 801224e:	1a9b      	subs	r3, r3, r2
 8012250:	440b      	add	r3, r1
 8012252:	4622      	mov	r2, r4
 8012254:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 8012258:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801225c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012260:	881b      	ldrh	r3, [r3, #0]
 8012262:	3b01      	subs	r3, #1
 8012264:	b29a      	uxth	r2, r3
 8012266:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801226a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801226e:	4611      	mov	r1, r2
 8012270:	4618      	mov	r0, r3
 8012272:	f002 fbc9 	bl	8014a08 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 8012276:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801227a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801227e:	881b      	ldrh	r3, [r3, #0]
 8012280:	3301      	adds	r3, #1
 8012282:	b29a      	uxth	r2, r3
 8012284:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012288:	f103 0320 	add.w	r3, r3, #32
 801228c:	3b0c      	subs	r3, #12
 801228e:	4611      	mov	r1, r2
 8012290:	4618      	mov	r0, r3
 8012292:	f002 fbb9 	bl	8014a08 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8012296:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801229a:	3b14      	subs	r3, #20
 801229c:	2101      	movs	r1, #1
 801229e:	4618      	mov	r0, r3
 80122a0:	f002 fbb2 	bl	8014a08 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 80122a4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80122a8:	3b3c      	subs	r3, #60	; 0x3c
 80122aa:	2107      	movs	r1, #7
 80122ac:	4618      	mov	r0, r3
 80122ae:	f002 fbab 	bl	8014a08 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 80122b2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122b6:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80122ba:	881a      	ldrh	r2, [r3, #0]
 80122bc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80122c0:	3b64      	subs	r3, #100	; 0x64
 80122c2:	4611      	mov	r1, r2
 80122c4:	4618      	mov	r0, r3
 80122c6:	f002 fb9f 	bl	8014a08 <pushStack_walk>
				}
			}

		}
		if(Row_or_Column==ROW){
 80122ca:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122ce:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80122d2:	881b      	ldrh	r3, [r3, #0]
 80122d4:	2b01      	cmp	r3, #1
 80122d6:	f040 85bd 	bne.w	8012e54 <create_DijkstraMap+0x1a64>
					if(Xcoordinate <= 13){
 80122da:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122de:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80122e2:	881b      	ldrh	r3, [r3, #0]
 80122e4:	2b0d      	cmp	r3, #13
 80122e6:	f200 80ed 	bhi.w	80124c4 <create_DijkstraMap+0x10d4>
						if(Direction==SLANT_EAST){
 80122ea:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122ee:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80122f2:	881b      	ldrh	r3, [r3, #0]
 80122f4:	2b02      	cmp	r3, #2
 80122f6:	d12f      	bne.n	8012358 <create_DijkstraMap+0xf68>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 80122f8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122fc:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012300:	881b      	ldrh	r3, [r3, #0]
 8012302:	3301      	adds	r3, #1
 8012304:	b29b      	uxth	r3, r3
 8012306:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801230a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801230e:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8012310:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012314:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012318:	f9b3 3000 	ldrsh.w	r3, [r3]
 801231c:	2b04      	cmp	r3, #4
 801231e:	dd05      	ble.n	801232c <create_DijkstraMap+0xf3c>
 8012320:	2304      	movs	r3, #4
 8012322:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012326:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801232a:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 801232c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012330:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012334:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012338:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801233c:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012340:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012344:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012348:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 801234c:	8013      	strh	r3, [r2, #0]
 801234e:	e013      	b.n	8012378 <create_DijkstraMap+0xf88>
 8012350:	20000c40 	.word	0x20000c40
 8012354:	20000f34 	.word	0x20000f34
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8012358:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801235c:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012360:	881b      	ldrh	r3, [r3, #0]
 8012362:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012366:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 801236a:	8013      	strh	r3, [r2, #0]
 801236c:	2300      	movs	r3, #0
 801236e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012372:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012376:	8013      	strh	r3, [r2, #0]
						if((wall.row[Xcoordinate+1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate+1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost){
 8012378:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801237c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012380:	881b      	ldrh	r3, [r3, #0]
 8012382:	3301      	adds	r3, #1
 8012384:	4a6d      	ldr	r2, [pc, #436]	; (801253c <create_DijkstraMap+0x114c>)
 8012386:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801238a:	461a      	mov	r2, r3
 801238c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012390:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012394:	881b      	ldrh	r3, [r3, #0]
 8012396:	fa42 f303 	asr.w	r3, r2, r3
 801239a:	f003 0301 	and.w	r3, r3, #1
 801239e:	2b00      	cmp	r3, #0
 80123a0:	f040 8090 	bne.w	80124c4 <create_DijkstraMap+0x10d4>
 80123a4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123a8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80123ac:	881a      	ldrh	r2, [r3, #0]
 80123ae:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123b2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80123b6:	881b      	ldrh	r3, [r3, #0]
 80123b8:	1c59      	adds	r1, r3, #1
 80123ba:	4861      	ldr	r0, [pc, #388]	; (8012540 <create_DijkstraMap+0x1150>)
 80123bc:	4613      	mov	r3, r2
 80123be:	011b      	lsls	r3, r3, #4
 80123c0:	1a9b      	subs	r3, r3, r2
 80123c2:	440b      	add	r3, r1
 80123c4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80123c8:	461c      	mov	r4, r3
 80123ca:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123ce:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80123d2:	881a      	ldrh	r2, [r3, #0]
 80123d4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123d8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80123dc:	8819      	ldrh	r1, [r3, #0]
 80123de:	4858      	ldr	r0, [pc, #352]	; (8012540 <create_DijkstraMap+0x1150>)
 80123e0:	4613      	mov	r3, r2
 80123e2:	011b      	lsls	r3, r3, #4
 80123e4:	1a9b      	subs	r3, r3, r2
 80123e6:	440b      	add	r3, r1
 80123e8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80123ec:	461a      	mov	r2, r3
 80123ee:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123f2:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80123f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80123fa:	4413      	add	r3, r2
 80123fc:	429c      	cmp	r4, r3
 80123fe:	dd61      	ble.n	80124c4 <create_DijkstraMap+0x10d4>
							Dijkstra.row_count[Ycoordinate][Xcoordinate+1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost;
 8012400:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012404:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012408:	881a      	ldrh	r2, [r3, #0]
 801240a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801240e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012412:	8819      	ldrh	r1, [r3, #0]
 8012414:	484a      	ldr	r0, [pc, #296]	; (8012540 <create_DijkstraMap+0x1150>)
 8012416:	4613      	mov	r3, r2
 8012418:	011b      	lsls	r3, r3, #4
 801241a:	1a9b      	subs	r3, r3, r2
 801241c:	440b      	add	r3, r1
 801241e:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012422:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012426:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 801242a:	881b      	ldrh	r3, [r3, #0]
 801242c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012430:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012434:	8812      	ldrh	r2, [r2, #0]
 8012436:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 801243a:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 801243e:	8809      	ldrh	r1, [r1, #0]
 8012440:	3101      	adds	r1, #1
 8012442:	4403      	add	r3, r0
 8012444:	b29c      	uxth	r4, r3
 8012446:	483e      	ldr	r0, [pc, #248]	; (8012540 <create_DijkstraMap+0x1150>)
 8012448:	4613      	mov	r3, r2
 801244a:	011b      	lsls	r3, r3, #4
 801244c:	1a9b      	subs	r3, r3, r2
 801244e:	440b      	add	r3, r1
 8012450:	4622      	mov	r2, r4
 8012452:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 8012456:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801245a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801245e:	881b      	ldrh	r3, [r3, #0]
 8012460:	3301      	adds	r3, #1
 8012462:	b29a      	uxth	r2, r3
 8012464:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012468:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801246c:	4611      	mov	r1, r2
 801246e:	4618      	mov	r0, r3
 8012470:	f002 faca 	bl	8014a08 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012474:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012478:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801247c:	881a      	ldrh	r2, [r3, #0]
 801247e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012482:	f103 0320 	add.w	r3, r3, #32
 8012486:	3b0c      	subs	r3, #12
 8012488:	4611      	mov	r1, r2
 801248a:	4618      	mov	r0, r3
 801248c:	f002 fabc 	bl	8014a08 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 8012490:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012494:	3b14      	subs	r3, #20
 8012496:	2101      	movs	r1, #1
 8012498:	4618      	mov	r0, r3
 801249a:	f002 fab5 	bl	8014a08 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_EAST);
 801249e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80124a2:	3b3c      	subs	r3, #60	; 0x3c
 80124a4:	2102      	movs	r1, #2
 80124a6:	4618      	mov	r0, r3
 80124a8:	f002 faae 	bl	8014a08 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 80124ac:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124b0:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80124b4:	881a      	ldrh	r2, [r3, #0]
 80124b6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80124ba:	3b64      	subs	r3, #100	; 0x64
 80124bc:	4611      	mov	r1, r2
 80124be:	4618      	mov	r0, r3
 80124c0:	f002 faa2 	bl	8014a08 <pushStack_walk>
						}
					}
					if (Xcoordinate >= 1) {
 80124c4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124c8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80124cc:	881b      	ldrh	r3, [r3, #0]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	f000 80ee 	beq.w	80126b0 <create_DijkstraMap+0x12c0>
						if(Direction==SLANT_WEST){
 80124d4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124d8:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80124dc:	881b      	ldrh	r3, [r3, #0]
 80124de:	2b06      	cmp	r3, #6
 80124e0:	d130      	bne.n	8012544 <create_DijkstraMap+0x1154>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 80124e2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124e6:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80124ea:	881b      	ldrh	r3, [r3, #0]
 80124ec:	3301      	adds	r3, #1
 80124ee:	b29b      	uxth	r3, r3
 80124f0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80124f4:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80124f8:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 80124fa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124fe:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012506:	2b04      	cmp	r3, #4
 8012508:	dd05      	ble.n	8012516 <create_DijkstraMap+0x1126>
 801250a:	2304      	movs	r3, #4
 801250c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012510:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012514:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 8012516:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801251a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801251e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012522:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012526:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 801252a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801252e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012532:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8012536:	8013      	strh	r3, [r2, #0]
 8012538:	e014      	b.n	8012564 <create_DijkstraMap+0x1174>
 801253a:	bf00      	nop
 801253c:	20000c40 	.word	0x20000c40
 8012540:	20000f34 	.word	0x20000f34
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8012544:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012548:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 801254c:	881b      	ldrh	r3, [r3, #0]
 801254e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012552:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8012556:	8013      	strh	r3, [r2, #0]
 8012558:	2300      	movs	r3, #0
 801255a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801255e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012562:	8013      	strh	r3, [r2, #0]
						if((wall.row[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost){
 8012564:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012568:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801256c:	881b      	ldrh	r3, [r3, #0]
 801256e:	3b01      	subs	r3, #1
 8012570:	4a6d      	ldr	r2, [pc, #436]	; (8012728 <create_DijkstraMap+0x1338>)
 8012572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012576:	461a      	mov	r2, r3
 8012578:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801257c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012580:	881b      	ldrh	r3, [r3, #0]
 8012582:	fa42 f303 	asr.w	r3, r2, r3
 8012586:	f003 0301 	and.w	r3, r3, #1
 801258a:	2b00      	cmp	r3, #0
 801258c:	f040 8090 	bne.w	80126b0 <create_DijkstraMap+0x12c0>
 8012590:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012594:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012598:	881a      	ldrh	r2, [r3, #0]
 801259a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801259e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80125a2:	881b      	ldrh	r3, [r3, #0]
 80125a4:	1e59      	subs	r1, r3, #1
 80125a6:	4861      	ldr	r0, [pc, #388]	; (801272c <create_DijkstraMap+0x133c>)
 80125a8:	4613      	mov	r3, r2
 80125aa:	011b      	lsls	r3, r3, #4
 80125ac:	1a9b      	subs	r3, r3, r2
 80125ae:	440b      	add	r3, r1
 80125b0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80125b4:	461c      	mov	r4, r3
 80125b6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125ba:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80125be:	881a      	ldrh	r2, [r3, #0]
 80125c0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125c4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80125c8:	8819      	ldrh	r1, [r3, #0]
 80125ca:	4858      	ldr	r0, [pc, #352]	; (801272c <create_DijkstraMap+0x133c>)
 80125cc:	4613      	mov	r3, r2
 80125ce:	011b      	lsls	r3, r3, #4
 80125d0:	1a9b      	subs	r3, r3, r2
 80125d2:	440b      	add	r3, r1
 80125d4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80125d8:	461a      	mov	r2, r3
 80125da:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125de:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80125e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80125e6:	4413      	add	r3, r2
 80125e8:	429c      	cmp	r4, r3
 80125ea:	dd61      	ble.n	80126b0 <create_DijkstraMap+0x12c0>
							Dijkstra.row_count[Ycoordinate][Xcoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost;
 80125ec:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125f0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80125f4:	881a      	ldrh	r2, [r3, #0]
 80125f6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125fa:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80125fe:	8819      	ldrh	r1, [r3, #0]
 8012600:	484a      	ldr	r0, [pc, #296]	; (801272c <create_DijkstraMap+0x133c>)
 8012602:	4613      	mov	r3, r2
 8012604:	011b      	lsls	r3, r3, #4
 8012606:	1a9b      	subs	r3, r3, r2
 8012608:	440b      	add	r3, r1
 801260a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 801260e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012612:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8012616:	881b      	ldrh	r3, [r3, #0]
 8012618:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801261c:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012620:	8812      	ldrh	r2, [r2, #0]
 8012622:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012626:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 801262a:	8809      	ldrh	r1, [r1, #0]
 801262c:	3901      	subs	r1, #1
 801262e:	4403      	add	r3, r0
 8012630:	b29c      	uxth	r4, r3
 8012632:	483e      	ldr	r0, [pc, #248]	; (801272c <create_DijkstraMap+0x133c>)
 8012634:	4613      	mov	r3, r2
 8012636:	011b      	lsls	r3, r3, #4
 8012638:	1a9b      	subs	r3, r3, r2
 801263a:	440b      	add	r3, r1
 801263c:	4622      	mov	r2, r4
 801263e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate - 1);
 8012642:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012646:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801264a:	881b      	ldrh	r3, [r3, #0]
 801264c:	3b01      	subs	r3, #1
 801264e:	b29a      	uxth	r2, r3
 8012650:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012654:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012658:	4611      	mov	r1, r2
 801265a:	4618      	mov	r0, r3
 801265c:	f002 f9d4 	bl	8014a08 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012660:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012664:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012668:	881a      	ldrh	r2, [r3, #0]
 801266a:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801266e:	f103 0320 	add.w	r3, r3, #32
 8012672:	3b0c      	subs	r3, #12
 8012674:	4611      	mov	r1, r2
 8012676:	4618      	mov	r0, r3
 8012678:	f002 f9c6 	bl	8014a08 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 801267c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012680:	3b14      	subs	r3, #20
 8012682:	2101      	movs	r1, #1
 8012684:	4618      	mov	r0, r3
 8012686:	f002 f9bf 	bl	8014a08 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_WEST);
 801268a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801268e:	3b3c      	subs	r3, #60	; 0x3c
 8012690:	2106      	movs	r1, #6
 8012692:	4618      	mov	r0, r3
 8012694:	f002 f9b8 	bl	8014a08 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012698:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801269c:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80126a0:	881a      	ldrh	r2, [r3, #0]
 80126a2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80126a6:	3b64      	subs	r3, #100	; 0x64
 80126a8:	4611      	mov	r1, r2
 80126aa:	4618      	mov	r0, r3
 80126ac:	f002 f9ac 	bl	8014a08 <pushStack_walk>
						}
					}
					if (Ycoordinate <= 14) {
 80126b0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126b4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80126b8:	881b      	ldrh	r3, [r3, #0]
 80126ba:	2b0e      	cmp	r3, #14
 80126bc:	f200 81de 	bhi.w	8012a7c <create_DijkstraMap+0x168c>
						if(Direction==SLANT_NORTH_WEST){
 80126c0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126c4:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80126c8:	881b      	ldrh	r3, [r3, #0]
 80126ca:	2b07      	cmp	r3, #7
 80126cc:	d130      	bne.n	8012730 <create_DijkstraMap+0x1340>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80126ce:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126d2:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80126d6:	881b      	ldrh	r3, [r3, #0]
 80126d8:	3301      	adds	r3, #1
 80126da:	b29b      	uxth	r3, r3
 80126dc:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80126e0:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80126e4:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 80126e6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126ea:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80126ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80126f2:	2b05      	cmp	r3, #5
 80126f4:	dd05      	ble.n	8012702 <create_DijkstraMap+0x1312>
 80126f6:	2305      	movs	r3, #5
 80126f8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80126fc:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012700:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012702:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012706:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801270a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801270e:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012712:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012716:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801271a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801271e:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012722:	8013      	strh	r3, [r2, #0]
 8012724:	e014      	b.n	8012750 <create_DijkstraMap+0x1360>
 8012726:	bf00      	nop
 8012728:	20000c40 	.word	0x20000c40
 801272c:	20000f34 	.word	0x20000f34
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012730:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012734:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012738:	881b      	ldrh	r3, [r3, #0]
 801273a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801273e:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012742:	8013      	strh	r3, [r2, #0]
 8012744:	2300      	movs	r3, #0
 8012746:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801274a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801274e:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012750:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012754:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012758:	881b      	ldrh	r3, [r3, #0]
 801275a:	4a69      	ldr	r2, [pc, #420]	; (8012900 <create_DijkstraMap+0x1510>)
 801275c:	330c      	adds	r3, #12
 801275e:	005b      	lsls	r3, r3, #1
 8012760:	4413      	add	r3, r2
 8012762:	88db      	ldrh	r3, [r3, #6]
 8012764:	461a      	mov	r2, r3
 8012766:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801276a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801276e:	881b      	ldrh	r3, [r3, #0]
 8012770:	fa42 f303 	asr.w	r3, r2, r3
 8012774:	f003 0301 	and.w	r3, r3, #1
 8012778:	2b00      	cmp	r3, #0
 801277a:	f040 808e 	bne.w	801289a <create_DijkstraMap+0x14aa>
 801277e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012782:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012786:	881a      	ldrh	r2, [r3, #0]
 8012788:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801278c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012790:	8819      	ldrh	r1, [r3, #0]
 8012792:	485c      	ldr	r0, [pc, #368]	; (8012904 <create_DijkstraMap+0x1514>)
 8012794:	4613      	mov	r3, r2
 8012796:	011b      	lsls	r3, r3, #4
 8012798:	1a9b      	subs	r3, r3, r2
 801279a:	440b      	add	r3, r1
 801279c:	33f0      	adds	r3, #240	; 0xf0
 801279e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80127a2:	461c      	mov	r4, r3
 80127a4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127a8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80127ac:	881a      	ldrh	r2, [r3, #0]
 80127ae:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127b2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80127b6:	8819      	ldrh	r1, [r3, #0]
 80127b8:	4852      	ldr	r0, [pc, #328]	; (8012904 <create_DijkstraMap+0x1514>)
 80127ba:	4613      	mov	r3, r2
 80127bc:	011b      	lsls	r3, r3, #4
 80127be:	1a9b      	subs	r3, r3, r2
 80127c0:	440b      	add	r3, r1
 80127c2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80127c6:	461a      	mov	r2, r3
 80127c8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127cc:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80127d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80127d4:	4413      	add	r3, r2
 80127d6:	429c      	cmp	r4, r3
 80127d8:	dd5f      	ble.n	801289a <create_DijkstraMap+0x14aa>
							Dijkstra.column_count[Xcoordinate][Ycoordinate]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 80127da:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127de:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80127e2:	881a      	ldrh	r2, [r3, #0]
 80127e4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127e8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80127ec:	8819      	ldrh	r1, [r3, #0]
 80127ee:	4845      	ldr	r0, [pc, #276]	; (8012904 <create_DijkstraMap+0x1514>)
 80127f0:	4613      	mov	r3, r2
 80127f2:	011b      	lsls	r3, r3, #4
 80127f4:	1a9b      	subs	r3, r3, r2
 80127f6:	440b      	add	r3, r1
 80127f8:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80127fc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012800:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012804:	881b      	ldrh	r3, [r3, #0]
 8012806:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801280a:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 801280e:	8812      	ldrh	r2, [r2, #0]
 8012810:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012814:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8012818:	8809      	ldrh	r1, [r1, #0]
 801281a:	4403      	add	r3, r0
 801281c:	b29c      	uxth	r4, r3
 801281e:	4839      	ldr	r0, [pc, #228]	; (8012904 <create_DijkstraMap+0x1514>)
 8012820:	4613      	mov	r3, r2
 8012822:	011b      	lsls	r3, r3, #4
 8012824:	1a9b      	subs	r3, r3, r2
 8012826:	440b      	add	r3, r1
 8012828:	33f0      	adds	r3, #240	; 0xf0
 801282a:	4622      	mov	r2, r4
 801282c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 8012830:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012834:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012838:	881a      	ldrh	r2, [r3, #0]
 801283a:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801283e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012842:	4611      	mov	r1, r2
 8012844:	4618      	mov	r0, r3
 8012846:	f002 f8df 	bl	8014a08 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 801284a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801284e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012852:	881a      	ldrh	r2, [r3, #0]
 8012854:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012858:	f103 0320 	add.w	r3, r3, #32
 801285c:	3b0c      	subs	r3, #12
 801285e:	4611      	mov	r1, r2
 8012860:	4618      	mov	r0, r3
 8012862:	f002 f8d1 	bl	8014a08 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012866:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801286a:	3b14      	subs	r3, #20
 801286c:	2100      	movs	r1, #0
 801286e:	4618      	mov	r0, r3
 8012870:	f002 f8ca 	bl	8014a08 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 8012874:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012878:	3b3c      	subs	r3, #60	; 0x3c
 801287a:	2107      	movs	r1, #7
 801287c:	4618      	mov	r0, r3
 801287e:	f002 f8c3 	bl	8014a08 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012882:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012886:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801288a:	881a      	ldrh	r2, [r3, #0]
 801288c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012890:	3b64      	subs	r3, #100	; 0x64
 8012892:	4611      	mov	r1, r2
 8012894:	4618      	mov	r0, r3
 8012896:	f002 f8b7 	bl	8014a08 <pushStack_walk>
						}
						if(Direction==SLANT_NORTH_EAST){
 801289a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801289e:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80128a2:	881b      	ldrh	r3, [r3, #0]
 80128a4:	2b01      	cmp	r3, #1
 80128a6:	d12f      	bne.n	8012908 <create_DijkstraMap+0x1518>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80128a8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128ac:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80128b0:	881b      	ldrh	r3, [r3, #0]
 80128b2:	3301      	adds	r3, #1
 80128b4:	b29b      	uxth	r3, r3
 80128b6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80128ba:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80128be:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 80128c0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128c4:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80128c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80128cc:	2b05      	cmp	r3, #5
 80128ce:	dd05      	ble.n	80128dc <create_DijkstraMap+0x14ec>
 80128d0:	2305      	movs	r3, #5
 80128d2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80128d6:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80128da:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 80128dc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128e0:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80128e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80128e8:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80128ec:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80128f0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80128f4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80128f8:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80128fc:	8013      	strh	r3, [r2, #0]
 80128fe:	e013      	b.n	8012928 <create_DijkstraMap+0x1538>
 8012900:	20000c40 	.word	0x20000c40
 8012904:	20000f34 	.word	0x20000f34
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012908:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801290c:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012910:	881b      	ldrh	r3, [r3, #0]
 8012912:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012916:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801291a:	8013      	strh	r3, [r2, #0]
 801291c:	2300      	movs	r3, #0
 801291e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012922:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012926:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate] & (1 << (Xcoordinate+1)))==0 && Dijkstra.column_count[Xcoordinate+1][Ycoordinate]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012928:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801292c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012930:	881b      	ldrh	r3, [r3, #0]
 8012932:	4a70      	ldr	r2, [pc, #448]	; (8012af4 <create_DijkstraMap+0x1704>)
 8012934:	330c      	adds	r3, #12
 8012936:	005b      	lsls	r3, r3, #1
 8012938:	4413      	add	r3, r2
 801293a:	88db      	ldrh	r3, [r3, #6]
 801293c:	461a      	mov	r2, r3
 801293e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012942:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012946:	881b      	ldrh	r3, [r3, #0]
 8012948:	3301      	adds	r3, #1
 801294a:	fa42 f303 	asr.w	r3, r2, r3
 801294e:	f003 0301 	and.w	r3, r3, #1
 8012952:	2b00      	cmp	r3, #0
 8012954:	f040 8092 	bne.w	8012a7c <create_DijkstraMap+0x168c>
 8012958:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801295c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012960:	881b      	ldrh	r3, [r3, #0]
 8012962:	1c5a      	adds	r2, r3, #1
 8012964:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012968:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801296c:	8819      	ldrh	r1, [r3, #0]
 801296e:	4862      	ldr	r0, [pc, #392]	; (8012af8 <create_DijkstraMap+0x1708>)
 8012970:	4613      	mov	r3, r2
 8012972:	011b      	lsls	r3, r3, #4
 8012974:	1a9b      	subs	r3, r3, r2
 8012976:	440b      	add	r3, r1
 8012978:	33f0      	adds	r3, #240	; 0xf0
 801297a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801297e:	461c      	mov	r4, r3
 8012980:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012984:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012988:	881a      	ldrh	r2, [r3, #0]
 801298a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801298e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012992:	8819      	ldrh	r1, [r3, #0]
 8012994:	4858      	ldr	r0, [pc, #352]	; (8012af8 <create_DijkstraMap+0x1708>)
 8012996:	4613      	mov	r3, r2
 8012998:	011b      	lsls	r3, r3, #4
 801299a:	1a9b      	subs	r3, r3, r2
 801299c:	440b      	add	r3, r1
 801299e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80129a2:	461a      	mov	r2, r3
 80129a4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129a8:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80129ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80129b0:	4413      	add	r3, r2
 80129b2:	429c      	cmp	r4, r3
 80129b4:	dd62      	ble.n	8012a7c <create_DijkstraMap+0x168c>
							Dijkstra.column_count[Xcoordinate+1][Ycoordinate]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 80129b6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129ba:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80129be:	881a      	ldrh	r2, [r3, #0]
 80129c0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129c4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80129c8:	8819      	ldrh	r1, [r3, #0]
 80129ca:	484b      	ldr	r0, [pc, #300]	; (8012af8 <create_DijkstraMap+0x1708>)
 80129cc:	4613      	mov	r3, r2
 80129ce:	011b      	lsls	r3, r3, #4
 80129d0:	1a9b      	subs	r3, r3, r2
 80129d2:	440b      	add	r3, r1
 80129d4:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80129d8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129dc:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80129e0:	881b      	ldrh	r3, [r3, #0]
 80129e2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80129e6:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80129ea:	8812      	ldrh	r2, [r2, #0]
 80129ec:	3201      	adds	r2, #1
 80129ee:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 80129f2:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 80129f6:	8809      	ldrh	r1, [r1, #0]
 80129f8:	4403      	add	r3, r0
 80129fa:	b29c      	uxth	r4, r3
 80129fc:	483e      	ldr	r0, [pc, #248]	; (8012af8 <create_DijkstraMap+0x1708>)
 80129fe:	4613      	mov	r3, r2
 8012a00:	011b      	lsls	r3, r3, #4
 8012a02:	1a9b      	subs	r3, r3, r2
 8012a04:	440b      	add	r3, r1
 8012a06:	33f0      	adds	r3, #240	; 0xf0
 8012a08:	4622      	mov	r2, r4
 8012a0a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 8012a0e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a12:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012a16:	881b      	ldrh	r3, [r3, #0]
 8012a18:	3301      	adds	r3, #1
 8012a1a:	b29a      	uxth	r2, r3
 8012a1c:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012a20:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012a24:	4611      	mov	r1, r2
 8012a26:	4618      	mov	r0, r3
 8012a28:	f001 ffee 	bl	8014a08 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012a2c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a30:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012a34:	881a      	ldrh	r2, [r3, #0]
 8012a36:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012a3a:	f103 0320 	add.w	r3, r3, #32
 8012a3e:	3b0c      	subs	r3, #12
 8012a40:	4611      	mov	r1, r2
 8012a42:	4618      	mov	r0, r3
 8012a44:	f001 ffe0 	bl	8014a08 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012a48:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012a4c:	3b14      	subs	r3, #20
 8012a4e:	2100      	movs	r1, #0
 8012a50:	4618      	mov	r0, r3
 8012a52:	f001 ffd9 	bl	8014a08 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 8012a56:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012a5a:	3b3c      	subs	r3, #60	; 0x3c
 8012a5c:	2101      	movs	r1, #1
 8012a5e:	4618      	mov	r0, r3
 8012a60:	f001 ffd2 	bl	8014a08 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012a64:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a68:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012a6c:	881a      	ldrh	r2, [r3, #0]
 8012a6e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012a72:	3b64      	subs	r3, #100	; 0x64
 8012a74:	4611      	mov	r1, r2
 8012a76:	4618      	mov	r0, r3
 8012a78:	f001 ffc6 	bl	8014a08 <pushStack_walk>
						}
					}
					if (Ycoordinate >= 1) {
 8012a7c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a80:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012a84:	881b      	ldrh	r3, [r3, #0]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	f000 81e4 	beq.w	8012e54 <create_DijkstraMap+0x1a64>
						if(Direction==SLANT_SOUTH_WEST){
 8012a8c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a90:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012a94:	881b      	ldrh	r3, [r3, #0]
 8012a96:	2b05      	cmp	r3, #5
 8012a98:	d130      	bne.n	8012afc <create_DijkstraMap+0x170c>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012a9a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a9e:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012aa2:	881b      	ldrh	r3, [r3, #0]
 8012aa4:	3301      	adds	r3, #1
 8012aa6:	b29b      	uxth	r3, r3
 8012aa8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012aac:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012ab0:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012ab2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ab6:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012abe:	2b05      	cmp	r3, #5
 8012ac0:	dd05      	ble.n	8012ace <create_DijkstraMap+0x16de>
 8012ac2:	2305      	movs	r3, #5
 8012ac4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012ac8:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012acc:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012ace:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ad2:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012ad6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012ada:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012ade:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012ae2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012ae6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012aea:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012aee:	8013      	strh	r3, [r2, #0]
 8012af0:	e014      	b.n	8012b1c <create_DijkstraMap+0x172c>
 8012af2:	bf00      	nop
 8012af4:	20000c40 	.word	0x20000c40
 8012af8:	20000f34 	.word	0x20000f34
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012afc:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012b00:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012b04:	881b      	ldrh	r3, [r3, #0]
 8012b06:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012b0a:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012b0e:	8013      	strh	r3, [r2, #0]
 8012b10:	2300      	movs	r3, #0
 8012b12:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012b16:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012b1a:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012b1c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b20:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012b24:	881b      	ldrh	r3, [r3, #0]
 8012b26:	3b01      	subs	r3, #1
 8012b28:	4ad4      	ldr	r2, [pc, #848]	; (8012e7c <create_DijkstraMap+0x1a8c>)
 8012b2a:	330c      	adds	r3, #12
 8012b2c:	005b      	lsls	r3, r3, #1
 8012b2e:	4413      	add	r3, r2
 8012b30:	88db      	ldrh	r3, [r3, #6]
 8012b32:	461a      	mov	r2, r3
 8012b34:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b38:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012b3c:	881b      	ldrh	r3, [r3, #0]
 8012b3e:	fa42 f303 	asr.w	r3, r2, r3
 8012b42:	f003 0301 	and.w	r3, r3, #1
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	f040 8092 	bne.w	8012c70 <create_DijkstraMap+0x1880>
 8012b4c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b50:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012b54:	881a      	ldrh	r2, [r3, #0]
 8012b56:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b5a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012b5e:	881b      	ldrh	r3, [r3, #0]
 8012b60:	1e59      	subs	r1, r3, #1
 8012b62:	48c7      	ldr	r0, [pc, #796]	; (8012e80 <create_DijkstraMap+0x1a90>)
 8012b64:	4613      	mov	r3, r2
 8012b66:	011b      	lsls	r3, r3, #4
 8012b68:	1a9b      	subs	r3, r3, r2
 8012b6a:	440b      	add	r3, r1
 8012b6c:	33f0      	adds	r3, #240	; 0xf0
 8012b6e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012b72:	461c      	mov	r4, r3
 8012b74:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b78:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012b7c:	881a      	ldrh	r2, [r3, #0]
 8012b7e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b82:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012b86:	8819      	ldrh	r1, [r3, #0]
 8012b88:	48bd      	ldr	r0, [pc, #756]	; (8012e80 <create_DijkstraMap+0x1a90>)
 8012b8a:	4613      	mov	r3, r2
 8012b8c:	011b      	lsls	r3, r3, #4
 8012b8e:	1a9b      	subs	r3, r3, r2
 8012b90:	440b      	add	r3, r1
 8012b92:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012b96:	461a      	mov	r2, r3
 8012b98:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b9c:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ba4:	4413      	add	r3, r2
 8012ba6:	429c      	cmp	r4, r3
 8012ba8:	dd62      	ble.n	8012c70 <create_DijkstraMap+0x1880>
							Dijkstra.column_count[Xcoordinate][Ycoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012baa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012bae:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012bb2:	881a      	ldrh	r2, [r3, #0]
 8012bb4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012bb8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012bbc:	8819      	ldrh	r1, [r3, #0]
 8012bbe:	48b0      	ldr	r0, [pc, #704]	; (8012e80 <create_DijkstraMap+0x1a90>)
 8012bc0:	4613      	mov	r3, r2
 8012bc2:	011b      	lsls	r3, r3, #4
 8012bc4:	1a9b      	subs	r3, r3, r2
 8012bc6:	440b      	add	r3, r1
 8012bc8:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012bcc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012bd0:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012bd4:	881b      	ldrh	r3, [r3, #0]
 8012bd6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012bda:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8012bde:	8812      	ldrh	r2, [r2, #0]
 8012be0:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012be4:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8012be8:	8809      	ldrh	r1, [r1, #0]
 8012bea:	3901      	subs	r1, #1
 8012bec:	4403      	add	r3, r0
 8012bee:	b29c      	uxth	r4, r3
 8012bf0:	48a3      	ldr	r0, [pc, #652]	; (8012e80 <create_DijkstraMap+0x1a90>)
 8012bf2:	4613      	mov	r3, r2
 8012bf4:	011b      	lsls	r3, r3, #4
 8012bf6:	1a9b      	subs	r3, r3, r2
 8012bf8:	440b      	add	r3, r1
 8012bfa:	33f0      	adds	r3, #240	; 0xf0
 8012bfc:	4622      	mov	r2, r4
 8012bfe:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 8012c02:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c06:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012c0a:	881a      	ldrh	r2, [r3, #0]
 8012c0c:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012c10:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012c14:	4611      	mov	r1, r2
 8012c16:	4618      	mov	r0, r3
 8012c18:	f001 fef6 	bl	8014a08 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate - 1);
 8012c1c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c20:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012c24:	881b      	ldrh	r3, [r3, #0]
 8012c26:	3b01      	subs	r3, #1
 8012c28:	b29a      	uxth	r2, r3
 8012c2a:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012c2e:	f103 0320 	add.w	r3, r3, #32
 8012c32:	3b0c      	subs	r3, #12
 8012c34:	4611      	mov	r1, r2
 8012c36:	4618      	mov	r0, r3
 8012c38:	f001 fee6 	bl	8014a08 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012c3c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012c40:	3b14      	subs	r3, #20
 8012c42:	2100      	movs	r1, #0
 8012c44:	4618      	mov	r0, r3
 8012c46:	f001 fedf 	bl	8014a08 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 8012c4a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012c4e:	3b3c      	subs	r3, #60	; 0x3c
 8012c50:	2105      	movs	r1, #5
 8012c52:	4618      	mov	r0, r3
 8012c54:	f001 fed8 	bl	8014a08 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012c58:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c5c:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012c60:	881a      	ldrh	r2, [r3, #0]
 8012c62:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012c66:	3b64      	subs	r3, #100	; 0x64
 8012c68:	4611      	mov	r1, r2
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	f001 fecc 	bl	8014a08 <pushStack_walk>
						}
						if(Direction==SLANT_SOUTH_EAST){
 8012c70:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c74:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012c78:	881b      	ldrh	r3, [r3, #0]
 8012c7a:	2b03      	cmp	r3, #3
 8012c7c:	d12b      	bne.n	8012cd6 <create_DijkstraMap+0x18e6>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012c7e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c82:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012c86:	881b      	ldrh	r3, [r3, #0]
 8012c88:	3301      	adds	r3, #1
 8012c8a:	b29b      	uxth	r3, r3
 8012c8c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012c90:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012c94:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012c96:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c9a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ca2:	2b05      	cmp	r3, #5
 8012ca4:	dd05      	ble.n	8012cb2 <create_DijkstraMap+0x18c2>
 8012ca6:	2305      	movs	r3, #5
 8012ca8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012cac:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012cb0:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012cb2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012cb6:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012cba:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012cbe:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012cc2:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012cc6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012cca:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012cce:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012cd2:	8013      	strh	r3, [r2, #0]
 8012cd4:	e00f      	b.n	8012cf6 <create_DijkstraMap+0x1906>
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012cd6:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012cda:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012cde:	881b      	ldrh	r3, [r3, #0]
 8012ce0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012ce4:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012ce8:	8013      	strh	r3, [r2, #0]
 8012cea:	2300      	movs	r3, #0
 8012cec:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012cf0:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012cf4:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate-1] & (1 << (Xcoordinate+1)))==0 && Dijkstra.column_count[Xcoordinate+1][Ycoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012cf6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012cfa:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012cfe:	881b      	ldrh	r3, [r3, #0]
 8012d00:	3b01      	subs	r3, #1
 8012d02:	4a5e      	ldr	r2, [pc, #376]	; (8012e7c <create_DijkstraMap+0x1a8c>)
 8012d04:	330c      	adds	r3, #12
 8012d06:	005b      	lsls	r3, r3, #1
 8012d08:	4413      	add	r3, r2
 8012d0a:	88db      	ldrh	r3, [r3, #6]
 8012d0c:	461a      	mov	r2, r3
 8012d0e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d12:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012d16:	881b      	ldrh	r3, [r3, #0]
 8012d18:	3301      	adds	r3, #1
 8012d1a:	fa42 f303 	asr.w	r3, r2, r3
 8012d1e:	f003 0301 	and.w	r3, r3, #1
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	f040 8096 	bne.w	8012e54 <create_DijkstraMap+0x1a64>
 8012d28:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d2c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012d30:	881b      	ldrh	r3, [r3, #0]
 8012d32:	1c5a      	adds	r2, r3, #1
 8012d34:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d38:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012d3c:	881b      	ldrh	r3, [r3, #0]
 8012d3e:	1e59      	subs	r1, r3, #1
 8012d40:	484f      	ldr	r0, [pc, #316]	; (8012e80 <create_DijkstraMap+0x1a90>)
 8012d42:	4613      	mov	r3, r2
 8012d44:	011b      	lsls	r3, r3, #4
 8012d46:	1a9b      	subs	r3, r3, r2
 8012d48:	440b      	add	r3, r1
 8012d4a:	33f0      	adds	r3, #240	; 0xf0
 8012d4c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012d50:	461c      	mov	r4, r3
 8012d52:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d56:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012d5a:	881a      	ldrh	r2, [r3, #0]
 8012d5c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d60:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012d64:	8819      	ldrh	r1, [r3, #0]
 8012d66:	4846      	ldr	r0, [pc, #280]	; (8012e80 <create_DijkstraMap+0x1a90>)
 8012d68:	4613      	mov	r3, r2
 8012d6a:	011b      	lsls	r3, r3, #4
 8012d6c:	1a9b      	subs	r3, r3, r2
 8012d6e:	440b      	add	r3, r1
 8012d70:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012d74:	461a      	mov	r2, r3
 8012d76:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d7a:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012d7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012d82:	4413      	add	r3, r2
 8012d84:	429c      	cmp	r4, r3
 8012d86:	dd65      	ble.n	8012e54 <create_DijkstraMap+0x1a64>
							Dijkstra.column_count[Xcoordinate+1][Ycoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012d88:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d8c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012d90:	881a      	ldrh	r2, [r3, #0]
 8012d92:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d96:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012d9a:	8819      	ldrh	r1, [r3, #0]
 8012d9c:	4838      	ldr	r0, [pc, #224]	; (8012e80 <create_DijkstraMap+0x1a90>)
 8012d9e:	4613      	mov	r3, r2
 8012da0:	011b      	lsls	r3, r3, #4
 8012da2:	1a9b      	subs	r3, r3, r2
 8012da4:	440b      	add	r3, r1
 8012da6:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012daa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012dae:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012db2:	881b      	ldrh	r3, [r3, #0]
 8012db4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012db8:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8012dbc:	8812      	ldrh	r2, [r2, #0]
 8012dbe:	3201      	adds	r2, #1
 8012dc0:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012dc4:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8012dc8:	8809      	ldrh	r1, [r1, #0]
 8012dca:	3901      	subs	r1, #1
 8012dcc:	4403      	add	r3, r0
 8012dce:	b29c      	uxth	r4, r3
 8012dd0:	482b      	ldr	r0, [pc, #172]	; (8012e80 <create_DijkstraMap+0x1a90>)
 8012dd2:	4613      	mov	r3, r2
 8012dd4:	011b      	lsls	r3, r3, #4
 8012dd6:	1a9b      	subs	r3, r3, r2
 8012dd8:	440b      	add	r3, r1
 8012dda:	33f0      	adds	r3, #240	; 0xf0
 8012ddc:	4622      	mov	r2, r4
 8012dde:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate+1);
 8012de2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012de6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012dea:	881b      	ldrh	r3, [r3, #0]
 8012dec:	3301      	adds	r3, #1
 8012dee:	b29a      	uxth	r2, r3
 8012df0:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012df4:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012df8:	4611      	mov	r1, r2
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	f001 fe04 	bl	8014a08 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate-1);
 8012e00:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e04:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012e08:	881b      	ldrh	r3, [r3, #0]
 8012e0a:	3b01      	subs	r3, #1
 8012e0c:	b29a      	uxth	r2, r3
 8012e0e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012e12:	f103 0320 	add.w	r3, r3, #32
 8012e16:	3b0c      	subs	r3, #12
 8012e18:	4611      	mov	r1, r2
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	f001 fdf4 	bl	8014a08 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012e20:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012e24:	3b14      	subs	r3, #20
 8012e26:	2100      	movs	r1, #0
 8012e28:	4618      	mov	r0, r3
 8012e2a:	f001 fded 	bl	8014a08 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 8012e2e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012e32:	3b3c      	subs	r3, #60	; 0x3c
 8012e34:	2103      	movs	r1, #3
 8012e36:	4618      	mov	r0, r3
 8012e38:	f001 fde6 	bl	8014a08 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012e3c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e40:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012e44:	881a      	ldrh	r2, [r3, #0]
 8012e46:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012e4a:	3b64      	subs	r3, #100	; 0x64
 8012e4c:	4611      	mov	r1, r2
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f001 fdda 	bl	8014a08 <pushStack_walk>
						}
					}

				}

		count_number+=1;
 8012e54:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e58:	f103 036e 	add.w	r3, r3, #110	; 0x6e
 8012e5c:	881b      	ldrh	r3, [r3, #0]
 8012e5e:	3301      	adds	r3, #1
 8012e60:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012e64:	f102 026e 	add.w	r2, r2, #110	; 0x6e
 8012e68:	8013      	strh	r3, [r2, #0]
		Xcoordinate = popStack_walk(&stack_x);
 8012e6a:	f7fe bc0e 	b.w	801168a <create_DijkstraMap+0x29a>

		}



}
 8012e6e:	bf00      	nop
 8012e70:	f507 479d 	add.w	r7, r7, #20096	; 0x4e80
 8012e74:	3704      	adds	r7, #4
 8012e76:	46bd      	mov	sp, r7
 8012e78:	bd90      	pop	{r4, r7, pc}
 8012e7a:	bf00      	nop
 8012e7c:	20000c40 	.word	0x20000c40
 8012e80:	20000f34 	.word	0x20000f34

08012e84 <route_Dijkstra>:





void route_Dijkstra(void){
 8012e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e86:	f5ad 4dbc 	sub.w	sp, sp, #24064	; 0x5e00
 8012e8a:	b089      	sub	sp, #36	; 0x24
 8012e8c:	af04      	add	r7, sp, #16
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_x_unknow;
	STACK_T stack_y_unknow;
	STACK_T stack_matrix_unknow;//行列
	initStack_walk(&stack_x);
 8012e8e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e92:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8012e96:	4618      	mov	r0, r3
 8012e98:	f001 fda6 	bl	80149e8 <initStack_walk>
	initStack_walk(&stack_y);
 8012e9c:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8012ea0:	f103 0310 	add.w	r3, r3, #16
 8012ea4:	3b1c      	subs	r3, #28
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f001 fd9e 	bl	80149e8 <initStack_walk>
	initStack_walk(&stack_matrix);
 8012eac:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012eb0:	f103 0310 	add.w	r3, r3, #16
 8012eb4:	3b04      	subs	r3, #4
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	f001 fd96 	bl	80149e8 <initStack_walk>
	initStack_walk(&g_Goal_x);
 8012ebc:	48be      	ldr	r0, [pc, #760]	; (80131b8 <route_Dijkstra+0x334>)
 8012ebe:	f001 fd93 	bl	80149e8 <initStack_walk>
	initStack_walk(&g_Goal_y);
 8012ec2:	48be      	ldr	r0, [pc, #760]	; (80131bc <route_Dijkstra+0x338>)
 8012ec4:	f001 fd90 	bl	80149e8 <initStack_walk>

	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8012ec8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ecc:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8012ed0:	2100      	movs	r1, #0
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	f001 fd98 	bl	8014a08 <pushStack_walk>
 8012ed8:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8012edc:	f103 0310 	add.w	r3, r3, #16
 8012ee0:	3b1c      	subs	r3, #28
 8012ee2:	2100      	movs	r1, #0
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	f001 fd8f 	bl	8014a08 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);
 8012eea:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012eee:	f103 0310 	add.w	r3, r3, #16
 8012ef2:	3b04      	subs	r3, #4
 8012ef4:	2100      	movs	r1, #0
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f001 fd86 	bl	8014a08 <pushStack_walk>

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int x = 0;
 8012efc:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012f00:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8012f04:	2200      	movs	r2, #0
 8012f06:	601a      	str	r2, [r3, #0]
	int y = 0;
 8012f08:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012f0c:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8012f10:	2200      	movs	r2, #0
 8012f12:	601a      	str	r2, [r3, #0]
	int direction = 1;
 8012f14:	2301      	movs	r3, #1
 8012f16:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8012f1a:	f102 020c 	add.w	r2, r2, #12
 8012f1e:	6013      	str	r3, [r2, #0]


	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&x,&y,direction);
 8012f20:	f107 0110 	add.w	r1, r7, #16
 8012f24:	390c      	subs	r1, #12
 8012f26:	f107 0310 	add.w	r3, r7, #16
 8012f2a:	3b08      	subs	r3, #8
 8012f2c:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8012f30:	f102 020c 	add.w	r2, r2, #12
 8012f34:	6812      	ldr	r2, [r2, #0]
 8012f36:	4618      	mov	r0, r3
 8012f38:	f7fa fe18 	bl	800db6c <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 8012f3c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012f40:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	2b05      	cmp	r3, #5
 8012f48:	d006      	beq.n	8012f58 <route_Dijkstra+0xd4>
 8012f4a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012f4e:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	2b06      	cmp	r3, #6
 8012f56:	d10f      	bne.n	8012f78 <route_Dijkstra+0xf4>
 8012f58:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012f5c:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	2b04      	cmp	r3, #4
 8012f64:	f000 8331 	beq.w	80135ca <route_Dijkstra+0x746>
 8012f68:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012f6c:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	2b05      	cmp	r3, #5
 8012f74:	f000 8329 	beq.w	80135ca <route_Dijkstra+0x746>
					break;
		}


		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 8012f78:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012f7c:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8012f80:	6819      	ldr	r1, [r3, #0]
 8012f82:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012f86:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8012f8a:	681c      	ldr	r4, [r3, #0]
 8012f8c:	f107 0310 	add.w	r3, r7, #16
 8012f90:	3b04      	subs	r3, #4
 8012f92:	f107 0210 	add.w	r2, r7, #16
 8012f96:	3a02      	subs	r2, #2
 8012f98:	f107 0610 	add.w	r6, r7, #16
 8012f9c:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8012fa0:	387e      	subs	r0, #126	; 0x7e
 8012fa2:	f507 45bc 	add.w	r5, r7, #24064	; 0x5e00
 8012fa6:	f105 050c 	add.w	r5, r5, #12
 8012faa:	682d      	ldr	r5, [r5, #0]
 8012fac:	9502      	str	r5, [sp, #8]
 8012fae:	9401      	str	r4, [sp, #4]
 8012fb0:	9100      	str	r1, [sp, #0]
 8012fb2:	4631      	mov	r1, r6
 8012fb4:	f7fe f982 	bl	80112bc <search_AroundDijkstraCount>
		//get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
		//if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
		//if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
		//if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 8012fb8:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012fbc:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8012fc0:	881b      	ldrh	r3, [r3, #0]
 8012fc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012fc6:	4293      	cmp	r3, r2
 8012fc8:	d11b      	bne.n	8013002 <route_Dijkstra+0x17e>
 8012fca:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012fce:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8012fd2:	881b      	ldrh	r3, [r3, #0]
 8012fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012fd8:	4293      	cmp	r3, r2
 8012fda:	d112      	bne.n	8013002 <route_Dijkstra+0x17e>
 8012fdc:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012fe0:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8012fe4:	881b      	ldrh	r3, [r3, #0]
 8012fe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012fea:	4293      	cmp	r3, r2
 8012fec:	d109      	bne.n	8013002 <route_Dijkstra+0x17e>
 8012fee:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012ff2:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8012ff6:	881b      	ldrh	r3, [r3, #0]
 8012ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012ffc:	4293      	cmp	r3, r2
 8012ffe:	f000 82e3 	beq.w	80135c8 <route_Dijkstra+0x744>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 8013002:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013006:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 801300a:	881a      	ldrh	r2, [r3, #0]
 801300c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013010:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013014:	881b      	ldrh	r3, [r3, #0]
 8013016:	429a      	cmp	r2, r3
 8013018:	f200 80d2 	bhi.w	80131c0 <route_Dijkstra+0x33c>
 801301c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013020:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013024:	881a      	ldrh	r2, [r3, #0]
 8013026:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801302a:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 801302e:	881b      	ldrh	r3, [r3, #0]
 8013030:	429a      	cmp	r2, r3
 8013032:	f200 80c5 	bhi.w	80131c0 <route_Dijkstra+0x33c>
 8013036:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801303a:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 801303e:	881a      	ldrh	r2, [r3, #0]
 8013040:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013044:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8013048:	881b      	ldrh	r3, [r3, #0]
 801304a:	429a      	cmp	r2, r3
 801304c:	f200 80b8 	bhi.w	80131c0 <route_Dijkstra+0x33c>
			// 直進
			switch (direction) {		//
 8013050:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013054:	f103 030c 	add.w	r3, r3, #12
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	3b01      	subs	r3, #1
 801305c:	2b03      	cmp	r3, #3
 801305e:	f200 80b0 	bhi.w	80131c2 <route_Dijkstra+0x33e>
 8013062:	a201      	add	r2, pc, #4	; (adr r2, 8013068 <route_Dijkstra+0x1e4>)
 8013064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013068:	08013079 	.word	0x08013079
 801306c:	080130c7 	.word	0x080130c7
 8013070:	08013115 	.word	0x08013115
 8013074:	08013167 	.word	0x08013167
			case 1:
				pushStack_walk(&stack_x,x);
 8013078:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801307c:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	b29a      	uxth	r2, r3
 8013084:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013088:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801308c:	4611      	mov	r1, r2
 801308e:	4618      	mov	r0, r3
 8013090:	f001 fcba 	bl	8014a08 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013094:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013098:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	b29a      	uxth	r2, r3
 80130a0:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80130a4:	f103 0310 	add.w	r3, r3, #16
 80130a8:	3b1c      	subs	r3, #28
 80130aa:	4611      	mov	r1, r2
 80130ac:	4618      	mov	r0, r3
 80130ae:	f001 fcab 	bl	8014a08 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 80130b2:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80130b6:	f103 0310 	add.w	r3, r3, #16
 80130ba:	3b04      	subs	r3, #4
 80130bc:	2100      	movs	r1, #0
 80130be:	4618      	mov	r0, r3
 80130c0:	f001 fca2 	bl	8014a08 <pushStack_walk>
				break;
 80130c4:	e07d      	b.n	80131c2 <route_Dijkstra+0x33e>
			case 2:
				pushStack_walk(&stack_x,x);
 80130c6:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80130ca:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	b29a      	uxth	r2, r3
 80130d2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80130d6:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80130da:	4611      	mov	r1, r2
 80130dc:	4618      	mov	r0, r3
 80130de:	f001 fc93 	bl	8014a08 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80130e2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80130e6:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	b29a      	uxth	r2, r3
 80130ee:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80130f2:	f103 0310 	add.w	r3, r3, #16
 80130f6:	3b1c      	subs	r3, #28
 80130f8:	4611      	mov	r1, r2
 80130fa:	4618      	mov	r0, r3
 80130fc:	f001 fc84 	bl	8014a08 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013100:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013104:	f103 0310 	add.w	r3, r3, #16
 8013108:	3b04      	subs	r3, #4
 801310a:	2101      	movs	r1, #1
 801310c:	4618      	mov	r0, r3
 801310e:	f001 fc7b 	bl	8014a08 <pushStack_walk>
				break;
 8013112:	e056      	b.n	80131c2 <route_Dijkstra+0x33e>
			case 3:
				pushStack_walk(&stack_x,x);
 8013114:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013118:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	b29a      	uxth	r2, r3
 8013120:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013124:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013128:	4611      	mov	r1, r2
 801312a:	4618      	mov	r0, r3
 801312c:	f001 fc6c 	bl	8014a08 <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 8013130:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013134:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	b29b      	uxth	r3, r3
 801313c:	3b01      	subs	r3, #1
 801313e:	b29a      	uxth	r2, r3
 8013140:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013144:	f103 0310 	add.w	r3, r3, #16
 8013148:	3b1c      	subs	r3, #28
 801314a:	4611      	mov	r1, r2
 801314c:	4618      	mov	r0, r3
 801314e:	f001 fc5b 	bl	8014a08 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013152:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013156:	f103 0310 	add.w	r3, r3, #16
 801315a:	3b04      	subs	r3, #4
 801315c:	2100      	movs	r1, #0
 801315e:	4618      	mov	r0, r3
 8013160:	f001 fc52 	bl	8014a08 <pushStack_walk>
				break;
 8013164:	e02d      	b.n	80131c2 <route_Dijkstra+0x33e>
			case 4:
				pushStack_walk(&stack_x,x-1);
 8013166:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801316a:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	b29b      	uxth	r3, r3
 8013172:	3b01      	subs	r3, #1
 8013174:	b29a      	uxth	r2, r3
 8013176:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801317a:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801317e:	4611      	mov	r1, r2
 8013180:	4618      	mov	r0, r3
 8013182:	f001 fc41 	bl	8014a08 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013186:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801318a:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	b29a      	uxth	r2, r3
 8013192:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013196:	f103 0310 	add.w	r3, r3, #16
 801319a:	3b1c      	subs	r3, #28
 801319c:	4611      	mov	r1, r2
 801319e:	4618      	mov	r0, r3
 80131a0:	f001 fc32 	bl	8014a08 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80131a4:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80131a8:	f103 0310 	add.w	r3, r3, #16
 80131ac:	3b04      	subs	r3, #4
 80131ae:	2101      	movs	r1, #1
 80131b0:	4618      	mov	r0, r3
 80131b2:	f001 fc29 	bl	8014a08 <pushStack_walk>
				break;
 80131b6:	e004      	b.n	80131c2 <route_Dijkstra+0x33e>
 80131b8:	200012f4 	.word	0x200012f4
 80131bc:	2000229c 	.word	0x2000229c
			}

		}
 80131c0:	bf00      	nop

		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 80131c2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80131c6:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 80131ca:	881a      	ldrh	r2, [r3, #0]
 80131cc:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80131d0:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 80131d4:	881b      	ldrh	r3, [r3, #0]
 80131d6:	429a      	cmp	r2, r3
 80131d8:	f080 80d9 	bcs.w	801338e <route_Dijkstra+0x50a>
 80131dc:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80131e0:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 80131e4:	881a      	ldrh	r2, [r3, #0]
 80131e6:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80131ea:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 80131ee:	881b      	ldrh	r3, [r3, #0]
 80131f0:	429a      	cmp	r2, r3
 80131f2:	f200 80cc 	bhi.w	801338e <route_Dijkstra+0x50a>
 80131f6:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80131fa:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 80131fe:	881a      	ldrh	r2, [r3, #0]
 8013200:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013204:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8013208:	881b      	ldrh	r3, [r3, #0]
 801320a:	429a      	cmp	r2, r3
 801320c:	f200 80bf 	bhi.w	801338e <route_Dijkstra+0x50a>
			// 右旋回
			switch (direction) {		//
 8013210:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013214:	f103 030c 	add.w	r3, r3, #12
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	3b01      	subs	r3, #1
 801321c:	2b03      	cmp	r3, #3
 801321e:	f200 80ab 	bhi.w	8013378 <route_Dijkstra+0x4f4>
 8013222:	a201      	add	r2, pc, #4	; (adr r2, 8013228 <route_Dijkstra+0x3a4>)
 8013224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013228:	08013239 	.word	0x08013239
 801322c:	08013287 	.word	0x08013287
 8013230:	080132d9 	.word	0x080132d9
 8013234:	0801332b 	.word	0x0801332b
			case 1:
				pushStack_walk(&stack_x,x);
 8013238:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801323c:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	b29a      	uxth	r2, r3
 8013244:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013248:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801324c:	4611      	mov	r1, r2
 801324e:	4618      	mov	r0, r3
 8013250:	f001 fbda 	bl	8014a08 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013254:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013258:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	b29a      	uxth	r2, r3
 8013260:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013264:	f103 0310 	add.w	r3, r3, #16
 8013268:	3b1c      	subs	r3, #28
 801326a:	4611      	mov	r1, r2
 801326c:	4618      	mov	r0, r3
 801326e:	f001 fbcb 	bl	8014a08 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013272:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013276:	f103 0310 	add.w	r3, r3, #16
 801327a:	3b04      	subs	r3, #4
 801327c:	2101      	movs	r1, #1
 801327e:	4618      	mov	r0, r3
 8013280:	f001 fbc2 	bl	8014a08 <pushStack_walk>
				break;
 8013284:	e078      	b.n	8013378 <route_Dijkstra+0x4f4>
			case 2:
				pushStack_walk(&stack_x,x);
 8013286:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801328a:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	b29a      	uxth	r2, r3
 8013292:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013296:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801329a:	4611      	mov	r1, r2
 801329c:	4618      	mov	r0, r3
 801329e:	f001 fbb3 	bl	8014a08 <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 80132a2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80132a6:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	b29b      	uxth	r3, r3
 80132ae:	3b01      	subs	r3, #1
 80132b0:	b29a      	uxth	r2, r3
 80132b2:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80132b6:	f103 0310 	add.w	r3, r3, #16
 80132ba:	3b1c      	subs	r3, #28
 80132bc:	4611      	mov	r1, r2
 80132be:	4618      	mov	r0, r3
 80132c0:	f001 fba2 	bl	8014a08 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 80132c4:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80132c8:	f103 0310 	add.w	r3, r3, #16
 80132cc:	3b04      	subs	r3, #4
 80132ce:	2100      	movs	r1, #0
 80132d0:	4618      	mov	r0, r3
 80132d2:	f001 fb99 	bl	8014a08 <pushStack_walk>
				break;
 80132d6:	e04f      	b.n	8013378 <route_Dijkstra+0x4f4>
			case 3:
				pushStack_walk(&stack_x,x-1);
 80132d8:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80132dc:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	b29b      	uxth	r3, r3
 80132e4:	3b01      	subs	r3, #1
 80132e6:	b29a      	uxth	r2, r3
 80132e8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80132ec:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80132f0:	4611      	mov	r1, r2
 80132f2:	4618      	mov	r0, r3
 80132f4:	f001 fb88 	bl	8014a08 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80132f8:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80132fc:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	b29a      	uxth	r2, r3
 8013304:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013308:	f103 0310 	add.w	r3, r3, #16
 801330c:	3b1c      	subs	r3, #28
 801330e:	4611      	mov	r1, r2
 8013310:	4618      	mov	r0, r3
 8013312:	f001 fb79 	bl	8014a08 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013316:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801331a:	f103 0310 	add.w	r3, r3, #16
 801331e:	3b04      	subs	r3, #4
 8013320:	2101      	movs	r1, #1
 8013322:	4618      	mov	r0, r3
 8013324:	f001 fb70 	bl	8014a08 <pushStack_walk>
				break;
 8013328:	e026      	b.n	8013378 <route_Dijkstra+0x4f4>
			case 4:
				pushStack_walk(&stack_x,x);
 801332a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801332e:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	b29a      	uxth	r2, r3
 8013336:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801333a:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801333e:	4611      	mov	r1, r2
 8013340:	4618      	mov	r0, r3
 8013342:	f001 fb61 	bl	8014a08 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013346:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801334a:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	b29a      	uxth	r2, r3
 8013352:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013356:	f103 0310 	add.w	r3, r3, #16
 801335a:	3b1c      	subs	r3, #28
 801335c:	4611      	mov	r1, r2
 801335e:	4618      	mov	r0, r3
 8013360:	f001 fb52 	bl	8014a08 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013364:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013368:	f103 0310 	add.w	r3, r3, #16
 801336c:	3b04      	subs	r3, #4
 801336e:	2100      	movs	r1, #0
 8013370:	4618      	mov	r0, r3
 8013372:	f001 fb49 	bl	8014a08 <pushStack_walk>
				break;
 8013376:	bf00      	nop
			}
			direction++;
 8013378:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801337c:	f103 030c 	add.w	r3, r3, #12
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	3301      	adds	r3, #1
 8013384:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013388:	f102 020c 	add.w	r2, r2, #12
 801338c:	6013      	str	r3, [r2, #0]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 801338e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013392:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013396:	881a      	ldrh	r2, [r3, #0]
 8013398:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801339c:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 80133a0:	881b      	ldrh	r3, [r3, #0]
 80133a2:	429a      	cmp	r2, r3
 80133a4:	f080 80d9 	bcs.w	801355a <route_Dijkstra+0x6d6>
 80133a8:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80133ac:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 80133b0:	881a      	ldrh	r2, [r3, #0]
 80133b2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80133b6:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 80133ba:	881b      	ldrh	r3, [r3, #0]
 80133bc:	429a      	cmp	r2, r3
 80133be:	f080 80cc 	bcs.w	801355a <route_Dijkstra+0x6d6>
 80133c2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80133c6:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 80133ca:	881a      	ldrh	r2, [r3, #0]
 80133cc:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80133d0:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 80133d4:	881b      	ldrh	r3, [r3, #0]
 80133d6:	429a      	cmp	r2, r3
 80133d8:	f200 80bf 	bhi.w	801355a <route_Dijkstra+0x6d6>
			// 左旋回
			switch (direction) {		//
 80133dc:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80133e0:	f103 030c 	add.w	r3, r3, #12
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	3b01      	subs	r3, #1
 80133e8:	2b03      	cmp	r3, #3
 80133ea:	f200 80ab 	bhi.w	8013544 <route_Dijkstra+0x6c0>
 80133ee:	a201      	add	r2, pc, #4	; (adr r2, 80133f4 <route_Dijkstra+0x570>)
 80133f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133f4:	08013405 	.word	0x08013405
 80133f8:	08013457 	.word	0x08013457
 80133fc:	080134a5 	.word	0x080134a5
 8013400:	080134f3 	.word	0x080134f3
			case 1:
				pushStack_walk(&stack_x,x-1);
 8013404:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013408:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	b29b      	uxth	r3, r3
 8013410:	3b01      	subs	r3, #1
 8013412:	b29a      	uxth	r2, r3
 8013414:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013418:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801341c:	4611      	mov	r1, r2
 801341e:	4618      	mov	r0, r3
 8013420:	f001 faf2 	bl	8014a08 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013424:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013428:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	b29a      	uxth	r2, r3
 8013430:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013434:	f103 0310 	add.w	r3, r3, #16
 8013438:	3b1c      	subs	r3, #28
 801343a:	4611      	mov	r1, r2
 801343c:	4618      	mov	r0, r3
 801343e:	f001 fae3 	bl	8014a08 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013442:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013446:	f103 0310 	add.w	r3, r3, #16
 801344a:	3b04      	subs	r3, #4
 801344c:	2101      	movs	r1, #1
 801344e:	4618      	mov	r0, r3
 8013450:	f001 fada 	bl	8014a08 <pushStack_walk>
				break;
 8013454:	e076      	b.n	8013544 <route_Dijkstra+0x6c0>
			case 2:
				pushStack_walk(&stack_x,x);
 8013456:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801345a:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	b29a      	uxth	r2, r3
 8013462:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013466:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801346a:	4611      	mov	r1, r2
 801346c:	4618      	mov	r0, r3
 801346e:	f001 facb 	bl	8014a08 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013472:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013476:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	b29a      	uxth	r2, r3
 801347e:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013482:	f103 0310 	add.w	r3, r3, #16
 8013486:	3b1c      	subs	r3, #28
 8013488:	4611      	mov	r1, r2
 801348a:	4618      	mov	r0, r3
 801348c:	f001 fabc 	bl	8014a08 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013490:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013494:	f103 0310 	add.w	r3, r3, #16
 8013498:	3b04      	subs	r3, #4
 801349a:	2100      	movs	r1, #0
 801349c:	4618      	mov	r0, r3
 801349e:	f001 fab3 	bl	8014a08 <pushStack_walk>
				break;
 80134a2:	e04f      	b.n	8013544 <route_Dijkstra+0x6c0>
			case 3:
				pushStack_walk(&stack_x,x);
 80134a4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80134a8:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	b29a      	uxth	r2, r3
 80134b0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80134b4:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80134b8:	4611      	mov	r1, r2
 80134ba:	4618      	mov	r0, r3
 80134bc:	f001 faa4 	bl	8014a08 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80134c0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80134c4:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	b29a      	uxth	r2, r3
 80134cc:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80134d0:	f103 0310 	add.w	r3, r3, #16
 80134d4:	3b1c      	subs	r3, #28
 80134d6:	4611      	mov	r1, r2
 80134d8:	4618      	mov	r0, r3
 80134da:	f001 fa95 	bl	8014a08 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80134de:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80134e2:	f103 0310 	add.w	r3, r3, #16
 80134e6:	3b04      	subs	r3, #4
 80134e8:	2101      	movs	r1, #1
 80134ea:	4618      	mov	r0, r3
 80134ec:	f001 fa8c 	bl	8014a08 <pushStack_walk>
				break;
 80134f0:	e028      	b.n	8013544 <route_Dijkstra+0x6c0>
			case 4:
				pushStack_walk(&stack_x,x);
 80134f2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80134f6:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	b29a      	uxth	r2, r3
 80134fe:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013502:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013506:	4611      	mov	r1, r2
 8013508:	4618      	mov	r0, r3
 801350a:	f001 fa7d 	bl	8014a08 <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 801350e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013512:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	b29b      	uxth	r3, r3
 801351a:	3b01      	subs	r3, #1
 801351c:	b29a      	uxth	r2, r3
 801351e:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013522:	f103 0310 	add.w	r3, r3, #16
 8013526:	3b1c      	subs	r3, #28
 8013528:	4611      	mov	r1, r2
 801352a:	4618      	mov	r0, r3
 801352c:	f001 fa6c 	bl	8014a08 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013530:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013534:	f103 0310 	add.w	r3, r3, #16
 8013538:	3b04      	subs	r3, #4
 801353a:	2100      	movs	r1, #0
 801353c:	4618      	mov	r0, r3
 801353e:	f001 fa63 	bl	8014a08 <pushStack_walk>
				break;
 8013542:	bf00      	nop
			}
			direction--;
 8013544:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013548:	f103 030c 	add.w	r3, r3, #12
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	3b01      	subs	r3, #1
 8013550:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013554:	f102 020c 	add.w	r2, r2, #12
 8013558:	6013      	str	r3, [r2, #0]
		}

		if (direction == 5) {
 801355a:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801355e:	f103 030c 	add.w	r3, r3, #12
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	2b05      	cmp	r3, #5
 8013566:	d105      	bne.n	8013574 <route_Dijkstra+0x6f0>
			direction = 1;
 8013568:	2301      	movs	r3, #1
 801356a:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 801356e:	f102 020c 	add.w	r2, r2, #12
 8013572:	6013      	str	r3, [r2, #0]
		}
		if (direction == 6) {
 8013574:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013578:	f103 030c 	add.w	r3, r3, #12
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	2b06      	cmp	r3, #6
 8013580:	d105      	bne.n	801358e <route_Dijkstra+0x70a>
			direction = 2;
 8013582:	2302      	movs	r3, #2
 8013584:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013588:	f102 020c 	add.w	r2, r2, #12
 801358c:	6013      	str	r3, [r2, #0]
		}
		if (direction == 0) {
 801358e:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013592:	f103 030c 	add.w	r3, r3, #12
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d105      	bne.n	80135a8 <route_Dijkstra+0x724>
			direction = 4;
 801359c:	2304      	movs	r3, #4
 801359e:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80135a2:	f102 020c 	add.w	r2, r2, #12
 80135a6:	6013      	str	r3, [r2, #0]
		}
		if (direction == -1) {
 80135a8:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80135ac:	f103 030c 	add.w	r3, r3, #12
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135b6:	f47f acb3 	bne.w	8012f20 <route_Dijkstra+0x9c>
			direction = 3;
 80135ba:	2303      	movs	r3, #3
 80135bc:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80135c0:	f102 020c 	add.w	r2, r2, #12
 80135c4:	6013      	str	r3, [r2, #0]
		update_coordinate(&x,&y,direction);
 80135c6:	e4ab      	b.n	8012f20 <route_Dijkstra+0x9c>
			break;
 80135c8:	bf00      	nop
	}

	unsigned short Xcoordinate,Ycoordinate,Row_or_Column;
	while (1) {

			Xcoordinate = popStack_walk(&stack_x);
 80135ca:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80135ce:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80135d2:	4618      	mov	r0, r3
 80135d4:	f001 fa42 	bl	8014a5c <popStack_walk>
 80135d8:	4603      	mov	r3, r0
 80135da:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80135de:	f102 020a 	add.w	r2, r2, #10
 80135e2:	8013      	strh	r3, [r2, #0]
			Ycoordinate = popStack_walk(&stack_y);
 80135e4:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80135e8:	f103 0310 	add.w	r3, r3, #16
 80135ec:	3b1c      	subs	r3, #28
 80135ee:	4618      	mov	r0, r3
 80135f0:	f001 fa34 	bl	8014a5c <popStack_walk>
 80135f4:	4603      	mov	r3, r0
 80135f6:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80135fa:	f102 0208 	add.w	r2, r2, #8
 80135fe:	8013      	strh	r3, [r2, #0]
			Row_or_Column = popStack_walk(&stack_matrix);
 8013600:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013604:	f103 0310 	add.w	r3, r3, #16
 8013608:	3b04      	subs	r3, #4
 801360a:	4618      	mov	r0, r3
 801360c:	f001 fa26 	bl	8014a5c <popStack_walk>
 8013610:	4603      	mov	r3, r0
 8013612:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013616:	f102 0206 	add.w	r2, r2, #6
 801361a:	8013      	strh	r3, [r2, #0]
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 801361c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013620:	f103 030a 	add.w	r3, r3, #10
 8013624:	881b      	ldrh	r3, [r3, #0]
 8013626:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801362a:	4293      	cmp	r3, r2
 801362c:	f000 80d5 	beq.w	80137da <route_Dijkstra+0x956>
 8013630:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013634:	f103 0308 	add.w	r3, r3, #8
 8013638:	881b      	ldrh	r3, [r3, #0]
 801363a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801363e:	4293      	cmp	r3, r2
 8013640:	f000 80cb 	beq.w	80137da <route_Dijkstra+0x956>
				//printf("stack_end\n");
				break;
			}
			if(Row_or_Column==COLUMN && ((wall.column_look[Ycoordinate] & (1 << Xcoordinate)) == 0)){
 8013644:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013648:	f103 0306 	add.w	r3, r3, #6
 801364c:	881b      	ldrh	r3, [r3, #0]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d15c      	bne.n	801370c <route_Dijkstra+0x888>
 8013652:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013656:	f103 0308 	add.w	r3, r3, #8
 801365a:	881b      	ldrh	r3, [r3, #0]
 801365c:	4a62      	ldr	r2, [pc, #392]	; (80137e8 <route_Dijkstra+0x964>)
 801365e:	332c      	adds	r3, #44	; 0x2c
 8013660:	005b      	lsls	r3, r3, #1
 8013662:	4413      	add	r3, r2
 8013664:	885b      	ldrh	r3, [r3, #2]
 8013666:	461a      	mov	r2, r3
 8013668:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801366c:	f103 030a 	add.w	r3, r3, #10
 8013670:	881b      	ldrh	r3, [r3, #0]
 8013672:	fa42 f303 	asr.w	r3, r2, r3
 8013676:	f003 0301 	and.w	r3, r3, #1
 801367a:	2b00      	cmp	r3, #0
 801367c:	d146      	bne.n	801370c <route_Dijkstra+0x888>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[Xcoordinate][Ycoordinate] = 0;
 801367e:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013682:	f103 030a 	add.w	r3, r3, #10
 8013686:	881a      	ldrh	r2, [r3, #0]
 8013688:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801368c:	f103 0308 	add.w	r3, r3, #8
 8013690:	881b      	ldrh	r3, [r3, #0]
 8013692:	4956      	ldr	r1, [pc, #344]	; (80137ec <route_Dijkstra+0x968>)
 8013694:	0112      	lsls	r2, r2, #4
 8013696:	4413      	add	r3, r2
 8013698:	2200      	movs	r2, #0
 801369a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				walk_count[Xcoordinate][Ycoordinate + 1] = 0;
 801369e:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80136a2:	f103 030a 	add.w	r3, r3, #10
 80136a6:	881a      	ldrh	r2, [r3, #0]
 80136a8:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80136ac:	f103 0308 	add.w	r3, r3, #8
 80136b0:	881b      	ldrh	r3, [r3, #0]
 80136b2:	3301      	adds	r3, #1
 80136b4:	494d      	ldr	r1, [pc, #308]	; (80137ec <route_Dijkstra+0x968>)
 80136b6:	0112      	lsls	r2, r2, #4
 80136b8:	4413      	add	r3, r2
 80136ba:	2200      	movs	r2, #0
 80136bc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 80136c0:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80136c4:	f103 030a 	add.w	r3, r3, #10
 80136c8:	881b      	ldrh	r3, [r3, #0]
 80136ca:	4619      	mov	r1, r3
 80136cc:	4848      	ldr	r0, [pc, #288]	; (80137f0 <route_Dijkstra+0x96c>)
 80136ce:	f001 f99b 	bl	8014a08 <pushStack_walk>
 80136d2:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80136d6:	f103 0308 	add.w	r3, r3, #8
 80136da:	881b      	ldrh	r3, [r3, #0]
 80136dc:	4619      	mov	r1, r3
 80136de:	4845      	ldr	r0, [pc, #276]	; (80137f4 <route_Dijkstra+0x970>)
 80136e0:	f001 f992 	bl	8014a08 <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate+1);
 80136e4:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80136e8:	f103 030a 	add.w	r3, r3, #10
 80136ec:	881b      	ldrh	r3, [r3, #0]
 80136ee:	4619      	mov	r1, r3
 80136f0:	483f      	ldr	r0, [pc, #252]	; (80137f0 <route_Dijkstra+0x96c>)
 80136f2:	f001 f989 	bl	8014a08 <pushStack_walk>
 80136f6:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80136fa:	f103 0308 	add.w	r3, r3, #8
 80136fe:	881b      	ldrh	r3, [r3, #0]
 8013700:	3301      	adds	r3, #1
 8013702:	b29b      	uxth	r3, r3
 8013704:	4619      	mov	r1, r3
 8013706:	483b      	ldr	r0, [pc, #236]	; (80137f4 <route_Dijkstra+0x970>)
 8013708:	f001 f97e 	bl	8014a08 <pushStack_walk>
			}
			if(Row_or_Column==ROW && ((wall.row_look[Xcoordinate] & (1 << Ycoordinate)) == 0)){
 801370c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013710:	f103 0306 	add.w	r3, r3, #6
 8013714:	881b      	ldrh	r3, [r3, #0]
 8013716:	2b01      	cmp	r3, #1
 8013718:	f47f af57 	bne.w	80135ca <route_Dijkstra+0x746>
 801371c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013720:	f103 030a 	add.w	r3, r3, #10
 8013724:	881b      	ldrh	r3, [r3, #0]
 8013726:	4a30      	ldr	r2, [pc, #192]	; (80137e8 <route_Dijkstra+0x964>)
 8013728:	331c      	adds	r3, #28
 801372a:	005b      	lsls	r3, r3, #1
 801372c:	4413      	add	r3, r2
 801372e:	889b      	ldrh	r3, [r3, #4]
 8013730:	461a      	mov	r2, r3
 8013732:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013736:	f103 0308 	add.w	r3, r3, #8
 801373a:	881b      	ldrh	r3, [r3, #0]
 801373c:	fa42 f303 	asr.w	r3, r2, r3
 8013740:	f003 0301 	and.w	r3, r3, #1
 8013744:	2b00      	cmp	r3, #0
 8013746:	f47f af40 	bne.w	80135ca <route_Dijkstra+0x746>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[Xcoordinate][Ycoordinate] = 0;
 801374a:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801374e:	f103 030a 	add.w	r3, r3, #10
 8013752:	881a      	ldrh	r2, [r3, #0]
 8013754:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013758:	f103 0308 	add.w	r3, r3, #8
 801375c:	881b      	ldrh	r3, [r3, #0]
 801375e:	4923      	ldr	r1, [pc, #140]	; (80137ec <route_Dijkstra+0x968>)
 8013760:	0112      	lsls	r2, r2, #4
 8013762:	4413      	add	r3, r2
 8013764:	2200      	movs	r2, #0
 8013766:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				walk_count[Xcoordinate + 1][Ycoordinate] = 0;
 801376a:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801376e:	f103 030a 	add.w	r3, r3, #10
 8013772:	881b      	ldrh	r3, [r3, #0]
 8013774:	1c5a      	adds	r2, r3, #1
 8013776:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801377a:	f103 0308 	add.w	r3, r3, #8
 801377e:	881b      	ldrh	r3, [r3, #0]
 8013780:	491a      	ldr	r1, [pc, #104]	; (80137ec <route_Dijkstra+0x968>)
 8013782:	0112      	lsls	r2, r2, #4
 8013784:	4413      	add	r3, r2
 8013786:	2200      	movs	r2, #0
 8013788:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 801378c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013790:	f103 030a 	add.w	r3, r3, #10
 8013794:	881b      	ldrh	r3, [r3, #0]
 8013796:	4619      	mov	r1, r3
 8013798:	4815      	ldr	r0, [pc, #84]	; (80137f0 <route_Dijkstra+0x96c>)
 801379a:	f001 f935 	bl	8014a08 <pushStack_walk>
 801379e:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80137a2:	f103 0308 	add.w	r3, r3, #8
 80137a6:	881b      	ldrh	r3, [r3, #0]
 80137a8:	4619      	mov	r1, r3
 80137aa:	4812      	ldr	r0, [pc, #72]	; (80137f4 <route_Dijkstra+0x970>)
 80137ac:	f001 f92c 	bl	8014a08 <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate+1);pushStack_walk(&g_Goal_y,Ycoordinate);
 80137b0:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80137b4:	f103 030a 	add.w	r3, r3, #10
 80137b8:	881b      	ldrh	r3, [r3, #0]
 80137ba:	3301      	adds	r3, #1
 80137bc:	b29b      	uxth	r3, r3
 80137be:	4619      	mov	r1, r3
 80137c0:	480b      	ldr	r0, [pc, #44]	; (80137f0 <route_Dijkstra+0x96c>)
 80137c2:	f001 f921 	bl	8014a08 <pushStack_walk>
 80137c6:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80137ca:	f103 0308 	add.w	r3, r3, #8
 80137ce:	881b      	ldrh	r3, [r3, #0]
 80137d0:	4619      	mov	r1, r3
 80137d2:	4808      	ldr	r0, [pc, #32]	; (80137f4 <route_Dijkstra+0x970>)
 80137d4:	f001 f918 	bl	8014a08 <pushStack_walk>
			Xcoordinate = popStack_walk(&stack_x);
 80137d8:	e6f7      	b.n	80135ca <route_Dijkstra+0x746>
			}
	}


}
 80137da:	bf00      	nop
 80137dc:	f507 47bc 	add.w	r7, r7, #24064	; 0x5e00
 80137e0:	3714      	adds	r7, #20
 80137e2:	46bd      	mov	sp, r7
 80137e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137e6:	bf00      	nop
 80137e8:	20000c40 	.word	0x20000c40
 80137ec:	20000d34 	.word	0x20000d34
 80137f0:	200012f4 	.word	0x200012f4
 80137f4:	2000229c 	.word	0x2000229c

080137f8 <create_StepCountMap_unknown>:




void create_StepCountMap_unknown(void){
 80137f8:	b580      	push	{r7, lr}
 80137fa:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 80137fe:	b082      	sub	sp, #8
 8013800:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	unsigned short goalX,goalY;
	for(uint8_t xx = 0;xx <= 15;xx++){
 8013802:	2300      	movs	r3, #0
 8013804:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013808:	f102 0207 	add.w	r2, r2, #7
 801380c:	7013      	strb	r3, [r2, #0]
 801380e:	e033      	b.n	8013878 <create_StepCountMap_unknown+0x80>
		for(uint8_t yy = 0;yy <= 15;yy++){
 8013810:	2300      	movs	r3, #0
 8013812:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013816:	f102 0206 	add.w	r2, r2, #6
 801381a:	7013      	strb	r3, [r2, #0]
 801381c:	e01a      	b.n	8013854 <create_StepCountMap_unknown+0x5c>
			walk_count[xx][yy] = 255;
 801381e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013822:	f103 0307 	add.w	r3, r3, #7
 8013826:	781a      	ldrb	r2, [r3, #0]
 8013828:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801382c:	f103 0306 	add.w	r3, r3, #6
 8013830:	781b      	ldrb	r3, [r3, #0]
 8013832:	4966      	ldr	r1, [pc, #408]	; (80139cc <create_StepCountMap_unknown+0x1d4>)
 8013834:	0112      	lsls	r2, r2, #4
 8013836:	4413      	add	r3, r2
 8013838:	22ff      	movs	r2, #255	; 0xff
 801383a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 801383e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013842:	f103 0306 	add.w	r3, r3, #6
 8013846:	781b      	ldrb	r3, [r3, #0]
 8013848:	3301      	adds	r3, #1
 801384a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801384e:	f102 0206 	add.w	r2, r2, #6
 8013852:	7013      	strb	r3, [r2, #0]
 8013854:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013858:	f103 0306 	add.w	r3, r3, #6
 801385c:	781b      	ldrb	r3, [r3, #0]
 801385e:	2b0f      	cmp	r3, #15
 8013860:	d9dd      	bls.n	801381e <create_StepCountMap_unknown+0x26>
	for(uint8_t xx = 0;xx <= 15;xx++){
 8013862:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013866:	f103 0307 	add.w	r3, r3, #7
 801386a:	781b      	ldrb	r3, [r3, #0]
 801386c:	3301      	adds	r3, #1
 801386e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013872:	f102 0207 	add.w	r2, r2, #7
 8013876:	7013      	strb	r3, [r2, #0]
 8013878:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801387c:	f103 0307 	add.w	r3, r3, #7
 8013880:	781b      	ldrb	r3, [r3, #0]
 8013882:	2b0f      	cmp	r3, #15
 8013884:	d9c4      	bls.n	8013810 <create_StepCountMap_unknown+0x18>
		}
	}

	initStack_walk(&stack_x);
 8013886:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801388a:	4618      	mov	r0, r3
 801388c:	f001 f8ac 	bl	80149e8 <initStack_walk>
	initStack_walk(&stack_y);
 8013890:	f107 0308 	add.w	r3, r7, #8
 8013894:	3b04      	subs	r3, #4
 8013896:	4618      	mov	r0, r3
 8013898:	f001 f8a6 	bl	80149e8 <initStack_walk>

	while (1) {

			goalX = popStack_walk(&g_Goal_x);
 801389c:	484c      	ldr	r0, [pc, #304]	; (80139d0 <create_StepCountMap_unknown+0x1d8>)
 801389e:	f001 f8dd 	bl	8014a5c <popStack_walk>
 80138a2:	4603      	mov	r3, r0
 80138a4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80138a8:	f102 021a 	add.w	r2, r2, #26
 80138ac:	8013      	strh	r3, [r2, #0]
			goalY = popStack_walk(&g_Goal_y);
 80138ae:	4849      	ldr	r0, [pc, #292]	; (80139d4 <create_StepCountMap_unknown+0x1dc>)
 80138b0:	f001 f8d4 	bl	8014a5c <popStack_walk>
 80138b4:	4603      	mov	r3, r0
 80138b6:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80138ba:	f102 0218 	add.w	r2, r2, #24
 80138be:	8013      	strh	r3, [r2, #0]
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (goalX == 65535 || goalY == 65535) {
 80138c0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80138c4:	f103 031a 	add.w	r3, r3, #26
 80138c8:	881b      	ldrh	r3, [r3, #0]
 80138ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80138ce:	4293      	cmp	r3, r2
 80138d0:	d030      	beq.n	8013934 <create_StepCountMap_unknown+0x13c>
 80138d2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80138d6:	f103 0318 	add.w	r3, r3, #24
 80138da:	881b      	ldrh	r3, [r3, #0]
 80138dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80138e0:	4293      	cmp	r3, r2
 80138e2:	d027      	beq.n	8013934 <create_StepCountMap_unknown+0x13c>
				//printf("stack_end\n");
				break;
			}
			walk_count[goalX][goalY] = 0;
 80138e4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80138e8:	f103 031a 	add.w	r3, r3, #26
 80138ec:	881a      	ldrh	r2, [r3, #0]
 80138ee:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80138f2:	f103 0318 	add.w	r3, r3, #24
 80138f6:	881b      	ldrh	r3, [r3, #0]
 80138f8:	4934      	ldr	r1, [pc, #208]	; (80139cc <create_StepCountMap_unknown+0x1d4>)
 80138fa:	0112      	lsls	r2, r2, #4
 80138fc:	4413      	add	r3, r2
 80138fe:	2200      	movs	r2, #0
 8013900:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,goalX);pushStack_walk(&stack_y,goalY);
 8013904:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013908:	f103 031a 	add.w	r3, r3, #26
 801390c:	881a      	ldrh	r2, [r3, #0]
 801390e:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013912:	4611      	mov	r1, r2
 8013914:	4618      	mov	r0, r3
 8013916:	f001 f877 	bl	8014a08 <pushStack_walk>
 801391a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801391e:	f103 0318 	add.w	r3, r3, #24
 8013922:	881a      	ldrh	r2, [r3, #0]
 8013924:	f107 0308 	add.w	r3, r7, #8
 8013928:	3b04      	subs	r3, #4
 801392a:	4611      	mov	r1, r2
 801392c:	4618      	mov	r0, r3
 801392e:	f001 f86b 	bl	8014a08 <pushStack_walk>
			goalX = popStack_walk(&g_Goal_x);
 8013932:	e7b3      	b.n	801389c <create_StepCountMap_unknown+0xa4>
	}
	if(stack_x.tail == stack_x.head){
 8013934:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013938:	f103 0308 	add.w	r3, r3, #8
 801393c:	f6a3 73bc 	subw	r3, r3, #4028	; 0xfbc
 8013940:	685a      	ldr	r2, [r3, #4]
 8013942:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013946:	f103 0308 	add.w	r3, r3, #8
 801394a:	f6a3 73bc 	subw	r3, r3, #4028	; 0xfbc
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	429a      	cmp	r2, r3
 8013952:	d11b      	bne.n	801398c <create_StepCountMap_unknown+0x194>
		walk_count[0][0] = 0;
 8013954:	4b1d      	ldr	r3, [pc, #116]	; (80139cc <create_StepCountMap_unknown+0x1d4>)
 8013956:	2200      	movs	r2, #0
 8013958:	801a      	strh	r2, [r3, #0]
		pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 801395a:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801395e:	2100      	movs	r1, #0
 8013960:	4618      	mov	r0, r3
 8013962:	f001 f851 	bl	8014a08 <pushStack_walk>
 8013966:	f107 0308 	add.w	r3, r7, #8
 801396a:	3b04      	subs	r3, #4
 801396c:	2100      	movs	r1, #0
 801396e:	4618      	mov	r0, r3
 8013970:	f001 f84a 	bl	8014a08 <pushStack_walk>
		if (Dijkstra_maker_flag>=1){
 8013974:	4b18      	ldr	r3, [pc, #96]	; (80139d8 <create_StepCountMap_unknown+0x1e0>)
 8013976:	781b      	ldrb	r3, [r3, #0]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d003      	beq.n	8013984 <create_StepCountMap_unknown+0x18c>
			Dijkstra_maker_flag=2;
 801397c:	4b16      	ldr	r3, [pc, #88]	; (80139d8 <create_StepCountMap_unknown+0x1e0>)
 801397e:	2202      	movs	r2, #2
 8013980:	701a      	strb	r2, [r3, #0]
 8013982:	e006      	b.n	8013992 <create_StepCountMap_unknown+0x19a>
		}else{
			Dijkstra_maker_flag=1;
 8013984:	4b14      	ldr	r3, [pc, #80]	; (80139d8 <create_StepCountMap_unknown+0x1e0>)
 8013986:	2201      	movs	r2, #1
 8013988:	701a      	strb	r2, [r3, #0]
 801398a:	e002      	b.n	8013992 <create_StepCountMap_unknown+0x19a>
		}
	}else{
		Dijkstra_maker_flag=0;
 801398c:	4b12      	ldr	r3, [pc, #72]	; (80139d8 <create_StepCountMap_unknown+0x1e0>)
 801398e:	2200      	movs	r2, #0
 8013990:	701a      	strb	r2, [r3, #0]
	}
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short count_number = 1;
 8013992:	2301      	movs	r3, #1
 8013994:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013998:	f102 0204 	add.w	r2, r2, #4
 801399c:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 801399e:	2301      	movs	r3, #1
 80139a0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80139a4:	f102 0202 	add.w	r2, r2, #2
 80139a8:	8013      	strh	r3, [r2, #0]
 80139aa:	2301      	movs	r3, #1
 80139ac:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80139b0:	8013      	strh	r3, [r2, #0]
 80139b2:	2301      	movs	r3, #1
 80139b4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80139b8:	f102 021e 	add.w	r2, r2, #30
 80139bc:	8013      	strh	r3, [r2, #0]
 80139be:	2301      	movs	r3, #1
 80139c0:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80139c4:	f102 021c 	add.w	r2, r2, #28
 80139c8:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 80139ca:	e23b      	b.n	8013e44 <create_StepCountMap_unknown+0x64c>
 80139cc:	20000d34 	.word	0x20000d34
 80139d0:	200012f4 	.word	0x200012f4
 80139d4:	2000229c 	.word	0x2000229c
 80139d8:	20000d30 	.word	0x20000d30

		Xcoordinate = popStack_walk(&stack_x);
 80139dc:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80139e0:	4618      	mov	r0, r3
 80139e2:	f001 f83b 	bl	8014a5c <popStack_walk>
 80139e6:	4603      	mov	r3, r0
 80139e8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80139ec:	f102 0216 	add.w	r2, r2, #22
 80139f0:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 80139f2:	f107 0308 	add.w	r3, r7, #8
 80139f6:	3b04      	subs	r3, #4
 80139f8:	4618      	mov	r0, r3
 80139fa:	f001 f82f 	bl	8014a5c <popStack_walk>
 80139fe:	4603      	mov	r3, r0
 8013a00:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013a04:	f102 0214 	add.w	r2, r2, #20
 8013a08:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8013a0a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013a0e:	f103 0316 	add.w	r3, r3, #22
 8013a12:	881b      	ldrh	r3, [r3, #0]
 8013a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013a18:	4293      	cmp	r3, r2
 8013a1a:	f000 821b 	beq.w	8013e54 <create_StepCountMap_unknown+0x65c>
 8013a1e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013a22:	f103 0314 	add.w	r3, r3, #20
 8013a26:	881b      	ldrh	r3, [r3, #0]
 8013a28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013a2c:	4293      	cmp	r3, r2
 8013a2e:	f000 8211 	beq.w	8013e54 <create_StepCountMap_unknown+0x65c>
			//printf("stack_end\n");
			break;
		}

		if (Ycoordinate <= 14) {
 8013a32:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013a36:	f103 0314 	add.w	r3, r3, #20
 8013a3a:	881b      	ldrh	r3, [r3, #0]
 8013a3c:	2b0e      	cmp	r3, #14
 8013a3e:	d81a      	bhi.n	8013a76 <create_StepCountMap_unknown+0x27e>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8013a40:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013a44:	f103 0314 	add.w	r3, r3, #20
 8013a48:	881b      	ldrh	r3, [r3, #0]
 8013a4a:	4ac4      	ldr	r2, [pc, #784]	; (8013d5c <create_StepCountMap_unknown+0x564>)
 8013a4c:	330c      	adds	r3, #12
 8013a4e:	005b      	lsls	r3, r3, #1
 8013a50:	4413      	add	r3, r2
 8013a52:	88db      	ldrh	r3, [r3, #6]
 8013a54:	b21a      	sxth	r2, r3
 8013a56:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013a5a:	f103 0316 	add.w	r3, r3, #22
 8013a5e:	881b      	ldrh	r3, [r3, #0]
 8013a60:	2101      	movs	r1, #1
 8013a62:	fa01 f303 	lsl.w	r3, r1, r3
 8013a66:	b21b      	sxth	r3, r3
 8013a68:	4013      	ands	r3, r2
 8013a6a:	b21b      	sxth	r3, r3
 8013a6c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013a70:	f102 0202 	add.w	r2, r2, #2
 8013a74:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 8013a76:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013a7a:	f103 0314 	add.w	r3, r3, #20
 8013a7e:	881b      	ldrh	r3, [r3, #0]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d019      	beq.n	8013ab8 <create_StepCountMap_unknown+0x2c0>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 8013a84:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013a88:	f103 0314 	add.w	r3, r3, #20
 8013a8c:	881b      	ldrh	r3, [r3, #0]
 8013a8e:	3b01      	subs	r3, #1
 8013a90:	4ab2      	ldr	r2, [pc, #712]	; (8013d5c <create_StepCountMap_unknown+0x564>)
 8013a92:	330c      	adds	r3, #12
 8013a94:	005b      	lsls	r3, r3, #1
 8013a96:	4413      	add	r3, r2
 8013a98:	88db      	ldrh	r3, [r3, #6]
 8013a9a:	b21a      	sxth	r2, r3
 8013a9c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013aa0:	f103 0316 	add.w	r3, r3, #22
 8013aa4:	881b      	ldrh	r3, [r3, #0]
 8013aa6:	2101      	movs	r1, #1
 8013aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8013aac:	b21b      	sxth	r3, r3
 8013aae:	4013      	ands	r3, r2
 8013ab0:	b21b      	sxth	r3, r3
 8013ab2:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013ab6:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 8013ab8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013abc:	f103 0316 	add.w	r3, r3, #22
 8013ac0:	881b      	ldrh	r3, [r3, #0]
 8013ac2:	2b0e      	cmp	r3, #14
 8013ac4:	d818      	bhi.n	8013af8 <create_StepCountMap_unknown+0x300>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 8013ac6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013aca:	f103 0316 	add.w	r3, r3, #22
 8013ace:	881b      	ldrh	r3, [r3, #0]
 8013ad0:	4aa2      	ldr	r2, [pc, #648]	; (8013d5c <create_StepCountMap_unknown+0x564>)
 8013ad2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013ad6:	b21a      	sxth	r2, r3
 8013ad8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013adc:	f103 0314 	add.w	r3, r3, #20
 8013ae0:	881b      	ldrh	r3, [r3, #0]
 8013ae2:	2101      	movs	r1, #1
 8013ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8013ae8:	b21b      	sxth	r3, r3
 8013aea:	4013      	ands	r3, r2
 8013aec:	b21b      	sxth	r3, r3
 8013aee:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013af2:	f102 021e 	add.w	r2, r2, #30
 8013af6:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 8013af8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013afc:	f103 0316 	add.w	r3, r3, #22
 8013b00:	881b      	ldrh	r3, [r3, #0]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d019      	beq.n	8013b3a <create_StepCountMap_unknown+0x342>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 8013b06:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013b0a:	f103 0316 	add.w	r3, r3, #22
 8013b0e:	881b      	ldrh	r3, [r3, #0]
 8013b10:	3b01      	subs	r3, #1
 8013b12:	4a92      	ldr	r2, [pc, #584]	; (8013d5c <create_StepCountMap_unknown+0x564>)
 8013b14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013b18:	b21a      	sxth	r2, r3
 8013b1a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013b1e:	f103 0314 	add.w	r3, r3, #20
 8013b22:	881b      	ldrh	r3, [r3, #0]
 8013b24:	2101      	movs	r1, #1
 8013b26:	fa01 f303 	lsl.w	r3, r1, r3
 8013b2a:	b21b      	sxth	r3, r3
 8013b2c:	4013      	ands	r3, r2
 8013b2e:	b21b      	sxth	r3, r3
 8013b30:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013b34:	f102 021c 	add.w	r2, r2, #28
 8013b38:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 8013b3a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013b3e:	f103 0316 	add.w	r3, r3, #22
 8013b42:	881a      	ldrh	r2, [r3, #0]
 8013b44:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013b48:	f103 0314 	add.w	r3, r3, #20
 8013b4c:	881b      	ldrh	r3, [r3, #0]
 8013b4e:	3301      	adds	r3, #1
 8013b50:	4983      	ldr	r1, [pc, #524]	; (8013d60 <create_StepCountMap_unknown+0x568>)
 8013b52:	0112      	lsls	r2, r2, #4
 8013b54:	4413      	add	r3, r2
 8013b56:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013b5a:	2bff      	cmp	r3, #255	; 0xff
 8013b5c:	d148      	bne.n	8013bf0 <create_StepCountMap_unknown+0x3f8>
 8013b5e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013b62:	f103 0314 	add.w	r3, r3, #20
 8013b66:	881b      	ldrh	r3, [r3, #0]
 8013b68:	2b0f      	cmp	r3, #15
 8013b6a:	d041      	beq.n	8013bf0 <create_StepCountMap_unknown+0x3f8>
 8013b6c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013b70:	f103 0302 	add.w	r3, r3, #2
 8013b74:	881b      	ldrh	r3, [r3, #0]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d13a      	bne.n	8013bf0 <create_StepCountMap_unknown+0x3f8>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8013b7a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013b7e:	f103 0316 	add.w	r3, r3, #22
 8013b82:	881a      	ldrh	r2, [r3, #0]
 8013b84:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013b88:	f103 0314 	add.w	r3, r3, #20
 8013b8c:	881b      	ldrh	r3, [r3, #0]
 8013b8e:	4974      	ldr	r1, [pc, #464]	; (8013d60 <create_StepCountMap_unknown+0x568>)
 8013b90:	0112      	lsls	r2, r2, #4
 8013b92:	4413      	add	r3, r2
 8013b94:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8013b98:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013b9c:	f103 0316 	add.w	r3, r3, #22
 8013ba0:	881a      	ldrh	r2, [r3, #0]
 8013ba2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ba6:	f103 0314 	add.w	r3, r3, #20
 8013baa:	881b      	ldrh	r3, [r3, #0]
 8013bac:	3301      	adds	r3, #1
 8013bae:	3101      	adds	r1, #1
 8013bb0:	b288      	uxth	r0, r1
 8013bb2:	496b      	ldr	r1, [pc, #428]	; (8013d60 <create_StepCountMap_unknown+0x568>)
 8013bb4:	0112      	lsls	r2, r2, #4
 8013bb6:	4413      	add	r3, r2
 8013bb8:	4602      	mov	r2, r0
 8013bba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8013bbe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013bc2:	f103 0316 	add.w	r3, r3, #22
 8013bc6:	881a      	ldrh	r2, [r3, #0]
 8013bc8:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013bcc:	4611      	mov	r1, r2
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f000 ff1a 	bl	8014a08 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8013bd4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013bd8:	f103 0314 	add.w	r3, r3, #20
 8013bdc:	881b      	ldrh	r3, [r3, #0]
 8013bde:	3301      	adds	r3, #1
 8013be0:	b29a      	uxth	r2, r3
 8013be2:	f107 0308 	add.w	r3, r7, #8
 8013be6:	3b04      	subs	r3, #4
 8013be8:	4611      	mov	r1, r2
 8013bea:	4618      	mov	r0, r3
 8013bec:	f000 ff0c 	bl	8014a08 <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8013bf0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013bf4:	f103 0316 	add.w	r3, r3, #22
 8013bf8:	881a      	ldrh	r2, [r3, #0]
 8013bfa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013bfe:	f103 0314 	add.w	r3, r3, #20
 8013c02:	881b      	ldrh	r3, [r3, #0]
 8013c04:	3b01      	subs	r3, #1
 8013c06:	4956      	ldr	r1, [pc, #344]	; (8013d60 <create_StepCountMap_unknown+0x568>)
 8013c08:	0112      	lsls	r2, r2, #4
 8013c0a:	4413      	add	r3, r2
 8013c0c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013c10:	2bff      	cmp	r3, #255	; 0xff
 8013c12:	d146      	bne.n	8013ca2 <create_StepCountMap_unknown+0x4aa>
 8013c14:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c18:	f103 0314 	add.w	r3, r3, #20
 8013c1c:	881b      	ldrh	r3, [r3, #0]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d03f      	beq.n	8013ca2 <create_StepCountMap_unknown+0x4aa>
 8013c22:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013c26:	881b      	ldrh	r3, [r3, #0]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d13a      	bne.n	8013ca2 <create_StepCountMap_unknown+0x4aa>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8013c2c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c30:	f103 0316 	add.w	r3, r3, #22
 8013c34:	881a      	ldrh	r2, [r3, #0]
 8013c36:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c3a:	f103 0314 	add.w	r3, r3, #20
 8013c3e:	881b      	ldrh	r3, [r3, #0]
 8013c40:	4947      	ldr	r1, [pc, #284]	; (8013d60 <create_StepCountMap_unknown+0x568>)
 8013c42:	0112      	lsls	r2, r2, #4
 8013c44:	4413      	add	r3, r2
 8013c46:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8013c4a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c4e:	f103 0316 	add.w	r3, r3, #22
 8013c52:	881a      	ldrh	r2, [r3, #0]
 8013c54:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c58:	f103 0314 	add.w	r3, r3, #20
 8013c5c:	881b      	ldrh	r3, [r3, #0]
 8013c5e:	3b01      	subs	r3, #1
 8013c60:	3101      	adds	r1, #1
 8013c62:	b288      	uxth	r0, r1
 8013c64:	493e      	ldr	r1, [pc, #248]	; (8013d60 <create_StepCountMap_unknown+0x568>)
 8013c66:	0112      	lsls	r2, r2, #4
 8013c68:	4413      	add	r3, r2
 8013c6a:	4602      	mov	r2, r0
 8013c6c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8013c70:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c74:	f103 0316 	add.w	r3, r3, #22
 8013c78:	881a      	ldrh	r2, [r3, #0]
 8013c7a:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013c7e:	4611      	mov	r1, r2
 8013c80:	4618      	mov	r0, r3
 8013c82:	f000 fec1 	bl	8014a08 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8013c86:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c8a:	f103 0314 	add.w	r3, r3, #20
 8013c8e:	881b      	ldrh	r3, [r3, #0]
 8013c90:	3b01      	subs	r3, #1
 8013c92:	b29a      	uxth	r2, r3
 8013c94:	f107 0308 	add.w	r3, r7, #8
 8013c98:	3b04      	subs	r3, #4
 8013c9a:	4611      	mov	r1, r2
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	f000 feb3 	bl	8014a08 <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == 255 && Xcoordinate != 15 && wall_east == 0) {
 8013ca2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ca6:	f103 0316 	add.w	r3, r3, #22
 8013caa:	881b      	ldrh	r3, [r3, #0]
 8013cac:	1c5a      	adds	r2, r3, #1
 8013cae:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013cb2:	f103 0314 	add.w	r3, r3, #20
 8013cb6:	881b      	ldrh	r3, [r3, #0]
 8013cb8:	4929      	ldr	r1, [pc, #164]	; (8013d60 <create_StepCountMap_unknown+0x568>)
 8013cba:	0112      	lsls	r2, r2, #4
 8013cbc:	4413      	add	r3, r2
 8013cbe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013cc2:	2bff      	cmp	r3, #255	; 0xff
 8013cc4:	d14e      	bne.n	8013d64 <create_StepCountMap_unknown+0x56c>
 8013cc6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013cca:	f103 0316 	add.w	r3, r3, #22
 8013cce:	881b      	ldrh	r3, [r3, #0]
 8013cd0:	2b0f      	cmp	r3, #15
 8013cd2:	d047      	beq.n	8013d64 <create_StepCountMap_unknown+0x56c>
 8013cd4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013cd8:	f103 031e 	add.w	r3, r3, #30
 8013cdc:	881b      	ldrh	r3, [r3, #0]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d140      	bne.n	8013d64 <create_StepCountMap_unknown+0x56c>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8013ce2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ce6:	f103 0316 	add.w	r3, r3, #22
 8013cea:	881a      	ldrh	r2, [r3, #0]
 8013cec:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013cf0:	f103 0314 	add.w	r3, r3, #20
 8013cf4:	881b      	ldrh	r3, [r3, #0]
 8013cf6:	491a      	ldr	r1, [pc, #104]	; (8013d60 <create_StepCountMap_unknown+0x568>)
 8013cf8:	0112      	lsls	r2, r2, #4
 8013cfa:	4413      	add	r3, r2
 8013cfc:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8013d00:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013d04:	f103 0316 	add.w	r3, r3, #22
 8013d08:	881b      	ldrh	r3, [r3, #0]
 8013d0a:	1c5a      	adds	r2, r3, #1
 8013d0c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013d10:	f103 0314 	add.w	r3, r3, #20
 8013d14:	881b      	ldrh	r3, [r3, #0]
 8013d16:	3101      	adds	r1, #1
 8013d18:	b288      	uxth	r0, r1
 8013d1a:	4911      	ldr	r1, [pc, #68]	; (8013d60 <create_StepCountMap_unknown+0x568>)
 8013d1c:	0112      	lsls	r2, r2, #4
 8013d1e:	4413      	add	r3, r2
 8013d20:	4602      	mov	r2, r0
 8013d22:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 8013d26:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013d2a:	f103 0316 	add.w	r3, r3, #22
 8013d2e:	881b      	ldrh	r3, [r3, #0]
 8013d30:	3301      	adds	r3, #1
 8013d32:	b29a      	uxth	r2, r3
 8013d34:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013d38:	4611      	mov	r1, r2
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	f000 fe64 	bl	8014a08 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8013d40:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013d44:	f103 0314 	add.w	r3, r3, #20
 8013d48:	881a      	ldrh	r2, [r3, #0]
 8013d4a:	f107 0308 	add.w	r3, r7, #8
 8013d4e:	3b04      	subs	r3, #4
 8013d50:	4611      	mov	r1, r2
 8013d52:	4618      	mov	r0, r3
 8013d54:	f000 fe58 	bl	8014a08 <pushStack_walk>
 8013d58:	e004      	b.n	8013d64 <create_StepCountMap_unknown+0x56c>
 8013d5a:	bf00      	nop
 8013d5c:	20000c40 	.word	0x20000c40
 8013d60:	20000d34 	.word	0x20000d34
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == 255 && Xcoordinate != 0 && wall_west == 0) {
 8013d64:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013d68:	f103 0316 	add.w	r3, r3, #22
 8013d6c:	881b      	ldrh	r3, [r3, #0]
 8013d6e:	1e5a      	subs	r2, r3, #1
 8013d70:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013d74:	f103 0314 	add.w	r3, r3, #20
 8013d78:	881b      	ldrh	r3, [r3, #0]
 8013d7a:	4939      	ldr	r1, [pc, #228]	; (8013e60 <create_StepCountMap_unknown+0x668>)
 8013d7c:	0112      	lsls	r2, r2, #4
 8013d7e:	4413      	add	r3, r2
 8013d80:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013d84:	2bff      	cmp	r3, #255	; 0xff
 8013d86:	d148      	bne.n	8013e1a <create_StepCountMap_unknown+0x622>
 8013d88:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013d8c:	f103 0316 	add.w	r3, r3, #22
 8013d90:	881b      	ldrh	r3, [r3, #0]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d041      	beq.n	8013e1a <create_StepCountMap_unknown+0x622>
 8013d96:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013d9a:	f103 031c 	add.w	r3, r3, #28
 8013d9e:	881b      	ldrh	r3, [r3, #0]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d13a      	bne.n	8013e1a <create_StepCountMap_unknown+0x622>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8013da4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013da8:	f103 0316 	add.w	r3, r3, #22
 8013dac:	881a      	ldrh	r2, [r3, #0]
 8013dae:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013db2:	f103 0314 	add.w	r3, r3, #20
 8013db6:	881b      	ldrh	r3, [r3, #0]
 8013db8:	4929      	ldr	r1, [pc, #164]	; (8013e60 <create_StepCountMap_unknown+0x668>)
 8013dba:	0112      	lsls	r2, r2, #4
 8013dbc:	4413      	add	r3, r2
 8013dbe:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8013dc2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013dc6:	f103 0316 	add.w	r3, r3, #22
 8013dca:	881b      	ldrh	r3, [r3, #0]
 8013dcc:	1e5a      	subs	r2, r3, #1
 8013dce:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013dd2:	f103 0314 	add.w	r3, r3, #20
 8013dd6:	881b      	ldrh	r3, [r3, #0]
 8013dd8:	3101      	adds	r1, #1
 8013dda:	b288      	uxth	r0, r1
 8013ddc:	4920      	ldr	r1, [pc, #128]	; (8013e60 <create_StepCountMap_unknown+0x668>)
 8013dde:	0112      	lsls	r2, r2, #4
 8013de0:	4413      	add	r3, r2
 8013de2:	4602      	mov	r2, r0
 8013de4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8013de8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013dec:	f103 0316 	add.w	r3, r3, #22
 8013df0:	881b      	ldrh	r3, [r3, #0]
 8013df2:	3b01      	subs	r3, #1
 8013df4:	b29a      	uxth	r2, r3
 8013df6:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013dfa:	4611      	mov	r1, r2
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	f000 fe03 	bl	8014a08 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8013e02:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e06:	f103 0314 	add.w	r3, r3, #20
 8013e0a:	881a      	ldrh	r2, [r3, #0]
 8013e0c:	f107 0308 	add.w	r3, r7, #8
 8013e10:	3b04      	subs	r3, #4
 8013e12:	4611      	mov	r1, r2
 8013e14:	4618      	mov	r0, r3
 8013e16:	f000 fdf7 	bl	8014a08 <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 8013e1a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e1e:	f103 0316 	add.w	r3, r3, #22
 8013e22:	881a      	ldrh	r2, [r3, #0]
 8013e24:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e28:	f103 0314 	add.w	r3, r3, #20
 8013e2c:	881b      	ldrh	r3, [r3, #0]
 8013e2e:	490c      	ldr	r1, [pc, #48]	; (8013e60 <create_StepCountMap_unknown+0x668>)
 8013e30:	0112      	lsls	r2, r2, #4
 8013e32:	4413      	add	r3, r2
 8013e34:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013e38:	3301      	adds	r3, #1
 8013e3a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013e3e:	f102 0204 	add.w	r2, r2, #4
 8013e42:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8013e44:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013e48:	f103 0304 	add.w	r3, r3, #4
 8013e4c:	881b      	ldrh	r3, [r3, #0]
 8013e4e:	2bfe      	cmp	r3, #254	; 0xfe
 8013e50:	f67f adc4 	bls.w	80139dc <create_StepCountMap_unknown+0x1e4>

		}

}
 8013e54:	bf00      	nop
 8013e56:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 8013e5a:	3708      	adds	r7, #8
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	bd80      	pop	{r7, pc}
 8013e60:	20000d34 	.word	0x20000d34

08013e64 <create_StepCountMap_queue>:





void create_StepCountMap_queue(void){
 8013e64:	b580      	push	{r7, lr}
 8013e66:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 8013e6a:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(uint8_t xx = 0;xx <= 15;xx++){
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013e72:	f102 021f 	add.w	r2, r2, #31
 8013e76:	7013      	strb	r3, [r2, #0]
 8013e78:	e033      	b.n	8013ee2 <create_StepCountMap_queue+0x7e>
		for(uint8_t yy = 0;yy <= 15;yy++){
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013e80:	f102 021e 	add.w	r2, r2, #30
 8013e84:	7013      	strb	r3, [r2, #0]
 8013e86:	e01a      	b.n	8013ebe <create_StepCountMap_queue+0x5a>
			walk_count[xx][yy] = 255;
 8013e88:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e8c:	f103 031f 	add.w	r3, r3, #31
 8013e90:	781a      	ldrb	r2, [r3, #0]
 8013e92:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e96:	f103 031e 	add.w	r3, r3, #30
 8013e9a:	781b      	ldrb	r3, [r3, #0]
 8013e9c:	4946      	ldr	r1, [pc, #280]	; (8013fb8 <create_StepCountMap_queue+0x154>)
 8013e9e:	0112      	lsls	r2, r2, #4
 8013ea0:	4413      	add	r3, r2
 8013ea2:	22ff      	movs	r2, #255	; 0xff
 8013ea4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 8013ea8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013eac:	f103 031e 	add.w	r3, r3, #30
 8013eb0:	781b      	ldrb	r3, [r3, #0]
 8013eb2:	3301      	adds	r3, #1
 8013eb4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013eb8:	f102 021e 	add.w	r2, r2, #30
 8013ebc:	7013      	strb	r3, [r2, #0]
 8013ebe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ec2:	f103 031e 	add.w	r3, r3, #30
 8013ec6:	781b      	ldrb	r3, [r3, #0]
 8013ec8:	2b0f      	cmp	r3, #15
 8013eca:	d9dd      	bls.n	8013e88 <create_StepCountMap_queue+0x24>
	for(uint8_t xx = 0;xx <= 15;xx++){
 8013ecc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ed0:	f103 031f 	add.w	r3, r3, #31
 8013ed4:	781b      	ldrb	r3, [r3, #0]
 8013ed6:	3301      	adds	r3, #1
 8013ed8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013edc:	f102 021f 	add.w	r2, r2, #31
 8013ee0:	7013      	strb	r3, [r2, #0]
 8013ee2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ee6:	f103 031f 	add.w	r3, r3, #31
 8013eea:	781b      	ldrb	r3, [r3, #0]
 8013eec:	2b0f      	cmp	r3, #15
 8013eee:	d9c4      	bls.n	8013e7a <create_StepCountMap_queue+0x16>
		}
	}
	initStack_walk(&stack_x);
 8013ef0:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f000 fd77 	bl	80149e8 <initStack_walk>
	initStack_walk(&stack_y);
 8013efa:	463b      	mov	r3, r7
 8013efc:	4618      	mov	r0, r3
 8013efe:	f000 fd73 	bl	80149e8 <initStack_walk>


	walk_count[GOAL_X][GOAL_Y] = 0;
 8013f02:	4b2d      	ldr	r3, [pc, #180]	; (8013fb8 <create_StepCountMap_queue+0x154>)
 8013f04:	2200      	movs	r2, #0
 8013f06:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	walk_count[GOAL_X + 1][GOAL_Y] = 0;
 8013f0a:	4b2b      	ldr	r3, [pc, #172]	; (8013fb8 <create_StepCountMap_queue+0x154>)
 8013f0c:	2200      	movs	r2, #0
 8013f0e:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	walk_count[GOAL_X][GOAL_Y + 1] = 0;
 8013f12:	4b29      	ldr	r3, [pc, #164]	; (8013fb8 <create_StepCountMap_queue+0x154>)
 8013f14:	2200      	movs	r2, #0
 8013f16:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
	walk_count[GOAL_X + 1][GOAL_Y + 1] = 0;
 8013f1a:	4b27      	ldr	r3, [pc, #156]	; (8013fb8 <create_StepCountMap_queue+0x154>)
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 8013f22:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8013f26:	2105      	movs	r1, #5
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f000 fd6d 	bl	8014a08 <pushStack_walk>
 8013f2e:	463b      	mov	r3, r7
 8013f30:	2104      	movs	r1, #4
 8013f32:	4618      	mov	r0, r3
 8013f34:	f000 fd68 	bl	8014a08 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y);
 8013f38:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8013f3c:	2106      	movs	r1, #6
 8013f3e:	4618      	mov	r0, r3
 8013f40:	f000 fd62 	bl	8014a08 <pushStack_walk>
 8013f44:	463b      	mov	r3, r7
 8013f46:	2104      	movs	r1, #4
 8013f48:	4618      	mov	r0, r3
 8013f4a:	f000 fd5d 	bl	8014a08 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y + 1);
 8013f4e:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8013f52:	2105      	movs	r1, #5
 8013f54:	4618      	mov	r0, r3
 8013f56:	f000 fd57 	bl	8014a08 <pushStack_walk>
 8013f5a:	463b      	mov	r3, r7
 8013f5c:	2105      	movs	r1, #5
 8013f5e:	4618      	mov	r0, r3
 8013f60:	f000 fd52 	bl	8014a08 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y + 1);
 8013f64:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8013f68:	2106      	movs	r1, #6
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f000 fd4c 	bl	8014a08 <pushStack_walk>
 8013f70:	463b      	mov	r3, r7
 8013f72:	2105      	movs	r1, #5
 8013f74:	4618      	mov	r0, r3
 8013f76:	f000 fd47 	bl	8014a08 <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short count_number = 1;
 8013f7a:	2301      	movs	r3, #1
 8013f7c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013f80:	f102 021c 	add.w	r2, r2, #28
 8013f84:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8013f86:	2301      	movs	r3, #1
 8013f88:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013f8c:	f102 021a 	add.w	r2, r2, #26
 8013f90:	8013      	strh	r3, [r2, #0]
 8013f92:	2301      	movs	r3, #1
 8013f94:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013f98:	f102 0218 	add.w	r2, r2, #24
 8013f9c:	8013      	strh	r3, [r2, #0]
 8013f9e:	2301      	movs	r3, #1
 8013fa0:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013fa4:	f102 0216 	add.w	r2, r2, #22
 8013fa8:	8013      	strh	r3, [r2, #0]
 8013faa:	2301      	movs	r3, #1
 8013fac:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013fb0:	f102 0214 	add.w	r2, r2, #20
 8013fb4:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8013fb6:	e22f      	b.n	8014418 <create_StepCountMap_queue+0x5b4>
 8013fb8:	20000d34 	.word	0x20000d34

		Xcoordinate = popStack_walk(&stack_x);
 8013fbc:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	f000 fd4b 	bl	8014a5c <popStack_walk>
 8013fc6:	4603      	mov	r3, r0
 8013fc8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013fcc:	f102 0212 	add.w	r2, r2, #18
 8013fd0:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 8013fd2:	463b      	mov	r3, r7
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	f000 fd41 	bl	8014a5c <popStack_walk>
 8013fda:	4603      	mov	r3, r0
 8013fdc:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013fe0:	f102 0210 	add.w	r2, r2, #16
 8013fe4:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8013fe6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013fea:	f103 0312 	add.w	r3, r3, #18
 8013fee:	881b      	ldrh	r3, [r3, #0]
 8013ff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013ff4:	4293      	cmp	r3, r2
 8013ff6:	f000 8217 	beq.w	8014428 <create_StepCountMap_queue+0x5c4>
 8013ffa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ffe:	f103 0310 	add.w	r3, r3, #16
 8014002:	881b      	ldrh	r3, [r3, #0]
 8014004:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014008:	4293      	cmp	r3, r2
 801400a:	f000 820d 	beq.w	8014428 <create_StepCountMap_queue+0x5c4>
			//printf("stack_end\n");
			break;
		}

		if (Ycoordinate <= 14) {
 801400e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014012:	f103 0310 	add.w	r3, r3, #16
 8014016:	881b      	ldrh	r3, [r3, #0]
 8014018:	2b0e      	cmp	r3, #14
 801401a:	d81a      	bhi.n	8014052 <create_StepCountMap_queue+0x1ee>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 801401c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014020:	f103 0310 	add.w	r3, r3, #16
 8014024:	881b      	ldrh	r3, [r3, #0]
 8014026:	4aca      	ldr	r2, [pc, #808]	; (8014350 <create_StepCountMap_queue+0x4ec>)
 8014028:	330c      	adds	r3, #12
 801402a:	005b      	lsls	r3, r3, #1
 801402c:	4413      	add	r3, r2
 801402e:	88db      	ldrh	r3, [r3, #6]
 8014030:	b21a      	sxth	r2, r3
 8014032:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014036:	f103 0312 	add.w	r3, r3, #18
 801403a:	881b      	ldrh	r3, [r3, #0]
 801403c:	2101      	movs	r1, #1
 801403e:	fa01 f303 	lsl.w	r3, r1, r3
 8014042:	b21b      	sxth	r3, r3
 8014044:	4013      	ands	r3, r2
 8014046:	b21b      	sxth	r3, r3
 8014048:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801404c:	f102 021a 	add.w	r2, r2, #26
 8014050:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 8014052:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014056:	f103 0310 	add.w	r3, r3, #16
 801405a:	881b      	ldrh	r3, [r3, #0]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d01b      	beq.n	8014098 <create_StepCountMap_queue+0x234>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 8014060:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014064:	f103 0310 	add.w	r3, r3, #16
 8014068:	881b      	ldrh	r3, [r3, #0]
 801406a:	3b01      	subs	r3, #1
 801406c:	4ab8      	ldr	r2, [pc, #736]	; (8014350 <create_StepCountMap_queue+0x4ec>)
 801406e:	330c      	adds	r3, #12
 8014070:	005b      	lsls	r3, r3, #1
 8014072:	4413      	add	r3, r2
 8014074:	88db      	ldrh	r3, [r3, #6]
 8014076:	b21a      	sxth	r2, r3
 8014078:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801407c:	f103 0312 	add.w	r3, r3, #18
 8014080:	881b      	ldrh	r3, [r3, #0]
 8014082:	2101      	movs	r1, #1
 8014084:	fa01 f303 	lsl.w	r3, r1, r3
 8014088:	b21b      	sxth	r3, r3
 801408a:	4013      	ands	r3, r2
 801408c:	b21b      	sxth	r3, r3
 801408e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014092:	f102 0218 	add.w	r2, r2, #24
 8014096:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 8014098:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801409c:	f103 0312 	add.w	r3, r3, #18
 80140a0:	881b      	ldrh	r3, [r3, #0]
 80140a2:	2b0e      	cmp	r3, #14
 80140a4:	d818      	bhi.n	80140d8 <create_StepCountMap_queue+0x274>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 80140a6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140aa:	f103 0312 	add.w	r3, r3, #18
 80140ae:	881b      	ldrh	r3, [r3, #0]
 80140b0:	4aa7      	ldr	r2, [pc, #668]	; (8014350 <create_StepCountMap_queue+0x4ec>)
 80140b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80140b6:	b21a      	sxth	r2, r3
 80140b8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140bc:	f103 0310 	add.w	r3, r3, #16
 80140c0:	881b      	ldrh	r3, [r3, #0]
 80140c2:	2101      	movs	r1, #1
 80140c4:	fa01 f303 	lsl.w	r3, r1, r3
 80140c8:	b21b      	sxth	r3, r3
 80140ca:	4013      	ands	r3, r2
 80140cc:	b21b      	sxth	r3, r3
 80140ce:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80140d2:	f102 0216 	add.w	r2, r2, #22
 80140d6:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 80140d8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140dc:	f103 0312 	add.w	r3, r3, #18
 80140e0:	881b      	ldrh	r3, [r3, #0]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d019      	beq.n	801411a <create_StepCountMap_queue+0x2b6>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 80140e6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140ea:	f103 0312 	add.w	r3, r3, #18
 80140ee:	881b      	ldrh	r3, [r3, #0]
 80140f0:	3b01      	subs	r3, #1
 80140f2:	4a97      	ldr	r2, [pc, #604]	; (8014350 <create_StepCountMap_queue+0x4ec>)
 80140f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80140f8:	b21a      	sxth	r2, r3
 80140fa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140fe:	f103 0310 	add.w	r3, r3, #16
 8014102:	881b      	ldrh	r3, [r3, #0]
 8014104:	2101      	movs	r1, #1
 8014106:	fa01 f303 	lsl.w	r3, r1, r3
 801410a:	b21b      	sxth	r3, r3
 801410c:	4013      	ands	r3, r2
 801410e:	b21b      	sxth	r3, r3
 8014110:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014114:	f102 0214 	add.w	r2, r2, #20
 8014118:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 801411a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801411e:	f103 0312 	add.w	r3, r3, #18
 8014122:	881a      	ldrh	r2, [r3, #0]
 8014124:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014128:	f103 0310 	add.w	r3, r3, #16
 801412c:	881b      	ldrh	r3, [r3, #0]
 801412e:	3301      	adds	r3, #1
 8014130:	4988      	ldr	r1, [pc, #544]	; (8014354 <create_StepCountMap_queue+0x4f0>)
 8014132:	0112      	lsls	r2, r2, #4
 8014134:	4413      	add	r3, r2
 8014136:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801413a:	2bff      	cmp	r3, #255	; 0xff
 801413c:	d146      	bne.n	80141cc <create_StepCountMap_queue+0x368>
 801413e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014142:	f103 0310 	add.w	r3, r3, #16
 8014146:	881b      	ldrh	r3, [r3, #0]
 8014148:	2b0f      	cmp	r3, #15
 801414a:	d03f      	beq.n	80141cc <create_StepCountMap_queue+0x368>
 801414c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014150:	f103 031a 	add.w	r3, r3, #26
 8014154:	881b      	ldrh	r3, [r3, #0]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d138      	bne.n	80141cc <create_StepCountMap_queue+0x368>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 801415a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801415e:	f103 0312 	add.w	r3, r3, #18
 8014162:	881a      	ldrh	r2, [r3, #0]
 8014164:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014168:	f103 0310 	add.w	r3, r3, #16
 801416c:	881b      	ldrh	r3, [r3, #0]
 801416e:	4979      	ldr	r1, [pc, #484]	; (8014354 <create_StepCountMap_queue+0x4f0>)
 8014170:	0112      	lsls	r2, r2, #4
 8014172:	4413      	add	r3, r2
 8014174:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014178:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801417c:	f103 0312 	add.w	r3, r3, #18
 8014180:	881a      	ldrh	r2, [r3, #0]
 8014182:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014186:	f103 0310 	add.w	r3, r3, #16
 801418a:	881b      	ldrh	r3, [r3, #0]
 801418c:	3301      	adds	r3, #1
 801418e:	3101      	adds	r1, #1
 8014190:	b288      	uxth	r0, r1
 8014192:	4970      	ldr	r1, [pc, #448]	; (8014354 <create_StepCountMap_queue+0x4f0>)
 8014194:	0112      	lsls	r2, r2, #4
 8014196:	4413      	add	r3, r2
 8014198:	4602      	mov	r2, r0
 801419a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 801419e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80141a2:	f103 0312 	add.w	r3, r3, #18
 80141a6:	881a      	ldrh	r2, [r3, #0]
 80141a8:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 80141ac:	4611      	mov	r1, r2
 80141ae:	4618      	mov	r0, r3
 80141b0:	f000 fc2a 	bl	8014a08 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 80141b4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80141b8:	f103 0310 	add.w	r3, r3, #16
 80141bc:	881b      	ldrh	r3, [r3, #0]
 80141be:	3301      	adds	r3, #1
 80141c0:	b29a      	uxth	r2, r3
 80141c2:	463b      	mov	r3, r7
 80141c4:	4611      	mov	r1, r2
 80141c6:	4618      	mov	r0, r3
 80141c8:	f000 fc1e 	bl	8014a08 <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 80141cc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80141d0:	f103 0312 	add.w	r3, r3, #18
 80141d4:	881a      	ldrh	r2, [r3, #0]
 80141d6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80141da:	f103 0310 	add.w	r3, r3, #16
 80141de:	881b      	ldrh	r3, [r3, #0]
 80141e0:	3b01      	subs	r3, #1
 80141e2:	495c      	ldr	r1, [pc, #368]	; (8014354 <create_StepCountMap_queue+0x4f0>)
 80141e4:	0112      	lsls	r2, r2, #4
 80141e6:	4413      	add	r3, r2
 80141e8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80141ec:	2bff      	cmp	r3, #255	; 0xff
 80141ee:	d146      	bne.n	801427e <create_StepCountMap_queue+0x41a>
 80141f0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80141f4:	f103 0310 	add.w	r3, r3, #16
 80141f8:	881b      	ldrh	r3, [r3, #0]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d03f      	beq.n	801427e <create_StepCountMap_queue+0x41a>
 80141fe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014202:	f103 0318 	add.w	r3, r3, #24
 8014206:	881b      	ldrh	r3, [r3, #0]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d138      	bne.n	801427e <create_StepCountMap_queue+0x41a>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 801420c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014210:	f103 0312 	add.w	r3, r3, #18
 8014214:	881a      	ldrh	r2, [r3, #0]
 8014216:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801421a:	f103 0310 	add.w	r3, r3, #16
 801421e:	881b      	ldrh	r3, [r3, #0]
 8014220:	494c      	ldr	r1, [pc, #304]	; (8014354 <create_StepCountMap_queue+0x4f0>)
 8014222:	0112      	lsls	r2, r2, #4
 8014224:	4413      	add	r3, r2
 8014226:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 801422a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801422e:	f103 0312 	add.w	r3, r3, #18
 8014232:	881a      	ldrh	r2, [r3, #0]
 8014234:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014238:	f103 0310 	add.w	r3, r3, #16
 801423c:	881b      	ldrh	r3, [r3, #0]
 801423e:	3b01      	subs	r3, #1
 8014240:	3101      	adds	r1, #1
 8014242:	b288      	uxth	r0, r1
 8014244:	4943      	ldr	r1, [pc, #268]	; (8014354 <create_StepCountMap_queue+0x4f0>)
 8014246:	0112      	lsls	r2, r2, #4
 8014248:	4413      	add	r3, r2
 801424a:	4602      	mov	r2, r0
 801424c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8014250:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014254:	f103 0312 	add.w	r3, r3, #18
 8014258:	881a      	ldrh	r2, [r3, #0]
 801425a:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 801425e:	4611      	mov	r1, r2
 8014260:	4618      	mov	r0, r3
 8014262:	f000 fbd1 	bl	8014a08 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8014266:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801426a:	f103 0310 	add.w	r3, r3, #16
 801426e:	881b      	ldrh	r3, [r3, #0]
 8014270:	3b01      	subs	r3, #1
 8014272:	b29a      	uxth	r2, r3
 8014274:	463b      	mov	r3, r7
 8014276:	4611      	mov	r1, r2
 8014278:	4618      	mov	r0, r3
 801427a:	f000 fbc5 	bl	8014a08 <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == 255 && Xcoordinate != 15 && wall_east == 0) {
 801427e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014282:	f103 0312 	add.w	r3, r3, #18
 8014286:	881b      	ldrh	r3, [r3, #0]
 8014288:	1c5a      	adds	r2, r3, #1
 801428a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801428e:	f103 0310 	add.w	r3, r3, #16
 8014292:	881b      	ldrh	r3, [r3, #0]
 8014294:	492f      	ldr	r1, [pc, #188]	; (8014354 <create_StepCountMap_queue+0x4f0>)
 8014296:	0112      	lsls	r2, r2, #4
 8014298:	4413      	add	r3, r2
 801429a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801429e:	2bff      	cmp	r3, #255	; 0xff
 80142a0:	d146      	bne.n	8014330 <create_StepCountMap_queue+0x4cc>
 80142a2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80142a6:	f103 0312 	add.w	r3, r3, #18
 80142aa:	881b      	ldrh	r3, [r3, #0]
 80142ac:	2b0f      	cmp	r3, #15
 80142ae:	d03f      	beq.n	8014330 <create_StepCountMap_queue+0x4cc>
 80142b0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80142b4:	f103 0316 	add.w	r3, r3, #22
 80142b8:	881b      	ldrh	r3, [r3, #0]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d138      	bne.n	8014330 <create_StepCountMap_queue+0x4cc>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80142be:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80142c2:	f103 0312 	add.w	r3, r3, #18
 80142c6:	881a      	ldrh	r2, [r3, #0]
 80142c8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80142cc:	f103 0310 	add.w	r3, r3, #16
 80142d0:	881b      	ldrh	r3, [r3, #0]
 80142d2:	4920      	ldr	r1, [pc, #128]	; (8014354 <create_StepCountMap_queue+0x4f0>)
 80142d4:	0112      	lsls	r2, r2, #4
 80142d6:	4413      	add	r3, r2
 80142d8:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80142dc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80142e0:	f103 0312 	add.w	r3, r3, #18
 80142e4:	881b      	ldrh	r3, [r3, #0]
 80142e6:	1c5a      	adds	r2, r3, #1
 80142e8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80142ec:	f103 0310 	add.w	r3, r3, #16
 80142f0:	881b      	ldrh	r3, [r3, #0]
 80142f2:	3101      	adds	r1, #1
 80142f4:	b288      	uxth	r0, r1
 80142f6:	4917      	ldr	r1, [pc, #92]	; (8014354 <create_StepCountMap_queue+0x4f0>)
 80142f8:	0112      	lsls	r2, r2, #4
 80142fa:	4413      	add	r3, r2
 80142fc:	4602      	mov	r2, r0
 80142fe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 8014302:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014306:	f103 0312 	add.w	r3, r3, #18
 801430a:	881b      	ldrh	r3, [r3, #0]
 801430c:	3301      	adds	r3, #1
 801430e:	b29a      	uxth	r2, r3
 8014310:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014314:	4611      	mov	r1, r2
 8014316:	4618      	mov	r0, r3
 8014318:	f000 fb76 	bl	8014a08 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 801431c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014320:	f103 0310 	add.w	r3, r3, #16
 8014324:	881a      	ldrh	r2, [r3, #0]
 8014326:	463b      	mov	r3, r7
 8014328:	4611      	mov	r1, r2
 801432a:	4618      	mov	r0, r3
 801432c:	f000 fb6c 	bl	8014a08 <pushStack_walk>
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == 255 && Xcoordinate != 0 && wall_west == 0) {
 8014330:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014334:	f103 0312 	add.w	r3, r3, #18
 8014338:	881b      	ldrh	r3, [r3, #0]
 801433a:	1e5a      	subs	r2, r3, #1
 801433c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014340:	f103 0310 	add.w	r3, r3, #16
 8014344:	881b      	ldrh	r3, [r3, #0]
 8014346:	4903      	ldr	r1, [pc, #12]	; (8014354 <create_StepCountMap_queue+0x4f0>)
 8014348:	0112      	lsls	r2, r2, #4
 801434a:	4413      	add	r3, r2
 801434c:	e004      	b.n	8014358 <create_StepCountMap_queue+0x4f4>
 801434e:	bf00      	nop
 8014350:	20000c40 	.word	0x20000c40
 8014354:	20000d34 	.word	0x20000d34
 8014358:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801435c:	2bff      	cmp	r3, #255	; 0xff
 801435e:	d146      	bne.n	80143ee <create_StepCountMap_queue+0x58a>
 8014360:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014364:	f103 0312 	add.w	r3, r3, #18
 8014368:	881b      	ldrh	r3, [r3, #0]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d03f      	beq.n	80143ee <create_StepCountMap_queue+0x58a>
 801436e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014372:	f103 0314 	add.w	r3, r3, #20
 8014376:	881b      	ldrh	r3, [r3, #0]
 8014378:	2b00      	cmp	r3, #0
 801437a:	d138      	bne.n	80143ee <create_StepCountMap_queue+0x58a>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 801437c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014380:	f103 0312 	add.w	r3, r3, #18
 8014384:	881a      	ldrh	r2, [r3, #0]
 8014386:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801438a:	f103 0310 	add.w	r3, r3, #16
 801438e:	881b      	ldrh	r3, [r3, #0]
 8014390:	4928      	ldr	r1, [pc, #160]	; (8014434 <create_StepCountMap_queue+0x5d0>)
 8014392:	0112      	lsls	r2, r2, #4
 8014394:	4413      	add	r3, r2
 8014396:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 801439a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801439e:	f103 0312 	add.w	r3, r3, #18
 80143a2:	881b      	ldrh	r3, [r3, #0]
 80143a4:	1e5a      	subs	r2, r3, #1
 80143a6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143aa:	f103 0310 	add.w	r3, r3, #16
 80143ae:	881b      	ldrh	r3, [r3, #0]
 80143b0:	3101      	adds	r1, #1
 80143b2:	b288      	uxth	r0, r1
 80143b4:	491f      	ldr	r1, [pc, #124]	; (8014434 <create_StepCountMap_queue+0x5d0>)
 80143b6:	0112      	lsls	r2, r2, #4
 80143b8:	4413      	add	r3, r2
 80143ba:	4602      	mov	r2, r0
 80143bc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 80143c0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143c4:	f103 0312 	add.w	r3, r3, #18
 80143c8:	881b      	ldrh	r3, [r3, #0]
 80143ca:	3b01      	subs	r3, #1
 80143cc:	b29a      	uxth	r2, r3
 80143ce:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 80143d2:	4611      	mov	r1, r2
 80143d4:	4618      	mov	r0, r3
 80143d6:	f000 fb17 	bl	8014a08 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 80143da:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143de:	f103 0310 	add.w	r3, r3, #16
 80143e2:	881a      	ldrh	r2, [r3, #0]
 80143e4:	463b      	mov	r3, r7
 80143e6:	4611      	mov	r1, r2
 80143e8:	4618      	mov	r0, r3
 80143ea:	f000 fb0d 	bl	8014a08 <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 80143ee:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143f2:	f103 0312 	add.w	r3, r3, #18
 80143f6:	881a      	ldrh	r2, [r3, #0]
 80143f8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143fc:	f103 0310 	add.w	r3, r3, #16
 8014400:	881b      	ldrh	r3, [r3, #0]
 8014402:	490c      	ldr	r1, [pc, #48]	; (8014434 <create_StepCountMap_queue+0x5d0>)
 8014404:	0112      	lsls	r2, r2, #4
 8014406:	4413      	add	r3, r2
 8014408:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801440c:	3301      	adds	r3, #1
 801440e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014412:	f102 021c 	add.w	r2, r2, #28
 8014416:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8014418:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801441c:	f103 031c 	add.w	r3, r3, #28
 8014420:	881b      	ldrh	r3, [r3, #0]
 8014422:	2bfe      	cmp	r3, #254	; 0xfe
 8014424:	f67f adca 	bls.w	8013fbc <create_StepCountMap_queue+0x158>

		}

}
 8014428:	bf00      	nop
 801442a:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 801442e:	46bd      	mov	sp, r7
 8014430:	bd80      	pop	{r7, pc}
 8014432:	bf00      	nop
 8014434:	20000d34 	.word	0x20000d34

08014438 <create_StepCountMapBack_queue>:



void create_StepCountMapBack_queue(void){
 8014438:	b580      	push	{r7, lr}
 801443a:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 801443e:	b082      	sub	sp, #8
 8014440:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(uint8_t xx = 0;xx <= 15;xx++){
 8014442:	2300      	movs	r3, #0
 8014444:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014448:	f102 0207 	add.w	r2, r2, #7
 801444c:	7013      	strb	r3, [r2, #0]
 801444e:	e033      	b.n	80144b8 <create_StepCountMapBack_queue+0x80>
		for(uint8_t yy = 0;yy <= 15;yy++){
 8014450:	2300      	movs	r3, #0
 8014452:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014456:	f102 0206 	add.w	r2, r2, #6
 801445a:	7013      	strb	r3, [r2, #0]
 801445c:	e01a      	b.n	8014494 <create_StepCountMapBack_queue+0x5c>
			walk_count[xx][yy] = 255;
 801445e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014462:	f103 0307 	add.w	r3, r3, #7
 8014466:	781a      	ldrb	r2, [r3, #0]
 8014468:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801446c:	f103 0306 	add.w	r3, r3, #6
 8014470:	781b      	ldrb	r3, [r3, #0]
 8014472:	4931      	ldr	r1, [pc, #196]	; (8014538 <create_StepCountMapBack_queue+0x100>)
 8014474:	0112      	lsls	r2, r2, #4
 8014476:	4413      	add	r3, r2
 8014478:	22ff      	movs	r2, #255	; 0xff
 801447a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 801447e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014482:	f103 0306 	add.w	r3, r3, #6
 8014486:	781b      	ldrb	r3, [r3, #0]
 8014488:	3301      	adds	r3, #1
 801448a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801448e:	f102 0206 	add.w	r2, r2, #6
 8014492:	7013      	strb	r3, [r2, #0]
 8014494:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014498:	f103 0306 	add.w	r3, r3, #6
 801449c:	781b      	ldrb	r3, [r3, #0]
 801449e:	2b0f      	cmp	r3, #15
 80144a0:	d9dd      	bls.n	801445e <create_StepCountMapBack_queue+0x26>
	for(uint8_t xx = 0;xx <= 15;xx++){
 80144a2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80144a6:	f103 0307 	add.w	r3, r3, #7
 80144aa:	781b      	ldrb	r3, [r3, #0]
 80144ac:	3301      	adds	r3, #1
 80144ae:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80144b2:	f102 0207 	add.w	r2, r2, #7
 80144b6:	7013      	strb	r3, [r2, #0]
 80144b8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80144bc:	f103 0307 	add.w	r3, r3, #7
 80144c0:	781b      	ldrb	r3, [r3, #0]
 80144c2:	2b0f      	cmp	r3, #15
 80144c4:	d9c4      	bls.n	8014450 <create_StepCountMapBack_queue+0x18>
		}
	}
	initStack_walk(&stack_x);
 80144c6:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80144ca:	4618      	mov	r0, r3
 80144cc:	f000 fa8c 	bl	80149e8 <initStack_walk>
	initStack_walk(&stack_y);
 80144d0:	f107 0308 	add.w	r3, r7, #8
 80144d4:	3b04      	subs	r3, #4
 80144d6:	4618      	mov	r0, r3
 80144d8:	f000 fa86 	bl	80149e8 <initStack_walk>


	walk_count[0][0] = 0;
 80144dc:	4b16      	ldr	r3, [pc, #88]	; (8014538 <create_StepCountMapBack_queue+0x100>)
 80144de:	2200      	movs	r2, #0
 80144e0:	801a      	strh	r2, [r3, #0]
	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 80144e2:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80144e6:	2100      	movs	r1, #0
 80144e8:	4618      	mov	r0, r3
 80144ea:	f000 fa8d 	bl	8014a08 <pushStack_walk>
 80144ee:	f107 0308 	add.w	r3, r7, #8
 80144f2:	3b04      	subs	r3, #4
 80144f4:	2100      	movs	r1, #0
 80144f6:	4618      	mov	r0, r3
 80144f8:	f000 fa86 	bl	8014a08 <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short coordinate;
	unsigned short count_number = 1;
 80144fc:	2301      	movs	r3, #1
 80144fe:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014502:	f102 0204 	add.w	r2, r2, #4
 8014506:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8014508:	2301      	movs	r3, #1
 801450a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801450e:	f102 0202 	add.w	r2, r2, #2
 8014512:	8013      	strh	r3, [r2, #0]
 8014514:	2301      	movs	r3, #1
 8014516:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801451a:	8013      	strh	r3, [r2, #0]
 801451c:	2301      	movs	r3, #1
 801451e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014522:	f102 021e 	add.w	r2, r2, #30
 8014526:	8013      	strh	r3, [r2, #0]
 8014528:	2301      	movs	r3, #1
 801452a:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801452e:	f102 021c 	add.w	r2, r2, #28
 8014532:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8014534:	e248      	b.n	80149c8 <create_StepCountMapBack_queue+0x590>
 8014536:	bf00      	nop
 8014538:	20000d34 	.word	0x20000d34

		Xcoordinate = popStack_walk(&stack_x);
 801453c:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014540:	4618      	mov	r0, r3
 8014542:	f000 fa8b 	bl	8014a5c <popStack_walk>
 8014546:	4603      	mov	r3, r0
 8014548:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801454c:	f102 021a 	add.w	r2, r2, #26
 8014550:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 8014552:	f107 0308 	add.w	r3, r7, #8
 8014556:	3b04      	subs	r3, #4
 8014558:	4618      	mov	r0, r3
 801455a:	f000 fa7f 	bl	8014a5c <popStack_walk>
 801455e:	4603      	mov	r3, r0
 8014560:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014564:	f102 0218 	add.w	r2, r2, #24
 8014568:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 801456a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801456e:	f103 031a 	add.w	r3, r3, #26
 8014572:	881b      	ldrh	r3, [r3, #0]
 8014574:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014578:	4293      	cmp	r3, r2
 801457a:	f000 822d 	beq.w	80149d8 <create_StepCountMapBack_queue+0x5a0>
 801457e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014582:	f103 0318 	add.w	r3, r3, #24
 8014586:	881b      	ldrh	r3, [r3, #0]
 8014588:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801458c:	4293      	cmp	r3, r2
 801458e:	f000 8223 	beq.w	80149d8 <create_StepCountMapBack_queue+0x5a0>
			//printf("stack_end\n");
			break;
		}

		coordinate = (Xcoordinate * 16) + Ycoordinate;
 8014592:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014596:	f103 031a 	add.w	r3, r3, #26
 801459a:	881b      	ldrh	r3, [r3, #0]
 801459c:	011b      	lsls	r3, r3, #4
 801459e:	b29a      	uxth	r2, r3
 80145a0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145a4:	f103 0318 	add.w	r3, r3, #24
 80145a8:	881b      	ldrh	r3, [r3, #0]
 80145aa:	4413      	add	r3, r2
 80145ac:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80145b0:	f102 0216 	add.w	r2, r2, #22
 80145b4:	8013      	strh	r3, [r2, #0]
		if (Ycoordinate <= 14) {
 80145b6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145ba:	f103 0318 	add.w	r3, r3, #24
 80145be:	881b      	ldrh	r3, [r3, #0]
 80145c0:	2b0e      	cmp	r3, #14
 80145c2:	d81a      	bhi.n	80145fa <create_StepCountMapBack_queue+0x1c2>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 80145c4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145c8:	f103 0318 	add.w	r3, r3, #24
 80145cc:	881b      	ldrh	r3, [r3, #0]
 80145ce:	4ac4      	ldr	r2, [pc, #784]	; (80148e0 <create_StepCountMapBack_queue+0x4a8>)
 80145d0:	330c      	adds	r3, #12
 80145d2:	005b      	lsls	r3, r3, #1
 80145d4:	4413      	add	r3, r2
 80145d6:	88db      	ldrh	r3, [r3, #6]
 80145d8:	b21a      	sxth	r2, r3
 80145da:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145de:	f103 031a 	add.w	r3, r3, #26
 80145e2:	881b      	ldrh	r3, [r3, #0]
 80145e4:	2101      	movs	r1, #1
 80145e6:	fa01 f303 	lsl.w	r3, r1, r3
 80145ea:	b21b      	sxth	r3, r3
 80145ec:	4013      	ands	r3, r2
 80145ee:	b21b      	sxth	r3, r3
 80145f0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80145f4:	f102 0202 	add.w	r2, r2, #2
 80145f8:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 80145fa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145fe:	f103 0318 	add.w	r3, r3, #24
 8014602:	881b      	ldrh	r3, [r3, #0]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d019      	beq.n	801463c <create_StepCountMapBack_queue+0x204>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 8014608:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801460c:	f103 0318 	add.w	r3, r3, #24
 8014610:	881b      	ldrh	r3, [r3, #0]
 8014612:	3b01      	subs	r3, #1
 8014614:	4ab2      	ldr	r2, [pc, #712]	; (80148e0 <create_StepCountMapBack_queue+0x4a8>)
 8014616:	330c      	adds	r3, #12
 8014618:	005b      	lsls	r3, r3, #1
 801461a:	4413      	add	r3, r2
 801461c:	88db      	ldrh	r3, [r3, #6]
 801461e:	b21a      	sxth	r2, r3
 8014620:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014624:	f103 031a 	add.w	r3, r3, #26
 8014628:	881b      	ldrh	r3, [r3, #0]
 801462a:	2101      	movs	r1, #1
 801462c:	fa01 f303 	lsl.w	r3, r1, r3
 8014630:	b21b      	sxth	r3, r3
 8014632:	4013      	ands	r3, r2
 8014634:	b21b      	sxth	r3, r3
 8014636:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801463a:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 801463c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014640:	f103 031a 	add.w	r3, r3, #26
 8014644:	881b      	ldrh	r3, [r3, #0]
 8014646:	2b0e      	cmp	r3, #14
 8014648:	d818      	bhi.n	801467c <create_StepCountMapBack_queue+0x244>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 801464a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801464e:	f103 031a 	add.w	r3, r3, #26
 8014652:	881b      	ldrh	r3, [r3, #0]
 8014654:	4aa2      	ldr	r2, [pc, #648]	; (80148e0 <create_StepCountMapBack_queue+0x4a8>)
 8014656:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801465a:	b21a      	sxth	r2, r3
 801465c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014660:	f103 0318 	add.w	r3, r3, #24
 8014664:	881b      	ldrh	r3, [r3, #0]
 8014666:	2101      	movs	r1, #1
 8014668:	fa01 f303 	lsl.w	r3, r1, r3
 801466c:	b21b      	sxth	r3, r3
 801466e:	4013      	ands	r3, r2
 8014670:	b21b      	sxth	r3, r3
 8014672:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014676:	f102 021e 	add.w	r2, r2, #30
 801467a:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 801467c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014680:	f103 031a 	add.w	r3, r3, #26
 8014684:	881b      	ldrh	r3, [r3, #0]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d019      	beq.n	80146be <create_StepCountMapBack_queue+0x286>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 801468a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801468e:	f103 031a 	add.w	r3, r3, #26
 8014692:	881b      	ldrh	r3, [r3, #0]
 8014694:	3b01      	subs	r3, #1
 8014696:	4a92      	ldr	r2, [pc, #584]	; (80148e0 <create_StepCountMapBack_queue+0x4a8>)
 8014698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801469c:	b21a      	sxth	r2, r3
 801469e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146a2:	f103 0318 	add.w	r3, r3, #24
 80146a6:	881b      	ldrh	r3, [r3, #0]
 80146a8:	2101      	movs	r1, #1
 80146aa:	fa01 f303 	lsl.w	r3, r1, r3
 80146ae:	b21b      	sxth	r3, r3
 80146b0:	4013      	ands	r3, r2
 80146b2:	b21b      	sxth	r3, r3
 80146b4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80146b8:	f102 021c 	add.w	r2, r2, #28
 80146bc:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 80146be:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146c2:	f103 031a 	add.w	r3, r3, #26
 80146c6:	881a      	ldrh	r2, [r3, #0]
 80146c8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146cc:	f103 0318 	add.w	r3, r3, #24
 80146d0:	881b      	ldrh	r3, [r3, #0]
 80146d2:	3301      	adds	r3, #1
 80146d4:	4983      	ldr	r1, [pc, #524]	; (80148e4 <create_StepCountMapBack_queue+0x4ac>)
 80146d6:	0112      	lsls	r2, r2, #4
 80146d8:	4413      	add	r3, r2
 80146da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80146de:	2bff      	cmp	r3, #255	; 0xff
 80146e0:	d148      	bne.n	8014774 <create_StepCountMapBack_queue+0x33c>
 80146e2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146e6:	f103 0318 	add.w	r3, r3, #24
 80146ea:	881b      	ldrh	r3, [r3, #0]
 80146ec:	2b0f      	cmp	r3, #15
 80146ee:	d041      	beq.n	8014774 <create_StepCountMapBack_queue+0x33c>
 80146f0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80146f4:	f103 0302 	add.w	r3, r3, #2
 80146f8:	881b      	ldrh	r3, [r3, #0]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d13a      	bne.n	8014774 <create_StepCountMapBack_queue+0x33c>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80146fe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014702:	f103 031a 	add.w	r3, r3, #26
 8014706:	881a      	ldrh	r2, [r3, #0]
 8014708:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801470c:	f103 0318 	add.w	r3, r3, #24
 8014710:	881b      	ldrh	r3, [r3, #0]
 8014712:	4974      	ldr	r1, [pc, #464]	; (80148e4 <create_StepCountMapBack_queue+0x4ac>)
 8014714:	0112      	lsls	r2, r2, #4
 8014716:	4413      	add	r3, r2
 8014718:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 801471c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014720:	f103 031a 	add.w	r3, r3, #26
 8014724:	881a      	ldrh	r2, [r3, #0]
 8014726:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801472a:	f103 0318 	add.w	r3, r3, #24
 801472e:	881b      	ldrh	r3, [r3, #0]
 8014730:	3301      	adds	r3, #1
 8014732:	3101      	adds	r1, #1
 8014734:	b288      	uxth	r0, r1
 8014736:	496b      	ldr	r1, [pc, #428]	; (80148e4 <create_StepCountMapBack_queue+0x4ac>)
 8014738:	0112      	lsls	r2, r2, #4
 801473a:	4413      	add	r3, r2
 801473c:	4602      	mov	r2, r0
 801473e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8014742:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014746:	f103 031a 	add.w	r3, r3, #26
 801474a:	881a      	ldrh	r2, [r3, #0]
 801474c:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014750:	4611      	mov	r1, r2
 8014752:	4618      	mov	r0, r3
 8014754:	f000 f958 	bl	8014a08 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8014758:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801475c:	f103 0318 	add.w	r3, r3, #24
 8014760:	881b      	ldrh	r3, [r3, #0]
 8014762:	3301      	adds	r3, #1
 8014764:	b29a      	uxth	r2, r3
 8014766:	f107 0308 	add.w	r3, r7, #8
 801476a:	3b04      	subs	r3, #4
 801476c:	4611      	mov	r1, r2
 801476e:	4618      	mov	r0, r3
 8014770:	f000 f94a 	bl	8014a08 <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8014774:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014778:	f103 031a 	add.w	r3, r3, #26
 801477c:	881a      	ldrh	r2, [r3, #0]
 801477e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014782:	f103 0318 	add.w	r3, r3, #24
 8014786:	881b      	ldrh	r3, [r3, #0]
 8014788:	3b01      	subs	r3, #1
 801478a:	4956      	ldr	r1, [pc, #344]	; (80148e4 <create_StepCountMapBack_queue+0x4ac>)
 801478c:	0112      	lsls	r2, r2, #4
 801478e:	4413      	add	r3, r2
 8014790:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014794:	2bff      	cmp	r3, #255	; 0xff
 8014796:	d146      	bne.n	8014826 <create_StepCountMapBack_queue+0x3ee>
 8014798:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801479c:	f103 0318 	add.w	r3, r3, #24
 80147a0:	881b      	ldrh	r3, [r3, #0]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d03f      	beq.n	8014826 <create_StepCountMapBack_queue+0x3ee>
 80147a6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80147aa:	881b      	ldrh	r3, [r3, #0]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d13a      	bne.n	8014826 <create_StepCountMapBack_queue+0x3ee>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80147b0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147b4:	f103 031a 	add.w	r3, r3, #26
 80147b8:	881a      	ldrh	r2, [r3, #0]
 80147ba:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147be:	f103 0318 	add.w	r3, r3, #24
 80147c2:	881b      	ldrh	r3, [r3, #0]
 80147c4:	4947      	ldr	r1, [pc, #284]	; (80148e4 <create_StepCountMapBack_queue+0x4ac>)
 80147c6:	0112      	lsls	r2, r2, #4
 80147c8:	4413      	add	r3, r2
 80147ca:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80147ce:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147d2:	f103 031a 	add.w	r3, r3, #26
 80147d6:	881a      	ldrh	r2, [r3, #0]
 80147d8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147dc:	f103 0318 	add.w	r3, r3, #24
 80147e0:	881b      	ldrh	r3, [r3, #0]
 80147e2:	3b01      	subs	r3, #1
 80147e4:	3101      	adds	r1, #1
 80147e6:	b288      	uxth	r0, r1
 80147e8:	493e      	ldr	r1, [pc, #248]	; (80148e4 <create_StepCountMapBack_queue+0x4ac>)
 80147ea:	0112      	lsls	r2, r2, #4
 80147ec:	4413      	add	r3, r2
 80147ee:	4602      	mov	r2, r0
 80147f0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 80147f4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147f8:	f103 031a 	add.w	r3, r3, #26
 80147fc:	881a      	ldrh	r2, [r3, #0]
 80147fe:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014802:	4611      	mov	r1, r2
 8014804:	4618      	mov	r0, r3
 8014806:	f000 f8ff 	bl	8014a08 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 801480a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801480e:	f103 0318 	add.w	r3, r3, #24
 8014812:	881b      	ldrh	r3, [r3, #0]
 8014814:	3b01      	subs	r3, #1
 8014816:	b29a      	uxth	r2, r3
 8014818:	f107 0308 	add.w	r3, r7, #8
 801481c:	3b04      	subs	r3, #4
 801481e:	4611      	mov	r1, r2
 8014820:	4618      	mov	r0, r3
 8014822:	f000 f8f1 	bl	8014a08 <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == 255 && Xcoordinate != 15 && wall_east == 0) {
 8014826:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801482a:	f103 031a 	add.w	r3, r3, #26
 801482e:	881b      	ldrh	r3, [r3, #0]
 8014830:	1c5a      	adds	r2, r3, #1
 8014832:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014836:	f103 0318 	add.w	r3, r3, #24
 801483a:	881b      	ldrh	r3, [r3, #0]
 801483c:	4929      	ldr	r1, [pc, #164]	; (80148e4 <create_StepCountMapBack_queue+0x4ac>)
 801483e:	0112      	lsls	r2, r2, #4
 8014840:	4413      	add	r3, r2
 8014842:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014846:	2bff      	cmp	r3, #255	; 0xff
 8014848:	d14e      	bne.n	80148e8 <create_StepCountMapBack_queue+0x4b0>
 801484a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801484e:	f103 031a 	add.w	r3, r3, #26
 8014852:	881b      	ldrh	r3, [r3, #0]
 8014854:	2b0f      	cmp	r3, #15
 8014856:	d047      	beq.n	80148e8 <create_StepCountMapBack_queue+0x4b0>
 8014858:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801485c:	f103 031e 	add.w	r3, r3, #30
 8014860:	881b      	ldrh	r3, [r3, #0]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d140      	bne.n	80148e8 <create_StepCountMapBack_queue+0x4b0>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014866:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801486a:	f103 031a 	add.w	r3, r3, #26
 801486e:	881a      	ldrh	r2, [r3, #0]
 8014870:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014874:	f103 0318 	add.w	r3, r3, #24
 8014878:	881b      	ldrh	r3, [r3, #0]
 801487a:	491a      	ldr	r1, [pc, #104]	; (80148e4 <create_StepCountMapBack_queue+0x4ac>)
 801487c:	0112      	lsls	r2, r2, #4
 801487e:	4413      	add	r3, r2
 8014880:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014884:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014888:	f103 031a 	add.w	r3, r3, #26
 801488c:	881b      	ldrh	r3, [r3, #0]
 801488e:	1c5a      	adds	r2, r3, #1
 8014890:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014894:	f103 0318 	add.w	r3, r3, #24
 8014898:	881b      	ldrh	r3, [r3, #0]
 801489a:	3101      	adds	r1, #1
 801489c:	b288      	uxth	r0, r1
 801489e:	4911      	ldr	r1, [pc, #68]	; (80148e4 <create_StepCountMapBack_queue+0x4ac>)
 80148a0:	0112      	lsls	r2, r2, #4
 80148a2:	4413      	add	r3, r2
 80148a4:	4602      	mov	r2, r0
 80148a6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 80148aa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148ae:	f103 031a 	add.w	r3, r3, #26
 80148b2:	881b      	ldrh	r3, [r3, #0]
 80148b4:	3301      	adds	r3, #1
 80148b6:	b29a      	uxth	r2, r3
 80148b8:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80148bc:	4611      	mov	r1, r2
 80148be:	4618      	mov	r0, r3
 80148c0:	f000 f8a2 	bl	8014a08 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 80148c4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148c8:	f103 0318 	add.w	r3, r3, #24
 80148cc:	881a      	ldrh	r2, [r3, #0]
 80148ce:	f107 0308 	add.w	r3, r7, #8
 80148d2:	3b04      	subs	r3, #4
 80148d4:	4611      	mov	r1, r2
 80148d6:	4618      	mov	r0, r3
 80148d8:	f000 f896 	bl	8014a08 <pushStack_walk>
 80148dc:	e004      	b.n	80148e8 <create_StepCountMapBack_queue+0x4b0>
 80148de:	bf00      	nop
 80148e0:	20000c40 	.word	0x20000c40
 80148e4:	20000d34 	.word	0x20000d34
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == 255 && Xcoordinate != 0 && wall_west == 0) {
 80148e8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148ec:	f103 031a 	add.w	r3, r3, #26
 80148f0:	881b      	ldrh	r3, [r3, #0]
 80148f2:	1e5a      	subs	r2, r3, #1
 80148f4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148f8:	f103 0318 	add.w	r3, r3, #24
 80148fc:	881b      	ldrh	r3, [r3, #0]
 80148fe:	4939      	ldr	r1, [pc, #228]	; (80149e4 <create_StepCountMapBack_queue+0x5ac>)
 8014900:	0112      	lsls	r2, r2, #4
 8014902:	4413      	add	r3, r2
 8014904:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014908:	2bff      	cmp	r3, #255	; 0xff
 801490a:	d148      	bne.n	801499e <create_StepCountMapBack_queue+0x566>
 801490c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014910:	f103 031a 	add.w	r3, r3, #26
 8014914:	881b      	ldrh	r3, [r3, #0]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d041      	beq.n	801499e <create_StepCountMapBack_queue+0x566>
 801491a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801491e:	f103 031c 	add.w	r3, r3, #28
 8014922:	881b      	ldrh	r3, [r3, #0]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d13a      	bne.n	801499e <create_StepCountMapBack_queue+0x566>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014928:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801492c:	f103 031a 	add.w	r3, r3, #26
 8014930:	881a      	ldrh	r2, [r3, #0]
 8014932:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014936:	f103 0318 	add.w	r3, r3, #24
 801493a:	881b      	ldrh	r3, [r3, #0]
 801493c:	4929      	ldr	r1, [pc, #164]	; (80149e4 <create_StepCountMapBack_queue+0x5ac>)
 801493e:	0112      	lsls	r2, r2, #4
 8014940:	4413      	add	r3, r2
 8014942:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014946:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801494a:	f103 031a 	add.w	r3, r3, #26
 801494e:	881b      	ldrh	r3, [r3, #0]
 8014950:	1e5a      	subs	r2, r3, #1
 8014952:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014956:	f103 0318 	add.w	r3, r3, #24
 801495a:	881b      	ldrh	r3, [r3, #0]
 801495c:	3101      	adds	r1, #1
 801495e:	b288      	uxth	r0, r1
 8014960:	4920      	ldr	r1, [pc, #128]	; (80149e4 <create_StepCountMapBack_queue+0x5ac>)
 8014962:	0112      	lsls	r2, r2, #4
 8014964:	4413      	add	r3, r2
 8014966:	4602      	mov	r2, r0
 8014968:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 801496c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014970:	f103 031a 	add.w	r3, r3, #26
 8014974:	881b      	ldrh	r3, [r3, #0]
 8014976:	3b01      	subs	r3, #1
 8014978:	b29a      	uxth	r2, r3
 801497a:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801497e:	4611      	mov	r1, r2
 8014980:	4618      	mov	r0, r3
 8014982:	f000 f841 	bl	8014a08 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014986:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801498a:	f103 0318 	add.w	r3, r3, #24
 801498e:	881a      	ldrh	r2, [r3, #0]
 8014990:	f107 0308 	add.w	r3, r7, #8
 8014994:	3b04      	subs	r3, #4
 8014996:	4611      	mov	r1, r2
 8014998:	4618      	mov	r0, r3
 801499a:	f000 f835 	bl	8014a08 <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 801499e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149a2:	f103 031a 	add.w	r3, r3, #26
 80149a6:	881a      	ldrh	r2, [r3, #0]
 80149a8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149ac:	f103 0318 	add.w	r3, r3, #24
 80149b0:	881b      	ldrh	r3, [r3, #0]
 80149b2:	490c      	ldr	r1, [pc, #48]	; (80149e4 <create_StepCountMapBack_queue+0x5ac>)
 80149b4:	0112      	lsls	r2, r2, #4
 80149b6:	4413      	add	r3, r2
 80149b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80149bc:	3301      	adds	r3, #1
 80149be:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80149c2:	f102 0204 	add.w	r2, r2, #4
 80149c6:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 80149c8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80149cc:	f103 0304 	add.w	r3, r3, #4
 80149d0:	881b      	ldrh	r3, [r3, #0]
 80149d2:	2bfe      	cmp	r3, #254	; 0xfe
 80149d4:	f67f adb2 	bls.w	801453c <create_StepCountMapBack_queue+0x104>

		}

}
 80149d8:	bf00      	nop
 80149da:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 80149de:	3708      	adds	r7, #8
 80149e0:	46bd      	mov	sp, r7
 80149e2:	bd80      	pop	{r7, pc}
 80149e4:	20000d34 	.word	0x20000d34

080149e8 <initStack_walk>:




void initStack_walk(STACK_T *stack){
 80149e8:	b480      	push	{r7}
 80149ea:	b083      	sub	sp, #12
 80149ec:	af00      	add	r7, sp, #0
 80149ee:	6078      	str	r0, [r7, #4]
//	for(int i=0;i<=MAX_QUEUE_NUM-1;i++){
//		stack->data[i] = 0;
//	}
    /* スタックを空に設定 */
	stack->head = 0;
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	2200      	movs	r2, #0
 80149f4:	601a      	str	r2, [r3, #0]
    stack->tail = 0;
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	2200      	movs	r2, #0
 80149fa:	605a      	str	r2, [r3, #4]
}
 80149fc:	bf00      	nop
 80149fe:	370c      	adds	r7, #12
 8014a00:	46bd      	mov	sp, r7
 8014a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a06:	4770      	bx	lr

08014a08 <pushStack_walk>:



void pushStack_walk(STACK_T *stack, unsigned short input){
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b082      	sub	sp, #8
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	6078      	str	r0, [r7, #4]
 8014a10:	460b      	mov	r3, r1
 8014a12:	807b      	strh	r3, [r7, #2]

    /* データをデータの最後尾の１つ後ろに格納 */
    stack->data[stack->tail] = input;
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	685a      	ldr	r2, [r3, #4]
 8014a18:	8879      	ldrh	r1, [r7, #2]
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	3202      	adds	r2, #2
 8014a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* データの最後尾を１つ後ろに移動 */
    stack->tail = stack->tail + 1;
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	685b      	ldr	r3, [r3, #4]
 8014a26:	1c5a      	adds	r2, r3, #1
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	605a      	str	r2, [r3, #4]

    /* 巡回シフト */
    if(stack->tail == MAX_QUEUE_NUM) stack->tail = 0;
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	685b      	ldr	r3, [r3, #4]
 8014a30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014a34:	d102      	bne.n	8014a3c <pushStack_walk+0x34>
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	2200      	movs	r2, #0
 8014a3a:	605a      	str	r2, [r3, #4]

    /* スタックが満杯なら何もせず関数終了 */
    if(stack->tail == stack->head ){
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	685a      	ldr	r2, [r3, #4]
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	429a      	cmp	r2, r3
 8014a46:	d103      	bne.n	8014a50 <pushStack_walk+0x48>
    	printf("stack_full\n");
 8014a48:	4803      	ldr	r0, [pc, #12]	; (8014a58 <pushStack_walk+0x50>)
 8014a4a:	f00c f82d 	bl	8020aa8 <puts>
        return;
 8014a4e:	bf00      	nop
    }
}
 8014a50:	3708      	adds	r7, #8
 8014a52:	46bd      	mov	sp, r7
 8014a54:	bd80      	pop	{r7, pc}
 8014a56:	bf00      	nop
 8014a58:	08024404 	.word	0x08024404

08014a5c <popStack_walk>:


unsigned short popStack_walk(STACK_T *stack){
 8014a5c:	b480      	push	{r7}
 8014a5e:	b085      	sub	sp, #20
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	6078      	str	r0, [r7, #4]
    unsigned short ret = 0;
 8014a64:	2300      	movs	r3, #0
 8014a66:	81fb      	strh	r3, [r7, #14]

    /* スタックが空なら何もせずに関数終了 */
    if(stack->tail == stack->head){
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	685a      	ldr	r2, [r3, #4]
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	429a      	cmp	r2, r3
 8014a72:	d102      	bne.n	8014a7a <popStack_walk+0x1e>
    	//printf("stack_empty\n");
        return 65535;
 8014a74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014a78:	e014      	b.n	8014aa4 <popStack_walk+0x48>
    }

    /* データの最前列からデータを取得 */
    ret = stack->data[stack->head];
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	681a      	ldr	r2, [r3, #0]
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	3202      	adds	r2, #2
 8014a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a86:	81fb      	strh	r3, [r7, #14]

    /* データの最前列を１つ前にずらす */
    stack->head = stack->head + 1;
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	1c5a      	adds	r2, r3, #1
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	601a      	str	r2, [r3, #0]

    /* 巡回シフト */
    if(stack->head == MAX_QUEUE_NUM) stack->head = 0;
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014a9a:	d102      	bne.n	8014aa2 <popStack_walk+0x46>
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	601a      	str	r2, [r3, #0]

    /* 取得したデータを返却 */
    return ret;
 8014aa2:	89fb      	ldrh	r3, [r7, #14]
}
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	3714      	adds	r7, #20
 8014aa8:	46bd      	mov	sp, r7
 8014aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aae:	4770      	bx	lr

08014ab0 <maze_display>:

void maze_makerback(int direction, int front_SEN, int left_SEN, int right_SEN,
		int x, int y) {}


void maze_display(void) {
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b082      	sub	sp, #8
 8014ab4:	af00      	add	r7, sp, #0

	int tt = 14;
 8014ab6:	230e      	movs	r3, #14
 8014ab8:	607b      	str	r3, [r7, #4]
	int ss = 0;
 8014aba:	2300      	movs	r3, #0
 8014abc:	603b      	str	r3, [r7, #0]

	printf(
 8014abe:	4881      	ldr	r0, [pc, #516]	; (8014cc4 <maze_display+0x214>)
 8014ac0:	f00b fff2 	bl	8020aa8 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 8014ac4:	230e      	movs	r3, #14
 8014ac6:	607b      	str	r3, [r7, #4]
 8014ac8:	e06e      	b.n	8014ba8 <maze_display+0xf8>

		printf("|%5d", walk_count[0][tt + 1]);
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	3301      	adds	r3, #1
 8014ace:	4a7e      	ldr	r2, [pc, #504]	; (8014cc8 <maze_display+0x218>)
 8014ad0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014ad4:	4619      	mov	r1, r3
 8014ad6:	487d      	ldr	r0, [pc, #500]	; (8014ccc <maze_display+0x21c>)
 8014ad8:	f00b ff4a 	bl	8020970 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014adc:	2300      	movs	r3, #0
 8014ade:	603b      	str	r3, [r7, #0]
 8014ae0:	e030      	b.n	8014b44 <maze_display+0x94>
			if ((wall.row[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 8014ae2:	4a7b      	ldr	r2, [pc, #492]	; (8014cd0 <maze_display+0x220>)
 8014ae4:	683b      	ldr	r3, [r7, #0]
 8014ae6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014aea:	4619      	mov	r1, r3
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	3301      	adds	r3, #1
 8014af0:	2201      	movs	r2, #1
 8014af2:	fa02 f303 	lsl.w	r3, r2, r3
 8014af6:	ea01 0203 	and.w	r2, r1, r3
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	3301      	adds	r3, #1
 8014afe:	2101      	movs	r1, #1
 8014b00:	fa01 f303 	lsl.w	r3, r1, r3
 8014b04:	429a      	cmp	r2, r3
 8014b06:	d10d      	bne.n	8014b24 <maze_display+0x74>
				printf("|%5d", walk_count[ss + 1][tt + 1]);
 8014b08:	683b      	ldr	r3, [r7, #0]
 8014b0a:	1c5a      	adds	r2, r3, #1
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	3301      	adds	r3, #1
 8014b10:	496d      	ldr	r1, [pc, #436]	; (8014cc8 <maze_display+0x218>)
 8014b12:	0112      	lsls	r2, r2, #4
 8014b14:	4413      	add	r3, r2
 8014b16:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014b1a:	4619      	mov	r1, r3
 8014b1c:	486b      	ldr	r0, [pc, #428]	; (8014ccc <maze_display+0x21c>)
 8014b1e:	f00b ff27 	bl	8020970 <iprintf>
 8014b22:	e00c      	b.n	8014b3e <maze_display+0x8e>
			}else{
				printf(" %5d", walk_count[ss + 1][tt + 1]);
 8014b24:	683b      	ldr	r3, [r7, #0]
 8014b26:	1c5a      	adds	r2, r3, #1
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	3301      	adds	r3, #1
 8014b2c:	4966      	ldr	r1, [pc, #408]	; (8014cc8 <maze_display+0x218>)
 8014b2e:	0112      	lsls	r2, r2, #4
 8014b30:	4413      	add	r3, r2
 8014b32:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014b36:	4619      	mov	r1, r3
 8014b38:	4866      	ldr	r0, [pc, #408]	; (8014cd4 <maze_display+0x224>)
 8014b3a:	f00b ff19 	bl	8020970 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014b3e:	683b      	ldr	r3, [r7, #0]
 8014b40:	3301      	adds	r3, #1
 8014b42:	603b      	str	r3, [r7, #0]
 8014b44:	683b      	ldr	r3, [r7, #0]
 8014b46:	2b0e      	cmp	r3, #14
 8014b48:	ddcb      	ble.n	8014ae2 <maze_display+0x32>
			}
		}
		printf("|\n");
 8014b4a:	4863      	ldr	r0, [pc, #396]	; (8014cd8 <maze_display+0x228>)
 8014b4c:	f00b ffac 	bl	8020aa8 <puts>
		if (tt <= -1) {
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	db2d      	blt.n	8014bb2 <maze_display+0x102>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8014b56:	2300      	movs	r3, #0
 8014b58:	603b      	str	r3, [r7, #0]
 8014b5a:	e01c      	b.n	8014b96 <maze_display+0xe6>
			if ((wall.column[tt] & (1 << ss)) == (1 << ss)){
 8014b5c:	4a5c      	ldr	r2, [pc, #368]	; (8014cd0 <maze_display+0x220>)
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	330c      	adds	r3, #12
 8014b62:	005b      	lsls	r3, r3, #1
 8014b64:	4413      	add	r3, r2
 8014b66:	88db      	ldrh	r3, [r3, #6]
 8014b68:	4619      	mov	r1, r3
 8014b6a:	2201      	movs	r2, #1
 8014b6c:	683b      	ldr	r3, [r7, #0]
 8014b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8014b72:	ea01 0203 	and.w	r2, r1, r3
 8014b76:	2101      	movs	r1, #1
 8014b78:	683b      	ldr	r3, [r7, #0]
 8014b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8014b7e:	429a      	cmp	r2, r3
 8014b80:	d103      	bne.n	8014b8a <maze_display+0xda>
				printf("+-----");
 8014b82:	4856      	ldr	r0, [pc, #344]	; (8014cdc <maze_display+0x22c>)
 8014b84:	f00b fef4 	bl	8020970 <iprintf>
 8014b88:	e002      	b.n	8014b90 <maze_display+0xe0>
			}else{
				printf("+     ");
 8014b8a:	4855      	ldr	r0, [pc, #340]	; (8014ce0 <maze_display+0x230>)
 8014b8c:	f00b fef0 	bl	8020970 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8014b90:	683b      	ldr	r3, [r7, #0]
 8014b92:	3301      	adds	r3, #1
 8014b94:	603b      	str	r3, [r7, #0]
 8014b96:	683b      	ldr	r3, [r7, #0]
 8014b98:	2b0f      	cmp	r3, #15
 8014b9a:	dddf      	ble.n	8014b5c <maze_display+0xac>
			}
		}

		printf("+\n");
 8014b9c:	4851      	ldr	r0, [pc, #324]	; (8014ce4 <maze_display+0x234>)
 8014b9e:	f00b ff83 	bl	8020aa8 <puts>
	for (tt = 14;tt >= -1;tt--){
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	3b01      	subs	r3, #1
 8014ba6:	607b      	str	r3, [r7, #4]
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bae:	da8c      	bge.n	8014aca <maze_display+0x1a>
 8014bb0:	e000      	b.n	8014bb4 <maze_display+0x104>
			break;
 8014bb2:	bf00      	nop

	}

	printf(
 8014bb4:	484c      	ldr	r0, [pc, #304]	; (8014ce8 <maze_display+0x238>)
 8014bb6:	f00b ff77 	bl	8020aa8 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 8014bba:	4842      	ldr	r0, [pc, #264]	; (8014cc4 <maze_display+0x214>)
 8014bbc:	f00b ff74 	bl	8020aa8 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");

	for (tt = 14;tt >= -1;tt--){
 8014bc0:	230e      	movs	r3, #14
 8014bc2:	607b      	str	r3, [r7, #4]
 8014bc4:	e070      	b.n	8014ca8 <maze_display+0x1f8>
		printf("|%5d", walk_count[0][tt + 1]);
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	3301      	adds	r3, #1
 8014bca:	4a3f      	ldr	r2, [pc, #252]	; (8014cc8 <maze_display+0x218>)
 8014bcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014bd0:	4619      	mov	r1, r3
 8014bd2:	483e      	ldr	r0, [pc, #248]	; (8014ccc <maze_display+0x21c>)
 8014bd4:	f00b fecc 	bl	8020970 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014bd8:	2300      	movs	r3, #0
 8014bda:	603b      	str	r3, [r7, #0]
 8014bdc:	e032      	b.n	8014c44 <maze_display+0x194>
			if ((wall.row_look[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 8014bde:	4a3c      	ldr	r2, [pc, #240]	; (8014cd0 <maze_display+0x220>)
 8014be0:	683b      	ldr	r3, [r7, #0]
 8014be2:	331c      	adds	r3, #28
 8014be4:	005b      	lsls	r3, r3, #1
 8014be6:	4413      	add	r3, r2
 8014be8:	889b      	ldrh	r3, [r3, #4]
 8014bea:	4619      	mov	r1, r3
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	3301      	adds	r3, #1
 8014bf0:	2201      	movs	r2, #1
 8014bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8014bf6:	ea01 0203 	and.w	r2, r1, r3
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	3301      	adds	r3, #1
 8014bfe:	2101      	movs	r1, #1
 8014c00:	fa01 f303 	lsl.w	r3, r1, r3
 8014c04:	429a      	cmp	r2, r3
 8014c06:	d10d      	bne.n	8014c24 <maze_display+0x174>
				printf("|%5d", walk_count[ss + 1][tt + 1]);
 8014c08:	683b      	ldr	r3, [r7, #0]
 8014c0a:	1c5a      	adds	r2, r3, #1
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	3301      	adds	r3, #1
 8014c10:	492d      	ldr	r1, [pc, #180]	; (8014cc8 <maze_display+0x218>)
 8014c12:	0112      	lsls	r2, r2, #4
 8014c14:	4413      	add	r3, r2
 8014c16:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014c1a:	4619      	mov	r1, r3
 8014c1c:	482b      	ldr	r0, [pc, #172]	; (8014ccc <maze_display+0x21c>)
 8014c1e:	f00b fea7 	bl	8020970 <iprintf>
 8014c22:	e00c      	b.n	8014c3e <maze_display+0x18e>
			}else{
				printf(" %5d", walk_count[ss + 1][tt + 1]);
 8014c24:	683b      	ldr	r3, [r7, #0]
 8014c26:	1c5a      	adds	r2, r3, #1
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	3301      	adds	r3, #1
 8014c2c:	4926      	ldr	r1, [pc, #152]	; (8014cc8 <maze_display+0x218>)
 8014c2e:	0112      	lsls	r2, r2, #4
 8014c30:	4413      	add	r3, r2
 8014c32:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014c36:	4619      	mov	r1, r3
 8014c38:	4826      	ldr	r0, [pc, #152]	; (8014cd4 <maze_display+0x224>)
 8014c3a:	f00b fe99 	bl	8020970 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014c3e:	683b      	ldr	r3, [r7, #0]
 8014c40:	3301      	adds	r3, #1
 8014c42:	603b      	str	r3, [r7, #0]
 8014c44:	683b      	ldr	r3, [r7, #0]
 8014c46:	2b0e      	cmp	r3, #14
 8014c48:	ddc9      	ble.n	8014bde <maze_display+0x12e>
			}
		}
		printf("|\n");
 8014c4a:	4823      	ldr	r0, [pc, #140]	; (8014cd8 <maze_display+0x228>)
 8014c4c:	f00b ff2c 	bl	8020aa8 <puts>
		if (tt <= -1) {
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	db2d      	blt.n	8014cb2 <maze_display+0x202>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8014c56:	2300      	movs	r3, #0
 8014c58:	603b      	str	r3, [r7, #0]
 8014c5a:	e01c      	b.n	8014c96 <maze_display+0x1e6>
			if ((wall.column_look[tt] & (1 << ss)) == (1 << ss)){
 8014c5c:	4a1c      	ldr	r2, [pc, #112]	; (8014cd0 <maze_display+0x220>)
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	332c      	adds	r3, #44	; 0x2c
 8014c62:	005b      	lsls	r3, r3, #1
 8014c64:	4413      	add	r3, r2
 8014c66:	885b      	ldrh	r3, [r3, #2]
 8014c68:	4619      	mov	r1, r3
 8014c6a:	2201      	movs	r2, #1
 8014c6c:	683b      	ldr	r3, [r7, #0]
 8014c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8014c72:	ea01 0203 	and.w	r2, r1, r3
 8014c76:	2101      	movs	r1, #1
 8014c78:	683b      	ldr	r3, [r7, #0]
 8014c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8014c7e:	429a      	cmp	r2, r3
 8014c80:	d103      	bne.n	8014c8a <maze_display+0x1da>
				printf("+-----");
 8014c82:	4816      	ldr	r0, [pc, #88]	; (8014cdc <maze_display+0x22c>)
 8014c84:	f00b fe74 	bl	8020970 <iprintf>
 8014c88:	e002      	b.n	8014c90 <maze_display+0x1e0>
			}else{
				printf("+     ");
 8014c8a:	4815      	ldr	r0, [pc, #84]	; (8014ce0 <maze_display+0x230>)
 8014c8c:	f00b fe70 	bl	8020970 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8014c90:	683b      	ldr	r3, [r7, #0]
 8014c92:	3301      	adds	r3, #1
 8014c94:	603b      	str	r3, [r7, #0]
 8014c96:	683b      	ldr	r3, [r7, #0]
 8014c98:	2b0f      	cmp	r3, #15
 8014c9a:	dddf      	ble.n	8014c5c <maze_display+0x1ac>
			}
		}
		printf("+\n");
 8014c9c:	4811      	ldr	r0, [pc, #68]	; (8014ce4 <maze_display+0x234>)
 8014c9e:	f00b ff03 	bl	8020aa8 <puts>
	for (tt = 14;tt >= -1;tt--){
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	3b01      	subs	r3, #1
 8014ca6:	607b      	str	r3, [r7, #4]
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cae:	da8a      	bge.n	8014bc6 <maze_display+0x116>
 8014cb0:	e000      	b.n	8014cb4 <maze_display+0x204>
			break;
 8014cb2:	bf00      	nop
	}

	printf(
 8014cb4:	480c      	ldr	r0, [pc, #48]	; (8014ce8 <maze_display+0x238>)
 8014cb6:	f00b fef7 	bl	8020aa8 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");

}
 8014cba:	bf00      	nop
 8014cbc:	3708      	adds	r7, #8
 8014cbe:	46bd      	mov	sp, r7
 8014cc0:	bd80      	pop	{r7, pc}
 8014cc2:	bf00      	nop
 8014cc4:	08024410 	.word	0x08024410
 8014cc8:	20000d34 	.word	0x20000d34
 8014ccc:	08024474 	.word	0x08024474
 8014cd0:	20000c40 	.word	0x20000c40
 8014cd4:	0802447c 	.word	0x0802447c
 8014cd8:	08024484 	.word	0x08024484
 8014cdc:	08024488 	.word	0x08024488
 8014ce0:	08024490 	.word	0x08024490
 8014ce4:	08024498 	.word	0x08024498
 8014ce8:	0802449c 	.word	0x0802449c

08014cec <maze_display_Dijkstra>:





void maze_display_Dijkstra(void) {
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b082      	sub	sp, #8
 8014cf0:	af00      	add	r7, sp, #0

	int tt = 14;
 8014cf2:	230e      	movs	r3, #14
 8014cf4:	607b      	str	r3, [r7, #4]
	int ss = 0;
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	603b      	str	r3, [r7, #0]

	printf(
 8014cfa:	4865      	ldr	r0, [pc, #404]	; (8014e90 <maze_display_Dijkstra+0x1a4>)
 8014cfc:	f00b fed4 	bl	8020aa8 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 8014d00:	230e      	movs	r3, #14
 8014d02:	607b      	str	r3, [r7, #4]
 8014d04:	e06a      	b.n	8014ddc <maze_display_Dijkstra+0xf0>

		printf("|   ");//walk_count[tt + 1]
 8014d06:	4863      	ldr	r0, [pc, #396]	; (8014e94 <maze_display_Dijkstra+0x1a8>)
 8014d08:	f00b fe32 	bl	8020970 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014d0c:	2300      	movs	r3, #0
 8014d0e:	603b      	str	r3, [r7, #0]
 8014d10:	e027      	b.n	8014d62 <maze_display_Dijkstra+0x76>
			if ((wall.row[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 8014d12:	4a61      	ldr	r2, [pc, #388]	; (8014e98 <maze_display_Dijkstra+0x1ac>)
 8014d14:	683b      	ldr	r3, [r7, #0]
 8014d16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014d1a:	4619      	mov	r1, r3
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	3301      	adds	r3, #1
 8014d20:	2201      	movs	r2, #1
 8014d22:	fa02 f303 	lsl.w	r3, r2, r3
 8014d26:	ea01 0203 	and.w	r2, r1, r3
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	3301      	adds	r3, #1
 8014d2e:	2101      	movs	r1, #1
 8014d30:	fa01 f303 	lsl.w	r3, r1, r3
 8014d34:	429a      	cmp	r2, r3
 8014d36:	d103      	bne.n	8014d40 <maze_display_Dijkstra+0x54>
				printf("  |   ");
 8014d38:	4858      	ldr	r0, [pc, #352]	; (8014e9c <maze_display_Dijkstra+0x1b0>)
 8014d3a:	f00b fe19 	bl	8020970 <iprintf>
 8014d3e:	e00d      	b.n	8014d5c <maze_display_Dijkstra+0x70>
			}else{
				printf("%5d ", Dijkstra.row_count[(tt + 1)][ss]);
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	1c5a      	adds	r2, r3, #1
 8014d44:	4956      	ldr	r1, [pc, #344]	; (8014ea0 <maze_display_Dijkstra+0x1b4>)
 8014d46:	4613      	mov	r3, r2
 8014d48:	011b      	lsls	r3, r3, #4
 8014d4a:	1a9b      	subs	r3, r3, r2
 8014d4c:	683a      	ldr	r2, [r7, #0]
 8014d4e:	4413      	add	r3, r2
 8014d50:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014d54:	4619      	mov	r1, r3
 8014d56:	4853      	ldr	r0, [pc, #332]	; (8014ea4 <maze_display_Dijkstra+0x1b8>)
 8014d58:	f00b fe0a 	bl	8020970 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014d5c:	683b      	ldr	r3, [r7, #0]
 8014d5e:	3301      	adds	r3, #1
 8014d60:	603b      	str	r3, [r7, #0]
 8014d62:	683b      	ldr	r3, [r7, #0]
 8014d64:	2b0e      	cmp	r3, #14
 8014d66:	ddd4      	ble.n	8014d12 <maze_display_Dijkstra+0x26>
			}
		}
		printf("   |\n");
 8014d68:	484f      	ldr	r0, [pc, #316]	; (8014ea8 <maze_display_Dijkstra+0x1bc>)
 8014d6a:	f00b fe9d 	bl	8020aa8 <puts>
		if (tt <= -1) {
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	db38      	blt.n	8014de6 <maze_display_Dijkstra+0xfa>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8014d74:	2300      	movs	r3, #0
 8014d76:	603b      	str	r3, [r7, #0]
 8014d78:	e027      	b.n	8014dca <maze_display_Dijkstra+0xde>
			if ((wall.column[tt] & (1 << ss)) == (1 << ss)){
 8014d7a:	4a47      	ldr	r2, [pc, #284]	; (8014e98 <maze_display_Dijkstra+0x1ac>)
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	330c      	adds	r3, #12
 8014d80:	005b      	lsls	r3, r3, #1
 8014d82:	4413      	add	r3, r2
 8014d84:	88db      	ldrh	r3, [r3, #6]
 8014d86:	4619      	mov	r1, r3
 8014d88:	2201      	movs	r2, #1
 8014d8a:	683b      	ldr	r3, [r7, #0]
 8014d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8014d90:	ea01 0203 	and.w	r2, r1, r3
 8014d94:	2101      	movs	r1, #1
 8014d96:	683b      	ldr	r3, [r7, #0]
 8014d98:	fa01 f303 	lsl.w	r3, r1, r3
 8014d9c:	429a      	cmp	r2, r3
 8014d9e:	d103      	bne.n	8014da8 <maze_display_Dijkstra+0xbc>
				printf("+-----");
 8014da0:	4842      	ldr	r0, [pc, #264]	; (8014eac <maze_display_Dijkstra+0x1c0>)
 8014da2:	f00b fde5 	bl	8020970 <iprintf>
 8014da6:	e00d      	b.n	8014dc4 <maze_display_Dijkstra+0xd8>
			}else{
				printf("+%5d",Dijkstra.column_count[ss][tt]);
 8014da8:	493d      	ldr	r1, [pc, #244]	; (8014ea0 <maze_display_Dijkstra+0x1b4>)
 8014daa:	683a      	ldr	r2, [r7, #0]
 8014dac:	4613      	mov	r3, r2
 8014dae:	011b      	lsls	r3, r3, #4
 8014db0:	1a9b      	subs	r3, r3, r2
 8014db2:	687a      	ldr	r2, [r7, #4]
 8014db4:	4413      	add	r3, r2
 8014db6:	33f0      	adds	r3, #240	; 0xf0
 8014db8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014dbc:	4619      	mov	r1, r3
 8014dbe:	483c      	ldr	r0, [pc, #240]	; (8014eb0 <maze_display_Dijkstra+0x1c4>)
 8014dc0:	f00b fdd6 	bl	8020970 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8014dc4:	683b      	ldr	r3, [r7, #0]
 8014dc6:	3301      	adds	r3, #1
 8014dc8:	603b      	str	r3, [r7, #0]
 8014dca:	683b      	ldr	r3, [r7, #0]
 8014dcc:	2b0f      	cmp	r3, #15
 8014dce:	ddd4      	ble.n	8014d7a <maze_display_Dijkstra+0x8e>
			}
		}

		printf("+\n");
 8014dd0:	4838      	ldr	r0, [pc, #224]	; (8014eb4 <maze_display_Dijkstra+0x1c8>)
 8014dd2:	f00b fe69 	bl	8020aa8 <puts>
	for (tt = 14;tt >= -1;tt--){
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	3b01      	subs	r3, #1
 8014dda:	607b      	str	r3, [r7, #4]
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014de2:	da90      	bge.n	8014d06 <maze_display_Dijkstra+0x1a>
 8014de4:	e000      	b.n	8014de8 <maze_display_Dijkstra+0xfc>
			break;
 8014de6:	bf00      	nop

	}

	printf(
 8014de8:	4833      	ldr	r0, [pc, #204]	; (8014eb8 <maze_display_Dijkstra+0x1cc>)
 8014dea:	f00b fe5d 	bl	8020aa8 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 8014dee:	4828      	ldr	r0, [pc, #160]	; (8014e90 <maze_display_Dijkstra+0x1a4>)
 8014df0:	f00b fe5a 	bl	8020aa8 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 8014df4:	230e      	movs	r3, #14
 8014df6:	607b      	str	r3, [r7, #4]
 8014df8:	e03c      	b.n	8014e74 <maze_display_Dijkstra+0x188>

		printf("|   ");//walk_count[tt + 1]
 8014dfa:	4826      	ldr	r0, [pc, #152]	; (8014e94 <maze_display_Dijkstra+0x1a8>)
 8014dfc:	f00b fdb8 	bl	8020970 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014e00:	2300      	movs	r3, #0
 8014e02:	603b      	str	r3, [r7, #0]
 8014e04:	e010      	b.n	8014e28 <maze_display_Dijkstra+0x13c>

				printf("%5d ", Dijkstra.row_count[(tt + 1)][ss]);
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	1c5a      	adds	r2, r3, #1
 8014e0a:	4925      	ldr	r1, [pc, #148]	; (8014ea0 <maze_display_Dijkstra+0x1b4>)
 8014e0c:	4613      	mov	r3, r2
 8014e0e:	011b      	lsls	r3, r3, #4
 8014e10:	1a9b      	subs	r3, r3, r2
 8014e12:	683a      	ldr	r2, [r7, #0]
 8014e14:	4413      	add	r3, r2
 8014e16:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014e1a:	4619      	mov	r1, r3
 8014e1c:	4821      	ldr	r0, [pc, #132]	; (8014ea4 <maze_display_Dijkstra+0x1b8>)
 8014e1e:	f00b fda7 	bl	8020970 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014e22:	683b      	ldr	r3, [r7, #0]
 8014e24:	3301      	adds	r3, #1
 8014e26:	603b      	str	r3, [r7, #0]
 8014e28:	683b      	ldr	r3, [r7, #0]
 8014e2a:	2b0e      	cmp	r3, #14
 8014e2c:	ddeb      	ble.n	8014e06 <maze_display_Dijkstra+0x11a>

		}
		printf("   |\n");
 8014e2e:	481e      	ldr	r0, [pc, #120]	; (8014ea8 <maze_display_Dijkstra+0x1bc>)
 8014e30:	f00b fe3a 	bl	8020aa8 <puts>
		if (tt <= -1) {
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	db21      	blt.n	8014e7e <maze_display_Dijkstra+0x192>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	603b      	str	r3, [r7, #0]
 8014e3e:	e010      	b.n	8014e62 <maze_display_Dijkstra+0x176>
				printf("+%5d",Dijkstra.column_count[ss][tt]);
 8014e40:	4917      	ldr	r1, [pc, #92]	; (8014ea0 <maze_display_Dijkstra+0x1b4>)
 8014e42:	683a      	ldr	r2, [r7, #0]
 8014e44:	4613      	mov	r3, r2
 8014e46:	011b      	lsls	r3, r3, #4
 8014e48:	1a9b      	subs	r3, r3, r2
 8014e4a:	687a      	ldr	r2, [r7, #4]
 8014e4c:	4413      	add	r3, r2
 8014e4e:	33f0      	adds	r3, #240	; 0xf0
 8014e50:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014e54:	4619      	mov	r1, r3
 8014e56:	4816      	ldr	r0, [pc, #88]	; (8014eb0 <maze_display_Dijkstra+0x1c4>)
 8014e58:	f00b fd8a 	bl	8020970 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8014e5c:	683b      	ldr	r3, [r7, #0]
 8014e5e:	3301      	adds	r3, #1
 8014e60:	603b      	str	r3, [r7, #0]
 8014e62:	683b      	ldr	r3, [r7, #0]
 8014e64:	2b0f      	cmp	r3, #15
 8014e66:	ddeb      	ble.n	8014e40 <maze_display_Dijkstra+0x154>
		}

		printf("+\n");
 8014e68:	4812      	ldr	r0, [pc, #72]	; (8014eb4 <maze_display_Dijkstra+0x1c8>)
 8014e6a:	f00b fe1d 	bl	8020aa8 <puts>
	for (tt = 14;tt >= -1;tt--){
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	3b01      	subs	r3, #1
 8014e72:	607b      	str	r3, [r7, #4]
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e7a:	dabe      	bge.n	8014dfa <maze_display_Dijkstra+0x10e>
 8014e7c:	e000      	b.n	8014e80 <maze_display_Dijkstra+0x194>
			break;
 8014e7e:	bf00      	nop

	}

	printf(
 8014e80:	480d      	ldr	r0, [pc, #52]	; (8014eb8 <maze_display_Dijkstra+0x1cc>)
 8014e82:	f00b fe11 	bl	8020aa8 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");




}
 8014e86:	bf00      	nop
 8014e88:	3708      	adds	r7, #8
 8014e8a:	46bd      	mov	sp, r7
 8014e8c:	bd80      	pop	{r7, pc}
 8014e8e:	bf00      	nop
 8014e90:	08024410 	.word	0x08024410
 8014e94:	08024500 	.word	0x08024500
 8014e98:	20000c40 	.word	0x20000c40
 8014e9c:	08024508 	.word	0x08024508
 8014ea0:	20000f34 	.word	0x20000f34
 8014ea4:	08024510 	.word	0x08024510
 8014ea8:	08024518 	.word	0x08024518
 8014eac:	08024488 	.word	0x08024488
 8014eb0:	08024520 	.word	0x08024520
 8014eb4:	08024498 	.word	0x08024498
 8014eb8:	0802449c 	.word	0x0802449c

08014ebc <mode_decision>:





unsigned char mode_decision(unsigned char now_mode){
 8014ebc:	b580      	push	{r7, lr}
 8014ebe:	b084      	sub	sp, #16
 8014ec0:	af00      	add	r7, sp, #0
 8014ec2:	4603      	mov	r3, r0
 8014ec4:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 8014eca:	2300      	movs	r3, #0
 8014ecc:	73bb      	strb	r3, [r7, #14]
unsigned char main_mode=0;
 8014ece:	2300      	movs	r3, #0
 8014ed0:	737b      	strb	r3, [r7, #13]
float dis8 =10;
 8014ed2:	4b71      	ldr	r3, [pc, #452]	; (8015098 <mode_decision+0x1dc>)
 8014ed4:	60bb      	str	r3, [r7, #8]
main_modeR=now_mode & 0x0F;
 8014ed6:	79fb      	ldrb	r3, [r7, #7]
 8014ed8:	f003 030f 	and.w	r3, r3, #15
 8014edc:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 8014ede:	79fb      	ldrb	r3, [r7, #7]
 8014ee0:	091b      	lsrs	r3, r3, #4
 8014ee2:	73bb      	strb	r3, [r7, #14]

	pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8014ee4:	7bbb      	ldrb	r3, [r7, #14]
 8014ee6:	011b      	lsls	r3, r3, #4
 8014ee8:	b2da      	uxtb	r2, r3
 8014eea:	7bfb      	ldrb	r3, [r7, #15]
 8014eec:	4413      	add	r3, r2
 8014eee:	b2db      	uxtb	r3, r3
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	f7f2 f9d1 	bl	8007298 <pl_yellow_LED_count>
			//pl_play_oneSound(main_modeR);
			//モード選択*************************************************************************
			while (angle_speedx <= 400) {
 8014ef6:	e07f      	b.n	8014ff8 <mode_decision+0x13c>
				HAL_Delay(1);
 8014ef8:	2001      	movs	r0, #1
 8014efa:	f003 fde7 	bl	8018acc <HAL_Delay>
				if (E_distanceR >= dis8) {
 8014efe:	4b67      	ldr	r3, [pc, #412]	; (801509c <mode_decision+0x1e0>)
 8014f00:	edd3 7a00 	vldr	s15, [r3]
 8014f04:	ed97 7a02 	vldr	s14, [r7, #8]
 8014f08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f10:	d813      	bhi.n	8014f3a <mode_decision+0x7e>
					if (main_modeR == 15) {
 8014f12:	7bfb      	ldrb	r3, [r7, #15]
 8014f14:	2b0f      	cmp	r3, #15
 8014f16:	d102      	bne.n	8014f1e <mode_decision+0x62>
						main_modeR = 0;
 8014f18:	2300      	movs	r3, #0
 8014f1a:	73fb      	strb	r3, [r7, #15]
 8014f1c:	e002      	b.n	8014f24 <mode_decision+0x68>
					} else {
						main_modeR++;
 8014f1e:	7bfb      	ldrb	r3, [r7, #15]
 8014f20:	3301      	adds	r3, #1
 8014f22:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8014f24:	f7ec f83a 	bl	8000f9c <reset_distance>

					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8014f28:	7bbb      	ldrb	r3, [r7, #14]
 8014f2a:	011b      	lsls	r3, r3, #4
 8014f2c:	b2da      	uxtb	r2, r3
 8014f2e:	7bfb      	ldrb	r3, [r7, #15]
 8014f30:	4413      	add	r3, r2
 8014f32:	b2db      	uxtb	r3, r3
 8014f34:	4618      	mov	r0, r3
 8014f36:	f7f2 f9af 	bl	8007298 <pl_yellow_LED_count>
				}
				if (E_distanceR <= -dis8) {
 8014f3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8014f3e:	eeb1 7a67 	vneg.f32	s14, s15
 8014f42:	4b56      	ldr	r3, [pc, #344]	; (801509c <mode_decision+0x1e0>)
 8014f44:	edd3 7a00 	vldr	s15, [r3]
 8014f48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f50:	db13      	blt.n	8014f7a <mode_decision+0xbe>
					if (main_modeR == 0) {
 8014f52:	7bfb      	ldrb	r3, [r7, #15]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d102      	bne.n	8014f5e <mode_decision+0xa2>
						main_modeR = 15;
 8014f58:	230f      	movs	r3, #15
 8014f5a:	73fb      	strb	r3, [r7, #15]
 8014f5c:	e002      	b.n	8014f64 <mode_decision+0xa8>
					} else {
						main_modeR = main_modeR - 1;
 8014f5e:	7bfb      	ldrb	r3, [r7, #15]
 8014f60:	3b01      	subs	r3, #1
 8014f62:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8014f64:	f7ec f81a 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8014f68:	7bbb      	ldrb	r3, [r7, #14]
 8014f6a:	011b      	lsls	r3, r3, #4
 8014f6c:	b2da      	uxtb	r2, r3
 8014f6e:	7bfb      	ldrb	r3, [r7, #15]
 8014f70:	4413      	add	r3, r2
 8014f72:	b2db      	uxtb	r3, r3
 8014f74:	4618      	mov	r0, r3
 8014f76:	f7f2 f98f 	bl	8007298 <pl_yellow_LED_count>
				}
				if (E_distanceL >= dis8) {
 8014f7a:	4b49      	ldr	r3, [pc, #292]	; (80150a0 <mode_decision+0x1e4>)
 8014f7c:	edd3 7a00 	vldr	s15, [r3]
 8014f80:	ed97 7a02 	vldr	s14, [r7, #8]
 8014f84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f8c:	d813      	bhi.n	8014fb6 <mode_decision+0xfa>
					if (main_modeL == 15) {
 8014f8e:	7bbb      	ldrb	r3, [r7, #14]
 8014f90:	2b0f      	cmp	r3, #15
 8014f92:	d102      	bne.n	8014f9a <mode_decision+0xde>
						main_modeL = 0;
 8014f94:	2300      	movs	r3, #0
 8014f96:	73bb      	strb	r3, [r7, #14]
 8014f98:	e002      	b.n	8014fa0 <mode_decision+0xe4>
					} else {
						main_modeL = main_modeL + 1;
 8014f9a:	7bbb      	ldrb	r3, [r7, #14]
 8014f9c:	3301      	adds	r3, #1
 8014f9e:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 8014fa0:	f7eb fffc 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8014fa4:	7bbb      	ldrb	r3, [r7, #14]
 8014fa6:	011b      	lsls	r3, r3, #4
 8014fa8:	b2da      	uxtb	r2, r3
 8014faa:	7bfb      	ldrb	r3, [r7, #15]
 8014fac:	4413      	add	r3, r2
 8014fae:	b2db      	uxtb	r3, r3
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	f7f2 f971 	bl	8007298 <pl_yellow_LED_count>
				}
				if (E_distanceL <= -dis8) {
 8014fb6:	edd7 7a02 	vldr	s15, [r7, #8]
 8014fba:	eeb1 7a67 	vneg.f32	s14, s15
 8014fbe:	4b38      	ldr	r3, [pc, #224]	; (80150a0 <mode_decision+0x1e4>)
 8014fc0:	edd3 7a00 	vldr	s15, [r3]
 8014fc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fcc:	da00      	bge.n	8014fd0 <mode_decision+0x114>
 8014fce:	e013      	b.n	8014ff8 <mode_decision+0x13c>
					if (main_modeL == 0) {
 8014fd0:	7bbb      	ldrb	r3, [r7, #14]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d102      	bne.n	8014fdc <mode_decision+0x120>
						main_modeL = 15;
 8014fd6:	230f      	movs	r3, #15
 8014fd8:	73bb      	strb	r3, [r7, #14]
 8014fda:	e002      	b.n	8014fe2 <mode_decision+0x126>
					} else {
						main_modeL = main_modeL - 1;
 8014fdc:	7bbb      	ldrb	r3, [r7, #14]
 8014fde:	3b01      	subs	r3, #1
 8014fe0:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 8014fe2:	f7eb ffdb 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8014fe6:	7bbb      	ldrb	r3, [r7, #14]
 8014fe8:	011b      	lsls	r3, r3, #4
 8014fea:	b2da      	uxtb	r2, r3
 8014fec:	7bfb      	ldrb	r3, [r7, #15]
 8014fee:	4413      	add	r3, r2
 8014ff0:	b2db      	uxtb	r3, r3
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	f7f2 f950 	bl	8007298 <pl_yellow_LED_count>
			while (angle_speedx <= 400) {
 8014ff8:	4b2a      	ldr	r3, [pc, #168]	; (80150a4 <mode_decision+0x1e8>)
 8014ffa:	edd3 7a00 	vldr	s15, [r3]
 8014ffe:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80150a8 <mode_decision+0x1ec>
 8015002:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801500a:	f67f af75 	bls.w	8014ef8 <mode_decision+0x3c>
				}
				//main_mode=main_modeL << 4 | main_modeR;
	//printf("main_mode=%x L=%x R=%x\n",main_mode,main_modeL,main_modeR);

			}
			pl_yellow_LED_off();
 801500e:	f7f2 f909 	bl	8007224 <pl_yellow_LED_off>
			pl_r_blue_LED(ON);
 8015012:	2001      	movs	r0, #1
 8015014:	f7f2 f9f0 	bl	80073f8 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015018:	2001      	movs	r0, #1
 801501a:	f7f2 f9ff 	bl	800741c <pl_l_blue_LED>
			HAL_Delay(1000);
 801501e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015022:	f003 fd53 	bl	8018acc <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 8015026:	e011      	b.n	801504c <mode_decision+0x190>

				if (angle_speedx >= 400) {
 8015028:	4b1e      	ldr	r3, [pc, #120]	; (80150a4 <mode_decision+0x1e8>)
 801502a:	edd3 7a00 	vldr	s15, [r3]
 801502e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80150a8 <mode_decision+0x1ec>
 8015032:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801503a:	db04      	blt.n	8015046 <mode_decision+0x18a>
					main_modeL = 0;
 801503c:	2300      	movs	r3, #0
 801503e:	73bb      	strb	r3, [r7, #14]
					main_modeR = 0;
 8015040:	2300      	movs	r3, #0
 8015042:	73fb      	strb	r3, [r7, #15]
					break;
 8015044:	e013      	b.n	801506e <mode_decision+0x1b2>
				}
				HAL_Delay(1);
 8015046:	2001      	movs	r0, #1
 8015048:	f003 fd40 	bl	8018acc <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 801504c:	4b17      	ldr	r3, [pc, #92]	; (80150ac <mode_decision+0x1f0>)
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015054:	dde8      	ble.n	8015028 <mode_decision+0x16c>
 8015056:	4b15      	ldr	r3, [pc, #84]	; (80150ac <mode_decision+0x1f0>)
 8015058:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801505c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015060:	dde2      	ble.n	8015028 <mode_decision+0x16c>
 8015062:	4b12      	ldr	r3, [pc, #72]	; (80150ac <mode_decision+0x1f0>)
 8015064:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015068:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801506c:	dddc      	ble.n	8015028 <mode_decision+0x16c>
			}
			pl_r_blue_LED(OFF);
 801506e:	2000      	movs	r0, #0
 8015070:	f7f2 f9c2 	bl	80073f8 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015074:	2000      	movs	r0, #0
 8015076:	f7f2 f9d1 	bl	800741c <pl_l_blue_LED>
			pl_yellow_LED_off();
 801507a:	f7f2 f8d3 	bl	8007224 <pl_yellow_LED_off>

			main_mode=main_modeL << 4 | main_modeR;
 801507e:	7bbb      	ldrb	r3, [r7, #14]
 8015080:	011b      	lsls	r3, r3, #4
 8015082:	b25a      	sxtb	r2, r3
 8015084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015088:	4313      	orrs	r3, r2
 801508a:	b25b      	sxtb	r3, r3
 801508c:	737b      	strb	r3, [r7, #13]

return main_mode;
 801508e:	7b7b      	ldrb	r3, [r7, #13]
}
 8015090:	4618      	mov	r0, r3
 8015092:	3710      	adds	r7, #16
 8015094:	46bd      	mov	sp, r7
 8015096:	bd80      	pop	{r7, pc}
 8015098:	41200000 	.word	0x41200000
 801509c:	20000224 	.word	0x20000224
 80150a0:	20000220 	.word	0x20000220
 80150a4:	20000274 	.word	0x20000274
 80150a8:	43c80000 	.word	0x43c80000
 80150ac:	200002bc 	.word	0x200002bc

080150b0 <mode_execution>:


void mode_execution(unsigned char now_mode){
 80150b0:	b590      	push	{r4, r7, lr}
 80150b2:	b0d7      	sub	sp, #348	; 0x15c
 80150b4:	af52      	add	r7, sp, #328	; 0x148
 80150b6:	4603      	mov	r3, r0
 80150b8:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 80150ba:	2300      	movs	r3, #0
 80150bc:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 80150be:	2300      	movs	r3, #0
 80150c0:	73bb      	strb	r3, [r7, #14]

main_modeR=now_mode & 0x0F;
 80150c2:	79fb      	ldrb	r3, [r7, #7]
 80150c4:	f003 030f 	and.w	r3, r3, #15
 80150c8:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 80150ca:	79fb      	ldrb	r3, [r7, #7]
 80150cc:	091b      	lsrs	r3, r3, #4
 80150ce:	73bb      	strb	r3, [r7, #14]


switch (main_modeL) {
 80150d0:	7bbb      	ldrb	r3, [r7, #14]
 80150d2:	2b0f      	cmp	r3, #15
 80150d4:	f200 809e 	bhi.w	8015214 <mode_execution+0x164>
 80150d8:	a201      	add	r2, pc, #4	; (adr r2, 80150e0 <mode_execution+0x30>)
 80150da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150de:	bf00      	nop
 80150e0:	08015121 	.word	0x08015121
 80150e4:	0801512b 	.word	0x0801512b
 80150e8:	08015213 	.word	0x08015213
 80150ec:	08015135 	.word	0x08015135
 80150f0:	0801513f 	.word	0x0801513f
 80150f4:	08015149 	.word	0x08015149
 80150f8:	08015179 	.word	0x08015179
 80150fc:	08015183 	.word	0x08015183
 8015100:	080151b3 	.word	0x080151b3
 8015104:	080151e3 	.word	0x080151e3
 8015108:	08015213 	.word	0x08015213
 801510c:	08015213 	.word	0x08015213
 8015110:	08015213 	.word	0x08015213
 8015114:	08015213 	.word	0x08015213
 8015118:	08015213 	.word	0x08015213
 801511c:	08015213 	.word	0x08015213
	case 0b0000://PLテストモード1
		mode_PLtest(main_modeR);
 8015120:	7bfb      	ldrb	r3, [r7, #15]
 8015122:	4618      	mov	r0, r3
 8015124:	f000 f886 	bl	8015234 <mode_PLtest>
	break;
 8015128:	e074      	b.n	8015214 <mode_execution+0x164>
	case 0b0001://実行モード1
		mode_Running(main_modeR);
 801512a:	7bfb      	ldrb	r3, [r7, #15]
 801512c:	4618      	mov	r0, r3
 801512e:	f000 fa41 	bl	80155b4 <mode_Running>
	break;
 8015132:	e06f      	b.n	8015214 <mode_execution+0x164>
	case 0b0010://実行モード2
	break;
	case 0b0011:
		mode_Tuning0(main_modeR);
 8015134:	7bfb      	ldrb	r3, [r7, #15]
 8015136:	4618      	mov	r0, r3
 8015138:	f000 fc6a 	bl	8015a10 <mode_Tuning0>
	break;
 801513c:	e06a      	b.n	8015214 <mode_execution+0x164>
	case 0b0100:
		mode_WallSensorTuning(main_modeR);
 801513e:	7bfb      	ldrb	r3, [r7, #15]
 8015140:	4618      	mov	r0, r3
 8015142:	f000 fffd 	bl	8016140 <mode_WallSensorTuning>
	break;
 8015146:	e065      	b.n	8015214 <mode_execution+0x164>
	case 0b0101://試験モード
		testturning(speed600_shortest_mollifier,main_modeR,1,OFF,0.51,1);
 8015148:	7bfb      	ldrb	r3, [r7, #15]
 801514a:	4c34      	ldr	r4, [pc, #208]	; (801521c <mode_execution+0x16c>)
 801514c:	2201      	movs	r2, #1
 801514e:	9251      	str	r2, [sp, #324]	; 0x144
 8015150:	2200      	movs	r2, #0
 8015152:	9250      	str	r2, [sp, #320]	; 0x140
 8015154:	2201      	movs	r2, #1
 8015156:	924f      	str	r2, [sp, #316]	; 0x13c
 8015158:	934e      	str	r3, [sp, #312]	; 0x138
 801515a:	4668      	mov	r0, sp
 801515c:	f104 0310 	add.w	r3, r4, #16
 8015160:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015164:	4619      	mov	r1, r3
 8015166:	f00a ff83 	bl	8020070 <memcpy>
 801516a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801516e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8015220 <mode_execution+0x170>
 8015172:	f7f8 fb75 	bl	800d860 <testturning>
	break;
 8015176:	e04d      	b.n	8015214 <mode_execution+0x164>
	case 0b0110:
		mode_WallSensorTuning_fast(main_modeR);
 8015178:	7bfb      	ldrb	r3, [r7, #15]
 801517a:	4618      	mov	r0, r3
 801517c:	f001 fa18 	bl	80165b0 <mode_WallSensorTuning_fast>
	break;
 8015180:	e048      	b.n	8015214 <mode_execution+0x164>
	case 0b0111:
		testturning(speed1000_shortest_mollifier,main_modeR,1,ON,0.99,1);
 8015182:	7bfb      	ldrb	r3, [r7, #15]
 8015184:	4c27      	ldr	r4, [pc, #156]	; (8015224 <mode_execution+0x174>)
 8015186:	2201      	movs	r2, #1
 8015188:	9251      	str	r2, [sp, #324]	; 0x144
 801518a:	2201      	movs	r2, #1
 801518c:	9250      	str	r2, [sp, #320]	; 0x140
 801518e:	2201      	movs	r2, #1
 8015190:	924f      	str	r2, [sp, #316]	; 0x13c
 8015192:	934e      	str	r3, [sp, #312]	; 0x138
 8015194:	4668      	mov	r0, sp
 8015196:	f104 0310 	add.w	r3, r4, #16
 801519a:	f44f 729c 	mov.w	r2, #312	; 0x138
 801519e:	4619      	mov	r1, r3
 80151a0:	f00a ff66 	bl	8020070 <memcpy>
 80151a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80151a8:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8015228 <mode_execution+0x178>
 80151ac:	f7f8 fb58 	bl	800d860 <testturning>
	break;
 80151b0:	e030      	b.n	8015214 <mode_execution+0x164>
	case 0b1000:
		testturning(speed1200_shortest_mollifier,main_modeR,1,ON,0.99,1);
 80151b2:	7bfb      	ldrb	r3, [r7, #15]
 80151b4:	4c1d      	ldr	r4, [pc, #116]	; (801522c <mode_execution+0x17c>)
 80151b6:	2201      	movs	r2, #1
 80151b8:	9251      	str	r2, [sp, #324]	; 0x144
 80151ba:	2201      	movs	r2, #1
 80151bc:	9250      	str	r2, [sp, #320]	; 0x140
 80151be:	2201      	movs	r2, #1
 80151c0:	924f      	str	r2, [sp, #316]	; 0x13c
 80151c2:	934e      	str	r3, [sp, #312]	; 0x138
 80151c4:	4668      	mov	r0, sp
 80151c6:	f104 0310 	add.w	r3, r4, #16
 80151ca:	f44f 729c 	mov.w	r2, #312	; 0x138
 80151ce:	4619      	mov	r1, r3
 80151d0:	f00a ff4e 	bl	8020070 <memcpy>
 80151d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80151d8:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8015228 <mode_execution+0x178>
 80151dc:	f7f8 fb40 	bl	800d860 <testturning>
	break;
 80151e0:	e018      	b.n	8015214 <mode_execution+0x164>
	case 0b1001:
		testturning(speed1600_shortest_mollifier,main_modeR,1,ON,0.99,1);
 80151e2:	7bfb      	ldrb	r3, [r7, #15]
 80151e4:	4c12      	ldr	r4, [pc, #72]	; (8015230 <mode_execution+0x180>)
 80151e6:	2201      	movs	r2, #1
 80151e8:	9251      	str	r2, [sp, #324]	; 0x144
 80151ea:	2201      	movs	r2, #1
 80151ec:	9250      	str	r2, [sp, #320]	; 0x140
 80151ee:	2201      	movs	r2, #1
 80151f0:	924f      	str	r2, [sp, #316]	; 0x13c
 80151f2:	934e      	str	r3, [sp, #312]	; 0x138
 80151f4:	4668      	mov	r0, sp
 80151f6:	f104 0310 	add.w	r3, r4, #16
 80151fa:	f44f 729c 	mov.w	r2, #312	; 0x138
 80151fe:	4619      	mov	r1, r3
 8015200:	f00a ff36 	bl	8020070 <memcpy>
 8015204:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015208:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8015228 <mode_execution+0x178>
 801520c:	f7f8 fb28 	bl	800d860 <testturning>
	break;
 8015210:	e000      	b.n	8015214 <mode_execution+0x164>
	break;
 8015212:	bf00      	nop
	case 0b1110:
	break;
	case 0b1111:
	break;
}
}
 8015214:	bf00      	nop
 8015216:	3714      	adds	r7, #20
 8015218:	46bd      	mov	sp, r7
 801521a:	bd90      	pop	{r4, r7, pc}
 801521c:	2000f35c 	.word	0x2000f35c
 8015220:	3f028f5c 	.word	0x3f028f5c
 8015224:	2000f4a4 	.word	0x2000f4a4
 8015228:	3f7d70a4 	.word	0x3f7d70a4
 801522c:	2000f5ec 	.word	0x2000f5ec
 8015230:	2000f734 	.word	0x2000f734

08015234 <mode_PLtest>:



void mode_PLtest(unsigned char main_modeR) {
 8015234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015238:	b092      	sub	sp, #72	; 0x48
 801523a:	af0a      	add	r7, sp, #40	; 0x28
 801523c:	4603      	mov	r3, r0
 801523e:	75fb      	strb	r3, [r7, #23]
	int duty_L=0, duty_R=0;
 8015240:	2300      	movs	r3, #0
 8015242:	61fb      	str	r3, [r7, #28]
 8015244:	2300      	movs	r3, #0
 8015246:	61bb      	str	r3, [r7, #24]
	switch (main_modeR) {
 8015248:	7dfb      	ldrb	r3, [r7, #23]
 801524a:	2b0f      	cmp	r3, #15
 801524c:	f200 819f 	bhi.w	801558e <mode_PLtest+0x35a>
 8015250:	a201      	add	r2, pc, #4	; (adr r2, 8015258 <mode_PLtest+0x24>)
 8015252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015256:	bf00      	nop
 8015258:	0801558d 	.word	0x0801558d
 801525c:	08015299 	.word	0x08015299
 8015260:	080152cb 	.word	0x080152cb
 8015264:	08015347 	.word	0x08015347
 8015268:	080153ab 	.word	0x080153ab
 801526c:	0801542b 	.word	0x0801542b
 8015270:	08015431 	.word	0x08015431
 8015274:	0801558f 	.word	0x0801558f
 8015278:	0801558f 	.word	0x0801558f
 801527c:	080154b7 	.word	0x080154b7
 8015280:	0801551f 	.word	0x0801551f
 8015284:	0801558f 	.word	0x0801558f
 8015288:	0801558f 	.word	0x0801558f
 801528c:	0801558f 	.word	0x0801558f
 8015290:	0801558f 	.word	0x0801558f
 8015294:	08015587 	.word	0x08015587
	case 0b0000:
		//飛ばすerror
		break;
	case 0b0001:	//sensor
		while (1) {
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 8015298:	4bbf      	ldr	r3, [pc, #764]	; (8015598 <mode_PLtest+0x364>)
 801529a:	6819      	ldr	r1, [r3, #0]
 801529c:	4bbe      	ldr	r3, [pc, #760]	; (8015598 <mode_PLtest+0x364>)
 801529e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80152a0:	4bbd      	ldr	r3, [pc, #756]	; (8015598 <mode_PLtest+0x364>)
 80152a2:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 80152a6:	4bbc      	ldr	r3, [pc, #752]	; (8015598 <mode_PLtest+0x364>)
 80152a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80152ac:	4aba      	ldr	r2, [pc, #744]	; (8015598 <mode_PLtest+0x364>)
 80152ae:	f8d2 2140 	ldr.w	r2, [r2, #320]	; 0x140
 80152b2:	9201      	str	r2, [sp, #4]
 80152b4:	9300      	str	r3, [sp, #0]
 80152b6:	4623      	mov	r3, r4
 80152b8:	4602      	mov	r2, r0
 80152ba:	48b8      	ldr	r0, [pc, #736]	; (801559c <mode_PLtest+0x368>)
 80152bc:	f00b fb58 	bl	8020970 <iprintf>
					g_sensor[1][0], g_sensor[2][0], g_sensor[3][0],
					g_sensor[4][0]);
			wait_ms(500);
 80152c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80152c4:	f7f3 f828 	bl	8008318 <wait_ms>
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 80152c8:	e7e6      	b.n	8015298 <mode_PLtest+0x64>
		}
		break;
	case 0b0010:	//encoder
		pl_r_blue_LED(ON);
 80152ca:	2001      	movs	r0, #1
 80152cc:	f7f2 f894 	bl	80073f8 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 80152d0:	2001      	movs	r0, #1
 80152d2:	f7f2 f8a3 	bl	800741c <pl_l_blue_LED>
		record_mode = 1;
 80152d6:	4bb2      	ldr	r3, [pc, #712]	; (80155a0 <mode_PLtest+0x36c>)
 80152d8:	2201      	movs	r2, #1
 80152da:	701a      	strb	r2, [r3, #0]
		pl_DriveMotor_duty(900, 900);
 80152dc:	f44f 7161 	mov.w	r1, #900	; 0x384
 80152e0:	f44f 7061 	mov.w	r0, #900	; 0x384
 80152e4:	f7f2 fda0 	bl	8007e28 <pl_DriveMotor_duty>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 80152e8:	2001      	movs	r0, #1
 80152ea:	f7f2 fd5b 	bl	8007da4 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 80152ee:	2001      	movs	r0, #1
 80152f0:	f7f2 fd30 	bl	8007d54 <pl_L_DriveMotor_mode>
		pl_DriveMotor_start();
 80152f4:	f7f2 fd7c 	bl	8007df0 <pl_DriveMotor_start>
		wait_ms(2500);
 80152f8:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80152fc:	f7f3 f80c 	bl	8008318 <wait_ms>
		pl_DriveMotor_stop();
 8015300:	f7f2 fd84 	bl	8007e0c <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 8015304:	2000      	movs	r0, #0
 8015306:	f7f2 f877 	bl	80073f8 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 801530a:	2000      	movs	r0, #0
 801530c:	f7f2 f886 	bl	800741c <pl_l_blue_LED>
		record_mode = 0;
 8015310:	4ba3      	ldr	r3, [pc, #652]	; (80155a0 <mode_PLtest+0x36c>)
 8015312:	2200      	movs	r2, #0
 8015314:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8015316:	e002      	b.n	801531e <mode_PLtest+0xea>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 8015318:	2001      	movs	r0, #1
 801531a:	f7f2 fffd 	bl	8008318 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 801531e:	4b9e      	ldr	r3, [pc, #632]	; (8015598 <mode_PLtest+0x364>)
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015326:	ddf7      	ble.n	8015318 <mode_PLtest+0xe4>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 8015328:	4b9b      	ldr	r3, [pc, #620]	; (8015598 <mode_PLtest+0x364>)
 801532a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801532e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015332:	ddf1      	ble.n	8015318 <mode_PLtest+0xe4>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015334:	4b98      	ldr	r3, [pc, #608]	; (8015598 <mode_PLtest+0x364>)
 8015336:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 801533a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801533e:	ddeb      	ble.n	8015318 <mode_PLtest+0xe4>
		}
		record_print();
 8015340:	f001 fc26 	bl	8016b90 <record_print>
		break;
 8015344:	e123      	b.n	801558e <mode_PLtest+0x35a>
	case 0b0011:	//gyro
		reset_gyro();
 8015346:	f7ec fc2f 	bl	8001ba8 <reset_gyro>
		reset_speed();
 801534a:	f7eb fe6b 	bl	8001024 <reset_speed>
		pl_r_blue_LED(ON);
 801534e:	2001      	movs	r0, #1
 8015350:	f7f2 f852 	bl	80073f8 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8015354:	2001      	movs	r0, #1
 8015356:	f7f2 f861 	bl	800741c <pl_l_blue_LED>
		record_mode = 2;
 801535a:	4b91      	ldr	r3, [pc, #580]	; (80155a0 <mode_PLtest+0x36c>)
 801535c:	2202      	movs	r2, #2
 801535e:	701a      	strb	r2, [r3, #0]
		wait_ms(2500);
 8015360:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8015364:	f7f2 ffd8 	bl	8008318 <wait_ms>
		pl_r_blue_LED(OFF);
 8015368:	2000      	movs	r0, #0
 801536a:	f7f2 f845 	bl	80073f8 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 801536e:	2000      	movs	r0, #0
 8015370:	f7f2 f854 	bl	800741c <pl_l_blue_LED>
		record_mode = 0;
 8015374:	4b8a      	ldr	r3, [pc, #552]	; (80155a0 <mode_PLtest+0x36c>)
 8015376:	2200      	movs	r2, #0
 8015378:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 801537a:	e002      	b.n	8015382 <mode_PLtest+0x14e>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 801537c:	2001      	movs	r0, #1
 801537e:	f7f2 ffcb 	bl	8008318 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8015382:	4b85      	ldr	r3, [pc, #532]	; (8015598 <mode_PLtest+0x364>)
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801538a:	ddf7      	ble.n	801537c <mode_PLtest+0x148>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 801538c:	4b82      	ldr	r3, [pc, #520]	; (8015598 <mode_PLtest+0x364>)
 801538e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015392:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015396:	ddf1      	ble.n	801537c <mode_PLtest+0x148>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015398:	4b7f      	ldr	r3, [pc, #508]	; (8015598 <mode_PLtest+0x364>)
 801539a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 801539e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80153a2:	ddeb      	ble.n	801537c <mode_PLtest+0x148>
		}
		record_print();
 80153a4:	f001 fbf4 	bl	8016b90 <record_print>
		break;
 80153a8:	e0f1      	b.n	801558e <mode_PLtest+0x35a>
	case 0b0100://speaker
		while (1) {
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 80153aa:	4b7e      	ldr	r3, [pc, #504]	; (80155a4 <mode_PLtest+0x370>)
 80153ac:	681b      	ldr	r3, [r3, #0]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80153ae:	4618      	mov	r0, r3
 80153b0:	f7eb f8f2 	bl	8000598 <__aeabi_f2d>
 80153b4:	e9c7 0102 	strd	r0, r1, [r7, #8]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 80153b8:	4b7a      	ldr	r3, [pc, #488]	; (80155a4 <mode_PLtest+0x370>)
 80153ba:	685b      	ldr	r3, [r3, #4]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80153bc:	4618      	mov	r0, r3
 80153be:	f7eb f8eb 	bl	8000598 <__aeabi_f2d>
 80153c2:	4604      	mov	r4, r0
 80153c4:	460d      	mov	r5, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 80153c6:	4b77      	ldr	r3, [pc, #476]	; (80155a4 <mode_PLtest+0x370>)
 80153c8:	689b      	ldr	r3, [r3, #8]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80153ca:	4618      	mov	r0, r3
 80153cc:	f7eb f8e4 	bl	8000598 <__aeabi_f2d>
 80153d0:	4680      	mov	r8, r0
 80153d2:	4689      	mov	r9, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 80153d4:	4b73      	ldr	r3, [pc, #460]	; (80155a4 <mode_PLtest+0x370>)
 80153d6:	68db      	ldr	r3, [r3, #12]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80153d8:	4618      	mov	r0, r3
 80153da:	f7eb f8dd 	bl	8000598 <__aeabi_f2d>
 80153de:	4682      	mov	sl, r0
 80153e0:	468b      	mov	fp, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 80153e2:	4b70      	ldr	r3, [pc, #448]	; (80155a4 <mode_PLtest+0x370>)
 80153e4:	691b      	ldr	r3, [r3, #16]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80153e6:	4618      	mov	r0, r3
 80153e8:	f7eb f8d6 	bl	8000598 <__aeabi_f2d>
 80153ec:	e9c7 0100 	strd	r0, r1, [r7]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 80153f0:	4b6c      	ldr	r3, [pc, #432]	; (80155a4 <mode_PLtest+0x370>)
 80153f2:	695b      	ldr	r3, [r3, #20]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80153f4:	4618      	mov	r0, r3
 80153f6:	f7eb f8cf 	bl	8000598 <__aeabi_f2d>
 80153fa:	4602      	mov	r2, r0
 80153fc:	460b      	mov	r3, r1
 80153fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015402:	ed97 7b00 	vldr	d7, [r7]
 8015406:	ed8d 7b06 	vstr	d7, [sp, #24]
 801540a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 801540e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8015412:	e9cd 4500 	strd	r4, r5, [sp]
 8015416:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801541a:	4863      	ldr	r0, [pc, #396]	; (80155a8 <mode_PLtest+0x374>)
 801541c:	f00b faa8 	bl	8020970 <iprintf>
			wait_ms(500);
 8015420:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015424:	f7f2 ff78 	bl	8008318 <wait_ms>
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015428:	e7bf      	b.n	80153aa <mode_PLtest+0x176>
		}
	break;
	case 0b0101:
		test_flash();
 801542a:	f7f2 f935 	bl	8007698 <test_flash>
		break;
 801542e:	e0ae      	b.n	801558e <mode_PLtest+0x35a>
	case 0b0110:
		record_mode=6;
 8015430:	4b5b      	ldr	r3, [pc, #364]	; (80155a0 <mode_PLtest+0x36c>)
 8015432:	2206      	movs	r2, #6
 8015434:	701a      	strb	r2, [r3, #0]
		pl_r_blue_LED(ON);
 8015436:	2001      	movs	r0, #1
 8015438:	f7f1 ffde 	bl	80073f8 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 801543c:	2001      	movs	r0, #1
 801543e:	f7f1 ffed 	bl	800741c <pl_l_blue_LED>
		get_duty(1.0, -1.0,&duty_L,&duty_R);
 8015442:	f107 0218 	add.w	r2, r7, #24
 8015446:	f107 031c 	add.w	r3, r7, #28
 801544a:	4611      	mov	r1, r2
 801544c:	4618      	mov	r0, r3
 801544e:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8015452:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015456:	f7ec ff0d 	bl	8002274 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 801545a:	69fb      	ldr	r3, [r7, #28]
 801545c:	69ba      	ldr	r2, [r7, #24]
 801545e:	4611      	mov	r1, r2
 8015460:	4618      	mov	r0, r3
 8015462:	f7f2 fce1 	bl	8007e28 <pl_DriveMotor_duty>
		pl_DriveMotor_start();
 8015466:	f7f2 fcc3 	bl	8007df0 <pl_DriveMotor_start>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801546a:	e00a      	b.n	8015482 <mode_PLtest+0x24e>
			wait_ms(1);
 801546c:	2001      	movs	r0, #1
 801546e:	f7f2 ff53 	bl	8008318 <wait_ms>
			if(record_rupe_flag==1){
 8015472:	4b4e      	ldr	r3, [pc, #312]	; (80155ac <mode_PLtest+0x378>)
 8015474:	781b      	ldrb	r3, [r3, #0]
 8015476:	2b01      	cmp	r3, #1
 8015478:	d103      	bne.n	8015482 <mode_PLtest+0x24e>
				record_mode=0;
 801547a:	4b49      	ldr	r3, [pc, #292]	; (80155a0 <mode_PLtest+0x36c>)
 801547c:	2200      	movs	r2, #0
 801547e:	701a      	strb	r2, [r3, #0]
				break;
 8015480:	e010      	b.n	80154a4 <mode_PLtest+0x270>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015482:	4b45      	ldr	r3, [pc, #276]	; (8015598 <mode_PLtest+0x364>)
 8015484:	681b      	ldr	r3, [r3, #0]
 8015486:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801548a:	ddef      	ble.n	801546c <mode_PLtest+0x238>
 801548c:	4b42      	ldr	r3, [pc, #264]	; (8015598 <mode_PLtest+0x364>)
 801548e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015492:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015496:	dde9      	ble.n	801546c <mode_PLtest+0x238>
 8015498:	4b3f      	ldr	r3, [pc, #252]	; (8015598 <mode_PLtest+0x364>)
 801549a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 801549e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80154a2:	dde3      	ble.n	801546c <mode_PLtest+0x238>
			}
		}
		pl_DriveMotor_stop();
 80154a4:	f7f2 fcb2 	bl	8007e0c <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 80154a8:	2000      	movs	r0, #0
 80154aa:	f7f1 ffa5 	bl	80073f8 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 80154ae:	2000      	movs	r0, #0
 80154b0:	f7f1 ffb4 	bl	800741c <pl_l_blue_LED>

		break;
 80154b4:	e06b      	b.n	801558e <mode_PLtest+0x35a>
	case 0b1001://fun
			pl_FunMotor_duty(0.5);
 80154b6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80154ba:	f7f2 fcdf 	bl	8007e7c <pl_FunMotor_duty>
			pl_FunMotor_start();
 80154be:	f7f2 fcc9 	bl	8007e54 <pl_FunMotor_start>
			HAL_Delay(2000);
 80154c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80154c6:	f003 fb01 	bl	8018acc <HAL_Delay>
			reset_gyro();
 80154ca:	f7ec fb6d 	bl	8001ba8 <reset_gyro>
			reset_speed();
 80154ce:	f7eb fda9 	bl	8001024 <reset_speed>
			clear_Ierror();
 80154d2:	f7ef faa1 	bl	8004a18 <clear_Ierror>
			pl_r_blue_LED(ON);
 80154d6:	2001      	movs	r0, #1
 80154d8:	f7f1 ff8e 	bl	80073f8 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 80154dc:	2001      	movs	r0, #1
 80154de:	f7f1 ff9d 	bl	800741c <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80154e2:	e002      	b.n	80154ea <mode_PLtest+0x2b6>
				HAL_Delay(1);
 80154e4:	2001      	movs	r0, #1
 80154e6:	f003 faf1 	bl	8018acc <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80154ea:	4b2b      	ldr	r3, [pc, #172]	; (8015598 <mode_PLtest+0x364>)
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80154f2:	ddf7      	ble.n	80154e4 <mode_PLtest+0x2b0>
 80154f4:	4b28      	ldr	r3, [pc, #160]	; (8015598 <mode_PLtest+0x364>)
 80154f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80154fa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80154fe:	ddf1      	ble.n	80154e4 <mode_PLtest+0x2b0>
 8015500:	4b25      	ldr	r3, [pc, #148]	; (8015598 <mode_PLtest+0x364>)
 8015502:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015506:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801550a:	ddeb      	ble.n	80154e4 <mode_PLtest+0x2b0>
			}
			pl_r_blue_LED(OFF);
 801550c:	2000      	movs	r0, #0
 801550e:	f7f1 ff73 	bl	80073f8 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015512:	2000      	movs	r0, #0
 8015514:	f7f1 ff82 	bl	800741c <pl_l_blue_LED>
			pl_FunMotor_stop();
 8015518:	f7f2 fca6 	bl	8007e68 <pl_FunMotor_stop>
		break;
 801551c:	e037      	b.n	801558e <mode_PLtest+0x35a>
	case 0b1010://fun
			pl_FunMotor_duty(0.99);
 801551e:	ed9f 0a24 	vldr	s0, [pc, #144]	; 80155b0 <mode_PLtest+0x37c>
 8015522:	f7f2 fcab 	bl	8007e7c <pl_FunMotor_duty>
			pl_FunMotor_start();
 8015526:	f7f2 fc95 	bl	8007e54 <pl_FunMotor_start>
			HAL_Delay(2000);
 801552a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801552e:	f003 facd 	bl	8018acc <HAL_Delay>
			reset_gyro();
 8015532:	f7ec fb39 	bl	8001ba8 <reset_gyro>
			reset_speed();
 8015536:	f7eb fd75 	bl	8001024 <reset_speed>
			clear_Ierror();
 801553a:	f7ef fa6d 	bl	8004a18 <clear_Ierror>
			pl_r_blue_LED(ON);
 801553e:	2001      	movs	r0, #1
 8015540:	f7f1 ff5a 	bl	80073f8 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015544:	2001      	movs	r0, #1
 8015546:	f7f1 ff69 	bl	800741c <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801554a:	e002      	b.n	8015552 <mode_PLtest+0x31e>
				HAL_Delay(1);
 801554c:	2001      	movs	r0, #1
 801554e:	f003 fabd 	bl	8018acc <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015552:	4b11      	ldr	r3, [pc, #68]	; (8015598 <mode_PLtest+0x364>)
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801555a:	ddf7      	ble.n	801554c <mode_PLtest+0x318>
 801555c:	4b0e      	ldr	r3, [pc, #56]	; (8015598 <mode_PLtest+0x364>)
 801555e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015562:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015566:	ddf1      	ble.n	801554c <mode_PLtest+0x318>
 8015568:	4b0b      	ldr	r3, [pc, #44]	; (8015598 <mode_PLtest+0x364>)
 801556a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 801556e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015572:	ddeb      	ble.n	801554c <mode_PLtest+0x318>
			}
			pl_r_blue_LED(OFF);
 8015574:	2000      	movs	r0, #0
 8015576:	f7f1 ff3f 	bl	80073f8 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 801557a:	2000      	movs	r0, #0
 801557c:	f7f1 ff4e 	bl	800741c <pl_l_blue_LED>
			pl_FunMotor_stop();
 8015580:	f7f2 fc72 	bl	8007e68 <pl_FunMotor_stop>
		break;
 8015584:	e003      	b.n	801558e <mode_PLtest+0x35a>
	case 0b1111:	//record_out
		record_print();
 8015586:	f001 fb03 	bl	8016b90 <record_print>
		break;
 801558a:	e000      	b.n	801558e <mode_PLtest+0x35a>
		break;
 801558c:	bf00      	nop
//			record_print();
//		break;
	}
//

}
 801558e:	bf00      	nop
 8015590:	3720      	adds	r7, #32
 8015592:	46bd      	mov	sp, r7
 8015594:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015598:	200002bc 	.word	0x200002bc
 801559c:	08024528 	.word	0x08024528
 80155a0:	2000edc4 	.word	0x2000edc4
 80155a4:	200006e8 	.word	0x200006e8
 80155a8:	08024554 	.word	0x08024554
 80155ac:	2000edd0 	.word	0x2000edd0
 80155b0:	3f7d70a4 	.word	0x3f7d70a4

080155b4 <mode_Running>:


void mode_Running(unsigned char main_modeR){
 80155b4:	b5b0      	push	{r4, r5, r7, lr}
 80155b6:	b0da      	sub	sp, #360	; 0x168
 80155b8:	af54      	add	r7, sp, #336	; 0x150
 80155ba:	4603      	mov	r3, r0
 80155bc:	71fb      	strb	r3, [r7, #7]
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80155be:	2003      	movs	r0, #3
 80155c0:	f7f2 fbc8 	bl	8007d54 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80155c4:	2003      	movs	r0, #3
 80155c6:	f7f2 fbed 	bl	8007da4 <pl_R_DriveMotor_mode>
	reset_gyro();
 80155ca:	f7ec faed 	bl	8001ba8 <reset_gyro>
	reset_speed();
 80155ce:	f7eb fd29 	bl	8001024 <reset_speed>
	reset_distance();
 80155d2:	f7eb fce3 	bl	8000f9c <reset_distance>
	clear_Ierror();
 80155d6:	f7ef fa1f 	bl	8004a18 <clear_Ierror>
	switch (main_modeR) {
 80155da:	79fb      	ldrb	r3, [r7, #7]
 80155dc:	2b0f      	cmp	r3, #15
 80155de:	f200 81e3 	bhi.w	80159a8 <mode_Running+0x3f4>
 80155e2:	a201      	add	r2, pc, #4	; (adr r2, 80155e8 <mode_Running+0x34>)
 80155e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155e8:	08015629 	.word	0x08015629
 80155ec:	080156d9 	.word	0x080156d9
 80155f0:	08015711 	.word	0x08015711
 80155f4:	08015717 	.word	0x08015717
 80155f8:	0801574f 	.word	0x0801574f
 80155fc:	08015781 	.word	0x08015781
 8015600:	080157b3 	.word	0x080157b3
 8015604:	080157e5 	.word	0x080157e5
 8015608:	08015817 	.word	0x08015817
 801560c:	08015849 	.word	0x08015849
 8015610:	0801587b 	.word	0x0801587b
 8015614:	080158ad 	.word	0x080158ad
 8015618:	080158df 	.word	0x080158df
 801561c:	08015911 	.word	0x08015911
 8015620:	08015943 	.word	0x08015943
 8015624:	08015975 	.word	0x08015975
		case 0b0000://迷路表示
			//maze_maker2(1, 0, 0, 0, 7, 7);
			//record_out();
			//wall.row[8]=(1<<8);
			create_StepCountMap_queue();
 8015628:	f7fe fc1c 	bl	8013e64 <create_StepCountMap_queue>
			maze_display();
 801562c:	f7ff fa40 	bl	8014ab0 <maze_display>

			create_DijkstraMap();
 8015630:	f7fb fede 	bl	80113f0 <create_DijkstraMap>
			maze_display_Dijkstra();
 8015634:	f7ff fb5a 	bl	8014cec <maze_display_Dijkstra>

			route_Dijkstra();
 8015638:	f7fd fc24 	bl	8012e84 <route_Dijkstra>
			create_StepCountMap_unknown();
 801563c:	f7fe f8dc 	bl	80137f8 <create_StepCountMap_unknown>
			maze_display();
 8015640:	f7ff fa36 	bl	8014ab0 <maze_display>

			tic_timer();
 8015644:	f7f2 fe3a 	bl	80082bc <tic_timer>
			for(int j=0;j<5000;j++){
 8015648:	2300      	movs	r3, #0
 801564a:	617b      	str	r3, [r7, #20]
 801564c:	e004      	b.n	8015658 <mode_Running+0xa4>
			create_StepCountMap_queue();
 801564e:	f7fe fc09 	bl	8013e64 <create_StepCountMap_queue>
			for(int j=0;j<5000;j++){
 8015652:	697b      	ldr	r3, [r7, #20]
 8015654:	3301      	adds	r3, #1
 8015656:	617b      	str	r3, [r7, #20]
 8015658:	697b      	ldr	r3, [r7, #20]
 801565a:	f241 3287 	movw	r2, #4999	; 0x1387
 801565e:	4293      	cmp	r3, r2
 8015660:	ddf5      	ble.n	801564e <mode_Running+0x9a>
			}
			float tim2 = toc_timer();
 8015662:	f7f2 fe3d 	bl	80082e0 <toc_timer>
 8015666:	ed87 0a03 	vstr	s0, [r7, #12]
			maze_display();
 801566a:	f7ff fa21 	bl	8014ab0 <maze_display>
			printf("tim2=%f\n", tim2);
 801566e:	68f8      	ldr	r0, [r7, #12]
 8015670:	f7ea ff92 	bl	8000598 <__aeabi_f2d>
 8015674:	4602      	mov	r2, r0
 8015676:	460b      	mov	r3, r1
 8015678:	48cd      	ldr	r0, [pc, #820]	; (80159b0 <mode_Running+0x3fc>)
 801567a:	f00b f979 	bl	8020970 <iprintf>
			tic_timer();
 801567e:	f7f2 fe1d 	bl	80082bc <tic_timer>
			create_DijkstraMap();
 8015682:	f7fb feb5 	bl	80113f0 <create_DijkstraMap>
			for(int j=0;j<5000;j++){
 8015686:	2300      	movs	r3, #0
 8015688:	613b      	str	r3, [r7, #16]
 801568a:	e006      	b.n	801569a <mode_Running+0xe6>
			//create_StepCountMap();
			//maze_clear();
			//create_DijkstraMap();
			route_Dijkstra();
 801568c:	f7fd fbfa 	bl	8012e84 <route_Dijkstra>
			create_StepCountMap_unknown();
 8015690:	f7fe f8b2 	bl	80137f8 <create_StepCountMap_unknown>
			for(int j=0;j<5000;j++){
 8015694:	693b      	ldr	r3, [r7, #16]
 8015696:	3301      	adds	r3, #1
 8015698:	613b      	str	r3, [r7, #16]
 801569a:	693b      	ldr	r3, [r7, #16]
 801569c:	f241 3287 	movw	r2, #4999	; 0x1387
 80156a0:	4293      	cmp	r3, r2
 80156a2:	ddf3      	ble.n	801568c <mode_Running+0xd8>

			}
			float tim1 = toc_timer();
 80156a4:	f7f2 fe1c 	bl	80082e0 <toc_timer>
 80156a8:	ed87 0a02 	vstr	s0, [r7, #8]
			maze_display();
 80156ac:	f7ff fa00 	bl	8014ab0 <maze_display>
			maze_display_Dijkstra();
 80156b0:	f7ff fb1c 	bl	8014cec <maze_display_Dijkstra>
			printf("tim1=%f,tim2=%f\n", tim1, tim2);
 80156b4:	68b8      	ldr	r0, [r7, #8]
 80156b6:	f7ea ff6f 	bl	8000598 <__aeabi_f2d>
 80156ba:	4604      	mov	r4, r0
 80156bc:	460d      	mov	r5, r1
 80156be:	68f8      	ldr	r0, [r7, #12]
 80156c0:	f7ea ff6a 	bl	8000598 <__aeabi_f2d>
 80156c4:	4602      	mov	r2, r0
 80156c6:	460b      	mov	r3, r1
 80156c8:	e9cd 2300 	strd	r2, r3, [sp]
 80156cc:	4622      	mov	r2, r4
 80156ce:	462b      	mov	r3, r5
 80156d0:	48b8      	ldr	r0, [pc, #736]	; (80159b4 <mode_Running+0x400>)
 80156d2:	f00b f94d 	bl	8020970 <iprintf>
		break;
 80156d6:	e167      	b.n	80159a8 <mode_Running+0x3f4>
		case 0b0001://足立法(遅い)
			tic_timer();
 80156d8:	f7f2 fdf0 	bl	80082bc <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,0);
 80156dc:	4cb6      	ldr	r4, [pc, #728]	; (80159b8 <mode_Running+0x404>)
 80156de:	2300      	movs	r3, #0
 80156e0:	934f      	str	r3, [sp, #316]	; 0x13c
 80156e2:	2301      	movs	r3, #1
 80156e4:	934e      	str	r3, [sp, #312]	; 0x138
 80156e6:	4668      	mov	r0, sp
 80156e8:	f104 0310 	add.w	r3, r4, #16
 80156ec:	f44f 729c 	mov.w	r2, #312	; 0x138
 80156f0:	4619      	mov	r1, r3
 80156f2:	f00a fcbd 	bl	8020070 <memcpy>
 80156f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80156fa:	eddf 1ab0 	vldr	s3, [pc, #704]	; 80159bc <mode_Running+0x408>
 80156fe:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 80159c0 <mode_Running+0x40c>
 8015702:	eddf 0ab0 	vldr	s1, [pc, #704]	; 80159c4 <mode_Running+0x410>
 8015706:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 80159c8 <mode_Running+0x414>
 801570a:	f7f8 fa63 	bl	800dbd4 <AdatiWayReturn>
			//adati_wayreturn(400, 400, 3000, 13000);
		break;
 801570e:	e14b      	b.n	80159a8 <mode_Running+0x3f4>
		case 0b0010://Flashから
			record_out();
 8015710:	f7f2 f8e0 	bl	80078d4 <record_out>
		break;
 8015714:	e148      	b.n	80159a8 <mode_Running+0x3f4>
		case 0b0011://ゴミ
			tic_timer();
 8015716:	f7f2 fdd1 	bl	80082bc <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,1);
 801571a:	4ca7      	ldr	r4, [pc, #668]	; (80159b8 <mode_Running+0x404>)
 801571c:	2301      	movs	r3, #1
 801571e:	934f      	str	r3, [sp, #316]	; 0x13c
 8015720:	2301      	movs	r3, #1
 8015722:	934e      	str	r3, [sp, #312]	; 0x138
 8015724:	4668      	mov	r0, sp
 8015726:	f104 0310 	add.w	r3, r4, #16
 801572a:	f44f 729c 	mov.w	r2, #312	; 0x138
 801572e:	4619      	mov	r1, r3
 8015730:	f00a fc9e 	bl	8020070 <memcpy>
 8015734:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015738:	eddf 1aa0 	vldr	s3, [pc, #640]	; 80159bc <mode_Running+0x408>
 801573c:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 80159c0 <mode_Running+0x40c>
 8015740:	eddf 0aa0 	vldr	s1, [pc, #640]	; 80159c4 <mode_Running+0x410>
 8015744:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 80159c8 <mode_Running+0x414>
 8015748:	f7f8 fa44 	bl	800dbd4 <AdatiWayReturn>
		break;
 801574c:	e12c      	b.n	80159a8 <mode_Running+0x3f4>
		case 0b0100://ゴミ
			record_out();
 801574e:	f7f2 f8c1 	bl	80078d4 <record_out>
			run_shortest(1000,3000,0,TURN_OFF,FUN_OFF,SLANT_OFF,speed300_shortest,0.3,0);
 8015752:	2300      	movs	r3, #0
 8015754:	9352      	str	r3, [sp, #328]	; 0x148
 8015756:	4a9d      	ldr	r2, [pc, #628]	; (80159cc <mode_Running+0x418>)
 8015758:	466b      	mov	r3, sp
 801575a:	4611      	mov	r1, r2
 801575c:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015760:	4618      	mov	r0, r3
 8015762:	f00a fc85 	bl	8020070 <memcpy>
 8015766:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 80159d0 <mode_Running+0x41c>
 801576a:	2300      	movs	r3, #0
 801576c:	2200      	movs	r2, #0
 801576e:	2100      	movs	r1, #0
 8015770:	2000      	movs	r0, #0
 8015772:	eddf 0a92 	vldr	s1, [pc, #584]	; 80159bc <mode_Running+0x408>
 8015776:	ed9f 0a97 	vldr	s0, [pc, #604]	; 80159d4 <mode_Running+0x420>
 801577a:	f7f9 fb75 	bl	800ee68 <run_shortest>
		break;
 801577e:	e113      	b.n	80159a8 <mode_Running+0x3f4>
		case 0b0101://
			record_out();
 8015780:	f7f2 f8a8 	bl	80078d4 <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_OFF,speed600_shortest_mollifier,0.3,1);
 8015784:	2301      	movs	r3, #1
 8015786:	9352      	str	r3, [sp, #328]	; 0x148
 8015788:	4a93      	ldr	r2, [pc, #588]	; (80159d8 <mode_Running+0x424>)
 801578a:	466b      	mov	r3, sp
 801578c:	4611      	mov	r1, r2
 801578e:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015792:	4618      	mov	r0, r3
 8015794:	f00a fc6c 	bl	8020070 <memcpy>
 8015798:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 80159d0 <mode_Running+0x41c>
 801579c:	2300      	movs	r3, #0
 801579e:	2200      	movs	r2, #0
 80157a0:	2101      	movs	r1, #1
 80157a2:	2000      	movs	r0, #0
 80157a4:	eddf 0a85 	vldr	s1, [pc, #532]	; 80159bc <mode_Running+0x408>
 80157a8:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 80159d4 <mode_Running+0x420>
 80157ac:	f7f9 fb5c 	bl	800ee68 <run_shortest>
		break;
 80157b0:	e0fa      	b.n	80159a8 <mode_Running+0x3f4>
		case 0b0110://吸引なしで斜め走行
			record_out();
 80157b2:	f7f2 f88f 	bl	80078d4 <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_ON,speed600_shortest_mollifier,0.3,1);
 80157b6:	2301      	movs	r3, #1
 80157b8:	9352      	str	r3, [sp, #328]	; 0x148
 80157ba:	4a87      	ldr	r2, [pc, #540]	; (80159d8 <mode_Running+0x424>)
 80157bc:	466b      	mov	r3, sp
 80157be:	4611      	mov	r1, r2
 80157c0:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80157c4:	4618      	mov	r0, r3
 80157c6:	f00a fc53 	bl	8020070 <memcpy>
 80157ca:	ed9f 1a81 	vldr	s2, [pc, #516]	; 80159d0 <mode_Running+0x41c>
 80157ce:	2301      	movs	r3, #1
 80157d0:	2200      	movs	r2, #0
 80157d2:	2101      	movs	r1, #1
 80157d4:	2000      	movs	r0, #0
 80157d6:	eddf 0a79 	vldr	s1, [pc, #484]	; 80159bc <mode_Running+0x408>
 80157da:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 80159d4 <mode_Running+0x420>
 80157de:	f7f9 fb43 	bl	800ee68 <run_shortest>
		break;
 80157e2:	e0e1      	b.n	80159a8 <mode_Running+0x3f4>
		case 0b0111://吸引ありで斜め走行
			record_out();
 80157e4:	f7f2 f876 	bl	80078d4 <record_out>
			run_shortest(3000,10000,0,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1);
 80157e8:	2301      	movs	r3, #1
 80157ea:	9352      	str	r3, [sp, #328]	; 0x148
 80157ec:	4a7b      	ldr	r2, [pc, #492]	; (80159dc <mode_Running+0x428>)
 80157ee:	466b      	mov	r3, sp
 80157f0:	4611      	mov	r1, r2
 80157f2:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80157f6:	4618      	mov	r0, r3
 80157f8:	f00a fc3a 	bl	8020070 <memcpy>
 80157fc:	ed9f 1a78 	vldr	s2, [pc, #480]	; 80159e0 <mode_Running+0x42c>
 8015800:	2301      	movs	r3, #1
 8015802:	2201      	movs	r2, #1
 8015804:	2101      	movs	r1, #1
 8015806:	2000      	movs	r0, #0
 8015808:	eddf 0a76 	vldr	s1, [pc, #472]	; 80159e4 <mode_Running+0x430>
 801580c:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 80159bc <mode_Running+0x408>
 8015810:	f7f9 fb2a 	bl	800ee68 <run_shortest>
		break;
 8015814:	e0c8      	b.n	80159a8 <mode_Running+0x3f4>
		case 0b1000://
			record_out();
 8015816:	f7f2 f85d 	bl	80078d4 <record_out>
			run_shortest(3200,13000,0,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1);
 801581a:	2301      	movs	r3, #1
 801581c:	9352      	str	r3, [sp, #328]	; 0x148
 801581e:	4a6f      	ldr	r2, [pc, #444]	; (80159dc <mode_Running+0x428>)
 8015820:	466b      	mov	r3, sp
 8015822:	4611      	mov	r1, r2
 8015824:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015828:	4618      	mov	r0, r3
 801582a:	f00a fc21 	bl	8020070 <memcpy>
 801582e:	ed9f 1a6c 	vldr	s2, [pc, #432]	; 80159e0 <mode_Running+0x42c>
 8015832:	2301      	movs	r3, #1
 8015834:	2201      	movs	r2, #1
 8015836:	2101      	movs	r1, #1
 8015838:	2000      	movs	r0, #0
 801583a:	eddf 0a6b 	vldr	s1, [pc, #428]	; 80159e8 <mode_Running+0x434>
 801583e:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 80159ec <mode_Running+0x438>
 8015842:	f7f9 fb11 	bl	800ee68 <run_shortest>
		break;
 8015846:	e0af      	b.n	80159a8 <mode_Running+0x3f4>
		case 0b1001:
			record_out();
 8015848:	f7f2 f844 	bl	80078d4 <record_out>
			run_shortest(3000,10000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1);
 801584c:	2301      	movs	r3, #1
 801584e:	9352      	str	r3, [sp, #328]	; 0x148
 8015850:	4a67      	ldr	r2, [pc, #412]	; (80159f0 <mode_Running+0x43c>)
 8015852:	466b      	mov	r3, sp
 8015854:	4611      	mov	r1, r2
 8015856:	f44f 72a4 	mov.w	r2, #328	; 0x148
 801585a:	4618      	mov	r0, r3
 801585c:	f00a fc08 	bl	8020070 <memcpy>
 8015860:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 80159e0 <mode_Running+0x42c>
 8015864:	2301      	movs	r3, #1
 8015866:	2201      	movs	r2, #1
 8015868:	2101      	movs	r1, #1
 801586a:	2000      	movs	r0, #0
 801586c:	eddf 0a5d 	vldr	s1, [pc, #372]	; 80159e4 <mode_Running+0x430>
 8015870:	ed9f 0a52 	vldr	s0, [pc, #328]	; 80159bc <mode_Running+0x408>
 8015874:	f7f9 faf8 	bl	800ee68 <run_shortest>
		break;
 8015878:	e096      	b.n	80159a8 <mode_Running+0x3f4>
		case 0b1010:
			record_out();
 801587a:	f7f2 f82b 	bl	80078d4 <record_out>
			run_shortest(3200,13000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1);
 801587e:	2301      	movs	r3, #1
 8015880:	9352      	str	r3, [sp, #328]	; 0x148
 8015882:	4a5b      	ldr	r2, [pc, #364]	; (80159f0 <mode_Running+0x43c>)
 8015884:	466b      	mov	r3, sp
 8015886:	4611      	mov	r1, r2
 8015888:	f44f 72a4 	mov.w	r2, #328	; 0x148
 801588c:	4618      	mov	r0, r3
 801588e:	f00a fbef 	bl	8020070 <memcpy>
 8015892:	ed9f 1a53 	vldr	s2, [pc, #332]	; 80159e0 <mode_Running+0x42c>
 8015896:	2301      	movs	r3, #1
 8015898:	2201      	movs	r2, #1
 801589a:	2101      	movs	r1, #1
 801589c:	2000      	movs	r0, #0
 801589e:	eddf 0a52 	vldr	s1, [pc, #328]	; 80159e8 <mode_Running+0x434>
 80158a2:	ed9f 0a52 	vldr	s0, [pc, #328]	; 80159ec <mode_Running+0x438>
 80158a6:	f7f9 fadf 	bl	800ee68 <run_shortest>
		break;
 80158aa:	e07d      	b.n	80159a8 <mode_Running+0x3f4>
		case 0b1011:
			record_out();
 80158ac:	f7f2 f812 	bl	80078d4 <record_out>
			run_shortest(4000,17000,0,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1);
 80158b0:	2301      	movs	r3, #1
 80158b2:	9352      	str	r3, [sp, #328]	; 0x148
 80158b4:	4a49      	ldr	r2, [pc, #292]	; (80159dc <mode_Running+0x428>)
 80158b6:	466b      	mov	r3, sp
 80158b8:	4611      	mov	r1, r2
 80158ba:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80158be:	4618      	mov	r0, r3
 80158c0:	f00a fbd6 	bl	8020070 <memcpy>
 80158c4:	ed9f 1a46 	vldr	s2, [pc, #280]	; 80159e0 <mode_Running+0x42c>
 80158c8:	2301      	movs	r3, #1
 80158ca:	2201      	movs	r2, #1
 80158cc:	2101      	movs	r1, #1
 80158ce:	2000      	movs	r0, #0
 80158d0:	eddf 0a48 	vldr	s1, [pc, #288]	; 80159f4 <mode_Running+0x440>
 80158d4:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80159f8 <mode_Running+0x444>
 80158d8:	f7f9 fac6 	bl	800ee68 <run_shortest>
		break;
 80158dc:	e064      	b.n	80159a8 <mode_Running+0x3f4>
		case 0b1100:
			record_out();
 80158de:	f7f1 fff9 	bl	80078d4 <record_out>
			run_shortest(4000,17000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1);
 80158e2:	2301      	movs	r3, #1
 80158e4:	9352      	str	r3, [sp, #328]	; 0x148
 80158e6:	4a42      	ldr	r2, [pc, #264]	; (80159f0 <mode_Running+0x43c>)
 80158e8:	466b      	mov	r3, sp
 80158ea:	4611      	mov	r1, r2
 80158ec:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80158f0:	4618      	mov	r0, r3
 80158f2:	f00a fbbd 	bl	8020070 <memcpy>
 80158f6:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 80159e0 <mode_Running+0x42c>
 80158fa:	2301      	movs	r3, #1
 80158fc:	2201      	movs	r2, #1
 80158fe:	2101      	movs	r1, #1
 8015900:	2000      	movs	r0, #0
 8015902:	eddf 0a3c 	vldr	s1, [pc, #240]	; 80159f4 <mode_Running+0x440>
 8015906:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 80159f8 <mode_Running+0x444>
 801590a:	f7f9 faad 	bl	800ee68 <run_shortest>
		break;
 801590e:	e04b      	b.n	80159a8 <mode_Running+0x3f4>
		case 0b1101:
			record_out();
 8015910:	f7f1 ffe0 	bl	80078d4 <record_out>
			run_shortest(3100,11000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest_mollifier,0.99,1);
 8015914:	2301      	movs	r3, #1
 8015916:	9352      	str	r3, [sp, #328]	; 0x148
 8015918:	4a38      	ldr	r2, [pc, #224]	; (80159fc <mode_Running+0x448>)
 801591a:	466b      	mov	r3, sp
 801591c:	4611      	mov	r1, r2
 801591e:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015922:	4618      	mov	r0, r3
 8015924:	f00a fba4 	bl	8020070 <memcpy>
 8015928:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 80159e0 <mode_Running+0x42c>
 801592c:	2301      	movs	r3, #1
 801592e:	2201      	movs	r2, #1
 8015930:	2101      	movs	r1, #1
 8015932:	2000      	movs	r0, #0
 8015934:	eddf 0a32 	vldr	s1, [pc, #200]	; 8015a00 <mode_Running+0x44c>
 8015938:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8015a04 <mode_Running+0x450>
 801593c:	f7f9 fa94 	bl	800ee68 <run_shortest>
		break;
 8015940:	e032      	b.n	80159a8 <mode_Running+0x3f4>
		case 0b1110:
			record_out();
 8015942:	f7f1 ffc7 	bl	80078d4 <record_out>
			run_shortest(4000,17000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest_mollifier,0.99,1);
 8015946:	2301      	movs	r3, #1
 8015948:	9352      	str	r3, [sp, #328]	; 0x148
 801594a:	4a2c      	ldr	r2, [pc, #176]	; (80159fc <mode_Running+0x448>)
 801594c:	466b      	mov	r3, sp
 801594e:	4611      	mov	r1, r2
 8015950:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015954:	4618      	mov	r0, r3
 8015956:	f00a fb8b 	bl	8020070 <memcpy>
 801595a:	ed9f 1a21 	vldr	s2, [pc, #132]	; 80159e0 <mode_Running+0x42c>
 801595e:	2301      	movs	r3, #1
 8015960:	2201      	movs	r2, #1
 8015962:	2101      	movs	r1, #1
 8015964:	2000      	movs	r0, #0
 8015966:	eddf 0a23 	vldr	s1, [pc, #140]	; 80159f4 <mode_Running+0x440>
 801596a:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80159f8 <mode_Running+0x444>
 801596e:	f7f9 fa7b 	bl	800ee68 <run_shortest>
		break;
 8015972:	e019      	b.n	80159a8 <mode_Running+0x3f4>
		case 0b1111:
			AdatiWayReturn(250,400,2000,3000,speed250_exploration,1,0);
 8015974:	4c24      	ldr	r4, [pc, #144]	; (8015a08 <mode_Running+0x454>)
 8015976:	2300      	movs	r3, #0
 8015978:	934f      	str	r3, [sp, #316]	; 0x13c
 801597a:	2301      	movs	r3, #1
 801597c:	934e      	str	r3, [sp, #312]	; 0x138
 801597e:	4668      	mov	r0, sp
 8015980:	f104 0310 	add.w	r3, r4, #16
 8015984:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015988:	4619      	mov	r1, r3
 801598a:	f00a fb71 	bl	8020070 <memcpy>
 801598e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015992:	eddf 1a0a 	vldr	s3, [pc, #40]	; 80159bc <mode_Running+0x408>
 8015996:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80159c0 <mode_Running+0x40c>
 801599a:	eddf 0a0a 	vldr	s1, [pc, #40]	; 80159c4 <mode_Running+0x410>
 801599e:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8015a0c <mode_Running+0x458>
 80159a2:	f7f8 f917 	bl	800dbd4 <AdatiWayReturn>
		break;
 80159a6:	bf00      	nop
	}


}
 80159a8:	bf00      	nop
 80159aa:	3718      	adds	r7, #24
 80159ac:	46bd      	mov	sp, r7
 80159ae:	bdb0      	pop	{r4, r5, r7, pc}
 80159b0:	080245a0 	.word	0x080245a0
 80159b4:	080245ac 	.word	0x080245ac
 80159b8:	2000ef84 	.word	0x2000ef84
 80159bc:	453b8000 	.word	0x453b8000
 80159c0:	44fa0000 	.word	0x44fa0000
 80159c4:	43c80000 	.word	0x43c80000
 80159c8:	43960000 	.word	0x43960000
 80159cc:	2000f214 	.word	0x2000f214
 80159d0:	3e99999a 	.word	0x3e99999a
 80159d4:	447a0000 	.word	0x447a0000
 80159d8:	2000f35c 	.word	0x2000f35c
 80159dc:	2000f4a4 	.word	0x2000f4a4
 80159e0:	3f7d70a4 	.word	0x3f7d70a4
 80159e4:	461c4000 	.word	0x461c4000
 80159e8:	464b2000 	.word	0x464b2000
 80159ec:	45480000 	.word	0x45480000
 80159f0:	2000f5ec 	.word	0x2000f5ec
 80159f4:	4684d000 	.word	0x4684d000
 80159f8:	457a0000 	.word	0x457a0000
 80159fc:	2000f734 	.word	0x2000f734
 8015a00:	462be000 	.word	0x462be000
 8015a04:	4541c000 	.word	0x4541c000
 8015a08:	2000f0cc 	.word	0x2000f0cc
 8015a0c:	437a0000 	.word	0x437a0000

08015a10 <mode_Tuning0>:





void mode_Tuning0(unsigned char main_modeR){
 8015a10:	b590      	push	{r4, r7, lr}
 8015a12:	b0db      	sub	sp, #364	; 0x16c
 8015a14:	af52      	add	r7, sp, #328	; 0x148
 8015a16:	4603      	mov	r3, r0
 8015a18:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	int duty_L=0, duty_R=0;
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	613b      	str	r3, [r7, #16]
 8015a1e:	2300      	movs	r3, #0
 8015a20:	60fb      	str	r3, [r7, #12]
	mode.WallControlMode=0;
 8015a22:	2300      	movs	r3, #0
 8015a24:	753b      	strb	r3, [r7, #20]
	mode.WallControlStatus=0;
 8015a26:	2300      	movs	r3, #0
 8015a28:	757b      	strb	r3, [r7, #21]
	mode.WallCutMode=0;
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	75fb      	strb	r3, [r7, #23]
	mode.calMazeMode=0;
 8015a2e:	2300      	movs	r3, #0
 8015a30:	75bb      	strb	r3, [r7, #22]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015a32:	2003      	movs	r0, #3
 8015a34:	f7f2 f98e 	bl	8007d54 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015a38:	2003      	movs	r0, #3
 8015a3a:	f7f2 f9b3 	bl	8007da4 <pl_R_DriveMotor_mode>
	reset_gyro();
 8015a3e:	f7ec f8b3 	bl	8001ba8 <reset_gyro>
	reset_speed();
 8015a42:	f7eb faef 	bl	8001024 <reset_speed>
	reset_distance();
 8015a46:	f7eb faa9 	bl	8000f9c <reset_distance>
	clear_Ierror();
 8015a4a:	f7ee ffe5 	bl	8004a18 <clear_Ierror>

	switch (main_modeR) {
 8015a4e:	79fb      	ldrb	r3, [r7, #7]
 8015a50:	2b0f      	cmp	r3, #15
 8015a52:	f200 8315 	bhi.w	8016080 <mode_Tuning0+0x670>
 8015a56:	a201      	add	r2, pc, #4	; (adr r2, 8015a5c <mode_Tuning0+0x4c>)
 8015a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a5c:	08015a9d 	.word	0x08015a9d
 8015a60:	08015b27 	.word	0x08015b27
 8015a64:	08015b4d 	.word	0x08015b4d
 8015a68:	08015b73 	.word	0x08015b73
 8015a6c:	08015ba3 	.word	0x08015ba3
 8015a70:	08015bd3 	.word	0x08015bd3
 8015a74:	08015c9d 	.word	0x08015c9d
 8015a78:	08015cc3 	.word	0x08015cc3
 8015a7c:	08015ce9 	.word	0x08015ce9
 8015a80:	08015d0d 	.word	0x08015d0d
 8015a84:	08015d69 	.word	0x08015d69
 8015a88:	08015e71 	.word	0x08015e71
 8015a8c:	08015e97 	.word	0x08015e97
 8015a90:	08015ec9 	.word	0x08015ec9
 8015a94:	08015fe1 	.word	0x08015fe1
 8015a98:	08016031 	.word	0x08016031
		case 0://タイヤ径　エンコーダ+PID
			record_mode=3;
 8015a9c:	4bd4      	ldr	r3, [pc, #848]	; (8015df0 <mode_Tuning0+0x3e0>)
 8015a9e:	2203      	movs	r2, #3
 8015aa0:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015aa2:	2300      	movs	r3, #0
 8015aa4:	753b      	strb	r3, [r7, #20]
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			straight_table2(540, 0, 0, 1600, 13000,mode);
 8015aa6:	6978      	ldr	r0, [r7, #20]
 8015aa8:	ed9f 2ad2 	vldr	s4, [pc, #840]	; 8015df4 <mode_Tuning0+0x3e4>
 8015aac:	eddf 1ad2 	vldr	s3, [pc, #840]	; 8015df8 <mode_Tuning0+0x3e8>
 8015ab0:	ed9f 1ad2 	vldr	s2, [pc, #840]	; 8015dfc <mode_Tuning0+0x3ec>
 8015ab4:	eddf 0ad1 	vldr	s1, [pc, #836]	; 8015dfc <mode_Tuning0+0x3ec>
 8015ab8:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 8015e00 <mode_Tuning0+0x3f0>
 8015abc:	f7ed fcae 	bl	800341c <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 8015ac0:	ed9f 2ad0 	vldr	s4, [pc, #832]	; 8015e04 <mode_Tuning0+0x3f4>
 8015ac4:	eddf 1ad0 	vldr	s3, [pc, #832]	; 8015e08 <mode_Tuning0+0x3f8>
 8015ac8:	ed9f 1acc 	vldr	s2, [pc, #816]	; 8015dfc <mode_Tuning0+0x3ec>
 8015acc:	eddf 0acb 	vldr	s1, [pc, #812]	; 8015dfc <mode_Tuning0+0x3ec>
 8015ad0:	ed9f 0ace 	vldr	s0, [pc, #824]	; 8015e0c <mode_Tuning0+0x3fc>
 8015ad4:	f7ee f9c4 	bl	8003e60 <turning_table2>
			straight_table2(540, 0, 0, 2000, 15000,mode);
 8015ad8:	6978      	ldr	r0, [r7, #20]
 8015ada:	ed9f 2acd 	vldr	s4, [pc, #820]	; 8015e10 <mode_Tuning0+0x400>
 8015ade:	eddf 1acd 	vldr	s3, [pc, #820]	; 8015e14 <mode_Tuning0+0x404>
 8015ae2:	ed9f 1ac6 	vldr	s2, [pc, #792]	; 8015dfc <mode_Tuning0+0x3ec>
 8015ae6:	eddf 0ac5 	vldr	s1, [pc, #788]	; 8015dfc <mode_Tuning0+0x3ec>
 8015aea:	ed9f 0ac5 	vldr	s0, [pc, #788]	; 8015e00 <mode_Tuning0+0x3f0>
 8015aee:	f7ed fc95 	bl	800341c <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 8015af2:	ed9f 2ac4 	vldr	s4, [pc, #784]	; 8015e04 <mode_Tuning0+0x3f4>
 8015af6:	eddf 1ac4 	vldr	s3, [pc, #784]	; 8015e08 <mode_Tuning0+0x3f8>
 8015afa:	ed9f 1ac0 	vldr	s2, [pc, #768]	; 8015dfc <mode_Tuning0+0x3ec>
 8015afe:	eddf 0abf 	vldr	s1, [pc, #764]	; 8015dfc <mode_Tuning0+0x3ec>
 8015b02:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8015e0c <mode_Tuning0+0x3fc>
 8015b06:	f7ee f9ab 	bl	8003e60 <turning_table2>
			straight_table2(540, 0, 0, 2400, 20000,mode);
 8015b0a:	6978      	ldr	r0, [r7, #20]
 8015b0c:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 8015e18 <mode_Tuning0+0x408>
 8015b10:	eddf 1ac2 	vldr	s3, [pc, #776]	; 8015e1c <mode_Tuning0+0x40c>
 8015b14:	ed9f 1ab9 	vldr	s2, [pc, #740]	; 8015dfc <mode_Tuning0+0x3ec>
 8015b18:	eddf 0ab8 	vldr	s1, [pc, #736]	; 8015dfc <mode_Tuning0+0x3ec>
 8015b1c:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 8015e00 <mode_Tuning0+0x3f0>
 8015b20:	f7ed fc7c 	bl	800341c <straight_table2>
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			//straight_table2(450, 0, 0, 1000, 13000,mode);
			//control_test_motor2(0,0,10);
		break;
 8015b24:	e2ac      	b.n	8016080 <mode_Tuning0+0x670>
		case 1://トレッド幅??ジャイロ
			record_mode = 5;
 8015b26:	4bb2      	ldr	r3, [pc, #712]	; (8015df0 <mode_Tuning0+0x3e0>)
 8015b28:	2205      	movs	r2, #5
 8015b2a:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015b2c:	2300      	movs	r3, #0
 8015b2e:	753b      	strb	r3, [r7, #20]
//			straight_table2(400, 0, 0, 400, 3000,mode);
			straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 8015b30:	6978      	ldr	r0, [r7, #20]
 8015b32:	ed9f 2abb 	vldr	s4, [pc, #748]	; 8015e20 <mode_Tuning0+0x410>
 8015b36:	eddf 1abb 	vldr	s3, [pc, #748]	; 8015e24 <mode_Tuning0+0x414>
 8015b3a:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 8015dfc <mode_Tuning0+0x3ec>
 8015b3e:	eddf 0aaf 	vldr	s1, [pc, #700]	; 8015dfc <mode_Tuning0+0x3ec>
 8015b42:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8015e28 <mode_Tuning0+0x418>
 8015b46:	f7ed fc69 	bl	800341c <straight_table2>
			//turning_table2(360*10, 0, 0, 800, 8000);
			//control_test_motor2(1,0,5);
		break;
 8015b4a:	e299      	b.n	8016080 <mode_Tuning0+0x670>
		case 2://壁制御
			record_mode=6;
 8015b4c:	4ba8      	ldr	r3, [pc, #672]	; (8015df0 <mode_Tuning0+0x3e0>)
 8015b4e:	2206      	movs	r2, #6
 8015b50:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8015b52:	2301      	movs	r3, #1
 8015b54:	753b      	strb	r3, [r7, #20]
			straight_table2(90*15, 0, 0, 300, 6000,mode);
 8015b56:	6978      	ldr	r0, [r7, #20]
 8015b58:	ed9f 2ab4 	vldr	s4, [pc, #720]	; 8015e2c <mode_Tuning0+0x41c>
 8015b5c:	eddf 1ab4 	vldr	s3, [pc, #720]	; 8015e30 <mode_Tuning0+0x420>
 8015b60:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 8015dfc <mode_Tuning0+0x3ec>
 8015b64:	eddf 0aa5 	vldr	s1, [pc, #660]	; 8015dfc <mode_Tuning0+0x3ec>
 8015b68:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8015e34 <mode_Tuning0+0x424>
 8015b6c:	f7ed fc56 	bl	800341c <straight_table2>
			//control_test_motor2(0,1,6);
		break;
 8015b70:	e286      	b.n	8016080 <mode_Tuning0+0x670>
		case 3://右スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,-90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);

			testturning(speed300_exploration,0,0,0,0,0);
 8015b72:	4cb1      	ldr	r4, [pc, #708]	; (8015e38 <mode_Tuning0+0x428>)
 8015b74:	2300      	movs	r3, #0
 8015b76:	9351      	str	r3, [sp, #324]	; 0x144
 8015b78:	2300      	movs	r3, #0
 8015b7a:	9350      	str	r3, [sp, #320]	; 0x140
 8015b7c:	2300      	movs	r3, #0
 8015b7e:	934f      	str	r3, [sp, #316]	; 0x13c
 8015b80:	2300      	movs	r3, #0
 8015b82:	934e      	str	r3, [sp, #312]	; 0x138
 8015b84:	4668      	mov	r0, sp
 8015b86:	f104 0310 	add.w	r3, r4, #16
 8015b8a:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015b8e:	4619      	mov	r1, r3
 8015b90:	f00a fa6e 	bl	8020070 <memcpy>
 8015b94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015b98:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8015dfc <mode_Tuning0+0x3ec>
 8015b9c:	f7f7 fe60 	bl	800d860 <testturning>
		break;
 8015ba0:	e26e      	b.n	8016080 <mode_Tuning0+0x670>
		case 4://左スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);
			testturning(speed300_exploration,1,0,0,0,0);
 8015ba2:	4ca5      	ldr	r4, [pc, #660]	; (8015e38 <mode_Tuning0+0x428>)
 8015ba4:	2300      	movs	r3, #0
 8015ba6:	9351      	str	r3, [sp, #324]	; 0x144
 8015ba8:	2300      	movs	r3, #0
 8015baa:	9350      	str	r3, [sp, #320]	; 0x140
 8015bac:	2300      	movs	r3, #0
 8015bae:	934f      	str	r3, [sp, #316]	; 0x13c
 8015bb0:	2301      	movs	r3, #1
 8015bb2:	934e      	str	r3, [sp, #312]	; 0x138
 8015bb4:	4668      	mov	r0, sp
 8015bb6:	f104 0310 	add.w	r3, r4, #16
 8015bba:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015bbe:	4619      	mov	r1, r3
 8015bc0:	f00a fa56 	bl	8020070 <memcpy>
 8015bc4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015bc8:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 8015dfc <mode_Tuning0+0x3ec>
 8015bcc:	f7f7 fe48 	bl	800d860 <testturning>
		break;
 8015bd0:	e256      	b.n	8016080 <mode_Tuning0+0x670>
		case 5://直進(制御なし)
			highspeed_mode = 1;
 8015bd2:	4b9a      	ldr	r3, [pc, #616]	; (8015e3c <mode_Tuning0+0x42c>)
 8015bd4:	2201      	movs	r2, #1
 8015bd6:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 8015bd8:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8015e40 <mode_Tuning0+0x430>
 8015bdc:	f7f2 f94e 	bl	8007e7c <pl_FunMotor_duty>
			pl_FunMotor_start();
 8015be0:	f7f2 f938 	bl	8007e54 <pl_FunMotor_start>
			HAL_Delay(600);
 8015be4:	f44f 7016 	mov.w	r0, #600	; 0x258
 8015be8:	f002 ff70 	bl	8018acc <HAL_Delay>
			reset_gyro();
 8015bec:	f7eb ffdc 	bl	8001ba8 <reset_gyro>
			reset_speed();
 8015bf0:	f7eb fa18 	bl	8001024 <reset_speed>
			reset_distance();
 8015bf4:	f7eb f9d2 	bl	8000f9c <reset_distance>
			clear_Ierror();
 8015bf8:	f7ee ff0e 	bl	8004a18 <clear_Ierror>
			record_mode=6;
 8015bfc:	4b7c      	ldr	r3, [pc, #496]	; (8015df0 <mode_Tuning0+0x3e0>)
 8015bfe:	2206      	movs	r2, #6
 8015c00:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8015c02:	2301      	movs	r3, #1
 8015c04:	753b      	strb	r3, [r7, #20]
			theta_comp_gain=0;
 8015c06:	4b8f      	ldr	r3, [pc, #572]	; (8015e44 <mode_Tuning0+0x434>)
 8015c08:	f04f 0200 	mov.w	r2, #0
 8015c0c:	601a      	str	r2, [r3, #0]
			straight_table2(90*8, 0, 0, 2800, 18000,mode);
 8015c0e:	6978      	ldr	r0, [r7, #20]
 8015c10:	ed9f 2a8d 	vldr	s4, [pc, #564]	; 8015e48 <mode_Tuning0+0x438>
 8015c14:	eddf 1a8d 	vldr	s3, [pc, #564]	; 8015e4c <mode_Tuning0+0x43c>
 8015c18:	ed9f 1a78 	vldr	s2, [pc, #480]	; 8015dfc <mode_Tuning0+0x3ec>
 8015c1c:	eddf 0a77 	vldr	s1, [pc, #476]	; 8015dfc <mode_Tuning0+0x3ec>
 8015c20:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 8015e50 <mode_Tuning0+0x440>
 8015c24:	f7ed fbfa 	bl	800341c <straight_table2>
			mode.WallControlMode=0;
 8015c28:	2300      	movs	r3, #0
 8015c2a:	753b      	strb	r3, [r7, #20]
			theta_comp_gain=0;
 8015c2c:	4b85      	ldr	r3, [pc, #532]	; (8015e44 <mode_Tuning0+0x434>)
 8015c2e:	f04f 0200 	mov.w	r2, #0
 8015c32:	601a      	str	r2, [r3, #0]
			straight_table2(-90*8, 0, 0, -2000, 14000,mode);
 8015c34:	6978      	ldr	r0, [r7, #20]
 8015c36:	ed9f 2a87 	vldr	s4, [pc, #540]	; 8015e54 <mode_Tuning0+0x444>
 8015c3a:	eddf 1a87 	vldr	s3, [pc, #540]	; 8015e58 <mode_Tuning0+0x448>
 8015c3e:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 8015dfc <mode_Tuning0+0x3ec>
 8015c42:	eddf 0a6e 	vldr	s1, [pc, #440]	; 8015dfc <mode_Tuning0+0x3ec>
 8015c46:	ed9f 0a85 	vldr	s0, [pc, #532]	; 8015e5c <mode_Tuning0+0x44c>
 8015c4a:	f7ed fbe7 	bl	800341c <straight_table2>
			mode.WallControlMode=1;
 8015c4e:	2301      	movs	r3, #1
 8015c50:	753b      	strb	r3, [r7, #20]
			theta_comp_gain=1;
 8015c52:	4b7c      	ldr	r3, [pc, #496]	; (8015e44 <mode_Tuning0+0x434>)
 8015c54:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8015c58:	601a      	str	r2, [r3, #0]
			straight_table2(90*8, 0, 0, 2800, 18000,mode);
 8015c5a:	6978      	ldr	r0, [r7, #20]
 8015c5c:	ed9f 2a7a 	vldr	s4, [pc, #488]	; 8015e48 <mode_Tuning0+0x438>
 8015c60:	eddf 1a7a 	vldr	s3, [pc, #488]	; 8015e4c <mode_Tuning0+0x43c>
 8015c64:	ed9f 1a65 	vldr	s2, [pc, #404]	; 8015dfc <mode_Tuning0+0x3ec>
 8015c68:	eddf 0a64 	vldr	s1, [pc, #400]	; 8015dfc <mode_Tuning0+0x3ec>
 8015c6c:	ed9f 0a78 	vldr	s0, [pc, #480]	; 8015e50 <mode_Tuning0+0x440>
 8015c70:	f7ed fbd4 	bl	800341c <straight_table2>
			mode.WallControlMode=0;
 8015c74:	2300      	movs	r3, #0
 8015c76:	753b      	strb	r3, [r7, #20]
			theta_comp_gain=1;
 8015c78:	4b72      	ldr	r3, [pc, #456]	; (8015e44 <mode_Tuning0+0x434>)
 8015c7a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8015c7e:	601a      	str	r2, [r3, #0]
			straight_table2(-90*8, 0, 0, -2000, 14000,mode);
 8015c80:	6978      	ldr	r0, [r7, #20]
 8015c82:	ed9f 2a74 	vldr	s4, [pc, #464]	; 8015e54 <mode_Tuning0+0x444>
 8015c86:	eddf 1a74 	vldr	s3, [pc, #464]	; 8015e58 <mode_Tuning0+0x448>
 8015c8a:	ed9f 1a5c 	vldr	s2, [pc, #368]	; 8015dfc <mode_Tuning0+0x3ec>
 8015c8e:	eddf 0a5b 	vldr	s1, [pc, #364]	; 8015dfc <mode_Tuning0+0x3ec>
 8015c92:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8015e5c <mode_Tuning0+0x44c>
 8015c96:	f7ed fbc1 	bl	800341c <straight_table2>

		break;
 8015c9a:	e1f1      	b.n	8016080 <mode_Tuning0+0x670>
		case 6://斜め直進(制御あり)
			record_mode=7;//or3
 8015c9c:	4b54      	ldr	r3, [pc, #336]	; (8015df0 <mode_Tuning0+0x3e0>)
 8015c9e:	2207      	movs	r2, #7
 8015ca0:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015ca2:	2300      	movs	r3, #0
 8015ca4:	753b      	strb	r3, [r7, #20]
			straight_table2(180*3*sqrt(2), 0, 0, 500, 6000,mode);
 8015ca6:	6978      	ldr	r0, [r7, #20]
 8015ca8:	ed9f 2a60 	vldr	s4, [pc, #384]	; 8015e2c <mode_Tuning0+0x41c>
 8015cac:	eddf 1a6c 	vldr	s3, [pc, #432]	; 8015e60 <mode_Tuning0+0x450>
 8015cb0:	ed9f 1a52 	vldr	s2, [pc, #328]	; 8015dfc <mode_Tuning0+0x3ec>
 8015cb4:	eddf 0a51 	vldr	s1, [pc, #324]	; 8015dfc <mode_Tuning0+0x3ec>
 8015cb8:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8015e64 <mode_Tuning0+0x454>
 8015cbc:	f7ed fbae 	bl	800341c <straight_table2>
		break;
 8015cc0:	e1de      	b.n	8016080 <mode_Tuning0+0x670>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=7;
 8015cc2:	4b4b      	ldr	r3, [pc, #300]	; (8015df0 <mode_Tuning0+0x3e0>)
 8015cc4:	2207      	movs	r2, #7
 8015cc6:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8015cc8:	2303      	movs	r3, #3
 8015cca:	753b      	strb	r3, [r7, #20]
			straight_table2(180*3*sqrt(2), 0, 0, 2000, 6000,mode);
 8015ccc:	6978      	ldr	r0, [r7, #20]
 8015cce:	ed9f 2a57 	vldr	s4, [pc, #348]	; 8015e2c <mode_Tuning0+0x41c>
 8015cd2:	eddf 1a50 	vldr	s3, [pc, #320]	; 8015e14 <mode_Tuning0+0x404>
 8015cd6:	ed9f 1a49 	vldr	s2, [pc, #292]	; 8015dfc <mode_Tuning0+0x3ec>
 8015cda:	eddf 0a48 	vldr	s1, [pc, #288]	; 8015dfc <mode_Tuning0+0x3ec>
 8015cde:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8015e64 <mode_Tuning0+0x454>
 8015ce2:	f7ed fb9b 	bl	800341c <straight_table2>
		break;
 8015ce6:	e1cb      	b.n	8016080 <mode_Tuning0+0x670>
		case 8://宴会芸
			record_mode=2;
 8015ce8:	4b41      	ldr	r3, [pc, #260]	; (8015df0 <mode_Tuning0+0x3e0>)
 8015cea:	2202      	movs	r2, #2
 8015cec:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8015cee:	2001      	movs	r0, #1
 8015cf0:	f7f1 fb82 	bl	80073f8 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015cf4:	2001      	movs	r0, #1
 8015cf6:	f7f1 fb91 	bl	800741c <pl_l_blue_LED>
			no_angle();
 8015cfa:	f7ee fac5 	bl	8004288 <no_angle>
			pl_r_blue_LED(OFF);
 8015cfe:	2000      	movs	r0, #0
 8015d00:	f7f1 fb7a 	bl	80073f8 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015d04:	2000      	movs	r0, #0
 8015d06:	f7f1 fb89 	bl	800741c <pl_l_blue_LED>
		break;
 8015d0a:	e1b9      	b.n	8016080 <mode_Tuning0+0x670>
		case 9://システム同定enc

			pl_r_blue_LED(ON);
 8015d0c:	2001      	movs	r0, #1
 8015d0e:	f7f1 fb73 	bl	80073f8 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015d12:	2001      	movs	r0, #1
 8015d14:	f7f1 fb82 	bl	800741c <pl_l_blue_LED>
//			straight_table_ff(90, 0, 300, 300, 500);
//			straight_table_ff(90, 300, 600, 600, 1500);
//			straight_table_ff(90, 600, 300, 600, 1500);
//			straight_table_ff(90, 300, 0, 300, 500);

			get_duty(1, 1,&duty_L,&duty_R);
 8015d18:	f107 020c 	add.w	r2, r7, #12
 8015d1c:	f107 0310 	add.w	r3, r7, #16
 8015d20:	4611      	mov	r1, r2
 8015d22:	4618      	mov	r0, r3
 8015d24:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8015d28:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015d2c:	f7ec faa2 	bl	8002274 <get_duty>
			pl_DriveMotor_duty(duty_L,duty_R);
 8015d30:	693b      	ldr	r3, [r7, #16]
 8015d32:	68fa      	ldr	r2, [r7, #12]
 8015d34:	4611      	mov	r1, r2
 8015d36:	4618      	mov	r0, r3
 8015d38:	f7f2 f876 	bl	8007e28 <pl_DriveMotor_duty>
			pl_DriveMotor_start();
 8015d3c:	f7f2 f858 	bl	8007df0 <pl_DriveMotor_start>
			wait_ms(3000);
 8015d40:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8015d44:	f7f2 fae8 	bl	8008318 <wait_ms>
			record_mode=11;
 8015d48:	4b29      	ldr	r3, [pc, #164]	; (8015df0 <mode_Tuning0+0x3e0>)
 8015d4a:	220b      	movs	r2, #11
 8015d4c:	701a      	strb	r2, [r3, #0]
			wait_ms(2000);
 8015d4e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8015d52:	f7f2 fae1 	bl	8008318 <wait_ms>
//				wait_ms(1);
//				if(record_rupe_flag==1){
//					break;
//				}
//			}
			pl_DriveMotor_stop();
 8015d56:	f7f2 f859 	bl	8007e0c <pl_DriveMotor_stop>
			pl_r_blue_LED(OFF);
 8015d5a:	2000      	movs	r0, #0
 8015d5c:	f7f1 fb4c 	bl	80073f8 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015d60:	2000      	movs	r0, #0
 8015d62:	f7f1 fb5b 	bl	800741c <pl_l_blue_LED>
		break;
 8015d66:	e18b      	b.n	8016080 <mode_Tuning0+0x670>
		case 10://システム同定gyro
			record_mode=6;
 8015d68:	4b21      	ldr	r3, [pc, #132]	; (8015df0 <mode_Tuning0+0x3e0>)
 8015d6a:	2206      	movs	r2, #6
 8015d6c:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8015d6e:	2001      	movs	r0, #1
 8015d70:	f7f1 fb42 	bl	80073f8 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015d74:	2001      	movs	r0, #1
 8015d76:	f7f1 fb51 	bl	800741c <pl_l_blue_LED>
//			turning_table_ff(90, 0, 300, 300, 500);
//			turning_table_ff(90, 300, 600, 600, 1500);
//			turning_table_ff(90, 600, 300, 600, 1500);
//			turning_table_ff(90, 300, 0, 300, 500);
			get_duty(-1.0, 1.0,&duty_L,&duty_R);
 8015d7a:	f107 020c 	add.w	r2, r7, #12
 8015d7e:	f107 0310 	add.w	r3, r7, #16
 8015d82:	4611      	mov	r1, r2
 8015d84:	4618      	mov	r0, r3
 8015d86:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8015d8a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015d8e:	f7ec fa71 	bl	8002274 <get_duty>
			pl_DriveMotor_duty(duty_L,duty_R);
 8015d92:	693b      	ldr	r3, [r7, #16]
 8015d94:	68fa      	ldr	r2, [r7, #12]
 8015d96:	4611      	mov	r1, r2
 8015d98:	4618      	mov	r0, r3
 8015d9a:	f7f2 f845 	bl	8007e28 <pl_DriveMotor_duty>
			pl_DriveMotor_start();
 8015d9e:	f7f2 f827 	bl	8007df0 <pl_DriveMotor_start>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015da2:	e00a      	b.n	8015dba <mode_Tuning0+0x3aa>
				wait_ms(1);
 8015da4:	2001      	movs	r0, #1
 8015da6:	f7f2 fab7 	bl	8008318 <wait_ms>
				if(record_rupe_flag==1){
 8015daa:	4b2f      	ldr	r3, [pc, #188]	; (8015e68 <mode_Tuning0+0x458>)
 8015dac:	781b      	ldrb	r3, [r3, #0]
 8015dae:	2b01      	cmp	r3, #1
 8015db0:	d103      	bne.n	8015dba <mode_Tuning0+0x3aa>
					record_mode=0;
 8015db2:	4b0f      	ldr	r3, [pc, #60]	; (8015df0 <mode_Tuning0+0x3e0>)
 8015db4:	2200      	movs	r2, #0
 8015db6:	701a      	strb	r2, [r3, #0]
					break;
 8015db8:	e010      	b.n	8015ddc <mode_Tuning0+0x3cc>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015dba:	4b2c      	ldr	r3, [pc, #176]	; (8015e6c <mode_Tuning0+0x45c>)
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015dc2:	ddef      	ble.n	8015da4 <mode_Tuning0+0x394>
 8015dc4:	4b29      	ldr	r3, [pc, #164]	; (8015e6c <mode_Tuning0+0x45c>)
 8015dc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015dca:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015dce:	dde9      	ble.n	8015da4 <mode_Tuning0+0x394>
 8015dd0:	4b26      	ldr	r3, [pc, #152]	; (8015e6c <mode_Tuning0+0x45c>)
 8015dd2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015dd6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015dda:	dde3      	ble.n	8015da4 <mode_Tuning0+0x394>
				}
			}
			pl_DriveMotor_stop();
 8015ddc:	f7f2 f816 	bl	8007e0c <pl_DriveMotor_stop>
			pl_r_blue_LED(OFF);
 8015de0:	2000      	movs	r0, #0
 8015de2:	f7f1 fb09 	bl	80073f8 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015de6:	2000      	movs	r0, #0
 8015de8:	f7f1 fb18 	bl	800741c <pl_l_blue_LED>
		break;
 8015dec:	e148      	b.n	8016080 <mode_Tuning0+0x670>
 8015dee:	bf00      	nop
 8015df0:	2000edc4 	.word	0x2000edc4
 8015df4:	464b2000 	.word	0x464b2000
 8015df8:	44c80000 	.word	0x44c80000
 8015dfc:	00000000 	.word	0x00000000
 8015e00:	44070000 	.word	0x44070000
 8015e04:	457a0000 	.word	0x457a0000
 8015e08:	43c80000 	.word	0x43c80000
 8015e0c:	43340000 	.word	0x43340000
 8015e10:	466a6000 	.word	0x466a6000
 8015e14:	44fa0000 	.word	0x44fa0000
 8015e18:	469c4000 	.word	0x469c4000
 8015e1c:	45160000 	.word	0x45160000
 8015e20:	447a0000 	.word	0x447a0000
 8015e24:	c3160000 	.word	0xc3160000
 8015e28:	c1a40000 	.word	0xc1a40000
 8015e2c:	45bb8000 	.word	0x45bb8000
 8015e30:	43960000 	.word	0x43960000
 8015e34:	44a8c000 	.word	0x44a8c000
 8015e38:	2000ef84 	.word	0x2000ef84
 8015e3c:	2000080c 	.word	0x2000080c
 8015e40:	3f7d70a4 	.word	0x3f7d70a4
 8015e44:	20000264 	.word	0x20000264
 8015e48:	468ca000 	.word	0x468ca000
 8015e4c:	452f0000 	.word	0x452f0000
 8015e50:	44340000 	.word	0x44340000
 8015e54:	465ac000 	.word	0x465ac000
 8015e58:	c4fa0000 	.word	0xc4fa0000
 8015e5c:	c4340000 	.word	0xc4340000
 8015e60:	43fa0000 	.word	0x43fa0000
 8015e64:	443eeb39 	.word	0x443eeb39
 8015e68:	2000edd0 	.word	0x2000edd0
 8015e6c:	200002bc 	.word	0x200002bc
		case 11:
		record_mode=1;
 8015e70:	4ba0      	ldr	r3, [pc, #640]	; (80160f4 <mode_Tuning0+0x6e4>)
 8015e72:	2201      	movs	r2, #1
 8015e74:	701a      	strb	r2, [r3, #0]
		mode.WallControlMode=0;
 8015e76:	2300      	movs	r3, #0
 8015e78:	753b      	strb	r3, [r7, #20]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT, 0, 0, 300, 6000,mode);
 8015e7a:	6978      	ldr	r0, [r7, #20]
 8015e7c:	ed9f 2a9e 	vldr	s4, [pc, #632]	; 80160f8 <mode_Tuning0+0x6e8>
 8015e80:	eddf 1a9e 	vldr	s3, [pc, #632]	; 80160fc <mode_Tuning0+0x6ec>
 8015e84:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 8016100 <mode_Tuning0+0x6f0>
 8015e88:	eddf 0a9d 	vldr	s1, [pc, #628]	; 8016100 <mode_Tuning0+0x6f0>
 8015e8c:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8016104 <mode_Tuning0+0x6f4>
 8015e90:	f7ed fac4 	bl	800341c <straight_table2>
		break;
 8015e94:	e0f4      	b.n	8016080 <mode_Tuning0+0x670>
		case 12:
		record_mode=2;
 8015e96:	4b97      	ldr	r3, [pc, #604]	; (80160f4 <mode_Tuning0+0x6e4>)
 8015e98:	2202      	movs	r2, #2
 8015e9a:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<40;i++){
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	61fb      	str	r3, [r7, #28]
 8015ea0:	e00e      	b.n	8015ec0 <mode_Tuning0+0x4b0>
		turning_table2(90, 0, 0, 400, 3000);
 8015ea2:	ed9f 2a99 	vldr	s4, [pc, #612]	; 8016108 <mode_Tuning0+0x6f8>
 8015ea6:	eddf 1a99 	vldr	s3, [pc, #612]	; 801610c <mode_Tuning0+0x6fc>
 8015eaa:	ed9f 1a95 	vldr	s2, [pc, #596]	; 8016100 <mode_Tuning0+0x6f0>
 8015eae:	eddf 0a94 	vldr	s1, [pc, #592]	; 8016100 <mode_Tuning0+0x6f0>
 8015eb2:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8016110 <mode_Tuning0+0x700>
 8015eb6:	f7ed ffd3 	bl	8003e60 <turning_table2>
		for(int i=0;i<40;i++){
 8015eba:	69fb      	ldr	r3, [r7, #28]
 8015ebc:	3301      	adds	r3, #1
 8015ebe:	61fb      	str	r3, [r7, #28]
 8015ec0:	69fb      	ldr	r3, [r7, #28]
 8015ec2:	2b27      	cmp	r3, #39	; 0x27
 8015ec4:	dded      	ble.n	8015ea2 <mode_Tuning0+0x492>
		}
		break;
 8015ec6:	e0db      	b.n	8016080 <mode_Tuning0+0x670>
		case 13:
			record_mode=2;
 8015ec8:	4b8a      	ldr	r3, [pc, #552]	; (80160f4 <mode_Tuning0+0x6e4>)
 8015eca:	2202      	movs	r2, #2
 8015ecc:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8015ece:	2301      	movs	r3, #1
 8015ed0:	753b      	strb	r3, [r7, #20]
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8015ed2:	4b90      	ldr	r3, [pc, #576]	; (8016114 <mode_Tuning0+0x704>)
 8015ed4:	edd3 6a02 	vldr	s13, [r3, #8]
 8015ed8:	4b8e      	ldr	r3, [pc, #568]	; (8016114 <mode_Tuning0+0x704>)
 8015eda:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 8015ede:	4b8d      	ldr	r3, [pc, #564]	; (8016114 <mode_Tuning0+0x704>)
 8015ee0:	ed93 7a02 	vldr	s14, [r3, #8]
 8015ee4:	4b8b      	ldr	r3, [pc, #556]	; (8016114 <mode_Tuning0+0x704>)
 8015ee6:	edd3 7a02 	vldr	s15, [r3, #8]
 8015eea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015eee:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8015ef2:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8015ef6:	eddf 5a88 	vldr	s11, [pc, #544]	; 8016118 <mode_Tuning0+0x708>
 8015efa:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8015efe:	6978      	ldr	r0, [r7, #20]
 8015f00:	eeb0 2a47 	vmov.f32	s4, s14
 8015f04:	eef0 1a46 	vmov.f32	s3, s12
 8015f08:	eeb0 1a66 	vmov.f32	s2, s13
 8015f0c:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8016100 <mode_Tuning0+0x6f0>
 8015f10:	ed9f 0a82 	vldr	s0, [pc, #520]	; 801611c <mode_Tuning0+0x70c>
 8015f14:	f7ed fa82 	bl	800341c <straight_table2>
			for(int i=0;i<40;i++){
 8015f18:	2300      	movs	r3, #0
 8015f1a:	61bb      	str	r3, [r7, #24]
 8015f1c:	e037      	b.n	8015f8e <mode_Tuning0+0x57e>
			straight_table2(MAZE_OFFSET, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8015f1e:	4b7d      	ldr	r3, [pc, #500]	; (8016114 <mode_Tuning0+0x704>)
 8015f20:	edd3 6a02 	vldr	s13, [r3, #8]
 8015f24:	4b7b      	ldr	r3, [pc, #492]	; (8016114 <mode_Tuning0+0x704>)
 8015f26:	ed93 6a02 	vldr	s12, [r3, #8]
 8015f2a:	4b7a      	ldr	r3, [pc, #488]	; (8016114 <mode_Tuning0+0x704>)
 8015f2c:	edd3 5a02 	vldr	s11, [r3, #8]
									speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 8015f30:	4b78      	ldr	r3, [pc, #480]	; (8016114 <mode_Tuning0+0x704>)
 8015f32:	ed93 7a02 	vldr	s14, [r3, #8]
 8015f36:	4b77      	ldr	r3, [pc, #476]	; (8016114 <mode_Tuning0+0x704>)
 8015f38:	edd3 7a02 	vldr	s15, [r3, #8]
 8015f3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015f40:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8015f44:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(MAZE_OFFSET, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8015f48:	ed9f 5a73 	vldr	s10, [pc, #460]	; 8016118 <mode_Tuning0+0x708>
 8015f4c:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8015f50:	6978      	ldr	r0, [r7, #20]
 8015f52:	eeb0 2a47 	vmov.f32	s4, s14
 8015f56:	eef0 1a65 	vmov.f32	s3, s11
 8015f5a:	eeb0 1a46 	vmov.f32	s2, s12
 8015f5e:	eef0 0a66 	vmov.f32	s1, s13
 8015f62:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8015f66:	f7ed fa59 	bl	800341c <straight_table2>
			slalomR(speed300_exploration.slalom_R, OFF,EXPLORATION,0,300);
 8015f6a:	4b6a      	ldr	r3, [pc, #424]	; (8016114 <mode_Tuning0+0x704>)
 8015f6c:	2200      	movs	r2, #0
 8015f6e:	9203      	str	r2, [sp, #12]
 8015f70:	2200      	movs	r2, #0
 8015f72:	9202      	str	r2, [sp, #8]
 8015f74:	2200      	movs	r2, #0
 8015f76:	9201      	str	r2, [sp, #4]
 8015f78:	699a      	ldr	r2, [r3, #24]
 8015f7a:	9200      	str	r2, [sp, #0]
 8015f7c:	3308      	adds	r3, #8
 8015f7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015f80:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 80160fc <mode_Tuning0+0x6ec>
 8015f84:	f7f3 fe28 	bl	8009bd8 <slalomR>
			for(int i=0;i<40;i++){
 8015f88:	69bb      	ldr	r3, [r7, #24]
 8015f8a:	3301      	adds	r3, #1
 8015f8c:	61bb      	str	r3, [r7, #24]
 8015f8e:	69bb      	ldr	r3, [r7, #24]
 8015f90:	2b27      	cmp	r3, #39	; 0x27
 8015f92:	ddc4      	ble.n	8015f1e <mode_Tuning0+0x50e>
			}
			mode.WallControlMode=0;
 8015f94:	2300      	movs	r3, #0
 8015f96:	753b      	strb	r3, [r7, #20]
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 8015f98:	4b5e      	ldr	r3, [pc, #376]	; (8016114 <mode_Tuning0+0x704>)
 8015f9a:	edd3 6a02 	vldr	s13, [r3, #8]
 8015f9e:	4b5d      	ldr	r3, [pc, #372]	; (8016114 <mode_Tuning0+0x704>)
 8015fa0:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 8015fa4:	4b5b      	ldr	r3, [pc, #364]	; (8016114 <mode_Tuning0+0x704>)
 8015fa6:	ed93 7a02 	vldr	s14, [r3, #8]
 8015faa:	4b5a      	ldr	r3, [pc, #360]	; (8016114 <mode_Tuning0+0x704>)
 8015fac:	edd3 7a02 	vldr	s15, [r3, #8]
 8015fb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015fb4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8015fb8:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 8015fbc:	eddf 5a56 	vldr	s11, [pc, #344]	; 8016118 <mode_Tuning0+0x708>
 8015fc0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8015fc4:	6978      	ldr	r0, [r7, #20]
 8015fc6:	eeb0 2a47 	vmov.f32	s4, s14
 8015fca:	eef0 1a46 	vmov.f32	s3, s12
 8015fce:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 8016100 <mode_Tuning0+0x6f0>
 8015fd2:	eef0 0a66 	vmov.f32	s1, s13
 8015fd6:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8016118 <mode_Tuning0+0x708>
 8015fda:	f7ed fa1f 	bl	800341c <straight_table2>
			//pl_r_blue_LED(ON);
			//pl_l_blue_LED(ON);
			//no_frontwall_straight();
			//pl_r_blue_LED(OFF);
			//pl_l_blue_LED(OFF);
		break;
 8015fde:	e04f      	b.n	8016080 <mode_Tuning0+0x670>
		case 14://宴会芸＋吸引
//			record_mode=2;
//			for(int i=0;i<40;i++){
//			turning_table2(90, 0, 0, 930, 11000);
//			}
			highspeed_mode = 1;
 8015fe0:	4b4f      	ldr	r3, [pc, #316]	; (8016120 <mode_Tuning0+0x710>)
 8015fe2:	2201      	movs	r2, #1
 8015fe4:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 8015fe6:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8016124 <mode_Tuning0+0x714>
 8015fea:	f7f1 ff47 	bl	8007e7c <pl_FunMotor_duty>
			pl_FunMotor_start();
 8015fee:	f7f1 ff31 	bl	8007e54 <pl_FunMotor_start>
			HAL_Delay(600);
 8015ff2:	f44f 7016 	mov.w	r0, #600	; 0x258
 8015ff6:	f002 fd69 	bl	8018acc <HAL_Delay>
			reset_gyro();
 8015ffa:	f7eb fdd5 	bl	8001ba8 <reset_gyro>
			reset_speed();
 8015ffe:	f7eb f811 	bl	8001024 <reset_speed>
			reset_distance();
 8016002:	f7ea ffcb 	bl	8000f9c <reset_distance>
			clear_Ierror();
 8016006:	f7ee fd07 	bl	8004a18 <clear_Ierror>
			record_mode=3;
 801600a:	4b3a      	ldr	r3, [pc, #232]	; (80160f4 <mode_Tuning0+0x6e4>)
 801600c:	2203      	movs	r2, #3
 801600e:	701a      	strb	r2, [r3, #0]
//			mode.WallControlMode=0;
//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
			mode.WallControlMode=1;
 8016010:	2301      	movs	r3, #1
 8016012:	753b      	strb	r3, [r7, #20]
			straight_table2(90*8, 0, 0, 4000, 17000,mode);
 8016014:	6978      	ldr	r0, [r7, #20]
 8016016:	ed9f 2a44 	vldr	s4, [pc, #272]	; 8016128 <mode_Tuning0+0x718>
 801601a:	eddf 1a44 	vldr	s3, [pc, #272]	; 801612c <mode_Tuning0+0x71c>
 801601e:	ed9f 1a38 	vldr	s2, [pc, #224]	; 8016100 <mode_Tuning0+0x6f0>
 8016022:	eddf 0a37 	vldr	s1, [pc, #220]	; 8016100 <mode_Tuning0+0x6f0>
 8016026:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8016130 <mode_Tuning0+0x720>
 801602a:	f7ed f9f7 	bl	800341c <straight_table2>
		break;
 801602e:	e027      	b.n	8016080 <mode_Tuning0+0x670>
		case 15:
			highspeed_mode = 1;
 8016030:	4b3b      	ldr	r3, [pc, #236]	; (8016120 <mode_Tuning0+0x710>)
 8016032:	2201      	movs	r2, #1
 8016034:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 8016036:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8016124 <mode_Tuning0+0x714>
 801603a:	f7f1 ff1f 	bl	8007e7c <pl_FunMotor_duty>
			pl_FunMotor_start();
 801603e:	f7f1 ff09 	bl	8007e54 <pl_FunMotor_start>
			HAL_Delay(600);
 8016042:	f44f 7016 	mov.w	r0, #600	; 0x258
 8016046:	f002 fd41 	bl	8018acc <HAL_Delay>
			reset_gyro();
 801604a:	f7eb fdad 	bl	8001ba8 <reset_gyro>
			reset_speed();
 801604e:	f7ea ffe9 	bl	8001024 <reset_speed>
			reset_distance();
 8016052:	f7ea ffa3 	bl	8000f9c <reset_distance>
			clear_Ierror();
 8016056:	f7ee fcdf 	bl	8004a18 <clear_Ierror>
			record_mode=3;
 801605a:	4b26      	ldr	r3, [pc, #152]	; (80160f4 <mode_Tuning0+0x6e4>)
 801605c:	2203      	movs	r2, #3
 801605e:	701a      	strb	r2, [r3, #0]
//			mode.WallControlMode=0;
//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
			mode.WallControlMode=3;
 8016060:	2303      	movs	r3, #3
 8016062:	753b      	strb	r3, [r7, #20]
			straight_table2(90*7.5*sqrt(2), 0, 0, 4000, 20000,mode);
 8016064:	6978      	ldr	r0, [r7, #20]
 8016066:	ed9f 2a33 	vldr	s4, [pc, #204]	; 8016134 <mode_Tuning0+0x724>
 801606a:	eddf 1a30 	vldr	s3, [pc, #192]	; 801612c <mode_Tuning0+0x71c>
 801606e:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8016100 <mode_Tuning0+0x6f0>
 8016072:	eddf 0a23 	vldr	s1, [pc, #140]	; 8016100 <mode_Tuning0+0x6f0>
 8016076:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8016138 <mode_Tuning0+0x728>
 801607a:	f7ed f9cf 	bl	800341c <straight_table2>
//			record_mode=1;
//			mode.WallControlMode=0;
//			straight_table2(BACK_TO_CENTER_SLANT, 0, 0, 300, 6000,mode);
		break;
 801607e:	bf00      	nop
	}
	record_mode=0;
 8016080:	4b1c      	ldr	r3, [pc, #112]	; (80160f4 <mode_Tuning0+0x6e4>)
 8016082:	2200      	movs	r2, #0
 8016084:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8016086:	2003      	movs	r0, #3
 8016088:	f7f1 fe8c 	bl	8007da4 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 801608c:	2003      	movs	r0, #3
 801608e:	f7f1 fe61 	bl	8007d54 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8016092:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016096:	f7f2 f983 	bl	80083a0 <wait_ms_NoReset>
	pl_FunMotor_stop();
 801609a:	f7f1 fee5 	bl	8007e68 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 801609e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80160a2:	f7f2 f97d 	bl	80083a0 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 80160a6:	2000      	movs	r0, #0
 80160a8:	f7f1 fe4a 	bl	8007d40 <pl_DriveMotor_standby>
	record_mode=0;
 80160ac:	4b11      	ldr	r3, [pc, #68]	; (80160f4 <mode_Tuning0+0x6e4>)
 80160ae:	2200      	movs	r2, #0
 80160b0:	701a      	strb	r2, [r3, #0]
	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80160b2:	e002      	b.n	80160ba <mode_Tuning0+0x6aa>
		HAL_Delay(1);
 80160b4:	2001      	movs	r0, #1
 80160b6:	f002 fd09 	bl	8018acc <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80160ba:	4b20      	ldr	r3, [pc, #128]	; (801613c <mode_Tuning0+0x72c>)
 80160bc:	681b      	ldr	r3, [r3, #0]
 80160be:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80160c2:	ddf7      	ble.n	80160b4 <mode_Tuning0+0x6a4>
 80160c4:	4b1d      	ldr	r3, [pc, #116]	; (801613c <mode_Tuning0+0x72c>)
 80160c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80160ca:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80160ce:	ddf1      	ble.n	80160b4 <mode_Tuning0+0x6a4>
 80160d0:	4b1a      	ldr	r3, [pc, #104]	; (801613c <mode_Tuning0+0x72c>)
 80160d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80160d6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80160da:	ddeb      	ble.n	80160b4 <mode_Tuning0+0x6a4>
	}
	pl_r_blue_LED(ON);
 80160dc:	2001      	movs	r0, #1
 80160de:	f7f1 f98b 	bl	80073f8 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 80160e2:	2001      	movs	r0, #1
 80160e4:	f7f1 f99a 	bl	800741c <pl_l_blue_LED>
	record_print();
 80160e8:	f000 fd52 	bl	8016b90 <record_print>



}
 80160ec:	bf00      	nop
 80160ee:	3724      	adds	r7, #36	; 0x24
 80160f0:	46bd      	mov	sp, r7
 80160f2:	bd90      	pop	{r4, r7, pc}
 80160f4:	2000edc4 	.word	0x2000edc4
 80160f8:	45bb8000 	.word	0x45bb8000
 80160fc:	43960000 	.word	0x43960000
 8016100:	00000000 	.word	0x00000000
 8016104:	420a0000 	.word	0x420a0000
 8016108:	453b8000 	.word	0x453b8000
 801610c:	43c80000 	.word	0x43c80000
 8016110:	42b40000 	.word	0x42b40000
 8016114:	2000ef84 	.word	0x2000ef84
 8016118:	42340000 	.word	0x42340000
 801611c:	431b8000 	.word	0x431b8000
 8016120:	2000080c 	.word	0x2000080c
 8016124:	3f7d70a4 	.word	0x3f7d70a4
 8016128:	4684d000 	.word	0x4684d000
 801612c:	457a0000 	.word	0x457a0000
 8016130:	44340000 	.word	0x44340000
 8016134:	469c4000 	.word	0x469c4000
 8016138:	446ea607 	.word	0x446ea607
 801613c:	200002bc 	.word	0x200002bc

08016140 <mode_WallSensorTuning>:


void mode_WallSensorTuning(unsigned char main_modeR){
 8016140:	b580      	push	{r7, lr}
 8016142:	b084      	sub	sp, #16
 8016144:	af00      	add	r7, sp, #0
 8016146:	4603      	mov	r3, r0
 8016148:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 801614a:	2300      	movs	r3, #0
 801614c:	723b      	strb	r3, [r7, #8]
	mode.WallControlStatus=0;
 801614e:	2300      	movs	r3, #0
 8016150:	727b      	strb	r3, [r7, #9]
	mode.WallCutMode=0;
 8016152:	2300      	movs	r3, #0
 8016154:	72fb      	strb	r3, [r7, #11]
	mode.calMazeMode=0;
 8016156:	2300      	movs	r3, #0
 8016158:	72bb      	strb	r3, [r7, #10]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 801615a:	2001      	movs	r0, #1
 801615c:	f7f1 fdf0 	bl	8007d40 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8016160:	2003      	movs	r0, #3
 8016162:	f7f1 fdf7 	bl	8007d54 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8016166:	2003      	movs	r0, #3
 8016168:	f7f1 fe1c 	bl	8007da4 <pl_R_DriveMotor_mode>
	reset_gyro();
 801616c:	f7eb fd1c 	bl	8001ba8 <reset_gyro>
	reset_speed();
 8016170:	f7ea ff58 	bl	8001024 <reset_speed>
	clear_Ierror();
 8016174:	f7ee fc50 	bl	8004a18 <clear_Ierror>

	switch (main_modeR) {
 8016178:	79fb      	ldrb	r3, [r7, #7]
 801617a:	2b0f      	cmp	r3, #15
 801617c:	f200 81b0 	bhi.w	80164e0 <mode_WallSensorTuning+0x3a0>
 8016180:	a201      	add	r2, pc, #4	; (adr r2, 8016188 <mode_WallSensorTuning+0x48>)
 8016182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016186:	bf00      	nop
 8016188:	080161c9 	.word	0x080161c9
 801618c:	080161ef 	.word	0x080161ef
 8016190:	08016207 	.word	0x08016207
 8016194:	0801627d 	.word	0x0801627d
 8016198:	080162f3 	.word	0x080162f3
 801619c:	08016369 	.word	0x08016369
 80161a0:	080163d9 	.word	0x080163d9
 80161a4:	080163ff 	.word	0x080163ff
 80161a8:	08016425 	.word	0x08016425
 80161ac:	0801644b 	.word	0x0801644b
 80161b0:	080164e1 	.word	0x080164e1
 80161b4:	080164e1 	.word	0x080164e1
 80161b8:	080164e1 	.word	0x080164e1
 80161bc:	080164e1 	.word	0x080164e1
 80161c0:	080164e1 	.word	0x080164e1
 80161c4:	08016471 	.word	0x08016471
		case 0://横壁追従制御
			record_mode=16;
 80161c8:	4bd2      	ldr	r3, [pc, #840]	; (8016514 <mode_WallSensorTuning+0x3d4>)
 80161ca:	2210      	movs	r2, #16
 80161cc:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80161ce:	2301      	movs	r3, #1
 80161d0:	723b      	strb	r3, [r7, #8]
			straight_table2(180*8, 0, 0, 500, 5000,mode);
 80161d2:	68b8      	ldr	r0, [r7, #8]
 80161d4:	ed9f 2ad0 	vldr	s4, [pc, #832]	; 8016518 <mode_WallSensorTuning+0x3d8>
 80161d8:	eddf 1ad0 	vldr	s3, [pc, #832]	; 801651c <mode_WallSensorTuning+0x3dc>
 80161dc:	ed9f 1ad0 	vldr	s2, [pc, #832]	; 8016520 <mode_WallSensorTuning+0x3e0>
 80161e0:	eddf 0acf 	vldr	s1, [pc, #828]	; 8016520 <mode_WallSensorTuning+0x3e0>
 80161e4:	ed9f 0acf 	vldr	s0, [pc, #828]	; 8016524 <mode_WallSensorTuning+0x3e4>
 80161e8:	f7ed f918 	bl	800341c <straight_table2>
		break;
 80161ec:	e178      	b.n	80164e0 <mode_WallSensorTuning+0x3a0>
		case 1://前壁制御
			for(int ii=0;ii<=20;ii++){
 80161ee:	2300      	movs	r3, #0
 80161f0:	60fb      	str	r3, [r7, #12]
 80161f2:	e004      	b.n	80161fe <mode_WallSensorTuning+0xbe>
			no_frontwall_straight();
 80161f4:	f7ee f930 	bl	8004458 <no_frontwall_straight>
			for(int ii=0;ii<=20;ii++){
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	3301      	adds	r3, #1
 80161fc:	60fb      	str	r3, [r7, #12]
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	2b14      	cmp	r3, #20
 8016202:	ddf7      	ble.n	80161f4 <mode_WallSensorTuning+0xb4>
			}
		break;
 8016204:	e16c      	b.n	80164e0 <mode_WallSensorTuning+0x3a0>
		case 2://壁切れ90度
			record_mode = 7;
 8016206:	4bc3      	ldr	r3, [pc, #780]	; (8016514 <mode_WallSensorTuning+0x3d4>)
 8016208:	2207      	movs	r2, #7
 801620a:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 801620c:	2300      	movs	r3, #0
 801620e:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8016210:	2300      	movs	r3, #0
 8016212:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016214:	2300      	movs	r3, #0
 8016216:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016218:	2300      	movs	r3, #0
 801621a:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 135, 0, 300, 300,3000,mode);
 801621c:	68b8      	ldr	r0, [r7, #8]
 801621e:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 8016528 <mode_WallSensorTuning+0x3e8>
 8016222:	eddf 1ac2 	vldr	s3, [pc, #776]	; 801652c <mode_WallSensorTuning+0x3ec>
 8016226:	ed9f 1ac1 	vldr	s2, [pc, #772]	; 801652c <mode_WallSensorTuning+0x3ec>
 801622a:	eddf 0abd 	vldr	s1, [pc, #756]	; 8016520 <mode_WallSensorTuning+0x3e0>
 801622e:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 8016530 <mode_WallSensorTuning+0x3f0>
 8016232:	f7ed f8f3 	bl	800341c <straight_table2>
			mode.WallCutMode=1;
 8016236:	2301      	movs	r3, #1
 8016238:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 801623a:	2300      	movs	r3, #0
 801623c:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 801623e:	68b8      	ldr	r0, [r7, #8]
 8016240:	ed9f 2ab9 	vldr	s4, [pc, #740]	; 8016528 <mode_WallSensorTuning+0x3e8>
 8016244:	eddf 1ab9 	vldr	s3, [pc, #740]	; 801652c <mode_WallSensorTuning+0x3ec>
 8016248:	ed9f 1ab8 	vldr	s2, [pc, #736]	; 801652c <mode_WallSensorTuning+0x3ec>
 801624c:	eddf 0ab7 	vldr	s1, [pc, #732]	; 801652c <mode_WallSensorTuning+0x3ec>
 8016250:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 8016534 <mode_WallSensorTuning+0x3f4>
 8016254:	f7ed f8e2 	bl	800341c <straight_table2>
			mode.WallControlMode=0;
 8016258:	2300      	movs	r3, #0
 801625a:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 801625c:	2300      	movs	r3, #0
 801625e:	72fb      	strb	r3, [r7, #11]
			straight_table2(45 + 22.5, 300, 0, 300,3000,mode);
 8016260:	68b8      	ldr	r0, [r7, #8]
 8016262:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 8016528 <mode_WallSensorTuning+0x3e8>
 8016266:	eddf 1ab1 	vldr	s3, [pc, #708]	; 801652c <mode_WallSensorTuning+0x3ec>
 801626a:	ed9f 1aad 	vldr	s2, [pc, #692]	; 8016520 <mode_WallSensorTuning+0x3e0>
 801626e:	eddf 0aaf 	vldr	s1, [pc, #700]	; 801652c <mode_WallSensorTuning+0x3ec>
 8016272:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8016538 <mode_WallSensorTuning+0x3f8>
 8016276:	f7ed f8d1 	bl	800341c <straight_table2>
		break;
 801627a:	e131      	b.n	80164e0 <mode_WallSensorTuning+0x3a0>
		case 3://壁切れ45度//90°大回り
			record_mode = 8;
 801627c:	4ba5      	ldr	r3, [pc, #660]	; (8016514 <mode_WallSensorTuning+0x3d4>)
 801627e:	2208      	movs	r2, #8
 8016280:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016282:	2300      	movs	r3, #0
 8016284:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8016286:	2300      	movs	r3, #0
 8016288:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 801628a:	2300      	movs	r3, #0
 801628c:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 801628e:	2300      	movs	r3, #0
 8016290:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 300, 300,3000,mode);
 8016292:	68b8      	ldr	r0, [r7, #8]
 8016294:	ed9f 2aa4 	vldr	s4, [pc, #656]	; 8016528 <mode_WallSensorTuning+0x3e8>
 8016298:	eddf 1aa4 	vldr	s3, [pc, #656]	; 801652c <mode_WallSensorTuning+0x3ec>
 801629c:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 801652c <mode_WallSensorTuning+0x3ec>
 80162a0:	eddf 0a9f 	vldr	s1, [pc, #636]	; 8016520 <mode_WallSensorTuning+0x3e0>
 80162a4:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 801653c <mode_WallSensorTuning+0x3fc>
 80162a8:	f7ed f8b8 	bl	800341c <straight_table2>
			mode.WallCutMode=2;
 80162ac:	2302      	movs	r3, #2
 80162ae:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 80162b0:	2300      	movs	r3, #0
 80162b2:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 80162b4:	68b8      	ldr	r0, [r7, #8]
 80162b6:	ed9f 2a9c 	vldr	s4, [pc, #624]	; 8016528 <mode_WallSensorTuning+0x3e8>
 80162ba:	eddf 1a9c 	vldr	s3, [pc, #624]	; 801652c <mode_WallSensorTuning+0x3ec>
 80162be:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 801652c <mode_WallSensorTuning+0x3ec>
 80162c2:	eddf 0a9a 	vldr	s1, [pc, #616]	; 801652c <mode_WallSensorTuning+0x3ec>
 80162c6:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8016534 <mode_WallSensorTuning+0x3f4>
 80162ca:	f7ed f8a7 	bl	800341c <straight_table2>
			mode.WallControlMode=0;
 80162ce:	2300      	movs	r3, #0
 80162d0:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 80162d2:	2300      	movs	r3, #0
 80162d4:	72fb      	strb	r3, [r7, #11]
			straight_table2(45+22.5, 300, 0, 300,3000,mode);
 80162d6:	68b8      	ldr	r0, [r7, #8]
 80162d8:	ed9f 2a93 	vldr	s4, [pc, #588]	; 8016528 <mode_WallSensorTuning+0x3e8>
 80162dc:	eddf 1a93 	vldr	s3, [pc, #588]	; 801652c <mode_WallSensorTuning+0x3ec>
 80162e0:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 8016520 <mode_WallSensorTuning+0x3e0>
 80162e4:	eddf 0a91 	vldr	s1, [pc, #580]	; 801652c <mode_WallSensorTuning+0x3ec>
 80162e8:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8016538 <mode_WallSensorTuning+0x3f8>
 80162ec:	f7ed f896 	bl	800341c <straight_table2>
		break;
 80162f0:	e0f6      	b.n	80164e0 <mode_WallSensorTuning+0x3a0>
		case 4://壁切れ45度斜め(考え中)
			record_mode = 8;
 80162f2:	4b88      	ldr	r3, [pc, #544]	; (8016514 <mode_WallSensorTuning+0x3d4>)
 80162f4:	2208      	movs	r2, #8
 80162f6:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 80162f8:	2300      	movs	r3, #0
 80162fa:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 80162fc:	2300      	movs	r3, #0
 80162fe:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016300:	2300      	movs	r3, #0
 8016302:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016304:	2300      	movs	r3, #0
 8016306:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT + 90*sqrt(2), 0, 300, 300,3000,mode);
 8016308:	68b8      	ldr	r0, [r7, #8]
 801630a:	ed9f 2a87 	vldr	s4, [pc, #540]	; 8016528 <mode_WallSensorTuning+0x3e8>
 801630e:	eddf 1a87 	vldr	s3, [pc, #540]	; 801652c <mode_WallSensorTuning+0x3ec>
 8016312:	ed9f 1a86 	vldr	s2, [pc, #536]	; 801652c <mode_WallSensorTuning+0x3ec>
 8016316:	eddf 0a82 	vldr	s1, [pc, #520]	; 8016520 <mode_WallSensorTuning+0x3e0>
 801631a:	ed9f 0a89 	vldr	s0, [pc, #548]	; 8016540 <mode_WallSensorTuning+0x400>
 801631e:	f7ed f87d 	bl	800341c <straight_table2>
			mode.WallCutMode=3;
 8016322:	2303      	movs	r3, #3
 8016324:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8016326:	2300      	movs	r3, #0
 8016328:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 801632a:	68b8      	ldr	r0, [r7, #8]
 801632c:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 8016528 <mode_WallSensorTuning+0x3e8>
 8016330:	eddf 1a7e 	vldr	s3, [pc, #504]	; 801652c <mode_WallSensorTuning+0x3ec>
 8016334:	ed9f 1a7d 	vldr	s2, [pc, #500]	; 801652c <mode_WallSensorTuning+0x3ec>
 8016338:	eddf 0a7c 	vldr	s1, [pc, #496]	; 801652c <mode_WallSensorTuning+0x3ec>
 801633c:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8016544 <mode_WallSensorTuning+0x404>
 8016340:	f7ed f86c 	bl	800341c <straight_table2>
			mode.WallControlMode=0;
 8016344:	2300      	movs	r3, #0
 8016346:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8016348:	2300      	movs	r3, #0
 801634a:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 801634c:	68b8      	ldr	r0, [r7, #8]
 801634e:	ed9f 2a76 	vldr	s4, [pc, #472]	; 8016528 <mode_WallSensorTuning+0x3e8>
 8016352:	eddf 1a76 	vldr	s3, [pc, #472]	; 801652c <mode_WallSensorTuning+0x3ec>
 8016356:	ed9f 1a72 	vldr	s2, [pc, #456]	; 8016520 <mode_WallSensorTuning+0x3e0>
 801635a:	eddf 0a74 	vldr	s1, [pc, #464]	; 801652c <mode_WallSensorTuning+0x3ec>
 801635e:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8016548 <mode_WallSensorTuning+0x408>
 8016362:	f7ed f85b 	bl	800341c <straight_table2>
		break;
 8016366:	e0bb      	b.n	80164e0 <mode_WallSensorTuning+0x3a0>
		case 5://壁切れ45度斜め(考え中)
			mode.WallControlMode=0;//3でもいいかも
 8016368:	2300      	movs	r3, #0
 801636a:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 801636c:	2300      	movs	r3, #0
 801636e:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016370:	2300      	movs	r3, #0
 8016372:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016374:	2300      	movs	r3, #0
 8016376:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT+90*sqrt(2), 0, 300, 300,3000,mode);
 8016378:	68b8      	ldr	r0, [r7, #8]
 801637a:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 8016528 <mode_WallSensorTuning+0x3e8>
 801637e:	eddf 1a6b 	vldr	s3, [pc, #428]	; 801652c <mode_WallSensorTuning+0x3ec>
 8016382:	ed9f 1a6a 	vldr	s2, [pc, #424]	; 801652c <mode_WallSensorTuning+0x3ec>
 8016386:	eddf 0a66 	vldr	s1, [pc, #408]	; 8016520 <mode_WallSensorTuning+0x3e0>
 801638a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8016540 <mode_WallSensorTuning+0x400>
 801638e:	f7ed f845 	bl	800341c <straight_table2>
			mode.WallCutMode=4;
 8016392:	2304      	movs	r3, #4
 8016394:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8016396:	2300      	movs	r3, #0
 8016398:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 801639a:	68b8      	ldr	r0, [r7, #8]
 801639c:	ed9f 2a62 	vldr	s4, [pc, #392]	; 8016528 <mode_WallSensorTuning+0x3e8>
 80163a0:	eddf 1a62 	vldr	s3, [pc, #392]	; 801652c <mode_WallSensorTuning+0x3ec>
 80163a4:	ed9f 1a61 	vldr	s2, [pc, #388]	; 801652c <mode_WallSensorTuning+0x3ec>
 80163a8:	eddf 0a60 	vldr	s1, [pc, #384]	; 801652c <mode_WallSensorTuning+0x3ec>
 80163ac:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8016544 <mode_WallSensorTuning+0x404>
 80163b0:	f7ed f834 	bl	800341c <straight_table2>
			mode.WallControlMode=0;
 80163b4:	2300      	movs	r3, #0
 80163b6:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 80163b8:	2300      	movs	r3, #0
 80163ba:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 80163bc:	68b8      	ldr	r0, [r7, #8]
 80163be:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 8016528 <mode_WallSensorTuning+0x3e8>
 80163c2:	eddf 1a5a 	vldr	s3, [pc, #360]	; 801652c <mode_WallSensorTuning+0x3ec>
 80163c6:	ed9f 1a56 	vldr	s2, [pc, #344]	; 8016520 <mode_WallSensorTuning+0x3e0>
 80163ca:	eddf 0a58 	vldr	s1, [pc, #352]	; 801652c <mode_WallSensorTuning+0x3ec>
 80163ce:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8016548 <mode_WallSensorTuning+0x408>
 80163d2:	f7ed f823 	bl	800341c <straight_table2>
		break;
 80163d6:	e083      	b.n	80164e0 <mode_WallSensorTuning+0x3a0>
		case 6://斜め直進(90)
			record_mode=9;
 80163d8:	4b4e      	ldr	r3, [pc, #312]	; (8016514 <mode_WallSensorTuning+0x3d4>)
 80163da:	2209      	movs	r2, #9
 80163dc:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80163de:	2300      	movs	r3, #0
 80163e0:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 80163e2:	68b8      	ldr	r0, [r7, #8]
 80163e4:	ed9f 2a50 	vldr	s4, [pc, #320]	; 8016528 <mode_WallSensorTuning+0x3e8>
 80163e8:	eddf 1a50 	vldr	s3, [pc, #320]	; 801652c <mode_WallSensorTuning+0x3ec>
 80163ec:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 8016520 <mode_WallSensorTuning+0x3e0>
 80163f0:	eddf 0a4b 	vldr	s1, [pc, #300]	; 8016520 <mode_WallSensorTuning+0x3e0>
 80163f4:	ed9f 0a55 	vldr	s0, [pc, #340]	; 801654c <mode_WallSensorTuning+0x40c>
 80163f8:	f7ed f810 	bl	800341c <straight_table2>
		break;
 80163fc:	e070      	b.n	80164e0 <mode_WallSensorTuning+0x3a0>
		case 7://斜め直進(45)
			record_mode=10;
 80163fe:	4b45      	ldr	r3, [pc, #276]	; (8016514 <mode_WallSensorTuning+0x3d4>)
 8016400:	220a      	movs	r2, #10
 8016402:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016404:	2300      	movs	r3, #0
 8016406:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 8016408:	68b8      	ldr	r0, [r7, #8]
 801640a:	ed9f 2a47 	vldr	s4, [pc, #284]	; 8016528 <mode_WallSensorTuning+0x3e8>
 801640e:	eddf 1a47 	vldr	s3, [pc, #284]	; 801652c <mode_WallSensorTuning+0x3ec>
 8016412:	ed9f 1a43 	vldr	s2, [pc, #268]	; 8016520 <mode_WallSensorTuning+0x3e0>
 8016416:	eddf 0a42 	vldr	s1, [pc, #264]	; 8016520 <mode_WallSensorTuning+0x3e0>
 801641a:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 801654c <mode_WallSensorTuning+0x40c>
 801641e:	f7ec fffd 	bl	800341c <straight_table2>

		break;
 8016422:	e05d      	b.n	80164e0 <mode_WallSensorTuning+0x3a0>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 8016424:	4b3b      	ldr	r3, [pc, #236]	; (8016514 <mode_WallSensorTuning+0x3d4>)
 8016426:	2207      	movs	r2, #7
 8016428:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 801642a:	2303      	movs	r3, #3
 801642c:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 801642e:	68b8      	ldr	r0, [r7, #8]
 8016430:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 8016528 <mode_WallSensorTuning+0x3e8>
 8016434:	eddf 1a3d 	vldr	s3, [pc, #244]	; 801652c <mode_WallSensorTuning+0x3ec>
 8016438:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8016520 <mode_WallSensorTuning+0x3e0>
 801643c:	eddf 0a38 	vldr	s1, [pc, #224]	; 8016520 <mode_WallSensorTuning+0x3e0>
 8016440:	ed9f 0a42 	vldr	s0, [pc, #264]	; 801654c <mode_WallSensorTuning+0x40c>
 8016444:	f7ec ffea 	bl	800341c <straight_table2>
		break;
 8016448:	e04a      	b.n	80164e0 <mode_WallSensorTuning+0x3a0>
		case 9:
			record_mode=8;
 801644a:	4b32      	ldr	r3, [pc, #200]	; (8016514 <mode_WallSensorTuning+0x3d4>)
 801644c:	2208      	movs	r2, #8
 801644e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016450:	2303      	movs	r3, #3
 8016452:	723b      	strb	r3, [r7, #8]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 700, 10000,mode);
 8016454:	68b8      	ldr	r0, [r7, #8]
 8016456:	ed9f 2a3e 	vldr	s4, [pc, #248]	; 8016550 <mode_WallSensorTuning+0x410>
 801645a:	eddf 1a3e 	vldr	s3, [pc, #248]	; 8016554 <mode_WallSensorTuning+0x414>
 801645e:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8016520 <mode_WallSensorTuning+0x3e0>
 8016462:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8016520 <mode_WallSensorTuning+0x3e0>
 8016466:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8016558 <mode_WallSensorTuning+0x418>
 801646a:	f7ec ffd7 	bl	800341c <straight_table2>
		break;
 801646e:	e037      	b.n	80164e0 <mode_WallSensorTuning+0x3a0>
		case 10:
		break;
		case 11:
		break;
		case 15:
			mode.WallControlMode=5;
 8016470:	2305      	movs	r3, #5
 8016472:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8016474:	2300      	movs	r3, #0
 8016476:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016478:	2300      	movs	r3, #0
 801647a:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 801647c:	2300      	movs	r3, #0
 801647e:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 180, 0, 500, 500,1500,mode);
 8016480:	68b8      	ldr	r0, [r7, #8]
 8016482:	ed9f 2a36 	vldr	s4, [pc, #216]	; 801655c <mode_WallSensorTuning+0x41c>
 8016486:	eddf 1a25 	vldr	s3, [pc, #148]	; 801651c <mode_WallSensorTuning+0x3dc>
 801648a:	ed9f 1a24 	vldr	s2, [pc, #144]	; 801651c <mode_WallSensorTuning+0x3dc>
 801648e:	eddf 0a24 	vldr	s1, [pc, #144]	; 8016520 <mode_WallSensorTuning+0x3e0>
 8016492:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8016560 <mode_WallSensorTuning+0x420>
 8016496:	f7ec ffc1 	bl	800341c <straight_table2>
			mode.WallCutMode=2;
 801649a:	2302      	movs	r3, #2
 801649c:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 801649e:	2300      	movs	r3, #0
 80164a0:	723b      	strb	r3, [r7, #8]
			straight_table2(45, 500, 500, 500,1500,mode);
 80164a2:	68b8      	ldr	r0, [r7, #8]
 80164a4:	ed9f 2a2d 	vldr	s4, [pc, #180]	; 801655c <mode_WallSensorTuning+0x41c>
 80164a8:	eddf 1a1c 	vldr	s3, [pc, #112]	; 801651c <mode_WallSensorTuning+0x3dc>
 80164ac:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 801651c <mode_WallSensorTuning+0x3dc>
 80164b0:	eddf 0a1a 	vldr	s1, [pc, #104]	; 801651c <mode_WallSensorTuning+0x3dc>
 80164b4:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8016564 <mode_WallSensorTuning+0x424>
 80164b8:	f7ec ffb0 	bl	800341c <straight_table2>
			mode.WallControlMode=0;
 80164bc:	2300      	movs	r3, #0
 80164be:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 80164c0:	2300      	movs	r3, #0
 80164c2:	72fb      	strb	r3, [r7, #11]
			straight_table2(90+45, 500, 0, 500,1500,mode);
 80164c4:	68b8      	ldr	r0, [r7, #8]
 80164c6:	ed9f 2a25 	vldr	s4, [pc, #148]	; 801655c <mode_WallSensorTuning+0x41c>
 80164ca:	eddf 1a14 	vldr	s3, [pc, #80]	; 801651c <mode_WallSensorTuning+0x3dc>
 80164ce:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8016520 <mode_WallSensorTuning+0x3e0>
 80164d2:	eddf 0a12 	vldr	s1, [pc, #72]	; 801651c <mode_WallSensorTuning+0x3dc>
 80164d6:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8016568 <mode_WallSensorTuning+0x428>
 80164da:	f7ec ff9f 	bl	800341c <straight_table2>
		break;
 80164de:	bf00      	nop
	}
	record_mode=0;
 80164e0:	4b0c      	ldr	r3, [pc, #48]	; (8016514 <mode_WallSensorTuning+0x3d4>)
 80164e2:	2200      	movs	r2, #0
 80164e4:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80164e6:	2003      	movs	r0, #3
 80164e8:	f7f1 fc5c 	bl	8007da4 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80164ec:	2003      	movs	r0, #3
 80164ee:	f7f1 fc31 	bl	8007d54 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 80164f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80164f6:	f7f1 ff53 	bl	80083a0 <wait_ms_NoReset>
	pl_FunMotor_stop();
 80164fa:	f7f1 fcb5 	bl	8007e68 <pl_FunMotor_stop>
	record_mode=0;
 80164fe:	4b05      	ldr	r3, [pc, #20]	; (8016514 <mode_WallSensorTuning+0x3d4>)
 8016500:	2200      	movs	r2, #0
 8016502:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 8016504:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016508:	f7f1 ff4a 	bl	80083a0 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 801650c:	2000      	movs	r0, #0
 801650e:	f7f1 fc17 	bl	8007d40 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016512:	e02e      	b.n	8016572 <mode_WallSensorTuning+0x432>
 8016514:	2000edc4 	.word	0x2000edc4
 8016518:	459c4000 	.word	0x459c4000
 801651c:	43fa0000 	.word	0x43fa0000
 8016520:	00000000 	.word	0x00000000
 8016524:	44b40000 	.word	0x44b40000
 8016528:	453b8000 	.word	0x453b8000
 801652c:	43960000 	.word	0x43960000
 8016530:	431b8000 	.word	0x431b8000
 8016534:	41b40000 	.word	0x41b40000
 8016538:	42870000 	.word	0x42870000
 801653c:	42cd0000 	.word	0x42cd0000
 8016540:	4329c77b 	.word	0x4329c77b
 8016544:	41fe8ef6 	.word	0x41fe8ef6
 8016548:	42beeb39 	.word	0x42beeb39
 801654c:	43beeb39 	.word	0x43beeb39
 8016550:	461c4000 	.word	0x461c4000
 8016554:	442f0000 	.word	0x442f0000
 8016558:	4484977b 	.word	0x4484977b
 801655c:	44bb8000 	.word	0x44bb8000
 8016560:	43488000 	.word	0x43488000
 8016564:	42340000 	.word	0x42340000
 8016568:	43070000 	.word	0x43070000
		HAL_Delay(1);
 801656c:	2001      	movs	r0, #1
 801656e:	f002 faad 	bl	8018acc <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016572:	4b0e      	ldr	r3, [pc, #56]	; (80165ac <mode_WallSensorTuning+0x46c>)
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801657a:	ddf7      	ble.n	801656c <mode_WallSensorTuning+0x42c>
 801657c:	4b0b      	ldr	r3, [pc, #44]	; (80165ac <mode_WallSensorTuning+0x46c>)
 801657e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016582:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016586:	ddf1      	ble.n	801656c <mode_WallSensorTuning+0x42c>
 8016588:	4b08      	ldr	r3, [pc, #32]	; (80165ac <mode_WallSensorTuning+0x46c>)
 801658a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 801658e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016592:	ddeb      	ble.n	801656c <mode_WallSensorTuning+0x42c>
	}
	pl_r_blue_LED(ON);
 8016594:	2001      	movs	r0, #1
 8016596:	f7f0 ff2f 	bl	80073f8 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 801659a:	2001      	movs	r0, #1
 801659c:	f7f0 ff3e 	bl	800741c <pl_l_blue_LED>
	record_print();
 80165a0:	f000 faf6 	bl	8016b90 <record_print>



}
 80165a4:	bf00      	nop
 80165a6:	3710      	adds	r7, #16
 80165a8:	46bd      	mov	sp, r7
 80165aa:	bd80      	pop	{r7, pc}
 80165ac:	200002bc 	.word	0x200002bc

080165b0 <mode_WallSensorTuning_fast>:





void mode_WallSensorTuning_fast(unsigned char main_modeR){
 80165b0:	b580      	push	{r7, lr}
 80165b2:	b084      	sub	sp, #16
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	4603      	mov	r3, r0
 80165b8:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 80165ba:	2300      	movs	r3, #0
 80165bc:	733b      	strb	r3, [r7, #12]
	mode.WallControlStatus=0;
 80165be:	2300      	movs	r3, #0
 80165c0:	737b      	strb	r3, [r7, #13]
	mode.WallCutMode=0;
 80165c2:	2300      	movs	r3, #0
 80165c4:	73fb      	strb	r3, [r7, #15]
	mode.calMazeMode=0;
 80165c6:	2300      	movs	r3, #0
 80165c8:	73bb      	strb	r3, [r7, #14]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 80165ca:	2001      	movs	r0, #1
 80165cc:	f7f1 fbb8 	bl	8007d40 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80165d0:	2003      	movs	r0, #3
 80165d2:	f7f1 fbbf 	bl	8007d54 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80165d6:	2003      	movs	r0, #3
 80165d8:	f7f1 fbe4 	bl	8007da4 <pl_R_DriveMotor_mode>
	pl_FunMotor_duty(0.99);
 80165dc:	ed9f 0ae3 	vldr	s0, [pc, #908]	; 801696c <mode_WallSensorTuning_fast+0x3bc>
 80165e0:	f7f1 fc4c 	bl	8007e7c <pl_FunMotor_duty>
	pl_FunMotor_start();
 80165e4:	f7f1 fc36 	bl	8007e54 <pl_FunMotor_start>
	HAL_Delay(600);
 80165e8:	f44f 7016 	mov.w	r0, #600	; 0x258
 80165ec:	f002 fa6e 	bl	8018acc <HAL_Delay>
	reset_gyro();
 80165f0:	f7eb fada 	bl	8001ba8 <reset_gyro>
	reset_speed();
 80165f4:	f7ea fd16 	bl	8001024 <reset_speed>
	clear_Ierror();
 80165f8:	f7ee fa0e 	bl	8004a18 <clear_Ierror>
	angle=0;
 80165fc:	4bdc      	ldr	r3, [pc, #880]	; (8016970 <mode_WallSensorTuning_fast+0x3c0>)
 80165fe:	f04f 0200 	mov.w	r2, #0
 8016602:	601a      	str	r2, [r3, #0]

	switch (main_modeR) {
 8016604:	79fb      	ldrb	r3, [r7, #7]
 8016606:	2b0f      	cmp	r3, #15
 8016608:	f200 821b 	bhi.w	8016a42 <mode_WallSensorTuning_fast+0x492>
 801660c:	a201      	add	r2, pc, #4	; (adr r2, 8016614 <mode_WallSensorTuning_fast+0x64>)
 801660e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016612:	bf00      	nop
 8016614:	08016655 	.word	0x08016655
 8016618:	08016687 	.word	0x08016687
 801661c:	080166fd 	.word	0x080166fd
 8016620:	08016773 	.word	0x08016773
 8016624:	080167e9 	.word	0x080167e9
 8016628:	0801685f 	.word	0x0801685f
 801662c:	080168d5 	.word	0x080168d5
 8016630:	080168fb 	.word	0x080168fb
 8016634:	08016921 	.word	0x08016921
 8016638:	08016947 	.word	0x08016947
 801663c:	080169d1 	.word	0x080169d1
 8016640:	080169f7 	.word	0x080169f7
 8016644:	08016a1d 	.word	0x08016a1d
 8016648:	08016a43 	.word	0x08016a43
 801664c:	08016a43 	.word	0x08016a43
 8016650:	08016a43 	.word	0x08016a43
		case 0://横壁追従制御
			record_mode=15;
 8016654:	4bc7      	ldr	r3, [pc, #796]	; (8016974 <mode_WallSensorTuning_fast+0x3c4>)
 8016656:	220f      	movs	r2, #15
 8016658:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 801665a:	2301      	movs	r3, #1
 801665c:	733b      	strb	r3, [r7, #12]
			highspeed_mode=1;
 801665e:	4bc6      	ldr	r3, [pc, #792]	; (8016978 <mode_WallSensorTuning_fast+0x3c8>)
 8016660:	2201      	movs	r2, #1
 8016662:	701a      	strb	r2, [r3, #0]
			straight_table2(BACK_TO_CENTER+180*10, 0, 0, 5000, 24000,mode);
 8016664:	68f8      	ldr	r0, [r7, #12]
 8016666:	ed9f 2ac5 	vldr	s4, [pc, #788]	; 801697c <mode_WallSensorTuning_fast+0x3cc>
 801666a:	eddf 1ac5 	vldr	s3, [pc, #788]	; 8016980 <mode_WallSensorTuning_fast+0x3d0>
 801666e:	ed9f 1ac5 	vldr	s2, [pc, #788]	; 8016984 <mode_WallSensorTuning_fast+0x3d4>
 8016672:	eddf 0ac4 	vldr	s1, [pc, #784]	; 8016984 <mode_WallSensorTuning_fast+0x3d4>
 8016676:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 8016988 <mode_WallSensorTuning_fast+0x3d8>
 801667a:	f7ec fecf 	bl	800341c <straight_table2>
			highspeed_mode=0;
 801667e:	4bbe      	ldr	r3, [pc, #760]	; (8016978 <mode_WallSensorTuning_fast+0x3c8>)
 8016680:	2200      	movs	r2, #0
 8016682:	701a      	strb	r2, [r3, #0]
		break;
 8016684:	e1dd      	b.n	8016a42 <mode_WallSensorTuning_fast+0x492>
		case 1://なし
			record_mode=8;
 8016686:	4bbb      	ldr	r3, [pc, #748]	; (8016974 <mode_WallSensorTuning_fast+0x3c4>)
 8016688:	2208      	movs	r2, #8
 801668a:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 801668c:	2301      	movs	r3, #1
 801668e:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8016690:	2300      	movs	r3, #0
 8016692:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8016694:	2300      	movs	r3, #0
 8016696:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8016698:	2300      	movs	r3, #0
 801669a:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1000, 1000,10000,mode);
 801669c:	68f8      	ldr	r0, [r7, #12]
 801669e:	ed9f 2abb 	vldr	s4, [pc, #748]	; 801698c <mode_WallSensorTuning_fast+0x3dc>
 80166a2:	eddf 1abb 	vldr	s3, [pc, #748]	; 8016990 <mode_WallSensorTuning_fast+0x3e0>
 80166a6:	ed9f 1aba 	vldr	s2, [pc, #744]	; 8016990 <mode_WallSensorTuning_fast+0x3e0>
 80166aa:	eddf 0ab6 	vldr	s1, [pc, #728]	; 8016984 <mode_WallSensorTuning_fast+0x3d4>
 80166ae:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8016994 <mode_WallSensorTuning_fast+0x3e4>
 80166b2:	f7ec feb3 	bl	800341c <straight_table2>
			mode.WallCutMode=2;
 80166b6:	2302      	movs	r3, #2
 80166b8:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 80166ba:	2300      	movs	r3, #0
 80166bc:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1000, 1000, 1000,10000,mode);
 80166be:	68f8      	ldr	r0, [r7, #12]
 80166c0:	ed9f 2ab2 	vldr	s4, [pc, #712]	; 801698c <mode_WallSensorTuning_fast+0x3dc>
 80166c4:	eddf 1ab2 	vldr	s3, [pc, #712]	; 8016990 <mode_WallSensorTuning_fast+0x3e0>
 80166c8:	ed9f 1ab1 	vldr	s2, [pc, #708]	; 8016990 <mode_WallSensorTuning_fast+0x3e0>
 80166cc:	eddf 0ab0 	vldr	s1, [pc, #704]	; 8016990 <mode_WallSensorTuning_fast+0x3e0>
 80166d0:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8016998 <mode_WallSensorTuning_fast+0x3e8>
 80166d4:	f7ec fea2 	bl	800341c <straight_table2>
			mode.WallControlMode=1;
 80166d8:	2301      	movs	r3, #1
 80166da:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 80166dc:	2300      	movs	r3, #0
 80166de:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1000, 0, 1000,10000,mode);
 80166e0:	68f8      	ldr	r0, [r7, #12]
 80166e2:	ed9f 2aaa 	vldr	s4, [pc, #680]	; 801698c <mode_WallSensorTuning_fast+0x3dc>
 80166e6:	eddf 1aaa 	vldr	s3, [pc, #680]	; 8016990 <mode_WallSensorTuning_fast+0x3e0>
 80166ea:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 8016984 <mode_WallSensorTuning_fast+0x3d4>
 80166ee:	eddf 0aa8 	vldr	s1, [pc, #672]	; 8016990 <mode_WallSensorTuning_fast+0x3e0>
 80166f2:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 801699c <mode_WallSensorTuning_fast+0x3ec>
 80166f6:	f7ec fe91 	bl	800341c <straight_table2>
		break;
 80166fa:	e1a2      	b.n	8016a42 <mode_WallSensorTuning_fast+0x492>
		case 2://なし
			record_mode=8;
 80166fc:	4b9d      	ldr	r3, [pc, #628]	; (8016974 <mode_WallSensorTuning_fast+0x3c4>)
 80166fe:	2208      	movs	r2, #8
 8016700:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8016702:	2301      	movs	r3, #1
 8016704:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8016706:	2300      	movs	r3, #0
 8016708:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 801670a:	2300      	movs	r3, #0
 801670c:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 801670e:	2300      	movs	r3, #0
 8016710:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1200, 1200,10000,mode);
 8016712:	68f8      	ldr	r0, [r7, #12]
 8016714:	ed9f 2a9d 	vldr	s4, [pc, #628]	; 801698c <mode_WallSensorTuning_fast+0x3dc>
 8016718:	eddf 1aa1 	vldr	s3, [pc, #644]	; 80169a0 <mode_WallSensorTuning_fast+0x3f0>
 801671c:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 80169a0 <mode_WallSensorTuning_fast+0x3f0>
 8016720:	eddf 0a98 	vldr	s1, [pc, #608]	; 8016984 <mode_WallSensorTuning_fast+0x3d4>
 8016724:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8016994 <mode_WallSensorTuning_fast+0x3e4>
 8016728:	f7ec fe78 	bl	800341c <straight_table2>
			mode.WallCutMode=2;
 801672c:	2302      	movs	r3, #2
 801672e:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8016730:	2300      	movs	r3, #0
 8016732:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1200, 1200, 1200,10000,mode);
 8016734:	68f8      	ldr	r0, [r7, #12]
 8016736:	ed9f 2a95 	vldr	s4, [pc, #596]	; 801698c <mode_WallSensorTuning_fast+0x3dc>
 801673a:	eddf 1a99 	vldr	s3, [pc, #612]	; 80169a0 <mode_WallSensorTuning_fast+0x3f0>
 801673e:	ed9f 1a98 	vldr	s2, [pc, #608]	; 80169a0 <mode_WallSensorTuning_fast+0x3f0>
 8016742:	eddf 0a97 	vldr	s1, [pc, #604]	; 80169a0 <mode_WallSensorTuning_fast+0x3f0>
 8016746:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8016998 <mode_WallSensorTuning_fast+0x3e8>
 801674a:	f7ec fe67 	bl	800341c <straight_table2>
			mode.WallControlMode=1;
 801674e:	2301      	movs	r3, #1
 8016750:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8016752:	2300      	movs	r3, #0
 8016754:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1200, 0, 1200,10000,mode);
 8016756:	68f8      	ldr	r0, [r7, #12]
 8016758:	ed9f 2a8c 	vldr	s4, [pc, #560]	; 801698c <mode_WallSensorTuning_fast+0x3dc>
 801675c:	eddf 1a90 	vldr	s3, [pc, #576]	; 80169a0 <mode_WallSensorTuning_fast+0x3f0>
 8016760:	ed9f 1a88 	vldr	s2, [pc, #544]	; 8016984 <mode_WallSensorTuning_fast+0x3d4>
 8016764:	eddf 0a8e 	vldr	s1, [pc, #568]	; 80169a0 <mode_WallSensorTuning_fast+0x3f0>
 8016768:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 801699c <mode_WallSensorTuning_fast+0x3ec>
 801676c:	f7ec fe56 	bl	800341c <straight_table2>
		break;
 8016770:	e167      	b.n	8016a42 <mode_WallSensorTuning_fast+0x492>
		case 3://壁切れ45度//90°大回り
			record_mode=8;
 8016772:	4b80      	ldr	r3, [pc, #512]	; (8016974 <mode_WallSensorTuning_fast+0x3c4>)
 8016774:	2208      	movs	r2, #8
 8016776:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8016778:	2301      	movs	r3, #1
 801677a:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 801677c:	2300      	movs	r3, #0
 801677e:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8016780:	2300      	movs	r3, #0
 8016782:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8016784:	2300      	movs	r3, #0
 8016786:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1500, 1500,13000,mode);
 8016788:	68f8      	ldr	r0, [r7, #12]
 801678a:	ed9f 2a86 	vldr	s4, [pc, #536]	; 80169a4 <mode_WallSensorTuning_fast+0x3f4>
 801678e:	eddf 1a86 	vldr	s3, [pc, #536]	; 80169a8 <mode_WallSensorTuning_fast+0x3f8>
 8016792:	ed9f 1a85 	vldr	s2, [pc, #532]	; 80169a8 <mode_WallSensorTuning_fast+0x3f8>
 8016796:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8016984 <mode_WallSensorTuning_fast+0x3d4>
 801679a:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8016994 <mode_WallSensorTuning_fast+0x3e4>
 801679e:	f7ec fe3d 	bl	800341c <straight_table2>
			mode.WallCutMode=2;
 80167a2:	2302      	movs	r3, #2
 80167a4:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 80167a6:	2300      	movs	r3, #0
 80167a8:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1500, 1500, 1500,13000,mode);
 80167aa:	68f8      	ldr	r0, [r7, #12]
 80167ac:	ed9f 2a7d 	vldr	s4, [pc, #500]	; 80169a4 <mode_WallSensorTuning_fast+0x3f4>
 80167b0:	eddf 1a7d 	vldr	s3, [pc, #500]	; 80169a8 <mode_WallSensorTuning_fast+0x3f8>
 80167b4:	ed9f 1a7c 	vldr	s2, [pc, #496]	; 80169a8 <mode_WallSensorTuning_fast+0x3f8>
 80167b8:	eddf 0a7b 	vldr	s1, [pc, #492]	; 80169a8 <mode_WallSensorTuning_fast+0x3f8>
 80167bc:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8016998 <mode_WallSensorTuning_fast+0x3e8>
 80167c0:	f7ec fe2c 	bl	800341c <straight_table2>
			mode.WallControlMode=1;
 80167c4:	2301      	movs	r3, #1
 80167c6:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 80167c8:	2300      	movs	r3, #0
 80167ca:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1500, 0, 1500,13000,mode);
 80167cc:	68f8      	ldr	r0, [r7, #12]
 80167ce:	ed9f 2a75 	vldr	s4, [pc, #468]	; 80169a4 <mode_WallSensorTuning_fast+0x3f4>
 80167d2:	eddf 1a75 	vldr	s3, [pc, #468]	; 80169a8 <mode_WallSensorTuning_fast+0x3f8>
 80167d6:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 8016984 <mode_WallSensorTuning_fast+0x3d4>
 80167da:	eddf 0a73 	vldr	s1, [pc, #460]	; 80169a8 <mode_WallSensorTuning_fast+0x3f8>
 80167de:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 801699c <mode_WallSensorTuning_fast+0x3ec>
 80167e2:	f7ec fe1b 	bl	800341c <straight_table2>
		break;
 80167e6:	e12c      	b.n	8016a42 <mode_WallSensorTuning_fast+0x492>
		case 4://壁切れ45度斜め(考え中)右
			record_mode=8;
 80167e8:	4b62      	ldr	r3, [pc, #392]	; (8016974 <mode_WallSensorTuning_fast+0x3c4>)
 80167ea:	2208      	movs	r2, #8
 80167ec:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 80167ee:	2300      	movs	r3, #0
 80167f0:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 80167f2:	2300      	movs	r3, #0
 80167f4:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 80167f6:	2300      	movs	r3, #0
 80167f8:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 80167fa:	2300      	movs	r3, #0
 80167fc:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 90*sqrt(2), 0, 1000, 1000,10000,mode);
 80167fe:	68f8      	ldr	r0, [r7, #12]
 8016800:	ed9f 2a62 	vldr	s4, [pc, #392]	; 801698c <mode_WallSensorTuning_fast+0x3dc>
 8016804:	eddf 1a62 	vldr	s3, [pc, #392]	; 8016990 <mode_WallSensorTuning_fast+0x3e0>
 8016808:	ed9f 1a61 	vldr	s2, [pc, #388]	; 8016990 <mode_WallSensorTuning_fast+0x3e0>
 801680c:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8016984 <mode_WallSensorTuning_fast+0x3d4>
 8016810:	ed9f 0a66 	vldr	s0, [pc, #408]	; 80169ac <mode_WallSensorTuning_fast+0x3fc>
 8016814:	f7ec fe02 	bl	800341c <straight_table2>
			mode.WallCutMode=3;
 8016818:	2303      	movs	r3, #3
 801681a:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 801681c:	2300      	movs	r3, #0
 801681e:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 1000, 1000, 1000,10000,mode);
 8016820:	68f8      	ldr	r0, [r7, #12]
 8016822:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 801698c <mode_WallSensorTuning_fast+0x3dc>
 8016826:	eddf 1a5a 	vldr	s3, [pc, #360]	; 8016990 <mode_WallSensorTuning_fast+0x3e0>
 801682a:	ed9f 1a59 	vldr	s2, [pc, #356]	; 8016990 <mode_WallSensorTuning_fast+0x3e0>
 801682e:	eddf 0a58 	vldr	s1, [pc, #352]	; 8016990 <mode_WallSensorTuning_fast+0x3e0>
 8016832:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 80169b0 <mode_WallSensorTuning_fast+0x400>
 8016836:	f7ec fdf1 	bl	800341c <straight_table2>
			mode.WallControlMode=0;
 801683a:	2300      	movs	r3, #0
 801683c:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 801683e:	2300      	movs	r3, #0
 8016840:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 1000, 0, 1000,10000,mode);
 8016842:	68f8      	ldr	r0, [r7, #12]
 8016844:	ed9f 2a51 	vldr	s4, [pc, #324]	; 801698c <mode_WallSensorTuning_fast+0x3dc>
 8016848:	eddf 1a51 	vldr	s3, [pc, #324]	; 8016990 <mode_WallSensorTuning_fast+0x3e0>
 801684c:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 8016984 <mode_WallSensorTuning_fast+0x3d4>
 8016850:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8016990 <mode_WallSensorTuning_fast+0x3e0>
 8016854:	ed9f 0a57 	vldr	s0, [pc, #348]	; 80169b4 <mode_WallSensorTuning_fast+0x404>
 8016858:	f7ec fde0 	bl	800341c <straight_table2>
		break;
 801685c:	e0f1      	b.n	8016a42 <mode_WallSensorTuning_fast+0x492>
		case 5://壁切れ45度斜め(考え中)左
			record_mode=8;
 801685e:	4b45      	ldr	r3, [pc, #276]	; (8016974 <mode_WallSensorTuning_fast+0x3c4>)
 8016860:	2208      	movs	r2, #8
 8016862:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8016864:	2300      	movs	r3, #0
 8016866:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8016868:	2300      	movs	r3, #0
 801686a:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 801686c:	2300      	movs	r3, #0
 801686e:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8016870:	2300      	movs	r3, #0
 8016872:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT+90*sqrt(2), 0, 1000, 1000,10000,mode);
 8016874:	68f8      	ldr	r0, [r7, #12]
 8016876:	ed9f 2a45 	vldr	s4, [pc, #276]	; 801698c <mode_WallSensorTuning_fast+0x3dc>
 801687a:	eddf 1a45 	vldr	s3, [pc, #276]	; 8016990 <mode_WallSensorTuning_fast+0x3e0>
 801687e:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8016990 <mode_WallSensorTuning_fast+0x3e0>
 8016882:	eddf 0a40 	vldr	s1, [pc, #256]	; 8016984 <mode_WallSensorTuning_fast+0x3d4>
 8016886:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80169ac <mode_WallSensorTuning_fast+0x3fc>
 801688a:	f7ec fdc7 	bl	800341c <straight_table2>
			mode.WallCutMode=4;
 801688e:	2304      	movs	r3, #4
 8016890:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8016892:	2300      	movs	r3, #0
 8016894:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 1000, 1000, 1000,10000,mode);
 8016896:	68f8      	ldr	r0, [r7, #12]
 8016898:	ed9f 2a3c 	vldr	s4, [pc, #240]	; 801698c <mode_WallSensorTuning_fast+0x3dc>
 801689c:	eddf 1a3c 	vldr	s3, [pc, #240]	; 8016990 <mode_WallSensorTuning_fast+0x3e0>
 80168a0:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 8016990 <mode_WallSensorTuning_fast+0x3e0>
 80168a4:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8016990 <mode_WallSensorTuning_fast+0x3e0>
 80168a8:	ed9f 0a41 	vldr	s0, [pc, #260]	; 80169b0 <mode_WallSensorTuning_fast+0x400>
 80168ac:	f7ec fdb6 	bl	800341c <straight_table2>
			mode.WallControlMode=0;
 80168b0:	2300      	movs	r3, #0
 80168b2:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 80168b4:	2300      	movs	r3, #0
 80168b6:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 1000, 0, 1000,10000,mode);
 80168b8:	68f8      	ldr	r0, [r7, #12]
 80168ba:	ed9f 2a34 	vldr	s4, [pc, #208]	; 801698c <mode_WallSensorTuning_fast+0x3dc>
 80168be:	eddf 1a34 	vldr	s3, [pc, #208]	; 8016990 <mode_WallSensorTuning_fast+0x3e0>
 80168c2:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8016984 <mode_WallSensorTuning_fast+0x3d4>
 80168c6:	eddf 0a32 	vldr	s1, [pc, #200]	; 8016990 <mode_WallSensorTuning_fast+0x3e0>
 80168ca:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 80169b4 <mode_WallSensorTuning_fast+0x404>
 80168ce:	f7ec fda5 	bl	800341c <straight_table2>
		break;
 80168d2:	e0b6      	b.n	8016a42 <mode_WallSensorTuning_fast+0x492>
		case 6://斜め直進(制御なし計測用)
			record_mode=7;
 80168d4:	4b27      	ldr	r3, [pc, #156]	; (8016974 <mode_WallSensorTuning_fast+0x3c4>)
 80168d6:	2207      	movs	r2, #7
 80168d8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80168da:	2300      	movs	r3, #0
 80168dc:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 80168de:	68f8      	ldr	r0, [r7, #12]
 80168e0:	ed9f 2a35 	vldr	s4, [pc, #212]	; 80169b8 <mode_WallSensorTuning_fast+0x408>
 80168e4:	eddf 1a35 	vldr	s3, [pc, #212]	; 80169bc <mode_WallSensorTuning_fast+0x40c>
 80168e8:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8016984 <mode_WallSensorTuning_fast+0x3d4>
 80168ec:	eddf 0a25 	vldr	s1, [pc, #148]	; 8016984 <mode_WallSensorTuning_fast+0x3d4>
 80168f0:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80169c0 <mode_WallSensorTuning_fast+0x410>
 80168f4:	f7ec fd92 	bl	800341c <straight_table2>
		break;
 80168f8:	e0a3      	b.n	8016a42 <mode_WallSensorTuning_fast+0x492>
		case 7://斜め直進(制御なし計測用)
			record_mode=9;
 80168fa:	4b1e      	ldr	r3, [pc, #120]	; (8016974 <mode_WallSensorTuning_fast+0x3c4>)
 80168fc:	2209      	movs	r2, #9
 80168fe:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016900:	2300      	movs	r3, #0
 8016902:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 8016904:	68f8      	ldr	r0, [r7, #12]
 8016906:	ed9f 2a2c 	vldr	s4, [pc, #176]	; 80169b8 <mode_WallSensorTuning_fast+0x408>
 801690a:	eddf 1a2c 	vldr	s3, [pc, #176]	; 80169bc <mode_WallSensorTuning_fast+0x40c>
 801690e:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 8016984 <mode_WallSensorTuning_fast+0x3d4>
 8016912:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8016984 <mode_WallSensorTuning_fast+0x3d4>
 8016916:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80169c0 <mode_WallSensorTuning_fast+0x410>
 801691a:	f7ec fd7f 	bl	800341c <straight_table2>

		break;
 801691e:	e090      	b.n	8016a42 <mode_WallSensorTuning_fast+0x492>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 8016920:	4b14      	ldr	r3, [pc, #80]	; (8016974 <mode_WallSensorTuning_fast+0x3c4>)
 8016922:	2207      	movs	r2, #7
 8016924:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016926:	2303      	movs	r3, #3
 8016928:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 801692a:	68f8      	ldr	r0, [r7, #12]
 801692c:	ed9f 2a22 	vldr	s4, [pc, #136]	; 80169b8 <mode_WallSensorTuning_fast+0x408>
 8016930:	eddf 1a24 	vldr	s3, [pc, #144]	; 80169c4 <mode_WallSensorTuning_fast+0x414>
 8016934:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8016984 <mode_WallSensorTuning_fast+0x3d4>
 8016938:	eddf 0a12 	vldr	s1, [pc, #72]	; 8016984 <mode_WallSensorTuning_fast+0x3d4>
 801693c:	ed9f 0a22 	vldr	s0, [pc, #136]	; 80169c8 <mode_WallSensorTuning_fast+0x418>
 8016940:	f7ec fd6c 	bl	800341c <straight_table2>
		break;
 8016944:	e07d      	b.n	8016a42 <mode_WallSensorTuning_fast+0x492>
		case 9:
			record_mode=8;
 8016946:	4b0b      	ldr	r3, [pc, #44]	; (8016974 <mode_WallSensorTuning_fast+0x3c4>)
 8016948:	2208      	movs	r2, #8
 801694a:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 801694c:	2303      	movs	r3, #3
 801694e:	733b      	strb	r3, [r7, #12]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 3500, 20000,mode);
 8016950:	68f8      	ldr	r0, [r7, #12]
 8016952:	ed9f 2a19 	vldr	s4, [pc, #100]	; 80169b8 <mode_WallSensorTuning_fast+0x408>
 8016956:	eddf 1a1b 	vldr	s3, [pc, #108]	; 80169c4 <mode_WallSensorTuning_fast+0x414>
 801695a:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8016984 <mode_WallSensorTuning_fast+0x3d4>
 801695e:	eddf 0a09 	vldr	s1, [pc, #36]	; 8016984 <mode_WallSensorTuning_fast+0x3d4>
 8016962:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80169cc <mode_WallSensorTuning_fast+0x41c>
 8016966:	f7ec fd59 	bl	800341c <straight_table2>
		break;
 801696a:	e06a      	b.n	8016a42 <mode_WallSensorTuning_fast+0x492>
 801696c:	3f7d70a4 	.word	0x3f7d70a4
 8016970:	20000268 	.word	0x20000268
 8016974:	2000edc4 	.word	0x2000edc4
 8016978:	2000080c 	.word	0x2000080c
 801697c:	46bb8000 	.word	0x46bb8000
 8016980:	459c4000 	.word	0x459c4000
 8016984:	00000000 	.word	0x00000000
 8016988:	44e39000 	.word	0x44e39000
 801698c:	461c4000 	.word	0x461c4000
 8016990:	447a0000 	.word	0x447a0000
 8016994:	42cd0000 	.word	0x42cd0000
 8016998:	41b40000 	.word	0x41b40000
 801699c:	42e10000 	.word	0x42e10000
 80169a0:	44960000 	.word	0x44960000
 80169a4:	464b2000 	.word	0x464b2000
 80169a8:	44bb8000 	.word	0x44bb8000
 80169ac:	4321c77b 	.word	0x4321c77b
 80169b0:	41fe8ef6 	.word	0x41fe8ef6
 80169b4:	42beeb39 	.word	0x42beeb39
 80169b8:	469c4000 	.word	0x469c4000
 80169bc:	44fa0000 	.word	0x44fa0000
 80169c0:	445ebd17 	.word	0x445ebd17
 80169c4:	455ac000 	.word	0x455ac000
 80169c8:	443eeb39 	.word	0x443eeb39
 80169cc:	4484977b 	.word	0x4484977b
		case 10:
			record_mode=10;
 80169d0:	4b39      	ldr	r3, [pc, #228]	; (8016ab8 <mode_WallSensorTuning_fast+0x508>)
 80169d2:	220a      	movs	r2, #10
 80169d4:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 80169d6:	2303      	movs	r3, #3
 80169d8:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 80169da:	68f8      	ldr	r0, [r7, #12]
 80169dc:	ed9f 2a37 	vldr	s4, [pc, #220]	; 8016abc <mode_WallSensorTuning_fast+0x50c>
 80169e0:	eddf 1a37 	vldr	s3, [pc, #220]	; 8016ac0 <mode_WallSensorTuning_fast+0x510>
 80169e4:	ed9f 1a37 	vldr	s2, [pc, #220]	; 8016ac4 <mode_WallSensorTuning_fast+0x514>
 80169e8:	eddf 0a36 	vldr	s1, [pc, #216]	; 8016ac4 <mode_WallSensorTuning_fast+0x514>
 80169ec:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8016ac8 <mode_WallSensorTuning_fast+0x518>
 80169f0:	f7ec fd14 	bl	800341c <straight_table2>
		break;
 80169f4:	e025      	b.n	8016a42 <mode_WallSensorTuning_fast+0x492>
		case 11:
			record_mode=11;
 80169f6:	4b30      	ldr	r3, [pc, #192]	; (8016ab8 <mode_WallSensorTuning_fast+0x508>)
 80169f8:	220b      	movs	r2, #11
 80169fa:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 80169fc:	2303      	movs	r3, #3
 80169fe:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 8016a00:	68f8      	ldr	r0, [r7, #12]
 8016a02:	ed9f 2a32 	vldr	s4, [pc, #200]	; 8016acc <mode_WallSensorTuning_fast+0x51c>
 8016a06:	eddf 1a32 	vldr	s3, [pc, #200]	; 8016ad0 <mode_WallSensorTuning_fast+0x520>
 8016a0a:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8016ac4 <mode_WallSensorTuning_fast+0x514>
 8016a0e:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8016ac4 <mode_WallSensorTuning_fast+0x514>
 8016a12:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8016ac8 <mode_WallSensorTuning_fast+0x518>
 8016a16:	f7ec fd01 	bl	800341c <straight_table2>
		break;
 8016a1a:	e012      	b.n	8016a42 <mode_WallSensorTuning_fast+0x492>
		case 12:
			record_mode=12;
 8016a1c:	4b26      	ldr	r3, [pc, #152]	; (8016ab8 <mode_WallSensorTuning_fast+0x508>)
 8016a1e:	220c      	movs	r2, #12
 8016a20:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016a22:	2303      	movs	r3, #3
 8016a24:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 8016a26:	68f8      	ldr	r0, [r7, #12]
 8016a28:	ed9f 2a28 	vldr	s4, [pc, #160]	; 8016acc <mode_WallSensorTuning_fast+0x51c>
 8016a2c:	eddf 1a28 	vldr	s3, [pc, #160]	; 8016ad0 <mode_WallSensorTuning_fast+0x520>
 8016a30:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8016ac4 <mode_WallSensorTuning_fast+0x514>
 8016a34:	eddf 0a23 	vldr	s1, [pc, #140]	; 8016ac4 <mode_WallSensorTuning_fast+0x514>
 8016a38:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8016ac8 <mode_WallSensorTuning_fast+0x518>
 8016a3c:	f7ec fcee 	bl	800341c <straight_table2>
		break;
 8016a40:	bf00      	nop
		case 15:
		break;
	}
	record_mode=0;
 8016a42:	4b1d      	ldr	r3, [pc, #116]	; (8016ab8 <mode_WallSensorTuning_fast+0x508>)
 8016a44:	2200      	movs	r2, #0
 8016a46:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8016a48:	2003      	movs	r0, #3
 8016a4a:	f7f1 f9ab 	bl	8007da4 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8016a4e:	2003      	movs	r0, #3
 8016a50:	f7f1 f980 	bl	8007d54 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8016a54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016a58:	f7f1 fca2 	bl	80083a0 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8016a5c:	f7f1 fa04 	bl	8007e68 <pl_FunMotor_stop>
	record_mode=0;
 8016a60:	4b15      	ldr	r3, [pc, #84]	; (8016ab8 <mode_WallSensorTuning_fast+0x508>)
 8016a62:	2200      	movs	r2, #0
 8016a64:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 8016a66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016a6a:	f7f1 fc99 	bl	80083a0 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8016a6e:	2000      	movs	r0, #0
 8016a70:	f7f1 f966 	bl	8007d40 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016a74:	e002      	b.n	8016a7c <mode_WallSensorTuning_fast+0x4cc>
		HAL_Delay(1);
 8016a76:	2001      	movs	r0, #1
 8016a78:	f002 f828 	bl	8018acc <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016a7c:	4b15      	ldr	r3, [pc, #84]	; (8016ad4 <mode_WallSensorTuning_fast+0x524>)
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016a84:	ddf7      	ble.n	8016a76 <mode_WallSensorTuning_fast+0x4c6>
 8016a86:	4b13      	ldr	r3, [pc, #76]	; (8016ad4 <mode_WallSensorTuning_fast+0x524>)
 8016a88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016a8c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016a90:	ddf1      	ble.n	8016a76 <mode_WallSensorTuning_fast+0x4c6>
 8016a92:	4b10      	ldr	r3, [pc, #64]	; (8016ad4 <mode_WallSensorTuning_fast+0x524>)
 8016a94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016a98:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016a9c:	ddeb      	ble.n	8016a76 <mode_WallSensorTuning_fast+0x4c6>
	}
	pl_r_blue_LED(ON);
 8016a9e:	2001      	movs	r0, #1
 8016aa0:	f7f0 fcaa 	bl	80073f8 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8016aa4:	2001      	movs	r0, #1
 8016aa6:	f7f0 fcb9 	bl	800741c <pl_l_blue_LED>
	record_print();
 8016aaa:	f000 f871 	bl	8016b90 <record_print>



}
 8016aae:	bf00      	nop
 8016ab0:	3710      	adds	r7, #16
 8016ab2:	46bd      	mov	sp, r7
 8016ab4:	bd80      	pop	{r7, pc}
 8016ab6:	bf00      	nop
 8016ab8:	2000edc4 	.word	0x2000edc4
 8016abc:	469c4000 	.word	0x469c4000
 8016ac0:	455ac000 	.word	0x455ac000
 8016ac4:	00000000 	.word	0x00000000
 8016ac8:	443eeb39 	.word	0x443eeb39
 8016acc:	466a6000 	.word	0x466a6000
 8016ad0:	453b8000 	.word	0x453b8000
 8016ad4:	200002bc 	.word	0x200002bc

08016ad8 <record_reset>:
char record_rupe_flag;

//int SEN_record[5][15];
//int SEN_recordD[5][15];

void record_reset(void) {
 8016ad8:	b480      	push	{r7}
 8016ada:	af00      	add	r7, sp, #0
	record_mode = 0;
 8016adc:	4b06      	ldr	r3, [pc, #24]	; (8016af8 <record_reset+0x20>)
 8016ade:	2200      	movs	r2, #0
 8016ae0:	701a      	strb	r2, [r3, #0]
	record_time = 0;
 8016ae2:	4b06      	ldr	r3, [pc, #24]	; (8016afc <record_reset+0x24>)
 8016ae4:	2200      	movs	r2, #0
 8016ae6:	601a      	str	r2, [r3, #0]
	record_rupe_flag = 0;
 8016ae8:	4b05      	ldr	r3, [pc, #20]	; (8016b00 <record_reset+0x28>)
 8016aea:	2200      	movs	r2, #0
 8016aec:	701a      	strb	r2, [r3, #0]
}
 8016aee:	bf00      	nop
 8016af0:	46bd      	mov	sp, r7
 8016af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016af6:	4770      	bx	lr
 8016af8:	2000edc4 	.word	0x2000edc4
 8016afc:	2000edc8 	.word	0x2000edc8
 8016b00:	2000edd0 	.word	0x2000edd0

08016b04 <record_data>:

void record_data(float *input_record_data, int numlen) {
 8016b04:	b490      	push	{r4, r7}
 8016b06:	b084      	sub	sp, #16
 8016b08:	af00      	add	r7, sp, #0
 8016b0a:	6078      	str	r0, [r7, #4]
 8016b0c:	6039      	str	r1, [r7, #0]

	for (int record_count = 0; record_count < numlen; record_count++) {
 8016b0e:	2300      	movs	r3, #0
 8016b10:	60fb      	str	r3, [r7, #12]
 8016b12:	e013      	b.n	8016b3c <record_data+0x38>
		record_value[record_count][record_time] =
				input_record_data[record_count];
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	009b      	lsls	r3, r3, #2
 8016b18:	687a      	ldr	r2, [r7, #4]
 8016b1a:	441a      	add	r2, r3
		record_value[record_count][record_time] =
 8016b1c:	4b18      	ldr	r3, [pc, #96]	; (8016b80 <record_data+0x7c>)
 8016b1e:	681b      	ldr	r3, [r3, #0]
				input_record_data[record_count];
 8016b20:	6812      	ldr	r2, [r2, #0]
		record_value[record_count][record_time] =
 8016b22:	4818      	ldr	r0, [pc, #96]	; (8016b84 <record_data+0x80>)
 8016b24:	68f9      	ldr	r1, [r7, #12]
 8016b26:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8016b2a:	fb04 f101 	mul.w	r1, r4, r1
 8016b2e:	440b      	add	r3, r1
 8016b30:	009b      	lsls	r3, r3, #2
 8016b32:	4403      	add	r3, r0
 8016b34:	601a      	str	r2, [r3, #0]
	for (int record_count = 0; record_count < numlen; record_count++) {
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	3301      	adds	r3, #1
 8016b3a:	60fb      	str	r3, [r7, #12]
 8016b3c:	68fa      	ldr	r2, [r7, #12]
 8016b3e:	683b      	ldr	r3, [r7, #0]
 8016b40:	429a      	cmp	r2, r3
 8016b42:	dbe7      	blt.n	8016b14 <record_data+0x10>
	}
	if (record_rupe_flag == 1) {
 8016b44:	4b10      	ldr	r3, [pc, #64]	; (8016b88 <record_data+0x84>)
 8016b46:	781b      	ldrb	r3, [r3, #0]
 8016b48:	2b01      	cmp	r3, #1
 8016b4a:	d103      	bne.n	8016b54 <record_data+0x50>
		record_end_point = record_time;
 8016b4c:	4b0c      	ldr	r3, [pc, #48]	; (8016b80 <record_data+0x7c>)
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	4a0e      	ldr	r2, [pc, #56]	; (8016b8c <record_data+0x88>)
 8016b52:	6013      	str	r3, [r2, #0]
	}
	record_time++;
 8016b54:	4b0a      	ldr	r3, [pc, #40]	; (8016b80 <record_data+0x7c>)
 8016b56:	681b      	ldr	r3, [r3, #0]
 8016b58:	3301      	adds	r3, #1
 8016b5a:	4a09      	ldr	r2, [pc, #36]	; (8016b80 <record_data+0x7c>)
 8016b5c:	6013      	str	r3, [r2, #0]
	if (record_time >= max_record_time) {
 8016b5e:	4b08      	ldr	r3, [pc, #32]	; (8016b80 <record_data+0x7c>)
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8016b66:	4293      	cmp	r3, r2
 8016b68:	dd05      	ble.n	8016b76 <record_data+0x72>
		record_time = 0;
 8016b6a:	4b05      	ldr	r3, [pc, #20]	; (8016b80 <record_data+0x7c>)
 8016b6c:	2200      	movs	r2, #0
 8016b6e:	601a      	str	r2, [r3, #0]
		record_rupe_flag = 1;
 8016b70:	4b05      	ldr	r3, [pc, #20]	; (8016b88 <record_data+0x84>)
 8016b72:	2201      	movs	r2, #1
 8016b74:	701a      	strb	r2, [r3, #0]
	}

}
 8016b76:	bf00      	nop
 8016b78:	3710      	adds	r7, #16
 8016b7a:	46bd      	mov	sp, r7
 8016b7c:	bc90      	pop	{r4, r7}
 8016b7e:	4770      	bx	lr
 8016b80:	2000edc8 	.word	0x2000edc8
 8016b84:	20003244 	.word	0x20003244
 8016b88:	2000edd0 	.word	0x2000edd0
 8016b8c:	2000edcc 	.word	0x2000edcc

08016b90 <record_print>:

void record_print(void) {
 8016b90:	b580      	push	{r7, lr}
 8016b92:	b084      	sub	sp, #16
 8016b94:	af00      	add	r7, sp, #0
	int a, time_index;
	if (record_rupe_flag == 0) {
 8016b96:	4b3a      	ldr	r3, [pc, #232]	; (8016c80 <record_print+0xf0>)
 8016b98:	781b      	ldrb	r3, [r3, #0]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d12e      	bne.n	8016bfc <record_print+0x6c>
		for (a = 0; a <= record_time - 1; a++) {
 8016b9e:	2300      	movs	r3, #0
 8016ba0:	60fb      	str	r3, [r7, #12]
 8016ba2:	e025      	b.n	8016bf0 <record_print+0x60>

			printf("%d", a);
 8016ba4:	68f9      	ldr	r1, [r7, #12]
 8016ba6:	4837      	ldr	r0, [pc, #220]	; (8016c84 <record_print+0xf4>)
 8016ba8:	f009 fee2 	bl	8020970 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 8016bac:	2300      	movs	r3, #0
 8016bae:	607b      	str	r3, [r7, #4]
 8016bb0:	e015      	b.n	8016bde <record_print+0x4e>
					record_count++) {
				printf(",%f", record_value[record_count][a]);
 8016bb2:	4935      	ldr	r1, [pc, #212]	; (8016c88 <record_print+0xf8>)
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8016bba:	fb03 f202 	mul.w	r2, r3, r2
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	4413      	add	r3, r2
 8016bc2:	009b      	lsls	r3, r3, #2
 8016bc4:	440b      	add	r3, r1
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	4618      	mov	r0, r3
 8016bca:	f7e9 fce5 	bl	8000598 <__aeabi_f2d>
 8016bce:	4602      	mov	r2, r0
 8016bd0:	460b      	mov	r3, r1
 8016bd2:	482e      	ldr	r0, [pc, #184]	; (8016c8c <record_print+0xfc>)
 8016bd4:	f009 fecc 	bl	8020970 <iprintf>
					record_count++) {
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	3301      	adds	r3, #1
 8016bdc:	607b      	str	r3, [r7, #4]
			for (int record_count = 0; record_count < max_record_num;
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	2b03      	cmp	r3, #3
 8016be2:	dde6      	ble.n	8016bb2 <record_print+0x22>
			}
			printf("\n");
 8016be4:	200a      	movs	r0, #10
 8016be6:	f009 fedb 	bl	80209a0 <putchar>
		for (a = 0; a <= record_time - 1; a++) {
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	3301      	adds	r3, #1
 8016bee:	60fb      	str	r3, [r7, #12]
 8016bf0:	4b27      	ldr	r3, [pc, #156]	; (8016c90 <record_print+0x100>)
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	68fa      	ldr	r2, [r7, #12]
 8016bf6:	429a      	cmp	r2, r3
 8016bf8:	dbd4      	blt.n	8016ba4 <record_print+0x14>
			}
			printf("\n");
		}
	}

}
 8016bfa:	e03c      	b.n	8016c76 <record_print+0xe6>
		for (a = 0; a <= max_record_time - 1; a++) {
 8016bfc:	2300      	movs	r3, #0
 8016bfe:	60fb      	str	r3, [r7, #12]
 8016c00:	e034      	b.n	8016c6c <record_print+0xdc>
			time_index = record_end_point + 1 + a;
 8016c02:	4b24      	ldr	r3, [pc, #144]	; (8016c94 <record_print+0x104>)
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	3301      	adds	r3, #1
 8016c08:	68fa      	ldr	r2, [r7, #12]
 8016c0a:	4413      	add	r3, r2
 8016c0c:	60bb      	str	r3, [r7, #8]
			if (time_index >= max_record_time) {
 8016c0e:	68bb      	ldr	r3, [r7, #8]
 8016c10:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8016c14:	4293      	cmp	r3, r2
 8016c16:	dd03      	ble.n	8016c20 <record_print+0x90>
				time_index -= max_record_time;
 8016c18:	68bb      	ldr	r3, [r7, #8]
 8016c1a:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8016c1e:	60bb      	str	r3, [r7, #8]
			printf("%d", a);
 8016c20:	68f9      	ldr	r1, [r7, #12]
 8016c22:	4818      	ldr	r0, [pc, #96]	; (8016c84 <record_print+0xf4>)
 8016c24:	f009 fea4 	bl	8020970 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 8016c28:	2300      	movs	r3, #0
 8016c2a:	603b      	str	r3, [r7, #0]
 8016c2c:	e015      	b.n	8016c5a <record_print+0xca>
				printf(",%f", record_value[record_count][time_index]);
 8016c2e:	4916      	ldr	r1, [pc, #88]	; (8016c88 <record_print+0xf8>)
 8016c30:	683b      	ldr	r3, [r7, #0]
 8016c32:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8016c36:	fb03 f202 	mul.w	r2, r3, r2
 8016c3a:	68bb      	ldr	r3, [r7, #8]
 8016c3c:	4413      	add	r3, r2
 8016c3e:	009b      	lsls	r3, r3, #2
 8016c40:	440b      	add	r3, r1
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	4618      	mov	r0, r3
 8016c46:	f7e9 fca7 	bl	8000598 <__aeabi_f2d>
 8016c4a:	4602      	mov	r2, r0
 8016c4c:	460b      	mov	r3, r1
 8016c4e:	480f      	ldr	r0, [pc, #60]	; (8016c8c <record_print+0xfc>)
 8016c50:	f009 fe8e 	bl	8020970 <iprintf>
					record_count++) {
 8016c54:	683b      	ldr	r3, [r7, #0]
 8016c56:	3301      	adds	r3, #1
 8016c58:	603b      	str	r3, [r7, #0]
			for (int record_count = 0; record_count < max_record_num;
 8016c5a:	683b      	ldr	r3, [r7, #0]
 8016c5c:	2b03      	cmp	r3, #3
 8016c5e:	dde6      	ble.n	8016c2e <record_print+0x9e>
			printf("\n");
 8016c60:	200a      	movs	r0, #10
 8016c62:	f009 fe9d 	bl	80209a0 <putchar>
		for (a = 0; a <= max_record_time - 1; a++) {
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	3301      	adds	r3, #1
 8016c6a:	60fb      	str	r3, [r7, #12]
 8016c6c:	68fb      	ldr	r3, [r7, #12]
 8016c6e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8016c72:	4293      	cmp	r3, r2
 8016c74:	ddc5      	ble.n	8016c02 <record_print+0x72>
}
 8016c76:	bf00      	nop
 8016c78:	3710      	adds	r7, #16
 8016c7a:	46bd      	mov	sp, r7
 8016c7c:	bd80      	pop	{r7, pc}
 8016c7e:	bf00      	nop
 8016c80:	2000edd0 	.word	0x2000edd0
 8016c84:	080245c0 	.word	0x080245c0
 8016c88:	20003244 	.word	0x20003244
 8016c8c:	080245c4 	.word	0x080245c4
 8016c90:	2000edc8 	.word	0x2000edc8
 8016c94:	2000edcc 	.word	0x2000edcc

08016c98 <interrupt_record>:

void interrupt_record(void) {
 8016c98:	b580      	push	{r7, lr}
 8016c9a:	b084      	sub	sp, #16
 8016c9c:	af00      	add	r7, sp, #0

	float r_data[4];

	if (record_mode == 1) {
 8016c9e:	4baf      	ldr	r3, [pc, #700]	; (8016f5c <interrupt_record+0x2c4>)
 8016ca0:	781b      	ldrb	r3, [r3, #0]
 8016ca2:	2b01      	cmp	r3, #1
 8016ca4:	d110      	bne.n	8016cc8 <interrupt_record+0x30>
			r_data[0] = E_speedR;
 8016ca6:	4bae      	ldr	r3, [pc, #696]	; (8016f60 <interrupt_record+0x2c8>)
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	603b      	str	r3, [r7, #0]
			r_data[1] = E_speedL;
 8016cac:	4bad      	ldr	r3, [pc, #692]	; (8016f64 <interrupt_record+0x2cc>)
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceR;
 8016cb2:	4bad      	ldr	r3, [pc, #692]	; (8016f68 <interrupt_record+0x2d0>)
 8016cb4:	681b      	ldr	r3, [r3, #0]
 8016cb6:	60bb      	str	r3, [r7, #8]
			r_data[3] = E_distanceL;
 8016cb8:	4bac      	ldr	r3, [pc, #688]	; (8016f6c <interrupt_record+0x2d4>)
 8016cba:	681b      	ldr	r3, [r3, #0]
 8016cbc:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016cbe:	463b      	mov	r3, r7
 8016cc0:	2104      	movs	r1, #4
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	f7ff ff1e 	bl	8016b04 <record_data>
		}
	if (record_mode == 2) {
 8016cc8:	4ba4      	ldr	r3, [pc, #656]	; (8016f5c <interrupt_record+0x2c4>)
 8016cca:	781b      	ldrb	r3, [r3, #0]
 8016ccc:	2b02      	cmp	r3, #2
 8016cce:	d11b      	bne.n	8016d08 <interrupt_record+0x70>
		r_data[0] = turning.velocity;
 8016cd0:	4ba7      	ldr	r3, [pc, #668]	; (8016f70 <interrupt_record+0x2d8>)
 8016cd2:	681b      	ldr	r3, [r3, #0]
 8016cd4:	603b      	str	r3, [r7, #0]
		r_data[1] = angle_speed;
 8016cd6:	4ba7      	ldr	r3, [pc, #668]	; (8016f74 <interrupt_record+0x2dc>)
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	607b      	str	r3, [r7, #4]
		r_data[2] = straight.velocity;
 8016cdc:	4ba6      	ldr	r3, [pc, #664]	; (8016f78 <interrupt_record+0x2e0>)
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	60bb      	str	r3, [r7, #8]
		r_data[3] = (fusion_speedR + fusion_speedL) / 2;
 8016ce2:	4ba6      	ldr	r3, [pc, #664]	; (8016f7c <interrupt_record+0x2e4>)
 8016ce4:	ed93 7a00 	vldr	s14, [r3]
 8016ce8:	4ba5      	ldr	r3, [pc, #660]	; (8016f80 <interrupt_record+0x2e8>)
 8016cea:	edd3 7a00 	vldr	s15, [r3]
 8016cee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016cf2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016cf6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016cfa:	edc7 7a03 	vstr	s15, [r7, #12]
				record_data(r_data, 4);
 8016cfe:	463b      	mov	r3, r7
 8016d00:	2104      	movs	r1, #4
 8016d02:	4618      	mov	r0, r3
 8016d04:	f7ff fefe 	bl	8016b04 <record_data>
		}
	if (record_mode == 3) {
 8016d08:	4b94      	ldr	r3, [pc, #592]	; (8016f5c <interrupt_record+0x2c4>)
 8016d0a:	781b      	ldrb	r3, [r3, #0]
 8016d0c:	2b03      	cmp	r3, #3
 8016d0e:	d126      	bne.n	8016d5e <interrupt_record+0xc6>
			r_data[0] = straight.velocity;
 8016d10:	4b99      	ldr	r3, [pc, #612]	; (8016f78 <interrupt_record+0x2e0>)
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	603b      	str	r3, [r7, #0]
			r_data[1] = straight.displacement;
 8016d16:	4b98      	ldr	r3, [pc, #608]	; (8016f78 <interrupt_record+0x2e0>)
 8016d18:	689b      	ldr	r3, [r3, #8]
 8016d1a:	607b      	str	r3, [r7, #4]
			r_data[2] = (fusion_speedR + fusion_speedL) / 2;
 8016d1c:	4b97      	ldr	r3, [pc, #604]	; (8016f7c <interrupt_record+0x2e4>)
 8016d1e:	ed93 7a00 	vldr	s14, [r3]
 8016d22:	4b97      	ldr	r3, [pc, #604]	; (8016f80 <interrupt_record+0x2e8>)
 8016d24:	edd3 7a00 	vldr	s15, [r3]
 8016d28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016d2c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016d30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016d34:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 8016d38:	4b92      	ldr	r3, [pc, #584]	; (8016f84 <interrupt_record+0x2ec>)
 8016d3a:	ed93 7a00 	vldr	s14, [r3]
 8016d3e:	4b92      	ldr	r3, [pc, #584]	; (8016f88 <interrupt_record+0x2f0>)
 8016d40:	edd3 7a00 	vldr	s15, [r3]
 8016d44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016d48:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016d4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016d50:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8016d54:	463b      	mov	r3, r7
 8016d56:	2104      	movs	r1, #4
 8016d58:	4618      	mov	r0, r3
 8016d5a:	f7ff fed3 	bl	8016b04 <record_data>
		}
	if (record_mode == 4) { //距離の比較
 8016d5e:	4b7f      	ldr	r3, [pc, #508]	; (8016f5c <interrupt_record+0x2c4>)
 8016d60:	781b      	ldrb	r3, [r3, #0]
 8016d62:	2b04      	cmp	r3, #4
 8016d64:	d126      	bne.n	8016db4 <interrupt_record+0x11c>
			r_data[0] = straight.displacement;
 8016d66:	4b84      	ldr	r3, [pc, #528]	; (8016f78 <interrupt_record+0x2e0>)
 8016d68:	689b      	ldr	r3, [r3, #8]
 8016d6a:	603b      	str	r3, [r7, #0]
			r_data[1] = (E_distanceR + E_distanceL) / 2;
 8016d6c:	4b7e      	ldr	r3, [pc, #504]	; (8016f68 <interrupt_record+0x2d0>)
 8016d6e:	ed93 7a00 	vldr	s14, [r3]
 8016d72:	4b7e      	ldr	r3, [pc, #504]	; (8016f6c <interrupt_record+0x2d4>)
 8016d74:	edd3 7a00 	vldr	s15, [r3]
 8016d78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016d7c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016d80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016d84:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = gf_distance;
 8016d88:	4b80      	ldr	r3, [pc, #512]	; (8016f8c <interrupt_record+0x2f4>)
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	60bb      	str	r3, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 8016d8e:	4b7d      	ldr	r3, [pc, #500]	; (8016f84 <interrupt_record+0x2ec>)
 8016d90:	ed93 7a00 	vldr	s14, [r3]
 8016d94:	4b7c      	ldr	r3, [pc, #496]	; (8016f88 <interrupt_record+0x2f0>)
 8016d96:	edd3 7a00 	vldr	s15, [r3]
 8016d9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016d9e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016da2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016da6:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8016daa:	463b      	mov	r3, r7
 8016dac:	2104      	movs	r1, #4
 8016dae:	4618      	mov	r0, r3
 8016db0:	f7ff fea8 	bl	8016b04 <record_data>
		}
	if (record_mode == 5) { //距離の比較
 8016db4:	4b69      	ldr	r3, [pc, #420]	; (8016f5c <interrupt_record+0x2c4>)
 8016db6:	781b      	ldrb	r3, [r3, #0]
 8016db8:	2b05      	cmp	r3, #5
 8016dba:	d110      	bne.n	8016dde <interrupt_record+0x146>
			r_data[0] = straight.displacement;
 8016dbc:	4b6e      	ldr	r3, [pc, #440]	; (8016f78 <interrupt_record+0x2e0>)
 8016dbe:	689b      	ldr	r3, [r3, #8]
 8016dc0:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 8016dc2:	4b69      	ldr	r3, [pc, #420]	; (8016f68 <interrupt_record+0x2d0>)
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 8016dc8:	4b68      	ldr	r3, [pc, #416]	; (8016f6c <interrupt_record+0x2d4>)
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 8016dce:	4b6f      	ldr	r3, [pc, #444]	; (8016f8c <interrupt_record+0x2f4>)
 8016dd0:	681b      	ldr	r3, [r3, #0]
 8016dd2:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016dd4:	463b      	mov	r3, r7
 8016dd6:	2104      	movs	r1, #4
 8016dd8:	4618      	mov	r0, r3
 8016dda:	f7ff fe93 	bl	8016b04 <record_data>
		}
	if (record_mode == 5) { //距離の比較
 8016dde:	4b5f      	ldr	r3, [pc, #380]	; (8016f5c <interrupt_record+0x2c4>)
 8016de0:	781b      	ldrb	r3, [r3, #0]
 8016de2:	2b05      	cmp	r3, #5
 8016de4:	d110      	bne.n	8016e08 <interrupt_record+0x170>
			r_data[0] = g_V_L;
 8016de6:	4b6a      	ldr	r3, [pc, #424]	; (8016f90 <interrupt_record+0x2f8>)
 8016de8:	681b      	ldr	r3, [r3, #0]
 8016dea:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 8016dec:	4b5e      	ldr	r3, [pc, #376]	; (8016f68 <interrupt_record+0x2d0>)
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 8016df2:	4b5e      	ldr	r3, [pc, #376]	; (8016f6c <interrupt_record+0x2d4>)
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 8016df8:	4b64      	ldr	r3, [pc, #400]	; (8016f8c <interrupt_record+0x2f4>)
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016dfe:	463b      	mov	r3, r7
 8016e00:	2104      	movs	r1, #4
 8016e02:	4618      	mov	r0, r3
 8016e04:	f7ff fe7e 	bl	8016b04 <record_data>
		}
	if (record_mode == 6) { //距離の比較
 8016e08:	4b54      	ldr	r3, [pc, #336]	; (8016f5c <interrupt_record+0x2c4>)
 8016e0a:	781b      	ldrb	r3, [r3, #0]
 8016e0c:	2b06      	cmp	r3, #6
 8016e0e:	d110      	bne.n	8016e32 <interrupt_record+0x19a>
				r_data[0] = straight.velocity;
 8016e10:	4b59      	ldr	r3, [pc, #356]	; (8016f78 <interrupt_record+0x2e0>)
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	603b      	str	r3, [r7, #0]
				r_data[1] = E_lpf_speedL;
 8016e16:	4b5f      	ldr	r3, [pc, #380]	; (8016f94 <interrupt_record+0x2fc>)
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	607b      	str	r3, [r7, #4]
				r_data[2] = E_lpf_speedR;
 8016e1c:	4b5e      	ldr	r3, [pc, #376]	; (8016f98 <interrupt_record+0x300>)
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	60bb      	str	r3, [r7, #8]
				r_data[3] = gf_speed;
 8016e22:	4b5e      	ldr	r3, [pc, #376]	; (8016f9c <interrupt_record+0x304>)
 8016e24:	681b      	ldr	r3, [r3, #0]
 8016e26:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 8016e28:	463b      	mov	r3, r7
 8016e2a:	2104      	movs	r1, #4
 8016e2c:	4618      	mov	r0, r3
 8016e2e:	f7ff fe69 	bl	8016b04 <record_data>
			}
	if (record_mode == 7) {
 8016e32:	4b4a      	ldr	r3, [pc, #296]	; (8016f5c <interrupt_record+0x2c4>)
 8016e34:	781b      	ldrb	r3, [r3, #0]
 8016e36:	2b07      	cmp	r3, #7
 8016e38:	d125      	bne.n	8016e86 <interrupt_record+0x1ee>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 8016e3a:	4b59      	ldr	r3, [pc, #356]	; (8016fa0 <interrupt_record+0x308>)
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	ee07 3a90 	vmov	s15, r3
 8016e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e46:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff[SENSOR_LEFT];
 8016e4a:	4b56      	ldr	r3, [pc, #344]	; (8016fa4 <interrupt_record+0x30c>)
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	ee07 3a90 	vmov	s15, r3
 8016e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e56:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_RIGHT][0];
 8016e5a:	4b51      	ldr	r3, [pc, #324]	; (8016fa0 <interrupt_record+0x308>)
 8016e5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016e60:	ee07 3a90 	vmov	s15, r3
 8016e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e68:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff[SENSOR_RIGHT];
 8016e6c:	4b4d      	ldr	r3, [pc, #308]	; (8016fa4 <interrupt_record+0x30c>)
 8016e6e:	691b      	ldr	r3, [r3, #16]
 8016e70:	ee07 3a90 	vmov	s15, r3
 8016e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e78:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8016e7c:	463b      	mov	r3, r7
 8016e7e:	2104      	movs	r1, #4
 8016e80:	4618      	mov	r0, r3
 8016e82:	f7ff fe3f 	bl	8016b04 <record_data>
		}
	if (record_mode == 8) {
 8016e86:	4b35      	ldr	r3, [pc, #212]	; (8016f5c <interrupt_record+0x2c4>)
 8016e88:	781b      	ldrb	r3, [r3, #0]
 8016e8a:	2b08      	cmp	r3, #8
 8016e8c:	d125      	bne.n	8016eda <interrupt_record+0x242>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 8016e8e:	4b44      	ldr	r3, [pc, #272]	; (8016fa0 <interrupt_record+0x308>)
 8016e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016e92:	ee07 3a90 	vmov	s15, r3
 8016e96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e9a:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_LEFT];
 8016e9e:	4b42      	ldr	r3, [pc, #264]	; (8016fa8 <interrupt_record+0x310>)
 8016ea0:	685b      	ldr	r3, [r3, #4]
 8016ea2:	ee07 3a90 	vmov	s15, r3
 8016ea6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016eaa:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 8016eae:	4b3c      	ldr	r3, [pc, #240]	; (8016fa0 <interrupt_record+0x308>)
 8016eb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8016eb4:	ee07 3a90 	vmov	s15, r3
 8016eb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016ebc:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT];
 8016ec0:	4b39      	ldr	r3, [pc, #228]	; (8016fa8 <interrupt_record+0x310>)
 8016ec2:	68db      	ldr	r3, [r3, #12]
 8016ec4:	ee07 3a90 	vmov	s15, r3
 8016ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016ecc:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8016ed0:	463b      	mov	r3, r7
 8016ed2:	2104      	movs	r1, #4
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	f7ff fe15 	bl	8016b04 <record_data>
		}
	if (record_mode == 9) { //90
 8016eda:	4b20      	ldr	r3, [pc, #128]	; (8016f5c <interrupt_record+0x2c4>)
 8016edc:	781b      	ldrb	r3, [r3, #0]
 8016ede:	2b09      	cmp	r3, #9
 8016ee0:	d11b      	bne.n	8016f1a <interrupt_record+0x282>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 8016ee2:	4b2f      	ldr	r3, [pc, #188]	; (8016fa0 <interrupt_record+0x308>)
 8016ee4:	681b      	ldr	r3, [r3, #0]
 8016ee6:	ee07 3a90 	vmov	s15, r3
 8016eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016eee:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_RIGHT][0];
 8016ef2:	4b2b      	ldr	r3, [pc, #172]	; (8016fa0 <interrupt_record+0x308>)
 8016ef4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016ef8:	ee07 3a90 	vmov	s15, r3
 8016efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016f00:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 8016f04:	4b29      	ldr	r3, [pc, #164]	; (8016fac <interrupt_record+0x314>)
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 8016f0a:	4b29      	ldr	r3, [pc, #164]	; (8016fb0 <interrupt_record+0x318>)
 8016f0c:	681b      	ldr	r3, [r3, #0]
 8016f0e:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016f10:	463b      	mov	r3, r7
 8016f12:	2104      	movs	r1, #4
 8016f14:	4618      	mov	r0, r3
 8016f16:	f7ff fdf5 	bl	8016b04 <record_data>
		}
	if (record_mode == 10) { //90
 8016f1a:	4b10      	ldr	r3, [pc, #64]	; (8016f5c <interrupt_record+0x2c4>)
 8016f1c:	781b      	ldrb	r3, [r3, #0]
 8016f1e:	2b0a      	cmp	r3, #10
 8016f20:	d148      	bne.n	8016fb4 <interrupt_record+0x31c>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 8016f22:	4b1f      	ldr	r3, [pc, #124]	; (8016fa0 <interrupt_record+0x308>)
 8016f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016f26:	ee07 3a90 	vmov	s15, r3
 8016f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016f2e:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 8016f32:	4b1b      	ldr	r3, [pc, #108]	; (8016fa0 <interrupt_record+0x308>)
 8016f34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8016f38:	ee07 3a90 	vmov	s15, r3
 8016f3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016f40:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 8016f44:	4b19      	ldr	r3, [pc, #100]	; (8016fac <interrupt_record+0x314>)
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 8016f4a:	4b19      	ldr	r3, [pc, #100]	; (8016fb0 <interrupt_record+0x318>)
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016f50:	463b      	mov	r3, r7
 8016f52:	2104      	movs	r1, #4
 8016f54:	4618      	mov	r0, r3
 8016f56:	f7ff fdd5 	bl	8016b04 <record_data>
 8016f5a:	e02b      	b.n	8016fb4 <interrupt_record+0x31c>
 8016f5c:	2000edc4 	.word	0x2000edc4
 8016f60:	2000022c 	.word	0x2000022c
 8016f64:	20000228 	.word	0x20000228
 8016f68:	20000224 	.word	0x20000224
 8016f6c:	20000220 	.word	0x20000220
 8016f70:	200004e8 	.word	0x200004e8
 8016f74:	2000026c 	.word	0x2000026c
 8016f78:	200004dc 	.word	0x200004dc
 8016f7c:	2000025c 	.word	0x2000025c
 8016f80:	20000258 	.word	0x20000258
 8016f84:	20000254 	.word	0x20000254
 8016f88:	20000250 	.word	0x20000250
 8016f8c:	20000280 	.word	0x20000280
 8016f90:	20000530 	.word	0x20000530
 8016f94:	20000238 	.word	0x20000238
 8016f98:	2000023c 	.word	0x2000023c
 8016f9c:	2000027c 	.word	0x2000027c
 8016fa0:	200002bc 	.word	0x200002bc
 8016fa4:	2000044c 	.word	0x2000044c
 8016fa8:	20000460 	.word	0x20000460
 8016fac:	200005e4 	.word	0x200005e4
 8016fb0:	200005e0 	.word	0x200005e0
		}
	if (record_mode == 11) { //距離の比較
 8016fb4:	4b0c      	ldr	r3, [pc, #48]	; (8016fe8 <interrupt_record+0x350>)
 8016fb6:	781b      	ldrb	r3, [r3, #0]
 8016fb8:	2b0b      	cmp	r3, #11
 8016fba:	d110      	bne.n	8016fde <interrupt_record+0x346>
				r_data[0] = E_speedL;
 8016fbc:	4b0b      	ldr	r3, [pc, #44]	; (8016fec <interrupt_record+0x354>)
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	603b      	str	r3, [r7, #0]
				r_data[1] = encoder_L;
 8016fc2:	4b0b      	ldr	r3, [pc, #44]	; (8016ff0 <interrupt_record+0x358>)
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	607b      	str	r3, [r7, #4]
				r_data[2] = E_speedR;
 8016fc8:	4b0a      	ldr	r3, [pc, #40]	; (8016ff4 <interrupt_record+0x35c>)
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	60bb      	str	r3, [r7, #8]
				r_data[3] = encoder_R;
 8016fce:	4b0a      	ldr	r3, [pc, #40]	; (8016ff8 <interrupt_record+0x360>)
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 8016fd4:	463b      	mov	r3, r7
 8016fd6:	2104      	movs	r1, #4
 8016fd8:	4618      	mov	r0, r3
 8016fda:	f7ff fd93 	bl	8016b04 <record_data>
		r_data[3] = g_V_L;
		record_data(r_data, 4);
	}
*/

}
 8016fde:	bf00      	nop
 8016fe0:	3710      	adds	r7, #16
 8016fe2:	46bd      	mov	sp, r7
 8016fe4:	bd80      	pop	{r7, pc}
 8016fe6:	bf00      	nop
 8016fe8:	2000edc4 	.word	0x2000edc4
 8016fec:	20000228 	.word	0x20000228
 8016ff0:	200006e0 	.word	0x200006e0
 8016ff4:	2000022c 	.word	0x2000022c
 8016ff8:	200006dc 	.word	0x200006dc

08016ffc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8016ffc:	b580      	push	{r7, lr}
 8016ffe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8017000:	4b1b      	ldr	r3, [pc, #108]	; (8017070 <MX_SPI1_Init+0x74>)
 8017002:	4a1c      	ldr	r2, [pc, #112]	; (8017074 <MX_SPI1_Init+0x78>)
 8017004:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8017006:	4b1a      	ldr	r3, [pc, #104]	; (8017070 <MX_SPI1_Init+0x74>)
 8017008:	f44f 7282 	mov.w	r2, #260	; 0x104
 801700c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801700e:	4b18      	ldr	r3, [pc, #96]	; (8017070 <MX_SPI1_Init+0x74>)
 8017010:	2200      	movs	r2, #0
 8017012:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8017014:	4b16      	ldr	r3, [pc, #88]	; (8017070 <MX_SPI1_Init+0x74>)
 8017016:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 801701a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 801701c:	4b14      	ldr	r3, [pc, #80]	; (8017070 <MX_SPI1_Init+0x74>)
 801701e:	2200      	movs	r2, #0
 8017020:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8017022:	4b13      	ldr	r3, [pc, #76]	; (8017070 <MX_SPI1_Init+0x74>)
 8017024:	2200      	movs	r2, #0
 8017026:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8017028:	4b11      	ldr	r3, [pc, #68]	; (8017070 <MX_SPI1_Init+0x74>)
 801702a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801702e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8017030:	4b0f      	ldr	r3, [pc, #60]	; (8017070 <MX_SPI1_Init+0x74>)
 8017032:	2210      	movs	r2, #16
 8017034:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8017036:	4b0e      	ldr	r3, [pc, #56]	; (8017070 <MX_SPI1_Init+0x74>)
 8017038:	2200      	movs	r2, #0
 801703a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801703c:	4b0c      	ldr	r3, [pc, #48]	; (8017070 <MX_SPI1_Init+0x74>)
 801703e:	2200      	movs	r2, #0
 8017040:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017042:	4b0b      	ldr	r3, [pc, #44]	; (8017070 <MX_SPI1_Init+0x74>)
 8017044:	2200      	movs	r2, #0
 8017046:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8017048:	4b09      	ldr	r3, [pc, #36]	; (8017070 <MX_SPI1_Init+0x74>)
 801704a:	2207      	movs	r2, #7
 801704c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 801704e:	4b08      	ldr	r3, [pc, #32]	; (8017070 <MX_SPI1_Init+0x74>)
 8017050:	2200      	movs	r2, #0
 8017052:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8017054:	4b06      	ldr	r3, [pc, #24]	; (8017070 <MX_SPI1_Init+0x74>)
 8017056:	2208      	movs	r2, #8
 8017058:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801705a:	4805      	ldr	r0, [pc, #20]	; (8017070 <MX_SPI1_Init+0x74>)
 801705c:	f005 ff2a 	bl	801ceb4 <HAL_SPI_Init>
 8017060:	4603      	mov	r3, r0
 8017062:	2b00      	cmp	r3, #0
 8017064:	d001      	beq.n	801706a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8017066:	f7f2 fce8 	bl	8009a3a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 801706a:	bf00      	nop
 801706c:	bd80      	pop	{r7, pc}
 801706e:	bf00      	nop
 8017070:	2000edd4 	.word	0x2000edd4
 8017074:	40013000 	.word	0x40013000

08017078 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8017078:	b580      	push	{r7, lr}
 801707a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 801707c:	4b1b      	ldr	r3, [pc, #108]	; (80170ec <MX_SPI3_Init+0x74>)
 801707e:	4a1c      	ldr	r2, [pc, #112]	; (80170f0 <MX_SPI3_Init+0x78>)
 8017080:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8017082:	4b1a      	ldr	r3, [pc, #104]	; (80170ec <MX_SPI3_Init+0x74>)
 8017084:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017088:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 801708a:	4b18      	ldr	r3, [pc, #96]	; (80170ec <MX_SPI3_Init+0x74>)
 801708c:	2200      	movs	r2, #0
 801708e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8017090:	4b16      	ldr	r3, [pc, #88]	; (80170ec <MX_SPI3_Init+0x74>)
 8017092:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8017096:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017098:	4b14      	ldr	r3, [pc, #80]	; (80170ec <MX_SPI3_Init+0x74>)
 801709a:	2200      	movs	r2, #0
 801709c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 801709e:	4b13      	ldr	r3, [pc, #76]	; (80170ec <MX_SPI3_Init+0x74>)
 80170a0:	2201      	movs	r2, #1
 80170a2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80170a4:	4b11      	ldr	r3, [pc, #68]	; (80170ec <MX_SPI3_Init+0x74>)
 80170a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80170aa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80170ac:	4b0f      	ldr	r3, [pc, #60]	; (80170ec <MX_SPI3_Init+0x74>)
 80170ae:	2208      	movs	r2, #8
 80170b0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80170b2:	4b0e      	ldr	r3, [pc, #56]	; (80170ec <MX_SPI3_Init+0x74>)
 80170b4:	2200      	movs	r2, #0
 80170b6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80170b8:	4b0c      	ldr	r3, [pc, #48]	; (80170ec <MX_SPI3_Init+0x74>)
 80170ba:	2200      	movs	r2, #0
 80170bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80170be:	4b0b      	ldr	r3, [pc, #44]	; (80170ec <MX_SPI3_Init+0x74>)
 80170c0:	2200      	movs	r2, #0
 80170c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80170c4:	4b09      	ldr	r3, [pc, #36]	; (80170ec <MX_SPI3_Init+0x74>)
 80170c6:	2207      	movs	r2, #7
 80170c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80170ca:	4b08      	ldr	r3, [pc, #32]	; (80170ec <MX_SPI3_Init+0x74>)
 80170cc:	2200      	movs	r2, #0
 80170ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80170d0:	4b06      	ldr	r3, [pc, #24]	; (80170ec <MX_SPI3_Init+0x74>)
 80170d2:	2200      	movs	r2, #0
 80170d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80170d6:	4805      	ldr	r0, [pc, #20]	; (80170ec <MX_SPI3_Init+0x74>)
 80170d8:	f005 feec 	bl	801ceb4 <HAL_SPI_Init>
 80170dc:	4603      	mov	r3, r0
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d001      	beq.n	80170e6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80170e2:	f7f2 fcaa 	bl	8009a3a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80170e6:	bf00      	nop
 80170e8:	bd80      	pop	{r7, pc}
 80170ea:	bf00      	nop
 80170ec:	2000ee38 	.word	0x2000ee38
 80170f0:	40003c00 	.word	0x40003c00

080170f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80170f4:	b580      	push	{r7, lr}
 80170f6:	b08c      	sub	sp, #48	; 0x30
 80170f8:	af00      	add	r7, sp, #0
 80170fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80170fc:	f107 031c 	add.w	r3, r7, #28
 8017100:	2200      	movs	r2, #0
 8017102:	601a      	str	r2, [r3, #0]
 8017104:	605a      	str	r2, [r3, #4]
 8017106:	609a      	str	r2, [r3, #8]
 8017108:	60da      	str	r2, [r3, #12]
 801710a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	4a3d      	ldr	r2, [pc, #244]	; (8017208 <HAL_SPI_MspInit+0x114>)
 8017112:	4293      	cmp	r3, r2
 8017114:	d129      	bne.n	801716a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8017116:	4b3d      	ldr	r3, [pc, #244]	; (801720c <HAL_SPI_MspInit+0x118>)
 8017118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801711a:	4a3c      	ldr	r2, [pc, #240]	; (801720c <HAL_SPI_MspInit+0x118>)
 801711c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8017120:	6613      	str	r3, [r2, #96]	; 0x60
 8017122:	4b3a      	ldr	r3, [pc, #232]	; (801720c <HAL_SPI_MspInit+0x118>)
 8017124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017126:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801712a:	61bb      	str	r3, [r7, #24]
 801712c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801712e:	4b37      	ldr	r3, [pc, #220]	; (801720c <HAL_SPI_MspInit+0x118>)
 8017130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017132:	4a36      	ldr	r2, [pc, #216]	; (801720c <HAL_SPI_MspInit+0x118>)
 8017134:	f043 0301 	orr.w	r3, r3, #1
 8017138:	64d3      	str	r3, [r2, #76]	; 0x4c
 801713a:	4b34      	ldr	r3, [pc, #208]	; (801720c <HAL_SPI_MspInit+0x118>)
 801713c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801713e:	f003 0301 	and.w	r3, r3, #1
 8017142:	617b      	str	r3, [r7, #20]
 8017144:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8017146:	23e0      	movs	r3, #224	; 0xe0
 8017148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801714a:	2302      	movs	r3, #2
 801714c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801714e:	2300      	movs	r3, #0
 8017150:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017152:	2300      	movs	r3, #0
 8017154:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8017156:	2305      	movs	r3, #5
 8017158:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801715a:	f107 031c 	add.w	r3, r7, #28
 801715e:	4619      	mov	r1, r3
 8017160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017164:	f004 fcec 	bl	801bb40 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8017168:	e049      	b.n	80171fe <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	681b      	ldr	r3, [r3, #0]
 801716e:	4a28      	ldr	r2, [pc, #160]	; (8017210 <HAL_SPI_MspInit+0x11c>)
 8017170:	4293      	cmp	r3, r2
 8017172:	d144      	bne.n	80171fe <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8017174:	4b25      	ldr	r3, [pc, #148]	; (801720c <HAL_SPI_MspInit+0x118>)
 8017176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017178:	4a24      	ldr	r2, [pc, #144]	; (801720c <HAL_SPI_MspInit+0x118>)
 801717a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801717e:	6593      	str	r3, [r2, #88]	; 0x58
 8017180:	4b22      	ldr	r3, [pc, #136]	; (801720c <HAL_SPI_MspInit+0x118>)
 8017182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017188:	613b      	str	r3, [r7, #16]
 801718a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801718c:	4b1f      	ldr	r3, [pc, #124]	; (801720c <HAL_SPI_MspInit+0x118>)
 801718e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017190:	4a1e      	ldr	r2, [pc, #120]	; (801720c <HAL_SPI_MspInit+0x118>)
 8017192:	f043 0304 	orr.w	r3, r3, #4
 8017196:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017198:	4b1c      	ldr	r3, [pc, #112]	; (801720c <HAL_SPI_MspInit+0x118>)
 801719a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801719c:	f003 0304 	and.w	r3, r3, #4
 80171a0:	60fb      	str	r3, [r7, #12]
 80171a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80171a4:	4b19      	ldr	r3, [pc, #100]	; (801720c <HAL_SPI_MspInit+0x118>)
 80171a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80171a8:	4a18      	ldr	r2, [pc, #96]	; (801720c <HAL_SPI_MspInit+0x118>)
 80171aa:	f043 0302 	orr.w	r3, r3, #2
 80171ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80171b0:	4b16      	ldr	r3, [pc, #88]	; (801720c <HAL_SPI_MspInit+0x118>)
 80171b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80171b4:	f003 0302 	and.w	r3, r3, #2
 80171b8:	60bb      	str	r3, [r7, #8]
 80171ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80171bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80171c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80171c2:	2302      	movs	r3, #2
 80171c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80171c6:	2300      	movs	r3, #0
 80171c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80171ca:	2300      	movs	r3, #0
 80171cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80171ce:	2306      	movs	r3, #6
 80171d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80171d2:	f107 031c 	add.w	r3, r7, #28
 80171d6:	4619      	mov	r1, r3
 80171d8:	480e      	ldr	r0, [pc, #56]	; (8017214 <HAL_SPI_MspInit+0x120>)
 80171da:	f004 fcb1 	bl	801bb40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80171de:	2320      	movs	r3, #32
 80171e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80171e2:	2302      	movs	r3, #2
 80171e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80171e6:	2300      	movs	r3, #0
 80171e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80171ea:	2300      	movs	r3, #0
 80171ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80171ee:	2306      	movs	r3, #6
 80171f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80171f2:	f107 031c 	add.w	r3, r7, #28
 80171f6:	4619      	mov	r1, r3
 80171f8:	4807      	ldr	r0, [pc, #28]	; (8017218 <HAL_SPI_MspInit+0x124>)
 80171fa:	f004 fca1 	bl	801bb40 <HAL_GPIO_Init>
}
 80171fe:	bf00      	nop
 8017200:	3730      	adds	r7, #48	; 0x30
 8017202:	46bd      	mov	sp, r7
 8017204:	bd80      	pop	{r7, pc}
 8017206:	bf00      	nop
 8017208:	40013000 	.word	0x40013000
 801720c:	40021000 	.word	0x40021000
 8017210:	40003c00 	.word	0x40003c00
 8017214:	48000800 	.word	0x48000800
 8017218:	48000400 	.word	0x48000400

0801721c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801721c:	b580      	push	{r7, lr}
 801721e:	b082      	sub	sp, #8
 8017220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017222:	4b0f      	ldr	r3, [pc, #60]	; (8017260 <HAL_MspInit+0x44>)
 8017224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017226:	4a0e      	ldr	r2, [pc, #56]	; (8017260 <HAL_MspInit+0x44>)
 8017228:	f043 0301 	orr.w	r3, r3, #1
 801722c:	6613      	str	r3, [r2, #96]	; 0x60
 801722e:	4b0c      	ldr	r3, [pc, #48]	; (8017260 <HAL_MspInit+0x44>)
 8017230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017232:	f003 0301 	and.w	r3, r3, #1
 8017236:	607b      	str	r3, [r7, #4]
 8017238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801723a:	4b09      	ldr	r3, [pc, #36]	; (8017260 <HAL_MspInit+0x44>)
 801723c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801723e:	4a08      	ldr	r2, [pc, #32]	; (8017260 <HAL_MspInit+0x44>)
 8017240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017244:	6593      	str	r3, [r2, #88]	; 0x58
 8017246:	4b06      	ldr	r3, [pc, #24]	; (8017260 <HAL_MspInit+0x44>)
 8017248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801724a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801724e:	603b      	str	r3, [r7, #0]
 8017250:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8017252:	f004 feb3 	bl	801bfbc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8017256:	bf00      	nop
 8017258:	3708      	adds	r7, #8
 801725a:	46bd      	mov	sp, r7
 801725c:	bd80      	pop	{r7, pc}
 801725e:	bf00      	nop
 8017260:	40021000 	.word	0x40021000

08017264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8017264:	b480      	push	{r7}
 8017266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8017268:	e7fe      	b.n	8017268 <NMI_Handler+0x4>

0801726a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801726a:	b480      	push	{r7}
 801726c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801726e:	e7fe      	b.n	801726e <HardFault_Handler+0x4>

08017270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8017270:	b480      	push	{r7}
 8017272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8017274:	e7fe      	b.n	8017274 <MemManage_Handler+0x4>

08017276 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8017276:	b480      	push	{r7}
 8017278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801727a:	e7fe      	b.n	801727a <BusFault_Handler+0x4>

0801727c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801727c:	b480      	push	{r7}
 801727e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8017280:	e7fe      	b.n	8017280 <UsageFault_Handler+0x4>

08017282 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8017282:	b480      	push	{r7}
 8017284:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8017286:	bf00      	nop
 8017288:	46bd      	mov	sp, r7
 801728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801728e:	4770      	bx	lr

08017290 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8017290:	b480      	push	{r7}
 8017292:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8017294:	bf00      	nop
 8017296:	46bd      	mov	sp, r7
 8017298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801729c:	4770      	bx	lr

0801729e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801729e:	b480      	push	{r7}
 80172a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80172a2:	bf00      	nop
 80172a4:	46bd      	mov	sp, r7
 80172a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172aa:	4770      	bx	lr

080172ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80172ac:	b580      	push	{r7, lr}
 80172ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80172b0:	f001 fbee 	bl	8018a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80172b4:	bf00      	nop
 80172b6:	bd80      	pop	{r7, pc}

080172b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80172b8:	b580      	push	{r7, lr}
 80172ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80172bc:	4802      	ldr	r0, [pc, #8]	; (80172c8 <DMA1_Channel1_IRQHandler+0x10>)
 80172be:	f004 f887 	bl	801b3d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80172c2:	bf00      	nop
 80172c4:	bd80      	pop	{r7, pc}
 80172c6:	bf00      	nop
 80172c8:	200007a4 	.word	0x200007a4

080172cc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80172cc:	b580      	push	{r7, lr}
 80172ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80172d0:	4802      	ldr	r0, [pc, #8]	; (80172dc <ADC1_2_IRQHandler+0x10>)
 80172d2:	f002 fb8d 	bl	80199f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
//  pl_callback_getSensor();
  /* USER CODE END ADC1_2_IRQn 1 */
}
 80172d6:	bf00      	nop
 80172d8:	bd80      	pop	{r7, pc}
 80172da:	bf00      	nop
 80172dc:	20000738 	.word	0x20000738

080172e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80172e0:	b580      	push	{r7, lr}
 80172e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80172e4:	480d      	ldr	r0, [pc, #52]	; (801731c <TIM6_DAC_IRQHandler+0x3c>)
 80172e6:	f006 ffc5 	bl	801e274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  interrupt_timer();
 80172ea:	f7f0 ffbd 	bl	8008268 <interrupt_timer>
  interupt_calSensor();
 80172ee:	f7ea fee1 	bl	80020b4 <interupt_calSensor>
  ICM20602_DataUpdate();
 80172f2:	f7f0 fcdb 	bl	8007cac <ICM20602_DataUpdate>
  interrupt_calGyro();
 80172f6:	f7ea fceb 	bl	8001cd0 <interrupt_calGyro>
  AS5047_DataUpdate();
 80172fa:	f7f0 f993 	bl	8007624 <AS5047_DataUpdate>
  interupt_calEncoder();
 80172fe:	f7e9 fec3 	bl	8001088 <interupt_calEncoder>
  interupt_calFusion();
 8017302:	f7ea faed 	bl	80018e0 <interupt_calFusion>
  interrupt_WallCut();
 8017306:	f7ef f8f7 	bl	80064f8 <interrupt_WallCut>
  interupt_DriveMotor();
 801730a:	f7eb f845 	bl	8002398 <interupt_DriveMotor>

  interrupt_FailSafe();
 801730e:	f7f2 f8eb 	bl	80094e8 <interrupt_FailSafe>
  interrupt_record();
 8017312:	f7ff fcc1 	bl	8016c98 <interrupt_record>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8017316:	bf00      	nop
 8017318:	bd80      	pop	{r7, pc}
 801731a:	bf00      	nop
 801731c:	2000eea0 	.word	0x2000eea0

08017320 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8017320:	b480      	push	{r7}
 8017322:	af00      	add	r7, sp, #0
	return 1;
 8017324:	2301      	movs	r3, #1
}
 8017326:	4618      	mov	r0, r3
 8017328:	46bd      	mov	sp, r7
 801732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801732e:	4770      	bx	lr

08017330 <_kill>:

int _kill(int pid, int sig)
{
 8017330:	b580      	push	{r7, lr}
 8017332:	b082      	sub	sp, #8
 8017334:	af00      	add	r7, sp, #0
 8017336:	6078      	str	r0, [r7, #4]
 8017338:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801733a:	f008 fe6f 	bl	802001c <__errno>
 801733e:	4603      	mov	r3, r0
 8017340:	2216      	movs	r2, #22
 8017342:	601a      	str	r2, [r3, #0]
	return -1;
 8017344:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017348:	4618      	mov	r0, r3
 801734a:	3708      	adds	r7, #8
 801734c:	46bd      	mov	sp, r7
 801734e:	bd80      	pop	{r7, pc}

08017350 <_exit>:

void _exit (int status)
{
 8017350:	b580      	push	{r7, lr}
 8017352:	b082      	sub	sp, #8
 8017354:	af00      	add	r7, sp, #0
 8017356:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8017358:	f04f 31ff 	mov.w	r1, #4294967295
 801735c:	6878      	ldr	r0, [r7, #4]
 801735e:	f7ff ffe7 	bl	8017330 <_kill>
	while (1) {}		/* Make sure we hang here */
 8017362:	e7fe      	b.n	8017362 <_exit+0x12>

08017364 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8017364:	b580      	push	{r7, lr}
 8017366:	b086      	sub	sp, #24
 8017368:	af00      	add	r7, sp, #0
 801736a:	60f8      	str	r0, [r7, #12]
 801736c:	60b9      	str	r1, [r7, #8]
 801736e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017370:	2300      	movs	r3, #0
 8017372:	617b      	str	r3, [r7, #20]
 8017374:	e00a      	b.n	801738c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8017376:	f3af 8000 	nop.w
 801737a:	4601      	mov	r1, r0
 801737c:	68bb      	ldr	r3, [r7, #8]
 801737e:	1c5a      	adds	r2, r3, #1
 8017380:	60ba      	str	r2, [r7, #8]
 8017382:	b2ca      	uxtb	r2, r1
 8017384:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017386:	697b      	ldr	r3, [r7, #20]
 8017388:	3301      	adds	r3, #1
 801738a:	617b      	str	r3, [r7, #20]
 801738c:	697a      	ldr	r2, [r7, #20]
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	429a      	cmp	r2, r3
 8017392:	dbf0      	blt.n	8017376 <_read+0x12>
	}

return len;
 8017394:	687b      	ldr	r3, [r7, #4]
}
 8017396:	4618      	mov	r0, r3
 8017398:	3718      	adds	r7, #24
 801739a:	46bd      	mov	sp, r7
 801739c:	bd80      	pop	{r7, pc}
	...

080173a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80173a0:	b580      	push	{r7, lr}
 80173a2:	b086      	sub	sp, #24
 80173a4:	af00      	add	r7, sp, #0
 80173a6:	60f8      	str	r0, [r7, #12]
 80173a8:	60b9      	str	r1, [r7, #8]
 80173aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80173ac:	2300      	movs	r3, #0
 80173ae:	617b      	str	r3, [r7, #20]
 80173b0:	e00a      	b.n	80173c8 <_write+0x28>
	{
		HAL_UART_Transmit(&huart1, ptr++, 1, 1);
 80173b2:	68b9      	ldr	r1, [r7, #8]
 80173b4:	1c4b      	adds	r3, r1, #1
 80173b6:	60bb      	str	r3, [r7, #8]
 80173b8:	2301      	movs	r3, #1
 80173ba:	2201      	movs	r2, #1
 80173bc:	4807      	ldr	r0, [pc, #28]	; (80173dc <_write+0x3c>)
 80173be:	f007 ffe3 	bl	801f388 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80173c2:	697b      	ldr	r3, [r7, #20]
 80173c4:	3301      	adds	r3, #1
 80173c6:	617b      	str	r3, [r7, #20]
 80173c8:	697a      	ldr	r2, [r7, #20]
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	429a      	cmp	r2, r3
 80173ce:	dbf0      	blt.n	80173b2 <_write+0x12>
	}
	return len;
 80173d0:	687b      	ldr	r3, [r7, #4]
}
 80173d2:	4618      	mov	r0, r3
 80173d4:	3718      	adds	r7, #24
 80173d6:	46bd      	mov	sp, r7
 80173d8:	bd80      	pop	{r7, pc}
 80173da:	bf00      	nop
 80173dc:	2000f87c 	.word	0x2000f87c

080173e0 <_close>:

int _close(int file)
{
 80173e0:	b480      	push	{r7}
 80173e2:	b083      	sub	sp, #12
 80173e4:	af00      	add	r7, sp, #0
 80173e6:	6078      	str	r0, [r7, #4]
	return -1;
 80173e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80173ec:	4618      	mov	r0, r3
 80173ee:	370c      	adds	r7, #12
 80173f0:	46bd      	mov	sp, r7
 80173f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173f6:	4770      	bx	lr

080173f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80173f8:	b480      	push	{r7}
 80173fa:	b083      	sub	sp, #12
 80173fc:	af00      	add	r7, sp, #0
 80173fe:	6078      	str	r0, [r7, #4]
 8017400:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8017402:	683b      	ldr	r3, [r7, #0]
 8017404:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017408:	605a      	str	r2, [r3, #4]
	return 0;
 801740a:	2300      	movs	r3, #0
}
 801740c:	4618      	mov	r0, r3
 801740e:	370c      	adds	r7, #12
 8017410:	46bd      	mov	sp, r7
 8017412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017416:	4770      	bx	lr

08017418 <_isatty>:

int _isatty(int file)
{
 8017418:	b480      	push	{r7}
 801741a:	b083      	sub	sp, #12
 801741c:	af00      	add	r7, sp, #0
 801741e:	6078      	str	r0, [r7, #4]
	return 1;
 8017420:	2301      	movs	r3, #1
}
 8017422:	4618      	mov	r0, r3
 8017424:	370c      	adds	r7, #12
 8017426:	46bd      	mov	sp, r7
 8017428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801742c:	4770      	bx	lr

0801742e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801742e:	b480      	push	{r7}
 8017430:	b085      	sub	sp, #20
 8017432:	af00      	add	r7, sp, #0
 8017434:	60f8      	str	r0, [r7, #12]
 8017436:	60b9      	str	r1, [r7, #8]
 8017438:	607a      	str	r2, [r7, #4]
	return 0;
 801743a:	2300      	movs	r3, #0
}
 801743c:	4618      	mov	r0, r3
 801743e:	3714      	adds	r7, #20
 8017440:	46bd      	mov	sp, r7
 8017442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017446:	4770      	bx	lr

08017448 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8017448:	b580      	push	{r7, lr}
 801744a:	b086      	sub	sp, #24
 801744c:	af00      	add	r7, sp, #0
 801744e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8017450:	4a14      	ldr	r2, [pc, #80]	; (80174a4 <_sbrk+0x5c>)
 8017452:	4b15      	ldr	r3, [pc, #84]	; (80174a8 <_sbrk+0x60>)
 8017454:	1ad3      	subs	r3, r2, r3
 8017456:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8017458:	697b      	ldr	r3, [r7, #20]
 801745a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801745c:	4b13      	ldr	r3, [pc, #76]	; (80174ac <_sbrk+0x64>)
 801745e:	681b      	ldr	r3, [r3, #0]
 8017460:	2b00      	cmp	r3, #0
 8017462:	d102      	bne.n	801746a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8017464:	4b11      	ldr	r3, [pc, #68]	; (80174ac <_sbrk+0x64>)
 8017466:	4a12      	ldr	r2, [pc, #72]	; (80174b0 <_sbrk+0x68>)
 8017468:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801746a:	4b10      	ldr	r3, [pc, #64]	; (80174ac <_sbrk+0x64>)
 801746c:	681a      	ldr	r2, [r3, #0]
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	4413      	add	r3, r2
 8017472:	693a      	ldr	r2, [r7, #16]
 8017474:	429a      	cmp	r2, r3
 8017476:	d207      	bcs.n	8017488 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8017478:	f008 fdd0 	bl	802001c <__errno>
 801747c:	4603      	mov	r3, r0
 801747e:	220c      	movs	r2, #12
 8017480:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8017482:	f04f 33ff 	mov.w	r3, #4294967295
 8017486:	e009      	b.n	801749c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8017488:	4b08      	ldr	r3, [pc, #32]	; (80174ac <_sbrk+0x64>)
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801748e:	4b07      	ldr	r3, [pc, #28]	; (80174ac <_sbrk+0x64>)
 8017490:	681a      	ldr	r2, [r3, #0]
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	4413      	add	r3, r2
 8017496:	4a05      	ldr	r2, [pc, #20]	; (80174ac <_sbrk+0x64>)
 8017498:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801749a:	68fb      	ldr	r3, [r7, #12]
}
 801749c:	4618      	mov	r0, r3
 801749e:	3718      	adds	r7, #24
 80174a0:	46bd      	mov	sp, r7
 80174a2:	bd80      	pop	{r7, pc}
 80174a4:	2001c000 	.word	0x2001c000
 80174a8:	00000400 	.word	0x00000400
 80174ac:	2000ee9c 	.word	0x2000ee9c
 80174b0:	2000f920 	.word	0x2000f920

080174b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80174b4:	b480      	push	{r7}
 80174b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80174b8:	4b06      	ldr	r3, [pc, #24]	; (80174d4 <SystemInit+0x20>)
 80174ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80174be:	4a05      	ldr	r2, [pc, #20]	; (80174d4 <SystemInit+0x20>)
 80174c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80174c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80174c8:	bf00      	nop
 80174ca:	46bd      	mov	sp, r7
 80174cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174d0:	4770      	bx	lr
 80174d2:	bf00      	nop
 80174d4:	e000ed00 	.word	0xe000ed00

080174d8 <MX_TIM6_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80174d8:	b580      	push	{r7, lr}
 80174da:	b084      	sub	sp, #16
 80174dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80174de:	1d3b      	adds	r3, r7, #4
 80174e0:	2200      	movs	r2, #0
 80174e2:	601a      	str	r2, [r3, #0]
 80174e4:	605a      	str	r2, [r3, #4]
 80174e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80174e8:	4b14      	ldr	r3, [pc, #80]	; (801753c <MX_TIM6_Init+0x64>)
 80174ea:	4a15      	ldr	r2, [pc, #84]	; (8017540 <MX_TIM6_Init+0x68>)
 80174ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 85-1;
 80174ee:	4b13      	ldr	r3, [pc, #76]	; (801753c <MX_TIM6_Init+0x64>)
 80174f0:	2254      	movs	r2, #84	; 0x54
 80174f2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80174f4:	4b11      	ldr	r3, [pc, #68]	; (801753c <MX_TIM6_Init+0x64>)
 80174f6:	2200      	movs	r2, #0
 80174f8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80174fa:	4b10      	ldr	r3, [pc, #64]	; (801753c <MX_TIM6_Init+0x64>)
 80174fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8017500:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017502:	4b0e      	ldr	r3, [pc, #56]	; (801753c <MX_TIM6_Init+0x64>)
 8017504:	2200      	movs	r2, #0
 8017506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8017508:	480c      	ldr	r0, [pc, #48]	; (801753c <MX_TIM6_Init+0x64>)
 801750a:	f006 fbeb 	bl	801dce4 <HAL_TIM_Base_Init>
 801750e:	4603      	mov	r3, r0
 8017510:	2b00      	cmp	r3, #0
 8017512:	d001      	beq.n	8017518 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8017514:	f7f2 fa91 	bl	8009a3a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017518:	2300      	movs	r3, #0
 801751a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801751c:	2300      	movs	r3, #0
 801751e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8017520:	1d3b      	adds	r3, r7, #4
 8017522:	4619      	mov	r1, r3
 8017524:	4805      	ldr	r0, [pc, #20]	; (801753c <MX_TIM6_Init+0x64>)
 8017526:	f007 fd59 	bl	801efdc <HAL_TIMEx_MasterConfigSynchronization>
 801752a:	4603      	mov	r3, r0
 801752c:	2b00      	cmp	r3, #0
 801752e:	d001      	beq.n	8017534 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8017530:	f7f2 fa83 	bl	8009a3a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8017534:	bf00      	nop
 8017536:	3710      	adds	r7, #16
 8017538:	46bd      	mov	sp, r7
 801753a:	bd80      	pop	{r7, pc}
 801753c:	2000eea0 	.word	0x2000eea0
 8017540:	40001000 	.word	0x40001000

08017544 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b098      	sub	sp, #96	; 0x60
 8017548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801754a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801754e:	2200      	movs	r2, #0
 8017550:	601a      	str	r2, [r3, #0]
 8017552:	605a      	str	r2, [r3, #4]
 8017554:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8017556:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801755a:	2200      	movs	r2, #0
 801755c:	601a      	str	r2, [r3, #0]
 801755e:	605a      	str	r2, [r3, #4]
 8017560:	609a      	str	r2, [r3, #8]
 8017562:	60da      	str	r2, [r3, #12]
 8017564:	611a      	str	r2, [r3, #16]
 8017566:	615a      	str	r2, [r3, #20]
 8017568:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 801756a:	1d3b      	adds	r3, r7, #4
 801756c:	2234      	movs	r2, #52	; 0x34
 801756e:	2100      	movs	r1, #0
 8017570:	4618      	mov	r0, r3
 8017572:	f008 fd8b 	bl	802008c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8017576:	4b41      	ldr	r3, [pc, #260]	; (801767c <MX_TIM8_Init+0x138>)
 8017578:	4a41      	ldr	r2, [pc, #260]	; (8017680 <MX_TIM8_Init+0x13c>)
 801757a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 801757c:	4b3f      	ldr	r3, [pc, #252]	; (801767c <MX_TIM8_Init+0x138>)
 801757e:	2201      	movs	r2, #1
 8017580:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017582:	4b3e      	ldr	r3, [pc, #248]	; (801767c <MX_TIM8_Init+0x138>)
 8017584:	2200      	movs	r2, #0
 8017586:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 8017588:	4b3c      	ldr	r3, [pc, #240]	; (801767c <MX_TIM8_Init+0x138>)
 801758a:	f240 628f 	movw	r2, #1679	; 0x68f
 801758e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017590:	4b3a      	ldr	r3, [pc, #232]	; (801767c <MX_TIM8_Init+0x138>)
 8017592:	2200      	movs	r2, #0
 8017594:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8017596:	4b39      	ldr	r3, [pc, #228]	; (801767c <MX_TIM8_Init+0x138>)
 8017598:	2200      	movs	r2, #0
 801759a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801759c:	4b37      	ldr	r3, [pc, #220]	; (801767c <MX_TIM8_Init+0x138>)
 801759e:	2200      	movs	r2, #0
 80175a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80175a2:	4836      	ldr	r0, [pc, #216]	; (801767c <MX_TIM8_Init+0x138>)
 80175a4:	f006 fc66 	bl	801de74 <HAL_TIM_PWM_Init>
 80175a8:	4603      	mov	r3, r0
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d001      	beq.n	80175b2 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80175ae:	f7f2 fa44 	bl	8009a3a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80175b2:	2300      	movs	r3, #0
 80175b4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80175b6:	2300      	movs	r3, #0
 80175b8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80175ba:	2300      	movs	r3, #0
 80175bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80175be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80175c2:	4619      	mov	r1, r3
 80175c4:	482d      	ldr	r0, [pc, #180]	; (801767c <MX_TIM8_Init+0x138>)
 80175c6:	f007 fd09 	bl	801efdc <HAL_TIMEx_MasterConfigSynchronization>
 80175ca:	4603      	mov	r3, r0
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d001      	beq.n	80175d4 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80175d0:	f7f2 fa33 	bl	8009a3a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80175d4:	2360      	movs	r3, #96	; 0x60
 80175d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 419;
 80175d8:	f240 13a3 	movw	r3, #419	; 0x1a3
 80175dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80175de:	2300      	movs	r3, #0
 80175e0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80175e2:	2300      	movs	r3, #0
 80175e4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80175e6:	2300      	movs	r3, #0
 80175e8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80175ea:	2300      	movs	r3, #0
 80175ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80175ee:	2300      	movs	r3, #0
 80175f0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80175f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80175f6:	2200      	movs	r2, #0
 80175f8:	4619      	mov	r1, r3
 80175fa:	4820      	ldr	r0, [pc, #128]	; (801767c <MX_TIM8_Init+0x138>)
 80175fc:	f006 ffba 	bl	801e574 <HAL_TIM_PWM_ConfigChannel>
 8017600:	4603      	mov	r3, r0
 8017602:	2b00      	cmp	r3, #0
 8017604:	d001      	beq.n	801760a <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8017606:	f7f2 fa18 	bl	8009a3a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 801760a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801760e:	2208      	movs	r2, #8
 8017610:	4619      	mov	r1, r3
 8017612:	481a      	ldr	r0, [pc, #104]	; (801767c <MX_TIM8_Init+0x138>)
 8017614:	f006 ffae 	bl	801e574 <HAL_TIM_PWM_ConfigChannel>
 8017618:	4603      	mov	r3, r0
 801761a:	2b00      	cmp	r3, #0
 801761c:	d001      	beq.n	8017622 <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 801761e:	f7f2 fa0c 	bl	8009a3a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8017622:	2300      	movs	r3, #0
 8017624:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8017626:	2300      	movs	r3, #0
 8017628:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801762a:	2300      	movs	r3, #0
 801762c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 801762e:	2300      	movs	r3, #0
 8017630:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8017632:	2300      	movs	r3, #0
 8017634:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8017636:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801763a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 801763c:	2300      	movs	r3, #0
 801763e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8017640:	2300      	movs	r3, #0
 8017642:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8017644:	2300      	movs	r3, #0
 8017646:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8017648:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801764c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 801764e:	2300      	movs	r3, #0
 8017650:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8017652:	2300      	movs	r3, #0
 8017654:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8017656:	2300      	movs	r3, #0
 8017658:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 801765a:	1d3b      	adds	r3, r7, #4
 801765c:	4619      	mov	r1, r3
 801765e:	4807      	ldr	r0, [pc, #28]	; (801767c <MX_TIM8_Init+0x138>)
 8017660:	f007 fd4a 	bl	801f0f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8017664:	4603      	mov	r3, r0
 8017666:	2b00      	cmp	r3, #0
 8017668:	d001      	beq.n	801766e <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 801766a:	f7f2 f9e6 	bl	8009a3a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 801766e:	4803      	ldr	r0, [pc, #12]	; (801767c <MX_TIM8_Init+0x138>)
 8017670:	f000 f8da 	bl	8017828 <HAL_TIM_MspPostInit>

}
 8017674:	bf00      	nop
 8017676:	3760      	adds	r7, #96	; 0x60
 8017678:	46bd      	mov	sp, r7
 801767a:	bd80      	pop	{r7, pc}
 801767c:	2000eeec 	.word	0x2000eeec
 8017680:	40013400 	.word	0x40013400

08017684 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8017684:	b580      	push	{r7, lr}
 8017686:	b094      	sub	sp, #80	; 0x50
 8017688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 801768a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801768e:	2200      	movs	r2, #0
 8017690:	601a      	str	r2, [r3, #0]
 8017692:	605a      	str	r2, [r3, #4]
 8017694:	609a      	str	r2, [r3, #8]
 8017696:	60da      	str	r2, [r3, #12]
 8017698:	611a      	str	r2, [r3, #16]
 801769a:	615a      	str	r2, [r3, #20]
 801769c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 801769e:	463b      	mov	r3, r7
 80176a0:	2234      	movs	r2, #52	; 0x34
 80176a2:	2100      	movs	r1, #0
 80176a4:	4618      	mov	r0, r3
 80176a6:	f008 fcf1 	bl	802008c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80176aa:	4b30      	ldr	r3, [pc, #192]	; (801776c <MX_TIM16_Init+0xe8>)
 80176ac:	4a30      	ldr	r2, [pc, #192]	; (8017770 <MX_TIM16_Init+0xec>)
 80176ae:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2-1;
 80176b0:	4b2e      	ldr	r3, [pc, #184]	; (801776c <MX_TIM16_Init+0xe8>)
 80176b2:	2201      	movs	r2, #1
 80176b4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80176b6:	4b2d      	ldr	r3, [pc, #180]	; (801776c <MX_TIM16_Init+0xe8>)
 80176b8:	2200      	movs	r2, #0
 80176ba:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 80176bc:	4b2b      	ldr	r3, [pc, #172]	; (801776c <MX_TIM16_Init+0xe8>)
 80176be:	2264      	movs	r2, #100	; 0x64
 80176c0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80176c2:	4b2a      	ldr	r3, [pc, #168]	; (801776c <MX_TIM16_Init+0xe8>)
 80176c4:	2200      	movs	r2, #0
 80176c6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80176c8:	4b28      	ldr	r3, [pc, #160]	; (801776c <MX_TIM16_Init+0xe8>)
 80176ca:	2200      	movs	r2, #0
 80176cc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80176ce:	4b27      	ldr	r3, [pc, #156]	; (801776c <MX_TIM16_Init+0xe8>)
 80176d0:	2200      	movs	r2, #0
 80176d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80176d4:	4825      	ldr	r0, [pc, #148]	; (801776c <MX_TIM16_Init+0xe8>)
 80176d6:	f006 fb05 	bl	801dce4 <HAL_TIM_Base_Init>
 80176da:	4603      	mov	r3, r0
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d001      	beq.n	80176e4 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 80176e0:	f7f2 f9ab 	bl	8009a3a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80176e4:	4821      	ldr	r0, [pc, #132]	; (801776c <MX_TIM16_Init+0xe8>)
 80176e6:	f006 fbc5 	bl	801de74 <HAL_TIM_PWM_Init>
 80176ea:	4603      	mov	r3, r0
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d001      	beq.n	80176f4 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 80176f0:	f7f2 f9a3 	bl	8009a3a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80176f4:	2360      	movs	r3, #96	; 0x60
 80176f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 30;
 80176f8:	231e      	movs	r3, #30
 80176fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80176fc:	2300      	movs	r3, #0
 80176fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8017700:	2300      	movs	r3, #0
 8017702:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8017704:	2300      	movs	r3, #0
 8017706:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8017708:	2300      	movs	r3, #0
 801770a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801770c:	2300      	movs	r3, #0
 801770e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8017710:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017714:	2200      	movs	r2, #0
 8017716:	4619      	mov	r1, r3
 8017718:	4814      	ldr	r0, [pc, #80]	; (801776c <MX_TIM16_Init+0xe8>)
 801771a:	f006 ff2b 	bl	801e574 <HAL_TIM_PWM_ConfigChannel>
 801771e:	4603      	mov	r3, r0
 8017720:	2b00      	cmp	r3, #0
 8017722:	d001      	beq.n	8017728 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 8017724:	f7f2 f989 	bl	8009a3a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8017728:	2300      	movs	r3, #0
 801772a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801772c:	2300      	movs	r3, #0
 801772e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8017730:	2300      	movs	r3, #0
 8017732:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8017734:	2300      	movs	r3, #0
 8017736:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8017738:	2300      	movs	r3, #0
 801773a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801773c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8017740:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8017742:	2300      	movs	r3, #0
 8017744:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8017746:	2300      	movs	r3, #0
 8017748:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 801774a:	463b      	mov	r3, r7
 801774c:	4619      	mov	r1, r3
 801774e:	4807      	ldr	r0, [pc, #28]	; (801776c <MX_TIM16_Init+0xe8>)
 8017750:	f007 fcd2 	bl	801f0f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8017754:	4603      	mov	r3, r0
 8017756:	2b00      	cmp	r3, #0
 8017758:	d001      	beq.n	801775e <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 801775a:	f7f2 f96e 	bl	8009a3a <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 801775e:	4803      	ldr	r0, [pc, #12]	; (801776c <MX_TIM16_Init+0xe8>)
 8017760:	f000 f862 	bl	8017828 <HAL_TIM_MspPostInit>

}
 8017764:	bf00      	nop
 8017766:	3750      	adds	r7, #80	; 0x50
 8017768:	46bd      	mov	sp, r7
 801776a:	bd80      	pop	{r7, pc}
 801776c:	2000ef38 	.word	0x2000ef38
 8017770:	40014400 	.word	0x40014400

08017774 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8017774:	b580      	push	{r7, lr}
 8017776:	b084      	sub	sp, #16
 8017778:	af00      	add	r7, sp, #0
 801777a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	681b      	ldr	r3, [r3, #0]
 8017780:	4a16      	ldr	r2, [pc, #88]	; (80177dc <HAL_TIM_Base_MspInit+0x68>)
 8017782:	4293      	cmp	r3, r2
 8017784:	d114      	bne.n	80177b0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8017786:	4b16      	ldr	r3, [pc, #88]	; (80177e0 <HAL_TIM_Base_MspInit+0x6c>)
 8017788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801778a:	4a15      	ldr	r2, [pc, #84]	; (80177e0 <HAL_TIM_Base_MspInit+0x6c>)
 801778c:	f043 0310 	orr.w	r3, r3, #16
 8017790:	6593      	str	r3, [r2, #88]	; 0x58
 8017792:	4b13      	ldr	r3, [pc, #76]	; (80177e0 <HAL_TIM_Base_MspInit+0x6c>)
 8017794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017796:	f003 0310 	and.w	r3, r3, #16
 801779a:	60fb      	str	r3, [r7, #12]
 801779c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 801779e:	2200      	movs	r2, #0
 80177a0:	2103      	movs	r1, #3
 80177a2:	2036      	movs	r0, #54	; 0x36
 80177a4:	f003 fc63 	bl	801b06e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80177a8:	2036      	movs	r0, #54	; 0x36
 80177aa:	f003 fc7a 	bl	801b0a2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80177ae:	e010      	b.n	80177d2 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM16)
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	681b      	ldr	r3, [r3, #0]
 80177b4:	4a0b      	ldr	r2, [pc, #44]	; (80177e4 <HAL_TIM_Base_MspInit+0x70>)
 80177b6:	4293      	cmp	r3, r2
 80177b8:	d10b      	bne.n	80177d2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80177ba:	4b09      	ldr	r3, [pc, #36]	; (80177e0 <HAL_TIM_Base_MspInit+0x6c>)
 80177bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80177be:	4a08      	ldr	r2, [pc, #32]	; (80177e0 <HAL_TIM_Base_MspInit+0x6c>)
 80177c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80177c4:	6613      	str	r3, [r2, #96]	; 0x60
 80177c6:	4b06      	ldr	r3, [pc, #24]	; (80177e0 <HAL_TIM_Base_MspInit+0x6c>)
 80177c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80177ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80177ce:	60bb      	str	r3, [r7, #8]
 80177d0:	68bb      	ldr	r3, [r7, #8]
}
 80177d2:	bf00      	nop
 80177d4:	3710      	adds	r7, #16
 80177d6:	46bd      	mov	sp, r7
 80177d8:	bd80      	pop	{r7, pc}
 80177da:	bf00      	nop
 80177dc:	40001000 	.word	0x40001000
 80177e0:	40021000 	.word	0x40021000
 80177e4:	40014400 	.word	0x40014400

080177e8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80177e8:	b480      	push	{r7}
 80177ea:	b085      	sub	sp, #20
 80177ec:	af00      	add	r7, sp, #0
 80177ee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	681b      	ldr	r3, [r3, #0]
 80177f4:	4a0a      	ldr	r2, [pc, #40]	; (8017820 <HAL_TIM_PWM_MspInit+0x38>)
 80177f6:	4293      	cmp	r3, r2
 80177f8:	d10b      	bne.n	8017812 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80177fa:	4b0a      	ldr	r3, [pc, #40]	; (8017824 <HAL_TIM_PWM_MspInit+0x3c>)
 80177fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80177fe:	4a09      	ldr	r2, [pc, #36]	; (8017824 <HAL_TIM_PWM_MspInit+0x3c>)
 8017800:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017804:	6613      	str	r3, [r2, #96]	; 0x60
 8017806:	4b07      	ldr	r3, [pc, #28]	; (8017824 <HAL_TIM_PWM_MspInit+0x3c>)
 8017808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801780a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801780e:	60fb      	str	r3, [r7, #12]
 8017810:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8017812:	bf00      	nop
 8017814:	3714      	adds	r7, #20
 8017816:	46bd      	mov	sp, r7
 8017818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801781c:	4770      	bx	lr
 801781e:	bf00      	nop
 8017820:	40013400 	.word	0x40013400
 8017824:	40021000 	.word	0x40021000

08017828 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8017828:	b580      	push	{r7, lr}
 801782a:	b08a      	sub	sp, #40	; 0x28
 801782c:	af00      	add	r7, sp, #0
 801782e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017830:	f107 0314 	add.w	r3, r7, #20
 8017834:	2200      	movs	r2, #0
 8017836:	601a      	str	r2, [r3, #0]
 8017838:	605a      	str	r2, [r3, #4]
 801783a:	609a      	str	r2, [r3, #8]
 801783c:	60da      	str	r2, [r3, #12]
 801783e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	4a2b      	ldr	r2, [pc, #172]	; (80178f4 <HAL_TIM_MspPostInit+0xcc>)
 8017846:	4293      	cmp	r3, r2
 8017848:	d12d      	bne.n	80178a6 <HAL_TIM_MspPostInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801784a:	4b2b      	ldr	r3, [pc, #172]	; (80178f8 <HAL_TIM_MspPostInit+0xd0>)
 801784c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801784e:	4a2a      	ldr	r2, [pc, #168]	; (80178f8 <HAL_TIM_MspPostInit+0xd0>)
 8017850:	f043 0302 	orr.w	r3, r3, #2
 8017854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017856:	4b28      	ldr	r3, [pc, #160]	; (80178f8 <HAL_TIM_MspPostInit+0xd0>)
 8017858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801785a:	f003 0302 	and.w	r3, r3, #2
 801785e:	613b      	str	r3, [r7, #16]
 8017860:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PB6     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_R_ENABLE_Pin;
 8017862:	2340      	movs	r3, #64	; 0x40
 8017864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017866:	2302      	movs	r3, #2
 8017868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801786a:	2300      	movs	r3, #0
 801786c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801786e:	2300      	movs	r3, #0
 8017870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8017872:	2305      	movs	r3, #5
 8017874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_R_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8017876:	f107 0314 	add.w	r3, r7, #20
 801787a:	4619      	mov	r1, r3
 801787c:	481f      	ldr	r0, [pc, #124]	; (80178fc <HAL_TIM_MspPostInit+0xd4>)
 801787e:	f004 f95f 	bl	801bb40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_L_ENABLE_Pin;
 8017882:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017888:	2302      	movs	r3, #2
 801788a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801788c:	2300      	movs	r3, #0
 801788e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017890:	2300      	movs	r3, #0
 8017892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8017894:	230a      	movs	r3, #10
 8017896:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_L_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8017898:	f107 0314 	add.w	r3, r7, #20
 801789c:	4619      	mov	r1, r3
 801789e:	4817      	ldr	r0, [pc, #92]	; (80178fc <HAL_TIM_MspPostInit+0xd4>)
 80178a0:	f004 f94e 	bl	801bb40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80178a4:	e022      	b.n	80178ec <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM16)
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	681b      	ldr	r3, [r3, #0]
 80178aa:	4a15      	ldr	r2, [pc, #84]	; (8017900 <HAL_TIM_MspPostInit+0xd8>)
 80178ac:	4293      	cmp	r3, r2
 80178ae:	d11d      	bne.n	80178ec <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80178b0:	4b11      	ldr	r3, [pc, #68]	; (80178f8 <HAL_TIM_MspPostInit+0xd0>)
 80178b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80178b4:	4a10      	ldr	r2, [pc, #64]	; (80178f8 <HAL_TIM_MspPostInit+0xd0>)
 80178b6:	f043 0301 	orr.w	r3, r3, #1
 80178ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80178bc:	4b0e      	ldr	r3, [pc, #56]	; (80178f8 <HAL_TIM_MspPostInit+0xd0>)
 80178be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80178c0:	f003 0301 	and.w	r3, r3, #1
 80178c4:	60fb      	str	r3, [r7, #12]
 80178c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_MOTOR_Pin;
 80178c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80178cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80178ce:	2302      	movs	r3, #2
 80178d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80178d2:	2300      	movs	r3, #0
 80178d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80178d6:	2300      	movs	r3, #0
 80178d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80178da:	2301      	movs	r3, #1
 80178dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_MOTOR_GPIO_Port, &GPIO_InitStruct);
 80178de:	f107 0314 	add.w	r3, r7, #20
 80178e2:	4619      	mov	r1, r3
 80178e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80178e8:	f004 f92a 	bl	801bb40 <HAL_GPIO_Init>
}
 80178ec:	bf00      	nop
 80178ee:	3728      	adds	r7, #40	; 0x28
 80178f0:	46bd      	mov	sp, r7
 80178f2:	bd80      	pop	{r7, pc}
 80178f4:	40013400 	.word	0x40013400
 80178f8:	40021000 	.word	0x40021000
 80178fc:	48000400 	.word	0x48000400
 8017900:	40014400 	.word	0x40014400

08017904 <get_center_velocity>:
parameter_speed speed1000_shortest_mollifier;

parameter_speed speed1200_shortest_mollifier;
parameter_speed speed1600_shortest_mollifier;

float get_center_velocity(parameter_speed Howspeed, int pass_number) {
 8017904:	b084      	sub	sp, #16
 8017906:	b480      	push	{r7}
 8017908:	b083      	sub	sp, #12
 801790a:	af00      	add	r7, sp, #0
 801790c:	f107 0c10 	add.w	ip, r7, #16
 8017910:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float End_velocity;
	if (pass_number == -2) {
 8017914:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017918:	f113 0f02 	cmn.w	r3, #2
 801791c:	d102      	bne.n	8017924 <get_center_velocity+0x20>
		End_velocity = Howspeed.slalom_R.g_speed;
 801791e:	69bb      	ldr	r3, [r7, #24]
 8017920:	607b      	str	r3, [r7, #4]
 8017922:	e083      	b.n	8017a2c <get_center_velocity+0x128>
	} else if (pass_number == -3) {
 8017924:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017928:	f113 0f03 	cmn.w	r3, #3
 801792c:	d102      	bne.n	8017934 <get_center_velocity+0x30>
		End_velocity = Howspeed.slalom_L.g_speed;
 801792e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017930:	607b      	str	r3, [r7, #4]
 8017932:	e07b      	b.n	8017a2c <get_center_velocity+0x128>
	} else if (pass_number == -4) {
 8017934:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017938:	f113 0f04 	cmn.w	r3, #4
 801793c:	d102      	bne.n	8017944 <get_center_velocity+0x40>
		End_velocity = Howspeed.turn90_R.g_speed;
 801793e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017940:	607b      	str	r3, [r7, #4]
 8017942:	e073      	b.n	8017a2c <get_center_velocity+0x128>
	} else if (pass_number == -5) {
 8017944:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017948:	f113 0f05 	cmn.w	r3, #5
 801794c:	d102      	bne.n	8017954 <get_center_velocity+0x50>
		End_velocity = Howspeed.turn90_L.g_speed;
 801794e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017950:	607b      	str	r3, [r7, #4]
 8017952:	e06b      	b.n	8017a2c <get_center_velocity+0x128>
	} else if (pass_number == -6) {
 8017954:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017958:	f113 0f06 	cmn.w	r3, #6
 801795c:	d102      	bne.n	8017964 <get_center_velocity+0x60>
		End_velocity = Howspeed.turn180_R.g_speed;
 801795e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017960:	607b      	str	r3, [r7, #4]
 8017962:	e063      	b.n	8017a2c <get_center_velocity+0x128>
	} else if (pass_number == -7) {
 8017964:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017968:	f113 0f07 	cmn.w	r3, #7
 801796c:	d102      	bne.n	8017974 <get_center_velocity+0x70>
		End_velocity = Howspeed.turn180_L.g_speed;
 801796e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017970:	607b      	str	r3, [r7, #4]
 8017972:	e05b      	b.n	8017a2c <get_center_velocity+0x128>
	} else if (pass_number == -8) {
 8017974:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017978:	f113 0f08 	cmn.w	r3, #8
 801797c:	d103      	bne.n	8017986 <get_center_velocity+0x82>
		End_velocity = Howspeed.turn45in_R.g_speed;
 801797e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017982:	607b      	str	r3, [r7, #4]
 8017984:	e052      	b.n	8017a2c <get_center_velocity+0x128>
	} else if (pass_number == -9) {
 8017986:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801798a:	f113 0f09 	cmn.w	r3, #9
 801798e:	d103      	bne.n	8017998 <get_center_velocity+0x94>
		End_velocity = Howspeed.turn45in_L.g_speed;
 8017990:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017994:	607b      	str	r3, [r7, #4]
 8017996:	e049      	b.n	8017a2c <get_center_velocity+0x128>
	} else if (pass_number == -10) {
 8017998:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801799c:	f113 0f0a 	cmn.w	r3, #10
 80179a0:	d103      	bne.n	80179aa <get_center_velocity+0xa6>
		End_velocity = Howspeed.turn135in_R.g_speed;
 80179a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80179a6:	607b      	str	r3, [r7, #4]
 80179a8:	e040      	b.n	8017a2c <get_center_velocity+0x128>
	} else if (pass_number == -11) {
 80179aa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80179ae:	f113 0f0b 	cmn.w	r3, #11
 80179b2:	d103      	bne.n	80179bc <get_center_velocity+0xb8>
		End_velocity = Howspeed.turn135in_L.g_speed;
 80179b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80179b8:	607b      	str	r3, [r7, #4]
 80179ba:	e037      	b.n	8017a2c <get_center_velocity+0x128>
	} else if (pass_number == -12) {
 80179bc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80179c0:	f113 0f0c 	cmn.w	r3, #12
 80179c4:	d103      	bne.n	80179ce <get_center_velocity+0xca>
		End_velocity = Howspeed.turn45out_R.g_speed;
 80179c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80179ca:	607b      	str	r3, [r7, #4]
 80179cc:	e02e      	b.n	8017a2c <get_center_velocity+0x128>
	} else if (pass_number == -13) {
 80179ce:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80179d2:	f113 0f0d 	cmn.w	r3, #13
 80179d6:	d103      	bne.n	80179e0 <get_center_velocity+0xdc>
		End_velocity = Howspeed.turn45out_L.g_speed;
 80179d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80179dc:	607b      	str	r3, [r7, #4]
 80179de:	e025      	b.n	8017a2c <get_center_velocity+0x128>
	} else if (pass_number == -14) {
 80179e0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80179e4:	f113 0f0e 	cmn.w	r3, #14
 80179e8:	d103      	bne.n	80179f2 <get_center_velocity+0xee>
		End_velocity = Howspeed.turn135out_R.g_speed;
 80179ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80179ee:	607b      	str	r3, [r7, #4]
 80179f0:	e01c      	b.n	8017a2c <get_center_velocity+0x128>
	} else if (pass_number == -15) {
 80179f2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80179f6:	f113 0f0f 	cmn.w	r3, #15
 80179fa:	d103      	bne.n	8017a04 <get_center_velocity+0x100>
		End_velocity = Howspeed.turn135out_L.g_speed;
 80179fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8017a00:	607b      	str	r3, [r7, #4]
 8017a02:	e013      	b.n	8017a2c <get_center_velocity+0x128>
	} else if (pass_number == -16) {
 8017a04:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017a08:	f113 0f10 	cmn.w	r3, #16
 8017a0c:	d103      	bne.n	8017a16 <get_center_velocity+0x112>
		End_velocity = Howspeed.V90_R.g_speed;
 8017a0e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8017a12:	607b      	str	r3, [r7, #4]
 8017a14:	e00a      	b.n	8017a2c <get_center_velocity+0x128>
	} else if (pass_number == -17) {
 8017a16:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017a1a:	f113 0f11 	cmn.w	r3, #17
 8017a1e:	d103      	bne.n	8017a28 <get_center_velocity+0x124>
		End_velocity = Howspeed.V90_L.g_speed;
 8017a20:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8017a24:	607b      	str	r3, [r7, #4]
 8017a26:	e001      	b.n	8017a2c <get_center_velocity+0x128>
	} else {
		End_velocity = Howspeed.TurnCentervelocity;
 8017a28:	697b      	ldr	r3, [r7, #20]
 8017a2a:	607b      	str	r3, [r7, #4]
	}

	return End_velocity;
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	ee07 3a90 	vmov	s15, r3
}
 8017a32:	eeb0 0a67 	vmov.f32	s0, s15
 8017a36:	370c      	adds	r7, #12
 8017a38:	46bd      	mov	sp, r7
 8017a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a3e:	b004      	add	sp, #16
 8017a40:	4770      	bx	lr
	...

08017a44 <input_parameter>:

void input_parameter(void) {
 8017a44:	b480      	push	{r7}
 8017a46:	af00      	add	r7, sp, #0

	speed300_exploration.SlalomCentervelocity = 300;
 8017a48:	4b8f      	ldr	r3, [pc, #572]	; (8017c88 <input_parameter+0x244>)
 8017a4a:	4a90      	ldr	r2, [pc, #576]	; (8017c8c <input_parameter+0x248>)
 8017a4c:	601a      	str	r2, [r3, #0]
	speed300_exploration.TurnCentervelocity = 300;
 8017a4e:	4b8e      	ldr	r3, [pc, #568]	; (8017c88 <input_parameter+0x244>)
 8017a50:	4a8e      	ldr	r2, [pc, #568]	; (8017c8c <input_parameter+0x248>)
 8017a52:	605a      	str	r2, [r3, #4]

	speed300_exploration.slalom_R.g_speed =
			speed300_exploration.SlalomCentervelocity;
 8017a54:	4b8c      	ldr	r3, [pc, #560]	; (8017c88 <input_parameter+0x244>)
 8017a56:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_R.g_speed =
 8017a58:	4a8b      	ldr	r2, [pc, #556]	; (8017c88 <input_parameter+0x244>)
 8017a5a:	6093      	str	r3, [r2, #8]
	speed300_exploration.slalom_R.t_speed = 980; //550
 8017a5c:	4b8a      	ldr	r3, [pc, #552]	; (8017c88 <input_parameter+0x244>)
 8017a5e:	4a8c      	ldr	r2, [pc, #560]	; (8017c90 <input_parameter+0x24c>)
 8017a60:	615a      	str	r2, [r3, #20]
	speed300_exploration.slalom_R.t_acc = 13000; //10000
 8017a62:	4b89      	ldr	r3, [pc, #548]	; (8017c88 <input_parameter+0x244>)
 8017a64:	4a8b      	ldr	r2, [pc, #556]	; (8017c94 <input_parameter+0x250>)
 8017a66:	619a      	str	r2, [r3, #24]
	speed300_exploration.slalom_R.f_ofset = 3; //55;
 8017a68:	4b87      	ldr	r3, [pc, #540]	; (8017c88 <input_parameter+0x244>)
 8017a6a:	4a8b      	ldr	r2, [pc, #556]	; (8017c98 <input_parameter+0x254>)
 8017a6c:	60da      	str	r2, [r3, #12]
	speed300_exploration.slalom_R.e_ofset = 20;
 8017a6e:	4b86      	ldr	r3, [pc, #536]	; (8017c88 <input_parameter+0x244>)
 8017a70:	4a8a      	ldr	r2, [pc, #552]	; (8017c9c <input_parameter+0x258>)
 8017a72:	611a      	str	r2, [r3, #16]

	speed300_exploration.slalom_L.g_speed =
			speed300_exploration.SlalomCentervelocity;
 8017a74:	4b84      	ldr	r3, [pc, #528]	; (8017c88 <input_parameter+0x244>)
 8017a76:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_L.g_speed =
 8017a78:	4a83      	ldr	r2, [pc, #524]	; (8017c88 <input_parameter+0x244>)
 8017a7a:	61d3      	str	r3, [r2, #28]
	speed300_exploration.slalom_L.t_speed = 980;
 8017a7c:	4b82      	ldr	r3, [pc, #520]	; (8017c88 <input_parameter+0x244>)
 8017a7e:	4a84      	ldr	r2, [pc, #528]	; (8017c90 <input_parameter+0x24c>)
 8017a80:	629a      	str	r2, [r3, #40]	; 0x28
	speed300_exploration.slalom_L.t_acc = 13000;
 8017a82:	4b81      	ldr	r3, [pc, #516]	; (8017c88 <input_parameter+0x244>)
 8017a84:	4a83      	ldr	r2, [pc, #524]	; (8017c94 <input_parameter+0x250>)
 8017a86:	62da      	str	r2, [r3, #44]	; 0x2c
	speed300_exploration.slalom_L.f_ofset = 2; //50;
 8017a88:	4b7f      	ldr	r3, [pc, #508]	; (8017c88 <input_parameter+0x244>)
 8017a8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017a8e:	621a      	str	r2, [r3, #32]
	speed300_exploration.slalom_L.e_ofset = 19;
 8017a90:	4b7d      	ldr	r3, [pc, #500]	; (8017c88 <input_parameter+0x244>)
 8017a92:	4a83      	ldr	r2, [pc, #524]	; (8017ca0 <input_parameter+0x25c>)
 8017a94:	625a      	str	r2, [r3, #36]	; 0x24



	speed250_exploration.SlalomCentervelocity = 250;
 8017a96:	4b83      	ldr	r3, [pc, #524]	; (8017ca4 <input_parameter+0x260>)
 8017a98:	4a83      	ldr	r2, [pc, #524]	; (8017ca8 <input_parameter+0x264>)
 8017a9a:	601a      	str	r2, [r3, #0]
	speed250_exploration.TurnCentervelocity = 250;
 8017a9c:	4b81      	ldr	r3, [pc, #516]	; (8017ca4 <input_parameter+0x260>)
 8017a9e:	4a82      	ldr	r2, [pc, #520]	; (8017ca8 <input_parameter+0x264>)
 8017aa0:	605a      	str	r2, [r3, #4]

	speed250_exploration.slalom_R.g_speed =
			speed250_exploration.SlalomCentervelocity;
 8017aa2:	4b80      	ldr	r3, [pc, #512]	; (8017ca4 <input_parameter+0x260>)
 8017aa4:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_R.g_speed =
 8017aa6:	4a7f      	ldr	r2, [pc, #508]	; (8017ca4 <input_parameter+0x260>)
 8017aa8:	6093      	str	r3, [r2, #8]
	speed250_exploration.slalom_R.t_speed = 830; //550
 8017aaa:	4b7e      	ldr	r3, [pc, #504]	; (8017ca4 <input_parameter+0x260>)
 8017aac:	4a7f      	ldr	r2, [pc, #508]	; (8017cac <input_parameter+0x268>)
 8017aae:	615a      	str	r2, [r3, #20]
	speed250_exploration.slalom_R.t_acc = 9000; //10000
 8017ab0:	4b7c      	ldr	r3, [pc, #496]	; (8017ca4 <input_parameter+0x260>)
 8017ab2:	4a7f      	ldr	r2, [pc, #508]	; (8017cb0 <input_parameter+0x26c>)
 8017ab4:	619a      	str	r2, [r3, #24]
	speed250_exploration.slalom_R.f_ofset = 0.5; //55;
 8017ab6:	4b7b      	ldr	r3, [pc, #492]	; (8017ca4 <input_parameter+0x260>)
 8017ab8:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8017abc:	60da      	str	r2, [r3, #12]
	speed250_exploration.slalom_R.e_ofset = 20;
 8017abe:	4b79      	ldr	r3, [pc, #484]	; (8017ca4 <input_parameter+0x260>)
 8017ac0:	4a76      	ldr	r2, [pc, #472]	; (8017c9c <input_parameter+0x258>)
 8017ac2:	611a      	str	r2, [r3, #16]

	speed250_exploration.slalom_L.g_speed =
			speed250_exploration.SlalomCentervelocity;
 8017ac4:	4b77      	ldr	r3, [pc, #476]	; (8017ca4 <input_parameter+0x260>)
 8017ac6:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_L.g_speed =
 8017ac8:	4a76      	ldr	r2, [pc, #472]	; (8017ca4 <input_parameter+0x260>)
 8017aca:	61d3      	str	r3, [r2, #28]
	speed250_exploration.slalom_L.t_speed = 730;
 8017acc:	4b75      	ldr	r3, [pc, #468]	; (8017ca4 <input_parameter+0x260>)
 8017ace:	4a79      	ldr	r2, [pc, #484]	; (8017cb4 <input_parameter+0x270>)
 8017ad0:	629a      	str	r2, [r3, #40]	; 0x28
	speed250_exploration.slalom_L.t_acc = 9000;
 8017ad2:	4b74      	ldr	r3, [pc, #464]	; (8017ca4 <input_parameter+0x260>)
 8017ad4:	4a76      	ldr	r2, [pc, #472]	; (8017cb0 <input_parameter+0x26c>)
 8017ad6:	62da      	str	r2, [r3, #44]	; 0x2c
	speed250_exploration.slalom_L.f_ofset = 0.5; //50;
 8017ad8:	4b72      	ldr	r3, [pc, #456]	; (8017ca4 <input_parameter+0x260>)
 8017ada:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8017ade:	621a      	str	r2, [r3, #32]
	speed250_exploration.slalom_L.e_ofset = 19;
 8017ae0:	4b70      	ldr	r3, [pc, #448]	; (8017ca4 <input_parameter+0x260>)
 8017ae2:	4a6f      	ldr	r2, [pc, #444]	; (8017ca0 <input_parameter+0x25c>)
 8017ae4:	625a      	str	r2, [r3, #36]	; 0x24


	speed300_shortest.SlalomCentervelocity =
			speed300_exploration.SlalomCentervelocity;
 8017ae6:	4b68      	ldr	r3, [pc, #416]	; (8017c88 <input_parameter+0x244>)
 8017ae8:	681b      	ldr	r3, [r3, #0]
	speed300_shortest.SlalomCentervelocity =
 8017aea:	4a73      	ldr	r2, [pc, #460]	; (8017cb8 <input_parameter+0x274>)
 8017aec:	6013      	str	r3, [r2, #0]
	speed300_shortest.TurnCentervelocity =
			speed300_exploration.TurnCentervelocity + 200;
 8017aee:	4b66      	ldr	r3, [pc, #408]	; (8017c88 <input_parameter+0x244>)
 8017af0:	edd3 7a01 	vldr	s15, [r3, #4]
 8017af4:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8017cbc <input_parameter+0x278>
 8017af8:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.TurnCentervelocity =
 8017afc:	4b6e      	ldr	r3, [pc, #440]	; (8017cb8 <input_parameter+0x274>)
 8017afe:	edc3 7a01 	vstr	s15, [r3, #4]

	speed300_shortest.slalom_R.g_speed = speed300_exploration.slalom_R.g_speed;
 8017b02:	4b61      	ldr	r3, [pc, #388]	; (8017c88 <input_parameter+0x244>)
 8017b04:	689b      	ldr	r3, [r3, #8]
 8017b06:	4a6c      	ldr	r2, [pc, #432]	; (8017cb8 <input_parameter+0x274>)
 8017b08:	6093      	str	r3, [r2, #8]
	speed300_shortest.slalom_R.t_speed = speed300_exploration.slalom_R.t_speed;
 8017b0a:	4b5f      	ldr	r3, [pc, #380]	; (8017c88 <input_parameter+0x244>)
 8017b0c:	695b      	ldr	r3, [r3, #20]
 8017b0e:	4a6a      	ldr	r2, [pc, #424]	; (8017cb8 <input_parameter+0x274>)
 8017b10:	6153      	str	r3, [r2, #20]
	speed300_shortest.slalom_R.t_acc = speed300_exploration.slalom_R.t_acc;
 8017b12:	4b5d      	ldr	r3, [pc, #372]	; (8017c88 <input_parameter+0x244>)
 8017b14:	699b      	ldr	r3, [r3, #24]
 8017b16:	4a68      	ldr	r2, [pc, #416]	; (8017cb8 <input_parameter+0x274>)
 8017b18:	6193      	str	r3, [r2, #24]
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 8017b1a:	4b5b      	ldr	r3, [pc, #364]	; (8017c88 <input_parameter+0x244>)
 8017b1c:	edd3 7a03 	vldr	s15, [r3, #12]
			+ MAZE_OFFSET; //55;
 8017b20:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8017b24:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 8017b28:	4b63      	ldr	r3, [pc, #396]	; (8017cb8 <input_parameter+0x274>)
 8017b2a:	edc3 7a03 	vstr	s15, [r3, #12]
	speed300_shortest.slalom_R.e_ofset = speed300_exploration.slalom_R.e_ofset;
 8017b2e:	4b56      	ldr	r3, [pc, #344]	; (8017c88 <input_parameter+0x244>)
 8017b30:	691b      	ldr	r3, [r3, #16]
 8017b32:	4a61      	ldr	r2, [pc, #388]	; (8017cb8 <input_parameter+0x274>)
 8017b34:	6113      	str	r3, [r2, #16]

	speed300_shortest.slalom_L.g_speed = speed300_exploration.slalom_L.g_speed;
 8017b36:	4b54      	ldr	r3, [pc, #336]	; (8017c88 <input_parameter+0x244>)
 8017b38:	69db      	ldr	r3, [r3, #28]
 8017b3a:	4a5f      	ldr	r2, [pc, #380]	; (8017cb8 <input_parameter+0x274>)
 8017b3c:	61d3      	str	r3, [r2, #28]
	speed300_shortest.slalom_L.t_speed = speed300_exploration.slalom_L.t_speed;
 8017b3e:	4b52      	ldr	r3, [pc, #328]	; (8017c88 <input_parameter+0x244>)
 8017b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b42:	4a5d      	ldr	r2, [pc, #372]	; (8017cb8 <input_parameter+0x274>)
 8017b44:	6293      	str	r3, [r2, #40]	; 0x28
	speed300_shortest.slalom_L.t_acc = speed300_exploration.slalom_L.t_acc;
 8017b46:	4b50      	ldr	r3, [pc, #320]	; (8017c88 <input_parameter+0x244>)
 8017b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b4a:	4a5b      	ldr	r2, [pc, #364]	; (8017cb8 <input_parameter+0x274>)
 8017b4c:	62d3      	str	r3, [r2, #44]	; 0x2c
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 8017b4e:	4b4e      	ldr	r3, [pc, #312]	; (8017c88 <input_parameter+0x244>)
 8017b50:	edd3 7a08 	vldr	s15, [r3, #32]
			+ MAZE_OFFSET; //50;
 8017b54:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8017b58:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 8017b5c:	4b56      	ldr	r3, [pc, #344]	; (8017cb8 <input_parameter+0x274>)
 8017b5e:	edc3 7a08 	vstr	s15, [r3, #32]
	speed300_shortest.slalom_L.e_ofset = speed300_exploration.slalom_L.e_ofset;
 8017b62:	4b49      	ldr	r3, [pc, #292]	; (8017c88 <input_parameter+0x244>)
 8017b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b66:	4a54      	ldr	r2, [pc, #336]	; (8017cb8 <input_parameter+0x274>)
 8017b68:	6253      	str	r3, [r2, #36]	; 0x24

	speed300_shortest.turn90_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017b6a:	4b53      	ldr	r3, [pc, #332]	; (8017cb8 <input_parameter+0x274>)
 8017b6c:	685b      	ldr	r3, [r3, #4]
 8017b6e:	4a52      	ldr	r2, [pc, #328]	; (8017cb8 <input_parameter+0x274>)
 8017b70:	6313      	str	r3, [r2, #48]	; 0x30
	speed300_shortest.turn90_R.t_speed = 600;
 8017b72:	4b51      	ldr	r3, [pc, #324]	; (8017cb8 <input_parameter+0x274>)
 8017b74:	4a52      	ldr	r2, [pc, #328]	; (8017cc0 <input_parameter+0x27c>)
 8017b76:	63da      	str	r2, [r3, #60]	; 0x3c
	speed300_shortest.turn90_R.t_acc = 10000;
 8017b78:	4b4f      	ldr	r3, [pc, #316]	; (8017cb8 <input_parameter+0x274>)
 8017b7a:	4a52      	ldr	r2, [pc, #328]	; (8017cc4 <input_parameter+0x280>)
 8017b7c:	641a      	str	r2, [r3, #64]	; 0x40
	speed300_shortest.turn90_R.f_ofset = 76;
 8017b7e:	4b4e      	ldr	r3, [pc, #312]	; (8017cb8 <input_parameter+0x274>)
 8017b80:	4a51      	ldr	r2, [pc, #324]	; (8017cc8 <input_parameter+0x284>)
 8017b82:	635a      	str	r2, [r3, #52]	; 0x34
	speed300_shortest.turn90_R.e_ofset = 107;
 8017b84:	4b4c      	ldr	r3, [pc, #304]	; (8017cb8 <input_parameter+0x274>)
 8017b86:	4a51      	ldr	r2, [pc, #324]	; (8017ccc <input_parameter+0x288>)
 8017b88:	639a      	str	r2, [r3, #56]	; 0x38

	speed300_shortest.turn90_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017b8a:	4b4b      	ldr	r3, [pc, #300]	; (8017cb8 <input_parameter+0x274>)
 8017b8c:	685b      	ldr	r3, [r3, #4]
 8017b8e:	4a4a      	ldr	r2, [pc, #296]	; (8017cb8 <input_parameter+0x274>)
 8017b90:	6453      	str	r3, [r2, #68]	; 0x44
	speed300_shortest.turn90_L.t_speed = 600;
 8017b92:	4b49      	ldr	r3, [pc, #292]	; (8017cb8 <input_parameter+0x274>)
 8017b94:	4a4a      	ldr	r2, [pc, #296]	; (8017cc0 <input_parameter+0x27c>)
 8017b96:	651a      	str	r2, [r3, #80]	; 0x50
	speed300_shortest.turn90_L.t_acc = 10000;
 8017b98:	4b47      	ldr	r3, [pc, #284]	; (8017cb8 <input_parameter+0x274>)
 8017b9a:	4a4a      	ldr	r2, [pc, #296]	; (8017cc4 <input_parameter+0x280>)
 8017b9c:	655a      	str	r2, [r3, #84]	; 0x54
	speed300_shortest.turn90_L.f_ofset = 77;
 8017b9e:	4b46      	ldr	r3, [pc, #280]	; (8017cb8 <input_parameter+0x274>)
 8017ba0:	4a4b      	ldr	r2, [pc, #300]	; (8017cd0 <input_parameter+0x28c>)
 8017ba2:	649a      	str	r2, [r3, #72]	; 0x48
	speed300_shortest.turn90_L.e_ofset = 103;
 8017ba4:	4b44      	ldr	r3, [pc, #272]	; (8017cb8 <input_parameter+0x274>)
 8017ba6:	4a4b      	ldr	r2, [pc, #300]	; (8017cd4 <input_parameter+0x290>)
 8017ba8:	64da      	str	r2, [r3, #76]	; 0x4c

	speed300_shortest.turn180_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017baa:	4b43      	ldr	r3, [pc, #268]	; (8017cb8 <input_parameter+0x274>)
 8017bac:	685b      	ldr	r3, [r3, #4]
 8017bae:	4a42      	ldr	r2, [pc, #264]	; (8017cb8 <input_parameter+0x274>)
 8017bb0:	6593      	str	r3, [r2, #88]	; 0x58
	speed300_shortest.turn180_R.t_speed = 430;
 8017bb2:	4b41      	ldr	r3, [pc, #260]	; (8017cb8 <input_parameter+0x274>)
 8017bb4:	4a48      	ldr	r2, [pc, #288]	; (8017cd8 <input_parameter+0x294>)
 8017bb6:	665a      	str	r2, [r3, #100]	; 0x64
	speed300_shortest.turn180_R.t_acc = 8000;
 8017bb8:	4b3f      	ldr	r3, [pc, #252]	; (8017cb8 <input_parameter+0x274>)
 8017bba:	4a48      	ldr	r2, [pc, #288]	; (8017cdc <input_parameter+0x298>)
 8017bbc:	669a      	str	r2, [r3, #104]	; 0x68
	speed300_shortest.turn180_R.f_ofset = 65;
 8017bbe:	4b3e      	ldr	r3, [pc, #248]	; (8017cb8 <input_parameter+0x274>)
 8017bc0:	4a47      	ldr	r2, [pc, #284]	; (8017ce0 <input_parameter+0x29c>)
 8017bc2:	65da      	str	r2, [r3, #92]	; 0x5c
	speed300_shortest.turn180_R.e_ofset = 80;
 8017bc4:	4b3c      	ldr	r3, [pc, #240]	; (8017cb8 <input_parameter+0x274>)
 8017bc6:	4a47      	ldr	r2, [pc, #284]	; (8017ce4 <input_parameter+0x2a0>)
 8017bc8:	661a      	str	r2, [r3, #96]	; 0x60

	speed300_shortest.turn180_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017bca:	4b3b      	ldr	r3, [pc, #236]	; (8017cb8 <input_parameter+0x274>)
 8017bcc:	685b      	ldr	r3, [r3, #4]
 8017bce:	4a3a      	ldr	r2, [pc, #232]	; (8017cb8 <input_parameter+0x274>)
 8017bd0:	66d3      	str	r3, [r2, #108]	; 0x6c
	speed300_shortest.turn180_L.t_speed = 450;
 8017bd2:	4b39      	ldr	r3, [pc, #228]	; (8017cb8 <input_parameter+0x274>)
 8017bd4:	4a44      	ldr	r2, [pc, #272]	; (8017ce8 <input_parameter+0x2a4>)
 8017bd6:	679a      	str	r2, [r3, #120]	; 0x78
	speed300_shortest.turn180_L.t_acc = 8000;
 8017bd8:	4b37      	ldr	r3, [pc, #220]	; (8017cb8 <input_parameter+0x274>)
 8017bda:	4a40      	ldr	r2, [pc, #256]	; (8017cdc <input_parameter+0x298>)
 8017bdc:	67da      	str	r2, [r3, #124]	; 0x7c
	speed300_shortest.turn180_L.f_ofset = 60;
 8017bde:	4b36      	ldr	r3, [pc, #216]	; (8017cb8 <input_parameter+0x274>)
 8017be0:	4a42      	ldr	r2, [pc, #264]	; (8017cec <input_parameter+0x2a8>)
 8017be2:	671a      	str	r2, [r3, #112]	; 0x70
	speed300_shortest.turn180_L.e_ofset = 71;
 8017be4:	4b34      	ldr	r3, [pc, #208]	; (8017cb8 <input_parameter+0x274>)
 8017be6:	4a42      	ldr	r2, [pc, #264]	; (8017cf0 <input_parameter+0x2ac>)
 8017be8:	675a      	str	r2, [r3, #116]	; 0x74

	speed300_shortest.turn45in_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017bea:	4b33      	ldr	r3, [pc, #204]	; (8017cb8 <input_parameter+0x274>)
 8017bec:	685b      	ldr	r3, [r3, #4]
 8017bee:	4a32      	ldr	r2, [pc, #200]	; (8017cb8 <input_parameter+0x274>)
 8017bf0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	speed300_shortest.turn45in_R.t_speed = 600;
 8017bf4:	4b30      	ldr	r3, [pc, #192]	; (8017cb8 <input_parameter+0x274>)
 8017bf6:	4a32      	ldr	r2, [pc, #200]	; (8017cc0 <input_parameter+0x27c>)
 8017bf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed300_shortest.turn45in_R.t_acc = 10000;
 8017bfc:	4b2e      	ldr	r3, [pc, #184]	; (8017cb8 <input_parameter+0x274>)
 8017bfe:	4a31      	ldr	r2, [pc, #196]	; (8017cc4 <input_parameter+0x280>)
 8017c00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed300_shortest.turn45in_R.f_ofset = 27;
 8017c04:	4b2c      	ldr	r3, [pc, #176]	; (8017cb8 <input_parameter+0x274>)
 8017c06:	4a3b      	ldr	r2, [pc, #236]	; (8017cf4 <input_parameter+0x2b0>)
 8017c08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed300_shortest.turn45in_R.e_ofset = 89;
 8017c0c:	4b2a      	ldr	r3, [pc, #168]	; (8017cb8 <input_parameter+0x274>)
 8017c0e:	4a3a      	ldr	r2, [pc, #232]	; (8017cf8 <input_parameter+0x2b4>)
 8017c10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed300_shortest.turn45in_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017c14:	4b28      	ldr	r3, [pc, #160]	; (8017cb8 <input_parameter+0x274>)
 8017c16:	685b      	ldr	r3, [r3, #4]
 8017c18:	4a27      	ldr	r2, [pc, #156]	; (8017cb8 <input_parameter+0x274>)
 8017c1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	speed300_shortest.turn45in_L.t_speed = 600;
 8017c1e:	4b26      	ldr	r3, [pc, #152]	; (8017cb8 <input_parameter+0x274>)
 8017c20:	4a27      	ldr	r2, [pc, #156]	; (8017cc0 <input_parameter+0x27c>)
 8017c22:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed300_shortest.turn45in_L.t_acc = 10000;
 8017c26:	4b24      	ldr	r3, [pc, #144]	; (8017cb8 <input_parameter+0x274>)
 8017c28:	4a26      	ldr	r2, [pc, #152]	; (8017cc4 <input_parameter+0x280>)
 8017c2a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed300_shortest.turn45in_L.f_ofset = 33;
 8017c2e:	4b22      	ldr	r3, [pc, #136]	; (8017cb8 <input_parameter+0x274>)
 8017c30:	4a32      	ldr	r2, [pc, #200]	; (8017cfc <input_parameter+0x2b8>)
 8017c32:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed300_shortest.turn45in_L.e_ofset = 90;
 8017c36:	4b20      	ldr	r3, [pc, #128]	; (8017cb8 <input_parameter+0x274>)
 8017c38:	4a31      	ldr	r2, [pc, #196]	; (8017d00 <input_parameter+0x2bc>)
 8017c3a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed300_shortest.turn135in_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017c3e:	4b1e      	ldr	r3, [pc, #120]	; (8017cb8 <input_parameter+0x274>)
 8017c40:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_R.g_speed =
 8017c42:	4a1d      	ldr	r2, [pc, #116]	; (8017cb8 <input_parameter+0x274>)
 8017c44:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	speed300_shortest.turn135in_R.t_speed = 610;
 8017c48:	4b1b      	ldr	r3, [pc, #108]	; (8017cb8 <input_parameter+0x274>)
 8017c4a:	4a2e      	ldr	r2, [pc, #184]	; (8017d04 <input_parameter+0x2c0>)
 8017c4c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed300_shortest.turn135in_R.t_acc = 8000;
 8017c50:	4b19      	ldr	r3, [pc, #100]	; (8017cb8 <input_parameter+0x274>)
 8017c52:	4a22      	ldr	r2, [pc, #136]	; (8017cdc <input_parameter+0x298>)
 8017c54:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed300_shortest.turn135in_R.f_ofset = 67;
 8017c58:	4b17      	ldr	r3, [pc, #92]	; (8017cb8 <input_parameter+0x274>)
 8017c5a:	4a2b      	ldr	r2, [pc, #172]	; (8017d08 <input_parameter+0x2c4>)
 8017c5c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed300_shortest.turn135in_R.e_ofset = 73;
 8017c60:	4b15      	ldr	r3, [pc, #84]	; (8017cb8 <input_parameter+0x274>)
 8017c62:	4a2a      	ldr	r2, [pc, #168]	; (8017d0c <input_parameter+0x2c8>)
 8017c64:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed300_shortest.turn135in_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017c68:	4b13      	ldr	r3, [pc, #76]	; (8017cb8 <input_parameter+0x274>)
 8017c6a:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_L.g_speed =
 8017c6c:	4a12      	ldr	r2, [pc, #72]	; (8017cb8 <input_parameter+0x274>)
 8017c6e:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
	speed300_shortest.turn135in_L.t_speed = 610;
 8017c72:	4b11      	ldr	r3, [pc, #68]	; (8017cb8 <input_parameter+0x274>)
 8017c74:	4a23      	ldr	r2, [pc, #140]	; (8017d04 <input_parameter+0x2c0>)
 8017c76:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed300_shortest.turn135in_L.t_acc = 8000;
 8017c7a:	4b0f      	ldr	r3, [pc, #60]	; (8017cb8 <input_parameter+0x274>)
 8017c7c:	4a17      	ldr	r2, [pc, #92]	; (8017cdc <input_parameter+0x298>)
 8017c7e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	speed300_shortest.turn135in_L.f_ofset = 67;
 8017c82:	4b0d      	ldr	r3, [pc, #52]	; (8017cb8 <input_parameter+0x274>)
 8017c84:	e044      	b.n	8017d10 <input_parameter+0x2cc>
 8017c86:	bf00      	nop
 8017c88:	2000ef84 	.word	0x2000ef84
 8017c8c:	43960000 	.word	0x43960000
 8017c90:	44750000 	.word	0x44750000
 8017c94:	464b2000 	.word	0x464b2000
 8017c98:	40400000 	.word	0x40400000
 8017c9c:	41a00000 	.word	0x41a00000
 8017ca0:	41980000 	.word	0x41980000
 8017ca4:	2000f0cc 	.word	0x2000f0cc
 8017ca8:	437a0000 	.word	0x437a0000
 8017cac:	444f8000 	.word	0x444f8000
 8017cb0:	460ca000 	.word	0x460ca000
 8017cb4:	44368000 	.word	0x44368000
 8017cb8:	2000f214 	.word	0x2000f214
 8017cbc:	43480000 	.word	0x43480000
 8017cc0:	44160000 	.word	0x44160000
 8017cc4:	461c4000 	.word	0x461c4000
 8017cc8:	42980000 	.word	0x42980000
 8017ccc:	42d60000 	.word	0x42d60000
 8017cd0:	429a0000 	.word	0x429a0000
 8017cd4:	42ce0000 	.word	0x42ce0000
 8017cd8:	43d70000 	.word	0x43d70000
 8017cdc:	45fa0000 	.word	0x45fa0000
 8017ce0:	42820000 	.word	0x42820000
 8017ce4:	42a00000 	.word	0x42a00000
 8017ce8:	43e10000 	.word	0x43e10000
 8017cec:	42700000 	.word	0x42700000
 8017cf0:	428e0000 	.word	0x428e0000
 8017cf4:	41d80000 	.word	0x41d80000
 8017cf8:	42b20000 	.word	0x42b20000
 8017cfc:	42040000 	.word	0x42040000
 8017d00:	42b40000 	.word	0x42b40000
 8017d04:	44188000 	.word	0x44188000
 8017d08:	42860000 	.word	0x42860000
 8017d0c:	42920000 	.word	0x42920000
 8017d10:	4a99      	ldr	r2, [pc, #612]	; (8017f78 <input_parameter+0x534>)
 8017d12:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed300_shortest.turn135in_L.e_ofset = 73;
 8017d16:	4b99      	ldr	r3, [pc, #612]	; (8017f7c <input_parameter+0x538>)
 8017d18:	4a99      	ldr	r2, [pc, #612]	; (8017f80 <input_parameter+0x53c>)
 8017d1a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed300_shortest.turn45out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017d1e:	4b97      	ldr	r3, [pc, #604]	; (8017f7c <input_parameter+0x538>)
 8017d20:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_R.g_speed =
 8017d22:	4a96      	ldr	r2, [pc, #600]	; (8017f7c <input_parameter+0x538>)
 8017d24:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
	speed300_shortest.turn45out_R.t_speed = 600;
 8017d28:	4b94      	ldr	r3, [pc, #592]	; (8017f7c <input_parameter+0x538>)
 8017d2a:	4a96      	ldr	r2, [pc, #600]	; (8017f84 <input_parameter+0x540>)
 8017d2c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed300_shortest.turn45out_R.t_acc = 10000;
 8017d30:	4b92      	ldr	r3, [pc, #584]	; (8017f7c <input_parameter+0x538>)
 8017d32:	4a95      	ldr	r2, [pc, #596]	; (8017f88 <input_parameter+0x544>)
 8017d34:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed300_shortest.turn45out_R.f_ofset = 57;
 8017d38:	4b90      	ldr	r3, [pc, #576]	; (8017f7c <input_parameter+0x538>)
 8017d3a:	4a94      	ldr	r2, [pc, #592]	; (8017f8c <input_parameter+0x548>)
 8017d3c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed300_shortest.turn45out_R.e_ofset = 57;
 8017d40:	4b8e      	ldr	r3, [pc, #568]	; (8017f7c <input_parameter+0x538>)
 8017d42:	4a92      	ldr	r2, [pc, #584]	; (8017f8c <input_parameter+0x548>)
 8017d44:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed300_shortest.turn45out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017d48:	4b8c      	ldr	r3, [pc, #560]	; (8017f7c <input_parameter+0x538>)
 8017d4a:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_L.g_speed =
 8017d4c:	4a8b      	ldr	r2, [pc, #556]	; (8017f7c <input_parameter+0x538>)
 8017d4e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	speed300_shortest.turn45out_L.t_speed = 600;
 8017d52:	4b8a      	ldr	r3, [pc, #552]	; (8017f7c <input_parameter+0x538>)
 8017d54:	4a8b      	ldr	r2, [pc, #556]	; (8017f84 <input_parameter+0x540>)
 8017d56:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed300_shortest.turn45out_L.t_acc = 10000;
 8017d5a:	4b88      	ldr	r3, [pc, #544]	; (8017f7c <input_parameter+0x538>)
 8017d5c:	4a8a      	ldr	r2, [pc, #552]	; (8017f88 <input_parameter+0x544>)
 8017d5e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed300_shortest.turn45out_L.f_ofset = 64;
 8017d62:	4b86      	ldr	r3, [pc, #536]	; (8017f7c <input_parameter+0x538>)
 8017d64:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 8017d68:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed300_shortest.turn45out_L.e_ofset = 52;
 8017d6c:	4b83      	ldr	r3, [pc, #524]	; (8017f7c <input_parameter+0x538>)
 8017d6e:	4a88      	ldr	r2, [pc, #544]	; (8017f90 <input_parameter+0x54c>)
 8017d70:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed300_shortest.turn135out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017d74:	4b81      	ldr	r3, [pc, #516]	; (8017f7c <input_parameter+0x538>)
 8017d76:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_R.g_speed =
 8017d78:	4a80      	ldr	r2, [pc, #512]	; (8017f7c <input_parameter+0x538>)
 8017d7a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
	speed300_shortest.turn135out_R.t_speed = 660;
 8017d7e:	4b7f      	ldr	r3, [pc, #508]	; (8017f7c <input_parameter+0x538>)
 8017d80:	4a84      	ldr	r2, [pc, #528]	; (8017f94 <input_parameter+0x550>)
 8017d82:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed300_shortest.turn135out_R.t_acc = 8000;
 8017d86:	4b7d      	ldr	r3, [pc, #500]	; (8017f7c <input_parameter+0x538>)
 8017d88:	4a83      	ldr	r2, [pc, #524]	; (8017f98 <input_parameter+0x554>)
 8017d8a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed300_shortest.turn135out_R.f_ofset = 55;
 8017d8e:	4b7b      	ldr	r3, [pc, #492]	; (8017f7c <input_parameter+0x538>)
 8017d90:	4a82      	ldr	r2, [pc, #520]	; (8017f9c <input_parameter+0x558>)
 8017d92:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed300_shortest.turn135out_R.e_ofset = 100;
 8017d96:	4b79      	ldr	r3, [pc, #484]	; (8017f7c <input_parameter+0x538>)
 8017d98:	4a81      	ldr	r2, [pc, #516]	; (8017fa0 <input_parameter+0x55c>)
 8017d9a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed300_shortest.turn135out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017d9e:	4b77      	ldr	r3, [pc, #476]	; (8017f7c <input_parameter+0x538>)
 8017da0:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_L.g_speed =
 8017da2:	4a76      	ldr	r2, [pc, #472]	; (8017f7c <input_parameter+0x538>)
 8017da4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	speed300_shortest.turn135out_L.t_speed = 660;
 8017da8:	4b74      	ldr	r3, [pc, #464]	; (8017f7c <input_parameter+0x538>)
 8017daa:	4a7a      	ldr	r2, [pc, #488]	; (8017f94 <input_parameter+0x550>)
 8017dac:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed300_shortest.turn135out_L.t_acc = 8000;
 8017db0:	4b72      	ldr	r3, [pc, #456]	; (8017f7c <input_parameter+0x538>)
 8017db2:	4a79      	ldr	r2, [pc, #484]	; (8017f98 <input_parameter+0x554>)
 8017db4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed300_shortest.turn135out_L.f_ofset = 55;
 8017db8:	4b70      	ldr	r3, [pc, #448]	; (8017f7c <input_parameter+0x538>)
 8017dba:	4a78      	ldr	r2, [pc, #480]	; (8017f9c <input_parameter+0x558>)
 8017dbc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed300_shortest.turn135out_L.e_ofset = 103;
 8017dc0:	4b6e      	ldr	r3, [pc, #440]	; (8017f7c <input_parameter+0x538>)
 8017dc2:	4a78      	ldr	r2, [pc, #480]	; (8017fa4 <input_parameter+0x560>)
 8017dc4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed300_shortest.V90_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017dc8:	4b6c      	ldr	r3, [pc, #432]	; (8017f7c <input_parameter+0x538>)
 8017dca:	685b      	ldr	r3, [r3, #4]
 8017dcc:	4a6b      	ldr	r2, [pc, #428]	; (8017f7c <input_parameter+0x538>)
 8017dce:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	speed300_shortest.V90_R.t_speed = 700;
 8017dd2:	4b6a      	ldr	r3, [pc, #424]	; (8017f7c <input_parameter+0x538>)
 8017dd4:	4a74      	ldr	r2, [pc, #464]	; (8017fa8 <input_parameter+0x564>)
 8017dd6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed300_shortest.V90_R.t_acc = 11000;
 8017dda:	4b68      	ldr	r3, [pc, #416]	; (8017f7c <input_parameter+0x538>)
 8017ddc:	4a73      	ldr	r2, [pc, #460]	; (8017fac <input_parameter+0x568>)
 8017dde:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed300_shortest.V90_R.f_ofset = 35;
 8017de2:	4b66      	ldr	r3, [pc, #408]	; (8017f7c <input_parameter+0x538>)
 8017de4:	4a72      	ldr	r2, [pc, #456]	; (8017fb0 <input_parameter+0x56c>)
 8017de6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed300_shortest.V90_R.e_ofset = 56;
 8017dea:	4b64      	ldr	r3, [pc, #400]	; (8017f7c <input_parameter+0x538>)
 8017dec:	4a71      	ldr	r2, [pc, #452]	; (8017fb4 <input_parameter+0x570>)
 8017dee:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed300_shortest.V90_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017df2:	4b62      	ldr	r3, [pc, #392]	; (8017f7c <input_parameter+0x538>)
 8017df4:	685b      	ldr	r3, [r3, #4]
 8017df6:	4a61      	ldr	r2, [pc, #388]	; (8017f7c <input_parameter+0x538>)
 8017df8:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	speed300_shortest.V90_L.t_speed = 700;
 8017dfc:	4b5f      	ldr	r3, [pc, #380]	; (8017f7c <input_parameter+0x538>)
 8017dfe:	4a6a      	ldr	r2, [pc, #424]	; (8017fa8 <input_parameter+0x564>)
 8017e00:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed300_shortest.V90_L.t_acc = 11000;
 8017e04:	4b5d      	ldr	r3, [pc, #372]	; (8017f7c <input_parameter+0x538>)
 8017e06:	4a69      	ldr	r2, [pc, #420]	; (8017fac <input_parameter+0x568>)
 8017e08:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed300_shortest.V90_L.f_ofset = 32;
 8017e0c:	4b5b      	ldr	r3, [pc, #364]	; (8017f7c <input_parameter+0x538>)
 8017e0e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8017e12:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed300_shortest.V90_L.e_ofset = 60;
 8017e16:	4b59      	ldr	r3, [pc, #356]	; (8017f7c <input_parameter+0x538>)
 8017e18:	4a67      	ldr	r2, [pc, #412]	; (8017fb8 <input_parameter+0x574>)
 8017e1a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c



//********************************600********************************************
	speed600_shortest_mollifier.SlalomCentervelocity = 600;
 8017e1e:	4b67      	ldr	r3, [pc, #412]	; (8017fbc <input_parameter+0x578>)
 8017e20:	4a58      	ldr	r2, [pc, #352]	; (8017f84 <input_parameter+0x540>)
 8017e22:	601a      	str	r2, [r3, #0]
	speed600_shortest_mollifier.TurnCentervelocity = 600;
 8017e24:	4b65      	ldr	r3, [pc, #404]	; (8017fbc <input_parameter+0x578>)
 8017e26:	4a57      	ldr	r2, [pc, #348]	; (8017f84 <input_parameter+0x540>)
 8017e28:	605a      	str	r2, [r3, #4]

	speed600_shortest_mollifier.slalom_R.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 8017e2a:	4b64      	ldr	r3, [pc, #400]	; (8017fbc <input_parameter+0x578>)
 8017e2c:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_R.g_speed =
 8017e2e:	4a63      	ldr	r2, [pc, #396]	; (8017fbc <input_parameter+0x578>)
 8017e30:	6093      	str	r3, [r2, #8]
	speed600_shortest_mollifier.slalom_R.t_speed = 1100;
 8017e32:	4b62      	ldr	r3, [pc, #392]	; (8017fbc <input_parameter+0x578>)
 8017e34:	4a62      	ldr	r2, [pc, #392]	; (8017fc0 <input_parameter+0x57c>)
 8017e36:	615a      	str	r2, [r3, #20]
	speed600_shortest_mollifier.slalom_R.t_acc = 60000;
 8017e38:	4b60      	ldr	r3, [pc, #384]	; (8017fbc <input_parameter+0x578>)
 8017e3a:	4a62      	ldr	r2, [pc, #392]	; (8017fc4 <input_parameter+0x580>)
 8017e3c:	619a      	str	r2, [r3, #24]
	speed600_shortest_mollifier.slalom_R.f_ofset = 5;
 8017e3e:	4b5f      	ldr	r3, [pc, #380]	; (8017fbc <input_parameter+0x578>)
 8017e40:	4a61      	ldr	r2, [pc, #388]	; (8017fc8 <input_parameter+0x584>)
 8017e42:	60da      	str	r2, [r3, #12]
	speed600_shortest_mollifier.slalom_R.e_ofset = 28;
 8017e44:	4b5d      	ldr	r3, [pc, #372]	; (8017fbc <input_parameter+0x578>)
 8017e46:	4a61      	ldr	r2, [pc, #388]	; (8017fcc <input_parameter+0x588>)
 8017e48:	611a      	str	r2, [r3, #16]

	speed600_shortest_mollifier.slalom_L.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 8017e4a:	4b5c      	ldr	r3, [pc, #368]	; (8017fbc <input_parameter+0x578>)
 8017e4c:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_L.g_speed =
 8017e4e:	4a5b      	ldr	r2, [pc, #364]	; (8017fbc <input_parameter+0x578>)
 8017e50:	61d3      	str	r3, [r2, #28]
	speed600_shortest_mollifier.slalom_L.t_speed = 1100;
 8017e52:	4b5a      	ldr	r3, [pc, #360]	; (8017fbc <input_parameter+0x578>)
 8017e54:	4a5a      	ldr	r2, [pc, #360]	; (8017fc0 <input_parameter+0x57c>)
 8017e56:	629a      	str	r2, [r3, #40]	; 0x28
	speed600_shortest_mollifier.slalom_L.t_acc = 60000;
 8017e58:	4b58      	ldr	r3, [pc, #352]	; (8017fbc <input_parameter+0x578>)
 8017e5a:	4a5a      	ldr	r2, [pc, #360]	; (8017fc4 <input_parameter+0x580>)
 8017e5c:	62da      	str	r2, [r3, #44]	; 0x2c
	speed600_shortest_mollifier.slalom_L.f_ofset = 5;
 8017e5e:	4b57      	ldr	r3, [pc, #348]	; (8017fbc <input_parameter+0x578>)
 8017e60:	4a59      	ldr	r2, [pc, #356]	; (8017fc8 <input_parameter+0x584>)
 8017e62:	621a      	str	r2, [r3, #32]
	speed600_shortest_mollifier.slalom_L.e_ofset = 32;
 8017e64:	4b55      	ldr	r3, [pc, #340]	; (8017fbc <input_parameter+0x578>)
 8017e66:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8017e6a:	625a      	str	r2, [r3, #36]	; 0x24

	speed600_shortest_mollifier.turn90_R.g_speed = 600;
 8017e6c:	4b53      	ldr	r3, [pc, #332]	; (8017fbc <input_parameter+0x578>)
 8017e6e:	4a45      	ldr	r2, [pc, #276]	; (8017f84 <input_parameter+0x540>)
 8017e70:	631a      	str	r2, [r3, #48]	; 0x30
	speed600_shortest_mollifier.turn90_R.t_speed = 950;
 8017e72:	4b52      	ldr	r3, [pc, #328]	; (8017fbc <input_parameter+0x578>)
 8017e74:	4a56      	ldr	r2, [pc, #344]	; (8017fd0 <input_parameter+0x58c>)
 8017e76:	63da      	str	r2, [r3, #60]	; 0x3c
	speed600_shortest_mollifier.turn90_R.t_acc = 15000;
 8017e78:	4b50      	ldr	r3, [pc, #320]	; (8017fbc <input_parameter+0x578>)
 8017e7a:	4a56      	ldr	r2, [pc, #344]	; (8017fd4 <input_parameter+0x590>)
 8017e7c:	641a      	str	r2, [r3, #64]	; 0x40
	speed600_shortest_mollifier.turn90_R.f_ofset = 31;
 8017e7e:	4b4f      	ldr	r3, [pc, #316]	; (8017fbc <input_parameter+0x578>)
 8017e80:	4a55      	ldr	r2, [pc, #340]	; (8017fd8 <input_parameter+0x594>)
 8017e82:	635a      	str	r2, [r3, #52]	; 0x34
	speed600_shortest_mollifier.turn90_R.e_ofset = 31;
 8017e84:	4b4d      	ldr	r3, [pc, #308]	; (8017fbc <input_parameter+0x578>)
 8017e86:	4a54      	ldr	r2, [pc, #336]	; (8017fd8 <input_parameter+0x594>)
 8017e88:	639a      	str	r2, [r3, #56]	; 0x38

	speed600_shortest_mollifier.turn90_L.g_speed = 600;
 8017e8a:	4b4c      	ldr	r3, [pc, #304]	; (8017fbc <input_parameter+0x578>)
 8017e8c:	4a3d      	ldr	r2, [pc, #244]	; (8017f84 <input_parameter+0x540>)
 8017e8e:	645a      	str	r2, [r3, #68]	; 0x44
	speed600_shortest_mollifier.turn90_L.t_speed = 950;
 8017e90:	4b4a      	ldr	r3, [pc, #296]	; (8017fbc <input_parameter+0x578>)
 8017e92:	4a4f      	ldr	r2, [pc, #316]	; (8017fd0 <input_parameter+0x58c>)
 8017e94:	651a      	str	r2, [r3, #80]	; 0x50
	speed600_shortest_mollifier.turn90_L.t_acc = 15000;
 8017e96:	4b49      	ldr	r3, [pc, #292]	; (8017fbc <input_parameter+0x578>)
 8017e98:	4a4e      	ldr	r2, [pc, #312]	; (8017fd4 <input_parameter+0x590>)
 8017e9a:	655a      	str	r2, [r3, #84]	; 0x54
	speed600_shortest_mollifier.turn90_L.f_ofset = 31;
 8017e9c:	4b47      	ldr	r3, [pc, #284]	; (8017fbc <input_parameter+0x578>)
 8017e9e:	4a4e      	ldr	r2, [pc, #312]	; (8017fd8 <input_parameter+0x594>)
 8017ea0:	649a      	str	r2, [r3, #72]	; 0x48
	speed600_shortest_mollifier.turn90_L.e_ofset = 35;
 8017ea2:	4b46      	ldr	r3, [pc, #280]	; (8017fbc <input_parameter+0x578>)
 8017ea4:	4a42      	ldr	r2, [pc, #264]	; (8017fb0 <input_parameter+0x56c>)
 8017ea6:	64da      	str	r2, [r3, #76]	; 0x4c

	speed600_shortest_mollifier.turn180_R.g_speed =600;
 8017ea8:	4b44      	ldr	r3, [pc, #272]	; (8017fbc <input_parameter+0x578>)
 8017eaa:	4a36      	ldr	r2, [pc, #216]	; (8017f84 <input_parameter+0x540>)
 8017eac:	659a      	str	r2, [r3, #88]	; 0x58
	speed600_shortest_mollifier.turn180_R.t_speed = 840;
 8017eae:	4b43      	ldr	r3, [pc, #268]	; (8017fbc <input_parameter+0x578>)
 8017eb0:	4a4a      	ldr	r2, [pc, #296]	; (8017fdc <input_parameter+0x598>)
 8017eb2:	665a      	str	r2, [r3, #100]	; 0x64
	speed600_shortest_mollifier.turn180_R.t_acc = 14000;
 8017eb4:	4b41      	ldr	r3, [pc, #260]	; (8017fbc <input_parameter+0x578>)
 8017eb6:	4a4a      	ldr	r2, [pc, #296]	; (8017fe0 <input_parameter+0x59c>)
 8017eb8:	669a      	str	r2, [r3, #104]	; 0x68
	speed600_shortest_mollifier.turn180_R.f_ofset = 7;
 8017eba:	4b40      	ldr	r3, [pc, #256]	; (8017fbc <input_parameter+0x578>)
 8017ebc:	4a49      	ldr	r2, [pc, #292]	; (8017fe4 <input_parameter+0x5a0>)
 8017ebe:	65da      	str	r2, [r3, #92]	; 0x5c
	speed600_shortest_mollifier.turn180_R.e_ofset = 20;
 8017ec0:	4b3e      	ldr	r3, [pc, #248]	; (8017fbc <input_parameter+0x578>)
 8017ec2:	4a49      	ldr	r2, [pc, #292]	; (8017fe8 <input_parameter+0x5a4>)
 8017ec4:	661a      	str	r2, [r3, #96]	; 0x60

	speed600_shortest_mollifier.turn180_L.g_speed = 600;
 8017ec6:	4b3d      	ldr	r3, [pc, #244]	; (8017fbc <input_parameter+0x578>)
 8017ec8:	4a2e      	ldr	r2, [pc, #184]	; (8017f84 <input_parameter+0x540>)
 8017eca:	66da      	str	r2, [r3, #108]	; 0x6c
	speed600_shortest_mollifier.turn180_L.t_speed = 820;
 8017ecc:	4b3b      	ldr	r3, [pc, #236]	; (8017fbc <input_parameter+0x578>)
 8017ece:	4a47      	ldr	r2, [pc, #284]	; (8017fec <input_parameter+0x5a8>)
 8017ed0:	679a      	str	r2, [r3, #120]	; 0x78
	speed600_shortest_mollifier.turn180_L.t_acc = 14000;
 8017ed2:	4b3a      	ldr	r3, [pc, #232]	; (8017fbc <input_parameter+0x578>)
 8017ed4:	4a42      	ldr	r2, [pc, #264]	; (8017fe0 <input_parameter+0x59c>)
 8017ed6:	67da      	str	r2, [r3, #124]	; 0x7c
	speed600_shortest_mollifier.turn180_L.f_ofset = 7;
 8017ed8:	4b38      	ldr	r3, [pc, #224]	; (8017fbc <input_parameter+0x578>)
 8017eda:	4a42      	ldr	r2, [pc, #264]	; (8017fe4 <input_parameter+0x5a0>)
 8017edc:	671a      	str	r2, [r3, #112]	; 0x70
	speed600_shortest_mollifier.turn180_L.e_ofset = 18;
 8017ede:	4b37      	ldr	r3, [pc, #220]	; (8017fbc <input_parameter+0x578>)
 8017ee0:	4a43      	ldr	r2, [pc, #268]	; (8017ff0 <input_parameter+0x5ac>)
 8017ee2:	675a      	str	r2, [r3, #116]	; 0x74

	speed600_shortest_mollifier.turn45in_R.g_speed = 600;
 8017ee4:	4b35      	ldr	r3, [pc, #212]	; (8017fbc <input_parameter+0x578>)
 8017ee6:	4a27      	ldr	r2, [pc, #156]	; (8017f84 <input_parameter+0x540>)
 8017ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	speed600_shortest_mollifier.turn45in_R.t_speed = 830;
 8017eec:	4b33      	ldr	r3, [pc, #204]	; (8017fbc <input_parameter+0x578>)
 8017eee:	4a41      	ldr	r2, [pc, #260]	; (8017ff4 <input_parameter+0x5b0>)
 8017ef0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed600_shortest_mollifier.turn45in_R.t_acc = 12000;
 8017ef4:	4b31      	ldr	r3, [pc, #196]	; (8017fbc <input_parameter+0x578>)
 8017ef6:	4a40      	ldr	r2, [pc, #256]	; (8017ff8 <input_parameter+0x5b4>)
 8017ef8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed600_shortest_mollifier.turn45in_R.f_ofset = 13;
 8017efc:	4b2f      	ldr	r3, [pc, #188]	; (8017fbc <input_parameter+0x578>)
 8017efe:	4a3f      	ldr	r2, [pc, #252]	; (8017ffc <input_parameter+0x5b8>)
 8017f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed600_shortest_mollifier.turn45in_R.e_ofset = 38;
 8017f04:	4b2d      	ldr	r3, [pc, #180]	; (8017fbc <input_parameter+0x578>)
 8017f06:	4a3e      	ldr	r2, [pc, #248]	; (8018000 <input_parameter+0x5bc>)
 8017f08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed600_shortest_mollifier.turn45in_L.g_speed = 600;
 8017f0c:	4b2b      	ldr	r3, [pc, #172]	; (8017fbc <input_parameter+0x578>)
 8017f0e:	4a1d      	ldr	r2, [pc, #116]	; (8017f84 <input_parameter+0x540>)
 8017f10:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	speed600_shortest_mollifier.turn45in_L.t_speed = 898;
 8017f14:	4b29      	ldr	r3, [pc, #164]	; (8017fbc <input_parameter+0x578>)
 8017f16:	4a3b      	ldr	r2, [pc, #236]	; (8018004 <input_parameter+0x5c0>)
 8017f18:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed600_shortest_mollifier.turn45in_L.t_acc = 12000;
 8017f1c:	4b27      	ldr	r3, [pc, #156]	; (8017fbc <input_parameter+0x578>)
 8017f1e:	4a36      	ldr	r2, [pc, #216]	; (8017ff8 <input_parameter+0x5b4>)
 8017f20:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed600_shortest_mollifier.turn45in_L.f_ofset = 12;
 8017f24:	4b25      	ldr	r3, [pc, #148]	; (8017fbc <input_parameter+0x578>)
 8017f26:	4a38      	ldr	r2, [pc, #224]	; (8018008 <input_parameter+0x5c4>)
 8017f28:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed600_shortest_mollifier.turn45in_L.e_ofset = 36;
 8017f2c:	4b23      	ldr	r3, [pc, #140]	; (8017fbc <input_parameter+0x578>)
 8017f2e:	4a37      	ldr	r2, [pc, #220]	; (801800c <input_parameter+0x5c8>)
 8017f30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed600_shortest_mollifier.turn135in_R.g_speed = 600;
 8017f34:	4b21      	ldr	r3, [pc, #132]	; (8017fbc <input_parameter+0x578>)
 8017f36:	4a13      	ldr	r2, [pc, #76]	; (8017f84 <input_parameter+0x540>)
 8017f38:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	speed600_shortest_mollifier.turn135in_R.t_speed = 940;
 8017f3c:	4b1f      	ldr	r3, [pc, #124]	; (8017fbc <input_parameter+0x578>)
 8017f3e:	4a34      	ldr	r2, [pc, #208]	; (8018010 <input_parameter+0x5cc>)
 8017f40:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed600_shortest_mollifier.turn135in_R.t_acc = 14000;
 8017f44:	4b1d      	ldr	r3, [pc, #116]	; (8017fbc <input_parameter+0x578>)
 8017f46:	4a26      	ldr	r2, [pc, #152]	; (8017fe0 <input_parameter+0x59c>)
 8017f48:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed600_shortest_mollifier.turn135in_R.f_ofset = 9.5;
 8017f4c:	4b1b      	ldr	r3, [pc, #108]	; (8017fbc <input_parameter+0x578>)
 8017f4e:	4a31      	ldr	r2, [pc, #196]	; (8018014 <input_parameter+0x5d0>)
 8017f50:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed600_shortest_mollifier.turn135in_R.e_ofset = 36;
 8017f54:	4b19      	ldr	r3, [pc, #100]	; (8017fbc <input_parameter+0x578>)
 8017f56:	4a2d      	ldr	r2, [pc, #180]	; (801800c <input_parameter+0x5c8>)
 8017f58:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed600_shortest_mollifier.turn135in_L.g_speed = 600;
 8017f5c:	4b17      	ldr	r3, [pc, #92]	; (8017fbc <input_parameter+0x578>)
 8017f5e:	4a09      	ldr	r2, [pc, #36]	; (8017f84 <input_parameter+0x540>)
 8017f60:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	speed600_shortest_mollifier.turn135in_L.t_speed = 900;
 8017f64:	4b15      	ldr	r3, [pc, #84]	; (8017fbc <input_parameter+0x578>)
 8017f66:	4a2c      	ldr	r2, [pc, #176]	; (8018018 <input_parameter+0x5d4>)
 8017f68:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed600_shortest_mollifier.turn135in_L.t_acc = 14000;
 8017f6c:	4b13      	ldr	r3, [pc, #76]	; (8017fbc <input_parameter+0x578>)
 8017f6e:	4a1c      	ldr	r2, [pc, #112]	; (8017fe0 <input_parameter+0x59c>)
 8017f70:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8017f74:	e052      	b.n	801801c <input_parameter+0x5d8>
 8017f76:	bf00      	nop
 8017f78:	42860000 	.word	0x42860000
 8017f7c:	2000f214 	.word	0x2000f214
 8017f80:	42920000 	.word	0x42920000
 8017f84:	44160000 	.word	0x44160000
 8017f88:	461c4000 	.word	0x461c4000
 8017f8c:	42640000 	.word	0x42640000
 8017f90:	42500000 	.word	0x42500000
 8017f94:	44250000 	.word	0x44250000
 8017f98:	45fa0000 	.word	0x45fa0000
 8017f9c:	425c0000 	.word	0x425c0000
 8017fa0:	42c80000 	.word	0x42c80000
 8017fa4:	42ce0000 	.word	0x42ce0000
 8017fa8:	442f0000 	.word	0x442f0000
 8017fac:	462be000 	.word	0x462be000
 8017fb0:	420c0000 	.word	0x420c0000
 8017fb4:	42600000 	.word	0x42600000
 8017fb8:	42700000 	.word	0x42700000
 8017fbc:	2000f35c 	.word	0x2000f35c
 8017fc0:	44898000 	.word	0x44898000
 8017fc4:	476a6000 	.word	0x476a6000
 8017fc8:	40a00000 	.word	0x40a00000
 8017fcc:	41e00000 	.word	0x41e00000
 8017fd0:	446d8000 	.word	0x446d8000
 8017fd4:	466a6000 	.word	0x466a6000
 8017fd8:	41f80000 	.word	0x41f80000
 8017fdc:	44520000 	.word	0x44520000
 8017fe0:	465ac000 	.word	0x465ac000
 8017fe4:	40e00000 	.word	0x40e00000
 8017fe8:	41a00000 	.word	0x41a00000
 8017fec:	444d0000 	.word	0x444d0000
 8017ff0:	41900000 	.word	0x41900000
 8017ff4:	444f8000 	.word	0x444f8000
 8017ff8:	463b8000 	.word	0x463b8000
 8017ffc:	41500000 	.word	0x41500000
 8018000:	42180000 	.word	0x42180000
 8018004:	44608000 	.word	0x44608000
 8018008:	41400000 	.word	0x41400000
 801800c:	42100000 	.word	0x42100000
 8018010:	446b0000 	.word	0x446b0000
 8018014:	41180000 	.word	0x41180000
 8018018:	44610000 	.word	0x44610000
	speed600_shortest_mollifier.turn135in_L.f_ofset = 8;
 801801c:	4b9d      	ldr	r3, [pc, #628]	; (8018294 <input_parameter+0x850>)
 801801e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8018022:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed600_shortest_mollifier.turn135in_L.e_ofset = 34;
 8018026:	4b9b      	ldr	r3, [pc, #620]	; (8018294 <input_parameter+0x850>)
 8018028:	4a9b      	ldr	r2, [pc, #620]	; (8018298 <input_parameter+0x854>)
 801802a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed600_shortest_mollifier.turn45out_R.g_speed = 600;
 801802e:	4b99      	ldr	r3, [pc, #612]	; (8018294 <input_parameter+0x850>)
 8018030:	4a9a      	ldr	r2, [pc, #616]	; (801829c <input_parameter+0x858>)
 8018032:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	speed600_shortest_mollifier.turn45out_R.t_speed = 720;
 8018036:	4b97      	ldr	r3, [pc, #604]	; (8018294 <input_parameter+0x850>)
 8018038:	4a99      	ldr	r2, [pc, #612]	; (80182a0 <input_parameter+0x85c>)
 801803a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed600_shortest_mollifier.turn45out_R.t_acc = 12000;
 801803e:	4b95      	ldr	r3, [pc, #596]	; (8018294 <input_parameter+0x850>)
 8018040:	4a98      	ldr	r2, [pc, #608]	; (80182a4 <input_parameter+0x860>)
 8018042:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed600_shortest_mollifier.turn45out_R.f_ofset = 43;
 8018046:	4b93      	ldr	r3, [pc, #588]	; (8018294 <input_parameter+0x850>)
 8018048:	4a97      	ldr	r2, [pc, #604]	; (80182a8 <input_parameter+0x864>)
 801804a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed600_shortest_mollifier.turn45out_R.e_ofset = 22;
 801804e:	4b91      	ldr	r3, [pc, #580]	; (8018294 <input_parameter+0x850>)
 8018050:	4a96      	ldr	r2, [pc, #600]	; (80182ac <input_parameter+0x868>)
 8018052:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed600_shortest_mollifier.turn45out_L.g_speed = 600;
 8018056:	4b8f      	ldr	r3, [pc, #572]	; (8018294 <input_parameter+0x850>)
 8018058:	4a90      	ldr	r2, [pc, #576]	; (801829c <input_parameter+0x858>)
 801805a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	speed600_shortest_mollifier.turn45out_L.t_speed = 750;
 801805e:	4b8d      	ldr	r3, [pc, #564]	; (8018294 <input_parameter+0x850>)
 8018060:	4a93      	ldr	r2, [pc, #588]	; (80182b0 <input_parameter+0x86c>)
 8018062:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed600_shortest_mollifier.turn45out_L.t_acc = 12000;
 8018066:	4b8b      	ldr	r3, [pc, #556]	; (8018294 <input_parameter+0x850>)
 8018068:	4a8e      	ldr	r2, [pc, #568]	; (80182a4 <input_parameter+0x860>)
 801806a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed600_shortest_mollifier.turn45out_L.f_ofset = 40;
 801806e:	4b89      	ldr	r3, [pc, #548]	; (8018294 <input_parameter+0x850>)
 8018070:	4a90      	ldr	r2, [pc, #576]	; (80182b4 <input_parameter+0x870>)
 8018072:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed600_shortest_mollifier.turn45out_L.e_ofset = 24;
 8018076:	4b87      	ldr	r3, [pc, #540]	; (8018294 <input_parameter+0x850>)
 8018078:	4a8f      	ldr	r2, [pc, #572]	; (80182b8 <input_parameter+0x874>)
 801807a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed600_shortest_mollifier.turn135out_R.g_speed = 600;
 801807e:	4b85      	ldr	r3, [pc, #532]	; (8018294 <input_parameter+0x850>)
 8018080:	4a86      	ldr	r2, [pc, #536]	; (801829c <input_parameter+0x858>)
 8018082:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	speed600_shortest_mollifier.turn135out_R.t_speed = 920;
 8018086:	4b83      	ldr	r3, [pc, #524]	; (8018294 <input_parameter+0x850>)
 8018088:	4a8c      	ldr	r2, [pc, #560]	; (80182bc <input_parameter+0x878>)
 801808a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed600_shortest_mollifier.turn135out_R.t_acc = 15000;
 801808e:	4b81      	ldr	r3, [pc, #516]	; (8018294 <input_parameter+0x850>)
 8018090:	4a8b      	ldr	r2, [pc, #556]	; (80182c0 <input_parameter+0x87c>)
 8018092:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed600_shortest_mollifier.turn135out_R.f_ofset = 5;
 8018096:	4b7f      	ldr	r3, [pc, #508]	; (8018294 <input_parameter+0x850>)
 8018098:	4a8a      	ldr	r2, [pc, #552]	; (80182c4 <input_parameter+0x880>)
 801809a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed600_shortest_mollifier.turn135out_R.e_ofset = 22;
 801809e:	4b7d      	ldr	r3, [pc, #500]	; (8018294 <input_parameter+0x850>)
 80180a0:	4a82      	ldr	r2, [pc, #520]	; (80182ac <input_parameter+0x868>)
 80180a2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed600_shortest_mollifier.turn135out_L.g_speed = 600;
 80180a6:	4b7b      	ldr	r3, [pc, #492]	; (8018294 <input_parameter+0x850>)
 80180a8:	4a7c      	ldr	r2, [pc, #496]	; (801829c <input_parameter+0x858>)
 80180aa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	speed600_shortest_mollifier.turn135out_L.t_speed = 890;
 80180ae:	4b79      	ldr	r3, [pc, #484]	; (8018294 <input_parameter+0x850>)
 80180b0:	4a85      	ldr	r2, [pc, #532]	; (80182c8 <input_parameter+0x884>)
 80180b2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed600_shortest_mollifier.turn135out_L.t_acc = 14000;
 80180b6:	4b77      	ldr	r3, [pc, #476]	; (8018294 <input_parameter+0x850>)
 80180b8:	4a84      	ldr	r2, [pc, #528]	; (80182cc <input_parameter+0x888>)
 80180ba:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed600_shortest_mollifier.turn135out_L.f_ofset = 8;
 80180be:	4b75      	ldr	r3, [pc, #468]	; (8018294 <input_parameter+0x850>)
 80180c0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80180c4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed600_shortest_mollifier.turn135out_L.e_ofset = 36;
 80180c8:	4b72      	ldr	r3, [pc, #456]	; (8018294 <input_parameter+0x850>)
 80180ca:	4a81      	ldr	r2, [pc, #516]	; (80182d0 <input_parameter+0x88c>)
 80180cc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed600_shortest_mollifier.V90_R.g_speed = 600;
 80180d0:	4b70      	ldr	r3, [pc, #448]	; (8018294 <input_parameter+0x850>)
 80180d2:	4a72      	ldr	r2, [pc, #456]	; (801829c <input_parameter+0x858>)
 80180d4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	speed600_shortest_mollifier.V90_R.t_speed = 940;
 80180d8:	4b6e      	ldr	r3, [pc, #440]	; (8018294 <input_parameter+0x850>)
 80180da:	4a7e      	ldr	r2, [pc, #504]	; (80182d4 <input_parameter+0x890>)
 80180dc:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed600_shortest_mollifier.V90_R.t_acc = 15000;
 80180e0:	4b6c      	ldr	r3, [pc, #432]	; (8018294 <input_parameter+0x850>)
 80180e2:	4a77      	ldr	r2, [pc, #476]	; (80182c0 <input_parameter+0x87c>)
 80180e4:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed600_shortest_mollifier.V90_R.f_ofset = 17;
 80180e8:	4b6a      	ldr	r3, [pc, #424]	; (8018294 <input_parameter+0x850>)
 80180ea:	4a7b      	ldr	r2, [pc, #492]	; (80182d8 <input_parameter+0x894>)
 80180ec:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed600_shortest_mollifier.V90_R.e_ofset = 20;
 80180f0:	4b68      	ldr	r3, [pc, #416]	; (8018294 <input_parameter+0x850>)
 80180f2:	4a7a      	ldr	r2, [pc, #488]	; (80182dc <input_parameter+0x898>)
 80180f4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed600_shortest_mollifier.V90_L.g_speed = 600;
 80180f8:	4b66      	ldr	r3, [pc, #408]	; (8018294 <input_parameter+0x850>)
 80180fa:	4a68      	ldr	r2, [pc, #416]	; (801829c <input_parameter+0x858>)
 80180fc:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	speed600_shortest_mollifier.V90_L.t_speed = 960;
 8018100:	4b64      	ldr	r3, [pc, #400]	; (8018294 <input_parameter+0x850>)
 8018102:	4a77      	ldr	r2, [pc, #476]	; (80182e0 <input_parameter+0x89c>)
 8018104:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed600_shortest_mollifier.V90_L.t_acc = 16000;
 8018108:	4b62      	ldr	r3, [pc, #392]	; (8018294 <input_parameter+0x850>)
 801810a:	4a76      	ldr	r2, [pc, #472]	; (80182e4 <input_parameter+0x8a0>)
 801810c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed600_shortest_mollifier.V90_L.f_ofset = 10;
 8018110:	4b60      	ldr	r3, [pc, #384]	; (8018294 <input_parameter+0x850>)
 8018112:	4a75      	ldr	r2, [pc, #468]	; (80182e8 <input_parameter+0x8a4>)
 8018114:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed600_shortest_mollifier.V90_L.e_ofset = 20;
 8018118:	4b5e      	ldr	r3, [pc, #376]	; (8018294 <input_parameter+0x850>)
 801811a:	4a70      	ldr	r2, [pc, #448]	; (80182dc <input_parameter+0x898>)
 801811c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c




	//********************************1000********************************************
		speed1000_shortest_mollifier.SlalomCentervelocity = 1000;
 8018120:	4b72      	ldr	r3, [pc, #456]	; (80182ec <input_parameter+0x8a8>)
 8018122:	4a73      	ldr	r2, [pc, #460]	; (80182f0 <input_parameter+0x8ac>)
 8018124:	601a      	str	r2, [r3, #0]
		speed1000_shortest_mollifier.TurnCentervelocity = 1000;
 8018126:	4b71      	ldr	r3, [pc, #452]	; (80182ec <input_parameter+0x8a8>)
 8018128:	4a71      	ldr	r2, [pc, #452]	; (80182f0 <input_parameter+0x8ac>)
 801812a:	605a      	str	r2, [r3, #4]

		speed1000_shortest_mollifier.slalom_R.g_speed =
				speed1000_shortest_mollifier.SlalomCentervelocity;
 801812c:	4b6f      	ldr	r3, [pc, #444]	; (80182ec <input_parameter+0x8a8>)
 801812e:	681b      	ldr	r3, [r3, #0]
		speed1000_shortest_mollifier.slalom_R.g_speed =
 8018130:	4a6e      	ldr	r2, [pc, #440]	; (80182ec <input_parameter+0x8a8>)
 8018132:	6093      	str	r3, [r2, #8]
		speed1000_shortest_mollifier.slalom_R.t_speed = 1100;
 8018134:	4b6d      	ldr	r3, [pc, #436]	; (80182ec <input_parameter+0x8a8>)
 8018136:	4a6f      	ldr	r2, [pc, #444]	; (80182f4 <input_parameter+0x8b0>)
 8018138:	615a      	str	r2, [r3, #20]
		speed1000_shortest_mollifier.slalom_R.f_ofset = 5;
 801813a:	4b6c      	ldr	r3, [pc, #432]	; (80182ec <input_parameter+0x8a8>)
 801813c:	4a61      	ldr	r2, [pc, #388]	; (80182c4 <input_parameter+0x880>)
 801813e:	60da      	str	r2, [r3, #12]
		speed1000_shortest_mollifier.slalom_R.e_ofset = 28;
 8018140:	4b6a      	ldr	r3, [pc, #424]	; (80182ec <input_parameter+0x8a8>)
 8018142:	4a6d      	ldr	r2, [pc, #436]	; (80182f8 <input_parameter+0x8b4>)
 8018144:	611a      	str	r2, [r3, #16]

		speed1000_shortest_mollifier.slalom_L.g_speed =
				speed1000_shortest_mollifier.SlalomCentervelocity;
 8018146:	4b69      	ldr	r3, [pc, #420]	; (80182ec <input_parameter+0x8a8>)
 8018148:	681b      	ldr	r3, [r3, #0]
		speed1000_shortest_mollifier.slalom_L.g_speed =
 801814a:	4a68      	ldr	r2, [pc, #416]	; (80182ec <input_parameter+0x8a8>)
 801814c:	61d3      	str	r3, [r2, #28]
		speed1000_shortest_mollifier.slalom_L.t_speed = 1100;
 801814e:	4b67      	ldr	r3, [pc, #412]	; (80182ec <input_parameter+0x8a8>)
 8018150:	4a68      	ldr	r2, [pc, #416]	; (80182f4 <input_parameter+0x8b0>)
 8018152:	629a      	str	r2, [r3, #40]	; 0x28
		speed1000_shortest_mollifier.slalom_L.f_ofset = 5;
 8018154:	4b65      	ldr	r3, [pc, #404]	; (80182ec <input_parameter+0x8a8>)
 8018156:	4a5b      	ldr	r2, [pc, #364]	; (80182c4 <input_parameter+0x880>)
 8018158:	621a      	str	r2, [r3, #32]
		speed1000_shortest_mollifier.slalom_L.e_ofset = 32;
 801815a:	4b64      	ldr	r3, [pc, #400]	; (80182ec <input_parameter+0x8a8>)
 801815c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8018160:	625a      	str	r2, [r3, #36]	; 0x24

		speed1000_shortest_mollifier.turn90_R.g_speed = 1000;
 8018162:	4b62      	ldr	r3, [pc, #392]	; (80182ec <input_parameter+0x8a8>)
 8018164:	4a62      	ldr	r2, [pc, #392]	; (80182f0 <input_parameter+0x8ac>)
 8018166:	631a      	str	r2, [r3, #48]	; 0x30
		speed1000_shortest_mollifier.turn90_R.t_speed = 1450;
 8018168:	4b60      	ldr	r3, [pc, #384]	; (80182ec <input_parameter+0x8a8>)
 801816a:	4a64      	ldr	r2, [pc, #400]	; (80182fc <input_parameter+0x8b8>)
 801816c:	63da      	str	r2, [r3, #60]	; 0x3c
		speed1000_shortest_mollifier.turn90_R.f_ofset = 29;
 801816e:	4b5f      	ldr	r3, [pc, #380]	; (80182ec <input_parameter+0x8a8>)
 8018170:	4a63      	ldr	r2, [pc, #396]	; (8018300 <input_parameter+0x8bc>)
 8018172:	635a      	str	r2, [r3, #52]	; 0x34
		speed1000_shortest_mollifier.turn90_R.e_ofset = 31;
 8018174:	4b5d      	ldr	r3, [pc, #372]	; (80182ec <input_parameter+0x8a8>)
 8018176:	4a63      	ldr	r2, [pc, #396]	; (8018304 <input_parameter+0x8c0>)
 8018178:	639a      	str	r2, [r3, #56]	; 0x38

		speed1000_shortest_mollifier.turn90_L.g_speed = 1000;
 801817a:	4b5c      	ldr	r3, [pc, #368]	; (80182ec <input_parameter+0x8a8>)
 801817c:	4a5c      	ldr	r2, [pc, #368]	; (80182f0 <input_parameter+0x8ac>)
 801817e:	645a      	str	r2, [r3, #68]	; 0x44
		speed1000_shortest_mollifier.turn90_L.t_speed = 1450;
 8018180:	4b5a      	ldr	r3, [pc, #360]	; (80182ec <input_parameter+0x8a8>)
 8018182:	4a5e      	ldr	r2, [pc, #376]	; (80182fc <input_parameter+0x8b8>)
 8018184:	651a      	str	r2, [r3, #80]	; 0x50
		speed1000_shortest_mollifier.turn90_L.f_ofset = 29;
 8018186:	4b59      	ldr	r3, [pc, #356]	; (80182ec <input_parameter+0x8a8>)
 8018188:	4a5d      	ldr	r2, [pc, #372]	; (8018300 <input_parameter+0x8bc>)
 801818a:	649a      	str	r2, [r3, #72]	; 0x48
		speed1000_shortest_mollifier.turn90_L.e_ofset = 35;
 801818c:	4b57      	ldr	r3, [pc, #348]	; (80182ec <input_parameter+0x8a8>)
 801818e:	4a5e      	ldr	r2, [pc, #376]	; (8018308 <input_parameter+0x8c4>)
 8018190:	64da      	str	r2, [r3, #76]	; 0x4c

		speed1000_shortest_mollifier.turn180_R.g_speed =1000;
 8018192:	4b56      	ldr	r3, [pc, #344]	; (80182ec <input_parameter+0x8a8>)
 8018194:	4a56      	ldr	r2, [pc, #344]	; (80182f0 <input_parameter+0x8ac>)
 8018196:	659a      	str	r2, [r3, #88]	; 0x58
		speed1000_shortest_mollifier.turn180_R.t_speed = 1400;
 8018198:	4b54      	ldr	r3, [pc, #336]	; (80182ec <input_parameter+0x8a8>)
 801819a:	4a5c      	ldr	r2, [pc, #368]	; (801830c <input_parameter+0x8c8>)
 801819c:	665a      	str	r2, [r3, #100]	; 0x64
		speed1000_shortest_mollifier.turn180_R.f_ofset = 17;
 801819e:	4b53      	ldr	r3, [pc, #332]	; (80182ec <input_parameter+0x8a8>)
 80181a0:	4a4d      	ldr	r2, [pc, #308]	; (80182d8 <input_parameter+0x894>)
 80181a2:	65da      	str	r2, [r3, #92]	; 0x5c
		speed1000_shortest_mollifier.turn180_R.e_ofset = 20;
 80181a4:	4b51      	ldr	r3, [pc, #324]	; (80182ec <input_parameter+0x8a8>)
 80181a6:	4a4d      	ldr	r2, [pc, #308]	; (80182dc <input_parameter+0x898>)
 80181a8:	661a      	str	r2, [r3, #96]	; 0x60

		speed1000_shortest_mollifier.turn180_L.g_speed = 1000;
 80181aa:	4b50      	ldr	r3, [pc, #320]	; (80182ec <input_parameter+0x8a8>)
 80181ac:	4a50      	ldr	r2, [pc, #320]	; (80182f0 <input_parameter+0x8ac>)
 80181ae:	66da      	str	r2, [r3, #108]	; 0x6c
		speed1000_shortest_mollifier.turn180_L.t_speed = 1400;
 80181b0:	4b4e      	ldr	r3, [pc, #312]	; (80182ec <input_parameter+0x8a8>)
 80181b2:	4a56      	ldr	r2, [pc, #344]	; (801830c <input_parameter+0x8c8>)
 80181b4:	679a      	str	r2, [r3, #120]	; 0x78
		speed1000_shortest_mollifier.turn180_L.f_ofset = 17;
 80181b6:	4b4d      	ldr	r3, [pc, #308]	; (80182ec <input_parameter+0x8a8>)
 80181b8:	4a47      	ldr	r2, [pc, #284]	; (80182d8 <input_parameter+0x894>)
 80181ba:	671a      	str	r2, [r3, #112]	; 0x70
		speed1000_shortest_mollifier.turn180_L.e_ofset = 18;
 80181bc:	4b4b      	ldr	r3, [pc, #300]	; (80182ec <input_parameter+0x8a8>)
 80181be:	4a54      	ldr	r2, [pc, #336]	; (8018310 <input_parameter+0x8cc>)
 80181c0:	675a      	str	r2, [r3, #116]	; 0x74

		speed1000_shortest_mollifier.turn45in_R.g_speed = 1000;
 80181c2:	4b4a      	ldr	r3, [pc, #296]	; (80182ec <input_parameter+0x8a8>)
 80181c4:	4a4a      	ldr	r2, [pc, #296]	; (80182f0 <input_parameter+0x8ac>)
 80181c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		speed1000_shortest_mollifier.turn45in_R.t_speed = 1300;
 80181ca:	4b48      	ldr	r3, [pc, #288]	; (80182ec <input_parameter+0x8a8>)
 80181cc:	4a51      	ldr	r2, [pc, #324]	; (8018314 <input_parameter+0x8d0>)
 80181ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		speed1000_shortest_mollifier.turn45in_R.f_ofset = 18;
 80181d2:	4b46      	ldr	r3, [pc, #280]	; (80182ec <input_parameter+0x8a8>)
 80181d4:	4a4e      	ldr	r2, [pc, #312]	; (8018310 <input_parameter+0x8cc>)
 80181d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		speed1000_shortest_mollifier.turn45in_R.e_ofset = 38;
 80181da:	4b44      	ldr	r3, [pc, #272]	; (80182ec <input_parameter+0x8a8>)
 80181dc:	4a4e      	ldr	r2, [pc, #312]	; (8018318 <input_parameter+0x8d4>)
 80181de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

		speed1000_shortest_mollifier.turn45in_L.g_speed = 1000;
 80181e2:	4b42      	ldr	r3, [pc, #264]	; (80182ec <input_parameter+0x8a8>)
 80181e4:	4a42      	ldr	r2, [pc, #264]	; (80182f0 <input_parameter+0x8ac>)
 80181e6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		speed1000_shortest_mollifier.turn45in_L.t_speed = 1300;
 80181ea:	4b40      	ldr	r3, [pc, #256]	; (80182ec <input_parameter+0x8a8>)
 80181ec:	4a49      	ldr	r2, [pc, #292]	; (8018314 <input_parameter+0x8d0>)
 80181ee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		speed1000_shortest_mollifier.turn45in_L.f_ofset = 17;
 80181f2:	4b3e      	ldr	r3, [pc, #248]	; (80182ec <input_parameter+0x8a8>)
 80181f4:	4a38      	ldr	r2, [pc, #224]	; (80182d8 <input_parameter+0x894>)
 80181f6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		speed1000_shortest_mollifier.turn45in_L.e_ofset = 36;
 80181fa:	4b3c      	ldr	r3, [pc, #240]	; (80182ec <input_parameter+0x8a8>)
 80181fc:	4a34      	ldr	r2, [pc, #208]	; (80182d0 <input_parameter+0x88c>)
 80181fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

		speed1000_shortest_mollifier.turn135in_R.g_speed = 1000;
 8018202:	4b3a      	ldr	r3, [pc, #232]	; (80182ec <input_parameter+0x8a8>)
 8018204:	4a3a      	ldr	r2, [pc, #232]	; (80182f0 <input_parameter+0x8ac>)
 8018206:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		speed1000_shortest_mollifier.turn135in_R.t_speed = 1590;
 801820a:	4b38      	ldr	r3, [pc, #224]	; (80182ec <input_parameter+0x8a8>)
 801820c:	4a43      	ldr	r2, [pc, #268]	; (801831c <input_parameter+0x8d8>)
 801820e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		speed1000_shortest_mollifier.turn135in_R.f_ofset = 17;
 8018212:	4b36      	ldr	r3, [pc, #216]	; (80182ec <input_parameter+0x8a8>)
 8018214:	4a30      	ldr	r2, [pc, #192]	; (80182d8 <input_parameter+0x894>)
 8018216:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		speed1000_shortest_mollifier.turn135in_R.e_ofset = 15;
 801821a:	4b34      	ldr	r3, [pc, #208]	; (80182ec <input_parameter+0x8a8>)
 801821c:	4a40      	ldr	r2, [pc, #256]	; (8018320 <input_parameter+0x8dc>)
 801821e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		speed1000_shortest_mollifier.turn135in_L.g_speed = 1000;
 8018222:	4b32      	ldr	r3, [pc, #200]	; (80182ec <input_parameter+0x8a8>)
 8018224:	4a32      	ldr	r2, [pc, #200]	; (80182f0 <input_parameter+0x8ac>)
 8018226:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		speed1000_shortest_mollifier.turn135in_L.t_speed = 1560;
 801822a:	4b30      	ldr	r3, [pc, #192]	; (80182ec <input_parameter+0x8a8>)
 801822c:	4a3d      	ldr	r2, [pc, #244]	; (8018324 <input_parameter+0x8e0>)
 801822e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		speed1000_shortest_mollifier.turn135in_L.f_ofset = 14;
 8018232:	4b2e      	ldr	r3, [pc, #184]	; (80182ec <input_parameter+0x8a8>)
 8018234:	4a3c      	ldr	r2, [pc, #240]	; (8018328 <input_parameter+0x8e4>)
 8018236:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		speed1000_shortest_mollifier.turn135in_L.e_ofset = 12;
 801823a:	4b2c      	ldr	r3, [pc, #176]	; (80182ec <input_parameter+0x8a8>)
 801823c:	4a3b      	ldr	r2, [pc, #236]	; (801832c <input_parameter+0x8e8>)
 801823e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

		speed1000_shortest_mollifier.turn45out_R.g_speed = 1000;
 8018242:	4b2a      	ldr	r3, [pc, #168]	; (80182ec <input_parameter+0x8a8>)
 8018244:	4a2a      	ldr	r2, [pc, #168]	; (80182f0 <input_parameter+0x8ac>)
 8018246:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		speed1000_shortest_mollifier.turn45out_R.t_speed = 1300;
 801824a:	4b28      	ldr	r3, [pc, #160]	; (80182ec <input_parameter+0x8a8>)
 801824c:	4a31      	ldr	r2, [pc, #196]	; (8018314 <input_parameter+0x8d0>)
 801824e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		speed1000_shortest_mollifier.turn45out_R.f_ofset = 38;
 8018252:	4b26      	ldr	r3, [pc, #152]	; (80182ec <input_parameter+0x8a8>)
 8018254:	4a30      	ldr	r2, [pc, #192]	; (8018318 <input_parameter+0x8d4>)
 8018256:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		speed1000_shortest_mollifier.turn45out_R.e_ofset = 22;
 801825a:	4b24      	ldr	r3, [pc, #144]	; (80182ec <input_parameter+0x8a8>)
 801825c:	4a13      	ldr	r2, [pc, #76]	; (80182ac <input_parameter+0x868>)
 801825e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

		speed1000_shortest_mollifier.turn45out_L.g_speed = 1000;
 8018262:	4b22      	ldr	r3, [pc, #136]	; (80182ec <input_parameter+0x8a8>)
 8018264:	4a22      	ldr	r2, [pc, #136]	; (80182f0 <input_parameter+0x8ac>)
 8018266:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		speed1000_shortest_mollifier.turn45out_L.t_speed = 1300;
 801826a:	4b20      	ldr	r3, [pc, #128]	; (80182ec <input_parameter+0x8a8>)
 801826c:	4a29      	ldr	r2, [pc, #164]	; (8018314 <input_parameter+0x8d0>)
 801826e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
		speed1000_shortest_mollifier.turn45out_L.f_ofset = 30;
 8018272:	4b1e      	ldr	r3, [pc, #120]	; (80182ec <input_parameter+0x8a8>)
 8018274:	4a2e      	ldr	r2, [pc, #184]	; (8018330 <input_parameter+0x8ec>)
 8018276:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		speed1000_shortest_mollifier.turn45out_L.e_ofset = 24;
 801827a:	4b1c      	ldr	r3, [pc, #112]	; (80182ec <input_parameter+0x8a8>)
 801827c:	4a0e      	ldr	r2, [pc, #56]	; (80182b8 <input_parameter+0x874>)
 801827e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

		speed1000_shortest_mollifier.turn135out_R.g_speed = 1000;
 8018282:	4b1a      	ldr	r3, [pc, #104]	; (80182ec <input_parameter+0x8a8>)
 8018284:	4a1a      	ldr	r2, [pc, #104]	; (80182f0 <input_parameter+0x8ac>)
 8018286:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
		speed1000_shortest_mollifier.turn135out_R.t_speed = 1660;
 801828a:	4b18      	ldr	r3, [pc, #96]	; (80182ec <input_parameter+0x8a8>)
 801828c:	4a29      	ldr	r2, [pc, #164]	; (8018334 <input_parameter+0x8f0>)
 801828e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8018292:	e051      	b.n	8018338 <input_parameter+0x8f4>
 8018294:	2000f35c 	.word	0x2000f35c
 8018298:	42080000 	.word	0x42080000
 801829c:	44160000 	.word	0x44160000
 80182a0:	44340000 	.word	0x44340000
 80182a4:	463b8000 	.word	0x463b8000
 80182a8:	422c0000 	.word	0x422c0000
 80182ac:	41b00000 	.word	0x41b00000
 80182b0:	443b8000 	.word	0x443b8000
 80182b4:	42200000 	.word	0x42200000
 80182b8:	41c00000 	.word	0x41c00000
 80182bc:	44660000 	.word	0x44660000
 80182c0:	466a6000 	.word	0x466a6000
 80182c4:	40a00000 	.word	0x40a00000
 80182c8:	445e8000 	.word	0x445e8000
 80182cc:	465ac000 	.word	0x465ac000
 80182d0:	42100000 	.word	0x42100000
 80182d4:	446b0000 	.word	0x446b0000
 80182d8:	41880000 	.word	0x41880000
 80182dc:	41a00000 	.word	0x41a00000
 80182e0:	44700000 	.word	0x44700000
 80182e4:	467a0000 	.word	0x467a0000
 80182e8:	41200000 	.word	0x41200000
 80182ec:	2000f4a4 	.word	0x2000f4a4
 80182f0:	447a0000 	.word	0x447a0000
 80182f4:	44898000 	.word	0x44898000
 80182f8:	41e00000 	.word	0x41e00000
 80182fc:	44b54000 	.word	0x44b54000
 8018300:	41e80000 	.word	0x41e80000
 8018304:	41f80000 	.word	0x41f80000
 8018308:	420c0000 	.word	0x420c0000
 801830c:	44af0000 	.word	0x44af0000
 8018310:	41900000 	.word	0x41900000
 8018314:	44a28000 	.word	0x44a28000
 8018318:	42180000 	.word	0x42180000
 801831c:	44c6c000 	.word	0x44c6c000
 8018320:	41700000 	.word	0x41700000
 8018324:	44c30000 	.word	0x44c30000
 8018328:	41600000 	.word	0x41600000
 801832c:	41400000 	.word	0x41400000
 8018330:	41f00000 	.word	0x41f00000
 8018334:	44cf8000 	.word	0x44cf8000
		speed1000_shortest_mollifier.turn135out_R.f_ofset = 16;
 8018338:	4b9e      	ldr	r3, [pc, #632]	; (80185b4 <input_parameter+0xb70>)
 801833a:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 801833e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		speed1000_shortest_mollifier.turn135out_R.e_ofset = 22;
 8018342:	4b9c      	ldr	r3, [pc, #624]	; (80185b4 <input_parameter+0xb70>)
 8018344:	4a9c      	ldr	r2, [pc, #624]	; (80185b8 <input_parameter+0xb74>)
 8018346:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		speed1000_shortest_mollifier.turn135out_L.g_speed = 1000;
 801834a:	4b9a      	ldr	r3, [pc, #616]	; (80185b4 <input_parameter+0xb70>)
 801834c:	4a9b      	ldr	r2, [pc, #620]	; (80185bc <input_parameter+0xb78>)
 801834e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		speed1000_shortest_mollifier.turn135out_L.t_speed = 1660;
 8018352:	4b98      	ldr	r3, [pc, #608]	; (80185b4 <input_parameter+0xb70>)
 8018354:	4a9a      	ldr	r2, [pc, #616]	; (80185c0 <input_parameter+0xb7c>)
 8018356:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		speed1000_shortest_mollifier.turn135out_L.f_ofset = 10;
 801835a:	4b96      	ldr	r3, [pc, #600]	; (80185b4 <input_parameter+0xb70>)
 801835c:	4a99      	ldr	r2, [pc, #612]	; (80185c4 <input_parameter+0xb80>)
 801835e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		speed1000_shortest_mollifier.turn135out_L.e_ofset = 30;
 8018362:	4b94      	ldr	r3, [pc, #592]	; (80185b4 <input_parameter+0xb70>)
 8018364:	4a98      	ldr	r2, [pc, #608]	; (80185c8 <input_parameter+0xb84>)
 8018366:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

		speed1000_shortest_mollifier.V90_R.g_speed = 1000;
 801836a:	4b92      	ldr	r3, [pc, #584]	; (80185b4 <input_parameter+0xb70>)
 801836c:	4a93      	ldr	r2, [pc, #588]	; (80185bc <input_parameter+0xb78>)
 801836e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		speed1000_shortest_mollifier.V90_R.t_speed = 1750;
 8018372:	4b90      	ldr	r3, [pc, #576]	; (80185b4 <input_parameter+0xb70>)
 8018374:	4a95      	ldr	r2, [pc, #596]	; (80185cc <input_parameter+0xb88>)
 8018376:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		speed1000_shortest_mollifier.V90_R.f_ofset = 16.5;
 801837a:	4b8e      	ldr	r3, [pc, #568]	; (80185b4 <input_parameter+0xb70>)
 801837c:	4a94      	ldr	r2, [pc, #592]	; (80185d0 <input_parameter+0xb8c>)
 801837e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		speed1000_shortest_mollifier.V90_R.e_ofset = 21;
 8018382:	4b8c      	ldr	r3, [pc, #560]	; (80185b4 <input_parameter+0xb70>)
 8018384:	4a93      	ldr	r2, [pc, #588]	; (80185d4 <input_parameter+0xb90>)
 8018386:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

		speed1000_shortest_mollifier.V90_L.g_speed = 1000;
 801838a:	4b8a      	ldr	r3, [pc, #552]	; (80185b4 <input_parameter+0xb70>)
 801838c:	4a8b      	ldr	r2, [pc, #556]	; (80185bc <input_parameter+0xb78>)
 801838e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		speed1000_shortest_mollifier.V90_L.t_speed = 1750;
 8018392:	4b88      	ldr	r3, [pc, #544]	; (80185b4 <input_parameter+0xb70>)
 8018394:	4a8d      	ldr	r2, [pc, #564]	; (80185cc <input_parameter+0xb88>)
 8018396:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		speed1000_shortest_mollifier.V90_L.f_ofset = 14;
 801839a:	4b86      	ldr	r3, [pc, #536]	; (80185b4 <input_parameter+0xb70>)
 801839c:	4a8e      	ldr	r2, [pc, #568]	; (80185d8 <input_parameter+0xb94>)
 801839e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		speed1000_shortest_mollifier.V90_L.e_ofset = 21;
 80183a2:	4b84      	ldr	r3, [pc, #528]	; (80185b4 <input_parameter+0xb70>)
 80183a4:	4a8b      	ldr	r2, [pc, #556]	; (80185d4 <input_parameter+0xb90>)
 80183a6:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


		//********************************1200********************************************
			speed1200_shortest_mollifier.SlalomCentervelocity = 1200;
 80183aa:	4b8c      	ldr	r3, [pc, #560]	; (80185dc <input_parameter+0xb98>)
 80183ac:	4a8c      	ldr	r2, [pc, #560]	; (80185e0 <input_parameter+0xb9c>)
 80183ae:	601a      	str	r2, [r3, #0]
			speed1200_shortest_mollifier.TurnCentervelocity = 1200;
 80183b0:	4b8a      	ldr	r3, [pc, #552]	; (80185dc <input_parameter+0xb98>)
 80183b2:	4a8b      	ldr	r2, [pc, #556]	; (80185e0 <input_parameter+0xb9c>)
 80183b4:	605a      	str	r2, [r3, #4]

			speed1200_shortest_mollifier.slalom_R.g_speed =
					speed1200_shortest_mollifier.SlalomCentervelocity;
 80183b6:	4b89      	ldr	r3, [pc, #548]	; (80185dc <input_parameter+0xb98>)
 80183b8:	681b      	ldr	r3, [r3, #0]
			speed1200_shortest_mollifier.slalom_R.g_speed =
 80183ba:	4a88      	ldr	r2, [pc, #544]	; (80185dc <input_parameter+0xb98>)
 80183bc:	6093      	str	r3, [r2, #8]
			speed1200_shortest_mollifier.slalom_R.t_speed = 1100;
 80183be:	4b87      	ldr	r3, [pc, #540]	; (80185dc <input_parameter+0xb98>)
 80183c0:	4a88      	ldr	r2, [pc, #544]	; (80185e4 <input_parameter+0xba0>)
 80183c2:	615a      	str	r2, [r3, #20]
			speed1200_shortest_mollifier.slalom_R.f_ofset = 5;
 80183c4:	4b85      	ldr	r3, [pc, #532]	; (80185dc <input_parameter+0xb98>)
 80183c6:	4a88      	ldr	r2, [pc, #544]	; (80185e8 <input_parameter+0xba4>)
 80183c8:	60da      	str	r2, [r3, #12]
			speed1200_shortest_mollifier.slalom_R.e_ofset = 28;
 80183ca:	4b84      	ldr	r3, [pc, #528]	; (80185dc <input_parameter+0xb98>)
 80183cc:	4a87      	ldr	r2, [pc, #540]	; (80185ec <input_parameter+0xba8>)
 80183ce:	611a      	str	r2, [r3, #16]

			speed1200_shortest_mollifier.slalom_L.g_speed =
					speed1200_shortest_mollifier.SlalomCentervelocity;
 80183d0:	4b82      	ldr	r3, [pc, #520]	; (80185dc <input_parameter+0xb98>)
 80183d2:	681b      	ldr	r3, [r3, #0]
			speed1200_shortest_mollifier.slalom_L.g_speed =
 80183d4:	4a81      	ldr	r2, [pc, #516]	; (80185dc <input_parameter+0xb98>)
 80183d6:	61d3      	str	r3, [r2, #28]
			speed1200_shortest_mollifier.slalom_L.t_speed = 1100;
 80183d8:	4b80      	ldr	r3, [pc, #512]	; (80185dc <input_parameter+0xb98>)
 80183da:	4a82      	ldr	r2, [pc, #520]	; (80185e4 <input_parameter+0xba0>)
 80183dc:	629a      	str	r2, [r3, #40]	; 0x28
			speed1200_shortest_mollifier.slalom_L.f_ofset = 5;
 80183de:	4b7f      	ldr	r3, [pc, #508]	; (80185dc <input_parameter+0xb98>)
 80183e0:	4a81      	ldr	r2, [pc, #516]	; (80185e8 <input_parameter+0xba4>)
 80183e2:	621a      	str	r2, [r3, #32]
			speed1200_shortest_mollifier.slalom_L.e_ofset = 32;
 80183e4:	4b7d      	ldr	r3, [pc, #500]	; (80185dc <input_parameter+0xb98>)
 80183e6:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80183ea:	625a      	str	r2, [r3, #36]	; 0x24

			speed1200_shortest_mollifier.turn90_R.g_speed = 1200;
 80183ec:	4b7b      	ldr	r3, [pc, #492]	; (80185dc <input_parameter+0xb98>)
 80183ee:	4a7c      	ldr	r2, [pc, #496]	; (80185e0 <input_parameter+0xb9c>)
 80183f0:	631a      	str	r2, [r3, #48]	; 0x30
			speed1200_shortest_mollifier.turn90_R.t_speed = 1510;
 80183f2:	4b7a      	ldr	r3, [pc, #488]	; (80185dc <input_parameter+0xb98>)
 80183f4:	4a7e      	ldr	r2, [pc, #504]	; (80185f0 <input_parameter+0xbac>)
 80183f6:	63da      	str	r2, [r3, #60]	; 0x3c
			speed1200_shortest_mollifier.turn90_R.f_ofset = 21;
 80183f8:	4b78      	ldr	r3, [pc, #480]	; (80185dc <input_parameter+0xb98>)
 80183fa:	4a76      	ldr	r2, [pc, #472]	; (80185d4 <input_parameter+0xb90>)
 80183fc:	635a      	str	r2, [r3, #52]	; 0x34
			speed1200_shortest_mollifier.turn90_R.e_ofset = 20;
 80183fe:	4b77      	ldr	r3, [pc, #476]	; (80185dc <input_parameter+0xb98>)
 8018400:	4a7c      	ldr	r2, [pc, #496]	; (80185f4 <input_parameter+0xbb0>)
 8018402:	639a      	str	r2, [r3, #56]	; 0x38

			speed1200_shortest_mollifier.turn90_L.g_speed = 1200;
 8018404:	4b75      	ldr	r3, [pc, #468]	; (80185dc <input_parameter+0xb98>)
 8018406:	4a76      	ldr	r2, [pc, #472]	; (80185e0 <input_parameter+0xb9c>)
 8018408:	645a      	str	r2, [r3, #68]	; 0x44
			speed1200_shortest_mollifier.turn90_L.t_speed = 1510;
 801840a:	4b74      	ldr	r3, [pc, #464]	; (80185dc <input_parameter+0xb98>)
 801840c:	4a78      	ldr	r2, [pc, #480]	; (80185f0 <input_parameter+0xbac>)
 801840e:	651a      	str	r2, [r3, #80]	; 0x50
			speed1200_shortest_mollifier.turn90_L.f_ofset = 20;
 8018410:	4b72      	ldr	r3, [pc, #456]	; (80185dc <input_parameter+0xb98>)
 8018412:	4a78      	ldr	r2, [pc, #480]	; (80185f4 <input_parameter+0xbb0>)
 8018414:	649a      	str	r2, [r3, #72]	; 0x48
			speed1200_shortest_mollifier.turn90_L.e_ofset = 25;
 8018416:	4b71      	ldr	r3, [pc, #452]	; (80185dc <input_parameter+0xb98>)
 8018418:	4a77      	ldr	r2, [pc, #476]	; (80185f8 <input_parameter+0xbb4>)
 801841a:	64da      	str	r2, [r3, #76]	; 0x4c

			speed1200_shortest_mollifier.turn180_R.g_speed =1200;
 801841c:	4b6f      	ldr	r3, [pc, #444]	; (80185dc <input_parameter+0xb98>)
 801841e:	4a70      	ldr	r2, [pc, #448]	; (80185e0 <input_parameter+0xb9c>)
 8018420:	659a      	str	r2, [r3, #88]	; 0x58
			speed1200_shortest_mollifier.turn180_R.t_speed = 1650;
 8018422:	4b6e      	ldr	r3, [pc, #440]	; (80185dc <input_parameter+0xb98>)
 8018424:	4a75      	ldr	r2, [pc, #468]	; (80185fc <input_parameter+0xbb8>)
 8018426:	665a      	str	r2, [r3, #100]	; 0x64
			speed1200_shortest_mollifier.turn180_R.f_ofset = 17;
 8018428:	4b6c      	ldr	r3, [pc, #432]	; (80185dc <input_parameter+0xb98>)
 801842a:	4a75      	ldr	r2, [pc, #468]	; (8018600 <input_parameter+0xbbc>)
 801842c:	65da      	str	r2, [r3, #92]	; 0x5c
			speed1200_shortest_mollifier.turn180_R.e_ofset = 20;
 801842e:	4b6b      	ldr	r3, [pc, #428]	; (80185dc <input_parameter+0xb98>)
 8018430:	4a70      	ldr	r2, [pc, #448]	; (80185f4 <input_parameter+0xbb0>)
 8018432:	661a      	str	r2, [r3, #96]	; 0x60

			speed1200_shortest_mollifier.turn180_L.g_speed = 1200;
 8018434:	4b69      	ldr	r3, [pc, #420]	; (80185dc <input_parameter+0xb98>)
 8018436:	4a6a      	ldr	r2, [pc, #424]	; (80185e0 <input_parameter+0xb9c>)
 8018438:	66da      	str	r2, [r3, #108]	; 0x6c
			speed1200_shortest_mollifier.turn180_L.t_speed = 1650;
 801843a:	4b68      	ldr	r3, [pc, #416]	; (80185dc <input_parameter+0xb98>)
 801843c:	4a6f      	ldr	r2, [pc, #444]	; (80185fc <input_parameter+0xbb8>)
 801843e:	679a      	str	r2, [r3, #120]	; 0x78
			speed1200_shortest_mollifier.turn180_L.f_ofset = 15;
 8018440:	4b66      	ldr	r3, [pc, #408]	; (80185dc <input_parameter+0xb98>)
 8018442:	4a70      	ldr	r2, [pc, #448]	; (8018604 <input_parameter+0xbc0>)
 8018444:	671a      	str	r2, [r3, #112]	; 0x70
			speed1200_shortest_mollifier.turn180_L.e_ofset = 8;
 8018446:	4b65      	ldr	r3, [pc, #404]	; (80185dc <input_parameter+0xb98>)
 8018448:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 801844c:	675a      	str	r2, [r3, #116]	; 0x74

			speed1200_shortest_mollifier.turn45in_R.g_speed = 1200;
 801844e:	4b63      	ldr	r3, [pc, #396]	; (80185dc <input_parameter+0xb98>)
 8018450:	4a63      	ldr	r2, [pc, #396]	; (80185e0 <input_parameter+0xb9c>)
 8018452:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			speed1200_shortest_mollifier.turn45in_R.t_speed = 1550;
 8018456:	4b61      	ldr	r3, [pc, #388]	; (80185dc <input_parameter+0xb98>)
 8018458:	4a6b      	ldr	r2, [pc, #428]	; (8018608 <input_parameter+0xbc4>)
 801845a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			speed1200_shortest_mollifier.turn45in_R.f_ofset = 8;
 801845e:	4b5f      	ldr	r3, [pc, #380]	; (80185dc <input_parameter+0xb98>)
 8018460:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8018464:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			speed1200_shortest_mollifier.turn45in_R.e_ofset = 39;
 8018468:	4b5c      	ldr	r3, [pc, #368]	; (80185dc <input_parameter+0xb98>)
 801846a:	4a68      	ldr	r2, [pc, #416]	; (801860c <input_parameter+0xbc8>)
 801846c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

			speed1200_shortest_mollifier.turn45in_L.g_speed = 1200;
 8018470:	4b5a      	ldr	r3, [pc, #360]	; (80185dc <input_parameter+0xb98>)
 8018472:	4a5b      	ldr	r2, [pc, #364]	; (80185e0 <input_parameter+0xb9c>)
 8018474:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			speed1200_shortest_mollifier.turn45in_L.t_speed = 1550;
 8018478:	4b58      	ldr	r3, [pc, #352]	; (80185dc <input_parameter+0xb98>)
 801847a:	4a63      	ldr	r2, [pc, #396]	; (8018608 <input_parameter+0xbc4>)
 801847c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			speed1200_shortest_mollifier.turn45in_L.f_ofset = 16;
 8018480:	4b56      	ldr	r3, [pc, #344]	; (80185dc <input_parameter+0xb98>)
 8018482:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8018486:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			speed1200_shortest_mollifier.turn45in_L.e_ofset = 39;
 801848a:	4b54      	ldr	r3, [pc, #336]	; (80185dc <input_parameter+0xb98>)
 801848c:	4a5f      	ldr	r2, [pc, #380]	; (801860c <input_parameter+0xbc8>)
 801848e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

			speed1200_shortest_mollifier.turn135in_R.g_speed = 1200;
 8018492:	4b52      	ldr	r3, [pc, #328]	; (80185dc <input_parameter+0xb98>)
 8018494:	4a52      	ldr	r2, [pc, #328]	; (80185e0 <input_parameter+0xb9c>)
 8018496:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			speed1200_shortest_mollifier.turn135in_R.t_speed = 1850;
 801849a:	4b50      	ldr	r3, [pc, #320]	; (80185dc <input_parameter+0xb98>)
 801849c:	4a5c      	ldr	r2, [pc, #368]	; (8018610 <input_parameter+0xbcc>)
 801849e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			speed1200_shortest_mollifier.turn135in_R.f_ofset = 16;
 80184a2:	4b4e      	ldr	r3, [pc, #312]	; (80185dc <input_parameter+0xb98>)
 80184a4:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80184a8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			speed1200_shortest_mollifier.turn135in_R.e_ofset = 22;
 80184ac:	4b4b      	ldr	r3, [pc, #300]	; (80185dc <input_parameter+0xb98>)
 80184ae:	4a42      	ldr	r2, [pc, #264]	; (80185b8 <input_parameter+0xb74>)
 80184b0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

			speed1200_shortest_mollifier.turn135in_L.g_speed = 1200;
 80184b4:	4b49      	ldr	r3, [pc, #292]	; (80185dc <input_parameter+0xb98>)
 80184b6:	4a4a      	ldr	r2, [pc, #296]	; (80185e0 <input_parameter+0xb9c>)
 80184b8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			speed1200_shortest_mollifier.turn135in_L.t_speed = 1850;
 80184bc:	4b47      	ldr	r3, [pc, #284]	; (80185dc <input_parameter+0xb98>)
 80184be:	4a54      	ldr	r2, [pc, #336]	; (8018610 <input_parameter+0xbcc>)
 80184c0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
			speed1200_shortest_mollifier.turn135in_L.f_ofset = 15;
 80184c4:	4b45      	ldr	r3, [pc, #276]	; (80185dc <input_parameter+0xb98>)
 80184c6:	4a4f      	ldr	r2, [pc, #316]	; (8018604 <input_parameter+0xbc0>)
 80184c8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			speed1200_shortest_mollifier.turn135in_L.e_ofset = 20;
 80184cc:	4b43      	ldr	r3, [pc, #268]	; (80185dc <input_parameter+0xb98>)
 80184ce:	4a49      	ldr	r2, [pc, #292]	; (80185f4 <input_parameter+0xbb0>)
 80184d0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

			speed1200_shortest_mollifier.turn45out_R.g_speed = 1200;
 80184d4:	4b41      	ldr	r3, [pc, #260]	; (80185dc <input_parameter+0xb98>)
 80184d6:	4a42      	ldr	r2, [pc, #264]	; (80185e0 <input_parameter+0xb9c>)
 80184d8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
			speed1200_shortest_mollifier.turn45out_R.t_speed = 1400;
 80184dc:	4b3f      	ldr	r3, [pc, #252]	; (80185dc <input_parameter+0xb98>)
 80184de:	4a4d      	ldr	r2, [pc, #308]	; (8018614 <input_parameter+0xbd0>)
 80184e0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			speed1200_shortest_mollifier.turn45out_R.f_ofset = 33;
 80184e4:	4b3d      	ldr	r3, [pc, #244]	; (80185dc <input_parameter+0xb98>)
 80184e6:	4a4c      	ldr	r2, [pc, #304]	; (8018618 <input_parameter+0xbd4>)
 80184e8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			speed1200_shortest_mollifier.turn45out_R.e_ofset = 16;
 80184ec:	4b3b      	ldr	r3, [pc, #236]	; (80185dc <input_parameter+0xb98>)
 80184ee:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80184f2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

			speed1200_shortest_mollifier.turn45out_L.g_speed = 1200;
 80184f6:	4b39      	ldr	r3, [pc, #228]	; (80185dc <input_parameter+0xb98>)
 80184f8:	4a39      	ldr	r2, [pc, #228]	; (80185e0 <input_parameter+0xb9c>)
 80184fa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			speed1200_shortest_mollifier.turn45out_L.t_speed = 1400;
 80184fe:	4b37      	ldr	r3, [pc, #220]	; (80185dc <input_parameter+0xb98>)
 8018500:	4a44      	ldr	r2, [pc, #272]	; (8018614 <input_parameter+0xbd0>)
 8018502:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
			speed1200_shortest_mollifier.turn45out_L.f_ofset = 24;
 8018506:	4b35      	ldr	r3, [pc, #212]	; (80185dc <input_parameter+0xb98>)
 8018508:	4a44      	ldr	r2, [pc, #272]	; (801861c <input_parameter+0xbd8>)
 801850a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
			speed1200_shortest_mollifier.turn45out_L.e_ofset = 16;
 801850e:	4b33      	ldr	r3, [pc, #204]	; (80185dc <input_parameter+0xb98>)
 8018510:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8018514:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

			speed1200_shortest_mollifier.turn135out_R.g_speed = 1200;
 8018518:	4b30      	ldr	r3, [pc, #192]	; (80185dc <input_parameter+0xb98>)
 801851a:	4a31      	ldr	r2, [pc, #196]	; (80185e0 <input_parameter+0xb9c>)
 801851c:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
			speed1200_shortest_mollifier.turn135out_R.t_speed = 1850;
 8018520:	4b2e      	ldr	r3, [pc, #184]	; (80185dc <input_parameter+0xb98>)
 8018522:	4a3b      	ldr	r2, [pc, #236]	; (8018610 <input_parameter+0xbcc>)
 8018524:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
			speed1200_shortest_mollifier.turn135out_R.f_ofset = 8;
 8018528:	4b2c      	ldr	r3, [pc, #176]	; (80185dc <input_parameter+0xb98>)
 801852a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 801852e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
			speed1200_shortest_mollifier.turn135out_R.e_ofset = 30;
 8018532:	4b2a      	ldr	r3, [pc, #168]	; (80185dc <input_parameter+0xb98>)
 8018534:	4a24      	ldr	r2, [pc, #144]	; (80185c8 <input_parameter+0xb84>)
 8018536:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

			speed1200_shortest_mollifier.turn135out_L.g_speed = 1200;
 801853a:	4b28      	ldr	r3, [pc, #160]	; (80185dc <input_parameter+0xb98>)
 801853c:	4a28      	ldr	r2, [pc, #160]	; (80185e0 <input_parameter+0xb9c>)
 801853e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
			speed1200_shortest_mollifier.turn135out_L.t_speed = 1850;
 8018542:	4b26      	ldr	r3, [pc, #152]	; (80185dc <input_parameter+0xb98>)
 8018544:	4a32      	ldr	r2, [pc, #200]	; (8018610 <input_parameter+0xbcc>)
 8018546:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			speed1200_shortest_mollifier.turn135out_L.f_ofset = 10;
 801854a:	4b24      	ldr	r3, [pc, #144]	; (80185dc <input_parameter+0xb98>)
 801854c:	4a1d      	ldr	r2, [pc, #116]	; (80185c4 <input_parameter+0xb80>)
 801854e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			speed1200_shortest_mollifier.turn135out_L.e_ofset = 30;
 8018552:	4b22      	ldr	r3, [pc, #136]	; (80185dc <input_parameter+0xb98>)
 8018554:	4a1c      	ldr	r2, [pc, #112]	; (80185c8 <input_parameter+0xb84>)
 8018556:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

			speed1200_shortest_mollifier.V90_R.g_speed = 1200;
 801855a:	4b20      	ldr	r3, [pc, #128]	; (80185dc <input_parameter+0xb98>)
 801855c:	4a20      	ldr	r2, [pc, #128]	; (80185e0 <input_parameter+0xb9c>)
 801855e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			speed1200_shortest_mollifier.V90_R.t_speed = 1950;
 8018562:	4b1e      	ldr	r3, [pc, #120]	; (80185dc <input_parameter+0xb98>)
 8018564:	4a2e      	ldr	r2, [pc, #184]	; (8018620 <input_parameter+0xbdc>)
 8018566:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			speed1200_shortest_mollifier.V90_R.f_ofset = 14;
 801856a:	4b1c      	ldr	r3, [pc, #112]	; (80185dc <input_parameter+0xb98>)
 801856c:	4a1a      	ldr	r2, [pc, #104]	; (80185d8 <input_parameter+0xb94>)
 801856e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
			speed1200_shortest_mollifier.V90_R.e_ofset = 25;
 8018572:	4b1a      	ldr	r3, [pc, #104]	; (80185dc <input_parameter+0xb98>)
 8018574:	4a20      	ldr	r2, [pc, #128]	; (80185f8 <input_parameter+0xbb4>)
 8018576:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

			speed1200_shortest_mollifier.V90_L.g_speed = 1200;
 801857a:	4b18      	ldr	r3, [pc, #96]	; (80185dc <input_parameter+0xb98>)
 801857c:	4a18      	ldr	r2, [pc, #96]	; (80185e0 <input_parameter+0xb9c>)
 801857e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
			speed1200_shortest_mollifier.V90_L.t_speed = 1950;
 8018582:	4b16      	ldr	r3, [pc, #88]	; (80185dc <input_parameter+0xb98>)
 8018584:	4a26      	ldr	r2, [pc, #152]	; (8018620 <input_parameter+0xbdc>)
 8018586:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			speed1200_shortest_mollifier.V90_L.f_ofset = 8.5;
 801858a:	4b14      	ldr	r3, [pc, #80]	; (80185dc <input_parameter+0xb98>)
 801858c:	4a25      	ldr	r2, [pc, #148]	; (8018624 <input_parameter+0xbe0>)
 801858e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
			speed1200_shortest_mollifier.V90_L.e_ofset = 25;
 8018592:	4b12      	ldr	r3, [pc, #72]	; (80185dc <input_parameter+0xb98>)
 8018594:	4a18      	ldr	r2, [pc, #96]	; (80185f8 <input_parameter+0xbb4>)
 8018596:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

//********************************1600********************************************
				speed1600_shortest_mollifier.SlalomCentervelocity = 1500;
 801859a:	4b23      	ldr	r3, [pc, #140]	; (8018628 <input_parameter+0xbe4>)
 801859c:	4a23      	ldr	r2, [pc, #140]	; (801862c <input_parameter+0xbe8>)
 801859e:	601a      	str	r2, [r3, #0]
				speed1600_shortest_mollifier.TurnCentervelocity = 1500;
 80185a0:	4b21      	ldr	r3, [pc, #132]	; (8018628 <input_parameter+0xbe4>)
 80185a2:	4a22      	ldr	r2, [pc, #136]	; (801862c <input_parameter+0xbe8>)
 80185a4:	605a      	str	r2, [r3, #4]

				speed1600_shortest_mollifier.turn90_R.g_speed = 1500;
 80185a6:	4b20      	ldr	r3, [pc, #128]	; (8018628 <input_parameter+0xbe4>)
 80185a8:	4a20      	ldr	r2, [pc, #128]	; (801862c <input_parameter+0xbe8>)
 80185aa:	631a      	str	r2, [r3, #48]	; 0x30
				speed1600_shortest_mollifier.turn90_R.t_speed = 1830;
 80185ac:	4b1e      	ldr	r3, [pc, #120]	; (8018628 <input_parameter+0xbe4>)
 80185ae:	4a20      	ldr	r2, [pc, #128]	; (8018630 <input_parameter+0xbec>)
 80185b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80185b2:	e03f      	b.n	8018634 <input_parameter+0xbf0>
 80185b4:	2000f4a4 	.word	0x2000f4a4
 80185b8:	41b00000 	.word	0x41b00000
 80185bc:	447a0000 	.word	0x447a0000
 80185c0:	44cf8000 	.word	0x44cf8000
 80185c4:	41200000 	.word	0x41200000
 80185c8:	41f00000 	.word	0x41f00000
 80185cc:	44dac000 	.word	0x44dac000
 80185d0:	41840000 	.word	0x41840000
 80185d4:	41a80000 	.word	0x41a80000
 80185d8:	41600000 	.word	0x41600000
 80185dc:	2000f5ec 	.word	0x2000f5ec
 80185e0:	44960000 	.word	0x44960000
 80185e4:	44898000 	.word	0x44898000
 80185e8:	40a00000 	.word	0x40a00000
 80185ec:	41e00000 	.word	0x41e00000
 80185f0:	44bcc000 	.word	0x44bcc000
 80185f4:	41a00000 	.word	0x41a00000
 80185f8:	41c80000 	.word	0x41c80000
 80185fc:	44ce4000 	.word	0x44ce4000
 8018600:	41880000 	.word	0x41880000
 8018604:	41700000 	.word	0x41700000
 8018608:	44c1c000 	.word	0x44c1c000
 801860c:	421c0000 	.word	0x421c0000
 8018610:	44e74000 	.word	0x44e74000
 8018614:	44af0000 	.word	0x44af0000
 8018618:	42040000 	.word	0x42040000
 801861c:	41c00000 	.word	0x41c00000
 8018620:	44f3c000 	.word	0x44f3c000
 8018624:	41080000 	.word	0x41080000
 8018628:	2000f734 	.word	0x2000f734
 801862c:	44bb8000 	.word	0x44bb8000
 8018630:	44e4c000 	.word	0x44e4c000
				speed1600_shortest_mollifier.turn90_R.f_ofset = 17;
 8018634:	4b67      	ldr	r3, [pc, #412]	; (80187d4 <input_parameter+0xd90>)
 8018636:	4a68      	ldr	r2, [pc, #416]	; (80187d8 <input_parameter+0xd94>)
 8018638:	635a      	str	r2, [r3, #52]	; 0x34
				speed1600_shortest_mollifier.turn90_R.e_ofset = 31;
 801863a:	4b66      	ldr	r3, [pc, #408]	; (80187d4 <input_parameter+0xd90>)
 801863c:	4a67      	ldr	r2, [pc, #412]	; (80187dc <input_parameter+0xd98>)
 801863e:	639a      	str	r2, [r3, #56]	; 0x38

				speed1600_shortest_mollifier.turn90_L.g_speed = 1500;
 8018640:	4b64      	ldr	r3, [pc, #400]	; (80187d4 <input_parameter+0xd90>)
 8018642:	4a67      	ldr	r2, [pc, #412]	; (80187e0 <input_parameter+0xd9c>)
 8018644:	645a      	str	r2, [r3, #68]	; 0x44
				speed1600_shortest_mollifier.turn90_L.t_speed = 1830;
 8018646:	4b63      	ldr	r3, [pc, #396]	; (80187d4 <input_parameter+0xd90>)
 8018648:	4a66      	ldr	r2, [pc, #408]	; (80187e4 <input_parameter+0xda0>)
 801864a:	651a      	str	r2, [r3, #80]	; 0x50
				speed1600_shortest_mollifier.turn90_L.f_ofset = 15;
 801864c:	4b61      	ldr	r3, [pc, #388]	; (80187d4 <input_parameter+0xd90>)
 801864e:	4a66      	ldr	r2, [pc, #408]	; (80187e8 <input_parameter+0xda4>)
 8018650:	649a      	str	r2, [r3, #72]	; 0x48
				speed1600_shortest_mollifier.turn90_L.e_ofset = 35;
 8018652:	4b60      	ldr	r3, [pc, #384]	; (80187d4 <input_parameter+0xd90>)
 8018654:	4a65      	ldr	r2, [pc, #404]	; (80187ec <input_parameter+0xda8>)
 8018656:	64da      	str	r2, [r3, #76]	; 0x4c

				speed1600_shortest_mollifier.turn180_R.g_speed =1500;
 8018658:	4b5e      	ldr	r3, [pc, #376]	; (80187d4 <input_parameter+0xd90>)
 801865a:	4a61      	ldr	r2, [pc, #388]	; (80187e0 <input_parameter+0xd9c>)
 801865c:	659a      	str	r2, [r3, #88]	; 0x58
				speed1600_shortest_mollifier.turn180_R.t_speed = 2000;
 801865e:	4b5d      	ldr	r3, [pc, #372]	; (80187d4 <input_parameter+0xd90>)
 8018660:	4a63      	ldr	r2, [pc, #396]	; (80187f0 <input_parameter+0xdac>)
 8018662:	665a      	str	r2, [r3, #100]	; 0x64
				speed1600_shortest_mollifier.turn180_R.f_ofset = 10;
 8018664:	4b5b      	ldr	r3, [pc, #364]	; (80187d4 <input_parameter+0xd90>)
 8018666:	4a63      	ldr	r2, [pc, #396]	; (80187f4 <input_parameter+0xdb0>)
 8018668:	65da      	str	r2, [r3, #92]	; 0x5c
				speed1600_shortest_mollifier.turn180_R.e_ofset = 20;
 801866a:	4b5a      	ldr	r3, [pc, #360]	; (80187d4 <input_parameter+0xd90>)
 801866c:	4a62      	ldr	r2, [pc, #392]	; (80187f8 <input_parameter+0xdb4>)
 801866e:	661a      	str	r2, [r3, #96]	; 0x60

				speed1600_shortest_mollifier.turn180_L.g_speed = 1500;
 8018670:	4b58      	ldr	r3, [pc, #352]	; (80187d4 <input_parameter+0xd90>)
 8018672:	4a5b      	ldr	r2, [pc, #364]	; (80187e0 <input_parameter+0xd9c>)
 8018674:	66da      	str	r2, [r3, #108]	; 0x6c
				speed1600_shortest_mollifier.turn180_L.t_speed = 2000;
 8018676:	4b57      	ldr	r3, [pc, #348]	; (80187d4 <input_parameter+0xd90>)
 8018678:	4a5d      	ldr	r2, [pc, #372]	; (80187f0 <input_parameter+0xdac>)
 801867a:	679a      	str	r2, [r3, #120]	; 0x78
				speed1600_shortest_mollifier.turn180_L.f_ofset = 10;
 801867c:	4b55      	ldr	r3, [pc, #340]	; (80187d4 <input_parameter+0xd90>)
 801867e:	4a5d      	ldr	r2, [pc, #372]	; (80187f4 <input_parameter+0xdb0>)
 8018680:	671a      	str	r2, [r3, #112]	; 0x70
				speed1600_shortest_mollifier.turn180_L.e_ofset = 18;
 8018682:	4b54      	ldr	r3, [pc, #336]	; (80187d4 <input_parameter+0xd90>)
 8018684:	4a5d      	ldr	r2, [pc, #372]	; (80187fc <input_parameter+0xdb8>)
 8018686:	675a      	str	r2, [r3, #116]	; 0x74

				speed1600_shortest_mollifier.turn45in_R.g_speed = 1500;
 8018688:	4b52      	ldr	r3, [pc, #328]	; (80187d4 <input_parameter+0xd90>)
 801868a:	4a55      	ldr	r2, [pc, #340]	; (80187e0 <input_parameter+0xd9c>)
 801868c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				speed1600_shortest_mollifier.turn45in_R.t_speed = 1850;
 8018690:	4b50      	ldr	r3, [pc, #320]	; (80187d4 <input_parameter+0xd90>)
 8018692:	4a5b      	ldr	r2, [pc, #364]	; (8018800 <input_parameter+0xdbc>)
 8018694:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				speed1600_shortest_mollifier.turn45in_R.f_ofset = 12;
 8018698:	4b4e      	ldr	r3, [pc, #312]	; (80187d4 <input_parameter+0xd90>)
 801869a:	4a5a      	ldr	r2, [pc, #360]	; (8018804 <input_parameter+0xdc0>)
 801869c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				speed1600_shortest_mollifier.turn45in_R.e_ofset = 38;
 80186a0:	4b4c      	ldr	r3, [pc, #304]	; (80187d4 <input_parameter+0xd90>)
 80186a2:	4a59      	ldr	r2, [pc, #356]	; (8018808 <input_parameter+0xdc4>)
 80186a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

				speed1600_shortest_mollifier.turn45in_L.g_speed = 1500;
 80186a8:	4b4a      	ldr	r3, [pc, #296]	; (80187d4 <input_parameter+0xd90>)
 80186aa:	4a4d      	ldr	r2, [pc, #308]	; (80187e0 <input_parameter+0xd9c>)
 80186ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
				speed1600_shortest_mollifier.turn45in_L.t_speed = 1850;
 80186b0:	4b48      	ldr	r3, [pc, #288]	; (80187d4 <input_parameter+0xd90>)
 80186b2:	4a53      	ldr	r2, [pc, #332]	; (8018800 <input_parameter+0xdbc>)
 80186b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				speed1600_shortest_mollifier.turn45in_L.f_ofset = 12;
 80186b8:	4b46      	ldr	r3, [pc, #280]	; (80187d4 <input_parameter+0xd90>)
 80186ba:	4a52      	ldr	r2, [pc, #328]	; (8018804 <input_parameter+0xdc0>)
 80186bc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				speed1600_shortest_mollifier.turn45in_L.e_ofset = 36;
 80186c0:	4b44      	ldr	r3, [pc, #272]	; (80187d4 <input_parameter+0xd90>)
 80186c2:	4a52      	ldr	r2, [pc, #328]	; (801880c <input_parameter+0xdc8>)
 80186c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

				speed1600_shortest_mollifier.turn135in_R.g_speed = 1500;
 80186c8:	4b42      	ldr	r3, [pc, #264]	; (80187d4 <input_parameter+0xd90>)
 80186ca:	4a45      	ldr	r2, [pc, #276]	; (80187e0 <input_parameter+0xd9c>)
 80186cc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
				speed1600_shortest_mollifier.turn135in_R.t_speed = 2100;
 80186d0:	4b40      	ldr	r3, [pc, #256]	; (80187d4 <input_parameter+0xd90>)
 80186d2:	4a4f      	ldr	r2, [pc, #316]	; (8018810 <input_parameter+0xdcc>)
 80186d4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				speed1600_shortest_mollifier.turn135in_R.f_ofset = 13;
 80186d8:	4b3e      	ldr	r3, [pc, #248]	; (80187d4 <input_parameter+0xd90>)
 80186da:	4a4e      	ldr	r2, [pc, #312]	; (8018814 <input_parameter+0xdd0>)
 80186dc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				speed1600_shortest_mollifier.turn135in_R.e_ofset = 36;
 80186e0:	4b3c      	ldr	r3, [pc, #240]	; (80187d4 <input_parameter+0xd90>)
 80186e2:	4a4a      	ldr	r2, [pc, #296]	; (801880c <input_parameter+0xdc8>)
 80186e4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

				speed1600_shortest_mollifier.turn135in_L.g_speed = 1500;
 80186e8:	4b3a      	ldr	r3, [pc, #232]	; (80187d4 <input_parameter+0xd90>)
 80186ea:	4a3d      	ldr	r2, [pc, #244]	; (80187e0 <input_parameter+0xd9c>)
 80186ec:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
				speed1600_shortest_mollifier.turn135in_L.t_speed = 2100;
 80186f0:	4b38      	ldr	r3, [pc, #224]	; (80187d4 <input_parameter+0xd90>)
 80186f2:	4a47      	ldr	r2, [pc, #284]	; (8018810 <input_parameter+0xdcc>)
 80186f4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
				speed1600_shortest_mollifier.turn135in_L.f_ofset = 13;
 80186f8:	4b36      	ldr	r3, [pc, #216]	; (80187d4 <input_parameter+0xd90>)
 80186fa:	4a46      	ldr	r2, [pc, #280]	; (8018814 <input_parameter+0xdd0>)
 80186fc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
				speed1600_shortest_mollifier.turn135in_L.e_ofset = 34;
 8018700:	4b34      	ldr	r3, [pc, #208]	; (80187d4 <input_parameter+0xd90>)
 8018702:	4a45      	ldr	r2, [pc, #276]	; (8018818 <input_parameter+0xdd4>)
 8018704:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

				speed1600_shortest_mollifier.turn45out_R.g_speed = 1500;
 8018708:	4b32      	ldr	r3, [pc, #200]	; (80187d4 <input_parameter+0xd90>)
 801870a:	4a35      	ldr	r2, [pc, #212]	; (80187e0 <input_parameter+0xd9c>)
 801870c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
				speed1600_shortest_mollifier.turn45out_R.t_speed = 1800;
 8018710:	4b30      	ldr	r3, [pc, #192]	; (80187d4 <input_parameter+0xd90>)
 8018712:	4a42      	ldr	r2, [pc, #264]	; (801881c <input_parameter+0xdd8>)
 8018714:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
				speed1600_shortest_mollifier.turn45out_R.f_ofset = 21;
 8018718:	4b2e      	ldr	r3, [pc, #184]	; (80187d4 <input_parameter+0xd90>)
 801871a:	4a41      	ldr	r2, [pc, #260]	; (8018820 <input_parameter+0xddc>)
 801871c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
				speed1600_shortest_mollifier.turn45out_R.e_ofset = 22;
 8018720:	4b2c      	ldr	r3, [pc, #176]	; (80187d4 <input_parameter+0xd90>)
 8018722:	4a40      	ldr	r2, [pc, #256]	; (8018824 <input_parameter+0xde0>)
 8018724:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

				speed1600_shortest_mollifier.turn45out_L.g_speed = 1500;
 8018728:	4b2a      	ldr	r3, [pc, #168]	; (80187d4 <input_parameter+0xd90>)
 801872a:	4a2d      	ldr	r2, [pc, #180]	; (80187e0 <input_parameter+0xd9c>)
 801872c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				speed1600_shortest_mollifier.turn45out_L.t_speed = 1800;
 8018730:	4b28      	ldr	r3, [pc, #160]	; (80187d4 <input_parameter+0xd90>)
 8018732:	4a3a      	ldr	r2, [pc, #232]	; (801881c <input_parameter+0xdd8>)
 8018734:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
				speed1600_shortest_mollifier.turn45out_L.f_ofset = 18;
 8018738:	4b26      	ldr	r3, [pc, #152]	; (80187d4 <input_parameter+0xd90>)
 801873a:	4a30      	ldr	r2, [pc, #192]	; (80187fc <input_parameter+0xdb8>)
 801873c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
				speed1600_shortest_mollifier.turn45out_L.e_ofset = 24;
 8018740:	4b24      	ldr	r3, [pc, #144]	; (80187d4 <input_parameter+0xd90>)
 8018742:	4a39      	ldr	r2, [pc, #228]	; (8018828 <input_parameter+0xde4>)
 8018744:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

				speed1600_shortest_mollifier.turn135out_R.g_speed = 1500;
 8018748:	4b22      	ldr	r3, [pc, #136]	; (80187d4 <input_parameter+0xd90>)
 801874a:	4a25      	ldr	r2, [pc, #148]	; (80187e0 <input_parameter+0xd9c>)
 801874c:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
				speed1600_shortest_mollifier.turn135out_R.t_speed = 2200;
 8018750:	4b20      	ldr	r3, [pc, #128]	; (80187d4 <input_parameter+0xd90>)
 8018752:	4a36      	ldr	r2, [pc, #216]	; (801882c <input_parameter+0xde8>)
 8018754:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
				speed1600_shortest_mollifier.turn135out_R.f_ofset = 7;
 8018758:	4b1e      	ldr	r3, [pc, #120]	; (80187d4 <input_parameter+0xd90>)
 801875a:	4a35      	ldr	r2, [pc, #212]	; (8018830 <input_parameter+0xdec>)
 801875c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
				speed1600_shortest_mollifier.turn135out_R.e_ofset = 22;
 8018760:	4b1c      	ldr	r3, [pc, #112]	; (80187d4 <input_parameter+0xd90>)
 8018762:	4a30      	ldr	r2, [pc, #192]	; (8018824 <input_parameter+0xde0>)
 8018764:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

				speed1600_shortest_mollifier.turn135out_L.g_speed = 1500;
 8018768:	4b1a      	ldr	r3, [pc, #104]	; (80187d4 <input_parameter+0xd90>)
 801876a:	4a1d      	ldr	r2, [pc, #116]	; (80187e0 <input_parameter+0xd9c>)
 801876c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
				speed1600_shortest_mollifier.turn135out_L.t_speed = 2200;
 8018770:	4b18      	ldr	r3, [pc, #96]	; (80187d4 <input_parameter+0xd90>)
 8018772:	4a2e      	ldr	r2, [pc, #184]	; (801882c <input_parameter+0xde8>)
 8018774:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				speed1600_shortest_mollifier.turn135out_L.f_ofset = 7;
 8018778:	4b16      	ldr	r3, [pc, #88]	; (80187d4 <input_parameter+0xd90>)
 801877a:	4a2d      	ldr	r2, [pc, #180]	; (8018830 <input_parameter+0xdec>)
 801877c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
				speed1600_shortest_mollifier.turn135out_L.e_ofset = 30;
 8018780:	4b14      	ldr	r3, [pc, #80]	; (80187d4 <input_parameter+0xd90>)
 8018782:	4a2c      	ldr	r2, [pc, #176]	; (8018834 <input_parameter+0xdf0>)
 8018784:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

				speed1600_shortest_mollifier.V90_R.g_speed = 1500;
 8018788:	4b12      	ldr	r3, [pc, #72]	; (80187d4 <input_parameter+0xd90>)
 801878a:	4a15      	ldr	r2, [pc, #84]	; (80187e0 <input_parameter+0xd9c>)
 801878c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				speed1600_shortest_mollifier.V90_R.t_speed = 2150;
 8018790:	4b10      	ldr	r3, [pc, #64]	; (80187d4 <input_parameter+0xd90>)
 8018792:	4a29      	ldr	r2, [pc, #164]	; (8018838 <input_parameter+0xdf4>)
 8018794:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
				speed1600_shortest_mollifier.V90_R.f_ofset = 3;
 8018798:	4b0e      	ldr	r3, [pc, #56]	; (80187d4 <input_parameter+0xd90>)
 801879a:	4a28      	ldr	r2, [pc, #160]	; (801883c <input_parameter+0xdf8>)
 801879c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
				speed1600_shortest_mollifier.V90_R.e_ofset = 20;
 80187a0:	4b0c      	ldr	r3, [pc, #48]	; (80187d4 <input_parameter+0xd90>)
 80187a2:	4a15      	ldr	r2, [pc, #84]	; (80187f8 <input_parameter+0xdb4>)
 80187a4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

				speed1600_shortest_mollifier.V90_L.g_speed = 1500;
 80187a8:	4b0a      	ldr	r3, [pc, #40]	; (80187d4 <input_parameter+0xd90>)
 80187aa:	4a0d      	ldr	r2, [pc, #52]	; (80187e0 <input_parameter+0xd9c>)
 80187ac:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
				speed1600_shortest_mollifier.V90_L.t_speed = 2150;
 80187b0:	4b08      	ldr	r3, [pc, #32]	; (80187d4 <input_parameter+0xd90>)
 80187b2:	4a21      	ldr	r2, [pc, #132]	; (8018838 <input_parameter+0xdf4>)
 80187b4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
				speed1600_shortest_mollifier.V90_L.f_ofset = 3;
 80187b8:	4b06      	ldr	r3, [pc, #24]	; (80187d4 <input_parameter+0xd90>)
 80187ba:	4a20      	ldr	r2, [pc, #128]	; (801883c <input_parameter+0xdf8>)
 80187bc:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
				speed1600_shortest_mollifier.V90_L.e_ofset = 20;
 80187c0:	4b04      	ldr	r3, [pc, #16]	; (80187d4 <input_parameter+0xd90>)
 80187c2:	4a0d      	ldr	r2, [pc, #52]	; (80187f8 <input_parameter+0xdb4>)
 80187c4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


}
 80187c8:	bf00      	nop
 80187ca:	46bd      	mov	sp, r7
 80187cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187d0:	4770      	bx	lr
 80187d2:	bf00      	nop
 80187d4:	2000f734 	.word	0x2000f734
 80187d8:	41880000 	.word	0x41880000
 80187dc:	41f80000 	.word	0x41f80000
 80187e0:	44bb8000 	.word	0x44bb8000
 80187e4:	44e4c000 	.word	0x44e4c000
 80187e8:	41700000 	.word	0x41700000
 80187ec:	420c0000 	.word	0x420c0000
 80187f0:	44fa0000 	.word	0x44fa0000
 80187f4:	41200000 	.word	0x41200000
 80187f8:	41a00000 	.word	0x41a00000
 80187fc:	41900000 	.word	0x41900000
 8018800:	44e74000 	.word	0x44e74000
 8018804:	41400000 	.word	0x41400000
 8018808:	42180000 	.word	0x42180000
 801880c:	42100000 	.word	0x42100000
 8018810:	45034000 	.word	0x45034000
 8018814:	41500000 	.word	0x41500000
 8018818:	42080000 	.word	0x42080000
 801881c:	44e10000 	.word	0x44e10000
 8018820:	41a80000 	.word	0x41a80000
 8018824:	41b00000 	.word	0x41b00000
 8018828:	41c00000 	.word	0x41c00000
 801882c:	45098000 	.word	0x45098000
 8018830:	40e00000 	.word	0x40e00000
 8018834:	41f00000 	.word	0x41f00000
 8018838:	45066000 	.word	0x45066000
 801883c:	40400000 	.word	0x40400000

08018840 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8018840:	b580      	push	{r7, lr}
 8018842:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8018844:	4b22      	ldr	r3, [pc, #136]	; (80188d0 <MX_USART1_UART_Init+0x90>)
 8018846:	4a23      	ldr	r2, [pc, #140]	; (80188d4 <MX_USART1_UART_Init+0x94>)
 8018848:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 801884a:	4b21      	ldr	r3, [pc, #132]	; (80188d0 <MX_USART1_UART_Init+0x90>)
 801884c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8018850:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8018852:	4b1f      	ldr	r3, [pc, #124]	; (80188d0 <MX_USART1_UART_Init+0x90>)
 8018854:	2200      	movs	r2, #0
 8018856:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8018858:	4b1d      	ldr	r3, [pc, #116]	; (80188d0 <MX_USART1_UART_Init+0x90>)
 801885a:	2200      	movs	r2, #0
 801885c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801885e:	4b1c      	ldr	r3, [pc, #112]	; (80188d0 <MX_USART1_UART_Init+0x90>)
 8018860:	2200      	movs	r2, #0
 8018862:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8018864:	4b1a      	ldr	r3, [pc, #104]	; (80188d0 <MX_USART1_UART_Init+0x90>)
 8018866:	220c      	movs	r2, #12
 8018868:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801886a:	4b19      	ldr	r3, [pc, #100]	; (80188d0 <MX_USART1_UART_Init+0x90>)
 801886c:	2200      	movs	r2, #0
 801886e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8018870:	4b17      	ldr	r3, [pc, #92]	; (80188d0 <MX_USART1_UART_Init+0x90>)
 8018872:	2200      	movs	r2, #0
 8018874:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8018876:	4b16      	ldr	r3, [pc, #88]	; (80188d0 <MX_USART1_UART_Init+0x90>)
 8018878:	2200      	movs	r2, #0
 801887a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 801887c:	4b14      	ldr	r3, [pc, #80]	; (80188d0 <MX_USART1_UART_Init+0x90>)
 801887e:	2200      	movs	r2, #0
 8018880:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8018882:	4b13      	ldr	r3, [pc, #76]	; (80188d0 <MX_USART1_UART_Init+0x90>)
 8018884:	2200      	movs	r2, #0
 8018886:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8018888:	4811      	ldr	r0, [pc, #68]	; (80188d0 <MX_USART1_UART_Init+0x90>)
 801888a:	f006 fd2d 	bl	801f2e8 <HAL_UART_Init>
 801888e:	4603      	mov	r3, r0
 8018890:	2b00      	cmp	r3, #0
 8018892:	d001      	beq.n	8018898 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8018894:	f7f1 f8d1 	bl	8009a3a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8018898:	2100      	movs	r1, #0
 801889a:	480d      	ldr	r0, [pc, #52]	; (80188d0 <MX_USART1_UART_Init+0x90>)
 801889c:	f007 faf4 	bl	801fe88 <HAL_UARTEx_SetTxFifoThreshold>
 80188a0:	4603      	mov	r3, r0
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d001      	beq.n	80188aa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80188a6:	f7f1 f8c8 	bl	8009a3a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80188aa:	2100      	movs	r1, #0
 80188ac:	4808      	ldr	r0, [pc, #32]	; (80188d0 <MX_USART1_UART_Init+0x90>)
 80188ae:	f007 fb29 	bl	801ff04 <HAL_UARTEx_SetRxFifoThreshold>
 80188b2:	4603      	mov	r3, r0
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	d001      	beq.n	80188bc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80188b8:	f7f1 f8bf 	bl	8009a3a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80188bc:	4804      	ldr	r0, [pc, #16]	; (80188d0 <MX_USART1_UART_Init+0x90>)
 80188be:	f007 faaa 	bl	801fe16 <HAL_UARTEx_DisableFifoMode>
 80188c2:	4603      	mov	r3, r0
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d001      	beq.n	80188cc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80188c8:	f7f1 f8b7 	bl	8009a3a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80188cc:	bf00      	nop
 80188ce:	bd80      	pop	{r7, pc}
 80188d0:	2000f87c 	.word	0x2000f87c
 80188d4:	40013800 	.word	0x40013800

080188d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80188d8:	b580      	push	{r7, lr}
 80188da:	b09e      	sub	sp, #120	; 0x78
 80188dc:	af00      	add	r7, sp, #0
 80188de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80188e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80188e4:	2200      	movs	r2, #0
 80188e6:	601a      	str	r2, [r3, #0]
 80188e8:	605a      	str	r2, [r3, #4]
 80188ea:	609a      	str	r2, [r3, #8]
 80188ec:	60da      	str	r2, [r3, #12]
 80188ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80188f0:	f107 0314 	add.w	r3, r7, #20
 80188f4:	2250      	movs	r2, #80	; 0x50
 80188f6:	2100      	movs	r1, #0
 80188f8:	4618      	mov	r0, r3
 80188fa:	f007 fbc7 	bl	802008c <memset>
  if(uartHandle->Instance==USART1)
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	681b      	ldr	r3, [r3, #0]
 8018902:	4a1f      	ldr	r2, [pc, #124]	; (8018980 <HAL_UART_MspInit+0xa8>)
 8018904:	4293      	cmp	r3, r2
 8018906:	d137      	bne.n	8018978 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8018908:	2301      	movs	r3, #1
 801890a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 801890c:	2300      	movs	r3, #0
 801890e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8018910:	f107 0314 	add.w	r3, r7, #20
 8018914:	4618      	mov	r0, r3
 8018916:	f004 f891 	bl	801ca3c <HAL_RCCEx_PeriphCLKConfig>
 801891a:	4603      	mov	r3, r0
 801891c:	2b00      	cmp	r3, #0
 801891e:	d001      	beq.n	8018924 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8018920:	f7f1 f88b 	bl	8009a3a <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8018924:	4b17      	ldr	r3, [pc, #92]	; (8018984 <HAL_UART_MspInit+0xac>)
 8018926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018928:	4a16      	ldr	r2, [pc, #88]	; (8018984 <HAL_UART_MspInit+0xac>)
 801892a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801892e:	6613      	str	r3, [r2, #96]	; 0x60
 8018930:	4b14      	ldr	r3, [pc, #80]	; (8018984 <HAL_UART_MspInit+0xac>)
 8018932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018938:	613b      	str	r3, [r7, #16]
 801893a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801893c:	4b11      	ldr	r3, [pc, #68]	; (8018984 <HAL_UART_MspInit+0xac>)
 801893e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018940:	4a10      	ldr	r2, [pc, #64]	; (8018984 <HAL_UART_MspInit+0xac>)
 8018942:	f043 0301 	orr.w	r3, r3, #1
 8018946:	64d3      	str	r3, [r2, #76]	; 0x4c
 8018948:	4b0e      	ldr	r3, [pc, #56]	; (8018984 <HAL_UART_MspInit+0xac>)
 801894a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801894c:	f003 0301 	and.w	r3, r3, #1
 8018950:	60fb      	str	r3, [r7, #12]
 8018952:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8018954:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8018958:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801895a:	2302      	movs	r3, #2
 801895c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801895e:	2300      	movs	r3, #0
 8018960:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018962:	2300      	movs	r3, #0
 8018964:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8018966:	2307      	movs	r3, #7
 8018968:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801896a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801896e:	4619      	mov	r1, r3
 8018970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8018974:	f003 f8e4 	bl	801bb40 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8018978:	bf00      	nop
 801897a:	3778      	adds	r7, #120	; 0x78
 801897c:	46bd      	mov	sp, r7
 801897e:	bd80      	pop	{r7, pc}
 8018980:	40013800 	.word	0x40013800
 8018984:	40021000 	.word	0x40021000

08018988 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8018988:	480d      	ldr	r0, [pc, #52]	; (80189c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 801898a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 801898c:	480d      	ldr	r0, [pc, #52]	; (80189c4 <LoopForever+0x6>)
  ldr r1, =_edata
 801898e:	490e      	ldr	r1, [pc, #56]	; (80189c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8018990:	4a0e      	ldr	r2, [pc, #56]	; (80189cc <LoopForever+0xe>)
  movs r3, #0
 8018992:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8018994:	e002      	b.n	801899c <LoopCopyDataInit>

08018996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8018996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8018998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801899a:	3304      	adds	r3, #4

0801899c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801899c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801899e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80189a0:	d3f9      	bcc.n	8018996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80189a2:	4a0b      	ldr	r2, [pc, #44]	; (80189d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80189a4:	4c0b      	ldr	r4, [pc, #44]	; (80189d4 <LoopForever+0x16>)
  movs r3, #0
 80189a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80189a8:	e001      	b.n	80189ae <LoopFillZerobss>

080189aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80189aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80189ac:	3204      	adds	r2, #4

080189ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80189ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80189b0:	d3fb      	bcc.n	80189aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80189b2:	f7fe fd7f 	bl	80174b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80189b6:	f007 fb37 	bl	8020028 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80189ba:	f7f0 ff45 	bl	8009848 <main>

080189be <LoopForever>:

LoopForever:
    b LoopForever
 80189be:	e7fe      	b.n	80189be <LoopForever>
  ldr   r0, =_estack
 80189c0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80189c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80189c8:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80189cc:	08024c00 	.word	0x08024c00
  ldr r2, =_sbss
 80189d0:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80189d4:	2000f920 	.word	0x2000f920

080189d8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80189d8:	e7fe      	b.n	80189d8 <ADC3_IRQHandler>
	...

080189dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80189dc:	b580      	push	{r7, lr}
 80189de:	b082      	sub	sp, #8
 80189e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80189e2:	2300      	movs	r3, #0
 80189e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80189e6:	4b0c      	ldr	r3, [pc, #48]	; (8018a18 <HAL_Init+0x3c>)
 80189e8:	681b      	ldr	r3, [r3, #0]
 80189ea:	4a0b      	ldr	r2, [pc, #44]	; (8018a18 <HAL_Init+0x3c>)
 80189ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80189f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80189f2:	2003      	movs	r0, #3
 80189f4:	f002 fb30 	bl	801b058 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80189f8:	2000      	movs	r0, #0
 80189fa:	f000 f80f 	bl	8018a1c <HAL_InitTick>
 80189fe:	4603      	mov	r3, r0
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d002      	beq.n	8018a0a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8018a04:	2301      	movs	r3, #1
 8018a06:	71fb      	strb	r3, [r7, #7]
 8018a08:	e001      	b.n	8018a0e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8018a0a:	f7fe fc07 	bl	801721c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8018a0e:	79fb      	ldrb	r3, [r7, #7]

}
 8018a10:	4618      	mov	r0, r3
 8018a12:	3708      	adds	r7, #8
 8018a14:	46bd      	mov	sp, r7
 8018a16:	bd80      	pop	{r7, pc}
 8018a18:	40022000 	.word	0x40022000

08018a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8018a1c:	b580      	push	{r7, lr}
 8018a1e:	b084      	sub	sp, #16
 8018a20:	af00      	add	r7, sp, #0
 8018a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8018a24:	2300      	movs	r3, #0
 8018a26:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8018a28:	4b16      	ldr	r3, [pc, #88]	; (8018a84 <HAL_InitTick+0x68>)
 8018a2a:	681b      	ldr	r3, [r3, #0]
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d022      	beq.n	8018a76 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8018a30:	4b15      	ldr	r3, [pc, #84]	; (8018a88 <HAL_InitTick+0x6c>)
 8018a32:	681a      	ldr	r2, [r3, #0]
 8018a34:	4b13      	ldr	r3, [pc, #76]	; (8018a84 <HAL_InitTick+0x68>)
 8018a36:	681b      	ldr	r3, [r3, #0]
 8018a38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018a3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8018a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8018a44:	4618      	mov	r0, r3
 8018a46:	f002 fb3a 	bl	801b0be <HAL_SYSTICK_Config>
 8018a4a:	4603      	mov	r3, r0
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d10f      	bne.n	8018a70 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	2b0f      	cmp	r3, #15
 8018a54:	d809      	bhi.n	8018a6a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8018a56:	2200      	movs	r2, #0
 8018a58:	6879      	ldr	r1, [r7, #4]
 8018a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8018a5e:	f002 fb06 	bl	801b06e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8018a62:	4a0a      	ldr	r2, [pc, #40]	; (8018a8c <HAL_InitTick+0x70>)
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	6013      	str	r3, [r2, #0]
 8018a68:	e007      	b.n	8018a7a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8018a6a:	2301      	movs	r3, #1
 8018a6c:	73fb      	strb	r3, [r7, #15]
 8018a6e:	e004      	b.n	8018a7a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8018a70:	2301      	movs	r3, #1
 8018a72:	73fb      	strb	r3, [r7, #15]
 8018a74:	e001      	b.n	8018a7a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8018a76:	2301      	movs	r3, #1
 8018a78:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8018a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8018a7c:	4618      	mov	r0, r3
 8018a7e:	3710      	adds	r7, #16
 8018a80:	46bd      	mov	sp, r7
 8018a82:	bd80      	pop	{r7, pc}
 8018a84:	20000008 	.word	0x20000008
 8018a88:	20000000 	.word	0x20000000
 8018a8c:	20000004 	.word	0x20000004

08018a90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8018a90:	b480      	push	{r7}
 8018a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8018a94:	4b05      	ldr	r3, [pc, #20]	; (8018aac <HAL_IncTick+0x1c>)
 8018a96:	681a      	ldr	r2, [r3, #0]
 8018a98:	4b05      	ldr	r3, [pc, #20]	; (8018ab0 <HAL_IncTick+0x20>)
 8018a9a:	681b      	ldr	r3, [r3, #0]
 8018a9c:	4413      	add	r3, r2
 8018a9e:	4a03      	ldr	r2, [pc, #12]	; (8018aac <HAL_IncTick+0x1c>)
 8018aa0:	6013      	str	r3, [r2, #0]
}
 8018aa2:	bf00      	nop
 8018aa4:	46bd      	mov	sp, r7
 8018aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aaa:	4770      	bx	lr
 8018aac:	2000f90c 	.word	0x2000f90c
 8018ab0:	20000008 	.word	0x20000008

08018ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8018ab4:	b480      	push	{r7}
 8018ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8018ab8:	4b03      	ldr	r3, [pc, #12]	; (8018ac8 <HAL_GetTick+0x14>)
 8018aba:	681b      	ldr	r3, [r3, #0]
}
 8018abc:	4618      	mov	r0, r3
 8018abe:	46bd      	mov	sp, r7
 8018ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ac4:	4770      	bx	lr
 8018ac6:	bf00      	nop
 8018ac8:	2000f90c 	.word	0x2000f90c

08018acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8018acc:	b580      	push	{r7, lr}
 8018ace:	b084      	sub	sp, #16
 8018ad0:	af00      	add	r7, sp, #0
 8018ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8018ad4:	f7ff ffee 	bl	8018ab4 <HAL_GetTick>
 8018ad8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8018ade:	68fb      	ldr	r3, [r7, #12]
 8018ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ae4:	d004      	beq.n	8018af0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8018ae6:	4b09      	ldr	r3, [pc, #36]	; (8018b0c <HAL_Delay+0x40>)
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	68fa      	ldr	r2, [r7, #12]
 8018aec:	4413      	add	r3, r2
 8018aee:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8018af0:	bf00      	nop
 8018af2:	f7ff ffdf 	bl	8018ab4 <HAL_GetTick>
 8018af6:	4602      	mov	r2, r0
 8018af8:	68bb      	ldr	r3, [r7, #8]
 8018afa:	1ad3      	subs	r3, r2, r3
 8018afc:	68fa      	ldr	r2, [r7, #12]
 8018afe:	429a      	cmp	r2, r3
 8018b00:	d8f7      	bhi.n	8018af2 <HAL_Delay+0x26>
  {
  }
}
 8018b02:	bf00      	nop
 8018b04:	bf00      	nop
 8018b06:	3710      	adds	r7, #16
 8018b08:	46bd      	mov	sp, r7
 8018b0a:	bd80      	pop	{r7, pc}
 8018b0c:	20000008 	.word	0x20000008

08018b10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8018b10:	b480      	push	{r7}
 8018b12:	b083      	sub	sp, #12
 8018b14:	af00      	add	r7, sp, #0
 8018b16:	6078      	str	r0, [r7, #4]
 8018b18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	689b      	ldr	r3, [r3, #8]
 8018b1e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8018b22:	683b      	ldr	r3, [r7, #0]
 8018b24:	431a      	orrs	r2, r3
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	609a      	str	r2, [r3, #8]
}
 8018b2a:	bf00      	nop
 8018b2c:	370c      	adds	r7, #12
 8018b2e:	46bd      	mov	sp, r7
 8018b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b34:	4770      	bx	lr

08018b36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8018b36:	b480      	push	{r7}
 8018b38:	b083      	sub	sp, #12
 8018b3a:	af00      	add	r7, sp, #0
 8018b3c:	6078      	str	r0, [r7, #4]
 8018b3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	689b      	ldr	r3, [r3, #8]
 8018b44:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8018b48:	683b      	ldr	r3, [r7, #0]
 8018b4a:	431a      	orrs	r2, r3
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	609a      	str	r2, [r3, #8]
}
 8018b50:	bf00      	nop
 8018b52:	370c      	adds	r7, #12
 8018b54:	46bd      	mov	sp, r7
 8018b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b5a:	4770      	bx	lr

08018b5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8018b5c:	b480      	push	{r7}
 8018b5e:	b083      	sub	sp, #12
 8018b60:	af00      	add	r7, sp, #0
 8018b62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	689b      	ldr	r3, [r3, #8]
 8018b68:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8018b6c:	4618      	mov	r0, r3
 8018b6e:	370c      	adds	r7, #12
 8018b70:	46bd      	mov	sp, r7
 8018b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b76:	4770      	bx	lr

08018b78 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8018b78:	b480      	push	{r7}
 8018b7a:	b087      	sub	sp, #28
 8018b7c:	af00      	add	r7, sp, #0
 8018b7e:	60f8      	str	r0, [r7, #12]
 8018b80:	60b9      	str	r1, [r7, #8]
 8018b82:	607a      	str	r2, [r7, #4]
 8018b84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018b86:	68fb      	ldr	r3, [r7, #12]
 8018b88:	3360      	adds	r3, #96	; 0x60
 8018b8a:	461a      	mov	r2, r3
 8018b8c:	68bb      	ldr	r3, [r7, #8]
 8018b8e:	009b      	lsls	r3, r3, #2
 8018b90:	4413      	add	r3, r2
 8018b92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018b94:	697b      	ldr	r3, [r7, #20]
 8018b96:	681a      	ldr	r2, [r3, #0]
 8018b98:	4b08      	ldr	r3, [pc, #32]	; (8018bbc <LL_ADC_SetOffset+0x44>)
 8018b9a:	4013      	ands	r3, r2
 8018b9c:	687a      	ldr	r2, [r7, #4]
 8018b9e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8018ba2:	683a      	ldr	r2, [r7, #0]
 8018ba4:	430a      	orrs	r2, r1
 8018ba6:	4313      	orrs	r3, r2
 8018ba8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8018bac:	697b      	ldr	r3, [r7, #20]
 8018bae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8018bb0:	bf00      	nop
 8018bb2:	371c      	adds	r7, #28
 8018bb4:	46bd      	mov	sp, r7
 8018bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bba:	4770      	bx	lr
 8018bbc:	03fff000 	.word	0x03fff000

08018bc0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8018bc0:	b480      	push	{r7}
 8018bc2:	b085      	sub	sp, #20
 8018bc4:	af00      	add	r7, sp, #0
 8018bc6:	6078      	str	r0, [r7, #4]
 8018bc8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	3360      	adds	r3, #96	; 0x60
 8018bce:	461a      	mov	r2, r3
 8018bd0:	683b      	ldr	r3, [r7, #0]
 8018bd2:	009b      	lsls	r3, r3, #2
 8018bd4:	4413      	add	r3, r2
 8018bd6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8018bd8:	68fb      	ldr	r3, [r7, #12]
 8018bda:	681b      	ldr	r3, [r3, #0]
 8018bdc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8018be0:	4618      	mov	r0, r3
 8018be2:	3714      	adds	r7, #20
 8018be4:	46bd      	mov	sp, r7
 8018be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bea:	4770      	bx	lr

08018bec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8018bec:	b480      	push	{r7}
 8018bee:	b087      	sub	sp, #28
 8018bf0:	af00      	add	r7, sp, #0
 8018bf2:	60f8      	str	r0, [r7, #12]
 8018bf4:	60b9      	str	r1, [r7, #8]
 8018bf6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018bf8:	68fb      	ldr	r3, [r7, #12]
 8018bfa:	3360      	adds	r3, #96	; 0x60
 8018bfc:	461a      	mov	r2, r3
 8018bfe:	68bb      	ldr	r3, [r7, #8]
 8018c00:	009b      	lsls	r3, r3, #2
 8018c02:	4413      	add	r3, r2
 8018c04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018c06:	697b      	ldr	r3, [r7, #20]
 8018c08:	681b      	ldr	r3, [r3, #0]
 8018c0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	431a      	orrs	r2, r3
 8018c12:	697b      	ldr	r3, [r7, #20]
 8018c14:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8018c16:	bf00      	nop
 8018c18:	371c      	adds	r7, #28
 8018c1a:	46bd      	mov	sp, r7
 8018c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c20:	4770      	bx	lr

08018c22 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8018c22:	b480      	push	{r7}
 8018c24:	b087      	sub	sp, #28
 8018c26:	af00      	add	r7, sp, #0
 8018c28:	60f8      	str	r0, [r7, #12]
 8018c2a:	60b9      	str	r1, [r7, #8]
 8018c2c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018c2e:	68fb      	ldr	r3, [r7, #12]
 8018c30:	3360      	adds	r3, #96	; 0x60
 8018c32:	461a      	mov	r2, r3
 8018c34:	68bb      	ldr	r3, [r7, #8]
 8018c36:	009b      	lsls	r3, r3, #2
 8018c38:	4413      	add	r3, r2
 8018c3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018c3c:	697b      	ldr	r3, [r7, #20]
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	431a      	orrs	r2, r3
 8018c48:	697b      	ldr	r3, [r7, #20]
 8018c4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8018c4c:	bf00      	nop
 8018c4e:	371c      	adds	r7, #28
 8018c50:	46bd      	mov	sp, r7
 8018c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c56:	4770      	bx	lr

08018c58 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8018c58:	b480      	push	{r7}
 8018c5a:	b087      	sub	sp, #28
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	60f8      	str	r0, [r7, #12]
 8018c60:	60b9      	str	r1, [r7, #8]
 8018c62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018c64:	68fb      	ldr	r3, [r7, #12]
 8018c66:	3360      	adds	r3, #96	; 0x60
 8018c68:	461a      	mov	r2, r3
 8018c6a:	68bb      	ldr	r3, [r7, #8]
 8018c6c:	009b      	lsls	r3, r3, #2
 8018c6e:	4413      	add	r3, r2
 8018c70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018c72:	697b      	ldr	r3, [r7, #20]
 8018c74:	681b      	ldr	r3, [r3, #0]
 8018c76:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	431a      	orrs	r2, r3
 8018c7e:	697b      	ldr	r3, [r7, #20]
 8018c80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8018c82:	bf00      	nop
 8018c84:	371c      	adds	r7, #28
 8018c86:	46bd      	mov	sp, r7
 8018c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c8c:	4770      	bx	lr

08018c8e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8018c8e:	b480      	push	{r7}
 8018c90:	b083      	sub	sp, #12
 8018c92:	af00      	add	r7, sp, #0
 8018c94:	6078      	str	r0, [r7, #4]
 8018c96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	695b      	ldr	r3, [r3, #20]
 8018c9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018ca0:	683b      	ldr	r3, [r7, #0]
 8018ca2:	431a      	orrs	r2, r3
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	615a      	str	r2, [r3, #20]
}
 8018ca8:	bf00      	nop
 8018caa:	370c      	adds	r7, #12
 8018cac:	46bd      	mov	sp, r7
 8018cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cb2:	4770      	bx	lr

08018cb4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8018cb4:	b480      	push	{r7}
 8018cb6:	b083      	sub	sp, #12
 8018cb8:	af00      	add	r7, sp, #0
 8018cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	68db      	ldr	r3, [r3, #12]
 8018cc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d101      	bne.n	8018ccc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8018cc8:	2301      	movs	r3, #1
 8018cca:	e000      	b.n	8018cce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8018ccc:	2300      	movs	r3, #0
}
 8018cce:	4618      	mov	r0, r3
 8018cd0:	370c      	adds	r7, #12
 8018cd2:	46bd      	mov	sp, r7
 8018cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cd8:	4770      	bx	lr

08018cda <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8018cda:	b480      	push	{r7}
 8018cdc:	b087      	sub	sp, #28
 8018cde:	af00      	add	r7, sp, #0
 8018ce0:	60f8      	str	r0, [r7, #12]
 8018ce2:	60b9      	str	r1, [r7, #8]
 8018ce4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8018ce6:	68fb      	ldr	r3, [r7, #12]
 8018ce8:	3330      	adds	r3, #48	; 0x30
 8018cea:	461a      	mov	r2, r3
 8018cec:	68bb      	ldr	r3, [r7, #8]
 8018cee:	0a1b      	lsrs	r3, r3, #8
 8018cf0:	009b      	lsls	r3, r3, #2
 8018cf2:	f003 030c 	and.w	r3, r3, #12
 8018cf6:	4413      	add	r3, r2
 8018cf8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018cfa:	697b      	ldr	r3, [r7, #20]
 8018cfc:	681a      	ldr	r2, [r3, #0]
 8018cfe:	68bb      	ldr	r3, [r7, #8]
 8018d00:	f003 031f 	and.w	r3, r3, #31
 8018d04:	211f      	movs	r1, #31
 8018d06:	fa01 f303 	lsl.w	r3, r1, r3
 8018d0a:	43db      	mvns	r3, r3
 8018d0c:	401a      	ands	r2, r3
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	0e9b      	lsrs	r3, r3, #26
 8018d12:	f003 011f 	and.w	r1, r3, #31
 8018d16:	68bb      	ldr	r3, [r7, #8]
 8018d18:	f003 031f 	and.w	r3, r3, #31
 8018d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8018d20:	431a      	orrs	r2, r3
 8018d22:	697b      	ldr	r3, [r7, #20]
 8018d24:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8018d26:	bf00      	nop
 8018d28:	371c      	adds	r7, #28
 8018d2a:	46bd      	mov	sp, r7
 8018d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d30:	4770      	bx	lr

08018d32 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8018d32:	b480      	push	{r7}
 8018d34:	b083      	sub	sp, #12
 8018d36:	af00      	add	r7, sp, #0
 8018d38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018d3e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	d101      	bne.n	8018d4a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8018d46:	2301      	movs	r3, #1
 8018d48:	e000      	b.n	8018d4c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8018d4a:	2300      	movs	r3, #0
}
 8018d4c:	4618      	mov	r0, r3
 8018d4e:	370c      	adds	r7, #12
 8018d50:	46bd      	mov	sp, r7
 8018d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d56:	4770      	bx	lr

08018d58 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8018d58:	b480      	push	{r7}
 8018d5a:	b087      	sub	sp, #28
 8018d5c:	af00      	add	r7, sp, #0
 8018d5e:	60f8      	str	r0, [r7, #12]
 8018d60:	60b9      	str	r1, [r7, #8]
 8018d62:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8018d64:	68fb      	ldr	r3, [r7, #12]
 8018d66:	3314      	adds	r3, #20
 8018d68:	461a      	mov	r2, r3
 8018d6a:	68bb      	ldr	r3, [r7, #8]
 8018d6c:	0e5b      	lsrs	r3, r3, #25
 8018d6e:	009b      	lsls	r3, r3, #2
 8018d70:	f003 0304 	and.w	r3, r3, #4
 8018d74:	4413      	add	r3, r2
 8018d76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018d78:	697b      	ldr	r3, [r7, #20]
 8018d7a:	681a      	ldr	r2, [r3, #0]
 8018d7c:	68bb      	ldr	r3, [r7, #8]
 8018d7e:	0d1b      	lsrs	r3, r3, #20
 8018d80:	f003 031f 	and.w	r3, r3, #31
 8018d84:	2107      	movs	r1, #7
 8018d86:	fa01 f303 	lsl.w	r3, r1, r3
 8018d8a:	43db      	mvns	r3, r3
 8018d8c:	401a      	ands	r2, r3
 8018d8e:	68bb      	ldr	r3, [r7, #8]
 8018d90:	0d1b      	lsrs	r3, r3, #20
 8018d92:	f003 031f 	and.w	r3, r3, #31
 8018d96:	6879      	ldr	r1, [r7, #4]
 8018d98:	fa01 f303 	lsl.w	r3, r1, r3
 8018d9c:	431a      	orrs	r2, r3
 8018d9e:	697b      	ldr	r3, [r7, #20]
 8018da0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8018da2:	bf00      	nop
 8018da4:	371c      	adds	r7, #28
 8018da6:	46bd      	mov	sp, r7
 8018da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dac:	4770      	bx	lr
	...

08018db0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8018db0:	b480      	push	{r7}
 8018db2:	b085      	sub	sp, #20
 8018db4:	af00      	add	r7, sp, #0
 8018db6:	60f8      	str	r0, [r7, #12]
 8018db8:	60b9      	str	r1, [r7, #8]
 8018dba:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	4a0f      	ldr	r2, [pc, #60]	; (8018dfc <LL_ADC_SetChannelSingleDiff+0x4c>)
 8018dc0:	4293      	cmp	r3, r2
 8018dc2:	d10a      	bne.n	8018dda <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8018dc4:	68fb      	ldr	r3, [r7, #12]
 8018dc6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8018dca:	68bb      	ldr	r3, [r7, #8]
 8018dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018dd0:	431a      	orrs	r2, r3
 8018dd2:	68fb      	ldr	r3, [r7, #12]
 8018dd4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8018dd8:	e00a      	b.n	8018df0 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8018dda:	68fb      	ldr	r3, [r7, #12]
 8018ddc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8018de0:	68bb      	ldr	r3, [r7, #8]
 8018de2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018de6:	43db      	mvns	r3, r3
 8018de8:	401a      	ands	r2, r3
 8018dea:	68fb      	ldr	r3, [r7, #12]
 8018dec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8018df0:	bf00      	nop
 8018df2:	3714      	adds	r7, #20
 8018df4:	46bd      	mov	sp, r7
 8018df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dfa:	4770      	bx	lr
 8018dfc:	407f0000 	.word	0x407f0000

08018e00 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8018e00:	b480      	push	{r7}
 8018e02:	b083      	sub	sp, #12
 8018e04:	af00      	add	r7, sp, #0
 8018e06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	689b      	ldr	r3, [r3, #8]
 8018e0c:	f003 031f 	and.w	r3, r3, #31
}
 8018e10:	4618      	mov	r0, r3
 8018e12:	370c      	adds	r7, #12
 8018e14:	46bd      	mov	sp, r7
 8018e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e1a:	4770      	bx	lr

08018e1c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8018e1c:	b480      	push	{r7}
 8018e1e:	b083      	sub	sp, #12
 8018e20:	af00      	add	r7, sp, #0
 8018e22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	689b      	ldr	r3, [r3, #8]
 8018e28:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8018e2c:	4618      	mov	r0, r3
 8018e2e:	370c      	adds	r7, #12
 8018e30:	46bd      	mov	sp, r7
 8018e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e36:	4770      	bx	lr

08018e38 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8018e38:	b480      	push	{r7}
 8018e3a:	b083      	sub	sp, #12
 8018e3c:	af00      	add	r7, sp, #0
 8018e3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	689b      	ldr	r3, [r3, #8]
 8018e44:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8018e48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018e4c:	687a      	ldr	r2, [r7, #4]
 8018e4e:	6093      	str	r3, [r2, #8]
}
 8018e50:	bf00      	nop
 8018e52:	370c      	adds	r7, #12
 8018e54:	46bd      	mov	sp, r7
 8018e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e5a:	4770      	bx	lr

08018e5c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8018e5c:	b480      	push	{r7}
 8018e5e:	b083      	sub	sp, #12
 8018e60:	af00      	add	r7, sp, #0
 8018e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	689b      	ldr	r3, [r3, #8]
 8018e68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8018e6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8018e70:	d101      	bne.n	8018e76 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8018e72:	2301      	movs	r3, #1
 8018e74:	e000      	b.n	8018e78 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8018e76:	2300      	movs	r3, #0
}
 8018e78:	4618      	mov	r0, r3
 8018e7a:	370c      	adds	r7, #12
 8018e7c:	46bd      	mov	sp, r7
 8018e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e82:	4770      	bx	lr

08018e84 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8018e84:	b480      	push	{r7}
 8018e86:	b083      	sub	sp, #12
 8018e88:	af00      	add	r7, sp, #0
 8018e8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	689b      	ldr	r3, [r3, #8]
 8018e90:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8018e94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018e98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8018ea0:	bf00      	nop
 8018ea2:	370c      	adds	r7, #12
 8018ea4:	46bd      	mov	sp, r7
 8018ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eaa:	4770      	bx	lr

08018eac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8018eac:	b480      	push	{r7}
 8018eae:	b083      	sub	sp, #12
 8018eb0:	af00      	add	r7, sp, #0
 8018eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	689b      	ldr	r3, [r3, #8]
 8018eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018ebc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8018ec0:	d101      	bne.n	8018ec6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8018ec2:	2301      	movs	r3, #1
 8018ec4:	e000      	b.n	8018ec8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8018ec6:	2300      	movs	r3, #0
}
 8018ec8:	4618      	mov	r0, r3
 8018eca:	370c      	adds	r7, #12
 8018ecc:	46bd      	mov	sp, r7
 8018ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ed2:	4770      	bx	lr

08018ed4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8018ed4:	b480      	push	{r7}
 8018ed6:	b083      	sub	sp, #12
 8018ed8:	af00      	add	r7, sp, #0
 8018eda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	689b      	ldr	r3, [r3, #8]
 8018ee0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018ee4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018ee8:	f043 0201 	orr.w	r2, r3, #1
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8018ef0:	bf00      	nop
 8018ef2:	370c      	adds	r7, #12
 8018ef4:	46bd      	mov	sp, r7
 8018ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018efa:	4770      	bx	lr

08018efc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8018efc:	b480      	push	{r7}
 8018efe:	b083      	sub	sp, #12
 8018f00:	af00      	add	r7, sp, #0
 8018f02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	689b      	ldr	r3, [r3, #8]
 8018f08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018f0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018f10:	f043 0202 	orr.w	r2, r3, #2
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8018f18:	bf00      	nop
 8018f1a:	370c      	adds	r7, #12
 8018f1c:	46bd      	mov	sp, r7
 8018f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f22:	4770      	bx	lr

08018f24 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8018f24:	b480      	push	{r7}
 8018f26:	b083      	sub	sp, #12
 8018f28:	af00      	add	r7, sp, #0
 8018f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	689b      	ldr	r3, [r3, #8]
 8018f30:	f003 0301 	and.w	r3, r3, #1
 8018f34:	2b01      	cmp	r3, #1
 8018f36:	d101      	bne.n	8018f3c <LL_ADC_IsEnabled+0x18>
 8018f38:	2301      	movs	r3, #1
 8018f3a:	e000      	b.n	8018f3e <LL_ADC_IsEnabled+0x1a>
 8018f3c:	2300      	movs	r3, #0
}
 8018f3e:	4618      	mov	r0, r3
 8018f40:	370c      	adds	r7, #12
 8018f42:	46bd      	mov	sp, r7
 8018f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f48:	4770      	bx	lr

08018f4a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8018f4a:	b480      	push	{r7}
 8018f4c:	b083      	sub	sp, #12
 8018f4e:	af00      	add	r7, sp, #0
 8018f50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	689b      	ldr	r3, [r3, #8]
 8018f56:	f003 0302 	and.w	r3, r3, #2
 8018f5a:	2b02      	cmp	r3, #2
 8018f5c:	d101      	bne.n	8018f62 <LL_ADC_IsDisableOngoing+0x18>
 8018f5e:	2301      	movs	r3, #1
 8018f60:	e000      	b.n	8018f64 <LL_ADC_IsDisableOngoing+0x1a>
 8018f62:	2300      	movs	r3, #0
}
 8018f64:	4618      	mov	r0, r3
 8018f66:	370c      	adds	r7, #12
 8018f68:	46bd      	mov	sp, r7
 8018f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f6e:	4770      	bx	lr

08018f70 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8018f70:	b480      	push	{r7}
 8018f72:	b083      	sub	sp, #12
 8018f74:	af00      	add	r7, sp, #0
 8018f76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	689b      	ldr	r3, [r3, #8]
 8018f7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018f80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018f84:	f043 0204 	orr.w	r2, r3, #4
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8018f8c:	bf00      	nop
 8018f8e:	370c      	adds	r7, #12
 8018f90:	46bd      	mov	sp, r7
 8018f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f96:	4770      	bx	lr

08018f98 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8018f98:	b480      	push	{r7}
 8018f9a:	b083      	sub	sp, #12
 8018f9c:	af00      	add	r7, sp, #0
 8018f9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	689b      	ldr	r3, [r3, #8]
 8018fa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018fa8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018fac:	f043 0210 	orr.w	r2, r3, #16
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8018fb4:	bf00      	nop
 8018fb6:	370c      	adds	r7, #12
 8018fb8:	46bd      	mov	sp, r7
 8018fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fbe:	4770      	bx	lr

08018fc0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8018fc0:	b480      	push	{r7}
 8018fc2:	b083      	sub	sp, #12
 8018fc4:	af00      	add	r7, sp, #0
 8018fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	689b      	ldr	r3, [r3, #8]
 8018fcc:	f003 0304 	and.w	r3, r3, #4
 8018fd0:	2b04      	cmp	r3, #4
 8018fd2:	d101      	bne.n	8018fd8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8018fd4:	2301      	movs	r3, #1
 8018fd6:	e000      	b.n	8018fda <LL_ADC_REG_IsConversionOngoing+0x1a>
 8018fd8:	2300      	movs	r3, #0
}
 8018fda:	4618      	mov	r0, r3
 8018fdc:	370c      	adds	r7, #12
 8018fde:	46bd      	mov	sp, r7
 8018fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fe4:	4770      	bx	lr

08018fe6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8018fe6:	b480      	push	{r7}
 8018fe8:	b083      	sub	sp, #12
 8018fea:	af00      	add	r7, sp, #0
 8018fec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	689b      	ldr	r3, [r3, #8]
 8018ff2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018ff6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018ffa:	f043 0220 	orr.w	r2, r3, #32
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8019002:	bf00      	nop
 8019004:	370c      	adds	r7, #12
 8019006:	46bd      	mov	sp, r7
 8019008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801900c:	4770      	bx	lr

0801900e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 801900e:	b480      	push	{r7}
 8019010:	b083      	sub	sp, #12
 8019012:	af00      	add	r7, sp, #0
 8019014:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	689b      	ldr	r3, [r3, #8]
 801901a:	f003 0308 	and.w	r3, r3, #8
 801901e:	2b08      	cmp	r3, #8
 8019020:	d101      	bne.n	8019026 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8019022:	2301      	movs	r3, #1
 8019024:	e000      	b.n	8019028 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8019026:	2300      	movs	r3, #0
}
 8019028:	4618      	mov	r0, r3
 801902a:	370c      	adds	r7, #12
 801902c:	46bd      	mov	sp, r7
 801902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019032:	4770      	bx	lr

08019034 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8019034:	b590      	push	{r4, r7, lr}
 8019036:	b089      	sub	sp, #36	; 0x24
 8019038:	af00      	add	r7, sp, #0
 801903a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801903c:	2300      	movs	r3, #0
 801903e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8019040:	2300      	movs	r3, #0
 8019042:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	2b00      	cmp	r3, #0
 8019048:	d101      	bne.n	801904e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 801904a:	2301      	movs	r3, #1
 801904c:	e1a1      	b.n	8019392 <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	695b      	ldr	r3, [r3, #20]
 8019052:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019058:	2b00      	cmp	r3, #0
 801905a:	d109      	bne.n	8019070 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801905c:	6878      	ldr	r0, [r7, #4]
 801905e:	f7ef faa7 	bl	80085b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	2200      	movs	r2, #0
 8019066:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	2200      	movs	r2, #0
 801906c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	681b      	ldr	r3, [r3, #0]
 8019074:	4618      	mov	r0, r3
 8019076:	f7ff fef1 	bl	8018e5c <LL_ADC_IsDeepPowerDownEnabled>
 801907a:	4603      	mov	r3, r0
 801907c:	2b00      	cmp	r3, #0
 801907e:	d004      	beq.n	801908a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	681b      	ldr	r3, [r3, #0]
 8019084:	4618      	mov	r0, r3
 8019086:	f7ff fed7 	bl	8018e38 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	681b      	ldr	r3, [r3, #0]
 801908e:	4618      	mov	r0, r3
 8019090:	f7ff ff0c 	bl	8018eac <LL_ADC_IsInternalRegulatorEnabled>
 8019094:	4603      	mov	r3, r0
 8019096:	2b00      	cmp	r3, #0
 8019098:	d115      	bne.n	80190c6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	681b      	ldr	r3, [r3, #0]
 801909e:	4618      	mov	r0, r3
 80190a0:	f7ff fef0 	bl	8018e84 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80190a4:	4b9a      	ldr	r3, [pc, #616]	; (8019310 <HAL_ADC_Init+0x2dc>)
 80190a6:	681b      	ldr	r3, [r3, #0]
 80190a8:	099b      	lsrs	r3, r3, #6
 80190aa:	4a9a      	ldr	r2, [pc, #616]	; (8019314 <HAL_ADC_Init+0x2e0>)
 80190ac:	fba2 2303 	umull	r2, r3, r2, r3
 80190b0:	099b      	lsrs	r3, r3, #6
 80190b2:	3301      	adds	r3, #1
 80190b4:	005b      	lsls	r3, r3, #1
 80190b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80190b8:	e002      	b.n	80190c0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80190ba:	68bb      	ldr	r3, [r7, #8]
 80190bc:	3b01      	subs	r3, #1
 80190be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80190c0:	68bb      	ldr	r3, [r7, #8]
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d1f9      	bne.n	80190ba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	681b      	ldr	r3, [r3, #0]
 80190ca:	4618      	mov	r0, r3
 80190cc:	f7ff feee 	bl	8018eac <LL_ADC_IsInternalRegulatorEnabled>
 80190d0:	4603      	mov	r3, r0
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	d10d      	bne.n	80190f2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80190d6:	687b      	ldr	r3, [r7, #4]
 80190d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80190da:	f043 0210 	orr.w	r2, r3, #16
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80190e6:	f043 0201 	orr.w	r2, r3, #1
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80190ee:	2301      	movs	r3, #1
 80190f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	4618      	mov	r0, r3
 80190f8:	f7ff ff62 	bl	8018fc0 <LL_ADC_REG_IsConversionOngoing>
 80190fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019102:	f003 0310 	and.w	r3, r3, #16
 8019106:	2b00      	cmp	r3, #0
 8019108:	f040 813a 	bne.w	8019380 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 801910c:	697b      	ldr	r3, [r7, #20]
 801910e:	2b00      	cmp	r3, #0
 8019110:	f040 8136 	bne.w	8019380 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019118:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 801911c:	f043 0202 	orr.w	r2, r3, #2
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	681b      	ldr	r3, [r3, #0]
 8019128:	4618      	mov	r0, r3
 801912a:	f7ff fefb 	bl	8018f24 <LL_ADC_IsEnabled>
 801912e:	4603      	mov	r3, r0
 8019130:	2b00      	cmp	r3, #0
 8019132:	d137      	bne.n	80191a4 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	681b      	ldr	r3, [r3, #0]
 8019138:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801913c:	d004      	beq.n	8019148 <HAL_ADC_Init+0x114>
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	681b      	ldr	r3, [r3, #0]
 8019142:	4a75      	ldr	r2, [pc, #468]	; (8019318 <HAL_ADC_Init+0x2e4>)
 8019144:	4293      	cmp	r3, r2
 8019146:	d10f      	bne.n	8019168 <HAL_ADC_Init+0x134>
 8019148:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801914c:	f7ff feea 	bl	8018f24 <LL_ADC_IsEnabled>
 8019150:	4604      	mov	r4, r0
 8019152:	4871      	ldr	r0, [pc, #452]	; (8019318 <HAL_ADC_Init+0x2e4>)
 8019154:	f7ff fee6 	bl	8018f24 <LL_ADC_IsEnabled>
 8019158:	4603      	mov	r3, r0
 801915a:	4323      	orrs	r3, r4
 801915c:	2b00      	cmp	r3, #0
 801915e:	bf0c      	ite	eq
 8019160:	2301      	moveq	r3, #1
 8019162:	2300      	movne	r3, #0
 8019164:	b2db      	uxtb	r3, r3
 8019166:	e008      	b.n	801917a <HAL_ADC_Init+0x146>
 8019168:	486c      	ldr	r0, [pc, #432]	; (801931c <HAL_ADC_Init+0x2e8>)
 801916a:	f7ff fedb 	bl	8018f24 <LL_ADC_IsEnabled>
 801916e:	4603      	mov	r3, r0
 8019170:	2b00      	cmp	r3, #0
 8019172:	bf0c      	ite	eq
 8019174:	2301      	moveq	r3, #1
 8019176:	2300      	movne	r3, #0
 8019178:	b2db      	uxtb	r3, r3
 801917a:	2b00      	cmp	r3, #0
 801917c:	d012      	beq.n	80191a4 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019186:	d004      	beq.n	8019192 <HAL_ADC_Init+0x15e>
 8019188:	687b      	ldr	r3, [r7, #4]
 801918a:	681b      	ldr	r3, [r3, #0]
 801918c:	4a62      	ldr	r2, [pc, #392]	; (8019318 <HAL_ADC_Init+0x2e4>)
 801918e:	4293      	cmp	r3, r2
 8019190:	d101      	bne.n	8019196 <HAL_ADC_Init+0x162>
 8019192:	4a63      	ldr	r2, [pc, #396]	; (8019320 <HAL_ADC_Init+0x2ec>)
 8019194:	e000      	b.n	8019198 <HAL_ADC_Init+0x164>
 8019196:	4a63      	ldr	r2, [pc, #396]	; (8019324 <HAL_ADC_Init+0x2f0>)
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	685b      	ldr	r3, [r3, #4]
 801919c:	4619      	mov	r1, r3
 801919e:	4610      	mov	r0, r2
 80191a0:	f7ff fcb6 	bl	8018b10 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80191a4:	687b      	ldr	r3, [r7, #4]
 80191a6:	7f5b      	ldrb	r3, [r3, #29]
 80191a8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80191ae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80191b4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80191ba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80191c2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80191c4:	4313      	orrs	r3, r2
 80191c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80191ce:	2b01      	cmp	r3, #1
 80191d0:	d106      	bne.n	80191e0 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191d6:	3b01      	subs	r3, #1
 80191d8:	045b      	lsls	r3, r3, #17
 80191da:	69ba      	ldr	r2, [r7, #24]
 80191dc:	4313      	orrs	r3, r2
 80191de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d009      	beq.n	80191fc <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191ec:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80191f4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80191f6:	69ba      	ldr	r2, [r7, #24]
 80191f8:	4313      	orrs	r3, r2
 80191fa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	681b      	ldr	r3, [r3, #0]
 8019200:	68da      	ldr	r2, [r3, #12]
 8019202:	4b49      	ldr	r3, [pc, #292]	; (8019328 <HAL_ADC_Init+0x2f4>)
 8019204:	4013      	ands	r3, r2
 8019206:	687a      	ldr	r2, [r7, #4]
 8019208:	6812      	ldr	r2, [r2, #0]
 801920a:	69b9      	ldr	r1, [r7, #24]
 801920c:	430b      	orrs	r3, r1
 801920e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	681b      	ldr	r3, [r3, #0]
 8019214:	691b      	ldr	r3, [r3, #16]
 8019216:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	430a      	orrs	r2, r1
 8019224:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	681b      	ldr	r3, [r3, #0]
 801922a:	4618      	mov	r0, r3
 801922c:	f7ff fec8 	bl	8018fc0 <LL_ADC_REG_IsConversionOngoing>
 8019230:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	681b      	ldr	r3, [r3, #0]
 8019236:	4618      	mov	r0, r3
 8019238:	f7ff fee9 	bl	801900e <LL_ADC_INJ_IsConversionOngoing>
 801923c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 801923e:	693b      	ldr	r3, [r7, #16]
 8019240:	2b00      	cmp	r3, #0
 8019242:	d17b      	bne.n	801933c <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8019244:	68fb      	ldr	r3, [r7, #12]
 8019246:	2b00      	cmp	r3, #0
 8019248:	d178      	bne.n	801933c <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 801924e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8019256:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8019258:	4313      	orrs	r3, r2
 801925a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	681b      	ldr	r3, [r3, #0]
 8019260:	68db      	ldr	r3, [r3, #12]
 8019262:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8019266:	f023 0302 	bic.w	r3, r3, #2
 801926a:	687a      	ldr	r2, [r7, #4]
 801926c:	6812      	ldr	r2, [r2, #0]
 801926e:	69b9      	ldr	r1, [r7, #24]
 8019270:	430b      	orrs	r3, r1
 8019272:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	691b      	ldr	r3, [r3, #16]
 8019278:	2b00      	cmp	r3, #0
 801927a:	d017      	beq.n	80192ac <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	681b      	ldr	r3, [r3, #0]
 8019280:	691a      	ldr	r2, [r3, #16]
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801928a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	681b      	ldr	r3, [r3, #0]
 8019290:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019294:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8019298:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801929c:	687a      	ldr	r2, [r7, #4]
 801929e:	6911      	ldr	r1, [r2, #16]
 80192a0:	687a      	ldr	r2, [r7, #4]
 80192a2:	6812      	ldr	r2, [r2, #0]
 80192a4:	430b      	orrs	r3, r1
 80192a6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80192aa:	e013      	b.n	80192d4 <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	691a      	ldr	r2, [r3, #16]
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	681b      	ldr	r3, [r3, #0]
 80192b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80192ba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	681b      	ldr	r3, [r3, #0]
 80192c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80192c4:	687a      	ldr	r2, [r7, #4]
 80192c6:	6812      	ldr	r2, [r2, #0]
 80192c8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80192cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80192d0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80192da:	2b01      	cmp	r3, #1
 80192dc:	d126      	bne.n	801932c <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	681b      	ldr	r3, [r3, #0]
 80192e2:	691b      	ldr	r3, [r3, #16]
 80192e4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80192e8:	f023 0304 	bic.w	r3, r3, #4
 80192ec:	687a      	ldr	r2, [r7, #4]
 80192ee:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80192f0:	687a      	ldr	r2, [r7, #4]
 80192f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80192f4:	4311      	orrs	r1, r2
 80192f6:	687a      	ldr	r2, [r7, #4]
 80192f8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80192fa:	4311      	orrs	r1, r2
 80192fc:	687a      	ldr	r2, [r7, #4]
 80192fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8019300:	430a      	orrs	r2, r1
 8019302:	431a      	orrs	r2, r3
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	681b      	ldr	r3, [r3, #0]
 8019308:	f042 0201 	orr.w	r2, r2, #1
 801930c:	611a      	str	r2, [r3, #16]
 801930e:	e015      	b.n	801933c <HAL_ADC_Init+0x308>
 8019310:	20000000 	.word	0x20000000
 8019314:	053e2d63 	.word	0x053e2d63
 8019318:	50000100 	.word	0x50000100
 801931c:	50000400 	.word	0x50000400
 8019320:	50000300 	.word	0x50000300
 8019324:	50000700 	.word	0x50000700
 8019328:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 801932c:	687b      	ldr	r3, [r7, #4]
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	691a      	ldr	r2, [r3, #16]
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	f022 0201 	bic.w	r2, r2, #1
 801933a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	695b      	ldr	r3, [r3, #20]
 8019340:	2b01      	cmp	r3, #1
 8019342:	d10c      	bne.n	801935e <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	681b      	ldr	r3, [r3, #0]
 8019348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801934a:	f023 010f 	bic.w	r1, r3, #15
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	6a1b      	ldr	r3, [r3, #32]
 8019352:	1e5a      	subs	r2, r3, #1
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	681b      	ldr	r3, [r3, #0]
 8019358:	430a      	orrs	r2, r1
 801935a:	631a      	str	r2, [r3, #48]	; 0x30
 801935c:	e007      	b.n	801936e <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	681b      	ldr	r3, [r3, #0]
 8019362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	681b      	ldr	r3, [r3, #0]
 8019368:	f022 020f 	bic.w	r2, r2, #15
 801936c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019372:	f023 0303 	bic.w	r3, r3, #3
 8019376:	f043 0201 	orr.w	r2, r3, #1
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	65da      	str	r2, [r3, #92]	; 0x5c
 801937e:	e007      	b.n	8019390 <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019384:	f043 0210 	orr.w	r2, r3, #16
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 801938c:	2301      	movs	r3, #1
 801938e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8019390:	7ffb      	ldrb	r3, [r7, #31]
}
 8019392:	4618      	mov	r0, r3
 8019394:	3724      	adds	r7, #36	; 0x24
 8019396:	46bd      	mov	sp, r7
 8019398:	bd90      	pop	{r4, r7, pc}
 801939a:	bf00      	nop

0801939c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 801939c:	b580      	push	{r7, lr}
 801939e:	b086      	sub	sp, #24
 80193a0:	af00      	add	r7, sp, #0
 80193a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80193ac:	d004      	beq.n	80193b8 <HAL_ADC_Start+0x1c>
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	681b      	ldr	r3, [r3, #0]
 80193b2:	4a5c      	ldr	r2, [pc, #368]	; (8019524 <HAL_ADC_Start+0x188>)
 80193b4:	4293      	cmp	r3, r2
 80193b6:	d101      	bne.n	80193bc <HAL_ADC_Start+0x20>
 80193b8:	4b5b      	ldr	r3, [pc, #364]	; (8019528 <HAL_ADC_Start+0x18c>)
 80193ba:	e000      	b.n	80193be <HAL_ADC_Start+0x22>
 80193bc:	4b5b      	ldr	r3, [pc, #364]	; (801952c <HAL_ADC_Start+0x190>)
 80193be:	4618      	mov	r0, r3
 80193c0:	f7ff fd1e 	bl	8018e00 <LL_ADC_GetMultimode>
 80193c4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	4618      	mov	r0, r3
 80193cc:	f7ff fdf8 	bl	8018fc0 <LL_ADC_REG_IsConversionOngoing>
 80193d0:	4603      	mov	r3, r0
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	f040 809f 	bne.w	8019516 <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80193de:	2b01      	cmp	r3, #1
 80193e0:	d101      	bne.n	80193e6 <HAL_ADC_Start+0x4a>
 80193e2:	2302      	movs	r3, #2
 80193e4:	e09a      	b.n	801951c <HAL_ADC_Start+0x180>
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	2201      	movs	r2, #1
 80193ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80193ee:	6878      	ldr	r0, [r7, #4]
 80193f0:	f001 fa3e 	bl	801a870 <ADC_Enable>
 80193f4:	4603      	mov	r3, r0
 80193f6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80193f8:	7dfb      	ldrb	r3, [r7, #23]
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	f040 8086 	bne.w	801950c <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019404:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8019408:	f023 0301 	bic.w	r3, r3, #1
 801940c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	4a42      	ldr	r2, [pc, #264]	; (8019524 <HAL_ADC_Start+0x188>)
 801941a:	4293      	cmp	r3, r2
 801941c:	d002      	beq.n	8019424 <HAL_ADC_Start+0x88>
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	681b      	ldr	r3, [r3, #0]
 8019422:	e001      	b.n	8019428 <HAL_ADC_Start+0x8c>
 8019424:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019428:	687a      	ldr	r2, [r7, #4]
 801942a:	6812      	ldr	r2, [r2, #0]
 801942c:	4293      	cmp	r3, r2
 801942e:	d002      	beq.n	8019436 <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019430:	693b      	ldr	r3, [r7, #16]
 8019432:	2b00      	cmp	r3, #0
 8019434:	d105      	bne.n	8019442 <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801943a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019446:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801944a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801944e:	d106      	bne.n	801945e <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019454:	f023 0206 	bic.w	r2, r3, #6
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	661a      	str	r2, [r3, #96]	; 0x60
 801945c:	e002      	b.n	8019464 <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	2200      	movs	r2, #0
 8019462:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8019464:	687b      	ldr	r3, [r7, #4]
 8019466:	681b      	ldr	r3, [r3, #0]
 8019468:	221c      	movs	r2, #28
 801946a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	2200      	movs	r2, #0
 8019470:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	681b      	ldr	r3, [r3, #0]
 8019478:	4a2a      	ldr	r2, [pc, #168]	; (8019524 <HAL_ADC_Start+0x188>)
 801947a:	4293      	cmp	r3, r2
 801947c:	d002      	beq.n	8019484 <HAL_ADC_Start+0xe8>
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	681b      	ldr	r3, [r3, #0]
 8019482:	e001      	b.n	8019488 <HAL_ADC_Start+0xec>
 8019484:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019488:	687a      	ldr	r2, [r7, #4]
 801948a:	6812      	ldr	r2, [r2, #0]
 801948c:	4293      	cmp	r3, r2
 801948e:	d008      	beq.n	80194a2 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019490:	693b      	ldr	r3, [r7, #16]
 8019492:	2b00      	cmp	r3, #0
 8019494:	d005      	beq.n	80194a2 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8019496:	693b      	ldr	r3, [r7, #16]
 8019498:	2b05      	cmp	r3, #5
 801949a:	d002      	beq.n	80194a2 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801949c:	693b      	ldr	r3, [r7, #16]
 801949e:	2b09      	cmp	r3, #9
 80194a0:	d114      	bne.n	80194cc <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	681b      	ldr	r3, [r3, #0]
 80194a6:	68db      	ldr	r3, [r3, #12]
 80194a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80194ac:	2b00      	cmp	r3, #0
 80194ae:	d007      	beq.n	80194c0 <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80194b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80194b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	681b      	ldr	r3, [r3, #0]
 80194c4:	4618      	mov	r0, r3
 80194c6:	f7ff fd53 	bl	8018f70 <LL_ADC_REG_StartConversion>
 80194ca:	e026      	b.n	801951a <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80194d0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	681b      	ldr	r3, [r3, #0]
 80194dc:	4a11      	ldr	r2, [pc, #68]	; (8019524 <HAL_ADC_Start+0x188>)
 80194de:	4293      	cmp	r3, r2
 80194e0:	d002      	beq.n	80194e8 <HAL_ADC_Start+0x14c>
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	681b      	ldr	r3, [r3, #0]
 80194e6:	e001      	b.n	80194ec <HAL_ADC_Start+0x150>
 80194e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80194ec:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80194ee:	68fb      	ldr	r3, [r7, #12]
 80194f0:	68db      	ldr	r3, [r3, #12]
 80194f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d00f      	beq.n	801951a <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80194fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8019502:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	65da      	str	r2, [r3, #92]	; 0x5c
 801950a:	e006      	b.n	801951a <HAL_ADC_Start+0x17e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	2200      	movs	r2, #0
 8019510:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8019514:	e001      	b.n	801951a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8019516:	2302      	movs	r3, #2
 8019518:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 801951a:	7dfb      	ldrb	r3, [r7, #23]
}
 801951c:	4618      	mov	r0, r3
 801951e:	3718      	adds	r7, #24
 8019520:	46bd      	mov	sp, r7
 8019522:	bd80      	pop	{r7, pc}
 8019524:	50000100 	.word	0x50000100
 8019528:	50000300 	.word	0x50000300
 801952c:	50000700 	.word	0x50000700

08019530 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8019530:	b580      	push	{r7, lr}
 8019532:	b084      	sub	sp, #16
 8019534:	af00      	add	r7, sp, #0
 8019536:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801953e:	2b01      	cmp	r3, #1
 8019540:	d101      	bne.n	8019546 <HAL_ADC_Stop+0x16>
 8019542:	2302      	movs	r3, #2
 8019544:	e023      	b.n	801958e <HAL_ADC_Stop+0x5e>
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	2201      	movs	r2, #1
 801954a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 801954e:	2103      	movs	r1, #3
 8019550:	6878      	ldr	r0, [r7, #4]
 8019552:	f001 f8d1 	bl	801a6f8 <ADC_ConversionStop>
 8019556:	4603      	mov	r3, r0
 8019558:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 801955a:	7bfb      	ldrb	r3, [r7, #15]
 801955c:	2b00      	cmp	r3, #0
 801955e:	d111      	bne.n	8019584 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8019560:	6878      	ldr	r0, [r7, #4]
 8019562:	f001 f9e7 	bl	801a934 <ADC_Disable>
 8019566:	4603      	mov	r3, r0
 8019568:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 801956a:	7bfb      	ldrb	r3, [r7, #15]
 801956c:	2b00      	cmp	r3, #0
 801956e:	d109      	bne.n	8019584 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019574:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8019578:	f023 0301 	bic.w	r3, r3, #1
 801957c:	f043 0201 	orr.w	r2, r3, #1
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	2200      	movs	r2, #0
 8019588:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801958c:	7bfb      	ldrb	r3, [r7, #15]
}
 801958e:	4618      	mov	r0, r3
 8019590:	3710      	adds	r7, #16
 8019592:	46bd      	mov	sp, r7
 8019594:	bd80      	pop	{r7, pc}
	...

08019598 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8019598:	b580      	push	{r7, lr}
 801959a:	b088      	sub	sp, #32
 801959c:	af00      	add	r7, sp, #0
 801959e:	6078      	str	r0, [r7, #4]
 80195a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	681b      	ldr	r3, [r3, #0]
 80195a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80195aa:	d004      	beq.n	80195b6 <HAL_ADC_PollForConversion+0x1e>
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	681b      	ldr	r3, [r3, #0]
 80195b0:	4a70      	ldr	r2, [pc, #448]	; (8019774 <HAL_ADC_PollForConversion+0x1dc>)
 80195b2:	4293      	cmp	r3, r2
 80195b4:	d101      	bne.n	80195ba <HAL_ADC_PollForConversion+0x22>
 80195b6:	4b70      	ldr	r3, [pc, #448]	; (8019778 <HAL_ADC_PollForConversion+0x1e0>)
 80195b8:	e000      	b.n	80195bc <HAL_ADC_PollForConversion+0x24>
 80195ba:	4b70      	ldr	r3, [pc, #448]	; (801977c <HAL_ADC_PollForConversion+0x1e4>)
 80195bc:	4618      	mov	r0, r3
 80195be:	f7ff fc1f 	bl	8018e00 <LL_ADC_GetMultimode>
 80195c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	699b      	ldr	r3, [r3, #24]
 80195c8:	2b08      	cmp	r3, #8
 80195ca:	d102      	bne.n	80195d2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80195cc:	2308      	movs	r3, #8
 80195ce:	61fb      	str	r3, [r7, #28]
 80195d0:	e037      	b.n	8019642 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80195d2:	697b      	ldr	r3, [r7, #20]
 80195d4:	2b00      	cmp	r3, #0
 80195d6:	d005      	beq.n	80195e4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80195d8:	697b      	ldr	r3, [r7, #20]
 80195da:	2b05      	cmp	r3, #5
 80195dc:	d002      	beq.n	80195e4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80195de:	697b      	ldr	r3, [r7, #20]
 80195e0:	2b09      	cmp	r3, #9
 80195e2:	d111      	bne.n	8019608 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	68db      	ldr	r3, [r3, #12]
 80195ea:	f003 0301 	and.w	r3, r3, #1
 80195ee:	2b00      	cmp	r3, #0
 80195f0:	d007      	beq.n	8019602 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80195f6:	f043 0220 	orr.w	r2, r3, #32
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80195fe:	2301      	movs	r3, #1
 8019600:	e0b3      	b.n	801976a <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8019602:	2304      	movs	r3, #4
 8019604:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8019606:	e01c      	b.n	8019642 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8019608:	687b      	ldr	r3, [r7, #4]
 801960a:	681b      	ldr	r3, [r3, #0]
 801960c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019610:	d004      	beq.n	801961c <HAL_ADC_PollForConversion+0x84>
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	681b      	ldr	r3, [r3, #0]
 8019616:	4a57      	ldr	r2, [pc, #348]	; (8019774 <HAL_ADC_PollForConversion+0x1dc>)
 8019618:	4293      	cmp	r3, r2
 801961a:	d101      	bne.n	8019620 <HAL_ADC_PollForConversion+0x88>
 801961c:	4b56      	ldr	r3, [pc, #344]	; (8019778 <HAL_ADC_PollForConversion+0x1e0>)
 801961e:	e000      	b.n	8019622 <HAL_ADC_PollForConversion+0x8a>
 8019620:	4b56      	ldr	r3, [pc, #344]	; (801977c <HAL_ADC_PollForConversion+0x1e4>)
 8019622:	4618      	mov	r0, r3
 8019624:	f7ff fbfa 	bl	8018e1c <LL_ADC_GetMultiDMATransfer>
 8019628:	4603      	mov	r3, r0
 801962a:	2b00      	cmp	r3, #0
 801962c:	d007      	beq.n	801963e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019632:	f043 0220 	orr.w	r2, r3, #32
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 801963a:	2301      	movs	r3, #1
 801963c:	e095      	b.n	801976a <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 801963e:	2304      	movs	r3, #4
 8019640:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8019642:	f7ff fa37 	bl	8018ab4 <HAL_GetTick>
 8019646:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8019648:	e021      	b.n	801968e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 801964a:	683b      	ldr	r3, [r7, #0]
 801964c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019650:	d01d      	beq.n	801968e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8019652:	f7ff fa2f 	bl	8018ab4 <HAL_GetTick>
 8019656:	4602      	mov	r2, r0
 8019658:	693b      	ldr	r3, [r7, #16]
 801965a:	1ad3      	subs	r3, r2, r3
 801965c:	683a      	ldr	r2, [r7, #0]
 801965e:	429a      	cmp	r2, r3
 8019660:	d302      	bcc.n	8019668 <HAL_ADC_PollForConversion+0xd0>
 8019662:	683b      	ldr	r3, [r7, #0]
 8019664:	2b00      	cmp	r3, #0
 8019666:	d112      	bne.n	801968e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	681b      	ldr	r3, [r3, #0]
 801966c:	681a      	ldr	r2, [r3, #0]
 801966e:	69fb      	ldr	r3, [r7, #28]
 8019670:	4013      	ands	r3, r2
 8019672:	2b00      	cmp	r3, #0
 8019674:	d10b      	bne.n	801968e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801967a:	f043 0204 	orr.w	r2, r3, #4
 801967e:	687b      	ldr	r3, [r7, #4]
 8019680:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	2200      	movs	r2, #0
 8019686:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 801968a:	2303      	movs	r3, #3
 801968c:	e06d      	b.n	801976a <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	681b      	ldr	r3, [r3, #0]
 8019692:	681a      	ldr	r2, [r3, #0]
 8019694:	69fb      	ldr	r3, [r7, #28]
 8019696:	4013      	ands	r3, r2
 8019698:	2b00      	cmp	r3, #0
 801969a:	d0d6      	beq.n	801964a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80196a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	681b      	ldr	r3, [r3, #0]
 80196ac:	4618      	mov	r0, r3
 80196ae:	f7ff fb01 	bl	8018cb4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80196b2:	4603      	mov	r3, r0
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d01c      	beq.n	80196f2 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	7f5b      	ldrb	r3, [r3, #29]
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d118      	bne.n	80196f2 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	681b      	ldr	r3, [r3, #0]
 80196c4:	681b      	ldr	r3, [r3, #0]
 80196c6:	f003 0308 	and.w	r3, r3, #8
 80196ca:	2b08      	cmp	r3, #8
 80196cc:	d111      	bne.n	80196f2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80196d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80196de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80196e2:	2b00      	cmp	r3, #0
 80196e4:	d105      	bne.n	80196f2 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80196ea:	f043 0201 	orr.w	r2, r3, #1
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	681b      	ldr	r3, [r3, #0]
 80196f6:	4a1f      	ldr	r2, [pc, #124]	; (8019774 <HAL_ADC_PollForConversion+0x1dc>)
 80196f8:	4293      	cmp	r3, r2
 80196fa:	d002      	beq.n	8019702 <HAL_ADC_PollForConversion+0x16a>
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	681b      	ldr	r3, [r3, #0]
 8019700:	e001      	b.n	8019706 <HAL_ADC_PollForConversion+0x16e>
 8019702:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019706:	687a      	ldr	r2, [r7, #4]
 8019708:	6812      	ldr	r2, [r2, #0]
 801970a:	4293      	cmp	r3, r2
 801970c:	d008      	beq.n	8019720 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801970e:	697b      	ldr	r3, [r7, #20]
 8019710:	2b00      	cmp	r3, #0
 8019712:	d005      	beq.n	8019720 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8019714:	697b      	ldr	r3, [r7, #20]
 8019716:	2b05      	cmp	r3, #5
 8019718:	d002      	beq.n	8019720 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801971a:	697b      	ldr	r3, [r7, #20]
 801971c:	2b09      	cmp	r3, #9
 801971e:	d104      	bne.n	801972a <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	681b      	ldr	r3, [r3, #0]
 8019724:	68db      	ldr	r3, [r3, #12]
 8019726:	61bb      	str	r3, [r7, #24]
 8019728:	e00d      	b.n	8019746 <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	681b      	ldr	r3, [r3, #0]
 801972e:	4a11      	ldr	r2, [pc, #68]	; (8019774 <HAL_ADC_PollForConversion+0x1dc>)
 8019730:	4293      	cmp	r3, r2
 8019732:	d002      	beq.n	801973a <HAL_ADC_PollForConversion+0x1a2>
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	681b      	ldr	r3, [r3, #0]
 8019738:	e001      	b.n	801973e <HAL_ADC_PollForConversion+0x1a6>
 801973a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801973e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8019740:	68fb      	ldr	r3, [r7, #12]
 8019742:	68db      	ldr	r3, [r3, #12]
 8019744:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8019746:	69fb      	ldr	r3, [r7, #28]
 8019748:	2b08      	cmp	r3, #8
 801974a:	d104      	bne.n	8019756 <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	2208      	movs	r2, #8
 8019752:	601a      	str	r2, [r3, #0]
 8019754:	e008      	b.n	8019768 <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8019756:	69bb      	ldr	r3, [r7, #24]
 8019758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801975c:	2b00      	cmp	r3, #0
 801975e:	d103      	bne.n	8019768 <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	681b      	ldr	r3, [r3, #0]
 8019764:	220c      	movs	r2, #12
 8019766:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8019768:	2300      	movs	r3, #0
}
 801976a:	4618      	mov	r0, r3
 801976c:	3720      	adds	r7, #32
 801976e:	46bd      	mov	sp, r7
 8019770:	bd80      	pop	{r7, pc}
 8019772:	bf00      	nop
 8019774:	50000100 	.word	0x50000100
 8019778:	50000300 	.word	0x50000300
 801977c:	50000700 	.word	0x50000700

08019780 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8019780:	b580      	push	{r7, lr}
 8019782:	b086      	sub	sp, #24
 8019784:	af00      	add	r7, sp, #0
 8019786:	60f8      	str	r0, [r7, #12]
 8019788:	60b9      	str	r1, [r7, #8]
 801978a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801978c:	68fb      	ldr	r3, [r7, #12]
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019794:	d004      	beq.n	80197a0 <HAL_ADC_Start_DMA+0x20>
 8019796:	68fb      	ldr	r3, [r7, #12]
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	4a57      	ldr	r2, [pc, #348]	; (80198f8 <HAL_ADC_Start_DMA+0x178>)
 801979c:	4293      	cmp	r3, r2
 801979e:	d101      	bne.n	80197a4 <HAL_ADC_Start_DMA+0x24>
 80197a0:	4b56      	ldr	r3, [pc, #344]	; (80198fc <HAL_ADC_Start_DMA+0x17c>)
 80197a2:	e000      	b.n	80197a6 <HAL_ADC_Start_DMA+0x26>
 80197a4:	4b56      	ldr	r3, [pc, #344]	; (8019900 <HAL_ADC_Start_DMA+0x180>)
 80197a6:	4618      	mov	r0, r3
 80197a8:	f7ff fb2a 	bl	8018e00 <LL_ADC_GetMultimode>
 80197ac:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80197ae:	68fb      	ldr	r3, [r7, #12]
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	4618      	mov	r0, r3
 80197b4:	f7ff fc04 	bl	8018fc0 <LL_ADC_REG_IsConversionOngoing>
 80197b8:	4603      	mov	r3, r0
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	f040 8094 	bne.w	80198e8 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80197c0:	68fb      	ldr	r3, [r7, #12]
 80197c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80197c6:	2b01      	cmp	r3, #1
 80197c8:	d101      	bne.n	80197ce <HAL_ADC_Start_DMA+0x4e>
 80197ca:	2302      	movs	r3, #2
 80197cc:	e08f      	b.n	80198ee <HAL_ADC_Start_DMA+0x16e>
 80197ce:	68fb      	ldr	r3, [r7, #12]
 80197d0:	2201      	movs	r2, #1
 80197d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80197d6:	68fb      	ldr	r3, [r7, #12]
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	4a4a      	ldr	r2, [pc, #296]	; (8019904 <HAL_ADC_Start_DMA+0x184>)
 80197dc:	4293      	cmp	r3, r2
 80197de:	d008      	beq.n	80197f2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80197e0:	693b      	ldr	r3, [r7, #16]
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d005      	beq.n	80197f2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80197e6:	693b      	ldr	r3, [r7, #16]
 80197e8:	2b05      	cmp	r3, #5
 80197ea:	d002      	beq.n	80197f2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80197ec:	693b      	ldr	r3, [r7, #16]
 80197ee:	2b09      	cmp	r3, #9
 80197f0:	d173      	bne.n	80198da <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80197f2:	68f8      	ldr	r0, [r7, #12]
 80197f4:	f001 f83c 	bl	801a870 <ADC_Enable>
 80197f8:	4603      	mov	r3, r0
 80197fa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80197fc:	7dfb      	ldrb	r3, [r7, #23]
 80197fe:	2b00      	cmp	r3, #0
 8019800:	d166      	bne.n	80198d0 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8019802:	68fb      	ldr	r3, [r7, #12]
 8019804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019806:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801980a:	f023 0301 	bic.w	r3, r3, #1
 801980e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8019812:	68fb      	ldr	r3, [r7, #12]
 8019814:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019816:	68fb      	ldr	r3, [r7, #12]
 8019818:	681b      	ldr	r3, [r3, #0]
 801981a:	4a37      	ldr	r2, [pc, #220]	; (80198f8 <HAL_ADC_Start_DMA+0x178>)
 801981c:	4293      	cmp	r3, r2
 801981e:	d002      	beq.n	8019826 <HAL_ADC_Start_DMA+0xa6>
 8019820:	68fb      	ldr	r3, [r7, #12]
 8019822:	681b      	ldr	r3, [r3, #0]
 8019824:	e001      	b.n	801982a <HAL_ADC_Start_DMA+0xaa>
 8019826:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801982a:	68fa      	ldr	r2, [r7, #12]
 801982c:	6812      	ldr	r2, [r2, #0]
 801982e:	4293      	cmp	r3, r2
 8019830:	d002      	beq.n	8019838 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019832:	693b      	ldr	r3, [r7, #16]
 8019834:	2b00      	cmp	r3, #0
 8019836:	d105      	bne.n	8019844 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8019838:	68fb      	ldr	r3, [r7, #12]
 801983a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801983c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8019840:	68fb      	ldr	r3, [r7, #12]
 8019842:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8019844:	68fb      	ldr	r3, [r7, #12]
 8019846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019848:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801984c:	2b00      	cmp	r3, #0
 801984e:	d006      	beq.n	801985e <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8019850:	68fb      	ldr	r3, [r7, #12]
 8019852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019854:	f023 0206 	bic.w	r2, r3, #6
 8019858:	68fb      	ldr	r3, [r7, #12]
 801985a:	661a      	str	r2, [r3, #96]	; 0x60
 801985c:	e002      	b.n	8019864 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 801985e:	68fb      	ldr	r3, [r7, #12]
 8019860:	2200      	movs	r2, #0
 8019862:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8019864:	68fb      	ldr	r3, [r7, #12]
 8019866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019868:	4a27      	ldr	r2, [pc, #156]	; (8019908 <HAL_ADC_Start_DMA+0x188>)
 801986a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 801986c:	68fb      	ldr	r3, [r7, #12]
 801986e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019870:	4a26      	ldr	r2, [pc, #152]	; (801990c <HAL_ADC_Start_DMA+0x18c>)
 8019872:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8019874:	68fb      	ldr	r3, [r7, #12]
 8019876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019878:	4a25      	ldr	r2, [pc, #148]	; (8019910 <HAL_ADC_Start_DMA+0x190>)
 801987a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 801987c:	68fb      	ldr	r3, [r7, #12]
 801987e:	681b      	ldr	r3, [r3, #0]
 8019880:	221c      	movs	r2, #28
 8019882:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8019884:	68fb      	ldr	r3, [r7, #12]
 8019886:	2200      	movs	r2, #0
 8019888:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 801988c:	68fb      	ldr	r3, [r7, #12]
 801988e:	681b      	ldr	r3, [r3, #0]
 8019890:	685a      	ldr	r2, [r3, #4]
 8019892:	68fb      	ldr	r3, [r7, #12]
 8019894:	681b      	ldr	r3, [r3, #0]
 8019896:	f042 0210 	orr.w	r2, r2, #16
 801989a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 801989c:	68fb      	ldr	r3, [r7, #12]
 801989e:	681b      	ldr	r3, [r3, #0]
 80198a0:	68da      	ldr	r2, [r3, #12]
 80198a2:	68fb      	ldr	r3, [r7, #12]
 80198a4:	681b      	ldr	r3, [r3, #0]
 80198a6:	f042 0201 	orr.w	r2, r2, #1
 80198aa:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80198ac:	68fb      	ldr	r3, [r7, #12]
 80198ae:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80198b0:	68fb      	ldr	r3, [r7, #12]
 80198b2:	681b      	ldr	r3, [r3, #0]
 80198b4:	3340      	adds	r3, #64	; 0x40
 80198b6:	4619      	mov	r1, r3
 80198b8:	68ba      	ldr	r2, [r7, #8]
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	f001 fcb4 	bl	801b228 <HAL_DMA_Start_IT>
 80198c0:	4603      	mov	r3, r0
 80198c2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80198c4:	68fb      	ldr	r3, [r7, #12]
 80198c6:	681b      	ldr	r3, [r3, #0]
 80198c8:	4618      	mov	r0, r3
 80198ca:	f7ff fb51 	bl	8018f70 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80198ce:	e00d      	b.n	80198ec <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80198d0:	68fb      	ldr	r3, [r7, #12]
 80198d2:	2200      	movs	r2, #0
 80198d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80198d8:	e008      	b.n	80198ec <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80198da:	2301      	movs	r3, #1
 80198dc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80198de:	68fb      	ldr	r3, [r7, #12]
 80198e0:	2200      	movs	r2, #0
 80198e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80198e6:	e001      	b.n	80198ec <HAL_ADC_Start_DMA+0x16c>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80198e8:	2302      	movs	r3, #2
 80198ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80198ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80198ee:	4618      	mov	r0, r3
 80198f0:	3718      	adds	r7, #24
 80198f2:	46bd      	mov	sp, r7
 80198f4:	bd80      	pop	{r7, pc}
 80198f6:	bf00      	nop
 80198f8:	50000100 	.word	0x50000100
 80198fc:	50000300 	.word	0x50000300
 8019900:	50000700 	.word	0x50000700
 8019904:	50000400 	.word	0x50000400
 8019908:	0801a9f3 	.word	0x0801a9f3
 801990c:	0801aacb 	.word	0x0801aacb
 8019910:	0801aae7 	.word	0x0801aae7

08019914 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8019914:	b580      	push	{r7, lr}
 8019916:	b084      	sub	sp, #16
 8019918:	af00      	add	r7, sp, #0
 801991a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019922:	2b01      	cmp	r3, #1
 8019924:	d101      	bne.n	801992a <HAL_ADC_Stop_DMA+0x16>
 8019926:	2302      	movs	r3, #2
 8019928:	e051      	b.n	80199ce <HAL_ADC_Stop_DMA+0xba>
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	2201      	movs	r2, #1
 801992e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8019932:	2103      	movs	r1, #3
 8019934:	6878      	ldr	r0, [r7, #4]
 8019936:	f000 fedf 	bl	801a6f8 <ADC_ConversionStop>
 801993a:	4603      	mov	r3, r0
 801993c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 801993e:	7bfb      	ldrb	r3, [r7, #15]
 8019940:	2b00      	cmp	r3, #0
 8019942:	d13f      	bne.n	80199c4 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	681b      	ldr	r3, [r3, #0]
 8019948:	68da      	ldr	r2, [r3, #12]
 801994a:	687b      	ldr	r3, [r7, #4]
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	f022 0201 	bic.w	r2, r2, #1
 8019952:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019958:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801995c:	b2db      	uxtb	r3, r3
 801995e:	2b02      	cmp	r3, #2
 8019960:	d10f      	bne.n	8019982 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019966:	4618      	mov	r0, r3
 8019968:	f001 fcd9 	bl	801b31e <HAL_DMA_Abort>
 801996c:	4603      	mov	r3, r0
 801996e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8019970:	7bfb      	ldrb	r3, [r7, #15]
 8019972:	2b00      	cmp	r3, #0
 8019974:	d005      	beq.n	8019982 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801997a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	681b      	ldr	r3, [r3, #0]
 8019986:	685a      	ldr	r2, [r3, #4]
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	681b      	ldr	r3, [r3, #0]
 801998c:	f022 0210 	bic.w	r2, r2, #16
 8019990:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8019992:	7bfb      	ldrb	r3, [r7, #15]
 8019994:	2b00      	cmp	r3, #0
 8019996:	d105      	bne.n	80199a4 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8019998:	6878      	ldr	r0, [r7, #4]
 801999a:	f000 ffcb 	bl	801a934 <ADC_Disable>
 801999e:	4603      	mov	r3, r0
 80199a0:	73fb      	strb	r3, [r7, #15]
 80199a2:	e002      	b.n	80199aa <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80199a4:	6878      	ldr	r0, [r7, #4]
 80199a6:	f000 ffc5 	bl	801a934 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80199aa:	7bfb      	ldrb	r3, [r7, #15]
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	d109      	bne.n	80199c4 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80199b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80199b8:	f023 0301 	bic.w	r3, r3, #1
 80199bc:	f043 0201 	orr.w	r2, r3, #1
 80199c0:	687b      	ldr	r3, [r7, #4]
 80199c2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	2200      	movs	r2, #0
 80199c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80199cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80199ce:	4618      	mov	r0, r3
 80199d0:	3710      	adds	r7, #16
 80199d2:	46bd      	mov	sp, r7
 80199d4:	bd80      	pop	{r7, pc}

080199d6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80199d6:	b480      	push	{r7}
 80199d8:	b083      	sub	sp, #12
 80199da:	af00      	add	r7, sp, #0
 80199dc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	681b      	ldr	r3, [r3, #0]
 80199e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80199e4:	4618      	mov	r0, r3
 80199e6:	370c      	adds	r7, #12
 80199e8:	46bd      	mov	sp, r7
 80199ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199ee:	4770      	bx	lr

080199f0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80199f0:	b580      	push	{r7, lr}
 80199f2:	b08a      	sub	sp, #40	; 0x28
 80199f4:	af00      	add	r7, sp, #0
 80199f6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80199f8:	2300      	movs	r3, #0
 80199fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	681b      	ldr	r3, [r3, #0]
 8019a00:	681b      	ldr	r3, [r3, #0]
 8019a02:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	681b      	ldr	r3, [r3, #0]
 8019a08:	685b      	ldr	r3, [r3, #4]
 8019a0a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	681b      	ldr	r3, [r3, #0]
 8019a10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019a14:	d004      	beq.n	8019a20 <HAL_ADC_IRQHandler+0x30>
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	681b      	ldr	r3, [r3, #0]
 8019a1a:	4a87      	ldr	r2, [pc, #540]	; (8019c38 <HAL_ADC_IRQHandler+0x248>)
 8019a1c:	4293      	cmp	r3, r2
 8019a1e:	d101      	bne.n	8019a24 <HAL_ADC_IRQHandler+0x34>
 8019a20:	4b86      	ldr	r3, [pc, #536]	; (8019c3c <HAL_ADC_IRQHandler+0x24c>)
 8019a22:	e000      	b.n	8019a26 <HAL_ADC_IRQHandler+0x36>
 8019a24:	4b86      	ldr	r3, [pc, #536]	; (8019c40 <HAL_ADC_IRQHandler+0x250>)
 8019a26:	4618      	mov	r0, r3
 8019a28:	f7ff f9ea 	bl	8018e00 <LL_ADC_GetMultimode>
 8019a2c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8019a2e:	69fb      	ldr	r3, [r7, #28]
 8019a30:	f003 0302 	and.w	r3, r3, #2
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	d017      	beq.n	8019a68 <HAL_ADC_IRQHandler+0x78>
 8019a38:	69bb      	ldr	r3, [r7, #24]
 8019a3a:	f003 0302 	and.w	r3, r3, #2
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	d012      	beq.n	8019a68 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a46:	f003 0310 	and.w	r3, r3, #16
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d105      	bne.n	8019a5a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a52:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8019a56:	687b      	ldr	r3, [r7, #4]
 8019a58:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8019a5a:	6878      	ldr	r0, [r7, #4]
 8019a5c:	f001 f93a 	bl	801acd4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8019a60:	687b      	ldr	r3, [r7, #4]
 8019a62:	681b      	ldr	r3, [r3, #0]
 8019a64:	2202      	movs	r2, #2
 8019a66:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8019a68:	69fb      	ldr	r3, [r7, #28]
 8019a6a:	f003 0304 	and.w	r3, r3, #4
 8019a6e:	2b00      	cmp	r3, #0
 8019a70:	d004      	beq.n	8019a7c <HAL_ADC_IRQHandler+0x8c>
 8019a72:	69bb      	ldr	r3, [r7, #24]
 8019a74:	f003 0304 	and.w	r3, r3, #4
 8019a78:	2b00      	cmp	r3, #0
 8019a7a:	d10a      	bne.n	8019a92 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8019a7c:	69fb      	ldr	r3, [r7, #28]
 8019a7e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8019a82:	2b00      	cmp	r3, #0
 8019a84:	f000 8085 	beq.w	8019b92 <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8019a88:	69bb      	ldr	r3, [r7, #24]
 8019a8a:	f003 0308 	and.w	r3, r3, #8
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d07f      	beq.n	8019b92 <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a96:	f003 0310 	and.w	r3, r3, #16
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	d105      	bne.n	8019aaa <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019aa2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8019aaa:	687b      	ldr	r3, [r7, #4]
 8019aac:	681b      	ldr	r3, [r3, #0]
 8019aae:	4618      	mov	r0, r3
 8019ab0:	f7ff f900 	bl	8018cb4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8019ab4:	4603      	mov	r3, r0
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d064      	beq.n	8019b84 <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	681b      	ldr	r3, [r3, #0]
 8019abe:	4a5e      	ldr	r2, [pc, #376]	; (8019c38 <HAL_ADC_IRQHandler+0x248>)
 8019ac0:	4293      	cmp	r3, r2
 8019ac2:	d002      	beq.n	8019aca <HAL_ADC_IRQHandler+0xda>
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	681b      	ldr	r3, [r3, #0]
 8019ac8:	e001      	b.n	8019ace <HAL_ADC_IRQHandler+0xde>
 8019aca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019ace:	687a      	ldr	r2, [r7, #4]
 8019ad0:	6812      	ldr	r2, [r2, #0]
 8019ad2:	4293      	cmp	r3, r2
 8019ad4:	d008      	beq.n	8019ae8 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019ad6:	697b      	ldr	r3, [r7, #20]
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d005      	beq.n	8019ae8 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8019adc:	697b      	ldr	r3, [r7, #20]
 8019ade:	2b05      	cmp	r3, #5
 8019ae0:	d002      	beq.n	8019ae8 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8019ae2:	697b      	ldr	r3, [r7, #20]
 8019ae4:	2b09      	cmp	r3, #9
 8019ae6:	d104      	bne.n	8019af2 <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	681b      	ldr	r3, [r3, #0]
 8019aec:	68db      	ldr	r3, [r3, #12]
 8019aee:	623b      	str	r3, [r7, #32]
 8019af0:	e00d      	b.n	8019b0e <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8019af2:	687b      	ldr	r3, [r7, #4]
 8019af4:	681b      	ldr	r3, [r3, #0]
 8019af6:	4a50      	ldr	r2, [pc, #320]	; (8019c38 <HAL_ADC_IRQHandler+0x248>)
 8019af8:	4293      	cmp	r3, r2
 8019afa:	d002      	beq.n	8019b02 <HAL_ADC_IRQHandler+0x112>
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	681b      	ldr	r3, [r3, #0]
 8019b00:	e001      	b.n	8019b06 <HAL_ADC_IRQHandler+0x116>
 8019b02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019b06:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8019b08:	693b      	ldr	r3, [r7, #16]
 8019b0a:	68db      	ldr	r3, [r3, #12]
 8019b0c:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8019b0e:	6a3b      	ldr	r3, [r7, #32]
 8019b10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d135      	bne.n	8019b84 <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	681b      	ldr	r3, [r3, #0]
 8019b1c:	681b      	ldr	r3, [r3, #0]
 8019b1e:	f003 0308 	and.w	r3, r3, #8
 8019b22:	2b08      	cmp	r3, #8
 8019b24:	d12e      	bne.n	8019b84 <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	4618      	mov	r0, r3
 8019b2c:	f7ff fa48 	bl	8018fc0 <LL_ADC_REG_IsConversionOngoing>
 8019b30:	4603      	mov	r3, r0
 8019b32:	2b00      	cmp	r3, #0
 8019b34:	d11a      	bne.n	8019b6c <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	681b      	ldr	r3, [r3, #0]
 8019b3a:	685a      	ldr	r2, [r3, #4]
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	f022 020c 	bic.w	r2, r2, #12
 8019b44:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019b5a:	2b00      	cmp	r3, #0
 8019b5c:	d112      	bne.n	8019b84 <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b62:	f043 0201 	orr.w	r2, r3, #1
 8019b66:	687b      	ldr	r3, [r7, #4]
 8019b68:	65da      	str	r2, [r3, #92]	; 0x5c
 8019b6a:	e00b      	b.n	8019b84 <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b70:	f043 0210 	orr.w	r2, r3, #16
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019b7c:	f043 0201 	orr.w	r2, r3, #1
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8019b84:	6878      	ldr	r0, [r7, #4]
 8019b86:	f7ee fdbb 	bl	8008700 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	681b      	ldr	r3, [r3, #0]
 8019b8e:	220c      	movs	r2, #12
 8019b90:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8019b92:	69fb      	ldr	r3, [r7, #28]
 8019b94:	f003 0320 	and.w	r3, r3, #32
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d004      	beq.n	8019ba6 <HAL_ADC_IRQHandler+0x1b6>
 8019b9c:	69bb      	ldr	r3, [r7, #24]
 8019b9e:	f003 0320 	and.w	r3, r3, #32
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	d10b      	bne.n	8019bbe <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8019ba6:	69fb      	ldr	r3, [r7, #28]
 8019ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	f000 80a1 	beq.w	8019cf4 <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8019bb2:	69bb      	ldr	r3, [r7, #24]
 8019bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	f000 809b 	beq.w	8019cf4 <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019bc2:	f003 0310 	and.w	r3, r3, #16
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	d105      	bne.n	8019bd6 <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019bce:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8019bd6:	687b      	ldr	r3, [r7, #4]
 8019bd8:	681b      	ldr	r3, [r3, #0]
 8019bda:	4618      	mov	r0, r3
 8019bdc:	f7ff f8a9 	bl	8018d32 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8019be0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	4618      	mov	r0, r3
 8019be8:	f7ff f864 	bl	8018cb4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8019bec:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	681b      	ldr	r3, [r3, #0]
 8019bf2:	4a11      	ldr	r2, [pc, #68]	; (8019c38 <HAL_ADC_IRQHandler+0x248>)
 8019bf4:	4293      	cmp	r3, r2
 8019bf6:	d002      	beq.n	8019bfe <HAL_ADC_IRQHandler+0x20e>
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	681b      	ldr	r3, [r3, #0]
 8019bfc:	e001      	b.n	8019c02 <HAL_ADC_IRQHandler+0x212>
 8019bfe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019c02:	687a      	ldr	r2, [r7, #4]
 8019c04:	6812      	ldr	r2, [r2, #0]
 8019c06:	4293      	cmp	r3, r2
 8019c08:	d008      	beq.n	8019c1c <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019c0a:	697b      	ldr	r3, [r7, #20]
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d005      	beq.n	8019c1c <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8019c10:	697b      	ldr	r3, [r7, #20]
 8019c12:	2b06      	cmp	r3, #6
 8019c14:	d002      	beq.n	8019c1c <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8019c16:	697b      	ldr	r3, [r7, #20]
 8019c18:	2b07      	cmp	r3, #7
 8019c1a:	d104      	bne.n	8019c26 <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8019c1c:	687b      	ldr	r3, [r7, #4]
 8019c1e:	681b      	ldr	r3, [r3, #0]
 8019c20:	68db      	ldr	r3, [r3, #12]
 8019c22:	623b      	str	r3, [r7, #32]
 8019c24:	e014      	b.n	8019c50 <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	681b      	ldr	r3, [r3, #0]
 8019c2a:	4a03      	ldr	r2, [pc, #12]	; (8019c38 <HAL_ADC_IRQHandler+0x248>)
 8019c2c:	4293      	cmp	r3, r2
 8019c2e:	d009      	beq.n	8019c44 <HAL_ADC_IRQHandler+0x254>
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	e008      	b.n	8019c48 <HAL_ADC_IRQHandler+0x258>
 8019c36:	bf00      	nop
 8019c38:	50000100 	.word	0x50000100
 8019c3c:	50000300 	.word	0x50000300
 8019c40:	50000700 	.word	0x50000700
 8019c44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019c48:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8019c4a:	693b      	ldr	r3, [r7, #16]
 8019c4c:	68db      	ldr	r3, [r3, #12]
 8019c4e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8019c50:	68fb      	ldr	r3, [r7, #12]
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d047      	beq.n	8019ce6 <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8019c56:	6a3b      	ldr	r3, [r7, #32]
 8019c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019c5c:	2b00      	cmp	r3, #0
 8019c5e:	d007      	beq.n	8019c70 <HAL_ADC_IRQHandler+0x280>
 8019c60:	68bb      	ldr	r3, [r7, #8]
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	d03f      	beq.n	8019ce6 <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8019c66:	6a3b      	ldr	r3, [r7, #32]
 8019c68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	d13a      	bne.n	8019ce6 <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	681b      	ldr	r3, [r3, #0]
 8019c74:	681b      	ldr	r3, [r3, #0]
 8019c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019c7a:	2b40      	cmp	r3, #64	; 0x40
 8019c7c:	d133      	bne.n	8019ce6 <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8019c7e:	6a3b      	ldr	r3, [r7, #32]
 8019c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	d12e      	bne.n	8019ce6 <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	681b      	ldr	r3, [r3, #0]
 8019c8c:	4618      	mov	r0, r3
 8019c8e:	f7ff f9be 	bl	801900e <LL_ADC_INJ_IsConversionOngoing>
 8019c92:	4603      	mov	r3, r0
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	d11a      	bne.n	8019cce <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	685a      	ldr	r2, [r3, #4]
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	681b      	ldr	r3, [r3, #0]
 8019ca2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019ca6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8019ca8:	687b      	ldr	r3, [r7, #4]
 8019caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019cac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	d112      	bne.n	8019ce6 <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019cc4:	f043 0201 	orr.w	r2, r3, #1
 8019cc8:	687b      	ldr	r3, [r7, #4]
 8019cca:	65da      	str	r2, [r3, #92]	; 0x5c
 8019ccc:	e00b      	b.n	8019ce6 <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019cd2:	f043 0210 	orr.w	r2, r3, #16
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019cde:	f043 0201 	orr.w	r2, r3, #1
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8019ce6:	6878      	ldr	r0, [r7, #4]
 8019ce8:	f000 ffcc 	bl	801ac84 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	2260      	movs	r2, #96	; 0x60
 8019cf2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8019cf4:	69fb      	ldr	r3, [r7, #28]
 8019cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	d011      	beq.n	8019d22 <HAL_ADC_IRQHandler+0x332>
 8019cfe:	69bb      	ldr	r3, [r7, #24]
 8019d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019d04:	2b00      	cmp	r3, #0
 8019d06:	d00c      	beq.n	8019d22 <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8019d08:	687b      	ldr	r3, [r7, #4]
 8019d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019d0c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8019d14:	6878      	ldr	r0, [r7, #4]
 8019d16:	f000 f8af 	bl	8019e78 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	681b      	ldr	r3, [r3, #0]
 8019d1e:	2280      	movs	r2, #128	; 0x80
 8019d20:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8019d22:	69fb      	ldr	r3, [r7, #28]
 8019d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	d012      	beq.n	8019d52 <HAL_ADC_IRQHandler+0x362>
 8019d2c:	69bb      	ldr	r3, [r7, #24]
 8019d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	d00d      	beq.n	8019d52 <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019d3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8019d3e:	687b      	ldr	r3, [r7, #4]
 8019d40:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8019d42:	6878      	ldr	r0, [r7, #4]
 8019d44:	f000 ffb2 	bl	801acac <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	681b      	ldr	r3, [r3, #0]
 8019d4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019d50:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8019d52:	69fb      	ldr	r3, [r7, #28]
 8019d54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d012      	beq.n	8019d82 <HAL_ADC_IRQHandler+0x392>
 8019d5c:	69bb      	ldr	r3, [r7, #24]
 8019d5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	d00d      	beq.n	8019d82 <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019d6a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8019d72:	6878      	ldr	r0, [r7, #4]
 8019d74:	f000 ffa4 	bl	801acc0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8019d78:	687b      	ldr	r3, [r7, #4]
 8019d7a:	681b      	ldr	r3, [r3, #0]
 8019d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019d80:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8019d82:	69fb      	ldr	r3, [r7, #28]
 8019d84:	f003 0310 	and.w	r3, r3, #16
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d043      	beq.n	8019e14 <HAL_ADC_IRQHandler+0x424>
 8019d8c:	69bb      	ldr	r3, [r7, #24]
 8019d8e:	f003 0310 	and.w	r3, r3, #16
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	d03e      	beq.n	8019e14 <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	d102      	bne.n	8019da4 <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 8019d9e:	2301      	movs	r3, #1
 8019da0:	627b      	str	r3, [r7, #36]	; 0x24
 8019da2:	e021      	b.n	8019de8 <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8019da4:	697b      	ldr	r3, [r7, #20]
 8019da6:	2b00      	cmp	r3, #0
 8019da8:	d015      	beq.n	8019dd6 <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019db2:	d004      	beq.n	8019dbe <HAL_ADC_IRQHandler+0x3ce>
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	4a27      	ldr	r2, [pc, #156]	; (8019e58 <HAL_ADC_IRQHandler+0x468>)
 8019dba:	4293      	cmp	r3, r2
 8019dbc:	d101      	bne.n	8019dc2 <HAL_ADC_IRQHandler+0x3d2>
 8019dbe:	4b27      	ldr	r3, [pc, #156]	; (8019e5c <HAL_ADC_IRQHandler+0x46c>)
 8019dc0:	e000      	b.n	8019dc4 <HAL_ADC_IRQHandler+0x3d4>
 8019dc2:	4b27      	ldr	r3, [pc, #156]	; (8019e60 <HAL_ADC_IRQHandler+0x470>)
 8019dc4:	4618      	mov	r0, r3
 8019dc6:	f7ff f829 	bl	8018e1c <LL_ADC_GetMultiDMATransfer>
 8019dca:	4603      	mov	r3, r0
 8019dcc:	2b00      	cmp	r3, #0
 8019dce:	d00b      	beq.n	8019de8 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8019dd0:	2301      	movs	r3, #1
 8019dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8019dd4:	e008      	b.n	8019de8 <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	681b      	ldr	r3, [r3, #0]
 8019dda:	68db      	ldr	r3, [r3, #12]
 8019ddc:	f003 0301 	and.w	r3, r3, #1
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	d001      	beq.n	8019de8 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8019de4:	2301      	movs	r3, #1
 8019de6:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8019de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dea:	2b01      	cmp	r3, #1
 8019dec:	d10e      	bne.n	8019e0c <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019df2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019dfe:	f043 0202 	orr.w	r2, r3, #2
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8019e06:	6878      	ldr	r0, [r7, #4]
 8019e08:	f000 f840 	bl	8019e8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	681b      	ldr	r3, [r3, #0]
 8019e10:	2210      	movs	r2, #16
 8019e12:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8019e14:	69fb      	ldr	r3, [r7, #28]
 8019e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	d018      	beq.n	8019e50 <HAL_ADC_IRQHandler+0x460>
 8019e1e:	69bb      	ldr	r3, [r7, #24]
 8019e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d013      	beq.n	8019e50 <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019e2c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019e38:	f043 0208 	orr.w	r2, r3, #8
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	681b      	ldr	r3, [r3, #0]
 8019e44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019e48:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8019e4a:	6878      	ldr	r0, [r7, #4]
 8019e4c:	f000 ff24 	bl	801ac98 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8019e50:	bf00      	nop
 8019e52:	3728      	adds	r7, #40	; 0x28
 8019e54:	46bd      	mov	sp, r7
 8019e56:	bd80      	pop	{r7, pc}
 8019e58:	50000100 	.word	0x50000100
 8019e5c:	50000300 	.word	0x50000300
 8019e60:	50000700 	.word	0x50000700

08019e64 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8019e64:	b480      	push	{r7}
 8019e66:	b083      	sub	sp, #12
 8019e68:	af00      	add	r7, sp, #0
 8019e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8019e6c:	bf00      	nop
 8019e6e:	370c      	adds	r7, #12
 8019e70:	46bd      	mov	sp, r7
 8019e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e76:	4770      	bx	lr

08019e78 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8019e78:	b480      	push	{r7}
 8019e7a:	b083      	sub	sp, #12
 8019e7c:	af00      	add	r7, sp, #0
 8019e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8019e80:	bf00      	nop
 8019e82:	370c      	adds	r7, #12
 8019e84:	46bd      	mov	sp, r7
 8019e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e8a:	4770      	bx	lr

08019e8c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8019e8c:	b480      	push	{r7}
 8019e8e:	b083      	sub	sp, #12
 8019e90:	af00      	add	r7, sp, #0
 8019e92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8019e94:	bf00      	nop
 8019e96:	370c      	adds	r7, #12
 8019e98:	46bd      	mov	sp, r7
 8019e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e9e:	4770      	bx	lr

08019ea0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8019ea0:	b580      	push	{r7, lr}
 8019ea2:	b0b6      	sub	sp, #216	; 0xd8
 8019ea4:	af00      	add	r7, sp, #0
 8019ea6:	6078      	str	r0, [r7, #4]
 8019ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8019eaa:	2300      	movs	r3, #0
 8019eac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8019eb0:	2300      	movs	r3, #0
 8019eb2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019eba:	2b01      	cmp	r3, #1
 8019ebc:	d102      	bne.n	8019ec4 <HAL_ADC_ConfigChannel+0x24>
 8019ebe:	2302      	movs	r3, #2
 8019ec0:	f000 bc04 	b.w	801a6cc <HAL_ADC_ConfigChannel+0x82c>
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	2201      	movs	r2, #1
 8019ec8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	681b      	ldr	r3, [r3, #0]
 8019ed0:	4618      	mov	r0, r3
 8019ed2:	f7ff f875 	bl	8018fc0 <LL_ADC_REG_IsConversionOngoing>
 8019ed6:	4603      	mov	r3, r0
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	f040 83e8 	bne.w	801a6ae <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	6818      	ldr	r0, [r3, #0]
 8019ee2:	683b      	ldr	r3, [r7, #0]
 8019ee4:	6859      	ldr	r1, [r3, #4]
 8019ee6:	683b      	ldr	r3, [r7, #0]
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	461a      	mov	r2, r3
 8019eec:	f7fe fef5 	bl	8018cda <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	681b      	ldr	r3, [r3, #0]
 8019ef4:	4618      	mov	r0, r3
 8019ef6:	f7ff f863 	bl	8018fc0 <LL_ADC_REG_IsConversionOngoing>
 8019efa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	681b      	ldr	r3, [r3, #0]
 8019f02:	4618      	mov	r0, r3
 8019f04:	f7ff f883 	bl	801900e <LL_ADC_INJ_IsConversionOngoing>
 8019f08:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8019f0c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	f040 81d9 	bne.w	801a2c8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8019f16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8019f1a:	2b00      	cmp	r3, #0
 8019f1c:	f040 81d4 	bne.w	801a2c8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8019f20:	683b      	ldr	r3, [r7, #0]
 8019f22:	689b      	ldr	r3, [r3, #8]
 8019f24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019f28:	d10f      	bne.n	8019f4a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	6818      	ldr	r0, [r3, #0]
 8019f2e:	683b      	ldr	r3, [r7, #0]
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	2200      	movs	r2, #0
 8019f34:	4619      	mov	r1, r3
 8019f36:	f7fe ff0f 	bl	8018d58 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	681b      	ldr	r3, [r3, #0]
 8019f3e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8019f42:	4618      	mov	r0, r3
 8019f44:	f7fe fea3 	bl	8018c8e <LL_ADC_SetSamplingTimeCommonConfig>
 8019f48:	e00e      	b.n	8019f68 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	6818      	ldr	r0, [r3, #0]
 8019f4e:	683b      	ldr	r3, [r7, #0]
 8019f50:	6819      	ldr	r1, [r3, #0]
 8019f52:	683b      	ldr	r3, [r7, #0]
 8019f54:	689b      	ldr	r3, [r3, #8]
 8019f56:	461a      	mov	r2, r3
 8019f58:	f7fe fefe 	bl	8018d58 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	2100      	movs	r1, #0
 8019f62:	4618      	mov	r0, r3
 8019f64:	f7fe fe93 	bl	8018c8e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8019f68:	683b      	ldr	r3, [r7, #0]
 8019f6a:	695a      	ldr	r2, [r3, #20]
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	681b      	ldr	r3, [r3, #0]
 8019f70:	68db      	ldr	r3, [r3, #12]
 8019f72:	08db      	lsrs	r3, r3, #3
 8019f74:	f003 0303 	and.w	r3, r3, #3
 8019f78:	005b      	lsls	r3, r3, #1
 8019f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8019f7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8019f82:	683b      	ldr	r3, [r7, #0]
 8019f84:	691b      	ldr	r3, [r3, #16]
 8019f86:	2b04      	cmp	r3, #4
 8019f88:	d022      	beq.n	8019fd0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	6818      	ldr	r0, [r3, #0]
 8019f8e:	683b      	ldr	r3, [r7, #0]
 8019f90:	6919      	ldr	r1, [r3, #16]
 8019f92:	683b      	ldr	r3, [r7, #0]
 8019f94:	681a      	ldr	r2, [r3, #0]
 8019f96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8019f9a:	f7fe fded 	bl	8018b78 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	6818      	ldr	r0, [r3, #0]
 8019fa2:	683b      	ldr	r3, [r7, #0]
 8019fa4:	6919      	ldr	r1, [r3, #16]
 8019fa6:	683b      	ldr	r3, [r7, #0]
 8019fa8:	699b      	ldr	r3, [r3, #24]
 8019faa:	461a      	mov	r2, r3
 8019fac:	f7fe fe39 	bl	8018c22 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	6818      	ldr	r0, [r3, #0]
 8019fb4:	683b      	ldr	r3, [r7, #0]
 8019fb6:	6919      	ldr	r1, [r3, #16]
 8019fb8:	683b      	ldr	r3, [r7, #0]
 8019fba:	7f1b      	ldrb	r3, [r3, #28]
 8019fbc:	2b01      	cmp	r3, #1
 8019fbe:	d102      	bne.n	8019fc6 <HAL_ADC_ConfigChannel+0x126>
 8019fc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8019fc4:	e000      	b.n	8019fc8 <HAL_ADC_ConfigChannel+0x128>
 8019fc6:	2300      	movs	r3, #0
 8019fc8:	461a      	mov	r2, r3
 8019fca:	f7fe fe45 	bl	8018c58 <LL_ADC_SetOffsetSaturation>
 8019fce:	e17b      	b.n	801a2c8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	2100      	movs	r1, #0
 8019fd6:	4618      	mov	r0, r3
 8019fd8:	f7fe fdf2 	bl	8018bc0 <LL_ADC_GetOffsetChannel>
 8019fdc:	4603      	mov	r3, r0
 8019fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d10a      	bne.n	8019ffc <HAL_ADC_ConfigChannel+0x15c>
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	681b      	ldr	r3, [r3, #0]
 8019fea:	2100      	movs	r1, #0
 8019fec:	4618      	mov	r0, r3
 8019fee:	f7fe fde7 	bl	8018bc0 <LL_ADC_GetOffsetChannel>
 8019ff2:	4603      	mov	r3, r0
 8019ff4:	0e9b      	lsrs	r3, r3, #26
 8019ff6:	f003 021f 	and.w	r2, r3, #31
 8019ffa:	e01e      	b.n	801a03a <HAL_ADC_ConfigChannel+0x19a>
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	681b      	ldr	r3, [r3, #0]
 801a000:	2100      	movs	r1, #0
 801a002:	4618      	mov	r0, r3
 801a004:	f7fe fddc 	bl	8018bc0 <LL_ADC_GetOffsetChannel>
 801a008:	4603      	mov	r3, r0
 801a00a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a00e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801a012:	fa93 f3a3 	rbit	r3, r3
 801a016:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 801a01a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801a01e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 801a022:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801a026:	2b00      	cmp	r3, #0
 801a028:	d101      	bne.n	801a02e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 801a02a:	2320      	movs	r3, #32
 801a02c:	e004      	b.n	801a038 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 801a02e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801a032:	fab3 f383 	clz	r3, r3
 801a036:	b2db      	uxtb	r3, r3
 801a038:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801a03a:	683b      	ldr	r3, [r7, #0]
 801a03c:	681b      	ldr	r3, [r3, #0]
 801a03e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a042:	2b00      	cmp	r3, #0
 801a044:	d105      	bne.n	801a052 <HAL_ADC_ConfigChannel+0x1b2>
 801a046:	683b      	ldr	r3, [r7, #0]
 801a048:	681b      	ldr	r3, [r3, #0]
 801a04a:	0e9b      	lsrs	r3, r3, #26
 801a04c:	f003 031f 	and.w	r3, r3, #31
 801a050:	e018      	b.n	801a084 <HAL_ADC_ConfigChannel+0x1e4>
 801a052:	683b      	ldr	r3, [r7, #0]
 801a054:	681b      	ldr	r3, [r3, #0]
 801a056:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a05a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a05e:	fa93 f3a3 	rbit	r3, r3
 801a062:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 801a066:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801a06a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 801a06e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a072:	2b00      	cmp	r3, #0
 801a074:	d101      	bne.n	801a07a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 801a076:	2320      	movs	r3, #32
 801a078:	e004      	b.n	801a084 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 801a07a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a07e:	fab3 f383 	clz	r3, r3
 801a082:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 801a084:	429a      	cmp	r2, r3
 801a086:	d106      	bne.n	801a096 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	681b      	ldr	r3, [r3, #0]
 801a08c:	2200      	movs	r2, #0
 801a08e:	2100      	movs	r1, #0
 801a090:	4618      	mov	r0, r3
 801a092:	f7fe fdab 	bl	8018bec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	681b      	ldr	r3, [r3, #0]
 801a09a:	2101      	movs	r1, #1
 801a09c:	4618      	mov	r0, r3
 801a09e:	f7fe fd8f 	bl	8018bc0 <LL_ADC_GetOffsetChannel>
 801a0a2:	4603      	mov	r3, r0
 801a0a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a0a8:	2b00      	cmp	r3, #0
 801a0aa:	d10a      	bne.n	801a0c2 <HAL_ADC_ConfigChannel+0x222>
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	681b      	ldr	r3, [r3, #0]
 801a0b0:	2101      	movs	r1, #1
 801a0b2:	4618      	mov	r0, r3
 801a0b4:	f7fe fd84 	bl	8018bc0 <LL_ADC_GetOffsetChannel>
 801a0b8:	4603      	mov	r3, r0
 801a0ba:	0e9b      	lsrs	r3, r3, #26
 801a0bc:	f003 021f 	and.w	r2, r3, #31
 801a0c0:	e01e      	b.n	801a100 <HAL_ADC_ConfigChannel+0x260>
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	681b      	ldr	r3, [r3, #0]
 801a0c6:	2101      	movs	r1, #1
 801a0c8:	4618      	mov	r0, r3
 801a0ca:	f7fe fd79 	bl	8018bc0 <LL_ADC_GetOffsetChannel>
 801a0ce:	4603      	mov	r3, r0
 801a0d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a0d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801a0d8:	fa93 f3a3 	rbit	r3, r3
 801a0dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 801a0e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801a0e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 801a0e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801a0ec:	2b00      	cmp	r3, #0
 801a0ee:	d101      	bne.n	801a0f4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 801a0f0:	2320      	movs	r3, #32
 801a0f2:	e004      	b.n	801a0fe <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 801a0f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801a0f8:	fab3 f383 	clz	r3, r3
 801a0fc:	b2db      	uxtb	r3, r3
 801a0fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801a100:	683b      	ldr	r3, [r7, #0]
 801a102:	681b      	ldr	r3, [r3, #0]
 801a104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a108:	2b00      	cmp	r3, #0
 801a10a:	d105      	bne.n	801a118 <HAL_ADC_ConfigChannel+0x278>
 801a10c:	683b      	ldr	r3, [r7, #0]
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	0e9b      	lsrs	r3, r3, #26
 801a112:	f003 031f 	and.w	r3, r3, #31
 801a116:	e018      	b.n	801a14a <HAL_ADC_ConfigChannel+0x2aa>
 801a118:	683b      	ldr	r3, [r7, #0]
 801a11a:	681b      	ldr	r3, [r3, #0]
 801a11c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a120:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801a124:	fa93 f3a3 	rbit	r3, r3
 801a128:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 801a12c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801a130:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 801a134:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a138:	2b00      	cmp	r3, #0
 801a13a:	d101      	bne.n	801a140 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 801a13c:	2320      	movs	r3, #32
 801a13e:	e004      	b.n	801a14a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 801a140:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a144:	fab3 f383 	clz	r3, r3
 801a148:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 801a14a:	429a      	cmp	r2, r3
 801a14c:	d106      	bne.n	801a15c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	681b      	ldr	r3, [r3, #0]
 801a152:	2200      	movs	r2, #0
 801a154:	2101      	movs	r1, #1
 801a156:	4618      	mov	r0, r3
 801a158:	f7fe fd48 	bl	8018bec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	681b      	ldr	r3, [r3, #0]
 801a160:	2102      	movs	r1, #2
 801a162:	4618      	mov	r0, r3
 801a164:	f7fe fd2c 	bl	8018bc0 <LL_ADC_GetOffsetChannel>
 801a168:	4603      	mov	r3, r0
 801a16a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a16e:	2b00      	cmp	r3, #0
 801a170:	d10a      	bne.n	801a188 <HAL_ADC_ConfigChannel+0x2e8>
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	2102      	movs	r1, #2
 801a178:	4618      	mov	r0, r3
 801a17a:	f7fe fd21 	bl	8018bc0 <LL_ADC_GetOffsetChannel>
 801a17e:	4603      	mov	r3, r0
 801a180:	0e9b      	lsrs	r3, r3, #26
 801a182:	f003 021f 	and.w	r2, r3, #31
 801a186:	e01e      	b.n	801a1c6 <HAL_ADC_ConfigChannel+0x326>
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	681b      	ldr	r3, [r3, #0]
 801a18c:	2102      	movs	r1, #2
 801a18e:	4618      	mov	r0, r3
 801a190:	f7fe fd16 	bl	8018bc0 <LL_ADC_GetOffsetChannel>
 801a194:	4603      	mov	r3, r0
 801a196:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a19a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a19e:	fa93 f3a3 	rbit	r3, r3
 801a1a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 801a1a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801a1aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 801a1ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a1b2:	2b00      	cmp	r3, #0
 801a1b4:	d101      	bne.n	801a1ba <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 801a1b6:	2320      	movs	r3, #32
 801a1b8:	e004      	b.n	801a1c4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 801a1ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a1be:	fab3 f383 	clz	r3, r3
 801a1c2:	b2db      	uxtb	r3, r3
 801a1c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801a1c6:	683b      	ldr	r3, [r7, #0]
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a1ce:	2b00      	cmp	r3, #0
 801a1d0:	d105      	bne.n	801a1de <HAL_ADC_ConfigChannel+0x33e>
 801a1d2:	683b      	ldr	r3, [r7, #0]
 801a1d4:	681b      	ldr	r3, [r3, #0]
 801a1d6:	0e9b      	lsrs	r3, r3, #26
 801a1d8:	f003 031f 	and.w	r3, r3, #31
 801a1dc:	e016      	b.n	801a20c <HAL_ADC_ConfigChannel+0x36c>
 801a1de:	683b      	ldr	r3, [r7, #0]
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a1e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a1ea:	fa93 f3a3 	rbit	r3, r3
 801a1ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 801a1f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a1f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 801a1f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a1fa:	2b00      	cmp	r3, #0
 801a1fc:	d101      	bne.n	801a202 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 801a1fe:	2320      	movs	r3, #32
 801a200:	e004      	b.n	801a20c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 801a202:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a206:	fab3 f383 	clz	r3, r3
 801a20a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 801a20c:	429a      	cmp	r2, r3
 801a20e:	d106      	bne.n	801a21e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 801a210:	687b      	ldr	r3, [r7, #4]
 801a212:	681b      	ldr	r3, [r3, #0]
 801a214:	2200      	movs	r2, #0
 801a216:	2102      	movs	r1, #2
 801a218:	4618      	mov	r0, r3
 801a21a:	f7fe fce7 	bl	8018bec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	681b      	ldr	r3, [r3, #0]
 801a222:	2103      	movs	r1, #3
 801a224:	4618      	mov	r0, r3
 801a226:	f7fe fccb 	bl	8018bc0 <LL_ADC_GetOffsetChannel>
 801a22a:	4603      	mov	r3, r0
 801a22c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a230:	2b00      	cmp	r3, #0
 801a232:	d10a      	bne.n	801a24a <HAL_ADC_ConfigChannel+0x3aa>
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	681b      	ldr	r3, [r3, #0]
 801a238:	2103      	movs	r1, #3
 801a23a:	4618      	mov	r0, r3
 801a23c:	f7fe fcc0 	bl	8018bc0 <LL_ADC_GetOffsetChannel>
 801a240:	4603      	mov	r3, r0
 801a242:	0e9b      	lsrs	r3, r3, #26
 801a244:	f003 021f 	and.w	r2, r3, #31
 801a248:	e017      	b.n	801a27a <HAL_ADC_ConfigChannel+0x3da>
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	681b      	ldr	r3, [r3, #0]
 801a24e:	2103      	movs	r1, #3
 801a250:	4618      	mov	r0, r3
 801a252:	f7fe fcb5 	bl	8018bc0 <LL_ADC_GetOffsetChannel>
 801a256:	4603      	mov	r3, r0
 801a258:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a25a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a25c:	fa93 f3a3 	rbit	r3, r3
 801a260:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 801a262:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a264:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 801a266:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a268:	2b00      	cmp	r3, #0
 801a26a:	d101      	bne.n	801a270 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 801a26c:	2320      	movs	r3, #32
 801a26e:	e003      	b.n	801a278 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 801a270:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a272:	fab3 f383 	clz	r3, r3
 801a276:	b2db      	uxtb	r3, r3
 801a278:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801a27a:	683b      	ldr	r3, [r7, #0]
 801a27c:	681b      	ldr	r3, [r3, #0]
 801a27e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a282:	2b00      	cmp	r3, #0
 801a284:	d105      	bne.n	801a292 <HAL_ADC_ConfigChannel+0x3f2>
 801a286:	683b      	ldr	r3, [r7, #0]
 801a288:	681b      	ldr	r3, [r3, #0]
 801a28a:	0e9b      	lsrs	r3, r3, #26
 801a28c:	f003 031f 	and.w	r3, r3, #31
 801a290:	e011      	b.n	801a2b6 <HAL_ADC_ConfigChannel+0x416>
 801a292:	683b      	ldr	r3, [r7, #0]
 801a294:	681b      	ldr	r3, [r3, #0]
 801a296:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a298:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a29a:	fa93 f3a3 	rbit	r3, r3
 801a29e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 801a2a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a2a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 801a2a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	d101      	bne.n	801a2ae <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 801a2aa:	2320      	movs	r3, #32
 801a2ac:	e003      	b.n	801a2b6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 801a2ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a2b0:	fab3 f383 	clz	r3, r3
 801a2b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801a2b6:	429a      	cmp	r2, r3
 801a2b8:	d106      	bne.n	801a2c8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	681b      	ldr	r3, [r3, #0]
 801a2be:	2200      	movs	r2, #0
 801a2c0:	2103      	movs	r1, #3
 801a2c2:	4618      	mov	r0, r3
 801a2c4:	f7fe fc92 	bl	8018bec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	681b      	ldr	r3, [r3, #0]
 801a2cc:	4618      	mov	r0, r3
 801a2ce:	f7fe fe29 	bl	8018f24 <LL_ADC_IsEnabled>
 801a2d2:	4603      	mov	r3, r0
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	f040 813d 	bne.w	801a554 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	6818      	ldr	r0, [r3, #0]
 801a2de:	683b      	ldr	r3, [r7, #0]
 801a2e0:	6819      	ldr	r1, [r3, #0]
 801a2e2:	683b      	ldr	r3, [r7, #0]
 801a2e4:	68db      	ldr	r3, [r3, #12]
 801a2e6:	461a      	mov	r2, r3
 801a2e8:	f7fe fd62 	bl	8018db0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 801a2ec:	683b      	ldr	r3, [r7, #0]
 801a2ee:	68db      	ldr	r3, [r3, #12]
 801a2f0:	4aa2      	ldr	r2, [pc, #648]	; (801a57c <HAL_ADC_ConfigChannel+0x6dc>)
 801a2f2:	4293      	cmp	r3, r2
 801a2f4:	f040 812e 	bne.w	801a554 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801a2fc:	683b      	ldr	r3, [r7, #0]
 801a2fe:	681b      	ldr	r3, [r3, #0]
 801a300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a304:	2b00      	cmp	r3, #0
 801a306:	d10b      	bne.n	801a320 <HAL_ADC_ConfigChannel+0x480>
 801a308:	683b      	ldr	r3, [r7, #0]
 801a30a:	681b      	ldr	r3, [r3, #0]
 801a30c:	0e9b      	lsrs	r3, r3, #26
 801a30e:	3301      	adds	r3, #1
 801a310:	f003 031f 	and.w	r3, r3, #31
 801a314:	2b09      	cmp	r3, #9
 801a316:	bf94      	ite	ls
 801a318:	2301      	movls	r3, #1
 801a31a:	2300      	movhi	r3, #0
 801a31c:	b2db      	uxtb	r3, r3
 801a31e:	e019      	b.n	801a354 <HAL_ADC_ConfigChannel+0x4b4>
 801a320:	683b      	ldr	r3, [r7, #0]
 801a322:	681b      	ldr	r3, [r3, #0]
 801a324:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a328:	fa93 f3a3 	rbit	r3, r3
 801a32c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 801a32e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a330:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 801a332:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a334:	2b00      	cmp	r3, #0
 801a336:	d101      	bne.n	801a33c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 801a338:	2320      	movs	r3, #32
 801a33a:	e003      	b.n	801a344 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 801a33c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a33e:	fab3 f383 	clz	r3, r3
 801a342:	b2db      	uxtb	r3, r3
 801a344:	3301      	adds	r3, #1
 801a346:	f003 031f 	and.w	r3, r3, #31
 801a34a:	2b09      	cmp	r3, #9
 801a34c:	bf94      	ite	ls
 801a34e:	2301      	movls	r3, #1
 801a350:	2300      	movhi	r3, #0
 801a352:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801a354:	2b00      	cmp	r3, #0
 801a356:	d079      	beq.n	801a44c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801a358:	683b      	ldr	r3, [r7, #0]
 801a35a:	681b      	ldr	r3, [r3, #0]
 801a35c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a360:	2b00      	cmp	r3, #0
 801a362:	d107      	bne.n	801a374 <HAL_ADC_ConfigChannel+0x4d4>
 801a364:	683b      	ldr	r3, [r7, #0]
 801a366:	681b      	ldr	r3, [r3, #0]
 801a368:	0e9b      	lsrs	r3, r3, #26
 801a36a:	3301      	adds	r3, #1
 801a36c:	069b      	lsls	r3, r3, #26
 801a36e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801a372:	e015      	b.n	801a3a0 <HAL_ADC_ConfigChannel+0x500>
 801a374:	683b      	ldr	r3, [r7, #0]
 801a376:	681b      	ldr	r3, [r3, #0]
 801a378:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a37a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a37c:	fa93 f3a3 	rbit	r3, r3
 801a380:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 801a382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a384:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 801a386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d101      	bne.n	801a390 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 801a38c:	2320      	movs	r3, #32
 801a38e:	e003      	b.n	801a398 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 801a390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a392:	fab3 f383 	clz	r3, r3
 801a396:	b2db      	uxtb	r3, r3
 801a398:	3301      	adds	r3, #1
 801a39a:	069b      	lsls	r3, r3, #26
 801a39c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801a3a0:	683b      	ldr	r3, [r7, #0]
 801a3a2:	681b      	ldr	r3, [r3, #0]
 801a3a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a3a8:	2b00      	cmp	r3, #0
 801a3aa:	d109      	bne.n	801a3c0 <HAL_ADC_ConfigChannel+0x520>
 801a3ac:	683b      	ldr	r3, [r7, #0]
 801a3ae:	681b      	ldr	r3, [r3, #0]
 801a3b0:	0e9b      	lsrs	r3, r3, #26
 801a3b2:	3301      	adds	r3, #1
 801a3b4:	f003 031f 	and.w	r3, r3, #31
 801a3b8:	2101      	movs	r1, #1
 801a3ba:	fa01 f303 	lsl.w	r3, r1, r3
 801a3be:	e017      	b.n	801a3f0 <HAL_ADC_ConfigChannel+0x550>
 801a3c0:	683b      	ldr	r3, [r7, #0]
 801a3c2:	681b      	ldr	r3, [r3, #0]
 801a3c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a3c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a3c8:	fa93 f3a3 	rbit	r3, r3
 801a3cc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 801a3ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a3d0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 801a3d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a3d4:	2b00      	cmp	r3, #0
 801a3d6:	d101      	bne.n	801a3dc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 801a3d8:	2320      	movs	r3, #32
 801a3da:	e003      	b.n	801a3e4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 801a3dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a3de:	fab3 f383 	clz	r3, r3
 801a3e2:	b2db      	uxtb	r3, r3
 801a3e4:	3301      	adds	r3, #1
 801a3e6:	f003 031f 	and.w	r3, r3, #31
 801a3ea:	2101      	movs	r1, #1
 801a3ec:	fa01 f303 	lsl.w	r3, r1, r3
 801a3f0:	ea42 0103 	orr.w	r1, r2, r3
 801a3f4:	683b      	ldr	r3, [r7, #0]
 801a3f6:	681b      	ldr	r3, [r3, #0]
 801a3f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	d10a      	bne.n	801a416 <HAL_ADC_ConfigChannel+0x576>
 801a400:	683b      	ldr	r3, [r7, #0]
 801a402:	681b      	ldr	r3, [r3, #0]
 801a404:	0e9b      	lsrs	r3, r3, #26
 801a406:	3301      	adds	r3, #1
 801a408:	f003 021f 	and.w	r2, r3, #31
 801a40c:	4613      	mov	r3, r2
 801a40e:	005b      	lsls	r3, r3, #1
 801a410:	4413      	add	r3, r2
 801a412:	051b      	lsls	r3, r3, #20
 801a414:	e018      	b.n	801a448 <HAL_ADC_ConfigChannel+0x5a8>
 801a416:	683b      	ldr	r3, [r7, #0]
 801a418:	681b      	ldr	r3, [r3, #0]
 801a41a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a41e:	fa93 f3a3 	rbit	r3, r3
 801a422:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 801a424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a426:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 801a428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	d101      	bne.n	801a432 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 801a42e:	2320      	movs	r3, #32
 801a430:	e003      	b.n	801a43a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 801a432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a434:	fab3 f383 	clz	r3, r3
 801a438:	b2db      	uxtb	r3, r3
 801a43a:	3301      	adds	r3, #1
 801a43c:	f003 021f 	and.w	r2, r3, #31
 801a440:	4613      	mov	r3, r2
 801a442:	005b      	lsls	r3, r3, #1
 801a444:	4413      	add	r3, r2
 801a446:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801a448:	430b      	orrs	r3, r1
 801a44a:	e07e      	b.n	801a54a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801a44c:	683b      	ldr	r3, [r7, #0]
 801a44e:	681b      	ldr	r3, [r3, #0]
 801a450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a454:	2b00      	cmp	r3, #0
 801a456:	d107      	bne.n	801a468 <HAL_ADC_ConfigChannel+0x5c8>
 801a458:	683b      	ldr	r3, [r7, #0]
 801a45a:	681b      	ldr	r3, [r3, #0]
 801a45c:	0e9b      	lsrs	r3, r3, #26
 801a45e:	3301      	adds	r3, #1
 801a460:	069b      	lsls	r3, r3, #26
 801a462:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801a466:	e015      	b.n	801a494 <HAL_ADC_ConfigChannel+0x5f4>
 801a468:	683b      	ldr	r3, [r7, #0]
 801a46a:	681b      	ldr	r3, [r3, #0]
 801a46c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a470:	fa93 f3a3 	rbit	r3, r3
 801a474:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 801a476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a478:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 801a47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a47c:	2b00      	cmp	r3, #0
 801a47e:	d101      	bne.n	801a484 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 801a480:	2320      	movs	r3, #32
 801a482:	e003      	b.n	801a48c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 801a484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a486:	fab3 f383 	clz	r3, r3
 801a48a:	b2db      	uxtb	r3, r3
 801a48c:	3301      	adds	r3, #1
 801a48e:	069b      	lsls	r3, r3, #26
 801a490:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801a494:	683b      	ldr	r3, [r7, #0]
 801a496:	681b      	ldr	r3, [r3, #0]
 801a498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a49c:	2b00      	cmp	r3, #0
 801a49e:	d109      	bne.n	801a4b4 <HAL_ADC_ConfigChannel+0x614>
 801a4a0:	683b      	ldr	r3, [r7, #0]
 801a4a2:	681b      	ldr	r3, [r3, #0]
 801a4a4:	0e9b      	lsrs	r3, r3, #26
 801a4a6:	3301      	adds	r3, #1
 801a4a8:	f003 031f 	and.w	r3, r3, #31
 801a4ac:	2101      	movs	r1, #1
 801a4ae:	fa01 f303 	lsl.w	r3, r1, r3
 801a4b2:	e017      	b.n	801a4e4 <HAL_ADC_ConfigChannel+0x644>
 801a4b4:	683b      	ldr	r3, [r7, #0]
 801a4b6:	681b      	ldr	r3, [r3, #0]
 801a4b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a4ba:	6a3b      	ldr	r3, [r7, #32]
 801a4bc:	fa93 f3a3 	rbit	r3, r3
 801a4c0:	61fb      	str	r3, [r7, #28]
  return result;
 801a4c2:	69fb      	ldr	r3, [r7, #28]
 801a4c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801a4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	d101      	bne.n	801a4d0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 801a4cc:	2320      	movs	r3, #32
 801a4ce:	e003      	b.n	801a4d8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 801a4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4d2:	fab3 f383 	clz	r3, r3
 801a4d6:	b2db      	uxtb	r3, r3
 801a4d8:	3301      	adds	r3, #1
 801a4da:	f003 031f 	and.w	r3, r3, #31
 801a4de:	2101      	movs	r1, #1
 801a4e0:	fa01 f303 	lsl.w	r3, r1, r3
 801a4e4:	ea42 0103 	orr.w	r1, r2, r3
 801a4e8:	683b      	ldr	r3, [r7, #0]
 801a4ea:	681b      	ldr	r3, [r3, #0]
 801a4ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	d10d      	bne.n	801a510 <HAL_ADC_ConfigChannel+0x670>
 801a4f4:	683b      	ldr	r3, [r7, #0]
 801a4f6:	681b      	ldr	r3, [r3, #0]
 801a4f8:	0e9b      	lsrs	r3, r3, #26
 801a4fa:	3301      	adds	r3, #1
 801a4fc:	f003 021f 	and.w	r2, r3, #31
 801a500:	4613      	mov	r3, r2
 801a502:	005b      	lsls	r3, r3, #1
 801a504:	4413      	add	r3, r2
 801a506:	3b1e      	subs	r3, #30
 801a508:	051b      	lsls	r3, r3, #20
 801a50a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801a50e:	e01b      	b.n	801a548 <HAL_ADC_ConfigChannel+0x6a8>
 801a510:	683b      	ldr	r3, [r7, #0]
 801a512:	681b      	ldr	r3, [r3, #0]
 801a514:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a516:	697b      	ldr	r3, [r7, #20]
 801a518:	fa93 f3a3 	rbit	r3, r3
 801a51c:	613b      	str	r3, [r7, #16]
  return result;
 801a51e:	693b      	ldr	r3, [r7, #16]
 801a520:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801a522:	69bb      	ldr	r3, [r7, #24]
 801a524:	2b00      	cmp	r3, #0
 801a526:	d101      	bne.n	801a52c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 801a528:	2320      	movs	r3, #32
 801a52a:	e003      	b.n	801a534 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 801a52c:	69bb      	ldr	r3, [r7, #24]
 801a52e:	fab3 f383 	clz	r3, r3
 801a532:	b2db      	uxtb	r3, r3
 801a534:	3301      	adds	r3, #1
 801a536:	f003 021f 	and.w	r2, r3, #31
 801a53a:	4613      	mov	r3, r2
 801a53c:	005b      	lsls	r3, r3, #1
 801a53e:	4413      	add	r3, r2
 801a540:	3b1e      	subs	r3, #30
 801a542:	051b      	lsls	r3, r3, #20
 801a544:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801a548:	430b      	orrs	r3, r1
 801a54a:	683a      	ldr	r2, [r7, #0]
 801a54c:	6892      	ldr	r2, [r2, #8]
 801a54e:	4619      	mov	r1, r3
 801a550:	f7fe fc02 	bl	8018d58 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 801a554:	683b      	ldr	r3, [r7, #0]
 801a556:	681a      	ldr	r2, [r3, #0]
 801a558:	4b09      	ldr	r3, [pc, #36]	; (801a580 <HAL_ADC_ConfigChannel+0x6e0>)
 801a55a:	4013      	ands	r3, r2
 801a55c:	2b00      	cmp	r3, #0
 801a55e:	f000 80af 	beq.w	801a6c0 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	681b      	ldr	r3, [r3, #0]
 801a566:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a56a:	d004      	beq.n	801a576 <HAL_ADC_ConfigChannel+0x6d6>
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	681b      	ldr	r3, [r3, #0]
 801a570:	4a04      	ldr	r2, [pc, #16]	; (801a584 <HAL_ADC_ConfigChannel+0x6e4>)
 801a572:	4293      	cmp	r3, r2
 801a574:	d10a      	bne.n	801a58c <HAL_ADC_ConfigChannel+0x6ec>
 801a576:	4b04      	ldr	r3, [pc, #16]	; (801a588 <HAL_ADC_ConfigChannel+0x6e8>)
 801a578:	e009      	b.n	801a58e <HAL_ADC_ConfigChannel+0x6ee>
 801a57a:	bf00      	nop
 801a57c:	407f0000 	.word	0x407f0000
 801a580:	80080000 	.word	0x80080000
 801a584:	50000100 	.word	0x50000100
 801a588:	50000300 	.word	0x50000300
 801a58c:	4b51      	ldr	r3, [pc, #324]	; (801a6d4 <HAL_ADC_ConfigChannel+0x834>)
 801a58e:	4618      	mov	r0, r3
 801a590:	f7fe fae4 	bl	8018b5c <LL_ADC_GetCommonPathInternalCh>
 801a594:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 801a598:	683b      	ldr	r3, [r7, #0]
 801a59a:	681b      	ldr	r3, [r3, #0]
 801a59c:	4a4e      	ldr	r2, [pc, #312]	; (801a6d8 <HAL_ADC_ConfigChannel+0x838>)
 801a59e:	4293      	cmp	r3, r2
 801a5a0:	d004      	beq.n	801a5ac <HAL_ADC_ConfigChannel+0x70c>
 801a5a2:	683b      	ldr	r3, [r7, #0]
 801a5a4:	681b      	ldr	r3, [r3, #0]
 801a5a6:	4a4d      	ldr	r2, [pc, #308]	; (801a6dc <HAL_ADC_ConfigChannel+0x83c>)
 801a5a8:	4293      	cmp	r3, r2
 801a5aa:	d134      	bne.n	801a616 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 801a5ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a5b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d12e      	bne.n	801a616 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	681b      	ldr	r3, [r3, #0]
 801a5bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a5c0:	d17e      	bne.n	801a6c0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	681b      	ldr	r3, [r3, #0]
 801a5c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a5ca:	d004      	beq.n	801a5d6 <HAL_ADC_ConfigChannel+0x736>
 801a5cc:	687b      	ldr	r3, [r7, #4]
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	4a43      	ldr	r2, [pc, #268]	; (801a6e0 <HAL_ADC_ConfigChannel+0x840>)
 801a5d2:	4293      	cmp	r3, r2
 801a5d4:	d101      	bne.n	801a5da <HAL_ADC_ConfigChannel+0x73a>
 801a5d6:	4a43      	ldr	r2, [pc, #268]	; (801a6e4 <HAL_ADC_ConfigChannel+0x844>)
 801a5d8:	e000      	b.n	801a5dc <HAL_ADC_ConfigChannel+0x73c>
 801a5da:	4a3e      	ldr	r2, [pc, #248]	; (801a6d4 <HAL_ADC_ConfigChannel+0x834>)
 801a5dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a5e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801a5e4:	4619      	mov	r1, r3
 801a5e6:	4610      	mov	r0, r2
 801a5e8:	f7fe faa5 	bl	8018b36 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 801a5ec:	4b3e      	ldr	r3, [pc, #248]	; (801a6e8 <HAL_ADC_ConfigChannel+0x848>)
 801a5ee:	681b      	ldr	r3, [r3, #0]
 801a5f0:	099b      	lsrs	r3, r3, #6
 801a5f2:	4a3e      	ldr	r2, [pc, #248]	; (801a6ec <HAL_ADC_ConfigChannel+0x84c>)
 801a5f4:	fba2 2303 	umull	r2, r3, r2, r3
 801a5f8:	099b      	lsrs	r3, r3, #6
 801a5fa:	1c5a      	adds	r2, r3, #1
 801a5fc:	4613      	mov	r3, r2
 801a5fe:	005b      	lsls	r3, r3, #1
 801a600:	4413      	add	r3, r2
 801a602:	009b      	lsls	r3, r3, #2
 801a604:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801a606:	e002      	b.n	801a60e <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 801a608:	68fb      	ldr	r3, [r7, #12]
 801a60a:	3b01      	subs	r3, #1
 801a60c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801a60e:	68fb      	ldr	r3, [r7, #12]
 801a610:	2b00      	cmp	r3, #0
 801a612:	d1f9      	bne.n	801a608 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801a614:	e054      	b.n	801a6c0 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 801a616:	683b      	ldr	r3, [r7, #0]
 801a618:	681b      	ldr	r3, [r3, #0]
 801a61a:	4a35      	ldr	r2, [pc, #212]	; (801a6f0 <HAL_ADC_ConfigChannel+0x850>)
 801a61c:	4293      	cmp	r3, r2
 801a61e:	d120      	bne.n	801a662 <HAL_ADC_ConfigChannel+0x7c2>
 801a620:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801a628:	2b00      	cmp	r3, #0
 801a62a:	d11a      	bne.n	801a662 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	681b      	ldr	r3, [r3, #0]
 801a630:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a634:	d144      	bne.n	801a6c0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	681b      	ldr	r3, [r3, #0]
 801a63a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a63e:	d004      	beq.n	801a64a <HAL_ADC_ConfigChannel+0x7aa>
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	681b      	ldr	r3, [r3, #0]
 801a644:	4a26      	ldr	r2, [pc, #152]	; (801a6e0 <HAL_ADC_ConfigChannel+0x840>)
 801a646:	4293      	cmp	r3, r2
 801a648:	d101      	bne.n	801a64e <HAL_ADC_ConfigChannel+0x7ae>
 801a64a:	4a26      	ldr	r2, [pc, #152]	; (801a6e4 <HAL_ADC_ConfigChannel+0x844>)
 801a64c:	e000      	b.n	801a650 <HAL_ADC_ConfigChannel+0x7b0>
 801a64e:	4a21      	ldr	r2, [pc, #132]	; (801a6d4 <HAL_ADC_ConfigChannel+0x834>)
 801a650:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a654:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801a658:	4619      	mov	r1, r3
 801a65a:	4610      	mov	r0, r2
 801a65c:	f7fe fa6b 	bl	8018b36 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801a660:	e02e      	b.n	801a6c0 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 801a662:	683b      	ldr	r3, [r7, #0]
 801a664:	681b      	ldr	r3, [r3, #0]
 801a666:	4a23      	ldr	r2, [pc, #140]	; (801a6f4 <HAL_ADC_ConfigChannel+0x854>)
 801a668:	4293      	cmp	r3, r2
 801a66a:	d129      	bne.n	801a6c0 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 801a66c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a674:	2b00      	cmp	r3, #0
 801a676:	d123      	bne.n	801a6c0 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	681b      	ldr	r3, [r3, #0]
 801a67c:	4a18      	ldr	r2, [pc, #96]	; (801a6e0 <HAL_ADC_ConfigChannel+0x840>)
 801a67e:	4293      	cmp	r3, r2
 801a680:	d01e      	beq.n	801a6c0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	681b      	ldr	r3, [r3, #0]
 801a686:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a68a:	d004      	beq.n	801a696 <HAL_ADC_ConfigChannel+0x7f6>
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	681b      	ldr	r3, [r3, #0]
 801a690:	4a13      	ldr	r2, [pc, #76]	; (801a6e0 <HAL_ADC_ConfigChannel+0x840>)
 801a692:	4293      	cmp	r3, r2
 801a694:	d101      	bne.n	801a69a <HAL_ADC_ConfigChannel+0x7fa>
 801a696:	4a13      	ldr	r2, [pc, #76]	; (801a6e4 <HAL_ADC_ConfigChannel+0x844>)
 801a698:	e000      	b.n	801a69c <HAL_ADC_ConfigChannel+0x7fc>
 801a69a:	4a0e      	ldr	r2, [pc, #56]	; (801a6d4 <HAL_ADC_ConfigChannel+0x834>)
 801a69c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a6a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801a6a4:	4619      	mov	r1, r3
 801a6a6:	4610      	mov	r0, r2
 801a6a8:	f7fe fa45 	bl	8018b36 <LL_ADC_SetCommonPathInternalCh>
 801a6ac:	e008      	b.n	801a6c0 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a6b2:	f043 0220 	orr.w	r2, r3, #32
 801a6b6:	687b      	ldr	r3, [r7, #4]
 801a6b8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 801a6ba:	2301      	movs	r3, #1
 801a6bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	2200      	movs	r2, #0
 801a6c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801a6c8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 801a6cc:	4618      	mov	r0, r3
 801a6ce:	37d8      	adds	r7, #216	; 0xd8
 801a6d0:	46bd      	mov	sp, r7
 801a6d2:	bd80      	pop	{r7, pc}
 801a6d4:	50000700 	.word	0x50000700
 801a6d8:	c3210000 	.word	0xc3210000
 801a6dc:	90c00010 	.word	0x90c00010
 801a6e0:	50000100 	.word	0x50000100
 801a6e4:	50000300 	.word	0x50000300
 801a6e8:	20000000 	.word	0x20000000
 801a6ec:	053e2d63 	.word	0x053e2d63
 801a6f0:	c7520000 	.word	0xc7520000
 801a6f4:	cb840000 	.word	0xcb840000

0801a6f8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 801a6f8:	b580      	push	{r7, lr}
 801a6fa:	b088      	sub	sp, #32
 801a6fc:	af00      	add	r7, sp, #0
 801a6fe:	6078      	str	r0, [r7, #4]
 801a700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 801a702:	2300      	movs	r3, #0
 801a704:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 801a706:	683b      	ldr	r3, [r7, #0]
 801a708:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	681b      	ldr	r3, [r3, #0]
 801a70e:	4618      	mov	r0, r3
 801a710:	f7fe fc56 	bl	8018fc0 <LL_ADC_REG_IsConversionOngoing>
 801a714:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801a716:	687b      	ldr	r3, [r7, #4]
 801a718:	681b      	ldr	r3, [r3, #0]
 801a71a:	4618      	mov	r0, r3
 801a71c:	f7fe fc77 	bl	801900e <LL_ADC_INJ_IsConversionOngoing>
 801a720:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 801a722:	693b      	ldr	r3, [r7, #16]
 801a724:	2b00      	cmp	r3, #0
 801a726:	d103      	bne.n	801a730 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 801a728:	68fb      	ldr	r3, [r7, #12]
 801a72a:	2b00      	cmp	r3, #0
 801a72c:	f000 8098 	beq.w	801a860 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	681b      	ldr	r3, [r3, #0]
 801a734:	68db      	ldr	r3, [r3, #12]
 801a736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	d02a      	beq.n	801a794 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	7f5b      	ldrb	r3, [r3, #29]
 801a742:	2b01      	cmp	r3, #1
 801a744:	d126      	bne.n	801a794 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	7f1b      	ldrb	r3, [r3, #28]
 801a74a:	2b01      	cmp	r3, #1
 801a74c:	d122      	bne.n	801a794 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 801a74e:	2301      	movs	r3, #1
 801a750:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801a752:	e014      	b.n	801a77e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 801a754:	69fb      	ldr	r3, [r7, #28]
 801a756:	4a45      	ldr	r2, [pc, #276]	; (801a86c <ADC_ConversionStop+0x174>)
 801a758:	4293      	cmp	r3, r2
 801a75a:	d90d      	bls.n	801a778 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a760:	f043 0210 	orr.w	r2, r3, #16
 801a764:	687b      	ldr	r3, [r7, #4]
 801a766:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a768:	687b      	ldr	r3, [r7, #4]
 801a76a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a76c:	f043 0201 	orr.w	r2, r3, #1
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801a774:	2301      	movs	r3, #1
 801a776:	e074      	b.n	801a862 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 801a778:	69fb      	ldr	r3, [r7, #28]
 801a77a:	3301      	adds	r3, #1
 801a77c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	681b      	ldr	r3, [r3, #0]
 801a782:	681b      	ldr	r3, [r3, #0]
 801a784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a788:	2b40      	cmp	r3, #64	; 0x40
 801a78a:	d1e3      	bne.n	801a754 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	681b      	ldr	r3, [r3, #0]
 801a790:	2240      	movs	r2, #64	; 0x40
 801a792:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 801a794:	69bb      	ldr	r3, [r7, #24]
 801a796:	2b02      	cmp	r3, #2
 801a798:	d014      	beq.n	801a7c4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	681b      	ldr	r3, [r3, #0]
 801a79e:	4618      	mov	r0, r3
 801a7a0:	f7fe fc0e 	bl	8018fc0 <LL_ADC_REG_IsConversionOngoing>
 801a7a4:	4603      	mov	r3, r0
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d00c      	beq.n	801a7c4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 801a7aa:	687b      	ldr	r3, [r7, #4]
 801a7ac:	681b      	ldr	r3, [r3, #0]
 801a7ae:	4618      	mov	r0, r3
 801a7b0:	f7fe fbcb 	bl	8018f4a <LL_ADC_IsDisableOngoing>
 801a7b4:	4603      	mov	r3, r0
 801a7b6:	2b00      	cmp	r3, #0
 801a7b8:	d104      	bne.n	801a7c4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	681b      	ldr	r3, [r3, #0]
 801a7be:	4618      	mov	r0, r3
 801a7c0:	f7fe fbea 	bl	8018f98 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 801a7c4:	69bb      	ldr	r3, [r7, #24]
 801a7c6:	2b01      	cmp	r3, #1
 801a7c8:	d014      	beq.n	801a7f4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	681b      	ldr	r3, [r3, #0]
 801a7ce:	4618      	mov	r0, r3
 801a7d0:	f7fe fc1d 	bl	801900e <LL_ADC_INJ_IsConversionOngoing>
 801a7d4:	4603      	mov	r3, r0
 801a7d6:	2b00      	cmp	r3, #0
 801a7d8:	d00c      	beq.n	801a7f4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	681b      	ldr	r3, [r3, #0]
 801a7de:	4618      	mov	r0, r3
 801a7e0:	f7fe fbb3 	bl	8018f4a <LL_ADC_IsDisableOngoing>
 801a7e4:	4603      	mov	r3, r0
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d104      	bne.n	801a7f4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	681b      	ldr	r3, [r3, #0]
 801a7ee:	4618      	mov	r0, r3
 801a7f0:	f7fe fbf9 	bl	8018fe6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 801a7f4:	69bb      	ldr	r3, [r7, #24]
 801a7f6:	2b02      	cmp	r3, #2
 801a7f8:	d005      	beq.n	801a806 <ADC_ConversionStop+0x10e>
 801a7fa:	69bb      	ldr	r3, [r7, #24]
 801a7fc:	2b03      	cmp	r3, #3
 801a7fe:	d105      	bne.n	801a80c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 801a800:	230c      	movs	r3, #12
 801a802:	617b      	str	r3, [r7, #20]
        break;
 801a804:	e005      	b.n	801a812 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 801a806:	2308      	movs	r3, #8
 801a808:	617b      	str	r3, [r7, #20]
        break;
 801a80a:	e002      	b.n	801a812 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 801a80c:	2304      	movs	r3, #4
 801a80e:	617b      	str	r3, [r7, #20]
        break;
 801a810:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 801a812:	f7fe f94f 	bl	8018ab4 <HAL_GetTick>
 801a816:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801a818:	e01b      	b.n	801a852 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 801a81a:	f7fe f94b 	bl	8018ab4 <HAL_GetTick>
 801a81e:	4602      	mov	r2, r0
 801a820:	68bb      	ldr	r3, [r7, #8]
 801a822:	1ad3      	subs	r3, r2, r3
 801a824:	2b05      	cmp	r3, #5
 801a826:	d914      	bls.n	801a852 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801a828:	687b      	ldr	r3, [r7, #4]
 801a82a:	681b      	ldr	r3, [r3, #0]
 801a82c:	689a      	ldr	r2, [r3, #8]
 801a82e:	697b      	ldr	r3, [r7, #20]
 801a830:	4013      	ands	r3, r2
 801a832:	2b00      	cmp	r3, #0
 801a834:	d00d      	beq.n	801a852 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a836:	687b      	ldr	r3, [r7, #4]
 801a838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a83a:	f043 0210 	orr.w	r2, r3, #16
 801a83e:	687b      	ldr	r3, [r7, #4]
 801a840:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a846:	f043 0201 	orr.w	r2, r3, #1
 801a84a:	687b      	ldr	r3, [r7, #4]
 801a84c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801a84e:	2301      	movs	r3, #1
 801a850:	e007      	b.n	801a862 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	689a      	ldr	r2, [r3, #8]
 801a858:	697b      	ldr	r3, [r7, #20]
 801a85a:	4013      	ands	r3, r2
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	d1dc      	bne.n	801a81a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 801a860:	2300      	movs	r3, #0
}
 801a862:	4618      	mov	r0, r3
 801a864:	3720      	adds	r7, #32
 801a866:	46bd      	mov	sp, r7
 801a868:	bd80      	pop	{r7, pc}
 801a86a:	bf00      	nop
 801a86c:	a33fffff 	.word	0xa33fffff

0801a870 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 801a870:	b580      	push	{r7, lr}
 801a872:	b084      	sub	sp, #16
 801a874:	af00      	add	r7, sp, #0
 801a876:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	681b      	ldr	r3, [r3, #0]
 801a87c:	4618      	mov	r0, r3
 801a87e:	f7fe fb51 	bl	8018f24 <LL_ADC_IsEnabled>
 801a882:	4603      	mov	r3, r0
 801a884:	2b00      	cmp	r3, #0
 801a886:	d14d      	bne.n	801a924 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 801a888:	687b      	ldr	r3, [r7, #4]
 801a88a:	681b      	ldr	r3, [r3, #0]
 801a88c:	689a      	ldr	r2, [r3, #8]
 801a88e:	4b28      	ldr	r3, [pc, #160]	; (801a930 <ADC_Enable+0xc0>)
 801a890:	4013      	ands	r3, r2
 801a892:	2b00      	cmp	r3, #0
 801a894:	d00d      	beq.n	801a8b2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a89a:	f043 0210 	orr.w	r2, r3, #16
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a8a2:	687b      	ldr	r3, [r7, #4]
 801a8a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a8a6:	f043 0201 	orr.w	r2, r3, #1
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 801a8ae:	2301      	movs	r3, #1
 801a8b0:	e039      	b.n	801a926 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	681b      	ldr	r3, [r3, #0]
 801a8b6:	4618      	mov	r0, r3
 801a8b8:	f7fe fb0c 	bl	8018ed4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 801a8bc:	f7fe f8fa 	bl	8018ab4 <HAL_GetTick>
 801a8c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801a8c2:	e028      	b.n	801a916 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	681b      	ldr	r3, [r3, #0]
 801a8c8:	4618      	mov	r0, r3
 801a8ca:	f7fe fb2b 	bl	8018f24 <LL_ADC_IsEnabled>
 801a8ce:	4603      	mov	r3, r0
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	d104      	bne.n	801a8de <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	681b      	ldr	r3, [r3, #0]
 801a8d8:	4618      	mov	r0, r3
 801a8da:	f7fe fafb 	bl	8018ed4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801a8de:	f7fe f8e9 	bl	8018ab4 <HAL_GetTick>
 801a8e2:	4602      	mov	r2, r0
 801a8e4:	68fb      	ldr	r3, [r7, #12]
 801a8e6:	1ad3      	subs	r3, r2, r3
 801a8e8:	2b02      	cmp	r3, #2
 801a8ea:	d914      	bls.n	801a916 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	681b      	ldr	r3, [r3, #0]
 801a8f0:	681b      	ldr	r3, [r3, #0]
 801a8f2:	f003 0301 	and.w	r3, r3, #1
 801a8f6:	2b01      	cmp	r3, #1
 801a8f8:	d00d      	beq.n	801a916 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a8fe:	f043 0210 	orr.w	r2, r3, #16
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a906:	687b      	ldr	r3, [r7, #4]
 801a908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a90a:	f043 0201 	orr.w	r2, r3, #1
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801a912:	2301      	movs	r3, #1
 801a914:	e007      	b.n	801a926 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	681b      	ldr	r3, [r3, #0]
 801a91c:	f003 0301 	and.w	r3, r3, #1
 801a920:	2b01      	cmp	r3, #1
 801a922:	d1cf      	bne.n	801a8c4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801a924:	2300      	movs	r3, #0
}
 801a926:	4618      	mov	r0, r3
 801a928:	3710      	adds	r7, #16
 801a92a:	46bd      	mov	sp, r7
 801a92c:	bd80      	pop	{r7, pc}
 801a92e:	bf00      	nop
 801a930:	8000003f 	.word	0x8000003f

0801a934 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 801a934:	b580      	push	{r7, lr}
 801a936:	b084      	sub	sp, #16
 801a938:	af00      	add	r7, sp, #0
 801a93a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	681b      	ldr	r3, [r3, #0]
 801a940:	4618      	mov	r0, r3
 801a942:	f7fe fb02 	bl	8018f4a <LL_ADC_IsDisableOngoing>
 801a946:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	681b      	ldr	r3, [r3, #0]
 801a94c:	4618      	mov	r0, r3
 801a94e:	f7fe fae9 	bl	8018f24 <LL_ADC_IsEnabled>
 801a952:	4603      	mov	r3, r0
 801a954:	2b00      	cmp	r3, #0
 801a956:	d047      	beq.n	801a9e8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 801a958:	68fb      	ldr	r3, [r7, #12]
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	d144      	bne.n	801a9e8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 801a95e:	687b      	ldr	r3, [r7, #4]
 801a960:	681b      	ldr	r3, [r3, #0]
 801a962:	689b      	ldr	r3, [r3, #8]
 801a964:	f003 030d 	and.w	r3, r3, #13
 801a968:	2b01      	cmp	r3, #1
 801a96a:	d10c      	bne.n	801a986 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	681b      	ldr	r3, [r3, #0]
 801a970:	4618      	mov	r0, r3
 801a972:	f7fe fac3 	bl	8018efc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	681b      	ldr	r3, [r3, #0]
 801a97a:	2203      	movs	r2, #3
 801a97c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 801a97e:	f7fe f899 	bl	8018ab4 <HAL_GetTick>
 801a982:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801a984:	e029      	b.n	801a9da <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a98a:	f043 0210 	orr.w	r2, r3, #16
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a996:	f043 0201 	orr.w	r2, r3, #1
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 801a99e:	2301      	movs	r3, #1
 801a9a0:	e023      	b.n	801a9ea <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 801a9a2:	f7fe f887 	bl	8018ab4 <HAL_GetTick>
 801a9a6:	4602      	mov	r2, r0
 801a9a8:	68bb      	ldr	r3, [r7, #8]
 801a9aa:	1ad3      	subs	r3, r2, r3
 801a9ac:	2b02      	cmp	r3, #2
 801a9ae:	d914      	bls.n	801a9da <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	681b      	ldr	r3, [r3, #0]
 801a9b4:	689b      	ldr	r3, [r3, #8]
 801a9b6:	f003 0301 	and.w	r3, r3, #1
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	d00d      	beq.n	801a9da <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a9c2:	f043 0210 	orr.w	r2, r3, #16
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a9ce:	f043 0201 	orr.w	r2, r3, #1
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801a9d6:	2301      	movs	r3, #1
 801a9d8:	e007      	b.n	801a9ea <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	681b      	ldr	r3, [r3, #0]
 801a9de:	689b      	ldr	r3, [r3, #8]
 801a9e0:	f003 0301 	and.w	r3, r3, #1
 801a9e4:	2b00      	cmp	r3, #0
 801a9e6:	d1dc      	bne.n	801a9a2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801a9e8:	2300      	movs	r3, #0
}
 801a9ea:	4618      	mov	r0, r3
 801a9ec:	3710      	adds	r7, #16
 801a9ee:	46bd      	mov	sp, r7
 801a9f0:	bd80      	pop	{r7, pc}

0801a9f2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 801a9f2:	b580      	push	{r7, lr}
 801a9f4:	b084      	sub	sp, #16
 801a9f6:	af00      	add	r7, sp, #0
 801a9f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a9fe:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 801aa00:	68fb      	ldr	r3, [r7, #12]
 801aa02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aa04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801aa08:	2b00      	cmp	r3, #0
 801aa0a:	d14b      	bne.n	801aaa4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801aa0c:	68fb      	ldr	r3, [r7, #12]
 801aa0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aa10:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801aa14:	68fb      	ldr	r3, [r7, #12]
 801aa16:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 801aa18:	68fb      	ldr	r3, [r7, #12]
 801aa1a:	681b      	ldr	r3, [r3, #0]
 801aa1c:	681b      	ldr	r3, [r3, #0]
 801aa1e:	f003 0308 	and.w	r3, r3, #8
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	d021      	beq.n	801aa6a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 801aa26:	68fb      	ldr	r3, [r7, #12]
 801aa28:	681b      	ldr	r3, [r3, #0]
 801aa2a:	4618      	mov	r0, r3
 801aa2c:	f7fe f942 	bl	8018cb4 <LL_ADC_REG_IsTriggerSourceSWStart>
 801aa30:	4603      	mov	r3, r0
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d032      	beq.n	801aa9c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 801aa36:	68fb      	ldr	r3, [r7, #12]
 801aa38:	681b      	ldr	r3, [r3, #0]
 801aa3a:	68db      	ldr	r3, [r3, #12]
 801aa3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801aa40:	2b00      	cmp	r3, #0
 801aa42:	d12b      	bne.n	801aa9c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801aa44:	68fb      	ldr	r3, [r7, #12]
 801aa46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aa48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801aa4c:	68fb      	ldr	r3, [r7, #12]
 801aa4e:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801aa50:	68fb      	ldr	r3, [r7, #12]
 801aa52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aa54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801aa58:	2b00      	cmp	r3, #0
 801aa5a:	d11f      	bne.n	801aa9c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801aa5c:	68fb      	ldr	r3, [r7, #12]
 801aa5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aa60:	f043 0201 	orr.w	r2, r3, #1
 801aa64:	68fb      	ldr	r3, [r7, #12]
 801aa66:	65da      	str	r2, [r3, #92]	; 0x5c
 801aa68:	e018      	b.n	801aa9c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 801aa6a:	68fb      	ldr	r3, [r7, #12]
 801aa6c:	681b      	ldr	r3, [r3, #0]
 801aa6e:	68db      	ldr	r3, [r3, #12]
 801aa70:	f003 0302 	and.w	r3, r3, #2
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	d111      	bne.n	801aa9c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801aa78:	68fb      	ldr	r3, [r7, #12]
 801aa7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aa7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801aa80:	68fb      	ldr	r3, [r7, #12]
 801aa82:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801aa84:	68fb      	ldr	r3, [r7, #12]
 801aa86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aa88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801aa8c:	2b00      	cmp	r3, #0
 801aa8e:	d105      	bne.n	801aa9c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801aa90:	68fb      	ldr	r3, [r7, #12]
 801aa92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aa94:	f043 0201 	orr.w	r2, r3, #1
 801aa98:	68fb      	ldr	r3, [r7, #12]
 801aa9a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801aa9c:	68f8      	ldr	r0, [r7, #12]
 801aa9e:	f7ed fe2f 	bl	8008700 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801aaa2:	e00e      	b.n	801aac2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801aaa4:	68fb      	ldr	r3, [r7, #12]
 801aaa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aaa8:	f003 0310 	and.w	r3, r3, #16
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	d003      	beq.n	801aab8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 801aab0:	68f8      	ldr	r0, [r7, #12]
 801aab2:	f7ff f9eb 	bl	8019e8c <HAL_ADC_ErrorCallback>
}
 801aab6:	e004      	b.n	801aac2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801aab8:	68fb      	ldr	r3, [r7, #12]
 801aaba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801aabc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aabe:	6878      	ldr	r0, [r7, #4]
 801aac0:	4798      	blx	r3
}
 801aac2:	bf00      	nop
 801aac4:	3710      	adds	r7, #16
 801aac6:	46bd      	mov	sp, r7
 801aac8:	bd80      	pop	{r7, pc}

0801aaca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 801aaca:	b580      	push	{r7, lr}
 801aacc:	b084      	sub	sp, #16
 801aace:	af00      	add	r7, sp, #0
 801aad0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aad6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801aad8:	68f8      	ldr	r0, [r7, #12]
 801aada:	f7ff f9c3 	bl	8019e64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801aade:	bf00      	nop
 801aae0:	3710      	adds	r7, #16
 801aae2:	46bd      	mov	sp, r7
 801aae4:	bd80      	pop	{r7, pc}

0801aae6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 801aae6:	b580      	push	{r7, lr}
 801aae8:	b084      	sub	sp, #16
 801aaea:	af00      	add	r7, sp, #0
 801aaec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aaf2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 801aaf4:	68fb      	ldr	r3, [r7, #12]
 801aaf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aaf8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801aafc:	68fb      	ldr	r3, [r7, #12]
 801aafe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 801ab00:	68fb      	ldr	r3, [r7, #12]
 801ab02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ab04:	f043 0204 	orr.w	r2, r3, #4
 801ab08:	68fb      	ldr	r3, [r7, #12]
 801ab0a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801ab0c:	68f8      	ldr	r0, [r7, #12]
 801ab0e:	f7ff f9bd 	bl	8019e8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801ab12:	bf00      	nop
 801ab14:	3710      	adds	r7, #16
 801ab16:	46bd      	mov	sp, r7
 801ab18:	bd80      	pop	{r7, pc}

0801ab1a <LL_ADC_IsEnabled>:
{
 801ab1a:	b480      	push	{r7}
 801ab1c:	b083      	sub	sp, #12
 801ab1e:	af00      	add	r7, sp, #0
 801ab20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801ab22:	687b      	ldr	r3, [r7, #4]
 801ab24:	689b      	ldr	r3, [r3, #8]
 801ab26:	f003 0301 	and.w	r3, r3, #1
 801ab2a:	2b01      	cmp	r3, #1
 801ab2c:	d101      	bne.n	801ab32 <LL_ADC_IsEnabled+0x18>
 801ab2e:	2301      	movs	r3, #1
 801ab30:	e000      	b.n	801ab34 <LL_ADC_IsEnabled+0x1a>
 801ab32:	2300      	movs	r3, #0
}
 801ab34:	4618      	mov	r0, r3
 801ab36:	370c      	adds	r7, #12
 801ab38:	46bd      	mov	sp, r7
 801ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab3e:	4770      	bx	lr

0801ab40 <LL_ADC_StartCalibration>:
{
 801ab40:	b480      	push	{r7}
 801ab42:	b083      	sub	sp, #12
 801ab44:	af00      	add	r7, sp, #0
 801ab46:	6078      	str	r0, [r7, #4]
 801ab48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 801ab4a:	687b      	ldr	r3, [r7, #4]
 801ab4c:	689b      	ldr	r3, [r3, #8]
 801ab4e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801ab52:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801ab56:	683a      	ldr	r2, [r7, #0]
 801ab58:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 801ab5c:	4313      	orrs	r3, r2
 801ab5e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	609a      	str	r2, [r3, #8]
}
 801ab66:	bf00      	nop
 801ab68:	370c      	adds	r7, #12
 801ab6a:	46bd      	mov	sp, r7
 801ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab70:	4770      	bx	lr

0801ab72 <LL_ADC_IsCalibrationOnGoing>:
{
 801ab72:	b480      	push	{r7}
 801ab74:	b083      	sub	sp, #12
 801ab76:	af00      	add	r7, sp, #0
 801ab78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	689b      	ldr	r3, [r3, #8]
 801ab7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ab82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ab86:	d101      	bne.n	801ab8c <LL_ADC_IsCalibrationOnGoing+0x1a>
 801ab88:	2301      	movs	r3, #1
 801ab8a:	e000      	b.n	801ab8e <LL_ADC_IsCalibrationOnGoing+0x1c>
 801ab8c:	2300      	movs	r3, #0
}
 801ab8e:	4618      	mov	r0, r3
 801ab90:	370c      	adds	r7, #12
 801ab92:	46bd      	mov	sp, r7
 801ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab98:	4770      	bx	lr

0801ab9a <LL_ADC_REG_IsConversionOngoing>:
{
 801ab9a:	b480      	push	{r7}
 801ab9c:	b083      	sub	sp, #12
 801ab9e:	af00      	add	r7, sp, #0
 801aba0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	689b      	ldr	r3, [r3, #8]
 801aba6:	f003 0304 	and.w	r3, r3, #4
 801abaa:	2b04      	cmp	r3, #4
 801abac:	d101      	bne.n	801abb2 <LL_ADC_REG_IsConversionOngoing+0x18>
 801abae:	2301      	movs	r3, #1
 801abb0:	e000      	b.n	801abb4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 801abb2:	2300      	movs	r3, #0
}
 801abb4:	4618      	mov	r0, r3
 801abb6:	370c      	adds	r7, #12
 801abb8:	46bd      	mov	sp, r7
 801abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abbe:	4770      	bx	lr

0801abc0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 801abc0:	b580      	push	{r7, lr}
 801abc2:	b084      	sub	sp, #16
 801abc4:	af00      	add	r7, sp, #0
 801abc6:	6078      	str	r0, [r7, #4]
 801abc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 801abca:	2300      	movs	r3, #0
 801abcc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801abd4:	2b01      	cmp	r3, #1
 801abd6:	d101      	bne.n	801abdc <HAL_ADCEx_Calibration_Start+0x1c>
 801abd8:	2302      	movs	r3, #2
 801abda:	e04d      	b.n	801ac78 <HAL_ADCEx_Calibration_Start+0xb8>
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	2201      	movs	r2, #1
 801abe0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 801abe4:	6878      	ldr	r0, [r7, #4]
 801abe6:	f7ff fea5 	bl	801a934 <ADC_Disable>
 801abea:	4603      	mov	r3, r0
 801abec:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 801abee:	7bfb      	ldrb	r3, [r7, #15]
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	d136      	bne.n	801ac62 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801abf8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801abfc:	f023 0302 	bic.w	r3, r3, #2
 801ac00:	f043 0202 	orr.w	r2, r3, #2
 801ac04:	687b      	ldr	r3, [r7, #4]
 801ac06:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	6839      	ldr	r1, [r7, #0]
 801ac0e:	4618      	mov	r0, r3
 801ac10:	f7ff ff96 	bl	801ab40 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 801ac14:	e014      	b.n	801ac40 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 801ac16:	68bb      	ldr	r3, [r7, #8]
 801ac18:	3301      	adds	r3, #1
 801ac1a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 801ac1c:	68bb      	ldr	r3, [r7, #8]
 801ac1e:	4a18      	ldr	r2, [pc, #96]	; (801ac80 <HAL_ADCEx_Calibration_Start+0xc0>)
 801ac20:	4293      	cmp	r3, r2
 801ac22:	d90d      	bls.n	801ac40 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ac28:	f023 0312 	bic.w	r3, r3, #18
 801ac2c:	f043 0210 	orr.w	r2, r3, #16
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	2200      	movs	r2, #0
 801ac38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 801ac3c:	2301      	movs	r3, #1
 801ac3e:	e01b      	b.n	801ac78 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 801ac40:	687b      	ldr	r3, [r7, #4]
 801ac42:	681b      	ldr	r3, [r3, #0]
 801ac44:	4618      	mov	r0, r3
 801ac46:	f7ff ff94 	bl	801ab72 <LL_ADC_IsCalibrationOnGoing>
 801ac4a:	4603      	mov	r3, r0
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	d1e2      	bne.n	801ac16 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ac54:	f023 0303 	bic.w	r3, r3, #3
 801ac58:	f043 0201 	orr.w	r2, r3, #1
 801ac5c:	687b      	ldr	r3, [r7, #4]
 801ac5e:	65da      	str	r2, [r3, #92]	; 0x5c
 801ac60:	e005      	b.n	801ac6e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ac66:	f043 0210 	orr.w	r2, r3, #16
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	2200      	movs	r2, #0
 801ac72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801ac76:	7bfb      	ldrb	r3, [r7, #15]
}
 801ac78:	4618      	mov	r0, r3
 801ac7a:	3710      	adds	r7, #16
 801ac7c:	46bd      	mov	sp, r7
 801ac7e:	bd80      	pop	{r7, pc}
 801ac80:	0004de01 	.word	0x0004de01

0801ac84 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 801ac84:	b480      	push	{r7}
 801ac86:	b083      	sub	sp, #12
 801ac88:	af00      	add	r7, sp, #0
 801ac8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 801ac8c:	bf00      	nop
 801ac8e:	370c      	adds	r7, #12
 801ac90:	46bd      	mov	sp, r7
 801ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac96:	4770      	bx	lr

0801ac98 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 801ac98:	b480      	push	{r7}
 801ac9a:	b083      	sub	sp, #12
 801ac9c:	af00      	add	r7, sp, #0
 801ac9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 801aca0:	bf00      	nop
 801aca2:	370c      	adds	r7, #12
 801aca4:	46bd      	mov	sp, r7
 801aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acaa:	4770      	bx	lr

0801acac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 801acac:	b480      	push	{r7}
 801acae:	b083      	sub	sp, #12
 801acb0:	af00      	add	r7, sp, #0
 801acb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 801acb4:	bf00      	nop
 801acb6:	370c      	adds	r7, #12
 801acb8:	46bd      	mov	sp, r7
 801acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acbe:	4770      	bx	lr

0801acc0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 801acc0:	b480      	push	{r7}
 801acc2:	b083      	sub	sp, #12
 801acc4:	af00      	add	r7, sp, #0
 801acc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 801acc8:	bf00      	nop
 801acca:	370c      	adds	r7, #12
 801accc:	46bd      	mov	sp, r7
 801acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acd2:	4770      	bx	lr

0801acd4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 801acd4:	b480      	push	{r7}
 801acd6:	b083      	sub	sp, #12
 801acd8:	af00      	add	r7, sp, #0
 801acda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 801acdc:	bf00      	nop
 801acde:	370c      	adds	r7, #12
 801ace0:	46bd      	mov	sp, r7
 801ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ace6:	4770      	bx	lr

0801ace8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 801ace8:	b590      	push	{r4, r7, lr}
 801acea:	b0a1      	sub	sp, #132	; 0x84
 801acec:	af00      	add	r7, sp, #0
 801acee:	6078      	str	r0, [r7, #4]
 801acf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801acf2:	2300      	movs	r3, #0
 801acf4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801acfe:	2b01      	cmp	r3, #1
 801ad00:	d101      	bne.n	801ad06 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 801ad02:	2302      	movs	r3, #2
 801ad04:	e0cb      	b.n	801ae9e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 801ad06:	687b      	ldr	r3, [r7, #4]
 801ad08:	2201      	movs	r2, #1
 801ad0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 801ad0e:	2300      	movs	r3, #0
 801ad10:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 801ad12:	2300      	movs	r3, #0
 801ad14:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	681b      	ldr	r3, [r3, #0]
 801ad1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801ad1e:	d102      	bne.n	801ad26 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 801ad20:	4b61      	ldr	r3, [pc, #388]	; (801aea8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801ad22:	60bb      	str	r3, [r7, #8]
 801ad24:	e001      	b.n	801ad2a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 801ad26:	2300      	movs	r3, #0
 801ad28:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 801ad2a:	68bb      	ldr	r3, [r7, #8]
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	d10b      	bne.n	801ad48 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ad34:	f043 0220 	orr.w	r2, r3, #32
 801ad38:	687b      	ldr	r3, [r7, #4]
 801ad3a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	2200      	movs	r2, #0
 801ad40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 801ad44:	2301      	movs	r3, #1
 801ad46:	e0aa      	b.n	801ae9e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 801ad48:	68bb      	ldr	r3, [r7, #8]
 801ad4a:	4618      	mov	r0, r3
 801ad4c:	f7ff ff25 	bl	801ab9a <LL_ADC_REG_IsConversionOngoing>
 801ad50:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801ad52:	687b      	ldr	r3, [r7, #4]
 801ad54:	681b      	ldr	r3, [r3, #0]
 801ad56:	4618      	mov	r0, r3
 801ad58:	f7ff ff1f 	bl	801ab9a <LL_ADC_REG_IsConversionOngoing>
 801ad5c:	4603      	mov	r3, r0
 801ad5e:	2b00      	cmp	r3, #0
 801ad60:	f040 808c 	bne.w	801ae7c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 801ad64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	f040 8088 	bne.w	801ae7c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	681b      	ldr	r3, [r3, #0]
 801ad70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801ad74:	d004      	beq.n	801ad80 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	681b      	ldr	r3, [r3, #0]
 801ad7a:	4a4b      	ldr	r2, [pc, #300]	; (801aea8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801ad7c:	4293      	cmp	r3, r2
 801ad7e:	d101      	bne.n	801ad84 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 801ad80:	4b4a      	ldr	r3, [pc, #296]	; (801aeac <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 801ad82:	e000      	b.n	801ad86 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 801ad84:	4b4a      	ldr	r3, [pc, #296]	; (801aeb0 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 801ad86:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801ad88:	683b      	ldr	r3, [r7, #0]
 801ad8a:	681b      	ldr	r3, [r3, #0]
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	d041      	beq.n	801ae14 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 801ad90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ad92:	689b      	ldr	r3, [r3, #8]
 801ad94:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801ad98:	683b      	ldr	r3, [r7, #0]
 801ad9a:	6859      	ldr	r1, [r3, #4]
 801ad9c:	687b      	ldr	r3, [r7, #4]
 801ad9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801ada2:	035b      	lsls	r3, r3, #13
 801ada4:	430b      	orrs	r3, r1
 801ada6:	431a      	orrs	r2, r3
 801ada8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801adaa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801adac:	687b      	ldr	r3, [r7, #4]
 801adae:	681b      	ldr	r3, [r3, #0]
 801adb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801adb4:	d004      	beq.n	801adc0 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	681b      	ldr	r3, [r3, #0]
 801adba:	4a3b      	ldr	r2, [pc, #236]	; (801aea8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801adbc:	4293      	cmp	r3, r2
 801adbe:	d10f      	bne.n	801ade0 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 801adc0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801adc4:	f7ff fea9 	bl	801ab1a <LL_ADC_IsEnabled>
 801adc8:	4604      	mov	r4, r0
 801adca:	4837      	ldr	r0, [pc, #220]	; (801aea8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801adcc:	f7ff fea5 	bl	801ab1a <LL_ADC_IsEnabled>
 801add0:	4603      	mov	r3, r0
 801add2:	4323      	orrs	r3, r4
 801add4:	2b00      	cmp	r3, #0
 801add6:	bf0c      	ite	eq
 801add8:	2301      	moveq	r3, #1
 801adda:	2300      	movne	r3, #0
 801addc:	b2db      	uxtb	r3, r3
 801adde:	e008      	b.n	801adf2 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 801ade0:	4834      	ldr	r0, [pc, #208]	; (801aeb4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 801ade2:	f7ff fe9a 	bl	801ab1a <LL_ADC_IsEnabled>
 801ade6:	4603      	mov	r3, r0
 801ade8:	2b00      	cmp	r3, #0
 801adea:	bf0c      	ite	eq
 801adec:	2301      	moveq	r3, #1
 801adee:	2300      	movne	r3, #0
 801adf0:	b2db      	uxtb	r3, r3
 801adf2:	2b00      	cmp	r3, #0
 801adf4:	d04c      	beq.n	801ae90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 801adf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801adf8:	689b      	ldr	r3, [r3, #8]
 801adfa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 801adfe:	f023 030f 	bic.w	r3, r3, #15
 801ae02:	683a      	ldr	r2, [r7, #0]
 801ae04:	6811      	ldr	r1, [r2, #0]
 801ae06:	683a      	ldr	r2, [r7, #0]
 801ae08:	6892      	ldr	r2, [r2, #8]
 801ae0a:	430a      	orrs	r2, r1
 801ae0c:	431a      	orrs	r2, r3
 801ae0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ae10:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801ae12:	e03d      	b.n	801ae90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 801ae14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ae16:	689b      	ldr	r3, [r3, #8]
 801ae18:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801ae1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ae1e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801ae20:	687b      	ldr	r3, [r7, #4]
 801ae22:	681b      	ldr	r3, [r3, #0]
 801ae24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801ae28:	d004      	beq.n	801ae34 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 801ae2a:	687b      	ldr	r3, [r7, #4]
 801ae2c:	681b      	ldr	r3, [r3, #0]
 801ae2e:	4a1e      	ldr	r2, [pc, #120]	; (801aea8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801ae30:	4293      	cmp	r3, r2
 801ae32:	d10f      	bne.n	801ae54 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 801ae34:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801ae38:	f7ff fe6f 	bl	801ab1a <LL_ADC_IsEnabled>
 801ae3c:	4604      	mov	r4, r0
 801ae3e:	481a      	ldr	r0, [pc, #104]	; (801aea8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801ae40:	f7ff fe6b 	bl	801ab1a <LL_ADC_IsEnabled>
 801ae44:	4603      	mov	r3, r0
 801ae46:	4323      	orrs	r3, r4
 801ae48:	2b00      	cmp	r3, #0
 801ae4a:	bf0c      	ite	eq
 801ae4c:	2301      	moveq	r3, #1
 801ae4e:	2300      	movne	r3, #0
 801ae50:	b2db      	uxtb	r3, r3
 801ae52:	e008      	b.n	801ae66 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 801ae54:	4817      	ldr	r0, [pc, #92]	; (801aeb4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 801ae56:	f7ff fe60 	bl	801ab1a <LL_ADC_IsEnabled>
 801ae5a:	4603      	mov	r3, r0
 801ae5c:	2b00      	cmp	r3, #0
 801ae5e:	bf0c      	ite	eq
 801ae60:	2301      	moveq	r3, #1
 801ae62:	2300      	movne	r3, #0
 801ae64:	b2db      	uxtb	r3, r3
 801ae66:	2b00      	cmp	r3, #0
 801ae68:	d012      	beq.n	801ae90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 801ae6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ae6c:	689b      	ldr	r3, [r3, #8]
 801ae6e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 801ae72:	f023 030f 	bic.w	r3, r3, #15
 801ae76:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801ae78:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801ae7a:	e009      	b.n	801ae90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ae80:	f043 0220 	orr.w	r2, r3, #32
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 801ae88:	2301      	movs	r3, #1
 801ae8a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801ae8e:	e000      	b.n	801ae92 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801ae90:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	2200      	movs	r2, #0
 801ae96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801ae9a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 801ae9e:	4618      	mov	r0, r3
 801aea0:	3784      	adds	r7, #132	; 0x84
 801aea2:	46bd      	mov	sp, r7
 801aea4:	bd90      	pop	{r4, r7, pc}
 801aea6:	bf00      	nop
 801aea8:	50000100 	.word	0x50000100
 801aeac:	50000300 	.word	0x50000300
 801aeb0:	50000700 	.word	0x50000700
 801aeb4:	50000400 	.word	0x50000400

0801aeb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801aeb8:	b480      	push	{r7}
 801aeba:	b085      	sub	sp, #20
 801aebc:	af00      	add	r7, sp, #0
 801aebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	f003 0307 	and.w	r3, r3, #7
 801aec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801aec8:	4b0c      	ldr	r3, [pc, #48]	; (801aefc <__NVIC_SetPriorityGrouping+0x44>)
 801aeca:	68db      	ldr	r3, [r3, #12]
 801aecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801aece:	68ba      	ldr	r2, [r7, #8]
 801aed0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801aed4:	4013      	ands	r3, r2
 801aed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801aed8:	68fb      	ldr	r3, [r7, #12]
 801aeda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801aedc:	68bb      	ldr	r3, [r7, #8]
 801aede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801aee0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801aee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801aee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801aeea:	4a04      	ldr	r2, [pc, #16]	; (801aefc <__NVIC_SetPriorityGrouping+0x44>)
 801aeec:	68bb      	ldr	r3, [r7, #8]
 801aeee:	60d3      	str	r3, [r2, #12]
}
 801aef0:	bf00      	nop
 801aef2:	3714      	adds	r7, #20
 801aef4:	46bd      	mov	sp, r7
 801aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aefa:	4770      	bx	lr
 801aefc:	e000ed00 	.word	0xe000ed00

0801af00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801af00:	b480      	push	{r7}
 801af02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801af04:	4b04      	ldr	r3, [pc, #16]	; (801af18 <__NVIC_GetPriorityGrouping+0x18>)
 801af06:	68db      	ldr	r3, [r3, #12]
 801af08:	0a1b      	lsrs	r3, r3, #8
 801af0a:	f003 0307 	and.w	r3, r3, #7
}
 801af0e:	4618      	mov	r0, r3
 801af10:	46bd      	mov	sp, r7
 801af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af16:	4770      	bx	lr
 801af18:	e000ed00 	.word	0xe000ed00

0801af1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801af1c:	b480      	push	{r7}
 801af1e:	b083      	sub	sp, #12
 801af20:	af00      	add	r7, sp, #0
 801af22:	4603      	mov	r3, r0
 801af24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801af26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801af2a:	2b00      	cmp	r3, #0
 801af2c:	db0b      	blt.n	801af46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801af2e:	79fb      	ldrb	r3, [r7, #7]
 801af30:	f003 021f 	and.w	r2, r3, #31
 801af34:	4907      	ldr	r1, [pc, #28]	; (801af54 <__NVIC_EnableIRQ+0x38>)
 801af36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801af3a:	095b      	lsrs	r3, r3, #5
 801af3c:	2001      	movs	r0, #1
 801af3e:	fa00 f202 	lsl.w	r2, r0, r2
 801af42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801af46:	bf00      	nop
 801af48:	370c      	adds	r7, #12
 801af4a:	46bd      	mov	sp, r7
 801af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af50:	4770      	bx	lr
 801af52:	bf00      	nop
 801af54:	e000e100 	.word	0xe000e100

0801af58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801af58:	b480      	push	{r7}
 801af5a:	b083      	sub	sp, #12
 801af5c:	af00      	add	r7, sp, #0
 801af5e:	4603      	mov	r3, r0
 801af60:	6039      	str	r1, [r7, #0]
 801af62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801af64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801af68:	2b00      	cmp	r3, #0
 801af6a:	db0a      	blt.n	801af82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801af6c:	683b      	ldr	r3, [r7, #0]
 801af6e:	b2da      	uxtb	r2, r3
 801af70:	490c      	ldr	r1, [pc, #48]	; (801afa4 <__NVIC_SetPriority+0x4c>)
 801af72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801af76:	0112      	lsls	r2, r2, #4
 801af78:	b2d2      	uxtb	r2, r2
 801af7a:	440b      	add	r3, r1
 801af7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801af80:	e00a      	b.n	801af98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801af82:	683b      	ldr	r3, [r7, #0]
 801af84:	b2da      	uxtb	r2, r3
 801af86:	4908      	ldr	r1, [pc, #32]	; (801afa8 <__NVIC_SetPriority+0x50>)
 801af88:	79fb      	ldrb	r3, [r7, #7]
 801af8a:	f003 030f 	and.w	r3, r3, #15
 801af8e:	3b04      	subs	r3, #4
 801af90:	0112      	lsls	r2, r2, #4
 801af92:	b2d2      	uxtb	r2, r2
 801af94:	440b      	add	r3, r1
 801af96:	761a      	strb	r2, [r3, #24]
}
 801af98:	bf00      	nop
 801af9a:	370c      	adds	r7, #12
 801af9c:	46bd      	mov	sp, r7
 801af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afa2:	4770      	bx	lr
 801afa4:	e000e100 	.word	0xe000e100
 801afa8:	e000ed00 	.word	0xe000ed00

0801afac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801afac:	b480      	push	{r7}
 801afae:	b089      	sub	sp, #36	; 0x24
 801afb0:	af00      	add	r7, sp, #0
 801afb2:	60f8      	str	r0, [r7, #12]
 801afb4:	60b9      	str	r1, [r7, #8]
 801afb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801afb8:	68fb      	ldr	r3, [r7, #12]
 801afba:	f003 0307 	and.w	r3, r3, #7
 801afbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801afc0:	69fb      	ldr	r3, [r7, #28]
 801afc2:	f1c3 0307 	rsb	r3, r3, #7
 801afc6:	2b04      	cmp	r3, #4
 801afc8:	bf28      	it	cs
 801afca:	2304      	movcs	r3, #4
 801afcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801afce:	69fb      	ldr	r3, [r7, #28]
 801afd0:	3304      	adds	r3, #4
 801afd2:	2b06      	cmp	r3, #6
 801afd4:	d902      	bls.n	801afdc <NVIC_EncodePriority+0x30>
 801afd6:	69fb      	ldr	r3, [r7, #28]
 801afd8:	3b03      	subs	r3, #3
 801afda:	e000      	b.n	801afde <NVIC_EncodePriority+0x32>
 801afdc:	2300      	movs	r3, #0
 801afde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801afe0:	f04f 32ff 	mov.w	r2, #4294967295
 801afe4:	69bb      	ldr	r3, [r7, #24]
 801afe6:	fa02 f303 	lsl.w	r3, r2, r3
 801afea:	43da      	mvns	r2, r3
 801afec:	68bb      	ldr	r3, [r7, #8]
 801afee:	401a      	ands	r2, r3
 801aff0:	697b      	ldr	r3, [r7, #20]
 801aff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801aff4:	f04f 31ff 	mov.w	r1, #4294967295
 801aff8:	697b      	ldr	r3, [r7, #20]
 801affa:	fa01 f303 	lsl.w	r3, r1, r3
 801affe:	43d9      	mvns	r1, r3
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b004:	4313      	orrs	r3, r2
         );
}
 801b006:	4618      	mov	r0, r3
 801b008:	3724      	adds	r7, #36	; 0x24
 801b00a:	46bd      	mov	sp, r7
 801b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b010:	4770      	bx	lr
	...

0801b014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801b014:	b580      	push	{r7, lr}
 801b016:	b082      	sub	sp, #8
 801b018:	af00      	add	r7, sp, #0
 801b01a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	3b01      	subs	r3, #1
 801b020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801b024:	d301      	bcc.n	801b02a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801b026:	2301      	movs	r3, #1
 801b028:	e00f      	b.n	801b04a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801b02a:	4a0a      	ldr	r2, [pc, #40]	; (801b054 <SysTick_Config+0x40>)
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	3b01      	subs	r3, #1
 801b030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801b032:	210f      	movs	r1, #15
 801b034:	f04f 30ff 	mov.w	r0, #4294967295
 801b038:	f7ff ff8e 	bl	801af58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801b03c:	4b05      	ldr	r3, [pc, #20]	; (801b054 <SysTick_Config+0x40>)
 801b03e:	2200      	movs	r2, #0
 801b040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801b042:	4b04      	ldr	r3, [pc, #16]	; (801b054 <SysTick_Config+0x40>)
 801b044:	2207      	movs	r2, #7
 801b046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801b048:	2300      	movs	r3, #0
}
 801b04a:	4618      	mov	r0, r3
 801b04c:	3708      	adds	r7, #8
 801b04e:	46bd      	mov	sp, r7
 801b050:	bd80      	pop	{r7, pc}
 801b052:	bf00      	nop
 801b054:	e000e010 	.word	0xe000e010

0801b058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801b058:	b580      	push	{r7, lr}
 801b05a:	b082      	sub	sp, #8
 801b05c:	af00      	add	r7, sp, #0
 801b05e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801b060:	6878      	ldr	r0, [r7, #4]
 801b062:	f7ff ff29 	bl	801aeb8 <__NVIC_SetPriorityGrouping>
}
 801b066:	bf00      	nop
 801b068:	3708      	adds	r7, #8
 801b06a:	46bd      	mov	sp, r7
 801b06c:	bd80      	pop	{r7, pc}

0801b06e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801b06e:	b580      	push	{r7, lr}
 801b070:	b086      	sub	sp, #24
 801b072:	af00      	add	r7, sp, #0
 801b074:	4603      	mov	r3, r0
 801b076:	60b9      	str	r1, [r7, #8]
 801b078:	607a      	str	r2, [r7, #4]
 801b07a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801b07c:	f7ff ff40 	bl	801af00 <__NVIC_GetPriorityGrouping>
 801b080:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801b082:	687a      	ldr	r2, [r7, #4]
 801b084:	68b9      	ldr	r1, [r7, #8]
 801b086:	6978      	ldr	r0, [r7, #20]
 801b088:	f7ff ff90 	bl	801afac <NVIC_EncodePriority>
 801b08c:	4602      	mov	r2, r0
 801b08e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b092:	4611      	mov	r1, r2
 801b094:	4618      	mov	r0, r3
 801b096:	f7ff ff5f 	bl	801af58 <__NVIC_SetPriority>
}
 801b09a:	bf00      	nop
 801b09c:	3718      	adds	r7, #24
 801b09e:	46bd      	mov	sp, r7
 801b0a0:	bd80      	pop	{r7, pc}

0801b0a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801b0a2:	b580      	push	{r7, lr}
 801b0a4:	b082      	sub	sp, #8
 801b0a6:	af00      	add	r7, sp, #0
 801b0a8:	4603      	mov	r3, r0
 801b0aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801b0ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b0b0:	4618      	mov	r0, r3
 801b0b2:	f7ff ff33 	bl	801af1c <__NVIC_EnableIRQ>
}
 801b0b6:	bf00      	nop
 801b0b8:	3708      	adds	r7, #8
 801b0ba:	46bd      	mov	sp, r7
 801b0bc:	bd80      	pop	{r7, pc}

0801b0be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801b0be:	b580      	push	{r7, lr}
 801b0c0:	b082      	sub	sp, #8
 801b0c2:	af00      	add	r7, sp, #0
 801b0c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801b0c6:	6878      	ldr	r0, [r7, #4]
 801b0c8:	f7ff ffa4 	bl	801b014 <SysTick_Config>
 801b0cc:	4603      	mov	r3, r0
}
 801b0ce:	4618      	mov	r0, r3
 801b0d0:	3708      	adds	r7, #8
 801b0d2:	46bd      	mov	sp, r7
 801b0d4:	bd80      	pop	{r7, pc}
	...

0801b0d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801b0d8:	b580      	push	{r7, lr}
 801b0da:	b084      	sub	sp, #16
 801b0dc:	af00      	add	r7, sp, #0
 801b0de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 801b0e0:	687b      	ldr	r3, [r7, #4]
 801b0e2:	2b00      	cmp	r3, #0
 801b0e4:	d101      	bne.n	801b0ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 801b0e6:	2301      	movs	r3, #1
 801b0e8:	e08d      	b.n	801b206 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 801b0ea:	687b      	ldr	r3, [r7, #4]
 801b0ec:	681b      	ldr	r3, [r3, #0]
 801b0ee:	461a      	mov	r2, r3
 801b0f0:	4b47      	ldr	r3, [pc, #284]	; (801b210 <HAL_DMA_Init+0x138>)
 801b0f2:	429a      	cmp	r2, r3
 801b0f4:	d80f      	bhi.n	801b116 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 801b0f6:	687b      	ldr	r3, [r7, #4]
 801b0f8:	681b      	ldr	r3, [r3, #0]
 801b0fa:	461a      	mov	r2, r3
 801b0fc:	4b45      	ldr	r3, [pc, #276]	; (801b214 <HAL_DMA_Init+0x13c>)
 801b0fe:	4413      	add	r3, r2
 801b100:	4a45      	ldr	r2, [pc, #276]	; (801b218 <HAL_DMA_Init+0x140>)
 801b102:	fba2 2303 	umull	r2, r3, r2, r3
 801b106:	091b      	lsrs	r3, r3, #4
 801b108:	009a      	lsls	r2, r3, #2
 801b10a:	687b      	ldr	r3, [r7, #4]
 801b10c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	4a42      	ldr	r2, [pc, #264]	; (801b21c <HAL_DMA_Init+0x144>)
 801b112:	641a      	str	r2, [r3, #64]	; 0x40
 801b114:	e00e      	b.n	801b134 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	681b      	ldr	r3, [r3, #0]
 801b11a:	461a      	mov	r2, r3
 801b11c:	4b40      	ldr	r3, [pc, #256]	; (801b220 <HAL_DMA_Init+0x148>)
 801b11e:	4413      	add	r3, r2
 801b120:	4a3d      	ldr	r2, [pc, #244]	; (801b218 <HAL_DMA_Init+0x140>)
 801b122:	fba2 2303 	umull	r2, r3, r2, r3
 801b126:	091b      	lsrs	r3, r3, #4
 801b128:	009a      	lsls	r2, r3, #2
 801b12a:	687b      	ldr	r3, [r7, #4]
 801b12c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	4a3c      	ldr	r2, [pc, #240]	; (801b224 <HAL_DMA_Init+0x14c>)
 801b132:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	2202      	movs	r2, #2
 801b138:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	681b      	ldr	r3, [r3, #0]
 801b140:	681b      	ldr	r3, [r3, #0]
 801b142:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 801b144:	68fb      	ldr	r3, [r7, #12]
 801b146:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 801b14a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b14e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 801b158:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801b15a:	687b      	ldr	r3, [r7, #4]
 801b15c:	691b      	ldr	r3, [r3, #16]
 801b15e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801b164:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801b166:	687b      	ldr	r3, [r7, #4]
 801b168:	699b      	ldr	r3, [r3, #24]
 801b16a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801b170:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801b172:	687b      	ldr	r3, [r7, #4]
 801b174:	6a1b      	ldr	r3, [r3, #32]
 801b176:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 801b178:	68fa      	ldr	r2, [r7, #12]
 801b17a:	4313      	orrs	r3, r2
 801b17c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 801b17e:	687b      	ldr	r3, [r7, #4]
 801b180:	681b      	ldr	r3, [r3, #0]
 801b182:	68fa      	ldr	r2, [r7, #12]
 801b184:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801b186:	6878      	ldr	r0, [r7, #4]
 801b188:	f000 fa10 	bl	801b5ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	689b      	ldr	r3, [r3, #8]
 801b190:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801b194:	d102      	bne.n	801b19c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	2200      	movs	r2, #0
 801b19a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801b19c:	687b      	ldr	r3, [r7, #4]
 801b19e:	685a      	ldr	r2, [r3, #4]
 801b1a0:	687b      	ldr	r3, [r7, #4]
 801b1a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b1a4:	b2d2      	uxtb	r2, r2
 801b1a6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b1ac:	687a      	ldr	r2, [r7, #4]
 801b1ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801b1b0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	685b      	ldr	r3, [r3, #4]
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	d010      	beq.n	801b1dc <HAL_DMA_Init+0x104>
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	685b      	ldr	r3, [r3, #4]
 801b1be:	2b04      	cmp	r3, #4
 801b1c0:	d80c      	bhi.n	801b1dc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801b1c2:	6878      	ldr	r0, [r7, #4]
 801b1c4:	f000 fa30 	bl	801b628 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b1cc:	2200      	movs	r2, #0
 801b1ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b1d0:	687b      	ldr	r3, [r7, #4]
 801b1d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b1d4:	687a      	ldr	r2, [r7, #4]
 801b1d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801b1d8:	605a      	str	r2, [r3, #4]
 801b1da:	e008      	b.n	801b1ee <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 801b1dc:	687b      	ldr	r3, [r7, #4]
 801b1de:	2200      	movs	r2, #0
 801b1e0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	2200      	movs	r2, #0
 801b1e6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 801b1e8:	687b      	ldr	r3, [r7, #4]
 801b1ea:	2200      	movs	r2, #0
 801b1ec:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	2200      	movs	r2, #0
 801b1f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	2201      	movs	r2, #1
 801b1f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	2200      	movs	r2, #0
 801b200:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801b204:	2300      	movs	r3, #0
}
 801b206:	4618      	mov	r0, r3
 801b208:	3710      	adds	r7, #16
 801b20a:	46bd      	mov	sp, r7
 801b20c:	bd80      	pop	{r7, pc}
 801b20e:	bf00      	nop
 801b210:	40020407 	.word	0x40020407
 801b214:	bffdfff8 	.word	0xbffdfff8
 801b218:	cccccccd 	.word	0xcccccccd
 801b21c:	40020000 	.word	0x40020000
 801b220:	bffdfbf8 	.word	0xbffdfbf8
 801b224:	40020400 	.word	0x40020400

0801b228 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 801b228:	b580      	push	{r7, lr}
 801b22a:	b086      	sub	sp, #24
 801b22c:	af00      	add	r7, sp, #0
 801b22e:	60f8      	str	r0, [r7, #12]
 801b230:	60b9      	str	r1, [r7, #8]
 801b232:	607a      	str	r2, [r7, #4]
 801b234:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801b236:	2300      	movs	r3, #0
 801b238:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 801b23a:	68fb      	ldr	r3, [r7, #12]
 801b23c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b240:	2b01      	cmp	r3, #1
 801b242:	d101      	bne.n	801b248 <HAL_DMA_Start_IT+0x20>
 801b244:	2302      	movs	r3, #2
 801b246:	e066      	b.n	801b316 <HAL_DMA_Start_IT+0xee>
 801b248:	68fb      	ldr	r3, [r7, #12]
 801b24a:	2201      	movs	r2, #1
 801b24c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 801b250:	68fb      	ldr	r3, [r7, #12]
 801b252:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801b256:	b2db      	uxtb	r3, r3
 801b258:	2b01      	cmp	r3, #1
 801b25a:	d155      	bne.n	801b308 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801b25c:	68fb      	ldr	r3, [r7, #12]
 801b25e:	2202      	movs	r2, #2
 801b260:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801b264:	68fb      	ldr	r3, [r7, #12]
 801b266:	2200      	movs	r2, #0
 801b268:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801b26a:	68fb      	ldr	r3, [r7, #12]
 801b26c:	681b      	ldr	r3, [r3, #0]
 801b26e:	681a      	ldr	r2, [r3, #0]
 801b270:	68fb      	ldr	r3, [r7, #12]
 801b272:	681b      	ldr	r3, [r3, #0]
 801b274:	f022 0201 	bic.w	r2, r2, #1
 801b278:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801b27a:	683b      	ldr	r3, [r7, #0]
 801b27c:	687a      	ldr	r2, [r7, #4]
 801b27e:	68b9      	ldr	r1, [r7, #8]
 801b280:	68f8      	ldr	r0, [r7, #12]
 801b282:	f000 f954 	bl	801b52e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 801b286:	68fb      	ldr	r3, [r7, #12]
 801b288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b28a:	2b00      	cmp	r3, #0
 801b28c:	d008      	beq.n	801b2a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b28e:	68fb      	ldr	r3, [r7, #12]
 801b290:	681b      	ldr	r3, [r3, #0]
 801b292:	681a      	ldr	r2, [r3, #0]
 801b294:	68fb      	ldr	r3, [r7, #12]
 801b296:	681b      	ldr	r3, [r3, #0]
 801b298:	f042 020e 	orr.w	r2, r2, #14
 801b29c:	601a      	str	r2, [r3, #0]
 801b29e:	e00f      	b.n	801b2c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801b2a0:	68fb      	ldr	r3, [r7, #12]
 801b2a2:	681b      	ldr	r3, [r3, #0]
 801b2a4:	681a      	ldr	r2, [r3, #0]
 801b2a6:	68fb      	ldr	r3, [r7, #12]
 801b2a8:	681b      	ldr	r3, [r3, #0]
 801b2aa:	f022 0204 	bic.w	r2, r2, #4
 801b2ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 801b2b0:	68fb      	ldr	r3, [r7, #12]
 801b2b2:	681b      	ldr	r3, [r3, #0]
 801b2b4:	681a      	ldr	r2, [r3, #0]
 801b2b6:	68fb      	ldr	r3, [r7, #12]
 801b2b8:	681b      	ldr	r3, [r3, #0]
 801b2ba:	f042 020a 	orr.w	r2, r2, #10
 801b2be:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801b2c0:	68fb      	ldr	r3, [r7, #12]
 801b2c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b2c4:	681b      	ldr	r3, [r3, #0]
 801b2c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b2ca:	2b00      	cmp	r3, #0
 801b2cc:	d007      	beq.n	801b2de <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801b2ce:	68fb      	ldr	r3, [r7, #12]
 801b2d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b2d2:	681a      	ldr	r2, [r3, #0]
 801b2d4:	68fb      	ldr	r3, [r7, #12]
 801b2d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b2d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b2dc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 801b2de:	68fb      	ldr	r3, [r7, #12]
 801b2e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b2e2:	2b00      	cmp	r3, #0
 801b2e4:	d007      	beq.n	801b2f6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 801b2e6:	68fb      	ldr	r3, [r7, #12]
 801b2e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b2ea:	681a      	ldr	r2, [r3, #0]
 801b2ec:	68fb      	ldr	r3, [r7, #12]
 801b2ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b2f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b2f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801b2f6:	68fb      	ldr	r3, [r7, #12]
 801b2f8:	681b      	ldr	r3, [r3, #0]
 801b2fa:	681a      	ldr	r2, [r3, #0]
 801b2fc:	68fb      	ldr	r3, [r7, #12]
 801b2fe:	681b      	ldr	r3, [r3, #0]
 801b300:	f042 0201 	orr.w	r2, r2, #1
 801b304:	601a      	str	r2, [r3, #0]
 801b306:	e005      	b.n	801b314 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b308:	68fb      	ldr	r3, [r7, #12]
 801b30a:	2200      	movs	r2, #0
 801b30c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 801b310:	2302      	movs	r3, #2
 801b312:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801b314:	7dfb      	ldrb	r3, [r7, #23]
}
 801b316:	4618      	mov	r0, r3
 801b318:	3718      	adds	r7, #24
 801b31a:	46bd      	mov	sp, r7
 801b31c:	bd80      	pop	{r7, pc}

0801b31e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801b31e:	b480      	push	{r7}
 801b320:	b085      	sub	sp, #20
 801b322:	af00      	add	r7, sp, #0
 801b324:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b326:	2300      	movs	r3, #0
 801b328:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801b32a:	687b      	ldr	r3, [r7, #4]
 801b32c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801b330:	b2db      	uxtb	r3, r3
 801b332:	2b02      	cmp	r3, #2
 801b334:	d005      	beq.n	801b342 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801b336:	687b      	ldr	r3, [r7, #4]
 801b338:	2204      	movs	r2, #4
 801b33a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 801b33c:	2301      	movs	r3, #1
 801b33e:	73fb      	strb	r3, [r7, #15]
 801b340:	e037      	b.n	801b3b2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	681b      	ldr	r3, [r3, #0]
 801b346:	681a      	ldr	r2, [r3, #0]
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	681b      	ldr	r3, [r3, #0]
 801b34c:	f022 020e 	bic.w	r2, r2, #14
 801b350:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b356:	681a      	ldr	r2, [r3, #0]
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b35c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801b360:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	681b      	ldr	r3, [r3, #0]
 801b366:	681a      	ldr	r2, [r3, #0]
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	681b      	ldr	r3, [r3, #0]
 801b36c:	f022 0201 	bic.w	r2, r2, #1
 801b370:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b376:	f003 021f 	and.w	r2, r3, #31
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b37e:	2101      	movs	r1, #1
 801b380:	fa01 f202 	lsl.w	r2, r1, r2
 801b384:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b38a:	687a      	ldr	r2, [r7, #4]
 801b38c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801b38e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b394:	2b00      	cmp	r3, #0
 801b396:	d00c      	beq.n	801b3b2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801b398:	687b      	ldr	r3, [r7, #4]
 801b39a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b39c:	681a      	ldr	r2, [r3, #0]
 801b39e:	687b      	ldr	r3, [r7, #4]
 801b3a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b3a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801b3a6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b3ac:	687a      	ldr	r2, [r7, #4]
 801b3ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801b3b0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	2201      	movs	r2, #1
 801b3b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 801b3ba:	687b      	ldr	r3, [r7, #4]
 801b3bc:	2200      	movs	r2, #0
 801b3be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 801b3c2:	7bfb      	ldrb	r3, [r7, #15]
}
 801b3c4:	4618      	mov	r0, r3
 801b3c6:	3714      	adds	r7, #20
 801b3c8:	46bd      	mov	sp, r7
 801b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3ce:	4770      	bx	lr

0801b3d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801b3d0:	b580      	push	{r7, lr}
 801b3d2:	b084      	sub	sp, #16
 801b3d4:	af00      	add	r7, sp, #0
 801b3d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801b3d8:	687b      	ldr	r3, [r7, #4]
 801b3da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b3dc:	681b      	ldr	r3, [r3, #0]
 801b3de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	681b      	ldr	r3, [r3, #0]
 801b3e4:	681b      	ldr	r3, [r3, #0]
 801b3e6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 801b3e8:	687b      	ldr	r3, [r7, #4]
 801b3ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b3ec:	f003 031f 	and.w	r3, r3, #31
 801b3f0:	2204      	movs	r2, #4
 801b3f2:	409a      	lsls	r2, r3
 801b3f4:	68fb      	ldr	r3, [r7, #12]
 801b3f6:	4013      	ands	r3, r2
 801b3f8:	2b00      	cmp	r3, #0
 801b3fa:	d026      	beq.n	801b44a <HAL_DMA_IRQHandler+0x7a>
 801b3fc:	68bb      	ldr	r3, [r7, #8]
 801b3fe:	f003 0304 	and.w	r3, r3, #4
 801b402:	2b00      	cmp	r3, #0
 801b404:	d021      	beq.n	801b44a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801b406:	687b      	ldr	r3, [r7, #4]
 801b408:	681b      	ldr	r3, [r3, #0]
 801b40a:	681b      	ldr	r3, [r3, #0]
 801b40c:	f003 0320 	and.w	r3, r3, #32
 801b410:	2b00      	cmp	r3, #0
 801b412:	d107      	bne.n	801b424 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801b414:	687b      	ldr	r3, [r7, #4]
 801b416:	681b      	ldr	r3, [r3, #0]
 801b418:	681a      	ldr	r2, [r3, #0]
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	681b      	ldr	r3, [r3, #0]
 801b41e:	f022 0204 	bic.w	r2, r2, #4
 801b422:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b428:	f003 021f 	and.w	r2, r3, #31
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b430:	2104      	movs	r1, #4
 801b432:	fa01 f202 	lsl.w	r2, r1, r2
 801b436:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b43c:	2b00      	cmp	r3, #0
 801b43e:	d071      	beq.n	801b524 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b444:	6878      	ldr	r0, [r7, #4]
 801b446:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 801b448:	e06c      	b.n	801b524 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b44e:	f003 031f 	and.w	r3, r3, #31
 801b452:	2202      	movs	r2, #2
 801b454:	409a      	lsls	r2, r3
 801b456:	68fb      	ldr	r3, [r7, #12]
 801b458:	4013      	ands	r3, r2
 801b45a:	2b00      	cmp	r3, #0
 801b45c:	d02e      	beq.n	801b4bc <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 801b45e:	68bb      	ldr	r3, [r7, #8]
 801b460:	f003 0302 	and.w	r3, r3, #2
 801b464:	2b00      	cmp	r3, #0
 801b466:	d029      	beq.n	801b4bc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	681b      	ldr	r3, [r3, #0]
 801b46c:	681b      	ldr	r3, [r3, #0]
 801b46e:	f003 0320 	and.w	r3, r3, #32
 801b472:	2b00      	cmp	r3, #0
 801b474:	d10b      	bne.n	801b48e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	681b      	ldr	r3, [r3, #0]
 801b47a:	681a      	ldr	r2, [r3, #0]
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	681b      	ldr	r3, [r3, #0]
 801b480:	f022 020a 	bic.w	r2, r2, #10
 801b484:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801b486:	687b      	ldr	r3, [r7, #4]
 801b488:	2201      	movs	r2, #1
 801b48a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b492:	f003 021f 	and.w	r2, r3, #31
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b49a:	2102      	movs	r1, #2
 801b49c:	fa01 f202 	lsl.w	r2, r1, r2
 801b4a0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	2200      	movs	r2, #0
 801b4a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 801b4aa:	687b      	ldr	r3, [r7, #4]
 801b4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b4ae:	2b00      	cmp	r3, #0
 801b4b0:	d038      	beq.n	801b524 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b4b6:	6878      	ldr	r0, [r7, #4]
 801b4b8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 801b4ba:	e033      	b.n	801b524 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b4c0:	f003 031f 	and.w	r3, r3, #31
 801b4c4:	2208      	movs	r2, #8
 801b4c6:	409a      	lsls	r2, r3
 801b4c8:	68fb      	ldr	r3, [r7, #12]
 801b4ca:	4013      	ands	r3, r2
 801b4cc:	2b00      	cmp	r3, #0
 801b4ce:	d02a      	beq.n	801b526 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 801b4d0:	68bb      	ldr	r3, [r7, #8]
 801b4d2:	f003 0308 	and.w	r3, r3, #8
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	d025      	beq.n	801b526 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	681b      	ldr	r3, [r3, #0]
 801b4de:	681a      	ldr	r2, [r3, #0]
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	681b      	ldr	r3, [r3, #0]
 801b4e4:	f022 020e 	bic.w	r2, r2, #14
 801b4e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801b4ea:	687b      	ldr	r3, [r7, #4]
 801b4ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b4ee:	f003 021f 	and.w	r2, r3, #31
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b4f6:	2101      	movs	r1, #1
 801b4f8:	fa01 f202 	lsl.w	r2, r1, r2
 801b4fc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801b4fe:	687b      	ldr	r3, [r7, #4]
 801b500:	2201      	movs	r2, #1
 801b502:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	2201      	movs	r2, #1
 801b508:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b50c:	687b      	ldr	r3, [r7, #4]
 801b50e:	2200      	movs	r2, #0
 801b510:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 801b514:	687b      	ldr	r3, [r7, #4]
 801b516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b518:	2b00      	cmp	r3, #0
 801b51a:	d004      	beq.n	801b526 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801b51c:	687b      	ldr	r3, [r7, #4]
 801b51e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b520:	6878      	ldr	r0, [r7, #4]
 801b522:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 801b524:	bf00      	nop
 801b526:	bf00      	nop
}
 801b528:	3710      	adds	r7, #16
 801b52a:	46bd      	mov	sp, r7
 801b52c:	bd80      	pop	{r7, pc}

0801b52e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801b52e:	b480      	push	{r7}
 801b530:	b085      	sub	sp, #20
 801b532:	af00      	add	r7, sp, #0
 801b534:	60f8      	str	r0, [r7, #12]
 801b536:	60b9      	str	r1, [r7, #8]
 801b538:	607a      	str	r2, [r7, #4]
 801b53a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b53c:	68fb      	ldr	r3, [r7, #12]
 801b53e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b540:	68fa      	ldr	r2, [r7, #12]
 801b542:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801b544:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 801b546:	68fb      	ldr	r3, [r7, #12]
 801b548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b54a:	2b00      	cmp	r3, #0
 801b54c:	d004      	beq.n	801b558 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b54e:	68fb      	ldr	r3, [r7, #12]
 801b550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b552:	68fa      	ldr	r2, [r7, #12]
 801b554:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801b556:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801b558:	68fb      	ldr	r3, [r7, #12]
 801b55a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b55c:	f003 021f 	and.w	r2, r3, #31
 801b560:	68fb      	ldr	r3, [r7, #12]
 801b562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b564:	2101      	movs	r1, #1
 801b566:	fa01 f202 	lsl.w	r2, r1, r2
 801b56a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801b56c:	68fb      	ldr	r3, [r7, #12]
 801b56e:	681b      	ldr	r3, [r3, #0]
 801b570:	683a      	ldr	r2, [r7, #0]
 801b572:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801b574:	68fb      	ldr	r3, [r7, #12]
 801b576:	689b      	ldr	r3, [r3, #8]
 801b578:	2b10      	cmp	r3, #16
 801b57a:	d108      	bne.n	801b58e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801b57c:	68fb      	ldr	r3, [r7, #12]
 801b57e:	681b      	ldr	r3, [r3, #0]
 801b580:	687a      	ldr	r2, [r7, #4]
 801b582:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 801b584:	68fb      	ldr	r3, [r7, #12]
 801b586:	681b      	ldr	r3, [r3, #0]
 801b588:	68ba      	ldr	r2, [r7, #8]
 801b58a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 801b58c:	e007      	b.n	801b59e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 801b58e:	68fb      	ldr	r3, [r7, #12]
 801b590:	681b      	ldr	r3, [r3, #0]
 801b592:	68ba      	ldr	r2, [r7, #8]
 801b594:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 801b596:	68fb      	ldr	r3, [r7, #12]
 801b598:	681b      	ldr	r3, [r3, #0]
 801b59a:	687a      	ldr	r2, [r7, #4]
 801b59c:	60da      	str	r2, [r3, #12]
}
 801b59e:	bf00      	nop
 801b5a0:	3714      	adds	r7, #20
 801b5a2:	46bd      	mov	sp, r7
 801b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5a8:	4770      	bx	lr
	...

0801b5ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801b5ac:	b480      	push	{r7}
 801b5ae:	b087      	sub	sp, #28
 801b5b0:	af00      	add	r7, sp, #0
 801b5b2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 801b5b4:	687b      	ldr	r3, [r7, #4]
 801b5b6:	681b      	ldr	r3, [r3, #0]
 801b5b8:	461a      	mov	r2, r3
 801b5ba:	4b16      	ldr	r3, [pc, #88]	; (801b614 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 801b5bc:	429a      	cmp	r2, r3
 801b5be:	d802      	bhi.n	801b5c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 801b5c0:	4b15      	ldr	r3, [pc, #84]	; (801b618 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 801b5c2:	617b      	str	r3, [r7, #20]
 801b5c4:	e001      	b.n	801b5ca <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 801b5c6:	4b15      	ldr	r3, [pc, #84]	; (801b61c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 801b5c8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 801b5ca:	697b      	ldr	r3, [r7, #20]
 801b5cc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	681b      	ldr	r3, [r3, #0]
 801b5d2:	b2db      	uxtb	r3, r3
 801b5d4:	3b08      	subs	r3, #8
 801b5d6:	4a12      	ldr	r2, [pc, #72]	; (801b620 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 801b5d8:	fba2 2303 	umull	r2, r3, r2, r3
 801b5dc:	091b      	lsrs	r3, r3, #4
 801b5de:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 801b5e0:	687b      	ldr	r3, [r7, #4]
 801b5e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b5e4:	089b      	lsrs	r3, r3, #2
 801b5e6:	009a      	lsls	r2, r3, #2
 801b5e8:	693b      	ldr	r3, [r7, #16]
 801b5ea:	4413      	add	r3, r2
 801b5ec:	461a      	mov	r2, r3
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801b5f2:	687b      	ldr	r3, [r7, #4]
 801b5f4:	4a0b      	ldr	r2, [pc, #44]	; (801b624 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 801b5f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 801b5f8:	68fb      	ldr	r3, [r7, #12]
 801b5fa:	f003 031f 	and.w	r3, r3, #31
 801b5fe:	2201      	movs	r2, #1
 801b600:	409a      	lsls	r2, r3
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	651a      	str	r2, [r3, #80]	; 0x50
}
 801b606:	bf00      	nop
 801b608:	371c      	adds	r7, #28
 801b60a:	46bd      	mov	sp, r7
 801b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b610:	4770      	bx	lr
 801b612:	bf00      	nop
 801b614:	40020407 	.word	0x40020407
 801b618:	40020800 	.word	0x40020800
 801b61c:	40020820 	.word	0x40020820
 801b620:	cccccccd 	.word	0xcccccccd
 801b624:	40020880 	.word	0x40020880

0801b628 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801b628:	b480      	push	{r7}
 801b62a:	b085      	sub	sp, #20
 801b62c:	af00      	add	r7, sp, #0
 801b62e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	685b      	ldr	r3, [r3, #4]
 801b634:	b2db      	uxtb	r3, r3
 801b636:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801b638:	68fa      	ldr	r2, [r7, #12]
 801b63a:	4b0b      	ldr	r3, [pc, #44]	; (801b668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 801b63c:	4413      	add	r3, r2
 801b63e:	009b      	lsls	r3, r3, #2
 801b640:	461a      	mov	r2, r3
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	4a08      	ldr	r2, [pc, #32]	; (801b66c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 801b64a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 801b64c:	68fb      	ldr	r3, [r7, #12]
 801b64e:	3b01      	subs	r3, #1
 801b650:	f003 031f 	and.w	r3, r3, #31
 801b654:	2201      	movs	r2, #1
 801b656:	409a      	lsls	r2, r3
 801b658:	687b      	ldr	r3, [r7, #4]
 801b65a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 801b65c:	bf00      	nop
 801b65e:	3714      	adds	r7, #20
 801b660:	46bd      	mov	sp, r7
 801b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b666:	4770      	bx	lr
 801b668:	1000823f 	.word	0x1000823f
 801b66c:	40020940 	.word	0x40020940

0801b670 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 801b670:	b580      	push	{r7, lr}
 801b672:	b086      	sub	sp, #24
 801b674:	af00      	add	r7, sp, #0
 801b676:	60f8      	str	r0, [r7, #12]
 801b678:	60b9      	str	r1, [r7, #8]
 801b67a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 801b67e:	2300      	movs	r3, #0
 801b680:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801b682:	4b24      	ldr	r3, [pc, #144]	; (801b714 <HAL_FLASH_Program+0xa4>)
 801b684:	781b      	ldrb	r3, [r3, #0]
 801b686:	2b01      	cmp	r3, #1
 801b688:	d101      	bne.n	801b68e <HAL_FLASH_Program+0x1e>
 801b68a:	2302      	movs	r3, #2
 801b68c:	e03e      	b.n	801b70c <HAL_FLASH_Program+0x9c>
 801b68e:	4b21      	ldr	r3, [pc, #132]	; (801b714 <HAL_FLASH_Program+0xa4>)
 801b690:	2201      	movs	r2, #1
 801b692:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b694:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b698:	f000 f87c 	bl	801b794 <FLASH_WaitForLastOperation>
 801b69c:	4603      	mov	r3, r0
 801b69e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 801b6a0:	7dfb      	ldrb	r3, [r7, #23]
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	d12e      	bne.n	801b704 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801b6a6:	4b1b      	ldr	r3, [pc, #108]	; (801b714 <HAL_FLASH_Program+0xa4>)
 801b6a8:	2200      	movs	r2, #0
 801b6aa:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 801b6ac:	68fb      	ldr	r3, [r7, #12]
 801b6ae:	2b00      	cmp	r3, #0
 801b6b0:	d107      	bne.n	801b6c2 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 801b6b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b6b6:	68b8      	ldr	r0, [r7, #8]
 801b6b8:	f000 f8c0 	bl	801b83c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 801b6bc:	2301      	movs	r3, #1
 801b6be:	613b      	str	r3, [r7, #16]
 801b6c0:	e010      	b.n	801b6e4 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 801b6c2:	68fb      	ldr	r3, [r7, #12]
 801b6c4:	2b01      	cmp	r3, #1
 801b6c6:	d002      	beq.n	801b6ce <HAL_FLASH_Program+0x5e>
 801b6c8:	68fb      	ldr	r3, [r7, #12]
 801b6ca:	2b02      	cmp	r3, #2
 801b6cc:	d10a      	bne.n	801b6e4 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 801b6ce:	683b      	ldr	r3, [r7, #0]
 801b6d0:	4619      	mov	r1, r3
 801b6d2:	68b8      	ldr	r0, [r7, #8]
 801b6d4:	f000 f8d8 	bl	801b888 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 801b6d8:	68fb      	ldr	r3, [r7, #12]
 801b6da:	2b02      	cmp	r3, #2
 801b6dc:	d102      	bne.n	801b6e4 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 801b6de:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801b6e2:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b6e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b6e8:	f000 f854 	bl	801b794 <FLASH_WaitForLastOperation>
 801b6ec:	4603      	mov	r3, r0
 801b6ee:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 801b6f0:	693b      	ldr	r3, [r7, #16]
 801b6f2:	2b00      	cmp	r3, #0
 801b6f4:	d006      	beq.n	801b704 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 801b6f6:	4b08      	ldr	r3, [pc, #32]	; (801b718 <HAL_FLASH_Program+0xa8>)
 801b6f8:	695a      	ldr	r2, [r3, #20]
 801b6fa:	693b      	ldr	r3, [r7, #16]
 801b6fc:	43db      	mvns	r3, r3
 801b6fe:	4906      	ldr	r1, [pc, #24]	; (801b718 <HAL_FLASH_Program+0xa8>)
 801b700:	4013      	ands	r3, r2
 801b702:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801b704:	4b03      	ldr	r3, [pc, #12]	; (801b714 <HAL_FLASH_Program+0xa4>)
 801b706:	2200      	movs	r2, #0
 801b708:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 801b70a:	7dfb      	ldrb	r3, [r7, #23]
}
 801b70c:	4618      	mov	r0, r3
 801b70e:	3718      	adds	r7, #24
 801b710:	46bd      	mov	sp, r7
 801b712:	bd80      	pop	{r7, pc}
 801b714:	2000000c 	.word	0x2000000c
 801b718:	40022000 	.word	0x40022000

0801b71c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 801b71c:	b480      	push	{r7}
 801b71e:	b083      	sub	sp, #12
 801b720:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801b722:	2300      	movs	r3, #0
 801b724:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801b726:	4b0b      	ldr	r3, [pc, #44]	; (801b754 <HAL_FLASH_Unlock+0x38>)
 801b728:	695b      	ldr	r3, [r3, #20]
 801b72a:	2b00      	cmp	r3, #0
 801b72c:	da0b      	bge.n	801b746 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801b72e:	4b09      	ldr	r3, [pc, #36]	; (801b754 <HAL_FLASH_Unlock+0x38>)
 801b730:	4a09      	ldr	r2, [pc, #36]	; (801b758 <HAL_FLASH_Unlock+0x3c>)
 801b732:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801b734:	4b07      	ldr	r3, [pc, #28]	; (801b754 <HAL_FLASH_Unlock+0x38>)
 801b736:	4a09      	ldr	r2, [pc, #36]	; (801b75c <HAL_FLASH_Unlock+0x40>)
 801b738:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801b73a:	4b06      	ldr	r3, [pc, #24]	; (801b754 <HAL_FLASH_Unlock+0x38>)
 801b73c:	695b      	ldr	r3, [r3, #20]
 801b73e:	2b00      	cmp	r3, #0
 801b740:	da01      	bge.n	801b746 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801b742:	2301      	movs	r3, #1
 801b744:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801b746:	79fb      	ldrb	r3, [r7, #7]
}
 801b748:	4618      	mov	r0, r3
 801b74a:	370c      	adds	r7, #12
 801b74c:	46bd      	mov	sp, r7
 801b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b752:	4770      	bx	lr
 801b754:	40022000 	.word	0x40022000
 801b758:	45670123 	.word	0x45670123
 801b75c:	cdef89ab 	.word	0xcdef89ab

0801b760 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801b760:	b480      	push	{r7}
 801b762:	b083      	sub	sp, #12
 801b764:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 801b766:	2301      	movs	r3, #1
 801b768:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 801b76a:	4b09      	ldr	r3, [pc, #36]	; (801b790 <HAL_FLASH_Lock+0x30>)
 801b76c:	695b      	ldr	r3, [r3, #20]
 801b76e:	4a08      	ldr	r2, [pc, #32]	; (801b790 <HAL_FLASH_Lock+0x30>)
 801b770:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801b774:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801b776:	4b06      	ldr	r3, [pc, #24]	; (801b790 <HAL_FLASH_Lock+0x30>)
 801b778:	695b      	ldr	r3, [r3, #20]
 801b77a:	2b00      	cmp	r3, #0
 801b77c:	da01      	bge.n	801b782 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 801b77e:	2300      	movs	r3, #0
 801b780:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801b782:	79fb      	ldrb	r3, [r7, #7]
}
 801b784:	4618      	mov	r0, r3
 801b786:	370c      	adds	r7, #12
 801b788:	46bd      	mov	sp, r7
 801b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b78e:	4770      	bx	lr
 801b790:	40022000 	.word	0x40022000

0801b794 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 801b794:	b580      	push	{r7, lr}
 801b796:	b084      	sub	sp, #16
 801b798:	af00      	add	r7, sp, #0
 801b79a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 801b79c:	f7fd f98a 	bl	8018ab4 <HAL_GetTick>
 801b7a0:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801b7a2:	e009      	b.n	801b7b8 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 801b7a4:	f7fd f986 	bl	8018ab4 <HAL_GetTick>
 801b7a8:	4602      	mov	r2, r0
 801b7aa:	68fb      	ldr	r3, [r7, #12]
 801b7ac:	1ad3      	subs	r3, r2, r3
 801b7ae:	687a      	ldr	r2, [r7, #4]
 801b7b0:	429a      	cmp	r2, r3
 801b7b2:	d201      	bcs.n	801b7b8 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 801b7b4:	2303      	movs	r3, #3
 801b7b6:	e038      	b.n	801b82a <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801b7b8:	4b1e      	ldr	r3, [pc, #120]	; (801b834 <FLASH_WaitForLastOperation+0xa0>)
 801b7ba:	691b      	ldr	r3, [r3, #16]
 801b7bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b7c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b7c4:	d0ee      	beq.n	801b7a4 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 801b7c6:	4b1b      	ldr	r3, [pc, #108]	; (801b834 <FLASH_WaitForLastOperation+0xa0>)
 801b7c8:	691a      	ldr	r2, [r3, #16]
 801b7ca:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 801b7ce:	4013      	ands	r3, r2
 801b7d0:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 801b7d2:	68bb      	ldr	r3, [r7, #8]
 801b7d4:	2b00      	cmp	r3, #0
 801b7d6:	d01e      	beq.n	801b816 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 801b7d8:	4b17      	ldr	r3, [pc, #92]	; (801b838 <FLASH_WaitForLastOperation+0xa4>)
 801b7da:	685a      	ldr	r2, [r3, #4]
 801b7dc:	68bb      	ldr	r3, [r7, #8]
 801b7de:	4313      	orrs	r3, r2
 801b7e0:	4a15      	ldr	r2, [pc, #84]	; (801b838 <FLASH_WaitForLastOperation+0xa4>)
 801b7e2:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 801b7e4:	68bb      	ldr	r3, [r7, #8]
 801b7e6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801b7ea:	2b00      	cmp	r3, #0
 801b7ec:	d007      	beq.n	801b7fe <FLASH_WaitForLastOperation+0x6a>
 801b7ee:	4b11      	ldr	r3, [pc, #68]	; (801b834 <FLASH_WaitForLastOperation+0xa0>)
 801b7f0:	699a      	ldr	r2, [r3, #24]
 801b7f2:	68bb      	ldr	r3, [r7, #8]
 801b7f4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801b7f8:	490e      	ldr	r1, [pc, #56]	; (801b834 <FLASH_WaitForLastOperation+0xa0>)
 801b7fa:	4313      	orrs	r3, r2
 801b7fc:	618b      	str	r3, [r1, #24]
 801b7fe:	68bb      	ldr	r3, [r7, #8]
 801b800:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801b804:	2b00      	cmp	r3, #0
 801b806:	d004      	beq.n	801b812 <FLASH_WaitForLastOperation+0x7e>
 801b808:	4a0a      	ldr	r2, [pc, #40]	; (801b834 <FLASH_WaitForLastOperation+0xa0>)
 801b80a:	68bb      	ldr	r3, [r7, #8]
 801b80c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801b810:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 801b812:	2301      	movs	r3, #1
 801b814:	e009      	b.n	801b82a <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801b816:	4b07      	ldr	r3, [pc, #28]	; (801b834 <FLASH_WaitForLastOperation+0xa0>)
 801b818:	691b      	ldr	r3, [r3, #16]
 801b81a:	f003 0301 	and.w	r3, r3, #1
 801b81e:	2b01      	cmp	r3, #1
 801b820:	d102      	bne.n	801b828 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801b822:	4b04      	ldr	r3, [pc, #16]	; (801b834 <FLASH_WaitForLastOperation+0xa0>)
 801b824:	2201      	movs	r2, #1
 801b826:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 801b828:	2300      	movs	r3, #0
}
 801b82a:	4618      	mov	r0, r3
 801b82c:	3710      	adds	r7, #16
 801b82e:	46bd      	mov	sp, r7
 801b830:	bd80      	pop	{r7, pc}
 801b832:	bf00      	nop
 801b834:	40022000 	.word	0x40022000
 801b838:	2000000c 	.word	0x2000000c

0801b83c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 801b83c:	b480      	push	{r7}
 801b83e:	b085      	sub	sp, #20
 801b840:	af00      	add	r7, sp, #0
 801b842:	60f8      	str	r0, [r7, #12]
 801b844:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 801b848:	4b0e      	ldr	r3, [pc, #56]	; (801b884 <FLASH_Program_DoubleWord+0x48>)
 801b84a:	695b      	ldr	r3, [r3, #20]
 801b84c:	4a0d      	ldr	r2, [pc, #52]	; (801b884 <FLASH_Program_DoubleWord+0x48>)
 801b84e:	f043 0301 	orr.w	r3, r3, #1
 801b852:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 801b854:	68fb      	ldr	r3, [r7, #12]
 801b856:	683a      	ldr	r2, [r7, #0]
 801b858:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 801b85a:	f3bf 8f6f 	isb	sy
}
 801b85e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 801b860:	e9d7 0100 	ldrd	r0, r1, [r7]
 801b864:	f04f 0200 	mov.w	r2, #0
 801b868:	f04f 0300 	mov.w	r3, #0
 801b86c:	000a      	movs	r2, r1
 801b86e:	2300      	movs	r3, #0
 801b870:	68f9      	ldr	r1, [r7, #12]
 801b872:	3104      	adds	r1, #4
 801b874:	4613      	mov	r3, r2
 801b876:	600b      	str	r3, [r1, #0]
}
 801b878:	bf00      	nop
 801b87a:	3714      	adds	r7, #20
 801b87c:	46bd      	mov	sp, r7
 801b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b882:	4770      	bx	lr
 801b884:	40022000 	.word	0x40022000

0801b888 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 801b888:	b480      	push	{r7}
 801b88a:	b089      	sub	sp, #36	; 0x24
 801b88c:	af00      	add	r7, sp, #0
 801b88e:	6078      	str	r0, [r7, #4]
 801b890:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 801b892:	2340      	movs	r3, #64	; 0x40
 801b894:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 801b896:	687b      	ldr	r3, [r7, #4]
 801b898:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 801b89a:	683b      	ldr	r3, [r7, #0]
 801b89c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 801b89e:	4b14      	ldr	r3, [pc, #80]	; (801b8f0 <FLASH_Program_Fast+0x68>)
 801b8a0:	695b      	ldr	r3, [r3, #20]
 801b8a2:	4a13      	ldr	r2, [pc, #76]	; (801b8f0 <FLASH_Program_Fast+0x68>)
 801b8a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801b8a8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b8aa:	f3ef 8310 	mrs	r3, PRIMASK
 801b8ae:	60fb      	str	r3, [r7, #12]
  return(result);
 801b8b0:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 801b8b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b8b4:	b672      	cpsid	i
}
 801b8b6:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 801b8b8:	697b      	ldr	r3, [r7, #20]
 801b8ba:	681a      	ldr	r2, [r3, #0]
 801b8bc:	69bb      	ldr	r3, [r7, #24]
 801b8be:	601a      	str	r2, [r3, #0]
    dest_addr++;
 801b8c0:	69bb      	ldr	r3, [r7, #24]
 801b8c2:	3304      	adds	r3, #4
 801b8c4:	61bb      	str	r3, [r7, #24]
    src_addr++;
 801b8c6:	697b      	ldr	r3, [r7, #20]
 801b8c8:	3304      	adds	r3, #4
 801b8ca:	617b      	str	r3, [r7, #20]
    row_index--;
 801b8cc:	7ffb      	ldrb	r3, [r7, #31]
 801b8ce:	3b01      	subs	r3, #1
 801b8d0:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 801b8d2:	7ffb      	ldrb	r3, [r7, #31]
 801b8d4:	2b00      	cmp	r3, #0
 801b8d6:	d1ef      	bne.n	801b8b8 <FLASH_Program_Fast+0x30>
 801b8d8:	693b      	ldr	r3, [r7, #16]
 801b8da:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b8dc:	68bb      	ldr	r3, [r7, #8]
 801b8de:	f383 8810 	msr	PRIMASK, r3
}
 801b8e2:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 801b8e4:	bf00      	nop
 801b8e6:	3724      	adds	r7, #36	; 0x24
 801b8e8:	46bd      	mov	sp, r7
 801b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8ee:	4770      	bx	lr
 801b8f0:	40022000 	.word	0x40022000

0801b8f4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 801b8f4:	b580      	push	{r7, lr}
 801b8f6:	b084      	sub	sp, #16
 801b8f8:	af00      	add	r7, sp, #0
 801b8fa:	6078      	str	r0, [r7, #4]
 801b8fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801b8fe:	4b48      	ldr	r3, [pc, #288]	; (801ba20 <HAL_FLASHEx_Erase+0x12c>)
 801b900:	781b      	ldrb	r3, [r3, #0]
 801b902:	2b01      	cmp	r3, #1
 801b904:	d101      	bne.n	801b90a <HAL_FLASHEx_Erase+0x16>
 801b906:	2302      	movs	r3, #2
 801b908:	e085      	b.n	801ba16 <HAL_FLASHEx_Erase+0x122>
 801b90a:	4b45      	ldr	r3, [pc, #276]	; (801ba20 <HAL_FLASHEx_Erase+0x12c>)
 801b90c:	2201      	movs	r2, #1
 801b90e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b910:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b914:	f7ff ff3e 	bl	801b794 <FLASH_WaitForLastOperation>
 801b918:	4603      	mov	r3, r0
 801b91a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 801b91c:	7bfb      	ldrb	r3, [r7, #15]
 801b91e:	2b00      	cmp	r3, #0
 801b920:	d175      	bne.n	801ba0e <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801b922:	4b3f      	ldr	r3, [pc, #252]	; (801ba20 <HAL_FLASHEx_Erase+0x12c>)
 801b924:	2200      	movs	r2, #0
 801b926:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 801b928:	4b3e      	ldr	r3, [pc, #248]	; (801ba24 <HAL_FLASHEx_Erase+0x130>)
 801b92a:	681b      	ldr	r3, [r3, #0]
 801b92c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b930:	2b00      	cmp	r3, #0
 801b932:	d013      	beq.n	801b95c <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801b934:	4b3b      	ldr	r3, [pc, #236]	; (801ba24 <HAL_FLASHEx_Erase+0x130>)
 801b936:	681b      	ldr	r3, [r3, #0]
 801b938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b93c:	2b00      	cmp	r3, #0
 801b93e:	d009      	beq.n	801b954 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 801b940:	4b38      	ldr	r3, [pc, #224]	; (801ba24 <HAL_FLASHEx_Erase+0x130>)
 801b942:	681b      	ldr	r3, [r3, #0]
 801b944:	4a37      	ldr	r2, [pc, #220]	; (801ba24 <HAL_FLASHEx_Erase+0x130>)
 801b946:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b94a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 801b94c:	4b34      	ldr	r3, [pc, #208]	; (801ba20 <HAL_FLASHEx_Erase+0x12c>)
 801b94e:	2203      	movs	r2, #3
 801b950:	771a      	strb	r2, [r3, #28]
 801b952:	e016      	b.n	801b982 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 801b954:	4b32      	ldr	r3, [pc, #200]	; (801ba20 <HAL_FLASHEx_Erase+0x12c>)
 801b956:	2201      	movs	r2, #1
 801b958:	771a      	strb	r2, [r3, #28]
 801b95a:	e012      	b.n	801b982 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801b95c:	4b31      	ldr	r3, [pc, #196]	; (801ba24 <HAL_FLASHEx_Erase+0x130>)
 801b95e:	681b      	ldr	r3, [r3, #0]
 801b960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b964:	2b00      	cmp	r3, #0
 801b966:	d009      	beq.n	801b97c <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 801b968:	4b2e      	ldr	r3, [pc, #184]	; (801ba24 <HAL_FLASHEx_Erase+0x130>)
 801b96a:	681b      	ldr	r3, [r3, #0]
 801b96c:	4a2d      	ldr	r2, [pc, #180]	; (801ba24 <HAL_FLASHEx_Erase+0x130>)
 801b96e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b972:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 801b974:	4b2a      	ldr	r3, [pc, #168]	; (801ba20 <HAL_FLASHEx_Erase+0x12c>)
 801b976:	2202      	movs	r2, #2
 801b978:	771a      	strb	r2, [r3, #28]
 801b97a:	e002      	b.n	801b982 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801b97c:	4b28      	ldr	r3, [pc, #160]	; (801ba20 <HAL_FLASHEx_Erase+0x12c>)
 801b97e:	2200      	movs	r2, #0
 801b980:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801b982:	687b      	ldr	r3, [r7, #4]
 801b984:	681b      	ldr	r3, [r3, #0]
 801b986:	2b01      	cmp	r3, #1
 801b988:	d111      	bne.n	801b9ae <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 801b98a:	687b      	ldr	r3, [r7, #4]
 801b98c:	685b      	ldr	r3, [r3, #4]
 801b98e:	4618      	mov	r0, r3
 801b990:	f000 f84a 	bl	801ba28 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b994:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b998:	f7ff fefc 	bl	801b794 <FLASH_WaitForLastOperation>
 801b99c:	4603      	mov	r3, r0
 801b99e:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 801b9a0:	4b20      	ldr	r3, [pc, #128]	; (801ba24 <HAL_FLASHEx_Erase+0x130>)
 801b9a2:	695b      	ldr	r3, [r3, #20]
 801b9a4:	4a1f      	ldr	r2, [pc, #124]	; (801ba24 <HAL_FLASHEx_Erase+0x130>)
 801b9a6:	f023 0304 	bic.w	r3, r3, #4
 801b9aa:	6153      	str	r3, [r2, #20]
 801b9ac:	e02d      	b.n	801ba0a <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 801b9ae:	683b      	ldr	r3, [r7, #0]
 801b9b0:	f04f 32ff 	mov.w	r2, #4294967295
 801b9b4:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	689b      	ldr	r3, [r3, #8]
 801b9ba:	60bb      	str	r3, [r7, #8]
 801b9bc:	e01d      	b.n	801b9fa <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 801b9be:	687b      	ldr	r3, [r7, #4]
 801b9c0:	685b      	ldr	r3, [r3, #4]
 801b9c2:	4619      	mov	r1, r3
 801b9c4:	68b8      	ldr	r0, [r7, #8]
 801b9c6:	f000 f84d 	bl	801ba64 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b9ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b9ce:	f7ff fee1 	bl	801b794 <FLASH_WaitForLastOperation>
 801b9d2:	4603      	mov	r3, r0
 801b9d4:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 801b9d6:	4b13      	ldr	r3, [pc, #76]	; (801ba24 <HAL_FLASHEx_Erase+0x130>)
 801b9d8:	695b      	ldr	r3, [r3, #20]
 801b9da:	4a12      	ldr	r2, [pc, #72]	; (801ba24 <HAL_FLASHEx_Erase+0x130>)
 801b9dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801b9e0:	f023 0302 	bic.w	r3, r3, #2
 801b9e4:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 801b9e6:	7bfb      	ldrb	r3, [r7, #15]
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	d003      	beq.n	801b9f4 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 801b9ec:	683b      	ldr	r3, [r7, #0]
 801b9ee:	68ba      	ldr	r2, [r7, #8]
 801b9f0:	601a      	str	r2, [r3, #0]
          break;
 801b9f2:	e00a      	b.n	801ba0a <HAL_FLASHEx_Erase+0x116>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801b9f4:	68bb      	ldr	r3, [r7, #8]
 801b9f6:	3301      	adds	r3, #1
 801b9f8:	60bb      	str	r3, [r7, #8]
 801b9fa:	687b      	ldr	r3, [r7, #4]
 801b9fc:	689a      	ldr	r2, [r3, #8]
 801b9fe:	687b      	ldr	r3, [r7, #4]
 801ba00:	68db      	ldr	r3, [r3, #12]
 801ba02:	4413      	add	r3, r2
 801ba04:	68ba      	ldr	r2, [r7, #8]
 801ba06:	429a      	cmp	r2, r3
 801ba08:	d3d9      	bcc.n	801b9be <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 801ba0a:	f000 f84f 	bl	801baac <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801ba0e:	4b04      	ldr	r3, [pc, #16]	; (801ba20 <HAL_FLASHEx_Erase+0x12c>)
 801ba10:	2200      	movs	r2, #0
 801ba12:	701a      	strb	r2, [r3, #0]

  return status;
 801ba14:	7bfb      	ldrb	r3, [r7, #15]
}
 801ba16:	4618      	mov	r0, r3
 801ba18:	3710      	adds	r7, #16
 801ba1a:	46bd      	mov	sp, r7
 801ba1c:	bd80      	pop	{r7, pc}
 801ba1e:	bf00      	nop
 801ba20:	2000000c 	.word	0x2000000c
 801ba24:	40022000 	.word	0x40022000

0801ba28 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 801ba28:	b480      	push	{r7}
 801ba2a:	b083      	sub	sp, #12
 801ba2c:	af00      	add	r7, sp, #0
 801ba2e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	f003 0301 	and.w	r3, r3, #1
 801ba36:	2b00      	cmp	r3, #0
 801ba38:	d005      	beq.n	801ba46 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 801ba3a:	4b09      	ldr	r3, [pc, #36]	; (801ba60 <FLASH_MassErase+0x38>)
 801ba3c:	695b      	ldr	r3, [r3, #20]
 801ba3e:	4a08      	ldr	r2, [pc, #32]	; (801ba60 <FLASH_MassErase+0x38>)
 801ba40:	f043 0304 	orr.w	r3, r3, #4
 801ba44:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801ba46:	4b06      	ldr	r3, [pc, #24]	; (801ba60 <FLASH_MassErase+0x38>)
 801ba48:	695b      	ldr	r3, [r3, #20]
 801ba4a:	4a05      	ldr	r2, [pc, #20]	; (801ba60 <FLASH_MassErase+0x38>)
 801ba4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ba50:	6153      	str	r3, [r2, #20]
}
 801ba52:	bf00      	nop
 801ba54:	370c      	adds	r7, #12
 801ba56:	46bd      	mov	sp, r7
 801ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba5c:	4770      	bx	lr
 801ba5e:	bf00      	nop
 801ba60:	40022000 	.word	0x40022000

0801ba64 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 801ba64:	b480      	push	{r7}
 801ba66:	b083      	sub	sp, #12
 801ba68:	af00      	add	r7, sp, #0
 801ba6a:	6078      	str	r0, [r7, #4]
 801ba6c:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 801ba6e:	4b0e      	ldr	r3, [pc, #56]	; (801baa8 <FLASH_PageErase+0x44>)
 801ba70:	695b      	ldr	r3, [r3, #20]
 801ba72:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	00db      	lsls	r3, r3, #3
 801ba7a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 801ba7e:	490a      	ldr	r1, [pc, #40]	; (801baa8 <FLASH_PageErase+0x44>)
 801ba80:	4313      	orrs	r3, r2
 801ba82:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 801ba84:	4b08      	ldr	r3, [pc, #32]	; (801baa8 <FLASH_PageErase+0x44>)
 801ba86:	695b      	ldr	r3, [r3, #20]
 801ba88:	4a07      	ldr	r2, [pc, #28]	; (801baa8 <FLASH_PageErase+0x44>)
 801ba8a:	f043 0302 	orr.w	r3, r3, #2
 801ba8e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801ba90:	4b05      	ldr	r3, [pc, #20]	; (801baa8 <FLASH_PageErase+0x44>)
 801ba92:	695b      	ldr	r3, [r3, #20]
 801ba94:	4a04      	ldr	r2, [pc, #16]	; (801baa8 <FLASH_PageErase+0x44>)
 801ba96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ba9a:	6153      	str	r3, [r2, #20]
}
 801ba9c:	bf00      	nop
 801ba9e:	370c      	adds	r7, #12
 801baa0:	46bd      	mov	sp, r7
 801baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baa6:	4770      	bx	lr
 801baa8:	40022000 	.word	0x40022000

0801baac <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 801baac:	b480      	push	{r7}
 801baae:	b083      	sub	sp, #12
 801bab0:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 801bab2:	4b21      	ldr	r3, [pc, #132]	; (801bb38 <FLASH_FlushCaches+0x8c>)
 801bab4:	7f1b      	ldrb	r3, [r3, #28]
 801bab6:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 801bab8:	79fb      	ldrb	r3, [r7, #7]
 801baba:	2b01      	cmp	r3, #1
 801babc:	d002      	beq.n	801bac4 <FLASH_FlushCaches+0x18>
 801babe:	79fb      	ldrb	r3, [r7, #7]
 801bac0:	2b03      	cmp	r3, #3
 801bac2:	d117      	bne.n	801baf4 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 801bac4:	4b1d      	ldr	r3, [pc, #116]	; (801bb3c <FLASH_FlushCaches+0x90>)
 801bac6:	681b      	ldr	r3, [r3, #0]
 801bac8:	4a1c      	ldr	r2, [pc, #112]	; (801bb3c <FLASH_FlushCaches+0x90>)
 801baca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801bace:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801bad0:	4b1a      	ldr	r3, [pc, #104]	; (801bb3c <FLASH_FlushCaches+0x90>)
 801bad2:	681b      	ldr	r3, [r3, #0]
 801bad4:	4a19      	ldr	r2, [pc, #100]	; (801bb3c <FLASH_FlushCaches+0x90>)
 801bad6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801bada:	6013      	str	r3, [r2, #0]
 801badc:	4b17      	ldr	r3, [pc, #92]	; (801bb3c <FLASH_FlushCaches+0x90>)
 801bade:	681b      	ldr	r3, [r3, #0]
 801bae0:	4a16      	ldr	r2, [pc, #88]	; (801bb3c <FLASH_FlushCaches+0x90>)
 801bae2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801bae6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801bae8:	4b14      	ldr	r3, [pc, #80]	; (801bb3c <FLASH_FlushCaches+0x90>)
 801baea:	681b      	ldr	r3, [r3, #0]
 801baec:	4a13      	ldr	r2, [pc, #76]	; (801bb3c <FLASH_FlushCaches+0x90>)
 801baee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801baf2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 801baf4:	79fb      	ldrb	r3, [r7, #7]
 801baf6:	2b02      	cmp	r3, #2
 801baf8:	d002      	beq.n	801bb00 <FLASH_FlushCaches+0x54>
 801bafa:	79fb      	ldrb	r3, [r7, #7]
 801bafc:	2b03      	cmp	r3, #3
 801bafe:	d111      	bne.n	801bb24 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 801bb00:	4b0e      	ldr	r3, [pc, #56]	; (801bb3c <FLASH_FlushCaches+0x90>)
 801bb02:	681b      	ldr	r3, [r3, #0]
 801bb04:	4a0d      	ldr	r2, [pc, #52]	; (801bb3c <FLASH_FlushCaches+0x90>)
 801bb06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801bb0a:	6013      	str	r3, [r2, #0]
 801bb0c:	4b0b      	ldr	r3, [pc, #44]	; (801bb3c <FLASH_FlushCaches+0x90>)
 801bb0e:	681b      	ldr	r3, [r3, #0]
 801bb10:	4a0a      	ldr	r2, [pc, #40]	; (801bb3c <FLASH_FlushCaches+0x90>)
 801bb12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bb16:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801bb18:	4b08      	ldr	r3, [pc, #32]	; (801bb3c <FLASH_FlushCaches+0x90>)
 801bb1a:	681b      	ldr	r3, [r3, #0]
 801bb1c:	4a07      	ldr	r2, [pc, #28]	; (801bb3c <FLASH_FlushCaches+0x90>)
 801bb1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801bb22:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801bb24:	4b04      	ldr	r3, [pc, #16]	; (801bb38 <FLASH_FlushCaches+0x8c>)
 801bb26:	2200      	movs	r2, #0
 801bb28:	771a      	strb	r2, [r3, #28]
}
 801bb2a:	bf00      	nop
 801bb2c:	370c      	adds	r7, #12
 801bb2e:	46bd      	mov	sp, r7
 801bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb34:	4770      	bx	lr
 801bb36:	bf00      	nop
 801bb38:	2000000c 	.word	0x2000000c
 801bb3c:	40022000 	.word	0x40022000

0801bb40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801bb40:	b480      	push	{r7}
 801bb42:	b087      	sub	sp, #28
 801bb44:	af00      	add	r7, sp, #0
 801bb46:	6078      	str	r0, [r7, #4]
 801bb48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801bb4a:	2300      	movs	r3, #0
 801bb4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 801bb4e:	e15a      	b.n	801be06 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801bb50:	683b      	ldr	r3, [r7, #0]
 801bb52:	681a      	ldr	r2, [r3, #0]
 801bb54:	2101      	movs	r1, #1
 801bb56:	697b      	ldr	r3, [r7, #20]
 801bb58:	fa01 f303 	lsl.w	r3, r1, r3
 801bb5c:	4013      	ands	r3, r2
 801bb5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 801bb60:	68fb      	ldr	r3, [r7, #12]
 801bb62:	2b00      	cmp	r3, #0
 801bb64:	f000 814c 	beq.w	801be00 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801bb68:	683b      	ldr	r3, [r7, #0]
 801bb6a:	685b      	ldr	r3, [r3, #4]
 801bb6c:	f003 0303 	and.w	r3, r3, #3
 801bb70:	2b01      	cmp	r3, #1
 801bb72:	d005      	beq.n	801bb80 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801bb74:	683b      	ldr	r3, [r7, #0]
 801bb76:	685b      	ldr	r3, [r3, #4]
 801bb78:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801bb7c:	2b02      	cmp	r3, #2
 801bb7e:	d130      	bne.n	801bbe2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801bb80:	687b      	ldr	r3, [r7, #4]
 801bb82:	689b      	ldr	r3, [r3, #8]
 801bb84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801bb86:	697b      	ldr	r3, [r7, #20]
 801bb88:	005b      	lsls	r3, r3, #1
 801bb8a:	2203      	movs	r2, #3
 801bb8c:	fa02 f303 	lsl.w	r3, r2, r3
 801bb90:	43db      	mvns	r3, r3
 801bb92:	693a      	ldr	r2, [r7, #16]
 801bb94:	4013      	ands	r3, r2
 801bb96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801bb98:	683b      	ldr	r3, [r7, #0]
 801bb9a:	68da      	ldr	r2, [r3, #12]
 801bb9c:	697b      	ldr	r3, [r7, #20]
 801bb9e:	005b      	lsls	r3, r3, #1
 801bba0:	fa02 f303 	lsl.w	r3, r2, r3
 801bba4:	693a      	ldr	r2, [r7, #16]
 801bba6:	4313      	orrs	r3, r2
 801bba8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	693a      	ldr	r2, [r7, #16]
 801bbae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801bbb0:	687b      	ldr	r3, [r7, #4]
 801bbb2:	685b      	ldr	r3, [r3, #4]
 801bbb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801bbb6:	2201      	movs	r2, #1
 801bbb8:	697b      	ldr	r3, [r7, #20]
 801bbba:	fa02 f303 	lsl.w	r3, r2, r3
 801bbbe:	43db      	mvns	r3, r3
 801bbc0:	693a      	ldr	r2, [r7, #16]
 801bbc2:	4013      	ands	r3, r2
 801bbc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801bbc6:	683b      	ldr	r3, [r7, #0]
 801bbc8:	685b      	ldr	r3, [r3, #4]
 801bbca:	091b      	lsrs	r3, r3, #4
 801bbcc:	f003 0201 	and.w	r2, r3, #1
 801bbd0:	697b      	ldr	r3, [r7, #20]
 801bbd2:	fa02 f303 	lsl.w	r3, r2, r3
 801bbd6:	693a      	ldr	r2, [r7, #16]
 801bbd8:	4313      	orrs	r3, r2
 801bbda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801bbdc:	687b      	ldr	r3, [r7, #4]
 801bbde:	693a      	ldr	r2, [r7, #16]
 801bbe0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801bbe2:	683b      	ldr	r3, [r7, #0]
 801bbe4:	685b      	ldr	r3, [r3, #4]
 801bbe6:	f003 0303 	and.w	r3, r3, #3
 801bbea:	2b03      	cmp	r3, #3
 801bbec:	d017      	beq.n	801bc1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	68db      	ldr	r3, [r3, #12]
 801bbf2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801bbf4:	697b      	ldr	r3, [r7, #20]
 801bbf6:	005b      	lsls	r3, r3, #1
 801bbf8:	2203      	movs	r2, #3
 801bbfa:	fa02 f303 	lsl.w	r3, r2, r3
 801bbfe:	43db      	mvns	r3, r3
 801bc00:	693a      	ldr	r2, [r7, #16]
 801bc02:	4013      	ands	r3, r2
 801bc04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801bc06:	683b      	ldr	r3, [r7, #0]
 801bc08:	689a      	ldr	r2, [r3, #8]
 801bc0a:	697b      	ldr	r3, [r7, #20]
 801bc0c:	005b      	lsls	r3, r3, #1
 801bc0e:	fa02 f303 	lsl.w	r3, r2, r3
 801bc12:	693a      	ldr	r2, [r7, #16]
 801bc14:	4313      	orrs	r3, r2
 801bc16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 801bc18:	687b      	ldr	r3, [r7, #4]
 801bc1a:	693a      	ldr	r2, [r7, #16]
 801bc1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801bc1e:	683b      	ldr	r3, [r7, #0]
 801bc20:	685b      	ldr	r3, [r3, #4]
 801bc22:	f003 0303 	and.w	r3, r3, #3
 801bc26:	2b02      	cmp	r3, #2
 801bc28:	d123      	bne.n	801bc72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801bc2a:	697b      	ldr	r3, [r7, #20]
 801bc2c:	08da      	lsrs	r2, r3, #3
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	3208      	adds	r2, #8
 801bc32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bc36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801bc38:	697b      	ldr	r3, [r7, #20]
 801bc3a:	f003 0307 	and.w	r3, r3, #7
 801bc3e:	009b      	lsls	r3, r3, #2
 801bc40:	220f      	movs	r2, #15
 801bc42:	fa02 f303 	lsl.w	r3, r2, r3
 801bc46:	43db      	mvns	r3, r3
 801bc48:	693a      	ldr	r2, [r7, #16]
 801bc4a:	4013      	ands	r3, r2
 801bc4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801bc4e:	683b      	ldr	r3, [r7, #0]
 801bc50:	691a      	ldr	r2, [r3, #16]
 801bc52:	697b      	ldr	r3, [r7, #20]
 801bc54:	f003 0307 	and.w	r3, r3, #7
 801bc58:	009b      	lsls	r3, r3, #2
 801bc5a:	fa02 f303 	lsl.w	r3, r2, r3
 801bc5e:	693a      	ldr	r2, [r7, #16]
 801bc60:	4313      	orrs	r3, r2
 801bc62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 801bc64:	697b      	ldr	r3, [r7, #20]
 801bc66:	08da      	lsrs	r2, r3, #3
 801bc68:	687b      	ldr	r3, [r7, #4]
 801bc6a:	3208      	adds	r2, #8
 801bc6c:	6939      	ldr	r1, [r7, #16]
 801bc6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801bc72:	687b      	ldr	r3, [r7, #4]
 801bc74:	681b      	ldr	r3, [r3, #0]
 801bc76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801bc78:	697b      	ldr	r3, [r7, #20]
 801bc7a:	005b      	lsls	r3, r3, #1
 801bc7c:	2203      	movs	r2, #3
 801bc7e:	fa02 f303 	lsl.w	r3, r2, r3
 801bc82:	43db      	mvns	r3, r3
 801bc84:	693a      	ldr	r2, [r7, #16]
 801bc86:	4013      	ands	r3, r2
 801bc88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801bc8a:	683b      	ldr	r3, [r7, #0]
 801bc8c:	685b      	ldr	r3, [r3, #4]
 801bc8e:	f003 0203 	and.w	r2, r3, #3
 801bc92:	697b      	ldr	r3, [r7, #20]
 801bc94:	005b      	lsls	r3, r3, #1
 801bc96:	fa02 f303 	lsl.w	r3, r2, r3
 801bc9a:	693a      	ldr	r2, [r7, #16]
 801bc9c:	4313      	orrs	r3, r2
 801bc9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801bca0:	687b      	ldr	r3, [r7, #4]
 801bca2:	693a      	ldr	r2, [r7, #16]
 801bca4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801bca6:	683b      	ldr	r3, [r7, #0]
 801bca8:	685b      	ldr	r3, [r3, #4]
 801bcaa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801bcae:	2b00      	cmp	r3, #0
 801bcb0:	f000 80a6 	beq.w	801be00 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801bcb4:	4b5b      	ldr	r3, [pc, #364]	; (801be24 <HAL_GPIO_Init+0x2e4>)
 801bcb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bcb8:	4a5a      	ldr	r2, [pc, #360]	; (801be24 <HAL_GPIO_Init+0x2e4>)
 801bcba:	f043 0301 	orr.w	r3, r3, #1
 801bcbe:	6613      	str	r3, [r2, #96]	; 0x60
 801bcc0:	4b58      	ldr	r3, [pc, #352]	; (801be24 <HAL_GPIO_Init+0x2e4>)
 801bcc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bcc4:	f003 0301 	and.w	r3, r3, #1
 801bcc8:	60bb      	str	r3, [r7, #8]
 801bcca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 801bccc:	4a56      	ldr	r2, [pc, #344]	; (801be28 <HAL_GPIO_Init+0x2e8>)
 801bcce:	697b      	ldr	r3, [r7, #20]
 801bcd0:	089b      	lsrs	r3, r3, #2
 801bcd2:	3302      	adds	r3, #2
 801bcd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bcd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801bcda:	697b      	ldr	r3, [r7, #20]
 801bcdc:	f003 0303 	and.w	r3, r3, #3
 801bce0:	009b      	lsls	r3, r3, #2
 801bce2:	220f      	movs	r2, #15
 801bce4:	fa02 f303 	lsl.w	r3, r2, r3
 801bce8:	43db      	mvns	r3, r3
 801bcea:	693a      	ldr	r2, [r7, #16]
 801bcec:	4013      	ands	r3, r2
 801bcee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801bcf6:	d01f      	beq.n	801bd38 <HAL_GPIO_Init+0x1f8>
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	4a4c      	ldr	r2, [pc, #304]	; (801be2c <HAL_GPIO_Init+0x2ec>)
 801bcfc:	4293      	cmp	r3, r2
 801bcfe:	d019      	beq.n	801bd34 <HAL_GPIO_Init+0x1f4>
 801bd00:	687b      	ldr	r3, [r7, #4]
 801bd02:	4a4b      	ldr	r2, [pc, #300]	; (801be30 <HAL_GPIO_Init+0x2f0>)
 801bd04:	4293      	cmp	r3, r2
 801bd06:	d013      	beq.n	801bd30 <HAL_GPIO_Init+0x1f0>
 801bd08:	687b      	ldr	r3, [r7, #4]
 801bd0a:	4a4a      	ldr	r2, [pc, #296]	; (801be34 <HAL_GPIO_Init+0x2f4>)
 801bd0c:	4293      	cmp	r3, r2
 801bd0e:	d00d      	beq.n	801bd2c <HAL_GPIO_Init+0x1ec>
 801bd10:	687b      	ldr	r3, [r7, #4]
 801bd12:	4a49      	ldr	r2, [pc, #292]	; (801be38 <HAL_GPIO_Init+0x2f8>)
 801bd14:	4293      	cmp	r3, r2
 801bd16:	d007      	beq.n	801bd28 <HAL_GPIO_Init+0x1e8>
 801bd18:	687b      	ldr	r3, [r7, #4]
 801bd1a:	4a48      	ldr	r2, [pc, #288]	; (801be3c <HAL_GPIO_Init+0x2fc>)
 801bd1c:	4293      	cmp	r3, r2
 801bd1e:	d101      	bne.n	801bd24 <HAL_GPIO_Init+0x1e4>
 801bd20:	2305      	movs	r3, #5
 801bd22:	e00a      	b.n	801bd3a <HAL_GPIO_Init+0x1fa>
 801bd24:	2306      	movs	r3, #6
 801bd26:	e008      	b.n	801bd3a <HAL_GPIO_Init+0x1fa>
 801bd28:	2304      	movs	r3, #4
 801bd2a:	e006      	b.n	801bd3a <HAL_GPIO_Init+0x1fa>
 801bd2c:	2303      	movs	r3, #3
 801bd2e:	e004      	b.n	801bd3a <HAL_GPIO_Init+0x1fa>
 801bd30:	2302      	movs	r3, #2
 801bd32:	e002      	b.n	801bd3a <HAL_GPIO_Init+0x1fa>
 801bd34:	2301      	movs	r3, #1
 801bd36:	e000      	b.n	801bd3a <HAL_GPIO_Init+0x1fa>
 801bd38:	2300      	movs	r3, #0
 801bd3a:	697a      	ldr	r2, [r7, #20]
 801bd3c:	f002 0203 	and.w	r2, r2, #3
 801bd40:	0092      	lsls	r2, r2, #2
 801bd42:	4093      	lsls	r3, r2
 801bd44:	693a      	ldr	r2, [r7, #16]
 801bd46:	4313      	orrs	r3, r2
 801bd48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801bd4a:	4937      	ldr	r1, [pc, #220]	; (801be28 <HAL_GPIO_Init+0x2e8>)
 801bd4c:	697b      	ldr	r3, [r7, #20]
 801bd4e:	089b      	lsrs	r3, r3, #2
 801bd50:	3302      	adds	r3, #2
 801bd52:	693a      	ldr	r2, [r7, #16]
 801bd54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801bd58:	4b39      	ldr	r3, [pc, #228]	; (801be40 <HAL_GPIO_Init+0x300>)
 801bd5a:	689b      	ldr	r3, [r3, #8]
 801bd5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801bd5e:	68fb      	ldr	r3, [r7, #12]
 801bd60:	43db      	mvns	r3, r3
 801bd62:	693a      	ldr	r2, [r7, #16]
 801bd64:	4013      	ands	r3, r2
 801bd66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801bd68:	683b      	ldr	r3, [r7, #0]
 801bd6a:	685b      	ldr	r3, [r3, #4]
 801bd6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801bd70:	2b00      	cmp	r3, #0
 801bd72:	d003      	beq.n	801bd7c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 801bd74:	693a      	ldr	r2, [r7, #16]
 801bd76:	68fb      	ldr	r3, [r7, #12]
 801bd78:	4313      	orrs	r3, r2
 801bd7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801bd7c:	4a30      	ldr	r2, [pc, #192]	; (801be40 <HAL_GPIO_Init+0x300>)
 801bd7e:	693b      	ldr	r3, [r7, #16]
 801bd80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 801bd82:	4b2f      	ldr	r3, [pc, #188]	; (801be40 <HAL_GPIO_Init+0x300>)
 801bd84:	68db      	ldr	r3, [r3, #12]
 801bd86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801bd88:	68fb      	ldr	r3, [r7, #12]
 801bd8a:	43db      	mvns	r3, r3
 801bd8c:	693a      	ldr	r2, [r7, #16]
 801bd8e:	4013      	ands	r3, r2
 801bd90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801bd92:	683b      	ldr	r3, [r7, #0]
 801bd94:	685b      	ldr	r3, [r3, #4]
 801bd96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801bd9a:	2b00      	cmp	r3, #0
 801bd9c:	d003      	beq.n	801bda6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 801bd9e:	693a      	ldr	r2, [r7, #16]
 801bda0:	68fb      	ldr	r3, [r7, #12]
 801bda2:	4313      	orrs	r3, r2
 801bda4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801bda6:	4a26      	ldr	r2, [pc, #152]	; (801be40 <HAL_GPIO_Init+0x300>)
 801bda8:	693b      	ldr	r3, [r7, #16]
 801bdaa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 801bdac:	4b24      	ldr	r3, [pc, #144]	; (801be40 <HAL_GPIO_Init+0x300>)
 801bdae:	685b      	ldr	r3, [r3, #4]
 801bdb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801bdb2:	68fb      	ldr	r3, [r7, #12]
 801bdb4:	43db      	mvns	r3, r3
 801bdb6:	693a      	ldr	r2, [r7, #16]
 801bdb8:	4013      	ands	r3, r2
 801bdba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801bdbc:	683b      	ldr	r3, [r7, #0]
 801bdbe:	685b      	ldr	r3, [r3, #4]
 801bdc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bdc4:	2b00      	cmp	r3, #0
 801bdc6:	d003      	beq.n	801bdd0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 801bdc8:	693a      	ldr	r2, [r7, #16]
 801bdca:	68fb      	ldr	r3, [r7, #12]
 801bdcc:	4313      	orrs	r3, r2
 801bdce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801bdd0:	4a1b      	ldr	r2, [pc, #108]	; (801be40 <HAL_GPIO_Init+0x300>)
 801bdd2:	693b      	ldr	r3, [r7, #16]
 801bdd4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 801bdd6:	4b1a      	ldr	r3, [pc, #104]	; (801be40 <HAL_GPIO_Init+0x300>)
 801bdd8:	681b      	ldr	r3, [r3, #0]
 801bdda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801bddc:	68fb      	ldr	r3, [r7, #12]
 801bdde:	43db      	mvns	r3, r3
 801bde0:	693a      	ldr	r2, [r7, #16]
 801bde2:	4013      	ands	r3, r2
 801bde4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801bde6:	683b      	ldr	r3, [r7, #0]
 801bde8:	685b      	ldr	r3, [r3, #4]
 801bdea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801bdee:	2b00      	cmp	r3, #0
 801bdf0:	d003      	beq.n	801bdfa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 801bdf2:	693a      	ldr	r2, [r7, #16]
 801bdf4:	68fb      	ldr	r3, [r7, #12]
 801bdf6:	4313      	orrs	r3, r2
 801bdf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801bdfa:	4a11      	ldr	r2, [pc, #68]	; (801be40 <HAL_GPIO_Init+0x300>)
 801bdfc:	693b      	ldr	r3, [r7, #16]
 801bdfe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 801be00:	697b      	ldr	r3, [r7, #20]
 801be02:	3301      	adds	r3, #1
 801be04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 801be06:	683b      	ldr	r3, [r7, #0]
 801be08:	681a      	ldr	r2, [r3, #0]
 801be0a:	697b      	ldr	r3, [r7, #20]
 801be0c:	fa22 f303 	lsr.w	r3, r2, r3
 801be10:	2b00      	cmp	r3, #0
 801be12:	f47f ae9d 	bne.w	801bb50 <HAL_GPIO_Init+0x10>
  }
}
 801be16:	bf00      	nop
 801be18:	bf00      	nop
 801be1a:	371c      	adds	r7, #28
 801be1c:	46bd      	mov	sp, r7
 801be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be22:	4770      	bx	lr
 801be24:	40021000 	.word	0x40021000
 801be28:	40010000 	.word	0x40010000
 801be2c:	48000400 	.word	0x48000400
 801be30:	48000800 	.word	0x48000800
 801be34:	48000c00 	.word	0x48000c00
 801be38:	48001000 	.word	0x48001000
 801be3c:	48001400 	.word	0x48001400
 801be40:	40010400 	.word	0x40010400

0801be44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801be44:	b480      	push	{r7}
 801be46:	b083      	sub	sp, #12
 801be48:	af00      	add	r7, sp, #0
 801be4a:	6078      	str	r0, [r7, #4]
 801be4c:	460b      	mov	r3, r1
 801be4e:	807b      	strh	r3, [r7, #2]
 801be50:	4613      	mov	r3, r2
 801be52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801be54:	787b      	ldrb	r3, [r7, #1]
 801be56:	2b00      	cmp	r3, #0
 801be58:	d003      	beq.n	801be62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801be5a:	887a      	ldrh	r2, [r7, #2]
 801be5c:	687b      	ldr	r3, [r7, #4]
 801be5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801be60:	e002      	b.n	801be68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801be62:	887a      	ldrh	r2, [r7, #2]
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	629a      	str	r2, [r3, #40]	; 0x28
}
 801be68:	bf00      	nop
 801be6a:	370c      	adds	r7, #12
 801be6c:	46bd      	mov	sp, r7
 801be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be72:	4770      	bx	lr

0801be74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801be74:	b480      	push	{r7}
 801be76:	b085      	sub	sp, #20
 801be78:	af00      	add	r7, sp, #0
 801be7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 801be7c:	687b      	ldr	r3, [r7, #4]
 801be7e:	2b00      	cmp	r3, #0
 801be80:	d141      	bne.n	801bf06 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801be82:	4b4b      	ldr	r3, [pc, #300]	; (801bfb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801be84:	681b      	ldr	r3, [r3, #0]
 801be86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801be8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801be8e:	d131      	bne.n	801bef4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801be90:	4b47      	ldr	r3, [pc, #284]	; (801bfb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801be92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801be96:	4a46      	ldr	r2, [pc, #280]	; (801bfb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801be98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801be9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801bea0:	4b43      	ldr	r3, [pc, #268]	; (801bfb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bea2:	681b      	ldr	r3, [r3, #0]
 801bea4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801bea8:	4a41      	ldr	r2, [pc, #260]	; (801bfb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801beaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801beae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801beb0:	4b40      	ldr	r3, [pc, #256]	; (801bfb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 801beb2:	681b      	ldr	r3, [r3, #0]
 801beb4:	2232      	movs	r2, #50	; 0x32
 801beb6:	fb02 f303 	mul.w	r3, r2, r3
 801beba:	4a3f      	ldr	r2, [pc, #252]	; (801bfb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 801bebc:	fba2 2303 	umull	r2, r3, r2, r3
 801bec0:	0c9b      	lsrs	r3, r3, #18
 801bec2:	3301      	adds	r3, #1
 801bec4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801bec6:	e002      	b.n	801bece <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 801bec8:	68fb      	ldr	r3, [r7, #12]
 801beca:	3b01      	subs	r3, #1
 801becc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801bece:	4b38      	ldr	r3, [pc, #224]	; (801bfb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bed0:	695b      	ldr	r3, [r3, #20]
 801bed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801beda:	d102      	bne.n	801bee2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 801bedc:	68fb      	ldr	r3, [r7, #12]
 801bede:	2b00      	cmp	r3, #0
 801bee0:	d1f2      	bne.n	801bec8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801bee2:	4b33      	ldr	r3, [pc, #204]	; (801bfb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bee4:	695b      	ldr	r3, [r3, #20]
 801bee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801beea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801beee:	d158      	bne.n	801bfa2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801bef0:	2303      	movs	r3, #3
 801bef2:	e057      	b.n	801bfa4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801bef4:	4b2e      	ldr	r3, [pc, #184]	; (801bfb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801befa:	4a2d      	ldr	r2, [pc, #180]	; (801bfb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801befc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801bf00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801bf04:	e04d      	b.n	801bfa2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 801bf06:	687b      	ldr	r3, [r7, #4]
 801bf08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bf0c:	d141      	bne.n	801bf92 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801bf0e:	4b28      	ldr	r3, [pc, #160]	; (801bfb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bf10:	681b      	ldr	r3, [r3, #0]
 801bf12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801bf16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bf1a:	d131      	bne.n	801bf80 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801bf1c:	4b24      	ldr	r3, [pc, #144]	; (801bfb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bf1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801bf22:	4a23      	ldr	r2, [pc, #140]	; (801bfb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bf24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bf28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801bf2c:	4b20      	ldr	r3, [pc, #128]	; (801bfb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bf2e:	681b      	ldr	r3, [r3, #0]
 801bf30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801bf34:	4a1e      	ldr	r2, [pc, #120]	; (801bfb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bf36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801bf3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801bf3c:	4b1d      	ldr	r3, [pc, #116]	; (801bfb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 801bf3e:	681b      	ldr	r3, [r3, #0]
 801bf40:	2232      	movs	r2, #50	; 0x32
 801bf42:	fb02 f303 	mul.w	r3, r2, r3
 801bf46:	4a1c      	ldr	r2, [pc, #112]	; (801bfb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 801bf48:	fba2 2303 	umull	r2, r3, r2, r3
 801bf4c:	0c9b      	lsrs	r3, r3, #18
 801bf4e:	3301      	adds	r3, #1
 801bf50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801bf52:	e002      	b.n	801bf5a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 801bf54:	68fb      	ldr	r3, [r7, #12]
 801bf56:	3b01      	subs	r3, #1
 801bf58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801bf5a:	4b15      	ldr	r3, [pc, #84]	; (801bfb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bf5c:	695b      	ldr	r3, [r3, #20]
 801bf5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bf62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bf66:	d102      	bne.n	801bf6e <HAL_PWREx_ControlVoltageScaling+0xfa>
 801bf68:	68fb      	ldr	r3, [r7, #12]
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	d1f2      	bne.n	801bf54 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801bf6e:	4b10      	ldr	r3, [pc, #64]	; (801bfb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bf70:	695b      	ldr	r3, [r3, #20]
 801bf72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bf76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bf7a:	d112      	bne.n	801bfa2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801bf7c:	2303      	movs	r3, #3
 801bf7e:	e011      	b.n	801bfa4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801bf80:	4b0b      	ldr	r3, [pc, #44]	; (801bfb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bf82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801bf86:	4a0a      	ldr	r2, [pc, #40]	; (801bfb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bf88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bf8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801bf90:	e007      	b.n	801bfa2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 801bf92:	4b07      	ldr	r3, [pc, #28]	; (801bfb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bf94:	681b      	ldr	r3, [r3, #0]
 801bf96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801bf9a:	4a05      	ldr	r2, [pc, #20]	; (801bfb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bf9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801bfa0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 801bfa2:	2300      	movs	r3, #0
}
 801bfa4:	4618      	mov	r0, r3
 801bfa6:	3714      	adds	r7, #20
 801bfa8:	46bd      	mov	sp, r7
 801bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfae:	4770      	bx	lr
 801bfb0:	40007000 	.word	0x40007000
 801bfb4:	20000000 	.word	0x20000000
 801bfb8:	431bde83 	.word	0x431bde83

0801bfbc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 801bfbc:	b480      	push	{r7}
 801bfbe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 801bfc0:	4b05      	ldr	r3, [pc, #20]	; (801bfd8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801bfc2:	689b      	ldr	r3, [r3, #8]
 801bfc4:	4a04      	ldr	r2, [pc, #16]	; (801bfd8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801bfc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801bfca:	6093      	str	r3, [r2, #8]
}
 801bfcc:	bf00      	nop
 801bfce:	46bd      	mov	sp, r7
 801bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfd4:	4770      	bx	lr
 801bfd6:	bf00      	nop
 801bfd8:	40007000 	.word	0x40007000

0801bfdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801bfdc:	b580      	push	{r7, lr}
 801bfde:	b088      	sub	sp, #32
 801bfe0:	af00      	add	r7, sp, #0
 801bfe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801bfe4:	687b      	ldr	r3, [r7, #4]
 801bfe6:	2b00      	cmp	r3, #0
 801bfe8:	d101      	bne.n	801bfee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801bfea:	2301      	movs	r3, #1
 801bfec:	e306      	b.n	801c5fc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801bfee:	687b      	ldr	r3, [r7, #4]
 801bff0:	681b      	ldr	r3, [r3, #0]
 801bff2:	f003 0301 	and.w	r3, r3, #1
 801bff6:	2b00      	cmp	r3, #0
 801bff8:	d075      	beq.n	801c0e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801bffa:	4b97      	ldr	r3, [pc, #604]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801bffc:	689b      	ldr	r3, [r3, #8]
 801bffe:	f003 030c 	and.w	r3, r3, #12
 801c002:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801c004:	4b94      	ldr	r3, [pc, #592]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c006:	68db      	ldr	r3, [r3, #12]
 801c008:	f003 0303 	and.w	r3, r3, #3
 801c00c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 801c00e:	69bb      	ldr	r3, [r7, #24]
 801c010:	2b0c      	cmp	r3, #12
 801c012:	d102      	bne.n	801c01a <HAL_RCC_OscConfig+0x3e>
 801c014:	697b      	ldr	r3, [r7, #20]
 801c016:	2b03      	cmp	r3, #3
 801c018:	d002      	beq.n	801c020 <HAL_RCC_OscConfig+0x44>
 801c01a:	69bb      	ldr	r3, [r7, #24]
 801c01c:	2b08      	cmp	r3, #8
 801c01e:	d10b      	bne.n	801c038 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c020:	4b8d      	ldr	r3, [pc, #564]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c022:	681b      	ldr	r3, [r3, #0]
 801c024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c028:	2b00      	cmp	r3, #0
 801c02a:	d05b      	beq.n	801c0e4 <HAL_RCC_OscConfig+0x108>
 801c02c:	687b      	ldr	r3, [r7, #4]
 801c02e:	685b      	ldr	r3, [r3, #4]
 801c030:	2b00      	cmp	r3, #0
 801c032:	d157      	bne.n	801c0e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801c034:	2301      	movs	r3, #1
 801c036:	e2e1      	b.n	801c5fc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801c038:	687b      	ldr	r3, [r7, #4]
 801c03a:	685b      	ldr	r3, [r3, #4]
 801c03c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c040:	d106      	bne.n	801c050 <HAL_RCC_OscConfig+0x74>
 801c042:	4b85      	ldr	r3, [pc, #532]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c044:	681b      	ldr	r3, [r3, #0]
 801c046:	4a84      	ldr	r2, [pc, #528]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c04c:	6013      	str	r3, [r2, #0]
 801c04e:	e01d      	b.n	801c08c <HAL_RCC_OscConfig+0xb0>
 801c050:	687b      	ldr	r3, [r7, #4]
 801c052:	685b      	ldr	r3, [r3, #4]
 801c054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801c058:	d10c      	bne.n	801c074 <HAL_RCC_OscConfig+0x98>
 801c05a:	4b7f      	ldr	r3, [pc, #508]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c05c:	681b      	ldr	r3, [r3, #0]
 801c05e:	4a7e      	ldr	r2, [pc, #504]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801c064:	6013      	str	r3, [r2, #0]
 801c066:	4b7c      	ldr	r3, [pc, #496]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c068:	681b      	ldr	r3, [r3, #0]
 801c06a:	4a7b      	ldr	r2, [pc, #492]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c06c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c070:	6013      	str	r3, [r2, #0]
 801c072:	e00b      	b.n	801c08c <HAL_RCC_OscConfig+0xb0>
 801c074:	4b78      	ldr	r3, [pc, #480]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c076:	681b      	ldr	r3, [r3, #0]
 801c078:	4a77      	ldr	r2, [pc, #476]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c07a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c07e:	6013      	str	r3, [r2, #0]
 801c080:	4b75      	ldr	r3, [pc, #468]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c082:	681b      	ldr	r3, [r3, #0]
 801c084:	4a74      	ldr	r2, [pc, #464]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801c08a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801c08c:	687b      	ldr	r3, [r7, #4]
 801c08e:	685b      	ldr	r3, [r3, #4]
 801c090:	2b00      	cmp	r3, #0
 801c092:	d013      	beq.n	801c0bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c094:	f7fc fd0e 	bl	8018ab4 <HAL_GetTick>
 801c098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c09a:	e008      	b.n	801c0ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c09c:	f7fc fd0a 	bl	8018ab4 <HAL_GetTick>
 801c0a0:	4602      	mov	r2, r0
 801c0a2:	693b      	ldr	r3, [r7, #16]
 801c0a4:	1ad3      	subs	r3, r2, r3
 801c0a6:	2b64      	cmp	r3, #100	; 0x64
 801c0a8:	d901      	bls.n	801c0ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801c0aa:	2303      	movs	r3, #3
 801c0ac:	e2a6      	b.n	801c5fc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c0ae:	4b6a      	ldr	r3, [pc, #424]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c0b0:	681b      	ldr	r3, [r3, #0]
 801c0b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c0b6:	2b00      	cmp	r3, #0
 801c0b8:	d0f0      	beq.n	801c09c <HAL_RCC_OscConfig+0xc0>
 801c0ba:	e014      	b.n	801c0e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c0bc:	f7fc fcfa 	bl	8018ab4 <HAL_GetTick>
 801c0c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801c0c2:	e008      	b.n	801c0d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c0c4:	f7fc fcf6 	bl	8018ab4 <HAL_GetTick>
 801c0c8:	4602      	mov	r2, r0
 801c0ca:	693b      	ldr	r3, [r7, #16]
 801c0cc:	1ad3      	subs	r3, r2, r3
 801c0ce:	2b64      	cmp	r3, #100	; 0x64
 801c0d0:	d901      	bls.n	801c0d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801c0d2:	2303      	movs	r3, #3
 801c0d4:	e292      	b.n	801c5fc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801c0d6:	4b60      	ldr	r3, [pc, #384]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c0d8:	681b      	ldr	r3, [r3, #0]
 801c0da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c0de:	2b00      	cmp	r3, #0
 801c0e0:	d1f0      	bne.n	801c0c4 <HAL_RCC_OscConfig+0xe8>
 801c0e2:	e000      	b.n	801c0e6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c0e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801c0e6:	687b      	ldr	r3, [r7, #4]
 801c0e8:	681b      	ldr	r3, [r3, #0]
 801c0ea:	f003 0302 	and.w	r3, r3, #2
 801c0ee:	2b00      	cmp	r3, #0
 801c0f0:	d075      	beq.n	801c1de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c0f2:	4b59      	ldr	r3, [pc, #356]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c0f4:	689b      	ldr	r3, [r3, #8]
 801c0f6:	f003 030c 	and.w	r3, r3, #12
 801c0fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801c0fc:	4b56      	ldr	r3, [pc, #344]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c0fe:	68db      	ldr	r3, [r3, #12]
 801c100:	f003 0303 	and.w	r3, r3, #3
 801c104:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 801c106:	69bb      	ldr	r3, [r7, #24]
 801c108:	2b0c      	cmp	r3, #12
 801c10a:	d102      	bne.n	801c112 <HAL_RCC_OscConfig+0x136>
 801c10c:	697b      	ldr	r3, [r7, #20]
 801c10e:	2b02      	cmp	r3, #2
 801c110:	d002      	beq.n	801c118 <HAL_RCC_OscConfig+0x13c>
 801c112:	69bb      	ldr	r3, [r7, #24]
 801c114:	2b04      	cmp	r3, #4
 801c116:	d11f      	bne.n	801c158 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c118:	4b4f      	ldr	r3, [pc, #316]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c11a:	681b      	ldr	r3, [r3, #0]
 801c11c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c120:	2b00      	cmp	r3, #0
 801c122:	d005      	beq.n	801c130 <HAL_RCC_OscConfig+0x154>
 801c124:	687b      	ldr	r3, [r7, #4]
 801c126:	68db      	ldr	r3, [r3, #12]
 801c128:	2b00      	cmp	r3, #0
 801c12a:	d101      	bne.n	801c130 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 801c12c:	2301      	movs	r3, #1
 801c12e:	e265      	b.n	801c5fc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c130:	4b49      	ldr	r3, [pc, #292]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c132:	685b      	ldr	r3, [r3, #4]
 801c134:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801c138:	687b      	ldr	r3, [r7, #4]
 801c13a:	691b      	ldr	r3, [r3, #16]
 801c13c:	061b      	lsls	r3, r3, #24
 801c13e:	4946      	ldr	r1, [pc, #280]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c140:	4313      	orrs	r3, r2
 801c142:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801c144:	4b45      	ldr	r3, [pc, #276]	; (801c25c <HAL_RCC_OscConfig+0x280>)
 801c146:	681b      	ldr	r3, [r3, #0]
 801c148:	4618      	mov	r0, r3
 801c14a:	f7fc fc67 	bl	8018a1c <HAL_InitTick>
 801c14e:	4603      	mov	r3, r0
 801c150:	2b00      	cmp	r3, #0
 801c152:	d043      	beq.n	801c1dc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 801c154:	2301      	movs	r3, #1
 801c156:	e251      	b.n	801c5fc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801c158:	687b      	ldr	r3, [r7, #4]
 801c15a:	68db      	ldr	r3, [r3, #12]
 801c15c:	2b00      	cmp	r3, #0
 801c15e:	d023      	beq.n	801c1a8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801c160:	4b3d      	ldr	r3, [pc, #244]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c162:	681b      	ldr	r3, [r3, #0]
 801c164:	4a3c      	ldr	r2, [pc, #240]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c16a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c16c:	f7fc fca2 	bl	8018ab4 <HAL_GetTick>
 801c170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c172:	e008      	b.n	801c186 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c174:	f7fc fc9e 	bl	8018ab4 <HAL_GetTick>
 801c178:	4602      	mov	r2, r0
 801c17a:	693b      	ldr	r3, [r7, #16]
 801c17c:	1ad3      	subs	r3, r2, r3
 801c17e:	2b02      	cmp	r3, #2
 801c180:	d901      	bls.n	801c186 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801c182:	2303      	movs	r3, #3
 801c184:	e23a      	b.n	801c5fc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c186:	4b34      	ldr	r3, [pc, #208]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c188:	681b      	ldr	r3, [r3, #0]
 801c18a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c18e:	2b00      	cmp	r3, #0
 801c190:	d0f0      	beq.n	801c174 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c192:	4b31      	ldr	r3, [pc, #196]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c194:	685b      	ldr	r3, [r3, #4]
 801c196:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801c19a:	687b      	ldr	r3, [r7, #4]
 801c19c:	691b      	ldr	r3, [r3, #16]
 801c19e:	061b      	lsls	r3, r3, #24
 801c1a0:	492d      	ldr	r1, [pc, #180]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c1a2:	4313      	orrs	r3, r2
 801c1a4:	604b      	str	r3, [r1, #4]
 801c1a6:	e01a      	b.n	801c1de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801c1a8:	4b2b      	ldr	r3, [pc, #172]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c1aa:	681b      	ldr	r3, [r3, #0]
 801c1ac:	4a2a      	ldr	r2, [pc, #168]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c1ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c1b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c1b4:	f7fc fc7e 	bl	8018ab4 <HAL_GetTick>
 801c1b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801c1ba:	e008      	b.n	801c1ce <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c1bc:	f7fc fc7a 	bl	8018ab4 <HAL_GetTick>
 801c1c0:	4602      	mov	r2, r0
 801c1c2:	693b      	ldr	r3, [r7, #16]
 801c1c4:	1ad3      	subs	r3, r2, r3
 801c1c6:	2b02      	cmp	r3, #2
 801c1c8:	d901      	bls.n	801c1ce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 801c1ca:	2303      	movs	r3, #3
 801c1cc:	e216      	b.n	801c5fc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801c1ce:	4b22      	ldr	r3, [pc, #136]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c1d0:	681b      	ldr	r3, [r3, #0]
 801c1d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c1d6:	2b00      	cmp	r3, #0
 801c1d8:	d1f0      	bne.n	801c1bc <HAL_RCC_OscConfig+0x1e0>
 801c1da:	e000      	b.n	801c1de <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c1dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801c1de:	687b      	ldr	r3, [r7, #4]
 801c1e0:	681b      	ldr	r3, [r3, #0]
 801c1e2:	f003 0308 	and.w	r3, r3, #8
 801c1e6:	2b00      	cmp	r3, #0
 801c1e8:	d041      	beq.n	801c26e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801c1ea:	687b      	ldr	r3, [r7, #4]
 801c1ec:	695b      	ldr	r3, [r3, #20]
 801c1ee:	2b00      	cmp	r3, #0
 801c1f0:	d01c      	beq.n	801c22c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801c1f2:	4b19      	ldr	r3, [pc, #100]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c1f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c1f8:	4a17      	ldr	r2, [pc, #92]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c1fa:	f043 0301 	orr.w	r3, r3, #1
 801c1fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c202:	f7fc fc57 	bl	8018ab4 <HAL_GetTick>
 801c206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801c208:	e008      	b.n	801c21c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c20a:	f7fc fc53 	bl	8018ab4 <HAL_GetTick>
 801c20e:	4602      	mov	r2, r0
 801c210:	693b      	ldr	r3, [r7, #16]
 801c212:	1ad3      	subs	r3, r2, r3
 801c214:	2b02      	cmp	r3, #2
 801c216:	d901      	bls.n	801c21c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801c218:	2303      	movs	r3, #3
 801c21a:	e1ef      	b.n	801c5fc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801c21c:	4b0e      	ldr	r3, [pc, #56]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c21e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c222:	f003 0302 	and.w	r3, r3, #2
 801c226:	2b00      	cmp	r3, #0
 801c228:	d0ef      	beq.n	801c20a <HAL_RCC_OscConfig+0x22e>
 801c22a:	e020      	b.n	801c26e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801c22c:	4b0a      	ldr	r3, [pc, #40]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c22e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c232:	4a09      	ldr	r2, [pc, #36]	; (801c258 <HAL_RCC_OscConfig+0x27c>)
 801c234:	f023 0301 	bic.w	r3, r3, #1
 801c238:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c23c:	f7fc fc3a 	bl	8018ab4 <HAL_GetTick>
 801c240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801c242:	e00d      	b.n	801c260 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c244:	f7fc fc36 	bl	8018ab4 <HAL_GetTick>
 801c248:	4602      	mov	r2, r0
 801c24a:	693b      	ldr	r3, [r7, #16]
 801c24c:	1ad3      	subs	r3, r2, r3
 801c24e:	2b02      	cmp	r3, #2
 801c250:	d906      	bls.n	801c260 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 801c252:	2303      	movs	r3, #3
 801c254:	e1d2      	b.n	801c5fc <HAL_RCC_OscConfig+0x620>
 801c256:	bf00      	nop
 801c258:	40021000 	.word	0x40021000
 801c25c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801c260:	4b8c      	ldr	r3, [pc, #560]	; (801c494 <HAL_RCC_OscConfig+0x4b8>)
 801c262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c266:	f003 0302 	and.w	r3, r3, #2
 801c26a:	2b00      	cmp	r3, #0
 801c26c:	d1ea      	bne.n	801c244 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801c26e:	687b      	ldr	r3, [r7, #4]
 801c270:	681b      	ldr	r3, [r3, #0]
 801c272:	f003 0304 	and.w	r3, r3, #4
 801c276:	2b00      	cmp	r3, #0
 801c278:	f000 80a6 	beq.w	801c3c8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 801c27c:	2300      	movs	r3, #0
 801c27e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801c280:	4b84      	ldr	r3, [pc, #528]	; (801c494 <HAL_RCC_OscConfig+0x4b8>)
 801c282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c288:	2b00      	cmp	r3, #0
 801c28a:	d101      	bne.n	801c290 <HAL_RCC_OscConfig+0x2b4>
 801c28c:	2301      	movs	r3, #1
 801c28e:	e000      	b.n	801c292 <HAL_RCC_OscConfig+0x2b6>
 801c290:	2300      	movs	r3, #0
 801c292:	2b00      	cmp	r3, #0
 801c294:	d00d      	beq.n	801c2b2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801c296:	4b7f      	ldr	r3, [pc, #508]	; (801c494 <HAL_RCC_OscConfig+0x4b8>)
 801c298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c29a:	4a7e      	ldr	r2, [pc, #504]	; (801c494 <HAL_RCC_OscConfig+0x4b8>)
 801c29c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c2a0:	6593      	str	r3, [r2, #88]	; 0x58
 801c2a2:	4b7c      	ldr	r3, [pc, #496]	; (801c494 <HAL_RCC_OscConfig+0x4b8>)
 801c2a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c2a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c2aa:	60fb      	str	r3, [r7, #12]
 801c2ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 801c2ae:	2301      	movs	r3, #1
 801c2b0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c2b2:	4b79      	ldr	r3, [pc, #484]	; (801c498 <HAL_RCC_OscConfig+0x4bc>)
 801c2b4:	681b      	ldr	r3, [r3, #0]
 801c2b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c2ba:	2b00      	cmp	r3, #0
 801c2bc:	d118      	bne.n	801c2f0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801c2be:	4b76      	ldr	r3, [pc, #472]	; (801c498 <HAL_RCC_OscConfig+0x4bc>)
 801c2c0:	681b      	ldr	r3, [r3, #0]
 801c2c2:	4a75      	ldr	r2, [pc, #468]	; (801c498 <HAL_RCC_OscConfig+0x4bc>)
 801c2c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c2c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801c2ca:	f7fc fbf3 	bl	8018ab4 <HAL_GetTick>
 801c2ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c2d0:	e008      	b.n	801c2e4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c2d2:	f7fc fbef 	bl	8018ab4 <HAL_GetTick>
 801c2d6:	4602      	mov	r2, r0
 801c2d8:	693b      	ldr	r3, [r7, #16]
 801c2da:	1ad3      	subs	r3, r2, r3
 801c2dc:	2b02      	cmp	r3, #2
 801c2de:	d901      	bls.n	801c2e4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 801c2e0:	2303      	movs	r3, #3
 801c2e2:	e18b      	b.n	801c5fc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c2e4:	4b6c      	ldr	r3, [pc, #432]	; (801c498 <HAL_RCC_OscConfig+0x4bc>)
 801c2e6:	681b      	ldr	r3, [r3, #0]
 801c2e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c2ec:	2b00      	cmp	r3, #0
 801c2ee:	d0f0      	beq.n	801c2d2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c2f0:	687b      	ldr	r3, [r7, #4]
 801c2f2:	689b      	ldr	r3, [r3, #8]
 801c2f4:	2b01      	cmp	r3, #1
 801c2f6:	d108      	bne.n	801c30a <HAL_RCC_OscConfig+0x32e>
 801c2f8:	4b66      	ldr	r3, [pc, #408]	; (801c494 <HAL_RCC_OscConfig+0x4b8>)
 801c2fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c2fe:	4a65      	ldr	r2, [pc, #404]	; (801c494 <HAL_RCC_OscConfig+0x4b8>)
 801c300:	f043 0301 	orr.w	r3, r3, #1
 801c304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c308:	e024      	b.n	801c354 <HAL_RCC_OscConfig+0x378>
 801c30a:	687b      	ldr	r3, [r7, #4]
 801c30c:	689b      	ldr	r3, [r3, #8]
 801c30e:	2b05      	cmp	r3, #5
 801c310:	d110      	bne.n	801c334 <HAL_RCC_OscConfig+0x358>
 801c312:	4b60      	ldr	r3, [pc, #384]	; (801c494 <HAL_RCC_OscConfig+0x4b8>)
 801c314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c318:	4a5e      	ldr	r2, [pc, #376]	; (801c494 <HAL_RCC_OscConfig+0x4b8>)
 801c31a:	f043 0304 	orr.w	r3, r3, #4
 801c31e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c322:	4b5c      	ldr	r3, [pc, #368]	; (801c494 <HAL_RCC_OscConfig+0x4b8>)
 801c324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c328:	4a5a      	ldr	r2, [pc, #360]	; (801c494 <HAL_RCC_OscConfig+0x4b8>)
 801c32a:	f043 0301 	orr.w	r3, r3, #1
 801c32e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c332:	e00f      	b.n	801c354 <HAL_RCC_OscConfig+0x378>
 801c334:	4b57      	ldr	r3, [pc, #348]	; (801c494 <HAL_RCC_OscConfig+0x4b8>)
 801c336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c33a:	4a56      	ldr	r2, [pc, #344]	; (801c494 <HAL_RCC_OscConfig+0x4b8>)
 801c33c:	f023 0301 	bic.w	r3, r3, #1
 801c340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c344:	4b53      	ldr	r3, [pc, #332]	; (801c494 <HAL_RCC_OscConfig+0x4b8>)
 801c346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c34a:	4a52      	ldr	r2, [pc, #328]	; (801c494 <HAL_RCC_OscConfig+0x4b8>)
 801c34c:	f023 0304 	bic.w	r3, r3, #4
 801c350:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801c354:	687b      	ldr	r3, [r7, #4]
 801c356:	689b      	ldr	r3, [r3, #8]
 801c358:	2b00      	cmp	r3, #0
 801c35a:	d016      	beq.n	801c38a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c35c:	f7fc fbaa 	bl	8018ab4 <HAL_GetTick>
 801c360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c362:	e00a      	b.n	801c37a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c364:	f7fc fba6 	bl	8018ab4 <HAL_GetTick>
 801c368:	4602      	mov	r2, r0
 801c36a:	693b      	ldr	r3, [r7, #16]
 801c36c:	1ad3      	subs	r3, r2, r3
 801c36e:	f241 3288 	movw	r2, #5000	; 0x1388
 801c372:	4293      	cmp	r3, r2
 801c374:	d901      	bls.n	801c37a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 801c376:	2303      	movs	r3, #3
 801c378:	e140      	b.n	801c5fc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c37a:	4b46      	ldr	r3, [pc, #280]	; (801c494 <HAL_RCC_OscConfig+0x4b8>)
 801c37c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c380:	f003 0302 	and.w	r3, r3, #2
 801c384:	2b00      	cmp	r3, #0
 801c386:	d0ed      	beq.n	801c364 <HAL_RCC_OscConfig+0x388>
 801c388:	e015      	b.n	801c3b6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c38a:	f7fc fb93 	bl	8018ab4 <HAL_GetTick>
 801c38e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801c390:	e00a      	b.n	801c3a8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c392:	f7fc fb8f 	bl	8018ab4 <HAL_GetTick>
 801c396:	4602      	mov	r2, r0
 801c398:	693b      	ldr	r3, [r7, #16]
 801c39a:	1ad3      	subs	r3, r2, r3
 801c39c:	f241 3288 	movw	r2, #5000	; 0x1388
 801c3a0:	4293      	cmp	r3, r2
 801c3a2:	d901      	bls.n	801c3a8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 801c3a4:	2303      	movs	r3, #3
 801c3a6:	e129      	b.n	801c5fc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801c3a8:	4b3a      	ldr	r3, [pc, #232]	; (801c494 <HAL_RCC_OscConfig+0x4b8>)
 801c3aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c3ae:	f003 0302 	and.w	r3, r3, #2
 801c3b2:	2b00      	cmp	r3, #0
 801c3b4:	d1ed      	bne.n	801c392 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801c3b6:	7ffb      	ldrb	r3, [r7, #31]
 801c3b8:	2b01      	cmp	r3, #1
 801c3ba:	d105      	bne.n	801c3c8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801c3bc:	4b35      	ldr	r3, [pc, #212]	; (801c494 <HAL_RCC_OscConfig+0x4b8>)
 801c3be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c3c0:	4a34      	ldr	r2, [pc, #208]	; (801c494 <HAL_RCC_OscConfig+0x4b8>)
 801c3c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c3c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801c3c8:	687b      	ldr	r3, [r7, #4]
 801c3ca:	681b      	ldr	r3, [r3, #0]
 801c3cc:	f003 0320 	and.w	r3, r3, #32
 801c3d0:	2b00      	cmp	r3, #0
 801c3d2:	d03c      	beq.n	801c44e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801c3d4:	687b      	ldr	r3, [r7, #4]
 801c3d6:	699b      	ldr	r3, [r3, #24]
 801c3d8:	2b00      	cmp	r3, #0
 801c3da:	d01c      	beq.n	801c416 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801c3dc:	4b2d      	ldr	r3, [pc, #180]	; (801c494 <HAL_RCC_OscConfig+0x4b8>)
 801c3de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c3e2:	4a2c      	ldr	r2, [pc, #176]	; (801c494 <HAL_RCC_OscConfig+0x4b8>)
 801c3e4:	f043 0301 	orr.w	r3, r3, #1
 801c3e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c3ec:	f7fc fb62 	bl	8018ab4 <HAL_GetTick>
 801c3f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801c3f2:	e008      	b.n	801c406 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c3f4:	f7fc fb5e 	bl	8018ab4 <HAL_GetTick>
 801c3f8:	4602      	mov	r2, r0
 801c3fa:	693b      	ldr	r3, [r7, #16]
 801c3fc:	1ad3      	subs	r3, r2, r3
 801c3fe:	2b02      	cmp	r3, #2
 801c400:	d901      	bls.n	801c406 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 801c402:	2303      	movs	r3, #3
 801c404:	e0fa      	b.n	801c5fc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801c406:	4b23      	ldr	r3, [pc, #140]	; (801c494 <HAL_RCC_OscConfig+0x4b8>)
 801c408:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c40c:	f003 0302 	and.w	r3, r3, #2
 801c410:	2b00      	cmp	r3, #0
 801c412:	d0ef      	beq.n	801c3f4 <HAL_RCC_OscConfig+0x418>
 801c414:	e01b      	b.n	801c44e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801c416:	4b1f      	ldr	r3, [pc, #124]	; (801c494 <HAL_RCC_OscConfig+0x4b8>)
 801c418:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c41c:	4a1d      	ldr	r2, [pc, #116]	; (801c494 <HAL_RCC_OscConfig+0x4b8>)
 801c41e:	f023 0301 	bic.w	r3, r3, #1
 801c422:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c426:	f7fc fb45 	bl	8018ab4 <HAL_GetTick>
 801c42a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801c42c:	e008      	b.n	801c440 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c42e:	f7fc fb41 	bl	8018ab4 <HAL_GetTick>
 801c432:	4602      	mov	r2, r0
 801c434:	693b      	ldr	r3, [r7, #16]
 801c436:	1ad3      	subs	r3, r2, r3
 801c438:	2b02      	cmp	r3, #2
 801c43a:	d901      	bls.n	801c440 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 801c43c:	2303      	movs	r3, #3
 801c43e:	e0dd      	b.n	801c5fc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801c440:	4b14      	ldr	r3, [pc, #80]	; (801c494 <HAL_RCC_OscConfig+0x4b8>)
 801c442:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c446:	f003 0302 	and.w	r3, r3, #2
 801c44a:	2b00      	cmp	r3, #0
 801c44c:	d1ef      	bne.n	801c42e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801c44e:	687b      	ldr	r3, [r7, #4]
 801c450:	69db      	ldr	r3, [r3, #28]
 801c452:	2b00      	cmp	r3, #0
 801c454:	f000 80d1 	beq.w	801c5fa <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801c458:	4b0e      	ldr	r3, [pc, #56]	; (801c494 <HAL_RCC_OscConfig+0x4b8>)
 801c45a:	689b      	ldr	r3, [r3, #8]
 801c45c:	f003 030c 	and.w	r3, r3, #12
 801c460:	2b0c      	cmp	r3, #12
 801c462:	f000 808b 	beq.w	801c57c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801c466:	687b      	ldr	r3, [r7, #4]
 801c468:	69db      	ldr	r3, [r3, #28]
 801c46a:	2b02      	cmp	r3, #2
 801c46c:	d15e      	bne.n	801c52c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c46e:	4b09      	ldr	r3, [pc, #36]	; (801c494 <HAL_RCC_OscConfig+0x4b8>)
 801c470:	681b      	ldr	r3, [r3, #0]
 801c472:	4a08      	ldr	r2, [pc, #32]	; (801c494 <HAL_RCC_OscConfig+0x4b8>)
 801c474:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801c478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c47a:	f7fc fb1b 	bl	8018ab4 <HAL_GetTick>
 801c47e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c480:	e00c      	b.n	801c49c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c482:	f7fc fb17 	bl	8018ab4 <HAL_GetTick>
 801c486:	4602      	mov	r2, r0
 801c488:	693b      	ldr	r3, [r7, #16]
 801c48a:	1ad3      	subs	r3, r2, r3
 801c48c:	2b02      	cmp	r3, #2
 801c48e:	d905      	bls.n	801c49c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 801c490:	2303      	movs	r3, #3
 801c492:	e0b3      	b.n	801c5fc <HAL_RCC_OscConfig+0x620>
 801c494:	40021000 	.word	0x40021000
 801c498:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c49c:	4b59      	ldr	r3, [pc, #356]	; (801c604 <HAL_RCC_OscConfig+0x628>)
 801c49e:	681b      	ldr	r3, [r3, #0]
 801c4a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c4a4:	2b00      	cmp	r3, #0
 801c4a6:	d1ec      	bne.n	801c482 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801c4a8:	4b56      	ldr	r3, [pc, #344]	; (801c604 <HAL_RCC_OscConfig+0x628>)
 801c4aa:	68da      	ldr	r2, [r3, #12]
 801c4ac:	4b56      	ldr	r3, [pc, #344]	; (801c608 <HAL_RCC_OscConfig+0x62c>)
 801c4ae:	4013      	ands	r3, r2
 801c4b0:	687a      	ldr	r2, [r7, #4]
 801c4b2:	6a11      	ldr	r1, [r2, #32]
 801c4b4:	687a      	ldr	r2, [r7, #4]
 801c4b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801c4b8:	3a01      	subs	r2, #1
 801c4ba:	0112      	lsls	r2, r2, #4
 801c4bc:	4311      	orrs	r1, r2
 801c4be:	687a      	ldr	r2, [r7, #4]
 801c4c0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801c4c2:	0212      	lsls	r2, r2, #8
 801c4c4:	4311      	orrs	r1, r2
 801c4c6:	687a      	ldr	r2, [r7, #4]
 801c4c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801c4ca:	0852      	lsrs	r2, r2, #1
 801c4cc:	3a01      	subs	r2, #1
 801c4ce:	0552      	lsls	r2, r2, #21
 801c4d0:	4311      	orrs	r1, r2
 801c4d2:	687a      	ldr	r2, [r7, #4]
 801c4d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801c4d6:	0852      	lsrs	r2, r2, #1
 801c4d8:	3a01      	subs	r2, #1
 801c4da:	0652      	lsls	r2, r2, #25
 801c4dc:	4311      	orrs	r1, r2
 801c4de:	687a      	ldr	r2, [r7, #4]
 801c4e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801c4e2:	06d2      	lsls	r2, r2, #27
 801c4e4:	430a      	orrs	r2, r1
 801c4e6:	4947      	ldr	r1, [pc, #284]	; (801c604 <HAL_RCC_OscConfig+0x628>)
 801c4e8:	4313      	orrs	r3, r2
 801c4ea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801c4ec:	4b45      	ldr	r3, [pc, #276]	; (801c604 <HAL_RCC_OscConfig+0x628>)
 801c4ee:	681b      	ldr	r3, [r3, #0]
 801c4f0:	4a44      	ldr	r2, [pc, #272]	; (801c604 <HAL_RCC_OscConfig+0x628>)
 801c4f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c4f6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801c4f8:	4b42      	ldr	r3, [pc, #264]	; (801c604 <HAL_RCC_OscConfig+0x628>)
 801c4fa:	68db      	ldr	r3, [r3, #12]
 801c4fc:	4a41      	ldr	r2, [pc, #260]	; (801c604 <HAL_RCC_OscConfig+0x628>)
 801c4fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c502:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c504:	f7fc fad6 	bl	8018ab4 <HAL_GetTick>
 801c508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c50a:	e008      	b.n	801c51e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c50c:	f7fc fad2 	bl	8018ab4 <HAL_GetTick>
 801c510:	4602      	mov	r2, r0
 801c512:	693b      	ldr	r3, [r7, #16]
 801c514:	1ad3      	subs	r3, r2, r3
 801c516:	2b02      	cmp	r3, #2
 801c518:	d901      	bls.n	801c51e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 801c51a:	2303      	movs	r3, #3
 801c51c:	e06e      	b.n	801c5fc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c51e:	4b39      	ldr	r3, [pc, #228]	; (801c604 <HAL_RCC_OscConfig+0x628>)
 801c520:	681b      	ldr	r3, [r3, #0]
 801c522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c526:	2b00      	cmp	r3, #0
 801c528:	d0f0      	beq.n	801c50c <HAL_RCC_OscConfig+0x530>
 801c52a:	e066      	b.n	801c5fa <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c52c:	4b35      	ldr	r3, [pc, #212]	; (801c604 <HAL_RCC_OscConfig+0x628>)
 801c52e:	681b      	ldr	r3, [r3, #0]
 801c530:	4a34      	ldr	r2, [pc, #208]	; (801c604 <HAL_RCC_OscConfig+0x628>)
 801c532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801c536:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 801c538:	4b32      	ldr	r3, [pc, #200]	; (801c604 <HAL_RCC_OscConfig+0x628>)
 801c53a:	68db      	ldr	r3, [r3, #12]
 801c53c:	4a31      	ldr	r2, [pc, #196]	; (801c604 <HAL_RCC_OscConfig+0x628>)
 801c53e:	f023 0303 	bic.w	r3, r3, #3
 801c542:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 801c544:	4b2f      	ldr	r3, [pc, #188]	; (801c604 <HAL_RCC_OscConfig+0x628>)
 801c546:	68db      	ldr	r3, [r3, #12]
 801c548:	4a2e      	ldr	r2, [pc, #184]	; (801c604 <HAL_RCC_OscConfig+0x628>)
 801c54a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 801c54e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c552:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c554:	f7fc faae 	bl	8018ab4 <HAL_GetTick>
 801c558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c55a:	e008      	b.n	801c56e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c55c:	f7fc faaa 	bl	8018ab4 <HAL_GetTick>
 801c560:	4602      	mov	r2, r0
 801c562:	693b      	ldr	r3, [r7, #16]
 801c564:	1ad3      	subs	r3, r2, r3
 801c566:	2b02      	cmp	r3, #2
 801c568:	d901      	bls.n	801c56e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 801c56a:	2303      	movs	r3, #3
 801c56c:	e046      	b.n	801c5fc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c56e:	4b25      	ldr	r3, [pc, #148]	; (801c604 <HAL_RCC_OscConfig+0x628>)
 801c570:	681b      	ldr	r3, [r3, #0]
 801c572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c576:	2b00      	cmp	r3, #0
 801c578:	d1f0      	bne.n	801c55c <HAL_RCC_OscConfig+0x580>
 801c57a:	e03e      	b.n	801c5fa <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	69db      	ldr	r3, [r3, #28]
 801c580:	2b01      	cmp	r3, #1
 801c582:	d101      	bne.n	801c588 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 801c584:	2301      	movs	r3, #1
 801c586:	e039      	b.n	801c5fc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 801c588:	4b1e      	ldr	r3, [pc, #120]	; (801c604 <HAL_RCC_OscConfig+0x628>)
 801c58a:	68db      	ldr	r3, [r3, #12]
 801c58c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c58e:	697b      	ldr	r3, [r7, #20]
 801c590:	f003 0203 	and.w	r2, r3, #3
 801c594:	687b      	ldr	r3, [r7, #4]
 801c596:	6a1b      	ldr	r3, [r3, #32]
 801c598:	429a      	cmp	r2, r3
 801c59a:	d12c      	bne.n	801c5f6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801c59c:	697b      	ldr	r3, [r7, #20]
 801c59e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801c5a2:	687b      	ldr	r3, [r7, #4]
 801c5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c5a6:	3b01      	subs	r3, #1
 801c5a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c5aa:	429a      	cmp	r2, r3
 801c5ac:	d123      	bne.n	801c5f6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801c5ae:	697b      	ldr	r3, [r7, #20]
 801c5b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 801c5b4:	687b      	ldr	r3, [r7, #4]
 801c5b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c5b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801c5ba:	429a      	cmp	r2, r3
 801c5bc:	d11b      	bne.n	801c5f6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801c5be:	697b      	ldr	r3, [r7, #20]
 801c5c0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 801c5c4:	687b      	ldr	r3, [r7, #4]
 801c5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c5c8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801c5ca:	429a      	cmp	r2, r3
 801c5cc:	d113      	bne.n	801c5f6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c5ce:	697b      	ldr	r3, [r7, #20]
 801c5d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 801c5d4:	687b      	ldr	r3, [r7, #4]
 801c5d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c5d8:	085b      	lsrs	r3, r3, #1
 801c5da:	3b01      	subs	r3, #1
 801c5dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801c5de:	429a      	cmp	r2, r3
 801c5e0:	d109      	bne.n	801c5f6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801c5e2:	697b      	ldr	r3, [r7, #20]
 801c5e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 801c5e8:	687b      	ldr	r3, [r7, #4]
 801c5ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c5ec:	085b      	lsrs	r3, r3, #1
 801c5ee:	3b01      	subs	r3, #1
 801c5f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c5f2:	429a      	cmp	r2, r3
 801c5f4:	d001      	beq.n	801c5fa <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 801c5f6:	2301      	movs	r3, #1
 801c5f8:	e000      	b.n	801c5fc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 801c5fa:	2300      	movs	r3, #0
}
 801c5fc:	4618      	mov	r0, r3
 801c5fe:	3720      	adds	r7, #32
 801c600:	46bd      	mov	sp, r7
 801c602:	bd80      	pop	{r7, pc}
 801c604:	40021000 	.word	0x40021000
 801c608:	019f800c 	.word	0x019f800c

0801c60c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801c60c:	b580      	push	{r7, lr}
 801c60e:	b086      	sub	sp, #24
 801c610:	af00      	add	r7, sp, #0
 801c612:	6078      	str	r0, [r7, #4]
 801c614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 801c616:	2300      	movs	r3, #0
 801c618:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	2b00      	cmp	r3, #0
 801c61e:	d101      	bne.n	801c624 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 801c620:	2301      	movs	r3, #1
 801c622:	e11e      	b.n	801c862 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801c624:	4b91      	ldr	r3, [pc, #580]	; (801c86c <HAL_RCC_ClockConfig+0x260>)
 801c626:	681b      	ldr	r3, [r3, #0]
 801c628:	f003 030f 	and.w	r3, r3, #15
 801c62c:	683a      	ldr	r2, [r7, #0]
 801c62e:	429a      	cmp	r2, r3
 801c630:	d910      	bls.n	801c654 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c632:	4b8e      	ldr	r3, [pc, #568]	; (801c86c <HAL_RCC_ClockConfig+0x260>)
 801c634:	681b      	ldr	r3, [r3, #0]
 801c636:	f023 020f 	bic.w	r2, r3, #15
 801c63a:	498c      	ldr	r1, [pc, #560]	; (801c86c <HAL_RCC_ClockConfig+0x260>)
 801c63c:	683b      	ldr	r3, [r7, #0]
 801c63e:	4313      	orrs	r3, r2
 801c640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c642:	4b8a      	ldr	r3, [pc, #552]	; (801c86c <HAL_RCC_ClockConfig+0x260>)
 801c644:	681b      	ldr	r3, [r3, #0]
 801c646:	f003 030f 	and.w	r3, r3, #15
 801c64a:	683a      	ldr	r2, [r7, #0]
 801c64c:	429a      	cmp	r2, r3
 801c64e:	d001      	beq.n	801c654 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801c650:	2301      	movs	r3, #1
 801c652:	e106      	b.n	801c862 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801c654:	687b      	ldr	r3, [r7, #4]
 801c656:	681b      	ldr	r3, [r3, #0]
 801c658:	f003 0301 	and.w	r3, r3, #1
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	d073      	beq.n	801c748 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801c660:	687b      	ldr	r3, [r7, #4]
 801c662:	685b      	ldr	r3, [r3, #4]
 801c664:	2b03      	cmp	r3, #3
 801c666:	d129      	bne.n	801c6bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c668:	4b81      	ldr	r3, [pc, #516]	; (801c870 <HAL_RCC_ClockConfig+0x264>)
 801c66a:	681b      	ldr	r3, [r3, #0]
 801c66c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c670:	2b00      	cmp	r3, #0
 801c672:	d101      	bne.n	801c678 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 801c674:	2301      	movs	r3, #1
 801c676:	e0f4      	b.n	801c862 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 801c678:	f000 f99c 	bl	801c9b4 <RCC_GetSysClockFreqFromPLLSource>
 801c67c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 801c67e:	693b      	ldr	r3, [r7, #16]
 801c680:	4a7c      	ldr	r2, [pc, #496]	; (801c874 <HAL_RCC_ClockConfig+0x268>)
 801c682:	4293      	cmp	r3, r2
 801c684:	d93f      	bls.n	801c706 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801c686:	4b7a      	ldr	r3, [pc, #488]	; (801c870 <HAL_RCC_ClockConfig+0x264>)
 801c688:	689b      	ldr	r3, [r3, #8]
 801c68a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c68e:	2b00      	cmp	r3, #0
 801c690:	d009      	beq.n	801c6a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801c692:	687b      	ldr	r3, [r7, #4]
 801c694:	681b      	ldr	r3, [r3, #0]
 801c696:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801c69a:	2b00      	cmp	r3, #0
 801c69c:	d033      	beq.n	801c706 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 801c69e:	687b      	ldr	r3, [r7, #4]
 801c6a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801c6a2:	2b00      	cmp	r3, #0
 801c6a4:	d12f      	bne.n	801c706 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801c6a6:	4b72      	ldr	r3, [pc, #456]	; (801c870 <HAL_RCC_ClockConfig+0x264>)
 801c6a8:	689b      	ldr	r3, [r3, #8]
 801c6aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801c6ae:	4a70      	ldr	r2, [pc, #448]	; (801c870 <HAL_RCC_ClockConfig+0x264>)
 801c6b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c6b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 801c6b6:	2380      	movs	r3, #128	; 0x80
 801c6b8:	617b      	str	r3, [r7, #20]
 801c6ba:	e024      	b.n	801c706 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801c6bc:	687b      	ldr	r3, [r7, #4]
 801c6be:	685b      	ldr	r3, [r3, #4]
 801c6c0:	2b02      	cmp	r3, #2
 801c6c2:	d107      	bne.n	801c6d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c6c4:	4b6a      	ldr	r3, [pc, #424]	; (801c870 <HAL_RCC_ClockConfig+0x264>)
 801c6c6:	681b      	ldr	r3, [r3, #0]
 801c6c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c6cc:	2b00      	cmp	r3, #0
 801c6ce:	d109      	bne.n	801c6e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801c6d0:	2301      	movs	r3, #1
 801c6d2:	e0c6      	b.n	801c862 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c6d4:	4b66      	ldr	r3, [pc, #408]	; (801c870 <HAL_RCC_ClockConfig+0x264>)
 801c6d6:	681b      	ldr	r3, [r3, #0]
 801c6d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c6dc:	2b00      	cmp	r3, #0
 801c6de:	d101      	bne.n	801c6e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801c6e0:	2301      	movs	r3, #1
 801c6e2:	e0be      	b.n	801c862 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 801c6e4:	f000 f8ce 	bl	801c884 <HAL_RCC_GetSysClockFreq>
 801c6e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 801c6ea:	693b      	ldr	r3, [r7, #16]
 801c6ec:	4a61      	ldr	r2, [pc, #388]	; (801c874 <HAL_RCC_ClockConfig+0x268>)
 801c6ee:	4293      	cmp	r3, r2
 801c6f0:	d909      	bls.n	801c706 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801c6f2:	4b5f      	ldr	r3, [pc, #380]	; (801c870 <HAL_RCC_ClockConfig+0x264>)
 801c6f4:	689b      	ldr	r3, [r3, #8]
 801c6f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801c6fa:	4a5d      	ldr	r2, [pc, #372]	; (801c870 <HAL_RCC_ClockConfig+0x264>)
 801c6fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c700:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 801c702:	2380      	movs	r3, #128	; 0x80
 801c704:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801c706:	4b5a      	ldr	r3, [pc, #360]	; (801c870 <HAL_RCC_ClockConfig+0x264>)
 801c708:	689b      	ldr	r3, [r3, #8]
 801c70a:	f023 0203 	bic.w	r2, r3, #3
 801c70e:	687b      	ldr	r3, [r7, #4]
 801c710:	685b      	ldr	r3, [r3, #4]
 801c712:	4957      	ldr	r1, [pc, #348]	; (801c870 <HAL_RCC_ClockConfig+0x264>)
 801c714:	4313      	orrs	r3, r2
 801c716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c718:	f7fc f9cc 	bl	8018ab4 <HAL_GetTick>
 801c71c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c71e:	e00a      	b.n	801c736 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801c720:	f7fc f9c8 	bl	8018ab4 <HAL_GetTick>
 801c724:	4602      	mov	r2, r0
 801c726:	68fb      	ldr	r3, [r7, #12]
 801c728:	1ad3      	subs	r3, r2, r3
 801c72a:	f241 3288 	movw	r2, #5000	; 0x1388
 801c72e:	4293      	cmp	r3, r2
 801c730:	d901      	bls.n	801c736 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 801c732:	2303      	movs	r3, #3
 801c734:	e095      	b.n	801c862 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c736:	4b4e      	ldr	r3, [pc, #312]	; (801c870 <HAL_RCC_ClockConfig+0x264>)
 801c738:	689b      	ldr	r3, [r3, #8]
 801c73a:	f003 020c 	and.w	r2, r3, #12
 801c73e:	687b      	ldr	r3, [r7, #4]
 801c740:	685b      	ldr	r3, [r3, #4]
 801c742:	009b      	lsls	r3, r3, #2
 801c744:	429a      	cmp	r2, r3
 801c746:	d1eb      	bne.n	801c720 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801c748:	687b      	ldr	r3, [r7, #4]
 801c74a:	681b      	ldr	r3, [r3, #0]
 801c74c:	f003 0302 	and.w	r3, r3, #2
 801c750:	2b00      	cmp	r3, #0
 801c752:	d023      	beq.n	801c79c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c754:	687b      	ldr	r3, [r7, #4]
 801c756:	681b      	ldr	r3, [r3, #0]
 801c758:	f003 0304 	and.w	r3, r3, #4
 801c75c:	2b00      	cmp	r3, #0
 801c75e:	d005      	beq.n	801c76c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801c760:	4b43      	ldr	r3, [pc, #268]	; (801c870 <HAL_RCC_ClockConfig+0x264>)
 801c762:	689b      	ldr	r3, [r3, #8]
 801c764:	4a42      	ldr	r2, [pc, #264]	; (801c870 <HAL_RCC_ClockConfig+0x264>)
 801c766:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801c76a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c76c:	687b      	ldr	r3, [r7, #4]
 801c76e:	681b      	ldr	r3, [r3, #0]
 801c770:	f003 0308 	and.w	r3, r3, #8
 801c774:	2b00      	cmp	r3, #0
 801c776:	d007      	beq.n	801c788 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 801c778:	4b3d      	ldr	r3, [pc, #244]	; (801c870 <HAL_RCC_ClockConfig+0x264>)
 801c77a:	689b      	ldr	r3, [r3, #8]
 801c77c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c780:	4a3b      	ldr	r2, [pc, #236]	; (801c870 <HAL_RCC_ClockConfig+0x264>)
 801c782:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801c786:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801c788:	4b39      	ldr	r3, [pc, #228]	; (801c870 <HAL_RCC_ClockConfig+0x264>)
 801c78a:	689b      	ldr	r3, [r3, #8]
 801c78c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801c790:	687b      	ldr	r3, [r7, #4]
 801c792:	689b      	ldr	r3, [r3, #8]
 801c794:	4936      	ldr	r1, [pc, #216]	; (801c870 <HAL_RCC_ClockConfig+0x264>)
 801c796:	4313      	orrs	r3, r2
 801c798:	608b      	str	r3, [r1, #8]
 801c79a:	e008      	b.n	801c7ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 801c79c:	697b      	ldr	r3, [r7, #20]
 801c79e:	2b80      	cmp	r3, #128	; 0x80
 801c7a0:	d105      	bne.n	801c7ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 801c7a2:	4b33      	ldr	r3, [pc, #204]	; (801c870 <HAL_RCC_ClockConfig+0x264>)
 801c7a4:	689b      	ldr	r3, [r3, #8]
 801c7a6:	4a32      	ldr	r2, [pc, #200]	; (801c870 <HAL_RCC_ClockConfig+0x264>)
 801c7a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801c7ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801c7ae:	4b2f      	ldr	r3, [pc, #188]	; (801c86c <HAL_RCC_ClockConfig+0x260>)
 801c7b0:	681b      	ldr	r3, [r3, #0]
 801c7b2:	f003 030f 	and.w	r3, r3, #15
 801c7b6:	683a      	ldr	r2, [r7, #0]
 801c7b8:	429a      	cmp	r2, r3
 801c7ba:	d21d      	bcs.n	801c7f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c7bc:	4b2b      	ldr	r3, [pc, #172]	; (801c86c <HAL_RCC_ClockConfig+0x260>)
 801c7be:	681b      	ldr	r3, [r3, #0]
 801c7c0:	f023 020f 	bic.w	r2, r3, #15
 801c7c4:	4929      	ldr	r1, [pc, #164]	; (801c86c <HAL_RCC_ClockConfig+0x260>)
 801c7c6:	683b      	ldr	r3, [r7, #0]
 801c7c8:	4313      	orrs	r3, r2
 801c7ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801c7cc:	f7fc f972 	bl	8018ab4 <HAL_GetTick>
 801c7d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c7d2:	e00a      	b.n	801c7ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801c7d4:	f7fc f96e 	bl	8018ab4 <HAL_GetTick>
 801c7d8:	4602      	mov	r2, r0
 801c7da:	68fb      	ldr	r3, [r7, #12]
 801c7dc:	1ad3      	subs	r3, r2, r3
 801c7de:	f241 3288 	movw	r2, #5000	; 0x1388
 801c7e2:	4293      	cmp	r3, r2
 801c7e4:	d901      	bls.n	801c7ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 801c7e6:	2303      	movs	r3, #3
 801c7e8:	e03b      	b.n	801c862 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c7ea:	4b20      	ldr	r3, [pc, #128]	; (801c86c <HAL_RCC_ClockConfig+0x260>)
 801c7ec:	681b      	ldr	r3, [r3, #0]
 801c7ee:	f003 030f 	and.w	r3, r3, #15
 801c7f2:	683a      	ldr	r2, [r7, #0]
 801c7f4:	429a      	cmp	r2, r3
 801c7f6:	d1ed      	bne.n	801c7d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c7f8:	687b      	ldr	r3, [r7, #4]
 801c7fa:	681b      	ldr	r3, [r3, #0]
 801c7fc:	f003 0304 	and.w	r3, r3, #4
 801c800:	2b00      	cmp	r3, #0
 801c802:	d008      	beq.n	801c816 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801c804:	4b1a      	ldr	r3, [pc, #104]	; (801c870 <HAL_RCC_ClockConfig+0x264>)
 801c806:	689b      	ldr	r3, [r3, #8]
 801c808:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801c80c:	687b      	ldr	r3, [r7, #4]
 801c80e:	68db      	ldr	r3, [r3, #12]
 801c810:	4917      	ldr	r1, [pc, #92]	; (801c870 <HAL_RCC_ClockConfig+0x264>)
 801c812:	4313      	orrs	r3, r2
 801c814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c816:	687b      	ldr	r3, [r7, #4]
 801c818:	681b      	ldr	r3, [r3, #0]
 801c81a:	f003 0308 	and.w	r3, r3, #8
 801c81e:	2b00      	cmp	r3, #0
 801c820:	d009      	beq.n	801c836 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801c822:	4b13      	ldr	r3, [pc, #76]	; (801c870 <HAL_RCC_ClockConfig+0x264>)
 801c824:	689b      	ldr	r3, [r3, #8]
 801c826:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801c82a:	687b      	ldr	r3, [r7, #4]
 801c82c:	691b      	ldr	r3, [r3, #16]
 801c82e:	00db      	lsls	r3, r3, #3
 801c830:	490f      	ldr	r1, [pc, #60]	; (801c870 <HAL_RCC_ClockConfig+0x264>)
 801c832:	4313      	orrs	r3, r2
 801c834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801c836:	f000 f825 	bl	801c884 <HAL_RCC_GetSysClockFreq>
 801c83a:	4602      	mov	r2, r0
 801c83c:	4b0c      	ldr	r3, [pc, #48]	; (801c870 <HAL_RCC_ClockConfig+0x264>)
 801c83e:	689b      	ldr	r3, [r3, #8]
 801c840:	091b      	lsrs	r3, r3, #4
 801c842:	f003 030f 	and.w	r3, r3, #15
 801c846:	490c      	ldr	r1, [pc, #48]	; (801c878 <HAL_RCC_ClockConfig+0x26c>)
 801c848:	5ccb      	ldrb	r3, [r1, r3]
 801c84a:	f003 031f 	and.w	r3, r3, #31
 801c84e:	fa22 f303 	lsr.w	r3, r2, r3
 801c852:	4a0a      	ldr	r2, [pc, #40]	; (801c87c <HAL_RCC_ClockConfig+0x270>)
 801c854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 801c856:	4b0a      	ldr	r3, [pc, #40]	; (801c880 <HAL_RCC_ClockConfig+0x274>)
 801c858:	681b      	ldr	r3, [r3, #0]
 801c85a:	4618      	mov	r0, r3
 801c85c:	f7fc f8de 	bl	8018a1c <HAL_InitTick>
 801c860:	4603      	mov	r3, r0
}
 801c862:	4618      	mov	r0, r3
 801c864:	3718      	adds	r7, #24
 801c866:	46bd      	mov	sp, r7
 801c868:	bd80      	pop	{r7, pc}
 801c86a:	bf00      	nop
 801c86c:	40022000 	.word	0x40022000
 801c870:	40021000 	.word	0x40021000
 801c874:	04c4b400 	.word	0x04c4b400
 801c878:	080245c8 	.word	0x080245c8
 801c87c:	20000000 	.word	0x20000000
 801c880:	20000004 	.word	0x20000004

0801c884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801c884:	b480      	push	{r7}
 801c886:	b087      	sub	sp, #28
 801c888:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 801c88a:	4b2c      	ldr	r3, [pc, #176]	; (801c93c <HAL_RCC_GetSysClockFreq+0xb8>)
 801c88c:	689b      	ldr	r3, [r3, #8]
 801c88e:	f003 030c 	and.w	r3, r3, #12
 801c892:	2b04      	cmp	r3, #4
 801c894:	d102      	bne.n	801c89c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801c896:	4b2a      	ldr	r3, [pc, #168]	; (801c940 <HAL_RCC_GetSysClockFreq+0xbc>)
 801c898:	613b      	str	r3, [r7, #16]
 801c89a:	e047      	b.n	801c92c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 801c89c:	4b27      	ldr	r3, [pc, #156]	; (801c93c <HAL_RCC_GetSysClockFreq+0xb8>)
 801c89e:	689b      	ldr	r3, [r3, #8]
 801c8a0:	f003 030c 	and.w	r3, r3, #12
 801c8a4:	2b08      	cmp	r3, #8
 801c8a6:	d102      	bne.n	801c8ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801c8a8:	4b25      	ldr	r3, [pc, #148]	; (801c940 <HAL_RCC_GetSysClockFreq+0xbc>)
 801c8aa:	613b      	str	r3, [r7, #16]
 801c8ac:	e03e      	b.n	801c92c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 801c8ae:	4b23      	ldr	r3, [pc, #140]	; (801c93c <HAL_RCC_GetSysClockFreq+0xb8>)
 801c8b0:	689b      	ldr	r3, [r3, #8]
 801c8b2:	f003 030c 	and.w	r3, r3, #12
 801c8b6:	2b0c      	cmp	r3, #12
 801c8b8:	d136      	bne.n	801c928 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801c8ba:	4b20      	ldr	r3, [pc, #128]	; (801c93c <HAL_RCC_GetSysClockFreq+0xb8>)
 801c8bc:	68db      	ldr	r3, [r3, #12]
 801c8be:	f003 0303 	and.w	r3, r3, #3
 801c8c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801c8c4:	4b1d      	ldr	r3, [pc, #116]	; (801c93c <HAL_RCC_GetSysClockFreq+0xb8>)
 801c8c6:	68db      	ldr	r3, [r3, #12]
 801c8c8:	091b      	lsrs	r3, r3, #4
 801c8ca:	f003 030f 	and.w	r3, r3, #15
 801c8ce:	3301      	adds	r3, #1
 801c8d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 801c8d2:	68fb      	ldr	r3, [r7, #12]
 801c8d4:	2b03      	cmp	r3, #3
 801c8d6:	d10c      	bne.n	801c8f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801c8d8:	4a19      	ldr	r2, [pc, #100]	; (801c940 <HAL_RCC_GetSysClockFreq+0xbc>)
 801c8da:	68bb      	ldr	r3, [r7, #8]
 801c8dc:	fbb2 f3f3 	udiv	r3, r2, r3
 801c8e0:	4a16      	ldr	r2, [pc, #88]	; (801c93c <HAL_RCC_GetSysClockFreq+0xb8>)
 801c8e2:	68d2      	ldr	r2, [r2, #12]
 801c8e4:	0a12      	lsrs	r2, r2, #8
 801c8e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801c8ea:	fb02 f303 	mul.w	r3, r2, r3
 801c8ee:	617b      	str	r3, [r7, #20]
      break;
 801c8f0:	e00c      	b.n	801c90c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801c8f2:	4a13      	ldr	r2, [pc, #76]	; (801c940 <HAL_RCC_GetSysClockFreq+0xbc>)
 801c8f4:	68bb      	ldr	r3, [r7, #8]
 801c8f6:	fbb2 f3f3 	udiv	r3, r2, r3
 801c8fa:	4a10      	ldr	r2, [pc, #64]	; (801c93c <HAL_RCC_GetSysClockFreq+0xb8>)
 801c8fc:	68d2      	ldr	r2, [r2, #12]
 801c8fe:	0a12      	lsrs	r2, r2, #8
 801c900:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801c904:	fb02 f303 	mul.w	r3, r2, r3
 801c908:	617b      	str	r3, [r7, #20]
      break;
 801c90a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801c90c:	4b0b      	ldr	r3, [pc, #44]	; (801c93c <HAL_RCC_GetSysClockFreq+0xb8>)
 801c90e:	68db      	ldr	r3, [r3, #12]
 801c910:	0e5b      	lsrs	r3, r3, #25
 801c912:	f003 0303 	and.w	r3, r3, #3
 801c916:	3301      	adds	r3, #1
 801c918:	005b      	lsls	r3, r3, #1
 801c91a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 801c91c:	697a      	ldr	r2, [r7, #20]
 801c91e:	687b      	ldr	r3, [r7, #4]
 801c920:	fbb2 f3f3 	udiv	r3, r2, r3
 801c924:	613b      	str	r3, [r7, #16]
 801c926:	e001      	b.n	801c92c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 801c928:	2300      	movs	r3, #0
 801c92a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 801c92c:	693b      	ldr	r3, [r7, #16]
}
 801c92e:	4618      	mov	r0, r3
 801c930:	371c      	adds	r7, #28
 801c932:	46bd      	mov	sp, r7
 801c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c938:	4770      	bx	lr
 801c93a:	bf00      	nop
 801c93c:	40021000 	.word	0x40021000
 801c940:	00f42400 	.word	0x00f42400

0801c944 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801c944:	b480      	push	{r7}
 801c946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801c948:	4b03      	ldr	r3, [pc, #12]	; (801c958 <HAL_RCC_GetHCLKFreq+0x14>)
 801c94a:	681b      	ldr	r3, [r3, #0]
}
 801c94c:	4618      	mov	r0, r3
 801c94e:	46bd      	mov	sp, r7
 801c950:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c954:	4770      	bx	lr
 801c956:	bf00      	nop
 801c958:	20000000 	.word	0x20000000

0801c95c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801c95c:	b580      	push	{r7, lr}
 801c95e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801c960:	f7ff fff0 	bl	801c944 <HAL_RCC_GetHCLKFreq>
 801c964:	4602      	mov	r2, r0
 801c966:	4b06      	ldr	r3, [pc, #24]	; (801c980 <HAL_RCC_GetPCLK1Freq+0x24>)
 801c968:	689b      	ldr	r3, [r3, #8]
 801c96a:	0a1b      	lsrs	r3, r3, #8
 801c96c:	f003 0307 	and.w	r3, r3, #7
 801c970:	4904      	ldr	r1, [pc, #16]	; (801c984 <HAL_RCC_GetPCLK1Freq+0x28>)
 801c972:	5ccb      	ldrb	r3, [r1, r3]
 801c974:	f003 031f 	and.w	r3, r3, #31
 801c978:	fa22 f303 	lsr.w	r3, r2, r3
}
 801c97c:	4618      	mov	r0, r3
 801c97e:	bd80      	pop	{r7, pc}
 801c980:	40021000 	.word	0x40021000
 801c984:	080245d8 	.word	0x080245d8

0801c988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801c988:	b580      	push	{r7, lr}
 801c98a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 801c98c:	f7ff ffda 	bl	801c944 <HAL_RCC_GetHCLKFreq>
 801c990:	4602      	mov	r2, r0
 801c992:	4b06      	ldr	r3, [pc, #24]	; (801c9ac <HAL_RCC_GetPCLK2Freq+0x24>)
 801c994:	689b      	ldr	r3, [r3, #8]
 801c996:	0adb      	lsrs	r3, r3, #11
 801c998:	f003 0307 	and.w	r3, r3, #7
 801c99c:	4904      	ldr	r1, [pc, #16]	; (801c9b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 801c99e:	5ccb      	ldrb	r3, [r1, r3]
 801c9a0:	f003 031f 	and.w	r3, r3, #31
 801c9a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 801c9a8:	4618      	mov	r0, r3
 801c9aa:	bd80      	pop	{r7, pc}
 801c9ac:	40021000 	.word	0x40021000
 801c9b0:	080245d8 	.word	0x080245d8

0801c9b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 801c9b4:	b480      	push	{r7}
 801c9b6:	b087      	sub	sp, #28
 801c9b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801c9ba:	4b1e      	ldr	r3, [pc, #120]	; (801ca34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801c9bc:	68db      	ldr	r3, [r3, #12]
 801c9be:	f003 0303 	and.w	r3, r3, #3
 801c9c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801c9c4:	4b1b      	ldr	r3, [pc, #108]	; (801ca34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801c9c6:	68db      	ldr	r3, [r3, #12]
 801c9c8:	091b      	lsrs	r3, r3, #4
 801c9ca:	f003 030f 	and.w	r3, r3, #15
 801c9ce:	3301      	adds	r3, #1
 801c9d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 801c9d2:	693b      	ldr	r3, [r7, #16]
 801c9d4:	2b03      	cmp	r3, #3
 801c9d6:	d10c      	bne.n	801c9f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801c9d8:	4a17      	ldr	r2, [pc, #92]	; (801ca38 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801c9da:	68fb      	ldr	r3, [r7, #12]
 801c9dc:	fbb2 f3f3 	udiv	r3, r2, r3
 801c9e0:	4a14      	ldr	r2, [pc, #80]	; (801ca34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801c9e2:	68d2      	ldr	r2, [r2, #12]
 801c9e4:	0a12      	lsrs	r2, r2, #8
 801c9e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801c9ea:	fb02 f303 	mul.w	r3, r2, r3
 801c9ee:	617b      	str	r3, [r7, #20]
    break;
 801c9f0:	e00c      	b.n	801ca0c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801c9f2:	4a11      	ldr	r2, [pc, #68]	; (801ca38 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801c9f4:	68fb      	ldr	r3, [r7, #12]
 801c9f6:	fbb2 f3f3 	udiv	r3, r2, r3
 801c9fa:	4a0e      	ldr	r2, [pc, #56]	; (801ca34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801c9fc:	68d2      	ldr	r2, [r2, #12]
 801c9fe:	0a12      	lsrs	r2, r2, #8
 801ca00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801ca04:	fb02 f303 	mul.w	r3, r2, r3
 801ca08:	617b      	str	r3, [r7, #20]
    break;
 801ca0a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801ca0c:	4b09      	ldr	r3, [pc, #36]	; (801ca34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801ca0e:	68db      	ldr	r3, [r3, #12]
 801ca10:	0e5b      	lsrs	r3, r3, #25
 801ca12:	f003 0303 	and.w	r3, r3, #3
 801ca16:	3301      	adds	r3, #1
 801ca18:	005b      	lsls	r3, r3, #1
 801ca1a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 801ca1c:	697a      	ldr	r2, [r7, #20]
 801ca1e:	68bb      	ldr	r3, [r7, #8]
 801ca20:	fbb2 f3f3 	udiv	r3, r2, r3
 801ca24:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 801ca26:	687b      	ldr	r3, [r7, #4]
}
 801ca28:	4618      	mov	r0, r3
 801ca2a:	371c      	adds	r7, #28
 801ca2c:	46bd      	mov	sp, r7
 801ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca32:	4770      	bx	lr
 801ca34:	40021000 	.word	0x40021000
 801ca38:	00f42400 	.word	0x00f42400

0801ca3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801ca3c:	b580      	push	{r7, lr}
 801ca3e:	b086      	sub	sp, #24
 801ca40:	af00      	add	r7, sp, #0
 801ca42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801ca44:	2300      	movs	r3, #0
 801ca46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801ca48:	2300      	movs	r3, #0
 801ca4a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801ca4c:	687b      	ldr	r3, [r7, #4]
 801ca4e:	681b      	ldr	r3, [r3, #0]
 801ca50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801ca54:	2b00      	cmp	r3, #0
 801ca56:	f000 8098 	beq.w	801cb8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801ca5a:	2300      	movs	r3, #0
 801ca5c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801ca5e:	4b43      	ldr	r3, [pc, #268]	; (801cb6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ca60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ca62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ca66:	2b00      	cmp	r3, #0
 801ca68:	d10d      	bne.n	801ca86 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801ca6a:	4b40      	ldr	r3, [pc, #256]	; (801cb6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ca6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ca6e:	4a3f      	ldr	r2, [pc, #252]	; (801cb6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ca70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ca74:	6593      	str	r3, [r2, #88]	; 0x58
 801ca76:	4b3d      	ldr	r3, [pc, #244]	; (801cb6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ca78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ca7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ca7e:	60bb      	str	r3, [r7, #8]
 801ca80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801ca82:	2301      	movs	r3, #1
 801ca84:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801ca86:	4b3a      	ldr	r3, [pc, #232]	; (801cb70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801ca88:	681b      	ldr	r3, [r3, #0]
 801ca8a:	4a39      	ldr	r2, [pc, #228]	; (801cb70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801ca8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801ca90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801ca92:	f7fc f80f 	bl	8018ab4 <HAL_GetTick>
 801ca96:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801ca98:	e009      	b.n	801caae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801ca9a:	f7fc f80b 	bl	8018ab4 <HAL_GetTick>
 801ca9e:	4602      	mov	r2, r0
 801caa0:	68fb      	ldr	r3, [r7, #12]
 801caa2:	1ad3      	subs	r3, r2, r3
 801caa4:	2b02      	cmp	r3, #2
 801caa6:	d902      	bls.n	801caae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 801caa8:	2303      	movs	r3, #3
 801caaa:	74fb      	strb	r3, [r7, #19]
        break;
 801caac:	e005      	b.n	801caba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801caae:	4b30      	ldr	r3, [pc, #192]	; (801cb70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801cab0:	681b      	ldr	r3, [r3, #0]
 801cab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cab6:	2b00      	cmp	r3, #0
 801cab8:	d0ef      	beq.n	801ca9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 801caba:	7cfb      	ldrb	r3, [r7, #19]
 801cabc:	2b00      	cmp	r3, #0
 801cabe:	d159      	bne.n	801cb74 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801cac0:	4b2a      	ldr	r3, [pc, #168]	; (801cb6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801caca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801cacc:	697b      	ldr	r3, [r7, #20]
 801cace:	2b00      	cmp	r3, #0
 801cad0:	d01e      	beq.n	801cb10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 801cad2:	687b      	ldr	r3, [r7, #4]
 801cad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cad6:	697a      	ldr	r2, [r7, #20]
 801cad8:	429a      	cmp	r2, r3
 801cada:	d019      	beq.n	801cb10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801cadc:	4b23      	ldr	r3, [pc, #140]	; (801cb6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801cae6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801cae8:	4b20      	ldr	r3, [pc, #128]	; (801cb6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801caea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801caee:	4a1f      	ldr	r2, [pc, #124]	; (801cb6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801caf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801caf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801caf8:	4b1c      	ldr	r3, [pc, #112]	; (801cb6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cafa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cafe:	4a1b      	ldr	r2, [pc, #108]	; (801cb6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cb00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801cb04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801cb08:	4a18      	ldr	r2, [pc, #96]	; (801cb6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cb0a:	697b      	ldr	r3, [r7, #20]
 801cb0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801cb10:	697b      	ldr	r3, [r7, #20]
 801cb12:	f003 0301 	and.w	r3, r3, #1
 801cb16:	2b00      	cmp	r3, #0
 801cb18:	d016      	beq.n	801cb48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cb1a:	f7fb ffcb 	bl	8018ab4 <HAL_GetTick>
 801cb1e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801cb20:	e00b      	b.n	801cb3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801cb22:	f7fb ffc7 	bl	8018ab4 <HAL_GetTick>
 801cb26:	4602      	mov	r2, r0
 801cb28:	68fb      	ldr	r3, [r7, #12]
 801cb2a:	1ad3      	subs	r3, r2, r3
 801cb2c:	f241 3288 	movw	r2, #5000	; 0x1388
 801cb30:	4293      	cmp	r3, r2
 801cb32:	d902      	bls.n	801cb3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 801cb34:	2303      	movs	r3, #3
 801cb36:	74fb      	strb	r3, [r7, #19]
            break;
 801cb38:	e006      	b.n	801cb48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801cb3a:	4b0c      	ldr	r3, [pc, #48]	; (801cb6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cb3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cb40:	f003 0302 	and.w	r3, r3, #2
 801cb44:	2b00      	cmp	r3, #0
 801cb46:	d0ec      	beq.n	801cb22 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 801cb48:	7cfb      	ldrb	r3, [r7, #19]
 801cb4a:	2b00      	cmp	r3, #0
 801cb4c:	d10b      	bne.n	801cb66 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801cb4e:	4b07      	ldr	r3, [pc, #28]	; (801cb6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cb50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cb54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801cb58:	687b      	ldr	r3, [r7, #4]
 801cb5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cb5c:	4903      	ldr	r1, [pc, #12]	; (801cb6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cb5e:	4313      	orrs	r3, r2
 801cb60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801cb64:	e008      	b.n	801cb78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801cb66:	7cfb      	ldrb	r3, [r7, #19]
 801cb68:	74bb      	strb	r3, [r7, #18]
 801cb6a:	e005      	b.n	801cb78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 801cb6c:	40021000 	.word	0x40021000
 801cb70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cb74:	7cfb      	ldrb	r3, [r7, #19]
 801cb76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801cb78:	7c7b      	ldrb	r3, [r7, #17]
 801cb7a:	2b01      	cmp	r3, #1
 801cb7c:	d105      	bne.n	801cb8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801cb7e:	4ba7      	ldr	r3, [pc, #668]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cb80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cb82:	4aa6      	ldr	r2, [pc, #664]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cb84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801cb88:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801cb8a:	687b      	ldr	r3, [r7, #4]
 801cb8c:	681b      	ldr	r3, [r3, #0]
 801cb8e:	f003 0301 	and.w	r3, r3, #1
 801cb92:	2b00      	cmp	r3, #0
 801cb94:	d00a      	beq.n	801cbac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801cb96:	4ba1      	ldr	r3, [pc, #644]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cb98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cb9c:	f023 0203 	bic.w	r2, r3, #3
 801cba0:	687b      	ldr	r3, [r7, #4]
 801cba2:	685b      	ldr	r3, [r3, #4]
 801cba4:	499d      	ldr	r1, [pc, #628]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cba6:	4313      	orrs	r3, r2
 801cba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801cbac:	687b      	ldr	r3, [r7, #4]
 801cbae:	681b      	ldr	r3, [r3, #0]
 801cbb0:	f003 0302 	and.w	r3, r3, #2
 801cbb4:	2b00      	cmp	r3, #0
 801cbb6:	d00a      	beq.n	801cbce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801cbb8:	4b98      	ldr	r3, [pc, #608]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cbba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cbbe:	f023 020c 	bic.w	r2, r3, #12
 801cbc2:	687b      	ldr	r3, [r7, #4]
 801cbc4:	689b      	ldr	r3, [r3, #8]
 801cbc6:	4995      	ldr	r1, [pc, #596]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cbc8:	4313      	orrs	r3, r2
 801cbca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801cbce:	687b      	ldr	r3, [r7, #4]
 801cbd0:	681b      	ldr	r3, [r3, #0]
 801cbd2:	f003 0304 	and.w	r3, r3, #4
 801cbd6:	2b00      	cmp	r3, #0
 801cbd8:	d00a      	beq.n	801cbf0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801cbda:	4b90      	ldr	r3, [pc, #576]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cbdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cbe0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801cbe4:	687b      	ldr	r3, [r7, #4]
 801cbe6:	68db      	ldr	r3, [r3, #12]
 801cbe8:	498c      	ldr	r1, [pc, #560]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cbea:	4313      	orrs	r3, r2
 801cbec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801cbf0:	687b      	ldr	r3, [r7, #4]
 801cbf2:	681b      	ldr	r3, [r3, #0]
 801cbf4:	f003 0308 	and.w	r3, r3, #8
 801cbf8:	2b00      	cmp	r3, #0
 801cbfa:	d00a      	beq.n	801cc12 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801cbfc:	4b87      	ldr	r3, [pc, #540]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cbfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cc02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801cc06:	687b      	ldr	r3, [r7, #4]
 801cc08:	691b      	ldr	r3, [r3, #16]
 801cc0a:	4984      	ldr	r1, [pc, #528]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cc0c:	4313      	orrs	r3, r2
 801cc0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801cc12:	687b      	ldr	r3, [r7, #4]
 801cc14:	681b      	ldr	r3, [r3, #0]
 801cc16:	f003 0310 	and.w	r3, r3, #16
 801cc1a:	2b00      	cmp	r3, #0
 801cc1c:	d00a      	beq.n	801cc34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801cc1e:	4b7f      	ldr	r3, [pc, #508]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cc20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cc24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801cc28:	687b      	ldr	r3, [r7, #4]
 801cc2a:	695b      	ldr	r3, [r3, #20]
 801cc2c:	497b      	ldr	r1, [pc, #492]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cc2e:	4313      	orrs	r3, r2
 801cc30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	681b      	ldr	r3, [r3, #0]
 801cc38:	f003 0320 	and.w	r3, r3, #32
 801cc3c:	2b00      	cmp	r3, #0
 801cc3e:	d00a      	beq.n	801cc56 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801cc40:	4b76      	ldr	r3, [pc, #472]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cc42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cc46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801cc4a:	687b      	ldr	r3, [r7, #4]
 801cc4c:	699b      	ldr	r3, [r3, #24]
 801cc4e:	4973      	ldr	r1, [pc, #460]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cc50:	4313      	orrs	r3, r2
 801cc52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801cc56:	687b      	ldr	r3, [r7, #4]
 801cc58:	681b      	ldr	r3, [r3, #0]
 801cc5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cc5e:	2b00      	cmp	r3, #0
 801cc60:	d00a      	beq.n	801cc78 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801cc62:	4b6e      	ldr	r3, [pc, #440]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cc64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cc68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801cc6c:	687b      	ldr	r3, [r7, #4]
 801cc6e:	69db      	ldr	r3, [r3, #28]
 801cc70:	496a      	ldr	r1, [pc, #424]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cc72:	4313      	orrs	r3, r2
 801cc74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801cc78:	687b      	ldr	r3, [r7, #4]
 801cc7a:	681b      	ldr	r3, [r3, #0]
 801cc7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cc80:	2b00      	cmp	r3, #0
 801cc82:	d00a      	beq.n	801cc9a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801cc84:	4b65      	ldr	r3, [pc, #404]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cc86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cc8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801cc8e:	687b      	ldr	r3, [r7, #4]
 801cc90:	6a1b      	ldr	r3, [r3, #32]
 801cc92:	4962      	ldr	r1, [pc, #392]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cc94:	4313      	orrs	r3, r2
 801cc96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801cc9a:	687b      	ldr	r3, [r7, #4]
 801cc9c:	681b      	ldr	r3, [r3, #0]
 801cc9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	d00a      	beq.n	801ccbc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801cca6:	4b5d      	ldr	r3, [pc, #372]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ccac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801ccb0:	687b      	ldr	r3, [r7, #4]
 801ccb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ccb4:	4959      	ldr	r1, [pc, #356]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ccb6:	4313      	orrs	r3, r2
 801ccb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801ccbc:	687b      	ldr	r3, [r7, #4]
 801ccbe:	681b      	ldr	r3, [r3, #0]
 801ccc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801ccc4:	2b00      	cmp	r3, #0
 801ccc6:	d00a      	beq.n	801ccde <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801ccc8:	4b54      	ldr	r3, [pc, #336]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ccca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ccce:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801ccd2:	687b      	ldr	r3, [r7, #4]
 801ccd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ccd6:	4951      	ldr	r1, [pc, #324]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ccd8:	4313      	orrs	r3, r2
 801ccda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801ccde:	687b      	ldr	r3, [r7, #4]
 801cce0:	681b      	ldr	r3, [r3, #0]
 801cce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cce6:	2b00      	cmp	r3, #0
 801cce8:	d015      	beq.n	801cd16 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801ccea:	4b4c      	ldr	r3, [pc, #304]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ccec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ccf0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801ccf4:	687b      	ldr	r3, [r7, #4]
 801ccf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ccf8:	4948      	ldr	r1, [pc, #288]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ccfa:	4313      	orrs	r3, r2
 801ccfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 801cd00:	687b      	ldr	r3, [r7, #4]
 801cd02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cd04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801cd08:	d105      	bne.n	801cd16 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801cd0a:	4b44      	ldr	r3, [pc, #272]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cd0c:	68db      	ldr	r3, [r3, #12]
 801cd0e:	4a43      	ldr	r2, [pc, #268]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cd10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cd14:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 801cd16:	687b      	ldr	r3, [r7, #4]
 801cd18:	681b      	ldr	r3, [r3, #0]
 801cd1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801cd1e:	2b00      	cmp	r3, #0
 801cd20:	d015      	beq.n	801cd4e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801cd22:	4b3e      	ldr	r3, [pc, #248]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cd24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cd28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801cd2c:	687b      	ldr	r3, [r7, #4]
 801cd2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cd30:	493a      	ldr	r1, [pc, #232]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cd32:	4313      	orrs	r3, r2
 801cd34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 801cd38:	687b      	ldr	r3, [r7, #4]
 801cd3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cd3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801cd40:	d105      	bne.n	801cd4e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801cd42:	4b36      	ldr	r3, [pc, #216]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cd44:	68db      	ldr	r3, [r3, #12]
 801cd46:	4a35      	ldr	r2, [pc, #212]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cd48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cd4c:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801cd4e:	687b      	ldr	r3, [r7, #4]
 801cd50:	681b      	ldr	r3, [r3, #0]
 801cd52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801cd56:	2b00      	cmp	r3, #0
 801cd58:	d015      	beq.n	801cd86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801cd5a:	4b30      	ldr	r3, [pc, #192]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cd5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cd60:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801cd64:	687b      	ldr	r3, [r7, #4]
 801cd66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cd68:	492c      	ldr	r1, [pc, #176]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cd6a:	4313      	orrs	r3, r2
 801cd6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 801cd70:	687b      	ldr	r3, [r7, #4]
 801cd72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cd74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801cd78:	d105      	bne.n	801cd86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801cd7a:	4b28      	ldr	r3, [pc, #160]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cd7c:	68db      	ldr	r3, [r3, #12]
 801cd7e:	4a27      	ldr	r2, [pc, #156]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cd80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cd84:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801cd86:	687b      	ldr	r3, [r7, #4]
 801cd88:	681b      	ldr	r3, [r3, #0]
 801cd8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801cd8e:	2b00      	cmp	r3, #0
 801cd90:	d015      	beq.n	801cdbe <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801cd92:	4b22      	ldr	r3, [pc, #136]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cd94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cd98:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801cd9c:	687b      	ldr	r3, [r7, #4]
 801cd9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cda0:	491e      	ldr	r1, [pc, #120]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cda2:	4313      	orrs	r3, r2
 801cda4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cdac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801cdb0:	d105      	bne.n	801cdbe <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801cdb2:	4b1a      	ldr	r3, [pc, #104]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cdb4:	68db      	ldr	r3, [r3, #12]
 801cdb6:	4a19      	ldr	r2, [pc, #100]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cdb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cdbc:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801cdbe:	687b      	ldr	r3, [r7, #4]
 801cdc0:	681b      	ldr	r3, [r3, #0]
 801cdc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801cdc6:	2b00      	cmp	r3, #0
 801cdc8:	d015      	beq.n	801cdf6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801cdca:	4b14      	ldr	r3, [pc, #80]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cdcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cdd0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801cdd4:	687b      	ldr	r3, [r7, #4]
 801cdd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cdd8:	4910      	ldr	r1, [pc, #64]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cdda:	4313      	orrs	r3, r2
 801cddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801cde0:	687b      	ldr	r3, [r7, #4]
 801cde2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cde4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801cde8:	d105      	bne.n	801cdf6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801cdea:	4b0c      	ldr	r3, [pc, #48]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cdec:	68db      	ldr	r3, [r3, #12]
 801cdee:	4a0b      	ldr	r2, [pc, #44]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cdf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cdf4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 801cdf6:	687b      	ldr	r3, [r7, #4]
 801cdf8:	681b      	ldr	r3, [r3, #0]
 801cdfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	d018      	beq.n	801ce34 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 801ce02:	4b06      	ldr	r3, [pc, #24]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ce08:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801ce0c:	687b      	ldr	r3, [r7, #4]
 801ce0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ce10:	4902      	ldr	r1, [pc, #8]	; (801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce12:	4313      	orrs	r3, r2
 801ce14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 801ce18:	687b      	ldr	r3, [r7, #4]
 801ce1a:	e001      	b.n	801ce20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 801ce1c:	40021000 	.word	0x40021000
 801ce20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ce22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801ce26:	d105      	bne.n	801ce34 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801ce28:	4b21      	ldr	r3, [pc, #132]	; (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801ce2a:	68db      	ldr	r3, [r3, #12]
 801ce2c:	4a20      	ldr	r2, [pc, #128]	; (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801ce2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ce32:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 801ce34:	687b      	ldr	r3, [r7, #4]
 801ce36:	681b      	ldr	r3, [r3, #0]
 801ce38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801ce3c:	2b00      	cmp	r3, #0
 801ce3e:	d015      	beq.n	801ce6c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 801ce40:	4b1b      	ldr	r3, [pc, #108]	; (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801ce42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ce46:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 801ce4a:	687b      	ldr	r3, [r7, #4]
 801ce4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ce4e:	4918      	ldr	r1, [pc, #96]	; (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801ce50:	4313      	orrs	r3, r2
 801ce52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 801ce56:	687b      	ldr	r3, [r7, #4]
 801ce58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ce5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ce5e:	d105      	bne.n	801ce6c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801ce60:	4b13      	ldr	r3, [pc, #76]	; (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801ce62:	68db      	ldr	r3, [r3, #12]
 801ce64:	4a12      	ldr	r2, [pc, #72]	; (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801ce66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ce6a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	681b      	ldr	r3, [r3, #0]
 801ce70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801ce74:	2b00      	cmp	r3, #0
 801ce76:	d015      	beq.n	801cea4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801ce78:	4b0d      	ldr	r3, [pc, #52]	; (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801ce7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801ce7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801ce82:	687b      	ldr	r3, [r7, #4]
 801ce84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ce86:	490a      	ldr	r1, [pc, #40]	; (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801ce88:	4313      	orrs	r3, r2
 801ce8a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 801ce8e:	687b      	ldr	r3, [r7, #4]
 801ce90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ce92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801ce96:	d105      	bne.n	801cea4 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801ce98:	4b05      	ldr	r3, [pc, #20]	; (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801ce9a:	68db      	ldr	r3, [r3, #12]
 801ce9c:	4a04      	ldr	r2, [pc, #16]	; (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801ce9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cea2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 801cea4:	7cbb      	ldrb	r3, [r7, #18]
}
 801cea6:	4618      	mov	r0, r3
 801cea8:	3718      	adds	r7, #24
 801ceaa:	46bd      	mov	sp, r7
 801ceac:	bd80      	pop	{r7, pc}
 801ceae:	bf00      	nop
 801ceb0:	40021000 	.word	0x40021000

0801ceb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801ceb4:	b580      	push	{r7, lr}
 801ceb6:	b084      	sub	sp, #16
 801ceb8:	af00      	add	r7, sp, #0
 801ceba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801cebc:	687b      	ldr	r3, [r7, #4]
 801cebe:	2b00      	cmp	r3, #0
 801cec0:	d101      	bne.n	801cec6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801cec2:	2301      	movs	r3, #1
 801cec4:	e09d      	b.n	801d002 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801cec6:	687b      	ldr	r3, [r7, #4]
 801cec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ceca:	2b00      	cmp	r3, #0
 801cecc:	d108      	bne.n	801cee0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801cece:	687b      	ldr	r3, [r7, #4]
 801ced0:	685b      	ldr	r3, [r3, #4]
 801ced2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ced6:	d009      	beq.n	801ceec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801ced8:	687b      	ldr	r3, [r7, #4]
 801ceda:	2200      	movs	r2, #0
 801cedc:	61da      	str	r2, [r3, #28]
 801cede:	e005      	b.n	801ceec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	2200      	movs	r2, #0
 801cee4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801cee6:	687b      	ldr	r3, [r7, #4]
 801cee8:	2200      	movs	r2, #0
 801ceea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801ceec:	687b      	ldr	r3, [r7, #4]
 801ceee:	2200      	movs	r2, #0
 801cef0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801cef2:	687b      	ldr	r3, [r7, #4]
 801cef4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801cef8:	b2db      	uxtb	r3, r3
 801cefa:	2b00      	cmp	r3, #0
 801cefc:	d106      	bne.n	801cf0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801cefe:	687b      	ldr	r3, [r7, #4]
 801cf00:	2200      	movs	r2, #0
 801cf02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801cf06:	6878      	ldr	r0, [r7, #4]
 801cf08:	f7fa f8f4 	bl	80170f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801cf0c:	687b      	ldr	r3, [r7, #4]
 801cf0e:	2202      	movs	r2, #2
 801cf10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801cf14:	687b      	ldr	r3, [r7, #4]
 801cf16:	681b      	ldr	r3, [r3, #0]
 801cf18:	681a      	ldr	r2, [r3, #0]
 801cf1a:	687b      	ldr	r3, [r7, #4]
 801cf1c:	681b      	ldr	r3, [r3, #0]
 801cf1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cf22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801cf24:	687b      	ldr	r3, [r7, #4]
 801cf26:	68db      	ldr	r3, [r3, #12]
 801cf28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801cf2c:	d902      	bls.n	801cf34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801cf2e:	2300      	movs	r3, #0
 801cf30:	60fb      	str	r3, [r7, #12]
 801cf32:	e002      	b.n	801cf3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801cf34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801cf38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801cf3a:	687b      	ldr	r3, [r7, #4]
 801cf3c:	68db      	ldr	r3, [r3, #12]
 801cf3e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801cf42:	d007      	beq.n	801cf54 <HAL_SPI_Init+0xa0>
 801cf44:	687b      	ldr	r3, [r7, #4]
 801cf46:	68db      	ldr	r3, [r3, #12]
 801cf48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801cf4c:	d002      	beq.n	801cf54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801cf4e:	687b      	ldr	r3, [r7, #4]
 801cf50:	2200      	movs	r2, #0
 801cf52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801cf54:	687b      	ldr	r3, [r7, #4]
 801cf56:	685b      	ldr	r3, [r3, #4]
 801cf58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801cf5c:	687b      	ldr	r3, [r7, #4]
 801cf5e:	689b      	ldr	r3, [r3, #8]
 801cf60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801cf64:	431a      	orrs	r2, r3
 801cf66:	687b      	ldr	r3, [r7, #4]
 801cf68:	691b      	ldr	r3, [r3, #16]
 801cf6a:	f003 0302 	and.w	r3, r3, #2
 801cf6e:	431a      	orrs	r2, r3
 801cf70:	687b      	ldr	r3, [r7, #4]
 801cf72:	695b      	ldr	r3, [r3, #20]
 801cf74:	f003 0301 	and.w	r3, r3, #1
 801cf78:	431a      	orrs	r2, r3
 801cf7a:	687b      	ldr	r3, [r7, #4]
 801cf7c:	699b      	ldr	r3, [r3, #24]
 801cf7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801cf82:	431a      	orrs	r2, r3
 801cf84:	687b      	ldr	r3, [r7, #4]
 801cf86:	69db      	ldr	r3, [r3, #28]
 801cf88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801cf8c:	431a      	orrs	r2, r3
 801cf8e:	687b      	ldr	r3, [r7, #4]
 801cf90:	6a1b      	ldr	r3, [r3, #32]
 801cf92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cf96:	ea42 0103 	orr.w	r1, r2, r3
 801cf9a:	687b      	ldr	r3, [r7, #4]
 801cf9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf9e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801cfa2:	687b      	ldr	r3, [r7, #4]
 801cfa4:	681b      	ldr	r3, [r3, #0]
 801cfa6:	430a      	orrs	r2, r1
 801cfa8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801cfaa:	687b      	ldr	r3, [r7, #4]
 801cfac:	699b      	ldr	r3, [r3, #24]
 801cfae:	0c1b      	lsrs	r3, r3, #16
 801cfb0:	f003 0204 	and.w	r2, r3, #4
 801cfb4:	687b      	ldr	r3, [r7, #4]
 801cfb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cfb8:	f003 0310 	and.w	r3, r3, #16
 801cfbc:	431a      	orrs	r2, r3
 801cfbe:	687b      	ldr	r3, [r7, #4]
 801cfc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cfc2:	f003 0308 	and.w	r3, r3, #8
 801cfc6:	431a      	orrs	r2, r3
 801cfc8:	687b      	ldr	r3, [r7, #4]
 801cfca:	68db      	ldr	r3, [r3, #12]
 801cfcc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801cfd0:	ea42 0103 	orr.w	r1, r2, r3
 801cfd4:	68fb      	ldr	r3, [r7, #12]
 801cfd6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801cfda:	687b      	ldr	r3, [r7, #4]
 801cfdc:	681b      	ldr	r3, [r3, #0]
 801cfde:	430a      	orrs	r2, r1
 801cfe0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801cfe2:	687b      	ldr	r3, [r7, #4]
 801cfe4:	681b      	ldr	r3, [r3, #0]
 801cfe6:	69da      	ldr	r2, [r3, #28]
 801cfe8:	687b      	ldr	r3, [r7, #4]
 801cfea:	681b      	ldr	r3, [r3, #0]
 801cfec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801cff0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801cff2:	687b      	ldr	r3, [r7, #4]
 801cff4:	2200      	movs	r2, #0
 801cff6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801cff8:	687b      	ldr	r3, [r7, #4]
 801cffa:	2201      	movs	r2, #1
 801cffc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801d000:	2300      	movs	r3, #0
}
 801d002:	4618      	mov	r0, r3
 801d004:	3710      	adds	r7, #16
 801d006:	46bd      	mov	sp, r7
 801d008:	bd80      	pop	{r7, pc}

0801d00a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801d00a:	b580      	push	{r7, lr}
 801d00c:	b088      	sub	sp, #32
 801d00e:	af00      	add	r7, sp, #0
 801d010:	60f8      	str	r0, [r7, #12]
 801d012:	60b9      	str	r1, [r7, #8]
 801d014:	603b      	str	r3, [r7, #0]
 801d016:	4613      	mov	r3, r2
 801d018:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801d01a:	2300      	movs	r3, #0
 801d01c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801d01e:	68fb      	ldr	r3, [r7, #12]
 801d020:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801d024:	2b01      	cmp	r3, #1
 801d026:	d101      	bne.n	801d02c <HAL_SPI_Transmit+0x22>
 801d028:	2302      	movs	r3, #2
 801d02a:	e158      	b.n	801d2de <HAL_SPI_Transmit+0x2d4>
 801d02c:	68fb      	ldr	r3, [r7, #12]
 801d02e:	2201      	movs	r2, #1
 801d030:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801d034:	f7fb fd3e 	bl	8018ab4 <HAL_GetTick>
 801d038:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801d03a:	88fb      	ldrh	r3, [r7, #6]
 801d03c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801d03e:	68fb      	ldr	r3, [r7, #12]
 801d040:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d044:	b2db      	uxtb	r3, r3
 801d046:	2b01      	cmp	r3, #1
 801d048:	d002      	beq.n	801d050 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801d04a:	2302      	movs	r3, #2
 801d04c:	77fb      	strb	r3, [r7, #31]
    goto error;
 801d04e:	e13d      	b.n	801d2cc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801d050:	68bb      	ldr	r3, [r7, #8]
 801d052:	2b00      	cmp	r3, #0
 801d054:	d002      	beq.n	801d05c <HAL_SPI_Transmit+0x52>
 801d056:	88fb      	ldrh	r3, [r7, #6]
 801d058:	2b00      	cmp	r3, #0
 801d05a:	d102      	bne.n	801d062 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801d05c:	2301      	movs	r3, #1
 801d05e:	77fb      	strb	r3, [r7, #31]
    goto error;
 801d060:	e134      	b.n	801d2cc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801d062:	68fb      	ldr	r3, [r7, #12]
 801d064:	2203      	movs	r2, #3
 801d066:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801d06a:	68fb      	ldr	r3, [r7, #12]
 801d06c:	2200      	movs	r2, #0
 801d06e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801d070:	68fb      	ldr	r3, [r7, #12]
 801d072:	68ba      	ldr	r2, [r7, #8]
 801d074:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801d076:	68fb      	ldr	r3, [r7, #12]
 801d078:	88fa      	ldrh	r2, [r7, #6]
 801d07a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801d07c:	68fb      	ldr	r3, [r7, #12]
 801d07e:	88fa      	ldrh	r2, [r7, #6]
 801d080:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801d082:	68fb      	ldr	r3, [r7, #12]
 801d084:	2200      	movs	r2, #0
 801d086:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801d088:	68fb      	ldr	r3, [r7, #12]
 801d08a:	2200      	movs	r2, #0
 801d08c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801d090:	68fb      	ldr	r3, [r7, #12]
 801d092:	2200      	movs	r2, #0
 801d094:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801d098:	68fb      	ldr	r3, [r7, #12]
 801d09a:	2200      	movs	r2, #0
 801d09c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801d09e:	68fb      	ldr	r3, [r7, #12]
 801d0a0:	2200      	movs	r2, #0
 801d0a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d0a4:	68fb      	ldr	r3, [r7, #12]
 801d0a6:	689b      	ldr	r3, [r3, #8]
 801d0a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d0ac:	d10f      	bne.n	801d0ce <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801d0ae:	68fb      	ldr	r3, [r7, #12]
 801d0b0:	681b      	ldr	r3, [r3, #0]
 801d0b2:	681a      	ldr	r2, [r3, #0]
 801d0b4:	68fb      	ldr	r3, [r7, #12]
 801d0b6:	681b      	ldr	r3, [r3, #0]
 801d0b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d0bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801d0be:	68fb      	ldr	r3, [r7, #12]
 801d0c0:	681b      	ldr	r3, [r3, #0]
 801d0c2:	681a      	ldr	r2, [r3, #0]
 801d0c4:	68fb      	ldr	r3, [r7, #12]
 801d0c6:	681b      	ldr	r3, [r3, #0]
 801d0c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801d0cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801d0ce:	68fb      	ldr	r3, [r7, #12]
 801d0d0:	681b      	ldr	r3, [r3, #0]
 801d0d2:	681b      	ldr	r3, [r3, #0]
 801d0d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d0d8:	2b40      	cmp	r3, #64	; 0x40
 801d0da:	d007      	beq.n	801d0ec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801d0dc:	68fb      	ldr	r3, [r7, #12]
 801d0de:	681b      	ldr	r3, [r3, #0]
 801d0e0:	681a      	ldr	r2, [r3, #0]
 801d0e2:	68fb      	ldr	r3, [r7, #12]
 801d0e4:	681b      	ldr	r3, [r3, #0]
 801d0e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801d0ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d0ec:	68fb      	ldr	r3, [r7, #12]
 801d0ee:	68db      	ldr	r3, [r3, #12]
 801d0f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d0f4:	d94b      	bls.n	801d18e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801d0f6:	68fb      	ldr	r3, [r7, #12]
 801d0f8:	685b      	ldr	r3, [r3, #4]
 801d0fa:	2b00      	cmp	r3, #0
 801d0fc:	d002      	beq.n	801d104 <HAL_SPI_Transmit+0xfa>
 801d0fe:	8afb      	ldrh	r3, [r7, #22]
 801d100:	2b01      	cmp	r3, #1
 801d102:	d13e      	bne.n	801d182 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d104:	68fb      	ldr	r3, [r7, #12]
 801d106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d108:	881a      	ldrh	r2, [r3, #0]
 801d10a:	68fb      	ldr	r3, [r7, #12]
 801d10c:	681b      	ldr	r3, [r3, #0]
 801d10e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801d110:	68fb      	ldr	r3, [r7, #12]
 801d112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d114:	1c9a      	adds	r2, r3, #2
 801d116:	68fb      	ldr	r3, [r7, #12]
 801d118:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801d11a:	68fb      	ldr	r3, [r7, #12]
 801d11c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d11e:	b29b      	uxth	r3, r3
 801d120:	3b01      	subs	r3, #1
 801d122:	b29a      	uxth	r2, r3
 801d124:	68fb      	ldr	r3, [r7, #12]
 801d126:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801d128:	e02b      	b.n	801d182 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801d12a:	68fb      	ldr	r3, [r7, #12]
 801d12c:	681b      	ldr	r3, [r3, #0]
 801d12e:	689b      	ldr	r3, [r3, #8]
 801d130:	f003 0302 	and.w	r3, r3, #2
 801d134:	2b02      	cmp	r3, #2
 801d136:	d112      	bne.n	801d15e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d138:	68fb      	ldr	r3, [r7, #12]
 801d13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d13c:	881a      	ldrh	r2, [r3, #0]
 801d13e:	68fb      	ldr	r3, [r7, #12]
 801d140:	681b      	ldr	r3, [r3, #0]
 801d142:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801d144:	68fb      	ldr	r3, [r7, #12]
 801d146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d148:	1c9a      	adds	r2, r3, #2
 801d14a:	68fb      	ldr	r3, [r7, #12]
 801d14c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801d14e:	68fb      	ldr	r3, [r7, #12]
 801d150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d152:	b29b      	uxth	r3, r3
 801d154:	3b01      	subs	r3, #1
 801d156:	b29a      	uxth	r2, r3
 801d158:	68fb      	ldr	r3, [r7, #12]
 801d15a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d15c:	e011      	b.n	801d182 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d15e:	f7fb fca9 	bl	8018ab4 <HAL_GetTick>
 801d162:	4602      	mov	r2, r0
 801d164:	69bb      	ldr	r3, [r7, #24]
 801d166:	1ad3      	subs	r3, r2, r3
 801d168:	683a      	ldr	r2, [r7, #0]
 801d16a:	429a      	cmp	r2, r3
 801d16c:	d803      	bhi.n	801d176 <HAL_SPI_Transmit+0x16c>
 801d16e:	683b      	ldr	r3, [r7, #0]
 801d170:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d174:	d102      	bne.n	801d17c <HAL_SPI_Transmit+0x172>
 801d176:	683b      	ldr	r3, [r7, #0]
 801d178:	2b00      	cmp	r3, #0
 801d17a:	d102      	bne.n	801d182 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801d17c:	2303      	movs	r3, #3
 801d17e:	77fb      	strb	r3, [r7, #31]
          goto error;
 801d180:	e0a4      	b.n	801d2cc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801d182:	68fb      	ldr	r3, [r7, #12]
 801d184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d186:	b29b      	uxth	r3, r3
 801d188:	2b00      	cmp	r3, #0
 801d18a:	d1ce      	bne.n	801d12a <HAL_SPI_Transmit+0x120>
 801d18c:	e07c      	b.n	801d288 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801d18e:	68fb      	ldr	r3, [r7, #12]
 801d190:	685b      	ldr	r3, [r3, #4]
 801d192:	2b00      	cmp	r3, #0
 801d194:	d002      	beq.n	801d19c <HAL_SPI_Transmit+0x192>
 801d196:	8afb      	ldrh	r3, [r7, #22]
 801d198:	2b01      	cmp	r3, #1
 801d19a:	d170      	bne.n	801d27e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801d19c:	68fb      	ldr	r3, [r7, #12]
 801d19e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d1a0:	b29b      	uxth	r3, r3
 801d1a2:	2b01      	cmp	r3, #1
 801d1a4:	d912      	bls.n	801d1cc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d1a6:	68fb      	ldr	r3, [r7, #12]
 801d1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d1aa:	881a      	ldrh	r2, [r3, #0]
 801d1ac:	68fb      	ldr	r3, [r7, #12]
 801d1ae:	681b      	ldr	r3, [r3, #0]
 801d1b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801d1b2:	68fb      	ldr	r3, [r7, #12]
 801d1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d1b6:	1c9a      	adds	r2, r3, #2
 801d1b8:	68fb      	ldr	r3, [r7, #12]
 801d1ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801d1bc:	68fb      	ldr	r3, [r7, #12]
 801d1be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d1c0:	b29b      	uxth	r3, r3
 801d1c2:	3b02      	subs	r3, #2
 801d1c4:	b29a      	uxth	r2, r3
 801d1c6:	68fb      	ldr	r3, [r7, #12]
 801d1c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d1ca:	e058      	b.n	801d27e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801d1cc:	68fb      	ldr	r3, [r7, #12]
 801d1ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d1d0:	68fb      	ldr	r3, [r7, #12]
 801d1d2:	681b      	ldr	r3, [r3, #0]
 801d1d4:	330c      	adds	r3, #12
 801d1d6:	7812      	ldrb	r2, [r2, #0]
 801d1d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801d1da:	68fb      	ldr	r3, [r7, #12]
 801d1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d1de:	1c5a      	adds	r2, r3, #1
 801d1e0:	68fb      	ldr	r3, [r7, #12]
 801d1e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801d1e4:	68fb      	ldr	r3, [r7, #12]
 801d1e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d1e8:	b29b      	uxth	r3, r3
 801d1ea:	3b01      	subs	r3, #1
 801d1ec:	b29a      	uxth	r2, r3
 801d1ee:	68fb      	ldr	r3, [r7, #12]
 801d1f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801d1f2:	e044      	b.n	801d27e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801d1f4:	68fb      	ldr	r3, [r7, #12]
 801d1f6:	681b      	ldr	r3, [r3, #0]
 801d1f8:	689b      	ldr	r3, [r3, #8]
 801d1fa:	f003 0302 	and.w	r3, r3, #2
 801d1fe:	2b02      	cmp	r3, #2
 801d200:	d12b      	bne.n	801d25a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801d202:	68fb      	ldr	r3, [r7, #12]
 801d204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d206:	b29b      	uxth	r3, r3
 801d208:	2b01      	cmp	r3, #1
 801d20a:	d912      	bls.n	801d232 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d20c:	68fb      	ldr	r3, [r7, #12]
 801d20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d210:	881a      	ldrh	r2, [r3, #0]
 801d212:	68fb      	ldr	r3, [r7, #12]
 801d214:	681b      	ldr	r3, [r3, #0]
 801d216:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801d218:	68fb      	ldr	r3, [r7, #12]
 801d21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d21c:	1c9a      	adds	r2, r3, #2
 801d21e:	68fb      	ldr	r3, [r7, #12]
 801d220:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801d222:	68fb      	ldr	r3, [r7, #12]
 801d224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d226:	b29b      	uxth	r3, r3
 801d228:	3b02      	subs	r3, #2
 801d22a:	b29a      	uxth	r2, r3
 801d22c:	68fb      	ldr	r3, [r7, #12]
 801d22e:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d230:	e025      	b.n	801d27e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801d232:	68fb      	ldr	r3, [r7, #12]
 801d234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d236:	68fb      	ldr	r3, [r7, #12]
 801d238:	681b      	ldr	r3, [r3, #0]
 801d23a:	330c      	adds	r3, #12
 801d23c:	7812      	ldrb	r2, [r2, #0]
 801d23e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801d240:	68fb      	ldr	r3, [r7, #12]
 801d242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d244:	1c5a      	adds	r2, r3, #1
 801d246:	68fb      	ldr	r3, [r7, #12]
 801d248:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801d24a:	68fb      	ldr	r3, [r7, #12]
 801d24c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d24e:	b29b      	uxth	r3, r3
 801d250:	3b01      	subs	r3, #1
 801d252:	b29a      	uxth	r2, r3
 801d254:	68fb      	ldr	r3, [r7, #12]
 801d256:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d258:	e011      	b.n	801d27e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d25a:	f7fb fc2b 	bl	8018ab4 <HAL_GetTick>
 801d25e:	4602      	mov	r2, r0
 801d260:	69bb      	ldr	r3, [r7, #24]
 801d262:	1ad3      	subs	r3, r2, r3
 801d264:	683a      	ldr	r2, [r7, #0]
 801d266:	429a      	cmp	r2, r3
 801d268:	d803      	bhi.n	801d272 <HAL_SPI_Transmit+0x268>
 801d26a:	683b      	ldr	r3, [r7, #0]
 801d26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d270:	d102      	bne.n	801d278 <HAL_SPI_Transmit+0x26e>
 801d272:	683b      	ldr	r3, [r7, #0]
 801d274:	2b00      	cmp	r3, #0
 801d276:	d102      	bne.n	801d27e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801d278:	2303      	movs	r3, #3
 801d27a:	77fb      	strb	r3, [r7, #31]
          goto error;
 801d27c:	e026      	b.n	801d2cc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801d27e:	68fb      	ldr	r3, [r7, #12]
 801d280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d282:	b29b      	uxth	r3, r3
 801d284:	2b00      	cmp	r3, #0
 801d286:	d1b5      	bne.n	801d1f4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801d288:	69ba      	ldr	r2, [r7, #24]
 801d28a:	6839      	ldr	r1, [r7, #0]
 801d28c:	68f8      	ldr	r0, [r7, #12]
 801d28e:	f000 fce3 	bl	801dc58 <SPI_EndRxTxTransaction>
 801d292:	4603      	mov	r3, r0
 801d294:	2b00      	cmp	r3, #0
 801d296:	d002      	beq.n	801d29e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801d298:	68fb      	ldr	r3, [r7, #12]
 801d29a:	2220      	movs	r2, #32
 801d29c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801d29e:	68fb      	ldr	r3, [r7, #12]
 801d2a0:	689b      	ldr	r3, [r3, #8]
 801d2a2:	2b00      	cmp	r3, #0
 801d2a4:	d10a      	bne.n	801d2bc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801d2a6:	2300      	movs	r3, #0
 801d2a8:	613b      	str	r3, [r7, #16]
 801d2aa:	68fb      	ldr	r3, [r7, #12]
 801d2ac:	681b      	ldr	r3, [r3, #0]
 801d2ae:	68db      	ldr	r3, [r3, #12]
 801d2b0:	613b      	str	r3, [r7, #16]
 801d2b2:	68fb      	ldr	r3, [r7, #12]
 801d2b4:	681b      	ldr	r3, [r3, #0]
 801d2b6:	689b      	ldr	r3, [r3, #8]
 801d2b8:	613b      	str	r3, [r7, #16]
 801d2ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801d2bc:	68fb      	ldr	r3, [r7, #12]
 801d2be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d2c0:	2b00      	cmp	r3, #0
 801d2c2:	d002      	beq.n	801d2ca <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801d2c4:	2301      	movs	r3, #1
 801d2c6:	77fb      	strb	r3, [r7, #31]
 801d2c8:	e000      	b.n	801d2cc <HAL_SPI_Transmit+0x2c2>
  }

error:
 801d2ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801d2cc:	68fb      	ldr	r3, [r7, #12]
 801d2ce:	2201      	movs	r2, #1
 801d2d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801d2d4:	68fb      	ldr	r3, [r7, #12]
 801d2d6:	2200      	movs	r2, #0
 801d2d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801d2dc:	7ffb      	ldrb	r3, [r7, #31]
}
 801d2de:	4618      	mov	r0, r3
 801d2e0:	3720      	adds	r7, #32
 801d2e2:	46bd      	mov	sp, r7
 801d2e4:	bd80      	pop	{r7, pc}

0801d2e6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801d2e6:	b580      	push	{r7, lr}
 801d2e8:	b088      	sub	sp, #32
 801d2ea:	af02      	add	r7, sp, #8
 801d2ec:	60f8      	str	r0, [r7, #12]
 801d2ee:	60b9      	str	r1, [r7, #8]
 801d2f0:	603b      	str	r3, [r7, #0]
 801d2f2:	4613      	mov	r3, r2
 801d2f4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801d2f6:	2300      	movs	r3, #0
 801d2f8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801d2fa:	68fb      	ldr	r3, [r7, #12]
 801d2fc:	685b      	ldr	r3, [r3, #4]
 801d2fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d302:	d112      	bne.n	801d32a <HAL_SPI_Receive+0x44>
 801d304:	68fb      	ldr	r3, [r7, #12]
 801d306:	689b      	ldr	r3, [r3, #8]
 801d308:	2b00      	cmp	r3, #0
 801d30a:	d10e      	bne.n	801d32a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801d30c:	68fb      	ldr	r3, [r7, #12]
 801d30e:	2204      	movs	r2, #4
 801d310:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801d314:	88fa      	ldrh	r2, [r7, #6]
 801d316:	683b      	ldr	r3, [r7, #0]
 801d318:	9300      	str	r3, [sp, #0]
 801d31a:	4613      	mov	r3, r2
 801d31c:	68ba      	ldr	r2, [r7, #8]
 801d31e:	68b9      	ldr	r1, [r7, #8]
 801d320:	68f8      	ldr	r0, [r7, #12]
 801d322:	f000 f910 	bl	801d546 <HAL_SPI_TransmitReceive>
 801d326:	4603      	mov	r3, r0
 801d328:	e109      	b.n	801d53e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801d32a:	68fb      	ldr	r3, [r7, #12]
 801d32c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801d330:	2b01      	cmp	r3, #1
 801d332:	d101      	bne.n	801d338 <HAL_SPI_Receive+0x52>
 801d334:	2302      	movs	r3, #2
 801d336:	e102      	b.n	801d53e <HAL_SPI_Receive+0x258>
 801d338:	68fb      	ldr	r3, [r7, #12]
 801d33a:	2201      	movs	r2, #1
 801d33c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801d340:	f7fb fbb8 	bl	8018ab4 <HAL_GetTick>
 801d344:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801d346:	68fb      	ldr	r3, [r7, #12]
 801d348:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d34c:	b2db      	uxtb	r3, r3
 801d34e:	2b01      	cmp	r3, #1
 801d350:	d002      	beq.n	801d358 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801d352:	2302      	movs	r3, #2
 801d354:	75fb      	strb	r3, [r7, #23]
    goto error;
 801d356:	e0e9      	b.n	801d52c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801d358:	68bb      	ldr	r3, [r7, #8]
 801d35a:	2b00      	cmp	r3, #0
 801d35c:	d002      	beq.n	801d364 <HAL_SPI_Receive+0x7e>
 801d35e:	88fb      	ldrh	r3, [r7, #6]
 801d360:	2b00      	cmp	r3, #0
 801d362:	d102      	bne.n	801d36a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801d364:	2301      	movs	r3, #1
 801d366:	75fb      	strb	r3, [r7, #23]
    goto error;
 801d368:	e0e0      	b.n	801d52c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801d36a:	68fb      	ldr	r3, [r7, #12]
 801d36c:	2204      	movs	r2, #4
 801d36e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801d372:	68fb      	ldr	r3, [r7, #12]
 801d374:	2200      	movs	r2, #0
 801d376:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801d378:	68fb      	ldr	r3, [r7, #12]
 801d37a:	68ba      	ldr	r2, [r7, #8]
 801d37c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801d37e:	68fb      	ldr	r3, [r7, #12]
 801d380:	88fa      	ldrh	r2, [r7, #6]
 801d382:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801d386:	68fb      	ldr	r3, [r7, #12]
 801d388:	88fa      	ldrh	r2, [r7, #6]
 801d38a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801d38e:	68fb      	ldr	r3, [r7, #12]
 801d390:	2200      	movs	r2, #0
 801d392:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801d394:	68fb      	ldr	r3, [r7, #12]
 801d396:	2200      	movs	r2, #0
 801d398:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801d39a:	68fb      	ldr	r3, [r7, #12]
 801d39c:	2200      	movs	r2, #0
 801d39e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801d3a0:	68fb      	ldr	r3, [r7, #12]
 801d3a2:	2200      	movs	r2, #0
 801d3a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801d3a6:	68fb      	ldr	r3, [r7, #12]
 801d3a8:	2200      	movs	r2, #0
 801d3aa:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d3ac:	68fb      	ldr	r3, [r7, #12]
 801d3ae:	68db      	ldr	r3, [r3, #12]
 801d3b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d3b4:	d908      	bls.n	801d3c8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d3b6:	68fb      	ldr	r3, [r7, #12]
 801d3b8:	681b      	ldr	r3, [r3, #0]
 801d3ba:	685a      	ldr	r2, [r3, #4]
 801d3bc:	68fb      	ldr	r3, [r7, #12]
 801d3be:	681b      	ldr	r3, [r3, #0]
 801d3c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801d3c4:	605a      	str	r2, [r3, #4]
 801d3c6:	e007      	b.n	801d3d8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d3c8:	68fb      	ldr	r3, [r7, #12]
 801d3ca:	681b      	ldr	r3, [r3, #0]
 801d3cc:	685a      	ldr	r2, [r3, #4]
 801d3ce:	68fb      	ldr	r3, [r7, #12]
 801d3d0:	681b      	ldr	r3, [r3, #0]
 801d3d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801d3d6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d3d8:	68fb      	ldr	r3, [r7, #12]
 801d3da:	689b      	ldr	r3, [r3, #8]
 801d3dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d3e0:	d10f      	bne.n	801d402 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801d3e2:	68fb      	ldr	r3, [r7, #12]
 801d3e4:	681b      	ldr	r3, [r3, #0]
 801d3e6:	681a      	ldr	r2, [r3, #0]
 801d3e8:	68fb      	ldr	r3, [r7, #12]
 801d3ea:	681b      	ldr	r3, [r3, #0]
 801d3ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d3f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801d3f2:	68fb      	ldr	r3, [r7, #12]
 801d3f4:	681b      	ldr	r3, [r3, #0]
 801d3f6:	681a      	ldr	r2, [r3, #0]
 801d3f8:	68fb      	ldr	r3, [r7, #12]
 801d3fa:	681b      	ldr	r3, [r3, #0]
 801d3fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801d400:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801d402:	68fb      	ldr	r3, [r7, #12]
 801d404:	681b      	ldr	r3, [r3, #0]
 801d406:	681b      	ldr	r3, [r3, #0]
 801d408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d40c:	2b40      	cmp	r3, #64	; 0x40
 801d40e:	d007      	beq.n	801d420 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801d410:	68fb      	ldr	r3, [r7, #12]
 801d412:	681b      	ldr	r3, [r3, #0]
 801d414:	681a      	ldr	r2, [r3, #0]
 801d416:	68fb      	ldr	r3, [r7, #12]
 801d418:	681b      	ldr	r3, [r3, #0]
 801d41a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801d41e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801d420:	68fb      	ldr	r3, [r7, #12]
 801d422:	68db      	ldr	r3, [r3, #12]
 801d424:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d428:	d867      	bhi.n	801d4fa <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801d42a:	e030      	b.n	801d48e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801d42c:	68fb      	ldr	r3, [r7, #12]
 801d42e:	681b      	ldr	r3, [r3, #0]
 801d430:	689b      	ldr	r3, [r3, #8]
 801d432:	f003 0301 	and.w	r3, r3, #1
 801d436:	2b01      	cmp	r3, #1
 801d438:	d117      	bne.n	801d46a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801d43a:	68fb      	ldr	r3, [r7, #12]
 801d43c:	681b      	ldr	r3, [r3, #0]
 801d43e:	f103 020c 	add.w	r2, r3, #12
 801d442:	68fb      	ldr	r3, [r7, #12]
 801d444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d446:	7812      	ldrb	r2, [r2, #0]
 801d448:	b2d2      	uxtb	r2, r2
 801d44a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801d44c:	68fb      	ldr	r3, [r7, #12]
 801d44e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d450:	1c5a      	adds	r2, r3, #1
 801d452:	68fb      	ldr	r3, [r7, #12]
 801d454:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801d456:	68fb      	ldr	r3, [r7, #12]
 801d458:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d45c:	b29b      	uxth	r3, r3
 801d45e:	3b01      	subs	r3, #1
 801d460:	b29a      	uxth	r2, r3
 801d462:	68fb      	ldr	r3, [r7, #12]
 801d464:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801d468:	e011      	b.n	801d48e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d46a:	f7fb fb23 	bl	8018ab4 <HAL_GetTick>
 801d46e:	4602      	mov	r2, r0
 801d470:	693b      	ldr	r3, [r7, #16]
 801d472:	1ad3      	subs	r3, r2, r3
 801d474:	683a      	ldr	r2, [r7, #0]
 801d476:	429a      	cmp	r2, r3
 801d478:	d803      	bhi.n	801d482 <HAL_SPI_Receive+0x19c>
 801d47a:	683b      	ldr	r3, [r7, #0]
 801d47c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d480:	d102      	bne.n	801d488 <HAL_SPI_Receive+0x1a2>
 801d482:	683b      	ldr	r3, [r7, #0]
 801d484:	2b00      	cmp	r3, #0
 801d486:	d102      	bne.n	801d48e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801d488:	2303      	movs	r3, #3
 801d48a:	75fb      	strb	r3, [r7, #23]
          goto error;
 801d48c:	e04e      	b.n	801d52c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801d48e:	68fb      	ldr	r3, [r7, #12]
 801d490:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d494:	b29b      	uxth	r3, r3
 801d496:	2b00      	cmp	r3, #0
 801d498:	d1c8      	bne.n	801d42c <HAL_SPI_Receive+0x146>
 801d49a:	e034      	b.n	801d506 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801d49c:	68fb      	ldr	r3, [r7, #12]
 801d49e:	681b      	ldr	r3, [r3, #0]
 801d4a0:	689b      	ldr	r3, [r3, #8]
 801d4a2:	f003 0301 	and.w	r3, r3, #1
 801d4a6:	2b01      	cmp	r3, #1
 801d4a8:	d115      	bne.n	801d4d6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801d4aa:	68fb      	ldr	r3, [r7, #12]
 801d4ac:	681b      	ldr	r3, [r3, #0]
 801d4ae:	68da      	ldr	r2, [r3, #12]
 801d4b0:	68fb      	ldr	r3, [r7, #12]
 801d4b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d4b4:	b292      	uxth	r2, r2
 801d4b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801d4b8:	68fb      	ldr	r3, [r7, #12]
 801d4ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d4bc:	1c9a      	adds	r2, r3, #2
 801d4be:	68fb      	ldr	r3, [r7, #12]
 801d4c0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801d4c2:	68fb      	ldr	r3, [r7, #12]
 801d4c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d4c8:	b29b      	uxth	r3, r3
 801d4ca:	3b01      	subs	r3, #1
 801d4cc:	b29a      	uxth	r2, r3
 801d4ce:	68fb      	ldr	r3, [r7, #12]
 801d4d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801d4d4:	e011      	b.n	801d4fa <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d4d6:	f7fb faed 	bl	8018ab4 <HAL_GetTick>
 801d4da:	4602      	mov	r2, r0
 801d4dc:	693b      	ldr	r3, [r7, #16]
 801d4de:	1ad3      	subs	r3, r2, r3
 801d4e0:	683a      	ldr	r2, [r7, #0]
 801d4e2:	429a      	cmp	r2, r3
 801d4e4:	d803      	bhi.n	801d4ee <HAL_SPI_Receive+0x208>
 801d4e6:	683b      	ldr	r3, [r7, #0]
 801d4e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d4ec:	d102      	bne.n	801d4f4 <HAL_SPI_Receive+0x20e>
 801d4ee:	683b      	ldr	r3, [r7, #0]
 801d4f0:	2b00      	cmp	r3, #0
 801d4f2:	d102      	bne.n	801d4fa <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801d4f4:	2303      	movs	r3, #3
 801d4f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 801d4f8:	e018      	b.n	801d52c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801d4fa:	68fb      	ldr	r3, [r7, #12]
 801d4fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d500:	b29b      	uxth	r3, r3
 801d502:	2b00      	cmp	r3, #0
 801d504:	d1ca      	bne.n	801d49c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801d506:	693a      	ldr	r2, [r7, #16]
 801d508:	6839      	ldr	r1, [r7, #0]
 801d50a:	68f8      	ldr	r0, [r7, #12]
 801d50c:	f000 fb4c 	bl	801dba8 <SPI_EndRxTransaction>
 801d510:	4603      	mov	r3, r0
 801d512:	2b00      	cmp	r3, #0
 801d514:	d002      	beq.n	801d51c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801d516:	68fb      	ldr	r3, [r7, #12]
 801d518:	2220      	movs	r2, #32
 801d51a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801d51c:	68fb      	ldr	r3, [r7, #12]
 801d51e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d520:	2b00      	cmp	r3, #0
 801d522:	d002      	beq.n	801d52a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801d524:	2301      	movs	r3, #1
 801d526:	75fb      	strb	r3, [r7, #23]
 801d528:	e000      	b.n	801d52c <HAL_SPI_Receive+0x246>
  }

error :
 801d52a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801d52c:	68fb      	ldr	r3, [r7, #12]
 801d52e:	2201      	movs	r2, #1
 801d530:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801d534:	68fb      	ldr	r3, [r7, #12]
 801d536:	2200      	movs	r2, #0
 801d538:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801d53c:	7dfb      	ldrb	r3, [r7, #23]
}
 801d53e:	4618      	mov	r0, r3
 801d540:	3718      	adds	r7, #24
 801d542:	46bd      	mov	sp, r7
 801d544:	bd80      	pop	{r7, pc}

0801d546 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801d546:	b580      	push	{r7, lr}
 801d548:	b08a      	sub	sp, #40	; 0x28
 801d54a:	af00      	add	r7, sp, #0
 801d54c:	60f8      	str	r0, [r7, #12]
 801d54e:	60b9      	str	r1, [r7, #8]
 801d550:	607a      	str	r2, [r7, #4]
 801d552:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801d554:	2301      	movs	r3, #1
 801d556:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801d558:	2300      	movs	r3, #0
 801d55a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801d55e:	68fb      	ldr	r3, [r7, #12]
 801d560:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801d564:	2b01      	cmp	r3, #1
 801d566:	d101      	bne.n	801d56c <HAL_SPI_TransmitReceive+0x26>
 801d568:	2302      	movs	r3, #2
 801d56a:	e1fb      	b.n	801d964 <HAL_SPI_TransmitReceive+0x41e>
 801d56c:	68fb      	ldr	r3, [r7, #12]
 801d56e:	2201      	movs	r2, #1
 801d570:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801d574:	f7fb fa9e 	bl	8018ab4 <HAL_GetTick>
 801d578:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801d57a:	68fb      	ldr	r3, [r7, #12]
 801d57c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d580:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801d582:	68fb      	ldr	r3, [r7, #12]
 801d584:	685b      	ldr	r3, [r3, #4]
 801d586:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801d588:	887b      	ldrh	r3, [r7, #2]
 801d58a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801d58c:	887b      	ldrh	r3, [r7, #2]
 801d58e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801d590:	7efb      	ldrb	r3, [r7, #27]
 801d592:	2b01      	cmp	r3, #1
 801d594:	d00e      	beq.n	801d5b4 <HAL_SPI_TransmitReceive+0x6e>
 801d596:	697b      	ldr	r3, [r7, #20]
 801d598:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d59c:	d106      	bne.n	801d5ac <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801d59e:	68fb      	ldr	r3, [r7, #12]
 801d5a0:	689b      	ldr	r3, [r3, #8]
 801d5a2:	2b00      	cmp	r3, #0
 801d5a4:	d102      	bne.n	801d5ac <HAL_SPI_TransmitReceive+0x66>
 801d5a6:	7efb      	ldrb	r3, [r7, #27]
 801d5a8:	2b04      	cmp	r3, #4
 801d5aa:	d003      	beq.n	801d5b4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801d5ac:	2302      	movs	r3, #2
 801d5ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801d5b2:	e1cd      	b.n	801d950 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801d5b4:	68bb      	ldr	r3, [r7, #8]
 801d5b6:	2b00      	cmp	r3, #0
 801d5b8:	d005      	beq.n	801d5c6 <HAL_SPI_TransmitReceive+0x80>
 801d5ba:	687b      	ldr	r3, [r7, #4]
 801d5bc:	2b00      	cmp	r3, #0
 801d5be:	d002      	beq.n	801d5c6 <HAL_SPI_TransmitReceive+0x80>
 801d5c0:	887b      	ldrh	r3, [r7, #2]
 801d5c2:	2b00      	cmp	r3, #0
 801d5c4:	d103      	bne.n	801d5ce <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801d5c6:	2301      	movs	r3, #1
 801d5c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801d5cc:	e1c0      	b.n	801d950 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801d5ce:	68fb      	ldr	r3, [r7, #12]
 801d5d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d5d4:	b2db      	uxtb	r3, r3
 801d5d6:	2b04      	cmp	r3, #4
 801d5d8:	d003      	beq.n	801d5e2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801d5da:	68fb      	ldr	r3, [r7, #12]
 801d5dc:	2205      	movs	r2, #5
 801d5de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801d5e2:	68fb      	ldr	r3, [r7, #12]
 801d5e4:	2200      	movs	r2, #0
 801d5e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801d5e8:	68fb      	ldr	r3, [r7, #12]
 801d5ea:	687a      	ldr	r2, [r7, #4]
 801d5ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801d5ee:	68fb      	ldr	r3, [r7, #12]
 801d5f0:	887a      	ldrh	r2, [r7, #2]
 801d5f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801d5f6:	68fb      	ldr	r3, [r7, #12]
 801d5f8:	887a      	ldrh	r2, [r7, #2]
 801d5fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801d5fe:	68fb      	ldr	r3, [r7, #12]
 801d600:	68ba      	ldr	r2, [r7, #8]
 801d602:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801d604:	68fb      	ldr	r3, [r7, #12]
 801d606:	887a      	ldrh	r2, [r7, #2]
 801d608:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801d60a:	68fb      	ldr	r3, [r7, #12]
 801d60c:	887a      	ldrh	r2, [r7, #2]
 801d60e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801d610:	68fb      	ldr	r3, [r7, #12]
 801d612:	2200      	movs	r2, #0
 801d614:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801d616:	68fb      	ldr	r3, [r7, #12]
 801d618:	2200      	movs	r2, #0
 801d61a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801d61c:	68fb      	ldr	r3, [r7, #12]
 801d61e:	68db      	ldr	r3, [r3, #12]
 801d620:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d624:	d802      	bhi.n	801d62c <HAL_SPI_TransmitReceive+0xe6>
 801d626:	8a3b      	ldrh	r3, [r7, #16]
 801d628:	2b01      	cmp	r3, #1
 801d62a:	d908      	bls.n	801d63e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d62c:	68fb      	ldr	r3, [r7, #12]
 801d62e:	681b      	ldr	r3, [r3, #0]
 801d630:	685a      	ldr	r2, [r3, #4]
 801d632:	68fb      	ldr	r3, [r7, #12]
 801d634:	681b      	ldr	r3, [r3, #0]
 801d636:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801d63a:	605a      	str	r2, [r3, #4]
 801d63c:	e007      	b.n	801d64e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d63e:	68fb      	ldr	r3, [r7, #12]
 801d640:	681b      	ldr	r3, [r3, #0]
 801d642:	685a      	ldr	r2, [r3, #4]
 801d644:	68fb      	ldr	r3, [r7, #12]
 801d646:	681b      	ldr	r3, [r3, #0]
 801d648:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801d64c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801d64e:	68fb      	ldr	r3, [r7, #12]
 801d650:	681b      	ldr	r3, [r3, #0]
 801d652:	681b      	ldr	r3, [r3, #0]
 801d654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d658:	2b40      	cmp	r3, #64	; 0x40
 801d65a:	d007      	beq.n	801d66c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801d65c:	68fb      	ldr	r3, [r7, #12]
 801d65e:	681b      	ldr	r3, [r3, #0]
 801d660:	681a      	ldr	r2, [r3, #0]
 801d662:	68fb      	ldr	r3, [r7, #12]
 801d664:	681b      	ldr	r3, [r3, #0]
 801d666:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801d66a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d66c:	68fb      	ldr	r3, [r7, #12]
 801d66e:	68db      	ldr	r3, [r3, #12]
 801d670:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d674:	d97c      	bls.n	801d770 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801d676:	68fb      	ldr	r3, [r7, #12]
 801d678:	685b      	ldr	r3, [r3, #4]
 801d67a:	2b00      	cmp	r3, #0
 801d67c:	d002      	beq.n	801d684 <HAL_SPI_TransmitReceive+0x13e>
 801d67e:	8a7b      	ldrh	r3, [r7, #18]
 801d680:	2b01      	cmp	r3, #1
 801d682:	d169      	bne.n	801d758 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d684:	68fb      	ldr	r3, [r7, #12]
 801d686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d688:	881a      	ldrh	r2, [r3, #0]
 801d68a:	68fb      	ldr	r3, [r7, #12]
 801d68c:	681b      	ldr	r3, [r3, #0]
 801d68e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801d690:	68fb      	ldr	r3, [r7, #12]
 801d692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d694:	1c9a      	adds	r2, r3, #2
 801d696:	68fb      	ldr	r3, [r7, #12]
 801d698:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801d69a:	68fb      	ldr	r3, [r7, #12]
 801d69c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d69e:	b29b      	uxth	r3, r3
 801d6a0:	3b01      	subs	r3, #1
 801d6a2:	b29a      	uxth	r2, r3
 801d6a4:	68fb      	ldr	r3, [r7, #12]
 801d6a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801d6a8:	e056      	b.n	801d758 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801d6aa:	68fb      	ldr	r3, [r7, #12]
 801d6ac:	681b      	ldr	r3, [r3, #0]
 801d6ae:	689b      	ldr	r3, [r3, #8]
 801d6b0:	f003 0302 	and.w	r3, r3, #2
 801d6b4:	2b02      	cmp	r3, #2
 801d6b6:	d11b      	bne.n	801d6f0 <HAL_SPI_TransmitReceive+0x1aa>
 801d6b8:	68fb      	ldr	r3, [r7, #12]
 801d6ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d6bc:	b29b      	uxth	r3, r3
 801d6be:	2b00      	cmp	r3, #0
 801d6c0:	d016      	beq.n	801d6f0 <HAL_SPI_TransmitReceive+0x1aa>
 801d6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d6c4:	2b01      	cmp	r3, #1
 801d6c6:	d113      	bne.n	801d6f0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d6c8:	68fb      	ldr	r3, [r7, #12]
 801d6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d6cc:	881a      	ldrh	r2, [r3, #0]
 801d6ce:	68fb      	ldr	r3, [r7, #12]
 801d6d0:	681b      	ldr	r3, [r3, #0]
 801d6d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801d6d4:	68fb      	ldr	r3, [r7, #12]
 801d6d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d6d8:	1c9a      	adds	r2, r3, #2
 801d6da:	68fb      	ldr	r3, [r7, #12]
 801d6dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801d6de:	68fb      	ldr	r3, [r7, #12]
 801d6e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d6e2:	b29b      	uxth	r3, r3
 801d6e4:	3b01      	subs	r3, #1
 801d6e6:	b29a      	uxth	r2, r3
 801d6e8:	68fb      	ldr	r3, [r7, #12]
 801d6ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801d6ec:	2300      	movs	r3, #0
 801d6ee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801d6f0:	68fb      	ldr	r3, [r7, #12]
 801d6f2:	681b      	ldr	r3, [r3, #0]
 801d6f4:	689b      	ldr	r3, [r3, #8]
 801d6f6:	f003 0301 	and.w	r3, r3, #1
 801d6fa:	2b01      	cmp	r3, #1
 801d6fc:	d11c      	bne.n	801d738 <HAL_SPI_TransmitReceive+0x1f2>
 801d6fe:	68fb      	ldr	r3, [r7, #12]
 801d700:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d704:	b29b      	uxth	r3, r3
 801d706:	2b00      	cmp	r3, #0
 801d708:	d016      	beq.n	801d738 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801d70a:	68fb      	ldr	r3, [r7, #12]
 801d70c:	681b      	ldr	r3, [r3, #0]
 801d70e:	68da      	ldr	r2, [r3, #12]
 801d710:	68fb      	ldr	r3, [r7, #12]
 801d712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d714:	b292      	uxth	r2, r2
 801d716:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801d718:	68fb      	ldr	r3, [r7, #12]
 801d71a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d71c:	1c9a      	adds	r2, r3, #2
 801d71e:	68fb      	ldr	r3, [r7, #12]
 801d720:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801d722:	68fb      	ldr	r3, [r7, #12]
 801d724:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d728:	b29b      	uxth	r3, r3
 801d72a:	3b01      	subs	r3, #1
 801d72c:	b29a      	uxth	r2, r3
 801d72e:	68fb      	ldr	r3, [r7, #12]
 801d730:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801d734:	2301      	movs	r3, #1
 801d736:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801d738:	f7fb f9bc 	bl	8018ab4 <HAL_GetTick>
 801d73c:	4602      	mov	r2, r0
 801d73e:	69fb      	ldr	r3, [r7, #28]
 801d740:	1ad3      	subs	r3, r2, r3
 801d742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d744:	429a      	cmp	r2, r3
 801d746:	d807      	bhi.n	801d758 <HAL_SPI_TransmitReceive+0x212>
 801d748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d74a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d74e:	d003      	beq.n	801d758 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801d750:	2303      	movs	r3, #3
 801d752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801d756:	e0fb      	b.n	801d950 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801d758:	68fb      	ldr	r3, [r7, #12]
 801d75a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d75c:	b29b      	uxth	r3, r3
 801d75e:	2b00      	cmp	r3, #0
 801d760:	d1a3      	bne.n	801d6aa <HAL_SPI_TransmitReceive+0x164>
 801d762:	68fb      	ldr	r3, [r7, #12]
 801d764:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d768:	b29b      	uxth	r3, r3
 801d76a:	2b00      	cmp	r3, #0
 801d76c:	d19d      	bne.n	801d6aa <HAL_SPI_TransmitReceive+0x164>
 801d76e:	e0df      	b.n	801d930 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801d770:	68fb      	ldr	r3, [r7, #12]
 801d772:	685b      	ldr	r3, [r3, #4]
 801d774:	2b00      	cmp	r3, #0
 801d776:	d003      	beq.n	801d780 <HAL_SPI_TransmitReceive+0x23a>
 801d778:	8a7b      	ldrh	r3, [r7, #18]
 801d77a:	2b01      	cmp	r3, #1
 801d77c:	f040 80cb 	bne.w	801d916 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801d780:	68fb      	ldr	r3, [r7, #12]
 801d782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d784:	b29b      	uxth	r3, r3
 801d786:	2b01      	cmp	r3, #1
 801d788:	d912      	bls.n	801d7b0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d78a:	68fb      	ldr	r3, [r7, #12]
 801d78c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d78e:	881a      	ldrh	r2, [r3, #0]
 801d790:	68fb      	ldr	r3, [r7, #12]
 801d792:	681b      	ldr	r3, [r3, #0]
 801d794:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801d796:	68fb      	ldr	r3, [r7, #12]
 801d798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d79a:	1c9a      	adds	r2, r3, #2
 801d79c:	68fb      	ldr	r3, [r7, #12]
 801d79e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801d7a0:	68fb      	ldr	r3, [r7, #12]
 801d7a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d7a4:	b29b      	uxth	r3, r3
 801d7a6:	3b02      	subs	r3, #2
 801d7a8:	b29a      	uxth	r2, r3
 801d7aa:	68fb      	ldr	r3, [r7, #12]
 801d7ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d7ae:	e0b2      	b.n	801d916 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801d7b0:	68fb      	ldr	r3, [r7, #12]
 801d7b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d7b4:	68fb      	ldr	r3, [r7, #12]
 801d7b6:	681b      	ldr	r3, [r3, #0]
 801d7b8:	330c      	adds	r3, #12
 801d7ba:	7812      	ldrb	r2, [r2, #0]
 801d7bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801d7be:	68fb      	ldr	r3, [r7, #12]
 801d7c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d7c2:	1c5a      	adds	r2, r3, #1
 801d7c4:	68fb      	ldr	r3, [r7, #12]
 801d7c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801d7c8:	68fb      	ldr	r3, [r7, #12]
 801d7ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d7cc:	b29b      	uxth	r3, r3
 801d7ce:	3b01      	subs	r3, #1
 801d7d0:	b29a      	uxth	r2, r3
 801d7d2:	68fb      	ldr	r3, [r7, #12]
 801d7d4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801d7d6:	e09e      	b.n	801d916 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801d7d8:	68fb      	ldr	r3, [r7, #12]
 801d7da:	681b      	ldr	r3, [r3, #0]
 801d7dc:	689b      	ldr	r3, [r3, #8]
 801d7de:	f003 0302 	and.w	r3, r3, #2
 801d7e2:	2b02      	cmp	r3, #2
 801d7e4:	d134      	bne.n	801d850 <HAL_SPI_TransmitReceive+0x30a>
 801d7e6:	68fb      	ldr	r3, [r7, #12]
 801d7e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d7ea:	b29b      	uxth	r3, r3
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	d02f      	beq.n	801d850 <HAL_SPI_TransmitReceive+0x30a>
 801d7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d7f2:	2b01      	cmp	r3, #1
 801d7f4:	d12c      	bne.n	801d850 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801d7f6:	68fb      	ldr	r3, [r7, #12]
 801d7f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d7fa:	b29b      	uxth	r3, r3
 801d7fc:	2b01      	cmp	r3, #1
 801d7fe:	d912      	bls.n	801d826 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d800:	68fb      	ldr	r3, [r7, #12]
 801d802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d804:	881a      	ldrh	r2, [r3, #0]
 801d806:	68fb      	ldr	r3, [r7, #12]
 801d808:	681b      	ldr	r3, [r3, #0]
 801d80a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801d80c:	68fb      	ldr	r3, [r7, #12]
 801d80e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d810:	1c9a      	adds	r2, r3, #2
 801d812:	68fb      	ldr	r3, [r7, #12]
 801d814:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801d816:	68fb      	ldr	r3, [r7, #12]
 801d818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d81a:	b29b      	uxth	r3, r3
 801d81c:	3b02      	subs	r3, #2
 801d81e:	b29a      	uxth	r2, r3
 801d820:	68fb      	ldr	r3, [r7, #12]
 801d822:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d824:	e012      	b.n	801d84c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801d826:	68fb      	ldr	r3, [r7, #12]
 801d828:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d82a:	68fb      	ldr	r3, [r7, #12]
 801d82c:	681b      	ldr	r3, [r3, #0]
 801d82e:	330c      	adds	r3, #12
 801d830:	7812      	ldrb	r2, [r2, #0]
 801d832:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801d834:	68fb      	ldr	r3, [r7, #12]
 801d836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d838:	1c5a      	adds	r2, r3, #1
 801d83a:	68fb      	ldr	r3, [r7, #12]
 801d83c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801d83e:	68fb      	ldr	r3, [r7, #12]
 801d840:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d842:	b29b      	uxth	r3, r3
 801d844:	3b01      	subs	r3, #1
 801d846:	b29a      	uxth	r2, r3
 801d848:	68fb      	ldr	r3, [r7, #12]
 801d84a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801d84c:	2300      	movs	r3, #0
 801d84e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801d850:	68fb      	ldr	r3, [r7, #12]
 801d852:	681b      	ldr	r3, [r3, #0]
 801d854:	689b      	ldr	r3, [r3, #8]
 801d856:	f003 0301 	and.w	r3, r3, #1
 801d85a:	2b01      	cmp	r3, #1
 801d85c:	d148      	bne.n	801d8f0 <HAL_SPI_TransmitReceive+0x3aa>
 801d85e:	68fb      	ldr	r3, [r7, #12]
 801d860:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d864:	b29b      	uxth	r3, r3
 801d866:	2b00      	cmp	r3, #0
 801d868:	d042      	beq.n	801d8f0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801d86a:	68fb      	ldr	r3, [r7, #12]
 801d86c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d870:	b29b      	uxth	r3, r3
 801d872:	2b01      	cmp	r3, #1
 801d874:	d923      	bls.n	801d8be <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801d876:	68fb      	ldr	r3, [r7, #12]
 801d878:	681b      	ldr	r3, [r3, #0]
 801d87a:	68da      	ldr	r2, [r3, #12]
 801d87c:	68fb      	ldr	r3, [r7, #12]
 801d87e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d880:	b292      	uxth	r2, r2
 801d882:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801d884:	68fb      	ldr	r3, [r7, #12]
 801d886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d888:	1c9a      	adds	r2, r3, #2
 801d88a:	68fb      	ldr	r3, [r7, #12]
 801d88c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801d88e:	68fb      	ldr	r3, [r7, #12]
 801d890:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d894:	b29b      	uxth	r3, r3
 801d896:	3b02      	subs	r3, #2
 801d898:	b29a      	uxth	r2, r3
 801d89a:	68fb      	ldr	r3, [r7, #12]
 801d89c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801d8a0:	68fb      	ldr	r3, [r7, #12]
 801d8a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d8a6:	b29b      	uxth	r3, r3
 801d8a8:	2b01      	cmp	r3, #1
 801d8aa:	d81f      	bhi.n	801d8ec <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d8ac:	68fb      	ldr	r3, [r7, #12]
 801d8ae:	681b      	ldr	r3, [r3, #0]
 801d8b0:	685a      	ldr	r2, [r3, #4]
 801d8b2:	68fb      	ldr	r3, [r7, #12]
 801d8b4:	681b      	ldr	r3, [r3, #0]
 801d8b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801d8ba:	605a      	str	r2, [r3, #4]
 801d8bc:	e016      	b.n	801d8ec <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801d8be:	68fb      	ldr	r3, [r7, #12]
 801d8c0:	681b      	ldr	r3, [r3, #0]
 801d8c2:	f103 020c 	add.w	r2, r3, #12
 801d8c6:	68fb      	ldr	r3, [r7, #12]
 801d8c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d8ca:	7812      	ldrb	r2, [r2, #0]
 801d8cc:	b2d2      	uxtb	r2, r2
 801d8ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801d8d0:	68fb      	ldr	r3, [r7, #12]
 801d8d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d8d4:	1c5a      	adds	r2, r3, #1
 801d8d6:	68fb      	ldr	r3, [r7, #12]
 801d8d8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801d8da:	68fb      	ldr	r3, [r7, #12]
 801d8dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d8e0:	b29b      	uxth	r3, r3
 801d8e2:	3b01      	subs	r3, #1
 801d8e4:	b29a      	uxth	r2, r3
 801d8e6:	68fb      	ldr	r3, [r7, #12]
 801d8e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801d8ec:	2301      	movs	r3, #1
 801d8ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801d8f0:	f7fb f8e0 	bl	8018ab4 <HAL_GetTick>
 801d8f4:	4602      	mov	r2, r0
 801d8f6:	69fb      	ldr	r3, [r7, #28]
 801d8f8:	1ad3      	subs	r3, r2, r3
 801d8fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d8fc:	429a      	cmp	r2, r3
 801d8fe:	d803      	bhi.n	801d908 <HAL_SPI_TransmitReceive+0x3c2>
 801d900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d902:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d906:	d102      	bne.n	801d90e <HAL_SPI_TransmitReceive+0x3c8>
 801d908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d90a:	2b00      	cmp	r3, #0
 801d90c:	d103      	bne.n	801d916 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801d90e:	2303      	movs	r3, #3
 801d910:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801d914:	e01c      	b.n	801d950 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801d916:	68fb      	ldr	r3, [r7, #12]
 801d918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d91a:	b29b      	uxth	r3, r3
 801d91c:	2b00      	cmp	r3, #0
 801d91e:	f47f af5b 	bne.w	801d7d8 <HAL_SPI_TransmitReceive+0x292>
 801d922:	68fb      	ldr	r3, [r7, #12]
 801d924:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d928:	b29b      	uxth	r3, r3
 801d92a:	2b00      	cmp	r3, #0
 801d92c:	f47f af54 	bne.w	801d7d8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801d930:	69fa      	ldr	r2, [r7, #28]
 801d932:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d934:	68f8      	ldr	r0, [r7, #12]
 801d936:	f000 f98f 	bl	801dc58 <SPI_EndRxTxTransaction>
 801d93a:	4603      	mov	r3, r0
 801d93c:	2b00      	cmp	r3, #0
 801d93e:	d006      	beq.n	801d94e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801d940:	2301      	movs	r3, #1
 801d942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801d946:	68fb      	ldr	r3, [r7, #12]
 801d948:	2220      	movs	r2, #32
 801d94a:	661a      	str	r2, [r3, #96]	; 0x60
 801d94c:	e000      	b.n	801d950 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801d94e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801d950:	68fb      	ldr	r3, [r7, #12]
 801d952:	2201      	movs	r2, #1
 801d954:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801d958:	68fb      	ldr	r3, [r7, #12]
 801d95a:	2200      	movs	r2, #0
 801d95c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801d960:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801d964:	4618      	mov	r0, r3
 801d966:	3728      	adds	r7, #40	; 0x28
 801d968:	46bd      	mov	sp, r7
 801d96a:	bd80      	pop	{r7, pc}

0801d96c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801d96c:	b580      	push	{r7, lr}
 801d96e:	b088      	sub	sp, #32
 801d970:	af00      	add	r7, sp, #0
 801d972:	60f8      	str	r0, [r7, #12]
 801d974:	60b9      	str	r1, [r7, #8]
 801d976:	603b      	str	r3, [r7, #0]
 801d978:	4613      	mov	r3, r2
 801d97a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801d97c:	f7fb f89a 	bl	8018ab4 <HAL_GetTick>
 801d980:	4602      	mov	r2, r0
 801d982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d984:	1a9b      	subs	r3, r3, r2
 801d986:	683a      	ldr	r2, [r7, #0]
 801d988:	4413      	add	r3, r2
 801d98a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801d98c:	f7fb f892 	bl	8018ab4 <HAL_GetTick>
 801d990:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801d992:	4b39      	ldr	r3, [pc, #228]	; (801da78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801d994:	681b      	ldr	r3, [r3, #0]
 801d996:	015b      	lsls	r3, r3, #5
 801d998:	0d1b      	lsrs	r3, r3, #20
 801d99a:	69fa      	ldr	r2, [r7, #28]
 801d99c:	fb02 f303 	mul.w	r3, r2, r3
 801d9a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801d9a2:	e054      	b.n	801da4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801d9a4:	683b      	ldr	r3, [r7, #0]
 801d9a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d9aa:	d050      	beq.n	801da4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801d9ac:	f7fb f882 	bl	8018ab4 <HAL_GetTick>
 801d9b0:	4602      	mov	r2, r0
 801d9b2:	69bb      	ldr	r3, [r7, #24]
 801d9b4:	1ad3      	subs	r3, r2, r3
 801d9b6:	69fa      	ldr	r2, [r7, #28]
 801d9b8:	429a      	cmp	r2, r3
 801d9ba:	d902      	bls.n	801d9c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 801d9bc:	69fb      	ldr	r3, [r7, #28]
 801d9be:	2b00      	cmp	r3, #0
 801d9c0:	d13d      	bne.n	801da3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801d9c2:	68fb      	ldr	r3, [r7, #12]
 801d9c4:	681b      	ldr	r3, [r3, #0]
 801d9c6:	685a      	ldr	r2, [r3, #4]
 801d9c8:	68fb      	ldr	r3, [r7, #12]
 801d9ca:	681b      	ldr	r3, [r3, #0]
 801d9cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801d9d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d9d2:	68fb      	ldr	r3, [r7, #12]
 801d9d4:	685b      	ldr	r3, [r3, #4]
 801d9d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d9da:	d111      	bne.n	801da00 <SPI_WaitFlagStateUntilTimeout+0x94>
 801d9dc:	68fb      	ldr	r3, [r7, #12]
 801d9de:	689b      	ldr	r3, [r3, #8]
 801d9e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d9e4:	d004      	beq.n	801d9f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801d9e6:	68fb      	ldr	r3, [r7, #12]
 801d9e8:	689b      	ldr	r3, [r3, #8]
 801d9ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d9ee:	d107      	bne.n	801da00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801d9f0:	68fb      	ldr	r3, [r7, #12]
 801d9f2:	681b      	ldr	r3, [r3, #0]
 801d9f4:	681a      	ldr	r2, [r3, #0]
 801d9f6:	68fb      	ldr	r3, [r7, #12]
 801d9f8:	681b      	ldr	r3, [r3, #0]
 801d9fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d9fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801da00:	68fb      	ldr	r3, [r7, #12]
 801da02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801da04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801da08:	d10f      	bne.n	801da2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801da0a:	68fb      	ldr	r3, [r7, #12]
 801da0c:	681b      	ldr	r3, [r3, #0]
 801da0e:	681a      	ldr	r2, [r3, #0]
 801da10:	68fb      	ldr	r3, [r7, #12]
 801da12:	681b      	ldr	r3, [r3, #0]
 801da14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801da18:	601a      	str	r2, [r3, #0]
 801da1a:	68fb      	ldr	r3, [r7, #12]
 801da1c:	681b      	ldr	r3, [r3, #0]
 801da1e:	681a      	ldr	r2, [r3, #0]
 801da20:	68fb      	ldr	r3, [r7, #12]
 801da22:	681b      	ldr	r3, [r3, #0]
 801da24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801da28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801da2a:	68fb      	ldr	r3, [r7, #12]
 801da2c:	2201      	movs	r2, #1
 801da2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801da32:	68fb      	ldr	r3, [r7, #12]
 801da34:	2200      	movs	r2, #0
 801da36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801da3a:	2303      	movs	r3, #3
 801da3c:	e017      	b.n	801da6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801da3e:	697b      	ldr	r3, [r7, #20]
 801da40:	2b00      	cmp	r3, #0
 801da42:	d101      	bne.n	801da48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801da44:	2300      	movs	r3, #0
 801da46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801da48:	697b      	ldr	r3, [r7, #20]
 801da4a:	3b01      	subs	r3, #1
 801da4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801da4e:	68fb      	ldr	r3, [r7, #12]
 801da50:	681b      	ldr	r3, [r3, #0]
 801da52:	689a      	ldr	r2, [r3, #8]
 801da54:	68bb      	ldr	r3, [r7, #8]
 801da56:	4013      	ands	r3, r2
 801da58:	68ba      	ldr	r2, [r7, #8]
 801da5a:	429a      	cmp	r2, r3
 801da5c:	bf0c      	ite	eq
 801da5e:	2301      	moveq	r3, #1
 801da60:	2300      	movne	r3, #0
 801da62:	b2db      	uxtb	r3, r3
 801da64:	461a      	mov	r2, r3
 801da66:	79fb      	ldrb	r3, [r7, #7]
 801da68:	429a      	cmp	r2, r3
 801da6a:	d19b      	bne.n	801d9a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801da6c:	2300      	movs	r3, #0
}
 801da6e:	4618      	mov	r0, r3
 801da70:	3720      	adds	r7, #32
 801da72:	46bd      	mov	sp, r7
 801da74:	bd80      	pop	{r7, pc}
 801da76:	bf00      	nop
 801da78:	20000000 	.word	0x20000000

0801da7c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801da7c:	b580      	push	{r7, lr}
 801da7e:	b08a      	sub	sp, #40	; 0x28
 801da80:	af00      	add	r7, sp, #0
 801da82:	60f8      	str	r0, [r7, #12]
 801da84:	60b9      	str	r1, [r7, #8]
 801da86:	607a      	str	r2, [r7, #4]
 801da88:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801da8a:	2300      	movs	r3, #0
 801da8c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801da8e:	f7fb f811 	bl	8018ab4 <HAL_GetTick>
 801da92:	4602      	mov	r2, r0
 801da94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da96:	1a9b      	subs	r3, r3, r2
 801da98:	683a      	ldr	r2, [r7, #0]
 801da9a:	4413      	add	r3, r2
 801da9c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801da9e:	f7fb f809 	bl	8018ab4 <HAL_GetTick>
 801daa2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801daa4:	68fb      	ldr	r3, [r7, #12]
 801daa6:	681b      	ldr	r3, [r3, #0]
 801daa8:	330c      	adds	r3, #12
 801daaa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801daac:	4b3d      	ldr	r3, [pc, #244]	; (801dba4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801daae:	681a      	ldr	r2, [r3, #0]
 801dab0:	4613      	mov	r3, r2
 801dab2:	009b      	lsls	r3, r3, #2
 801dab4:	4413      	add	r3, r2
 801dab6:	00da      	lsls	r2, r3, #3
 801dab8:	1ad3      	subs	r3, r2, r3
 801daba:	0d1b      	lsrs	r3, r3, #20
 801dabc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dabe:	fb02 f303 	mul.w	r3, r2, r3
 801dac2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801dac4:	e060      	b.n	801db88 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801dac6:	68bb      	ldr	r3, [r7, #8]
 801dac8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801dacc:	d107      	bne.n	801dade <SPI_WaitFifoStateUntilTimeout+0x62>
 801dace:	687b      	ldr	r3, [r7, #4]
 801dad0:	2b00      	cmp	r3, #0
 801dad2:	d104      	bne.n	801dade <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801dad4:	69fb      	ldr	r3, [r7, #28]
 801dad6:	781b      	ldrb	r3, [r3, #0]
 801dad8:	b2db      	uxtb	r3, r3
 801dada:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801dadc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801dade:	683b      	ldr	r3, [r7, #0]
 801dae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dae4:	d050      	beq.n	801db88 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801dae6:	f7fa ffe5 	bl	8018ab4 <HAL_GetTick>
 801daea:	4602      	mov	r2, r0
 801daec:	6a3b      	ldr	r3, [r7, #32]
 801daee:	1ad3      	subs	r3, r2, r3
 801daf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801daf2:	429a      	cmp	r2, r3
 801daf4:	d902      	bls.n	801dafc <SPI_WaitFifoStateUntilTimeout+0x80>
 801daf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801daf8:	2b00      	cmp	r3, #0
 801dafa:	d13d      	bne.n	801db78 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801dafc:	68fb      	ldr	r3, [r7, #12]
 801dafe:	681b      	ldr	r3, [r3, #0]
 801db00:	685a      	ldr	r2, [r3, #4]
 801db02:	68fb      	ldr	r3, [r7, #12]
 801db04:	681b      	ldr	r3, [r3, #0]
 801db06:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801db0a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801db0c:	68fb      	ldr	r3, [r7, #12]
 801db0e:	685b      	ldr	r3, [r3, #4]
 801db10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801db14:	d111      	bne.n	801db3a <SPI_WaitFifoStateUntilTimeout+0xbe>
 801db16:	68fb      	ldr	r3, [r7, #12]
 801db18:	689b      	ldr	r3, [r3, #8]
 801db1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801db1e:	d004      	beq.n	801db2a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801db20:	68fb      	ldr	r3, [r7, #12]
 801db22:	689b      	ldr	r3, [r3, #8]
 801db24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801db28:	d107      	bne.n	801db3a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801db2a:	68fb      	ldr	r3, [r7, #12]
 801db2c:	681b      	ldr	r3, [r3, #0]
 801db2e:	681a      	ldr	r2, [r3, #0]
 801db30:	68fb      	ldr	r3, [r7, #12]
 801db32:	681b      	ldr	r3, [r3, #0]
 801db34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801db38:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801db3a:	68fb      	ldr	r3, [r7, #12]
 801db3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801db3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801db42:	d10f      	bne.n	801db64 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801db44:	68fb      	ldr	r3, [r7, #12]
 801db46:	681b      	ldr	r3, [r3, #0]
 801db48:	681a      	ldr	r2, [r3, #0]
 801db4a:	68fb      	ldr	r3, [r7, #12]
 801db4c:	681b      	ldr	r3, [r3, #0]
 801db4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801db52:	601a      	str	r2, [r3, #0]
 801db54:	68fb      	ldr	r3, [r7, #12]
 801db56:	681b      	ldr	r3, [r3, #0]
 801db58:	681a      	ldr	r2, [r3, #0]
 801db5a:	68fb      	ldr	r3, [r7, #12]
 801db5c:	681b      	ldr	r3, [r3, #0]
 801db5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801db62:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801db64:	68fb      	ldr	r3, [r7, #12]
 801db66:	2201      	movs	r2, #1
 801db68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801db6c:	68fb      	ldr	r3, [r7, #12]
 801db6e:	2200      	movs	r2, #0
 801db70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801db74:	2303      	movs	r3, #3
 801db76:	e010      	b.n	801db9a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801db78:	69bb      	ldr	r3, [r7, #24]
 801db7a:	2b00      	cmp	r3, #0
 801db7c:	d101      	bne.n	801db82 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801db7e:	2300      	movs	r3, #0
 801db80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801db82:	69bb      	ldr	r3, [r7, #24]
 801db84:	3b01      	subs	r3, #1
 801db86:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801db88:	68fb      	ldr	r3, [r7, #12]
 801db8a:	681b      	ldr	r3, [r3, #0]
 801db8c:	689a      	ldr	r2, [r3, #8]
 801db8e:	68bb      	ldr	r3, [r7, #8]
 801db90:	4013      	ands	r3, r2
 801db92:	687a      	ldr	r2, [r7, #4]
 801db94:	429a      	cmp	r2, r3
 801db96:	d196      	bne.n	801dac6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801db98:	2300      	movs	r3, #0
}
 801db9a:	4618      	mov	r0, r3
 801db9c:	3728      	adds	r7, #40	; 0x28
 801db9e:	46bd      	mov	sp, r7
 801dba0:	bd80      	pop	{r7, pc}
 801dba2:	bf00      	nop
 801dba4:	20000000 	.word	0x20000000

0801dba8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801dba8:	b580      	push	{r7, lr}
 801dbaa:	b086      	sub	sp, #24
 801dbac:	af02      	add	r7, sp, #8
 801dbae:	60f8      	str	r0, [r7, #12]
 801dbb0:	60b9      	str	r1, [r7, #8]
 801dbb2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801dbb4:	68fb      	ldr	r3, [r7, #12]
 801dbb6:	685b      	ldr	r3, [r3, #4]
 801dbb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801dbbc:	d111      	bne.n	801dbe2 <SPI_EndRxTransaction+0x3a>
 801dbbe:	68fb      	ldr	r3, [r7, #12]
 801dbc0:	689b      	ldr	r3, [r3, #8]
 801dbc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801dbc6:	d004      	beq.n	801dbd2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801dbc8:	68fb      	ldr	r3, [r7, #12]
 801dbca:	689b      	ldr	r3, [r3, #8]
 801dbcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801dbd0:	d107      	bne.n	801dbe2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801dbd2:	68fb      	ldr	r3, [r7, #12]
 801dbd4:	681b      	ldr	r3, [r3, #0]
 801dbd6:	681a      	ldr	r2, [r3, #0]
 801dbd8:	68fb      	ldr	r3, [r7, #12]
 801dbda:	681b      	ldr	r3, [r3, #0]
 801dbdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801dbe0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801dbe2:	687b      	ldr	r3, [r7, #4]
 801dbe4:	9300      	str	r3, [sp, #0]
 801dbe6:	68bb      	ldr	r3, [r7, #8]
 801dbe8:	2200      	movs	r2, #0
 801dbea:	2180      	movs	r1, #128	; 0x80
 801dbec:	68f8      	ldr	r0, [r7, #12]
 801dbee:	f7ff febd 	bl	801d96c <SPI_WaitFlagStateUntilTimeout>
 801dbf2:	4603      	mov	r3, r0
 801dbf4:	2b00      	cmp	r3, #0
 801dbf6:	d007      	beq.n	801dc08 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801dbf8:	68fb      	ldr	r3, [r7, #12]
 801dbfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dbfc:	f043 0220 	orr.w	r2, r3, #32
 801dc00:	68fb      	ldr	r3, [r7, #12]
 801dc02:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801dc04:	2303      	movs	r3, #3
 801dc06:	e023      	b.n	801dc50 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801dc08:	68fb      	ldr	r3, [r7, #12]
 801dc0a:	685b      	ldr	r3, [r3, #4]
 801dc0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801dc10:	d11d      	bne.n	801dc4e <SPI_EndRxTransaction+0xa6>
 801dc12:	68fb      	ldr	r3, [r7, #12]
 801dc14:	689b      	ldr	r3, [r3, #8]
 801dc16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801dc1a:	d004      	beq.n	801dc26 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801dc1c:	68fb      	ldr	r3, [r7, #12]
 801dc1e:	689b      	ldr	r3, [r3, #8]
 801dc20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801dc24:	d113      	bne.n	801dc4e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801dc26:	687b      	ldr	r3, [r7, #4]
 801dc28:	9300      	str	r3, [sp, #0]
 801dc2a:	68bb      	ldr	r3, [r7, #8]
 801dc2c:	2200      	movs	r2, #0
 801dc2e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801dc32:	68f8      	ldr	r0, [r7, #12]
 801dc34:	f7ff ff22 	bl	801da7c <SPI_WaitFifoStateUntilTimeout>
 801dc38:	4603      	mov	r3, r0
 801dc3a:	2b00      	cmp	r3, #0
 801dc3c:	d007      	beq.n	801dc4e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801dc3e:	68fb      	ldr	r3, [r7, #12]
 801dc40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dc42:	f043 0220 	orr.w	r2, r3, #32
 801dc46:	68fb      	ldr	r3, [r7, #12]
 801dc48:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801dc4a:	2303      	movs	r3, #3
 801dc4c:	e000      	b.n	801dc50 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 801dc4e:	2300      	movs	r3, #0
}
 801dc50:	4618      	mov	r0, r3
 801dc52:	3710      	adds	r7, #16
 801dc54:	46bd      	mov	sp, r7
 801dc56:	bd80      	pop	{r7, pc}

0801dc58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801dc58:	b580      	push	{r7, lr}
 801dc5a:	b086      	sub	sp, #24
 801dc5c:	af02      	add	r7, sp, #8
 801dc5e:	60f8      	str	r0, [r7, #12]
 801dc60:	60b9      	str	r1, [r7, #8]
 801dc62:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801dc64:	687b      	ldr	r3, [r7, #4]
 801dc66:	9300      	str	r3, [sp, #0]
 801dc68:	68bb      	ldr	r3, [r7, #8]
 801dc6a:	2200      	movs	r2, #0
 801dc6c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801dc70:	68f8      	ldr	r0, [r7, #12]
 801dc72:	f7ff ff03 	bl	801da7c <SPI_WaitFifoStateUntilTimeout>
 801dc76:	4603      	mov	r3, r0
 801dc78:	2b00      	cmp	r3, #0
 801dc7a:	d007      	beq.n	801dc8c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801dc7c:	68fb      	ldr	r3, [r7, #12]
 801dc7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dc80:	f043 0220 	orr.w	r2, r3, #32
 801dc84:	68fb      	ldr	r3, [r7, #12]
 801dc86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801dc88:	2303      	movs	r3, #3
 801dc8a:	e027      	b.n	801dcdc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801dc8c:	687b      	ldr	r3, [r7, #4]
 801dc8e:	9300      	str	r3, [sp, #0]
 801dc90:	68bb      	ldr	r3, [r7, #8]
 801dc92:	2200      	movs	r2, #0
 801dc94:	2180      	movs	r1, #128	; 0x80
 801dc96:	68f8      	ldr	r0, [r7, #12]
 801dc98:	f7ff fe68 	bl	801d96c <SPI_WaitFlagStateUntilTimeout>
 801dc9c:	4603      	mov	r3, r0
 801dc9e:	2b00      	cmp	r3, #0
 801dca0:	d007      	beq.n	801dcb2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801dca2:	68fb      	ldr	r3, [r7, #12]
 801dca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dca6:	f043 0220 	orr.w	r2, r3, #32
 801dcaa:	68fb      	ldr	r3, [r7, #12]
 801dcac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801dcae:	2303      	movs	r3, #3
 801dcb0:	e014      	b.n	801dcdc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801dcb2:	687b      	ldr	r3, [r7, #4]
 801dcb4:	9300      	str	r3, [sp, #0]
 801dcb6:	68bb      	ldr	r3, [r7, #8]
 801dcb8:	2200      	movs	r2, #0
 801dcba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801dcbe:	68f8      	ldr	r0, [r7, #12]
 801dcc0:	f7ff fedc 	bl	801da7c <SPI_WaitFifoStateUntilTimeout>
 801dcc4:	4603      	mov	r3, r0
 801dcc6:	2b00      	cmp	r3, #0
 801dcc8:	d007      	beq.n	801dcda <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801dcca:	68fb      	ldr	r3, [r7, #12]
 801dccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dcce:	f043 0220 	orr.w	r2, r3, #32
 801dcd2:	68fb      	ldr	r3, [r7, #12]
 801dcd4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801dcd6:	2303      	movs	r3, #3
 801dcd8:	e000      	b.n	801dcdc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801dcda:	2300      	movs	r3, #0
}
 801dcdc:	4618      	mov	r0, r3
 801dcde:	3710      	adds	r7, #16
 801dce0:	46bd      	mov	sp, r7
 801dce2:	bd80      	pop	{r7, pc}

0801dce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801dce4:	b580      	push	{r7, lr}
 801dce6:	b082      	sub	sp, #8
 801dce8:	af00      	add	r7, sp, #0
 801dcea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801dcec:	687b      	ldr	r3, [r7, #4]
 801dcee:	2b00      	cmp	r3, #0
 801dcf0:	d101      	bne.n	801dcf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801dcf2:	2301      	movs	r3, #1
 801dcf4:	e049      	b.n	801dd8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801dcf6:	687b      	ldr	r3, [r7, #4]
 801dcf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801dcfc:	b2db      	uxtb	r3, r3
 801dcfe:	2b00      	cmp	r3, #0
 801dd00:	d106      	bne.n	801dd10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801dd02:	687b      	ldr	r3, [r7, #4]
 801dd04:	2200      	movs	r2, #0
 801dd06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801dd0a:	6878      	ldr	r0, [r7, #4]
 801dd0c:	f7f9 fd32 	bl	8017774 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801dd10:	687b      	ldr	r3, [r7, #4]
 801dd12:	2202      	movs	r2, #2
 801dd14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801dd18:	687b      	ldr	r3, [r7, #4]
 801dd1a:	681a      	ldr	r2, [r3, #0]
 801dd1c:	687b      	ldr	r3, [r7, #4]
 801dd1e:	3304      	adds	r3, #4
 801dd20:	4619      	mov	r1, r3
 801dd22:	4610      	mov	r0, r2
 801dd24:	f000 fd6c 	bl	801e800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801dd28:	687b      	ldr	r3, [r7, #4]
 801dd2a:	2201      	movs	r2, #1
 801dd2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801dd30:	687b      	ldr	r3, [r7, #4]
 801dd32:	2201      	movs	r2, #1
 801dd34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801dd38:	687b      	ldr	r3, [r7, #4]
 801dd3a:	2201      	movs	r2, #1
 801dd3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801dd40:	687b      	ldr	r3, [r7, #4]
 801dd42:	2201      	movs	r2, #1
 801dd44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801dd48:	687b      	ldr	r3, [r7, #4]
 801dd4a:	2201      	movs	r2, #1
 801dd4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801dd50:	687b      	ldr	r3, [r7, #4]
 801dd52:	2201      	movs	r2, #1
 801dd54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801dd58:	687b      	ldr	r3, [r7, #4]
 801dd5a:	2201      	movs	r2, #1
 801dd5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801dd60:	687b      	ldr	r3, [r7, #4]
 801dd62:	2201      	movs	r2, #1
 801dd64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801dd68:	687b      	ldr	r3, [r7, #4]
 801dd6a:	2201      	movs	r2, #1
 801dd6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801dd70:	687b      	ldr	r3, [r7, #4]
 801dd72:	2201      	movs	r2, #1
 801dd74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801dd78:	687b      	ldr	r3, [r7, #4]
 801dd7a:	2201      	movs	r2, #1
 801dd7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801dd80:	687b      	ldr	r3, [r7, #4]
 801dd82:	2201      	movs	r2, #1
 801dd84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801dd88:	2300      	movs	r3, #0
}
 801dd8a:	4618      	mov	r0, r3
 801dd8c:	3708      	adds	r7, #8
 801dd8e:	46bd      	mov	sp, r7
 801dd90:	bd80      	pop	{r7, pc}
	...

0801dd94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801dd94:	b480      	push	{r7}
 801dd96:	b085      	sub	sp, #20
 801dd98:	af00      	add	r7, sp, #0
 801dd9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801dd9c:	687b      	ldr	r3, [r7, #4]
 801dd9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801dda2:	b2db      	uxtb	r3, r3
 801dda4:	2b01      	cmp	r3, #1
 801dda6:	d001      	beq.n	801ddac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801dda8:	2301      	movs	r3, #1
 801ddaa:	e04f      	b.n	801de4c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ddac:	687b      	ldr	r3, [r7, #4]
 801ddae:	2202      	movs	r2, #2
 801ddb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801ddb4:	687b      	ldr	r3, [r7, #4]
 801ddb6:	681b      	ldr	r3, [r3, #0]
 801ddb8:	68da      	ldr	r2, [r3, #12]
 801ddba:	687b      	ldr	r3, [r7, #4]
 801ddbc:	681b      	ldr	r3, [r3, #0]
 801ddbe:	f042 0201 	orr.w	r2, r2, #1
 801ddc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ddc4:	687b      	ldr	r3, [r7, #4]
 801ddc6:	681b      	ldr	r3, [r3, #0]
 801ddc8:	4a23      	ldr	r2, [pc, #140]	; (801de58 <HAL_TIM_Base_Start_IT+0xc4>)
 801ddca:	4293      	cmp	r3, r2
 801ddcc:	d01d      	beq.n	801de0a <HAL_TIM_Base_Start_IT+0x76>
 801ddce:	687b      	ldr	r3, [r7, #4]
 801ddd0:	681b      	ldr	r3, [r3, #0]
 801ddd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ddd6:	d018      	beq.n	801de0a <HAL_TIM_Base_Start_IT+0x76>
 801ddd8:	687b      	ldr	r3, [r7, #4]
 801ddda:	681b      	ldr	r3, [r3, #0]
 801dddc:	4a1f      	ldr	r2, [pc, #124]	; (801de5c <HAL_TIM_Base_Start_IT+0xc8>)
 801ddde:	4293      	cmp	r3, r2
 801dde0:	d013      	beq.n	801de0a <HAL_TIM_Base_Start_IT+0x76>
 801dde2:	687b      	ldr	r3, [r7, #4]
 801dde4:	681b      	ldr	r3, [r3, #0]
 801dde6:	4a1e      	ldr	r2, [pc, #120]	; (801de60 <HAL_TIM_Base_Start_IT+0xcc>)
 801dde8:	4293      	cmp	r3, r2
 801ddea:	d00e      	beq.n	801de0a <HAL_TIM_Base_Start_IT+0x76>
 801ddec:	687b      	ldr	r3, [r7, #4]
 801ddee:	681b      	ldr	r3, [r3, #0]
 801ddf0:	4a1c      	ldr	r2, [pc, #112]	; (801de64 <HAL_TIM_Base_Start_IT+0xd0>)
 801ddf2:	4293      	cmp	r3, r2
 801ddf4:	d009      	beq.n	801de0a <HAL_TIM_Base_Start_IT+0x76>
 801ddf6:	687b      	ldr	r3, [r7, #4]
 801ddf8:	681b      	ldr	r3, [r3, #0]
 801ddfa:	4a1b      	ldr	r2, [pc, #108]	; (801de68 <HAL_TIM_Base_Start_IT+0xd4>)
 801ddfc:	4293      	cmp	r3, r2
 801ddfe:	d004      	beq.n	801de0a <HAL_TIM_Base_Start_IT+0x76>
 801de00:	687b      	ldr	r3, [r7, #4]
 801de02:	681b      	ldr	r3, [r3, #0]
 801de04:	4a19      	ldr	r2, [pc, #100]	; (801de6c <HAL_TIM_Base_Start_IT+0xd8>)
 801de06:	4293      	cmp	r3, r2
 801de08:	d115      	bne.n	801de36 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801de0a:	687b      	ldr	r3, [r7, #4]
 801de0c:	681b      	ldr	r3, [r3, #0]
 801de0e:	689a      	ldr	r2, [r3, #8]
 801de10:	4b17      	ldr	r3, [pc, #92]	; (801de70 <HAL_TIM_Base_Start_IT+0xdc>)
 801de12:	4013      	ands	r3, r2
 801de14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801de16:	68fb      	ldr	r3, [r7, #12]
 801de18:	2b06      	cmp	r3, #6
 801de1a:	d015      	beq.n	801de48 <HAL_TIM_Base_Start_IT+0xb4>
 801de1c:	68fb      	ldr	r3, [r7, #12]
 801de1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801de22:	d011      	beq.n	801de48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801de24:	687b      	ldr	r3, [r7, #4]
 801de26:	681b      	ldr	r3, [r3, #0]
 801de28:	681a      	ldr	r2, [r3, #0]
 801de2a:	687b      	ldr	r3, [r7, #4]
 801de2c:	681b      	ldr	r3, [r3, #0]
 801de2e:	f042 0201 	orr.w	r2, r2, #1
 801de32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801de34:	e008      	b.n	801de48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801de36:	687b      	ldr	r3, [r7, #4]
 801de38:	681b      	ldr	r3, [r3, #0]
 801de3a:	681a      	ldr	r2, [r3, #0]
 801de3c:	687b      	ldr	r3, [r7, #4]
 801de3e:	681b      	ldr	r3, [r3, #0]
 801de40:	f042 0201 	orr.w	r2, r2, #1
 801de44:	601a      	str	r2, [r3, #0]
 801de46:	e000      	b.n	801de4a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801de48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801de4a:	2300      	movs	r3, #0
}
 801de4c:	4618      	mov	r0, r3
 801de4e:	3714      	adds	r7, #20
 801de50:	46bd      	mov	sp, r7
 801de52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de56:	4770      	bx	lr
 801de58:	40012c00 	.word	0x40012c00
 801de5c:	40000400 	.word	0x40000400
 801de60:	40000800 	.word	0x40000800
 801de64:	40013400 	.word	0x40013400
 801de68:	40014000 	.word	0x40014000
 801de6c:	40015000 	.word	0x40015000
 801de70:	00010007 	.word	0x00010007

0801de74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801de74:	b580      	push	{r7, lr}
 801de76:	b082      	sub	sp, #8
 801de78:	af00      	add	r7, sp, #0
 801de7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801de7c:	687b      	ldr	r3, [r7, #4]
 801de7e:	2b00      	cmp	r3, #0
 801de80:	d101      	bne.n	801de86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801de82:	2301      	movs	r3, #1
 801de84:	e049      	b.n	801df1a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801de86:	687b      	ldr	r3, [r7, #4]
 801de88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801de8c:	b2db      	uxtb	r3, r3
 801de8e:	2b00      	cmp	r3, #0
 801de90:	d106      	bne.n	801dea0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801de92:	687b      	ldr	r3, [r7, #4]
 801de94:	2200      	movs	r2, #0
 801de96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801de9a:	6878      	ldr	r0, [r7, #4]
 801de9c:	f7f9 fca4 	bl	80177e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801dea0:	687b      	ldr	r3, [r7, #4]
 801dea2:	2202      	movs	r2, #2
 801dea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801dea8:	687b      	ldr	r3, [r7, #4]
 801deaa:	681a      	ldr	r2, [r3, #0]
 801deac:	687b      	ldr	r3, [r7, #4]
 801deae:	3304      	adds	r3, #4
 801deb0:	4619      	mov	r1, r3
 801deb2:	4610      	mov	r0, r2
 801deb4:	f000 fca4 	bl	801e800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801deb8:	687b      	ldr	r3, [r7, #4]
 801deba:	2201      	movs	r2, #1
 801debc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801dec0:	687b      	ldr	r3, [r7, #4]
 801dec2:	2201      	movs	r2, #1
 801dec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801dec8:	687b      	ldr	r3, [r7, #4]
 801deca:	2201      	movs	r2, #1
 801decc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ded0:	687b      	ldr	r3, [r7, #4]
 801ded2:	2201      	movs	r2, #1
 801ded4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ded8:	687b      	ldr	r3, [r7, #4]
 801deda:	2201      	movs	r2, #1
 801dedc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801dee0:	687b      	ldr	r3, [r7, #4]
 801dee2:	2201      	movs	r2, #1
 801dee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801dee8:	687b      	ldr	r3, [r7, #4]
 801deea:	2201      	movs	r2, #1
 801deec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801def0:	687b      	ldr	r3, [r7, #4]
 801def2:	2201      	movs	r2, #1
 801def4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801def8:	687b      	ldr	r3, [r7, #4]
 801defa:	2201      	movs	r2, #1
 801defc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801df00:	687b      	ldr	r3, [r7, #4]
 801df02:	2201      	movs	r2, #1
 801df04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801df08:	687b      	ldr	r3, [r7, #4]
 801df0a:	2201      	movs	r2, #1
 801df0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801df10:	687b      	ldr	r3, [r7, #4]
 801df12:	2201      	movs	r2, #1
 801df14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801df18:	2300      	movs	r3, #0
}
 801df1a:	4618      	mov	r0, r3
 801df1c:	3708      	adds	r7, #8
 801df1e:	46bd      	mov	sp, r7
 801df20:	bd80      	pop	{r7, pc}
	...

0801df24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801df24:	b580      	push	{r7, lr}
 801df26:	b084      	sub	sp, #16
 801df28:	af00      	add	r7, sp, #0
 801df2a:	6078      	str	r0, [r7, #4]
 801df2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801df2e:	683b      	ldr	r3, [r7, #0]
 801df30:	2b00      	cmp	r3, #0
 801df32:	d109      	bne.n	801df48 <HAL_TIM_PWM_Start+0x24>
 801df34:	687b      	ldr	r3, [r7, #4]
 801df36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801df3a:	b2db      	uxtb	r3, r3
 801df3c:	2b01      	cmp	r3, #1
 801df3e:	bf14      	ite	ne
 801df40:	2301      	movne	r3, #1
 801df42:	2300      	moveq	r3, #0
 801df44:	b2db      	uxtb	r3, r3
 801df46:	e03c      	b.n	801dfc2 <HAL_TIM_PWM_Start+0x9e>
 801df48:	683b      	ldr	r3, [r7, #0]
 801df4a:	2b04      	cmp	r3, #4
 801df4c:	d109      	bne.n	801df62 <HAL_TIM_PWM_Start+0x3e>
 801df4e:	687b      	ldr	r3, [r7, #4]
 801df50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801df54:	b2db      	uxtb	r3, r3
 801df56:	2b01      	cmp	r3, #1
 801df58:	bf14      	ite	ne
 801df5a:	2301      	movne	r3, #1
 801df5c:	2300      	moveq	r3, #0
 801df5e:	b2db      	uxtb	r3, r3
 801df60:	e02f      	b.n	801dfc2 <HAL_TIM_PWM_Start+0x9e>
 801df62:	683b      	ldr	r3, [r7, #0]
 801df64:	2b08      	cmp	r3, #8
 801df66:	d109      	bne.n	801df7c <HAL_TIM_PWM_Start+0x58>
 801df68:	687b      	ldr	r3, [r7, #4]
 801df6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801df6e:	b2db      	uxtb	r3, r3
 801df70:	2b01      	cmp	r3, #1
 801df72:	bf14      	ite	ne
 801df74:	2301      	movne	r3, #1
 801df76:	2300      	moveq	r3, #0
 801df78:	b2db      	uxtb	r3, r3
 801df7a:	e022      	b.n	801dfc2 <HAL_TIM_PWM_Start+0x9e>
 801df7c:	683b      	ldr	r3, [r7, #0]
 801df7e:	2b0c      	cmp	r3, #12
 801df80:	d109      	bne.n	801df96 <HAL_TIM_PWM_Start+0x72>
 801df82:	687b      	ldr	r3, [r7, #4]
 801df84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801df88:	b2db      	uxtb	r3, r3
 801df8a:	2b01      	cmp	r3, #1
 801df8c:	bf14      	ite	ne
 801df8e:	2301      	movne	r3, #1
 801df90:	2300      	moveq	r3, #0
 801df92:	b2db      	uxtb	r3, r3
 801df94:	e015      	b.n	801dfc2 <HAL_TIM_PWM_Start+0x9e>
 801df96:	683b      	ldr	r3, [r7, #0]
 801df98:	2b10      	cmp	r3, #16
 801df9a:	d109      	bne.n	801dfb0 <HAL_TIM_PWM_Start+0x8c>
 801df9c:	687b      	ldr	r3, [r7, #4]
 801df9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801dfa2:	b2db      	uxtb	r3, r3
 801dfa4:	2b01      	cmp	r3, #1
 801dfa6:	bf14      	ite	ne
 801dfa8:	2301      	movne	r3, #1
 801dfaa:	2300      	moveq	r3, #0
 801dfac:	b2db      	uxtb	r3, r3
 801dfae:	e008      	b.n	801dfc2 <HAL_TIM_PWM_Start+0x9e>
 801dfb0:	687b      	ldr	r3, [r7, #4]
 801dfb2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801dfb6:	b2db      	uxtb	r3, r3
 801dfb8:	2b01      	cmp	r3, #1
 801dfba:	bf14      	ite	ne
 801dfbc:	2301      	movne	r3, #1
 801dfbe:	2300      	moveq	r3, #0
 801dfc0:	b2db      	uxtb	r3, r3
 801dfc2:	2b00      	cmp	r3, #0
 801dfc4:	d001      	beq.n	801dfca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801dfc6:	2301      	movs	r3, #1
 801dfc8:	e0a1      	b.n	801e10e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801dfca:	683b      	ldr	r3, [r7, #0]
 801dfcc:	2b00      	cmp	r3, #0
 801dfce:	d104      	bne.n	801dfda <HAL_TIM_PWM_Start+0xb6>
 801dfd0:	687b      	ldr	r3, [r7, #4]
 801dfd2:	2202      	movs	r2, #2
 801dfd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801dfd8:	e023      	b.n	801e022 <HAL_TIM_PWM_Start+0xfe>
 801dfda:	683b      	ldr	r3, [r7, #0]
 801dfdc:	2b04      	cmp	r3, #4
 801dfde:	d104      	bne.n	801dfea <HAL_TIM_PWM_Start+0xc6>
 801dfe0:	687b      	ldr	r3, [r7, #4]
 801dfe2:	2202      	movs	r2, #2
 801dfe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801dfe8:	e01b      	b.n	801e022 <HAL_TIM_PWM_Start+0xfe>
 801dfea:	683b      	ldr	r3, [r7, #0]
 801dfec:	2b08      	cmp	r3, #8
 801dfee:	d104      	bne.n	801dffa <HAL_TIM_PWM_Start+0xd6>
 801dff0:	687b      	ldr	r3, [r7, #4]
 801dff2:	2202      	movs	r2, #2
 801dff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801dff8:	e013      	b.n	801e022 <HAL_TIM_PWM_Start+0xfe>
 801dffa:	683b      	ldr	r3, [r7, #0]
 801dffc:	2b0c      	cmp	r3, #12
 801dffe:	d104      	bne.n	801e00a <HAL_TIM_PWM_Start+0xe6>
 801e000:	687b      	ldr	r3, [r7, #4]
 801e002:	2202      	movs	r2, #2
 801e004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e008:	e00b      	b.n	801e022 <HAL_TIM_PWM_Start+0xfe>
 801e00a:	683b      	ldr	r3, [r7, #0]
 801e00c:	2b10      	cmp	r3, #16
 801e00e:	d104      	bne.n	801e01a <HAL_TIM_PWM_Start+0xf6>
 801e010:	687b      	ldr	r3, [r7, #4]
 801e012:	2202      	movs	r2, #2
 801e014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e018:	e003      	b.n	801e022 <HAL_TIM_PWM_Start+0xfe>
 801e01a:	687b      	ldr	r3, [r7, #4]
 801e01c:	2202      	movs	r2, #2
 801e01e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801e022:	687b      	ldr	r3, [r7, #4]
 801e024:	681b      	ldr	r3, [r3, #0]
 801e026:	2201      	movs	r2, #1
 801e028:	6839      	ldr	r1, [r7, #0]
 801e02a:	4618      	mov	r0, r3
 801e02c:	f000 ffb0 	bl	801ef90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801e030:	687b      	ldr	r3, [r7, #4]
 801e032:	681b      	ldr	r3, [r3, #0]
 801e034:	4a38      	ldr	r2, [pc, #224]	; (801e118 <HAL_TIM_PWM_Start+0x1f4>)
 801e036:	4293      	cmp	r3, r2
 801e038:	d018      	beq.n	801e06c <HAL_TIM_PWM_Start+0x148>
 801e03a:	687b      	ldr	r3, [r7, #4]
 801e03c:	681b      	ldr	r3, [r3, #0]
 801e03e:	4a37      	ldr	r2, [pc, #220]	; (801e11c <HAL_TIM_PWM_Start+0x1f8>)
 801e040:	4293      	cmp	r3, r2
 801e042:	d013      	beq.n	801e06c <HAL_TIM_PWM_Start+0x148>
 801e044:	687b      	ldr	r3, [r7, #4]
 801e046:	681b      	ldr	r3, [r3, #0]
 801e048:	4a35      	ldr	r2, [pc, #212]	; (801e120 <HAL_TIM_PWM_Start+0x1fc>)
 801e04a:	4293      	cmp	r3, r2
 801e04c:	d00e      	beq.n	801e06c <HAL_TIM_PWM_Start+0x148>
 801e04e:	687b      	ldr	r3, [r7, #4]
 801e050:	681b      	ldr	r3, [r3, #0]
 801e052:	4a34      	ldr	r2, [pc, #208]	; (801e124 <HAL_TIM_PWM_Start+0x200>)
 801e054:	4293      	cmp	r3, r2
 801e056:	d009      	beq.n	801e06c <HAL_TIM_PWM_Start+0x148>
 801e058:	687b      	ldr	r3, [r7, #4]
 801e05a:	681b      	ldr	r3, [r3, #0]
 801e05c:	4a32      	ldr	r2, [pc, #200]	; (801e128 <HAL_TIM_PWM_Start+0x204>)
 801e05e:	4293      	cmp	r3, r2
 801e060:	d004      	beq.n	801e06c <HAL_TIM_PWM_Start+0x148>
 801e062:	687b      	ldr	r3, [r7, #4]
 801e064:	681b      	ldr	r3, [r3, #0]
 801e066:	4a31      	ldr	r2, [pc, #196]	; (801e12c <HAL_TIM_PWM_Start+0x208>)
 801e068:	4293      	cmp	r3, r2
 801e06a:	d101      	bne.n	801e070 <HAL_TIM_PWM_Start+0x14c>
 801e06c:	2301      	movs	r3, #1
 801e06e:	e000      	b.n	801e072 <HAL_TIM_PWM_Start+0x14e>
 801e070:	2300      	movs	r3, #0
 801e072:	2b00      	cmp	r3, #0
 801e074:	d007      	beq.n	801e086 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801e076:	687b      	ldr	r3, [r7, #4]
 801e078:	681b      	ldr	r3, [r3, #0]
 801e07a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e07c:	687b      	ldr	r3, [r7, #4]
 801e07e:	681b      	ldr	r3, [r3, #0]
 801e080:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801e084:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e086:	687b      	ldr	r3, [r7, #4]
 801e088:	681b      	ldr	r3, [r3, #0]
 801e08a:	4a23      	ldr	r2, [pc, #140]	; (801e118 <HAL_TIM_PWM_Start+0x1f4>)
 801e08c:	4293      	cmp	r3, r2
 801e08e:	d01d      	beq.n	801e0cc <HAL_TIM_PWM_Start+0x1a8>
 801e090:	687b      	ldr	r3, [r7, #4]
 801e092:	681b      	ldr	r3, [r3, #0]
 801e094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e098:	d018      	beq.n	801e0cc <HAL_TIM_PWM_Start+0x1a8>
 801e09a:	687b      	ldr	r3, [r7, #4]
 801e09c:	681b      	ldr	r3, [r3, #0]
 801e09e:	4a24      	ldr	r2, [pc, #144]	; (801e130 <HAL_TIM_PWM_Start+0x20c>)
 801e0a0:	4293      	cmp	r3, r2
 801e0a2:	d013      	beq.n	801e0cc <HAL_TIM_PWM_Start+0x1a8>
 801e0a4:	687b      	ldr	r3, [r7, #4]
 801e0a6:	681b      	ldr	r3, [r3, #0]
 801e0a8:	4a22      	ldr	r2, [pc, #136]	; (801e134 <HAL_TIM_PWM_Start+0x210>)
 801e0aa:	4293      	cmp	r3, r2
 801e0ac:	d00e      	beq.n	801e0cc <HAL_TIM_PWM_Start+0x1a8>
 801e0ae:	687b      	ldr	r3, [r7, #4]
 801e0b0:	681b      	ldr	r3, [r3, #0]
 801e0b2:	4a1a      	ldr	r2, [pc, #104]	; (801e11c <HAL_TIM_PWM_Start+0x1f8>)
 801e0b4:	4293      	cmp	r3, r2
 801e0b6:	d009      	beq.n	801e0cc <HAL_TIM_PWM_Start+0x1a8>
 801e0b8:	687b      	ldr	r3, [r7, #4]
 801e0ba:	681b      	ldr	r3, [r3, #0]
 801e0bc:	4a18      	ldr	r2, [pc, #96]	; (801e120 <HAL_TIM_PWM_Start+0x1fc>)
 801e0be:	4293      	cmp	r3, r2
 801e0c0:	d004      	beq.n	801e0cc <HAL_TIM_PWM_Start+0x1a8>
 801e0c2:	687b      	ldr	r3, [r7, #4]
 801e0c4:	681b      	ldr	r3, [r3, #0]
 801e0c6:	4a19      	ldr	r2, [pc, #100]	; (801e12c <HAL_TIM_PWM_Start+0x208>)
 801e0c8:	4293      	cmp	r3, r2
 801e0ca:	d115      	bne.n	801e0f8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	681b      	ldr	r3, [r3, #0]
 801e0d0:	689a      	ldr	r2, [r3, #8]
 801e0d2:	4b19      	ldr	r3, [pc, #100]	; (801e138 <HAL_TIM_PWM_Start+0x214>)
 801e0d4:	4013      	ands	r3, r2
 801e0d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e0d8:	68fb      	ldr	r3, [r7, #12]
 801e0da:	2b06      	cmp	r3, #6
 801e0dc:	d015      	beq.n	801e10a <HAL_TIM_PWM_Start+0x1e6>
 801e0de:	68fb      	ldr	r3, [r7, #12]
 801e0e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e0e4:	d011      	beq.n	801e10a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 801e0e6:	687b      	ldr	r3, [r7, #4]
 801e0e8:	681b      	ldr	r3, [r3, #0]
 801e0ea:	681a      	ldr	r2, [r3, #0]
 801e0ec:	687b      	ldr	r3, [r7, #4]
 801e0ee:	681b      	ldr	r3, [r3, #0]
 801e0f0:	f042 0201 	orr.w	r2, r2, #1
 801e0f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e0f6:	e008      	b.n	801e10a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801e0f8:	687b      	ldr	r3, [r7, #4]
 801e0fa:	681b      	ldr	r3, [r3, #0]
 801e0fc:	681a      	ldr	r2, [r3, #0]
 801e0fe:	687b      	ldr	r3, [r7, #4]
 801e100:	681b      	ldr	r3, [r3, #0]
 801e102:	f042 0201 	orr.w	r2, r2, #1
 801e106:	601a      	str	r2, [r3, #0]
 801e108:	e000      	b.n	801e10c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e10a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801e10c:	2300      	movs	r3, #0
}
 801e10e:	4618      	mov	r0, r3
 801e110:	3710      	adds	r7, #16
 801e112:	46bd      	mov	sp, r7
 801e114:	bd80      	pop	{r7, pc}
 801e116:	bf00      	nop
 801e118:	40012c00 	.word	0x40012c00
 801e11c:	40013400 	.word	0x40013400
 801e120:	40014000 	.word	0x40014000
 801e124:	40014400 	.word	0x40014400
 801e128:	40014800 	.word	0x40014800
 801e12c:	40015000 	.word	0x40015000
 801e130:	40000400 	.word	0x40000400
 801e134:	40000800 	.word	0x40000800
 801e138:	00010007 	.word	0x00010007

0801e13c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801e13c:	b580      	push	{r7, lr}
 801e13e:	b082      	sub	sp, #8
 801e140:	af00      	add	r7, sp, #0
 801e142:	6078      	str	r0, [r7, #4]
 801e144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801e146:	687b      	ldr	r3, [r7, #4]
 801e148:	681b      	ldr	r3, [r3, #0]
 801e14a:	2200      	movs	r2, #0
 801e14c:	6839      	ldr	r1, [r7, #0]
 801e14e:	4618      	mov	r0, r3
 801e150:	f000 ff1e 	bl	801ef90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801e154:	687b      	ldr	r3, [r7, #4]
 801e156:	681b      	ldr	r3, [r3, #0]
 801e158:	4a40      	ldr	r2, [pc, #256]	; (801e25c <HAL_TIM_PWM_Stop+0x120>)
 801e15a:	4293      	cmp	r3, r2
 801e15c:	d018      	beq.n	801e190 <HAL_TIM_PWM_Stop+0x54>
 801e15e:	687b      	ldr	r3, [r7, #4]
 801e160:	681b      	ldr	r3, [r3, #0]
 801e162:	4a3f      	ldr	r2, [pc, #252]	; (801e260 <HAL_TIM_PWM_Stop+0x124>)
 801e164:	4293      	cmp	r3, r2
 801e166:	d013      	beq.n	801e190 <HAL_TIM_PWM_Stop+0x54>
 801e168:	687b      	ldr	r3, [r7, #4]
 801e16a:	681b      	ldr	r3, [r3, #0]
 801e16c:	4a3d      	ldr	r2, [pc, #244]	; (801e264 <HAL_TIM_PWM_Stop+0x128>)
 801e16e:	4293      	cmp	r3, r2
 801e170:	d00e      	beq.n	801e190 <HAL_TIM_PWM_Stop+0x54>
 801e172:	687b      	ldr	r3, [r7, #4]
 801e174:	681b      	ldr	r3, [r3, #0]
 801e176:	4a3c      	ldr	r2, [pc, #240]	; (801e268 <HAL_TIM_PWM_Stop+0x12c>)
 801e178:	4293      	cmp	r3, r2
 801e17a:	d009      	beq.n	801e190 <HAL_TIM_PWM_Stop+0x54>
 801e17c:	687b      	ldr	r3, [r7, #4]
 801e17e:	681b      	ldr	r3, [r3, #0]
 801e180:	4a3a      	ldr	r2, [pc, #232]	; (801e26c <HAL_TIM_PWM_Stop+0x130>)
 801e182:	4293      	cmp	r3, r2
 801e184:	d004      	beq.n	801e190 <HAL_TIM_PWM_Stop+0x54>
 801e186:	687b      	ldr	r3, [r7, #4]
 801e188:	681b      	ldr	r3, [r3, #0]
 801e18a:	4a39      	ldr	r2, [pc, #228]	; (801e270 <HAL_TIM_PWM_Stop+0x134>)
 801e18c:	4293      	cmp	r3, r2
 801e18e:	d101      	bne.n	801e194 <HAL_TIM_PWM_Stop+0x58>
 801e190:	2301      	movs	r3, #1
 801e192:	e000      	b.n	801e196 <HAL_TIM_PWM_Stop+0x5a>
 801e194:	2300      	movs	r3, #0
 801e196:	2b00      	cmp	r3, #0
 801e198:	d017      	beq.n	801e1ca <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801e19a:	687b      	ldr	r3, [r7, #4]
 801e19c:	681b      	ldr	r3, [r3, #0]
 801e19e:	6a1a      	ldr	r2, [r3, #32]
 801e1a0:	f241 1311 	movw	r3, #4369	; 0x1111
 801e1a4:	4013      	ands	r3, r2
 801e1a6:	2b00      	cmp	r3, #0
 801e1a8:	d10f      	bne.n	801e1ca <HAL_TIM_PWM_Stop+0x8e>
 801e1aa:	687b      	ldr	r3, [r7, #4]
 801e1ac:	681b      	ldr	r3, [r3, #0]
 801e1ae:	6a1a      	ldr	r2, [r3, #32]
 801e1b0:	f244 4344 	movw	r3, #17476	; 0x4444
 801e1b4:	4013      	ands	r3, r2
 801e1b6:	2b00      	cmp	r3, #0
 801e1b8:	d107      	bne.n	801e1ca <HAL_TIM_PWM_Stop+0x8e>
 801e1ba:	687b      	ldr	r3, [r7, #4]
 801e1bc:	681b      	ldr	r3, [r3, #0]
 801e1be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e1c0:	687b      	ldr	r3, [r7, #4]
 801e1c2:	681b      	ldr	r3, [r3, #0]
 801e1c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801e1c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801e1ca:	687b      	ldr	r3, [r7, #4]
 801e1cc:	681b      	ldr	r3, [r3, #0]
 801e1ce:	6a1a      	ldr	r2, [r3, #32]
 801e1d0:	f241 1311 	movw	r3, #4369	; 0x1111
 801e1d4:	4013      	ands	r3, r2
 801e1d6:	2b00      	cmp	r3, #0
 801e1d8:	d10f      	bne.n	801e1fa <HAL_TIM_PWM_Stop+0xbe>
 801e1da:	687b      	ldr	r3, [r7, #4]
 801e1dc:	681b      	ldr	r3, [r3, #0]
 801e1de:	6a1a      	ldr	r2, [r3, #32]
 801e1e0:	f244 4344 	movw	r3, #17476	; 0x4444
 801e1e4:	4013      	ands	r3, r2
 801e1e6:	2b00      	cmp	r3, #0
 801e1e8:	d107      	bne.n	801e1fa <HAL_TIM_PWM_Stop+0xbe>
 801e1ea:	687b      	ldr	r3, [r7, #4]
 801e1ec:	681b      	ldr	r3, [r3, #0]
 801e1ee:	681a      	ldr	r2, [r3, #0]
 801e1f0:	687b      	ldr	r3, [r7, #4]
 801e1f2:	681b      	ldr	r3, [r3, #0]
 801e1f4:	f022 0201 	bic.w	r2, r2, #1
 801e1f8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801e1fa:	683b      	ldr	r3, [r7, #0]
 801e1fc:	2b00      	cmp	r3, #0
 801e1fe:	d104      	bne.n	801e20a <HAL_TIM_PWM_Stop+0xce>
 801e200:	687b      	ldr	r3, [r7, #4]
 801e202:	2201      	movs	r2, #1
 801e204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e208:	e023      	b.n	801e252 <HAL_TIM_PWM_Stop+0x116>
 801e20a:	683b      	ldr	r3, [r7, #0]
 801e20c:	2b04      	cmp	r3, #4
 801e20e:	d104      	bne.n	801e21a <HAL_TIM_PWM_Stop+0xde>
 801e210:	687b      	ldr	r3, [r7, #4]
 801e212:	2201      	movs	r2, #1
 801e214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e218:	e01b      	b.n	801e252 <HAL_TIM_PWM_Stop+0x116>
 801e21a:	683b      	ldr	r3, [r7, #0]
 801e21c:	2b08      	cmp	r3, #8
 801e21e:	d104      	bne.n	801e22a <HAL_TIM_PWM_Stop+0xee>
 801e220:	687b      	ldr	r3, [r7, #4]
 801e222:	2201      	movs	r2, #1
 801e224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e228:	e013      	b.n	801e252 <HAL_TIM_PWM_Stop+0x116>
 801e22a:	683b      	ldr	r3, [r7, #0]
 801e22c:	2b0c      	cmp	r3, #12
 801e22e:	d104      	bne.n	801e23a <HAL_TIM_PWM_Stop+0xfe>
 801e230:	687b      	ldr	r3, [r7, #4]
 801e232:	2201      	movs	r2, #1
 801e234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e238:	e00b      	b.n	801e252 <HAL_TIM_PWM_Stop+0x116>
 801e23a:	683b      	ldr	r3, [r7, #0]
 801e23c:	2b10      	cmp	r3, #16
 801e23e:	d104      	bne.n	801e24a <HAL_TIM_PWM_Stop+0x10e>
 801e240:	687b      	ldr	r3, [r7, #4]
 801e242:	2201      	movs	r2, #1
 801e244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e248:	e003      	b.n	801e252 <HAL_TIM_PWM_Stop+0x116>
 801e24a:	687b      	ldr	r3, [r7, #4]
 801e24c:	2201      	movs	r2, #1
 801e24e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 801e252:	2300      	movs	r3, #0
}
 801e254:	4618      	mov	r0, r3
 801e256:	3708      	adds	r7, #8
 801e258:	46bd      	mov	sp, r7
 801e25a:	bd80      	pop	{r7, pc}
 801e25c:	40012c00 	.word	0x40012c00
 801e260:	40013400 	.word	0x40013400
 801e264:	40014000 	.word	0x40014000
 801e268:	40014400 	.word	0x40014400
 801e26c:	40014800 	.word	0x40014800
 801e270:	40015000 	.word	0x40015000

0801e274 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801e274:	b580      	push	{r7, lr}
 801e276:	b082      	sub	sp, #8
 801e278:	af00      	add	r7, sp, #0
 801e27a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801e27c:	687b      	ldr	r3, [r7, #4]
 801e27e:	681b      	ldr	r3, [r3, #0]
 801e280:	691b      	ldr	r3, [r3, #16]
 801e282:	f003 0302 	and.w	r3, r3, #2
 801e286:	2b02      	cmp	r3, #2
 801e288:	d122      	bne.n	801e2d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801e28a:	687b      	ldr	r3, [r7, #4]
 801e28c:	681b      	ldr	r3, [r3, #0]
 801e28e:	68db      	ldr	r3, [r3, #12]
 801e290:	f003 0302 	and.w	r3, r3, #2
 801e294:	2b02      	cmp	r3, #2
 801e296:	d11b      	bne.n	801e2d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801e298:	687b      	ldr	r3, [r7, #4]
 801e29a:	681b      	ldr	r3, [r3, #0]
 801e29c:	f06f 0202 	mvn.w	r2, #2
 801e2a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801e2a2:	687b      	ldr	r3, [r7, #4]
 801e2a4:	2201      	movs	r2, #1
 801e2a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801e2a8:	687b      	ldr	r3, [r7, #4]
 801e2aa:	681b      	ldr	r3, [r3, #0]
 801e2ac:	699b      	ldr	r3, [r3, #24]
 801e2ae:	f003 0303 	and.w	r3, r3, #3
 801e2b2:	2b00      	cmp	r3, #0
 801e2b4:	d003      	beq.n	801e2be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801e2b6:	6878      	ldr	r0, [r7, #4]
 801e2b8:	f000 fa84 	bl	801e7c4 <HAL_TIM_IC_CaptureCallback>
 801e2bc:	e005      	b.n	801e2ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801e2be:	6878      	ldr	r0, [r7, #4]
 801e2c0:	f000 fa76 	bl	801e7b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e2c4:	6878      	ldr	r0, [r7, #4]
 801e2c6:	f000 fa87 	bl	801e7d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e2ca:	687b      	ldr	r3, [r7, #4]
 801e2cc:	2200      	movs	r2, #0
 801e2ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801e2d0:	687b      	ldr	r3, [r7, #4]
 801e2d2:	681b      	ldr	r3, [r3, #0]
 801e2d4:	691b      	ldr	r3, [r3, #16]
 801e2d6:	f003 0304 	and.w	r3, r3, #4
 801e2da:	2b04      	cmp	r3, #4
 801e2dc:	d122      	bne.n	801e324 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801e2de:	687b      	ldr	r3, [r7, #4]
 801e2e0:	681b      	ldr	r3, [r3, #0]
 801e2e2:	68db      	ldr	r3, [r3, #12]
 801e2e4:	f003 0304 	and.w	r3, r3, #4
 801e2e8:	2b04      	cmp	r3, #4
 801e2ea:	d11b      	bne.n	801e324 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801e2ec:	687b      	ldr	r3, [r7, #4]
 801e2ee:	681b      	ldr	r3, [r3, #0]
 801e2f0:	f06f 0204 	mvn.w	r2, #4
 801e2f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801e2f6:	687b      	ldr	r3, [r7, #4]
 801e2f8:	2202      	movs	r2, #2
 801e2fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801e2fc:	687b      	ldr	r3, [r7, #4]
 801e2fe:	681b      	ldr	r3, [r3, #0]
 801e300:	699b      	ldr	r3, [r3, #24]
 801e302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e306:	2b00      	cmp	r3, #0
 801e308:	d003      	beq.n	801e312 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e30a:	6878      	ldr	r0, [r7, #4]
 801e30c:	f000 fa5a 	bl	801e7c4 <HAL_TIM_IC_CaptureCallback>
 801e310:	e005      	b.n	801e31e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e312:	6878      	ldr	r0, [r7, #4]
 801e314:	f000 fa4c 	bl	801e7b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e318:	6878      	ldr	r0, [r7, #4]
 801e31a:	f000 fa5d 	bl	801e7d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e31e:	687b      	ldr	r3, [r7, #4]
 801e320:	2200      	movs	r2, #0
 801e322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801e324:	687b      	ldr	r3, [r7, #4]
 801e326:	681b      	ldr	r3, [r3, #0]
 801e328:	691b      	ldr	r3, [r3, #16]
 801e32a:	f003 0308 	and.w	r3, r3, #8
 801e32e:	2b08      	cmp	r3, #8
 801e330:	d122      	bne.n	801e378 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801e332:	687b      	ldr	r3, [r7, #4]
 801e334:	681b      	ldr	r3, [r3, #0]
 801e336:	68db      	ldr	r3, [r3, #12]
 801e338:	f003 0308 	and.w	r3, r3, #8
 801e33c:	2b08      	cmp	r3, #8
 801e33e:	d11b      	bne.n	801e378 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801e340:	687b      	ldr	r3, [r7, #4]
 801e342:	681b      	ldr	r3, [r3, #0]
 801e344:	f06f 0208 	mvn.w	r2, #8
 801e348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801e34a:	687b      	ldr	r3, [r7, #4]
 801e34c:	2204      	movs	r2, #4
 801e34e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801e350:	687b      	ldr	r3, [r7, #4]
 801e352:	681b      	ldr	r3, [r3, #0]
 801e354:	69db      	ldr	r3, [r3, #28]
 801e356:	f003 0303 	and.w	r3, r3, #3
 801e35a:	2b00      	cmp	r3, #0
 801e35c:	d003      	beq.n	801e366 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e35e:	6878      	ldr	r0, [r7, #4]
 801e360:	f000 fa30 	bl	801e7c4 <HAL_TIM_IC_CaptureCallback>
 801e364:	e005      	b.n	801e372 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e366:	6878      	ldr	r0, [r7, #4]
 801e368:	f000 fa22 	bl	801e7b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e36c:	6878      	ldr	r0, [r7, #4]
 801e36e:	f000 fa33 	bl	801e7d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e372:	687b      	ldr	r3, [r7, #4]
 801e374:	2200      	movs	r2, #0
 801e376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801e378:	687b      	ldr	r3, [r7, #4]
 801e37a:	681b      	ldr	r3, [r3, #0]
 801e37c:	691b      	ldr	r3, [r3, #16]
 801e37e:	f003 0310 	and.w	r3, r3, #16
 801e382:	2b10      	cmp	r3, #16
 801e384:	d122      	bne.n	801e3cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801e386:	687b      	ldr	r3, [r7, #4]
 801e388:	681b      	ldr	r3, [r3, #0]
 801e38a:	68db      	ldr	r3, [r3, #12]
 801e38c:	f003 0310 	and.w	r3, r3, #16
 801e390:	2b10      	cmp	r3, #16
 801e392:	d11b      	bne.n	801e3cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801e394:	687b      	ldr	r3, [r7, #4]
 801e396:	681b      	ldr	r3, [r3, #0]
 801e398:	f06f 0210 	mvn.w	r2, #16
 801e39c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801e39e:	687b      	ldr	r3, [r7, #4]
 801e3a0:	2208      	movs	r2, #8
 801e3a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801e3a4:	687b      	ldr	r3, [r7, #4]
 801e3a6:	681b      	ldr	r3, [r3, #0]
 801e3a8:	69db      	ldr	r3, [r3, #28]
 801e3aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e3ae:	2b00      	cmp	r3, #0
 801e3b0:	d003      	beq.n	801e3ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e3b2:	6878      	ldr	r0, [r7, #4]
 801e3b4:	f000 fa06 	bl	801e7c4 <HAL_TIM_IC_CaptureCallback>
 801e3b8:	e005      	b.n	801e3c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e3ba:	6878      	ldr	r0, [r7, #4]
 801e3bc:	f000 f9f8 	bl	801e7b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e3c0:	6878      	ldr	r0, [r7, #4]
 801e3c2:	f000 fa09 	bl	801e7d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e3c6:	687b      	ldr	r3, [r7, #4]
 801e3c8:	2200      	movs	r2, #0
 801e3ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801e3cc:	687b      	ldr	r3, [r7, #4]
 801e3ce:	681b      	ldr	r3, [r3, #0]
 801e3d0:	691b      	ldr	r3, [r3, #16]
 801e3d2:	f003 0301 	and.w	r3, r3, #1
 801e3d6:	2b01      	cmp	r3, #1
 801e3d8:	d10e      	bne.n	801e3f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801e3da:	687b      	ldr	r3, [r7, #4]
 801e3dc:	681b      	ldr	r3, [r3, #0]
 801e3de:	68db      	ldr	r3, [r3, #12]
 801e3e0:	f003 0301 	and.w	r3, r3, #1
 801e3e4:	2b01      	cmp	r3, #1
 801e3e6:	d107      	bne.n	801e3f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801e3e8:	687b      	ldr	r3, [r7, #4]
 801e3ea:	681b      	ldr	r3, [r3, #0]
 801e3ec:	f06f 0201 	mvn.w	r2, #1
 801e3f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801e3f2:	6878      	ldr	r0, [r7, #4]
 801e3f4:	f000 f9d2 	bl	801e79c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801e3f8:	687b      	ldr	r3, [r7, #4]
 801e3fa:	681b      	ldr	r3, [r3, #0]
 801e3fc:	691b      	ldr	r3, [r3, #16]
 801e3fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e402:	2b80      	cmp	r3, #128	; 0x80
 801e404:	d10e      	bne.n	801e424 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801e406:	687b      	ldr	r3, [r7, #4]
 801e408:	681b      	ldr	r3, [r3, #0]
 801e40a:	68db      	ldr	r3, [r3, #12]
 801e40c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e410:	2b80      	cmp	r3, #128	; 0x80
 801e412:	d107      	bne.n	801e424 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801e414:	687b      	ldr	r3, [r7, #4]
 801e416:	681b      	ldr	r3, [r3, #0]
 801e418:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801e41c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801e41e:	6878      	ldr	r0, [r7, #4]
 801e420:	f000 ff26 	bl	801f270 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801e424:	687b      	ldr	r3, [r7, #4]
 801e426:	681b      	ldr	r3, [r3, #0]
 801e428:	691b      	ldr	r3, [r3, #16]
 801e42a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e42e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e432:	d10e      	bne.n	801e452 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801e434:	687b      	ldr	r3, [r7, #4]
 801e436:	681b      	ldr	r3, [r3, #0]
 801e438:	68db      	ldr	r3, [r3, #12]
 801e43a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e43e:	2b80      	cmp	r3, #128	; 0x80
 801e440:	d107      	bne.n	801e452 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801e442:	687b      	ldr	r3, [r7, #4]
 801e444:	681b      	ldr	r3, [r3, #0]
 801e446:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801e44a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801e44c:	6878      	ldr	r0, [r7, #4]
 801e44e:	f000 ff19 	bl	801f284 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801e452:	687b      	ldr	r3, [r7, #4]
 801e454:	681b      	ldr	r3, [r3, #0]
 801e456:	691b      	ldr	r3, [r3, #16]
 801e458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e45c:	2b40      	cmp	r3, #64	; 0x40
 801e45e:	d10e      	bne.n	801e47e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801e460:	687b      	ldr	r3, [r7, #4]
 801e462:	681b      	ldr	r3, [r3, #0]
 801e464:	68db      	ldr	r3, [r3, #12]
 801e466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e46a:	2b40      	cmp	r3, #64	; 0x40
 801e46c:	d107      	bne.n	801e47e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801e46e:	687b      	ldr	r3, [r7, #4]
 801e470:	681b      	ldr	r3, [r3, #0]
 801e472:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801e476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801e478:	6878      	ldr	r0, [r7, #4]
 801e47a:	f000 f9b7 	bl	801e7ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801e47e:	687b      	ldr	r3, [r7, #4]
 801e480:	681b      	ldr	r3, [r3, #0]
 801e482:	691b      	ldr	r3, [r3, #16]
 801e484:	f003 0320 	and.w	r3, r3, #32
 801e488:	2b20      	cmp	r3, #32
 801e48a:	d10e      	bne.n	801e4aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801e48c:	687b      	ldr	r3, [r7, #4]
 801e48e:	681b      	ldr	r3, [r3, #0]
 801e490:	68db      	ldr	r3, [r3, #12]
 801e492:	f003 0320 	and.w	r3, r3, #32
 801e496:	2b20      	cmp	r3, #32
 801e498:	d107      	bne.n	801e4aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801e49a:	687b      	ldr	r3, [r7, #4]
 801e49c:	681b      	ldr	r3, [r3, #0]
 801e49e:	f06f 0220 	mvn.w	r2, #32
 801e4a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801e4a4:	6878      	ldr	r0, [r7, #4]
 801e4a6:	f000 fed9 	bl	801f25c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 801e4aa:	687b      	ldr	r3, [r7, #4]
 801e4ac:	681b      	ldr	r3, [r3, #0]
 801e4ae:	691b      	ldr	r3, [r3, #16]
 801e4b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801e4b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e4b8:	d10f      	bne.n	801e4da <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 801e4ba:	687b      	ldr	r3, [r7, #4]
 801e4bc:	681b      	ldr	r3, [r3, #0]
 801e4be:	68db      	ldr	r3, [r3, #12]
 801e4c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801e4c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e4c8:	d107      	bne.n	801e4da <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 801e4ca:	687b      	ldr	r3, [r7, #4]
 801e4cc:	681b      	ldr	r3, [r3, #0]
 801e4ce:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 801e4d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 801e4d4:	6878      	ldr	r0, [r7, #4]
 801e4d6:	f000 fedf 	bl	801f298 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 801e4da:	687b      	ldr	r3, [r7, #4]
 801e4dc:	681b      	ldr	r3, [r3, #0]
 801e4de:	691b      	ldr	r3, [r3, #16]
 801e4e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801e4e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801e4e8:	d10f      	bne.n	801e50a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 801e4ea:	687b      	ldr	r3, [r7, #4]
 801e4ec:	681b      	ldr	r3, [r3, #0]
 801e4ee:	68db      	ldr	r3, [r3, #12]
 801e4f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801e4f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801e4f8:	d107      	bne.n	801e50a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 801e4fa:	687b      	ldr	r3, [r7, #4]
 801e4fc:	681b      	ldr	r3, [r3, #0]
 801e4fe:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 801e502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 801e504:	6878      	ldr	r0, [r7, #4]
 801e506:	f000 fed1 	bl	801f2ac <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 801e50a:	687b      	ldr	r3, [r7, #4]
 801e50c:	681b      	ldr	r3, [r3, #0]
 801e50e:	691b      	ldr	r3, [r3, #16]
 801e510:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801e514:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801e518:	d10f      	bne.n	801e53a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 801e51a:	687b      	ldr	r3, [r7, #4]
 801e51c:	681b      	ldr	r3, [r3, #0]
 801e51e:	68db      	ldr	r3, [r3, #12]
 801e520:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801e524:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801e528:	d107      	bne.n	801e53a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 801e52a:	687b      	ldr	r3, [r7, #4]
 801e52c:	681b      	ldr	r3, [r3, #0]
 801e52e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 801e532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 801e534:	6878      	ldr	r0, [r7, #4]
 801e536:	f000 fec3 	bl	801f2c0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 801e53a:	687b      	ldr	r3, [r7, #4]
 801e53c:	681b      	ldr	r3, [r3, #0]
 801e53e:	691b      	ldr	r3, [r3, #16]
 801e540:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801e544:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801e548:	d10f      	bne.n	801e56a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 801e54a:	687b      	ldr	r3, [r7, #4]
 801e54c:	681b      	ldr	r3, [r3, #0]
 801e54e:	68db      	ldr	r3, [r3, #12]
 801e550:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801e554:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801e558:	d107      	bne.n	801e56a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 801e55a:	687b      	ldr	r3, [r7, #4]
 801e55c:	681b      	ldr	r3, [r3, #0]
 801e55e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 801e562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 801e564:	6878      	ldr	r0, [r7, #4]
 801e566:	f000 feb5 	bl	801f2d4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801e56a:	bf00      	nop
 801e56c:	3708      	adds	r7, #8
 801e56e:	46bd      	mov	sp, r7
 801e570:	bd80      	pop	{r7, pc}
	...

0801e574 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801e574:	b580      	push	{r7, lr}
 801e576:	b086      	sub	sp, #24
 801e578:	af00      	add	r7, sp, #0
 801e57a:	60f8      	str	r0, [r7, #12]
 801e57c:	60b9      	str	r1, [r7, #8]
 801e57e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801e580:	2300      	movs	r3, #0
 801e582:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801e584:	68fb      	ldr	r3, [r7, #12]
 801e586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801e58a:	2b01      	cmp	r3, #1
 801e58c:	d101      	bne.n	801e592 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801e58e:	2302      	movs	r3, #2
 801e590:	e0ff      	b.n	801e792 <HAL_TIM_PWM_ConfigChannel+0x21e>
 801e592:	68fb      	ldr	r3, [r7, #12]
 801e594:	2201      	movs	r2, #1
 801e596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801e59a:	687b      	ldr	r3, [r7, #4]
 801e59c:	2b14      	cmp	r3, #20
 801e59e:	f200 80f0 	bhi.w	801e782 <HAL_TIM_PWM_ConfigChannel+0x20e>
 801e5a2:	a201      	add	r2, pc, #4	; (adr r2, 801e5a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801e5a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e5a8:	0801e5fd 	.word	0x0801e5fd
 801e5ac:	0801e783 	.word	0x0801e783
 801e5b0:	0801e783 	.word	0x0801e783
 801e5b4:	0801e783 	.word	0x0801e783
 801e5b8:	0801e63d 	.word	0x0801e63d
 801e5bc:	0801e783 	.word	0x0801e783
 801e5c0:	0801e783 	.word	0x0801e783
 801e5c4:	0801e783 	.word	0x0801e783
 801e5c8:	0801e67f 	.word	0x0801e67f
 801e5cc:	0801e783 	.word	0x0801e783
 801e5d0:	0801e783 	.word	0x0801e783
 801e5d4:	0801e783 	.word	0x0801e783
 801e5d8:	0801e6bf 	.word	0x0801e6bf
 801e5dc:	0801e783 	.word	0x0801e783
 801e5e0:	0801e783 	.word	0x0801e783
 801e5e4:	0801e783 	.word	0x0801e783
 801e5e8:	0801e701 	.word	0x0801e701
 801e5ec:	0801e783 	.word	0x0801e783
 801e5f0:	0801e783 	.word	0x0801e783
 801e5f4:	0801e783 	.word	0x0801e783
 801e5f8:	0801e741 	.word	0x0801e741
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801e5fc:	68fb      	ldr	r3, [r7, #12]
 801e5fe:	681b      	ldr	r3, [r3, #0]
 801e600:	68b9      	ldr	r1, [r7, #8]
 801e602:	4618      	mov	r0, r3
 801e604:	f000 f99a 	bl	801e93c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801e608:	68fb      	ldr	r3, [r7, #12]
 801e60a:	681b      	ldr	r3, [r3, #0]
 801e60c:	699a      	ldr	r2, [r3, #24]
 801e60e:	68fb      	ldr	r3, [r7, #12]
 801e610:	681b      	ldr	r3, [r3, #0]
 801e612:	f042 0208 	orr.w	r2, r2, #8
 801e616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801e618:	68fb      	ldr	r3, [r7, #12]
 801e61a:	681b      	ldr	r3, [r3, #0]
 801e61c:	699a      	ldr	r2, [r3, #24]
 801e61e:	68fb      	ldr	r3, [r7, #12]
 801e620:	681b      	ldr	r3, [r3, #0]
 801e622:	f022 0204 	bic.w	r2, r2, #4
 801e626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801e628:	68fb      	ldr	r3, [r7, #12]
 801e62a:	681b      	ldr	r3, [r3, #0]
 801e62c:	6999      	ldr	r1, [r3, #24]
 801e62e:	68bb      	ldr	r3, [r7, #8]
 801e630:	691a      	ldr	r2, [r3, #16]
 801e632:	68fb      	ldr	r3, [r7, #12]
 801e634:	681b      	ldr	r3, [r3, #0]
 801e636:	430a      	orrs	r2, r1
 801e638:	619a      	str	r2, [r3, #24]
      break;
 801e63a:	e0a5      	b.n	801e788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801e63c:	68fb      	ldr	r3, [r7, #12]
 801e63e:	681b      	ldr	r3, [r3, #0]
 801e640:	68b9      	ldr	r1, [r7, #8]
 801e642:	4618      	mov	r0, r3
 801e644:	f000 fa14 	bl	801ea70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801e648:	68fb      	ldr	r3, [r7, #12]
 801e64a:	681b      	ldr	r3, [r3, #0]
 801e64c:	699a      	ldr	r2, [r3, #24]
 801e64e:	68fb      	ldr	r3, [r7, #12]
 801e650:	681b      	ldr	r3, [r3, #0]
 801e652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801e658:	68fb      	ldr	r3, [r7, #12]
 801e65a:	681b      	ldr	r3, [r3, #0]
 801e65c:	699a      	ldr	r2, [r3, #24]
 801e65e:	68fb      	ldr	r3, [r7, #12]
 801e660:	681b      	ldr	r3, [r3, #0]
 801e662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801e668:	68fb      	ldr	r3, [r7, #12]
 801e66a:	681b      	ldr	r3, [r3, #0]
 801e66c:	6999      	ldr	r1, [r3, #24]
 801e66e:	68bb      	ldr	r3, [r7, #8]
 801e670:	691b      	ldr	r3, [r3, #16]
 801e672:	021a      	lsls	r2, r3, #8
 801e674:	68fb      	ldr	r3, [r7, #12]
 801e676:	681b      	ldr	r3, [r3, #0]
 801e678:	430a      	orrs	r2, r1
 801e67a:	619a      	str	r2, [r3, #24]
      break;
 801e67c:	e084      	b.n	801e788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801e67e:	68fb      	ldr	r3, [r7, #12]
 801e680:	681b      	ldr	r3, [r3, #0]
 801e682:	68b9      	ldr	r1, [r7, #8]
 801e684:	4618      	mov	r0, r3
 801e686:	f000 fa87 	bl	801eb98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801e68a:	68fb      	ldr	r3, [r7, #12]
 801e68c:	681b      	ldr	r3, [r3, #0]
 801e68e:	69da      	ldr	r2, [r3, #28]
 801e690:	68fb      	ldr	r3, [r7, #12]
 801e692:	681b      	ldr	r3, [r3, #0]
 801e694:	f042 0208 	orr.w	r2, r2, #8
 801e698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801e69a:	68fb      	ldr	r3, [r7, #12]
 801e69c:	681b      	ldr	r3, [r3, #0]
 801e69e:	69da      	ldr	r2, [r3, #28]
 801e6a0:	68fb      	ldr	r3, [r7, #12]
 801e6a2:	681b      	ldr	r3, [r3, #0]
 801e6a4:	f022 0204 	bic.w	r2, r2, #4
 801e6a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801e6aa:	68fb      	ldr	r3, [r7, #12]
 801e6ac:	681b      	ldr	r3, [r3, #0]
 801e6ae:	69d9      	ldr	r1, [r3, #28]
 801e6b0:	68bb      	ldr	r3, [r7, #8]
 801e6b2:	691a      	ldr	r2, [r3, #16]
 801e6b4:	68fb      	ldr	r3, [r7, #12]
 801e6b6:	681b      	ldr	r3, [r3, #0]
 801e6b8:	430a      	orrs	r2, r1
 801e6ba:	61da      	str	r2, [r3, #28]
      break;
 801e6bc:	e064      	b.n	801e788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801e6be:	68fb      	ldr	r3, [r7, #12]
 801e6c0:	681b      	ldr	r3, [r3, #0]
 801e6c2:	68b9      	ldr	r1, [r7, #8]
 801e6c4:	4618      	mov	r0, r3
 801e6c6:	f000 faf9 	bl	801ecbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801e6ca:	68fb      	ldr	r3, [r7, #12]
 801e6cc:	681b      	ldr	r3, [r3, #0]
 801e6ce:	69da      	ldr	r2, [r3, #28]
 801e6d0:	68fb      	ldr	r3, [r7, #12]
 801e6d2:	681b      	ldr	r3, [r3, #0]
 801e6d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e6d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801e6da:	68fb      	ldr	r3, [r7, #12]
 801e6dc:	681b      	ldr	r3, [r3, #0]
 801e6de:	69da      	ldr	r2, [r3, #28]
 801e6e0:	68fb      	ldr	r3, [r7, #12]
 801e6e2:	681b      	ldr	r3, [r3, #0]
 801e6e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e6e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801e6ea:	68fb      	ldr	r3, [r7, #12]
 801e6ec:	681b      	ldr	r3, [r3, #0]
 801e6ee:	69d9      	ldr	r1, [r3, #28]
 801e6f0:	68bb      	ldr	r3, [r7, #8]
 801e6f2:	691b      	ldr	r3, [r3, #16]
 801e6f4:	021a      	lsls	r2, r3, #8
 801e6f6:	68fb      	ldr	r3, [r7, #12]
 801e6f8:	681b      	ldr	r3, [r3, #0]
 801e6fa:	430a      	orrs	r2, r1
 801e6fc:	61da      	str	r2, [r3, #28]
      break;
 801e6fe:	e043      	b.n	801e788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801e700:	68fb      	ldr	r3, [r7, #12]
 801e702:	681b      	ldr	r3, [r3, #0]
 801e704:	68b9      	ldr	r1, [r7, #8]
 801e706:	4618      	mov	r0, r3
 801e708:	f000 fb6c 	bl	801ede4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801e70c:	68fb      	ldr	r3, [r7, #12]
 801e70e:	681b      	ldr	r3, [r3, #0]
 801e710:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e712:	68fb      	ldr	r3, [r7, #12]
 801e714:	681b      	ldr	r3, [r3, #0]
 801e716:	f042 0208 	orr.w	r2, r2, #8
 801e71a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801e71c:	68fb      	ldr	r3, [r7, #12]
 801e71e:	681b      	ldr	r3, [r3, #0]
 801e720:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e722:	68fb      	ldr	r3, [r7, #12]
 801e724:	681b      	ldr	r3, [r3, #0]
 801e726:	f022 0204 	bic.w	r2, r2, #4
 801e72a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801e72c:	68fb      	ldr	r3, [r7, #12]
 801e72e:	681b      	ldr	r3, [r3, #0]
 801e730:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801e732:	68bb      	ldr	r3, [r7, #8]
 801e734:	691a      	ldr	r2, [r3, #16]
 801e736:	68fb      	ldr	r3, [r7, #12]
 801e738:	681b      	ldr	r3, [r3, #0]
 801e73a:	430a      	orrs	r2, r1
 801e73c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801e73e:	e023      	b.n	801e788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801e740:	68fb      	ldr	r3, [r7, #12]
 801e742:	681b      	ldr	r3, [r3, #0]
 801e744:	68b9      	ldr	r1, [r7, #8]
 801e746:	4618      	mov	r0, r3
 801e748:	f000 fbb6 	bl	801eeb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801e74c:	68fb      	ldr	r3, [r7, #12]
 801e74e:	681b      	ldr	r3, [r3, #0]
 801e750:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e752:	68fb      	ldr	r3, [r7, #12]
 801e754:	681b      	ldr	r3, [r3, #0]
 801e756:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e75a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801e75c:	68fb      	ldr	r3, [r7, #12]
 801e75e:	681b      	ldr	r3, [r3, #0]
 801e760:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e762:	68fb      	ldr	r3, [r7, #12]
 801e764:	681b      	ldr	r3, [r3, #0]
 801e766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e76a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801e76c:	68fb      	ldr	r3, [r7, #12]
 801e76e:	681b      	ldr	r3, [r3, #0]
 801e770:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801e772:	68bb      	ldr	r3, [r7, #8]
 801e774:	691b      	ldr	r3, [r3, #16]
 801e776:	021a      	lsls	r2, r3, #8
 801e778:	68fb      	ldr	r3, [r7, #12]
 801e77a:	681b      	ldr	r3, [r3, #0]
 801e77c:	430a      	orrs	r2, r1
 801e77e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801e780:	e002      	b.n	801e788 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801e782:	2301      	movs	r3, #1
 801e784:	75fb      	strb	r3, [r7, #23]
      break;
 801e786:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801e788:	68fb      	ldr	r3, [r7, #12]
 801e78a:	2200      	movs	r2, #0
 801e78c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801e790:	7dfb      	ldrb	r3, [r7, #23]
}
 801e792:	4618      	mov	r0, r3
 801e794:	3718      	adds	r7, #24
 801e796:	46bd      	mov	sp, r7
 801e798:	bd80      	pop	{r7, pc}
 801e79a:	bf00      	nop

0801e79c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801e79c:	b480      	push	{r7}
 801e79e:	b083      	sub	sp, #12
 801e7a0:	af00      	add	r7, sp, #0
 801e7a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801e7a4:	bf00      	nop
 801e7a6:	370c      	adds	r7, #12
 801e7a8:	46bd      	mov	sp, r7
 801e7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7ae:	4770      	bx	lr

0801e7b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801e7b0:	b480      	push	{r7}
 801e7b2:	b083      	sub	sp, #12
 801e7b4:	af00      	add	r7, sp, #0
 801e7b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801e7b8:	bf00      	nop
 801e7ba:	370c      	adds	r7, #12
 801e7bc:	46bd      	mov	sp, r7
 801e7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7c2:	4770      	bx	lr

0801e7c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801e7c4:	b480      	push	{r7}
 801e7c6:	b083      	sub	sp, #12
 801e7c8:	af00      	add	r7, sp, #0
 801e7ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801e7cc:	bf00      	nop
 801e7ce:	370c      	adds	r7, #12
 801e7d0:	46bd      	mov	sp, r7
 801e7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7d6:	4770      	bx	lr

0801e7d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801e7d8:	b480      	push	{r7}
 801e7da:	b083      	sub	sp, #12
 801e7dc:	af00      	add	r7, sp, #0
 801e7de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801e7e0:	bf00      	nop
 801e7e2:	370c      	adds	r7, #12
 801e7e4:	46bd      	mov	sp, r7
 801e7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7ea:	4770      	bx	lr

0801e7ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801e7ec:	b480      	push	{r7}
 801e7ee:	b083      	sub	sp, #12
 801e7f0:	af00      	add	r7, sp, #0
 801e7f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801e7f4:	bf00      	nop
 801e7f6:	370c      	adds	r7, #12
 801e7f8:	46bd      	mov	sp, r7
 801e7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7fe:	4770      	bx	lr

0801e800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801e800:	b480      	push	{r7}
 801e802:	b085      	sub	sp, #20
 801e804:	af00      	add	r7, sp, #0
 801e806:	6078      	str	r0, [r7, #4]
 801e808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801e80a:	687b      	ldr	r3, [r7, #4]
 801e80c:	681b      	ldr	r3, [r3, #0]
 801e80e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801e810:	687b      	ldr	r3, [r7, #4]
 801e812:	4a42      	ldr	r2, [pc, #264]	; (801e91c <TIM_Base_SetConfig+0x11c>)
 801e814:	4293      	cmp	r3, r2
 801e816:	d013      	beq.n	801e840 <TIM_Base_SetConfig+0x40>
 801e818:	687b      	ldr	r3, [r7, #4]
 801e81a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e81e:	d00f      	beq.n	801e840 <TIM_Base_SetConfig+0x40>
 801e820:	687b      	ldr	r3, [r7, #4]
 801e822:	4a3f      	ldr	r2, [pc, #252]	; (801e920 <TIM_Base_SetConfig+0x120>)
 801e824:	4293      	cmp	r3, r2
 801e826:	d00b      	beq.n	801e840 <TIM_Base_SetConfig+0x40>
 801e828:	687b      	ldr	r3, [r7, #4]
 801e82a:	4a3e      	ldr	r2, [pc, #248]	; (801e924 <TIM_Base_SetConfig+0x124>)
 801e82c:	4293      	cmp	r3, r2
 801e82e:	d007      	beq.n	801e840 <TIM_Base_SetConfig+0x40>
 801e830:	687b      	ldr	r3, [r7, #4]
 801e832:	4a3d      	ldr	r2, [pc, #244]	; (801e928 <TIM_Base_SetConfig+0x128>)
 801e834:	4293      	cmp	r3, r2
 801e836:	d003      	beq.n	801e840 <TIM_Base_SetConfig+0x40>
 801e838:	687b      	ldr	r3, [r7, #4]
 801e83a:	4a3c      	ldr	r2, [pc, #240]	; (801e92c <TIM_Base_SetConfig+0x12c>)
 801e83c:	4293      	cmp	r3, r2
 801e83e:	d108      	bne.n	801e852 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801e840:	68fb      	ldr	r3, [r7, #12]
 801e842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801e846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801e848:	683b      	ldr	r3, [r7, #0]
 801e84a:	685b      	ldr	r3, [r3, #4]
 801e84c:	68fa      	ldr	r2, [r7, #12]
 801e84e:	4313      	orrs	r3, r2
 801e850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801e852:	687b      	ldr	r3, [r7, #4]
 801e854:	4a31      	ldr	r2, [pc, #196]	; (801e91c <TIM_Base_SetConfig+0x11c>)
 801e856:	4293      	cmp	r3, r2
 801e858:	d01f      	beq.n	801e89a <TIM_Base_SetConfig+0x9a>
 801e85a:	687b      	ldr	r3, [r7, #4]
 801e85c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e860:	d01b      	beq.n	801e89a <TIM_Base_SetConfig+0x9a>
 801e862:	687b      	ldr	r3, [r7, #4]
 801e864:	4a2e      	ldr	r2, [pc, #184]	; (801e920 <TIM_Base_SetConfig+0x120>)
 801e866:	4293      	cmp	r3, r2
 801e868:	d017      	beq.n	801e89a <TIM_Base_SetConfig+0x9a>
 801e86a:	687b      	ldr	r3, [r7, #4]
 801e86c:	4a2d      	ldr	r2, [pc, #180]	; (801e924 <TIM_Base_SetConfig+0x124>)
 801e86e:	4293      	cmp	r3, r2
 801e870:	d013      	beq.n	801e89a <TIM_Base_SetConfig+0x9a>
 801e872:	687b      	ldr	r3, [r7, #4]
 801e874:	4a2c      	ldr	r2, [pc, #176]	; (801e928 <TIM_Base_SetConfig+0x128>)
 801e876:	4293      	cmp	r3, r2
 801e878:	d00f      	beq.n	801e89a <TIM_Base_SetConfig+0x9a>
 801e87a:	687b      	ldr	r3, [r7, #4]
 801e87c:	4a2c      	ldr	r2, [pc, #176]	; (801e930 <TIM_Base_SetConfig+0x130>)
 801e87e:	4293      	cmp	r3, r2
 801e880:	d00b      	beq.n	801e89a <TIM_Base_SetConfig+0x9a>
 801e882:	687b      	ldr	r3, [r7, #4]
 801e884:	4a2b      	ldr	r2, [pc, #172]	; (801e934 <TIM_Base_SetConfig+0x134>)
 801e886:	4293      	cmp	r3, r2
 801e888:	d007      	beq.n	801e89a <TIM_Base_SetConfig+0x9a>
 801e88a:	687b      	ldr	r3, [r7, #4]
 801e88c:	4a2a      	ldr	r2, [pc, #168]	; (801e938 <TIM_Base_SetConfig+0x138>)
 801e88e:	4293      	cmp	r3, r2
 801e890:	d003      	beq.n	801e89a <TIM_Base_SetConfig+0x9a>
 801e892:	687b      	ldr	r3, [r7, #4]
 801e894:	4a25      	ldr	r2, [pc, #148]	; (801e92c <TIM_Base_SetConfig+0x12c>)
 801e896:	4293      	cmp	r3, r2
 801e898:	d108      	bne.n	801e8ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801e89a:	68fb      	ldr	r3, [r7, #12]
 801e89c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801e8a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801e8a2:	683b      	ldr	r3, [r7, #0]
 801e8a4:	68db      	ldr	r3, [r3, #12]
 801e8a6:	68fa      	ldr	r2, [r7, #12]
 801e8a8:	4313      	orrs	r3, r2
 801e8aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801e8ac:	68fb      	ldr	r3, [r7, #12]
 801e8ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801e8b2:	683b      	ldr	r3, [r7, #0]
 801e8b4:	695b      	ldr	r3, [r3, #20]
 801e8b6:	4313      	orrs	r3, r2
 801e8b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801e8ba:	687b      	ldr	r3, [r7, #4]
 801e8bc:	68fa      	ldr	r2, [r7, #12]
 801e8be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801e8c0:	683b      	ldr	r3, [r7, #0]
 801e8c2:	689a      	ldr	r2, [r3, #8]
 801e8c4:	687b      	ldr	r3, [r7, #4]
 801e8c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801e8c8:	683b      	ldr	r3, [r7, #0]
 801e8ca:	681a      	ldr	r2, [r3, #0]
 801e8cc:	687b      	ldr	r3, [r7, #4]
 801e8ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801e8d0:	687b      	ldr	r3, [r7, #4]
 801e8d2:	4a12      	ldr	r2, [pc, #72]	; (801e91c <TIM_Base_SetConfig+0x11c>)
 801e8d4:	4293      	cmp	r3, r2
 801e8d6:	d013      	beq.n	801e900 <TIM_Base_SetConfig+0x100>
 801e8d8:	687b      	ldr	r3, [r7, #4]
 801e8da:	4a13      	ldr	r2, [pc, #76]	; (801e928 <TIM_Base_SetConfig+0x128>)
 801e8dc:	4293      	cmp	r3, r2
 801e8de:	d00f      	beq.n	801e900 <TIM_Base_SetConfig+0x100>
 801e8e0:	687b      	ldr	r3, [r7, #4]
 801e8e2:	4a13      	ldr	r2, [pc, #76]	; (801e930 <TIM_Base_SetConfig+0x130>)
 801e8e4:	4293      	cmp	r3, r2
 801e8e6:	d00b      	beq.n	801e900 <TIM_Base_SetConfig+0x100>
 801e8e8:	687b      	ldr	r3, [r7, #4]
 801e8ea:	4a12      	ldr	r2, [pc, #72]	; (801e934 <TIM_Base_SetConfig+0x134>)
 801e8ec:	4293      	cmp	r3, r2
 801e8ee:	d007      	beq.n	801e900 <TIM_Base_SetConfig+0x100>
 801e8f0:	687b      	ldr	r3, [r7, #4]
 801e8f2:	4a11      	ldr	r2, [pc, #68]	; (801e938 <TIM_Base_SetConfig+0x138>)
 801e8f4:	4293      	cmp	r3, r2
 801e8f6:	d003      	beq.n	801e900 <TIM_Base_SetConfig+0x100>
 801e8f8:	687b      	ldr	r3, [r7, #4]
 801e8fa:	4a0c      	ldr	r2, [pc, #48]	; (801e92c <TIM_Base_SetConfig+0x12c>)
 801e8fc:	4293      	cmp	r3, r2
 801e8fe:	d103      	bne.n	801e908 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801e900:	683b      	ldr	r3, [r7, #0]
 801e902:	691a      	ldr	r2, [r3, #16]
 801e904:	687b      	ldr	r3, [r7, #4]
 801e906:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801e908:	687b      	ldr	r3, [r7, #4]
 801e90a:	2201      	movs	r2, #1
 801e90c:	615a      	str	r2, [r3, #20]
}
 801e90e:	bf00      	nop
 801e910:	3714      	adds	r7, #20
 801e912:	46bd      	mov	sp, r7
 801e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e918:	4770      	bx	lr
 801e91a:	bf00      	nop
 801e91c:	40012c00 	.word	0x40012c00
 801e920:	40000400 	.word	0x40000400
 801e924:	40000800 	.word	0x40000800
 801e928:	40013400 	.word	0x40013400
 801e92c:	40015000 	.word	0x40015000
 801e930:	40014000 	.word	0x40014000
 801e934:	40014400 	.word	0x40014400
 801e938:	40014800 	.word	0x40014800

0801e93c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801e93c:	b480      	push	{r7}
 801e93e:	b087      	sub	sp, #28
 801e940:	af00      	add	r7, sp, #0
 801e942:	6078      	str	r0, [r7, #4]
 801e944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801e946:	687b      	ldr	r3, [r7, #4]
 801e948:	6a1b      	ldr	r3, [r3, #32]
 801e94a:	f023 0201 	bic.w	r2, r3, #1
 801e94e:	687b      	ldr	r3, [r7, #4]
 801e950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801e952:	687b      	ldr	r3, [r7, #4]
 801e954:	6a1b      	ldr	r3, [r3, #32]
 801e956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801e958:	687b      	ldr	r3, [r7, #4]
 801e95a:	685b      	ldr	r3, [r3, #4]
 801e95c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801e95e:	687b      	ldr	r3, [r7, #4]
 801e960:	699b      	ldr	r3, [r3, #24]
 801e962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801e964:	68fb      	ldr	r3, [r7, #12]
 801e966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801e96a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801e96e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801e970:	68fb      	ldr	r3, [r7, #12]
 801e972:	f023 0303 	bic.w	r3, r3, #3
 801e976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801e978:	683b      	ldr	r3, [r7, #0]
 801e97a:	681b      	ldr	r3, [r3, #0]
 801e97c:	68fa      	ldr	r2, [r7, #12]
 801e97e:	4313      	orrs	r3, r2
 801e980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801e982:	697b      	ldr	r3, [r7, #20]
 801e984:	f023 0302 	bic.w	r3, r3, #2
 801e988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801e98a:	683b      	ldr	r3, [r7, #0]
 801e98c:	689b      	ldr	r3, [r3, #8]
 801e98e:	697a      	ldr	r2, [r7, #20]
 801e990:	4313      	orrs	r3, r2
 801e992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801e994:	687b      	ldr	r3, [r7, #4]
 801e996:	4a30      	ldr	r2, [pc, #192]	; (801ea58 <TIM_OC1_SetConfig+0x11c>)
 801e998:	4293      	cmp	r3, r2
 801e99a:	d013      	beq.n	801e9c4 <TIM_OC1_SetConfig+0x88>
 801e99c:	687b      	ldr	r3, [r7, #4]
 801e99e:	4a2f      	ldr	r2, [pc, #188]	; (801ea5c <TIM_OC1_SetConfig+0x120>)
 801e9a0:	4293      	cmp	r3, r2
 801e9a2:	d00f      	beq.n	801e9c4 <TIM_OC1_SetConfig+0x88>
 801e9a4:	687b      	ldr	r3, [r7, #4]
 801e9a6:	4a2e      	ldr	r2, [pc, #184]	; (801ea60 <TIM_OC1_SetConfig+0x124>)
 801e9a8:	4293      	cmp	r3, r2
 801e9aa:	d00b      	beq.n	801e9c4 <TIM_OC1_SetConfig+0x88>
 801e9ac:	687b      	ldr	r3, [r7, #4]
 801e9ae:	4a2d      	ldr	r2, [pc, #180]	; (801ea64 <TIM_OC1_SetConfig+0x128>)
 801e9b0:	4293      	cmp	r3, r2
 801e9b2:	d007      	beq.n	801e9c4 <TIM_OC1_SetConfig+0x88>
 801e9b4:	687b      	ldr	r3, [r7, #4]
 801e9b6:	4a2c      	ldr	r2, [pc, #176]	; (801ea68 <TIM_OC1_SetConfig+0x12c>)
 801e9b8:	4293      	cmp	r3, r2
 801e9ba:	d003      	beq.n	801e9c4 <TIM_OC1_SetConfig+0x88>
 801e9bc:	687b      	ldr	r3, [r7, #4]
 801e9be:	4a2b      	ldr	r2, [pc, #172]	; (801ea6c <TIM_OC1_SetConfig+0x130>)
 801e9c0:	4293      	cmp	r3, r2
 801e9c2:	d10c      	bne.n	801e9de <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801e9c4:	697b      	ldr	r3, [r7, #20]
 801e9c6:	f023 0308 	bic.w	r3, r3, #8
 801e9ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801e9cc:	683b      	ldr	r3, [r7, #0]
 801e9ce:	68db      	ldr	r3, [r3, #12]
 801e9d0:	697a      	ldr	r2, [r7, #20]
 801e9d2:	4313      	orrs	r3, r2
 801e9d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801e9d6:	697b      	ldr	r3, [r7, #20]
 801e9d8:	f023 0304 	bic.w	r3, r3, #4
 801e9dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801e9de:	687b      	ldr	r3, [r7, #4]
 801e9e0:	4a1d      	ldr	r2, [pc, #116]	; (801ea58 <TIM_OC1_SetConfig+0x11c>)
 801e9e2:	4293      	cmp	r3, r2
 801e9e4:	d013      	beq.n	801ea0e <TIM_OC1_SetConfig+0xd2>
 801e9e6:	687b      	ldr	r3, [r7, #4]
 801e9e8:	4a1c      	ldr	r2, [pc, #112]	; (801ea5c <TIM_OC1_SetConfig+0x120>)
 801e9ea:	4293      	cmp	r3, r2
 801e9ec:	d00f      	beq.n	801ea0e <TIM_OC1_SetConfig+0xd2>
 801e9ee:	687b      	ldr	r3, [r7, #4]
 801e9f0:	4a1b      	ldr	r2, [pc, #108]	; (801ea60 <TIM_OC1_SetConfig+0x124>)
 801e9f2:	4293      	cmp	r3, r2
 801e9f4:	d00b      	beq.n	801ea0e <TIM_OC1_SetConfig+0xd2>
 801e9f6:	687b      	ldr	r3, [r7, #4]
 801e9f8:	4a1a      	ldr	r2, [pc, #104]	; (801ea64 <TIM_OC1_SetConfig+0x128>)
 801e9fa:	4293      	cmp	r3, r2
 801e9fc:	d007      	beq.n	801ea0e <TIM_OC1_SetConfig+0xd2>
 801e9fe:	687b      	ldr	r3, [r7, #4]
 801ea00:	4a19      	ldr	r2, [pc, #100]	; (801ea68 <TIM_OC1_SetConfig+0x12c>)
 801ea02:	4293      	cmp	r3, r2
 801ea04:	d003      	beq.n	801ea0e <TIM_OC1_SetConfig+0xd2>
 801ea06:	687b      	ldr	r3, [r7, #4]
 801ea08:	4a18      	ldr	r2, [pc, #96]	; (801ea6c <TIM_OC1_SetConfig+0x130>)
 801ea0a:	4293      	cmp	r3, r2
 801ea0c:	d111      	bne.n	801ea32 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801ea0e:	693b      	ldr	r3, [r7, #16]
 801ea10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ea14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801ea16:	693b      	ldr	r3, [r7, #16]
 801ea18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801ea1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801ea1e:	683b      	ldr	r3, [r7, #0]
 801ea20:	695b      	ldr	r3, [r3, #20]
 801ea22:	693a      	ldr	r2, [r7, #16]
 801ea24:	4313      	orrs	r3, r2
 801ea26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801ea28:	683b      	ldr	r3, [r7, #0]
 801ea2a:	699b      	ldr	r3, [r3, #24]
 801ea2c:	693a      	ldr	r2, [r7, #16]
 801ea2e:	4313      	orrs	r3, r2
 801ea30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ea32:	687b      	ldr	r3, [r7, #4]
 801ea34:	693a      	ldr	r2, [r7, #16]
 801ea36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801ea38:	687b      	ldr	r3, [r7, #4]
 801ea3a:	68fa      	ldr	r2, [r7, #12]
 801ea3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801ea3e:	683b      	ldr	r3, [r7, #0]
 801ea40:	685a      	ldr	r2, [r3, #4]
 801ea42:	687b      	ldr	r3, [r7, #4]
 801ea44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ea46:	687b      	ldr	r3, [r7, #4]
 801ea48:	697a      	ldr	r2, [r7, #20]
 801ea4a:	621a      	str	r2, [r3, #32]
}
 801ea4c:	bf00      	nop
 801ea4e:	371c      	adds	r7, #28
 801ea50:	46bd      	mov	sp, r7
 801ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea56:	4770      	bx	lr
 801ea58:	40012c00 	.word	0x40012c00
 801ea5c:	40013400 	.word	0x40013400
 801ea60:	40014000 	.word	0x40014000
 801ea64:	40014400 	.word	0x40014400
 801ea68:	40014800 	.word	0x40014800
 801ea6c:	40015000 	.word	0x40015000

0801ea70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801ea70:	b480      	push	{r7}
 801ea72:	b087      	sub	sp, #28
 801ea74:	af00      	add	r7, sp, #0
 801ea76:	6078      	str	r0, [r7, #4]
 801ea78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801ea7a:	687b      	ldr	r3, [r7, #4]
 801ea7c:	6a1b      	ldr	r3, [r3, #32]
 801ea7e:	f023 0210 	bic.w	r2, r3, #16
 801ea82:	687b      	ldr	r3, [r7, #4]
 801ea84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ea86:	687b      	ldr	r3, [r7, #4]
 801ea88:	6a1b      	ldr	r3, [r3, #32]
 801ea8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ea8c:	687b      	ldr	r3, [r7, #4]
 801ea8e:	685b      	ldr	r3, [r3, #4]
 801ea90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801ea92:	687b      	ldr	r3, [r7, #4]
 801ea94:	699b      	ldr	r3, [r3, #24]
 801ea96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801ea98:	68fb      	ldr	r3, [r7, #12]
 801ea9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801ea9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801eaa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801eaa4:	68fb      	ldr	r3, [r7, #12]
 801eaa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801eaaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801eaac:	683b      	ldr	r3, [r7, #0]
 801eaae:	681b      	ldr	r3, [r3, #0]
 801eab0:	021b      	lsls	r3, r3, #8
 801eab2:	68fa      	ldr	r2, [r7, #12]
 801eab4:	4313      	orrs	r3, r2
 801eab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801eab8:	697b      	ldr	r3, [r7, #20]
 801eaba:	f023 0320 	bic.w	r3, r3, #32
 801eabe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801eac0:	683b      	ldr	r3, [r7, #0]
 801eac2:	689b      	ldr	r3, [r3, #8]
 801eac4:	011b      	lsls	r3, r3, #4
 801eac6:	697a      	ldr	r2, [r7, #20]
 801eac8:	4313      	orrs	r3, r2
 801eaca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801eacc:	687b      	ldr	r3, [r7, #4]
 801eace:	4a2c      	ldr	r2, [pc, #176]	; (801eb80 <TIM_OC2_SetConfig+0x110>)
 801ead0:	4293      	cmp	r3, r2
 801ead2:	d007      	beq.n	801eae4 <TIM_OC2_SetConfig+0x74>
 801ead4:	687b      	ldr	r3, [r7, #4]
 801ead6:	4a2b      	ldr	r2, [pc, #172]	; (801eb84 <TIM_OC2_SetConfig+0x114>)
 801ead8:	4293      	cmp	r3, r2
 801eada:	d003      	beq.n	801eae4 <TIM_OC2_SetConfig+0x74>
 801eadc:	687b      	ldr	r3, [r7, #4]
 801eade:	4a2a      	ldr	r2, [pc, #168]	; (801eb88 <TIM_OC2_SetConfig+0x118>)
 801eae0:	4293      	cmp	r3, r2
 801eae2:	d10d      	bne.n	801eb00 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801eae4:	697b      	ldr	r3, [r7, #20]
 801eae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801eaea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801eaec:	683b      	ldr	r3, [r7, #0]
 801eaee:	68db      	ldr	r3, [r3, #12]
 801eaf0:	011b      	lsls	r3, r3, #4
 801eaf2:	697a      	ldr	r2, [r7, #20]
 801eaf4:	4313      	orrs	r3, r2
 801eaf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801eaf8:	697b      	ldr	r3, [r7, #20]
 801eafa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801eafe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801eb00:	687b      	ldr	r3, [r7, #4]
 801eb02:	4a1f      	ldr	r2, [pc, #124]	; (801eb80 <TIM_OC2_SetConfig+0x110>)
 801eb04:	4293      	cmp	r3, r2
 801eb06:	d013      	beq.n	801eb30 <TIM_OC2_SetConfig+0xc0>
 801eb08:	687b      	ldr	r3, [r7, #4]
 801eb0a:	4a1e      	ldr	r2, [pc, #120]	; (801eb84 <TIM_OC2_SetConfig+0x114>)
 801eb0c:	4293      	cmp	r3, r2
 801eb0e:	d00f      	beq.n	801eb30 <TIM_OC2_SetConfig+0xc0>
 801eb10:	687b      	ldr	r3, [r7, #4]
 801eb12:	4a1e      	ldr	r2, [pc, #120]	; (801eb8c <TIM_OC2_SetConfig+0x11c>)
 801eb14:	4293      	cmp	r3, r2
 801eb16:	d00b      	beq.n	801eb30 <TIM_OC2_SetConfig+0xc0>
 801eb18:	687b      	ldr	r3, [r7, #4]
 801eb1a:	4a1d      	ldr	r2, [pc, #116]	; (801eb90 <TIM_OC2_SetConfig+0x120>)
 801eb1c:	4293      	cmp	r3, r2
 801eb1e:	d007      	beq.n	801eb30 <TIM_OC2_SetConfig+0xc0>
 801eb20:	687b      	ldr	r3, [r7, #4]
 801eb22:	4a1c      	ldr	r2, [pc, #112]	; (801eb94 <TIM_OC2_SetConfig+0x124>)
 801eb24:	4293      	cmp	r3, r2
 801eb26:	d003      	beq.n	801eb30 <TIM_OC2_SetConfig+0xc0>
 801eb28:	687b      	ldr	r3, [r7, #4]
 801eb2a:	4a17      	ldr	r2, [pc, #92]	; (801eb88 <TIM_OC2_SetConfig+0x118>)
 801eb2c:	4293      	cmp	r3, r2
 801eb2e:	d113      	bne.n	801eb58 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801eb30:	693b      	ldr	r3, [r7, #16]
 801eb32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801eb36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801eb38:	693b      	ldr	r3, [r7, #16]
 801eb3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801eb3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801eb40:	683b      	ldr	r3, [r7, #0]
 801eb42:	695b      	ldr	r3, [r3, #20]
 801eb44:	009b      	lsls	r3, r3, #2
 801eb46:	693a      	ldr	r2, [r7, #16]
 801eb48:	4313      	orrs	r3, r2
 801eb4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801eb4c:	683b      	ldr	r3, [r7, #0]
 801eb4e:	699b      	ldr	r3, [r3, #24]
 801eb50:	009b      	lsls	r3, r3, #2
 801eb52:	693a      	ldr	r2, [r7, #16]
 801eb54:	4313      	orrs	r3, r2
 801eb56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801eb58:	687b      	ldr	r3, [r7, #4]
 801eb5a:	693a      	ldr	r2, [r7, #16]
 801eb5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801eb5e:	687b      	ldr	r3, [r7, #4]
 801eb60:	68fa      	ldr	r2, [r7, #12]
 801eb62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801eb64:	683b      	ldr	r3, [r7, #0]
 801eb66:	685a      	ldr	r2, [r3, #4]
 801eb68:	687b      	ldr	r3, [r7, #4]
 801eb6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801eb6c:	687b      	ldr	r3, [r7, #4]
 801eb6e:	697a      	ldr	r2, [r7, #20]
 801eb70:	621a      	str	r2, [r3, #32]
}
 801eb72:	bf00      	nop
 801eb74:	371c      	adds	r7, #28
 801eb76:	46bd      	mov	sp, r7
 801eb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb7c:	4770      	bx	lr
 801eb7e:	bf00      	nop
 801eb80:	40012c00 	.word	0x40012c00
 801eb84:	40013400 	.word	0x40013400
 801eb88:	40015000 	.word	0x40015000
 801eb8c:	40014000 	.word	0x40014000
 801eb90:	40014400 	.word	0x40014400
 801eb94:	40014800 	.word	0x40014800

0801eb98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801eb98:	b480      	push	{r7}
 801eb9a:	b087      	sub	sp, #28
 801eb9c:	af00      	add	r7, sp, #0
 801eb9e:	6078      	str	r0, [r7, #4]
 801eba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801eba2:	687b      	ldr	r3, [r7, #4]
 801eba4:	6a1b      	ldr	r3, [r3, #32]
 801eba6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801ebaa:	687b      	ldr	r3, [r7, #4]
 801ebac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ebae:	687b      	ldr	r3, [r7, #4]
 801ebb0:	6a1b      	ldr	r3, [r3, #32]
 801ebb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ebb4:	687b      	ldr	r3, [r7, #4]
 801ebb6:	685b      	ldr	r3, [r3, #4]
 801ebb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801ebba:	687b      	ldr	r3, [r7, #4]
 801ebbc:	69db      	ldr	r3, [r3, #28]
 801ebbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801ebc0:	68fb      	ldr	r3, [r7, #12]
 801ebc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ebc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ebca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801ebcc:	68fb      	ldr	r3, [r7, #12]
 801ebce:	f023 0303 	bic.w	r3, r3, #3
 801ebd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801ebd4:	683b      	ldr	r3, [r7, #0]
 801ebd6:	681b      	ldr	r3, [r3, #0]
 801ebd8:	68fa      	ldr	r2, [r7, #12]
 801ebda:	4313      	orrs	r3, r2
 801ebdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801ebde:	697b      	ldr	r3, [r7, #20]
 801ebe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801ebe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801ebe6:	683b      	ldr	r3, [r7, #0]
 801ebe8:	689b      	ldr	r3, [r3, #8]
 801ebea:	021b      	lsls	r3, r3, #8
 801ebec:	697a      	ldr	r2, [r7, #20]
 801ebee:	4313      	orrs	r3, r2
 801ebf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801ebf2:	687b      	ldr	r3, [r7, #4]
 801ebf4:	4a2b      	ldr	r2, [pc, #172]	; (801eca4 <TIM_OC3_SetConfig+0x10c>)
 801ebf6:	4293      	cmp	r3, r2
 801ebf8:	d007      	beq.n	801ec0a <TIM_OC3_SetConfig+0x72>
 801ebfa:	687b      	ldr	r3, [r7, #4]
 801ebfc:	4a2a      	ldr	r2, [pc, #168]	; (801eca8 <TIM_OC3_SetConfig+0x110>)
 801ebfe:	4293      	cmp	r3, r2
 801ec00:	d003      	beq.n	801ec0a <TIM_OC3_SetConfig+0x72>
 801ec02:	687b      	ldr	r3, [r7, #4]
 801ec04:	4a29      	ldr	r2, [pc, #164]	; (801ecac <TIM_OC3_SetConfig+0x114>)
 801ec06:	4293      	cmp	r3, r2
 801ec08:	d10d      	bne.n	801ec26 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801ec0a:	697b      	ldr	r3, [r7, #20]
 801ec0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801ec10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801ec12:	683b      	ldr	r3, [r7, #0]
 801ec14:	68db      	ldr	r3, [r3, #12]
 801ec16:	021b      	lsls	r3, r3, #8
 801ec18:	697a      	ldr	r2, [r7, #20]
 801ec1a:	4313      	orrs	r3, r2
 801ec1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801ec1e:	697b      	ldr	r3, [r7, #20]
 801ec20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801ec24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ec26:	687b      	ldr	r3, [r7, #4]
 801ec28:	4a1e      	ldr	r2, [pc, #120]	; (801eca4 <TIM_OC3_SetConfig+0x10c>)
 801ec2a:	4293      	cmp	r3, r2
 801ec2c:	d013      	beq.n	801ec56 <TIM_OC3_SetConfig+0xbe>
 801ec2e:	687b      	ldr	r3, [r7, #4]
 801ec30:	4a1d      	ldr	r2, [pc, #116]	; (801eca8 <TIM_OC3_SetConfig+0x110>)
 801ec32:	4293      	cmp	r3, r2
 801ec34:	d00f      	beq.n	801ec56 <TIM_OC3_SetConfig+0xbe>
 801ec36:	687b      	ldr	r3, [r7, #4]
 801ec38:	4a1d      	ldr	r2, [pc, #116]	; (801ecb0 <TIM_OC3_SetConfig+0x118>)
 801ec3a:	4293      	cmp	r3, r2
 801ec3c:	d00b      	beq.n	801ec56 <TIM_OC3_SetConfig+0xbe>
 801ec3e:	687b      	ldr	r3, [r7, #4]
 801ec40:	4a1c      	ldr	r2, [pc, #112]	; (801ecb4 <TIM_OC3_SetConfig+0x11c>)
 801ec42:	4293      	cmp	r3, r2
 801ec44:	d007      	beq.n	801ec56 <TIM_OC3_SetConfig+0xbe>
 801ec46:	687b      	ldr	r3, [r7, #4]
 801ec48:	4a1b      	ldr	r2, [pc, #108]	; (801ecb8 <TIM_OC3_SetConfig+0x120>)
 801ec4a:	4293      	cmp	r3, r2
 801ec4c:	d003      	beq.n	801ec56 <TIM_OC3_SetConfig+0xbe>
 801ec4e:	687b      	ldr	r3, [r7, #4]
 801ec50:	4a16      	ldr	r2, [pc, #88]	; (801ecac <TIM_OC3_SetConfig+0x114>)
 801ec52:	4293      	cmp	r3, r2
 801ec54:	d113      	bne.n	801ec7e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801ec56:	693b      	ldr	r3, [r7, #16]
 801ec58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ec5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801ec5e:	693b      	ldr	r3, [r7, #16]
 801ec60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801ec64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801ec66:	683b      	ldr	r3, [r7, #0]
 801ec68:	695b      	ldr	r3, [r3, #20]
 801ec6a:	011b      	lsls	r3, r3, #4
 801ec6c:	693a      	ldr	r2, [r7, #16]
 801ec6e:	4313      	orrs	r3, r2
 801ec70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801ec72:	683b      	ldr	r3, [r7, #0]
 801ec74:	699b      	ldr	r3, [r3, #24]
 801ec76:	011b      	lsls	r3, r3, #4
 801ec78:	693a      	ldr	r2, [r7, #16]
 801ec7a:	4313      	orrs	r3, r2
 801ec7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ec7e:	687b      	ldr	r3, [r7, #4]
 801ec80:	693a      	ldr	r2, [r7, #16]
 801ec82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801ec84:	687b      	ldr	r3, [r7, #4]
 801ec86:	68fa      	ldr	r2, [r7, #12]
 801ec88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801ec8a:	683b      	ldr	r3, [r7, #0]
 801ec8c:	685a      	ldr	r2, [r3, #4]
 801ec8e:	687b      	ldr	r3, [r7, #4]
 801ec90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ec92:	687b      	ldr	r3, [r7, #4]
 801ec94:	697a      	ldr	r2, [r7, #20]
 801ec96:	621a      	str	r2, [r3, #32]
}
 801ec98:	bf00      	nop
 801ec9a:	371c      	adds	r7, #28
 801ec9c:	46bd      	mov	sp, r7
 801ec9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eca2:	4770      	bx	lr
 801eca4:	40012c00 	.word	0x40012c00
 801eca8:	40013400 	.word	0x40013400
 801ecac:	40015000 	.word	0x40015000
 801ecb0:	40014000 	.word	0x40014000
 801ecb4:	40014400 	.word	0x40014400
 801ecb8:	40014800 	.word	0x40014800

0801ecbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801ecbc:	b480      	push	{r7}
 801ecbe:	b087      	sub	sp, #28
 801ecc0:	af00      	add	r7, sp, #0
 801ecc2:	6078      	str	r0, [r7, #4]
 801ecc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801ecc6:	687b      	ldr	r3, [r7, #4]
 801ecc8:	6a1b      	ldr	r3, [r3, #32]
 801ecca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801ecce:	687b      	ldr	r3, [r7, #4]
 801ecd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ecd2:	687b      	ldr	r3, [r7, #4]
 801ecd4:	6a1b      	ldr	r3, [r3, #32]
 801ecd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ecd8:	687b      	ldr	r3, [r7, #4]
 801ecda:	685b      	ldr	r3, [r3, #4]
 801ecdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801ecde:	687b      	ldr	r3, [r7, #4]
 801ece0:	69db      	ldr	r3, [r3, #28]
 801ece2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801ece4:	68fb      	ldr	r3, [r7, #12]
 801ece6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801ecea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801ecee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801ecf0:	68fb      	ldr	r3, [r7, #12]
 801ecf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801ecf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801ecf8:	683b      	ldr	r3, [r7, #0]
 801ecfa:	681b      	ldr	r3, [r3, #0]
 801ecfc:	021b      	lsls	r3, r3, #8
 801ecfe:	68fa      	ldr	r2, [r7, #12]
 801ed00:	4313      	orrs	r3, r2
 801ed02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801ed04:	697b      	ldr	r3, [r7, #20]
 801ed06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801ed0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801ed0c:	683b      	ldr	r3, [r7, #0]
 801ed0e:	689b      	ldr	r3, [r3, #8]
 801ed10:	031b      	lsls	r3, r3, #12
 801ed12:	697a      	ldr	r2, [r7, #20]
 801ed14:	4313      	orrs	r3, r2
 801ed16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 801ed18:	687b      	ldr	r3, [r7, #4]
 801ed1a:	4a2c      	ldr	r2, [pc, #176]	; (801edcc <TIM_OC4_SetConfig+0x110>)
 801ed1c:	4293      	cmp	r3, r2
 801ed1e:	d007      	beq.n	801ed30 <TIM_OC4_SetConfig+0x74>
 801ed20:	687b      	ldr	r3, [r7, #4]
 801ed22:	4a2b      	ldr	r2, [pc, #172]	; (801edd0 <TIM_OC4_SetConfig+0x114>)
 801ed24:	4293      	cmp	r3, r2
 801ed26:	d003      	beq.n	801ed30 <TIM_OC4_SetConfig+0x74>
 801ed28:	687b      	ldr	r3, [r7, #4]
 801ed2a:	4a2a      	ldr	r2, [pc, #168]	; (801edd4 <TIM_OC4_SetConfig+0x118>)
 801ed2c:	4293      	cmp	r3, r2
 801ed2e:	d10d      	bne.n	801ed4c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 801ed30:	697b      	ldr	r3, [r7, #20]
 801ed32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801ed36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 801ed38:	683b      	ldr	r3, [r7, #0]
 801ed3a:	68db      	ldr	r3, [r3, #12]
 801ed3c:	031b      	lsls	r3, r3, #12
 801ed3e:	697a      	ldr	r2, [r7, #20]
 801ed40:	4313      	orrs	r3, r2
 801ed42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 801ed44:	697b      	ldr	r3, [r7, #20]
 801ed46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801ed4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ed4c:	687b      	ldr	r3, [r7, #4]
 801ed4e:	4a1f      	ldr	r2, [pc, #124]	; (801edcc <TIM_OC4_SetConfig+0x110>)
 801ed50:	4293      	cmp	r3, r2
 801ed52:	d013      	beq.n	801ed7c <TIM_OC4_SetConfig+0xc0>
 801ed54:	687b      	ldr	r3, [r7, #4]
 801ed56:	4a1e      	ldr	r2, [pc, #120]	; (801edd0 <TIM_OC4_SetConfig+0x114>)
 801ed58:	4293      	cmp	r3, r2
 801ed5a:	d00f      	beq.n	801ed7c <TIM_OC4_SetConfig+0xc0>
 801ed5c:	687b      	ldr	r3, [r7, #4]
 801ed5e:	4a1e      	ldr	r2, [pc, #120]	; (801edd8 <TIM_OC4_SetConfig+0x11c>)
 801ed60:	4293      	cmp	r3, r2
 801ed62:	d00b      	beq.n	801ed7c <TIM_OC4_SetConfig+0xc0>
 801ed64:	687b      	ldr	r3, [r7, #4]
 801ed66:	4a1d      	ldr	r2, [pc, #116]	; (801eddc <TIM_OC4_SetConfig+0x120>)
 801ed68:	4293      	cmp	r3, r2
 801ed6a:	d007      	beq.n	801ed7c <TIM_OC4_SetConfig+0xc0>
 801ed6c:	687b      	ldr	r3, [r7, #4]
 801ed6e:	4a1c      	ldr	r2, [pc, #112]	; (801ede0 <TIM_OC4_SetConfig+0x124>)
 801ed70:	4293      	cmp	r3, r2
 801ed72:	d003      	beq.n	801ed7c <TIM_OC4_SetConfig+0xc0>
 801ed74:	687b      	ldr	r3, [r7, #4]
 801ed76:	4a17      	ldr	r2, [pc, #92]	; (801edd4 <TIM_OC4_SetConfig+0x118>)
 801ed78:	4293      	cmp	r3, r2
 801ed7a:	d113      	bne.n	801eda4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801ed7c:	693b      	ldr	r3, [r7, #16]
 801ed7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801ed82:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 801ed84:	693b      	ldr	r3, [r7, #16]
 801ed86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801ed8a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801ed8c:	683b      	ldr	r3, [r7, #0]
 801ed8e:	695b      	ldr	r3, [r3, #20]
 801ed90:	019b      	lsls	r3, r3, #6
 801ed92:	693a      	ldr	r2, [r7, #16]
 801ed94:	4313      	orrs	r3, r2
 801ed96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 801ed98:	683b      	ldr	r3, [r7, #0]
 801ed9a:	699b      	ldr	r3, [r3, #24]
 801ed9c:	019b      	lsls	r3, r3, #6
 801ed9e:	693a      	ldr	r2, [r7, #16]
 801eda0:	4313      	orrs	r3, r2
 801eda2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801eda4:	687b      	ldr	r3, [r7, #4]
 801eda6:	693a      	ldr	r2, [r7, #16]
 801eda8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801edaa:	687b      	ldr	r3, [r7, #4]
 801edac:	68fa      	ldr	r2, [r7, #12]
 801edae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801edb0:	683b      	ldr	r3, [r7, #0]
 801edb2:	685a      	ldr	r2, [r3, #4]
 801edb4:	687b      	ldr	r3, [r7, #4]
 801edb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801edb8:	687b      	ldr	r3, [r7, #4]
 801edba:	697a      	ldr	r2, [r7, #20]
 801edbc:	621a      	str	r2, [r3, #32]
}
 801edbe:	bf00      	nop
 801edc0:	371c      	adds	r7, #28
 801edc2:	46bd      	mov	sp, r7
 801edc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edc8:	4770      	bx	lr
 801edca:	bf00      	nop
 801edcc:	40012c00 	.word	0x40012c00
 801edd0:	40013400 	.word	0x40013400
 801edd4:	40015000 	.word	0x40015000
 801edd8:	40014000 	.word	0x40014000
 801eddc:	40014400 	.word	0x40014400
 801ede0:	40014800 	.word	0x40014800

0801ede4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801ede4:	b480      	push	{r7}
 801ede6:	b087      	sub	sp, #28
 801ede8:	af00      	add	r7, sp, #0
 801edea:	6078      	str	r0, [r7, #4]
 801edec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801edee:	687b      	ldr	r3, [r7, #4]
 801edf0:	6a1b      	ldr	r3, [r3, #32]
 801edf2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801edf6:	687b      	ldr	r3, [r7, #4]
 801edf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801edfa:	687b      	ldr	r3, [r7, #4]
 801edfc:	6a1b      	ldr	r3, [r3, #32]
 801edfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ee00:	687b      	ldr	r3, [r7, #4]
 801ee02:	685b      	ldr	r3, [r3, #4]
 801ee04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801ee06:	687b      	ldr	r3, [r7, #4]
 801ee08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ee0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801ee0c:	68fb      	ldr	r3, [r7, #12]
 801ee0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ee12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ee16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801ee18:	683b      	ldr	r3, [r7, #0]
 801ee1a:	681b      	ldr	r3, [r3, #0]
 801ee1c:	68fa      	ldr	r2, [r7, #12]
 801ee1e:	4313      	orrs	r3, r2
 801ee20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801ee22:	693b      	ldr	r3, [r7, #16]
 801ee24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801ee28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801ee2a:	683b      	ldr	r3, [r7, #0]
 801ee2c:	689b      	ldr	r3, [r3, #8]
 801ee2e:	041b      	lsls	r3, r3, #16
 801ee30:	693a      	ldr	r2, [r7, #16]
 801ee32:	4313      	orrs	r3, r2
 801ee34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ee36:	687b      	ldr	r3, [r7, #4]
 801ee38:	4a19      	ldr	r2, [pc, #100]	; (801eea0 <TIM_OC5_SetConfig+0xbc>)
 801ee3a:	4293      	cmp	r3, r2
 801ee3c:	d013      	beq.n	801ee66 <TIM_OC5_SetConfig+0x82>
 801ee3e:	687b      	ldr	r3, [r7, #4]
 801ee40:	4a18      	ldr	r2, [pc, #96]	; (801eea4 <TIM_OC5_SetConfig+0xc0>)
 801ee42:	4293      	cmp	r3, r2
 801ee44:	d00f      	beq.n	801ee66 <TIM_OC5_SetConfig+0x82>
 801ee46:	687b      	ldr	r3, [r7, #4]
 801ee48:	4a17      	ldr	r2, [pc, #92]	; (801eea8 <TIM_OC5_SetConfig+0xc4>)
 801ee4a:	4293      	cmp	r3, r2
 801ee4c:	d00b      	beq.n	801ee66 <TIM_OC5_SetConfig+0x82>
 801ee4e:	687b      	ldr	r3, [r7, #4]
 801ee50:	4a16      	ldr	r2, [pc, #88]	; (801eeac <TIM_OC5_SetConfig+0xc8>)
 801ee52:	4293      	cmp	r3, r2
 801ee54:	d007      	beq.n	801ee66 <TIM_OC5_SetConfig+0x82>
 801ee56:	687b      	ldr	r3, [r7, #4]
 801ee58:	4a15      	ldr	r2, [pc, #84]	; (801eeb0 <TIM_OC5_SetConfig+0xcc>)
 801ee5a:	4293      	cmp	r3, r2
 801ee5c:	d003      	beq.n	801ee66 <TIM_OC5_SetConfig+0x82>
 801ee5e:	687b      	ldr	r3, [r7, #4]
 801ee60:	4a14      	ldr	r2, [pc, #80]	; (801eeb4 <TIM_OC5_SetConfig+0xd0>)
 801ee62:	4293      	cmp	r3, r2
 801ee64:	d109      	bne.n	801ee7a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801ee66:	697b      	ldr	r3, [r7, #20]
 801ee68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ee6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801ee6e:	683b      	ldr	r3, [r7, #0]
 801ee70:	695b      	ldr	r3, [r3, #20]
 801ee72:	021b      	lsls	r3, r3, #8
 801ee74:	697a      	ldr	r2, [r7, #20]
 801ee76:	4313      	orrs	r3, r2
 801ee78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ee7a:	687b      	ldr	r3, [r7, #4]
 801ee7c:	697a      	ldr	r2, [r7, #20]
 801ee7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801ee80:	687b      	ldr	r3, [r7, #4]
 801ee82:	68fa      	ldr	r2, [r7, #12]
 801ee84:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801ee86:	683b      	ldr	r3, [r7, #0]
 801ee88:	685a      	ldr	r2, [r3, #4]
 801ee8a:	687b      	ldr	r3, [r7, #4]
 801ee8c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ee8e:	687b      	ldr	r3, [r7, #4]
 801ee90:	693a      	ldr	r2, [r7, #16]
 801ee92:	621a      	str	r2, [r3, #32]
}
 801ee94:	bf00      	nop
 801ee96:	371c      	adds	r7, #28
 801ee98:	46bd      	mov	sp, r7
 801ee9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee9e:	4770      	bx	lr
 801eea0:	40012c00 	.word	0x40012c00
 801eea4:	40013400 	.word	0x40013400
 801eea8:	40014000 	.word	0x40014000
 801eeac:	40014400 	.word	0x40014400
 801eeb0:	40014800 	.word	0x40014800
 801eeb4:	40015000 	.word	0x40015000

0801eeb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801eeb8:	b480      	push	{r7}
 801eeba:	b087      	sub	sp, #28
 801eebc:	af00      	add	r7, sp, #0
 801eebe:	6078      	str	r0, [r7, #4]
 801eec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801eec2:	687b      	ldr	r3, [r7, #4]
 801eec4:	6a1b      	ldr	r3, [r3, #32]
 801eec6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801eeca:	687b      	ldr	r3, [r7, #4]
 801eecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801eece:	687b      	ldr	r3, [r7, #4]
 801eed0:	6a1b      	ldr	r3, [r3, #32]
 801eed2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801eed4:	687b      	ldr	r3, [r7, #4]
 801eed6:	685b      	ldr	r3, [r3, #4]
 801eed8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801eeda:	687b      	ldr	r3, [r7, #4]
 801eedc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801eede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801eee0:	68fb      	ldr	r3, [r7, #12]
 801eee2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801eee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801eeea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801eeec:	683b      	ldr	r3, [r7, #0]
 801eeee:	681b      	ldr	r3, [r3, #0]
 801eef0:	021b      	lsls	r3, r3, #8
 801eef2:	68fa      	ldr	r2, [r7, #12]
 801eef4:	4313      	orrs	r3, r2
 801eef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801eef8:	693b      	ldr	r3, [r7, #16]
 801eefa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801eefe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801ef00:	683b      	ldr	r3, [r7, #0]
 801ef02:	689b      	ldr	r3, [r3, #8]
 801ef04:	051b      	lsls	r3, r3, #20
 801ef06:	693a      	ldr	r2, [r7, #16]
 801ef08:	4313      	orrs	r3, r2
 801ef0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ef0c:	687b      	ldr	r3, [r7, #4]
 801ef0e:	4a1a      	ldr	r2, [pc, #104]	; (801ef78 <TIM_OC6_SetConfig+0xc0>)
 801ef10:	4293      	cmp	r3, r2
 801ef12:	d013      	beq.n	801ef3c <TIM_OC6_SetConfig+0x84>
 801ef14:	687b      	ldr	r3, [r7, #4]
 801ef16:	4a19      	ldr	r2, [pc, #100]	; (801ef7c <TIM_OC6_SetConfig+0xc4>)
 801ef18:	4293      	cmp	r3, r2
 801ef1a:	d00f      	beq.n	801ef3c <TIM_OC6_SetConfig+0x84>
 801ef1c:	687b      	ldr	r3, [r7, #4]
 801ef1e:	4a18      	ldr	r2, [pc, #96]	; (801ef80 <TIM_OC6_SetConfig+0xc8>)
 801ef20:	4293      	cmp	r3, r2
 801ef22:	d00b      	beq.n	801ef3c <TIM_OC6_SetConfig+0x84>
 801ef24:	687b      	ldr	r3, [r7, #4]
 801ef26:	4a17      	ldr	r2, [pc, #92]	; (801ef84 <TIM_OC6_SetConfig+0xcc>)
 801ef28:	4293      	cmp	r3, r2
 801ef2a:	d007      	beq.n	801ef3c <TIM_OC6_SetConfig+0x84>
 801ef2c:	687b      	ldr	r3, [r7, #4]
 801ef2e:	4a16      	ldr	r2, [pc, #88]	; (801ef88 <TIM_OC6_SetConfig+0xd0>)
 801ef30:	4293      	cmp	r3, r2
 801ef32:	d003      	beq.n	801ef3c <TIM_OC6_SetConfig+0x84>
 801ef34:	687b      	ldr	r3, [r7, #4]
 801ef36:	4a15      	ldr	r2, [pc, #84]	; (801ef8c <TIM_OC6_SetConfig+0xd4>)
 801ef38:	4293      	cmp	r3, r2
 801ef3a:	d109      	bne.n	801ef50 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801ef3c:	697b      	ldr	r3, [r7, #20]
 801ef3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801ef42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801ef44:	683b      	ldr	r3, [r7, #0]
 801ef46:	695b      	ldr	r3, [r3, #20]
 801ef48:	029b      	lsls	r3, r3, #10
 801ef4a:	697a      	ldr	r2, [r7, #20]
 801ef4c:	4313      	orrs	r3, r2
 801ef4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ef50:	687b      	ldr	r3, [r7, #4]
 801ef52:	697a      	ldr	r2, [r7, #20]
 801ef54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801ef56:	687b      	ldr	r3, [r7, #4]
 801ef58:	68fa      	ldr	r2, [r7, #12]
 801ef5a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801ef5c:	683b      	ldr	r3, [r7, #0]
 801ef5e:	685a      	ldr	r2, [r3, #4]
 801ef60:	687b      	ldr	r3, [r7, #4]
 801ef62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ef64:	687b      	ldr	r3, [r7, #4]
 801ef66:	693a      	ldr	r2, [r7, #16]
 801ef68:	621a      	str	r2, [r3, #32]
}
 801ef6a:	bf00      	nop
 801ef6c:	371c      	adds	r7, #28
 801ef6e:	46bd      	mov	sp, r7
 801ef70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef74:	4770      	bx	lr
 801ef76:	bf00      	nop
 801ef78:	40012c00 	.word	0x40012c00
 801ef7c:	40013400 	.word	0x40013400
 801ef80:	40014000 	.word	0x40014000
 801ef84:	40014400 	.word	0x40014400
 801ef88:	40014800 	.word	0x40014800
 801ef8c:	40015000 	.word	0x40015000

0801ef90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801ef90:	b480      	push	{r7}
 801ef92:	b087      	sub	sp, #28
 801ef94:	af00      	add	r7, sp, #0
 801ef96:	60f8      	str	r0, [r7, #12]
 801ef98:	60b9      	str	r1, [r7, #8]
 801ef9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801ef9c:	68bb      	ldr	r3, [r7, #8]
 801ef9e:	f003 031f 	and.w	r3, r3, #31
 801efa2:	2201      	movs	r2, #1
 801efa4:	fa02 f303 	lsl.w	r3, r2, r3
 801efa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801efaa:	68fb      	ldr	r3, [r7, #12]
 801efac:	6a1a      	ldr	r2, [r3, #32]
 801efae:	697b      	ldr	r3, [r7, #20]
 801efb0:	43db      	mvns	r3, r3
 801efb2:	401a      	ands	r2, r3
 801efb4:	68fb      	ldr	r3, [r7, #12]
 801efb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801efb8:	68fb      	ldr	r3, [r7, #12]
 801efba:	6a1a      	ldr	r2, [r3, #32]
 801efbc:	68bb      	ldr	r3, [r7, #8]
 801efbe:	f003 031f 	and.w	r3, r3, #31
 801efc2:	6879      	ldr	r1, [r7, #4]
 801efc4:	fa01 f303 	lsl.w	r3, r1, r3
 801efc8:	431a      	orrs	r2, r3
 801efca:	68fb      	ldr	r3, [r7, #12]
 801efcc:	621a      	str	r2, [r3, #32]
}
 801efce:	bf00      	nop
 801efd0:	371c      	adds	r7, #28
 801efd2:	46bd      	mov	sp, r7
 801efd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efd8:	4770      	bx	lr
	...

0801efdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801efdc:	b480      	push	{r7}
 801efde:	b085      	sub	sp, #20
 801efe0:	af00      	add	r7, sp, #0
 801efe2:	6078      	str	r0, [r7, #4]
 801efe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801efe6:	687b      	ldr	r3, [r7, #4]
 801efe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801efec:	2b01      	cmp	r3, #1
 801efee:	d101      	bne.n	801eff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801eff0:	2302      	movs	r3, #2
 801eff2:	e06f      	b.n	801f0d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 801eff4:	687b      	ldr	r3, [r7, #4]
 801eff6:	2201      	movs	r2, #1
 801eff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801effc:	687b      	ldr	r3, [r7, #4]
 801effe:	2202      	movs	r2, #2
 801f000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801f004:	687b      	ldr	r3, [r7, #4]
 801f006:	681b      	ldr	r3, [r3, #0]
 801f008:	685b      	ldr	r3, [r3, #4]
 801f00a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801f00c:	687b      	ldr	r3, [r7, #4]
 801f00e:	681b      	ldr	r3, [r3, #0]
 801f010:	689b      	ldr	r3, [r3, #8]
 801f012:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801f014:	687b      	ldr	r3, [r7, #4]
 801f016:	681b      	ldr	r3, [r3, #0]
 801f018:	4a31      	ldr	r2, [pc, #196]	; (801f0e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801f01a:	4293      	cmp	r3, r2
 801f01c:	d009      	beq.n	801f032 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801f01e:	687b      	ldr	r3, [r7, #4]
 801f020:	681b      	ldr	r3, [r3, #0]
 801f022:	4a30      	ldr	r2, [pc, #192]	; (801f0e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801f024:	4293      	cmp	r3, r2
 801f026:	d004      	beq.n	801f032 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801f028:	687b      	ldr	r3, [r7, #4]
 801f02a:	681b      	ldr	r3, [r3, #0]
 801f02c:	4a2e      	ldr	r2, [pc, #184]	; (801f0e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801f02e:	4293      	cmp	r3, r2
 801f030:	d108      	bne.n	801f044 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801f032:	68fb      	ldr	r3, [r7, #12]
 801f034:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801f038:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801f03a:	683b      	ldr	r3, [r7, #0]
 801f03c:	685b      	ldr	r3, [r3, #4]
 801f03e:	68fa      	ldr	r2, [r7, #12]
 801f040:	4313      	orrs	r3, r2
 801f042:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801f044:	68fb      	ldr	r3, [r7, #12]
 801f046:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 801f04a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801f04e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801f050:	683b      	ldr	r3, [r7, #0]
 801f052:	681b      	ldr	r3, [r3, #0]
 801f054:	68fa      	ldr	r2, [r7, #12]
 801f056:	4313      	orrs	r3, r2
 801f058:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801f05a:	687b      	ldr	r3, [r7, #4]
 801f05c:	681b      	ldr	r3, [r3, #0]
 801f05e:	68fa      	ldr	r2, [r7, #12]
 801f060:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801f062:	687b      	ldr	r3, [r7, #4]
 801f064:	681b      	ldr	r3, [r3, #0]
 801f066:	4a1e      	ldr	r2, [pc, #120]	; (801f0e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801f068:	4293      	cmp	r3, r2
 801f06a:	d01d      	beq.n	801f0a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f06c:	687b      	ldr	r3, [r7, #4]
 801f06e:	681b      	ldr	r3, [r3, #0]
 801f070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f074:	d018      	beq.n	801f0a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f076:	687b      	ldr	r3, [r7, #4]
 801f078:	681b      	ldr	r3, [r3, #0]
 801f07a:	4a1c      	ldr	r2, [pc, #112]	; (801f0ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801f07c:	4293      	cmp	r3, r2
 801f07e:	d013      	beq.n	801f0a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f080:	687b      	ldr	r3, [r7, #4]
 801f082:	681b      	ldr	r3, [r3, #0]
 801f084:	4a1a      	ldr	r2, [pc, #104]	; (801f0f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801f086:	4293      	cmp	r3, r2
 801f088:	d00e      	beq.n	801f0a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f08a:	687b      	ldr	r3, [r7, #4]
 801f08c:	681b      	ldr	r3, [r3, #0]
 801f08e:	4a15      	ldr	r2, [pc, #84]	; (801f0e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801f090:	4293      	cmp	r3, r2
 801f092:	d009      	beq.n	801f0a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f094:	687b      	ldr	r3, [r7, #4]
 801f096:	681b      	ldr	r3, [r3, #0]
 801f098:	4a16      	ldr	r2, [pc, #88]	; (801f0f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801f09a:	4293      	cmp	r3, r2
 801f09c:	d004      	beq.n	801f0a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f09e:	687b      	ldr	r3, [r7, #4]
 801f0a0:	681b      	ldr	r3, [r3, #0]
 801f0a2:	4a11      	ldr	r2, [pc, #68]	; (801f0e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801f0a4:	4293      	cmp	r3, r2
 801f0a6:	d10c      	bne.n	801f0c2 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801f0a8:	68bb      	ldr	r3, [r7, #8]
 801f0aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801f0ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801f0b0:	683b      	ldr	r3, [r7, #0]
 801f0b2:	689b      	ldr	r3, [r3, #8]
 801f0b4:	68ba      	ldr	r2, [r7, #8]
 801f0b6:	4313      	orrs	r3, r2
 801f0b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801f0ba:	687b      	ldr	r3, [r7, #4]
 801f0bc:	681b      	ldr	r3, [r3, #0]
 801f0be:	68ba      	ldr	r2, [r7, #8]
 801f0c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801f0c2:	687b      	ldr	r3, [r7, #4]
 801f0c4:	2201      	movs	r2, #1
 801f0c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801f0ca:	687b      	ldr	r3, [r7, #4]
 801f0cc:	2200      	movs	r2, #0
 801f0ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801f0d2:	2300      	movs	r3, #0
}
 801f0d4:	4618      	mov	r0, r3
 801f0d6:	3714      	adds	r7, #20
 801f0d8:	46bd      	mov	sp, r7
 801f0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0de:	4770      	bx	lr
 801f0e0:	40012c00 	.word	0x40012c00
 801f0e4:	40013400 	.word	0x40013400
 801f0e8:	40015000 	.word	0x40015000
 801f0ec:	40000400 	.word	0x40000400
 801f0f0:	40000800 	.word	0x40000800
 801f0f4:	40014000 	.word	0x40014000

0801f0f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801f0f8:	b480      	push	{r7}
 801f0fa:	b085      	sub	sp, #20
 801f0fc:	af00      	add	r7, sp, #0
 801f0fe:	6078      	str	r0, [r7, #4]
 801f100:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801f102:	2300      	movs	r3, #0
 801f104:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801f106:	687b      	ldr	r3, [r7, #4]
 801f108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f10c:	2b01      	cmp	r3, #1
 801f10e:	d101      	bne.n	801f114 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801f110:	2302      	movs	r3, #2
 801f112:	e096      	b.n	801f242 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 801f114:	687b      	ldr	r3, [r7, #4]
 801f116:	2201      	movs	r2, #1
 801f118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801f11c:	68fb      	ldr	r3, [r7, #12]
 801f11e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801f122:	683b      	ldr	r3, [r7, #0]
 801f124:	68db      	ldr	r3, [r3, #12]
 801f126:	4313      	orrs	r3, r2
 801f128:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801f12a:	68fb      	ldr	r3, [r7, #12]
 801f12c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801f130:	683b      	ldr	r3, [r7, #0]
 801f132:	689b      	ldr	r3, [r3, #8]
 801f134:	4313      	orrs	r3, r2
 801f136:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801f138:	68fb      	ldr	r3, [r7, #12]
 801f13a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801f13e:	683b      	ldr	r3, [r7, #0]
 801f140:	685b      	ldr	r3, [r3, #4]
 801f142:	4313      	orrs	r3, r2
 801f144:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801f146:	68fb      	ldr	r3, [r7, #12]
 801f148:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801f14c:	683b      	ldr	r3, [r7, #0]
 801f14e:	681b      	ldr	r3, [r3, #0]
 801f150:	4313      	orrs	r3, r2
 801f152:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801f154:	68fb      	ldr	r3, [r7, #12]
 801f156:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801f15a:	683b      	ldr	r3, [r7, #0]
 801f15c:	691b      	ldr	r3, [r3, #16]
 801f15e:	4313      	orrs	r3, r2
 801f160:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801f162:	68fb      	ldr	r3, [r7, #12]
 801f164:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801f168:	683b      	ldr	r3, [r7, #0]
 801f16a:	695b      	ldr	r3, [r3, #20]
 801f16c:	4313      	orrs	r3, r2
 801f16e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801f170:	68fb      	ldr	r3, [r7, #12]
 801f172:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801f176:	683b      	ldr	r3, [r7, #0]
 801f178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f17a:	4313      	orrs	r3, r2
 801f17c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801f17e:	68fb      	ldr	r3, [r7, #12]
 801f180:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801f184:	683b      	ldr	r3, [r7, #0]
 801f186:	699b      	ldr	r3, [r3, #24]
 801f188:	041b      	lsls	r3, r3, #16
 801f18a:	4313      	orrs	r3, r2
 801f18c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801f18e:	687b      	ldr	r3, [r7, #4]
 801f190:	681b      	ldr	r3, [r3, #0]
 801f192:	4a2f      	ldr	r2, [pc, #188]	; (801f250 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801f194:	4293      	cmp	r3, r2
 801f196:	d009      	beq.n	801f1ac <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801f198:	687b      	ldr	r3, [r7, #4]
 801f19a:	681b      	ldr	r3, [r3, #0]
 801f19c:	4a2d      	ldr	r2, [pc, #180]	; (801f254 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801f19e:	4293      	cmp	r3, r2
 801f1a0:	d004      	beq.n	801f1ac <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801f1a2:	687b      	ldr	r3, [r7, #4]
 801f1a4:	681b      	ldr	r3, [r3, #0]
 801f1a6:	4a2c      	ldr	r2, [pc, #176]	; (801f258 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801f1a8:	4293      	cmp	r3, r2
 801f1aa:	d106      	bne.n	801f1ba <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801f1ac:	68fb      	ldr	r3, [r7, #12]
 801f1ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801f1b2:	683b      	ldr	r3, [r7, #0]
 801f1b4:	69db      	ldr	r3, [r3, #28]
 801f1b6:	4313      	orrs	r3, r2
 801f1b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801f1ba:	687b      	ldr	r3, [r7, #4]
 801f1bc:	681b      	ldr	r3, [r3, #0]
 801f1be:	4a24      	ldr	r2, [pc, #144]	; (801f250 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801f1c0:	4293      	cmp	r3, r2
 801f1c2:	d009      	beq.n	801f1d8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801f1c4:	687b      	ldr	r3, [r7, #4]
 801f1c6:	681b      	ldr	r3, [r3, #0]
 801f1c8:	4a22      	ldr	r2, [pc, #136]	; (801f254 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801f1ca:	4293      	cmp	r3, r2
 801f1cc:	d004      	beq.n	801f1d8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801f1ce:	687b      	ldr	r3, [r7, #4]
 801f1d0:	681b      	ldr	r3, [r3, #0]
 801f1d2:	4a21      	ldr	r2, [pc, #132]	; (801f258 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801f1d4:	4293      	cmp	r3, r2
 801f1d6:	d12b      	bne.n	801f230 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801f1d8:	68fb      	ldr	r3, [r7, #12]
 801f1da:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801f1de:	683b      	ldr	r3, [r7, #0]
 801f1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f1e2:	051b      	lsls	r3, r3, #20
 801f1e4:	4313      	orrs	r3, r2
 801f1e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801f1e8:	68fb      	ldr	r3, [r7, #12]
 801f1ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801f1ee:	683b      	ldr	r3, [r7, #0]
 801f1f0:	6a1b      	ldr	r3, [r3, #32]
 801f1f2:	4313      	orrs	r3, r2
 801f1f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801f1f6:	68fb      	ldr	r3, [r7, #12]
 801f1f8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801f1fc:	683b      	ldr	r3, [r7, #0]
 801f1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f200:	4313      	orrs	r3, r2
 801f202:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801f204:	687b      	ldr	r3, [r7, #4]
 801f206:	681b      	ldr	r3, [r3, #0]
 801f208:	4a11      	ldr	r2, [pc, #68]	; (801f250 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801f20a:	4293      	cmp	r3, r2
 801f20c:	d009      	beq.n	801f222 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801f20e:	687b      	ldr	r3, [r7, #4]
 801f210:	681b      	ldr	r3, [r3, #0]
 801f212:	4a10      	ldr	r2, [pc, #64]	; (801f254 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801f214:	4293      	cmp	r3, r2
 801f216:	d004      	beq.n	801f222 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801f218:	687b      	ldr	r3, [r7, #4]
 801f21a:	681b      	ldr	r3, [r3, #0]
 801f21c:	4a0e      	ldr	r2, [pc, #56]	; (801f258 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801f21e:	4293      	cmp	r3, r2
 801f220:	d106      	bne.n	801f230 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801f222:	68fb      	ldr	r3, [r7, #12]
 801f224:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801f228:	683b      	ldr	r3, [r7, #0]
 801f22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f22c:	4313      	orrs	r3, r2
 801f22e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801f230:	687b      	ldr	r3, [r7, #4]
 801f232:	681b      	ldr	r3, [r3, #0]
 801f234:	68fa      	ldr	r2, [r7, #12]
 801f236:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801f238:	687b      	ldr	r3, [r7, #4]
 801f23a:	2200      	movs	r2, #0
 801f23c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801f240:	2300      	movs	r3, #0
}
 801f242:	4618      	mov	r0, r3
 801f244:	3714      	adds	r7, #20
 801f246:	46bd      	mov	sp, r7
 801f248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f24c:	4770      	bx	lr
 801f24e:	bf00      	nop
 801f250:	40012c00 	.word	0x40012c00
 801f254:	40013400 	.word	0x40013400
 801f258:	40015000 	.word	0x40015000

0801f25c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801f25c:	b480      	push	{r7}
 801f25e:	b083      	sub	sp, #12
 801f260:	af00      	add	r7, sp, #0
 801f262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801f264:	bf00      	nop
 801f266:	370c      	adds	r7, #12
 801f268:	46bd      	mov	sp, r7
 801f26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f26e:	4770      	bx	lr

0801f270 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801f270:	b480      	push	{r7}
 801f272:	b083      	sub	sp, #12
 801f274:	af00      	add	r7, sp, #0
 801f276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801f278:	bf00      	nop
 801f27a:	370c      	adds	r7, #12
 801f27c:	46bd      	mov	sp, r7
 801f27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f282:	4770      	bx	lr

0801f284 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801f284:	b480      	push	{r7}
 801f286:	b083      	sub	sp, #12
 801f288:	af00      	add	r7, sp, #0
 801f28a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801f28c:	bf00      	nop
 801f28e:	370c      	adds	r7, #12
 801f290:	46bd      	mov	sp, r7
 801f292:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f296:	4770      	bx	lr

0801f298 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 801f298:	b480      	push	{r7}
 801f29a:	b083      	sub	sp, #12
 801f29c:	af00      	add	r7, sp, #0
 801f29e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 801f2a0:	bf00      	nop
 801f2a2:	370c      	adds	r7, #12
 801f2a4:	46bd      	mov	sp, r7
 801f2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2aa:	4770      	bx	lr

0801f2ac <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 801f2ac:	b480      	push	{r7}
 801f2ae:	b083      	sub	sp, #12
 801f2b0:	af00      	add	r7, sp, #0
 801f2b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 801f2b4:	bf00      	nop
 801f2b6:	370c      	adds	r7, #12
 801f2b8:	46bd      	mov	sp, r7
 801f2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2be:	4770      	bx	lr

0801f2c0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 801f2c0:	b480      	push	{r7}
 801f2c2:	b083      	sub	sp, #12
 801f2c4:	af00      	add	r7, sp, #0
 801f2c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 801f2c8:	bf00      	nop
 801f2ca:	370c      	adds	r7, #12
 801f2cc:	46bd      	mov	sp, r7
 801f2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2d2:	4770      	bx	lr

0801f2d4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 801f2d4:	b480      	push	{r7}
 801f2d6:	b083      	sub	sp, #12
 801f2d8:	af00      	add	r7, sp, #0
 801f2da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 801f2dc:	bf00      	nop
 801f2de:	370c      	adds	r7, #12
 801f2e0:	46bd      	mov	sp, r7
 801f2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2e6:	4770      	bx	lr

0801f2e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801f2e8:	b580      	push	{r7, lr}
 801f2ea:	b082      	sub	sp, #8
 801f2ec:	af00      	add	r7, sp, #0
 801f2ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801f2f0:	687b      	ldr	r3, [r7, #4]
 801f2f2:	2b00      	cmp	r3, #0
 801f2f4:	d101      	bne.n	801f2fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801f2f6:	2301      	movs	r3, #1
 801f2f8:	e042      	b.n	801f380 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801f2fa:	687b      	ldr	r3, [r7, #4]
 801f2fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f300:	2b00      	cmp	r3, #0
 801f302:	d106      	bne.n	801f312 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801f304:	687b      	ldr	r3, [r7, #4]
 801f306:	2200      	movs	r2, #0
 801f308:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801f30c:	6878      	ldr	r0, [r7, #4]
 801f30e:	f7f9 fae3 	bl	80188d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801f312:	687b      	ldr	r3, [r7, #4]
 801f314:	2224      	movs	r2, #36	; 0x24
 801f316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 801f31a:	687b      	ldr	r3, [r7, #4]
 801f31c:	681b      	ldr	r3, [r3, #0]
 801f31e:	681a      	ldr	r2, [r3, #0]
 801f320:	687b      	ldr	r3, [r7, #4]
 801f322:	681b      	ldr	r3, [r3, #0]
 801f324:	f022 0201 	bic.w	r2, r2, #1
 801f328:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801f32a:	6878      	ldr	r0, [r7, #4]
 801f32c:	f000 f8c2 	bl	801f4b4 <UART_SetConfig>
 801f330:	4603      	mov	r3, r0
 801f332:	2b01      	cmp	r3, #1
 801f334:	d101      	bne.n	801f33a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801f336:	2301      	movs	r3, #1
 801f338:	e022      	b.n	801f380 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801f33a:	687b      	ldr	r3, [r7, #4]
 801f33c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f33e:	2b00      	cmp	r3, #0
 801f340:	d002      	beq.n	801f348 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801f342:	6878      	ldr	r0, [r7, #4]
 801f344:	f000 fbb2 	bl	801faac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801f348:	687b      	ldr	r3, [r7, #4]
 801f34a:	681b      	ldr	r3, [r3, #0]
 801f34c:	685a      	ldr	r2, [r3, #4]
 801f34e:	687b      	ldr	r3, [r7, #4]
 801f350:	681b      	ldr	r3, [r3, #0]
 801f352:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801f356:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801f358:	687b      	ldr	r3, [r7, #4]
 801f35a:	681b      	ldr	r3, [r3, #0]
 801f35c:	689a      	ldr	r2, [r3, #8]
 801f35e:	687b      	ldr	r3, [r7, #4]
 801f360:	681b      	ldr	r3, [r3, #0]
 801f362:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801f366:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801f368:	687b      	ldr	r3, [r7, #4]
 801f36a:	681b      	ldr	r3, [r3, #0]
 801f36c:	681a      	ldr	r2, [r3, #0]
 801f36e:	687b      	ldr	r3, [r7, #4]
 801f370:	681b      	ldr	r3, [r3, #0]
 801f372:	f042 0201 	orr.w	r2, r2, #1
 801f376:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801f378:	6878      	ldr	r0, [r7, #4]
 801f37a:	f000 fc39 	bl	801fbf0 <UART_CheckIdleState>
 801f37e:	4603      	mov	r3, r0
}
 801f380:	4618      	mov	r0, r3
 801f382:	3708      	adds	r7, #8
 801f384:	46bd      	mov	sp, r7
 801f386:	bd80      	pop	{r7, pc}

0801f388 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801f388:	b580      	push	{r7, lr}
 801f38a:	b08a      	sub	sp, #40	; 0x28
 801f38c:	af02      	add	r7, sp, #8
 801f38e:	60f8      	str	r0, [r7, #12]
 801f390:	60b9      	str	r1, [r7, #8]
 801f392:	603b      	str	r3, [r7, #0]
 801f394:	4613      	mov	r3, r2
 801f396:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801f398:	68fb      	ldr	r3, [r7, #12]
 801f39a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f39e:	2b20      	cmp	r3, #32
 801f3a0:	f040 8083 	bne.w	801f4aa <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 801f3a4:	68bb      	ldr	r3, [r7, #8]
 801f3a6:	2b00      	cmp	r3, #0
 801f3a8:	d002      	beq.n	801f3b0 <HAL_UART_Transmit+0x28>
 801f3aa:	88fb      	ldrh	r3, [r7, #6]
 801f3ac:	2b00      	cmp	r3, #0
 801f3ae:	d101      	bne.n	801f3b4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801f3b0:	2301      	movs	r3, #1
 801f3b2:	e07b      	b.n	801f4ac <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 801f3b4:	68fb      	ldr	r3, [r7, #12]
 801f3b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801f3ba:	2b01      	cmp	r3, #1
 801f3bc:	d101      	bne.n	801f3c2 <HAL_UART_Transmit+0x3a>
 801f3be:	2302      	movs	r3, #2
 801f3c0:	e074      	b.n	801f4ac <HAL_UART_Transmit+0x124>
 801f3c2:	68fb      	ldr	r3, [r7, #12]
 801f3c4:	2201      	movs	r2, #1
 801f3c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f3ca:	68fb      	ldr	r3, [r7, #12]
 801f3cc:	2200      	movs	r2, #0
 801f3ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801f3d2:	68fb      	ldr	r3, [r7, #12]
 801f3d4:	2221      	movs	r2, #33	; 0x21
 801f3d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801f3da:	f7f9 fb6b 	bl	8018ab4 <HAL_GetTick>
 801f3de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801f3e0:	68fb      	ldr	r3, [r7, #12]
 801f3e2:	88fa      	ldrh	r2, [r7, #6]
 801f3e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801f3e8:	68fb      	ldr	r3, [r7, #12]
 801f3ea:	88fa      	ldrh	r2, [r7, #6]
 801f3ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801f3f0:	68fb      	ldr	r3, [r7, #12]
 801f3f2:	689b      	ldr	r3, [r3, #8]
 801f3f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f3f8:	d108      	bne.n	801f40c <HAL_UART_Transmit+0x84>
 801f3fa:	68fb      	ldr	r3, [r7, #12]
 801f3fc:	691b      	ldr	r3, [r3, #16]
 801f3fe:	2b00      	cmp	r3, #0
 801f400:	d104      	bne.n	801f40c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 801f402:	2300      	movs	r3, #0
 801f404:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801f406:	68bb      	ldr	r3, [r7, #8]
 801f408:	61bb      	str	r3, [r7, #24]
 801f40a:	e003      	b.n	801f414 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 801f40c:	68bb      	ldr	r3, [r7, #8]
 801f40e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801f410:	2300      	movs	r3, #0
 801f412:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 801f414:	68fb      	ldr	r3, [r7, #12]
 801f416:	2200      	movs	r2, #0
 801f418:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 801f41c:	e02c      	b.n	801f478 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801f41e:	683b      	ldr	r3, [r7, #0]
 801f420:	9300      	str	r3, [sp, #0]
 801f422:	697b      	ldr	r3, [r7, #20]
 801f424:	2200      	movs	r2, #0
 801f426:	2180      	movs	r1, #128	; 0x80
 801f428:	68f8      	ldr	r0, [r7, #12]
 801f42a:	f000 fc2c 	bl	801fc86 <UART_WaitOnFlagUntilTimeout>
 801f42e:	4603      	mov	r3, r0
 801f430:	2b00      	cmp	r3, #0
 801f432:	d001      	beq.n	801f438 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 801f434:	2303      	movs	r3, #3
 801f436:	e039      	b.n	801f4ac <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 801f438:	69fb      	ldr	r3, [r7, #28]
 801f43a:	2b00      	cmp	r3, #0
 801f43c:	d10b      	bne.n	801f456 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801f43e:	69bb      	ldr	r3, [r7, #24]
 801f440:	881b      	ldrh	r3, [r3, #0]
 801f442:	461a      	mov	r2, r3
 801f444:	68fb      	ldr	r3, [r7, #12]
 801f446:	681b      	ldr	r3, [r3, #0]
 801f448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801f44c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801f44e:	69bb      	ldr	r3, [r7, #24]
 801f450:	3302      	adds	r3, #2
 801f452:	61bb      	str	r3, [r7, #24]
 801f454:	e007      	b.n	801f466 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801f456:	69fb      	ldr	r3, [r7, #28]
 801f458:	781a      	ldrb	r2, [r3, #0]
 801f45a:	68fb      	ldr	r3, [r7, #12]
 801f45c:	681b      	ldr	r3, [r3, #0]
 801f45e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801f460:	69fb      	ldr	r3, [r7, #28]
 801f462:	3301      	adds	r3, #1
 801f464:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801f466:	68fb      	ldr	r3, [r7, #12]
 801f468:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801f46c:	b29b      	uxth	r3, r3
 801f46e:	3b01      	subs	r3, #1
 801f470:	b29a      	uxth	r2, r3
 801f472:	68fb      	ldr	r3, [r7, #12]
 801f474:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801f478:	68fb      	ldr	r3, [r7, #12]
 801f47a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801f47e:	b29b      	uxth	r3, r3
 801f480:	2b00      	cmp	r3, #0
 801f482:	d1cc      	bne.n	801f41e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801f484:	683b      	ldr	r3, [r7, #0]
 801f486:	9300      	str	r3, [sp, #0]
 801f488:	697b      	ldr	r3, [r7, #20]
 801f48a:	2200      	movs	r2, #0
 801f48c:	2140      	movs	r1, #64	; 0x40
 801f48e:	68f8      	ldr	r0, [r7, #12]
 801f490:	f000 fbf9 	bl	801fc86 <UART_WaitOnFlagUntilTimeout>
 801f494:	4603      	mov	r3, r0
 801f496:	2b00      	cmp	r3, #0
 801f498:	d001      	beq.n	801f49e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 801f49a:	2303      	movs	r3, #3
 801f49c:	e006      	b.n	801f4ac <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801f49e:	68fb      	ldr	r3, [r7, #12]
 801f4a0:	2220      	movs	r2, #32
 801f4a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 801f4a6:	2300      	movs	r3, #0
 801f4a8:	e000      	b.n	801f4ac <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 801f4aa:	2302      	movs	r3, #2
  }
}
 801f4ac:	4618      	mov	r0, r3
 801f4ae:	3720      	adds	r7, #32
 801f4b0:	46bd      	mov	sp, r7
 801f4b2:	bd80      	pop	{r7, pc}

0801f4b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801f4b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801f4b8:	b08c      	sub	sp, #48	; 0x30
 801f4ba:	af00      	add	r7, sp, #0
 801f4bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801f4be:	2300      	movs	r3, #0
 801f4c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801f4c4:	697b      	ldr	r3, [r7, #20]
 801f4c6:	689a      	ldr	r2, [r3, #8]
 801f4c8:	697b      	ldr	r3, [r7, #20]
 801f4ca:	691b      	ldr	r3, [r3, #16]
 801f4cc:	431a      	orrs	r2, r3
 801f4ce:	697b      	ldr	r3, [r7, #20]
 801f4d0:	695b      	ldr	r3, [r3, #20]
 801f4d2:	431a      	orrs	r2, r3
 801f4d4:	697b      	ldr	r3, [r7, #20]
 801f4d6:	69db      	ldr	r3, [r3, #28]
 801f4d8:	4313      	orrs	r3, r2
 801f4da:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801f4dc:	697b      	ldr	r3, [r7, #20]
 801f4de:	681b      	ldr	r3, [r3, #0]
 801f4e0:	681a      	ldr	r2, [r3, #0]
 801f4e2:	4baa      	ldr	r3, [pc, #680]	; (801f78c <UART_SetConfig+0x2d8>)
 801f4e4:	4013      	ands	r3, r2
 801f4e6:	697a      	ldr	r2, [r7, #20]
 801f4e8:	6812      	ldr	r2, [r2, #0]
 801f4ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f4ec:	430b      	orrs	r3, r1
 801f4ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801f4f0:	697b      	ldr	r3, [r7, #20]
 801f4f2:	681b      	ldr	r3, [r3, #0]
 801f4f4:	685b      	ldr	r3, [r3, #4]
 801f4f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801f4fa:	697b      	ldr	r3, [r7, #20]
 801f4fc:	68da      	ldr	r2, [r3, #12]
 801f4fe:	697b      	ldr	r3, [r7, #20]
 801f500:	681b      	ldr	r3, [r3, #0]
 801f502:	430a      	orrs	r2, r1
 801f504:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801f506:	697b      	ldr	r3, [r7, #20]
 801f508:	699b      	ldr	r3, [r3, #24]
 801f50a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801f50c:	697b      	ldr	r3, [r7, #20]
 801f50e:	681b      	ldr	r3, [r3, #0]
 801f510:	4a9f      	ldr	r2, [pc, #636]	; (801f790 <UART_SetConfig+0x2dc>)
 801f512:	4293      	cmp	r3, r2
 801f514:	d004      	beq.n	801f520 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801f516:	697b      	ldr	r3, [r7, #20]
 801f518:	6a1b      	ldr	r3, [r3, #32]
 801f51a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f51c:	4313      	orrs	r3, r2
 801f51e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801f520:	697b      	ldr	r3, [r7, #20]
 801f522:	681b      	ldr	r3, [r3, #0]
 801f524:	689b      	ldr	r3, [r3, #8]
 801f526:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801f52a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801f52e:	697a      	ldr	r2, [r7, #20]
 801f530:	6812      	ldr	r2, [r2, #0]
 801f532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f534:	430b      	orrs	r3, r1
 801f536:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801f538:	697b      	ldr	r3, [r7, #20]
 801f53a:	681b      	ldr	r3, [r3, #0]
 801f53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f53e:	f023 010f 	bic.w	r1, r3, #15
 801f542:	697b      	ldr	r3, [r7, #20]
 801f544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f546:	697b      	ldr	r3, [r7, #20]
 801f548:	681b      	ldr	r3, [r3, #0]
 801f54a:	430a      	orrs	r2, r1
 801f54c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801f54e:	697b      	ldr	r3, [r7, #20]
 801f550:	681b      	ldr	r3, [r3, #0]
 801f552:	4a90      	ldr	r2, [pc, #576]	; (801f794 <UART_SetConfig+0x2e0>)
 801f554:	4293      	cmp	r3, r2
 801f556:	d125      	bne.n	801f5a4 <UART_SetConfig+0xf0>
 801f558:	4b8f      	ldr	r3, [pc, #572]	; (801f798 <UART_SetConfig+0x2e4>)
 801f55a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f55e:	f003 0303 	and.w	r3, r3, #3
 801f562:	2b03      	cmp	r3, #3
 801f564:	d81a      	bhi.n	801f59c <UART_SetConfig+0xe8>
 801f566:	a201      	add	r2, pc, #4	; (adr r2, 801f56c <UART_SetConfig+0xb8>)
 801f568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f56c:	0801f57d 	.word	0x0801f57d
 801f570:	0801f58d 	.word	0x0801f58d
 801f574:	0801f585 	.word	0x0801f585
 801f578:	0801f595 	.word	0x0801f595
 801f57c:	2301      	movs	r3, #1
 801f57e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f582:	e116      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f584:	2302      	movs	r3, #2
 801f586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f58a:	e112      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f58c:	2304      	movs	r3, #4
 801f58e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f592:	e10e      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f594:	2308      	movs	r3, #8
 801f596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f59a:	e10a      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f59c:	2310      	movs	r3, #16
 801f59e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f5a2:	e106      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f5a4:	697b      	ldr	r3, [r7, #20]
 801f5a6:	681b      	ldr	r3, [r3, #0]
 801f5a8:	4a7c      	ldr	r2, [pc, #496]	; (801f79c <UART_SetConfig+0x2e8>)
 801f5aa:	4293      	cmp	r3, r2
 801f5ac:	d138      	bne.n	801f620 <UART_SetConfig+0x16c>
 801f5ae:	4b7a      	ldr	r3, [pc, #488]	; (801f798 <UART_SetConfig+0x2e4>)
 801f5b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f5b4:	f003 030c 	and.w	r3, r3, #12
 801f5b8:	2b0c      	cmp	r3, #12
 801f5ba:	d82d      	bhi.n	801f618 <UART_SetConfig+0x164>
 801f5bc:	a201      	add	r2, pc, #4	; (adr r2, 801f5c4 <UART_SetConfig+0x110>)
 801f5be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f5c2:	bf00      	nop
 801f5c4:	0801f5f9 	.word	0x0801f5f9
 801f5c8:	0801f619 	.word	0x0801f619
 801f5cc:	0801f619 	.word	0x0801f619
 801f5d0:	0801f619 	.word	0x0801f619
 801f5d4:	0801f609 	.word	0x0801f609
 801f5d8:	0801f619 	.word	0x0801f619
 801f5dc:	0801f619 	.word	0x0801f619
 801f5e0:	0801f619 	.word	0x0801f619
 801f5e4:	0801f601 	.word	0x0801f601
 801f5e8:	0801f619 	.word	0x0801f619
 801f5ec:	0801f619 	.word	0x0801f619
 801f5f0:	0801f619 	.word	0x0801f619
 801f5f4:	0801f611 	.word	0x0801f611
 801f5f8:	2300      	movs	r3, #0
 801f5fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f5fe:	e0d8      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f600:	2302      	movs	r3, #2
 801f602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f606:	e0d4      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f608:	2304      	movs	r3, #4
 801f60a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f60e:	e0d0      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f610:	2308      	movs	r3, #8
 801f612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f616:	e0cc      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f618:	2310      	movs	r3, #16
 801f61a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f61e:	e0c8      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f620:	697b      	ldr	r3, [r7, #20]
 801f622:	681b      	ldr	r3, [r3, #0]
 801f624:	4a5e      	ldr	r2, [pc, #376]	; (801f7a0 <UART_SetConfig+0x2ec>)
 801f626:	4293      	cmp	r3, r2
 801f628:	d125      	bne.n	801f676 <UART_SetConfig+0x1c2>
 801f62a:	4b5b      	ldr	r3, [pc, #364]	; (801f798 <UART_SetConfig+0x2e4>)
 801f62c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f630:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801f634:	2b30      	cmp	r3, #48	; 0x30
 801f636:	d016      	beq.n	801f666 <UART_SetConfig+0x1b2>
 801f638:	2b30      	cmp	r3, #48	; 0x30
 801f63a:	d818      	bhi.n	801f66e <UART_SetConfig+0x1ba>
 801f63c:	2b20      	cmp	r3, #32
 801f63e:	d00a      	beq.n	801f656 <UART_SetConfig+0x1a2>
 801f640:	2b20      	cmp	r3, #32
 801f642:	d814      	bhi.n	801f66e <UART_SetConfig+0x1ba>
 801f644:	2b00      	cmp	r3, #0
 801f646:	d002      	beq.n	801f64e <UART_SetConfig+0x19a>
 801f648:	2b10      	cmp	r3, #16
 801f64a:	d008      	beq.n	801f65e <UART_SetConfig+0x1aa>
 801f64c:	e00f      	b.n	801f66e <UART_SetConfig+0x1ba>
 801f64e:	2300      	movs	r3, #0
 801f650:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f654:	e0ad      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f656:	2302      	movs	r3, #2
 801f658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f65c:	e0a9      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f65e:	2304      	movs	r3, #4
 801f660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f664:	e0a5      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f666:	2308      	movs	r3, #8
 801f668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f66c:	e0a1      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f66e:	2310      	movs	r3, #16
 801f670:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f674:	e09d      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f676:	697b      	ldr	r3, [r7, #20]
 801f678:	681b      	ldr	r3, [r3, #0]
 801f67a:	4a4a      	ldr	r2, [pc, #296]	; (801f7a4 <UART_SetConfig+0x2f0>)
 801f67c:	4293      	cmp	r3, r2
 801f67e:	d125      	bne.n	801f6cc <UART_SetConfig+0x218>
 801f680:	4b45      	ldr	r3, [pc, #276]	; (801f798 <UART_SetConfig+0x2e4>)
 801f682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f686:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801f68a:	2bc0      	cmp	r3, #192	; 0xc0
 801f68c:	d016      	beq.n	801f6bc <UART_SetConfig+0x208>
 801f68e:	2bc0      	cmp	r3, #192	; 0xc0
 801f690:	d818      	bhi.n	801f6c4 <UART_SetConfig+0x210>
 801f692:	2b80      	cmp	r3, #128	; 0x80
 801f694:	d00a      	beq.n	801f6ac <UART_SetConfig+0x1f8>
 801f696:	2b80      	cmp	r3, #128	; 0x80
 801f698:	d814      	bhi.n	801f6c4 <UART_SetConfig+0x210>
 801f69a:	2b00      	cmp	r3, #0
 801f69c:	d002      	beq.n	801f6a4 <UART_SetConfig+0x1f0>
 801f69e:	2b40      	cmp	r3, #64	; 0x40
 801f6a0:	d008      	beq.n	801f6b4 <UART_SetConfig+0x200>
 801f6a2:	e00f      	b.n	801f6c4 <UART_SetConfig+0x210>
 801f6a4:	2300      	movs	r3, #0
 801f6a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f6aa:	e082      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f6ac:	2302      	movs	r3, #2
 801f6ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f6b2:	e07e      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f6b4:	2304      	movs	r3, #4
 801f6b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f6ba:	e07a      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f6bc:	2308      	movs	r3, #8
 801f6be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f6c2:	e076      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f6c4:	2310      	movs	r3, #16
 801f6c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f6ca:	e072      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f6cc:	697b      	ldr	r3, [r7, #20]
 801f6ce:	681b      	ldr	r3, [r3, #0]
 801f6d0:	4a35      	ldr	r2, [pc, #212]	; (801f7a8 <UART_SetConfig+0x2f4>)
 801f6d2:	4293      	cmp	r3, r2
 801f6d4:	d12a      	bne.n	801f72c <UART_SetConfig+0x278>
 801f6d6:	4b30      	ldr	r3, [pc, #192]	; (801f798 <UART_SetConfig+0x2e4>)
 801f6d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f6dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801f6e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801f6e4:	d01a      	beq.n	801f71c <UART_SetConfig+0x268>
 801f6e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801f6ea:	d81b      	bhi.n	801f724 <UART_SetConfig+0x270>
 801f6ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f6f0:	d00c      	beq.n	801f70c <UART_SetConfig+0x258>
 801f6f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f6f6:	d815      	bhi.n	801f724 <UART_SetConfig+0x270>
 801f6f8:	2b00      	cmp	r3, #0
 801f6fa:	d003      	beq.n	801f704 <UART_SetConfig+0x250>
 801f6fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f700:	d008      	beq.n	801f714 <UART_SetConfig+0x260>
 801f702:	e00f      	b.n	801f724 <UART_SetConfig+0x270>
 801f704:	2300      	movs	r3, #0
 801f706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f70a:	e052      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f70c:	2302      	movs	r3, #2
 801f70e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f712:	e04e      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f714:	2304      	movs	r3, #4
 801f716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f71a:	e04a      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f71c:	2308      	movs	r3, #8
 801f71e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f722:	e046      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f724:	2310      	movs	r3, #16
 801f726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f72a:	e042      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f72c:	697b      	ldr	r3, [r7, #20]
 801f72e:	681b      	ldr	r3, [r3, #0]
 801f730:	4a17      	ldr	r2, [pc, #92]	; (801f790 <UART_SetConfig+0x2dc>)
 801f732:	4293      	cmp	r3, r2
 801f734:	d13a      	bne.n	801f7ac <UART_SetConfig+0x2f8>
 801f736:	4b18      	ldr	r3, [pc, #96]	; (801f798 <UART_SetConfig+0x2e4>)
 801f738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f73c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801f740:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801f744:	d01a      	beq.n	801f77c <UART_SetConfig+0x2c8>
 801f746:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801f74a:	d81b      	bhi.n	801f784 <UART_SetConfig+0x2d0>
 801f74c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f750:	d00c      	beq.n	801f76c <UART_SetConfig+0x2b8>
 801f752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f756:	d815      	bhi.n	801f784 <UART_SetConfig+0x2d0>
 801f758:	2b00      	cmp	r3, #0
 801f75a:	d003      	beq.n	801f764 <UART_SetConfig+0x2b0>
 801f75c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f760:	d008      	beq.n	801f774 <UART_SetConfig+0x2c0>
 801f762:	e00f      	b.n	801f784 <UART_SetConfig+0x2d0>
 801f764:	2300      	movs	r3, #0
 801f766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f76a:	e022      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f76c:	2302      	movs	r3, #2
 801f76e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f772:	e01e      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f774:	2304      	movs	r3, #4
 801f776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f77a:	e01a      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f77c:	2308      	movs	r3, #8
 801f77e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f782:	e016      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f784:	2310      	movs	r3, #16
 801f786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f78a:	e012      	b.n	801f7b2 <UART_SetConfig+0x2fe>
 801f78c:	cfff69f3 	.word	0xcfff69f3
 801f790:	40008000 	.word	0x40008000
 801f794:	40013800 	.word	0x40013800
 801f798:	40021000 	.word	0x40021000
 801f79c:	40004400 	.word	0x40004400
 801f7a0:	40004800 	.word	0x40004800
 801f7a4:	40004c00 	.word	0x40004c00
 801f7a8:	40005000 	.word	0x40005000
 801f7ac:	2310      	movs	r3, #16
 801f7ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801f7b2:	697b      	ldr	r3, [r7, #20]
 801f7b4:	681b      	ldr	r3, [r3, #0]
 801f7b6:	4aae      	ldr	r2, [pc, #696]	; (801fa70 <UART_SetConfig+0x5bc>)
 801f7b8:	4293      	cmp	r3, r2
 801f7ba:	f040 8097 	bne.w	801f8ec <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801f7be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f7c2:	2b08      	cmp	r3, #8
 801f7c4:	d823      	bhi.n	801f80e <UART_SetConfig+0x35a>
 801f7c6:	a201      	add	r2, pc, #4	; (adr r2, 801f7cc <UART_SetConfig+0x318>)
 801f7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f7cc:	0801f7f1 	.word	0x0801f7f1
 801f7d0:	0801f80f 	.word	0x0801f80f
 801f7d4:	0801f7f9 	.word	0x0801f7f9
 801f7d8:	0801f80f 	.word	0x0801f80f
 801f7dc:	0801f7ff 	.word	0x0801f7ff
 801f7e0:	0801f80f 	.word	0x0801f80f
 801f7e4:	0801f80f 	.word	0x0801f80f
 801f7e8:	0801f80f 	.word	0x0801f80f
 801f7ec:	0801f807 	.word	0x0801f807
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801f7f0:	f7fd f8b4 	bl	801c95c <HAL_RCC_GetPCLK1Freq>
 801f7f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801f7f6:	e010      	b.n	801f81a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801f7f8:	4b9e      	ldr	r3, [pc, #632]	; (801fa74 <UART_SetConfig+0x5c0>)
 801f7fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801f7fc:	e00d      	b.n	801f81a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801f7fe:	f7fd f841 	bl	801c884 <HAL_RCC_GetSysClockFreq>
 801f802:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801f804:	e009      	b.n	801f81a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801f806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801f80a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801f80c:	e005      	b.n	801f81a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 801f80e:	2300      	movs	r3, #0
 801f810:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801f812:	2301      	movs	r3, #1
 801f814:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801f818:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801f81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f81c:	2b00      	cmp	r3, #0
 801f81e:	f000 8130 	beq.w	801fa82 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801f822:	697b      	ldr	r3, [r7, #20]
 801f824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f826:	4a94      	ldr	r2, [pc, #592]	; (801fa78 <UART_SetConfig+0x5c4>)
 801f828:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801f82c:	461a      	mov	r2, r3
 801f82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f830:	fbb3 f3f2 	udiv	r3, r3, r2
 801f834:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801f836:	697b      	ldr	r3, [r7, #20]
 801f838:	685a      	ldr	r2, [r3, #4]
 801f83a:	4613      	mov	r3, r2
 801f83c:	005b      	lsls	r3, r3, #1
 801f83e:	4413      	add	r3, r2
 801f840:	69ba      	ldr	r2, [r7, #24]
 801f842:	429a      	cmp	r2, r3
 801f844:	d305      	bcc.n	801f852 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801f846:	697b      	ldr	r3, [r7, #20]
 801f848:	685b      	ldr	r3, [r3, #4]
 801f84a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801f84c:	69ba      	ldr	r2, [r7, #24]
 801f84e:	429a      	cmp	r2, r3
 801f850:	d903      	bls.n	801f85a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 801f852:	2301      	movs	r3, #1
 801f854:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801f858:	e113      	b.n	801fa82 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801f85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f85c:	2200      	movs	r2, #0
 801f85e:	60bb      	str	r3, [r7, #8]
 801f860:	60fa      	str	r2, [r7, #12]
 801f862:	697b      	ldr	r3, [r7, #20]
 801f864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f866:	4a84      	ldr	r2, [pc, #528]	; (801fa78 <UART_SetConfig+0x5c4>)
 801f868:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801f86c:	b29b      	uxth	r3, r3
 801f86e:	2200      	movs	r2, #0
 801f870:	603b      	str	r3, [r7, #0]
 801f872:	607a      	str	r2, [r7, #4]
 801f874:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f878:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801f87c:	f7e1 fa0c 	bl	8000c98 <__aeabi_uldivmod>
 801f880:	4602      	mov	r2, r0
 801f882:	460b      	mov	r3, r1
 801f884:	4610      	mov	r0, r2
 801f886:	4619      	mov	r1, r3
 801f888:	f04f 0200 	mov.w	r2, #0
 801f88c:	f04f 0300 	mov.w	r3, #0
 801f890:	020b      	lsls	r3, r1, #8
 801f892:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801f896:	0202      	lsls	r2, r0, #8
 801f898:	6979      	ldr	r1, [r7, #20]
 801f89a:	6849      	ldr	r1, [r1, #4]
 801f89c:	0849      	lsrs	r1, r1, #1
 801f89e:	2000      	movs	r0, #0
 801f8a0:	460c      	mov	r4, r1
 801f8a2:	4605      	mov	r5, r0
 801f8a4:	eb12 0804 	adds.w	r8, r2, r4
 801f8a8:	eb43 0905 	adc.w	r9, r3, r5
 801f8ac:	697b      	ldr	r3, [r7, #20]
 801f8ae:	685b      	ldr	r3, [r3, #4]
 801f8b0:	2200      	movs	r2, #0
 801f8b2:	469a      	mov	sl, r3
 801f8b4:	4693      	mov	fp, r2
 801f8b6:	4652      	mov	r2, sl
 801f8b8:	465b      	mov	r3, fp
 801f8ba:	4640      	mov	r0, r8
 801f8bc:	4649      	mov	r1, r9
 801f8be:	f7e1 f9eb 	bl	8000c98 <__aeabi_uldivmod>
 801f8c2:	4602      	mov	r2, r0
 801f8c4:	460b      	mov	r3, r1
 801f8c6:	4613      	mov	r3, r2
 801f8c8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801f8ca:	6a3b      	ldr	r3, [r7, #32]
 801f8cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801f8d0:	d308      	bcc.n	801f8e4 <UART_SetConfig+0x430>
 801f8d2:	6a3b      	ldr	r3, [r7, #32]
 801f8d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f8d8:	d204      	bcs.n	801f8e4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 801f8da:	697b      	ldr	r3, [r7, #20]
 801f8dc:	681b      	ldr	r3, [r3, #0]
 801f8de:	6a3a      	ldr	r2, [r7, #32]
 801f8e0:	60da      	str	r2, [r3, #12]
 801f8e2:	e0ce      	b.n	801fa82 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 801f8e4:	2301      	movs	r3, #1
 801f8e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801f8ea:	e0ca      	b.n	801fa82 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801f8ec:	697b      	ldr	r3, [r7, #20]
 801f8ee:	69db      	ldr	r3, [r3, #28]
 801f8f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801f8f4:	d166      	bne.n	801f9c4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 801f8f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f8fa:	2b08      	cmp	r3, #8
 801f8fc:	d827      	bhi.n	801f94e <UART_SetConfig+0x49a>
 801f8fe:	a201      	add	r2, pc, #4	; (adr r2, 801f904 <UART_SetConfig+0x450>)
 801f900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f904:	0801f929 	.word	0x0801f929
 801f908:	0801f931 	.word	0x0801f931
 801f90c:	0801f939 	.word	0x0801f939
 801f910:	0801f94f 	.word	0x0801f94f
 801f914:	0801f93f 	.word	0x0801f93f
 801f918:	0801f94f 	.word	0x0801f94f
 801f91c:	0801f94f 	.word	0x0801f94f
 801f920:	0801f94f 	.word	0x0801f94f
 801f924:	0801f947 	.word	0x0801f947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801f928:	f7fd f818 	bl	801c95c <HAL_RCC_GetPCLK1Freq>
 801f92c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801f92e:	e014      	b.n	801f95a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801f930:	f7fd f82a 	bl	801c988 <HAL_RCC_GetPCLK2Freq>
 801f934:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801f936:	e010      	b.n	801f95a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801f938:	4b4e      	ldr	r3, [pc, #312]	; (801fa74 <UART_SetConfig+0x5c0>)
 801f93a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801f93c:	e00d      	b.n	801f95a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801f93e:	f7fc ffa1 	bl	801c884 <HAL_RCC_GetSysClockFreq>
 801f942:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801f944:	e009      	b.n	801f95a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801f946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801f94a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801f94c:	e005      	b.n	801f95a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 801f94e:	2300      	movs	r3, #0
 801f950:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801f952:	2301      	movs	r3, #1
 801f954:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801f958:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801f95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f95c:	2b00      	cmp	r3, #0
 801f95e:	f000 8090 	beq.w	801fa82 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801f962:	697b      	ldr	r3, [r7, #20]
 801f964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f966:	4a44      	ldr	r2, [pc, #272]	; (801fa78 <UART_SetConfig+0x5c4>)
 801f968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801f96c:	461a      	mov	r2, r3
 801f96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f970:	fbb3 f3f2 	udiv	r3, r3, r2
 801f974:	005a      	lsls	r2, r3, #1
 801f976:	697b      	ldr	r3, [r7, #20]
 801f978:	685b      	ldr	r3, [r3, #4]
 801f97a:	085b      	lsrs	r3, r3, #1
 801f97c:	441a      	add	r2, r3
 801f97e:	697b      	ldr	r3, [r7, #20]
 801f980:	685b      	ldr	r3, [r3, #4]
 801f982:	fbb2 f3f3 	udiv	r3, r2, r3
 801f986:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801f988:	6a3b      	ldr	r3, [r7, #32]
 801f98a:	2b0f      	cmp	r3, #15
 801f98c:	d916      	bls.n	801f9bc <UART_SetConfig+0x508>
 801f98e:	6a3b      	ldr	r3, [r7, #32]
 801f990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f994:	d212      	bcs.n	801f9bc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801f996:	6a3b      	ldr	r3, [r7, #32]
 801f998:	b29b      	uxth	r3, r3
 801f99a:	f023 030f 	bic.w	r3, r3, #15
 801f99e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801f9a0:	6a3b      	ldr	r3, [r7, #32]
 801f9a2:	085b      	lsrs	r3, r3, #1
 801f9a4:	b29b      	uxth	r3, r3
 801f9a6:	f003 0307 	and.w	r3, r3, #7
 801f9aa:	b29a      	uxth	r2, r3
 801f9ac:	8bfb      	ldrh	r3, [r7, #30]
 801f9ae:	4313      	orrs	r3, r2
 801f9b0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801f9b2:	697b      	ldr	r3, [r7, #20]
 801f9b4:	681b      	ldr	r3, [r3, #0]
 801f9b6:	8bfa      	ldrh	r2, [r7, #30]
 801f9b8:	60da      	str	r2, [r3, #12]
 801f9ba:	e062      	b.n	801fa82 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 801f9bc:	2301      	movs	r3, #1
 801f9be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801f9c2:	e05e      	b.n	801fa82 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 801f9c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f9c8:	2b08      	cmp	r3, #8
 801f9ca:	d828      	bhi.n	801fa1e <UART_SetConfig+0x56a>
 801f9cc:	a201      	add	r2, pc, #4	; (adr r2, 801f9d4 <UART_SetConfig+0x520>)
 801f9ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f9d2:	bf00      	nop
 801f9d4:	0801f9f9 	.word	0x0801f9f9
 801f9d8:	0801fa01 	.word	0x0801fa01
 801f9dc:	0801fa09 	.word	0x0801fa09
 801f9e0:	0801fa1f 	.word	0x0801fa1f
 801f9e4:	0801fa0f 	.word	0x0801fa0f
 801f9e8:	0801fa1f 	.word	0x0801fa1f
 801f9ec:	0801fa1f 	.word	0x0801fa1f
 801f9f0:	0801fa1f 	.word	0x0801fa1f
 801f9f4:	0801fa17 	.word	0x0801fa17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801f9f8:	f7fc ffb0 	bl	801c95c <HAL_RCC_GetPCLK1Freq>
 801f9fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801f9fe:	e014      	b.n	801fa2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801fa00:	f7fc ffc2 	bl	801c988 <HAL_RCC_GetPCLK2Freq>
 801fa04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fa06:	e010      	b.n	801fa2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801fa08:	4b1a      	ldr	r3, [pc, #104]	; (801fa74 <UART_SetConfig+0x5c0>)
 801fa0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801fa0c:	e00d      	b.n	801fa2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801fa0e:	f7fc ff39 	bl	801c884 <HAL_RCC_GetSysClockFreq>
 801fa12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fa14:	e009      	b.n	801fa2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801fa16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801fa1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801fa1c:	e005      	b.n	801fa2a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 801fa1e:	2300      	movs	r3, #0
 801fa20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801fa22:	2301      	movs	r3, #1
 801fa24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801fa28:	bf00      	nop
    }

    if (pclk != 0U)
 801fa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa2c:	2b00      	cmp	r3, #0
 801fa2e:	d028      	beq.n	801fa82 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801fa30:	697b      	ldr	r3, [r7, #20]
 801fa32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fa34:	4a10      	ldr	r2, [pc, #64]	; (801fa78 <UART_SetConfig+0x5c4>)
 801fa36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801fa3a:	461a      	mov	r2, r3
 801fa3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa3e:	fbb3 f2f2 	udiv	r2, r3, r2
 801fa42:	697b      	ldr	r3, [r7, #20]
 801fa44:	685b      	ldr	r3, [r3, #4]
 801fa46:	085b      	lsrs	r3, r3, #1
 801fa48:	441a      	add	r2, r3
 801fa4a:	697b      	ldr	r3, [r7, #20]
 801fa4c:	685b      	ldr	r3, [r3, #4]
 801fa4e:	fbb2 f3f3 	udiv	r3, r2, r3
 801fa52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801fa54:	6a3b      	ldr	r3, [r7, #32]
 801fa56:	2b0f      	cmp	r3, #15
 801fa58:	d910      	bls.n	801fa7c <UART_SetConfig+0x5c8>
 801fa5a:	6a3b      	ldr	r3, [r7, #32]
 801fa5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801fa60:	d20c      	bcs.n	801fa7c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801fa62:	6a3b      	ldr	r3, [r7, #32]
 801fa64:	b29a      	uxth	r2, r3
 801fa66:	697b      	ldr	r3, [r7, #20]
 801fa68:	681b      	ldr	r3, [r3, #0]
 801fa6a:	60da      	str	r2, [r3, #12]
 801fa6c:	e009      	b.n	801fa82 <UART_SetConfig+0x5ce>
 801fa6e:	bf00      	nop
 801fa70:	40008000 	.word	0x40008000
 801fa74:	00f42400 	.word	0x00f42400
 801fa78:	080245e0 	.word	0x080245e0
      }
      else
      {
        ret = HAL_ERROR;
 801fa7c:	2301      	movs	r3, #1
 801fa7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801fa82:	697b      	ldr	r3, [r7, #20]
 801fa84:	2201      	movs	r2, #1
 801fa86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801fa8a:	697b      	ldr	r3, [r7, #20]
 801fa8c:	2201      	movs	r2, #1
 801fa8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801fa92:	697b      	ldr	r3, [r7, #20]
 801fa94:	2200      	movs	r2, #0
 801fa96:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801fa98:	697b      	ldr	r3, [r7, #20]
 801fa9a:	2200      	movs	r2, #0
 801fa9c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 801fa9e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801faa2:	4618      	mov	r0, r3
 801faa4:	3730      	adds	r7, #48	; 0x30
 801faa6:	46bd      	mov	sp, r7
 801faa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801faac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801faac:	b480      	push	{r7}
 801faae:	b083      	sub	sp, #12
 801fab0:	af00      	add	r7, sp, #0
 801fab2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801fab4:	687b      	ldr	r3, [r7, #4]
 801fab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fab8:	f003 0301 	and.w	r3, r3, #1
 801fabc:	2b00      	cmp	r3, #0
 801fabe:	d00a      	beq.n	801fad6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801fac0:	687b      	ldr	r3, [r7, #4]
 801fac2:	681b      	ldr	r3, [r3, #0]
 801fac4:	685b      	ldr	r3, [r3, #4]
 801fac6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801faca:	687b      	ldr	r3, [r7, #4]
 801facc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801face:	687b      	ldr	r3, [r7, #4]
 801fad0:	681b      	ldr	r3, [r3, #0]
 801fad2:	430a      	orrs	r2, r1
 801fad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801fad6:	687b      	ldr	r3, [r7, #4]
 801fad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fada:	f003 0302 	and.w	r3, r3, #2
 801fade:	2b00      	cmp	r3, #0
 801fae0:	d00a      	beq.n	801faf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801fae2:	687b      	ldr	r3, [r7, #4]
 801fae4:	681b      	ldr	r3, [r3, #0]
 801fae6:	685b      	ldr	r3, [r3, #4]
 801fae8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801faec:	687b      	ldr	r3, [r7, #4]
 801faee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801faf0:	687b      	ldr	r3, [r7, #4]
 801faf2:	681b      	ldr	r3, [r3, #0]
 801faf4:	430a      	orrs	r2, r1
 801faf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801faf8:	687b      	ldr	r3, [r7, #4]
 801fafa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fafc:	f003 0304 	and.w	r3, r3, #4
 801fb00:	2b00      	cmp	r3, #0
 801fb02:	d00a      	beq.n	801fb1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801fb04:	687b      	ldr	r3, [r7, #4]
 801fb06:	681b      	ldr	r3, [r3, #0]
 801fb08:	685b      	ldr	r3, [r3, #4]
 801fb0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801fb0e:	687b      	ldr	r3, [r7, #4]
 801fb10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801fb12:	687b      	ldr	r3, [r7, #4]
 801fb14:	681b      	ldr	r3, [r3, #0]
 801fb16:	430a      	orrs	r2, r1
 801fb18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801fb1a:	687b      	ldr	r3, [r7, #4]
 801fb1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fb1e:	f003 0308 	and.w	r3, r3, #8
 801fb22:	2b00      	cmp	r3, #0
 801fb24:	d00a      	beq.n	801fb3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801fb26:	687b      	ldr	r3, [r7, #4]
 801fb28:	681b      	ldr	r3, [r3, #0]
 801fb2a:	685b      	ldr	r3, [r3, #4]
 801fb2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801fb30:	687b      	ldr	r3, [r7, #4]
 801fb32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801fb34:	687b      	ldr	r3, [r7, #4]
 801fb36:	681b      	ldr	r3, [r3, #0]
 801fb38:	430a      	orrs	r2, r1
 801fb3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801fb3c:	687b      	ldr	r3, [r7, #4]
 801fb3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fb40:	f003 0310 	and.w	r3, r3, #16
 801fb44:	2b00      	cmp	r3, #0
 801fb46:	d00a      	beq.n	801fb5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801fb48:	687b      	ldr	r3, [r7, #4]
 801fb4a:	681b      	ldr	r3, [r3, #0]
 801fb4c:	689b      	ldr	r3, [r3, #8]
 801fb4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801fb52:	687b      	ldr	r3, [r7, #4]
 801fb54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801fb56:	687b      	ldr	r3, [r7, #4]
 801fb58:	681b      	ldr	r3, [r3, #0]
 801fb5a:	430a      	orrs	r2, r1
 801fb5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801fb5e:	687b      	ldr	r3, [r7, #4]
 801fb60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fb62:	f003 0320 	and.w	r3, r3, #32
 801fb66:	2b00      	cmp	r3, #0
 801fb68:	d00a      	beq.n	801fb80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801fb6a:	687b      	ldr	r3, [r7, #4]
 801fb6c:	681b      	ldr	r3, [r3, #0]
 801fb6e:	689b      	ldr	r3, [r3, #8]
 801fb70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801fb74:	687b      	ldr	r3, [r7, #4]
 801fb76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801fb78:	687b      	ldr	r3, [r7, #4]
 801fb7a:	681b      	ldr	r3, [r3, #0]
 801fb7c:	430a      	orrs	r2, r1
 801fb7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801fb80:	687b      	ldr	r3, [r7, #4]
 801fb82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fb84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fb88:	2b00      	cmp	r3, #0
 801fb8a:	d01a      	beq.n	801fbc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801fb8c:	687b      	ldr	r3, [r7, #4]
 801fb8e:	681b      	ldr	r3, [r3, #0]
 801fb90:	685b      	ldr	r3, [r3, #4]
 801fb92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801fb96:	687b      	ldr	r3, [r7, #4]
 801fb98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801fb9a:	687b      	ldr	r3, [r7, #4]
 801fb9c:	681b      	ldr	r3, [r3, #0]
 801fb9e:	430a      	orrs	r2, r1
 801fba0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801fba2:	687b      	ldr	r3, [r7, #4]
 801fba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801fbaa:	d10a      	bne.n	801fbc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801fbac:	687b      	ldr	r3, [r7, #4]
 801fbae:	681b      	ldr	r3, [r3, #0]
 801fbb0:	685b      	ldr	r3, [r3, #4]
 801fbb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801fbb6:	687b      	ldr	r3, [r7, #4]
 801fbb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801fbba:	687b      	ldr	r3, [r7, #4]
 801fbbc:	681b      	ldr	r3, [r3, #0]
 801fbbe:	430a      	orrs	r2, r1
 801fbc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801fbc2:	687b      	ldr	r3, [r7, #4]
 801fbc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fbc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801fbca:	2b00      	cmp	r3, #0
 801fbcc:	d00a      	beq.n	801fbe4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801fbce:	687b      	ldr	r3, [r7, #4]
 801fbd0:	681b      	ldr	r3, [r3, #0]
 801fbd2:	685b      	ldr	r3, [r3, #4]
 801fbd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801fbd8:	687b      	ldr	r3, [r7, #4]
 801fbda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fbdc:	687b      	ldr	r3, [r7, #4]
 801fbde:	681b      	ldr	r3, [r3, #0]
 801fbe0:	430a      	orrs	r2, r1
 801fbe2:	605a      	str	r2, [r3, #4]
  }
}
 801fbe4:	bf00      	nop
 801fbe6:	370c      	adds	r7, #12
 801fbe8:	46bd      	mov	sp, r7
 801fbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fbee:	4770      	bx	lr

0801fbf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801fbf0:	b580      	push	{r7, lr}
 801fbf2:	b086      	sub	sp, #24
 801fbf4:	af02      	add	r7, sp, #8
 801fbf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801fbf8:	687b      	ldr	r3, [r7, #4]
 801fbfa:	2200      	movs	r2, #0
 801fbfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801fc00:	f7f8 ff58 	bl	8018ab4 <HAL_GetTick>
 801fc04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801fc06:	687b      	ldr	r3, [r7, #4]
 801fc08:	681b      	ldr	r3, [r3, #0]
 801fc0a:	681b      	ldr	r3, [r3, #0]
 801fc0c:	f003 0308 	and.w	r3, r3, #8
 801fc10:	2b08      	cmp	r3, #8
 801fc12:	d10e      	bne.n	801fc32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801fc14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801fc18:	9300      	str	r3, [sp, #0]
 801fc1a:	68fb      	ldr	r3, [r7, #12]
 801fc1c:	2200      	movs	r2, #0
 801fc1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801fc22:	6878      	ldr	r0, [r7, #4]
 801fc24:	f000 f82f 	bl	801fc86 <UART_WaitOnFlagUntilTimeout>
 801fc28:	4603      	mov	r3, r0
 801fc2a:	2b00      	cmp	r3, #0
 801fc2c:	d001      	beq.n	801fc32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801fc2e:	2303      	movs	r3, #3
 801fc30:	e025      	b.n	801fc7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801fc32:	687b      	ldr	r3, [r7, #4]
 801fc34:	681b      	ldr	r3, [r3, #0]
 801fc36:	681b      	ldr	r3, [r3, #0]
 801fc38:	f003 0304 	and.w	r3, r3, #4
 801fc3c:	2b04      	cmp	r3, #4
 801fc3e:	d10e      	bne.n	801fc5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801fc40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801fc44:	9300      	str	r3, [sp, #0]
 801fc46:	68fb      	ldr	r3, [r7, #12]
 801fc48:	2200      	movs	r2, #0
 801fc4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801fc4e:	6878      	ldr	r0, [r7, #4]
 801fc50:	f000 f819 	bl	801fc86 <UART_WaitOnFlagUntilTimeout>
 801fc54:	4603      	mov	r3, r0
 801fc56:	2b00      	cmp	r3, #0
 801fc58:	d001      	beq.n	801fc5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801fc5a:	2303      	movs	r3, #3
 801fc5c:	e00f      	b.n	801fc7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801fc5e:	687b      	ldr	r3, [r7, #4]
 801fc60:	2220      	movs	r2, #32
 801fc62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801fc66:	687b      	ldr	r3, [r7, #4]
 801fc68:	2220      	movs	r2, #32
 801fc6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801fc6e:	687b      	ldr	r3, [r7, #4]
 801fc70:	2200      	movs	r2, #0
 801fc72:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801fc74:	687b      	ldr	r3, [r7, #4]
 801fc76:	2200      	movs	r2, #0
 801fc78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801fc7c:	2300      	movs	r3, #0
}
 801fc7e:	4618      	mov	r0, r3
 801fc80:	3710      	adds	r7, #16
 801fc82:	46bd      	mov	sp, r7
 801fc84:	bd80      	pop	{r7, pc}

0801fc86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801fc86:	b580      	push	{r7, lr}
 801fc88:	b09c      	sub	sp, #112	; 0x70
 801fc8a:	af00      	add	r7, sp, #0
 801fc8c:	60f8      	str	r0, [r7, #12]
 801fc8e:	60b9      	str	r1, [r7, #8]
 801fc90:	603b      	str	r3, [r7, #0]
 801fc92:	4613      	mov	r3, r2
 801fc94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801fc96:	e0a9      	b.n	801fdec <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801fc98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801fc9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fc9e:	f000 80a5 	beq.w	801fdec <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801fca2:	f7f8 ff07 	bl	8018ab4 <HAL_GetTick>
 801fca6:	4602      	mov	r2, r0
 801fca8:	683b      	ldr	r3, [r7, #0]
 801fcaa:	1ad3      	subs	r3, r2, r3
 801fcac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801fcae:	429a      	cmp	r2, r3
 801fcb0:	d302      	bcc.n	801fcb8 <UART_WaitOnFlagUntilTimeout+0x32>
 801fcb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801fcb4:	2b00      	cmp	r3, #0
 801fcb6:	d140      	bne.n	801fd3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801fcb8:	68fb      	ldr	r3, [r7, #12]
 801fcba:	681b      	ldr	r3, [r3, #0]
 801fcbc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fcbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801fcc0:	e853 3f00 	ldrex	r3, [r3]
 801fcc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801fcc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801fcc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801fccc:	667b      	str	r3, [r7, #100]	; 0x64
 801fcce:	68fb      	ldr	r3, [r7, #12]
 801fcd0:	681b      	ldr	r3, [r3, #0]
 801fcd2:	461a      	mov	r2, r3
 801fcd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801fcd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 801fcd8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fcda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801fcdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801fcde:	e841 2300 	strex	r3, r2, [r1]
 801fce2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801fce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801fce6:	2b00      	cmp	r3, #0
 801fce8:	d1e6      	bne.n	801fcb8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801fcea:	68fb      	ldr	r3, [r7, #12]
 801fcec:	681b      	ldr	r3, [r3, #0]
 801fcee:	3308      	adds	r3, #8
 801fcf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fcf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fcf4:	e853 3f00 	ldrex	r3, [r3]
 801fcf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801fcfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fcfc:	f023 0301 	bic.w	r3, r3, #1
 801fd00:	663b      	str	r3, [r7, #96]	; 0x60
 801fd02:	68fb      	ldr	r3, [r7, #12]
 801fd04:	681b      	ldr	r3, [r3, #0]
 801fd06:	3308      	adds	r3, #8
 801fd08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801fd0a:	64ba      	str	r2, [r7, #72]	; 0x48
 801fd0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fd0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801fd10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801fd12:	e841 2300 	strex	r3, r2, [r1]
 801fd16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801fd18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fd1a:	2b00      	cmp	r3, #0
 801fd1c:	d1e5      	bne.n	801fcea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801fd1e:	68fb      	ldr	r3, [r7, #12]
 801fd20:	2220      	movs	r2, #32
 801fd22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801fd26:	68fb      	ldr	r3, [r7, #12]
 801fd28:	2220      	movs	r2, #32
 801fd2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801fd2e:	68fb      	ldr	r3, [r7, #12]
 801fd30:	2200      	movs	r2, #0
 801fd32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801fd36:	2303      	movs	r3, #3
 801fd38:	e069      	b.n	801fe0e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801fd3a:	68fb      	ldr	r3, [r7, #12]
 801fd3c:	681b      	ldr	r3, [r3, #0]
 801fd3e:	681b      	ldr	r3, [r3, #0]
 801fd40:	f003 0304 	and.w	r3, r3, #4
 801fd44:	2b00      	cmp	r3, #0
 801fd46:	d051      	beq.n	801fdec <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801fd48:	68fb      	ldr	r3, [r7, #12]
 801fd4a:	681b      	ldr	r3, [r3, #0]
 801fd4c:	69db      	ldr	r3, [r3, #28]
 801fd4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801fd52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801fd56:	d149      	bne.n	801fdec <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801fd58:	68fb      	ldr	r3, [r7, #12]
 801fd5a:	681b      	ldr	r3, [r3, #0]
 801fd5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801fd60:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801fd62:	68fb      	ldr	r3, [r7, #12]
 801fd64:	681b      	ldr	r3, [r3, #0]
 801fd66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fd6a:	e853 3f00 	ldrex	r3, [r3]
 801fd6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801fd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801fd76:	66fb      	str	r3, [r7, #108]	; 0x6c
 801fd78:	68fb      	ldr	r3, [r7, #12]
 801fd7a:	681b      	ldr	r3, [r3, #0]
 801fd7c:	461a      	mov	r2, r3
 801fd7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801fd80:	637b      	str	r3, [r7, #52]	; 0x34
 801fd82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fd84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801fd86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801fd88:	e841 2300 	strex	r3, r2, [r1]
 801fd8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801fd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fd90:	2b00      	cmp	r3, #0
 801fd92:	d1e6      	bne.n	801fd62 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801fd94:	68fb      	ldr	r3, [r7, #12]
 801fd96:	681b      	ldr	r3, [r3, #0]
 801fd98:	3308      	adds	r3, #8
 801fd9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fd9c:	697b      	ldr	r3, [r7, #20]
 801fd9e:	e853 3f00 	ldrex	r3, [r3]
 801fda2:	613b      	str	r3, [r7, #16]
   return(result);
 801fda4:	693b      	ldr	r3, [r7, #16]
 801fda6:	f023 0301 	bic.w	r3, r3, #1
 801fdaa:	66bb      	str	r3, [r7, #104]	; 0x68
 801fdac:	68fb      	ldr	r3, [r7, #12]
 801fdae:	681b      	ldr	r3, [r3, #0]
 801fdb0:	3308      	adds	r3, #8
 801fdb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801fdb4:	623a      	str	r2, [r7, #32]
 801fdb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fdb8:	69f9      	ldr	r1, [r7, #28]
 801fdba:	6a3a      	ldr	r2, [r7, #32]
 801fdbc:	e841 2300 	strex	r3, r2, [r1]
 801fdc0:	61bb      	str	r3, [r7, #24]
   return(result);
 801fdc2:	69bb      	ldr	r3, [r7, #24]
 801fdc4:	2b00      	cmp	r3, #0
 801fdc6:	d1e5      	bne.n	801fd94 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 801fdc8:	68fb      	ldr	r3, [r7, #12]
 801fdca:	2220      	movs	r2, #32
 801fdcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 801fdd0:	68fb      	ldr	r3, [r7, #12]
 801fdd2:	2220      	movs	r2, #32
 801fdd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801fdd8:	68fb      	ldr	r3, [r7, #12]
 801fdda:	2220      	movs	r2, #32
 801fddc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801fde0:	68fb      	ldr	r3, [r7, #12]
 801fde2:	2200      	movs	r2, #0
 801fde4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 801fde8:	2303      	movs	r3, #3
 801fdea:	e010      	b.n	801fe0e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801fdec:	68fb      	ldr	r3, [r7, #12]
 801fdee:	681b      	ldr	r3, [r3, #0]
 801fdf0:	69da      	ldr	r2, [r3, #28]
 801fdf2:	68bb      	ldr	r3, [r7, #8]
 801fdf4:	4013      	ands	r3, r2
 801fdf6:	68ba      	ldr	r2, [r7, #8]
 801fdf8:	429a      	cmp	r2, r3
 801fdfa:	bf0c      	ite	eq
 801fdfc:	2301      	moveq	r3, #1
 801fdfe:	2300      	movne	r3, #0
 801fe00:	b2db      	uxtb	r3, r3
 801fe02:	461a      	mov	r2, r3
 801fe04:	79fb      	ldrb	r3, [r7, #7]
 801fe06:	429a      	cmp	r2, r3
 801fe08:	f43f af46 	beq.w	801fc98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801fe0c:	2300      	movs	r3, #0
}
 801fe0e:	4618      	mov	r0, r3
 801fe10:	3770      	adds	r7, #112	; 0x70
 801fe12:	46bd      	mov	sp, r7
 801fe14:	bd80      	pop	{r7, pc}

0801fe16 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801fe16:	b480      	push	{r7}
 801fe18:	b085      	sub	sp, #20
 801fe1a:	af00      	add	r7, sp, #0
 801fe1c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801fe1e:	687b      	ldr	r3, [r7, #4]
 801fe20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801fe24:	2b01      	cmp	r3, #1
 801fe26:	d101      	bne.n	801fe2c <HAL_UARTEx_DisableFifoMode+0x16>
 801fe28:	2302      	movs	r3, #2
 801fe2a:	e027      	b.n	801fe7c <HAL_UARTEx_DisableFifoMode+0x66>
 801fe2c:	687b      	ldr	r3, [r7, #4]
 801fe2e:	2201      	movs	r2, #1
 801fe30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801fe34:	687b      	ldr	r3, [r7, #4]
 801fe36:	2224      	movs	r2, #36	; 0x24
 801fe38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801fe3c:	687b      	ldr	r3, [r7, #4]
 801fe3e:	681b      	ldr	r3, [r3, #0]
 801fe40:	681b      	ldr	r3, [r3, #0]
 801fe42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801fe44:	687b      	ldr	r3, [r7, #4]
 801fe46:	681b      	ldr	r3, [r3, #0]
 801fe48:	681a      	ldr	r2, [r3, #0]
 801fe4a:	687b      	ldr	r3, [r7, #4]
 801fe4c:	681b      	ldr	r3, [r3, #0]
 801fe4e:	f022 0201 	bic.w	r2, r2, #1
 801fe52:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801fe54:	68fb      	ldr	r3, [r7, #12]
 801fe56:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801fe5a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801fe5c:	687b      	ldr	r3, [r7, #4]
 801fe5e:	2200      	movs	r2, #0
 801fe60:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801fe62:	687b      	ldr	r3, [r7, #4]
 801fe64:	681b      	ldr	r3, [r3, #0]
 801fe66:	68fa      	ldr	r2, [r7, #12]
 801fe68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801fe6a:	687b      	ldr	r3, [r7, #4]
 801fe6c:	2220      	movs	r2, #32
 801fe6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801fe72:	687b      	ldr	r3, [r7, #4]
 801fe74:	2200      	movs	r2, #0
 801fe76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801fe7a:	2300      	movs	r3, #0
}
 801fe7c:	4618      	mov	r0, r3
 801fe7e:	3714      	adds	r7, #20
 801fe80:	46bd      	mov	sp, r7
 801fe82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe86:	4770      	bx	lr

0801fe88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801fe88:	b580      	push	{r7, lr}
 801fe8a:	b084      	sub	sp, #16
 801fe8c:	af00      	add	r7, sp, #0
 801fe8e:	6078      	str	r0, [r7, #4]
 801fe90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801fe92:	687b      	ldr	r3, [r7, #4]
 801fe94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801fe98:	2b01      	cmp	r3, #1
 801fe9a:	d101      	bne.n	801fea0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801fe9c:	2302      	movs	r3, #2
 801fe9e:	e02d      	b.n	801fefc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801fea0:	687b      	ldr	r3, [r7, #4]
 801fea2:	2201      	movs	r2, #1
 801fea4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801fea8:	687b      	ldr	r3, [r7, #4]
 801feaa:	2224      	movs	r2, #36	; 0x24
 801feac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801feb0:	687b      	ldr	r3, [r7, #4]
 801feb2:	681b      	ldr	r3, [r3, #0]
 801feb4:	681b      	ldr	r3, [r3, #0]
 801feb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801feb8:	687b      	ldr	r3, [r7, #4]
 801feba:	681b      	ldr	r3, [r3, #0]
 801febc:	681a      	ldr	r2, [r3, #0]
 801febe:	687b      	ldr	r3, [r7, #4]
 801fec0:	681b      	ldr	r3, [r3, #0]
 801fec2:	f022 0201 	bic.w	r2, r2, #1
 801fec6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801fec8:	687b      	ldr	r3, [r7, #4]
 801feca:	681b      	ldr	r3, [r3, #0]
 801fecc:	689b      	ldr	r3, [r3, #8]
 801fece:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801fed2:	687b      	ldr	r3, [r7, #4]
 801fed4:	681b      	ldr	r3, [r3, #0]
 801fed6:	683a      	ldr	r2, [r7, #0]
 801fed8:	430a      	orrs	r2, r1
 801feda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801fedc:	6878      	ldr	r0, [r7, #4]
 801fede:	f000 f84f 	bl	801ff80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801fee2:	687b      	ldr	r3, [r7, #4]
 801fee4:	681b      	ldr	r3, [r3, #0]
 801fee6:	68fa      	ldr	r2, [r7, #12]
 801fee8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801feea:	687b      	ldr	r3, [r7, #4]
 801feec:	2220      	movs	r2, #32
 801feee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801fef2:	687b      	ldr	r3, [r7, #4]
 801fef4:	2200      	movs	r2, #0
 801fef6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801fefa:	2300      	movs	r3, #0
}
 801fefc:	4618      	mov	r0, r3
 801fefe:	3710      	adds	r7, #16
 801ff00:	46bd      	mov	sp, r7
 801ff02:	bd80      	pop	{r7, pc}

0801ff04 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801ff04:	b580      	push	{r7, lr}
 801ff06:	b084      	sub	sp, #16
 801ff08:	af00      	add	r7, sp, #0
 801ff0a:	6078      	str	r0, [r7, #4]
 801ff0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ff0e:	687b      	ldr	r3, [r7, #4]
 801ff10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801ff14:	2b01      	cmp	r3, #1
 801ff16:	d101      	bne.n	801ff1c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801ff18:	2302      	movs	r3, #2
 801ff1a:	e02d      	b.n	801ff78 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801ff1c:	687b      	ldr	r3, [r7, #4]
 801ff1e:	2201      	movs	r2, #1
 801ff20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801ff24:	687b      	ldr	r3, [r7, #4]
 801ff26:	2224      	movs	r2, #36	; 0x24
 801ff28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ff2c:	687b      	ldr	r3, [r7, #4]
 801ff2e:	681b      	ldr	r3, [r3, #0]
 801ff30:	681b      	ldr	r3, [r3, #0]
 801ff32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ff34:	687b      	ldr	r3, [r7, #4]
 801ff36:	681b      	ldr	r3, [r3, #0]
 801ff38:	681a      	ldr	r2, [r3, #0]
 801ff3a:	687b      	ldr	r3, [r7, #4]
 801ff3c:	681b      	ldr	r3, [r3, #0]
 801ff3e:	f022 0201 	bic.w	r2, r2, #1
 801ff42:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801ff44:	687b      	ldr	r3, [r7, #4]
 801ff46:	681b      	ldr	r3, [r3, #0]
 801ff48:	689b      	ldr	r3, [r3, #8]
 801ff4a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801ff4e:	687b      	ldr	r3, [r7, #4]
 801ff50:	681b      	ldr	r3, [r3, #0]
 801ff52:	683a      	ldr	r2, [r7, #0]
 801ff54:	430a      	orrs	r2, r1
 801ff56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801ff58:	6878      	ldr	r0, [r7, #4]
 801ff5a:	f000 f811 	bl	801ff80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ff5e:	687b      	ldr	r3, [r7, #4]
 801ff60:	681b      	ldr	r3, [r3, #0]
 801ff62:	68fa      	ldr	r2, [r7, #12]
 801ff64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ff66:	687b      	ldr	r3, [r7, #4]
 801ff68:	2220      	movs	r2, #32
 801ff6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ff6e:	687b      	ldr	r3, [r7, #4]
 801ff70:	2200      	movs	r2, #0
 801ff72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801ff76:	2300      	movs	r3, #0
}
 801ff78:	4618      	mov	r0, r3
 801ff7a:	3710      	adds	r7, #16
 801ff7c:	46bd      	mov	sp, r7
 801ff7e:	bd80      	pop	{r7, pc}

0801ff80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801ff80:	b480      	push	{r7}
 801ff82:	b085      	sub	sp, #20
 801ff84:	af00      	add	r7, sp, #0
 801ff86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801ff88:	687b      	ldr	r3, [r7, #4]
 801ff8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801ff8c:	2b00      	cmp	r3, #0
 801ff8e:	d108      	bne.n	801ffa2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801ff90:	687b      	ldr	r3, [r7, #4]
 801ff92:	2201      	movs	r2, #1
 801ff94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801ff98:	687b      	ldr	r3, [r7, #4]
 801ff9a:	2201      	movs	r2, #1
 801ff9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801ffa0:	e031      	b.n	8020006 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801ffa2:	2308      	movs	r3, #8
 801ffa4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801ffa6:	2308      	movs	r3, #8
 801ffa8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801ffaa:	687b      	ldr	r3, [r7, #4]
 801ffac:	681b      	ldr	r3, [r3, #0]
 801ffae:	689b      	ldr	r3, [r3, #8]
 801ffb0:	0e5b      	lsrs	r3, r3, #25
 801ffb2:	b2db      	uxtb	r3, r3
 801ffb4:	f003 0307 	and.w	r3, r3, #7
 801ffb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801ffba:	687b      	ldr	r3, [r7, #4]
 801ffbc:	681b      	ldr	r3, [r3, #0]
 801ffbe:	689b      	ldr	r3, [r3, #8]
 801ffc0:	0f5b      	lsrs	r3, r3, #29
 801ffc2:	b2db      	uxtb	r3, r3
 801ffc4:	f003 0307 	and.w	r3, r3, #7
 801ffc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801ffca:	7bbb      	ldrb	r3, [r7, #14]
 801ffcc:	7b3a      	ldrb	r2, [r7, #12]
 801ffce:	4911      	ldr	r1, [pc, #68]	; (8020014 <UARTEx_SetNbDataToProcess+0x94>)
 801ffd0:	5c8a      	ldrb	r2, [r1, r2]
 801ffd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801ffd6:	7b3a      	ldrb	r2, [r7, #12]
 801ffd8:	490f      	ldr	r1, [pc, #60]	; (8020018 <UARTEx_SetNbDataToProcess+0x98>)
 801ffda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801ffdc:	fb93 f3f2 	sdiv	r3, r3, r2
 801ffe0:	b29a      	uxth	r2, r3
 801ffe2:	687b      	ldr	r3, [r7, #4]
 801ffe4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801ffe8:	7bfb      	ldrb	r3, [r7, #15]
 801ffea:	7b7a      	ldrb	r2, [r7, #13]
 801ffec:	4909      	ldr	r1, [pc, #36]	; (8020014 <UARTEx_SetNbDataToProcess+0x94>)
 801ffee:	5c8a      	ldrb	r2, [r1, r2]
 801fff0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801fff4:	7b7a      	ldrb	r2, [r7, #13]
 801fff6:	4908      	ldr	r1, [pc, #32]	; (8020018 <UARTEx_SetNbDataToProcess+0x98>)
 801fff8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801fffa:	fb93 f3f2 	sdiv	r3, r3, r2
 801fffe:	b29a      	uxth	r2, r3
 8020000:	687b      	ldr	r3, [r7, #4]
 8020002:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8020006:	bf00      	nop
 8020008:	3714      	adds	r7, #20
 802000a:	46bd      	mov	sp, r7
 802000c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020010:	4770      	bx	lr
 8020012:	bf00      	nop
 8020014:	080245f8 	.word	0x080245f8
 8020018:	08024600 	.word	0x08024600

0802001c <__errno>:
 802001c:	4b01      	ldr	r3, [pc, #4]	; (8020024 <__errno+0x8>)
 802001e:	6818      	ldr	r0, [r3, #0]
 8020020:	4770      	bx	lr
 8020022:	bf00      	nop
 8020024:	2000002c 	.word	0x2000002c

08020028 <__libc_init_array>:
 8020028:	b570      	push	{r4, r5, r6, lr}
 802002a:	4d0d      	ldr	r5, [pc, #52]	; (8020060 <__libc_init_array+0x38>)
 802002c:	4c0d      	ldr	r4, [pc, #52]	; (8020064 <__libc_init_array+0x3c>)
 802002e:	1b64      	subs	r4, r4, r5
 8020030:	10a4      	asrs	r4, r4, #2
 8020032:	2600      	movs	r6, #0
 8020034:	42a6      	cmp	r6, r4
 8020036:	d109      	bne.n	802004c <__libc_init_array+0x24>
 8020038:	4d0b      	ldr	r5, [pc, #44]	; (8020068 <__libc_init_array+0x40>)
 802003a:	4c0c      	ldr	r4, [pc, #48]	; (802006c <__libc_init_array+0x44>)
 802003c:	f004 f94a 	bl	80242d4 <_init>
 8020040:	1b64      	subs	r4, r4, r5
 8020042:	10a4      	asrs	r4, r4, #2
 8020044:	2600      	movs	r6, #0
 8020046:	42a6      	cmp	r6, r4
 8020048:	d105      	bne.n	8020056 <__libc_init_array+0x2e>
 802004a:	bd70      	pop	{r4, r5, r6, pc}
 802004c:	f855 3b04 	ldr.w	r3, [r5], #4
 8020050:	4798      	blx	r3
 8020052:	3601      	adds	r6, #1
 8020054:	e7ee      	b.n	8020034 <__libc_init_array+0xc>
 8020056:	f855 3b04 	ldr.w	r3, [r5], #4
 802005a:	4798      	blx	r3
 802005c:	3601      	adds	r6, #1
 802005e:	e7f2      	b.n	8020046 <__libc_init_array+0x1e>
 8020060:	08024bf8 	.word	0x08024bf8
 8020064:	08024bf8 	.word	0x08024bf8
 8020068:	08024bf8 	.word	0x08024bf8
 802006c:	08024bfc 	.word	0x08024bfc

08020070 <memcpy>:
 8020070:	440a      	add	r2, r1
 8020072:	4291      	cmp	r1, r2
 8020074:	f100 33ff 	add.w	r3, r0, #4294967295
 8020078:	d100      	bne.n	802007c <memcpy+0xc>
 802007a:	4770      	bx	lr
 802007c:	b510      	push	{r4, lr}
 802007e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020082:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020086:	4291      	cmp	r1, r2
 8020088:	d1f9      	bne.n	802007e <memcpy+0xe>
 802008a:	bd10      	pop	{r4, pc}

0802008c <memset>:
 802008c:	4402      	add	r2, r0
 802008e:	4603      	mov	r3, r0
 8020090:	4293      	cmp	r3, r2
 8020092:	d100      	bne.n	8020096 <memset+0xa>
 8020094:	4770      	bx	lr
 8020096:	f803 1b01 	strb.w	r1, [r3], #1
 802009a:	e7f9      	b.n	8020090 <memset+0x4>

0802009c <__cvt>:
 802009c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80200a0:	ec55 4b10 	vmov	r4, r5, d0
 80200a4:	2d00      	cmp	r5, #0
 80200a6:	460e      	mov	r6, r1
 80200a8:	4619      	mov	r1, r3
 80200aa:	462b      	mov	r3, r5
 80200ac:	bfbb      	ittet	lt
 80200ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80200b2:	461d      	movlt	r5, r3
 80200b4:	2300      	movge	r3, #0
 80200b6:	232d      	movlt	r3, #45	; 0x2d
 80200b8:	700b      	strb	r3, [r1, #0]
 80200ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80200bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80200c0:	4691      	mov	r9, r2
 80200c2:	f023 0820 	bic.w	r8, r3, #32
 80200c6:	bfbc      	itt	lt
 80200c8:	4622      	movlt	r2, r4
 80200ca:	4614      	movlt	r4, r2
 80200cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80200d0:	d005      	beq.n	80200de <__cvt+0x42>
 80200d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80200d6:	d100      	bne.n	80200da <__cvt+0x3e>
 80200d8:	3601      	adds	r6, #1
 80200da:	2102      	movs	r1, #2
 80200dc:	e000      	b.n	80200e0 <__cvt+0x44>
 80200de:	2103      	movs	r1, #3
 80200e0:	ab03      	add	r3, sp, #12
 80200e2:	9301      	str	r3, [sp, #4]
 80200e4:	ab02      	add	r3, sp, #8
 80200e6:	9300      	str	r3, [sp, #0]
 80200e8:	ec45 4b10 	vmov	d0, r4, r5
 80200ec:	4653      	mov	r3, sl
 80200ee:	4632      	mov	r2, r6
 80200f0:	f000 fe2e 	bl	8020d50 <_dtoa_r>
 80200f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80200f8:	4607      	mov	r7, r0
 80200fa:	d102      	bne.n	8020102 <__cvt+0x66>
 80200fc:	f019 0f01 	tst.w	r9, #1
 8020100:	d022      	beq.n	8020148 <__cvt+0xac>
 8020102:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8020106:	eb07 0906 	add.w	r9, r7, r6
 802010a:	d110      	bne.n	802012e <__cvt+0x92>
 802010c:	783b      	ldrb	r3, [r7, #0]
 802010e:	2b30      	cmp	r3, #48	; 0x30
 8020110:	d10a      	bne.n	8020128 <__cvt+0x8c>
 8020112:	2200      	movs	r2, #0
 8020114:	2300      	movs	r3, #0
 8020116:	4620      	mov	r0, r4
 8020118:	4629      	mov	r1, r5
 802011a:	f7e0 fcfd 	bl	8000b18 <__aeabi_dcmpeq>
 802011e:	b918      	cbnz	r0, 8020128 <__cvt+0x8c>
 8020120:	f1c6 0601 	rsb	r6, r6, #1
 8020124:	f8ca 6000 	str.w	r6, [sl]
 8020128:	f8da 3000 	ldr.w	r3, [sl]
 802012c:	4499      	add	r9, r3
 802012e:	2200      	movs	r2, #0
 8020130:	2300      	movs	r3, #0
 8020132:	4620      	mov	r0, r4
 8020134:	4629      	mov	r1, r5
 8020136:	f7e0 fcef 	bl	8000b18 <__aeabi_dcmpeq>
 802013a:	b108      	cbz	r0, 8020140 <__cvt+0xa4>
 802013c:	f8cd 900c 	str.w	r9, [sp, #12]
 8020140:	2230      	movs	r2, #48	; 0x30
 8020142:	9b03      	ldr	r3, [sp, #12]
 8020144:	454b      	cmp	r3, r9
 8020146:	d307      	bcc.n	8020158 <__cvt+0xbc>
 8020148:	9b03      	ldr	r3, [sp, #12]
 802014a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802014c:	1bdb      	subs	r3, r3, r7
 802014e:	4638      	mov	r0, r7
 8020150:	6013      	str	r3, [r2, #0]
 8020152:	b004      	add	sp, #16
 8020154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020158:	1c59      	adds	r1, r3, #1
 802015a:	9103      	str	r1, [sp, #12]
 802015c:	701a      	strb	r2, [r3, #0]
 802015e:	e7f0      	b.n	8020142 <__cvt+0xa6>

08020160 <__exponent>:
 8020160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020162:	4603      	mov	r3, r0
 8020164:	2900      	cmp	r1, #0
 8020166:	bfb8      	it	lt
 8020168:	4249      	neglt	r1, r1
 802016a:	f803 2b02 	strb.w	r2, [r3], #2
 802016e:	bfb4      	ite	lt
 8020170:	222d      	movlt	r2, #45	; 0x2d
 8020172:	222b      	movge	r2, #43	; 0x2b
 8020174:	2909      	cmp	r1, #9
 8020176:	7042      	strb	r2, [r0, #1]
 8020178:	dd2a      	ble.n	80201d0 <__exponent+0x70>
 802017a:	f10d 0407 	add.w	r4, sp, #7
 802017e:	46a4      	mov	ip, r4
 8020180:	270a      	movs	r7, #10
 8020182:	46a6      	mov	lr, r4
 8020184:	460a      	mov	r2, r1
 8020186:	fb91 f6f7 	sdiv	r6, r1, r7
 802018a:	fb07 1516 	mls	r5, r7, r6, r1
 802018e:	3530      	adds	r5, #48	; 0x30
 8020190:	2a63      	cmp	r2, #99	; 0x63
 8020192:	f104 34ff 	add.w	r4, r4, #4294967295
 8020196:	f80e 5c01 	strb.w	r5, [lr, #-1]
 802019a:	4631      	mov	r1, r6
 802019c:	dcf1      	bgt.n	8020182 <__exponent+0x22>
 802019e:	3130      	adds	r1, #48	; 0x30
 80201a0:	f1ae 0502 	sub.w	r5, lr, #2
 80201a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80201a8:	1c44      	adds	r4, r0, #1
 80201aa:	4629      	mov	r1, r5
 80201ac:	4561      	cmp	r1, ip
 80201ae:	d30a      	bcc.n	80201c6 <__exponent+0x66>
 80201b0:	f10d 0209 	add.w	r2, sp, #9
 80201b4:	eba2 020e 	sub.w	r2, r2, lr
 80201b8:	4565      	cmp	r5, ip
 80201ba:	bf88      	it	hi
 80201bc:	2200      	movhi	r2, #0
 80201be:	4413      	add	r3, r2
 80201c0:	1a18      	subs	r0, r3, r0
 80201c2:	b003      	add	sp, #12
 80201c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80201c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80201ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80201ce:	e7ed      	b.n	80201ac <__exponent+0x4c>
 80201d0:	2330      	movs	r3, #48	; 0x30
 80201d2:	3130      	adds	r1, #48	; 0x30
 80201d4:	7083      	strb	r3, [r0, #2]
 80201d6:	70c1      	strb	r1, [r0, #3]
 80201d8:	1d03      	adds	r3, r0, #4
 80201da:	e7f1      	b.n	80201c0 <__exponent+0x60>

080201dc <_printf_float>:
 80201dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201e0:	ed2d 8b02 	vpush	{d8}
 80201e4:	b08d      	sub	sp, #52	; 0x34
 80201e6:	460c      	mov	r4, r1
 80201e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80201ec:	4616      	mov	r6, r2
 80201ee:	461f      	mov	r7, r3
 80201f0:	4605      	mov	r5, r0
 80201f2:	f001 fd53 	bl	8021c9c <_localeconv_r>
 80201f6:	f8d0 a000 	ldr.w	sl, [r0]
 80201fa:	4650      	mov	r0, sl
 80201fc:	f7e0 f810 	bl	8000220 <strlen>
 8020200:	2300      	movs	r3, #0
 8020202:	930a      	str	r3, [sp, #40]	; 0x28
 8020204:	6823      	ldr	r3, [r4, #0]
 8020206:	9305      	str	r3, [sp, #20]
 8020208:	f8d8 3000 	ldr.w	r3, [r8]
 802020c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8020210:	3307      	adds	r3, #7
 8020212:	f023 0307 	bic.w	r3, r3, #7
 8020216:	f103 0208 	add.w	r2, r3, #8
 802021a:	f8c8 2000 	str.w	r2, [r8]
 802021e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020222:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8020226:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 802022a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802022e:	9307      	str	r3, [sp, #28]
 8020230:	f8cd 8018 	str.w	r8, [sp, #24]
 8020234:	ee08 0a10 	vmov	s16, r0
 8020238:	4b9f      	ldr	r3, [pc, #636]	; (80204b8 <_printf_float+0x2dc>)
 802023a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802023e:	f04f 32ff 	mov.w	r2, #4294967295
 8020242:	f7e0 fc9b 	bl	8000b7c <__aeabi_dcmpun>
 8020246:	bb88      	cbnz	r0, 80202ac <_printf_float+0xd0>
 8020248:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802024c:	4b9a      	ldr	r3, [pc, #616]	; (80204b8 <_printf_float+0x2dc>)
 802024e:	f04f 32ff 	mov.w	r2, #4294967295
 8020252:	f7e0 fc75 	bl	8000b40 <__aeabi_dcmple>
 8020256:	bb48      	cbnz	r0, 80202ac <_printf_float+0xd0>
 8020258:	2200      	movs	r2, #0
 802025a:	2300      	movs	r3, #0
 802025c:	4640      	mov	r0, r8
 802025e:	4649      	mov	r1, r9
 8020260:	f7e0 fc64 	bl	8000b2c <__aeabi_dcmplt>
 8020264:	b110      	cbz	r0, 802026c <_printf_float+0x90>
 8020266:	232d      	movs	r3, #45	; 0x2d
 8020268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802026c:	4b93      	ldr	r3, [pc, #588]	; (80204bc <_printf_float+0x2e0>)
 802026e:	4894      	ldr	r0, [pc, #592]	; (80204c0 <_printf_float+0x2e4>)
 8020270:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8020274:	bf94      	ite	ls
 8020276:	4698      	movls	r8, r3
 8020278:	4680      	movhi	r8, r0
 802027a:	2303      	movs	r3, #3
 802027c:	6123      	str	r3, [r4, #16]
 802027e:	9b05      	ldr	r3, [sp, #20]
 8020280:	f023 0204 	bic.w	r2, r3, #4
 8020284:	6022      	str	r2, [r4, #0]
 8020286:	f04f 0900 	mov.w	r9, #0
 802028a:	9700      	str	r7, [sp, #0]
 802028c:	4633      	mov	r3, r6
 802028e:	aa0b      	add	r2, sp, #44	; 0x2c
 8020290:	4621      	mov	r1, r4
 8020292:	4628      	mov	r0, r5
 8020294:	f000 f9d8 	bl	8020648 <_printf_common>
 8020298:	3001      	adds	r0, #1
 802029a:	f040 8090 	bne.w	80203be <_printf_float+0x1e2>
 802029e:	f04f 30ff 	mov.w	r0, #4294967295
 80202a2:	b00d      	add	sp, #52	; 0x34
 80202a4:	ecbd 8b02 	vpop	{d8}
 80202a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80202ac:	4642      	mov	r2, r8
 80202ae:	464b      	mov	r3, r9
 80202b0:	4640      	mov	r0, r8
 80202b2:	4649      	mov	r1, r9
 80202b4:	f7e0 fc62 	bl	8000b7c <__aeabi_dcmpun>
 80202b8:	b140      	cbz	r0, 80202cc <_printf_float+0xf0>
 80202ba:	464b      	mov	r3, r9
 80202bc:	2b00      	cmp	r3, #0
 80202be:	bfbc      	itt	lt
 80202c0:	232d      	movlt	r3, #45	; 0x2d
 80202c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80202c6:	487f      	ldr	r0, [pc, #508]	; (80204c4 <_printf_float+0x2e8>)
 80202c8:	4b7f      	ldr	r3, [pc, #508]	; (80204c8 <_printf_float+0x2ec>)
 80202ca:	e7d1      	b.n	8020270 <_printf_float+0x94>
 80202cc:	6863      	ldr	r3, [r4, #4]
 80202ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80202d2:	9206      	str	r2, [sp, #24]
 80202d4:	1c5a      	adds	r2, r3, #1
 80202d6:	d13f      	bne.n	8020358 <_printf_float+0x17c>
 80202d8:	2306      	movs	r3, #6
 80202da:	6063      	str	r3, [r4, #4]
 80202dc:	9b05      	ldr	r3, [sp, #20]
 80202de:	6861      	ldr	r1, [r4, #4]
 80202e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80202e4:	2300      	movs	r3, #0
 80202e6:	9303      	str	r3, [sp, #12]
 80202e8:	ab0a      	add	r3, sp, #40	; 0x28
 80202ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80202ee:	ab09      	add	r3, sp, #36	; 0x24
 80202f0:	ec49 8b10 	vmov	d0, r8, r9
 80202f4:	9300      	str	r3, [sp, #0]
 80202f6:	6022      	str	r2, [r4, #0]
 80202f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80202fc:	4628      	mov	r0, r5
 80202fe:	f7ff fecd 	bl	802009c <__cvt>
 8020302:	9b06      	ldr	r3, [sp, #24]
 8020304:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020306:	2b47      	cmp	r3, #71	; 0x47
 8020308:	4680      	mov	r8, r0
 802030a:	d108      	bne.n	802031e <_printf_float+0x142>
 802030c:	1cc8      	adds	r0, r1, #3
 802030e:	db02      	blt.n	8020316 <_printf_float+0x13a>
 8020310:	6863      	ldr	r3, [r4, #4]
 8020312:	4299      	cmp	r1, r3
 8020314:	dd41      	ble.n	802039a <_printf_float+0x1be>
 8020316:	f1ab 0b02 	sub.w	fp, fp, #2
 802031a:	fa5f fb8b 	uxtb.w	fp, fp
 802031e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8020322:	d820      	bhi.n	8020366 <_printf_float+0x18a>
 8020324:	3901      	subs	r1, #1
 8020326:	465a      	mov	r2, fp
 8020328:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802032c:	9109      	str	r1, [sp, #36]	; 0x24
 802032e:	f7ff ff17 	bl	8020160 <__exponent>
 8020332:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020334:	1813      	adds	r3, r2, r0
 8020336:	2a01      	cmp	r2, #1
 8020338:	4681      	mov	r9, r0
 802033a:	6123      	str	r3, [r4, #16]
 802033c:	dc02      	bgt.n	8020344 <_printf_float+0x168>
 802033e:	6822      	ldr	r2, [r4, #0]
 8020340:	07d2      	lsls	r2, r2, #31
 8020342:	d501      	bpl.n	8020348 <_printf_float+0x16c>
 8020344:	3301      	adds	r3, #1
 8020346:	6123      	str	r3, [r4, #16]
 8020348:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 802034c:	2b00      	cmp	r3, #0
 802034e:	d09c      	beq.n	802028a <_printf_float+0xae>
 8020350:	232d      	movs	r3, #45	; 0x2d
 8020352:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020356:	e798      	b.n	802028a <_printf_float+0xae>
 8020358:	9a06      	ldr	r2, [sp, #24]
 802035a:	2a47      	cmp	r2, #71	; 0x47
 802035c:	d1be      	bne.n	80202dc <_printf_float+0x100>
 802035e:	2b00      	cmp	r3, #0
 8020360:	d1bc      	bne.n	80202dc <_printf_float+0x100>
 8020362:	2301      	movs	r3, #1
 8020364:	e7b9      	b.n	80202da <_printf_float+0xfe>
 8020366:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 802036a:	d118      	bne.n	802039e <_printf_float+0x1c2>
 802036c:	2900      	cmp	r1, #0
 802036e:	6863      	ldr	r3, [r4, #4]
 8020370:	dd0b      	ble.n	802038a <_printf_float+0x1ae>
 8020372:	6121      	str	r1, [r4, #16]
 8020374:	b913      	cbnz	r3, 802037c <_printf_float+0x1a0>
 8020376:	6822      	ldr	r2, [r4, #0]
 8020378:	07d0      	lsls	r0, r2, #31
 802037a:	d502      	bpl.n	8020382 <_printf_float+0x1a6>
 802037c:	3301      	adds	r3, #1
 802037e:	440b      	add	r3, r1
 8020380:	6123      	str	r3, [r4, #16]
 8020382:	65a1      	str	r1, [r4, #88]	; 0x58
 8020384:	f04f 0900 	mov.w	r9, #0
 8020388:	e7de      	b.n	8020348 <_printf_float+0x16c>
 802038a:	b913      	cbnz	r3, 8020392 <_printf_float+0x1b6>
 802038c:	6822      	ldr	r2, [r4, #0]
 802038e:	07d2      	lsls	r2, r2, #31
 8020390:	d501      	bpl.n	8020396 <_printf_float+0x1ba>
 8020392:	3302      	adds	r3, #2
 8020394:	e7f4      	b.n	8020380 <_printf_float+0x1a4>
 8020396:	2301      	movs	r3, #1
 8020398:	e7f2      	b.n	8020380 <_printf_float+0x1a4>
 802039a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 802039e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80203a0:	4299      	cmp	r1, r3
 80203a2:	db05      	blt.n	80203b0 <_printf_float+0x1d4>
 80203a4:	6823      	ldr	r3, [r4, #0]
 80203a6:	6121      	str	r1, [r4, #16]
 80203a8:	07d8      	lsls	r0, r3, #31
 80203aa:	d5ea      	bpl.n	8020382 <_printf_float+0x1a6>
 80203ac:	1c4b      	adds	r3, r1, #1
 80203ae:	e7e7      	b.n	8020380 <_printf_float+0x1a4>
 80203b0:	2900      	cmp	r1, #0
 80203b2:	bfd4      	ite	le
 80203b4:	f1c1 0202 	rsble	r2, r1, #2
 80203b8:	2201      	movgt	r2, #1
 80203ba:	4413      	add	r3, r2
 80203bc:	e7e0      	b.n	8020380 <_printf_float+0x1a4>
 80203be:	6823      	ldr	r3, [r4, #0]
 80203c0:	055a      	lsls	r2, r3, #21
 80203c2:	d407      	bmi.n	80203d4 <_printf_float+0x1f8>
 80203c4:	6923      	ldr	r3, [r4, #16]
 80203c6:	4642      	mov	r2, r8
 80203c8:	4631      	mov	r1, r6
 80203ca:	4628      	mov	r0, r5
 80203cc:	47b8      	blx	r7
 80203ce:	3001      	adds	r0, #1
 80203d0:	d12c      	bne.n	802042c <_printf_float+0x250>
 80203d2:	e764      	b.n	802029e <_printf_float+0xc2>
 80203d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80203d8:	f240 80e0 	bls.w	802059c <_printf_float+0x3c0>
 80203dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80203e0:	2200      	movs	r2, #0
 80203e2:	2300      	movs	r3, #0
 80203e4:	f7e0 fb98 	bl	8000b18 <__aeabi_dcmpeq>
 80203e8:	2800      	cmp	r0, #0
 80203ea:	d034      	beq.n	8020456 <_printf_float+0x27a>
 80203ec:	4a37      	ldr	r2, [pc, #220]	; (80204cc <_printf_float+0x2f0>)
 80203ee:	2301      	movs	r3, #1
 80203f0:	4631      	mov	r1, r6
 80203f2:	4628      	mov	r0, r5
 80203f4:	47b8      	blx	r7
 80203f6:	3001      	adds	r0, #1
 80203f8:	f43f af51 	beq.w	802029e <_printf_float+0xc2>
 80203fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8020400:	429a      	cmp	r2, r3
 8020402:	db02      	blt.n	802040a <_printf_float+0x22e>
 8020404:	6823      	ldr	r3, [r4, #0]
 8020406:	07d8      	lsls	r0, r3, #31
 8020408:	d510      	bpl.n	802042c <_printf_float+0x250>
 802040a:	ee18 3a10 	vmov	r3, s16
 802040e:	4652      	mov	r2, sl
 8020410:	4631      	mov	r1, r6
 8020412:	4628      	mov	r0, r5
 8020414:	47b8      	blx	r7
 8020416:	3001      	adds	r0, #1
 8020418:	f43f af41 	beq.w	802029e <_printf_float+0xc2>
 802041c:	f04f 0800 	mov.w	r8, #0
 8020420:	f104 091a 	add.w	r9, r4, #26
 8020424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020426:	3b01      	subs	r3, #1
 8020428:	4543      	cmp	r3, r8
 802042a:	dc09      	bgt.n	8020440 <_printf_float+0x264>
 802042c:	6823      	ldr	r3, [r4, #0]
 802042e:	079b      	lsls	r3, r3, #30
 8020430:	f100 8105 	bmi.w	802063e <_printf_float+0x462>
 8020434:	68e0      	ldr	r0, [r4, #12]
 8020436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020438:	4298      	cmp	r0, r3
 802043a:	bfb8      	it	lt
 802043c:	4618      	movlt	r0, r3
 802043e:	e730      	b.n	80202a2 <_printf_float+0xc6>
 8020440:	2301      	movs	r3, #1
 8020442:	464a      	mov	r2, r9
 8020444:	4631      	mov	r1, r6
 8020446:	4628      	mov	r0, r5
 8020448:	47b8      	blx	r7
 802044a:	3001      	adds	r0, #1
 802044c:	f43f af27 	beq.w	802029e <_printf_float+0xc2>
 8020450:	f108 0801 	add.w	r8, r8, #1
 8020454:	e7e6      	b.n	8020424 <_printf_float+0x248>
 8020456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020458:	2b00      	cmp	r3, #0
 802045a:	dc39      	bgt.n	80204d0 <_printf_float+0x2f4>
 802045c:	4a1b      	ldr	r2, [pc, #108]	; (80204cc <_printf_float+0x2f0>)
 802045e:	2301      	movs	r3, #1
 8020460:	4631      	mov	r1, r6
 8020462:	4628      	mov	r0, r5
 8020464:	47b8      	blx	r7
 8020466:	3001      	adds	r0, #1
 8020468:	f43f af19 	beq.w	802029e <_printf_float+0xc2>
 802046c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8020470:	4313      	orrs	r3, r2
 8020472:	d102      	bne.n	802047a <_printf_float+0x29e>
 8020474:	6823      	ldr	r3, [r4, #0]
 8020476:	07d9      	lsls	r1, r3, #31
 8020478:	d5d8      	bpl.n	802042c <_printf_float+0x250>
 802047a:	ee18 3a10 	vmov	r3, s16
 802047e:	4652      	mov	r2, sl
 8020480:	4631      	mov	r1, r6
 8020482:	4628      	mov	r0, r5
 8020484:	47b8      	blx	r7
 8020486:	3001      	adds	r0, #1
 8020488:	f43f af09 	beq.w	802029e <_printf_float+0xc2>
 802048c:	f04f 0900 	mov.w	r9, #0
 8020490:	f104 0a1a 	add.w	sl, r4, #26
 8020494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020496:	425b      	negs	r3, r3
 8020498:	454b      	cmp	r3, r9
 802049a:	dc01      	bgt.n	80204a0 <_printf_float+0x2c4>
 802049c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802049e:	e792      	b.n	80203c6 <_printf_float+0x1ea>
 80204a0:	2301      	movs	r3, #1
 80204a2:	4652      	mov	r2, sl
 80204a4:	4631      	mov	r1, r6
 80204a6:	4628      	mov	r0, r5
 80204a8:	47b8      	blx	r7
 80204aa:	3001      	adds	r0, #1
 80204ac:	f43f aef7 	beq.w	802029e <_printf_float+0xc2>
 80204b0:	f109 0901 	add.w	r9, r9, #1
 80204b4:	e7ee      	b.n	8020494 <_printf_float+0x2b8>
 80204b6:	bf00      	nop
 80204b8:	7fefffff 	.word	0x7fefffff
 80204bc:	0802460c 	.word	0x0802460c
 80204c0:	08024610 	.word	0x08024610
 80204c4:	08024618 	.word	0x08024618
 80204c8:	08024614 	.word	0x08024614
 80204cc:	0802461c 	.word	0x0802461c
 80204d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80204d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80204d4:	429a      	cmp	r2, r3
 80204d6:	bfa8      	it	ge
 80204d8:	461a      	movge	r2, r3
 80204da:	2a00      	cmp	r2, #0
 80204dc:	4691      	mov	r9, r2
 80204de:	dc37      	bgt.n	8020550 <_printf_float+0x374>
 80204e0:	f04f 0b00 	mov.w	fp, #0
 80204e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80204e8:	f104 021a 	add.w	r2, r4, #26
 80204ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80204ee:	9305      	str	r3, [sp, #20]
 80204f0:	eba3 0309 	sub.w	r3, r3, r9
 80204f4:	455b      	cmp	r3, fp
 80204f6:	dc33      	bgt.n	8020560 <_printf_float+0x384>
 80204f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80204fc:	429a      	cmp	r2, r3
 80204fe:	db3b      	blt.n	8020578 <_printf_float+0x39c>
 8020500:	6823      	ldr	r3, [r4, #0]
 8020502:	07da      	lsls	r2, r3, #31
 8020504:	d438      	bmi.n	8020578 <_printf_float+0x39c>
 8020506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020508:	9a05      	ldr	r2, [sp, #20]
 802050a:	9909      	ldr	r1, [sp, #36]	; 0x24
 802050c:	1a9a      	subs	r2, r3, r2
 802050e:	eba3 0901 	sub.w	r9, r3, r1
 8020512:	4591      	cmp	r9, r2
 8020514:	bfa8      	it	ge
 8020516:	4691      	movge	r9, r2
 8020518:	f1b9 0f00 	cmp.w	r9, #0
 802051c:	dc35      	bgt.n	802058a <_printf_float+0x3ae>
 802051e:	f04f 0800 	mov.w	r8, #0
 8020522:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8020526:	f104 0a1a 	add.w	sl, r4, #26
 802052a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802052e:	1a9b      	subs	r3, r3, r2
 8020530:	eba3 0309 	sub.w	r3, r3, r9
 8020534:	4543      	cmp	r3, r8
 8020536:	f77f af79 	ble.w	802042c <_printf_float+0x250>
 802053a:	2301      	movs	r3, #1
 802053c:	4652      	mov	r2, sl
 802053e:	4631      	mov	r1, r6
 8020540:	4628      	mov	r0, r5
 8020542:	47b8      	blx	r7
 8020544:	3001      	adds	r0, #1
 8020546:	f43f aeaa 	beq.w	802029e <_printf_float+0xc2>
 802054a:	f108 0801 	add.w	r8, r8, #1
 802054e:	e7ec      	b.n	802052a <_printf_float+0x34e>
 8020550:	4613      	mov	r3, r2
 8020552:	4631      	mov	r1, r6
 8020554:	4642      	mov	r2, r8
 8020556:	4628      	mov	r0, r5
 8020558:	47b8      	blx	r7
 802055a:	3001      	adds	r0, #1
 802055c:	d1c0      	bne.n	80204e0 <_printf_float+0x304>
 802055e:	e69e      	b.n	802029e <_printf_float+0xc2>
 8020560:	2301      	movs	r3, #1
 8020562:	4631      	mov	r1, r6
 8020564:	4628      	mov	r0, r5
 8020566:	9205      	str	r2, [sp, #20]
 8020568:	47b8      	blx	r7
 802056a:	3001      	adds	r0, #1
 802056c:	f43f ae97 	beq.w	802029e <_printf_float+0xc2>
 8020570:	9a05      	ldr	r2, [sp, #20]
 8020572:	f10b 0b01 	add.w	fp, fp, #1
 8020576:	e7b9      	b.n	80204ec <_printf_float+0x310>
 8020578:	ee18 3a10 	vmov	r3, s16
 802057c:	4652      	mov	r2, sl
 802057e:	4631      	mov	r1, r6
 8020580:	4628      	mov	r0, r5
 8020582:	47b8      	blx	r7
 8020584:	3001      	adds	r0, #1
 8020586:	d1be      	bne.n	8020506 <_printf_float+0x32a>
 8020588:	e689      	b.n	802029e <_printf_float+0xc2>
 802058a:	9a05      	ldr	r2, [sp, #20]
 802058c:	464b      	mov	r3, r9
 802058e:	4442      	add	r2, r8
 8020590:	4631      	mov	r1, r6
 8020592:	4628      	mov	r0, r5
 8020594:	47b8      	blx	r7
 8020596:	3001      	adds	r0, #1
 8020598:	d1c1      	bne.n	802051e <_printf_float+0x342>
 802059a:	e680      	b.n	802029e <_printf_float+0xc2>
 802059c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802059e:	2a01      	cmp	r2, #1
 80205a0:	dc01      	bgt.n	80205a6 <_printf_float+0x3ca>
 80205a2:	07db      	lsls	r3, r3, #31
 80205a4:	d538      	bpl.n	8020618 <_printf_float+0x43c>
 80205a6:	2301      	movs	r3, #1
 80205a8:	4642      	mov	r2, r8
 80205aa:	4631      	mov	r1, r6
 80205ac:	4628      	mov	r0, r5
 80205ae:	47b8      	blx	r7
 80205b0:	3001      	adds	r0, #1
 80205b2:	f43f ae74 	beq.w	802029e <_printf_float+0xc2>
 80205b6:	ee18 3a10 	vmov	r3, s16
 80205ba:	4652      	mov	r2, sl
 80205bc:	4631      	mov	r1, r6
 80205be:	4628      	mov	r0, r5
 80205c0:	47b8      	blx	r7
 80205c2:	3001      	adds	r0, #1
 80205c4:	f43f ae6b 	beq.w	802029e <_printf_float+0xc2>
 80205c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80205cc:	2200      	movs	r2, #0
 80205ce:	2300      	movs	r3, #0
 80205d0:	f7e0 faa2 	bl	8000b18 <__aeabi_dcmpeq>
 80205d4:	b9d8      	cbnz	r0, 802060e <_printf_float+0x432>
 80205d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80205d8:	f108 0201 	add.w	r2, r8, #1
 80205dc:	3b01      	subs	r3, #1
 80205de:	4631      	mov	r1, r6
 80205e0:	4628      	mov	r0, r5
 80205e2:	47b8      	blx	r7
 80205e4:	3001      	adds	r0, #1
 80205e6:	d10e      	bne.n	8020606 <_printf_float+0x42a>
 80205e8:	e659      	b.n	802029e <_printf_float+0xc2>
 80205ea:	2301      	movs	r3, #1
 80205ec:	4652      	mov	r2, sl
 80205ee:	4631      	mov	r1, r6
 80205f0:	4628      	mov	r0, r5
 80205f2:	47b8      	blx	r7
 80205f4:	3001      	adds	r0, #1
 80205f6:	f43f ae52 	beq.w	802029e <_printf_float+0xc2>
 80205fa:	f108 0801 	add.w	r8, r8, #1
 80205fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020600:	3b01      	subs	r3, #1
 8020602:	4543      	cmp	r3, r8
 8020604:	dcf1      	bgt.n	80205ea <_printf_float+0x40e>
 8020606:	464b      	mov	r3, r9
 8020608:	f104 0250 	add.w	r2, r4, #80	; 0x50
 802060c:	e6dc      	b.n	80203c8 <_printf_float+0x1ec>
 802060e:	f04f 0800 	mov.w	r8, #0
 8020612:	f104 0a1a 	add.w	sl, r4, #26
 8020616:	e7f2      	b.n	80205fe <_printf_float+0x422>
 8020618:	2301      	movs	r3, #1
 802061a:	4642      	mov	r2, r8
 802061c:	e7df      	b.n	80205de <_printf_float+0x402>
 802061e:	2301      	movs	r3, #1
 8020620:	464a      	mov	r2, r9
 8020622:	4631      	mov	r1, r6
 8020624:	4628      	mov	r0, r5
 8020626:	47b8      	blx	r7
 8020628:	3001      	adds	r0, #1
 802062a:	f43f ae38 	beq.w	802029e <_printf_float+0xc2>
 802062e:	f108 0801 	add.w	r8, r8, #1
 8020632:	68e3      	ldr	r3, [r4, #12]
 8020634:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8020636:	1a5b      	subs	r3, r3, r1
 8020638:	4543      	cmp	r3, r8
 802063a:	dcf0      	bgt.n	802061e <_printf_float+0x442>
 802063c:	e6fa      	b.n	8020434 <_printf_float+0x258>
 802063e:	f04f 0800 	mov.w	r8, #0
 8020642:	f104 0919 	add.w	r9, r4, #25
 8020646:	e7f4      	b.n	8020632 <_printf_float+0x456>

08020648 <_printf_common>:
 8020648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802064c:	4616      	mov	r6, r2
 802064e:	4699      	mov	r9, r3
 8020650:	688a      	ldr	r2, [r1, #8]
 8020652:	690b      	ldr	r3, [r1, #16]
 8020654:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020658:	4293      	cmp	r3, r2
 802065a:	bfb8      	it	lt
 802065c:	4613      	movlt	r3, r2
 802065e:	6033      	str	r3, [r6, #0]
 8020660:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020664:	4607      	mov	r7, r0
 8020666:	460c      	mov	r4, r1
 8020668:	b10a      	cbz	r2, 802066e <_printf_common+0x26>
 802066a:	3301      	adds	r3, #1
 802066c:	6033      	str	r3, [r6, #0]
 802066e:	6823      	ldr	r3, [r4, #0]
 8020670:	0699      	lsls	r1, r3, #26
 8020672:	bf42      	ittt	mi
 8020674:	6833      	ldrmi	r3, [r6, #0]
 8020676:	3302      	addmi	r3, #2
 8020678:	6033      	strmi	r3, [r6, #0]
 802067a:	6825      	ldr	r5, [r4, #0]
 802067c:	f015 0506 	ands.w	r5, r5, #6
 8020680:	d106      	bne.n	8020690 <_printf_common+0x48>
 8020682:	f104 0a19 	add.w	sl, r4, #25
 8020686:	68e3      	ldr	r3, [r4, #12]
 8020688:	6832      	ldr	r2, [r6, #0]
 802068a:	1a9b      	subs	r3, r3, r2
 802068c:	42ab      	cmp	r3, r5
 802068e:	dc26      	bgt.n	80206de <_printf_common+0x96>
 8020690:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8020694:	1e13      	subs	r3, r2, #0
 8020696:	6822      	ldr	r2, [r4, #0]
 8020698:	bf18      	it	ne
 802069a:	2301      	movne	r3, #1
 802069c:	0692      	lsls	r2, r2, #26
 802069e:	d42b      	bmi.n	80206f8 <_printf_common+0xb0>
 80206a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80206a4:	4649      	mov	r1, r9
 80206a6:	4638      	mov	r0, r7
 80206a8:	47c0      	blx	r8
 80206aa:	3001      	adds	r0, #1
 80206ac:	d01e      	beq.n	80206ec <_printf_common+0xa4>
 80206ae:	6823      	ldr	r3, [r4, #0]
 80206b0:	68e5      	ldr	r5, [r4, #12]
 80206b2:	6832      	ldr	r2, [r6, #0]
 80206b4:	f003 0306 	and.w	r3, r3, #6
 80206b8:	2b04      	cmp	r3, #4
 80206ba:	bf08      	it	eq
 80206bc:	1aad      	subeq	r5, r5, r2
 80206be:	68a3      	ldr	r3, [r4, #8]
 80206c0:	6922      	ldr	r2, [r4, #16]
 80206c2:	bf0c      	ite	eq
 80206c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80206c8:	2500      	movne	r5, #0
 80206ca:	4293      	cmp	r3, r2
 80206cc:	bfc4      	itt	gt
 80206ce:	1a9b      	subgt	r3, r3, r2
 80206d0:	18ed      	addgt	r5, r5, r3
 80206d2:	2600      	movs	r6, #0
 80206d4:	341a      	adds	r4, #26
 80206d6:	42b5      	cmp	r5, r6
 80206d8:	d11a      	bne.n	8020710 <_printf_common+0xc8>
 80206da:	2000      	movs	r0, #0
 80206dc:	e008      	b.n	80206f0 <_printf_common+0xa8>
 80206de:	2301      	movs	r3, #1
 80206e0:	4652      	mov	r2, sl
 80206e2:	4649      	mov	r1, r9
 80206e4:	4638      	mov	r0, r7
 80206e6:	47c0      	blx	r8
 80206e8:	3001      	adds	r0, #1
 80206ea:	d103      	bne.n	80206f4 <_printf_common+0xac>
 80206ec:	f04f 30ff 	mov.w	r0, #4294967295
 80206f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80206f4:	3501      	adds	r5, #1
 80206f6:	e7c6      	b.n	8020686 <_printf_common+0x3e>
 80206f8:	18e1      	adds	r1, r4, r3
 80206fa:	1c5a      	adds	r2, r3, #1
 80206fc:	2030      	movs	r0, #48	; 0x30
 80206fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020702:	4422      	add	r2, r4
 8020704:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020708:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802070c:	3302      	adds	r3, #2
 802070e:	e7c7      	b.n	80206a0 <_printf_common+0x58>
 8020710:	2301      	movs	r3, #1
 8020712:	4622      	mov	r2, r4
 8020714:	4649      	mov	r1, r9
 8020716:	4638      	mov	r0, r7
 8020718:	47c0      	blx	r8
 802071a:	3001      	adds	r0, #1
 802071c:	d0e6      	beq.n	80206ec <_printf_common+0xa4>
 802071e:	3601      	adds	r6, #1
 8020720:	e7d9      	b.n	80206d6 <_printf_common+0x8e>
	...

08020724 <_printf_i>:
 8020724:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020728:	7e0f      	ldrb	r7, [r1, #24]
 802072a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802072c:	2f78      	cmp	r7, #120	; 0x78
 802072e:	4691      	mov	r9, r2
 8020730:	4680      	mov	r8, r0
 8020732:	460c      	mov	r4, r1
 8020734:	469a      	mov	sl, r3
 8020736:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802073a:	d807      	bhi.n	802074c <_printf_i+0x28>
 802073c:	2f62      	cmp	r7, #98	; 0x62
 802073e:	d80a      	bhi.n	8020756 <_printf_i+0x32>
 8020740:	2f00      	cmp	r7, #0
 8020742:	f000 80d8 	beq.w	80208f6 <_printf_i+0x1d2>
 8020746:	2f58      	cmp	r7, #88	; 0x58
 8020748:	f000 80a3 	beq.w	8020892 <_printf_i+0x16e>
 802074c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020750:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8020754:	e03a      	b.n	80207cc <_printf_i+0xa8>
 8020756:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802075a:	2b15      	cmp	r3, #21
 802075c:	d8f6      	bhi.n	802074c <_printf_i+0x28>
 802075e:	a101      	add	r1, pc, #4	; (adr r1, 8020764 <_printf_i+0x40>)
 8020760:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020764:	080207bd 	.word	0x080207bd
 8020768:	080207d1 	.word	0x080207d1
 802076c:	0802074d 	.word	0x0802074d
 8020770:	0802074d 	.word	0x0802074d
 8020774:	0802074d 	.word	0x0802074d
 8020778:	0802074d 	.word	0x0802074d
 802077c:	080207d1 	.word	0x080207d1
 8020780:	0802074d 	.word	0x0802074d
 8020784:	0802074d 	.word	0x0802074d
 8020788:	0802074d 	.word	0x0802074d
 802078c:	0802074d 	.word	0x0802074d
 8020790:	080208dd 	.word	0x080208dd
 8020794:	08020801 	.word	0x08020801
 8020798:	080208bf 	.word	0x080208bf
 802079c:	0802074d 	.word	0x0802074d
 80207a0:	0802074d 	.word	0x0802074d
 80207a4:	080208ff 	.word	0x080208ff
 80207a8:	0802074d 	.word	0x0802074d
 80207ac:	08020801 	.word	0x08020801
 80207b0:	0802074d 	.word	0x0802074d
 80207b4:	0802074d 	.word	0x0802074d
 80207b8:	080208c7 	.word	0x080208c7
 80207bc:	682b      	ldr	r3, [r5, #0]
 80207be:	1d1a      	adds	r2, r3, #4
 80207c0:	681b      	ldr	r3, [r3, #0]
 80207c2:	602a      	str	r2, [r5, #0]
 80207c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80207c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80207cc:	2301      	movs	r3, #1
 80207ce:	e0a3      	b.n	8020918 <_printf_i+0x1f4>
 80207d0:	6820      	ldr	r0, [r4, #0]
 80207d2:	6829      	ldr	r1, [r5, #0]
 80207d4:	0606      	lsls	r6, r0, #24
 80207d6:	f101 0304 	add.w	r3, r1, #4
 80207da:	d50a      	bpl.n	80207f2 <_printf_i+0xce>
 80207dc:	680e      	ldr	r6, [r1, #0]
 80207de:	602b      	str	r3, [r5, #0]
 80207e0:	2e00      	cmp	r6, #0
 80207e2:	da03      	bge.n	80207ec <_printf_i+0xc8>
 80207e4:	232d      	movs	r3, #45	; 0x2d
 80207e6:	4276      	negs	r6, r6
 80207e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80207ec:	485e      	ldr	r0, [pc, #376]	; (8020968 <_printf_i+0x244>)
 80207ee:	230a      	movs	r3, #10
 80207f0:	e019      	b.n	8020826 <_printf_i+0x102>
 80207f2:	680e      	ldr	r6, [r1, #0]
 80207f4:	602b      	str	r3, [r5, #0]
 80207f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80207fa:	bf18      	it	ne
 80207fc:	b236      	sxthne	r6, r6
 80207fe:	e7ef      	b.n	80207e0 <_printf_i+0xbc>
 8020800:	682b      	ldr	r3, [r5, #0]
 8020802:	6820      	ldr	r0, [r4, #0]
 8020804:	1d19      	adds	r1, r3, #4
 8020806:	6029      	str	r1, [r5, #0]
 8020808:	0601      	lsls	r1, r0, #24
 802080a:	d501      	bpl.n	8020810 <_printf_i+0xec>
 802080c:	681e      	ldr	r6, [r3, #0]
 802080e:	e002      	b.n	8020816 <_printf_i+0xf2>
 8020810:	0646      	lsls	r6, r0, #25
 8020812:	d5fb      	bpl.n	802080c <_printf_i+0xe8>
 8020814:	881e      	ldrh	r6, [r3, #0]
 8020816:	4854      	ldr	r0, [pc, #336]	; (8020968 <_printf_i+0x244>)
 8020818:	2f6f      	cmp	r7, #111	; 0x6f
 802081a:	bf0c      	ite	eq
 802081c:	2308      	moveq	r3, #8
 802081e:	230a      	movne	r3, #10
 8020820:	2100      	movs	r1, #0
 8020822:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020826:	6865      	ldr	r5, [r4, #4]
 8020828:	60a5      	str	r5, [r4, #8]
 802082a:	2d00      	cmp	r5, #0
 802082c:	bfa2      	ittt	ge
 802082e:	6821      	ldrge	r1, [r4, #0]
 8020830:	f021 0104 	bicge.w	r1, r1, #4
 8020834:	6021      	strge	r1, [r4, #0]
 8020836:	b90e      	cbnz	r6, 802083c <_printf_i+0x118>
 8020838:	2d00      	cmp	r5, #0
 802083a:	d04d      	beq.n	80208d8 <_printf_i+0x1b4>
 802083c:	4615      	mov	r5, r2
 802083e:	fbb6 f1f3 	udiv	r1, r6, r3
 8020842:	fb03 6711 	mls	r7, r3, r1, r6
 8020846:	5dc7      	ldrb	r7, [r0, r7]
 8020848:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802084c:	4637      	mov	r7, r6
 802084e:	42bb      	cmp	r3, r7
 8020850:	460e      	mov	r6, r1
 8020852:	d9f4      	bls.n	802083e <_printf_i+0x11a>
 8020854:	2b08      	cmp	r3, #8
 8020856:	d10b      	bne.n	8020870 <_printf_i+0x14c>
 8020858:	6823      	ldr	r3, [r4, #0]
 802085a:	07de      	lsls	r6, r3, #31
 802085c:	d508      	bpl.n	8020870 <_printf_i+0x14c>
 802085e:	6923      	ldr	r3, [r4, #16]
 8020860:	6861      	ldr	r1, [r4, #4]
 8020862:	4299      	cmp	r1, r3
 8020864:	bfde      	ittt	le
 8020866:	2330      	movle	r3, #48	; 0x30
 8020868:	f805 3c01 	strble.w	r3, [r5, #-1]
 802086c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8020870:	1b52      	subs	r2, r2, r5
 8020872:	6122      	str	r2, [r4, #16]
 8020874:	f8cd a000 	str.w	sl, [sp]
 8020878:	464b      	mov	r3, r9
 802087a:	aa03      	add	r2, sp, #12
 802087c:	4621      	mov	r1, r4
 802087e:	4640      	mov	r0, r8
 8020880:	f7ff fee2 	bl	8020648 <_printf_common>
 8020884:	3001      	adds	r0, #1
 8020886:	d14c      	bne.n	8020922 <_printf_i+0x1fe>
 8020888:	f04f 30ff 	mov.w	r0, #4294967295
 802088c:	b004      	add	sp, #16
 802088e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020892:	4835      	ldr	r0, [pc, #212]	; (8020968 <_printf_i+0x244>)
 8020894:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8020898:	6829      	ldr	r1, [r5, #0]
 802089a:	6823      	ldr	r3, [r4, #0]
 802089c:	f851 6b04 	ldr.w	r6, [r1], #4
 80208a0:	6029      	str	r1, [r5, #0]
 80208a2:	061d      	lsls	r5, r3, #24
 80208a4:	d514      	bpl.n	80208d0 <_printf_i+0x1ac>
 80208a6:	07df      	lsls	r7, r3, #31
 80208a8:	bf44      	itt	mi
 80208aa:	f043 0320 	orrmi.w	r3, r3, #32
 80208ae:	6023      	strmi	r3, [r4, #0]
 80208b0:	b91e      	cbnz	r6, 80208ba <_printf_i+0x196>
 80208b2:	6823      	ldr	r3, [r4, #0]
 80208b4:	f023 0320 	bic.w	r3, r3, #32
 80208b8:	6023      	str	r3, [r4, #0]
 80208ba:	2310      	movs	r3, #16
 80208bc:	e7b0      	b.n	8020820 <_printf_i+0xfc>
 80208be:	6823      	ldr	r3, [r4, #0]
 80208c0:	f043 0320 	orr.w	r3, r3, #32
 80208c4:	6023      	str	r3, [r4, #0]
 80208c6:	2378      	movs	r3, #120	; 0x78
 80208c8:	4828      	ldr	r0, [pc, #160]	; (802096c <_printf_i+0x248>)
 80208ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80208ce:	e7e3      	b.n	8020898 <_printf_i+0x174>
 80208d0:	0659      	lsls	r1, r3, #25
 80208d2:	bf48      	it	mi
 80208d4:	b2b6      	uxthmi	r6, r6
 80208d6:	e7e6      	b.n	80208a6 <_printf_i+0x182>
 80208d8:	4615      	mov	r5, r2
 80208da:	e7bb      	b.n	8020854 <_printf_i+0x130>
 80208dc:	682b      	ldr	r3, [r5, #0]
 80208de:	6826      	ldr	r6, [r4, #0]
 80208e0:	6961      	ldr	r1, [r4, #20]
 80208e2:	1d18      	adds	r0, r3, #4
 80208e4:	6028      	str	r0, [r5, #0]
 80208e6:	0635      	lsls	r5, r6, #24
 80208e8:	681b      	ldr	r3, [r3, #0]
 80208ea:	d501      	bpl.n	80208f0 <_printf_i+0x1cc>
 80208ec:	6019      	str	r1, [r3, #0]
 80208ee:	e002      	b.n	80208f6 <_printf_i+0x1d2>
 80208f0:	0670      	lsls	r0, r6, #25
 80208f2:	d5fb      	bpl.n	80208ec <_printf_i+0x1c8>
 80208f4:	8019      	strh	r1, [r3, #0]
 80208f6:	2300      	movs	r3, #0
 80208f8:	6123      	str	r3, [r4, #16]
 80208fa:	4615      	mov	r5, r2
 80208fc:	e7ba      	b.n	8020874 <_printf_i+0x150>
 80208fe:	682b      	ldr	r3, [r5, #0]
 8020900:	1d1a      	adds	r2, r3, #4
 8020902:	602a      	str	r2, [r5, #0]
 8020904:	681d      	ldr	r5, [r3, #0]
 8020906:	6862      	ldr	r2, [r4, #4]
 8020908:	2100      	movs	r1, #0
 802090a:	4628      	mov	r0, r5
 802090c:	f7df fc90 	bl	8000230 <memchr>
 8020910:	b108      	cbz	r0, 8020916 <_printf_i+0x1f2>
 8020912:	1b40      	subs	r0, r0, r5
 8020914:	6060      	str	r0, [r4, #4]
 8020916:	6863      	ldr	r3, [r4, #4]
 8020918:	6123      	str	r3, [r4, #16]
 802091a:	2300      	movs	r3, #0
 802091c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020920:	e7a8      	b.n	8020874 <_printf_i+0x150>
 8020922:	6923      	ldr	r3, [r4, #16]
 8020924:	462a      	mov	r2, r5
 8020926:	4649      	mov	r1, r9
 8020928:	4640      	mov	r0, r8
 802092a:	47d0      	blx	sl
 802092c:	3001      	adds	r0, #1
 802092e:	d0ab      	beq.n	8020888 <_printf_i+0x164>
 8020930:	6823      	ldr	r3, [r4, #0]
 8020932:	079b      	lsls	r3, r3, #30
 8020934:	d413      	bmi.n	802095e <_printf_i+0x23a>
 8020936:	68e0      	ldr	r0, [r4, #12]
 8020938:	9b03      	ldr	r3, [sp, #12]
 802093a:	4298      	cmp	r0, r3
 802093c:	bfb8      	it	lt
 802093e:	4618      	movlt	r0, r3
 8020940:	e7a4      	b.n	802088c <_printf_i+0x168>
 8020942:	2301      	movs	r3, #1
 8020944:	4632      	mov	r2, r6
 8020946:	4649      	mov	r1, r9
 8020948:	4640      	mov	r0, r8
 802094a:	47d0      	blx	sl
 802094c:	3001      	adds	r0, #1
 802094e:	d09b      	beq.n	8020888 <_printf_i+0x164>
 8020950:	3501      	adds	r5, #1
 8020952:	68e3      	ldr	r3, [r4, #12]
 8020954:	9903      	ldr	r1, [sp, #12]
 8020956:	1a5b      	subs	r3, r3, r1
 8020958:	42ab      	cmp	r3, r5
 802095a:	dcf2      	bgt.n	8020942 <_printf_i+0x21e>
 802095c:	e7eb      	b.n	8020936 <_printf_i+0x212>
 802095e:	2500      	movs	r5, #0
 8020960:	f104 0619 	add.w	r6, r4, #25
 8020964:	e7f5      	b.n	8020952 <_printf_i+0x22e>
 8020966:	bf00      	nop
 8020968:	0802461e 	.word	0x0802461e
 802096c:	0802462f 	.word	0x0802462f

08020970 <iprintf>:
 8020970:	b40f      	push	{r0, r1, r2, r3}
 8020972:	4b0a      	ldr	r3, [pc, #40]	; (802099c <iprintf+0x2c>)
 8020974:	b513      	push	{r0, r1, r4, lr}
 8020976:	681c      	ldr	r4, [r3, #0]
 8020978:	b124      	cbz	r4, 8020984 <iprintf+0x14>
 802097a:	69a3      	ldr	r3, [r4, #24]
 802097c:	b913      	cbnz	r3, 8020984 <iprintf+0x14>
 802097e:	4620      	mov	r0, r4
 8020980:	f001 f8ee 	bl	8021b60 <__sinit>
 8020984:	ab05      	add	r3, sp, #20
 8020986:	9a04      	ldr	r2, [sp, #16]
 8020988:	68a1      	ldr	r1, [r4, #8]
 802098a:	9301      	str	r3, [sp, #4]
 802098c:	4620      	mov	r0, r4
 802098e:	f001 fe9d 	bl	80226cc <_vfiprintf_r>
 8020992:	b002      	add	sp, #8
 8020994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020998:	b004      	add	sp, #16
 802099a:	4770      	bx	lr
 802099c:	2000002c 	.word	0x2000002c

080209a0 <putchar>:
 80209a0:	4b09      	ldr	r3, [pc, #36]	; (80209c8 <putchar+0x28>)
 80209a2:	b513      	push	{r0, r1, r4, lr}
 80209a4:	681c      	ldr	r4, [r3, #0]
 80209a6:	4601      	mov	r1, r0
 80209a8:	b134      	cbz	r4, 80209b8 <putchar+0x18>
 80209aa:	69a3      	ldr	r3, [r4, #24]
 80209ac:	b923      	cbnz	r3, 80209b8 <putchar+0x18>
 80209ae:	9001      	str	r0, [sp, #4]
 80209b0:	4620      	mov	r0, r4
 80209b2:	f001 f8d5 	bl	8021b60 <__sinit>
 80209b6:	9901      	ldr	r1, [sp, #4]
 80209b8:	68a2      	ldr	r2, [r4, #8]
 80209ba:	4620      	mov	r0, r4
 80209bc:	b002      	add	sp, #8
 80209be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80209c2:	f001 bfb3 	b.w	802292c <_putc_r>
 80209c6:	bf00      	nop
 80209c8:	2000002c 	.word	0x2000002c

080209cc <_puts_r>:
 80209cc:	b570      	push	{r4, r5, r6, lr}
 80209ce:	460e      	mov	r6, r1
 80209d0:	4605      	mov	r5, r0
 80209d2:	b118      	cbz	r0, 80209dc <_puts_r+0x10>
 80209d4:	6983      	ldr	r3, [r0, #24]
 80209d6:	b90b      	cbnz	r3, 80209dc <_puts_r+0x10>
 80209d8:	f001 f8c2 	bl	8021b60 <__sinit>
 80209dc:	69ab      	ldr	r3, [r5, #24]
 80209de:	68ac      	ldr	r4, [r5, #8]
 80209e0:	b913      	cbnz	r3, 80209e8 <_puts_r+0x1c>
 80209e2:	4628      	mov	r0, r5
 80209e4:	f001 f8bc 	bl	8021b60 <__sinit>
 80209e8:	4b2c      	ldr	r3, [pc, #176]	; (8020a9c <_puts_r+0xd0>)
 80209ea:	429c      	cmp	r4, r3
 80209ec:	d120      	bne.n	8020a30 <_puts_r+0x64>
 80209ee:	686c      	ldr	r4, [r5, #4]
 80209f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80209f2:	07db      	lsls	r3, r3, #31
 80209f4:	d405      	bmi.n	8020a02 <_puts_r+0x36>
 80209f6:	89a3      	ldrh	r3, [r4, #12]
 80209f8:	0598      	lsls	r0, r3, #22
 80209fa:	d402      	bmi.n	8020a02 <_puts_r+0x36>
 80209fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80209fe:	f001 f952 	bl	8021ca6 <__retarget_lock_acquire_recursive>
 8020a02:	89a3      	ldrh	r3, [r4, #12]
 8020a04:	0719      	lsls	r1, r3, #28
 8020a06:	d51d      	bpl.n	8020a44 <_puts_r+0x78>
 8020a08:	6923      	ldr	r3, [r4, #16]
 8020a0a:	b1db      	cbz	r3, 8020a44 <_puts_r+0x78>
 8020a0c:	3e01      	subs	r6, #1
 8020a0e:	68a3      	ldr	r3, [r4, #8]
 8020a10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020a14:	3b01      	subs	r3, #1
 8020a16:	60a3      	str	r3, [r4, #8]
 8020a18:	bb39      	cbnz	r1, 8020a6a <_puts_r+0x9e>
 8020a1a:	2b00      	cmp	r3, #0
 8020a1c:	da38      	bge.n	8020a90 <_puts_r+0xc4>
 8020a1e:	4622      	mov	r2, r4
 8020a20:	210a      	movs	r1, #10
 8020a22:	4628      	mov	r0, r5
 8020a24:	f000 f848 	bl	8020ab8 <__swbuf_r>
 8020a28:	3001      	adds	r0, #1
 8020a2a:	d011      	beq.n	8020a50 <_puts_r+0x84>
 8020a2c:	250a      	movs	r5, #10
 8020a2e:	e011      	b.n	8020a54 <_puts_r+0x88>
 8020a30:	4b1b      	ldr	r3, [pc, #108]	; (8020aa0 <_puts_r+0xd4>)
 8020a32:	429c      	cmp	r4, r3
 8020a34:	d101      	bne.n	8020a3a <_puts_r+0x6e>
 8020a36:	68ac      	ldr	r4, [r5, #8]
 8020a38:	e7da      	b.n	80209f0 <_puts_r+0x24>
 8020a3a:	4b1a      	ldr	r3, [pc, #104]	; (8020aa4 <_puts_r+0xd8>)
 8020a3c:	429c      	cmp	r4, r3
 8020a3e:	bf08      	it	eq
 8020a40:	68ec      	ldreq	r4, [r5, #12]
 8020a42:	e7d5      	b.n	80209f0 <_puts_r+0x24>
 8020a44:	4621      	mov	r1, r4
 8020a46:	4628      	mov	r0, r5
 8020a48:	f000 f888 	bl	8020b5c <__swsetup_r>
 8020a4c:	2800      	cmp	r0, #0
 8020a4e:	d0dd      	beq.n	8020a0c <_puts_r+0x40>
 8020a50:	f04f 35ff 	mov.w	r5, #4294967295
 8020a54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020a56:	07da      	lsls	r2, r3, #31
 8020a58:	d405      	bmi.n	8020a66 <_puts_r+0x9a>
 8020a5a:	89a3      	ldrh	r3, [r4, #12]
 8020a5c:	059b      	lsls	r3, r3, #22
 8020a5e:	d402      	bmi.n	8020a66 <_puts_r+0x9a>
 8020a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020a62:	f001 f921 	bl	8021ca8 <__retarget_lock_release_recursive>
 8020a66:	4628      	mov	r0, r5
 8020a68:	bd70      	pop	{r4, r5, r6, pc}
 8020a6a:	2b00      	cmp	r3, #0
 8020a6c:	da04      	bge.n	8020a78 <_puts_r+0xac>
 8020a6e:	69a2      	ldr	r2, [r4, #24]
 8020a70:	429a      	cmp	r2, r3
 8020a72:	dc06      	bgt.n	8020a82 <_puts_r+0xb6>
 8020a74:	290a      	cmp	r1, #10
 8020a76:	d004      	beq.n	8020a82 <_puts_r+0xb6>
 8020a78:	6823      	ldr	r3, [r4, #0]
 8020a7a:	1c5a      	adds	r2, r3, #1
 8020a7c:	6022      	str	r2, [r4, #0]
 8020a7e:	7019      	strb	r1, [r3, #0]
 8020a80:	e7c5      	b.n	8020a0e <_puts_r+0x42>
 8020a82:	4622      	mov	r2, r4
 8020a84:	4628      	mov	r0, r5
 8020a86:	f000 f817 	bl	8020ab8 <__swbuf_r>
 8020a8a:	3001      	adds	r0, #1
 8020a8c:	d1bf      	bne.n	8020a0e <_puts_r+0x42>
 8020a8e:	e7df      	b.n	8020a50 <_puts_r+0x84>
 8020a90:	6823      	ldr	r3, [r4, #0]
 8020a92:	250a      	movs	r5, #10
 8020a94:	1c5a      	adds	r2, r3, #1
 8020a96:	6022      	str	r2, [r4, #0]
 8020a98:	701d      	strb	r5, [r3, #0]
 8020a9a:	e7db      	b.n	8020a54 <_puts_r+0x88>
 8020a9c:	080246f0 	.word	0x080246f0
 8020aa0:	08024710 	.word	0x08024710
 8020aa4:	080246d0 	.word	0x080246d0

08020aa8 <puts>:
 8020aa8:	4b02      	ldr	r3, [pc, #8]	; (8020ab4 <puts+0xc>)
 8020aaa:	4601      	mov	r1, r0
 8020aac:	6818      	ldr	r0, [r3, #0]
 8020aae:	f7ff bf8d 	b.w	80209cc <_puts_r>
 8020ab2:	bf00      	nop
 8020ab4:	2000002c 	.word	0x2000002c

08020ab8 <__swbuf_r>:
 8020ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020aba:	460e      	mov	r6, r1
 8020abc:	4614      	mov	r4, r2
 8020abe:	4605      	mov	r5, r0
 8020ac0:	b118      	cbz	r0, 8020aca <__swbuf_r+0x12>
 8020ac2:	6983      	ldr	r3, [r0, #24]
 8020ac4:	b90b      	cbnz	r3, 8020aca <__swbuf_r+0x12>
 8020ac6:	f001 f84b 	bl	8021b60 <__sinit>
 8020aca:	4b21      	ldr	r3, [pc, #132]	; (8020b50 <__swbuf_r+0x98>)
 8020acc:	429c      	cmp	r4, r3
 8020ace:	d12b      	bne.n	8020b28 <__swbuf_r+0x70>
 8020ad0:	686c      	ldr	r4, [r5, #4]
 8020ad2:	69a3      	ldr	r3, [r4, #24]
 8020ad4:	60a3      	str	r3, [r4, #8]
 8020ad6:	89a3      	ldrh	r3, [r4, #12]
 8020ad8:	071a      	lsls	r2, r3, #28
 8020ada:	d52f      	bpl.n	8020b3c <__swbuf_r+0x84>
 8020adc:	6923      	ldr	r3, [r4, #16]
 8020ade:	b36b      	cbz	r3, 8020b3c <__swbuf_r+0x84>
 8020ae0:	6923      	ldr	r3, [r4, #16]
 8020ae2:	6820      	ldr	r0, [r4, #0]
 8020ae4:	1ac0      	subs	r0, r0, r3
 8020ae6:	6963      	ldr	r3, [r4, #20]
 8020ae8:	b2f6      	uxtb	r6, r6
 8020aea:	4283      	cmp	r3, r0
 8020aec:	4637      	mov	r7, r6
 8020aee:	dc04      	bgt.n	8020afa <__swbuf_r+0x42>
 8020af0:	4621      	mov	r1, r4
 8020af2:	4628      	mov	r0, r5
 8020af4:	f000 ffa0 	bl	8021a38 <_fflush_r>
 8020af8:	bb30      	cbnz	r0, 8020b48 <__swbuf_r+0x90>
 8020afa:	68a3      	ldr	r3, [r4, #8]
 8020afc:	3b01      	subs	r3, #1
 8020afe:	60a3      	str	r3, [r4, #8]
 8020b00:	6823      	ldr	r3, [r4, #0]
 8020b02:	1c5a      	adds	r2, r3, #1
 8020b04:	6022      	str	r2, [r4, #0]
 8020b06:	701e      	strb	r6, [r3, #0]
 8020b08:	6963      	ldr	r3, [r4, #20]
 8020b0a:	3001      	adds	r0, #1
 8020b0c:	4283      	cmp	r3, r0
 8020b0e:	d004      	beq.n	8020b1a <__swbuf_r+0x62>
 8020b10:	89a3      	ldrh	r3, [r4, #12]
 8020b12:	07db      	lsls	r3, r3, #31
 8020b14:	d506      	bpl.n	8020b24 <__swbuf_r+0x6c>
 8020b16:	2e0a      	cmp	r6, #10
 8020b18:	d104      	bne.n	8020b24 <__swbuf_r+0x6c>
 8020b1a:	4621      	mov	r1, r4
 8020b1c:	4628      	mov	r0, r5
 8020b1e:	f000 ff8b 	bl	8021a38 <_fflush_r>
 8020b22:	b988      	cbnz	r0, 8020b48 <__swbuf_r+0x90>
 8020b24:	4638      	mov	r0, r7
 8020b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020b28:	4b0a      	ldr	r3, [pc, #40]	; (8020b54 <__swbuf_r+0x9c>)
 8020b2a:	429c      	cmp	r4, r3
 8020b2c:	d101      	bne.n	8020b32 <__swbuf_r+0x7a>
 8020b2e:	68ac      	ldr	r4, [r5, #8]
 8020b30:	e7cf      	b.n	8020ad2 <__swbuf_r+0x1a>
 8020b32:	4b09      	ldr	r3, [pc, #36]	; (8020b58 <__swbuf_r+0xa0>)
 8020b34:	429c      	cmp	r4, r3
 8020b36:	bf08      	it	eq
 8020b38:	68ec      	ldreq	r4, [r5, #12]
 8020b3a:	e7ca      	b.n	8020ad2 <__swbuf_r+0x1a>
 8020b3c:	4621      	mov	r1, r4
 8020b3e:	4628      	mov	r0, r5
 8020b40:	f000 f80c 	bl	8020b5c <__swsetup_r>
 8020b44:	2800      	cmp	r0, #0
 8020b46:	d0cb      	beq.n	8020ae0 <__swbuf_r+0x28>
 8020b48:	f04f 37ff 	mov.w	r7, #4294967295
 8020b4c:	e7ea      	b.n	8020b24 <__swbuf_r+0x6c>
 8020b4e:	bf00      	nop
 8020b50:	080246f0 	.word	0x080246f0
 8020b54:	08024710 	.word	0x08024710
 8020b58:	080246d0 	.word	0x080246d0

08020b5c <__swsetup_r>:
 8020b5c:	4b32      	ldr	r3, [pc, #200]	; (8020c28 <__swsetup_r+0xcc>)
 8020b5e:	b570      	push	{r4, r5, r6, lr}
 8020b60:	681d      	ldr	r5, [r3, #0]
 8020b62:	4606      	mov	r6, r0
 8020b64:	460c      	mov	r4, r1
 8020b66:	b125      	cbz	r5, 8020b72 <__swsetup_r+0x16>
 8020b68:	69ab      	ldr	r3, [r5, #24]
 8020b6a:	b913      	cbnz	r3, 8020b72 <__swsetup_r+0x16>
 8020b6c:	4628      	mov	r0, r5
 8020b6e:	f000 fff7 	bl	8021b60 <__sinit>
 8020b72:	4b2e      	ldr	r3, [pc, #184]	; (8020c2c <__swsetup_r+0xd0>)
 8020b74:	429c      	cmp	r4, r3
 8020b76:	d10f      	bne.n	8020b98 <__swsetup_r+0x3c>
 8020b78:	686c      	ldr	r4, [r5, #4]
 8020b7a:	89a3      	ldrh	r3, [r4, #12]
 8020b7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020b80:	0719      	lsls	r1, r3, #28
 8020b82:	d42c      	bmi.n	8020bde <__swsetup_r+0x82>
 8020b84:	06dd      	lsls	r5, r3, #27
 8020b86:	d411      	bmi.n	8020bac <__swsetup_r+0x50>
 8020b88:	2309      	movs	r3, #9
 8020b8a:	6033      	str	r3, [r6, #0]
 8020b8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020b90:	81a3      	strh	r3, [r4, #12]
 8020b92:	f04f 30ff 	mov.w	r0, #4294967295
 8020b96:	e03e      	b.n	8020c16 <__swsetup_r+0xba>
 8020b98:	4b25      	ldr	r3, [pc, #148]	; (8020c30 <__swsetup_r+0xd4>)
 8020b9a:	429c      	cmp	r4, r3
 8020b9c:	d101      	bne.n	8020ba2 <__swsetup_r+0x46>
 8020b9e:	68ac      	ldr	r4, [r5, #8]
 8020ba0:	e7eb      	b.n	8020b7a <__swsetup_r+0x1e>
 8020ba2:	4b24      	ldr	r3, [pc, #144]	; (8020c34 <__swsetup_r+0xd8>)
 8020ba4:	429c      	cmp	r4, r3
 8020ba6:	bf08      	it	eq
 8020ba8:	68ec      	ldreq	r4, [r5, #12]
 8020baa:	e7e6      	b.n	8020b7a <__swsetup_r+0x1e>
 8020bac:	0758      	lsls	r0, r3, #29
 8020bae:	d512      	bpl.n	8020bd6 <__swsetup_r+0x7a>
 8020bb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020bb2:	b141      	cbz	r1, 8020bc6 <__swsetup_r+0x6a>
 8020bb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020bb8:	4299      	cmp	r1, r3
 8020bba:	d002      	beq.n	8020bc2 <__swsetup_r+0x66>
 8020bbc:	4630      	mov	r0, r6
 8020bbe:	f001 fc7b 	bl	80224b8 <_free_r>
 8020bc2:	2300      	movs	r3, #0
 8020bc4:	6363      	str	r3, [r4, #52]	; 0x34
 8020bc6:	89a3      	ldrh	r3, [r4, #12]
 8020bc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020bcc:	81a3      	strh	r3, [r4, #12]
 8020bce:	2300      	movs	r3, #0
 8020bd0:	6063      	str	r3, [r4, #4]
 8020bd2:	6923      	ldr	r3, [r4, #16]
 8020bd4:	6023      	str	r3, [r4, #0]
 8020bd6:	89a3      	ldrh	r3, [r4, #12]
 8020bd8:	f043 0308 	orr.w	r3, r3, #8
 8020bdc:	81a3      	strh	r3, [r4, #12]
 8020bde:	6923      	ldr	r3, [r4, #16]
 8020be0:	b94b      	cbnz	r3, 8020bf6 <__swsetup_r+0x9a>
 8020be2:	89a3      	ldrh	r3, [r4, #12]
 8020be4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020bec:	d003      	beq.n	8020bf6 <__swsetup_r+0x9a>
 8020bee:	4621      	mov	r1, r4
 8020bf0:	4630      	mov	r0, r6
 8020bf2:	f001 f87f 	bl	8021cf4 <__smakebuf_r>
 8020bf6:	89a0      	ldrh	r0, [r4, #12]
 8020bf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020bfc:	f010 0301 	ands.w	r3, r0, #1
 8020c00:	d00a      	beq.n	8020c18 <__swsetup_r+0xbc>
 8020c02:	2300      	movs	r3, #0
 8020c04:	60a3      	str	r3, [r4, #8]
 8020c06:	6963      	ldr	r3, [r4, #20]
 8020c08:	425b      	negs	r3, r3
 8020c0a:	61a3      	str	r3, [r4, #24]
 8020c0c:	6923      	ldr	r3, [r4, #16]
 8020c0e:	b943      	cbnz	r3, 8020c22 <__swsetup_r+0xc6>
 8020c10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020c14:	d1ba      	bne.n	8020b8c <__swsetup_r+0x30>
 8020c16:	bd70      	pop	{r4, r5, r6, pc}
 8020c18:	0781      	lsls	r1, r0, #30
 8020c1a:	bf58      	it	pl
 8020c1c:	6963      	ldrpl	r3, [r4, #20]
 8020c1e:	60a3      	str	r3, [r4, #8]
 8020c20:	e7f4      	b.n	8020c0c <__swsetup_r+0xb0>
 8020c22:	2000      	movs	r0, #0
 8020c24:	e7f7      	b.n	8020c16 <__swsetup_r+0xba>
 8020c26:	bf00      	nop
 8020c28:	2000002c 	.word	0x2000002c
 8020c2c:	080246f0 	.word	0x080246f0
 8020c30:	08024710 	.word	0x08024710
 8020c34:	080246d0 	.word	0x080246d0

08020c38 <quorem>:
 8020c38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c3c:	6903      	ldr	r3, [r0, #16]
 8020c3e:	690c      	ldr	r4, [r1, #16]
 8020c40:	42a3      	cmp	r3, r4
 8020c42:	4607      	mov	r7, r0
 8020c44:	f2c0 8081 	blt.w	8020d4a <quorem+0x112>
 8020c48:	3c01      	subs	r4, #1
 8020c4a:	f101 0814 	add.w	r8, r1, #20
 8020c4e:	f100 0514 	add.w	r5, r0, #20
 8020c52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020c56:	9301      	str	r3, [sp, #4]
 8020c58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8020c5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020c60:	3301      	adds	r3, #1
 8020c62:	429a      	cmp	r2, r3
 8020c64:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8020c68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8020c6c:	fbb2 f6f3 	udiv	r6, r2, r3
 8020c70:	d331      	bcc.n	8020cd6 <quorem+0x9e>
 8020c72:	f04f 0e00 	mov.w	lr, #0
 8020c76:	4640      	mov	r0, r8
 8020c78:	46ac      	mov	ip, r5
 8020c7a:	46f2      	mov	sl, lr
 8020c7c:	f850 2b04 	ldr.w	r2, [r0], #4
 8020c80:	b293      	uxth	r3, r2
 8020c82:	fb06 e303 	mla	r3, r6, r3, lr
 8020c86:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8020c8a:	b29b      	uxth	r3, r3
 8020c8c:	ebaa 0303 	sub.w	r3, sl, r3
 8020c90:	f8dc a000 	ldr.w	sl, [ip]
 8020c94:	0c12      	lsrs	r2, r2, #16
 8020c96:	fa13 f38a 	uxtah	r3, r3, sl
 8020c9a:	fb06 e202 	mla	r2, r6, r2, lr
 8020c9e:	9300      	str	r3, [sp, #0]
 8020ca0:	9b00      	ldr	r3, [sp, #0]
 8020ca2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020ca6:	b292      	uxth	r2, r2
 8020ca8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8020cac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020cb0:	f8bd 3000 	ldrh.w	r3, [sp]
 8020cb4:	4581      	cmp	r9, r0
 8020cb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020cba:	f84c 3b04 	str.w	r3, [ip], #4
 8020cbe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8020cc2:	d2db      	bcs.n	8020c7c <quorem+0x44>
 8020cc4:	f855 300b 	ldr.w	r3, [r5, fp]
 8020cc8:	b92b      	cbnz	r3, 8020cd6 <quorem+0x9e>
 8020cca:	9b01      	ldr	r3, [sp, #4]
 8020ccc:	3b04      	subs	r3, #4
 8020cce:	429d      	cmp	r5, r3
 8020cd0:	461a      	mov	r2, r3
 8020cd2:	d32e      	bcc.n	8020d32 <quorem+0xfa>
 8020cd4:	613c      	str	r4, [r7, #16]
 8020cd6:	4638      	mov	r0, r7
 8020cd8:	f001 fad6 	bl	8022288 <__mcmp>
 8020cdc:	2800      	cmp	r0, #0
 8020cde:	db24      	blt.n	8020d2a <quorem+0xf2>
 8020ce0:	3601      	adds	r6, #1
 8020ce2:	4628      	mov	r0, r5
 8020ce4:	f04f 0c00 	mov.w	ip, #0
 8020ce8:	f858 2b04 	ldr.w	r2, [r8], #4
 8020cec:	f8d0 e000 	ldr.w	lr, [r0]
 8020cf0:	b293      	uxth	r3, r2
 8020cf2:	ebac 0303 	sub.w	r3, ip, r3
 8020cf6:	0c12      	lsrs	r2, r2, #16
 8020cf8:	fa13 f38e 	uxtah	r3, r3, lr
 8020cfc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8020d00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020d04:	b29b      	uxth	r3, r3
 8020d06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020d0a:	45c1      	cmp	r9, r8
 8020d0c:	f840 3b04 	str.w	r3, [r0], #4
 8020d10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8020d14:	d2e8      	bcs.n	8020ce8 <quorem+0xb0>
 8020d16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020d1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020d1e:	b922      	cbnz	r2, 8020d2a <quorem+0xf2>
 8020d20:	3b04      	subs	r3, #4
 8020d22:	429d      	cmp	r5, r3
 8020d24:	461a      	mov	r2, r3
 8020d26:	d30a      	bcc.n	8020d3e <quorem+0x106>
 8020d28:	613c      	str	r4, [r7, #16]
 8020d2a:	4630      	mov	r0, r6
 8020d2c:	b003      	add	sp, #12
 8020d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d32:	6812      	ldr	r2, [r2, #0]
 8020d34:	3b04      	subs	r3, #4
 8020d36:	2a00      	cmp	r2, #0
 8020d38:	d1cc      	bne.n	8020cd4 <quorem+0x9c>
 8020d3a:	3c01      	subs	r4, #1
 8020d3c:	e7c7      	b.n	8020cce <quorem+0x96>
 8020d3e:	6812      	ldr	r2, [r2, #0]
 8020d40:	3b04      	subs	r3, #4
 8020d42:	2a00      	cmp	r2, #0
 8020d44:	d1f0      	bne.n	8020d28 <quorem+0xf0>
 8020d46:	3c01      	subs	r4, #1
 8020d48:	e7eb      	b.n	8020d22 <quorem+0xea>
 8020d4a:	2000      	movs	r0, #0
 8020d4c:	e7ee      	b.n	8020d2c <quorem+0xf4>
	...

08020d50 <_dtoa_r>:
 8020d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d54:	ed2d 8b04 	vpush	{d8-d9}
 8020d58:	ec57 6b10 	vmov	r6, r7, d0
 8020d5c:	b093      	sub	sp, #76	; 0x4c
 8020d5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8020d60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8020d64:	9106      	str	r1, [sp, #24]
 8020d66:	ee10 aa10 	vmov	sl, s0
 8020d6a:	4604      	mov	r4, r0
 8020d6c:	9209      	str	r2, [sp, #36]	; 0x24
 8020d6e:	930c      	str	r3, [sp, #48]	; 0x30
 8020d70:	46bb      	mov	fp, r7
 8020d72:	b975      	cbnz	r5, 8020d92 <_dtoa_r+0x42>
 8020d74:	2010      	movs	r0, #16
 8020d76:	f000 fffd 	bl	8021d74 <malloc>
 8020d7a:	4602      	mov	r2, r0
 8020d7c:	6260      	str	r0, [r4, #36]	; 0x24
 8020d7e:	b920      	cbnz	r0, 8020d8a <_dtoa_r+0x3a>
 8020d80:	4ba7      	ldr	r3, [pc, #668]	; (8021020 <_dtoa_r+0x2d0>)
 8020d82:	21ea      	movs	r1, #234	; 0xea
 8020d84:	48a7      	ldr	r0, [pc, #668]	; (8021024 <_dtoa_r+0x2d4>)
 8020d86:	f001 fe7f 	bl	8022a88 <__assert_func>
 8020d8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8020d8e:	6005      	str	r5, [r0, #0]
 8020d90:	60c5      	str	r5, [r0, #12]
 8020d92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020d94:	6819      	ldr	r1, [r3, #0]
 8020d96:	b151      	cbz	r1, 8020dae <_dtoa_r+0x5e>
 8020d98:	685a      	ldr	r2, [r3, #4]
 8020d9a:	604a      	str	r2, [r1, #4]
 8020d9c:	2301      	movs	r3, #1
 8020d9e:	4093      	lsls	r3, r2
 8020da0:	608b      	str	r3, [r1, #8]
 8020da2:	4620      	mov	r0, r4
 8020da4:	f001 f82e 	bl	8021e04 <_Bfree>
 8020da8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020daa:	2200      	movs	r2, #0
 8020dac:	601a      	str	r2, [r3, #0]
 8020dae:	1e3b      	subs	r3, r7, #0
 8020db0:	bfaa      	itet	ge
 8020db2:	2300      	movge	r3, #0
 8020db4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8020db8:	f8c8 3000 	strge.w	r3, [r8]
 8020dbc:	4b9a      	ldr	r3, [pc, #616]	; (8021028 <_dtoa_r+0x2d8>)
 8020dbe:	bfbc      	itt	lt
 8020dc0:	2201      	movlt	r2, #1
 8020dc2:	f8c8 2000 	strlt.w	r2, [r8]
 8020dc6:	ea33 030b 	bics.w	r3, r3, fp
 8020dca:	d11b      	bne.n	8020e04 <_dtoa_r+0xb4>
 8020dcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020dce:	f242 730f 	movw	r3, #9999	; 0x270f
 8020dd2:	6013      	str	r3, [r2, #0]
 8020dd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020dd8:	4333      	orrs	r3, r6
 8020dda:	f000 8592 	beq.w	8021902 <_dtoa_r+0xbb2>
 8020dde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020de0:	b963      	cbnz	r3, 8020dfc <_dtoa_r+0xac>
 8020de2:	4b92      	ldr	r3, [pc, #584]	; (802102c <_dtoa_r+0x2dc>)
 8020de4:	e022      	b.n	8020e2c <_dtoa_r+0xdc>
 8020de6:	4b92      	ldr	r3, [pc, #584]	; (8021030 <_dtoa_r+0x2e0>)
 8020de8:	9301      	str	r3, [sp, #4]
 8020dea:	3308      	adds	r3, #8
 8020dec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020dee:	6013      	str	r3, [r2, #0]
 8020df0:	9801      	ldr	r0, [sp, #4]
 8020df2:	b013      	add	sp, #76	; 0x4c
 8020df4:	ecbd 8b04 	vpop	{d8-d9}
 8020df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dfc:	4b8b      	ldr	r3, [pc, #556]	; (802102c <_dtoa_r+0x2dc>)
 8020dfe:	9301      	str	r3, [sp, #4]
 8020e00:	3303      	adds	r3, #3
 8020e02:	e7f3      	b.n	8020dec <_dtoa_r+0x9c>
 8020e04:	2200      	movs	r2, #0
 8020e06:	2300      	movs	r3, #0
 8020e08:	4650      	mov	r0, sl
 8020e0a:	4659      	mov	r1, fp
 8020e0c:	f7df fe84 	bl	8000b18 <__aeabi_dcmpeq>
 8020e10:	ec4b ab19 	vmov	d9, sl, fp
 8020e14:	4680      	mov	r8, r0
 8020e16:	b158      	cbz	r0, 8020e30 <_dtoa_r+0xe0>
 8020e18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020e1a:	2301      	movs	r3, #1
 8020e1c:	6013      	str	r3, [r2, #0]
 8020e1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020e20:	2b00      	cmp	r3, #0
 8020e22:	f000 856b 	beq.w	80218fc <_dtoa_r+0xbac>
 8020e26:	4883      	ldr	r0, [pc, #524]	; (8021034 <_dtoa_r+0x2e4>)
 8020e28:	6018      	str	r0, [r3, #0]
 8020e2a:	1e43      	subs	r3, r0, #1
 8020e2c:	9301      	str	r3, [sp, #4]
 8020e2e:	e7df      	b.n	8020df0 <_dtoa_r+0xa0>
 8020e30:	ec4b ab10 	vmov	d0, sl, fp
 8020e34:	aa10      	add	r2, sp, #64	; 0x40
 8020e36:	a911      	add	r1, sp, #68	; 0x44
 8020e38:	4620      	mov	r0, r4
 8020e3a:	f001 facb 	bl	80223d4 <__d2b>
 8020e3e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8020e42:	ee08 0a10 	vmov	s16, r0
 8020e46:	2d00      	cmp	r5, #0
 8020e48:	f000 8084 	beq.w	8020f54 <_dtoa_r+0x204>
 8020e4c:	ee19 3a90 	vmov	r3, s19
 8020e50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020e54:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8020e58:	4656      	mov	r6, sl
 8020e5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8020e5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8020e62:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8020e66:	4b74      	ldr	r3, [pc, #464]	; (8021038 <_dtoa_r+0x2e8>)
 8020e68:	2200      	movs	r2, #0
 8020e6a:	4630      	mov	r0, r6
 8020e6c:	4639      	mov	r1, r7
 8020e6e:	f7df fa33 	bl	80002d8 <__aeabi_dsub>
 8020e72:	a365      	add	r3, pc, #404	; (adr r3, 8021008 <_dtoa_r+0x2b8>)
 8020e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e78:	f7df fbe6 	bl	8000648 <__aeabi_dmul>
 8020e7c:	a364      	add	r3, pc, #400	; (adr r3, 8021010 <_dtoa_r+0x2c0>)
 8020e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e82:	f7df fa2b 	bl	80002dc <__adddf3>
 8020e86:	4606      	mov	r6, r0
 8020e88:	4628      	mov	r0, r5
 8020e8a:	460f      	mov	r7, r1
 8020e8c:	f7df fb72 	bl	8000574 <__aeabi_i2d>
 8020e90:	a361      	add	r3, pc, #388	; (adr r3, 8021018 <_dtoa_r+0x2c8>)
 8020e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e96:	f7df fbd7 	bl	8000648 <__aeabi_dmul>
 8020e9a:	4602      	mov	r2, r0
 8020e9c:	460b      	mov	r3, r1
 8020e9e:	4630      	mov	r0, r6
 8020ea0:	4639      	mov	r1, r7
 8020ea2:	f7df fa1b 	bl	80002dc <__adddf3>
 8020ea6:	4606      	mov	r6, r0
 8020ea8:	460f      	mov	r7, r1
 8020eaa:	f7df fe7d 	bl	8000ba8 <__aeabi_d2iz>
 8020eae:	2200      	movs	r2, #0
 8020eb0:	9000      	str	r0, [sp, #0]
 8020eb2:	2300      	movs	r3, #0
 8020eb4:	4630      	mov	r0, r6
 8020eb6:	4639      	mov	r1, r7
 8020eb8:	f7df fe38 	bl	8000b2c <__aeabi_dcmplt>
 8020ebc:	b150      	cbz	r0, 8020ed4 <_dtoa_r+0x184>
 8020ebe:	9800      	ldr	r0, [sp, #0]
 8020ec0:	f7df fb58 	bl	8000574 <__aeabi_i2d>
 8020ec4:	4632      	mov	r2, r6
 8020ec6:	463b      	mov	r3, r7
 8020ec8:	f7df fe26 	bl	8000b18 <__aeabi_dcmpeq>
 8020ecc:	b910      	cbnz	r0, 8020ed4 <_dtoa_r+0x184>
 8020ece:	9b00      	ldr	r3, [sp, #0]
 8020ed0:	3b01      	subs	r3, #1
 8020ed2:	9300      	str	r3, [sp, #0]
 8020ed4:	9b00      	ldr	r3, [sp, #0]
 8020ed6:	2b16      	cmp	r3, #22
 8020ed8:	d85a      	bhi.n	8020f90 <_dtoa_r+0x240>
 8020eda:	9a00      	ldr	r2, [sp, #0]
 8020edc:	4b57      	ldr	r3, [pc, #348]	; (802103c <_dtoa_r+0x2ec>)
 8020ede:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ee6:	ec51 0b19 	vmov	r0, r1, d9
 8020eea:	f7df fe1f 	bl	8000b2c <__aeabi_dcmplt>
 8020eee:	2800      	cmp	r0, #0
 8020ef0:	d050      	beq.n	8020f94 <_dtoa_r+0x244>
 8020ef2:	9b00      	ldr	r3, [sp, #0]
 8020ef4:	3b01      	subs	r3, #1
 8020ef6:	9300      	str	r3, [sp, #0]
 8020ef8:	2300      	movs	r3, #0
 8020efa:	930b      	str	r3, [sp, #44]	; 0x2c
 8020efc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020efe:	1b5d      	subs	r5, r3, r5
 8020f00:	1e6b      	subs	r3, r5, #1
 8020f02:	9305      	str	r3, [sp, #20]
 8020f04:	bf45      	ittet	mi
 8020f06:	f1c5 0301 	rsbmi	r3, r5, #1
 8020f0a:	9304      	strmi	r3, [sp, #16]
 8020f0c:	2300      	movpl	r3, #0
 8020f0e:	2300      	movmi	r3, #0
 8020f10:	bf4c      	ite	mi
 8020f12:	9305      	strmi	r3, [sp, #20]
 8020f14:	9304      	strpl	r3, [sp, #16]
 8020f16:	9b00      	ldr	r3, [sp, #0]
 8020f18:	2b00      	cmp	r3, #0
 8020f1a:	db3d      	blt.n	8020f98 <_dtoa_r+0x248>
 8020f1c:	9b05      	ldr	r3, [sp, #20]
 8020f1e:	9a00      	ldr	r2, [sp, #0]
 8020f20:	920a      	str	r2, [sp, #40]	; 0x28
 8020f22:	4413      	add	r3, r2
 8020f24:	9305      	str	r3, [sp, #20]
 8020f26:	2300      	movs	r3, #0
 8020f28:	9307      	str	r3, [sp, #28]
 8020f2a:	9b06      	ldr	r3, [sp, #24]
 8020f2c:	2b09      	cmp	r3, #9
 8020f2e:	f200 8089 	bhi.w	8021044 <_dtoa_r+0x2f4>
 8020f32:	2b05      	cmp	r3, #5
 8020f34:	bfc4      	itt	gt
 8020f36:	3b04      	subgt	r3, #4
 8020f38:	9306      	strgt	r3, [sp, #24]
 8020f3a:	9b06      	ldr	r3, [sp, #24]
 8020f3c:	f1a3 0302 	sub.w	r3, r3, #2
 8020f40:	bfcc      	ite	gt
 8020f42:	2500      	movgt	r5, #0
 8020f44:	2501      	movle	r5, #1
 8020f46:	2b03      	cmp	r3, #3
 8020f48:	f200 8087 	bhi.w	802105a <_dtoa_r+0x30a>
 8020f4c:	e8df f003 	tbb	[pc, r3]
 8020f50:	59383a2d 	.word	0x59383a2d
 8020f54:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8020f58:	441d      	add	r5, r3
 8020f5a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8020f5e:	2b20      	cmp	r3, #32
 8020f60:	bfc1      	itttt	gt
 8020f62:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8020f66:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8020f6a:	fa0b f303 	lslgt.w	r3, fp, r3
 8020f6e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8020f72:	bfda      	itte	le
 8020f74:	f1c3 0320 	rsble	r3, r3, #32
 8020f78:	fa06 f003 	lslle.w	r0, r6, r3
 8020f7c:	4318      	orrgt	r0, r3
 8020f7e:	f7df fae9 	bl	8000554 <__aeabi_ui2d>
 8020f82:	2301      	movs	r3, #1
 8020f84:	4606      	mov	r6, r0
 8020f86:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8020f8a:	3d01      	subs	r5, #1
 8020f8c:	930e      	str	r3, [sp, #56]	; 0x38
 8020f8e:	e76a      	b.n	8020e66 <_dtoa_r+0x116>
 8020f90:	2301      	movs	r3, #1
 8020f92:	e7b2      	b.n	8020efa <_dtoa_r+0x1aa>
 8020f94:	900b      	str	r0, [sp, #44]	; 0x2c
 8020f96:	e7b1      	b.n	8020efc <_dtoa_r+0x1ac>
 8020f98:	9b04      	ldr	r3, [sp, #16]
 8020f9a:	9a00      	ldr	r2, [sp, #0]
 8020f9c:	1a9b      	subs	r3, r3, r2
 8020f9e:	9304      	str	r3, [sp, #16]
 8020fa0:	4253      	negs	r3, r2
 8020fa2:	9307      	str	r3, [sp, #28]
 8020fa4:	2300      	movs	r3, #0
 8020fa6:	930a      	str	r3, [sp, #40]	; 0x28
 8020fa8:	e7bf      	b.n	8020f2a <_dtoa_r+0x1da>
 8020faa:	2300      	movs	r3, #0
 8020fac:	9308      	str	r3, [sp, #32]
 8020fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020fb0:	2b00      	cmp	r3, #0
 8020fb2:	dc55      	bgt.n	8021060 <_dtoa_r+0x310>
 8020fb4:	2301      	movs	r3, #1
 8020fb6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8020fba:	461a      	mov	r2, r3
 8020fbc:	9209      	str	r2, [sp, #36]	; 0x24
 8020fbe:	e00c      	b.n	8020fda <_dtoa_r+0x28a>
 8020fc0:	2301      	movs	r3, #1
 8020fc2:	e7f3      	b.n	8020fac <_dtoa_r+0x25c>
 8020fc4:	2300      	movs	r3, #0
 8020fc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020fc8:	9308      	str	r3, [sp, #32]
 8020fca:	9b00      	ldr	r3, [sp, #0]
 8020fcc:	4413      	add	r3, r2
 8020fce:	9302      	str	r3, [sp, #8]
 8020fd0:	3301      	adds	r3, #1
 8020fd2:	2b01      	cmp	r3, #1
 8020fd4:	9303      	str	r3, [sp, #12]
 8020fd6:	bfb8      	it	lt
 8020fd8:	2301      	movlt	r3, #1
 8020fda:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020fdc:	2200      	movs	r2, #0
 8020fde:	6042      	str	r2, [r0, #4]
 8020fe0:	2204      	movs	r2, #4
 8020fe2:	f102 0614 	add.w	r6, r2, #20
 8020fe6:	429e      	cmp	r6, r3
 8020fe8:	6841      	ldr	r1, [r0, #4]
 8020fea:	d93d      	bls.n	8021068 <_dtoa_r+0x318>
 8020fec:	4620      	mov	r0, r4
 8020fee:	f000 fec9 	bl	8021d84 <_Balloc>
 8020ff2:	9001      	str	r0, [sp, #4]
 8020ff4:	2800      	cmp	r0, #0
 8020ff6:	d13b      	bne.n	8021070 <_dtoa_r+0x320>
 8020ff8:	4b11      	ldr	r3, [pc, #68]	; (8021040 <_dtoa_r+0x2f0>)
 8020ffa:	4602      	mov	r2, r0
 8020ffc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8021000:	e6c0      	b.n	8020d84 <_dtoa_r+0x34>
 8021002:	2301      	movs	r3, #1
 8021004:	e7df      	b.n	8020fc6 <_dtoa_r+0x276>
 8021006:	bf00      	nop
 8021008:	636f4361 	.word	0x636f4361
 802100c:	3fd287a7 	.word	0x3fd287a7
 8021010:	8b60c8b3 	.word	0x8b60c8b3
 8021014:	3fc68a28 	.word	0x3fc68a28
 8021018:	509f79fb 	.word	0x509f79fb
 802101c:	3fd34413 	.word	0x3fd34413
 8021020:	0802464d 	.word	0x0802464d
 8021024:	08024664 	.word	0x08024664
 8021028:	7ff00000 	.word	0x7ff00000
 802102c:	08024649 	.word	0x08024649
 8021030:	08024640 	.word	0x08024640
 8021034:	0802461d 	.word	0x0802461d
 8021038:	3ff80000 	.word	0x3ff80000
 802103c:	080247b8 	.word	0x080247b8
 8021040:	080246bf 	.word	0x080246bf
 8021044:	2501      	movs	r5, #1
 8021046:	2300      	movs	r3, #0
 8021048:	9306      	str	r3, [sp, #24]
 802104a:	9508      	str	r5, [sp, #32]
 802104c:	f04f 33ff 	mov.w	r3, #4294967295
 8021050:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8021054:	2200      	movs	r2, #0
 8021056:	2312      	movs	r3, #18
 8021058:	e7b0      	b.n	8020fbc <_dtoa_r+0x26c>
 802105a:	2301      	movs	r3, #1
 802105c:	9308      	str	r3, [sp, #32]
 802105e:	e7f5      	b.n	802104c <_dtoa_r+0x2fc>
 8021060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021062:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8021066:	e7b8      	b.n	8020fda <_dtoa_r+0x28a>
 8021068:	3101      	adds	r1, #1
 802106a:	6041      	str	r1, [r0, #4]
 802106c:	0052      	lsls	r2, r2, #1
 802106e:	e7b8      	b.n	8020fe2 <_dtoa_r+0x292>
 8021070:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021072:	9a01      	ldr	r2, [sp, #4]
 8021074:	601a      	str	r2, [r3, #0]
 8021076:	9b03      	ldr	r3, [sp, #12]
 8021078:	2b0e      	cmp	r3, #14
 802107a:	f200 809d 	bhi.w	80211b8 <_dtoa_r+0x468>
 802107e:	2d00      	cmp	r5, #0
 8021080:	f000 809a 	beq.w	80211b8 <_dtoa_r+0x468>
 8021084:	9b00      	ldr	r3, [sp, #0]
 8021086:	2b00      	cmp	r3, #0
 8021088:	dd32      	ble.n	80210f0 <_dtoa_r+0x3a0>
 802108a:	4ab7      	ldr	r2, [pc, #732]	; (8021368 <_dtoa_r+0x618>)
 802108c:	f003 030f 	and.w	r3, r3, #15
 8021090:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8021094:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021098:	9b00      	ldr	r3, [sp, #0]
 802109a:	05d8      	lsls	r0, r3, #23
 802109c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80210a0:	d516      	bpl.n	80210d0 <_dtoa_r+0x380>
 80210a2:	4bb2      	ldr	r3, [pc, #712]	; (802136c <_dtoa_r+0x61c>)
 80210a4:	ec51 0b19 	vmov	r0, r1, d9
 80210a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80210ac:	f7df fbf6 	bl	800089c <__aeabi_ddiv>
 80210b0:	f007 070f 	and.w	r7, r7, #15
 80210b4:	4682      	mov	sl, r0
 80210b6:	468b      	mov	fp, r1
 80210b8:	2503      	movs	r5, #3
 80210ba:	4eac      	ldr	r6, [pc, #688]	; (802136c <_dtoa_r+0x61c>)
 80210bc:	b957      	cbnz	r7, 80210d4 <_dtoa_r+0x384>
 80210be:	4642      	mov	r2, r8
 80210c0:	464b      	mov	r3, r9
 80210c2:	4650      	mov	r0, sl
 80210c4:	4659      	mov	r1, fp
 80210c6:	f7df fbe9 	bl	800089c <__aeabi_ddiv>
 80210ca:	4682      	mov	sl, r0
 80210cc:	468b      	mov	fp, r1
 80210ce:	e028      	b.n	8021122 <_dtoa_r+0x3d2>
 80210d0:	2502      	movs	r5, #2
 80210d2:	e7f2      	b.n	80210ba <_dtoa_r+0x36a>
 80210d4:	07f9      	lsls	r1, r7, #31
 80210d6:	d508      	bpl.n	80210ea <_dtoa_r+0x39a>
 80210d8:	4640      	mov	r0, r8
 80210da:	4649      	mov	r1, r9
 80210dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80210e0:	f7df fab2 	bl	8000648 <__aeabi_dmul>
 80210e4:	3501      	adds	r5, #1
 80210e6:	4680      	mov	r8, r0
 80210e8:	4689      	mov	r9, r1
 80210ea:	107f      	asrs	r7, r7, #1
 80210ec:	3608      	adds	r6, #8
 80210ee:	e7e5      	b.n	80210bc <_dtoa_r+0x36c>
 80210f0:	f000 809b 	beq.w	802122a <_dtoa_r+0x4da>
 80210f4:	9b00      	ldr	r3, [sp, #0]
 80210f6:	4f9d      	ldr	r7, [pc, #628]	; (802136c <_dtoa_r+0x61c>)
 80210f8:	425e      	negs	r6, r3
 80210fa:	4b9b      	ldr	r3, [pc, #620]	; (8021368 <_dtoa_r+0x618>)
 80210fc:	f006 020f 	and.w	r2, r6, #15
 8021100:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021108:	ec51 0b19 	vmov	r0, r1, d9
 802110c:	f7df fa9c 	bl	8000648 <__aeabi_dmul>
 8021110:	1136      	asrs	r6, r6, #4
 8021112:	4682      	mov	sl, r0
 8021114:	468b      	mov	fp, r1
 8021116:	2300      	movs	r3, #0
 8021118:	2502      	movs	r5, #2
 802111a:	2e00      	cmp	r6, #0
 802111c:	d17a      	bne.n	8021214 <_dtoa_r+0x4c4>
 802111e:	2b00      	cmp	r3, #0
 8021120:	d1d3      	bne.n	80210ca <_dtoa_r+0x37a>
 8021122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021124:	2b00      	cmp	r3, #0
 8021126:	f000 8082 	beq.w	802122e <_dtoa_r+0x4de>
 802112a:	4b91      	ldr	r3, [pc, #580]	; (8021370 <_dtoa_r+0x620>)
 802112c:	2200      	movs	r2, #0
 802112e:	4650      	mov	r0, sl
 8021130:	4659      	mov	r1, fp
 8021132:	f7df fcfb 	bl	8000b2c <__aeabi_dcmplt>
 8021136:	2800      	cmp	r0, #0
 8021138:	d079      	beq.n	802122e <_dtoa_r+0x4de>
 802113a:	9b03      	ldr	r3, [sp, #12]
 802113c:	2b00      	cmp	r3, #0
 802113e:	d076      	beq.n	802122e <_dtoa_r+0x4de>
 8021140:	9b02      	ldr	r3, [sp, #8]
 8021142:	2b00      	cmp	r3, #0
 8021144:	dd36      	ble.n	80211b4 <_dtoa_r+0x464>
 8021146:	9b00      	ldr	r3, [sp, #0]
 8021148:	4650      	mov	r0, sl
 802114a:	4659      	mov	r1, fp
 802114c:	1e5f      	subs	r7, r3, #1
 802114e:	2200      	movs	r2, #0
 8021150:	4b88      	ldr	r3, [pc, #544]	; (8021374 <_dtoa_r+0x624>)
 8021152:	f7df fa79 	bl	8000648 <__aeabi_dmul>
 8021156:	9e02      	ldr	r6, [sp, #8]
 8021158:	4682      	mov	sl, r0
 802115a:	468b      	mov	fp, r1
 802115c:	3501      	adds	r5, #1
 802115e:	4628      	mov	r0, r5
 8021160:	f7df fa08 	bl	8000574 <__aeabi_i2d>
 8021164:	4652      	mov	r2, sl
 8021166:	465b      	mov	r3, fp
 8021168:	f7df fa6e 	bl	8000648 <__aeabi_dmul>
 802116c:	4b82      	ldr	r3, [pc, #520]	; (8021378 <_dtoa_r+0x628>)
 802116e:	2200      	movs	r2, #0
 8021170:	f7df f8b4 	bl	80002dc <__adddf3>
 8021174:	46d0      	mov	r8, sl
 8021176:	46d9      	mov	r9, fp
 8021178:	4682      	mov	sl, r0
 802117a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 802117e:	2e00      	cmp	r6, #0
 8021180:	d158      	bne.n	8021234 <_dtoa_r+0x4e4>
 8021182:	4b7e      	ldr	r3, [pc, #504]	; (802137c <_dtoa_r+0x62c>)
 8021184:	2200      	movs	r2, #0
 8021186:	4640      	mov	r0, r8
 8021188:	4649      	mov	r1, r9
 802118a:	f7df f8a5 	bl	80002d8 <__aeabi_dsub>
 802118e:	4652      	mov	r2, sl
 8021190:	465b      	mov	r3, fp
 8021192:	4680      	mov	r8, r0
 8021194:	4689      	mov	r9, r1
 8021196:	f7df fce7 	bl	8000b68 <__aeabi_dcmpgt>
 802119a:	2800      	cmp	r0, #0
 802119c:	f040 8295 	bne.w	80216ca <_dtoa_r+0x97a>
 80211a0:	4652      	mov	r2, sl
 80211a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80211a6:	4640      	mov	r0, r8
 80211a8:	4649      	mov	r1, r9
 80211aa:	f7df fcbf 	bl	8000b2c <__aeabi_dcmplt>
 80211ae:	2800      	cmp	r0, #0
 80211b0:	f040 8289 	bne.w	80216c6 <_dtoa_r+0x976>
 80211b4:	ec5b ab19 	vmov	sl, fp, d9
 80211b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80211ba:	2b00      	cmp	r3, #0
 80211bc:	f2c0 8148 	blt.w	8021450 <_dtoa_r+0x700>
 80211c0:	9a00      	ldr	r2, [sp, #0]
 80211c2:	2a0e      	cmp	r2, #14
 80211c4:	f300 8144 	bgt.w	8021450 <_dtoa_r+0x700>
 80211c8:	4b67      	ldr	r3, [pc, #412]	; (8021368 <_dtoa_r+0x618>)
 80211ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80211ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80211d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80211d4:	2b00      	cmp	r3, #0
 80211d6:	f280 80d5 	bge.w	8021384 <_dtoa_r+0x634>
 80211da:	9b03      	ldr	r3, [sp, #12]
 80211dc:	2b00      	cmp	r3, #0
 80211de:	f300 80d1 	bgt.w	8021384 <_dtoa_r+0x634>
 80211e2:	f040 826f 	bne.w	80216c4 <_dtoa_r+0x974>
 80211e6:	4b65      	ldr	r3, [pc, #404]	; (802137c <_dtoa_r+0x62c>)
 80211e8:	2200      	movs	r2, #0
 80211ea:	4640      	mov	r0, r8
 80211ec:	4649      	mov	r1, r9
 80211ee:	f7df fa2b 	bl	8000648 <__aeabi_dmul>
 80211f2:	4652      	mov	r2, sl
 80211f4:	465b      	mov	r3, fp
 80211f6:	f7df fcad 	bl	8000b54 <__aeabi_dcmpge>
 80211fa:	9e03      	ldr	r6, [sp, #12]
 80211fc:	4637      	mov	r7, r6
 80211fe:	2800      	cmp	r0, #0
 8021200:	f040 8245 	bne.w	802168e <_dtoa_r+0x93e>
 8021204:	9d01      	ldr	r5, [sp, #4]
 8021206:	2331      	movs	r3, #49	; 0x31
 8021208:	f805 3b01 	strb.w	r3, [r5], #1
 802120c:	9b00      	ldr	r3, [sp, #0]
 802120e:	3301      	adds	r3, #1
 8021210:	9300      	str	r3, [sp, #0]
 8021212:	e240      	b.n	8021696 <_dtoa_r+0x946>
 8021214:	07f2      	lsls	r2, r6, #31
 8021216:	d505      	bpl.n	8021224 <_dtoa_r+0x4d4>
 8021218:	e9d7 2300 	ldrd	r2, r3, [r7]
 802121c:	f7df fa14 	bl	8000648 <__aeabi_dmul>
 8021220:	3501      	adds	r5, #1
 8021222:	2301      	movs	r3, #1
 8021224:	1076      	asrs	r6, r6, #1
 8021226:	3708      	adds	r7, #8
 8021228:	e777      	b.n	802111a <_dtoa_r+0x3ca>
 802122a:	2502      	movs	r5, #2
 802122c:	e779      	b.n	8021122 <_dtoa_r+0x3d2>
 802122e:	9f00      	ldr	r7, [sp, #0]
 8021230:	9e03      	ldr	r6, [sp, #12]
 8021232:	e794      	b.n	802115e <_dtoa_r+0x40e>
 8021234:	9901      	ldr	r1, [sp, #4]
 8021236:	4b4c      	ldr	r3, [pc, #304]	; (8021368 <_dtoa_r+0x618>)
 8021238:	4431      	add	r1, r6
 802123a:	910d      	str	r1, [sp, #52]	; 0x34
 802123c:	9908      	ldr	r1, [sp, #32]
 802123e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8021242:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8021246:	2900      	cmp	r1, #0
 8021248:	d043      	beq.n	80212d2 <_dtoa_r+0x582>
 802124a:	494d      	ldr	r1, [pc, #308]	; (8021380 <_dtoa_r+0x630>)
 802124c:	2000      	movs	r0, #0
 802124e:	f7df fb25 	bl	800089c <__aeabi_ddiv>
 8021252:	4652      	mov	r2, sl
 8021254:	465b      	mov	r3, fp
 8021256:	f7df f83f 	bl	80002d8 <__aeabi_dsub>
 802125a:	9d01      	ldr	r5, [sp, #4]
 802125c:	4682      	mov	sl, r0
 802125e:	468b      	mov	fp, r1
 8021260:	4649      	mov	r1, r9
 8021262:	4640      	mov	r0, r8
 8021264:	f7df fca0 	bl	8000ba8 <__aeabi_d2iz>
 8021268:	4606      	mov	r6, r0
 802126a:	f7df f983 	bl	8000574 <__aeabi_i2d>
 802126e:	4602      	mov	r2, r0
 8021270:	460b      	mov	r3, r1
 8021272:	4640      	mov	r0, r8
 8021274:	4649      	mov	r1, r9
 8021276:	f7df f82f 	bl	80002d8 <__aeabi_dsub>
 802127a:	3630      	adds	r6, #48	; 0x30
 802127c:	f805 6b01 	strb.w	r6, [r5], #1
 8021280:	4652      	mov	r2, sl
 8021282:	465b      	mov	r3, fp
 8021284:	4680      	mov	r8, r0
 8021286:	4689      	mov	r9, r1
 8021288:	f7df fc50 	bl	8000b2c <__aeabi_dcmplt>
 802128c:	2800      	cmp	r0, #0
 802128e:	d163      	bne.n	8021358 <_dtoa_r+0x608>
 8021290:	4642      	mov	r2, r8
 8021292:	464b      	mov	r3, r9
 8021294:	4936      	ldr	r1, [pc, #216]	; (8021370 <_dtoa_r+0x620>)
 8021296:	2000      	movs	r0, #0
 8021298:	f7df f81e 	bl	80002d8 <__aeabi_dsub>
 802129c:	4652      	mov	r2, sl
 802129e:	465b      	mov	r3, fp
 80212a0:	f7df fc44 	bl	8000b2c <__aeabi_dcmplt>
 80212a4:	2800      	cmp	r0, #0
 80212a6:	f040 80b5 	bne.w	8021414 <_dtoa_r+0x6c4>
 80212aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80212ac:	429d      	cmp	r5, r3
 80212ae:	d081      	beq.n	80211b4 <_dtoa_r+0x464>
 80212b0:	4b30      	ldr	r3, [pc, #192]	; (8021374 <_dtoa_r+0x624>)
 80212b2:	2200      	movs	r2, #0
 80212b4:	4650      	mov	r0, sl
 80212b6:	4659      	mov	r1, fp
 80212b8:	f7df f9c6 	bl	8000648 <__aeabi_dmul>
 80212bc:	4b2d      	ldr	r3, [pc, #180]	; (8021374 <_dtoa_r+0x624>)
 80212be:	4682      	mov	sl, r0
 80212c0:	468b      	mov	fp, r1
 80212c2:	4640      	mov	r0, r8
 80212c4:	4649      	mov	r1, r9
 80212c6:	2200      	movs	r2, #0
 80212c8:	f7df f9be 	bl	8000648 <__aeabi_dmul>
 80212cc:	4680      	mov	r8, r0
 80212ce:	4689      	mov	r9, r1
 80212d0:	e7c6      	b.n	8021260 <_dtoa_r+0x510>
 80212d2:	4650      	mov	r0, sl
 80212d4:	4659      	mov	r1, fp
 80212d6:	f7df f9b7 	bl	8000648 <__aeabi_dmul>
 80212da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80212dc:	9d01      	ldr	r5, [sp, #4]
 80212de:	930f      	str	r3, [sp, #60]	; 0x3c
 80212e0:	4682      	mov	sl, r0
 80212e2:	468b      	mov	fp, r1
 80212e4:	4649      	mov	r1, r9
 80212e6:	4640      	mov	r0, r8
 80212e8:	f7df fc5e 	bl	8000ba8 <__aeabi_d2iz>
 80212ec:	4606      	mov	r6, r0
 80212ee:	f7df f941 	bl	8000574 <__aeabi_i2d>
 80212f2:	3630      	adds	r6, #48	; 0x30
 80212f4:	4602      	mov	r2, r0
 80212f6:	460b      	mov	r3, r1
 80212f8:	4640      	mov	r0, r8
 80212fa:	4649      	mov	r1, r9
 80212fc:	f7de ffec 	bl	80002d8 <__aeabi_dsub>
 8021300:	f805 6b01 	strb.w	r6, [r5], #1
 8021304:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021306:	429d      	cmp	r5, r3
 8021308:	4680      	mov	r8, r0
 802130a:	4689      	mov	r9, r1
 802130c:	f04f 0200 	mov.w	r2, #0
 8021310:	d124      	bne.n	802135c <_dtoa_r+0x60c>
 8021312:	4b1b      	ldr	r3, [pc, #108]	; (8021380 <_dtoa_r+0x630>)
 8021314:	4650      	mov	r0, sl
 8021316:	4659      	mov	r1, fp
 8021318:	f7de ffe0 	bl	80002dc <__adddf3>
 802131c:	4602      	mov	r2, r0
 802131e:	460b      	mov	r3, r1
 8021320:	4640      	mov	r0, r8
 8021322:	4649      	mov	r1, r9
 8021324:	f7df fc20 	bl	8000b68 <__aeabi_dcmpgt>
 8021328:	2800      	cmp	r0, #0
 802132a:	d173      	bne.n	8021414 <_dtoa_r+0x6c4>
 802132c:	4652      	mov	r2, sl
 802132e:	465b      	mov	r3, fp
 8021330:	4913      	ldr	r1, [pc, #76]	; (8021380 <_dtoa_r+0x630>)
 8021332:	2000      	movs	r0, #0
 8021334:	f7de ffd0 	bl	80002d8 <__aeabi_dsub>
 8021338:	4602      	mov	r2, r0
 802133a:	460b      	mov	r3, r1
 802133c:	4640      	mov	r0, r8
 802133e:	4649      	mov	r1, r9
 8021340:	f7df fbf4 	bl	8000b2c <__aeabi_dcmplt>
 8021344:	2800      	cmp	r0, #0
 8021346:	f43f af35 	beq.w	80211b4 <_dtoa_r+0x464>
 802134a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802134c:	1e6b      	subs	r3, r5, #1
 802134e:	930f      	str	r3, [sp, #60]	; 0x3c
 8021350:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8021354:	2b30      	cmp	r3, #48	; 0x30
 8021356:	d0f8      	beq.n	802134a <_dtoa_r+0x5fa>
 8021358:	9700      	str	r7, [sp, #0]
 802135a:	e049      	b.n	80213f0 <_dtoa_r+0x6a0>
 802135c:	4b05      	ldr	r3, [pc, #20]	; (8021374 <_dtoa_r+0x624>)
 802135e:	f7df f973 	bl	8000648 <__aeabi_dmul>
 8021362:	4680      	mov	r8, r0
 8021364:	4689      	mov	r9, r1
 8021366:	e7bd      	b.n	80212e4 <_dtoa_r+0x594>
 8021368:	080247b8 	.word	0x080247b8
 802136c:	08024790 	.word	0x08024790
 8021370:	3ff00000 	.word	0x3ff00000
 8021374:	40240000 	.word	0x40240000
 8021378:	401c0000 	.word	0x401c0000
 802137c:	40140000 	.word	0x40140000
 8021380:	3fe00000 	.word	0x3fe00000
 8021384:	9d01      	ldr	r5, [sp, #4]
 8021386:	4656      	mov	r6, sl
 8021388:	465f      	mov	r7, fp
 802138a:	4642      	mov	r2, r8
 802138c:	464b      	mov	r3, r9
 802138e:	4630      	mov	r0, r6
 8021390:	4639      	mov	r1, r7
 8021392:	f7df fa83 	bl	800089c <__aeabi_ddiv>
 8021396:	f7df fc07 	bl	8000ba8 <__aeabi_d2iz>
 802139a:	4682      	mov	sl, r0
 802139c:	f7df f8ea 	bl	8000574 <__aeabi_i2d>
 80213a0:	4642      	mov	r2, r8
 80213a2:	464b      	mov	r3, r9
 80213a4:	f7df f950 	bl	8000648 <__aeabi_dmul>
 80213a8:	4602      	mov	r2, r0
 80213aa:	460b      	mov	r3, r1
 80213ac:	4630      	mov	r0, r6
 80213ae:	4639      	mov	r1, r7
 80213b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80213b4:	f7de ff90 	bl	80002d8 <__aeabi_dsub>
 80213b8:	f805 6b01 	strb.w	r6, [r5], #1
 80213bc:	9e01      	ldr	r6, [sp, #4]
 80213be:	9f03      	ldr	r7, [sp, #12]
 80213c0:	1bae      	subs	r6, r5, r6
 80213c2:	42b7      	cmp	r7, r6
 80213c4:	4602      	mov	r2, r0
 80213c6:	460b      	mov	r3, r1
 80213c8:	d135      	bne.n	8021436 <_dtoa_r+0x6e6>
 80213ca:	f7de ff87 	bl	80002dc <__adddf3>
 80213ce:	4642      	mov	r2, r8
 80213d0:	464b      	mov	r3, r9
 80213d2:	4606      	mov	r6, r0
 80213d4:	460f      	mov	r7, r1
 80213d6:	f7df fbc7 	bl	8000b68 <__aeabi_dcmpgt>
 80213da:	b9d0      	cbnz	r0, 8021412 <_dtoa_r+0x6c2>
 80213dc:	4642      	mov	r2, r8
 80213de:	464b      	mov	r3, r9
 80213e0:	4630      	mov	r0, r6
 80213e2:	4639      	mov	r1, r7
 80213e4:	f7df fb98 	bl	8000b18 <__aeabi_dcmpeq>
 80213e8:	b110      	cbz	r0, 80213f0 <_dtoa_r+0x6a0>
 80213ea:	f01a 0f01 	tst.w	sl, #1
 80213ee:	d110      	bne.n	8021412 <_dtoa_r+0x6c2>
 80213f0:	4620      	mov	r0, r4
 80213f2:	ee18 1a10 	vmov	r1, s16
 80213f6:	f000 fd05 	bl	8021e04 <_Bfree>
 80213fa:	2300      	movs	r3, #0
 80213fc:	9800      	ldr	r0, [sp, #0]
 80213fe:	702b      	strb	r3, [r5, #0]
 8021400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021402:	3001      	adds	r0, #1
 8021404:	6018      	str	r0, [r3, #0]
 8021406:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021408:	2b00      	cmp	r3, #0
 802140a:	f43f acf1 	beq.w	8020df0 <_dtoa_r+0xa0>
 802140e:	601d      	str	r5, [r3, #0]
 8021410:	e4ee      	b.n	8020df0 <_dtoa_r+0xa0>
 8021412:	9f00      	ldr	r7, [sp, #0]
 8021414:	462b      	mov	r3, r5
 8021416:	461d      	mov	r5, r3
 8021418:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802141c:	2a39      	cmp	r2, #57	; 0x39
 802141e:	d106      	bne.n	802142e <_dtoa_r+0x6de>
 8021420:	9a01      	ldr	r2, [sp, #4]
 8021422:	429a      	cmp	r2, r3
 8021424:	d1f7      	bne.n	8021416 <_dtoa_r+0x6c6>
 8021426:	9901      	ldr	r1, [sp, #4]
 8021428:	2230      	movs	r2, #48	; 0x30
 802142a:	3701      	adds	r7, #1
 802142c:	700a      	strb	r2, [r1, #0]
 802142e:	781a      	ldrb	r2, [r3, #0]
 8021430:	3201      	adds	r2, #1
 8021432:	701a      	strb	r2, [r3, #0]
 8021434:	e790      	b.n	8021358 <_dtoa_r+0x608>
 8021436:	4ba6      	ldr	r3, [pc, #664]	; (80216d0 <_dtoa_r+0x980>)
 8021438:	2200      	movs	r2, #0
 802143a:	f7df f905 	bl	8000648 <__aeabi_dmul>
 802143e:	2200      	movs	r2, #0
 8021440:	2300      	movs	r3, #0
 8021442:	4606      	mov	r6, r0
 8021444:	460f      	mov	r7, r1
 8021446:	f7df fb67 	bl	8000b18 <__aeabi_dcmpeq>
 802144a:	2800      	cmp	r0, #0
 802144c:	d09d      	beq.n	802138a <_dtoa_r+0x63a>
 802144e:	e7cf      	b.n	80213f0 <_dtoa_r+0x6a0>
 8021450:	9a08      	ldr	r2, [sp, #32]
 8021452:	2a00      	cmp	r2, #0
 8021454:	f000 80d7 	beq.w	8021606 <_dtoa_r+0x8b6>
 8021458:	9a06      	ldr	r2, [sp, #24]
 802145a:	2a01      	cmp	r2, #1
 802145c:	f300 80ba 	bgt.w	80215d4 <_dtoa_r+0x884>
 8021460:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021462:	2a00      	cmp	r2, #0
 8021464:	f000 80b2 	beq.w	80215cc <_dtoa_r+0x87c>
 8021468:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802146c:	9e07      	ldr	r6, [sp, #28]
 802146e:	9d04      	ldr	r5, [sp, #16]
 8021470:	9a04      	ldr	r2, [sp, #16]
 8021472:	441a      	add	r2, r3
 8021474:	9204      	str	r2, [sp, #16]
 8021476:	9a05      	ldr	r2, [sp, #20]
 8021478:	2101      	movs	r1, #1
 802147a:	441a      	add	r2, r3
 802147c:	4620      	mov	r0, r4
 802147e:	9205      	str	r2, [sp, #20]
 8021480:	f000 fd78 	bl	8021f74 <__i2b>
 8021484:	4607      	mov	r7, r0
 8021486:	2d00      	cmp	r5, #0
 8021488:	dd0c      	ble.n	80214a4 <_dtoa_r+0x754>
 802148a:	9b05      	ldr	r3, [sp, #20]
 802148c:	2b00      	cmp	r3, #0
 802148e:	dd09      	ble.n	80214a4 <_dtoa_r+0x754>
 8021490:	42ab      	cmp	r3, r5
 8021492:	9a04      	ldr	r2, [sp, #16]
 8021494:	bfa8      	it	ge
 8021496:	462b      	movge	r3, r5
 8021498:	1ad2      	subs	r2, r2, r3
 802149a:	9204      	str	r2, [sp, #16]
 802149c:	9a05      	ldr	r2, [sp, #20]
 802149e:	1aed      	subs	r5, r5, r3
 80214a0:	1ad3      	subs	r3, r2, r3
 80214a2:	9305      	str	r3, [sp, #20]
 80214a4:	9b07      	ldr	r3, [sp, #28]
 80214a6:	b31b      	cbz	r3, 80214f0 <_dtoa_r+0x7a0>
 80214a8:	9b08      	ldr	r3, [sp, #32]
 80214aa:	2b00      	cmp	r3, #0
 80214ac:	f000 80af 	beq.w	802160e <_dtoa_r+0x8be>
 80214b0:	2e00      	cmp	r6, #0
 80214b2:	dd13      	ble.n	80214dc <_dtoa_r+0x78c>
 80214b4:	4639      	mov	r1, r7
 80214b6:	4632      	mov	r2, r6
 80214b8:	4620      	mov	r0, r4
 80214ba:	f000 fe1b 	bl	80220f4 <__pow5mult>
 80214be:	ee18 2a10 	vmov	r2, s16
 80214c2:	4601      	mov	r1, r0
 80214c4:	4607      	mov	r7, r0
 80214c6:	4620      	mov	r0, r4
 80214c8:	f000 fd6a 	bl	8021fa0 <__multiply>
 80214cc:	ee18 1a10 	vmov	r1, s16
 80214d0:	4680      	mov	r8, r0
 80214d2:	4620      	mov	r0, r4
 80214d4:	f000 fc96 	bl	8021e04 <_Bfree>
 80214d8:	ee08 8a10 	vmov	s16, r8
 80214dc:	9b07      	ldr	r3, [sp, #28]
 80214de:	1b9a      	subs	r2, r3, r6
 80214e0:	d006      	beq.n	80214f0 <_dtoa_r+0x7a0>
 80214e2:	ee18 1a10 	vmov	r1, s16
 80214e6:	4620      	mov	r0, r4
 80214e8:	f000 fe04 	bl	80220f4 <__pow5mult>
 80214ec:	ee08 0a10 	vmov	s16, r0
 80214f0:	2101      	movs	r1, #1
 80214f2:	4620      	mov	r0, r4
 80214f4:	f000 fd3e 	bl	8021f74 <__i2b>
 80214f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80214fa:	2b00      	cmp	r3, #0
 80214fc:	4606      	mov	r6, r0
 80214fe:	f340 8088 	ble.w	8021612 <_dtoa_r+0x8c2>
 8021502:	461a      	mov	r2, r3
 8021504:	4601      	mov	r1, r0
 8021506:	4620      	mov	r0, r4
 8021508:	f000 fdf4 	bl	80220f4 <__pow5mult>
 802150c:	9b06      	ldr	r3, [sp, #24]
 802150e:	2b01      	cmp	r3, #1
 8021510:	4606      	mov	r6, r0
 8021512:	f340 8081 	ble.w	8021618 <_dtoa_r+0x8c8>
 8021516:	f04f 0800 	mov.w	r8, #0
 802151a:	6933      	ldr	r3, [r6, #16]
 802151c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8021520:	6918      	ldr	r0, [r3, #16]
 8021522:	f000 fcd7 	bl	8021ed4 <__hi0bits>
 8021526:	f1c0 0020 	rsb	r0, r0, #32
 802152a:	9b05      	ldr	r3, [sp, #20]
 802152c:	4418      	add	r0, r3
 802152e:	f010 001f 	ands.w	r0, r0, #31
 8021532:	f000 8092 	beq.w	802165a <_dtoa_r+0x90a>
 8021536:	f1c0 0320 	rsb	r3, r0, #32
 802153a:	2b04      	cmp	r3, #4
 802153c:	f340 808a 	ble.w	8021654 <_dtoa_r+0x904>
 8021540:	f1c0 001c 	rsb	r0, r0, #28
 8021544:	9b04      	ldr	r3, [sp, #16]
 8021546:	4403      	add	r3, r0
 8021548:	9304      	str	r3, [sp, #16]
 802154a:	9b05      	ldr	r3, [sp, #20]
 802154c:	4403      	add	r3, r0
 802154e:	4405      	add	r5, r0
 8021550:	9305      	str	r3, [sp, #20]
 8021552:	9b04      	ldr	r3, [sp, #16]
 8021554:	2b00      	cmp	r3, #0
 8021556:	dd07      	ble.n	8021568 <_dtoa_r+0x818>
 8021558:	ee18 1a10 	vmov	r1, s16
 802155c:	461a      	mov	r2, r3
 802155e:	4620      	mov	r0, r4
 8021560:	f000 fe22 	bl	80221a8 <__lshift>
 8021564:	ee08 0a10 	vmov	s16, r0
 8021568:	9b05      	ldr	r3, [sp, #20]
 802156a:	2b00      	cmp	r3, #0
 802156c:	dd05      	ble.n	802157a <_dtoa_r+0x82a>
 802156e:	4631      	mov	r1, r6
 8021570:	461a      	mov	r2, r3
 8021572:	4620      	mov	r0, r4
 8021574:	f000 fe18 	bl	80221a8 <__lshift>
 8021578:	4606      	mov	r6, r0
 802157a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802157c:	2b00      	cmp	r3, #0
 802157e:	d06e      	beq.n	802165e <_dtoa_r+0x90e>
 8021580:	ee18 0a10 	vmov	r0, s16
 8021584:	4631      	mov	r1, r6
 8021586:	f000 fe7f 	bl	8022288 <__mcmp>
 802158a:	2800      	cmp	r0, #0
 802158c:	da67      	bge.n	802165e <_dtoa_r+0x90e>
 802158e:	9b00      	ldr	r3, [sp, #0]
 8021590:	3b01      	subs	r3, #1
 8021592:	ee18 1a10 	vmov	r1, s16
 8021596:	9300      	str	r3, [sp, #0]
 8021598:	220a      	movs	r2, #10
 802159a:	2300      	movs	r3, #0
 802159c:	4620      	mov	r0, r4
 802159e:	f000 fc53 	bl	8021e48 <__multadd>
 80215a2:	9b08      	ldr	r3, [sp, #32]
 80215a4:	ee08 0a10 	vmov	s16, r0
 80215a8:	2b00      	cmp	r3, #0
 80215aa:	f000 81b1 	beq.w	8021910 <_dtoa_r+0xbc0>
 80215ae:	2300      	movs	r3, #0
 80215b0:	4639      	mov	r1, r7
 80215b2:	220a      	movs	r2, #10
 80215b4:	4620      	mov	r0, r4
 80215b6:	f000 fc47 	bl	8021e48 <__multadd>
 80215ba:	9b02      	ldr	r3, [sp, #8]
 80215bc:	2b00      	cmp	r3, #0
 80215be:	4607      	mov	r7, r0
 80215c0:	f300 808e 	bgt.w	80216e0 <_dtoa_r+0x990>
 80215c4:	9b06      	ldr	r3, [sp, #24]
 80215c6:	2b02      	cmp	r3, #2
 80215c8:	dc51      	bgt.n	802166e <_dtoa_r+0x91e>
 80215ca:	e089      	b.n	80216e0 <_dtoa_r+0x990>
 80215cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80215ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80215d2:	e74b      	b.n	802146c <_dtoa_r+0x71c>
 80215d4:	9b03      	ldr	r3, [sp, #12]
 80215d6:	1e5e      	subs	r6, r3, #1
 80215d8:	9b07      	ldr	r3, [sp, #28]
 80215da:	42b3      	cmp	r3, r6
 80215dc:	bfbf      	itttt	lt
 80215de:	9b07      	ldrlt	r3, [sp, #28]
 80215e0:	9607      	strlt	r6, [sp, #28]
 80215e2:	1af2      	sublt	r2, r6, r3
 80215e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80215e6:	bfb6      	itet	lt
 80215e8:	189b      	addlt	r3, r3, r2
 80215ea:	1b9e      	subge	r6, r3, r6
 80215ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 80215ee:	9b03      	ldr	r3, [sp, #12]
 80215f0:	bfb8      	it	lt
 80215f2:	2600      	movlt	r6, #0
 80215f4:	2b00      	cmp	r3, #0
 80215f6:	bfb7      	itett	lt
 80215f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80215fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8021600:	1a9d      	sublt	r5, r3, r2
 8021602:	2300      	movlt	r3, #0
 8021604:	e734      	b.n	8021470 <_dtoa_r+0x720>
 8021606:	9e07      	ldr	r6, [sp, #28]
 8021608:	9d04      	ldr	r5, [sp, #16]
 802160a:	9f08      	ldr	r7, [sp, #32]
 802160c:	e73b      	b.n	8021486 <_dtoa_r+0x736>
 802160e:	9a07      	ldr	r2, [sp, #28]
 8021610:	e767      	b.n	80214e2 <_dtoa_r+0x792>
 8021612:	9b06      	ldr	r3, [sp, #24]
 8021614:	2b01      	cmp	r3, #1
 8021616:	dc18      	bgt.n	802164a <_dtoa_r+0x8fa>
 8021618:	f1ba 0f00 	cmp.w	sl, #0
 802161c:	d115      	bne.n	802164a <_dtoa_r+0x8fa>
 802161e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8021622:	b993      	cbnz	r3, 802164a <_dtoa_r+0x8fa>
 8021624:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8021628:	0d1b      	lsrs	r3, r3, #20
 802162a:	051b      	lsls	r3, r3, #20
 802162c:	b183      	cbz	r3, 8021650 <_dtoa_r+0x900>
 802162e:	9b04      	ldr	r3, [sp, #16]
 8021630:	3301      	adds	r3, #1
 8021632:	9304      	str	r3, [sp, #16]
 8021634:	9b05      	ldr	r3, [sp, #20]
 8021636:	3301      	adds	r3, #1
 8021638:	9305      	str	r3, [sp, #20]
 802163a:	f04f 0801 	mov.w	r8, #1
 802163e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021640:	2b00      	cmp	r3, #0
 8021642:	f47f af6a 	bne.w	802151a <_dtoa_r+0x7ca>
 8021646:	2001      	movs	r0, #1
 8021648:	e76f      	b.n	802152a <_dtoa_r+0x7da>
 802164a:	f04f 0800 	mov.w	r8, #0
 802164e:	e7f6      	b.n	802163e <_dtoa_r+0x8ee>
 8021650:	4698      	mov	r8, r3
 8021652:	e7f4      	b.n	802163e <_dtoa_r+0x8ee>
 8021654:	f43f af7d 	beq.w	8021552 <_dtoa_r+0x802>
 8021658:	4618      	mov	r0, r3
 802165a:	301c      	adds	r0, #28
 802165c:	e772      	b.n	8021544 <_dtoa_r+0x7f4>
 802165e:	9b03      	ldr	r3, [sp, #12]
 8021660:	2b00      	cmp	r3, #0
 8021662:	dc37      	bgt.n	80216d4 <_dtoa_r+0x984>
 8021664:	9b06      	ldr	r3, [sp, #24]
 8021666:	2b02      	cmp	r3, #2
 8021668:	dd34      	ble.n	80216d4 <_dtoa_r+0x984>
 802166a:	9b03      	ldr	r3, [sp, #12]
 802166c:	9302      	str	r3, [sp, #8]
 802166e:	9b02      	ldr	r3, [sp, #8]
 8021670:	b96b      	cbnz	r3, 802168e <_dtoa_r+0x93e>
 8021672:	4631      	mov	r1, r6
 8021674:	2205      	movs	r2, #5
 8021676:	4620      	mov	r0, r4
 8021678:	f000 fbe6 	bl	8021e48 <__multadd>
 802167c:	4601      	mov	r1, r0
 802167e:	4606      	mov	r6, r0
 8021680:	ee18 0a10 	vmov	r0, s16
 8021684:	f000 fe00 	bl	8022288 <__mcmp>
 8021688:	2800      	cmp	r0, #0
 802168a:	f73f adbb 	bgt.w	8021204 <_dtoa_r+0x4b4>
 802168e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021690:	9d01      	ldr	r5, [sp, #4]
 8021692:	43db      	mvns	r3, r3
 8021694:	9300      	str	r3, [sp, #0]
 8021696:	f04f 0800 	mov.w	r8, #0
 802169a:	4631      	mov	r1, r6
 802169c:	4620      	mov	r0, r4
 802169e:	f000 fbb1 	bl	8021e04 <_Bfree>
 80216a2:	2f00      	cmp	r7, #0
 80216a4:	f43f aea4 	beq.w	80213f0 <_dtoa_r+0x6a0>
 80216a8:	f1b8 0f00 	cmp.w	r8, #0
 80216ac:	d005      	beq.n	80216ba <_dtoa_r+0x96a>
 80216ae:	45b8      	cmp	r8, r7
 80216b0:	d003      	beq.n	80216ba <_dtoa_r+0x96a>
 80216b2:	4641      	mov	r1, r8
 80216b4:	4620      	mov	r0, r4
 80216b6:	f000 fba5 	bl	8021e04 <_Bfree>
 80216ba:	4639      	mov	r1, r7
 80216bc:	4620      	mov	r0, r4
 80216be:	f000 fba1 	bl	8021e04 <_Bfree>
 80216c2:	e695      	b.n	80213f0 <_dtoa_r+0x6a0>
 80216c4:	2600      	movs	r6, #0
 80216c6:	4637      	mov	r7, r6
 80216c8:	e7e1      	b.n	802168e <_dtoa_r+0x93e>
 80216ca:	9700      	str	r7, [sp, #0]
 80216cc:	4637      	mov	r7, r6
 80216ce:	e599      	b.n	8021204 <_dtoa_r+0x4b4>
 80216d0:	40240000 	.word	0x40240000
 80216d4:	9b08      	ldr	r3, [sp, #32]
 80216d6:	2b00      	cmp	r3, #0
 80216d8:	f000 80ca 	beq.w	8021870 <_dtoa_r+0xb20>
 80216dc:	9b03      	ldr	r3, [sp, #12]
 80216de:	9302      	str	r3, [sp, #8]
 80216e0:	2d00      	cmp	r5, #0
 80216e2:	dd05      	ble.n	80216f0 <_dtoa_r+0x9a0>
 80216e4:	4639      	mov	r1, r7
 80216e6:	462a      	mov	r2, r5
 80216e8:	4620      	mov	r0, r4
 80216ea:	f000 fd5d 	bl	80221a8 <__lshift>
 80216ee:	4607      	mov	r7, r0
 80216f0:	f1b8 0f00 	cmp.w	r8, #0
 80216f4:	d05b      	beq.n	80217ae <_dtoa_r+0xa5e>
 80216f6:	6879      	ldr	r1, [r7, #4]
 80216f8:	4620      	mov	r0, r4
 80216fa:	f000 fb43 	bl	8021d84 <_Balloc>
 80216fe:	4605      	mov	r5, r0
 8021700:	b928      	cbnz	r0, 802170e <_dtoa_r+0x9be>
 8021702:	4b87      	ldr	r3, [pc, #540]	; (8021920 <_dtoa_r+0xbd0>)
 8021704:	4602      	mov	r2, r0
 8021706:	f240 21ea 	movw	r1, #746	; 0x2ea
 802170a:	f7ff bb3b 	b.w	8020d84 <_dtoa_r+0x34>
 802170e:	693a      	ldr	r2, [r7, #16]
 8021710:	3202      	adds	r2, #2
 8021712:	0092      	lsls	r2, r2, #2
 8021714:	f107 010c 	add.w	r1, r7, #12
 8021718:	300c      	adds	r0, #12
 802171a:	f7fe fca9 	bl	8020070 <memcpy>
 802171e:	2201      	movs	r2, #1
 8021720:	4629      	mov	r1, r5
 8021722:	4620      	mov	r0, r4
 8021724:	f000 fd40 	bl	80221a8 <__lshift>
 8021728:	9b01      	ldr	r3, [sp, #4]
 802172a:	f103 0901 	add.w	r9, r3, #1
 802172e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8021732:	4413      	add	r3, r2
 8021734:	9305      	str	r3, [sp, #20]
 8021736:	f00a 0301 	and.w	r3, sl, #1
 802173a:	46b8      	mov	r8, r7
 802173c:	9304      	str	r3, [sp, #16]
 802173e:	4607      	mov	r7, r0
 8021740:	4631      	mov	r1, r6
 8021742:	ee18 0a10 	vmov	r0, s16
 8021746:	f7ff fa77 	bl	8020c38 <quorem>
 802174a:	4641      	mov	r1, r8
 802174c:	9002      	str	r0, [sp, #8]
 802174e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8021752:	ee18 0a10 	vmov	r0, s16
 8021756:	f000 fd97 	bl	8022288 <__mcmp>
 802175a:	463a      	mov	r2, r7
 802175c:	9003      	str	r0, [sp, #12]
 802175e:	4631      	mov	r1, r6
 8021760:	4620      	mov	r0, r4
 8021762:	f000 fdad 	bl	80222c0 <__mdiff>
 8021766:	68c2      	ldr	r2, [r0, #12]
 8021768:	f109 3bff 	add.w	fp, r9, #4294967295
 802176c:	4605      	mov	r5, r0
 802176e:	bb02      	cbnz	r2, 80217b2 <_dtoa_r+0xa62>
 8021770:	4601      	mov	r1, r0
 8021772:	ee18 0a10 	vmov	r0, s16
 8021776:	f000 fd87 	bl	8022288 <__mcmp>
 802177a:	4602      	mov	r2, r0
 802177c:	4629      	mov	r1, r5
 802177e:	4620      	mov	r0, r4
 8021780:	9207      	str	r2, [sp, #28]
 8021782:	f000 fb3f 	bl	8021e04 <_Bfree>
 8021786:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 802178a:	ea43 0102 	orr.w	r1, r3, r2
 802178e:	9b04      	ldr	r3, [sp, #16]
 8021790:	430b      	orrs	r3, r1
 8021792:	464d      	mov	r5, r9
 8021794:	d10f      	bne.n	80217b6 <_dtoa_r+0xa66>
 8021796:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 802179a:	d02a      	beq.n	80217f2 <_dtoa_r+0xaa2>
 802179c:	9b03      	ldr	r3, [sp, #12]
 802179e:	2b00      	cmp	r3, #0
 80217a0:	dd02      	ble.n	80217a8 <_dtoa_r+0xa58>
 80217a2:	9b02      	ldr	r3, [sp, #8]
 80217a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80217a8:	f88b a000 	strb.w	sl, [fp]
 80217ac:	e775      	b.n	802169a <_dtoa_r+0x94a>
 80217ae:	4638      	mov	r0, r7
 80217b0:	e7ba      	b.n	8021728 <_dtoa_r+0x9d8>
 80217b2:	2201      	movs	r2, #1
 80217b4:	e7e2      	b.n	802177c <_dtoa_r+0xa2c>
 80217b6:	9b03      	ldr	r3, [sp, #12]
 80217b8:	2b00      	cmp	r3, #0
 80217ba:	db04      	blt.n	80217c6 <_dtoa_r+0xa76>
 80217bc:	9906      	ldr	r1, [sp, #24]
 80217be:	430b      	orrs	r3, r1
 80217c0:	9904      	ldr	r1, [sp, #16]
 80217c2:	430b      	orrs	r3, r1
 80217c4:	d122      	bne.n	802180c <_dtoa_r+0xabc>
 80217c6:	2a00      	cmp	r2, #0
 80217c8:	ddee      	ble.n	80217a8 <_dtoa_r+0xa58>
 80217ca:	ee18 1a10 	vmov	r1, s16
 80217ce:	2201      	movs	r2, #1
 80217d0:	4620      	mov	r0, r4
 80217d2:	f000 fce9 	bl	80221a8 <__lshift>
 80217d6:	4631      	mov	r1, r6
 80217d8:	ee08 0a10 	vmov	s16, r0
 80217dc:	f000 fd54 	bl	8022288 <__mcmp>
 80217e0:	2800      	cmp	r0, #0
 80217e2:	dc03      	bgt.n	80217ec <_dtoa_r+0xa9c>
 80217e4:	d1e0      	bne.n	80217a8 <_dtoa_r+0xa58>
 80217e6:	f01a 0f01 	tst.w	sl, #1
 80217ea:	d0dd      	beq.n	80217a8 <_dtoa_r+0xa58>
 80217ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80217f0:	d1d7      	bne.n	80217a2 <_dtoa_r+0xa52>
 80217f2:	2339      	movs	r3, #57	; 0x39
 80217f4:	f88b 3000 	strb.w	r3, [fp]
 80217f8:	462b      	mov	r3, r5
 80217fa:	461d      	mov	r5, r3
 80217fc:	3b01      	subs	r3, #1
 80217fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8021802:	2a39      	cmp	r2, #57	; 0x39
 8021804:	d071      	beq.n	80218ea <_dtoa_r+0xb9a>
 8021806:	3201      	adds	r2, #1
 8021808:	701a      	strb	r2, [r3, #0]
 802180a:	e746      	b.n	802169a <_dtoa_r+0x94a>
 802180c:	2a00      	cmp	r2, #0
 802180e:	dd07      	ble.n	8021820 <_dtoa_r+0xad0>
 8021810:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8021814:	d0ed      	beq.n	80217f2 <_dtoa_r+0xaa2>
 8021816:	f10a 0301 	add.w	r3, sl, #1
 802181a:	f88b 3000 	strb.w	r3, [fp]
 802181e:	e73c      	b.n	802169a <_dtoa_r+0x94a>
 8021820:	9b05      	ldr	r3, [sp, #20]
 8021822:	f809 ac01 	strb.w	sl, [r9, #-1]
 8021826:	4599      	cmp	r9, r3
 8021828:	d047      	beq.n	80218ba <_dtoa_r+0xb6a>
 802182a:	ee18 1a10 	vmov	r1, s16
 802182e:	2300      	movs	r3, #0
 8021830:	220a      	movs	r2, #10
 8021832:	4620      	mov	r0, r4
 8021834:	f000 fb08 	bl	8021e48 <__multadd>
 8021838:	45b8      	cmp	r8, r7
 802183a:	ee08 0a10 	vmov	s16, r0
 802183e:	f04f 0300 	mov.w	r3, #0
 8021842:	f04f 020a 	mov.w	r2, #10
 8021846:	4641      	mov	r1, r8
 8021848:	4620      	mov	r0, r4
 802184a:	d106      	bne.n	802185a <_dtoa_r+0xb0a>
 802184c:	f000 fafc 	bl	8021e48 <__multadd>
 8021850:	4680      	mov	r8, r0
 8021852:	4607      	mov	r7, r0
 8021854:	f109 0901 	add.w	r9, r9, #1
 8021858:	e772      	b.n	8021740 <_dtoa_r+0x9f0>
 802185a:	f000 faf5 	bl	8021e48 <__multadd>
 802185e:	4639      	mov	r1, r7
 8021860:	4680      	mov	r8, r0
 8021862:	2300      	movs	r3, #0
 8021864:	220a      	movs	r2, #10
 8021866:	4620      	mov	r0, r4
 8021868:	f000 faee 	bl	8021e48 <__multadd>
 802186c:	4607      	mov	r7, r0
 802186e:	e7f1      	b.n	8021854 <_dtoa_r+0xb04>
 8021870:	9b03      	ldr	r3, [sp, #12]
 8021872:	9302      	str	r3, [sp, #8]
 8021874:	9d01      	ldr	r5, [sp, #4]
 8021876:	ee18 0a10 	vmov	r0, s16
 802187a:	4631      	mov	r1, r6
 802187c:	f7ff f9dc 	bl	8020c38 <quorem>
 8021880:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8021884:	9b01      	ldr	r3, [sp, #4]
 8021886:	f805 ab01 	strb.w	sl, [r5], #1
 802188a:	1aea      	subs	r2, r5, r3
 802188c:	9b02      	ldr	r3, [sp, #8]
 802188e:	4293      	cmp	r3, r2
 8021890:	dd09      	ble.n	80218a6 <_dtoa_r+0xb56>
 8021892:	ee18 1a10 	vmov	r1, s16
 8021896:	2300      	movs	r3, #0
 8021898:	220a      	movs	r2, #10
 802189a:	4620      	mov	r0, r4
 802189c:	f000 fad4 	bl	8021e48 <__multadd>
 80218a0:	ee08 0a10 	vmov	s16, r0
 80218a4:	e7e7      	b.n	8021876 <_dtoa_r+0xb26>
 80218a6:	9b02      	ldr	r3, [sp, #8]
 80218a8:	2b00      	cmp	r3, #0
 80218aa:	bfc8      	it	gt
 80218ac:	461d      	movgt	r5, r3
 80218ae:	9b01      	ldr	r3, [sp, #4]
 80218b0:	bfd8      	it	le
 80218b2:	2501      	movle	r5, #1
 80218b4:	441d      	add	r5, r3
 80218b6:	f04f 0800 	mov.w	r8, #0
 80218ba:	ee18 1a10 	vmov	r1, s16
 80218be:	2201      	movs	r2, #1
 80218c0:	4620      	mov	r0, r4
 80218c2:	f000 fc71 	bl	80221a8 <__lshift>
 80218c6:	4631      	mov	r1, r6
 80218c8:	ee08 0a10 	vmov	s16, r0
 80218cc:	f000 fcdc 	bl	8022288 <__mcmp>
 80218d0:	2800      	cmp	r0, #0
 80218d2:	dc91      	bgt.n	80217f8 <_dtoa_r+0xaa8>
 80218d4:	d102      	bne.n	80218dc <_dtoa_r+0xb8c>
 80218d6:	f01a 0f01 	tst.w	sl, #1
 80218da:	d18d      	bne.n	80217f8 <_dtoa_r+0xaa8>
 80218dc:	462b      	mov	r3, r5
 80218de:	461d      	mov	r5, r3
 80218e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80218e4:	2a30      	cmp	r2, #48	; 0x30
 80218e6:	d0fa      	beq.n	80218de <_dtoa_r+0xb8e>
 80218e8:	e6d7      	b.n	802169a <_dtoa_r+0x94a>
 80218ea:	9a01      	ldr	r2, [sp, #4]
 80218ec:	429a      	cmp	r2, r3
 80218ee:	d184      	bne.n	80217fa <_dtoa_r+0xaaa>
 80218f0:	9b00      	ldr	r3, [sp, #0]
 80218f2:	3301      	adds	r3, #1
 80218f4:	9300      	str	r3, [sp, #0]
 80218f6:	2331      	movs	r3, #49	; 0x31
 80218f8:	7013      	strb	r3, [r2, #0]
 80218fa:	e6ce      	b.n	802169a <_dtoa_r+0x94a>
 80218fc:	4b09      	ldr	r3, [pc, #36]	; (8021924 <_dtoa_r+0xbd4>)
 80218fe:	f7ff ba95 	b.w	8020e2c <_dtoa_r+0xdc>
 8021902:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021904:	2b00      	cmp	r3, #0
 8021906:	f47f aa6e 	bne.w	8020de6 <_dtoa_r+0x96>
 802190a:	4b07      	ldr	r3, [pc, #28]	; (8021928 <_dtoa_r+0xbd8>)
 802190c:	f7ff ba8e 	b.w	8020e2c <_dtoa_r+0xdc>
 8021910:	9b02      	ldr	r3, [sp, #8]
 8021912:	2b00      	cmp	r3, #0
 8021914:	dcae      	bgt.n	8021874 <_dtoa_r+0xb24>
 8021916:	9b06      	ldr	r3, [sp, #24]
 8021918:	2b02      	cmp	r3, #2
 802191a:	f73f aea8 	bgt.w	802166e <_dtoa_r+0x91e>
 802191e:	e7a9      	b.n	8021874 <_dtoa_r+0xb24>
 8021920:	080246bf 	.word	0x080246bf
 8021924:	0802461c 	.word	0x0802461c
 8021928:	08024640 	.word	0x08024640

0802192c <__sflush_r>:
 802192c:	898a      	ldrh	r2, [r1, #12]
 802192e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021932:	4605      	mov	r5, r0
 8021934:	0710      	lsls	r0, r2, #28
 8021936:	460c      	mov	r4, r1
 8021938:	d458      	bmi.n	80219ec <__sflush_r+0xc0>
 802193a:	684b      	ldr	r3, [r1, #4]
 802193c:	2b00      	cmp	r3, #0
 802193e:	dc05      	bgt.n	802194c <__sflush_r+0x20>
 8021940:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8021942:	2b00      	cmp	r3, #0
 8021944:	dc02      	bgt.n	802194c <__sflush_r+0x20>
 8021946:	2000      	movs	r0, #0
 8021948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802194c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802194e:	2e00      	cmp	r6, #0
 8021950:	d0f9      	beq.n	8021946 <__sflush_r+0x1a>
 8021952:	2300      	movs	r3, #0
 8021954:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8021958:	682f      	ldr	r7, [r5, #0]
 802195a:	602b      	str	r3, [r5, #0]
 802195c:	d032      	beq.n	80219c4 <__sflush_r+0x98>
 802195e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8021960:	89a3      	ldrh	r3, [r4, #12]
 8021962:	075a      	lsls	r2, r3, #29
 8021964:	d505      	bpl.n	8021972 <__sflush_r+0x46>
 8021966:	6863      	ldr	r3, [r4, #4]
 8021968:	1ac0      	subs	r0, r0, r3
 802196a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802196c:	b10b      	cbz	r3, 8021972 <__sflush_r+0x46>
 802196e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021970:	1ac0      	subs	r0, r0, r3
 8021972:	2300      	movs	r3, #0
 8021974:	4602      	mov	r2, r0
 8021976:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021978:	6a21      	ldr	r1, [r4, #32]
 802197a:	4628      	mov	r0, r5
 802197c:	47b0      	blx	r6
 802197e:	1c43      	adds	r3, r0, #1
 8021980:	89a3      	ldrh	r3, [r4, #12]
 8021982:	d106      	bne.n	8021992 <__sflush_r+0x66>
 8021984:	6829      	ldr	r1, [r5, #0]
 8021986:	291d      	cmp	r1, #29
 8021988:	d82c      	bhi.n	80219e4 <__sflush_r+0xb8>
 802198a:	4a2a      	ldr	r2, [pc, #168]	; (8021a34 <__sflush_r+0x108>)
 802198c:	40ca      	lsrs	r2, r1
 802198e:	07d6      	lsls	r6, r2, #31
 8021990:	d528      	bpl.n	80219e4 <__sflush_r+0xb8>
 8021992:	2200      	movs	r2, #0
 8021994:	6062      	str	r2, [r4, #4]
 8021996:	04d9      	lsls	r1, r3, #19
 8021998:	6922      	ldr	r2, [r4, #16]
 802199a:	6022      	str	r2, [r4, #0]
 802199c:	d504      	bpl.n	80219a8 <__sflush_r+0x7c>
 802199e:	1c42      	adds	r2, r0, #1
 80219a0:	d101      	bne.n	80219a6 <__sflush_r+0x7a>
 80219a2:	682b      	ldr	r3, [r5, #0]
 80219a4:	b903      	cbnz	r3, 80219a8 <__sflush_r+0x7c>
 80219a6:	6560      	str	r0, [r4, #84]	; 0x54
 80219a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80219aa:	602f      	str	r7, [r5, #0]
 80219ac:	2900      	cmp	r1, #0
 80219ae:	d0ca      	beq.n	8021946 <__sflush_r+0x1a>
 80219b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80219b4:	4299      	cmp	r1, r3
 80219b6:	d002      	beq.n	80219be <__sflush_r+0x92>
 80219b8:	4628      	mov	r0, r5
 80219ba:	f000 fd7d 	bl	80224b8 <_free_r>
 80219be:	2000      	movs	r0, #0
 80219c0:	6360      	str	r0, [r4, #52]	; 0x34
 80219c2:	e7c1      	b.n	8021948 <__sflush_r+0x1c>
 80219c4:	6a21      	ldr	r1, [r4, #32]
 80219c6:	2301      	movs	r3, #1
 80219c8:	4628      	mov	r0, r5
 80219ca:	47b0      	blx	r6
 80219cc:	1c41      	adds	r1, r0, #1
 80219ce:	d1c7      	bne.n	8021960 <__sflush_r+0x34>
 80219d0:	682b      	ldr	r3, [r5, #0]
 80219d2:	2b00      	cmp	r3, #0
 80219d4:	d0c4      	beq.n	8021960 <__sflush_r+0x34>
 80219d6:	2b1d      	cmp	r3, #29
 80219d8:	d001      	beq.n	80219de <__sflush_r+0xb2>
 80219da:	2b16      	cmp	r3, #22
 80219dc:	d101      	bne.n	80219e2 <__sflush_r+0xb6>
 80219de:	602f      	str	r7, [r5, #0]
 80219e0:	e7b1      	b.n	8021946 <__sflush_r+0x1a>
 80219e2:	89a3      	ldrh	r3, [r4, #12]
 80219e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80219e8:	81a3      	strh	r3, [r4, #12]
 80219ea:	e7ad      	b.n	8021948 <__sflush_r+0x1c>
 80219ec:	690f      	ldr	r7, [r1, #16]
 80219ee:	2f00      	cmp	r7, #0
 80219f0:	d0a9      	beq.n	8021946 <__sflush_r+0x1a>
 80219f2:	0793      	lsls	r3, r2, #30
 80219f4:	680e      	ldr	r6, [r1, #0]
 80219f6:	bf08      	it	eq
 80219f8:	694b      	ldreq	r3, [r1, #20]
 80219fa:	600f      	str	r7, [r1, #0]
 80219fc:	bf18      	it	ne
 80219fe:	2300      	movne	r3, #0
 8021a00:	eba6 0807 	sub.w	r8, r6, r7
 8021a04:	608b      	str	r3, [r1, #8]
 8021a06:	f1b8 0f00 	cmp.w	r8, #0
 8021a0a:	dd9c      	ble.n	8021946 <__sflush_r+0x1a>
 8021a0c:	6a21      	ldr	r1, [r4, #32]
 8021a0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021a10:	4643      	mov	r3, r8
 8021a12:	463a      	mov	r2, r7
 8021a14:	4628      	mov	r0, r5
 8021a16:	47b0      	blx	r6
 8021a18:	2800      	cmp	r0, #0
 8021a1a:	dc06      	bgt.n	8021a2a <__sflush_r+0xfe>
 8021a1c:	89a3      	ldrh	r3, [r4, #12]
 8021a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021a22:	81a3      	strh	r3, [r4, #12]
 8021a24:	f04f 30ff 	mov.w	r0, #4294967295
 8021a28:	e78e      	b.n	8021948 <__sflush_r+0x1c>
 8021a2a:	4407      	add	r7, r0
 8021a2c:	eba8 0800 	sub.w	r8, r8, r0
 8021a30:	e7e9      	b.n	8021a06 <__sflush_r+0xda>
 8021a32:	bf00      	nop
 8021a34:	20400001 	.word	0x20400001

08021a38 <_fflush_r>:
 8021a38:	b538      	push	{r3, r4, r5, lr}
 8021a3a:	690b      	ldr	r3, [r1, #16]
 8021a3c:	4605      	mov	r5, r0
 8021a3e:	460c      	mov	r4, r1
 8021a40:	b913      	cbnz	r3, 8021a48 <_fflush_r+0x10>
 8021a42:	2500      	movs	r5, #0
 8021a44:	4628      	mov	r0, r5
 8021a46:	bd38      	pop	{r3, r4, r5, pc}
 8021a48:	b118      	cbz	r0, 8021a52 <_fflush_r+0x1a>
 8021a4a:	6983      	ldr	r3, [r0, #24]
 8021a4c:	b90b      	cbnz	r3, 8021a52 <_fflush_r+0x1a>
 8021a4e:	f000 f887 	bl	8021b60 <__sinit>
 8021a52:	4b14      	ldr	r3, [pc, #80]	; (8021aa4 <_fflush_r+0x6c>)
 8021a54:	429c      	cmp	r4, r3
 8021a56:	d11b      	bne.n	8021a90 <_fflush_r+0x58>
 8021a58:	686c      	ldr	r4, [r5, #4]
 8021a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021a5e:	2b00      	cmp	r3, #0
 8021a60:	d0ef      	beq.n	8021a42 <_fflush_r+0xa>
 8021a62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8021a64:	07d0      	lsls	r0, r2, #31
 8021a66:	d404      	bmi.n	8021a72 <_fflush_r+0x3a>
 8021a68:	0599      	lsls	r1, r3, #22
 8021a6a:	d402      	bmi.n	8021a72 <_fflush_r+0x3a>
 8021a6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021a6e:	f000 f91a 	bl	8021ca6 <__retarget_lock_acquire_recursive>
 8021a72:	4628      	mov	r0, r5
 8021a74:	4621      	mov	r1, r4
 8021a76:	f7ff ff59 	bl	802192c <__sflush_r>
 8021a7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021a7c:	07da      	lsls	r2, r3, #31
 8021a7e:	4605      	mov	r5, r0
 8021a80:	d4e0      	bmi.n	8021a44 <_fflush_r+0xc>
 8021a82:	89a3      	ldrh	r3, [r4, #12]
 8021a84:	059b      	lsls	r3, r3, #22
 8021a86:	d4dd      	bmi.n	8021a44 <_fflush_r+0xc>
 8021a88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021a8a:	f000 f90d 	bl	8021ca8 <__retarget_lock_release_recursive>
 8021a8e:	e7d9      	b.n	8021a44 <_fflush_r+0xc>
 8021a90:	4b05      	ldr	r3, [pc, #20]	; (8021aa8 <_fflush_r+0x70>)
 8021a92:	429c      	cmp	r4, r3
 8021a94:	d101      	bne.n	8021a9a <_fflush_r+0x62>
 8021a96:	68ac      	ldr	r4, [r5, #8]
 8021a98:	e7df      	b.n	8021a5a <_fflush_r+0x22>
 8021a9a:	4b04      	ldr	r3, [pc, #16]	; (8021aac <_fflush_r+0x74>)
 8021a9c:	429c      	cmp	r4, r3
 8021a9e:	bf08      	it	eq
 8021aa0:	68ec      	ldreq	r4, [r5, #12]
 8021aa2:	e7da      	b.n	8021a5a <_fflush_r+0x22>
 8021aa4:	080246f0 	.word	0x080246f0
 8021aa8:	08024710 	.word	0x08024710
 8021aac:	080246d0 	.word	0x080246d0

08021ab0 <std>:
 8021ab0:	2300      	movs	r3, #0
 8021ab2:	b510      	push	{r4, lr}
 8021ab4:	4604      	mov	r4, r0
 8021ab6:	e9c0 3300 	strd	r3, r3, [r0]
 8021aba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021abe:	6083      	str	r3, [r0, #8]
 8021ac0:	8181      	strh	r1, [r0, #12]
 8021ac2:	6643      	str	r3, [r0, #100]	; 0x64
 8021ac4:	81c2      	strh	r2, [r0, #14]
 8021ac6:	6183      	str	r3, [r0, #24]
 8021ac8:	4619      	mov	r1, r3
 8021aca:	2208      	movs	r2, #8
 8021acc:	305c      	adds	r0, #92	; 0x5c
 8021ace:	f7fe fadd 	bl	802008c <memset>
 8021ad2:	4b05      	ldr	r3, [pc, #20]	; (8021ae8 <std+0x38>)
 8021ad4:	6263      	str	r3, [r4, #36]	; 0x24
 8021ad6:	4b05      	ldr	r3, [pc, #20]	; (8021aec <std+0x3c>)
 8021ad8:	62a3      	str	r3, [r4, #40]	; 0x28
 8021ada:	4b05      	ldr	r3, [pc, #20]	; (8021af0 <std+0x40>)
 8021adc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021ade:	4b05      	ldr	r3, [pc, #20]	; (8021af4 <std+0x44>)
 8021ae0:	6224      	str	r4, [r4, #32]
 8021ae2:	6323      	str	r3, [r4, #48]	; 0x30
 8021ae4:	bd10      	pop	{r4, pc}
 8021ae6:	bf00      	nop
 8021ae8:	080229dd 	.word	0x080229dd
 8021aec:	080229ff 	.word	0x080229ff
 8021af0:	08022a37 	.word	0x08022a37
 8021af4:	08022a5b 	.word	0x08022a5b

08021af8 <_cleanup_r>:
 8021af8:	4901      	ldr	r1, [pc, #4]	; (8021b00 <_cleanup_r+0x8>)
 8021afa:	f000 b8af 	b.w	8021c5c <_fwalk_reent>
 8021afe:	bf00      	nop
 8021b00:	08021a39 	.word	0x08021a39

08021b04 <__sfmoreglue>:
 8021b04:	b570      	push	{r4, r5, r6, lr}
 8021b06:	2268      	movs	r2, #104	; 0x68
 8021b08:	1e4d      	subs	r5, r1, #1
 8021b0a:	4355      	muls	r5, r2
 8021b0c:	460e      	mov	r6, r1
 8021b0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8021b12:	f000 fd3d 	bl	8022590 <_malloc_r>
 8021b16:	4604      	mov	r4, r0
 8021b18:	b140      	cbz	r0, 8021b2c <__sfmoreglue+0x28>
 8021b1a:	2100      	movs	r1, #0
 8021b1c:	e9c0 1600 	strd	r1, r6, [r0]
 8021b20:	300c      	adds	r0, #12
 8021b22:	60a0      	str	r0, [r4, #8]
 8021b24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8021b28:	f7fe fab0 	bl	802008c <memset>
 8021b2c:	4620      	mov	r0, r4
 8021b2e:	bd70      	pop	{r4, r5, r6, pc}

08021b30 <__sfp_lock_acquire>:
 8021b30:	4801      	ldr	r0, [pc, #4]	; (8021b38 <__sfp_lock_acquire+0x8>)
 8021b32:	f000 b8b8 	b.w	8021ca6 <__retarget_lock_acquire_recursive>
 8021b36:	bf00      	nop
 8021b38:	2000f911 	.word	0x2000f911

08021b3c <__sfp_lock_release>:
 8021b3c:	4801      	ldr	r0, [pc, #4]	; (8021b44 <__sfp_lock_release+0x8>)
 8021b3e:	f000 b8b3 	b.w	8021ca8 <__retarget_lock_release_recursive>
 8021b42:	bf00      	nop
 8021b44:	2000f911 	.word	0x2000f911

08021b48 <__sinit_lock_acquire>:
 8021b48:	4801      	ldr	r0, [pc, #4]	; (8021b50 <__sinit_lock_acquire+0x8>)
 8021b4a:	f000 b8ac 	b.w	8021ca6 <__retarget_lock_acquire_recursive>
 8021b4e:	bf00      	nop
 8021b50:	2000f912 	.word	0x2000f912

08021b54 <__sinit_lock_release>:
 8021b54:	4801      	ldr	r0, [pc, #4]	; (8021b5c <__sinit_lock_release+0x8>)
 8021b56:	f000 b8a7 	b.w	8021ca8 <__retarget_lock_release_recursive>
 8021b5a:	bf00      	nop
 8021b5c:	2000f912 	.word	0x2000f912

08021b60 <__sinit>:
 8021b60:	b510      	push	{r4, lr}
 8021b62:	4604      	mov	r4, r0
 8021b64:	f7ff fff0 	bl	8021b48 <__sinit_lock_acquire>
 8021b68:	69a3      	ldr	r3, [r4, #24]
 8021b6a:	b11b      	cbz	r3, 8021b74 <__sinit+0x14>
 8021b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021b70:	f7ff bff0 	b.w	8021b54 <__sinit_lock_release>
 8021b74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8021b78:	6523      	str	r3, [r4, #80]	; 0x50
 8021b7a:	4b13      	ldr	r3, [pc, #76]	; (8021bc8 <__sinit+0x68>)
 8021b7c:	4a13      	ldr	r2, [pc, #76]	; (8021bcc <__sinit+0x6c>)
 8021b7e:	681b      	ldr	r3, [r3, #0]
 8021b80:	62a2      	str	r2, [r4, #40]	; 0x28
 8021b82:	42a3      	cmp	r3, r4
 8021b84:	bf04      	itt	eq
 8021b86:	2301      	moveq	r3, #1
 8021b88:	61a3      	streq	r3, [r4, #24]
 8021b8a:	4620      	mov	r0, r4
 8021b8c:	f000 f820 	bl	8021bd0 <__sfp>
 8021b90:	6060      	str	r0, [r4, #4]
 8021b92:	4620      	mov	r0, r4
 8021b94:	f000 f81c 	bl	8021bd0 <__sfp>
 8021b98:	60a0      	str	r0, [r4, #8]
 8021b9a:	4620      	mov	r0, r4
 8021b9c:	f000 f818 	bl	8021bd0 <__sfp>
 8021ba0:	2200      	movs	r2, #0
 8021ba2:	60e0      	str	r0, [r4, #12]
 8021ba4:	2104      	movs	r1, #4
 8021ba6:	6860      	ldr	r0, [r4, #4]
 8021ba8:	f7ff ff82 	bl	8021ab0 <std>
 8021bac:	68a0      	ldr	r0, [r4, #8]
 8021bae:	2201      	movs	r2, #1
 8021bb0:	2109      	movs	r1, #9
 8021bb2:	f7ff ff7d 	bl	8021ab0 <std>
 8021bb6:	68e0      	ldr	r0, [r4, #12]
 8021bb8:	2202      	movs	r2, #2
 8021bba:	2112      	movs	r1, #18
 8021bbc:	f7ff ff78 	bl	8021ab0 <std>
 8021bc0:	2301      	movs	r3, #1
 8021bc2:	61a3      	str	r3, [r4, #24]
 8021bc4:	e7d2      	b.n	8021b6c <__sinit+0xc>
 8021bc6:	bf00      	nop
 8021bc8:	08024608 	.word	0x08024608
 8021bcc:	08021af9 	.word	0x08021af9

08021bd0 <__sfp>:
 8021bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021bd2:	4607      	mov	r7, r0
 8021bd4:	f7ff ffac 	bl	8021b30 <__sfp_lock_acquire>
 8021bd8:	4b1e      	ldr	r3, [pc, #120]	; (8021c54 <__sfp+0x84>)
 8021bda:	681e      	ldr	r6, [r3, #0]
 8021bdc:	69b3      	ldr	r3, [r6, #24]
 8021bde:	b913      	cbnz	r3, 8021be6 <__sfp+0x16>
 8021be0:	4630      	mov	r0, r6
 8021be2:	f7ff ffbd 	bl	8021b60 <__sinit>
 8021be6:	3648      	adds	r6, #72	; 0x48
 8021be8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8021bec:	3b01      	subs	r3, #1
 8021bee:	d503      	bpl.n	8021bf8 <__sfp+0x28>
 8021bf0:	6833      	ldr	r3, [r6, #0]
 8021bf2:	b30b      	cbz	r3, 8021c38 <__sfp+0x68>
 8021bf4:	6836      	ldr	r6, [r6, #0]
 8021bf6:	e7f7      	b.n	8021be8 <__sfp+0x18>
 8021bf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8021bfc:	b9d5      	cbnz	r5, 8021c34 <__sfp+0x64>
 8021bfe:	4b16      	ldr	r3, [pc, #88]	; (8021c58 <__sfp+0x88>)
 8021c00:	60e3      	str	r3, [r4, #12]
 8021c02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8021c06:	6665      	str	r5, [r4, #100]	; 0x64
 8021c08:	f000 f84c 	bl	8021ca4 <__retarget_lock_init_recursive>
 8021c0c:	f7ff ff96 	bl	8021b3c <__sfp_lock_release>
 8021c10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8021c14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8021c18:	6025      	str	r5, [r4, #0]
 8021c1a:	61a5      	str	r5, [r4, #24]
 8021c1c:	2208      	movs	r2, #8
 8021c1e:	4629      	mov	r1, r5
 8021c20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021c24:	f7fe fa32 	bl	802008c <memset>
 8021c28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8021c2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8021c30:	4620      	mov	r0, r4
 8021c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021c34:	3468      	adds	r4, #104	; 0x68
 8021c36:	e7d9      	b.n	8021bec <__sfp+0x1c>
 8021c38:	2104      	movs	r1, #4
 8021c3a:	4638      	mov	r0, r7
 8021c3c:	f7ff ff62 	bl	8021b04 <__sfmoreglue>
 8021c40:	4604      	mov	r4, r0
 8021c42:	6030      	str	r0, [r6, #0]
 8021c44:	2800      	cmp	r0, #0
 8021c46:	d1d5      	bne.n	8021bf4 <__sfp+0x24>
 8021c48:	f7ff ff78 	bl	8021b3c <__sfp_lock_release>
 8021c4c:	230c      	movs	r3, #12
 8021c4e:	603b      	str	r3, [r7, #0]
 8021c50:	e7ee      	b.n	8021c30 <__sfp+0x60>
 8021c52:	bf00      	nop
 8021c54:	08024608 	.word	0x08024608
 8021c58:	ffff0001 	.word	0xffff0001

08021c5c <_fwalk_reent>:
 8021c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021c60:	4606      	mov	r6, r0
 8021c62:	4688      	mov	r8, r1
 8021c64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8021c68:	2700      	movs	r7, #0
 8021c6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021c6e:	f1b9 0901 	subs.w	r9, r9, #1
 8021c72:	d505      	bpl.n	8021c80 <_fwalk_reent+0x24>
 8021c74:	6824      	ldr	r4, [r4, #0]
 8021c76:	2c00      	cmp	r4, #0
 8021c78:	d1f7      	bne.n	8021c6a <_fwalk_reent+0xe>
 8021c7a:	4638      	mov	r0, r7
 8021c7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021c80:	89ab      	ldrh	r3, [r5, #12]
 8021c82:	2b01      	cmp	r3, #1
 8021c84:	d907      	bls.n	8021c96 <_fwalk_reent+0x3a>
 8021c86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021c8a:	3301      	adds	r3, #1
 8021c8c:	d003      	beq.n	8021c96 <_fwalk_reent+0x3a>
 8021c8e:	4629      	mov	r1, r5
 8021c90:	4630      	mov	r0, r6
 8021c92:	47c0      	blx	r8
 8021c94:	4307      	orrs	r7, r0
 8021c96:	3568      	adds	r5, #104	; 0x68
 8021c98:	e7e9      	b.n	8021c6e <_fwalk_reent+0x12>
	...

08021c9c <_localeconv_r>:
 8021c9c:	4800      	ldr	r0, [pc, #0]	; (8021ca0 <_localeconv_r+0x4>)
 8021c9e:	4770      	bx	lr
 8021ca0:	20000180 	.word	0x20000180

08021ca4 <__retarget_lock_init_recursive>:
 8021ca4:	4770      	bx	lr

08021ca6 <__retarget_lock_acquire_recursive>:
 8021ca6:	4770      	bx	lr

08021ca8 <__retarget_lock_release_recursive>:
 8021ca8:	4770      	bx	lr

08021caa <__swhatbuf_r>:
 8021caa:	b570      	push	{r4, r5, r6, lr}
 8021cac:	460e      	mov	r6, r1
 8021cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021cb2:	2900      	cmp	r1, #0
 8021cb4:	b096      	sub	sp, #88	; 0x58
 8021cb6:	4614      	mov	r4, r2
 8021cb8:	461d      	mov	r5, r3
 8021cba:	da08      	bge.n	8021cce <__swhatbuf_r+0x24>
 8021cbc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8021cc0:	2200      	movs	r2, #0
 8021cc2:	602a      	str	r2, [r5, #0]
 8021cc4:	061a      	lsls	r2, r3, #24
 8021cc6:	d410      	bmi.n	8021cea <__swhatbuf_r+0x40>
 8021cc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021ccc:	e00e      	b.n	8021cec <__swhatbuf_r+0x42>
 8021cce:	466a      	mov	r2, sp
 8021cd0:	f000 ff1a 	bl	8022b08 <_fstat_r>
 8021cd4:	2800      	cmp	r0, #0
 8021cd6:	dbf1      	blt.n	8021cbc <__swhatbuf_r+0x12>
 8021cd8:	9a01      	ldr	r2, [sp, #4]
 8021cda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8021cde:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8021ce2:	425a      	negs	r2, r3
 8021ce4:	415a      	adcs	r2, r3
 8021ce6:	602a      	str	r2, [r5, #0]
 8021ce8:	e7ee      	b.n	8021cc8 <__swhatbuf_r+0x1e>
 8021cea:	2340      	movs	r3, #64	; 0x40
 8021cec:	2000      	movs	r0, #0
 8021cee:	6023      	str	r3, [r4, #0]
 8021cf0:	b016      	add	sp, #88	; 0x58
 8021cf2:	bd70      	pop	{r4, r5, r6, pc}

08021cf4 <__smakebuf_r>:
 8021cf4:	898b      	ldrh	r3, [r1, #12]
 8021cf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021cf8:	079d      	lsls	r5, r3, #30
 8021cfa:	4606      	mov	r6, r0
 8021cfc:	460c      	mov	r4, r1
 8021cfe:	d507      	bpl.n	8021d10 <__smakebuf_r+0x1c>
 8021d00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021d04:	6023      	str	r3, [r4, #0]
 8021d06:	6123      	str	r3, [r4, #16]
 8021d08:	2301      	movs	r3, #1
 8021d0a:	6163      	str	r3, [r4, #20]
 8021d0c:	b002      	add	sp, #8
 8021d0e:	bd70      	pop	{r4, r5, r6, pc}
 8021d10:	ab01      	add	r3, sp, #4
 8021d12:	466a      	mov	r2, sp
 8021d14:	f7ff ffc9 	bl	8021caa <__swhatbuf_r>
 8021d18:	9900      	ldr	r1, [sp, #0]
 8021d1a:	4605      	mov	r5, r0
 8021d1c:	4630      	mov	r0, r6
 8021d1e:	f000 fc37 	bl	8022590 <_malloc_r>
 8021d22:	b948      	cbnz	r0, 8021d38 <__smakebuf_r+0x44>
 8021d24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021d28:	059a      	lsls	r2, r3, #22
 8021d2a:	d4ef      	bmi.n	8021d0c <__smakebuf_r+0x18>
 8021d2c:	f023 0303 	bic.w	r3, r3, #3
 8021d30:	f043 0302 	orr.w	r3, r3, #2
 8021d34:	81a3      	strh	r3, [r4, #12]
 8021d36:	e7e3      	b.n	8021d00 <__smakebuf_r+0xc>
 8021d38:	4b0d      	ldr	r3, [pc, #52]	; (8021d70 <__smakebuf_r+0x7c>)
 8021d3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8021d3c:	89a3      	ldrh	r3, [r4, #12]
 8021d3e:	6020      	str	r0, [r4, #0]
 8021d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021d44:	81a3      	strh	r3, [r4, #12]
 8021d46:	9b00      	ldr	r3, [sp, #0]
 8021d48:	6163      	str	r3, [r4, #20]
 8021d4a:	9b01      	ldr	r3, [sp, #4]
 8021d4c:	6120      	str	r0, [r4, #16]
 8021d4e:	b15b      	cbz	r3, 8021d68 <__smakebuf_r+0x74>
 8021d50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021d54:	4630      	mov	r0, r6
 8021d56:	f000 fee9 	bl	8022b2c <_isatty_r>
 8021d5a:	b128      	cbz	r0, 8021d68 <__smakebuf_r+0x74>
 8021d5c:	89a3      	ldrh	r3, [r4, #12]
 8021d5e:	f023 0303 	bic.w	r3, r3, #3
 8021d62:	f043 0301 	orr.w	r3, r3, #1
 8021d66:	81a3      	strh	r3, [r4, #12]
 8021d68:	89a0      	ldrh	r0, [r4, #12]
 8021d6a:	4305      	orrs	r5, r0
 8021d6c:	81a5      	strh	r5, [r4, #12]
 8021d6e:	e7cd      	b.n	8021d0c <__smakebuf_r+0x18>
 8021d70:	08021af9 	.word	0x08021af9

08021d74 <malloc>:
 8021d74:	4b02      	ldr	r3, [pc, #8]	; (8021d80 <malloc+0xc>)
 8021d76:	4601      	mov	r1, r0
 8021d78:	6818      	ldr	r0, [r3, #0]
 8021d7a:	f000 bc09 	b.w	8022590 <_malloc_r>
 8021d7e:	bf00      	nop
 8021d80:	2000002c 	.word	0x2000002c

08021d84 <_Balloc>:
 8021d84:	b570      	push	{r4, r5, r6, lr}
 8021d86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8021d88:	4604      	mov	r4, r0
 8021d8a:	460d      	mov	r5, r1
 8021d8c:	b976      	cbnz	r6, 8021dac <_Balloc+0x28>
 8021d8e:	2010      	movs	r0, #16
 8021d90:	f7ff fff0 	bl	8021d74 <malloc>
 8021d94:	4602      	mov	r2, r0
 8021d96:	6260      	str	r0, [r4, #36]	; 0x24
 8021d98:	b920      	cbnz	r0, 8021da4 <_Balloc+0x20>
 8021d9a:	4b18      	ldr	r3, [pc, #96]	; (8021dfc <_Balloc+0x78>)
 8021d9c:	4818      	ldr	r0, [pc, #96]	; (8021e00 <_Balloc+0x7c>)
 8021d9e:	2166      	movs	r1, #102	; 0x66
 8021da0:	f000 fe72 	bl	8022a88 <__assert_func>
 8021da4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021da8:	6006      	str	r6, [r0, #0]
 8021daa:	60c6      	str	r6, [r0, #12]
 8021dac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8021dae:	68f3      	ldr	r3, [r6, #12]
 8021db0:	b183      	cbz	r3, 8021dd4 <_Balloc+0x50>
 8021db2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021db4:	68db      	ldr	r3, [r3, #12]
 8021db6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8021dba:	b9b8      	cbnz	r0, 8021dec <_Balloc+0x68>
 8021dbc:	2101      	movs	r1, #1
 8021dbe:	fa01 f605 	lsl.w	r6, r1, r5
 8021dc2:	1d72      	adds	r2, r6, #5
 8021dc4:	0092      	lsls	r2, r2, #2
 8021dc6:	4620      	mov	r0, r4
 8021dc8:	f000 fb60 	bl	802248c <_calloc_r>
 8021dcc:	b160      	cbz	r0, 8021de8 <_Balloc+0x64>
 8021dce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8021dd2:	e00e      	b.n	8021df2 <_Balloc+0x6e>
 8021dd4:	2221      	movs	r2, #33	; 0x21
 8021dd6:	2104      	movs	r1, #4
 8021dd8:	4620      	mov	r0, r4
 8021dda:	f000 fb57 	bl	802248c <_calloc_r>
 8021dde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021de0:	60f0      	str	r0, [r6, #12]
 8021de2:	68db      	ldr	r3, [r3, #12]
 8021de4:	2b00      	cmp	r3, #0
 8021de6:	d1e4      	bne.n	8021db2 <_Balloc+0x2e>
 8021de8:	2000      	movs	r0, #0
 8021dea:	bd70      	pop	{r4, r5, r6, pc}
 8021dec:	6802      	ldr	r2, [r0, #0]
 8021dee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8021df2:	2300      	movs	r3, #0
 8021df4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8021df8:	e7f7      	b.n	8021dea <_Balloc+0x66>
 8021dfa:	bf00      	nop
 8021dfc:	0802464d 	.word	0x0802464d
 8021e00:	08024730 	.word	0x08024730

08021e04 <_Bfree>:
 8021e04:	b570      	push	{r4, r5, r6, lr}
 8021e06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8021e08:	4605      	mov	r5, r0
 8021e0a:	460c      	mov	r4, r1
 8021e0c:	b976      	cbnz	r6, 8021e2c <_Bfree+0x28>
 8021e0e:	2010      	movs	r0, #16
 8021e10:	f7ff ffb0 	bl	8021d74 <malloc>
 8021e14:	4602      	mov	r2, r0
 8021e16:	6268      	str	r0, [r5, #36]	; 0x24
 8021e18:	b920      	cbnz	r0, 8021e24 <_Bfree+0x20>
 8021e1a:	4b09      	ldr	r3, [pc, #36]	; (8021e40 <_Bfree+0x3c>)
 8021e1c:	4809      	ldr	r0, [pc, #36]	; (8021e44 <_Bfree+0x40>)
 8021e1e:	218a      	movs	r1, #138	; 0x8a
 8021e20:	f000 fe32 	bl	8022a88 <__assert_func>
 8021e24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021e28:	6006      	str	r6, [r0, #0]
 8021e2a:	60c6      	str	r6, [r0, #12]
 8021e2c:	b13c      	cbz	r4, 8021e3e <_Bfree+0x3a>
 8021e2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8021e30:	6862      	ldr	r2, [r4, #4]
 8021e32:	68db      	ldr	r3, [r3, #12]
 8021e34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021e38:	6021      	str	r1, [r4, #0]
 8021e3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8021e3e:	bd70      	pop	{r4, r5, r6, pc}
 8021e40:	0802464d 	.word	0x0802464d
 8021e44:	08024730 	.word	0x08024730

08021e48 <__multadd>:
 8021e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021e4c:	690d      	ldr	r5, [r1, #16]
 8021e4e:	4607      	mov	r7, r0
 8021e50:	460c      	mov	r4, r1
 8021e52:	461e      	mov	r6, r3
 8021e54:	f101 0c14 	add.w	ip, r1, #20
 8021e58:	2000      	movs	r0, #0
 8021e5a:	f8dc 3000 	ldr.w	r3, [ip]
 8021e5e:	b299      	uxth	r1, r3
 8021e60:	fb02 6101 	mla	r1, r2, r1, r6
 8021e64:	0c1e      	lsrs	r6, r3, #16
 8021e66:	0c0b      	lsrs	r3, r1, #16
 8021e68:	fb02 3306 	mla	r3, r2, r6, r3
 8021e6c:	b289      	uxth	r1, r1
 8021e6e:	3001      	adds	r0, #1
 8021e70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8021e74:	4285      	cmp	r5, r0
 8021e76:	f84c 1b04 	str.w	r1, [ip], #4
 8021e7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8021e7e:	dcec      	bgt.n	8021e5a <__multadd+0x12>
 8021e80:	b30e      	cbz	r6, 8021ec6 <__multadd+0x7e>
 8021e82:	68a3      	ldr	r3, [r4, #8]
 8021e84:	42ab      	cmp	r3, r5
 8021e86:	dc19      	bgt.n	8021ebc <__multadd+0x74>
 8021e88:	6861      	ldr	r1, [r4, #4]
 8021e8a:	4638      	mov	r0, r7
 8021e8c:	3101      	adds	r1, #1
 8021e8e:	f7ff ff79 	bl	8021d84 <_Balloc>
 8021e92:	4680      	mov	r8, r0
 8021e94:	b928      	cbnz	r0, 8021ea2 <__multadd+0x5a>
 8021e96:	4602      	mov	r2, r0
 8021e98:	4b0c      	ldr	r3, [pc, #48]	; (8021ecc <__multadd+0x84>)
 8021e9a:	480d      	ldr	r0, [pc, #52]	; (8021ed0 <__multadd+0x88>)
 8021e9c:	21b5      	movs	r1, #181	; 0xb5
 8021e9e:	f000 fdf3 	bl	8022a88 <__assert_func>
 8021ea2:	6922      	ldr	r2, [r4, #16]
 8021ea4:	3202      	adds	r2, #2
 8021ea6:	f104 010c 	add.w	r1, r4, #12
 8021eaa:	0092      	lsls	r2, r2, #2
 8021eac:	300c      	adds	r0, #12
 8021eae:	f7fe f8df 	bl	8020070 <memcpy>
 8021eb2:	4621      	mov	r1, r4
 8021eb4:	4638      	mov	r0, r7
 8021eb6:	f7ff ffa5 	bl	8021e04 <_Bfree>
 8021eba:	4644      	mov	r4, r8
 8021ebc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8021ec0:	3501      	adds	r5, #1
 8021ec2:	615e      	str	r6, [r3, #20]
 8021ec4:	6125      	str	r5, [r4, #16]
 8021ec6:	4620      	mov	r0, r4
 8021ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021ecc:	080246bf 	.word	0x080246bf
 8021ed0:	08024730 	.word	0x08024730

08021ed4 <__hi0bits>:
 8021ed4:	0c03      	lsrs	r3, r0, #16
 8021ed6:	041b      	lsls	r3, r3, #16
 8021ed8:	b9d3      	cbnz	r3, 8021f10 <__hi0bits+0x3c>
 8021eda:	0400      	lsls	r0, r0, #16
 8021edc:	2310      	movs	r3, #16
 8021ede:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8021ee2:	bf04      	itt	eq
 8021ee4:	0200      	lsleq	r0, r0, #8
 8021ee6:	3308      	addeq	r3, #8
 8021ee8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8021eec:	bf04      	itt	eq
 8021eee:	0100      	lsleq	r0, r0, #4
 8021ef0:	3304      	addeq	r3, #4
 8021ef2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8021ef6:	bf04      	itt	eq
 8021ef8:	0080      	lsleq	r0, r0, #2
 8021efa:	3302      	addeq	r3, #2
 8021efc:	2800      	cmp	r0, #0
 8021efe:	db05      	blt.n	8021f0c <__hi0bits+0x38>
 8021f00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8021f04:	f103 0301 	add.w	r3, r3, #1
 8021f08:	bf08      	it	eq
 8021f0a:	2320      	moveq	r3, #32
 8021f0c:	4618      	mov	r0, r3
 8021f0e:	4770      	bx	lr
 8021f10:	2300      	movs	r3, #0
 8021f12:	e7e4      	b.n	8021ede <__hi0bits+0xa>

08021f14 <__lo0bits>:
 8021f14:	6803      	ldr	r3, [r0, #0]
 8021f16:	f013 0207 	ands.w	r2, r3, #7
 8021f1a:	4601      	mov	r1, r0
 8021f1c:	d00b      	beq.n	8021f36 <__lo0bits+0x22>
 8021f1e:	07da      	lsls	r2, r3, #31
 8021f20:	d423      	bmi.n	8021f6a <__lo0bits+0x56>
 8021f22:	0798      	lsls	r0, r3, #30
 8021f24:	bf49      	itett	mi
 8021f26:	085b      	lsrmi	r3, r3, #1
 8021f28:	089b      	lsrpl	r3, r3, #2
 8021f2a:	2001      	movmi	r0, #1
 8021f2c:	600b      	strmi	r3, [r1, #0]
 8021f2e:	bf5c      	itt	pl
 8021f30:	600b      	strpl	r3, [r1, #0]
 8021f32:	2002      	movpl	r0, #2
 8021f34:	4770      	bx	lr
 8021f36:	b298      	uxth	r0, r3
 8021f38:	b9a8      	cbnz	r0, 8021f66 <__lo0bits+0x52>
 8021f3a:	0c1b      	lsrs	r3, r3, #16
 8021f3c:	2010      	movs	r0, #16
 8021f3e:	b2da      	uxtb	r2, r3
 8021f40:	b90a      	cbnz	r2, 8021f46 <__lo0bits+0x32>
 8021f42:	3008      	adds	r0, #8
 8021f44:	0a1b      	lsrs	r3, r3, #8
 8021f46:	071a      	lsls	r2, r3, #28
 8021f48:	bf04      	itt	eq
 8021f4a:	091b      	lsreq	r3, r3, #4
 8021f4c:	3004      	addeq	r0, #4
 8021f4e:	079a      	lsls	r2, r3, #30
 8021f50:	bf04      	itt	eq
 8021f52:	089b      	lsreq	r3, r3, #2
 8021f54:	3002      	addeq	r0, #2
 8021f56:	07da      	lsls	r2, r3, #31
 8021f58:	d403      	bmi.n	8021f62 <__lo0bits+0x4e>
 8021f5a:	085b      	lsrs	r3, r3, #1
 8021f5c:	f100 0001 	add.w	r0, r0, #1
 8021f60:	d005      	beq.n	8021f6e <__lo0bits+0x5a>
 8021f62:	600b      	str	r3, [r1, #0]
 8021f64:	4770      	bx	lr
 8021f66:	4610      	mov	r0, r2
 8021f68:	e7e9      	b.n	8021f3e <__lo0bits+0x2a>
 8021f6a:	2000      	movs	r0, #0
 8021f6c:	4770      	bx	lr
 8021f6e:	2020      	movs	r0, #32
 8021f70:	4770      	bx	lr
	...

08021f74 <__i2b>:
 8021f74:	b510      	push	{r4, lr}
 8021f76:	460c      	mov	r4, r1
 8021f78:	2101      	movs	r1, #1
 8021f7a:	f7ff ff03 	bl	8021d84 <_Balloc>
 8021f7e:	4602      	mov	r2, r0
 8021f80:	b928      	cbnz	r0, 8021f8e <__i2b+0x1a>
 8021f82:	4b05      	ldr	r3, [pc, #20]	; (8021f98 <__i2b+0x24>)
 8021f84:	4805      	ldr	r0, [pc, #20]	; (8021f9c <__i2b+0x28>)
 8021f86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8021f8a:	f000 fd7d 	bl	8022a88 <__assert_func>
 8021f8e:	2301      	movs	r3, #1
 8021f90:	6144      	str	r4, [r0, #20]
 8021f92:	6103      	str	r3, [r0, #16]
 8021f94:	bd10      	pop	{r4, pc}
 8021f96:	bf00      	nop
 8021f98:	080246bf 	.word	0x080246bf
 8021f9c:	08024730 	.word	0x08024730

08021fa0 <__multiply>:
 8021fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021fa4:	4691      	mov	r9, r2
 8021fa6:	690a      	ldr	r2, [r1, #16]
 8021fa8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8021fac:	429a      	cmp	r2, r3
 8021fae:	bfb8      	it	lt
 8021fb0:	460b      	movlt	r3, r1
 8021fb2:	460c      	mov	r4, r1
 8021fb4:	bfbc      	itt	lt
 8021fb6:	464c      	movlt	r4, r9
 8021fb8:	4699      	movlt	r9, r3
 8021fba:	6927      	ldr	r7, [r4, #16]
 8021fbc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8021fc0:	68a3      	ldr	r3, [r4, #8]
 8021fc2:	6861      	ldr	r1, [r4, #4]
 8021fc4:	eb07 060a 	add.w	r6, r7, sl
 8021fc8:	42b3      	cmp	r3, r6
 8021fca:	b085      	sub	sp, #20
 8021fcc:	bfb8      	it	lt
 8021fce:	3101      	addlt	r1, #1
 8021fd0:	f7ff fed8 	bl	8021d84 <_Balloc>
 8021fd4:	b930      	cbnz	r0, 8021fe4 <__multiply+0x44>
 8021fd6:	4602      	mov	r2, r0
 8021fd8:	4b44      	ldr	r3, [pc, #272]	; (80220ec <__multiply+0x14c>)
 8021fda:	4845      	ldr	r0, [pc, #276]	; (80220f0 <__multiply+0x150>)
 8021fdc:	f240 115d 	movw	r1, #349	; 0x15d
 8021fe0:	f000 fd52 	bl	8022a88 <__assert_func>
 8021fe4:	f100 0514 	add.w	r5, r0, #20
 8021fe8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8021fec:	462b      	mov	r3, r5
 8021fee:	2200      	movs	r2, #0
 8021ff0:	4543      	cmp	r3, r8
 8021ff2:	d321      	bcc.n	8022038 <__multiply+0x98>
 8021ff4:	f104 0314 	add.w	r3, r4, #20
 8021ff8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8021ffc:	f109 0314 	add.w	r3, r9, #20
 8022000:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8022004:	9202      	str	r2, [sp, #8]
 8022006:	1b3a      	subs	r2, r7, r4
 8022008:	3a15      	subs	r2, #21
 802200a:	f022 0203 	bic.w	r2, r2, #3
 802200e:	3204      	adds	r2, #4
 8022010:	f104 0115 	add.w	r1, r4, #21
 8022014:	428f      	cmp	r7, r1
 8022016:	bf38      	it	cc
 8022018:	2204      	movcc	r2, #4
 802201a:	9201      	str	r2, [sp, #4]
 802201c:	9a02      	ldr	r2, [sp, #8]
 802201e:	9303      	str	r3, [sp, #12]
 8022020:	429a      	cmp	r2, r3
 8022022:	d80c      	bhi.n	802203e <__multiply+0x9e>
 8022024:	2e00      	cmp	r6, #0
 8022026:	dd03      	ble.n	8022030 <__multiply+0x90>
 8022028:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802202c:	2b00      	cmp	r3, #0
 802202e:	d05a      	beq.n	80220e6 <__multiply+0x146>
 8022030:	6106      	str	r6, [r0, #16]
 8022032:	b005      	add	sp, #20
 8022034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022038:	f843 2b04 	str.w	r2, [r3], #4
 802203c:	e7d8      	b.n	8021ff0 <__multiply+0x50>
 802203e:	f8b3 a000 	ldrh.w	sl, [r3]
 8022042:	f1ba 0f00 	cmp.w	sl, #0
 8022046:	d024      	beq.n	8022092 <__multiply+0xf2>
 8022048:	f104 0e14 	add.w	lr, r4, #20
 802204c:	46a9      	mov	r9, r5
 802204e:	f04f 0c00 	mov.w	ip, #0
 8022052:	f85e 2b04 	ldr.w	r2, [lr], #4
 8022056:	f8d9 1000 	ldr.w	r1, [r9]
 802205a:	fa1f fb82 	uxth.w	fp, r2
 802205e:	b289      	uxth	r1, r1
 8022060:	fb0a 110b 	mla	r1, sl, fp, r1
 8022064:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8022068:	f8d9 2000 	ldr.w	r2, [r9]
 802206c:	4461      	add	r1, ip
 802206e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8022072:	fb0a c20b 	mla	r2, sl, fp, ip
 8022076:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802207a:	b289      	uxth	r1, r1
 802207c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8022080:	4577      	cmp	r7, lr
 8022082:	f849 1b04 	str.w	r1, [r9], #4
 8022086:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802208a:	d8e2      	bhi.n	8022052 <__multiply+0xb2>
 802208c:	9a01      	ldr	r2, [sp, #4]
 802208e:	f845 c002 	str.w	ip, [r5, r2]
 8022092:	9a03      	ldr	r2, [sp, #12]
 8022094:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8022098:	3304      	adds	r3, #4
 802209a:	f1b9 0f00 	cmp.w	r9, #0
 802209e:	d020      	beq.n	80220e2 <__multiply+0x142>
 80220a0:	6829      	ldr	r1, [r5, #0]
 80220a2:	f104 0c14 	add.w	ip, r4, #20
 80220a6:	46ae      	mov	lr, r5
 80220a8:	f04f 0a00 	mov.w	sl, #0
 80220ac:	f8bc b000 	ldrh.w	fp, [ip]
 80220b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80220b4:	fb09 220b 	mla	r2, r9, fp, r2
 80220b8:	4492      	add	sl, r2
 80220ba:	b289      	uxth	r1, r1
 80220bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80220c0:	f84e 1b04 	str.w	r1, [lr], #4
 80220c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80220c8:	f8be 1000 	ldrh.w	r1, [lr]
 80220cc:	0c12      	lsrs	r2, r2, #16
 80220ce:	fb09 1102 	mla	r1, r9, r2, r1
 80220d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80220d6:	4567      	cmp	r7, ip
 80220d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80220dc:	d8e6      	bhi.n	80220ac <__multiply+0x10c>
 80220de:	9a01      	ldr	r2, [sp, #4]
 80220e0:	50a9      	str	r1, [r5, r2]
 80220e2:	3504      	adds	r5, #4
 80220e4:	e79a      	b.n	802201c <__multiply+0x7c>
 80220e6:	3e01      	subs	r6, #1
 80220e8:	e79c      	b.n	8022024 <__multiply+0x84>
 80220ea:	bf00      	nop
 80220ec:	080246bf 	.word	0x080246bf
 80220f0:	08024730 	.word	0x08024730

080220f4 <__pow5mult>:
 80220f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80220f8:	4615      	mov	r5, r2
 80220fa:	f012 0203 	ands.w	r2, r2, #3
 80220fe:	4606      	mov	r6, r0
 8022100:	460f      	mov	r7, r1
 8022102:	d007      	beq.n	8022114 <__pow5mult+0x20>
 8022104:	4c25      	ldr	r4, [pc, #148]	; (802219c <__pow5mult+0xa8>)
 8022106:	3a01      	subs	r2, #1
 8022108:	2300      	movs	r3, #0
 802210a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802210e:	f7ff fe9b 	bl	8021e48 <__multadd>
 8022112:	4607      	mov	r7, r0
 8022114:	10ad      	asrs	r5, r5, #2
 8022116:	d03d      	beq.n	8022194 <__pow5mult+0xa0>
 8022118:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802211a:	b97c      	cbnz	r4, 802213c <__pow5mult+0x48>
 802211c:	2010      	movs	r0, #16
 802211e:	f7ff fe29 	bl	8021d74 <malloc>
 8022122:	4602      	mov	r2, r0
 8022124:	6270      	str	r0, [r6, #36]	; 0x24
 8022126:	b928      	cbnz	r0, 8022134 <__pow5mult+0x40>
 8022128:	4b1d      	ldr	r3, [pc, #116]	; (80221a0 <__pow5mult+0xac>)
 802212a:	481e      	ldr	r0, [pc, #120]	; (80221a4 <__pow5mult+0xb0>)
 802212c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8022130:	f000 fcaa 	bl	8022a88 <__assert_func>
 8022134:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8022138:	6004      	str	r4, [r0, #0]
 802213a:	60c4      	str	r4, [r0, #12]
 802213c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8022140:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8022144:	b94c      	cbnz	r4, 802215a <__pow5mult+0x66>
 8022146:	f240 2171 	movw	r1, #625	; 0x271
 802214a:	4630      	mov	r0, r6
 802214c:	f7ff ff12 	bl	8021f74 <__i2b>
 8022150:	2300      	movs	r3, #0
 8022152:	f8c8 0008 	str.w	r0, [r8, #8]
 8022156:	4604      	mov	r4, r0
 8022158:	6003      	str	r3, [r0, #0]
 802215a:	f04f 0900 	mov.w	r9, #0
 802215e:	07eb      	lsls	r3, r5, #31
 8022160:	d50a      	bpl.n	8022178 <__pow5mult+0x84>
 8022162:	4639      	mov	r1, r7
 8022164:	4622      	mov	r2, r4
 8022166:	4630      	mov	r0, r6
 8022168:	f7ff ff1a 	bl	8021fa0 <__multiply>
 802216c:	4639      	mov	r1, r7
 802216e:	4680      	mov	r8, r0
 8022170:	4630      	mov	r0, r6
 8022172:	f7ff fe47 	bl	8021e04 <_Bfree>
 8022176:	4647      	mov	r7, r8
 8022178:	106d      	asrs	r5, r5, #1
 802217a:	d00b      	beq.n	8022194 <__pow5mult+0xa0>
 802217c:	6820      	ldr	r0, [r4, #0]
 802217e:	b938      	cbnz	r0, 8022190 <__pow5mult+0x9c>
 8022180:	4622      	mov	r2, r4
 8022182:	4621      	mov	r1, r4
 8022184:	4630      	mov	r0, r6
 8022186:	f7ff ff0b 	bl	8021fa0 <__multiply>
 802218a:	6020      	str	r0, [r4, #0]
 802218c:	f8c0 9000 	str.w	r9, [r0]
 8022190:	4604      	mov	r4, r0
 8022192:	e7e4      	b.n	802215e <__pow5mult+0x6a>
 8022194:	4638      	mov	r0, r7
 8022196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802219a:	bf00      	nop
 802219c:	08024880 	.word	0x08024880
 80221a0:	0802464d 	.word	0x0802464d
 80221a4:	08024730 	.word	0x08024730

080221a8 <__lshift>:
 80221a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80221ac:	460c      	mov	r4, r1
 80221ae:	6849      	ldr	r1, [r1, #4]
 80221b0:	6923      	ldr	r3, [r4, #16]
 80221b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80221b6:	68a3      	ldr	r3, [r4, #8]
 80221b8:	4607      	mov	r7, r0
 80221ba:	4691      	mov	r9, r2
 80221bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80221c0:	f108 0601 	add.w	r6, r8, #1
 80221c4:	42b3      	cmp	r3, r6
 80221c6:	db0b      	blt.n	80221e0 <__lshift+0x38>
 80221c8:	4638      	mov	r0, r7
 80221ca:	f7ff fddb 	bl	8021d84 <_Balloc>
 80221ce:	4605      	mov	r5, r0
 80221d0:	b948      	cbnz	r0, 80221e6 <__lshift+0x3e>
 80221d2:	4602      	mov	r2, r0
 80221d4:	4b2a      	ldr	r3, [pc, #168]	; (8022280 <__lshift+0xd8>)
 80221d6:	482b      	ldr	r0, [pc, #172]	; (8022284 <__lshift+0xdc>)
 80221d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80221dc:	f000 fc54 	bl	8022a88 <__assert_func>
 80221e0:	3101      	adds	r1, #1
 80221e2:	005b      	lsls	r3, r3, #1
 80221e4:	e7ee      	b.n	80221c4 <__lshift+0x1c>
 80221e6:	2300      	movs	r3, #0
 80221e8:	f100 0114 	add.w	r1, r0, #20
 80221ec:	f100 0210 	add.w	r2, r0, #16
 80221f0:	4618      	mov	r0, r3
 80221f2:	4553      	cmp	r3, sl
 80221f4:	db37      	blt.n	8022266 <__lshift+0xbe>
 80221f6:	6920      	ldr	r0, [r4, #16]
 80221f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80221fc:	f104 0314 	add.w	r3, r4, #20
 8022200:	f019 091f 	ands.w	r9, r9, #31
 8022204:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8022208:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 802220c:	d02f      	beq.n	802226e <__lshift+0xc6>
 802220e:	f1c9 0e20 	rsb	lr, r9, #32
 8022212:	468a      	mov	sl, r1
 8022214:	f04f 0c00 	mov.w	ip, #0
 8022218:	681a      	ldr	r2, [r3, #0]
 802221a:	fa02 f209 	lsl.w	r2, r2, r9
 802221e:	ea42 020c 	orr.w	r2, r2, ip
 8022222:	f84a 2b04 	str.w	r2, [sl], #4
 8022226:	f853 2b04 	ldr.w	r2, [r3], #4
 802222a:	4298      	cmp	r0, r3
 802222c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8022230:	d8f2      	bhi.n	8022218 <__lshift+0x70>
 8022232:	1b03      	subs	r3, r0, r4
 8022234:	3b15      	subs	r3, #21
 8022236:	f023 0303 	bic.w	r3, r3, #3
 802223a:	3304      	adds	r3, #4
 802223c:	f104 0215 	add.w	r2, r4, #21
 8022240:	4290      	cmp	r0, r2
 8022242:	bf38      	it	cc
 8022244:	2304      	movcc	r3, #4
 8022246:	f841 c003 	str.w	ip, [r1, r3]
 802224a:	f1bc 0f00 	cmp.w	ip, #0
 802224e:	d001      	beq.n	8022254 <__lshift+0xac>
 8022250:	f108 0602 	add.w	r6, r8, #2
 8022254:	3e01      	subs	r6, #1
 8022256:	4638      	mov	r0, r7
 8022258:	612e      	str	r6, [r5, #16]
 802225a:	4621      	mov	r1, r4
 802225c:	f7ff fdd2 	bl	8021e04 <_Bfree>
 8022260:	4628      	mov	r0, r5
 8022262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022266:	f842 0f04 	str.w	r0, [r2, #4]!
 802226a:	3301      	adds	r3, #1
 802226c:	e7c1      	b.n	80221f2 <__lshift+0x4a>
 802226e:	3904      	subs	r1, #4
 8022270:	f853 2b04 	ldr.w	r2, [r3], #4
 8022274:	f841 2f04 	str.w	r2, [r1, #4]!
 8022278:	4298      	cmp	r0, r3
 802227a:	d8f9      	bhi.n	8022270 <__lshift+0xc8>
 802227c:	e7ea      	b.n	8022254 <__lshift+0xac>
 802227e:	bf00      	nop
 8022280:	080246bf 	.word	0x080246bf
 8022284:	08024730 	.word	0x08024730

08022288 <__mcmp>:
 8022288:	b530      	push	{r4, r5, lr}
 802228a:	6902      	ldr	r2, [r0, #16]
 802228c:	690c      	ldr	r4, [r1, #16]
 802228e:	1b12      	subs	r2, r2, r4
 8022290:	d10e      	bne.n	80222b0 <__mcmp+0x28>
 8022292:	f100 0314 	add.w	r3, r0, #20
 8022296:	3114      	adds	r1, #20
 8022298:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802229c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80222a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80222a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80222a8:	42a5      	cmp	r5, r4
 80222aa:	d003      	beq.n	80222b4 <__mcmp+0x2c>
 80222ac:	d305      	bcc.n	80222ba <__mcmp+0x32>
 80222ae:	2201      	movs	r2, #1
 80222b0:	4610      	mov	r0, r2
 80222b2:	bd30      	pop	{r4, r5, pc}
 80222b4:	4283      	cmp	r3, r0
 80222b6:	d3f3      	bcc.n	80222a0 <__mcmp+0x18>
 80222b8:	e7fa      	b.n	80222b0 <__mcmp+0x28>
 80222ba:	f04f 32ff 	mov.w	r2, #4294967295
 80222be:	e7f7      	b.n	80222b0 <__mcmp+0x28>

080222c0 <__mdiff>:
 80222c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222c4:	460c      	mov	r4, r1
 80222c6:	4606      	mov	r6, r0
 80222c8:	4611      	mov	r1, r2
 80222ca:	4620      	mov	r0, r4
 80222cc:	4690      	mov	r8, r2
 80222ce:	f7ff ffdb 	bl	8022288 <__mcmp>
 80222d2:	1e05      	subs	r5, r0, #0
 80222d4:	d110      	bne.n	80222f8 <__mdiff+0x38>
 80222d6:	4629      	mov	r1, r5
 80222d8:	4630      	mov	r0, r6
 80222da:	f7ff fd53 	bl	8021d84 <_Balloc>
 80222de:	b930      	cbnz	r0, 80222ee <__mdiff+0x2e>
 80222e0:	4b3a      	ldr	r3, [pc, #232]	; (80223cc <__mdiff+0x10c>)
 80222e2:	4602      	mov	r2, r0
 80222e4:	f240 2132 	movw	r1, #562	; 0x232
 80222e8:	4839      	ldr	r0, [pc, #228]	; (80223d0 <__mdiff+0x110>)
 80222ea:	f000 fbcd 	bl	8022a88 <__assert_func>
 80222ee:	2301      	movs	r3, #1
 80222f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80222f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80222f8:	bfa4      	itt	ge
 80222fa:	4643      	movge	r3, r8
 80222fc:	46a0      	movge	r8, r4
 80222fe:	4630      	mov	r0, r6
 8022300:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8022304:	bfa6      	itte	ge
 8022306:	461c      	movge	r4, r3
 8022308:	2500      	movge	r5, #0
 802230a:	2501      	movlt	r5, #1
 802230c:	f7ff fd3a 	bl	8021d84 <_Balloc>
 8022310:	b920      	cbnz	r0, 802231c <__mdiff+0x5c>
 8022312:	4b2e      	ldr	r3, [pc, #184]	; (80223cc <__mdiff+0x10c>)
 8022314:	4602      	mov	r2, r0
 8022316:	f44f 7110 	mov.w	r1, #576	; 0x240
 802231a:	e7e5      	b.n	80222e8 <__mdiff+0x28>
 802231c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8022320:	6926      	ldr	r6, [r4, #16]
 8022322:	60c5      	str	r5, [r0, #12]
 8022324:	f104 0914 	add.w	r9, r4, #20
 8022328:	f108 0514 	add.w	r5, r8, #20
 802232c:	f100 0e14 	add.w	lr, r0, #20
 8022330:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8022334:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8022338:	f108 0210 	add.w	r2, r8, #16
 802233c:	46f2      	mov	sl, lr
 802233e:	2100      	movs	r1, #0
 8022340:	f859 3b04 	ldr.w	r3, [r9], #4
 8022344:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8022348:	fa1f f883 	uxth.w	r8, r3
 802234c:	fa11 f18b 	uxtah	r1, r1, fp
 8022350:	0c1b      	lsrs	r3, r3, #16
 8022352:	eba1 0808 	sub.w	r8, r1, r8
 8022356:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802235a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802235e:	fa1f f888 	uxth.w	r8, r8
 8022362:	1419      	asrs	r1, r3, #16
 8022364:	454e      	cmp	r6, r9
 8022366:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802236a:	f84a 3b04 	str.w	r3, [sl], #4
 802236e:	d8e7      	bhi.n	8022340 <__mdiff+0x80>
 8022370:	1b33      	subs	r3, r6, r4
 8022372:	3b15      	subs	r3, #21
 8022374:	f023 0303 	bic.w	r3, r3, #3
 8022378:	3304      	adds	r3, #4
 802237a:	3415      	adds	r4, #21
 802237c:	42a6      	cmp	r6, r4
 802237e:	bf38      	it	cc
 8022380:	2304      	movcc	r3, #4
 8022382:	441d      	add	r5, r3
 8022384:	4473      	add	r3, lr
 8022386:	469e      	mov	lr, r3
 8022388:	462e      	mov	r6, r5
 802238a:	4566      	cmp	r6, ip
 802238c:	d30e      	bcc.n	80223ac <__mdiff+0xec>
 802238e:	f10c 0203 	add.w	r2, ip, #3
 8022392:	1b52      	subs	r2, r2, r5
 8022394:	f022 0203 	bic.w	r2, r2, #3
 8022398:	3d03      	subs	r5, #3
 802239a:	45ac      	cmp	ip, r5
 802239c:	bf38      	it	cc
 802239e:	2200      	movcc	r2, #0
 80223a0:	441a      	add	r2, r3
 80223a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80223a6:	b17b      	cbz	r3, 80223c8 <__mdiff+0x108>
 80223a8:	6107      	str	r7, [r0, #16]
 80223aa:	e7a3      	b.n	80222f4 <__mdiff+0x34>
 80223ac:	f856 8b04 	ldr.w	r8, [r6], #4
 80223b0:	fa11 f288 	uxtah	r2, r1, r8
 80223b4:	1414      	asrs	r4, r2, #16
 80223b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80223ba:	b292      	uxth	r2, r2
 80223bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80223c0:	f84e 2b04 	str.w	r2, [lr], #4
 80223c4:	1421      	asrs	r1, r4, #16
 80223c6:	e7e0      	b.n	802238a <__mdiff+0xca>
 80223c8:	3f01      	subs	r7, #1
 80223ca:	e7ea      	b.n	80223a2 <__mdiff+0xe2>
 80223cc:	080246bf 	.word	0x080246bf
 80223d0:	08024730 	.word	0x08024730

080223d4 <__d2b>:
 80223d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80223d8:	4689      	mov	r9, r1
 80223da:	2101      	movs	r1, #1
 80223dc:	ec57 6b10 	vmov	r6, r7, d0
 80223e0:	4690      	mov	r8, r2
 80223e2:	f7ff fccf 	bl	8021d84 <_Balloc>
 80223e6:	4604      	mov	r4, r0
 80223e8:	b930      	cbnz	r0, 80223f8 <__d2b+0x24>
 80223ea:	4602      	mov	r2, r0
 80223ec:	4b25      	ldr	r3, [pc, #148]	; (8022484 <__d2b+0xb0>)
 80223ee:	4826      	ldr	r0, [pc, #152]	; (8022488 <__d2b+0xb4>)
 80223f0:	f240 310a 	movw	r1, #778	; 0x30a
 80223f4:	f000 fb48 	bl	8022a88 <__assert_func>
 80223f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80223fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8022400:	bb35      	cbnz	r5, 8022450 <__d2b+0x7c>
 8022402:	2e00      	cmp	r6, #0
 8022404:	9301      	str	r3, [sp, #4]
 8022406:	d028      	beq.n	802245a <__d2b+0x86>
 8022408:	4668      	mov	r0, sp
 802240a:	9600      	str	r6, [sp, #0]
 802240c:	f7ff fd82 	bl	8021f14 <__lo0bits>
 8022410:	9900      	ldr	r1, [sp, #0]
 8022412:	b300      	cbz	r0, 8022456 <__d2b+0x82>
 8022414:	9a01      	ldr	r2, [sp, #4]
 8022416:	f1c0 0320 	rsb	r3, r0, #32
 802241a:	fa02 f303 	lsl.w	r3, r2, r3
 802241e:	430b      	orrs	r3, r1
 8022420:	40c2      	lsrs	r2, r0
 8022422:	6163      	str	r3, [r4, #20]
 8022424:	9201      	str	r2, [sp, #4]
 8022426:	9b01      	ldr	r3, [sp, #4]
 8022428:	61a3      	str	r3, [r4, #24]
 802242a:	2b00      	cmp	r3, #0
 802242c:	bf14      	ite	ne
 802242e:	2202      	movne	r2, #2
 8022430:	2201      	moveq	r2, #1
 8022432:	6122      	str	r2, [r4, #16]
 8022434:	b1d5      	cbz	r5, 802246c <__d2b+0x98>
 8022436:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802243a:	4405      	add	r5, r0
 802243c:	f8c9 5000 	str.w	r5, [r9]
 8022440:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8022444:	f8c8 0000 	str.w	r0, [r8]
 8022448:	4620      	mov	r0, r4
 802244a:	b003      	add	sp, #12
 802244c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022450:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022454:	e7d5      	b.n	8022402 <__d2b+0x2e>
 8022456:	6161      	str	r1, [r4, #20]
 8022458:	e7e5      	b.n	8022426 <__d2b+0x52>
 802245a:	a801      	add	r0, sp, #4
 802245c:	f7ff fd5a 	bl	8021f14 <__lo0bits>
 8022460:	9b01      	ldr	r3, [sp, #4]
 8022462:	6163      	str	r3, [r4, #20]
 8022464:	2201      	movs	r2, #1
 8022466:	6122      	str	r2, [r4, #16]
 8022468:	3020      	adds	r0, #32
 802246a:	e7e3      	b.n	8022434 <__d2b+0x60>
 802246c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8022470:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8022474:	f8c9 0000 	str.w	r0, [r9]
 8022478:	6918      	ldr	r0, [r3, #16]
 802247a:	f7ff fd2b 	bl	8021ed4 <__hi0bits>
 802247e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8022482:	e7df      	b.n	8022444 <__d2b+0x70>
 8022484:	080246bf 	.word	0x080246bf
 8022488:	08024730 	.word	0x08024730

0802248c <_calloc_r>:
 802248c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802248e:	fba1 2402 	umull	r2, r4, r1, r2
 8022492:	b94c      	cbnz	r4, 80224a8 <_calloc_r+0x1c>
 8022494:	4611      	mov	r1, r2
 8022496:	9201      	str	r2, [sp, #4]
 8022498:	f000 f87a 	bl	8022590 <_malloc_r>
 802249c:	9a01      	ldr	r2, [sp, #4]
 802249e:	4605      	mov	r5, r0
 80224a0:	b930      	cbnz	r0, 80224b0 <_calloc_r+0x24>
 80224a2:	4628      	mov	r0, r5
 80224a4:	b003      	add	sp, #12
 80224a6:	bd30      	pop	{r4, r5, pc}
 80224a8:	220c      	movs	r2, #12
 80224aa:	6002      	str	r2, [r0, #0]
 80224ac:	2500      	movs	r5, #0
 80224ae:	e7f8      	b.n	80224a2 <_calloc_r+0x16>
 80224b0:	4621      	mov	r1, r4
 80224b2:	f7fd fdeb 	bl	802008c <memset>
 80224b6:	e7f4      	b.n	80224a2 <_calloc_r+0x16>

080224b8 <_free_r>:
 80224b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80224ba:	2900      	cmp	r1, #0
 80224bc:	d044      	beq.n	8022548 <_free_r+0x90>
 80224be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80224c2:	9001      	str	r0, [sp, #4]
 80224c4:	2b00      	cmp	r3, #0
 80224c6:	f1a1 0404 	sub.w	r4, r1, #4
 80224ca:	bfb8      	it	lt
 80224cc:	18e4      	addlt	r4, r4, r3
 80224ce:	f000 fb61 	bl	8022b94 <__malloc_lock>
 80224d2:	4a1e      	ldr	r2, [pc, #120]	; (802254c <_free_r+0x94>)
 80224d4:	9801      	ldr	r0, [sp, #4]
 80224d6:	6813      	ldr	r3, [r2, #0]
 80224d8:	b933      	cbnz	r3, 80224e8 <_free_r+0x30>
 80224da:	6063      	str	r3, [r4, #4]
 80224dc:	6014      	str	r4, [r2, #0]
 80224de:	b003      	add	sp, #12
 80224e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80224e4:	f000 bb5c 	b.w	8022ba0 <__malloc_unlock>
 80224e8:	42a3      	cmp	r3, r4
 80224ea:	d908      	bls.n	80224fe <_free_r+0x46>
 80224ec:	6825      	ldr	r5, [r4, #0]
 80224ee:	1961      	adds	r1, r4, r5
 80224f0:	428b      	cmp	r3, r1
 80224f2:	bf01      	itttt	eq
 80224f4:	6819      	ldreq	r1, [r3, #0]
 80224f6:	685b      	ldreq	r3, [r3, #4]
 80224f8:	1949      	addeq	r1, r1, r5
 80224fa:	6021      	streq	r1, [r4, #0]
 80224fc:	e7ed      	b.n	80224da <_free_r+0x22>
 80224fe:	461a      	mov	r2, r3
 8022500:	685b      	ldr	r3, [r3, #4]
 8022502:	b10b      	cbz	r3, 8022508 <_free_r+0x50>
 8022504:	42a3      	cmp	r3, r4
 8022506:	d9fa      	bls.n	80224fe <_free_r+0x46>
 8022508:	6811      	ldr	r1, [r2, #0]
 802250a:	1855      	adds	r5, r2, r1
 802250c:	42a5      	cmp	r5, r4
 802250e:	d10b      	bne.n	8022528 <_free_r+0x70>
 8022510:	6824      	ldr	r4, [r4, #0]
 8022512:	4421      	add	r1, r4
 8022514:	1854      	adds	r4, r2, r1
 8022516:	42a3      	cmp	r3, r4
 8022518:	6011      	str	r1, [r2, #0]
 802251a:	d1e0      	bne.n	80224de <_free_r+0x26>
 802251c:	681c      	ldr	r4, [r3, #0]
 802251e:	685b      	ldr	r3, [r3, #4]
 8022520:	6053      	str	r3, [r2, #4]
 8022522:	4421      	add	r1, r4
 8022524:	6011      	str	r1, [r2, #0]
 8022526:	e7da      	b.n	80224de <_free_r+0x26>
 8022528:	d902      	bls.n	8022530 <_free_r+0x78>
 802252a:	230c      	movs	r3, #12
 802252c:	6003      	str	r3, [r0, #0]
 802252e:	e7d6      	b.n	80224de <_free_r+0x26>
 8022530:	6825      	ldr	r5, [r4, #0]
 8022532:	1961      	adds	r1, r4, r5
 8022534:	428b      	cmp	r3, r1
 8022536:	bf04      	itt	eq
 8022538:	6819      	ldreq	r1, [r3, #0]
 802253a:	685b      	ldreq	r3, [r3, #4]
 802253c:	6063      	str	r3, [r4, #4]
 802253e:	bf04      	itt	eq
 8022540:	1949      	addeq	r1, r1, r5
 8022542:	6021      	streq	r1, [r4, #0]
 8022544:	6054      	str	r4, [r2, #4]
 8022546:	e7ca      	b.n	80224de <_free_r+0x26>
 8022548:	b003      	add	sp, #12
 802254a:	bd30      	pop	{r4, r5, pc}
 802254c:	2000f914 	.word	0x2000f914

08022550 <sbrk_aligned>:
 8022550:	b570      	push	{r4, r5, r6, lr}
 8022552:	4e0e      	ldr	r6, [pc, #56]	; (802258c <sbrk_aligned+0x3c>)
 8022554:	460c      	mov	r4, r1
 8022556:	6831      	ldr	r1, [r6, #0]
 8022558:	4605      	mov	r5, r0
 802255a:	b911      	cbnz	r1, 8022562 <sbrk_aligned+0x12>
 802255c:	f000 fa2e 	bl	80229bc <_sbrk_r>
 8022560:	6030      	str	r0, [r6, #0]
 8022562:	4621      	mov	r1, r4
 8022564:	4628      	mov	r0, r5
 8022566:	f000 fa29 	bl	80229bc <_sbrk_r>
 802256a:	1c43      	adds	r3, r0, #1
 802256c:	d00a      	beq.n	8022584 <sbrk_aligned+0x34>
 802256e:	1cc4      	adds	r4, r0, #3
 8022570:	f024 0403 	bic.w	r4, r4, #3
 8022574:	42a0      	cmp	r0, r4
 8022576:	d007      	beq.n	8022588 <sbrk_aligned+0x38>
 8022578:	1a21      	subs	r1, r4, r0
 802257a:	4628      	mov	r0, r5
 802257c:	f000 fa1e 	bl	80229bc <_sbrk_r>
 8022580:	3001      	adds	r0, #1
 8022582:	d101      	bne.n	8022588 <sbrk_aligned+0x38>
 8022584:	f04f 34ff 	mov.w	r4, #4294967295
 8022588:	4620      	mov	r0, r4
 802258a:	bd70      	pop	{r4, r5, r6, pc}
 802258c:	2000f918 	.word	0x2000f918

08022590 <_malloc_r>:
 8022590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022594:	1ccd      	adds	r5, r1, #3
 8022596:	f025 0503 	bic.w	r5, r5, #3
 802259a:	3508      	adds	r5, #8
 802259c:	2d0c      	cmp	r5, #12
 802259e:	bf38      	it	cc
 80225a0:	250c      	movcc	r5, #12
 80225a2:	2d00      	cmp	r5, #0
 80225a4:	4607      	mov	r7, r0
 80225a6:	db01      	blt.n	80225ac <_malloc_r+0x1c>
 80225a8:	42a9      	cmp	r1, r5
 80225aa:	d905      	bls.n	80225b8 <_malloc_r+0x28>
 80225ac:	230c      	movs	r3, #12
 80225ae:	603b      	str	r3, [r7, #0]
 80225b0:	2600      	movs	r6, #0
 80225b2:	4630      	mov	r0, r6
 80225b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80225b8:	4e2e      	ldr	r6, [pc, #184]	; (8022674 <_malloc_r+0xe4>)
 80225ba:	f000 faeb 	bl	8022b94 <__malloc_lock>
 80225be:	6833      	ldr	r3, [r6, #0]
 80225c0:	461c      	mov	r4, r3
 80225c2:	bb34      	cbnz	r4, 8022612 <_malloc_r+0x82>
 80225c4:	4629      	mov	r1, r5
 80225c6:	4638      	mov	r0, r7
 80225c8:	f7ff ffc2 	bl	8022550 <sbrk_aligned>
 80225cc:	1c43      	adds	r3, r0, #1
 80225ce:	4604      	mov	r4, r0
 80225d0:	d14d      	bne.n	802266e <_malloc_r+0xde>
 80225d2:	6834      	ldr	r4, [r6, #0]
 80225d4:	4626      	mov	r6, r4
 80225d6:	2e00      	cmp	r6, #0
 80225d8:	d140      	bne.n	802265c <_malloc_r+0xcc>
 80225da:	6823      	ldr	r3, [r4, #0]
 80225dc:	4631      	mov	r1, r6
 80225de:	4638      	mov	r0, r7
 80225e0:	eb04 0803 	add.w	r8, r4, r3
 80225e4:	f000 f9ea 	bl	80229bc <_sbrk_r>
 80225e8:	4580      	cmp	r8, r0
 80225ea:	d13a      	bne.n	8022662 <_malloc_r+0xd2>
 80225ec:	6821      	ldr	r1, [r4, #0]
 80225ee:	3503      	adds	r5, #3
 80225f0:	1a6d      	subs	r5, r5, r1
 80225f2:	f025 0503 	bic.w	r5, r5, #3
 80225f6:	3508      	adds	r5, #8
 80225f8:	2d0c      	cmp	r5, #12
 80225fa:	bf38      	it	cc
 80225fc:	250c      	movcc	r5, #12
 80225fe:	4629      	mov	r1, r5
 8022600:	4638      	mov	r0, r7
 8022602:	f7ff ffa5 	bl	8022550 <sbrk_aligned>
 8022606:	3001      	adds	r0, #1
 8022608:	d02b      	beq.n	8022662 <_malloc_r+0xd2>
 802260a:	6823      	ldr	r3, [r4, #0]
 802260c:	442b      	add	r3, r5
 802260e:	6023      	str	r3, [r4, #0]
 8022610:	e00e      	b.n	8022630 <_malloc_r+0xa0>
 8022612:	6822      	ldr	r2, [r4, #0]
 8022614:	1b52      	subs	r2, r2, r5
 8022616:	d41e      	bmi.n	8022656 <_malloc_r+0xc6>
 8022618:	2a0b      	cmp	r2, #11
 802261a:	d916      	bls.n	802264a <_malloc_r+0xba>
 802261c:	1961      	adds	r1, r4, r5
 802261e:	42a3      	cmp	r3, r4
 8022620:	6025      	str	r5, [r4, #0]
 8022622:	bf18      	it	ne
 8022624:	6059      	strne	r1, [r3, #4]
 8022626:	6863      	ldr	r3, [r4, #4]
 8022628:	bf08      	it	eq
 802262a:	6031      	streq	r1, [r6, #0]
 802262c:	5162      	str	r2, [r4, r5]
 802262e:	604b      	str	r3, [r1, #4]
 8022630:	4638      	mov	r0, r7
 8022632:	f104 060b 	add.w	r6, r4, #11
 8022636:	f000 fab3 	bl	8022ba0 <__malloc_unlock>
 802263a:	f026 0607 	bic.w	r6, r6, #7
 802263e:	1d23      	adds	r3, r4, #4
 8022640:	1af2      	subs	r2, r6, r3
 8022642:	d0b6      	beq.n	80225b2 <_malloc_r+0x22>
 8022644:	1b9b      	subs	r3, r3, r6
 8022646:	50a3      	str	r3, [r4, r2]
 8022648:	e7b3      	b.n	80225b2 <_malloc_r+0x22>
 802264a:	6862      	ldr	r2, [r4, #4]
 802264c:	42a3      	cmp	r3, r4
 802264e:	bf0c      	ite	eq
 8022650:	6032      	streq	r2, [r6, #0]
 8022652:	605a      	strne	r2, [r3, #4]
 8022654:	e7ec      	b.n	8022630 <_malloc_r+0xa0>
 8022656:	4623      	mov	r3, r4
 8022658:	6864      	ldr	r4, [r4, #4]
 802265a:	e7b2      	b.n	80225c2 <_malloc_r+0x32>
 802265c:	4634      	mov	r4, r6
 802265e:	6876      	ldr	r6, [r6, #4]
 8022660:	e7b9      	b.n	80225d6 <_malloc_r+0x46>
 8022662:	230c      	movs	r3, #12
 8022664:	603b      	str	r3, [r7, #0]
 8022666:	4638      	mov	r0, r7
 8022668:	f000 fa9a 	bl	8022ba0 <__malloc_unlock>
 802266c:	e7a1      	b.n	80225b2 <_malloc_r+0x22>
 802266e:	6025      	str	r5, [r4, #0]
 8022670:	e7de      	b.n	8022630 <_malloc_r+0xa0>
 8022672:	bf00      	nop
 8022674:	2000f914 	.word	0x2000f914

08022678 <__sfputc_r>:
 8022678:	6893      	ldr	r3, [r2, #8]
 802267a:	3b01      	subs	r3, #1
 802267c:	2b00      	cmp	r3, #0
 802267e:	b410      	push	{r4}
 8022680:	6093      	str	r3, [r2, #8]
 8022682:	da08      	bge.n	8022696 <__sfputc_r+0x1e>
 8022684:	6994      	ldr	r4, [r2, #24]
 8022686:	42a3      	cmp	r3, r4
 8022688:	db01      	blt.n	802268e <__sfputc_r+0x16>
 802268a:	290a      	cmp	r1, #10
 802268c:	d103      	bne.n	8022696 <__sfputc_r+0x1e>
 802268e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022692:	f7fe ba11 	b.w	8020ab8 <__swbuf_r>
 8022696:	6813      	ldr	r3, [r2, #0]
 8022698:	1c58      	adds	r0, r3, #1
 802269a:	6010      	str	r0, [r2, #0]
 802269c:	7019      	strb	r1, [r3, #0]
 802269e:	4608      	mov	r0, r1
 80226a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80226a4:	4770      	bx	lr

080226a6 <__sfputs_r>:
 80226a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80226a8:	4606      	mov	r6, r0
 80226aa:	460f      	mov	r7, r1
 80226ac:	4614      	mov	r4, r2
 80226ae:	18d5      	adds	r5, r2, r3
 80226b0:	42ac      	cmp	r4, r5
 80226b2:	d101      	bne.n	80226b8 <__sfputs_r+0x12>
 80226b4:	2000      	movs	r0, #0
 80226b6:	e007      	b.n	80226c8 <__sfputs_r+0x22>
 80226b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80226bc:	463a      	mov	r2, r7
 80226be:	4630      	mov	r0, r6
 80226c0:	f7ff ffda 	bl	8022678 <__sfputc_r>
 80226c4:	1c43      	adds	r3, r0, #1
 80226c6:	d1f3      	bne.n	80226b0 <__sfputs_r+0xa>
 80226c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080226cc <_vfiprintf_r>:
 80226cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226d0:	460d      	mov	r5, r1
 80226d2:	b09d      	sub	sp, #116	; 0x74
 80226d4:	4614      	mov	r4, r2
 80226d6:	4698      	mov	r8, r3
 80226d8:	4606      	mov	r6, r0
 80226da:	b118      	cbz	r0, 80226e4 <_vfiprintf_r+0x18>
 80226dc:	6983      	ldr	r3, [r0, #24]
 80226de:	b90b      	cbnz	r3, 80226e4 <_vfiprintf_r+0x18>
 80226e0:	f7ff fa3e 	bl	8021b60 <__sinit>
 80226e4:	4b89      	ldr	r3, [pc, #548]	; (802290c <_vfiprintf_r+0x240>)
 80226e6:	429d      	cmp	r5, r3
 80226e8:	d11b      	bne.n	8022722 <_vfiprintf_r+0x56>
 80226ea:	6875      	ldr	r5, [r6, #4]
 80226ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80226ee:	07d9      	lsls	r1, r3, #31
 80226f0:	d405      	bmi.n	80226fe <_vfiprintf_r+0x32>
 80226f2:	89ab      	ldrh	r3, [r5, #12]
 80226f4:	059a      	lsls	r2, r3, #22
 80226f6:	d402      	bmi.n	80226fe <_vfiprintf_r+0x32>
 80226f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80226fa:	f7ff fad4 	bl	8021ca6 <__retarget_lock_acquire_recursive>
 80226fe:	89ab      	ldrh	r3, [r5, #12]
 8022700:	071b      	lsls	r3, r3, #28
 8022702:	d501      	bpl.n	8022708 <_vfiprintf_r+0x3c>
 8022704:	692b      	ldr	r3, [r5, #16]
 8022706:	b9eb      	cbnz	r3, 8022744 <_vfiprintf_r+0x78>
 8022708:	4629      	mov	r1, r5
 802270a:	4630      	mov	r0, r6
 802270c:	f7fe fa26 	bl	8020b5c <__swsetup_r>
 8022710:	b1c0      	cbz	r0, 8022744 <_vfiprintf_r+0x78>
 8022712:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022714:	07dc      	lsls	r4, r3, #31
 8022716:	d50e      	bpl.n	8022736 <_vfiprintf_r+0x6a>
 8022718:	f04f 30ff 	mov.w	r0, #4294967295
 802271c:	b01d      	add	sp, #116	; 0x74
 802271e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022722:	4b7b      	ldr	r3, [pc, #492]	; (8022910 <_vfiprintf_r+0x244>)
 8022724:	429d      	cmp	r5, r3
 8022726:	d101      	bne.n	802272c <_vfiprintf_r+0x60>
 8022728:	68b5      	ldr	r5, [r6, #8]
 802272a:	e7df      	b.n	80226ec <_vfiprintf_r+0x20>
 802272c:	4b79      	ldr	r3, [pc, #484]	; (8022914 <_vfiprintf_r+0x248>)
 802272e:	429d      	cmp	r5, r3
 8022730:	bf08      	it	eq
 8022732:	68f5      	ldreq	r5, [r6, #12]
 8022734:	e7da      	b.n	80226ec <_vfiprintf_r+0x20>
 8022736:	89ab      	ldrh	r3, [r5, #12]
 8022738:	0598      	lsls	r0, r3, #22
 802273a:	d4ed      	bmi.n	8022718 <_vfiprintf_r+0x4c>
 802273c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802273e:	f7ff fab3 	bl	8021ca8 <__retarget_lock_release_recursive>
 8022742:	e7e9      	b.n	8022718 <_vfiprintf_r+0x4c>
 8022744:	2300      	movs	r3, #0
 8022746:	9309      	str	r3, [sp, #36]	; 0x24
 8022748:	2320      	movs	r3, #32
 802274a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802274e:	f8cd 800c 	str.w	r8, [sp, #12]
 8022752:	2330      	movs	r3, #48	; 0x30
 8022754:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022918 <_vfiprintf_r+0x24c>
 8022758:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802275c:	f04f 0901 	mov.w	r9, #1
 8022760:	4623      	mov	r3, r4
 8022762:	469a      	mov	sl, r3
 8022764:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022768:	b10a      	cbz	r2, 802276e <_vfiprintf_r+0xa2>
 802276a:	2a25      	cmp	r2, #37	; 0x25
 802276c:	d1f9      	bne.n	8022762 <_vfiprintf_r+0x96>
 802276e:	ebba 0b04 	subs.w	fp, sl, r4
 8022772:	d00b      	beq.n	802278c <_vfiprintf_r+0xc0>
 8022774:	465b      	mov	r3, fp
 8022776:	4622      	mov	r2, r4
 8022778:	4629      	mov	r1, r5
 802277a:	4630      	mov	r0, r6
 802277c:	f7ff ff93 	bl	80226a6 <__sfputs_r>
 8022780:	3001      	adds	r0, #1
 8022782:	f000 80aa 	beq.w	80228da <_vfiprintf_r+0x20e>
 8022786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022788:	445a      	add	r2, fp
 802278a:	9209      	str	r2, [sp, #36]	; 0x24
 802278c:	f89a 3000 	ldrb.w	r3, [sl]
 8022790:	2b00      	cmp	r3, #0
 8022792:	f000 80a2 	beq.w	80228da <_vfiprintf_r+0x20e>
 8022796:	2300      	movs	r3, #0
 8022798:	f04f 32ff 	mov.w	r2, #4294967295
 802279c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80227a0:	f10a 0a01 	add.w	sl, sl, #1
 80227a4:	9304      	str	r3, [sp, #16]
 80227a6:	9307      	str	r3, [sp, #28]
 80227a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80227ac:	931a      	str	r3, [sp, #104]	; 0x68
 80227ae:	4654      	mov	r4, sl
 80227b0:	2205      	movs	r2, #5
 80227b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80227b6:	4858      	ldr	r0, [pc, #352]	; (8022918 <_vfiprintf_r+0x24c>)
 80227b8:	f7dd fd3a 	bl	8000230 <memchr>
 80227bc:	9a04      	ldr	r2, [sp, #16]
 80227be:	b9d8      	cbnz	r0, 80227f8 <_vfiprintf_r+0x12c>
 80227c0:	06d1      	lsls	r1, r2, #27
 80227c2:	bf44      	itt	mi
 80227c4:	2320      	movmi	r3, #32
 80227c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80227ca:	0713      	lsls	r3, r2, #28
 80227cc:	bf44      	itt	mi
 80227ce:	232b      	movmi	r3, #43	; 0x2b
 80227d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80227d4:	f89a 3000 	ldrb.w	r3, [sl]
 80227d8:	2b2a      	cmp	r3, #42	; 0x2a
 80227da:	d015      	beq.n	8022808 <_vfiprintf_r+0x13c>
 80227dc:	9a07      	ldr	r2, [sp, #28]
 80227de:	4654      	mov	r4, sl
 80227e0:	2000      	movs	r0, #0
 80227e2:	f04f 0c0a 	mov.w	ip, #10
 80227e6:	4621      	mov	r1, r4
 80227e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80227ec:	3b30      	subs	r3, #48	; 0x30
 80227ee:	2b09      	cmp	r3, #9
 80227f0:	d94e      	bls.n	8022890 <_vfiprintf_r+0x1c4>
 80227f2:	b1b0      	cbz	r0, 8022822 <_vfiprintf_r+0x156>
 80227f4:	9207      	str	r2, [sp, #28]
 80227f6:	e014      	b.n	8022822 <_vfiprintf_r+0x156>
 80227f8:	eba0 0308 	sub.w	r3, r0, r8
 80227fc:	fa09 f303 	lsl.w	r3, r9, r3
 8022800:	4313      	orrs	r3, r2
 8022802:	9304      	str	r3, [sp, #16]
 8022804:	46a2      	mov	sl, r4
 8022806:	e7d2      	b.n	80227ae <_vfiprintf_r+0xe2>
 8022808:	9b03      	ldr	r3, [sp, #12]
 802280a:	1d19      	adds	r1, r3, #4
 802280c:	681b      	ldr	r3, [r3, #0]
 802280e:	9103      	str	r1, [sp, #12]
 8022810:	2b00      	cmp	r3, #0
 8022812:	bfbb      	ittet	lt
 8022814:	425b      	neglt	r3, r3
 8022816:	f042 0202 	orrlt.w	r2, r2, #2
 802281a:	9307      	strge	r3, [sp, #28]
 802281c:	9307      	strlt	r3, [sp, #28]
 802281e:	bfb8      	it	lt
 8022820:	9204      	strlt	r2, [sp, #16]
 8022822:	7823      	ldrb	r3, [r4, #0]
 8022824:	2b2e      	cmp	r3, #46	; 0x2e
 8022826:	d10c      	bne.n	8022842 <_vfiprintf_r+0x176>
 8022828:	7863      	ldrb	r3, [r4, #1]
 802282a:	2b2a      	cmp	r3, #42	; 0x2a
 802282c:	d135      	bne.n	802289a <_vfiprintf_r+0x1ce>
 802282e:	9b03      	ldr	r3, [sp, #12]
 8022830:	1d1a      	adds	r2, r3, #4
 8022832:	681b      	ldr	r3, [r3, #0]
 8022834:	9203      	str	r2, [sp, #12]
 8022836:	2b00      	cmp	r3, #0
 8022838:	bfb8      	it	lt
 802283a:	f04f 33ff 	movlt.w	r3, #4294967295
 802283e:	3402      	adds	r4, #2
 8022840:	9305      	str	r3, [sp, #20]
 8022842:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022928 <_vfiprintf_r+0x25c>
 8022846:	7821      	ldrb	r1, [r4, #0]
 8022848:	2203      	movs	r2, #3
 802284a:	4650      	mov	r0, sl
 802284c:	f7dd fcf0 	bl	8000230 <memchr>
 8022850:	b140      	cbz	r0, 8022864 <_vfiprintf_r+0x198>
 8022852:	2340      	movs	r3, #64	; 0x40
 8022854:	eba0 000a 	sub.w	r0, r0, sl
 8022858:	fa03 f000 	lsl.w	r0, r3, r0
 802285c:	9b04      	ldr	r3, [sp, #16]
 802285e:	4303      	orrs	r3, r0
 8022860:	3401      	adds	r4, #1
 8022862:	9304      	str	r3, [sp, #16]
 8022864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022868:	482c      	ldr	r0, [pc, #176]	; (802291c <_vfiprintf_r+0x250>)
 802286a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802286e:	2206      	movs	r2, #6
 8022870:	f7dd fcde 	bl	8000230 <memchr>
 8022874:	2800      	cmp	r0, #0
 8022876:	d03f      	beq.n	80228f8 <_vfiprintf_r+0x22c>
 8022878:	4b29      	ldr	r3, [pc, #164]	; (8022920 <_vfiprintf_r+0x254>)
 802287a:	bb1b      	cbnz	r3, 80228c4 <_vfiprintf_r+0x1f8>
 802287c:	9b03      	ldr	r3, [sp, #12]
 802287e:	3307      	adds	r3, #7
 8022880:	f023 0307 	bic.w	r3, r3, #7
 8022884:	3308      	adds	r3, #8
 8022886:	9303      	str	r3, [sp, #12]
 8022888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802288a:	443b      	add	r3, r7
 802288c:	9309      	str	r3, [sp, #36]	; 0x24
 802288e:	e767      	b.n	8022760 <_vfiprintf_r+0x94>
 8022890:	fb0c 3202 	mla	r2, ip, r2, r3
 8022894:	460c      	mov	r4, r1
 8022896:	2001      	movs	r0, #1
 8022898:	e7a5      	b.n	80227e6 <_vfiprintf_r+0x11a>
 802289a:	2300      	movs	r3, #0
 802289c:	3401      	adds	r4, #1
 802289e:	9305      	str	r3, [sp, #20]
 80228a0:	4619      	mov	r1, r3
 80228a2:	f04f 0c0a 	mov.w	ip, #10
 80228a6:	4620      	mov	r0, r4
 80228a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80228ac:	3a30      	subs	r2, #48	; 0x30
 80228ae:	2a09      	cmp	r2, #9
 80228b0:	d903      	bls.n	80228ba <_vfiprintf_r+0x1ee>
 80228b2:	2b00      	cmp	r3, #0
 80228b4:	d0c5      	beq.n	8022842 <_vfiprintf_r+0x176>
 80228b6:	9105      	str	r1, [sp, #20]
 80228b8:	e7c3      	b.n	8022842 <_vfiprintf_r+0x176>
 80228ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80228be:	4604      	mov	r4, r0
 80228c0:	2301      	movs	r3, #1
 80228c2:	e7f0      	b.n	80228a6 <_vfiprintf_r+0x1da>
 80228c4:	ab03      	add	r3, sp, #12
 80228c6:	9300      	str	r3, [sp, #0]
 80228c8:	462a      	mov	r2, r5
 80228ca:	4b16      	ldr	r3, [pc, #88]	; (8022924 <_vfiprintf_r+0x258>)
 80228cc:	a904      	add	r1, sp, #16
 80228ce:	4630      	mov	r0, r6
 80228d0:	f7fd fc84 	bl	80201dc <_printf_float>
 80228d4:	4607      	mov	r7, r0
 80228d6:	1c78      	adds	r0, r7, #1
 80228d8:	d1d6      	bne.n	8022888 <_vfiprintf_r+0x1bc>
 80228da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80228dc:	07d9      	lsls	r1, r3, #31
 80228de:	d405      	bmi.n	80228ec <_vfiprintf_r+0x220>
 80228e0:	89ab      	ldrh	r3, [r5, #12]
 80228e2:	059a      	lsls	r2, r3, #22
 80228e4:	d402      	bmi.n	80228ec <_vfiprintf_r+0x220>
 80228e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80228e8:	f7ff f9de 	bl	8021ca8 <__retarget_lock_release_recursive>
 80228ec:	89ab      	ldrh	r3, [r5, #12]
 80228ee:	065b      	lsls	r3, r3, #25
 80228f0:	f53f af12 	bmi.w	8022718 <_vfiprintf_r+0x4c>
 80228f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80228f6:	e711      	b.n	802271c <_vfiprintf_r+0x50>
 80228f8:	ab03      	add	r3, sp, #12
 80228fa:	9300      	str	r3, [sp, #0]
 80228fc:	462a      	mov	r2, r5
 80228fe:	4b09      	ldr	r3, [pc, #36]	; (8022924 <_vfiprintf_r+0x258>)
 8022900:	a904      	add	r1, sp, #16
 8022902:	4630      	mov	r0, r6
 8022904:	f7fd ff0e 	bl	8020724 <_printf_i>
 8022908:	e7e4      	b.n	80228d4 <_vfiprintf_r+0x208>
 802290a:	bf00      	nop
 802290c:	080246f0 	.word	0x080246f0
 8022910:	08024710 	.word	0x08024710
 8022914:	080246d0 	.word	0x080246d0
 8022918:	0802488c 	.word	0x0802488c
 802291c:	08024896 	.word	0x08024896
 8022920:	080201dd 	.word	0x080201dd
 8022924:	080226a7 	.word	0x080226a7
 8022928:	08024892 	.word	0x08024892

0802292c <_putc_r>:
 802292c:	b570      	push	{r4, r5, r6, lr}
 802292e:	460d      	mov	r5, r1
 8022930:	4614      	mov	r4, r2
 8022932:	4606      	mov	r6, r0
 8022934:	b118      	cbz	r0, 802293e <_putc_r+0x12>
 8022936:	6983      	ldr	r3, [r0, #24]
 8022938:	b90b      	cbnz	r3, 802293e <_putc_r+0x12>
 802293a:	f7ff f911 	bl	8021b60 <__sinit>
 802293e:	4b1c      	ldr	r3, [pc, #112]	; (80229b0 <_putc_r+0x84>)
 8022940:	429c      	cmp	r4, r3
 8022942:	d124      	bne.n	802298e <_putc_r+0x62>
 8022944:	6874      	ldr	r4, [r6, #4]
 8022946:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022948:	07d8      	lsls	r0, r3, #31
 802294a:	d405      	bmi.n	8022958 <_putc_r+0x2c>
 802294c:	89a3      	ldrh	r3, [r4, #12]
 802294e:	0599      	lsls	r1, r3, #22
 8022950:	d402      	bmi.n	8022958 <_putc_r+0x2c>
 8022952:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022954:	f7ff f9a7 	bl	8021ca6 <__retarget_lock_acquire_recursive>
 8022958:	68a3      	ldr	r3, [r4, #8]
 802295a:	3b01      	subs	r3, #1
 802295c:	2b00      	cmp	r3, #0
 802295e:	60a3      	str	r3, [r4, #8]
 8022960:	da05      	bge.n	802296e <_putc_r+0x42>
 8022962:	69a2      	ldr	r2, [r4, #24]
 8022964:	4293      	cmp	r3, r2
 8022966:	db1c      	blt.n	80229a2 <_putc_r+0x76>
 8022968:	b2eb      	uxtb	r3, r5
 802296a:	2b0a      	cmp	r3, #10
 802296c:	d019      	beq.n	80229a2 <_putc_r+0x76>
 802296e:	6823      	ldr	r3, [r4, #0]
 8022970:	1c5a      	adds	r2, r3, #1
 8022972:	6022      	str	r2, [r4, #0]
 8022974:	701d      	strb	r5, [r3, #0]
 8022976:	b2ed      	uxtb	r5, r5
 8022978:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802297a:	07da      	lsls	r2, r3, #31
 802297c:	d405      	bmi.n	802298a <_putc_r+0x5e>
 802297e:	89a3      	ldrh	r3, [r4, #12]
 8022980:	059b      	lsls	r3, r3, #22
 8022982:	d402      	bmi.n	802298a <_putc_r+0x5e>
 8022984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022986:	f7ff f98f 	bl	8021ca8 <__retarget_lock_release_recursive>
 802298a:	4628      	mov	r0, r5
 802298c:	bd70      	pop	{r4, r5, r6, pc}
 802298e:	4b09      	ldr	r3, [pc, #36]	; (80229b4 <_putc_r+0x88>)
 8022990:	429c      	cmp	r4, r3
 8022992:	d101      	bne.n	8022998 <_putc_r+0x6c>
 8022994:	68b4      	ldr	r4, [r6, #8]
 8022996:	e7d6      	b.n	8022946 <_putc_r+0x1a>
 8022998:	4b07      	ldr	r3, [pc, #28]	; (80229b8 <_putc_r+0x8c>)
 802299a:	429c      	cmp	r4, r3
 802299c:	bf08      	it	eq
 802299e:	68f4      	ldreq	r4, [r6, #12]
 80229a0:	e7d1      	b.n	8022946 <_putc_r+0x1a>
 80229a2:	4629      	mov	r1, r5
 80229a4:	4622      	mov	r2, r4
 80229a6:	4630      	mov	r0, r6
 80229a8:	f7fe f886 	bl	8020ab8 <__swbuf_r>
 80229ac:	4605      	mov	r5, r0
 80229ae:	e7e3      	b.n	8022978 <_putc_r+0x4c>
 80229b0:	080246f0 	.word	0x080246f0
 80229b4:	08024710 	.word	0x08024710
 80229b8:	080246d0 	.word	0x080246d0

080229bc <_sbrk_r>:
 80229bc:	b538      	push	{r3, r4, r5, lr}
 80229be:	4d06      	ldr	r5, [pc, #24]	; (80229d8 <_sbrk_r+0x1c>)
 80229c0:	2300      	movs	r3, #0
 80229c2:	4604      	mov	r4, r0
 80229c4:	4608      	mov	r0, r1
 80229c6:	602b      	str	r3, [r5, #0]
 80229c8:	f7f4 fd3e 	bl	8017448 <_sbrk>
 80229cc:	1c43      	adds	r3, r0, #1
 80229ce:	d102      	bne.n	80229d6 <_sbrk_r+0x1a>
 80229d0:	682b      	ldr	r3, [r5, #0]
 80229d2:	b103      	cbz	r3, 80229d6 <_sbrk_r+0x1a>
 80229d4:	6023      	str	r3, [r4, #0]
 80229d6:	bd38      	pop	{r3, r4, r5, pc}
 80229d8:	2000f91c 	.word	0x2000f91c

080229dc <__sread>:
 80229dc:	b510      	push	{r4, lr}
 80229de:	460c      	mov	r4, r1
 80229e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80229e4:	f000 f8e2 	bl	8022bac <_read_r>
 80229e8:	2800      	cmp	r0, #0
 80229ea:	bfab      	itete	ge
 80229ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80229ee:	89a3      	ldrhlt	r3, [r4, #12]
 80229f0:	181b      	addge	r3, r3, r0
 80229f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80229f6:	bfac      	ite	ge
 80229f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80229fa:	81a3      	strhlt	r3, [r4, #12]
 80229fc:	bd10      	pop	{r4, pc}

080229fe <__swrite>:
 80229fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022a02:	461f      	mov	r7, r3
 8022a04:	898b      	ldrh	r3, [r1, #12]
 8022a06:	05db      	lsls	r3, r3, #23
 8022a08:	4605      	mov	r5, r0
 8022a0a:	460c      	mov	r4, r1
 8022a0c:	4616      	mov	r6, r2
 8022a0e:	d505      	bpl.n	8022a1c <__swrite+0x1e>
 8022a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022a14:	2302      	movs	r3, #2
 8022a16:	2200      	movs	r2, #0
 8022a18:	f000 f898 	bl	8022b4c <_lseek_r>
 8022a1c:	89a3      	ldrh	r3, [r4, #12]
 8022a1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022a22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8022a26:	81a3      	strh	r3, [r4, #12]
 8022a28:	4632      	mov	r2, r6
 8022a2a:	463b      	mov	r3, r7
 8022a2c:	4628      	mov	r0, r5
 8022a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022a32:	f000 b817 	b.w	8022a64 <_write_r>

08022a36 <__sseek>:
 8022a36:	b510      	push	{r4, lr}
 8022a38:	460c      	mov	r4, r1
 8022a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022a3e:	f000 f885 	bl	8022b4c <_lseek_r>
 8022a42:	1c43      	adds	r3, r0, #1
 8022a44:	89a3      	ldrh	r3, [r4, #12]
 8022a46:	bf15      	itete	ne
 8022a48:	6560      	strne	r0, [r4, #84]	; 0x54
 8022a4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8022a4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8022a52:	81a3      	strheq	r3, [r4, #12]
 8022a54:	bf18      	it	ne
 8022a56:	81a3      	strhne	r3, [r4, #12]
 8022a58:	bd10      	pop	{r4, pc}

08022a5a <__sclose>:
 8022a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022a5e:	f000 b831 	b.w	8022ac4 <_close_r>
	...

08022a64 <_write_r>:
 8022a64:	b538      	push	{r3, r4, r5, lr}
 8022a66:	4d07      	ldr	r5, [pc, #28]	; (8022a84 <_write_r+0x20>)
 8022a68:	4604      	mov	r4, r0
 8022a6a:	4608      	mov	r0, r1
 8022a6c:	4611      	mov	r1, r2
 8022a6e:	2200      	movs	r2, #0
 8022a70:	602a      	str	r2, [r5, #0]
 8022a72:	461a      	mov	r2, r3
 8022a74:	f7f4 fc94 	bl	80173a0 <_write>
 8022a78:	1c43      	adds	r3, r0, #1
 8022a7a:	d102      	bne.n	8022a82 <_write_r+0x1e>
 8022a7c:	682b      	ldr	r3, [r5, #0]
 8022a7e:	b103      	cbz	r3, 8022a82 <_write_r+0x1e>
 8022a80:	6023      	str	r3, [r4, #0]
 8022a82:	bd38      	pop	{r3, r4, r5, pc}
 8022a84:	2000f91c 	.word	0x2000f91c

08022a88 <__assert_func>:
 8022a88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022a8a:	4614      	mov	r4, r2
 8022a8c:	461a      	mov	r2, r3
 8022a8e:	4b09      	ldr	r3, [pc, #36]	; (8022ab4 <__assert_func+0x2c>)
 8022a90:	681b      	ldr	r3, [r3, #0]
 8022a92:	4605      	mov	r5, r0
 8022a94:	68d8      	ldr	r0, [r3, #12]
 8022a96:	b14c      	cbz	r4, 8022aac <__assert_func+0x24>
 8022a98:	4b07      	ldr	r3, [pc, #28]	; (8022ab8 <__assert_func+0x30>)
 8022a9a:	9100      	str	r1, [sp, #0]
 8022a9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022aa0:	4906      	ldr	r1, [pc, #24]	; (8022abc <__assert_func+0x34>)
 8022aa2:	462b      	mov	r3, r5
 8022aa4:	f000 f81e 	bl	8022ae4 <fiprintf>
 8022aa8:	f000 f89f 	bl	8022bea <abort>
 8022aac:	4b04      	ldr	r3, [pc, #16]	; (8022ac0 <__assert_func+0x38>)
 8022aae:	461c      	mov	r4, r3
 8022ab0:	e7f3      	b.n	8022a9a <__assert_func+0x12>
 8022ab2:	bf00      	nop
 8022ab4:	2000002c 	.word	0x2000002c
 8022ab8:	0802489d 	.word	0x0802489d
 8022abc:	080248aa 	.word	0x080248aa
 8022ac0:	080248d8 	.word	0x080248d8

08022ac4 <_close_r>:
 8022ac4:	b538      	push	{r3, r4, r5, lr}
 8022ac6:	4d06      	ldr	r5, [pc, #24]	; (8022ae0 <_close_r+0x1c>)
 8022ac8:	2300      	movs	r3, #0
 8022aca:	4604      	mov	r4, r0
 8022acc:	4608      	mov	r0, r1
 8022ace:	602b      	str	r3, [r5, #0]
 8022ad0:	f7f4 fc86 	bl	80173e0 <_close>
 8022ad4:	1c43      	adds	r3, r0, #1
 8022ad6:	d102      	bne.n	8022ade <_close_r+0x1a>
 8022ad8:	682b      	ldr	r3, [r5, #0]
 8022ada:	b103      	cbz	r3, 8022ade <_close_r+0x1a>
 8022adc:	6023      	str	r3, [r4, #0]
 8022ade:	bd38      	pop	{r3, r4, r5, pc}
 8022ae0:	2000f91c 	.word	0x2000f91c

08022ae4 <fiprintf>:
 8022ae4:	b40e      	push	{r1, r2, r3}
 8022ae6:	b503      	push	{r0, r1, lr}
 8022ae8:	4601      	mov	r1, r0
 8022aea:	ab03      	add	r3, sp, #12
 8022aec:	4805      	ldr	r0, [pc, #20]	; (8022b04 <fiprintf+0x20>)
 8022aee:	f853 2b04 	ldr.w	r2, [r3], #4
 8022af2:	6800      	ldr	r0, [r0, #0]
 8022af4:	9301      	str	r3, [sp, #4]
 8022af6:	f7ff fde9 	bl	80226cc <_vfiprintf_r>
 8022afa:	b002      	add	sp, #8
 8022afc:	f85d eb04 	ldr.w	lr, [sp], #4
 8022b00:	b003      	add	sp, #12
 8022b02:	4770      	bx	lr
 8022b04:	2000002c 	.word	0x2000002c

08022b08 <_fstat_r>:
 8022b08:	b538      	push	{r3, r4, r5, lr}
 8022b0a:	4d07      	ldr	r5, [pc, #28]	; (8022b28 <_fstat_r+0x20>)
 8022b0c:	2300      	movs	r3, #0
 8022b0e:	4604      	mov	r4, r0
 8022b10:	4608      	mov	r0, r1
 8022b12:	4611      	mov	r1, r2
 8022b14:	602b      	str	r3, [r5, #0]
 8022b16:	f7f4 fc6f 	bl	80173f8 <_fstat>
 8022b1a:	1c43      	adds	r3, r0, #1
 8022b1c:	d102      	bne.n	8022b24 <_fstat_r+0x1c>
 8022b1e:	682b      	ldr	r3, [r5, #0]
 8022b20:	b103      	cbz	r3, 8022b24 <_fstat_r+0x1c>
 8022b22:	6023      	str	r3, [r4, #0]
 8022b24:	bd38      	pop	{r3, r4, r5, pc}
 8022b26:	bf00      	nop
 8022b28:	2000f91c 	.word	0x2000f91c

08022b2c <_isatty_r>:
 8022b2c:	b538      	push	{r3, r4, r5, lr}
 8022b2e:	4d06      	ldr	r5, [pc, #24]	; (8022b48 <_isatty_r+0x1c>)
 8022b30:	2300      	movs	r3, #0
 8022b32:	4604      	mov	r4, r0
 8022b34:	4608      	mov	r0, r1
 8022b36:	602b      	str	r3, [r5, #0]
 8022b38:	f7f4 fc6e 	bl	8017418 <_isatty>
 8022b3c:	1c43      	adds	r3, r0, #1
 8022b3e:	d102      	bne.n	8022b46 <_isatty_r+0x1a>
 8022b40:	682b      	ldr	r3, [r5, #0]
 8022b42:	b103      	cbz	r3, 8022b46 <_isatty_r+0x1a>
 8022b44:	6023      	str	r3, [r4, #0]
 8022b46:	bd38      	pop	{r3, r4, r5, pc}
 8022b48:	2000f91c 	.word	0x2000f91c

08022b4c <_lseek_r>:
 8022b4c:	b538      	push	{r3, r4, r5, lr}
 8022b4e:	4d07      	ldr	r5, [pc, #28]	; (8022b6c <_lseek_r+0x20>)
 8022b50:	4604      	mov	r4, r0
 8022b52:	4608      	mov	r0, r1
 8022b54:	4611      	mov	r1, r2
 8022b56:	2200      	movs	r2, #0
 8022b58:	602a      	str	r2, [r5, #0]
 8022b5a:	461a      	mov	r2, r3
 8022b5c:	f7f4 fc67 	bl	801742e <_lseek>
 8022b60:	1c43      	adds	r3, r0, #1
 8022b62:	d102      	bne.n	8022b6a <_lseek_r+0x1e>
 8022b64:	682b      	ldr	r3, [r5, #0]
 8022b66:	b103      	cbz	r3, 8022b6a <_lseek_r+0x1e>
 8022b68:	6023      	str	r3, [r4, #0]
 8022b6a:	bd38      	pop	{r3, r4, r5, pc}
 8022b6c:	2000f91c 	.word	0x2000f91c

08022b70 <__ascii_mbtowc>:
 8022b70:	b082      	sub	sp, #8
 8022b72:	b901      	cbnz	r1, 8022b76 <__ascii_mbtowc+0x6>
 8022b74:	a901      	add	r1, sp, #4
 8022b76:	b142      	cbz	r2, 8022b8a <__ascii_mbtowc+0x1a>
 8022b78:	b14b      	cbz	r3, 8022b8e <__ascii_mbtowc+0x1e>
 8022b7a:	7813      	ldrb	r3, [r2, #0]
 8022b7c:	600b      	str	r3, [r1, #0]
 8022b7e:	7812      	ldrb	r2, [r2, #0]
 8022b80:	1e10      	subs	r0, r2, #0
 8022b82:	bf18      	it	ne
 8022b84:	2001      	movne	r0, #1
 8022b86:	b002      	add	sp, #8
 8022b88:	4770      	bx	lr
 8022b8a:	4610      	mov	r0, r2
 8022b8c:	e7fb      	b.n	8022b86 <__ascii_mbtowc+0x16>
 8022b8e:	f06f 0001 	mvn.w	r0, #1
 8022b92:	e7f8      	b.n	8022b86 <__ascii_mbtowc+0x16>

08022b94 <__malloc_lock>:
 8022b94:	4801      	ldr	r0, [pc, #4]	; (8022b9c <__malloc_lock+0x8>)
 8022b96:	f7ff b886 	b.w	8021ca6 <__retarget_lock_acquire_recursive>
 8022b9a:	bf00      	nop
 8022b9c:	2000f910 	.word	0x2000f910

08022ba0 <__malloc_unlock>:
 8022ba0:	4801      	ldr	r0, [pc, #4]	; (8022ba8 <__malloc_unlock+0x8>)
 8022ba2:	f7ff b881 	b.w	8021ca8 <__retarget_lock_release_recursive>
 8022ba6:	bf00      	nop
 8022ba8:	2000f910 	.word	0x2000f910

08022bac <_read_r>:
 8022bac:	b538      	push	{r3, r4, r5, lr}
 8022bae:	4d07      	ldr	r5, [pc, #28]	; (8022bcc <_read_r+0x20>)
 8022bb0:	4604      	mov	r4, r0
 8022bb2:	4608      	mov	r0, r1
 8022bb4:	4611      	mov	r1, r2
 8022bb6:	2200      	movs	r2, #0
 8022bb8:	602a      	str	r2, [r5, #0]
 8022bba:	461a      	mov	r2, r3
 8022bbc:	f7f4 fbd2 	bl	8017364 <_read>
 8022bc0:	1c43      	adds	r3, r0, #1
 8022bc2:	d102      	bne.n	8022bca <_read_r+0x1e>
 8022bc4:	682b      	ldr	r3, [r5, #0]
 8022bc6:	b103      	cbz	r3, 8022bca <_read_r+0x1e>
 8022bc8:	6023      	str	r3, [r4, #0]
 8022bca:	bd38      	pop	{r3, r4, r5, pc}
 8022bcc:	2000f91c 	.word	0x2000f91c

08022bd0 <__ascii_wctomb>:
 8022bd0:	b149      	cbz	r1, 8022be6 <__ascii_wctomb+0x16>
 8022bd2:	2aff      	cmp	r2, #255	; 0xff
 8022bd4:	bf85      	ittet	hi
 8022bd6:	238a      	movhi	r3, #138	; 0x8a
 8022bd8:	6003      	strhi	r3, [r0, #0]
 8022bda:	700a      	strbls	r2, [r1, #0]
 8022bdc:	f04f 30ff 	movhi.w	r0, #4294967295
 8022be0:	bf98      	it	ls
 8022be2:	2001      	movls	r0, #1
 8022be4:	4770      	bx	lr
 8022be6:	4608      	mov	r0, r1
 8022be8:	4770      	bx	lr

08022bea <abort>:
 8022bea:	b508      	push	{r3, lr}
 8022bec:	2006      	movs	r0, #6
 8022bee:	f000 f82b 	bl	8022c48 <raise>
 8022bf2:	2001      	movs	r0, #1
 8022bf4:	f7f4 fbac 	bl	8017350 <_exit>

08022bf8 <_raise_r>:
 8022bf8:	291f      	cmp	r1, #31
 8022bfa:	b538      	push	{r3, r4, r5, lr}
 8022bfc:	4604      	mov	r4, r0
 8022bfe:	460d      	mov	r5, r1
 8022c00:	d904      	bls.n	8022c0c <_raise_r+0x14>
 8022c02:	2316      	movs	r3, #22
 8022c04:	6003      	str	r3, [r0, #0]
 8022c06:	f04f 30ff 	mov.w	r0, #4294967295
 8022c0a:	bd38      	pop	{r3, r4, r5, pc}
 8022c0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8022c0e:	b112      	cbz	r2, 8022c16 <_raise_r+0x1e>
 8022c10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022c14:	b94b      	cbnz	r3, 8022c2a <_raise_r+0x32>
 8022c16:	4620      	mov	r0, r4
 8022c18:	f000 f830 	bl	8022c7c <_getpid_r>
 8022c1c:	462a      	mov	r2, r5
 8022c1e:	4601      	mov	r1, r0
 8022c20:	4620      	mov	r0, r4
 8022c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022c26:	f000 b817 	b.w	8022c58 <_kill_r>
 8022c2a:	2b01      	cmp	r3, #1
 8022c2c:	d00a      	beq.n	8022c44 <_raise_r+0x4c>
 8022c2e:	1c59      	adds	r1, r3, #1
 8022c30:	d103      	bne.n	8022c3a <_raise_r+0x42>
 8022c32:	2316      	movs	r3, #22
 8022c34:	6003      	str	r3, [r0, #0]
 8022c36:	2001      	movs	r0, #1
 8022c38:	e7e7      	b.n	8022c0a <_raise_r+0x12>
 8022c3a:	2400      	movs	r4, #0
 8022c3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8022c40:	4628      	mov	r0, r5
 8022c42:	4798      	blx	r3
 8022c44:	2000      	movs	r0, #0
 8022c46:	e7e0      	b.n	8022c0a <_raise_r+0x12>

08022c48 <raise>:
 8022c48:	4b02      	ldr	r3, [pc, #8]	; (8022c54 <raise+0xc>)
 8022c4a:	4601      	mov	r1, r0
 8022c4c:	6818      	ldr	r0, [r3, #0]
 8022c4e:	f7ff bfd3 	b.w	8022bf8 <_raise_r>
 8022c52:	bf00      	nop
 8022c54:	2000002c 	.word	0x2000002c

08022c58 <_kill_r>:
 8022c58:	b538      	push	{r3, r4, r5, lr}
 8022c5a:	4d07      	ldr	r5, [pc, #28]	; (8022c78 <_kill_r+0x20>)
 8022c5c:	2300      	movs	r3, #0
 8022c5e:	4604      	mov	r4, r0
 8022c60:	4608      	mov	r0, r1
 8022c62:	4611      	mov	r1, r2
 8022c64:	602b      	str	r3, [r5, #0]
 8022c66:	f7f4 fb63 	bl	8017330 <_kill>
 8022c6a:	1c43      	adds	r3, r0, #1
 8022c6c:	d102      	bne.n	8022c74 <_kill_r+0x1c>
 8022c6e:	682b      	ldr	r3, [r5, #0]
 8022c70:	b103      	cbz	r3, 8022c74 <_kill_r+0x1c>
 8022c72:	6023      	str	r3, [r4, #0]
 8022c74:	bd38      	pop	{r3, r4, r5, pc}
 8022c76:	bf00      	nop
 8022c78:	2000f91c 	.word	0x2000f91c

08022c7c <_getpid_r>:
 8022c7c:	f7f4 bb50 	b.w	8017320 <_getpid>

08022c80 <ceil>:
 8022c80:	ec51 0b10 	vmov	r0, r1, d0
 8022c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022c88:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8022c8c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8022c90:	2e13      	cmp	r6, #19
 8022c92:	ee10 5a10 	vmov	r5, s0
 8022c96:	ee10 8a10 	vmov	r8, s0
 8022c9a:	460c      	mov	r4, r1
 8022c9c:	dc30      	bgt.n	8022d00 <ceil+0x80>
 8022c9e:	2e00      	cmp	r6, #0
 8022ca0:	da12      	bge.n	8022cc8 <ceil+0x48>
 8022ca2:	a335      	add	r3, pc, #212	; (adr r3, 8022d78 <ceil+0xf8>)
 8022ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ca8:	f7dd fb18 	bl	80002dc <__adddf3>
 8022cac:	2200      	movs	r2, #0
 8022cae:	2300      	movs	r3, #0
 8022cb0:	f7dd ff5a 	bl	8000b68 <__aeabi_dcmpgt>
 8022cb4:	b128      	cbz	r0, 8022cc2 <ceil+0x42>
 8022cb6:	2c00      	cmp	r4, #0
 8022cb8:	db55      	blt.n	8022d66 <ceil+0xe6>
 8022cba:	432c      	orrs	r4, r5
 8022cbc:	d057      	beq.n	8022d6e <ceil+0xee>
 8022cbe:	4c30      	ldr	r4, [pc, #192]	; (8022d80 <ceil+0x100>)
 8022cc0:	2500      	movs	r5, #0
 8022cc2:	4621      	mov	r1, r4
 8022cc4:	4628      	mov	r0, r5
 8022cc6:	e025      	b.n	8022d14 <ceil+0x94>
 8022cc8:	4f2e      	ldr	r7, [pc, #184]	; (8022d84 <ceil+0x104>)
 8022cca:	4137      	asrs	r7, r6
 8022ccc:	ea01 0307 	and.w	r3, r1, r7
 8022cd0:	4303      	orrs	r3, r0
 8022cd2:	d01f      	beq.n	8022d14 <ceil+0x94>
 8022cd4:	a328      	add	r3, pc, #160	; (adr r3, 8022d78 <ceil+0xf8>)
 8022cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022cda:	f7dd faff 	bl	80002dc <__adddf3>
 8022cde:	2200      	movs	r2, #0
 8022ce0:	2300      	movs	r3, #0
 8022ce2:	f7dd ff41 	bl	8000b68 <__aeabi_dcmpgt>
 8022ce6:	2800      	cmp	r0, #0
 8022ce8:	d0eb      	beq.n	8022cc2 <ceil+0x42>
 8022cea:	2c00      	cmp	r4, #0
 8022cec:	bfc2      	ittt	gt
 8022cee:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8022cf2:	fa43 f606 	asrgt.w	r6, r3, r6
 8022cf6:	19a4      	addgt	r4, r4, r6
 8022cf8:	ea24 0407 	bic.w	r4, r4, r7
 8022cfc:	2500      	movs	r5, #0
 8022cfe:	e7e0      	b.n	8022cc2 <ceil+0x42>
 8022d00:	2e33      	cmp	r6, #51	; 0x33
 8022d02:	dd0b      	ble.n	8022d1c <ceil+0x9c>
 8022d04:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8022d08:	d104      	bne.n	8022d14 <ceil+0x94>
 8022d0a:	ee10 2a10 	vmov	r2, s0
 8022d0e:	460b      	mov	r3, r1
 8022d10:	f7dd fae4 	bl	80002dc <__adddf3>
 8022d14:	ec41 0b10 	vmov	d0, r0, r1
 8022d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022d1c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8022d20:	f04f 33ff 	mov.w	r3, #4294967295
 8022d24:	fa23 f707 	lsr.w	r7, r3, r7
 8022d28:	4207      	tst	r7, r0
 8022d2a:	d0f3      	beq.n	8022d14 <ceil+0x94>
 8022d2c:	a312      	add	r3, pc, #72	; (adr r3, 8022d78 <ceil+0xf8>)
 8022d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d32:	f7dd fad3 	bl	80002dc <__adddf3>
 8022d36:	2200      	movs	r2, #0
 8022d38:	2300      	movs	r3, #0
 8022d3a:	f7dd ff15 	bl	8000b68 <__aeabi_dcmpgt>
 8022d3e:	2800      	cmp	r0, #0
 8022d40:	d0bf      	beq.n	8022cc2 <ceil+0x42>
 8022d42:	2c00      	cmp	r4, #0
 8022d44:	dd02      	ble.n	8022d4c <ceil+0xcc>
 8022d46:	2e14      	cmp	r6, #20
 8022d48:	d103      	bne.n	8022d52 <ceil+0xd2>
 8022d4a:	3401      	adds	r4, #1
 8022d4c:	ea25 0507 	bic.w	r5, r5, r7
 8022d50:	e7b7      	b.n	8022cc2 <ceil+0x42>
 8022d52:	2301      	movs	r3, #1
 8022d54:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8022d58:	fa03 f606 	lsl.w	r6, r3, r6
 8022d5c:	4435      	add	r5, r6
 8022d5e:	4545      	cmp	r5, r8
 8022d60:	bf38      	it	cc
 8022d62:	18e4      	addcc	r4, r4, r3
 8022d64:	e7f2      	b.n	8022d4c <ceil+0xcc>
 8022d66:	2500      	movs	r5, #0
 8022d68:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8022d6c:	e7a9      	b.n	8022cc2 <ceil+0x42>
 8022d6e:	4625      	mov	r5, r4
 8022d70:	e7a7      	b.n	8022cc2 <ceil+0x42>
 8022d72:	bf00      	nop
 8022d74:	f3af 8000 	nop.w
 8022d78:	8800759c 	.word	0x8800759c
 8022d7c:	7e37e43c 	.word	0x7e37e43c
 8022d80:	3ff00000 	.word	0x3ff00000
 8022d84:	000fffff 	.word	0x000fffff

08022d88 <cos>:
 8022d88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022d8a:	ec53 2b10 	vmov	r2, r3, d0
 8022d8e:	4826      	ldr	r0, [pc, #152]	; (8022e28 <cos+0xa0>)
 8022d90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8022d94:	4281      	cmp	r1, r0
 8022d96:	dc06      	bgt.n	8022da6 <cos+0x1e>
 8022d98:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8022e20 <cos+0x98>
 8022d9c:	b005      	add	sp, #20
 8022d9e:	f85d eb04 	ldr.w	lr, [sp], #4
 8022da2:	f000 bc75 	b.w	8023690 <__kernel_cos>
 8022da6:	4821      	ldr	r0, [pc, #132]	; (8022e2c <cos+0xa4>)
 8022da8:	4281      	cmp	r1, r0
 8022daa:	dd09      	ble.n	8022dc0 <cos+0x38>
 8022dac:	ee10 0a10 	vmov	r0, s0
 8022db0:	4619      	mov	r1, r3
 8022db2:	f7dd fa91 	bl	80002d8 <__aeabi_dsub>
 8022db6:	ec41 0b10 	vmov	d0, r0, r1
 8022dba:	b005      	add	sp, #20
 8022dbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8022dc0:	4668      	mov	r0, sp
 8022dc2:	f000 fa59 	bl	8023278 <__ieee754_rem_pio2>
 8022dc6:	f000 0003 	and.w	r0, r0, #3
 8022dca:	2801      	cmp	r0, #1
 8022dcc:	d00b      	beq.n	8022de6 <cos+0x5e>
 8022dce:	2802      	cmp	r0, #2
 8022dd0:	d016      	beq.n	8022e00 <cos+0x78>
 8022dd2:	b9e0      	cbnz	r0, 8022e0e <cos+0x86>
 8022dd4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022dd8:	ed9d 0b00 	vldr	d0, [sp]
 8022ddc:	f000 fc58 	bl	8023690 <__kernel_cos>
 8022de0:	ec51 0b10 	vmov	r0, r1, d0
 8022de4:	e7e7      	b.n	8022db6 <cos+0x2e>
 8022de6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022dea:	ed9d 0b00 	vldr	d0, [sp]
 8022dee:	f001 f867 	bl	8023ec0 <__kernel_sin>
 8022df2:	ec53 2b10 	vmov	r2, r3, d0
 8022df6:	ee10 0a10 	vmov	r0, s0
 8022dfa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8022dfe:	e7da      	b.n	8022db6 <cos+0x2e>
 8022e00:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022e04:	ed9d 0b00 	vldr	d0, [sp]
 8022e08:	f000 fc42 	bl	8023690 <__kernel_cos>
 8022e0c:	e7f1      	b.n	8022df2 <cos+0x6a>
 8022e0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022e12:	ed9d 0b00 	vldr	d0, [sp]
 8022e16:	2001      	movs	r0, #1
 8022e18:	f001 f852 	bl	8023ec0 <__kernel_sin>
 8022e1c:	e7e0      	b.n	8022de0 <cos+0x58>
 8022e1e:	bf00      	nop
	...
 8022e28:	3fe921fb 	.word	0x3fe921fb
 8022e2c:	7fefffff 	.word	0x7fefffff

08022e30 <sin>:
 8022e30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022e32:	ec53 2b10 	vmov	r2, r3, d0
 8022e36:	4828      	ldr	r0, [pc, #160]	; (8022ed8 <sin+0xa8>)
 8022e38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8022e3c:	4281      	cmp	r1, r0
 8022e3e:	dc07      	bgt.n	8022e50 <sin+0x20>
 8022e40:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8022ed0 <sin+0xa0>
 8022e44:	2000      	movs	r0, #0
 8022e46:	b005      	add	sp, #20
 8022e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8022e4c:	f001 b838 	b.w	8023ec0 <__kernel_sin>
 8022e50:	4822      	ldr	r0, [pc, #136]	; (8022edc <sin+0xac>)
 8022e52:	4281      	cmp	r1, r0
 8022e54:	dd09      	ble.n	8022e6a <sin+0x3a>
 8022e56:	ee10 0a10 	vmov	r0, s0
 8022e5a:	4619      	mov	r1, r3
 8022e5c:	f7dd fa3c 	bl	80002d8 <__aeabi_dsub>
 8022e60:	ec41 0b10 	vmov	d0, r0, r1
 8022e64:	b005      	add	sp, #20
 8022e66:	f85d fb04 	ldr.w	pc, [sp], #4
 8022e6a:	4668      	mov	r0, sp
 8022e6c:	f000 fa04 	bl	8023278 <__ieee754_rem_pio2>
 8022e70:	f000 0003 	and.w	r0, r0, #3
 8022e74:	2801      	cmp	r0, #1
 8022e76:	d00c      	beq.n	8022e92 <sin+0x62>
 8022e78:	2802      	cmp	r0, #2
 8022e7a:	d011      	beq.n	8022ea0 <sin+0x70>
 8022e7c:	b9f0      	cbnz	r0, 8022ebc <sin+0x8c>
 8022e7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022e82:	ed9d 0b00 	vldr	d0, [sp]
 8022e86:	2001      	movs	r0, #1
 8022e88:	f001 f81a 	bl	8023ec0 <__kernel_sin>
 8022e8c:	ec51 0b10 	vmov	r0, r1, d0
 8022e90:	e7e6      	b.n	8022e60 <sin+0x30>
 8022e92:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022e96:	ed9d 0b00 	vldr	d0, [sp]
 8022e9a:	f000 fbf9 	bl	8023690 <__kernel_cos>
 8022e9e:	e7f5      	b.n	8022e8c <sin+0x5c>
 8022ea0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022ea4:	ed9d 0b00 	vldr	d0, [sp]
 8022ea8:	2001      	movs	r0, #1
 8022eaa:	f001 f809 	bl	8023ec0 <__kernel_sin>
 8022eae:	ec53 2b10 	vmov	r2, r3, d0
 8022eb2:	ee10 0a10 	vmov	r0, s0
 8022eb6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8022eba:	e7d1      	b.n	8022e60 <sin+0x30>
 8022ebc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022ec0:	ed9d 0b00 	vldr	d0, [sp]
 8022ec4:	f000 fbe4 	bl	8023690 <__kernel_cos>
 8022ec8:	e7f1      	b.n	8022eae <sin+0x7e>
 8022eca:	bf00      	nop
 8022ecc:	f3af 8000 	nop.w
	...
 8022ed8:	3fe921fb 	.word	0x3fe921fb
 8022edc:	7fefffff 	.word	0x7fefffff

08022ee0 <exp>:
 8022ee0:	b538      	push	{r3, r4, r5, lr}
 8022ee2:	ed2d 8b02 	vpush	{d8}
 8022ee6:	ec55 4b10 	vmov	r4, r5, d0
 8022eea:	f000 f841 	bl	8022f70 <__ieee754_exp>
 8022eee:	eeb0 8a40 	vmov.f32	s16, s0
 8022ef2:	eef0 8a60 	vmov.f32	s17, s1
 8022ef6:	ec45 4b10 	vmov	d0, r4, r5
 8022efa:	f001 f8d8 	bl	80240ae <finite>
 8022efe:	b168      	cbz	r0, 8022f1c <exp+0x3c>
 8022f00:	a317      	add	r3, pc, #92	; (adr r3, 8022f60 <exp+0x80>)
 8022f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f06:	4620      	mov	r0, r4
 8022f08:	4629      	mov	r1, r5
 8022f0a:	f7dd fe2d 	bl	8000b68 <__aeabi_dcmpgt>
 8022f0e:	b160      	cbz	r0, 8022f2a <exp+0x4a>
 8022f10:	f7fd f884 	bl	802001c <__errno>
 8022f14:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8022f50 <exp+0x70>
 8022f18:	2322      	movs	r3, #34	; 0x22
 8022f1a:	6003      	str	r3, [r0, #0]
 8022f1c:	eeb0 0a48 	vmov.f32	s0, s16
 8022f20:	eef0 0a68 	vmov.f32	s1, s17
 8022f24:	ecbd 8b02 	vpop	{d8}
 8022f28:	bd38      	pop	{r3, r4, r5, pc}
 8022f2a:	a30f      	add	r3, pc, #60	; (adr r3, 8022f68 <exp+0x88>)
 8022f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f30:	4620      	mov	r0, r4
 8022f32:	4629      	mov	r1, r5
 8022f34:	f7dd fdfa 	bl	8000b2c <__aeabi_dcmplt>
 8022f38:	2800      	cmp	r0, #0
 8022f3a:	d0ef      	beq.n	8022f1c <exp+0x3c>
 8022f3c:	f7fd f86e 	bl	802001c <__errno>
 8022f40:	2322      	movs	r3, #34	; 0x22
 8022f42:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8022f58 <exp+0x78>
 8022f46:	6003      	str	r3, [r0, #0]
 8022f48:	e7e8      	b.n	8022f1c <exp+0x3c>
 8022f4a:	bf00      	nop
 8022f4c:	f3af 8000 	nop.w
 8022f50:	00000000 	.word	0x00000000
 8022f54:	7ff00000 	.word	0x7ff00000
	...
 8022f60:	fefa39ef 	.word	0xfefa39ef
 8022f64:	40862e42 	.word	0x40862e42
 8022f68:	d52d3051 	.word	0xd52d3051
 8022f6c:	c0874910 	.word	0xc0874910

08022f70 <__ieee754_exp>:
 8022f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022f74:	ec55 4b10 	vmov	r4, r5, d0
 8022f78:	49b5      	ldr	r1, [pc, #724]	; (8023250 <__ieee754_exp+0x2e0>)
 8022f7a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8022f7e:	428b      	cmp	r3, r1
 8022f80:	ed2d 8b04 	vpush	{d8-d9}
 8022f84:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8022f88:	d93d      	bls.n	8023006 <__ieee754_exp+0x96>
 8022f8a:	49b2      	ldr	r1, [pc, #712]	; (8023254 <__ieee754_exp+0x2e4>)
 8022f8c:	428b      	cmp	r3, r1
 8022f8e:	d918      	bls.n	8022fc2 <__ieee754_exp+0x52>
 8022f90:	ee10 3a10 	vmov	r3, s0
 8022f94:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8022f98:	4313      	orrs	r3, r2
 8022f9a:	d009      	beq.n	8022fb0 <__ieee754_exp+0x40>
 8022f9c:	ee10 2a10 	vmov	r2, s0
 8022fa0:	462b      	mov	r3, r5
 8022fa2:	4620      	mov	r0, r4
 8022fa4:	4629      	mov	r1, r5
 8022fa6:	f7dd f999 	bl	80002dc <__adddf3>
 8022faa:	4604      	mov	r4, r0
 8022fac:	460d      	mov	r5, r1
 8022fae:	e002      	b.n	8022fb6 <__ieee754_exp+0x46>
 8022fb0:	b10e      	cbz	r6, 8022fb6 <__ieee754_exp+0x46>
 8022fb2:	2400      	movs	r4, #0
 8022fb4:	2500      	movs	r5, #0
 8022fb6:	ecbd 8b04 	vpop	{d8-d9}
 8022fba:	ec45 4b10 	vmov	d0, r4, r5
 8022fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022fc2:	a38d      	add	r3, pc, #564	; (adr r3, 80231f8 <__ieee754_exp+0x288>)
 8022fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fc8:	ee10 0a10 	vmov	r0, s0
 8022fcc:	4629      	mov	r1, r5
 8022fce:	f7dd fdcb 	bl	8000b68 <__aeabi_dcmpgt>
 8022fd2:	4607      	mov	r7, r0
 8022fd4:	b130      	cbz	r0, 8022fe4 <__ieee754_exp+0x74>
 8022fd6:	ecbd 8b04 	vpop	{d8-d9}
 8022fda:	2000      	movs	r0, #0
 8022fdc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022fe0:	f001 b853 	b.w	802408a <__math_oflow>
 8022fe4:	a386      	add	r3, pc, #536	; (adr r3, 8023200 <__ieee754_exp+0x290>)
 8022fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fea:	4620      	mov	r0, r4
 8022fec:	4629      	mov	r1, r5
 8022fee:	f7dd fd9d 	bl	8000b2c <__aeabi_dcmplt>
 8022ff2:	2800      	cmp	r0, #0
 8022ff4:	f000 808b 	beq.w	802310e <__ieee754_exp+0x19e>
 8022ff8:	ecbd 8b04 	vpop	{d8-d9}
 8022ffc:	4638      	mov	r0, r7
 8022ffe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023002:	f001 b839 	b.w	8024078 <__math_uflow>
 8023006:	4a94      	ldr	r2, [pc, #592]	; (8023258 <__ieee754_exp+0x2e8>)
 8023008:	4293      	cmp	r3, r2
 802300a:	f240 80ac 	bls.w	8023166 <__ieee754_exp+0x1f6>
 802300e:	4a93      	ldr	r2, [pc, #588]	; (802325c <__ieee754_exp+0x2ec>)
 8023010:	4293      	cmp	r3, r2
 8023012:	d87c      	bhi.n	802310e <__ieee754_exp+0x19e>
 8023014:	4b92      	ldr	r3, [pc, #584]	; (8023260 <__ieee754_exp+0x2f0>)
 8023016:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802301a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802301e:	ee10 0a10 	vmov	r0, s0
 8023022:	4629      	mov	r1, r5
 8023024:	f7dd f958 	bl	80002d8 <__aeabi_dsub>
 8023028:	4b8e      	ldr	r3, [pc, #568]	; (8023264 <__ieee754_exp+0x2f4>)
 802302a:	00f7      	lsls	r7, r6, #3
 802302c:	443b      	add	r3, r7
 802302e:	ed93 7b00 	vldr	d7, [r3]
 8023032:	f1c6 0a01 	rsb	sl, r6, #1
 8023036:	4680      	mov	r8, r0
 8023038:	4689      	mov	r9, r1
 802303a:	ebaa 0a06 	sub.w	sl, sl, r6
 802303e:	eeb0 8a47 	vmov.f32	s16, s14
 8023042:	eef0 8a67 	vmov.f32	s17, s15
 8023046:	ec53 2b18 	vmov	r2, r3, d8
 802304a:	4640      	mov	r0, r8
 802304c:	4649      	mov	r1, r9
 802304e:	f7dd f943 	bl	80002d8 <__aeabi_dsub>
 8023052:	4604      	mov	r4, r0
 8023054:	460d      	mov	r5, r1
 8023056:	4622      	mov	r2, r4
 8023058:	462b      	mov	r3, r5
 802305a:	4620      	mov	r0, r4
 802305c:	4629      	mov	r1, r5
 802305e:	f7dd faf3 	bl	8000648 <__aeabi_dmul>
 8023062:	a369      	add	r3, pc, #420	; (adr r3, 8023208 <__ieee754_exp+0x298>)
 8023064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023068:	4606      	mov	r6, r0
 802306a:	460f      	mov	r7, r1
 802306c:	f7dd faec 	bl	8000648 <__aeabi_dmul>
 8023070:	a367      	add	r3, pc, #412	; (adr r3, 8023210 <__ieee754_exp+0x2a0>)
 8023072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023076:	f7dd f92f 	bl	80002d8 <__aeabi_dsub>
 802307a:	4632      	mov	r2, r6
 802307c:	463b      	mov	r3, r7
 802307e:	f7dd fae3 	bl	8000648 <__aeabi_dmul>
 8023082:	a365      	add	r3, pc, #404	; (adr r3, 8023218 <__ieee754_exp+0x2a8>)
 8023084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023088:	f7dd f928 	bl	80002dc <__adddf3>
 802308c:	4632      	mov	r2, r6
 802308e:	463b      	mov	r3, r7
 8023090:	f7dd fada 	bl	8000648 <__aeabi_dmul>
 8023094:	a362      	add	r3, pc, #392	; (adr r3, 8023220 <__ieee754_exp+0x2b0>)
 8023096:	e9d3 2300 	ldrd	r2, r3, [r3]
 802309a:	f7dd f91d 	bl	80002d8 <__aeabi_dsub>
 802309e:	4632      	mov	r2, r6
 80230a0:	463b      	mov	r3, r7
 80230a2:	f7dd fad1 	bl	8000648 <__aeabi_dmul>
 80230a6:	a360      	add	r3, pc, #384	; (adr r3, 8023228 <__ieee754_exp+0x2b8>)
 80230a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230ac:	f7dd f916 	bl	80002dc <__adddf3>
 80230b0:	4632      	mov	r2, r6
 80230b2:	463b      	mov	r3, r7
 80230b4:	f7dd fac8 	bl	8000648 <__aeabi_dmul>
 80230b8:	4602      	mov	r2, r0
 80230ba:	460b      	mov	r3, r1
 80230bc:	4620      	mov	r0, r4
 80230be:	4629      	mov	r1, r5
 80230c0:	f7dd f90a 	bl	80002d8 <__aeabi_dsub>
 80230c4:	4602      	mov	r2, r0
 80230c6:	460b      	mov	r3, r1
 80230c8:	4606      	mov	r6, r0
 80230ca:	460f      	mov	r7, r1
 80230cc:	4620      	mov	r0, r4
 80230ce:	4629      	mov	r1, r5
 80230d0:	f7dd faba 	bl	8000648 <__aeabi_dmul>
 80230d4:	ec41 0b19 	vmov	d9, r0, r1
 80230d8:	f1ba 0f00 	cmp.w	sl, #0
 80230dc:	d15d      	bne.n	802319a <__ieee754_exp+0x22a>
 80230de:	2200      	movs	r2, #0
 80230e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80230e4:	4630      	mov	r0, r6
 80230e6:	4639      	mov	r1, r7
 80230e8:	f7dd f8f6 	bl	80002d8 <__aeabi_dsub>
 80230ec:	4602      	mov	r2, r0
 80230ee:	460b      	mov	r3, r1
 80230f0:	ec51 0b19 	vmov	r0, r1, d9
 80230f4:	f7dd fbd2 	bl	800089c <__aeabi_ddiv>
 80230f8:	4622      	mov	r2, r4
 80230fa:	462b      	mov	r3, r5
 80230fc:	f7dd f8ec 	bl	80002d8 <__aeabi_dsub>
 8023100:	4602      	mov	r2, r0
 8023102:	460b      	mov	r3, r1
 8023104:	2000      	movs	r0, #0
 8023106:	4958      	ldr	r1, [pc, #352]	; (8023268 <__ieee754_exp+0x2f8>)
 8023108:	f7dd f8e6 	bl	80002d8 <__aeabi_dsub>
 802310c:	e74d      	b.n	8022faa <__ieee754_exp+0x3a>
 802310e:	4857      	ldr	r0, [pc, #348]	; (802326c <__ieee754_exp+0x2fc>)
 8023110:	a347      	add	r3, pc, #284	; (adr r3, 8023230 <__ieee754_exp+0x2c0>)
 8023112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023116:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 802311a:	4629      	mov	r1, r5
 802311c:	4620      	mov	r0, r4
 802311e:	f7dd fa93 	bl	8000648 <__aeabi_dmul>
 8023122:	e9d6 2300 	ldrd	r2, r3, [r6]
 8023126:	f7dd f8d9 	bl	80002dc <__adddf3>
 802312a:	f7dd fd3d 	bl	8000ba8 <__aeabi_d2iz>
 802312e:	4682      	mov	sl, r0
 8023130:	f7dd fa20 	bl	8000574 <__aeabi_i2d>
 8023134:	a340      	add	r3, pc, #256	; (adr r3, 8023238 <__ieee754_exp+0x2c8>)
 8023136:	e9d3 2300 	ldrd	r2, r3, [r3]
 802313a:	4606      	mov	r6, r0
 802313c:	460f      	mov	r7, r1
 802313e:	f7dd fa83 	bl	8000648 <__aeabi_dmul>
 8023142:	4602      	mov	r2, r0
 8023144:	460b      	mov	r3, r1
 8023146:	4620      	mov	r0, r4
 8023148:	4629      	mov	r1, r5
 802314a:	f7dd f8c5 	bl	80002d8 <__aeabi_dsub>
 802314e:	a33c      	add	r3, pc, #240	; (adr r3, 8023240 <__ieee754_exp+0x2d0>)
 8023150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023154:	4680      	mov	r8, r0
 8023156:	4689      	mov	r9, r1
 8023158:	4630      	mov	r0, r6
 802315a:	4639      	mov	r1, r7
 802315c:	f7dd fa74 	bl	8000648 <__aeabi_dmul>
 8023160:	ec41 0b18 	vmov	d8, r0, r1
 8023164:	e76f      	b.n	8023046 <__ieee754_exp+0xd6>
 8023166:	4a42      	ldr	r2, [pc, #264]	; (8023270 <__ieee754_exp+0x300>)
 8023168:	4293      	cmp	r3, r2
 802316a:	d811      	bhi.n	8023190 <__ieee754_exp+0x220>
 802316c:	a336      	add	r3, pc, #216	; (adr r3, 8023248 <__ieee754_exp+0x2d8>)
 802316e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023172:	ee10 0a10 	vmov	r0, s0
 8023176:	4629      	mov	r1, r5
 8023178:	f7dd f8b0 	bl	80002dc <__adddf3>
 802317c:	4b3a      	ldr	r3, [pc, #232]	; (8023268 <__ieee754_exp+0x2f8>)
 802317e:	2200      	movs	r2, #0
 8023180:	f7dd fcf2 	bl	8000b68 <__aeabi_dcmpgt>
 8023184:	b138      	cbz	r0, 8023196 <__ieee754_exp+0x226>
 8023186:	4b38      	ldr	r3, [pc, #224]	; (8023268 <__ieee754_exp+0x2f8>)
 8023188:	2200      	movs	r2, #0
 802318a:	4620      	mov	r0, r4
 802318c:	4629      	mov	r1, r5
 802318e:	e70a      	b.n	8022fa6 <__ieee754_exp+0x36>
 8023190:	f04f 0a00 	mov.w	sl, #0
 8023194:	e75f      	b.n	8023056 <__ieee754_exp+0xe6>
 8023196:	4682      	mov	sl, r0
 8023198:	e75d      	b.n	8023056 <__ieee754_exp+0xe6>
 802319a:	4632      	mov	r2, r6
 802319c:	463b      	mov	r3, r7
 802319e:	2000      	movs	r0, #0
 80231a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80231a4:	f7dd f898 	bl	80002d8 <__aeabi_dsub>
 80231a8:	4602      	mov	r2, r0
 80231aa:	460b      	mov	r3, r1
 80231ac:	ec51 0b19 	vmov	r0, r1, d9
 80231b0:	f7dd fb74 	bl	800089c <__aeabi_ddiv>
 80231b4:	4602      	mov	r2, r0
 80231b6:	460b      	mov	r3, r1
 80231b8:	ec51 0b18 	vmov	r0, r1, d8
 80231bc:	f7dd f88c 	bl	80002d8 <__aeabi_dsub>
 80231c0:	4642      	mov	r2, r8
 80231c2:	464b      	mov	r3, r9
 80231c4:	f7dd f888 	bl	80002d8 <__aeabi_dsub>
 80231c8:	4602      	mov	r2, r0
 80231ca:	460b      	mov	r3, r1
 80231cc:	2000      	movs	r0, #0
 80231ce:	4926      	ldr	r1, [pc, #152]	; (8023268 <__ieee754_exp+0x2f8>)
 80231d0:	f7dd f882 	bl	80002d8 <__aeabi_dsub>
 80231d4:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80231d8:	4592      	cmp	sl, r2
 80231da:	db02      	blt.n	80231e2 <__ieee754_exp+0x272>
 80231dc:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80231e0:	e6e3      	b.n	8022faa <__ieee754_exp+0x3a>
 80231e2:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80231e6:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80231ea:	2200      	movs	r2, #0
 80231ec:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80231f0:	f7dd fa2a 	bl	8000648 <__aeabi_dmul>
 80231f4:	e6d9      	b.n	8022faa <__ieee754_exp+0x3a>
 80231f6:	bf00      	nop
 80231f8:	fefa39ef 	.word	0xfefa39ef
 80231fc:	40862e42 	.word	0x40862e42
 8023200:	d52d3051 	.word	0xd52d3051
 8023204:	c0874910 	.word	0xc0874910
 8023208:	72bea4d0 	.word	0x72bea4d0
 802320c:	3e663769 	.word	0x3e663769
 8023210:	c5d26bf1 	.word	0xc5d26bf1
 8023214:	3ebbbd41 	.word	0x3ebbbd41
 8023218:	af25de2c 	.word	0xaf25de2c
 802321c:	3f11566a 	.word	0x3f11566a
 8023220:	16bebd93 	.word	0x16bebd93
 8023224:	3f66c16c 	.word	0x3f66c16c
 8023228:	5555553e 	.word	0x5555553e
 802322c:	3fc55555 	.word	0x3fc55555
 8023230:	652b82fe 	.word	0x652b82fe
 8023234:	3ff71547 	.word	0x3ff71547
 8023238:	fee00000 	.word	0xfee00000
 802323c:	3fe62e42 	.word	0x3fe62e42
 8023240:	35793c76 	.word	0x35793c76
 8023244:	3dea39ef 	.word	0x3dea39ef
 8023248:	8800759c 	.word	0x8800759c
 802324c:	7e37e43c 	.word	0x7e37e43c
 8023250:	40862e41 	.word	0x40862e41
 8023254:	7fefffff 	.word	0x7fefffff
 8023258:	3fd62e42 	.word	0x3fd62e42
 802325c:	3ff0a2b1 	.word	0x3ff0a2b1
 8023260:	080249f8 	.word	0x080249f8
 8023264:	08024a08 	.word	0x08024a08
 8023268:	3ff00000 	.word	0x3ff00000
 802326c:	080249e8 	.word	0x080249e8
 8023270:	3defffff 	.word	0x3defffff
 8023274:	00000000 	.word	0x00000000

08023278 <__ieee754_rem_pio2>:
 8023278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802327c:	ed2d 8b02 	vpush	{d8}
 8023280:	ec55 4b10 	vmov	r4, r5, d0
 8023284:	4bca      	ldr	r3, [pc, #808]	; (80235b0 <__ieee754_rem_pio2+0x338>)
 8023286:	b08b      	sub	sp, #44	; 0x2c
 8023288:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 802328c:	4598      	cmp	r8, r3
 802328e:	4682      	mov	sl, r0
 8023290:	9502      	str	r5, [sp, #8]
 8023292:	dc08      	bgt.n	80232a6 <__ieee754_rem_pio2+0x2e>
 8023294:	2200      	movs	r2, #0
 8023296:	2300      	movs	r3, #0
 8023298:	ed80 0b00 	vstr	d0, [r0]
 802329c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80232a0:	f04f 0b00 	mov.w	fp, #0
 80232a4:	e028      	b.n	80232f8 <__ieee754_rem_pio2+0x80>
 80232a6:	4bc3      	ldr	r3, [pc, #780]	; (80235b4 <__ieee754_rem_pio2+0x33c>)
 80232a8:	4598      	cmp	r8, r3
 80232aa:	dc78      	bgt.n	802339e <__ieee754_rem_pio2+0x126>
 80232ac:	9b02      	ldr	r3, [sp, #8]
 80232ae:	4ec2      	ldr	r6, [pc, #776]	; (80235b8 <__ieee754_rem_pio2+0x340>)
 80232b0:	2b00      	cmp	r3, #0
 80232b2:	ee10 0a10 	vmov	r0, s0
 80232b6:	a3b0      	add	r3, pc, #704	; (adr r3, 8023578 <__ieee754_rem_pio2+0x300>)
 80232b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232bc:	4629      	mov	r1, r5
 80232be:	dd39      	ble.n	8023334 <__ieee754_rem_pio2+0xbc>
 80232c0:	f7dd f80a 	bl	80002d8 <__aeabi_dsub>
 80232c4:	45b0      	cmp	r8, r6
 80232c6:	4604      	mov	r4, r0
 80232c8:	460d      	mov	r5, r1
 80232ca:	d01b      	beq.n	8023304 <__ieee754_rem_pio2+0x8c>
 80232cc:	a3ac      	add	r3, pc, #688	; (adr r3, 8023580 <__ieee754_rem_pio2+0x308>)
 80232ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232d2:	f7dd f801 	bl	80002d8 <__aeabi_dsub>
 80232d6:	4602      	mov	r2, r0
 80232d8:	460b      	mov	r3, r1
 80232da:	e9ca 2300 	strd	r2, r3, [sl]
 80232de:	4620      	mov	r0, r4
 80232e0:	4629      	mov	r1, r5
 80232e2:	f7dc fff9 	bl	80002d8 <__aeabi_dsub>
 80232e6:	a3a6      	add	r3, pc, #664	; (adr r3, 8023580 <__ieee754_rem_pio2+0x308>)
 80232e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232ec:	f7dc fff4 	bl	80002d8 <__aeabi_dsub>
 80232f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80232f4:	f04f 0b01 	mov.w	fp, #1
 80232f8:	4658      	mov	r0, fp
 80232fa:	b00b      	add	sp, #44	; 0x2c
 80232fc:	ecbd 8b02 	vpop	{d8}
 8023300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023304:	a3a0      	add	r3, pc, #640	; (adr r3, 8023588 <__ieee754_rem_pio2+0x310>)
 8023306:	e9d3 2300 	ldrd	r2, r3, [r3]
 802330a:	f7dc ffe5 	bl	80002d8 <__aeabi_dsub>
 802330e:	a3a0      	add	r3, pc, #640	; (adr r3, 8023590 <__ieee754_rem_pio2+0x318>)
 8023310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023314:	4604      	mov	r4, r0
 8023316:	460d      	mov	r5, r1
 8023318:	f7dc ffde 	bl	80002d8 <__aeabi_dsub>
 802331c:	4602      	mov	r2, r0
 802331e:	460b      	mov	r3, r1
 8023320:	e9ca 2300 	strd	r2, r3, [sl]
 8023324:	4620      	mov	r0, r4
 8023326:	4629      	mov	r1, r5
 8023328:	f7dc ffd6 	bl	80002d8 <__aeabi_dsub>
 802332c:	a398      	add	r3, pc, #608	; (adr r3, 8023590 <__ieee754_rem_pio2+0x318>)
 802332e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023332:	e7db      	b.n	80232ec <__ieee754_rem_pio2+0x74>
 8023334:	f7dc ffd2 	bl	80002dc <__adddf3>
 8023338:	45b0      	cmp	r8, r6
 802333a:	4604      	mov	r4, r0
 802333c:	460d      	mov	r5, r1
 802333e:	d016      	beq.n	802336e <__ieee754_rem_pio2+0xf6>
 8023340:	a38f      	add	r3, pc, #572	; (adr r3, 8023580 <__ieee754_rem_pio2+0x308>)
 8023342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023346:	f7dc ffc9 	bl	80002dc <__adddf3>
 802334a:	4602      	mov	r2, r0
 802334c:	460b      	mov	r3, r1
 802334e:	e9ca 2300 	strd	r2, r3, [sl]
 8023352:	4620      	mov	r0, r4
 8023354:	4629      	mov	r1, r5
 8023356:	f7dc ffbf 	bl	80002d8 <__aeabi_dsub>
 802335a:	a389      	add	r3, pc, #548	; (adr r3, 8023580 <__ieee754_rem_pio2+0x308>)
 802335c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023360:	f7dc ffbc 	bl	80002dc <__adddf3>
 8023364:	f04f 3bff 	mov.w	fp, #4294967295
 8023368:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802336c:	e7c4      	b.n	80232f8 <__ieee754_rem_pio2+0x80>
 802336e:	a386      	add	r3, pc, #536	; (adr r3, 8023588 <__ieee754_rem_pio2+0x310>)
 8023370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023374:	f7dc ffb2 	bl	80002dc <__adddf3>
 8023378:	a385      	add	r3, pc, #532	; (adr r3, 8023590 <__ieee754_rem_pio2+0x318>)
 802337a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802337e:	4604      	mov	r4, r0
 8023380:	460d      	mov	r5, r1
 8023382:	f7dc ffab 	bl	80002dc <__adddf3>
 8023386:	4602      	mov	r2, r0
 8023388:	460b      	mov	r3, r1
 802338a:	e9ca 2300 	strd	r2, r3, [sl]
 802338e:	4620      	mov	r0, r4
 8023390:	4629      	mov	r1, r5
 8023392:	f7dc ffa1 	bl	80002d8 <__aeabi_dsub>
 8023396:	a37e      	add	r3, pc, #504	; (adr r3, 8023590 <__ieee754_rem_pio2+0x318>)
 8023398:	e9d3 2300 	ldrd	r2, r3, [r3]
 802339c:	e7e0      	b.n	8023360 <__ieee754_rem_pio2+0xe8>
 802339e:	4b87      	ldr	r3, [pc, #540]	; (80235bc <__ieee754_rem_pio2+0x344>)
 80233a0:	4598      	cmp	r8, r3
 80233a2:	f300 80d9 	bgt.w	8023558 <__ieee754_rem_pio2+0x2e0>
 80233a6:	f000 fe79 	bl	802409c <fabs>
 80233aa:	ec55 4b10 	vmov	r4, r5, d0
 80233ae:	ee10 0a10 	vmov	r0, s0
 80233b2:	a379      	add	r3, pc, #484	; (adr r3, 8023598 <__ieee754_rem_pio2+0x320>)
 80233b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233b8:	4629      	mov	r1, r5
 80233ba:	f7dd f945 	bl	8000648 <__aeabi_dmul>
 80233be:	4b80      	ldr	r3, [pc, #512]	; (80235c0 <__ieee754_rem_pio2+0x348>)
 80233c0:	2200      	movs	r2, #0
 80233c2:	f7dc ff8b 	bl	80002dc <__adddf3>
 80233c6:	f7dd fbef 	bl	8000ba8 <__aeabi_d2iz>
 80233ca:	4683      	mov	fp, r0
 80233cc:	f7dd f8d2 	bl	8000574 <__aeabi_i2d>
 80233d0:	4602      	mov	r2, r0
 80233d2:	460b      	mov	r3, r1
 80233d4:	ec43 2b18 	vmov	d8, r2, r3
 80233d8:	a367      	add	r3, pc, #412	; (adr r3, 8023578 <__ieee754_rem_pio2+0x300>)
 80233da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233de:	f7dd f933 	bl	8000648 <__aeabi_dmul>
 80233e2:	4602      	mov	r2, r0
 80233e4:	460b      	mov	r3, r1
 80233e6:	4620      	mov	r0, r4
 80233e8:	4629      	mov	r1, r5
 80233ea:	f7dc ff75 	bl	80002d8 <__aeabi_dsub>
 80233ee:	a364      	add	r3, pc, #400	; (adr r3, 8023580 <__ieee754_rem_pio2+0x308>)
 80233f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233f4:	4606      	mov	r6, r0
 80233f6:	460f      	mov	r7, r1
 80233f8:	ec51 0b18 	vmov	r0, r1, d8
 80233fc:	f7dd f924 	bl	8000648 <__aeabi_dmul>
 8023400:	f1bb 0f1f 	cmp.w	fp, #31
 8023404:	4604      	mov	r4, r0
 8023406:	460d      	mov	r5, r1
 8023408:	dc0d      	bgt.n	8023426 <__ieee754_rem_pio2+0x1ae>
 802340a:	4b6e      	ldr	r3, [pc, #440]	; (80235c4 <__ieee754_rem_pio2+0x34c>)
 802340c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8023410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023414:	4543      	cmp	r3, r8
 8023416:	d006      	beq.n	8023426 <__ieee754_rem_pio2+0x1ae>
 8023418:	4622      	mov	r2, r4
 802341a:	462b      	mov	r3, r5
 802341c:	4630      	mov	r0, r6
 802341e:	4639      	mov	r1, r7
 8023420:	f7dc ff5a 	bl	80002d8 <__aeabi_dsub>
 8023424:	e00f      	b.n	8023446 <__ieee754_rem_pio2+0x1ce>
 8023426:	462b      	mov	r3, r5
 8023428:	4622      	mov	r2, r4
 802342a:	4630      	mov	r0, r6
 802342c:	4639      	mov	r1, r7
 802342e:	f7dc ff53 	bl	80002d8 <__aeabi_dsub>
 8023432:	ea4f 5328 	mov.w	r3, r8, asr #20
 8023436:	9303      	str	r3, [sp, #12]
 8023438:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802343c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8023440:	f1b8 0f10 	cmp.w	r8, #16
 8023444:	dc02      	bgt.n	802344c <__ieee754_rem_pio2+0x1d4>
 8023446:	e9ca 0100 	strd	r0, r1, [sl]
 802344a:	e039      	b.n	80234c0 <__ieee754_rem_pio2+0x248>
 802344c:	a34e      	add	r3, pc, #312	; (adr r3, 8023588 <__ieee754_rem_pio2+0x310>)
 802344e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023452:	ec51 0b18 	vmov	r0, r1, d8
 8023456:	f7dd f8f7 	bl	8000648 <__aeabi_dmul>
 802345a:	4604      	mov	r4, r0
 802345c:	460d      	mov	r5, r1
 802345e:	4602      	mov	r2, r0
 8023460:	460b      	mov	r3, r1
 8023462:	4630      	mov	r0, r6
 8023464:	4639      	mov	r1, r7
 8023466:	f7dc ff37 	bl	80002d8 <__aeabi_dsub>
 802346a:	4602      	mov	r2, r0
 802346c:	460b      	mov	r3, r1
 802346e:	4680      	mov	r8, r0
 8023470:	4689      	mov	r9, r1
 8023472:	4630      	mov	r0, r6
 8023474:	4639      	mov	r1, r7
 8023476:	f7dc ff2f 	bl	80002d8 <__aeabi_dsub>
 802347a:	4622      	mov	r2, r4
 802347c:	462b      	mov	r3, r5
 802347e:	f7dc ff2b 	bl	80002d8 <__aeabi_dsub>
 8023482:	a343      	add	r3, pc, #268	; (adr r3, 8023590 <__ieee754_rem_pio2+0x318>)
 8023484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023488:	4604      	mov	r4, r0
 802348a:	460d      	mov	r5, r1
 802348c:	ec51 0b18 	vmov	r0, r1, d8
 8023490:	f7dd f8da 	bl	8000648 <__aeabi_dmul>
 8023494:	4622      	mov	r2, r4
 8023496:	462b      	mov	r3, r5
 8023498:	f7dc ff1e 	bl	80002d8 <__aeabi_dsub>
 802349c:	4602      	mov	r2, r0
 802349e:	460b      	mov	r3, r1
 80234a0:	4604      	mov	r4, r0
 80234a2:	460d      	mov	r5, r1
 80234a4:	4640      	mov	r0, r8
 80234a6:	4649      	mov	r1, r9
 80234a8:	f7dc ff16 	bl	80002d8 <__aeabi_dsub>
 80234ac:	9a03      	ldr	r2, [sp, #12]
 80234ae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80234b2:	1ad3      	subs	r3, r2, r3
 80234b4:	2b31      	cmp	r3, #49	; 0x31
 80234b6:	dc24      	bgt.n	8023502 <__ieee754_rem_pio2+0x28a>
 80234b8:	e9ca 0100 	strd	r0, r1, [sl]
 80234bc:	4646      	mov	r6, r8
 80234be:	464f      	mov	r7, r9
 80234c0:	e9da 8900 	ldrd	r8, r9, [sl]
 80234c4:	4630      	mov	r0, r6
 80234c6:	4642      	mov	r2, r8
 80234c8:	464b      	mov	r3, r9
 80234ca:	4639      	mov	r1, r7
 80234cc:	f7dc ff04 	bl	80002d8 <__aeabi_dsub>
 80234d0:	462b      	mov	r3, r5
 80234d2:	4622      	mov	r2, r4
 80234d4:	f7dc ff00 	bl	80002d8 <__aeabi_dsub>
 80234d8:	9b02      	ldr	r3, [sp, #8]
 80234da:	2b00      	cmp	r3, #0
 80234dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80234e0:	f6bf af0a 	bge.w	80232f8 <__ieee754_rem_pio2+0x80>
 80234e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80234e8:	f8ca 3004 	str.w	r3, [sl, #4]
 80234ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80234f0:	f8ca 8000 	str.w	r8, [sl]
 80234f4:	f8ca 0008 	str.w	r0, [sl, #8]
 80234f8:	f8ca 300c 	str.w	r3, [sl, #12]
 80234fc:	f1cb 0b00 	rsb	fp, fp, #0
 8023500:	e6fa      	b.n	80232f8 <__ieee754_rem_pio2+0x80>
 8023502:	a327      	add	r3, pc, #156	; (adr r3, 80235a0 <__ieee754_rem_pio2+0x328>)
 8023504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023508:	ec51 0b18 	vmov	r0, r1, d8
 802350c:	f7dd f89c 	bl	8000648 <__aeabi_dmul>
 8023510:	4604      	mov	r4, r0
 8023512:	460d      	mov	r5, r1
 8023514:	4602      	mov	r2, r0
 8023516:	460b      	mov	r3, r1
 8023518:	4640      	mov	r0, r8
 802351a:	4649      	mov	r1, r9
 802351c:	f7dc fedc 	bl	80002d8 <__aeabi_dsub>
 8023520:	4602      	mov	r2, r0
 8023522:	460b      	mov	r3, r1
 8023524:	4606      	mov	r6, r0
 8023526:	460f      	mov	r7, r1
 8023528:	4640      	mov	r0, r8
 802352a:	4649      	mov	r1, r9
 802352c:	f7dc fed4 	bl	80002d8 <__aeabi_dsub>
 8023530:	4622      	mov	r2, r4
 8023532:	462b      	mov	r3, r5
 8023534:	f7dc fed0 	bl	80002d8 <__aeabi_dsub>
 8023538:	a31b      	add	r3, pc, #108	; (adr r3, 80235a8 <__ieee754_rem_pio2+0x330>)
 802353a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802353e:	4604      	mov	r4, r0
 8023540:	460d      	mov	r5, r1
 8023542:	ec51 0b18 	vmov	r0, r1, d8
 8023546:	f7dd f87f 	bl	8000648 <__aeabi_dmul>
 802354a:	4622      	mov	r2, r4
 802354c:	462b      	mov	r3, r5
 802354e:	f7dc fec3 	bl	80002d8 <__aeabi_dsub>
 8023552:	4604      	mov	r4, r0
 8023554:	460d      	mov	r5, r1
 8023556:	e75f      	b.n	8023418 <__ieee754_rem_pio2+0x1a0>
 8023558:	4b1b      	ldr	r3, [pc, #108]	; (80235c8 <__ieee754_rem_pio2+0x350>)
 802355a:	4598      	cmp	r8, r3
 802355c:	dd36      	ble.n	80235cc <__ieee754_rem_pio2+0x354>
 802355e:	ee10 2a10 	vmov	r2, s0
 8023562:	462b      	mov	r3, r5
 8023564:	4620      	mov	r0, r4
 8023566:	4629      	mov	r1, r5
 8023568:	f7dc feb6 	bl	80002d8 <__aeabi_dsub>
 802356c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023570:	e9ca 0100 	strd	r0, r1, [sl]
 8023574:	e694      	b.n	80232a0 <__ieee754_rem_pio2+0x28>
 8023576:	bf00      	nop
 8023578:	54400000 	.word	0x54400000
 802357c:	3ff921fb 	.word	0x3ff921fb
 8023580:	1a626331 	.word	0x1a626331
 8023584:	3dd0b461 	.word	0x3dd0b461
 8023588:	1a600000 	.word	0x1a600000
 802358c:	3dd0b461 	.word	0x3dd0b461
 8023590:	2e037073 	.word	0x2e037073
 8023594:	3ba3198a 	.word	0x3ba3198a
 8023598:	6dc9c883 	.word	0x6dc9c883
 802359c:	3fe45f30 	.word	0x3fe45f30
 80235a0:	2e000000 	.word	0x2e000000
 80235a4:	3ba3198a 	.word	0x3ba3198a
 80235a8:	252049c1 	.word	0x252049c1
 80235ac:	397b839a 	.word	0x397b839a
 80235b0:	3fe921fb 	.word	0x3fe921fb
 80235b4:	4002d97b 	.word	0x4002d97b
 80235b8:	3ff921fb 	.word	0x3ff921fb
 80235bc:	413921fb 	.word	0x413921fb
 80235c0:	3fe00000 	.word	0x3fe00000
 80235c4:	08024a18 	.word	0x08024a18
 80235c8:	7fefffff 	.word	0x7fefffff
 80235cc:	ea4f 5428 	mov.w	r4, r8, asr #20
 80235d0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80235d4:	ee10 0a10 	vmov	r0, s0
 80235d8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80235dc:	ee10 6a10 	vmov	r6, s0
 80235e0:	460f      	mov	r7, r1
 80235e2:	f7dd fae1 	bl	8000ba8 <__aeabi_d2iz>
 80235e6:	f7dc ffc5 	bl	8000574 <__aeabi_i2d>
 80235ea:	4602      	mov	r2, r0
 80235ec:	460b      	mov	r3, r1
 80235ee:	4630      	mov	r0, r6
 80235f0:	4639      	mov	r1, r7
 80235f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80235f6:	f7dc fe6f 	bl	80002d8 <__aeabi_dsub>
 80235fa:	4b23      	ldr	r3, [pc, #140]	; (8023688 <__ieee754_rem_pio2+0x410>)
 80235fc:	2200      	movs	r2, #0
 80235fe:	f7dd f823 	bl	8000648 <__aeabi_dmul>
 8023602:	460f      	mov	r7, r1
 8023604:	4606      	mov	r6, r0
 8023606:	f7dd facf 	bl	8000ba8 <__aeabi_d2iz>
 802360a:	f7dc ffb3 	bl	8000574 <__aeabi_i2d>
 802360e:	4602      	mov	r2, r0
 8023610:	460b      	mov	r3, r1
 8023612:	4630      	mov	r0, r6
 8023614:	4639      	mov	r1, r7
 8023616:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802361a:	f7dc fe5d 	bl	80002d8 <__aeabi_dsub>
 802361e:	4b1a      	ldr	r3, [pc, #104]	; (8023688 <__ieee754_rem_pio2+0x410>)
 8023620:	2200      	movs	r2, #0
 8023622:	f7dd f811 	bl	8000648 <__aeabi_dmul>
 8023626:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802362a:	ad04      	add	r5, sp, #16
 802362c:	f04f 0803 	mov.w	r8, #3
 8023630:	46a9      	mov	r9, r5
 8023632:	2600      	movs	r6, #0
 8023634:	2700      	movs	r7, #0
 8023636:	4632      	mov	r2, r6
 8023638:	463b      	mov	r3, r7
 802363a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 802363e:	46c3      	mov	fp, r8
 8023640:	3d08      	subs	r5, #8
 8023642:	f108 38ff 	add.w	r8, r8, #4294967295
 8023646:	f7dd fa67 	bl	8000b18 <__aeabi_dcmpeq>
 802364a:	2800      	cmp	r0, #0
 802364c:	d1f3      	bne.n	8023636 <__ieee754_rem_pio2+0x3be>
 802364e:	4b0f      	ldr	r3, [pc, #60]	; (802368c <__ieee754_rem_pio2+0x414>)
 8023650:	9301      	str	r3, [sp, #4]
 8023652:	2302      	movs	r3, #2
 8023654:	9300      	str	r3, [sp, #0]
 8023656:	4622      	mov	r2, r4
 8023658:	465b      	mov	r3, fp
 802365a:	4651      	mov	r1, sl
 802365c:	4648      	mov	r0, r9
 802365e:	f000 f8df 	bl	8023820 <__kernel_rem_pio2>
 8023662:	9b02      	ldr	r3, [sp, #8]
 8023664:	2b00      	cmp	r3, #0
 8023666:	4683      	mov	fp, r0
 8023668:	f6bf ae46 	bge.w	80232f8 <__ieee754_rem_pio2+0x80>
 802366c:	e9da 2100 	ldrd	r2, r1, [sl]
 8023670:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023674:	e9ca 2300 	strd	r2, r3, [sl]
 8023678:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 802367c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023680:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8023684:	e73a      	b.n	80234fc <__ieee754_rem_pio2+0x284>
 8023686:	bf00      	nop
 8023688:	41700000 	.word	0x41700000
 802368c:	08024a98 	.word	0x08024a98

08023690 <__kernel_cos>:
 8023690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023694:	ec57 6b10 	vmov	r6, r7, d0
 8023698:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 802369c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80236a0:	ed8d 1b00 	vstr	d1, [sp]
 80236a4:	da07      	bge.n	80236b6 <__kernel_cos+0x26>
 80236a6:	ee10 0a10 	vmov	r0, s0
 80236aa:	4639      	mov	r1, r7
 80236ac:	f7dd fa7c 	bl	8000ba8 <__aeabi_d2iz>
 80236b0:	2800      	cmp	r0, #0
 80236b2:	f000 8088 	beq.w	80237c6 <__kernel_cos+0x136>
 80236b6:	4632      	mov	r2, r6
 80236b8:	463b      	mov	r3, r7
 80236ba:	4630      	mov	r0, r6
 80236bc:	4639      	mov	r1, r7
 80236be:	f7dc ffc3 	bl	8000648 <__aeabi_dmul>
 80236c2:	4b51      	ldr	r3, [pc, #324]	; (8023808 <__kernel_cos+0x178>)
 80236c4:	2200      	movs	r2, #0
 80236c6:	4604      	mov	r4, r0
 80236c8:	460d      	mov	r5, r1
 80236ca:	f7dc ffbd 	bl	8000648 <__aeabi_dmul>
 80236ce:	a340      	add	r3, pc, #256	; (adr r3, 80237d0 <__kernel_cos+0x140>)
 80236d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80236d4:	4682      	mov	sl, r0
 80236d6:	468b      	mov	fp, r1
 80236d8:	4620      	mov	r0, r4
 80236da:	4629      	mov	r1, r5
 80236dc:	f7dc ffb4 	bl	8000648 <__aeabi_dmul>
 80236e0:	a33d      	add	r3, pc, #244	; (adr r3, 80237d8 <__kernel_cos+0x148>)
 80236e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80236e6:	f7dc fdf9 	bl	80002dc <__adddf3>
 80236ea:	4622      	mov	r2, r4
 80236ec:	462b      	mov	r3, r5
 80236ee:	f7dc ffab 	bl	8000648 <__aeabi_dmul>
 80236f2:	a33b      	add	r3, pc, #236	; (adr r3, 80237e0 <__kernel_cos+0x150>)
 80236f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80236f8:	f7dc fdee 	bl	80002d8 <__aeabi_dsub>
 80236fc:	4622      	mov	r2, r4
 80236fe:	462b      	mov	r3, r5
 8023700:	f7dc ffa2 	bl	8000648 <__aeabi_dmul>
 8023704:	a338      	add	r3, pc, #224	; (adr r3, 80237e8 <__kernel_cos+0x158>)
 8023706:	e9d3 2300 	ldrd	r2, r3, [r3]
 802370a:	f7dc fde7 	bl	80002dc <__adddf3>
 802370e:	4622      	mov	r2, r4
 8023710:	462b      	mov	r3, r5
 8023712:	f7dc ff99 	bl	8000648 <__aeabi_dmul>
 8023716:	a336      	add	r3, pc, #216	; (adr r3, 80237f0 <__kernel_cos+0x160>)
 8023718:	e9d3 2300 	ldrd	r2, r3, [r3]
 802371c:	f7dc fddc 	bl	80002d8 <__aeabi_dsub>
 8023720:	4622      	mov	r2, r4
 8023722:	462b      	mov	r3, r5
 8023724:	f7dc ff90 	bl	8000648 <__aeabi_dmul>
 8023728:	a333      	add	r3, pc, #204	; (adr r3, 80237f8 <__kernel_cos+0x168>)
 802372a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802372e:	f7dc fdd5 	bl	80002dc <__adddf3>
 8023732:	4622      	mov	r2, r4
 8023734:	462b      	mov	r3, r5
 8023736:	f7dc ff87 	bl	8000648 <__aeabi_dmul>
 802373a:	4622      	mov	r2, r4
 802373c:	462b      	mov	r3, r5
 802373e:	f7dc ff83 	bl	8000648 <__aeabi_dmul>
 8023742:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023746:	4604      	mov	r4, r0
 8023748:	460d      	mov	r5, r1
 802374a:	4630      	mov	r0, r6
 802374c:	4639      	mov	r1, r7
 802374e:	f7dc ff7b 	bl	8000648 <__aeabi_dmul>
 8023752:	460b      	mov	r3, r1
 8023754:	4602      	mov	r2, r0
 8023756:	4629      	mov	r1, r5
 8023758:	4620      	mov	r0, r4
 802375a:	f7dc fdbd 	bl	80002d8 <__aeabi_dsub>
 802375e:	4b2b      	ldr	r3, [pc, #172]	; (802380c <__kernel_cos+0x17c>)
 8023760:	4598      	cmp	r8, r3
 8023762:	4606      	mov	r6, r0
 8023764:	460f      	mov	r7, r1
 8023766:	dc10      	bgt.n	802378a <__kernel_cos+0xfa>
 8023768:	4602      	mov	r2, r0
 802376a:	460b      	mov	r3, r1
 802376c:	4650      	mov	r0, sl
 802376e:	4659      	mov	r1, fp
 8023770:	f7dc fdb2 	bl	80002d8 <__aeabi_dsub>
 8023774:	460b      	mov	r3, r1
 8023776:	4926      	ldr	r1, [pc, #152]	; (8023810 <__kernel_cos+0x180>)
 8023778:	4602      	mov	r2, r0
 802377a:	2000      	movs	r0, #0
 802377c:	f7dc fdac 	bl	80002d8 <__aeabi_dsub>
 8023780:	ec41 0b10 	vmov	d0, r0, r1
 8023784:	b003      	add	sp, #12
 8023786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802378a:	4b22      	ldr	r3, [pc, #136]	; (8023814 <__kernel_cos+0x184>)
 802378c:	4920      	ldr	r1, [pc, #128]	; (8023810 <__kernel_cos+0x180>)
 802378e:	4598      	cmp	r8, r3
 8023790:	bfcc      	ite	gt
 8023792:	4d21      	ldrgt	r5, [pc, #132]	; (8023818 <__kernel_cos+0x188>)
 8023794:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8023798:	2400      	movs	r4, #0
 802379a:	4622      	mov	r2, r4
 802379c:	462b      	mov	r3, r5
 802379e:	2000      	movs	r0, #0
 80237a0:	f7dc fd9a 	bl	80002d8 <__aeabi_dsub>
 80237a4:	4622      	mov	r2, r4
 80237a6:	4680      	mov	r8, r0
 80237a8:	4689      	mov	r9, r1
 80237aa:	462b      	mov	r3, r5
 80237ac:	4650      	mov	r0, sl
 80237ae:	4659      	mov	r1, fp
 80237b0:	f7dc fd92 	bl	80002d8 <__aeabi_dsub>
 80237b4:	4632      	mov	r2, r6
 80237b6:	463b      	mov	r3, r7
 80237b8:	f7dc fd8e 	bl	80002d8 <__aeabi_dsub>
 80237bc:	4602      	mov	r2, r0
 80237be:	460b      	mov	r3, r1
 80237c0:	4640      	mov	r0, r8
 80237c2:	4649      	mov	r1, r9
 80237c4:	e7da      	b.n	802377c <__kernel_cos+0xec>
 80237c6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8023800 <__kernel_cos+0x170>
 80237ca:	e7db      	b.n	8023784 <__kernel_cos+0xf4>
 80237cc:	f3af 8000 	nop.w
 80237d0:	be8838d4 	.word	0xbe8838d4
 80237d4:	bda8fae9 	.word	0xbda8fae9
 80237d8:	bdb4b1c4 	.word	0xbdb4b1c4
 80237dc:	3e21ee9e 	.word	0x3e21ee9e
 80237e0:	809c52ad 	.word	0x809c52ad
 80237e4:	3e927e4f 	.word	0x3e927e4f
 80237e8:	19cb1590 	.word	0x19cb1590
 80237ec:	3efa01a0 	.word	0x3efa01a0
 80237f0:	16c15177 	.word	0x16c15177
 80237f4:	3f56c16c 	.word	0x3f56c16c
 80237f8:	5555554c 	.word	0x5555554c
 80237fc:	3fa55555 	.word	0x3fa55555
 8023800:	00000000 	.word	0x00000000
 8023804:	3ff00000 	.word	0x3ff00000
 8023808:	3fe00000 	.word	0x3fe00000
 802380c:	3fd33332 	.word	0x3fd33332
 8023810:	3ff00000 	.word	0x3ff00000
 8023814:	3fe90000 	.word	0x3fe90000
 8023818:	3fd20000 	.word	0x3fd20000
 802381c:	00000000 	.word	0x00000000

08023820 <__kernel_rem_pio2>:
 8023820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023824:	ed2d 8b02 	vpush	{d8}
 8023828:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 802382c:	f112 0f14 	cmn.w	r2, #20
 8023830:	9308      	str	r3, [sp, #32]
 8023832:	9101      	str	r1, [sp, #4]
 8023834:	4bc4      	ldr	r3, [pc, #784]	; (8023b48 <__kernel_rem_pio2+0x328>)
 8023836:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8023838:	900b      	str	r0, [sp, #44]	; 0x2c
 802383a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802383e:	9302      	str	r3, [sp, #8]
 8023840:	9b08      	ldr	r3, [sp, #32]
 8023842:	f103 33ff 	add.w	r3, r3, #4294967295
 8023846:	bfa8      	it	ge
 8023848:	1ed4      	subge	r4, r2, #3
 802384a:	9306      	str	r3, [sp, #24]
 802384c:	bfb2      	itee	lt
 802384e:	2400      	movlt	r4, #0
 8023850:	2318      	movge	r3, #24
 8023852:	fb94 f4f3 	sdivge	r4, r4, r3
 8023856:	f06f 0317 	mvn.w	r3, #23
 802385a:	fb04 3303 	mla	r3, r4, r3, r3
 802385e:	eb03 0a02 	add.w	sl, r3, r2
 8023862:	9b02      	ldr	r3, [sp, #8]
 8023864:	9a06      	ldr	r2, [sp, #24]
 8023866:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8023b38 <__kernel_rem_pio2+0x318>
 802386a:	eb03 0802 	add.w	r8, r3, r2
 802386e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8023870:	1aa7      	subs	r7, r4, r2
 8023872:	ae22      	add	r6, sp, #136	; 0x88
 8023874:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8023878:	2500      	movs	r5, #0
 802387a:	4545      	cmp	r5, r8
 802387c:	dd13      	ble.n	80238a6 <__kernel_rem_pio2+0x86>
 802387e:	9b08      	ldr	r3, [sp, #32]
 8023880:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8023b38 <__kernel_rem_pio2+0x318>
 8023884:	aa22      	add	r2, sp, #136	; 0x88
 8023886:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 802388a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 802388e:	f04f 0800 	mov.w	r8, #0
 8023892:	9b02      	ldr	r3, [sp, #8]
 8023894:	4598      	cmp	r8, r3
 8023896:	dc2f      	bgt.n	80238f8 <__kernel_rem_pio2+0xd8>
 8023898:	ed8d 8b04 	vstr	d8, [sp, #16]
 802389c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80238a0:	462f      	mov	r7, r5
 80238a2:	2600      	movs	r6, #0
 80238a4:	e01b      	b.n	80238de <__kernel_rem_pio2+0xbe>
 80238a6:	42ef      	cmn	r7, r5
 80238a8:	d407      	bmi.n	80238ba <__kernel_rem_pio2+0x9a>
 80238aa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80238ae:	f7dc fe61 	bl	8000574 <__aeabi_i2d>
 80238b2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80238b6:	3501      	adds	r5, #1
 80238b8:	e7df      	b.n	802387a <__kernel_rem_pio2+0x5a>
 80238ba:	ec51 0b18 	vmov	r0, r1, d8
 80238be:	e7f8      	b.n	80238b2 <__kernel_rem_pio2+0x92>
 80238c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80238c4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80238c8:	f7dc febe 	bl	8000648 <__aeabi_dmul>
 80238cc:	4602      	mov	r2, r0
 80238ce:	460b      	mov	r3, r1
 80238d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80238d4:	f7dc fd02 	bl	80002dc <__adddf3>
 80238d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80238dc:	3601      	adds	r6, #1
 80238de:	9b06      	ldr	r3, [sp, #24]
 80238e0:	429e      	cmp	r6, r3
 80238e2:	f1a7 0708 	sub.w	r7, r7, #8
 80238e6:	ddeb      	ble.n	80238c0 <__kernel_rem_pio2+0xa0>
 80238e8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80238ec:	f108 0801 	add.w	r8, r8, #1
 80238f0:	ecab 7b02 	vstmia	fp!, {d7}
 80238f4:	3508      	adds	r5, #8
 80238f6:	e7cc      	b.n	8023892 <__kernel_rem_pio2+0x72>
 80238f8:	9b02      	ldr	r3, [sp, #8]
 80238fa:	aa0e      	add	r2, sp, #56	; 0x38
 80238fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8023900:	930d      	str	r3, [sp, #52]	; 0x34
 8023902:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8023904:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8023908:	9c02      	ldr	r4, [sp, #8]
 802390a:	930c      	str	r3, [sp, #48]	; 0x30
 802390c:	00e3      	lsls	r3, r4, #3
 802390e:	930a      	str	r3, [sp, #40]	; 0x28
 8023910:	ab9a      	add	r3, sp, #616	; 0x268
 8023912:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8023916:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 802391a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 802391e:	ab72      	add	r3, sp, #456	; 0x1c8
 8023920:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8023924:	46c3      	mov	fp, r8
 8023926:	46a1      	mov	r9, r4
 8023928:	f1b9 0f00 	cmp.w	r9, #0
 802392c:	f1a5 0508 	sub.w	r5, r5, #8
 8023930:	dc77      	bgt.n	8023a22 <__kernel_rem_pio2+0x202>
 8023932:	ec47 6b10 	vmov	d0, r6, r7
 8023936:	4650      	mov	r0, sl
 8023938:	f000 fc46 	bl	80241c8 <scalbn>
 802393c:	ec57 6b10 	vmov	r6, r7, d0
 8023940:	2200      	movs	r2, #0
 8023942:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8023946:	ee10 0a10 	vmov	r0, s0
 802394a:	4639      	mov	r1, r7
 802394c:	f7dc fe7c 	bl	8000648 <__aeabi_dmul>
 8023950:	ec41 0b10 	vmov	d0, r0, r1
 8023954:	f000 fbb8 	bl	80240c8 <floor>
 8023958:	4b7c      	ldr	r3, [pc, #496]	; (8023b4c <__kernel_rem_pio2+0x32c>)
 802395a:	ec51 0b10 	vmov	r0, r1, d0
 802395e:	2200      	movs	r2, #0
 8023960:	f7dc fe72 	bl	8000648 <__aeabi_dmul>
 8023964:	4602      	mov	r2, r0
 8023966:	460b      	mov	r3, r1
 8023968:	4630      	mov	r0, r6
 802396a:	4639      	mov	r1, r7
 802396c:	f7dc fcb4 	bl	80002d8 <__aeabi_dsub>
 8023970:	460f      	mov	r7, r1
 8023972:	4606      	mov	r6, r0
 8023974:	f7dd f918 	bl	8000ba8 <__aeabi_d2iz>
 8023978:	9004      	str	r0, [sp, #16]
 802397a:	f7dc fdfb 	bl	8000574 <__aeabi_i2d>
 802397e:	4602      	mov	r2, r0
 8023980:	460b      	mov	r3, r1
 8023982:	4630      	mov	r0, r6
 8023984:	4639      	mov	r1, r7
 8023986:	f7dc fca7 	bl	80002d8 <__aeabi_dsub>
 802398a:	f1ba 0f00 	cmp.w	sl, #0
 802398e:	4606      	mov	r6, r0
 8023990:	460f      	mov	r7, r1
 8023992:	dd6d      	ble.n	8023a70 <__kernel_rem_pio2+0x250>
 8023994:	1e62      	subs	r2, r4, #1
 8023996:	ab0e      	add	r3, sp, #56	; 0x38
 8023998:	9d04      	ldr	r5, [sp, #16]
 802399a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802399e:	f1ca 0118 	rsb	r1, sl, #24
 80239a2:	fa40 f301 	asr.w	r3, r0, r1
 80239a6:	441d      	add	r5, r3
 80239a8:	408b      	lsls	r3, r1
 80239aa:	1ac0      	subs	r0, r0, r3
 80239ac:	ab0e      	add	r3, sp, #56	; 0x38
 80239ae:	9504      	str	r5, [sp, #16]
 80239b0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80239b4:	f1ca 0317 	rsb	r3, sl, #23
 80239b8:	fa40 fb03 	asr.w	fp, r0, r3
 80239bc:	f1bb 0f00 	cmp.w	fp, #0
 80239c0:	dd65      	ble.n	8023a8e <__kernel_rem_pio2+0x26e>
 80239c2:	9b04      	ldr	r3, [sp, #16]
 80239c4:	2200      	movs	r2, #0
 80239c6:	3301      	adds	r3, #1
 80239c8:	9304      	str	r3, [sp, #16]
 80239ca:	4615      	mov	r5, r2
 80239cc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80239d0:	4294      	cmp	r4, r2
 80239d2:	f300 809c 	bgt.w	8023b0e <__kernel_rem_pio2+0x2ee>
 80239d6:	f1ba 0f00 	cmp.w	sl, #0
 80239da:	dd07      	ble.n	80239ec <__kernel_rem_pio2+0x1cc>
 80239dc:	f1ba 0f01 	cmp.w	sl, #1
 80239e0:	f000 80c0 	beq.w	8023b64 <__kernel_rem_pio2+0x344>
 80239e4:	f1ba 0f02 	cmp.w	sl, #2
 80239e8:	f000 80c6 	beq.w	8023b78 <__kernel_rem_pio2+0x358>
 80239ec:	f1bb 0f02 	cmp.w	fp, #2
 80239f0:	d14d      	bne.n	8023a8e <__kernel_rem_pio2+0x26e>
 80239f2:	4632      	mov	r2, r6
 80239f4:	463b      	mov	r3, r7
 80239f6:	4956      	ldr	r1, [pc, #344]	; (8023b50 <__kernel_rem_pio2+0x330>)
 80239f8:	2000      	movs	r0, #0
 80239fa:	f7dc fc6d 	bl	80002d8 <__aeabi_dsub>
 80239fe:	4606      	mov	r6, r0
 8023a00:	460f      	mov	r7, r1
 8023a02:	2d00      	cmp	r5, #0
 8023a04:	d043      	beq.n	8023a8e <__kernel_rem_pio2+0x26e>
 8023a06:	4650      	mov	r0, sl
 8023a08:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8023b40 <__kernel_rem_pio2+0x320>
 8023a0c:	f000 fbdc 	bl	80241c8 <scalbn>
 8023a10:	4630      	mov	r0, r6
 8023a12:	4639      	mov	r1, r7
 8023a14:	ec53 2b10 	vmov	r2, r3, d0
 8023a18:	f7dc fc5e 	bl	80002d8 <__aeabi_dsub>
 8023a1c:	4606      	mov	r6, r0
 8023a1e:	460f      	mov	r7, r1
 8023a20:	e035      	b.n	8023a8e <__kernel_rem_pio2+0x26e>
 8023a22:	4b4c      	ldr	r3, [pc, #304]	; (8023b54 <__kernel_rem_pio2+0x334>)
 8023a24:	2200      	movs	r2, #0
 8023a26:	4630      	mov	r0, r6
 8023a28:	4639      	mov	r1, r7
 8023a2a:	f7dc fe0d 	bl	8000648 <__aeabi_dmul>
 8023a2e:	f7dd f8bb 	bl	8000ba8 <__aeabi_d2iz>
 8023a32:	f7dc fd9f 	bl	8000574 <__aeabi_i2d>
 8023a36:	4602      	mov	r2, r0
 8023a38:	460b      	mov	r3, r1
 8023a3a:	ec43 2b18 	vmov	d8, r2, r3
 8023a3e:	4b46      	ldr	r3, [pc, #280]	; (8023b58 <__kernel_rem_pio2+0x338>)
 8023a40:	2200      	movs	r2, #0
 8023a42:	f7dc fe01 	bl	8000648 <__aeabi_dmul>
 8023a46:	4602      	mov	r2, r0
 8023a48:	460b      	mov	r3, r1
 8023a4a:	4630      	mov	r0, r6
 8023a4c:	4639      	mov	r1, r7
 8023a4e:	f7dc fc43 	bl	80002d8 <__aeabi_dsub>
 8023a52:	f7dd f8a9 	bl	8000ba8 <__aeabi_d2iz>
 8023a56:	e9d5 2300 	ldrd	r2, r3, [r5]
 8023a5a:	f84b 0b04 	str.w	r0, [fp], #4
 8023a5e:	ec51 0b18 	vmov	r0, r1, d8
 8023a62:	f7dc fc3b 	bl	80002dc <__adddf3>
 8023a66:	f109 39ff 	add.w	r9, r9, #4294967295
 8023a6a:	4606      	mov	r6, r0
 8023a6c:	460f      	mov	r7, r1
 8023a6e:	e75b      	b.n	8023928 <__kernel_rem_pio2+0x108>
 8023a70:	d106      	bne.n	8023a80 <__kernel_rem_pio2+0x260>
 8023a72:	1e63      	subs	r3, r4, #1
 8023a74:	aa0e      	add	r2, sp, #56	; 0x38
 8023a76:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8023a7a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8023a7e:	e79d      	b.n	80239bc <__kernel_rem_pio2+0x19c>
 8023a80:	4b36      	ldr	r3, [pc, #216]	; (8023b5c <__kernel_rem_pio2+0x33c>)
 8023a82:	2200      	movs	r2, #0
 8023a84:	f7dd f866 	bl	8000b54 <__aeabi_dcmpge>
 8023a88:	2800      	cmp	r0, #0
 8023a8a:	d13d      	bne.n	8023b08 <__kernel_rem_pio2+0x2e8>
 8023a8c:	4683      	mov	fp, r0
 8023a8e:	2200      	movs	r2, #0
 8023a90:	2300      	movs	r3, #0
 8023a92:	4630      	mov	r0, r6
 8023a94:	4639      	mov	r1, r7
 8023a96:	f7dd f83f 	bl	8000b18 <__aeabi_dcmpeq>
 8023a9a:	2800      	cmp	r0, #0
 8023a9c:	f000 80c0 	beq.w	8023c20 <__kernel_rem_pio2+0x400>
 8023aa0:	1e65      	subs	r5, r4, #1
 8023aa2:	462b      	mov	r3, r5
 8023aa4:	2200      	movs	r2, #0
 8023aa6:	9902      	ldr	r1, [sp, #8]
 8023aa8:	428b      	cmp	r3, r1
 8023aaa:	da6c      	bge.n	8023b86 <__kernel_rem_pio2+0x366>
 8023aac:	2a00      	cmp	r2, #0
 8023aae:	f000 8089 	beq.w	8023bc4 <__kernel_rem_pio2+0x3a4>
 8023ab2:	ab0e      	add	r3, sp, #56	; 0x38
 8023ab4:	f1aa 0a18 	sub.w	sl, sl, #24
 8023ab8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8023abc:	2b00      	cmp	r3, #0
 8023abe:	f000 80ad 	beq.w	8023c1c <__kernel_rem_pio2+0x3fc>
 8023ac2:	4650      	mov	r0, sl
 8023ac4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8023b40 <__kernel_rem_pio2+0x320>
 8023ac8:	f000 fb7e 	bl	80241c8 <scalbn>
 8023acc:	ab9a      	add	r3, sp, #616	; 0x268
 8023ace:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8023ad2:	ec57 6b10 	vmov	r6, r7, d0
 8023ad6:	00ec      	lsls	r4, r5, #3
 8023ad8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8023adc:	46aa      	mov	sl, r5
 8023ade:	f1ba 0f00 	cmp.w	sl, #0
 8023ae2:	f280 80d6 	bge.w	8023c92 <__kernel_rem_pio2+0x472>
 8023ae6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8023b38 <__kernel_rem_pio2+0x318>
 8023aea:	462e      	mov	r6, r5
 8023aec:	2e00      	cmp	r6, #0
 8023aee:	f2c0 8104 	blt.w	8023cfa <__kernel_rem_pio2+0x4da>
 8023af2:	ab72      	add	r3, sp, #456	; 0x1c8
 8023af4:	ed8d 8b06 	vstr	d8, [sp, #24]
 8023af8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8023b60 <__kernel_rem_pio2+0x340>
 8023afc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8023b00:	f04f 0800 	mov.w	r8, #0
 8023b04:	1baf      	subs	r7, r5, r6
 8023b06:	e0ea      	b.n	8023cde <__kernel_rem_pio2+0x4be>
 8023b08:	f04f 0b02 	mov.w	fp, #2
 8023b0c:	e759      	b.n	80239c2 <__kernel_rem_pio2+0x1a2>
 8023b0e:	f8d8 3000 	ldr.w	r3, [r8]
 8023b12:	b955      	cbnz	r5, 8023b2a <__kernel_rem_pio2+0x30a>
 8023b14:	b123      	cbz	r3, 8023b20 <__kernel_rem_pio2+0x300>
 8023b16:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8023b1a:	f8c8 3000 	str.w	r3, [r8]
 8023b1e:	2301      	movs	r3, #1
 8023b20:	3201      	adds	r2, #1
 8023b22:	f108 0804 	add.w	r8, r8, #4
 8023b26:	461d      	mov	r5, r3
 8023b28:	e752      	b.n	80239d0 <__kernel_rem_pio2+0x1b0>
 8023b2a:	1acb      	subs	r3, r1, r3
 8023b2c:	f8c8 3000 	str.w	r3, [r8]
 8023b30:	462b      	mov	r3, r5
 8023b32:	e7f5      	b.n	8023b20 <__kernel_rem_pio2+0x300>
 8023b34:	f3af 8000 	nop.w
	...
 8023b44:	3ff00000 	.word	0x3ff00000
 8023b48:	08024be0 	.word	0x08024be0
 8023b4c:	40200000 	.word	0x40200000
 8023b50:	3ff00000 	.word	0x3ff00000
 8023b54:	3e700000 	.word	0x3e700000
 8023b58:	41700000 	.word	0x41700000
 8023b5c:	3fe00000 	.word	0x3fe00000
 8023b60:	08024ba0 	.word	0x08024ba0
 8023b64:	1e62      	subs	r2, r4, #1
 8023b66:	ab0e      	add	r3, sp, #56	; 0x38
 8023b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023b6c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8023b70:	a90e      	add	r1, sp, #56	; 0x38
 8023b72:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8023b76:	e739      	b.n	80239ec <__kernel_rem_pio2+0x1cc>
 8023b78:	1e62      	subs	r2, r4, #1
 8023b7a:	ab0e      	add	r3, sp, #56	; 0x38
 8023b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023b80:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8023b84:	e7f4      	b.n	8023b70 <__kernel_rem_pio2+0x350>
 8023b86:	a90e      	add	r1, sp, #56	; 0x38
 8023b88:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8023b8c:	3b01      	subs	r3, #1
 8023b8e:	430a      	orrs	r2, r1
 8023b90:	e789      	b.n	8023aa6 <__kernel_rem_pio2+0x286>
 8023b92:	3301      	adds	r3, #1
 8023b94:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8023b98:	2900      	cmp	r1, #0
 8023b9a:	d0fa      	beq.n	8023b92 <__kernel_rem_pio2+0x372>
 8023b9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023b9e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8023ba2:	446a      	add	r2, sp
 8023ba4:	3a98      	subs	r2, #152	; 0x98
 8023ba6:	920a      	str	r2, [sp, #40]	; 0x28
 8023ba8:	9a08      	ldr	r2, [sp, #32]
 8023baa:	18e3      	adds	r3, r4, r3
 8023bac:	18a5      	adds	r5, r4, r2
 8023bae:	aa22      	add	r2, sp, #136	; 0x88
 8023bb0:	f104 0801 	add.w	r8, r4, #1
 8023bb4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8023bb8:	9304      	str	r3, [sp, #16]
 8023bba:	9b04      	ldr	r3, [sp, #16]
 8023bbc:	4543      	cmp	r3, r8
 8023bbe:	da04      	bge.n	8023bca <__kernel_rem_pio2+0x3aa>
 8023bc0:	461c      	mov	r4, r3
 8023bc2:	e6a3      	b.n	802390c <__kernel_rem_pio2+0xec>
 8023bc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023bc6:	2301      	movs	r3, #1
 8023bc8:	e7e4      	b.n	8023b94 <__kernel_rem_pio2+0x374>
 8023bca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023bcc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8023bd0:	f7dc fcd0 	bl	8000574 <__aeabi_i2d>
 8023bd4:	e8e5 0102 	strd	r0, r1, [r5], #8
 8023bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023bda:	46ab      	mov	fp, r5
 8023bdc:	461c      	mov	r4, r3
 8023bde:	f04f 0900 	mov.w	r9, #0
 8023be2:	2600      	movs	r6, #0
 8023be4:	2700      	movs	r7, #0
 8023be6:	9b06      	ldr	r3, [sp, #24]
 8023be8:	4599      	cmp	r9, r3
 8023bea:	dd06      	ble.n	8023bfa <__kernel_rem_pio2+0x3da>
 8023bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023bee:	e8e3 6702 	strd	r6, r7, [r3], #8
 8023bf2:	f108 0801 	add.w	r8, r8, #1
 8023bf6:	930a      	str	r3, [sp, #40]	; 0x28
 8023bf8:	e7df      	b.n	8023bba <__kernel_rem_pio2+0x39a>
 8023bfa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8023bfe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8023c02:	f7dc fd21 	bl	8000648 <__aeabi_dmul>
 8023c06:	4602      	mov	r2, r0
 8023c08:	460b      	mov	r3, r1
 8023c0a:	4630      	mov	r0, r6
 8023c0c:	4639      	mov	r1, r7
 8023c0e:	f7dc fb65 	bl	80002dc <__adddf3>
 8023c12:	f109 0901 	add.w	r9, r9, #1
 8023c16:	4606      	mov	r6, r0
 8023c18:	460f      	mov	r7, r1
 8023c1a:	e7e4      	b.n	8023be6 <__kernel_rem_pio2+0x3c6>
 8023c1c:	3d01      	subs	r5, #1
 8023c1e:	e748      	b.n	8023ab2 <__kernel_rem_pio2+0x292>
 8023c20:	ec47 6b10 	vmov	d0, r6, r7
 8023c24:	f1ca 0000 	rsb	r0, sl, #0
 8023c28:	f000 face 	bl	80241c8 <scalbn>
 8023c2c:	ec57 6b10 	vmov	r6, r7, d0
 8023c30:	4ba0      	ldr	r3, [pc, #640]	; (8023eb4 <__kernel_rem_pio2+0x694>)
 8023c32:	ee10 0a10 	vmov	r0, s0
 8023c36:	2200      	movs	r2, #0
 8023c38:	4639      	mov	r1, r7
 8023c3a:	f7dc ff8b 	bl	8000b54 <__aeabi_dcmpge>
 8023c3e:	b1f8      	cbz	r0, 8023c80 <__kernel_rem_pio2+0x460>
 8023c40:	4b9d      	ldr	r3, [pc, #628]	; (8023eb8 <__kernel_rem_pio2+0x698>)
 8023c42:	2200      	movs	r2, #0
 8023c44:	4630      	mov	r0, r6
 8023c46:	4639      	mov	r1, r7
 8023c48:	f7dc fcfe 	bl	8000648 <__aeabi_dmul>
 8023c4c:	f7dc ffac 	bl	8000ba8 <__aeabi_d2iz>
 8023c50:	4680      	mov	r8, r0
 8023c52:	f7dc fc8f 	bl	8000574 <__aeabi_i2d>
 8023c56:	4b97      	ldr	r3, [pc, #604]	; (8023eb4 <__kernel_rem_pio2+0x694>)
 8023c58:	2200      	movs	r2, #0
 8023c5a:	f7dc fcf5 	bl	8000648 <__aeabi_dmul>
 8023c5e:	460b      	mov	r3, r1
 8023c60:	4602      	mov	r2, r0
 8023c62:	4639      	mov	r1, r7
 8023c64:	4630      	mov	r0, r6
 8023c66:	f7dc fb37 	bl	80002d8 <__aeabi_dsub>
 8023c6a:	f7dc ff9d 	bl	8000ba8 <__aeabi_d2iz>
 8023c6e:	1c65      	adds	r5, r4, #1
 8023c70:	ab0e      	add	r3, sp, #56	; 0x38
 8023c72:	f10a 0a18 	add.w	sl, sl, #24
 8023c76:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8023c7a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8023c7e:	e720      	b.n	8023ac2 <__kernel_rem_pio2+0x2a2>
 8023c80:	4630      	mov	r0, r6
 8023c82:	4639      	mov	r1, r7
 8023c84:	f7dc ff90 	bl	8000ba8 <__aeabi_d2iz>
 8023c88:	ab0e      	add	r3, sp, #56	; 0x38
 8023c8a:	4625      	mov	r5, r4
 8023c8c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8023c90:	e717      	b.n	8023ac2 <__kernel_rem_pio2+0x2a2>
 8023c92:	ab0e      	add	r3, sp, #56	; 0x38
 8023c94:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8023c98:	f7dc fc6c 	bl	8000574 <__aeabi_i2d>
 8023c9c:	4632      	mov	r2, r6
 8023c9e:	463b      	mov	r3, r7
 8023ca0:	f7dc fcd2 	bl	8000648 <__aeabi_dmul>
 8023ca4:	4b84      	ldr	r3, [pc, #528]	; (8023eb8 <__kernel_rem_pio2+0x698>)
 8023ca6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8023caa:	2200      	movs	r2, #0
 8023cac:	4630      	mov	r0, r6
 8023cae:	4639      	mov	r1, r7
 8023cb0:	f7dc fcca 	bl	8000648 <__aeabi_dmul>
 8023cb4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023cb8:	4606      	mov	r6, r0
 8023cba:	460f      	mov	r7, r1
 8023cbc:	e70f      	b.n	8023ade <__kernel_rem_pio2+0x2be>
 8023cbe:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8023cc2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8023cc6:	f7dc fcbf 	bl	8000648 <__aeabi_dmul>
 8023cca:	4602      	mov	r2, r0
 8023ccc:	460b      	mov	r3, r1
 8023cce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023cd2:	f7dc fb03 	bl	80002dc <__adddf3>
 8023cd6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8023cda:	f108 0801 	add.w	r8, r8, #1
 8023cde:	9b02      	ldr	r3, [sp, #8]
 8023ce0:	4598      	cmp	r8, r3
 8023ce2:	dc01      	bgt.n	8023ce8 <__kernel_rem_pio2+0x4c8>
 8023ce4:	45b8      	cmp	r8, r7
 8023ce6:	ddea      	ble.n	8023cbe <__kernel_rem_pio2+0x49e>
 8023ce8:	ed9d 7b06 	vldr	d7, [sp, #24]
 8023cec:	ab4a      	add	r3, sp, #296	; 0x128
 8023cee:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8023cf2:	ed87 7b00 	vstr	d7, [r7]
 8023cf6:	3e01      	subs	r6, #1
 8023cf8:	e6f8      	b.n	8023aec <__kernel_rem_pio2+0x2cc>
 8023cfa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8023cfc:	2b02      	cmp	r3, #2
 8023cfe:	dc0b      	bgt.n	8023d18 <__kernel_rem_pio2+0x4f8>
 8023d00:	2b00      	cmp	r3, #0
 8023d02:	dc35      	bgt.n	8023d70 <__kernel_rem_pio2+0x550>
 8023d04:	d059      	beq.n	8023dba <__kernel_rem_pio2+0x59a>
 8023d06:	9b04      	ldr	r3, [sp, #16]
 8023d08:	f003 0007 	and.w	r0, r3, #7
 8023d0c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8023d10:	ecbd 8b02 	vpop	{d8}
 8023d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d18:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8023d1a:	2b03      	cmp	r3, #3
 8023d1c:	d1f3      	bne.n	8023d06 <__kernel_rem_pio2+0x4e6>
 8023d1e:	ab4a      	add	r3, sp, #296	; 0x128
 8023d20:	4423      	add	r3, r4
 8023d22:	9306      	str	r3, [sp, #24]
 8023d24:	461c      	mov	r4, r3
 8023d26:	469a      	mov	sl, r3
 8023d28:	9502      	str	r5, [sp, #8]
 8023d2a:	9b02      	ldr	r3, [sp, #8]
 8023d2c:	2b00      	cmp	r3, #0
 8023d2e:	f1aa 0a08 	sub.w	sl, sl, #8
 8023d32:	dc6b      	bgt.n	8023e0c <__kernel_rem_pio2+0x5ec>
 8023d34:	46aa      	mov	sl, r5
 8023d36:	f1ba 0f01 	cmp.w	sl, #1
 8023d3a:	f1a4 0408 	sub.w	r4, r4, #8
 8023d3e:	f300 8085 	bgt.w	8023e4c <__kernel_rem_pio2+0x62c>
 8023d42:	9c06      	ldr	r4, [sp, #24]
 8023d44:	2000      	movs	r0, #0
 8023d46:	3408      	adds	r4, #8
 8023d48:	2100      	movs	r1, #0
 8023d4a:	2d01      	cmp	r5, #1
 8023d4c:	f300 809d 	bgt.w	8023e8a <__kernel_rem_pio2+0x66a>
 8023d50:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8023d54:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8023d58:	f1bb 0f00 	cmp.w	fp, #0
 8023d5c:	f040 809b 	bne.w	8023e96 <__kernel_rem_pio2+0x676>
 8023d60:	9b01      	ldr	r3, [sp, #4]
 8023d62:	e9c3 5600 	strd	r5, r6, [r3]
 8023d66:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8023d6a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8023d6e:	e7ca      	b.n	8023d06 <__kernel_rem_pio2+0x4e6>
 8023d70:	3408      	adds	r4, #8
 8023d72:	ab4a      	add	r3, sp, #296	; 0x128
 8023d74:	441c      	add	r4, r3
 8023d76:	462e      	mov	r6, r5
 8023d78:	2000      	movs	r0, #0
 8023d7a:	2100      	movs	r1, #0
 8023d7c:	2e00      	cmp	r6, #0
 8023d7e:	da36      	bge.n	8023dee <__kernel_rem_pio2+0x5ce>
 8023d80:	f1bb 0f00 	cmp.w	fp, #0
 8023d84:	d039      	beq.n	8023dfa <__kernel_rem_pio2+0x5da>
 8023d86:	4602      	mov	r2, r0
 8023d88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023d8c:	9c01      	ldr	r4, [sp, #4]
 8023d8e:	e9c4 2300 	strd	r2, r3, [r4]
 8023d92:	4602      	mov	r2, r0
 8023d94:	460b      	mov	r3, r1
 8023d96:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8023d9a:	f7dc fa9d 	bl	80002d8 <__aeabi_dsub>
 8023d9e:	ae4c      	add	r6, sp, #304	; 0x130
 8023da0:	2401      	movs	r4, #1
 8023da2:	42a5      	cmp	r5, r4
 8023da4:	da2c      	bge.n	8023e00 <__kernel_rem_pio2+0x5e0>
 8023da6:	f1bb 0f00 	cmp.w	fp, #0
 8023daa:	d002      	beq.n	8023db2 <__kernel_rem_pio2+0x592>
 8023dac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023db0:	4619      	mov	r1, r3
 8023db2:	9b01      	ldr	r3, [sp, #4]
 8023db4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8023db8:	e7a5      	b.n	8023d06 <__kernel_rem_pio2+0x4e6>
 8023dba:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8023dbe:	eb0d 0403 	add.w	r4, sp, r3
 8023dc2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8023dc6:	2000      	movs	r0, #0
 8023dc8:	2100      	movs	r1, #0
 8023dca:	2d00      	cmp	r5, #0
 8023dcc:	da09      	bge.n	8023de2 <__kernel_rem_pio2+0x5c2>
 8023dce:	f1bb 0f00 	cmp.w	fp, #0
 8023dd2:	d002      	beq.n	8023dda <__kernel_rem_pio2+0x5ba>
 8023dd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023dd8:	4619      	mov	r1, r3
 8023dda:	9b01      	ldr	r3, [sp, #4]
 8023ddc:	e9c3 0100 	strd	r0, r1, [r3]
 8023de0:	e791      	b.n	8023d06 <__kernel_rem_pio2+0x4e6>
 8023de2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8023de6:	f7dc fa79 	bl	80002dc <__adddf3>
 8023dea:	3d01      	subs	r5, #1
 8023dec:	e7ed      	b.n	8023dca <__kernel_rem_pio2+0x5aa>
 8023dee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8023df2:	f7dc fa73 	bl	80002dc <__adddf3>
 8023df6:	3e01      	subs	r6, #1
 8023df8:	e7c0      	b.n	8023d7c <__kernel_rem_pio2+0x55c>
 8023dfa:	4602      	mov	r2, r0
 8023dfc:	460b      	mov	r3, r1
 8023dfe:	e7c5      	b.n	8023d8c <__kernel_rem_pio2+0x56c>
 8023e00:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8023e04:	f7dc fa6a 	bl	80002dc <__adddf3>
 8023e08:	3401      	adds	r4, #1
 8023e0a:	e7ca      	b.n	8023da2 <__kernel_rem_pio2+0x582>
 8023e0c:	e9da 8900 	ldrd	r8, r9, [sl]
 8023e10:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8023e14:	9b02      	ldr	r3, [sp, #8]
 8023e16:	3b01      	subs	r3, #1
 8023e18:	9302      	str	r3, [sp, #8]
 8023e1a:	4632      	mov	r2, r6
 8023e1c:	463b      	mov	r3, r7
 8023e1e:	4640      	mov	r0, r8
 8023e20:	4649      	mov	r1, r9
 8023e22:	f7dc fa5b 	bl	80002dc <__adddf3>
 8023e26:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8023e2a:	4602      	mov	r2, r0
 8023e2c:	460b      	mov	r3, r1
 8023e2e:	4640      	mov	r0, r8
 8023e30:	4649      	mov	r1, r9
 8023e32:	f7dc fa51 	bl	80002d8 <__aeabi_dsub>
 8023e36:	4632      	mov	r2, r6
 8023e38:	463b      	mov	r3, r7
 8023e3a:	f7dc fa4f 	bl	80002dc <__adddf3>
 8023e3e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8023e42:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023e46:	ed8a 7b00 	vstr	d7, [sl]
 8023e4a:	e76e      	b.n	8023d2a <__kernel_rem_pio2+0x50a>
 8023e4c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8023e50:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8023e54:	4640      	mov	r0, r8
 8023e56:	4632      	mov	r2, r6
 8023e58:	463b      	mov	r3, r7
 8023e5a:	4649      	mov	r1, r9
 8023e5c:	f7dc fa3e 	bl	80002dc <__adddf3>
 8023e60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023e64:	4602      	mov	r2, r0
 8023e66:	460b      	mov	r3, r1
 8023e68:	4640      	mov	r0, r8
 8023e6a:	4649      	mov	r1, r9
 8023e6c:	f7dc fa34 	bl	80002d8 <__aeabi_dsub>
 8023e70:	4632      	mov	r2, r6
 8023e72:	463b      	mov	r3, r7
 8023e74:	f7dc fa32 	bl	80002dc <__adddf3>
 8023e78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023e7c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8023e80:	ed84 7b00 	vstr	d7, [r4]
 8023e84:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023e88:	e755      	b.n	8023d36 <__kernel_rem_pio2+0x516>
 8023e8a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8023e8e:	f7dc fa25 	bl	80002dc <__adddf3>
 8023e92:	3d01      	subs	r5, #1
 8023e94:	e759      	b.n	8023d4a <__kernel_rem_pio2+0x52a>
 8023e96:	9b01      	ldr	r3, [sp, #4]
 8023e98:	9a01      	ldr	r2, [sp, #4]
 8023e9a:	601d      	str	r5, [r3, #0]
 8023e9c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8023ea0:	605c      	str	r4, [r3, #4]
 8023ea2:	609f      	str	r7, [r3, #8]
 8023ea4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8023ea8:	60d3      	str	r3, [r2, #12]
 8023eaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023eae:	6110      	str	r0, [r2, #16]
 8023eb0:	6153      	str	r3, [r2, #20]
 8023eb2:	e728      	b.n	8023d06 <__kernel_rem_pio2+0x4e6>
 8023eb4:	41700000 	.word	0x41700000
 8023eb8:	3e700000 	.word	0x3e700000
 8023ebc:	00000000 	.word	0x00000000

08023ec0 <__kernel_sin>:
 8023ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ec4:	ed2d 8b04 	vpush	{d8-d9}
 8023ec8:	eeb0 8a41 	vmov.f32	s16, s2
 8023ecc:	eef0 8a61 	vmov.f32	s17, s3
 8023ed0:	ec55 4b10 	vmov	r4, r5, d0
 8023ed4:	b083      	sub	sp, #12
 8023ed6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8023eda:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8023ede:	9001      	str	r0, [sp, #4]
 8023ee0:	da06      	bge.n	8023ef0 <__kernel_sin+0x30>
 8023ee2:	ee10 0a10 	vmov	r0, s0
 8023ee6:	4629      	mov	r1, r5
 8023ee8:	f7dc fe5e 	bl	8000ba8 <__aeabi_d2iz>
 8023eec:	2800      	cmp	r0, #0
 8023eee:	d051      	beq.n	8023f94 <__kernel_sin+0xd4>
 8023ef0:	4622      	mov	r2, r4
 8023ef2:	462b      	mov	r3, r5
 8023ef4:	4620      	mov	r0, r4
 8023ef6:	4629      	mov	r1, r5
 8023ef8:	f7dc fba6 	bl	8000648 <__aeabi_dmul>
 8023efc:	4682      	mov	sl, r0
 8023efe:	468b      	mov	fp, r1
 8023f00:	4602      	mov	r2, r0
 8023f02:	460b      	mov	r3, r1
 8023f04:	4620      	mov	r0, r4
 8023f06:	4629      	mov	r1, r5
 8023f08:	f7dc fb9e 	bl	8000648 <__aeabi_dmul>
 8023f0c:	a341      	add	r3, pc, #260	; (adr r3, 8024014 <__kernel_sin+0x154>)
 8023f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f12:	4680      	mov	r8, r0
 8023f14:	4689      	mov	r9, r1
 8023f16:	4650      	mov	r0, sl
 8023f18:	4659      	mov	r1, fp
 8023f1a:	f7dc fb95 	bl	8000648 <__aeabi_dmul>
 8023f1e:	a33f      	add	r3, pc, #252	; (adr r3, 802401c <__kernel_sin+0x15c>)
 8023f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f24:	f7dc f9d8 	bl	80002d8 <__aeabi_dsub>
 8023f28:	4652      	mov	r2, sl
 8023f2a:	465b      	mov	r3, fp
 8023f2c:	f7dc fb8c 	bl	8000648 <__aeabi_dmul>
 8023f30:	a33c      	add	r3, pc, #240	; (adr r3, 8024024 <__kernel_sin+0x164>)
 8023f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f36:	f7dc f9d1 	bl	80002dc <__adddf3>
 8023f3a:	4652      	mov	r2, sl
 8023f3c:	465b      	mov	r3, fp
 8023f3e:	f7dc fb83 	bl	8000648 <__aeabi_dmul>
 8023f42:	a33a      	add	r3, pc, #232	; (adr r3, 802402c <__kernel_sin+0x16c>)
 8023f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f48:	f7dc f9c6 	bl	80002d8 <__aeabi_dsub>
 8023f4c:	4652      	mov	r2, sl
 8023f4e:	465b      	mov	r3, fp
 8023f50:	f7dc fb7a 	bl	8000648 <__aeabi_dmul>
 8023f54:	a337      	add	r3, pc, #220	; (adr r3, 8024034 <__kernel_sin+0x174>)
 8023f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f5a:	f7dc f9bf 	bl	80002dc <__adddf3>
 8023f5e:	9b01      	ldr	r3, [sp, #4]
 8023f60:	4606      	mov	r6, r0
 8023f62:	460f      	mov	r7, r1
 8023f64:	b9eb      	cbnz	r3, 8023fa2 <__kernel_sin+0xe2>
 8023f66:	4602      	mov	r2, r0
 8023f68:	460b      	mov	r3, r1
 8023f6a:	4650      	mov	r0, sl
 8023f6c:	4659      	mov	r1, fp
 8023f6e:	f7dc fb6b 	bl	8000648 <__aeabi_dmul>
 8023f72:	a325      	add	r3, pc, #148	; (adr r3, 8024008 <__kernel_sin+0x148>)
 8023f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f78:	f7dc f9ae 	bl	80002d8 <__aeabi_dsub>
 8023f7c:	4642      	mov	r2, r8
 8023f7e:	464b      	mov	r3, r9
 8023f80:	f7dc fb62 	bl	8000648 <__aeabi_dmul>
 8023f84:	4602      	mov	r2, r0
 8023f86:	460b      	mov	r3, r1
 8023f88:	4620      	mov	r0, r4
 8023f8a:	4629      	mov	r1, r5
 8023f8c:	f7dc f9a6 	bl	80002dc <__adddf3>
 8023f90:	4604      	mov	r4, r0
 8023f92:	460d      	mov	r5, r1
 8023f94:	ec45 4b10 	vmov	d0, r4, r5
 8023f98:	b003      	add	sp, #12
 8023f9a:	ecbd 8b04 	vpop	{d8-d9}
 8023f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023fa2:	4b1b      	ldr	r3, [pc, #108]	; (8024010 <__kernel_sin+0x150>)
 8023fa4:	ec51 0b18 	vmov	r0, r1, d8
 8023fa8:	2200      	movs	r2, #0
 8023faa:	f7dc fb4d 	bl	8000648 <__aeabi_dmul>
 8023fae:	4632      	mov	r2, r6
 8023fb0:	ec41 0b19 	vmov	d9, r0, r1
 8023fb4:	463b      	mov	r3, r7
 8023fb6:	4640      	mov	r0, r8
 8023fb8:	4649      	mov	r1, r9
 8023fba:	f7dc fb45 	bl	8000648 <__aeabi_dmul>
 8023fbe:	4602      	mov	r2, r0
 8023fc0:	460b      	mov	r3, r1
 8023fc2:	ec51 0b19 	vmov	r0, r1, d9
 8023fc6:	f7dc f987 	bl	80002d8 <__aeabi_dsub>
 8023fca:	4652      	mov	r2, sl
 8023fcc:	465b      	mov	r3, fp
 8023fce:	f7dc fb3b 	bl	8000648 <__aeabi_dmul>
 8023fd2:	ec53 2b18 	vmov	r2, r3, d8
 8023fd6:	f7dc f97f 	bl	80002d8 <__aeabi_dsub>
 8023fda:	a30b      	add	r3, pc, #44	; (adr r3, 8024008 <__kernel_sin+0x148>)
 8023fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fe0:	4606      	mov	r6, r0
 8023fe2:	460f      	mov	r7, r1
 8023fe4:	4640      	mov	r0, r8
 8023fe6:	4649      	mov	r1, r9
 8023fe8:	f7dc fb2e 	bl	8000648 <__aeabi_dmul>
 8023fec:	4602      	mov	r2, r0
 8023fee:	460b      	mov	r3, r1
 8023ff0:	4630      	mov	r0, r6
 8023ff2:	4639      	mov	r1, r7
 8023ff4:	f7dc f972 	bl	80002dc <__adddf3>
 8023ff8:	4602      	mov	r2, r0
 8023ffa:	460b      	mov	r3, r1
 8023ffc:	4620      	mov	r0, r4
 8023ffe:	4629      	mov	r1, r5
 8024000:	f7dc f96a 	bl	80002d8 <__aeabi_dsub>
 8024004:	e7c4      	b.n	8023f90 <__kernel_sin+0xd0>
 8024006:	bf00      	nop
 8024008:	55555549 	.word	0x55555549
 802400c:	3fc55555 	.word	0x3fc55555
 8024010:	3fe00000 	.word	0x3fe00000
 8024014:	5acfd57c 	.word	0x5acfd57c
 8024018:	3de5d93a 	.word	0x3de5d93a
 802401c:	8a2b9ceb 	.word	0x8a2b9ceb
 8024020:	3e5ae5e6 	.word	0x3e5ae5e6
 8024024:	57b1fe7d 	.word	0x57b1fe7d
 8024028:	3ec71de3 	.word	0x3ec71de3
 802402c:	19c161d5 	.word	0x19c161d5
 8024030:	3f2a01a0 	.word	0x3f2a01a0
 8024034:	1110f8a6 	.word	0x1110f8a6
 8024038:	3f811111 	.word	0x3f811111

0802403c <with_errno>:
 802403c:	b570      	push	{r4, r5, r6, lr}
 802403e:	4604      	mov	r4, r0
 8024040:	460d      	mov	r5, r1
 8024042:	4616      	mov	r6, r2
 8024044:	f7fb ffea 	bl	802001c <__errno>
 8024048:	4629      	mov	r1, r5
 802404a:	6006      	str	r6, [r0, #0]
 802404c:	4620      	mov	r0, r4
 802404e:	bd70      	pop	{r4, r5, r6, pc}

08024050 <xflow>:
 8024050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024052:	4614      	mov	r4, r2
 8024054:	461d      	mov	r5, r3
 8024056:	b108      	cbz	r0, 802405c <xflow+0xc>
 8024058:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802405c:	e9cd 2300 	strd	r2, r3, [sp]
 8024060:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024064:	4620      	mov	r0, r4
 8024066:	4629      	mov	r1, r5
 8024068:	f7dc faee 	bl	8000648 <__aeabi_dmul>
 802406c:	2222      	movs	r2, #34	; 0x22
 802406e:	b003      	add	sp, #12
 8024070:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024074:	f7ff bfe2 	b.w	802403c <with_errno>

08024078 <__math_uflow>:
 8024078:	b508      	push	{r3, lr}
 802407a:	2200      	movs	r2, #0
 802407c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8024080:	f7ff ffe6 	bl	8024050 <xflow>
 8024084:	ec41 0b10 	vmov	d0, r0, r1
 8024088:	bd08      	pop	{r3, pc}

0802408a <__math_oflow>:
 802408a:	b508      	push	{r3, lr}
 802408c:	2200      	movs	r2, #0
 802408e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8024092:	f7ff ffdd 	bl	8024050 <xflow>
 8024096:	ec41 0b10 	vmov	d0, r0, r1
 802409a:	bd08      	pop	{r3, pc}

0802409c <fabs>:
 802409c:	ec51 0b10 	vmov	r0, r1, d0
 80240a0:	ee10 2a10 	vmov	r2, s0
 80240a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80240a8:	ec43 2b10 	vmov	d0, r2, r3
 80240ac:	4770      	bx	lr

080240ae <finite>:
 80240ae:	b082      	sub	sp, #8
 80240b0:	ed8d 0b00 	vstr	d0, [sp]
 80240b4:	9801      	ldr	r0, [sp, #4]
 80240b6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80240ba:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80240be:	0fc0      	lsrs	r0, r0, #31
 80240c0:	b002      	add	sp, #8
 80240c2:	4770      	bx	lr
 80240c4:	0000      	movs	r0, r0
	...

080240c8 <floor>:
 80240c8:	ec51 0b10 	vmov	r0, r1, d0
 80240cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80240d0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80240d4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80240d8:	2e13      	cmp	r6, #19
 80240da:	ee10 5a10 	vmov	r5, s0
 80240de:	ee10 8a10 	vmov	r8, s0
 80240e2:	460c      	mov	r4, r1
 80240e4:	dc32      	bgt.n	802414c <floor+0x84>
 80240e6:	2e00      	cmp	r6, #0
 80240e8:	da14      	bge.n	8024114 <floor+0x4c>
 80240ea:	a333      	add	r3, pc, #204	; (adr r3, 80241b8 <floor+0xf0>)
 80240ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80240f0:	f7dc f8f4 	bl	80002dc <__adddf3>
 80240f4:	2200      	movs	r2, #0
 80240f6:	2300      	movs	r3, #0
 80240f8:	f7dc fd36 	bl	8000b68 <__aeabi_dcmpgt>
 80240fc:	b138      	cbz	r0, 802410e <floor+0x46>
 80240fe:	2c00      	cmp	r4, #0
 8024100:	da57      	bge.n	80241b2 <floor+0xea>
 8024102:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8024106:	431d      	orrs	r5, r3
 8024108:	d001      	beq.n	802410e <floor+0x46>
 802410a:	4c2d      	ldr	r4, [pc, #180]	; (80241c0 <floor+0xf8>)
 802410c:	2500      	movs	r5, #0
 802410e:	4621      	mov	r1, r4
 8024110:	4628      	mov	r0, r5
 8024112:	e025      	b.n	8024160 <floor+0x98>
 8024114:	4f2b      	ldr	r7, [pc, #172]	; (80241c4 <floor+0xfc>)
 8024116:	4137      	asrs	r7, r6
 8024118:	ea01 0307 	and.w	r3, r1, r7
 802411c:	4303      	orrs	r3, r0
 802411e:	d01f      	beq.n	8024160 <floor+0x98>
 8024120:	a325      	add	r3, pc, #148	; (adr r3, 80241b8 <floor+0xf0>)
 8024122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024126:	f7dc f8d9 	bl	80002dc <__adddf3>
 802412a:	2200      	movs	r2, #0
 802412c:	2300      	movs	r3, #0
 802412e:	f7dc fd1b 	bl	8000b68 <__aeabi_dcmpgt>
 8024132:	2800      	cmp	r0, #0
 8024134:	d0eb      	beq.n	802410e <floor+0x46>
 8024136:	2c00      	cmp	r4, #0
 8024138:	bfbe      	ittt	lt
 802413a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 802413e:	fa43 f606 	asrlt.w	r6, r3, r6
 8024142:	19a4      	addlt	r4, r4, r6
 8024144:	ea24 0407 	bic.w	r4, r4, r7
 8024148:	2500      	movs	r5, #0
 802414a:	e7e0      	b.n	802410e <floor+0x46>
 802414c:	2e33      	cmp	r6, #51	; 0x33
 802414e:	dd0b      	ble.n	8024168 <floor+0xa0>
 8024150:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8024154:	d104      	bne.n	8024160 <floor+0x98>
 8024156:	ee10 2a10 	vmov	r2, s0
 802415a:	460b      	mov	r3, r1
 802415c:	f7dc f8be 	bl	80002dc <__adddf3>
 8024160:	ec41 0b10 	vmov	d0, r0, r1
 8024164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024168:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 802416c:	f04f 33ff 	mov.w	r3, #4294967295
 8024170:	fa23 f707 	lsr.w	r7, r3, r7
 8024174:	4207      	tst	r7, r0
 8024176:	d0f3      	beq.n	8024160 <floor+0x98>
 8024178:	a30f      	add	r3, pc, #60	; (adr r3, 80241b8 <floor+0xf0>)
 802417a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802417e:	f7dc f8ad 	bl	80002dc <__adddf3>
 8024182:	2200      	movs	r2, #0
 8024184:	2300      	movs	r3, #0
 8024186:	f7dc fcef 	bl	8000b68 <__aeabi_dcmpgt>
 802418a:	2800      	cmp	r0, #0
 802418c:	d0bf      	beq.n	802410e <floor+0x46>
 802418e:	2c00      	cmp	r4, #0
 8024190:	da02      	bge.n	8024198 <floor+0xd0>
 8024192:	2e14      	cmp	r6, #20
 8024194:	d103      	bne.n	802419e <floor+0xd6>
 8024196:	3401      	adds	r4, #1
 8024198:	ea25 0507 	bic.w	r5, r5, r7
 802419c:	e7b7      	b.n	802410e <floor+0x46>
 802419e:	2301      	movs	r3, #1
 80241a0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80241a4:	fa03 f606 	lsl.w	r6, r3, r6
 80241a8:	4435      	add	r5, r6
 80241aa:	4545      	cmp	r5, r8
 80241ac:	bf38      	it	cc
 80241ae:	18e4      	addcc	r4, r4, r3
 80241b0:	e7f2      	b.n	8024198 <floor+0xd0>
 80241b2:	2500      	movs	r5, #0
 80241b4:	462c      	mov	r4, r5
 80241b6:	e7aa      	b.n	802410e <floor+0x46>
 80241b8:	8800759c 	.word	0x8800759c
 80241bc:	7e37e43c 	.word	0x7e37e43c
 80241c0:	bff00000 	.word	0xbff00000
 80241c4:	000fffff 	.word	0x000fffff

080241c8 <scalbn>:
 80241c8:	b570      	push	{r4, r5, r6, lr}
 80241ca:	ec55 4b10 	vmov	r4, r5, d0
 80241ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80241d2:	4606      	mov	r6, r0
 80241d4:	462b      	mov	r3, r5
 80241d6:	b99a      	cbnz	r2, 8024200 <scalbn+0x38>
 80241d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80241dc:	4323      	orrs	r3, r4
 80241de:	d036      	beq.n	802424e <scalbn+0x86>
 80241e0:	4b39      	ldr	r3, [pc, #228]	; (80242c8 <scalbn+0x100>)
 80241e2:	4629      	mov	r1, r5
 80241e4:	ee10 0a10 	vmov	r0, s0
 80241e8:	2200      	movs	r2, #0
 80241ea:	f7dc fa2d 	bl	8000648 <__aeabi_dmul>
 80241ee:	4b37      	ldr	r3, [pc, #220]	; (80242cc <scalbn+0x104>)
 80241f0:	429e      	cmp	r6, r3
 80241f2:	4604      	mov	r4, r0
 80241f4:	460d      	mov	r5, r1
 80241f6:	da10      	bge.n	802421a <scalbn+0x52>
 80241f8:	a32b      	add	r3, pc, #172	; (adr r3, 80242a8 <scalbn+0xe0>)
 80241fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80241fe:	e03a      	b.n	8024276 <scalbn+0xae>
 8024200:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8024204:	428a      	cmp	r2, r1
 8024206:	d10c      	bne.n	8024222 <scalbn+0x5a>
 8024208:	ee10 2a10 	vmov	r2, s0
 802420c:	4620      	mov	r0, r4
 802420e:	4629      	mov	r1, r5
 8024210:	f7dc f864 	bl	80002dc <__adddf3>
 8024214:	4604      	mov	r4, r0
 8024216:	460d      	mov	r5, r1
 8024218:	e019      	b.n	802424e <scalbn+0x86>
 802421a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802421e:	460b      	mov	r3, r1
 8024220:	3a36      	subs	r2, #54	; 0x36
 8024222:	4432      	add	r2, r6
 8024224:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8024228:	428a      	cmp	r2, r1
 802422a:	dd08      	ble.n	802423e <scalbn+0x76>
 802422c:	2d00      	cmp	r5, #0
 802422e:	a120      	add	r1, pc, #128	; (adr r1, 80242b0 <scalbn+0xe8>)
 8024230:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024234:	da1c      	bge.n	8024270 <scalbn+0xa8>
 8024236:	a120      	add	r1, pc, #128	; (adr r1, 80242b8 <scalbn+0xf0>)
 8024238:	e9d1 0100 	ldrd	r0, r1, [r1]
 802423c:	e018      	b.n	8024270 <scalbn+0xa8>
 802423e:	2a00      	cmp	r2, #0
 8024240:	dd08      	ble.n	8024254 <scalbn+0x8c>
 8024242:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024246:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802424a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 802424e:	ec45 4b10 	vmov	d0, r4, r5
 8024252:	bd70      	pop	{r4, r5, r6, pc}
 8024254:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8024258:	da19      	bge.n	802428e <scalbn+0xc6>
 802425a:	f24c 3350 	movw	r3, #50000	; 0xc350
 802425e:	429e      	cmp	r6, r3
 8024260:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8024264:	dd0a      	ble.n	802427c <scalbn+0xb4>
 8024266:	a112      	add	r1, pc, #72	; (adr r1, 80242b0 <scalbn+0xe8>)
 8024268:	e9d1 0100 	ldrd	r0, r1, [r1]
 802426c:	2b00      	cmp	r3, #0
 802426e:	d1e2      	bne.n	8024236 <scalbn+0x6e>
 8024270:	a30f      	add	r3, pc, #60	; (adr r3, 80242b0 <scalbn+0xe8>)
 8024272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024276:	f7dc f9e7 	bl	8000648 <__aeabi_dmul>
 802427a:	e7cb      	b.n	8024214 <scalbn+0x4c>
 802427c:	a10a      	add	r1, pc, #40	; (adr r1, 80242a8 <scalbn+0xe0>)
 802427e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024282:	2b00      	cmp	r3, #0
 8024284:	d0b8      	beq.n	80241f8 <scalbn+0x30>
 8024286:	a10e      	add	r1, pc, #56	; (adr r1, 80242c0 <scalbn+0xf8>)
 8024288:	e9d1 0100 	ldrd	r0, r1, [r1]
 802428c:	e7b4      	b.n	80241f8 <scalbn+0x30>
 802428e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024292:	3236      	adds	r2, #54	; 0x36
 8024294:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024298:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 802429c:	4620      	mov	r0, r4
 802429e:	4b0c      	ldr	r3, [pc, #48]	; (80242d0 <scalbn+0x108>)
 80242a0:	2200      	movs	r2, #0
 80242a2:	e7e8      	b.n	8024276 <scalbn+0xae>
 80242a4:	f3af 8000 	nop.w
 80242a8:	c2f8f359 	.word	0xc2f8f359
 80242ac:	01a56e1f 	.word	0x01a56e1f
 80242b0:	8800759c 	.word	0x8800759c
 80242b4:	7e37e43c 	.word	0x7e37e43c
 80242b8:	8800759c 	.word	0x8800759c
 80242bc:	fe37e43c 	.word	0xfe37e43c
 80242c0:	c2f8f359 	.word	0xc2f8f359
 80242c4:	81a56e1f 	.word	0x81a56e1f
 80242c8:	43500000 	.word	0x43500000
 80242cc:	ffff3cb0 	.word	0xffff3cb0
 80242d0:	3c900000 	.word	0x3c900000

080242d4 <_init>:
 80242d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80242d6:	bf00      	nop
 80242d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80242da:	bc08      	pop	{r3}
 80242dc:	469e      	mov	lr, r3
 80242de:	4770      	bx	lr

080242e0 <_fini>:
 80242e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80242e2:	bf00      	nop
 80242e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80242e6:	bc08      	pop	{r3}
 80242e8:	469e      	mov	lr, r3
 80242ea:	4770      	bx	lr
