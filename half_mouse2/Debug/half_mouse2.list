
half_mouse2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002325c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  08023440  08023440  00033440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023b68  08023b68  000401fc  2**0
                  CONTENTS
  4 .ARM          00000008  08023b68  08023b68  00033b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023b70  08023b70  000401fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023b70  08023b70  00033b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023b74  08023b74  00033b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08023b78  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f720  200001fc  08023d74  000401fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000f91c  08023d74  0004f91c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002790c  00000000  00000000  0004022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006017  00000000  00000000  00067b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb8  00000000  00000000  0006db50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cc0  00000000  00000000  0006fb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002854b  00000000  00000000  000717c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031c17  00000000  00000000  00099d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb2e8  00000000  00000000  000cb92a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b6c12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000097ac  00000000  00000000  001b6c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08023424 	.word	0x08023424

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	08023424 	.word	0x08023424

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <reset_distance>:
float fusion_speedL,fusion_speedR;
float straight_alpha;
//float E_speedR0,E_speedL0;
//float E_accelerationR,E_accelerationL;

void reset_distance(void) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

	E_distanceL = 0;
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <reset_distance+0x54>)
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
	E_distanceR = 0;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <reset_distance+0x58>)
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
	E_lpf_distanceL = 0;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <reset_distance+0x5c>)
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
	E_lpf_distanceR = 0;
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <reset_distance+0x60>)
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
	G_hpf_distanceL = 0;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <reset_distance+0x64>)
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
	G_hpf_distanceR = 0;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <reset_distance+0x68>)
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
	fusion_distanceL=0;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <reset_distance+0x6c>)
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
	fusion_distanceR=0;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <reset_distance+0x70>)
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
	straight_alpha=0.85;
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <reset_distance+0x74>)
 8000fe2:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <reset_distance+0x78>)
 8000fe4:	601a      	str	r2, [r3, #0]

}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	20000220 	.word	0x20000220
 8000ff4:	20000224 	.word	0x20000224
 8000ff8:	20000230 	.word	0x20000230
 8000ffc:	20000234 	.word	0x20000234
 8001000:	20000240 	.word	0x20000240
 8001004:	20000244 	.word	0x20000244
 8001008:	20000250 	.word	0x20000250
 800100c:	20000254 	.word	0x20000254
 8001010:	20000260 	.word	0x20000260
 8001014:	3f59999a 	.word	0x3f59999a

08001018 <reset_speed>:

void reset_speed(void) {
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

	G_hpf_speedL=0;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <reset_speed+0x44>)
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
	G_hpf_speedR=0;
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <reset_speed+0x48>)
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
	E_lpf_speedL=0;
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <reset_speed+0x4c>)
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
	E_lpf_speedR=0;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <reset_speed+0x50>)
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
	fusion_speedL=0;
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <reset_speed+0x54>)
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
	fusion_speedR=0;
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <reset_speed+0x58>)
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
	straight_alpha=0.85;
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <reset_speed+0x5c>)
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <reset_speed+0x60>)
 8001050:	601a      	str	r2, [r3, #0]

}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	20000248 	.word	0x20000248
 8001060:	2000024c 	.word	0x2000024c
 8001064:	20000238 	.word	0x20000238
 8001068:	2000023c 	.word	0x2000023c
 800106c:	20000258 	.word	0x20000258
 8001070:	2000025c 	.word	0x2000025c
 8001074:	20000260 	.word	0x20000260
 8001078:	3f59999a 	.word	0x3f59999a
 800107c:	00000000 	.word	0x00000000

08001080 <interupt_calEncoder>:

void interupt_calEncoder(void) {
 8001080:	b5b0      	push	{r4, r5, r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
	float angle_R,angle_L;
	angle_R=encoder_R-encoder_R0;
 8001086:	4bde      	ldr	r3, [pc, #888]	; (8001400 <interupt_calEncoder+0x380>)
 8001088:	ed93 7a00 	vldr	s14, [r3]
 800108c:	4bdd      	ldr	r3, [pc, #884]	; (8001404 <interupt_calEncoder+0x384>)
 800108e:	edd3 7a00 	vldr	s15, [r3]
 8001092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001096:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R>180){angle_R=angle_R-360;}
 800109a:	edd7 7a01 	vldr	s15, [r7, #4]
 800109e:	ed9f 7ada 	vldr	s14, [pc, #872]	; 8001408 <interupt_calEncoder+0x388>
 80010a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	dd07      	ble.n	80010bc <interupt_calEncoder+0x3c>
 80010ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b0:	ed9f 7ad6 	vldr	s14, [pc, #856]	; 800140c <interupt_calEncoder+0x38c>
 80010b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010b8:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R<-180){angle_R=angle_R+360;}
 80010bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80010c0:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 8001410 <interupt_calEncoder+0x390>
 80010c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010cc:	d507      	bpl.n	80010de <interupt_calEncoder+0x5e>
 80010ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d2:	ed9f 7ace 	vldr	s14, [pc, #824]	; 800140c <interupt_calEncoder+0x38c>
 80010d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010da:	edc7 7a01 	vstr	s15, [r7, #4]
	angle_L=-(encoder_L-encoder_L0);
 80010de:	4bcd      	ldr	r3, [pc, #820]	; (8001414 <interupt_calEncoder+0x394>)
 80010e0:	ed93 7a00 	vldr	s14, [r3]
 80010e4:	4bcc      	ldr	r3, [pc, #816]	; (8001418 <interupt_calEncoder+0x398>)
 80010e6:	edd3 7a00 	vldr	s15, [r3]
 80010ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ee:	eef1 7a67 	vneg.f32	s15, s15
 80010f2:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L>180){angle_L=angle_L-360;}
 80010f6:	edd7 7a00 	vldr	s15, [r7]
 80010fa:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 8001408 <interupt_calEncoder+0x388>
 80010fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001106:	dd07      	ble.n	8001118 <interupt_calEncoder+0x98>
 8001108:	edd7 7a00 	vldr	s15, [r7]
 800110c:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800140c <interupt_calEncoder+0x38c>
 8001110:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001114:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L<-180){angle_L=angle_L+360;}
 8001118:	edd7 7a00 	vldr	s15, [r7]
 800111c:	ed9f 7abc 	vldr	s14, [pc, #752]	; 8001410 <interupt_calEncoder+0x390>
 8001120:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001128:	d507      	bpl.n	800113a <interupt_calEncoder+0xba>
 800112a:	edd7 7a00 	vldr	s15, [r7]
 800112e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800140c <interupt_calEncoder+0x38c>
 8001132:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001136:	edc7 7a00 	vstr	s15, [r7]

	//E_speedR0 = E_speedR;
	//E_speedL0 = E_speedL;
	//one_countL = pl_count_encoderL();
	//one_countR = pl_count_encoderR();
	E_speedL = (angle_L) * pi / 180 * TIRE_DIAMETER_L /2 * 1000  / INTERRUPT_TIME;
 800113a:	6838      	ldr	r0, [r7, #0]
 800113c:	f7ff fa2c 	bl	8000598 <__aeabi_f2d>
 8001140:	a39b      	add	r3, pc, #620	; (adr r3, 80013b0 <interupt_calEncoder+0x330>)
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff fa7f 	bl	8000648 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4bb1      	ldr	r3, [pc, #708]	; (800141c <interupt_calEncoder+0x39c>)
 8001158:	f7ff fba0 	bl	800089c <__aeabi_ddiv>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	a394      	add	r3, pc, #592	; (adr r3, 80013b8 <interupt_calEncoder+0x338>)
 8001166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116a:	f7ff fa6d 	bl	8000648 <__aeabi_dmul>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	a392      	add	r3, pc, #584	; (adr r3, 80013c0 <interupt_calEncoder+0x340>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	f7ff fa64 	bl	8000648 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	a38f      	add	r3, pc, #572	; (adr r3, 80013c8 <interupt_calEncoder+0x348>)
 800118a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118e:	f7ff fa5b 	bl	8000648 <__aeabi_dmul>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	a38d      	add	r3, pc, #564	; (adr r3, 80013d0 <interupt_calEncoder+0x350>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	f7ff fb7c 	bl	800089c <__aeabi_ddiv>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	4b9b      	ldr	r3, [pc, #620]	; (8001420 <interupt_calEncoder+0x3a0>)
 80011b2:	f7ff fa49 	bl	8000648 <__aeabi_dmul>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	a386      	add	r3, pc, #536	; (adr r3, 80013d8 <interupt_calEncoder+0x358>)
 80011c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c4:	f7ff fb6a 	bl	800089c <__aeabi_ddiv>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	4b93      	ldr	r3, [pc, #588]	; (8001424 <interupt_calEncoder+0x3a4>)
 80011d6:	f7ff fa37 	bl	8000648 <__aeabi_dmul>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4610      	mov	r0, r2
 80011e0:	4619      	mov	r1, r3
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	4b90      	ldr	r3, [pc, #576]	; (8001428 <interupt_calEncoder+0x3a8>)
 80011e8:	f7ff fb58 	bl	800089c <__aeabi_ddiv>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	a37a      	add	r3, pc, #488	; (adr r3, 80013e0 <interupt_calEncoder+0x360>)
 80011f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fa:	f7ff fa25 	bl	8000648 <__aeabi_dmul>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	a378      	add	r3, pc, #480	; (adr r3, 80013e8 <interupt_calEncoder+0x368>)
 8001208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120c:	f7ff fb46 	bl	800089c <__aeabi_ddiv>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001220:	f7ff fb3c 	bl	800089c <__aeabi_ddiv>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	4b7e      	ldr	r3, [pc, #504]	; (800142c <interupt_calEncoder+0x3ac>)
 8001232:	f7ff fa09 	bl	8000648 <__aeabi_dmul>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	a36c      	add	r3, pc, #432	; (adr r3, 80013f0 <interupt_calEncoder+0x370>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff fb2a 	bl	800089c <__aeabi_ddiv>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f7ff fcd2 	bl	8000bf8 <__aeabi_d2f>
 8001254:	4603      	mov	r3, r0
 8001256:	4a76      	ldr	r2, [pc, #472]	; (8001430 <interupt_calEncoder+0x3b0>)
 8001258:	6013      	str	r3, [r2, #0]
	E_speedR = (angle_R) * pi / 180 * TIRE_DIAMETER_R /2 * 1000 / INTERRUPT_TIME;
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff f99c 	bl	8000598 <__aeabi_f2d>
 8001260:	a353      	add	r3, pc, #332	; (adr r3, 80013b0 <interupt_calEncoder+0x330>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff f9ef 	bl	8000648 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	4b69      	ldr	r3, [pc, #420]	; (800141c <interupt_calEncoder+0x39c>)
 8001278:	f7ff fb10 	bl	800089c <__aeabi_ddiv>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	a34c      	add	r3, pc, #304	; (adr r3, 80013b8 <interupt_calEncoder+0x338>)
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	f7ff f9dd 	bl	8000648 <__aeabi_dmul>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	a34a      	add	r3, pc, #296	; (adr r3, 80013c0 <interupt_calEncoder+0x340>)
 8001298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129c:	f7ff f9d4 	bl	8000648 <__aeabi_dmul>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	a347      	add	r3, pc, #284	; (adr r3, 80013c8 <interupt_calEncoder+0x348>)
 80012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ae:	f7ff f9cb 	bl	8000648 <__aeabi_dmul>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4610      	mov	r0, r2
 80012b8:	4619      	mov	r1, r3
 80012ba:	a345      	add	r3, pc, #276	; (adr r3, 80013d0 <interupt_calEncoder+0x350>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	f7ff faec 	bl	800089c <__aeabi_ddiv>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b53      	ldr	r3, [pc, #332]	; (8001420 <interupt_calEncoder+0x3a0>)
 80012d2:	f7ff f9b9 	bl	8000648 <__aeabi_dmul>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	a346      	add	r3, pc, #280	; (adr r3, 80013f8 <interupt_calEncoder+0x378>)
 80012e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e4:	f7ff fada 	bl	800089c <__aeabi_ddiv>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	4b4b      	ldr	r3, [pc, #300]	; (8001424 <interupt_calEncoder+0x3a4>)
 80012f6:	f7ff f9a7 	bl	8000648 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4610      	mov	r0, r2
 8001300:	4619      	mov	r1, r3
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b48      	ldr	r3, [pc, #288]	; (8001428 <interupt_calEncoder+0x3a8>)
 8001308:	f7ff fac8 	bl	800089c <__aeabi_ddiv>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800131c:	f7ff fabe 	bl	800089c <__aeabi_ddiv>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4610      	mov	r0, r2
 8001326:	4619      	mov	r1, r3
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	4b3f      	ldr	r3, [pc, #252]	; (800142c <interupt_calEncoder+0x3ac>)
 800132e:	f7ff f98b 	bl	8000648 <__aeabi_dmul>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	a32d      	add	r3, pc, #180	; (adr r3, 80013f0 <interupt_calEncoder+0x370>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	f7ff faac 	bl	800089c <__aeabi_ddiv>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f7ff fc54 	bl	8000bf8 <__aeabi_d2f>
 8001350:	4603      	mov	r3, r0
 8001352:	4a38      	ldr	r2, [pc, #224]	; (8001434 <interupt_calEncoder+0x3b4>)
 8001354:	6013      	str	r3, [r2, #0]
	E_distanceL += E_speedL * INTERRUPT_TIME;
 8001356:	4b38      	ldr	r3, [pc, #224]	; (8001438 <interupt_calEncoder+0x3b8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f91c 	bl	8000598 <__aeabi_f2d>
 8001360:	4604      	mov	r4, r0
 8001362:	460d      	mov	r5, r1
 8001364:	4b32      	ldr	r3, [pc, #200]	; (8001430 <interupt_calEncoder+0x3b0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f915 	bl	8000598 <__aeabi_f2d>
 800136e:	a320      	add	r3, pc, #128	; (adr r3, 80013f0 <interupt_calEncoder+0x370>)
 8001370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001374:	f7ff f968 	bl	8000648 <__aeabi_dmul>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4620      	mov	r0, r4
 800137e:	4629      	mov	r1, r5
 8001380:	f7fe ffac 	bl	80002dc <__adddf3>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff fc34 	bl	8000bf8 <__aeabi_d2f>
 8001390:	4603      	mov	r3, r0
 8001392:	4a29      	ldr	r2, [pc, #164]	; (8001438 <interupt_calEncoder+0x3b8>)
 8001394:	6013      	str	r3, [r2, #0]
	E_distanceR += E_speedR * INTERRUPT_TIME;
 8001396:	4b29      	ldr	r3, [pc, #164]	; (800143c <interupt_calEncoder+0x3bc>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f8fc 	bl	8000598 <__aeabi_f2d>
 80013a0:	4604      	mov	r4, r0
 80013a2:	460d      	mov	r5, r1
 80013a4:	4b23      	ldr	r3, [pc, #140]	; (8001434 <interupt_calEncoder+0x3b4>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f8f5 	bl	8000598 <__aeabi_f2d>
 80013ae:	e047      	b.n	8001440 <interupt_calEncoder+0x3c0>
 80013b0:	54411744 	.word	0x54411744
 80013b4:	400921fb 	.word	0x400921fb
 80013b8:	4e70a65b 	.word	0x4e70a65b
 80013bc:	3f882f36 	.word	0x3f882f36
 80013c0:	a858793e 	.word	0xa858793e
 80013c4:	3ff1cd35 	.word	0x3ff1cd35
 80013c8:	00000000 	.word	0x00000000
 80013cc:	4078c000 	.word	0x4078c000
 80013d0:	147ae148 	.word	0x147ae148
 80013d4:	4078fbae 	.word	0x4078fbae
 80013d8:	0a3d70a4 	.word	0x0a3d70a4
 80013dc:	4078efd7 	.word	0x4078efd7
 80013e0:	00000000 	.word	0x00000000
 80013e4:	4125eb2e 	.word	0x4125eb2e
 80013e8:	33333333 	.word	0x33333333
 80013ec:	4125f7be 	.word	0x4125f7be
 80013f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80013f4:	3f50624d 	.word	0x3f50624d
 80013f8:	5c28f5c3 	.word	0x5c28f5c3
 80013fc:	40792a8f 	.word	0x40792a8f
 8001400:	200006d8 	.word	0x200006d8
 8001404:	20000218 	.word	0x20000218
 8001408:	43340000 	.word	0x43340000
 800140c:	43b40000 	.word	0x43b40000
 8001410:	c3340000 	.word	0xc3340000
 8001414:	200006dc 	.word	0x200006dc
 8001418:	2000021c 	.word	0x2000021c
 800141c:	40668000 	.word	0x40668000
 8001420:	40790000 	.word	0x40790000
 8001424:	40870800 	.word	0x40870800
 8001428:	40868000 	.word	0x40868000
 800142c:	408f4000 	.word	0x408f4000
 8001430:	20000228 	.word	0x20000228
 8001434:	2000022c 	.word	0x2000022c
 8001438:	20000220 	.word	0x20000220
 800143c:	20000224 	.word	0x20000224
 8001440:	a314      	add	r3, pc, #80	; (adr r3, 8001494 <interupt_calEncoder+0x414>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7ff f8ff 	bl	8000648 <__aeabi_dmul>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4620      	mov	r0, r4
 8001450:	4629      	mov	r1, r5
 8001452:	f7fe ff43 	bl	80002dc <__adddf3>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4610      	mov	r0, r2
 800145c:	4619      	mov	r1, r3
 800145e:	f7ff fbcb 	bl	8000bf8 <__aeabi_d2f>
 8001462:	4603      	mov	r3, r0
 8001464:	4a06      	ldr	r2, [pc, #24]	; (8001480 <interupt_calEncoder+0x400>)
 8001466:	6013      	str	r3, [r2, #0]

	encoder_L0=encoder_L;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <interupt_calEncoder+0x404>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a06      	ldr	r2, [pc, #24]	; (8001488 <interupt_calEncoder+0x408>)
 800146e:	6013      	str	r3, [r2, #0]
	encoder_R0=encoder_R;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <interupt_calEncoder+0x40c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a06      	ldr	r2, [pc, #24]	; (8001490 <interupt_calEncoder+0x410>)
 8001476:	6013      	str	r3, [r2, #0]

}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bdb0      	pop	{r4, r5, r7, pc}
 8001480:	20000224 	.word	0x20000224
 8001484:	200006dc 	.word	0x200006dc
 8001488:	2000021c 	.word	0x2000021c
 800148c:	200006d8 	.word	0x200006d8
 8001490:	20000218 	.word	0x20000218
 8001494:	d2f1a9fc 	.word	0xd2f1a9fc
 8001498:	3f50624d 	.word	0x3f50624d
 800149c:	00000000 	.word	0x00000000

080014a0 <interupt_calFusion>:


void interupt_calFusion(void) {
 80014a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014a4:	af00      	add	r7, sp, #0


	E_lpf_speedL = straight_alpha * E_lpf_speedL + (1 - straight_alpha) * E_speedL;
 80014a6:	4ba4      	ldr	r3, [pc, #656]	; (8001738 <interupt_calFusion+0x298>)
 80014a8:	ed93 7a00 	vldr	s14, [r3]
 80014ac:	4ba3      	ldr	r3, [pc, #652]	; (800173c <interupt_calFusion+0x29c>)
 80014ae:	edd3 7a00 	vldr	s15, [r3]
 80014b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014b6:	4ba0      	ldr	r3, [pc, #640]	; (8001738 <interupt_calFusion+0x298>)
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80014c0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014c4:	4b9e      	ldr	r3, [pc, #632]	; (8001740 <interupt_calFusion+0x2a0>)
 80014c6:	edd3 7a00 	vldr	s15, [r3]
 80014ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d2:	4b9a      	ldr	r3, [pc, #616]	; (800173c <interupt_calFusion+0x29c>)
 80014d4:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_speedR = straight_alpha * E_lpf_speedR + (1 - straight_alpha) * E_speedR;
 80014d8:	4b97      	ldr	r3, [pc, #604]	; (8001738 <interupt_calFusion+0x298>)
 80014da:	ed93 7a00 	vldr	s14, [r3]
 80014de:	4b99      	ldr	r3, [pc, #612]	; (8001744 <interupt_calFusion+0x2a4>)
 80014e0:	edd3 7a00 	vldr	s15, [r3]
 80014e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014e8:	4b93      	ldr	r3, [pc, #588]	; (8001738 <interupt_calFusion+0x298>)
 80014ea:	edd3 7a00 	vldr	s15, [r3]
 80014ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80014f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014f6:	4b94      	ldr	r3, [pc, #592]	; (8001748 <interupt_calFusion+0x2a8>)
 80014f8:	edd3 7a00 	vldr	s15, [r3]
 80014fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001500:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001504:	4b8f      	ldr	r3, [pc, #572]	; (8001744 <interupt_calFusion+0x2a4>)
 8001506:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_distanceL += E_lpf_speedL * INTERRUPT_TIME;
 800150a:	4b90      	ldr	r3, [pc, #576]	; (800174c <interupt_calFusion+0x2ac>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f842 	bl	8000598 <__aeabi_f2d>
 8001514:	4604      	mov	r4, r0
 8001516:	460d      	mov	r5, r1
 8001518:	4b88      	ldr	r3, [pc, #544]	; (800173c <interupt_calFusion+0x29c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f83b 	bl	8000598 <__aeabi_f2d>
 8001522:	a383      	add	r3, pc, #524	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	f7ff f88e 	bl	8000648 <__aeabi_dmul>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4620      	mov	r0, r4
 8001532:	4629      	mov	r1, r5
 8001534:	f7fe fed2 	bl	80002dc <__adddf3>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4610      	mov	r0, r2
 800153e:	4619      	mov	r1, r3
 8001540:	f7ff fb5a 	bl	8000bf8 <__aeabi_d2f>
 8001544:	4603      	mov	r3, r0
 8001546:	4a81      	ldr	r2, [pc, #516]	; (800174c <interupt_calFusion+0x2ac>)
 8001548:	6013      	str	r3, [r2, #0]
	E_lpf_distanceR += E_lpf_speedR * INTERRUPT_TIME;
 800154a:	4b81      	ldr	r3, [pc, #516]	; (8001750 <interupt_calFusion+0x2b0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff f822 	bl	8000598 <__aeabi_f2d>
 8001554:	4604      	mov	r4, r0
 8001556:	460d      	mov	r5, r1
 8001558:	4b7a      	ldr	r3, [pc, #488]	; (8001744 <interupt_calFusion+0x2a4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff f81b 	bl	8000598 <__aeabi_f2d>
 8001562:	a373      	add	r3, pc, #460	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	f7ff f86e 	bl	8000648 <__aeabi_dmul>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4620      	mov	r0, r4
 8001572:	4629      	mov	r1, r5
 8001574:	f7fe feb2 	bl	80002dc <__adddf3>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f7ff fb3a 	bl	8000bf8 <__aeabi_d2f>
 8001584:	4603      	mov	r3, r0
 8001586:	4a72      	ldr	r2, [pc, #456]	; (8001750 <interupt_calFusion+0x2b0>)
 8001588:	6013      	str	r3, [r2, #0]
	//G_hpf_speedR = straight_alpha * (G_hpf_speedL + INTERRUPT_TIME * gf_accel);
	//G_hpf_distanceL += G_hpf_speedL * INTERRUPT_TIME;
	//G_hpf_distanceR += G_hpf_speedR * INTERRUPT_TIME;


	fusion_speedL = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedL;
 800158a:	4b6b      	ldr	r3, [pc, #428]	; (8001738 <interupt_calFusion+0x298>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff f802 	bl	8000598 <__aeabi_f2d>
 8001594:	4604      	mov	r4, r0
 8001596:	460d      	mov	r5, r1
 8001598:	4b6e      	ldr	r3, [pc, #440]	; (8001754 <interupt_calFusion+0x2b4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe fffb 	bl	8000598 <__aeabi_f2d>
 80015a2:	4680      	mov	r8, r0
 80015a4:	4689      	mov	r9, r1
 80015a6:	4b6c      	ldr	r3, [pc, #432]	; (8001758 <interupt_calFusion+0x2b8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe fff4 	bl	8000598 <__aeabi_f2d>
 80015b0:	a35f      	add	r3, pc, #380	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	f7ff f847 	bl	8000648 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4640      	mov	r0, r8
 80015c0:	4649      	mov	r1, r9
 80015c2:	f7fe fe8b 	bl	80002dc <__adddf3>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4620      	mov	r0, r4
 80015cc:	4629      	mov	r1, r5
 80015ce:	f7ff f83b 	bl	8000648 <__aeabi_dmul>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4614      	mov	r4, r2
 80015d8:	461d      	mov	r5, r3
 80015da:	4b57      	ldr	r3, [pc, #348]	; (8001738 <interupt_calFusion+0x298>)
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015e8:	4b55      	ldr	r3, [pc, #340]	; (8001740 <interupt_calFusion+0x2a0>)
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f2:	ee17 0a90 	vmov	r0, s15
 80015f6:	f7fe ffcf 	bl	8000598 <__aeabi_f2d>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4620      	mov	r0, r4
 8001600:	4629      	mov	r1, r5
 8001602:	f7fe fe6b 	bl	80002dc <__adddf3>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	f7ff faf3 	bl	8000bf8 <__aeabi_d2f>
 8001612:	4603      	mov	r3, r0
 8001614:	4a4f      	ldr	r2, [pc, #316]	; (8001754 <interupt_calFusion+0x2b4>)
 8001616:	6013      	str	r3, [r2, #0]
	fusion_speedR = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedR;
 8001618:	4b47      	ldr	r3, [pc, #284]	; (8001738 <interupt_calFusion+0x298>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ffbb 	bl	8000598 <__aeabi_f2d>
 8001622:	4604      	mov	r4, r0
 8001624:	460d      	mov	r5, r1
 8001626:	4b4b      	ldr	r3, [pc, #300]	; (8001754 <interupt_calFusion+0x2b4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ffb4 	bl	8000598 <__aeabi_f2d>
 8001630:	4680      	mov	r8, r0
 8001632:	4689      	mov	r9, r1
 8001634:	4b48      	ldr	r3, [pc, #288]	; (8001758 <interupt_calFusion+0x2b8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ffad 	bl	8000598 <__aeabi_f2d>
 800163e:	a33c      	add	r3, pc, #240	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	f7ff f800 	bl	8000648 <__aeabi_dmul>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4640      	mov	r0, r8
 800164e:	4649      	mov	r1, r9
 8001650:	f7fe fe44 	bl	80002dc <__adddf3>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4620      	mov	r0, r4
 800165a:	4629      	mov	r1, r5
 800165c:	f7fe fff4 	bl	8000648 <__aeabi_dmul>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4614      	mov	r4, r2
 8001666:	461d      	mov	r5, r3
 8001668:	4b33      	ldr	r3, [pc, #204]	; (8001738 <interupt_calFusion+0x298>)
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001672:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001676:	4b34      	ldr	r3, [pc, #208]	; (8001748 <interupt_calFusion+0x2a8>)
 8001678:	edd3 7a00 	vldr	s15, [r3]
 800167c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001680:	ee17 0a90 	vmov	r0, s15
 8001684:	f7fe ff88 	bl	8000598 <__aeabi_f2d>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4620      	mov	r0, r4
 800168e:	4629      	mov	r1, r5
 8001690:	f7fe fe24 	bl	80002dc <__adddf3>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f7ff faac 	bl	8000bf8 <__aeabi_d2f>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4a2e      	ldr	r2, [pc, #184]	; (800175c <interupt_calFusion+0x2bc>)
 80016a4:	6013      	str	r3, [r2, #0]
	fusion_distanceL += fusion_speedL * INTERRUPT_TIME;
 80016a6:	4b2e      	ldr	r3, [pc, #184]	; (8001760 <interupt_calFusion+0x2c0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff74 	bl	8000598 <__aeabi_f2d>
 80016b0:	4604      	mov	r4, r0
 80016b2:	460d      	mov	r5, r1
 80016b4:	4b27      	ldr	r3, [pc, #156]	; (8001754 <interupt_calFusion+0x2b4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe ff6d 	bl	8000598 <__aeabi_f2d>
 80016be:	a31c      	add	r3, pc, #112	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe ffc0 	bl	8000648 <__aeabi_dmul>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4620      	mov	r0, r4
 80016ce:	4629      	mov	r1, r5
 80016d0:	f7fe fe04 	bl	80002dc <__adddf3>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	f7ff fa8c 	bl	8000bf8 <__aeabi_d2f>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4a1f      	ldr	r2, [pc, #124]	; (8001760 <interupt_calFusion+0x2c0>)
 80016e4:	6013      	str	r3, [r2, #0]
	fusion_distanceR += fusion_speedR * INTERRUPT_TIME;
 80016e6:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <interupt_calFusion+0x2c4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe ff54 	bl	8000598 <__aeabi_f2d>
 80016f0:	4604      	mov	r4, r0
 80016f2:	460d      	mov	r5, r1
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <interupt_calFusion+0x2bc>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ff4d 	bl	8000598 <__aeabi_f2d>
 80016fe:	a30c      	add	r3, pc, #48	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f7fe ffa0 	bl	8000648 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4620      	mov	r0, r4
 800170e:	4629      	mov	r1, r5
 8001710:	f7fe fde4 	bl	80002dc <__adddf3>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f7ff fa6c 	bl	8000bf8 <__aeabi_d2f>
 8001720:	4603      	mov	r3, r0
 8001722:	4a10      	ldr	r2, [pc, #64]	; (8001764 <interupt_calFusion+0x2c4>)
 8001724:	6013      	str	r3, [r2, #0]

}
 8001726:	bf00      	nop
 8001728:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800172c:	f3af 8000 	nop.w
 8001730:	d2f1a9fc 	.word	0xd2f1a9fc
 8001734:	3f50624d 	.word	0x3f50624d
 8001738:	20000260 	.word	0x20000260
 800173c:	20000238 	.word	0x20000238
 8001740:	20000228 	.word	0x20000228
 8001744:	2000023c 	.word	0x2000023c
 8001748:	2000022c 	.word	0x2000022c
 800174c:	20000230 	.word	0x20000230
 8001750:	20000234 	.word	0x20000234
 8001754:	20000258 	.word	0x20000258
 8001758:	20000280 	.word	0x20000280
 800175c:	2000025c 	.word	0x2000025c
 8001760:	20000250 	.word	0x20000250
 8001764:	20000254 	.word	0x20000254

08001768 <reset_gyro>:
float accelY_offset;

float angle_speed_ave[10];


void reset_gyro(void) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
	int s = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
	angle = 0;
 8001772:	4b3c      	ldr	r3, [pc, #240]	; (8001864 <reset_gyro+0xfc>)
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
	omegaZ_offset=0;
 800177a:	4b3b      	ldr	r3, [pc, #236]	; (8001868 <reset_gyro+0x100>)
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	601a      	str	r2, [r3, #0]

	for (s = 1; s <= 1000; s++) {
 8001782:	2301      	movs	r3, #1
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	e026      	b.n	80017d6 <reset_gyro+0x6e>
		//ICM20602_DataUpdate();
		omegaZ_offset += gyro.omega_z;
 8001788:	4b38      	ldr	r3, [pc, #224]	; (800186c <reset_gyro+0x104>)
 800178a:	ed93 7a02 	vldr	s14, [r3, #8]
 800178e:	4b36      	ldr	r3, [pc, #216]	; (8001868 <reset_gyro+0x100>)
 8001790:	edd3 7a00 	vldr	s15, [r3]
 8001794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001798:	4b33      	ldr	r3, [pc, #204]	; (8001868 <reset_gyro+0x100>)
 800179a:	edc3 7a00 	vstr	s15, [r3]
		omegaX_offset += gyro.omega_x;
 800179e:	4b33      	ldr	r3, [pc, #204]	; (800186c <reset_gyro+0x104>)
 80017a0:	ed93 7a00 	vldr	s14, [r3]
 80017a4:	4b32      	ldr	r3, [pc, #200]	; (8001870 <reset_gyro+0x108>)
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ae:	4b30      	ldr	r3, [pc, #192]	; (8001870 <reset_gyro+0x108>)
 80017b0:	edc3 7a00 	vstr	s15, [r3]
		accelY_offset += gyro.accel_y;
 80017b4:	4b2d      	ldr	r3, [pc, #180]	; (800186c <reset_gyro+0x104>)
 80017b6:	ed93 7a04 	vldr	s14, [r3, #16]
 80017ba:	4b2e      	ldr	r3, [pc, #184]	; (8001874 <reset_gyro+0x10c>)
 80017bc:	edd3 7a00 	vldr	s15, [r3]
 80017c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c4:	4b2b      	ldr	r3, [pc, #172]	; (8001874 <reset_gyro+0x10c>)
 80017c6:	edc3 7a00 	vstr	s15, [r3]
		wait_ms_NoReset(1);
 80017ca:	2001      	movs	r0, #1
 80017cc:	f006 fbb0 	bl	8007f30 <wait_ms_NoReset>
	for (s = 1; s <= 1000; s++) {
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3301      	adds	r3, #1
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017dc:	ddd4      	ble.n	8001788 <reset_gyro+0x20>
	}
	omegaZ_offset = omegaZ_offset / 1000;
 80017de:	4b22      	ldr	r3, [pc, #136]	; (8001868 <reset_gyro+0x100>)
 80017e0:	ed93 7a00 	vldr	s14, [r3]
 80017e4:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001878 <reset_gyro+0x110>
 80017e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ec:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <reset_gyro+0x100>)
 80017ee:	edc3 7a00 	vstr	s15, [r3]
	omegaX_offset = omegaX_offset / 1000;
 80017f2:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <reset_gyro+0x108>)
 80017f4:	ed93 7a00 	vldr	s14, [r3]
 80017f8:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001878 <reset_gyro+0x110>
 80017fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001800:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <reset_gyro+0x108>)
 8001802:	edc3 7a00 	vstr	s15, [r3]
	accelY_offset = accelY_offset / 1000;
 8001806:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <reset_gyro+0x10c>)
 8001808:	ed93 7a00 	vldr	s14, [r3]
 800180c:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001878 <reset_gyro+0x110>
 8001810:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001814:	4b17      	ldr	r3, [pc, #92]	; (8001874 <reset_gyro+0x10c>)
 8001816:	edc3 7a00 	vstr	s15, [r3]
	//オフセットする文
	//printf("%f,%f\n",gyro.omega_z,omegaZ_offset);

	angle = 0;
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <reset_gyro+0xfc>)
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
	anglex = 0;
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <reset_gyro+0x114>)
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
	gf_speed = 0;
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <reset_gyro+0x118>)
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
	gf_distance = 0;
 8001832:	4b14      	ldr	r3, [pc, #80]	; (8001884 <reset_gyro+0x11c>)
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	e009      	b.n	8001854 <reset_gyro+0xec>
		angle_speed_ave[s] = 0;
 8001840:	4a11      	ldr	r2, [pc, #68]	; (8001888 <reset_gyro+0x120>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3301      	adds	r3, #1
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b09      	cmp	r3, #9
 8001858:	ddf2      	ble.n	8001840 <reset_gyro+0xd8>
	}
}
 800185a:	bf00      	nop
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000264 	.word	0x20000264
 8001868:	20000288 	.word	0x20000288
 800186c:	200006e4 	.word	0x200006e4
 8001870:	20000284 	.word	0x20000284
 8001874:	2000028c 	.word	0x2000028c
 8001878:	447a0000 	.word	0x447a0000
 800187c:	2000026c 	.word	0x2000026c
 8001880:	20000278 	.word	0x20000278
 8001884:	2000027c 	.word	0x2000027c
 8001888:	20000290 	.word	0x20000290
 800188c:	00000000 	.word	0x00000000

08001890 <interrupt_calGyro>:

void interrupt_calGyro(void) {
 8001890:	b5b0      	push	{r4, r5, r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
	int j = 9;
 8001896:	2309      	movs	r3, #9
 8001898:	607b      	str	r3, [r7, #4]
	//angle_speed0 = angle_speed;

	for (j = 9; j >= 1; j--) {
 800189a:	2309      	movs	r3, #9
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	e00d      	b.n	80018bc <interrupt_calGyro+0x2c>
		angle_speed_ave[j] = angle_speed_ave[j - 1];
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	4aa6      	ldr	r2, [pc, #664]	; (8001b40 <interrupt_calGyro+0x2b0>)
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	49a4      	ldr	r1, [pc, #656]	; (8001b40 <interrupt_calGyro+0x2b0>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	601a      	str	r2, [r3, #0]
	for (j = 9; j >= 1; j--) {
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	dcee      	bgt.n	80018a0 <interrupt_calGyro+0x10>
	}
	angle_speed_ave[0] = (gyro.omega_z - omegaZ_offset)*GYRO_COEFFICIENT;//*0.9525321206299 ;//* 90 / 96*3690/3600*(3600-17)/3600;
 80018c2:	4ba0      	ldr	r3, [pc, #640]	; (8001b44 <interrupt_calGyro+0x2b4>)
 80018c4:	ed93 7a02 	vldr	s14, [r3, #8]
 80018c8:	4b9f      	ldr	r3, [pc, #636]	; (8001b48 <interrupt_calGyro+0x2b8>)
 80018ca:	edd3 7a00 	vldr	s15, [r3]
 80018ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d2:	ee17 0a90 	vmov	r0, s15
 80018d6:	f7fe fe5f 	bl	8000598 <__aeabi_f2d>
 80018da:	a387      	add	r3, pc, #540	; (adr r3, 8001af8 <interrupt_calGyro+0x268>)
 80018dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e0:	f7fe feb2 	bl	8000648 <__aeabi_dmul>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	a384      	add	r3, pc, #528	; (adr r3, 8001b00 <interrupt_calGyro+0x270>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	f7fe fea9 	bl	8000648 <__aeabi_dmul>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	a382      	add	r3, pc, #520	; (adr r3, 8001b08 <interrupt_calGyro+0x278>)
 8001900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001904:	f7fe ffca 	bl	800089c <__aeabi_ddiv>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	f7ff f972 	bl	8000bf8 <__aeabi_d2f>
 8001914:	4603      	mov	r3, r0
 8001916:	4a8a      	ldr	r2, [pc, #552]	; (8001b40 <interrupt_calGyro+0x2b0>)
 8001918:	6013      	str	r3, [r2, #0]

	/*angle_speed = ((angle_speed_ave[0] + angle_speed_ave[1] + angle_speed_ave[2]
			+ angle_speed_ave[3] + angle_speed_ave[4] + angle_speed_ave[5]
			+ angle_speed_ave[6] + angle_speed_ave[7] + angle_speed_ave[8]
			+ angle_speed_ave[9]) / 10);*/
	angle_speed = angle_speed_ave[0];
 800191a:	4b89      	ldr	r3, [pc, #548]	; (8001b40 <interrupt_calGyro+0x2b0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a8b      	ldr	r2, [pc, #556]	; (8001b4c <interrupt_calGyro+0x2bc>)
 8001920:	6013      	str	r3, [r2, #0]
	//angle_speed=(gyro.omega_z-omegaZ_offset)*90/94;//deg/sec
	angle_speedx=gyro.omega_x;
 8001922:	4b88      	ldr	r3, [pc, #544]	; (8001b44 <interrupt_calGyro+0x2b4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a8a      	ldr	r2, [pc, #552]	; (8001b50 <interrupt_calGyro+0x2c0>)
 8001928:	6013      	str	r3, [r2, #0]
	angle_speedx_set=(gyro.omega_x - omegaX_offset);
 800192a:	4b86      	ldr	r3, [pc, #536]	; (8001b44 <interrupt_calGyro+0x2b4>)
 800192c:	ed93 7a00 	vldr	s14, [r3]
 8001930:	4b88      	ldr	r3, [pc, #544]	; (8001b54 <interrupt_calGyro+0x2c4>)
 8001932:	edd3 7a00 	vldr	s15, [r3]
 8001936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800193a:	4b87      	ldr	r3, [pc, #540]	; (8001b58 <interrupt_calGyro+0x2c8>)
 800193c:	edc3 7a00 	vstr	s15, [r3]
	angle += 0.001 * angle_speed; //deg
 8001940:	4b86      	ldr	r3, [pc, #536]	; (8001b5c <interrupt_calGyro+0x2cc>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fe27 	bl	8000598 <__aeabi_f2d>
 800194a:	4604      	mov	r4, r0
 800194c:	460d      	mov	r5, r1
 800194e:	4b7f      	ldr	r3, [pc, #508]	; (8001b4c <interrupt_calGyro+0x2bc>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fe20 	bl	8000598 <__aeabi_f2d>
 8001958:	a36d      	add	r3, pc, #436	; (adr r3, 8001b10 <interrupt_calGyro+0x280>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7fe fe73 	bl	8000648 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4620      	mov	r0, r4
 8001968:	4629      	mov	r1, r5
 800196a:	f7fe fcb7 	bl	80002dc <__adddf3>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f7ff f93f 	bl	8000bf8 <__aeabi_d2f>
 800197a:	4603      	mov	r3, r0
 800197c:	4a77      	ldr	r2, [pc, #476]	; (8001b5c <interrupt_calGyro+0x2cc>)
 800197e:	6013      	str	r3, [r2, #0]
	anglex += 0.001 * (gyro.omega_x - omegaX_offset); //deg
 8001980:	4b77      	ldr	r3, [pc, #476]	; (8001b60 <interrupt_calGyro+0x2d0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fe07 	bl	8000598 <__aeabi_f2d>
 800198a:	4604      	mov	r4, r0
 800198c:	460d      	mov	r5, r1
 800198e:	4b6d      	ldr	r3, [pc, #436]	; (8001b44 <interrupt_calGyro+0x2b4>)
 8001990:	ed93 7a00 	vldr	s14, [r3]
 8001994:	4b6f      	ldr	r3, [pc, #444]	; (8001b54 <interrupt_calGyro+0x2c4>)
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800199e:	ee17 0a90 	vmov	r0, s15
 80019a2:	f7fe fdf9 	bl	8000598 <__aeabi_f2d>
 80019a6:	a35a      	add	r3, pc, #360	; (adr r3, 8001b10 <interrupt_calGyro+0x280>)
 80019a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ac:	f7fe fe4c 	bl	8000648 <__aeabi_dmul>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4620      	mov	r0, r4
 80019b6:	4629      	mov	r1, r5
 80019b8:	f7fe fc90 	bl	80002dc <__adddf3>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	f7ff f918 	bl	8000bf8 <__aeabi_d2f>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4a65      	ldr	r2, [pc, #404]	; (8001b60 <interrupt_calGyro+0x2d0>)
 80019cc:	6013      	str	r3, [r2, #0]
	//angle_acceleration = (angle_speed - angle_speed0) * 1000; //deg/sec^2
//+0.12*0.02*angle_speed*angle_speed
	gf_accel = (gyro.accel_y - accelY_offset)*ACCEL_COEFFICIENT*1000*GRAVITATION;
 80019ce:	4b5d      	ldr	r3, [pc, #372]	; (8001b44 <interrupt_calGyro+0x2b4>)
 80019d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80019d4:	4b63      	ldr	r3, [pc, #396]	; (8001b64 <interrupt_calGyro+0x2d4>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019de:	ee17 0a90 	vmov	r0, s15
 80019e2:	f7fe fdd9 	bl	8000598 <__aeabi_f2d>
 80019e6:	a34c      	add	r3, pc, #304	; (adr r3, 8001b18 <interrupt_calGyro+0x288>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	f7fe fe2c 	bl	8000648 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	a349      	add	r3, pc, #292	; (adr r3, 8001b20 <interrupt_calGyro+0x290>)
 80019fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fe:	f7fe fe23 	bl	8000648 <__aeabi_dmul>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	a347      	add	r3, pc, #284	; (adr r3, 8001b28 <interrupt_calGyro+0x298>)
 8001a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a10:	f7fe ff44 	bl	800089c <__aeabi_ddiv>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	4b51      	ldr	r3, [pc, #324]	; (8001b68 <interrupt_calGyro+0x2d8>)
 8001a22:	f7fe fe11 	bl	8000648 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	a340      	add	r3, pc, #256	; (adr r3, 8001b30 <interrupt_calGyro+0x2a0>)
 8001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a34:	f7fe ff32 	bl	800089c <__aeabi_ddiv>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	4b49      	ldr	r3, [pc, #292]	; (8001b6c <interrupt_calGyro+0x2dc>)
 8001a46:	f7fe fdff 	bl	8000648 <__aeabi_dmul>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4610      	mov	r0, r2
 8001a50:	4619      	mov	r1, r3
 8001a52:	a339      	add	r3, pc, #228	; (adr r3, 8001b38 <interrupt_calGyro+0x2a8>)
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	f7fe fdf6 	bl	8000648 <__aeabi_dmul>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	f7ff f8c8 	bl	8000bf8 <__aeabi_d2f>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4a41      	ldr	r2, [pc, #260]	; (8001b70 <interrupt_calGyro+0x2e0>)
 8001a6c:	6013      	str	r3, [r2, #0]
	gf_speed += gf_accel * INTERRUPT_TIME;
 8001a6e:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <interrupt_calGyro+0x2e4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fd90 	bl	8000598 <__aeabi_f2d>
 8001a78:	4604      	mov	r4, r0
 8001a7a:	460d      	mov	r5, r1
 8001a7c:	4b3c      	ldr	r3, [pc, #240]	; (8001b70 <interrupt_calGyro+0x2e0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fd89 	bl	8000598 <__aeabi_f2d>
 8001a86:	a322      	add	r3, pc, #136	; (adr r3, 8001b10 <interrupt_calGyro+0x280>)
 8001a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8c:	f7fe fddc 	bl	8000648 <__aeabi_dmul>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4620      	mov	r0, r4
 8001a96:	4629      	mov	r1, r5
 8001a98:	f7fe fc20 	bl	80002dc <__adddf3>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f7ff f8a8 	bl	8000bf8 <__aeabi_d2f>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	4a32      	ldr	r2, [pc, #200]	; (8001b74 <interrupt_calGyro+0x2e4>)
 8001aac:	6013      	str	r3, [r2, #0]
	gf_distance += gf_speed * INTERRUPT_TIME;
 8001aae:	4b32      	ldr	r3, [pc, #200]	; (8001b78 <interrupt_calGyro+0x2e8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fd70 	bl	8000598 <__aeabi_f2d>
 8001ab8:	4604      	mov	r4, r0
 8001aba:	460d      	mov	r5, r1
 8001abc:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <interrupt_calGyro+0x2e4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fd69 	bl	8000598 <__aeabi_f2d>
 8001ac6:	a312      	add	r3, pc, #72	; (adr r3, 8001b10 <interrupt_calGyro+0x280>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f7fe fdbc 	bl	8000648 <__aeabi_dmul>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	f7fe fc00 	bl	80002dc <__adddf3>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f7ff f888 	bl	8000bf8 <__aeabi_d2f>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	4a23      	ldr	r2, [pc, #140]	; (8001b78 <interrupt_calGyro+0x2e8>)
 8001aec:	6013      	str	r3, [r2, #0]




}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bdb0      	pop	{r4, r5, r7, pc}
 8001af6:	bf00      	nop
 8001af8:	70a3d70a 	.word	0x70a3d70a
 8001afc:	3fef0a3d 	.word	0x3fef0a3d
 8001b00:	00000000 	.word	0x00000000
 8001b04:	40acd400 	.word	0x40acd400
 8001b08:	00000000 	.word	0x00000000
 8001b0c:	40ac2000 	.word	0x40ac2000
 8001b10:	d2f1a9fc 	.word	0xd2f1a9fc
 8001b14:	3f50624d 	.word	0x3f50624d
 8001b18:	0fcf80dc 	.word	0x0fcf80dc
 8001b1c:	3ff0a423 	.word	0x3ff0a423
 8001b20:	00000000 	.word	0x00000000
 8001b24:	4078c000 	.word	0x4078c000
 8001b28:	00000000 	.word	0x00000000
 8001b2c:	4077d000 	.word	0x4077d000
 8001b30:	00000000 	.word	0x00000000
 8001b34:	407a7000 	.word	0x407a7000
 8001b38:	3a92a305 	.word	0x3a92a305
 8001b3c:	40239d01 	.word	0x40239d01
 8001b40:	20000290 	.word	0x20000290
 8001b44:	200006e4 	.word	0x200006e4
 8001b48:	20000288 	.word	0x20000288
 8001b4c:	20000268 	.word	0x20000268
 8001b50:	20000270 	.word	0x20000270
 8001b54:	20000284 	.word	0x20000284
 8001b58:	20000274 	.word	0x20000274
 8001b5c:	20000264 	.word	0x20000264
 8001b60:	2000026c 	.word	0x2000026c
 8001b64:	2000028c 	.word	0x2000028c
 8001b68:	40790000 	.word	0x40790000
 8001b6c:	408f4000 	.word	0x408f4000
 8001b70:	20000280 	.word	0x20000280
 8001b74:	20000278 	.word	0x20000278
 8001b78:	2000027c 	.word	0x2000027c
 8001b7c:	00000000 	.word	0x00000000

08001b80 <battcheak>:
/*******************************************************************/
/*	バッテリーの確認				(battcheak)	*/
/*******************************************************************/
/*	バッテリーの残電圧のチェックし、小さい場合は機能の停止を行う．	．						*/
/*******************************************************************/
void battcheak(void){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
int i;
	for(i = 0;i <= 20-1;i++){
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	e00f      	b.n	8001bac <battcheak+0x2c>
		g_V_battery[i]=pl_getbatt();
 8001b8c:	f005 ff74 	bl	8007a78 <pl_getbatt>
 8001b90:	eef0 7a40 	vmov.f32	s15, s0
 8001b94:	4a34      	ldr	r2, [pc, #208]	; (8001c68 <battcheak+0xe8>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	edc3 7a00 	vstr	s15, [r3]
		wait_ms(10);
 8001ba0:	200a      	movs	r0, #10
 8001ba2:	f006 f981 	bl	8007ea8 <wait_ms>
	for(i = 0;i <= 20-1;i++){
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b13      	cmp	r3, #19
 8001bb0:	ddec      	ble.n	8001b8c <battcheak+0xc>
	}

	g_V_battery_mean=0;
 8001bb2:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <battcheak+0xec>)
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
	for(i = 0;i <= 20-1;i++){
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	e010      	b.n	8001be2 <battcheak+0x62>
	g_V_battery_mean+=g_V_battery[i];
 8001bc0:	4a29      	ldr	r2, [pc, #164]	; (8001c68 <battcheak+0xe8>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	ed93 7a00 	vldr	s14, [r3]
 8001bcc:	4b27      	ldr	r3, [pc, #156]	; (8001c6c <battcheak+0xec>)
 8001bce:	edd3 7a00 	vldr	s15, [r3]
 8001bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd6:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <battcheak+0xec>)
 8001bd8:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0;i <= 20-1;i++){
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3301      	adds	r3, #1
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b13      	cmp	r3, #19
 8001be6:	ddeb      	ble.n	8001bc0 <battcheak+0x40>
	}
	g_V_battery_mean/=20;
 8001be8:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <battcheak+0xec>)
 8001bea:	ed93 7a00 	vldr	s14, [r3]
 8001bee:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001bf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bf6:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <battcheak+0xec>)
 8001bf8:	edc3 7a00 	vstr	s15, [r3]
	printf("BATT=%f\n",g_V_battery_mean);
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <battcheak+0xec>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fcc9 	bl	8000598 <__aeabi_f2d>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4819      	ldr	r0, [pc, #100]	; (8001c70 <battcheak+0xf0>)
 8001c0c:	f01e fff6 	bl	8020bfc <iprintf>
	//printf("%f",g_V_battery_mean);
	if(g_V_battery_mean <= BATTLIMIT){
 8001c10:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <battcheak+0xec>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fcbf 	bl	8000598 <__aeabi_f2d>
 8001c1a:	a311      	add	r3, pc, #68	; (adr r3, 8001c60 <battcheak+0xe0>)
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	f7fe ff8e 	bl	8000b40 <__aeabi_dcmple>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d100      	bne.n	8001c2c <battcheak+0xac>
		pl_r_blue_LED(OFF);
		pl_l_blue_LED(OFF);
		wait_ms(500);
		}
	}
}
 8001c2a:	e014      	b.n	8001c56 <battcheak+0xd6>
		pl_r_blue_LED(ON);
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f005 f9ab 	bl	8006f88 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8001c32:	2001      	movs	r0, #1
 8001c34:	f005 f9ba 	bl	8006fac <pl_l_blue_LED>
		wait_ms(500);
 8001c38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c3c:	f006 f934 	bl	8007ea8 <wait_ms>
		pl_r_blue_LED(OFF);
 8001c40:	2000      	movs	r0, #0
 8001c42:	f005 f9a1 	bl	8006f88 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8001c46:	2000      	movs	r0, #0
 8001c48:	f005 f9b0 	bl	8006fac <pl_l_blue_LED>
		wait_ms(500);
 8001c4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c50:	f006 f92a 	bl	8007ea8 <wait_ms>
		pl_r_blue_LED(ON);
 8001c54:	e7ea      	b.n	8001c2c <battcheak+0xac>
}
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	f3af 8000 	nop.w
 8001c60:	9999999a 	.word	0x9999999a
 8001c64:	400d9999 	.word	0x400d9999
 8001c68:	20000484 	.word	0x20000484
 8001c6c:	200004d4 	.word	0x200004d4
 8001c70:	08023440 	.word	0x08023440

08001c74 <interupt_calSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー処理)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を処理する割り込み関数．						*/
/*******************************************************************/
void interupt_calSensor(void){
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
	int j;

	pl_interupt_getSensor();
 8001c7a:	f006 f89b 	bl	8007db4 <pl_interupt_getSensor>

	for (j = 19; j >= 1; j--) {
 8001c7e:	2313      	movs	r3, #19
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	e037      	b.n	8001cf4 <interupt_calSensor+0x80>
		//g_V_battery[j] = g_V_battery[j - 1];
		g_sensor[0][j] = g_sensor[0][j - 1];
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	4a56      	ldr	r2, [pc, #344]	; (8001de4 <interupt_calSensor+0x170>)
 8001c8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c8e:	4955      	ldr	r1, [pc, #340]	; (8001de4 <interupt_calSensor+0x170>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[1][j] = g_sensor[1][j - 1];
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	4a52      	ldr	r2, [pc, #328]	; (8001de4 <interupt_calSensor+0x170>)
 8001c9c:	3314      	adds	r3, #20
 8001c9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ca2:	4950      	ldr	r1, [pc, #320]	; (8001de4 <interupt_calSensor+0x170>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3314      	adds	r3, #20
 8001ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[2][j] = g_sensor[2][j - 1];
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	4a4c      	ldr	r2, [pc, #304]	; (8001de4 <interupt_calSensor+0x170>)
 8001cb2:	3328      	adds	r3, #40	; 0x28
 8001cb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cb8:	494a      	ldr	r1, [pc, #296]	; (8001de4 <interupt_calSensor+0x170>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3328      	adds	r3, #40	; 0x28
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[3][j] = g_sensor[3][j - 1];
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	4a47      	ldr	r2, [pc, #284]	; (8001de4 <interupt_calSensor+0x170>)
 8001cc8:	333c      	adds	r3, #60	; 0x3c
 8001cca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cce:	4945      	ldr	r1, [pc, #276]	; (8001de4 <interupt_calSensor+0x170>)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	333c      	adds	r3, #60	; 0x3c
 8001cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[4][j] = g_sensor[4][j - 1];
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	4a41      	ldr	r2, [pc, #260]	; (8001de4 <interupt_calSensor+0x170>)
 8001cde:	3350      	adds	r3, #80	; 0x50
 8001ce0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ce4:	493f      	ldr	r1, [pc, #252]	; (8001de4 <interupt_calSensor+0x170>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3350      	adds	r3, #80	; 0x50
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 19; j >= 1; j--) {
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	dcc4      	bgt.n	8001c84 <interupt_calSensor+0x10>
	}
	//g_V_battery[0] = g_V_batt;
	g_sensor[0][0] = g_sensor_on[0] - g_sensor_off[0];
 8001cfa:	4b3b      	ldr	r3, [pc, #236]	; (8001de8 <interupt_calSensor+0x174>)
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <interupt_calSensor+0x178>)
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	4a37      	ldr	r2, [pc, #220]	; (8001de4 <interupt_calSensor+0x170>)
 8001d08:	6013      	str	r3, [r2, #0]
	g_sensor[1][0] = g_sensor_on[1] - g_sensor_off[1];
 8001d0a:	4b37      	ldr	r3, [pc, #220]	; (8001de8 <interupt_calSensor+0x174>)
 8001d0c:	885b      	ldrh	r3, [r3, #2]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4b36      	ldr	r3, [pc, #216]	; (8001dec <interupt_calSensor+0x178>)
 8001d12:	885b      	ldrh	r3, [r3, #2]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	4a33      	ldr	r2, [pc, #204]	; (8001de4 <interupt_calSensor+0x170>)
 8001d18:	6513      	str	r3, [r2, #80]	; 0x50
	g_sensor[2][0] = g_sensor_on[2] - g_sensor_off[2];
 8001d1a:	4b33      	ldr	r3, [pc, #204]	; (8001de8 <interupt_calSensor+0x174>)
 8001d1c:	889b      	ldrh	r3, [r3, #4]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b32      	ldr	r3, [pc, #200]	; (8001dec <interupt_calSensor+0x178>)
 8001d22:	889b      	ldrh	r3, [r3, #4]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	4a2f      	ldr	r2, [pc, #188]	; (8001de4 <interupt_calSensor+0x170>)
 8001d28:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	g_sensor[3][0] = g_sensor_on[3] - g_sensor_off[3];
 8001d2c:	4b2e      	ldr	r3, [pc, #184]	; (8001de8 <interupt_calSensor+0x174>)
 8001d2e:	88db      	ldrh	r3, [r3, #6]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <interupt_calSensor+0x178>)
 8001d34:	88db      	ldrh	r3, [r3, #6]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	4a2a      	ldr	r2, [pc, #168]	; (8001de4 <interupt_calSensor+0x170>)
 8001d3a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	g_sensor[4][0] = g_sensor_on[4] - g_sensor_off[4];
 8001d3e:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <interupt_calSensor+0x174>)
 8001d40:	891b      	ldrh	r3, [r3, #8]
 8001d42:	461a      	mov	r2, r3
 8001d44:	4b29      	ldr	r3, [pc, #164]	; (8001dec <interupt_calSensor+0x178>)
 8001d46:	891b      	ldrh	r3, [r3, #8]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	4a26      	ldr	r2, [pc, #152]	; (8001de4 <interupt_calSensor+0x170>)
 8001d4c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	for (j = 0; j <= 4; j++) {
 8001d50:	2300      	movs	r3, #0
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	e03d      	b.n	8001dd2 <interupt_calSensor+0x15e>
		g_sensor_diff[j]=g_sensor[j][0]-g_sensor[j][11];
 8001d56:	4923      	ldr	r1, [pc, #140]	; (8001de4 <interupt_calSensor+0x170>)
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	440b      	add	r3, r1
 8001d64:	6819      	ldr	r1, [r3, #0]
 8001d66:	481f      	ldr	r0, [pc, #124]	; (8001de4 <interupt_calSensor+0x170>)
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	4403      	add	r3, r0
 8001d74:	332c      	adds	r3, #44	; 0x2c
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	1aca      	subs	r2, r1, r3
 8001d7a:	491d      	ldr	r1, [pc, #116]	; (8001df0 <interupt_calSensor+0x17c>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][6];
		g_sensor_mean[j] = (g_sensor[j][0] + g_sensor[j][1] + g_sensor[j][2]) / 3;
 8001d82:	4918      	ldr	r1, [pc, #96]	; (8001de4 <interupt_calSensor+0x170>)
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	440b      	add	r3, r1
 8001d90:	6819      	ldr	r1, [r3, #0]
 8001d92:	4814      	ldr	r0, [pc, #80]	; (8001de4 <interupt_calSensor+0x170>)
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	4403      	add	r3, r0
 8001da0:	3304      	adds	r3, #4
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4419      	add	r1, r3
 8001da6:	480f      	ldr	r0, [pc, #60]	; (8001de4 <interupt_calSensor+0x170>)
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	4403      	add	r3, r0
 8001db4:	3308      	adds	r3, #8
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	440b      	add	r3, r1
 8001dba:	4a0e      	ldr	r2, [pc, #56]	; (8001df4 <interupt_calSensor+0x180>)
 8001dbc:	fb82 1203 	smull	r1, r2, r2, r3
 8001dc0:	17db      	asrs	r3, r3, #31
 8001dc2:	1ad2      	subs	r2, r2, r3
 8001dc4:	490c      	ldr	r1, [pc, #48]	; (8001df8 <interupt_calSensor+0x184>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 0; j <= 4; j++) {
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	ddbe      	ble.n	8001d56 <interupt_calSensor+0xe2>
//	}
//	g_V_battery_mean/=20;



}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200002b8 	.word	0x200002b8
 8001de8:	2000070c 	.word	0x2000070c
 8001dec:	20000718 	.word	0x20000718
 8001df0:	20000448 	.word	0x20000448
 8001df4:	55555556 	.word	0x55555556
 8001df8:	20000470 	.word	0x20000470

08001dfc <Control_mode_Init>:

uint8_t noGoalPillarMode;

float g_V_L,g_V_R;

void Control_mode_Init(void){
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0

	modeacc = 0;
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <Control_mode_Init+0x28>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	701a      	strb	r2, [r3, #0]
	g_MotorEnd_flag=0;
 8001e06:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <Control_mode_Init+0x2c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
	mollifier_timer=0;
 8001e0c:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <Control_mode_Init+0x30>)
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
	noGoalPillarMode=0;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <Control_mode_Init+0x34>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]

}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	20000528 	.word	0x20000528
 8001e28:	20000805 	.word	0x20000805
 8001e2c:	20000800 	.word	0x20000800
 8001e30:	20000529 	.word	0x20000529

08001e34 <get_duty>:


void get_duty(float V_L, float V_R,int *duty_L,int *duty_R) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001e3e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
//トルクの方向決定
// BATT_MEANをいつか可変にしたい願望
	if (V_L >= 0) {
 8001e46:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e52:	db14      	blt.n	8001e7e <get_duty+0x4a>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 8001e54:	2001      	movs	r0, #1
 8001e56:	f005 fd45 	bl	80078e4 <pl_L_DriveMotor_mode>
		*duty_L = (int) (V_L / g_V_battery_mean * MAXMOTOR);
 8001e5a:	4b3d      	ldr	r3, [pc, #244]	; (8001f50 <get_duty+0x11c>)
 8001e5c:	ed93 7a00 	vldr	s14, [r3]
 8001e60:	edd7 6a03 	vldr	s13, [r7, #12]
 8001e64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e68:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001f54 <get_duty+0x120>
 8001e6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e74:	ee17 2a90 	vmov	r2, s15
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	e015      	b.n	8001eaa <get_duty+0x76>
	}
	else{
		pl_L_DriveMotor_mode(MOTOR_BACK);
 8001e7e:	2002      	movs	r0, #2
 8001e80:	f005 fd30 	bl	80078e4 <pl_L_DriveMotor_mode>
	    *duty_L = (int) (-V_L / g_V_battery_mean * MAXMOTOR);
 8001e84:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e88:	eef1 6a67 	vneg.f32	s13, s15
 8001e8c:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <get_duty+0x11c>)
 8001e8e:	ed93 7a00 	vldr	s14, [r3]
 8001e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e96:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001f54 <get_duty+0x120>
 8001e9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ea2:	ee17 2a90 	vmov	r2, s15
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	601a      	str	r2, [r3, #0]
	}
	if (V_R >= 0) {
 8001eaa:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb6:	db14      	blt.n	8001ee2 <get_duty+0xae>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 8001eb8:	2001      	movs	r0, #1
 8001eba:	f005 fd3b 	bl	8007934 <pl_R_DriveMotor_mode>
		*duty_R = (int) (V_R / g_V_battery_mean * MAXMOTOR);
 8001ebe:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <get_duty+0x11c>)
 8001ec0:	ed93 7a00 	vldr	s14, [r3]
 8001ec4:	edd7 6a02 	vldr	s13, [r7, #8]
 8001ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ecc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001f54 <get_duty+0x120>
 8001ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ed8:	ee17 2a90 	vmov	r2, s15
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	e015      	b.n	8001f0e <get_duty+0xda>
	}
	else{
		pl_R_DriveMotor_mode(MOTOR_BACK);
 8001ee2:	2002      	movs	r0, #2
 8001ee4:	f005 fd26 	bl	8007934 <pl_R_DriveMotor_mode>
	    *duty_R = (int) (-V_R / g_V_battery_mean * MAXMOTOR);
 8001ee8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eec:	eef1 6a67 	vneg.f32	s13, s15
 8001ef0:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <get_duty+0x11c>)
 8001ef2:	ed93 7a00 	vldr	s14, [r3]
 8001ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001efa:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001f54 <get_duty+0x120>
 8001efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f06:	ee17 2a90 	vmov	r2, s15
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	601a      	str	r2, [r3, #0]
	}
	*duty_L=*duty_L;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	601a      	str	r2, [r3, #0]
	*duty_R=*duty_R;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	601a      	str	r2, [r3, #0]
	//XX
	if (*duty_L >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f240 628c 	movw	r2, #1676	; 0x68c
 8001f26:	4293      	cmp	r3, r2
 8001f28:	dd03      	ble.n	8001f32 <get_duty+0xfe>
		*duty_L = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f240 628d 	movw	r2, #1677	; 0x68d
 8001f30:	601a      	str	r2, [r3, #0]
//		pl_r_blue_LED(ON);
	}
	if (*duty_R >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f240 628c 	movw	r2, #1676	; 0x68c
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	dd03      	ble.n	8001f46 <get_duty+0x112>
		*duty_R = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f240 628d 	movw	r2, #1677	; 0x68d
 8001f44:	601a      	str	r2, [r3, #0]
//		pl_l_blue_LED(ON);
	}

}
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200004d4 	.word	0x200004d4
 8001f54:	44d1e000 	.word	0x44d1e000

08001f58 <interupt_DriveMotor>:



void interupt_DriveMotor(void){
 8001f58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f5c:	b08c      	sub	sp, #48	; 0x30
 8001f5e:	af02      	add	r7, sp, #8
	int duty_L=0, duty_R=0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
	float V_L=0, V_R=0;
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	623b      	str	r3, [r7, #32]
	float PID_all_L,PID_all_R,PID_s,PID_t;
	float PID_w=0;
 8001f74:	f04f 0300 	mov.w	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
	float feedforward_straight=0,feedforward_turning=0;
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	607b      	str	r3, [r7, #4]



	if (modeacc == 0) {
 8001f86:	4bd2      	ldr	r3, [pc, #840]	; (80022d0 <interupt_DriveMotor+0x378>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d108      	bne.n	8001fa0 <interupt_DriveMotor+0x48>
		g_acc_flag=4;
 8001f8e:	4bd1      	ldr	r3, [pc, #836]	; (80022d4 <interupt_DriveMotor+0x37c>)
 8001f90:	2204      	movs	r2, #4
 8001f92:	701a      	strb	r2, [r3, #0]
		g_WallControl_mode=0;
 8001f94:	4bd0      	ldr	r3, [pc, #832]	; (80022d8 <interupt_DriveMotor+0x380>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 8001f9a:	4bd0      	ldr	r3, [pc, #832]	; (80022dc <interupt_DriveMotor+0x384>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]

	}
	if (modeacc == 1) {
 8001fa0:	4bcb      	ldr	r3, [pc, #812]	; (80022d0 <interupt_DriveMotor+0x378>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	f040 828f 	bne.w	80024c8 <interupt_DriveMotor+0x570>
		g_wallCut_mode=1;
 8001faa:	4bcc      	ldr	r3, [pc, #816]	; (80022dc <interupt_DriveMotor+0x384>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8001fb0:	4bcb      	ldr	r3, [pc, #812]	; (80022e0 <interupt_DriveMotor+0x388>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	4aca      	ldr	r2, [pc, #808]	; (80022e0 <interupt_DriveMotor+0x388>)
 8001fb8:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8001fba:	4bca      	ldr	r3, [pc, #808]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe faea 	bl	8000598 <__aeabi_f2d>
 8001fc4:	4604      	mov	r4, r0
 8001fc6:	460d      	mov	r5, r1
 8001fc8:	4bc6      	ldr	r3, [pc, #792]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fae3 	bl	8000598 <__aeabi_f2d>
 8001fd2:	a3bb      	add	r3, pc, #748	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 8001fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd8:	f7fe fb36 	bl	8000648 <__aeabi_dmul>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4690      	mov	r8, r2
 8001fe2:	4699      	mov	r9, r3
 8001fe4:	4bbf      	ldr	r3, [pc, #764]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe fad5 	bl	8000598 <__aeabi_f2d>
 8001fee:	a3b4      	add	r3, pc, #720	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 8001ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff4:	f7fe fb28 	bl	8000648 <__aeabi_dmul>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	4619      	mov	r1, r3
 8002000:	a3af      	add	r3, pc, #700	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 8002002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002006:	f7fe fb1f 	bl	8000648 <__aeabi_dmul>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4610      	mov	r0, r2
 8002010:	4619      	mov	r1, r3
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800201a:	f7fe fc3f 	bl	800089c <__aeabi_ddiv>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4640      	mov	r0, r8
 8002024:	4649      	mov	r1, r9
 8002026:	f7fe f959 	bl	80002dc <__adddf3>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4620      	mov	r0, r4
 8002030:	4629      	mov	r1, r5
 8002032:	f7fe f953 	bl	80002dc <__adddf3>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	f7fe fddb 	bl	8000bf8 <__aeabi_d2f>
 8002042:	4603      	mov	r3, r0
 8002044:	4aa7      	ldr	r2, [pc, #668]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8002046:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002048:	4ba6      	ldr	r3, [pc, #664]	; (80022e4 <interupt_DriveMotor+0x38c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe faa3 	bl	8000598 <__aeabi_f2d>
 8002052:	4604      	mov	r4, r0
 8002054:	460d      	mov	r5, r1
 8002056:	4ba3      	ldr	r3, [pc, #652]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fa9c 	bl	8000598 <__aeabi_f2d>
 8002060:	a397      	add	r3, pc, #604	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 8002062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002066:	f7fe faef 	bl	8000648 <__aeabi_dmul>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4620      	mov	r0, r4
 8002070:	4629      	mov	r1, r5
 8002072:	f7fe f933 	bl	80002dc <__adddf3>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4610      	mov	r0, r2
 800207c:	4619      	mov	r1, r3
 800207e:	f7fe fdbb 	bl	8000bf8 <__aeabi_d2f>
 8002082:	4603      	mov	r3, r0
 8002084:	4a97      	ldr	r2, [pc, #604]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8002086:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002088:	4b97      	ldr	r3, [pc, #604]	; (80022e8 <interupt_DriveMotor+0x390>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fa83 	bl	8000598 <__aeabi_f2d>
 8002092:	4604      	mov	r4, r0
 8002094:	460d      	mov	r5, r1
 8002096:	4b94      	ldr	r3, [pc, #592]	; (80022e8 <interupt_DriveMotor+0x390>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fa7c 	bl	8000598 <__aeabi_f2d>
 80020a0:	a387      	add	r3, pc, #540	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 80020a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a6:	f7fe facf 	bl	8000648 <__aeabi_dmul>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4690      	mov	r8, r2
 80020b0:	4699      	mov	r9, r3
 80020b2:	4b8d      	ldr	r3, [pc, #564]	; (80022e8 <interupt_DriveMotor+0x390>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fa6e 	bl	8000598 <__aeabi_f2d>
 80020bc:	a380      	add	r3, pc, #512	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 80020be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c2:	f7fe fac1 	bl	8000648 <__aeabi_dmul>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	a37c      	add	r3, pc, #496	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 80020d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d4:	f7fe fab8 	bl	8000648 <__aeabi_dmul>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020e8:	f7fe fbd8 	bl	800089c <__aeabi_ddiv>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4640      	mov	r0, r8
 80020f2:	4649      	mov	r1, r9
 80020f4:	f7fe f8f2 	bl	80002dc <__adddf3>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4620      	mov	r0, r4
 80020fe:	4629      	mov	r1, r5
 8002100:	f7fe f8ec 	bl	80002dc <__adddf3>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4610      	mov	r0, r2
 800210a:	4619      	mov	r1, r3
 800210c:	f7fe fd74 	bl	8000bf8 <__aeabi_d2f>
 8002110:	4603      	mov	r3, r0
 8002112:	4a75      	ldr	r2, [pc, #468]	; (80022e8 <interupt_DriveMotor+0x390>)
 8002114:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002116:	4b74      	ldr	r3, [pc, #464]	; (80022e8 <interupt_DriveMotor+0x390>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fa3c 	bl	8000598 <__aeabi_f2d>
 8002120:	4604      	mov	r4, r0
 8002122:	460d      	mov	r5, r1
 8002124:	4b70      	ldr	r3, [pc, #448]	; (80022e8 <interupt_DriveMotor+0x390>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fa35 	bl	8000598 <__aeabi_f2d>
 800212e:	a364      	add	r3, pc, #400	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 8002130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002134:	f7fe fa88 	bl	8000648 <__aeabi_dmul>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4620      	mov	r0, r4
 800213e:	4629      	mov	r1, r5
 8002140:	f7fe f8cc 	bl	80002dc <__adddf3>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	f7fe fd54 	bl	8000bf8 <__aeabi_d2f>
 8002150:	4603      	mov	r3, r0
 8002152:	4a65      	ldr	r2, [pc, #404]	; (80022e8 <interupt_DriveMotor+0x390>)
 8002154:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_straight,&straight);
 8002156:	4b65      	ldr	r3, [pc, #404]	; (80022ec <interupt_DriveMotor+0x394>)
 8002158:	4a62      	ldr	r2, [pc, #392]	; (80022e4 <interupt_DriveMotor+0x38c>)
 800215a:	9201      	str	r2, [sp, #4]
 800215c:	691a      	ldr	r2, [r3, #16]
 800215e:	9200      	str	r2, [sp, #0]
 8002160:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002162:	f006 f89f 	bl	80082a4 <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002166:	4b5f      	ldr	r3, [pc, #380]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8002168:	edd3 7a00 	vldr	s15, [r3]
 800216c:	4b5e      	ldr	r3, [pc, #376]	; (80022e8 <interupt_DriveMotor+0x390>)
 800216e:	ed93 7a00 	vldr	s14, [r3]
 8002172:	f107 020c 	add.w	r2, r7, #12
 8002176:	f107 0310 	add.w	r3, r7, #16
 800217a:	eef0 0a47 	vmov.f32	s1, s14
 800217e:	eeb0 0a67 	vmov.f32	s0, s15
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f002 fa27 	bl	80045d8 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 800218a:	4b59      	ldr	r3, [pc, #356]	; (80022f0 <interupt_DriveMotor+0x398>)
 800218c:	ed93 7a00 	vldr	s14, [r3]
 8002190:	4b58      	ldr	r3, [pc, #352]	; (80022f4 <interupt_DriveMotor+0x39c>)
 8002192:	edd3 7a00 	vldr	s15, [r3]
 8002196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800219a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800219e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80021a2:	4b50      	ldr	r3, [pc, #320]	; (80022e4 <interupt_DriveMotor+0x38c>)
 80021a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80021a8:	4b53      	ldr	r3, [pc, #332]	; (80022f8 <interupt_DriveMotor+0x3a0>)
 80021aa:	edd3 6a00 	vldr	s13, [r3]
 80021ae:	4b4e      	ldr	r3, [pc, #312]	; (80022e8 <interupt_DriveMotor+0x390>)
 80021b0:	ed93 6a01 	vldr	s12, [r3, #4]
 80021b4:	1d3a      	adds	r2, r7, #4
 80021b6:	f107 0308 	add.w	r3, r7, #8
 80021ba:	eef0 1a46 	vmov.f32	s3, s12
 80021be:	eeb0 1a66 	vmov.f32	s2, s13
 80021c2:	4611      	mov	r1, r2
 80021c4:	eef0 0a67 	vmov.f32	s1, s15
 80021c8:	eeb0 0a47 	vmov.f32	s0, s14
 80021cc:	4618      	mov	r0, r3
 80021ce:	f001 ff57 	bl	8004080 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		PID_w = calWallConrol();
 80021d2:	f002 fc19 	bl	8004a08 <calWallConrol>
 80021d6:	ed87 0a07 	vstr	s0, [r7, #28]
		V_L = PID_s-PID_t-PID_w+feedforward_straight-feedforward_turning;
 80021da:	ed97 7a04 	vldr	s14, [r7, #16]
 80021de:	edd7 7a03 	vldr	s15, [r7, #12]
 80021e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80021ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80021f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80021fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021fe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+PID_w+feedforward_straight+feedforward_turning;
 8002202:	ed97 7a04 	vldr	s14, [r7, #16]
 8002206:	edd7 7a03 	vldr	s15, [r7, #12]
 800220a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800220e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002212:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002216:	edd7 7a02 	vldr	s15, [r7, #8]
 800221a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800221e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002226:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 800222a:	ed97 7a04 	vldr	s14, [r7, #16]
 800222e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002236:	ee17 0a90 	vmov	r0, s15
 800223a:	f7fe f9ad 	bl	8000598 <__aeabi_f2d>
 800223e:	4604      	mov	r4, r0
 8002240:	460d      	mov	r5, r1
 8002242:	4b2e      	ldr	r3, [pc, #184]	; (80022fc <interupt_DriveMotor+0x3a4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe f9a6 	bl	8000598 <__aeabi_f2d>
 800224c:	a31e      	add	r3, pc, #120	; (adr r3, 80022c8 <interupt_DriveMotor+0x370>)
 800224e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002252:	f7fe f9f9 	bl	8000648 <__aeabi_dmul>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4620      	mov	r0, r4
 800225c:	4629      	mov	r1, r5
 800225e:	f7fe fc83 	bl	8000b68 <__aeabi_dcmpgt>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 808d 	beq.w	8002384 <interupt_DriveMotor+0x42c>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 800226a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800226c:	f7fe f994 	bl	8000598 <__aeabi_f2d>
 8002270:	4604      	mov	r4, r0
 8002272:	460d      	mov	r5, r1
 8002274:	4b21      	ldr	r3, [pc, #132]	; (80022fc <interupt_DriveMotor+0x3a4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe f98d 	bl	8000598 <__aeabi_f2d>
 800227e:	a312      	add	r3, pc, #72	; (adr r3, 80022c8 <interupt_DriveMotor+0x370>)
 8002280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002284:	f7fe f9e0 	bl	8000648 <__aeabi_dmul>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	4690      	mov	r8, r2
 800228e:	4699      	mov	r9, r3
 8002290:	ed97 7a04 	vldr	s14, [r7, #16]
 8002294:	edd7 7a02 	vldr	s15, [r7, #8]
 8002298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229c:	ee17 0a90 	vmov	r0, s15
 80022a0:	f7fe f97a 	bl	8000598 <__aeabi_f2d>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4640      	mov	r0, r8
 80022aa:	4649      	mov	r1, r9
 80022ac:	f7fe f814 	bl	80002d8 <__aeabi_dsub>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4620      	mov	r0, r4
 80022b6:	4629      	mov	r1, r5
 80022b8:	e022      	b.n	8002300 <interupt_DriveMotor+0x3a8>
 80022ba:	bf00      	nop
 80022bc:	f3af 8000 	nop.w
 80022c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80022c4:	3f50624d 	.word	0x3f50624d
 80022c8:	d916872b 	.word	0xd916872b
 80022cc:	3feff7ce 	.word	0x3feff7ce
 80022d0:	20000528 	.word	0x20000528
 80022d4:	20000804 	.word	0x20000804
 80022d8:	20000590 	.word	0x20000590
 80022dc:	20000592 	.word	0x20000592
 80022e0:	20000524 	.word	0x20000524
 80022e4:	200004d8 	.word	0x200004d8
 80022e8:	200004e4 	.word	0x200004e4
 80022ec:	200004f0 	.word	0x200004f0
 80022f0:	20000238 	.word	0x20000238
 80022f4:	2000023c 	.word	0x2000023c
 80022f8:	20000268 	.word	0x20000268
 80022fc:	200004d4 	.word	0x200004d4
 8002300:	f7fd ffec 	bl	80002dc <__adddf3>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	f7fe fc74 	bl	8000bf8 <__aeabi_d2f>
 8002310:	4603      	mov	r3, r0
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002314:	6a38      	ldr	r0, [r7, #32]
 8002316:	f7fe f93f 	bl	8000598 <__aeabi_f2d>
 800231a:	4604      	mov	r4, r0
 800231c:	460d      	mov	r5, r1
 800231e:	4b18      	ldr	r3, [pc, #96]	; (8002380 <interupt_DriveMotor+0x428>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe f938 	bl	8000598 <__aeabi_f2d>
 8002328:	a313      	add	r3, pc, #76	; (adr r3, 8002378 <interupt_DriveMotor+0x420>)
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	f7fe f98b 	bl	8000648 <__aeabi_dmul>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4690      	mov	r8, r2
 8002338:	4699      	mov	r9, r3
 800233a:	ed97 7a04 	vldr	s14, [r7, #16]
 800233e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002346:	ee17 0a90 	vmov	r0, s15
 800234a:	f7fe f925 	bl	8000598 <__aeabi_f2d>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	4640      	mov	r0, r8
 8002354:	4649      	mov	r1, r9
 8002356:	f7fd ffbf 	bl	80002d8 <__aeabi_dsub>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4620      	mov	r0, r4
 8002360:	4629      	mov	r1, r5
 8002362:	f7fd ffbb 	bl	80002dc <__adddf3>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4610      	mov	r0, r2
 800236c:	4619      	mov	r1, r3
 800236e:	f7fe fc43 	bl	8000bf8 <__aeabi_d2f>
 8002372:	4603      	mov	r3, r0
 8002374:	623b      	str	r3, [r7, #32]
 8002376:	e095      	b.n	80024a4 <interupt_DriveMotor+0x54c>
 8002378:	d916872b 	.word	0xd916872b
 800237c:	3feff7ce 	.word	0x3feff7ce
 8002380:	200004d4 	.word	0x200004d4
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002384:	ed97 7a04 	vldr	s14, [r7, #16]
 8002388:	edd7 7a02 	vldr	s15, [r7, #8]
 800238c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002390:	ee17 0a90 	vmov	r0, s15
 8002394:	f7fe f900 	bl	8000598 <__aeabi_f2d>
 8002398:	4604      	mov	r4, r0
 800239a:	460d      	mov	r5, r1
 800239c:	4bce      	ldr	r3, [pc, #824]	; (80026d8 <interupt_DriveMotor+0x780>)
 800239e:	edd3 7a00 	vldr	s15, [r3]
 80023a2:	eef1 7a67 	vneg.f32	s15, s15
 80023a6:	ee17 3a90 	vmov	r3, s15
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe f8f4 	bl	8000598 <__aeabi_f2d>
 80023b0:	a3c5      	add	r3, pc, #788	; (adr r3, 80026c8 <interupt_DriveMotor+0x770>)
 80023b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b6:	f7fe f947 	bl	8000648 <__aeabi_dmul>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4620      	mov	r0, r4
 80023c0:	4629      	mov	r1, r5
 80023c2:	f7fe fbb3 	bl	8000b2c <__aeabi_dcmplt>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d06b      	beq.n	80024a4 <interupt_DriveMotor+0x54c>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80023cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023ce:	f7fe f8e3 	bl	8000598 <__aeabi_f2d>
 80023d2:	4604      	mov	r4, r0
 80023d4:	460d      	mov	r5, r1
 80023d6:	4bc0      	ldr	r3, [pc, #768]	; (80026d8 <interupt_DriveMotor+0x780>)
 80023d8:	edd3 7a00 	vldr	s15, [r3]
 80023dc:	eef1 7a67 	vneg.f32	s15, s15
 80023e0:	ee17 3a90 	vmov	r3, s15
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe f8d7 	bl	8000598 <__aeabi_f2d>
 80023ea:	a3b7      	add	r3, pc, #732	; (adr r3, 80026c8 <interupt_DriveMotor+0x770>)
 80023ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f0:	f7fe f92a 	bl	8000648 <__aeabi_dmul>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4690      	mov	r8, r2
 80023fa:	4699      	mov	r9, r3
 80023fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8002400:	edd7 7a02 	vldr	s15, [r7, #8]
 8002404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002408:	ee17 0a90 	vmov	r0, s15
 800240c:	f7fe f8c4 	bl	8000598 <__aeabi_f2d>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4640      	mov	r0, r8
 8002416:	4649      	mov	r1, r9
 8002418:	f7fd ff5e 	bl	80002d8 <__aeabi_dsub>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4620      	mov	r0, r4
 8002422:	4629      	mov	r1, r5
 8002424:	f7fd ff5a 	bl	80002dc <__adddf3>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
 8002430:	f7fe fbe2 	bl	8000bf8 <__aeabi_d2f>
 8002434:	4603      	mov	r3, r0
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002438:	6a38      	ldr	r0, [r7, #32]
 800243a:	f7fe f8ad 	bl	8000598 <__aeabi_f2d>
 800243e:	4604      	mov	r4, r0
 8002440:	460d      	mov	r5, r1
 8002442:	4ba5      	ldr	r3, [pc, #660]	; (80026d8 <interupt_DriveMotor+0x780>)
 8002444:	edd3 7a00 	vldr	s15, [r3]
 8002448:	eef1 7a67 	vneg.f32	s15, s15
 800244c:	ee17 3a90 	vmov	r3, s15
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe f8a1 	bl	8000598 <__aeabi_f2d>
 8002456:	a39c      	add	r3, pc, #624	; (adr r3, 80026c8 <interupt_DriveMotor+0x770>)
 8002458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245c:	f7fe f8f4 	bl	8000648 <__aeabi_dmul>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4690      	mov	r8, r2
 8002466:	4699      	mov	r9, r3
 8002468:	ed97 7a04 	vldr	s14, [r7, #16]
 800246c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002474:	ee17 0a90 	vmov	r0, s15
 8002478:	f7fe f88e 	bl	8000598 <__aeabi_f2d>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4640      	mov	r0, r8
 8002482:	4649      	mov	r1, r9
 8002484:	f7fd ff28 	bl	80002d8 <__aeabi_dsub>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4620      	mov	r0, r4
 800248e:	4629      	mov	r1, r5
 8002490:	f7fd ff24 	bl	80002dc <__adddf3>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	f7fe fbac 	bl	8000bf8 <__aeabi_d2f>
 80024a0:	4603      	mov	r3, r0
 80024a2:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 80024a4:	f107 0214 	add.w	r2, r7, #20
 80024a8:	f107 0318 	add.w	r3, r7, #24
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	edd7 0a08 	vldr	s1, [r7, #32]
 80024b4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80024b8:	f7ff fcbc 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4611      	mov	r1, r2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f005 fa78 	bl	80079b8 <pl_DriveMotor_duty>
	}
	if (modeacc == 2 || modeacc == 4) {//旋回とスラローム
 80024c8:	4b84      	ldr	r3, [pc, #528]	; (80026dc <interupt_DriveMotor+0x784>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d004      	beq.n	80024da <interupt_DriveMotor+0x582>
 80024d0:	4b82      	ldr	r3, [pc, #520]	; (80026dc <interupt_DriveMotor+0x784>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	f040 8287 	bne.w	80029e8 <interupt_DriveMotor+0xa90>
		g_WallControl_mode=0;
 80024da:	4b81      	ldr	r3, [pc, #516]	; (80026e0 <interupt_DriveMotor+0x788>)
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 80024e0:	4b80      	ldr	r3, [pc, #512]	; (80026e4 <interupt_DriveMotor+0x78c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 80024e6:	4b80      	ldr	r3, [pc, #512]	; (80026e8 <interupt_DriveMotor+0x790>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	3301      	adds	r3, #1
 80024ec:	4a7e      	ldr	r2, [pc, #504]	; (80026e8 <interupt_DriveMotor+0x790>)
 80024ee:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80024f0:	4b7e      	ldr	r3, [pc, #504]	; (80026ec <interupt_DriveMotor+0x794>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe f84f 	bl	8000598 <__aeabi_f2d>
 80024fa:	4604      	mov	r4, r0
 80024fc:	460d      	mov	r5, r1
 80024fe:	4b7b      	ldr	r3, [pc, #492]	; (80026ec <interupt_DriveMotor+0x794>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe f848 	bl	8000598 <__aeabi_f2d>
 8002508:	a371      	add	r3, pc, #452	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 800250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250e:	f7fe f89b 	bl	8000648 <__aeabi_dmul>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4690      	mov	r8, r2
 8002518:	4699      	mov	r9, r3
 800251a:	4b74      	ldr	r3, [pc, #464]	; (80026ec <interupt_DriveMotor+0x794>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe f83a 	bl	8000598 <__aeabi_f2d>
 8002524:	a36a      	add	r3, pc, #424	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 8002526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252a:	f7fe f88d 	bl	8000648 <__aeabi_dmul>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4610      	mov	r0, r2
 8002534:	4619      	mov	r1, r3
 8002536:	a366      	add	r3, pc, #408	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 8002538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253c:	f7fe f884 	bl	8000648 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002550:	f7fe f9a4 	bl	800089c <__aeabi_ddiv>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4640      	mov	r0, r8
 800255a:	4649      	mov	r1, r9
 800255c:	f7fd febe 	bl	80002dc <__adddf3>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4620      	mov	r0, r4
 8002566:	4629      	mov	r1, r5
 8002568:	f7fd feb8 	bl	80002dc <__adddf3>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	f7fe fb40 	bl	8000bf8 <__aeabi_d2f>
 8002578:	4603      	mov	r3, r0
 800257a:	4a5c      	ldr	r2, [pc, #368]	; (80026ec <interupt_DriveMotor+0x794>)
 800257c:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 800257e:	4b5b      	ldr	r3, [pc, #364]	; (80026ec <interupt_DriveMotor+0x794>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe f808 	bl	8000598 <__aeabi_f2d>
 8002588:	4604      	mov	r4, r0
 800258a:	460d      	mov	r5, r1
 800258c:	4b57      	ldr	r3, [pc, #348]	; (80026ec <interupt_DriveMotor+0x794>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4618      	mov	r0, r3
 8002592:	f7fe f801 	bl	8000598 <__aeabi_f2d>
 8002596:	a34e      	add	r3, pc, #312	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 8002598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259c:	f7fe f854 	bl	8000648 <__aeabi_dmul>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4620      	mov	r0, r4
 80025a6:	4629      	mov	r1, r5
 80025a8:	f7fd fe98 	bl	80002dc <__adddf3>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	f7fe fb20 	bl	8000bf8 <__aeabi_d2f>
 80025b8:	4603      	mov	r3, r0
 80025ba:	4a4c      	ldr	r2, [pc, #304]	; (80026ec <interupt_DriveMotor+0x794>)
 80025bc:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80025be:	4b4c      	ldr	r3, [pc, #304]	; (80026f0 <interupt_DriveMotor+0x798>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fd ffe8 	bl	8000598 <__aeabi_f2d>
 80025c8:	4604      	mov	r4, r0
 80025ca:	460d      	mov	r5, r1
 80025cc:	4b48      	ldr	r3, [pc, #288]	; (80026f0 <interupt_DriveMotor+0x798>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fd ffe1 	bl	8000598 <__aeabi_f2d>
 80025d6:	a33e      	add	r3, pc, #248	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 80025d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025dc:	f7fe f834 	bl	8000648 <__aeabi_dmul>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4690      	mov	r8, r2
 80025e6:	4699      	mov	r9, r3
 80025e8:	4b41      	ldr	r3, [pc, #260]	; (80026f0 <interupt_DriveMotor+0x798>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fd ffd3 	bl	8000598 <__aeabi_f2d>
 80025f2:	a337      	add	r3, pc, #220	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 80025f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f8:	f7fe f826 	bl	8000648 <__aeabi_dmul>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4610      	mov	r0, r2
 8002602:	4619      	mov	r1, r3
 8002604:	a332      	add	r3, pc, #200	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 8002606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260a:	f7fe f81d 	bl	8000648 <__aeabi_dmul>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4610      	mov	r0, r2
 8002614:	4619      	mov	r1, r3
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800261e:	f7fe f93d 	bl	800089c <__aeabi_ddiv>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4640      	mov	r0, r8
 8002628:	4649      	mov	r1, r9
 800262a:	f7fd fe57 	bl	80002dc <__adddf3>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4620      	mov	r0, r4
 8002634:	4629      	mov	r1, r5
 8002636:	f7fd fe51 	bl	80002dc <__adddf3>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4610      	mov	r0, r2
 8002640:	4619      	mov	r1, r3
 8002642:	f7fe fad9 	bl	8000bf8 <__aeabi_d2f>
 8002646:	4603      	mov	r3, r0
 8002648:	4a29      	ldr	r2, [pc, #164]	; (80026f0 <interupt_DriveMotor+0x798>)
 800264a:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 800264c:	4b28      	ldr	r3, [pc, #160]	; (80026f0 <interupt_DriveMotor+0x798>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7fd ffa1 	bl	8000598 <__aeabi_f2d>
 8002656:	4604      	mov	r4, r0
 8002658:	460d      	mov	r5, r1
 800265a:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <interupt_DriveMotor+0x798>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4618      	mov	r0, r3
 8002660:	f7fd ff9a 	bl	8000598 <__aeabi_f2d>
 8002664:	a31a      	add	r3, pc, #104	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 8002666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266a:	f7fd ffed 	bl	8000648 <__aeabi_dmul>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4620      	mov	r0, r4
 8002674:	4629      	mov	r1, r5
 8002676:	f7fd fe31 	bl	80002dc <__adddf3>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	4610      	mov	r0, r2
 8002680:	4619      	mov	r1, r3
 8002682:	f7fe fab9 	bl	8000bf8 <__aeabi_d2f>
 8002686:	4603      	mov	r3, r0
 8002688:	4a19      	ldr	r2, [pc, #100]	; (80026f0 <interupt_DriveMotor+0x798>)
 800268a:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_turning,&turning);
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <interupt_DriveMotor+0x79c>)
 800268e:	4a18      	ldr	r2, [pc, #96]	; (80026f0 <interupt_DriveMotor+0x798>)
 8002690:	9201      	str	r2, [sp, #4]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002698:	f005 fe04 	bl	80082a4 <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 800269c:	4b13      	ldr	r3, [pc, #76]	; (80026ec <interupt_DriveMotor+0x794>)
 800269e:	edd3 7a00 	vldr	s15, [r3]
 80026a2:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <interupt_DriveMotor+0x798>)
 80026a4:	ed93 7a00 	vldr	s14, [r3]
 80026a8:	f107 020c 	add.w	r2, r7, #12
 80026ac:	f107 0310 	add.w	r3, r7, #16
 80026b0:	eef0 0a47 	vmov.f32	s1, s14
 80026b4:	eeb0 0a67 	vmov.f32	s0, s15
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f001 ff8c 	bl	80045d8 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 80026c0:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <interupt_DriveMotor+0x7a0>)
 80026c2:	ed93 7a00 	vldr	s14, [r3]
 80026c6:	e019      	b.n	80026fc <interupt_DriveMotor+0x7a4>
 80026c8:	d916872b 	.word	0xd916872b
 80026cc:	3feff7ce 	.word	0x3feff7ce
 80026d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80026d4:	3f50624d 	.word	0x3f50624d
 80026d8:	200004d4 	.word	0x200004d4
 80026dc:	20000528 	.word	0x20000528
 80026e0:	20000590 	.word	0x20000590
 80026e4:	20000592 	.word	0x20000592
 80026e8:	20000524 	.word	0x20000524
 80026ec:	200004d8 	.word	0x200004d8
 80026f0:	200004e4 	.word	0x200004e4
 80026f4:	20000504 	.word	0x20000504
 80026f8:	20000238 	.word	0x20000238
 80026fc:	4b64      	ldr	r3, [pc, #400]	; (8002890 <interupt_DriveMotor+0x938>)
 80026fe:	edd3 7a00 	vldr	s15, [r3]
 8002702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002706:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800270a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800270e:	4b61      	ldr	r3, [pc, #388]	; (8002894 <interupt_DriveMotor+0x93c>)
 8002710:	edd3 7a01 	vldr	s15, [r3, #4]
 8002714:	4b60      	ldr	r3, [pc, #384]	; (8002898 <interupt_DriveMotor+0x940>)
 8002716:	edd3 6a00 	vldr	s13, [r3]
 800271a:	4b60      	ldr	r3, [pc, #384]	; (800289c <interupt_DriveMotor+0x944>)
 800271c:	ed93 6a01 	vldr	s12, [r3, #4]
 8002720:	1d3a      	adds	r2, r7, #4
 8002722:	f107 0308 	add.w	r3, r7, #8
 8002726:	eef0 1a46 	vmov.f32	s3, s12
 800272a:	eeb0 1a66 	vmov.f32	s2, s13
 800272e:	4611      	mov	r1, r2
 8002730:	eef0 0a67 	vmov.f32	s1, s15
 8002734:	eeb0 0a47 	vmov.f32	s0, s14
 8002738:	4618      	mov	r0, r3
 800273a:	f001 fca1 	bl	8004080 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 800273e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002742:	edd7 7a03 	vldr	s15, [r7, #12]
 8002746:	ee37 7a67 	vsub.f32	s14, s14, s15
 800274a:	edd7 7a02 	vldr	s15, [r7, #8]
 800274e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002752:	edd7 7a01 	vldr	s15, [r7, #4]
 8002756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800275a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 800275e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002762:	edd7 7a03 	vldr	s15, [r7, #12]
 8002766:	ee37 7a27 	vadd.f32	s14, s14, s15
 800276a:	edd7 7a02 	vldr	s15, [r7, #8]
 800276e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002772:	edd7 7a01 	vldr	s15, [r7, #4]
 8002776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800277a:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 800277e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002782:	edd7 7a02 	vldr	s15, [r7, #8]
 8002786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800278a:	ee17 0a90 	vmov	r0, s15
 800278e:	f7fd ff03 	bl	8000598 <__aeabi_f2d>
 8002792:	4604      	mov	r4, r0
 8002794:	460d      	mov	r5, r1
 8002796:	4b42      	ldr	r3, [pc, #264]	; (80028a0 <interupt_DriveMotor+0x948>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7fd fefc 	bl	8000598 <__aeabi_f2d>
 80027a0:	a339      	add	r3, pc, #228	; (adr r3, 8002888 <interupt_DriveMotor+0x930>)
 80027a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a6:	f7fd ff4f 	bl	8000648 <__aeabi_dmul>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4620      	mov	r0, r4
 80027b0:	4629      	mov	r1, r5
 80027b2:	f7fe f9d9 	bl	8000b68 <__aeabi_dcmpgt>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d073      	beq.n	80028a4 <interupt_DriveMotor+0x94c>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80027bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027be:	f7fd feeb 	bl	8000598 <__aeabi_f2d>
 80027c2:	4604      	mov	r4, r0
 80027c4:	460d      	mov	r5, r1
 80027c6:	4b36      	ldr	r3, [pc, #216]	; (80028a0 <interupt_DriveMotor+0x948>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fd fee4 	bl	8000598 <__aeabi_f2d>
 80027d0:	a32d      	add	r3, pc, #180	; (adr r3, 8002888 <interupt_DriveMotor+0x930>)
 80027d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d6:	f7fd ff37 	bl	8000648 <__aeabi_dmul>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4690      	mov	r8, r2
 80027e0:	4699      	mov	r9, r3
 80027e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80027e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80027ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ee:	ee17 0a90 	vmov	r0, s15
 80027f2:	f7fd fed1 	bl	8000598 <__aeabi_f2d>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4640      	mov	r0, r8
 80027fc:	4649      	mov	r1, r9
 80027fe:	f7fd fd6b 	bl	80002d8 <__aeabi_dsub>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4620      	mov	r0, r4
 8002808:	4629      	mov	r1, r5
 800280a:	f7fd fd67 	bl	80002dc <__adddf3>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4610      	mov	r0, r2
 8002814:	4619      	mov	r1, r3
 8002816:	f7fe f9ef 	bl	8000bf8 <__aeabi_d2f>
 800281a:	4603      	mov	r3, r0
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 800281e:	6a38      	ldr	r0, [r7, #32]
 8002820:	f7fd feba 	bl	8000598 <__aeabi_f2d>
 8002824:	4604      	mov	r4, r0
 8002826:	460d      	mov	r5, r1
 8002828:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <interupt_DriveMotor+0x948>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7fd feb3 	bl	8000598 <__aeabi_f2d>
 8002832:	a315      	add	r3, pc, #84	; (adr r3, 8002888 <interupt_DriveMotor+0x930>)
 8002834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002838:	f7fd ff06 	bl	8000648 <__aeabi_dmul>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4690      	mov	r8, r2
 8002842:	4699      	mov	r9, r3
 8002844:	ed97 7a04 	vldr	s14, [r7, #16]
 8002848:	edd7 7a02 	vldr	s15, [r7, #8]
 800284c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002850:	ee17 0a90 	vmov	r0, s15
 8002854:	f7fd fea0 	bl	8000598 <__aeabi_f2d>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4640      	mov	r0, r8
 800285e:	4649      	mov	r1, r9
 8002860:	f7fd fd3a 	bl	80002d8 <__aeabi_dsub>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	4620      	mov	r0, r4
 800286a:	4629      	mov	r1, r5
 800286c:	f7fd fd36 	bl	80002dc <__adddf3>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4610      	mov	r0, r2
 8002876:	4619      	mov	r1, r3
 8002878:	f7fe f9be 	bl	8000bf8 <__aeabi_d2f>
 800287c:	4603      	mov	r3, r0
 800287e:	623b      	str	r3, [r7, #32]
 8002880:	e0a0      	b.n	80029c4 <interupt_DriveMotor+0xa6c>
 8002882:	bf00      	nop
 8002884:	f3af 8000 	nop.w
 8002888:	d916872b 	.word	0xd916872b
 800288c:	3feff7ce 	.word	0x3feff7ce
 8002890:	2000023c 	.word	0x2000023c
 8002894:	200004d8 	.word	0x200004d8
 8002898:	20000268 	.word	0x20000268
 800289c:	200004e4 	.word	0x200004e4
 80028a0:	200004d4 	.word	0x200004d4
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 80028a4:	ed97 7a04 	vldr	s14, [r7, #16]
 80028a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80028ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b0:	ee17 0a90 	vmov	r0, s15
 80028b4:	f7fd fe70 	bl	8000598 <__aeabi_f2d>
 80028b8:	4604      	mov	r4, r0
 80028ba:	460d      	mov	r5, r1
 80028bc:	4bd6      	ldr	r3, [pc, #856]	; (8002c18 <interupt_DriveMotor+0xcc0>)
 80028be:	edd3 7a00 	vldr	s15, [r3]
 80028c2:	eef1 7a67 	vneg.f32	s15, s15
 80028c6:	ee17 3a90 	vmov	r3, s15
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd fe64 	bl	8000598 <__aeabi_f2d>
 80028d0:	a3cd      	add	r3, pc, #820	; (adr r3, 8002c08 <interupt_DriveMotor+0xcb0>)
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	f7fd feb7 	bl	8000648 <__aeabi_dmul>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4620      	mov	r0, r4
 80028e0:	4629      	mov	r1, r5
 80028e2:	f7fe f923 	bl	8000b2c <__aeabi_dcmplt>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d06b      	beq.n	80029c4 <interupt_DriveMotor+0xa6c>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80028ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028ee:	f7fd fe53 	bl	8000598 <__aeabi_f2d>
 80028f2:	4604      	mov	r4, r0
 80028f4:	460d      	mov	r5, r1
 80028f6:	4bc8      	ldr	r3, [pc, #800]	; (8002c18 <interupt_DriveMotor+0xcc0>)
 80028f8:	edd3 7a00 	vldr	s15, [r3]
 80028fc:	eef1 7a67 	vneg.f32	s15, s15
 8002900:	ee17 3a90 	vmov	r3, s15
 8002904:	4618      	mov	r0, r3
 8002906:	f7fd fe47 	bl	8000598 <__aeabi_f2d>
 800290a:	a3bf      	add	r3, pc, #764	; (adr r3, 8002c08 <interupt_DriveMotor+0xcb0>)
 800290c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002910:	f7fd fe9a 	bl	8000648 <__aeabi_dmul>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4690      	mov	r8, r2
 800291a:	4699      	mov	r9, r3
 800291c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002920:	edd7 7a02 	vldr	s15, [r7, #8]
 8002924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002928:	ee17 0a90 	vmov	r0, s15
 800292c:	f7fd fe34 	bl	8000598 <__aeabi_f2d>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4640      	mov	r0, r8
 8002936:	4649      	mov	r1, r9
 8002938:	f7fd fcce 	bl	80002d8 <__aeabi_dsub>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4620      	mov	r0, r4
 8002942:	4629      	mov	r1, r5
 8002944:	f7fd fcca 	bl	80002dc <__adddf3>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4610      	mov	r0, r2
 800294e:	4619      	mov	r1, r3
 8002950:	f7fe f952 	bl	8000bf8 <__aeabi_d2f>
 8002954:	4603      	mov	r3, r0
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002958:	6a38      	ldr	r0, [r7, #32]
 800295a:	f7fd fe1d 	bl	8000598 <__aeabi_f2d>
 800295e:	4604      	mov	r4, r0
 8002960:	460d      	mov	r5, r1
 8002962:	4bad      	ldr	r3, [pc, #692]	; (8002c18 <interupt_DriveMotor+0xcc0>)
 8002964:	edd3 7a00 	vldr	s15, [r3]
 8002968:	eef1 7a67 	vneg.f32	s15, s15
 800296c:	ee17 3a90 	vmov	r3, s15
 8002970:	4618      	mov	r0, r3
 8002972:	f7fd fe11 	bl	8000598 <__aeabi_f2d>
 8002976:	a3a4      	add	r3, pc, #656	; (adr r3, 8002c08 <interupt_DriveMotor+0xcb0>)
 8002978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297c:	f7fd fe64 	bl	8000648 <__aeabi_dmul>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4690      	mov	r8, r2
 8002986:	4699      	mov	r9, r3
 8002988:	ed97 7a04 	vldr	s14, [r7, #16]
 800298c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002994:	ee17 0a90 	vmov	r0, s15
 8002998:	f7fd fdfe 	bl	8000598 <__aeabi_f2d>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4640      	mov	r0, r8
 80029a2:	4649      	mov	r1, r9
 80029a4:	f7fd fc98 	bl	80002d8 <__aeabi_dsub>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4620      	mov	r0, r4
 80029ae:	4629      	mov	r1, r5
 80029b0:	f7fd fc94 	bl	80002dc <__adddf3>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4610      	mov	r0, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	f7fe f91c 	bl	8000bf8 <__aeabi_d2f>
 80029c0:	4603      	mov	r3, r0
 80029c2:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 80029c4:	f107 0214 	add.w	r2, r7, #20
 80029c8:	f107 0318 	add.w	r3, r7, #24
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	edd7 0a08 	vldr	s1, [r7, #32]
 80029d4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80029d8:	f7ff fa2c 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	4611      	mov	r1, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f004 ffe8 	bl	80079b8 <pl_DriveMotor_duty>
	}
	if (modeacc == 3) {//宴会芸
 80029e8:	4b8c      	ldr	r3, [pc, #560]	; (8002c1c <interupt_DriveMotor+0xcc4>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	f040 8137 	bne.w	8002c60 <interupt_DriveMotor+0xd08>
		g_WallControl_mode=0;
 80029f2:	4b8b      	ldr	r3, [pc, #556]	; (8002c20 <interupt_DriveMotor+0xcc8>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 80029f8:	4b8a      	ldr	r3, [pc, #552]	; (8002c24 <interupt_DriveMotor+0xccc>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 80029fe:	4b8a      	ldr	r3, [pc, #552]	; (8002c28 <interupt_DriveMotor+0xcd0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	3301      	adds	r3, #1
 8002a04:	4a88      	ldr	r2, [pc, #544]	; (8002c28 <interupt_DriveMotor+0xcd0>)
 8002a06:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002a08:	4b88      	ldr	r3, [pc, #544]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fd fdc3 	bl	8000598 <__aeabi_f2d>
 8002a12:	4604      	mov	r4, r0
 8002a14:	460d      	mov	r5, r1
 8002a16:	4b85      	ldr	r3, [pc, #532]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd fdbc 	bl	8000598 <__aeabi_f2d>
 8002a20:	a37b      	add	r3, pc, #492	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a26:	f7fd fe0f 	bl	8000648 <__aeabi_dmul>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4690      	mov	r8, r2
 8002a30:	4699      	mov	r9, r3
 8002a32:	4b7e      	ldr	r3, [pc, #504]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fd fdae 	bl	8000598 <__aeabi_f2d>
 8002a3c:	a374      	add	r3, pc, #464	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a42:	f7fd fe01 	bl	8000648 <__aeabi_dmul>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	a370      	add	r3, pc, #448	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a54:	f7fd fdf8 	bl	8000648 <__aeabi_dmul>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a68:	f7fd ff18 	bl	800089c <__aeabi_ddiv>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4640      	mov	r0, r8
 8002a72:	4649      	mov	r1, r9
 8002a74:	f7fd fc32 	bl	80002dc <__adddf3>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	4629      	mov	r1, r5
 8002a80:	f7fd fc2c 	bl	80002dc <__adddf3>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4610      	mov	r0, r2
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f7fe f8b4 	bl	8000bf8 <__aeabi_d2f>
 8002a90:	4603      	mov	r3, r0
 8002a92:	4a66      	ldr	r2, [pc, #408]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002a94:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002a96:	4b65      	ldr	r3, [pc, #404]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fd fd7c 	bl	8000598 <__aeabi_f2d>
 8002aa0:	4604      	mov	r4, r0
 8002aa2:	460d      	mov	r5, r1
 8002aa4:	4b61      	ldr	r3, [pc, #388]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fd fd75 	bl	8000598 <__aeabi_f2d>
 8002aae:	a358      	add	r3, pc, #352	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab4:	f7fd fdc8 	bl	8000648 <__aeabi_dmul>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4620      	mov	r0, r4
 8002abe:	4629      	mov	r1, r5
 8002ac0:	f7fd fc0c 	bl	80002dc <__adddf3>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	f7fe f894 	bl	8000bf8 <__aeabi_d2f>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	4a56      	ldr	r2, [pc, #344]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002ad4:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002ad6:	4b56      	ldr	r3, [pc, #344]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fd fd5c 	bl	8000598 <__aeabi_f2d>
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	460d      	mov	r5, r1
 8002ae4:	4b52      	ldr	r3, [pc, #328]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fd fd55 	bl	8000598 <__aeabi_f2d>
 8002aee:	a348      	add	r3, pc, #288	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af4:	f7fd fda8 	bl	8000648 <__aeabi_dmul>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4690      	mov	r8, r2
 8002afe:	4699      	mov	r9, r3
 8002b00:	4b4b      	ldr	r3, [pc, #300]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fd fd47 	bl	8000598 <__aeabi_f2d>
 8002b0a:	a341      	add	r3, pc, #260	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b10:	f7fd fd9a 	bl	8000648 <__aeabi_dmul>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	a33c      	add	r3, pc, #240	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b22:	f7fd fd91 	bl	8000648 <__aeabi_dmul>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b36:	f7fd feb1 	bl	800089c <__aeabi_ddiv>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4640      	mov	r0, r8
 8002b40:	4649      	mov	r1, r9
 8002b42:	f7fd fbcb 	bl	80002dc <__adddf3>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	4629      	mov	r1, r5
 8002b4e:	f7fd fbc5 	bl	80002dc <__adddf3>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f7fe f84d 	bl	8000bf8 <__aeabi_d2f>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	4a33      	ldr	r2, [pc, #204]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002b62:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002b64:	4b32      	ldr	r3, [pc, #200]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fd fd15 	bl	8000598 <__aeabi_f2d>
 8002b6e:	4604      	mov	r4, r0
 8002b70:	460d      	mov	r5, r1
 8002b72:	4b2f      	ldr	r3, [pc, #188]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fd fd0e 	bl	8000598 <__aeabi_f2d>
 8002b7c:	a324      	add	r3, pc, #144	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b82:	f7fd fd61 	bl	8000648 <__aeabi_dmul>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	f7fd fba5 	bl	80002dc <__adddf3>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4610      	mov	r0, r2
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f7fe f82d 	bl	8000bf8 <__aeabi_d2f>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	4a23      	ldr	r2, [pc, #140]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002ba2:	6013      	str	r3, [r2, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002ba4:	4b21      	ldr	r3, [pc, #132]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002ba6:	edd3 7a00 	vldr	s15, [r3]
 8002baa:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002bac:	ed93 7a00 	vldr	s14, [r3]
 8002bb0:	f107 020c 	add.w	r2, r7, #12
 8002bb4:	f107 0310 	add.w	r3, r7, #16
 8002bb8:	eef0 0a47 	vmov.f32	s1, s14
 8002bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f001 fd08 	bl	80045d8 <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002bc8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002be8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bec:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bf0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c00:	e018      	b.n	8002c34 <interupt_DriveMotor+0xcdc>
 8002c02:	bf00      	nop
 8002c04:	f3af 8000 	nop.w
 8002c08:	d916872b 	.word	0xd916872b
 8002c0c:	3feff7ce 	.word	0x3feff7ce
 8002c10:	d2f1a9fc 	.word	0xd2f1a9fc
 8002c14:	3f50624d 	.word	0x3f50624d
 8002c18:	200004d4 	.word	0x200004d4
 8002c1c:	20000528 	.word	0x20000528
 8002c20:	20000590 	.word	0x20000590
 8002c24:	20000592 	.word	0x20000592
 8002c28:	20000524 	.word	0x20000524
 8002c2c:	200004d8 	.word	0x200004d8
 8002c30:	200004e4 	.word	0x200004e4
 8002c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c38:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002c3c:	f107 0214 	add.w	r2, r7, #20
 8002c40:	f107 0318 	add.w	r3, r7, #24
 8002c44:	4611      	mov	r1, r2
 8002c46:	4618      	mov	r0, r3
 8002c48:	edd7 0a08 	vldr	s1, [r7, #32]
 8002c4c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002c50:	f7ff f8f0 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f004 feac 	bl	80079b8 <pl_DriveMotor_duty>
	}if (modeacc == 5) {//前壁制御
 8002c60:	4bd3      	ldr	r3, [pc, #844]	; (8002fb0 <interupt_DriveMotor+0x1058>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b05      	cmp	r3, #5
 8002c66:	d137      	bne.n	8002cd8 <interupt_DriveMotor+0xd80>
		g_WallControl_mode=0;
 8002c68:	4bd2      	ldr	r3, [pc, #840]	; (8002fb4 <interupt_DriveMotor+0x105c>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002c6e:	4bd2      	ldr	r3, [pc, #840]	; (8002fb8 <interupt_DriveMotor+0x1060>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
		//calFrontWallConrol(&PID_frontwall_l,&PID_frontwall_r);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002c74:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c78:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c80:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c88:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c90:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002c94:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c98:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ca0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ca4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ca8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb0:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002cb4:	f107 0214 	add.w	r2, r7, #20
 8002cb8:	f107 0318 	add.w	r3, r7, #24
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	edd7 0a08 	vldr	s1, [r7, #32]
 8002cc4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002cc8:	f7ff f8b4 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f004 fe70 	bl	80079b8 <pl_DriveMotor_duty>
	}if (modeacc == 6) {//ネイピア加速
 8002cd8:	4bb5      	ldr	r3, [pc, #724]	; (8002fb0 <interupt_DriveMotor+0x1058>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b06      	cmp	r3, #6
 8002cde:	f040 8105 	bne.w	8002eec <interupt_DriveMotor+0xf94>
		g_WallControl_mode=0;
 8002ce2:	4bb4      	ldr	r3, [pc, #720]	; (8002fb4 <interupt_DriveMotor+0x105c>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002ce8:	4bb3      	ldr	r3, [pc, #716]	; (8002fb8 <interupt_DriveMotor+0x1060>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002cee:	4bb3      	ldr	r3, [pc, #716]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fc50 	bl	8000598 <__aeabi_f2d>
 8002cf8:	4604      	mov	r4, r0
 8002cfa:	460d      	mov	r5, r1
 8002cfc:	4baf      	ldr	r3, [pc, #700]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fd fc49 	bl	8000598 <__aeabi_f2d>
 8002d06:	a3a8      	add	r3, pc, #672	; (adr r3, 8002fa8 <interupt_DriveMotor+0x1050>)
 8002d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0c:	f7fd fc9c 	bl	8000648 <__aeabi_dmul>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4690      	mov	r8, r2
 8002d16:	4699      	mov	r9, r3
 8002d18:	4ba8      	ldr	r3, [pc, #672]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fd fc3b 	bl	8000598 <__aeabi_f2d>
 8002d22:	a3a1      	add	r3, pc, #644	; (adr r3, 8002fa8 <interupt_DriveMotor+0x1050>)
 8002d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d28:	f7fd fc8e 	bl	8000648 <__aeabi_dmul>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4610      	mov	r0, r2
 8002d32:	4619      	mov	r1, r3
 8002d34:	a39c      	add	r3, pc, #624	; (adr r3, 8002fa8 <interupt_DriveMotor+0x1050>)
 8002d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3a:	f7fd fc85 	bl	8000648 <__aeabi_dmul>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4610      	mov	r0, r2
 8002d44:	4619      	mov	r1, r3
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d4e:	f7fd fda5 	bl	800089c <__aeabi_ddiv>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4640      	mov	r0, r8
 8002d58:	4649      	mov	r1, r9
 8002d5a:	f7fd fabf 	bl	80002dc <__adddf3>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4620      	mov	r0, r4
 8002d64:	4629      	mov	r1, r5
 8002d66:	f7fd fab9 	bl	80002dc <__adddf3>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4619      	mov	r1, r3
 8002d72:	f7fd ff41 	bl	8000bf8 <__aeabi_d2f>
 8002d76:	4603      	mov	r3, r0
 8002d78:	4a90      	ldr	r2, [pc, #576]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002d7a:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002d7c:	4b8f      	ldr	r3, [pc, #572]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fd fc09 	bl	8000598 <__aeabi_f2d>
 8002d86:	4604      	mov	r4, r0
 8002d88:	460d      	mov	r5, r1
 8002d8a:	4b8c      	ldr	r3, [pc, #560]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fd fc02 	bl	8000598 <__aeabi_f2d>
 8002d94:	a384      	add	r3, pc, #528	; (adr r3, 8002fa8 <interupt_DriveMotor+0x1050>)
 8002d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9a:	f7fd fc55 	bl	8000648 <__aeabi_dmul>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4620      	mov	r0, r4
 8002da4:	4629      	mov	r1, r5
 8002da6:	f7fd fa99 	bl	80002dc <__adddf3>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4610      	mov	r0, r2
 8002db0:	4619      	mov	r1, r3
 8002db2:	f7fd ff21 	bl	8000bf8 <__aeabi_d2f>
 8002db6:	4603      	mov	r3, r0
 8002db8:	4a80      	ldr	r2, [pc, #512]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002dba:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME;// + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002dbc:	4b80      	ldr	r3, [pc, #512]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fd fbe9 	bl	8000598 <__aeabi_f2d>
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	460d      	mov	r5, r1
 8002dca:	4b7d      	ldr	r3, [pc, #500]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fd fbe2 	bl	8000598 <__aeabi_f2d>
 8002dd4:	a374      	add	r3, pc, #464	; (adr r3, 8002fa8 <interupt_DriveMotor+0x1050>)
 8002dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dda:	f7fd fc35 	bl	8000648 <__aeabi_dmul>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4620      	mov	r0, r4
 8002de4:	4629      	mov	r1, r5
 8002de6:	f7fd fa79 	bl	80002dc <__adddf3>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4610      	mov	r0, r2
 8002df0:	4619      	mov	r1, r3
 8002df2:	f7fd ff01 	bl	8000bf8 <__aeabi_d2f>
 8002df6:	4603      	mov	r3, r0
 8002df8:	4a71      	ldr	r2, [pc, #452]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002dfa:	6093      	str	r3, [r2, #8]
		cal_mollifier_table(Mollifier_turning,&turning);//角速度と角加速度はここで決定
 8002dfc:	4b71      	ldr	r3, [pc, #452]	; (8002fc4 <interupt_DriveMotor+0x106c>)
 8002dfe:	edd3 6a00 	vldr	s13, [r3]
 8002e02:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e06:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e0a:	486d      	ldr	r0, [pc, #436]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002e0c:	eeb0 0a66 	vmov.f32	s0, s13
 8002e10:	eef0 0a47 	vmov.f32	s1, s14
 8002e14:	eeb0 1a67 	vmov.f32	s2, s15
 8002e18:	f005 fd9e 	bl	8008958 <cal_mollifier_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002e1c:	4b67      	ldr	r3, [pc, #412]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002e1e:	edd3 7a00 	vldr	s15, [r3]
 8002e22:	4b67      	ldr	r3, [pc, #412]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002e24:	ed93 7a00 	vldr	s14, [r3]
 8002e28:	f107 020c 	add.w	r2, r7, #12
 8002e2c:	f107 0310 	add.w	r3, r7, #16
 8002e30:	eef0 0a47 	vmov.f32	s1, s14
 8002e34:	eeb0 0a67 	vmov.f32	s0, s15
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f001 fbcc 	bl	80045d8 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002e40:	4b61      	ldr	r3, [pc, #388]	; (8002fc8 <interupt_DriveMotor+0x1070>)
 8002e42:	ed93 7a00 	vldr	s14, [r3]
 8002e46:	4b61      	ldr	r3, [pc, #388]	; (8002fcc <interupt_DriveMotor+0x1074>)
 8002e48:	edd3 7a00 	vldr	s15, [r3]
 8002e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e50:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002e54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e58:	4b58      	ldr	r3, [pc, #352]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002e5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e5e:	4b5c      	ldr	r3, [pc, #368]	; (8002fd0 <interupt_DriveMotor+0x1078>)
 8002e60:	edd3 6a00 	vldr	s13, [r3]
 8002e64:	4b56      	ldr	r3, [pc, #344]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002e66:	ed93 6a01 	vldr	s12, [r3, #4]
 8002e6a:	1d3a      	adds	r2, r7, #4
 8002e6c:	f107 0308 	add.w	r3, r7, #8
 8002e70:	eef0 1a46 	vmov.f32	s3, s12
 8002e74:	eeb0 1a66 	vmov.f32	s2, s13
 8002e78:	4611      	mov	r1, r2
 8002e7a:	eef0 0a67 	vmov.f32	s1, s15
 8002e7e:	eeb0 0a47 	vmov.f32	s0, s14
 8002e82:	4618      	mov	r0, r3
 8002e84:	f001 f8fc 	bl	8004080 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002e88:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e94:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ea0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ea4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002ea8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002eac:	edd7 7a03 	vldr	s15, [r7, #12]
 8002eb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002eb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ebc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec4:	edc7 7a08 	vstr	s15, [r7, #32]
//			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
//			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002ec8:	f107 0214 	add.w	r2, r7, #20
 8002ecc:	f107 0318 	add.w	r3, r7, #24
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	edd7 0a08 	vldr	s1, [r7, #32]
 8002ed8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002edc:	f7fe ffaa 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f004 fd66 	bl	80079b8 <pl_DriveMotor_duty>

	}if (modeacc == 100) {
 8002eec:	4b30      	ldr	r3, [pc, #192]	; (8002fb0 <interupt_DriveMotor+0x1058>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b64      	cmp	r3, #100	; 0x64
 8002ef2:	d14b      	bne.n	8002f8c <interupt_DriveMotor+0x1034>
		straight.velocity = 0;
 8002ef4:	4b31      	ldr	r3, [pc, #196]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
		turning.velocity=0;
 8002efc:	4b30      	ldr	r3, [pc, #192]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002f04:	4b2d      	ldr	r3, [pc, #180]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002f06:	edd3 7a00 	vldr	s15, [r3]
 8002f0a:	4b2d      	ldr	r3, [pc, #180]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002f0c:	ed93 7a00 	vldr	s14, [r3]
 8002f10:	f107 020c 	add.w	r2, r7, #12
 8002f14:	f107 0310 	add.w	r3, r7, #16
 8002f18:	eef0 0a47 	vmov.f32	s1, s14
 8002f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f20:	4611      	mov	r1, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f001 fb58 	bl	80045d8 <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002f28:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f34:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f44:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002f48:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f54:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f64:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002f68:	f107 0214 	add.w	r2, r7, #20
 8002f6c:	f107 0318 	add.w	r3, r7, #24
 8002f70:	4611      	mov	r1, r2
 8002f72:	4618      	mov	r0, r3
 8002f74:	edd7 0a08 	vldr	s1, [r7, #32]
 8002f78:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002f7c:	f7fe ff5a 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4611      	mov	r1, r2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f004 fd16 	bl	80079b8 <pl_DriveMotor_duty>
	}
		g_V_L=(float)(V_L);//V_L;
 8002f8c:	4a11      	ldr	r2, [pc, #68]	; (8002fd4 <interupt_DriveMotor+0x107c>)
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	6013      	str	r3, [r2, #0]
		g_V_R=(float)(V_R);//V_R;
 8002f92:	4a11      	ldr	r2, [pc, #68]	; (8002fd8 <interupt_DriveMotor+0x1080>)
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	6013      	str	r3, [r2, #0]



}
 8002f98:	bf00      	nop
 8002f9a:	3728      	adds	r7, #40	; 0x28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fa2:	bf00      	nop
 8002fa4:	f3af 8000 	nop.w
 8002fa8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002fac:	3f50624d 	.word	0x3f50624d
 8002fb0:	20000528 	.word	0x20000528
 8002fb4:	20000590 	.word	0x20000590
 8002fb8:	20000592 	.word	0x20000592
 8002fbc:	200004d8 	.word	0x200004d8
 8002fc0:	200004e4 	.word	0x200004e4
 8002fc4:	20000518 	.word	0x20000518
 8002fc8:	20000238 	.word	0x20000238
 8002fcc:	2000023c 	.word	0x2000023c
 8002fd0:	20000268 	.word	0x20000268
 8002fd4:	2000052c 	.word	0x2000052c
 8002fd8:	20000530 	.word	0x20000530

08002fdc <straight_table2>:



float straight_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration,MOTOR_MODE motor_mode) {
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	ed87 0a05 	vstr	s0, [r7, #20]
 8002fe6:	edc7 0a04 	vstr	s1, [r7, #16]
 8002fea:	ed87 1a03 	vstr	s2, [r7, #12]
 8002fee:	edc7 1a02 	vstr	s3, [r7, #8]
 8002ff2:	ed87 2a01 	vstr	s4, [r7, #4]
 8002ff6:	6038      	str	r0, [r7, #0]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8002ff8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ffc:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003000:	edd7 7a04 	vldr	s15, [r7, #16]
 8003004:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003008:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 800300c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003010:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003014:	ed97 7a01 	vldr	s14, [r7, #4]
 8003018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800301c:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003020:	edd7 7a01 	vldr	s15, [r7, #4]
 8003024:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302c:	d505      	bpl.n	800303a <straight_table2+0x5e>
 800302e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003032:	eef1 7a67 	vneg.f32	s15, s15
 8003036:	edc7 7a01 	vstr	s15, [r7, #4]
	if(noGoalPillarMode==1){
 800303a:	4bb4      	ldr	r3, [pc, #720]	; (800330c <straight_table2+0x330>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <straight_table2+0x6a>
		motor_mode.WallCutMode=0;
 8003042:	2300      	movs	r3, #0
 8003044:	70fb      	strb	r3, [r7, #3]
	}


	Trapezoid_straight.displacement = input_displacement;
 8003046:	4ab2      	ldr	r2, [pc, #712]	; (8003310 <straight_table2+0x334>)
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 800304c:	4ab0      	ldr	r2, [pc, #704]	; (8003310 <straight_table2+0x334>)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 8003052:	4aaf      	ldr	r2, [pc, #700]	; (8003310 <straight_table2+0x334>)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 8003058:	4aad      	ldr	r2, [pc, #692]	; (8003310 <straight_table2+0x334>)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 800305e:	4aac      	ldr	r2, [pc, #688]	; (8003310 <straight_table2+0x334>)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003064:	edd7 7a02 	vldr	s15, [r7, #8]
 8003068:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800306c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003070:	db03      	blt.n	800307a <straight_table2+0x9e>
 8003072:	4aa8      	ldr	r2, [pc, #672]	; (8003314 <straight_table2+0x338>)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6053      	str	r3, [r2, #4]
 8003078:	e006      	b.n	8003088 <straight_table2+0xac>
	}else{straight.acceleration = -input_acceleration;}
 800307a:	edd7 7a01 	vldr	s15, [r7, #4]
 800307e:	eef1 7a67 	vneg.f32	s15, s15
 8003082:	4ba4      	ldr	r3, [pc, #656]	; (8003314 <straight_table2+0x338>)
 8003084:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 8003088:	4aa2      	ldr	r2, [pc, #648]	; (8003314 <straight_table2+0x338>)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 800308e:	4ba1      	ldr	r3, [pc, #644]	; (8003314 <straight_table2+0x338>)
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 8003096:	4ba0      	ldr	r3, [pc, #640]	; (8003318 <straight_table2+0x33c>)
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 800309e:	4b9e      	ldr	r3, [pc, #632]	; (8003318 <straight_table2+0x33c>)
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 80030a6:	4b9c      	ldr	r3, [pc, #624]	; (8003318 <straight_table2+0x33c>)
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 80030ae:	4b9b      	ldr	r3, [pc, #620]	; (800331c <straight_table2+0x340>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 80030b4:	4b9a      	ldr	r3, [pc, #616]	; (8003320 <straight_table2+0x344>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80030ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80030be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c6:	dd0e      	ble.n	80030e6 <straight_table2+0x10a>
 80030c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80030cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80030d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d8:	dd05      	ble.n	80030e6 <straight_table2+0x10a>
 80030da:	4b91      	ldr	r3, [pc, #580]	; (8003320 <straight_table2+0x344>)
 80030dc:	2205      	movs	r2, #5
 80030de:	701a      	strb	r2, [r3, #0]
 80030e0:	4a8c      	ldr	r2, [pc, #560]	; (8003314 <straight_table2+0x338>)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80030e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80030ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f2:	dd14      	ble.n	800311e <straight_table2+0x142>
 80030f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80030f8:	eef1 7a67 	vneg.f32	s15, s15
 80030fc:	ed97 7a07 	vldr	s14, [r7, #28]
 8003100:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003108:	d509      	bpl.n	800311e <straight_table2+0x142>
 800310a:	4b85      	ldr	r3, [pc, #532]	; (8003320 <straight_table2+0x344>)
 800310c:	2206      	movs	r2, #6
 800310e:	701a      	strb	r2, [r3, #0]
 8003110:	edd7 7a01 	vldr	s15, [r7, #4]
 8003114:	eef1 7a67 	vneg.f32	s15, s15
 8003118:	4b7e      	ldr	r3, [pc, #504]	; (8003314 <straight_table2+0x338>)
 800311a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 800311e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003122:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312a:	d514      	bpl.n	8003156 <straight_table2+0x17a>
 800312c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003130:	eef1 7a67 	vneg.f32	s15, s15
 8003134:	ed97 7a07 	vldr	s14, [r7, #28]
 8003138:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800313c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003140:	dd09      	ble.n	8003156 <straight_table2+0x17a>
 8003142:	4b77      	ldr	r3, [pc, #476]	; (8003320 <straight_table2+0x344>)
 8003144:	2205      	movs	r2, #5
 8003146:	701a      	strb	r2, [r3, #0]
 8003148:	edd7 7a01 	vldr	s15, [r7, #4]
 800314c:	eef1 7a67 	vneg.f32	s15, s15
 8003150:	4b70      	ldr	r3, [pc, #448]	; (8003314 <straight_table2+0x338>)
 8003152:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003156:	edd7 7a05 	vldr	s15, [r7, #20]
 800315a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800315e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003162:	d50e      	bpl.n	8003182 <straight_table2+0x1a6>
 8003164:	ed97 7a07 	vldr	s14, [r7, #28]
 8003168:	edd7 7a05 	vldr	s15, [r7, #20]
 800316c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003174:	d505      	bpl.n	8003182 <straight_table2+0x1a6>
 8003176:	4b6a      	ldr	r3, [pc, #424]	; (8003320 <straight_table2+0x344>)
 8003178:	2206      	movs	r2, #6
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	4a65      	ldr	r2, [pc, #404]	; (8003314 <straight_table2+0x338>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 8003182:	4b68      	ldr	r3, [pc, #416]	; (8003324 <straight_table2+0x348>)
 8003184:	2201      	movs	r2, #1
 8003186:	701a      	strb	r2, [r3, #0]
	g_WallControl_mode=motor_mode.WallControlMode;
 8003188:	783a      	ldrb	r2, [r7, #0]
 800318a:	4b67      	ldr	r3, [pc, #412]	; (8003328 <straight_table2+0x34c>)
 800318c:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 800318e:	f004 fbf7 	bl	8007980 <pl_DriveMotor_start>
	if(motor_mode.WallCutMode==1){
 8003192:	78fb      	ldrb	r3, [r7, #3]
 8003194:	2b01      	cmp	r3, #1
 8003196:	f040 80d3 	bne.w	8003340 <straight_table2+0x364>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 800319a:	4b64      	ldr	r3, [pc, #400]	; (800332c <straight_table2+0x350>)
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 80031a2:	4b5f      	ldr	r3, [pc, #380]	; (8003320 <straight_table2+0x344>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 80031a8:	4b5a      	ldr	r3, [pc, #360]	; (8003314 <straight_table2+0x338>)
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 80031b0:	bf00      	nop
 80031b2:	4b5f      	ldr	r3, [pc, #380]	; (8003330 <straight_table2+0x354>)
 80031b4:	edd3 7a00 	vldr	s15, [r3]
 80031b8:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 80031bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c4:	d409      	bmi.n	80031da <straight_table2+0x1fe>
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 80031c6:	4b5a      	ldr	r3, [pc, #360]	; (8003330 <straight_table2+0x354>)
 80031c8:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 80031cc:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8003334 <straight_table2+0x358>
 80031d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d8:	dd18      	ble.n	800320c <straight_table2+0x230>
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 80031da:	4b57      	ldr	r3, [pc, #348]	; (8003338 <straight_table2+0x35c>)
 80031dc:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 80031e0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80031e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ec:	d409      	bmi.n	8003202 <straight_table2+0x226>
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 80031ee:	4b52      	ldr	r3, [pc, #328]	; (8003338 <straight_table2+0x35c>)
 80031f0:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 80031f4:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003334 <straight_table2+0x358>
 80031f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003200:	dd04      	ble.n	800320c <straight_table2+0x230>
			  front_wall_break_90==0){}
 8003202:	4b4e      	ldr	r3, [pc, #312]	; (800333c <straight_table2+0x360>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0d2      	beq.n	80031b2 <straight_table2+0x1d6>
		straight.displacement=0;
 800320c:	4b41      	ldr	r3, [pc, #260]	; (8003314 <straight_table2+0x338>)
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003214:	edd7 7a02 	vldr	s15, [r7, #8]
 8003218:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800321c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003220:	db03      	blt.n	800322a <straight_table2+0x24e>
 8003222:	4a3c      	ldr	r2, [pc, #240]	; (8003314 <straight_table2+0x338>)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6053      	str	r3, [r2, #4]
 8003228:	e006      	b.n	8003238 <straight_table2+0x25c>
			}else{straight.acceleration = -input_acceleration;}
 800322a:	edd7 7a01 	vldr	s15, [r7, #4]
 800322e:	eef1 7a67 	vneg.f32	s15, s15
 8003232:	4b38      	ldr	r3, [pc, #224]	; (8003314 <straight_table2+0x338>)
 8003234:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003238:	4b39      	ldr	r3, [pc, #228]	; (8003320 <straight_table2+0x344>)
 800323a:	2201      	movs	r2, #1
 800323c:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800323e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003242:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800324a:	dd0e      	ble.n	800326a <straight_table2+0x28e>
 800324c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003250:	edd7 7a05 	vldr	s15, [r7, #20]
 8003254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325c:	dd05      	ble.n	800326a <straight_table2+0x28e>
 800325e:	4b30      	ldr	r3, [pc, #192]	; (8003320 <straight_table2+0x344>)
 8003260:	2205      	movs	r2, #5
 8003262:	701a      	strb	r2, [r3, #0]
 8003264:	4a2b      	ldr	r2, [pc, #172]	; (8003314 <straight_table2+0x338>)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 800326a:	edd7 7a05 	vldr	s15, [r7, #20]
 800326e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003276:	dd14      	ble.n	80032a2 <straight_table2+0x2c6>
 8003278:	edd7 7a05 	vldr	s15, [r7, #20]
 800327c:	eef1 7a67 	vneg.f32	s15, s15
 8003280:	ed97 7a07 	vldr	s14, [r7, #28]
 8003284:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328c:	d509      	bpl.n	80032a2 <straight_table2+0x2c6>
 800328e:	4b24      	ldr	r3, [pc, #144]	; (8003320 <straight_table2+0x344>)
 8003290:	2206      	movs	r2, #6
 8003292:	701a      	strb	r2, [r3, #0]
 8003294:	edd7 7a01 	vldr	s15, [r7, #4]
 8003298:	eef1 7a67 	vneg.f32	s15, s15
 800329c:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <straight_table2+0x338>)
 800329e:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80032a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80032a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ae:	d514      	bpl.n	80032da <straight_table2+0x2fe>
 80032b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80032b4:	eef1 7a67 	vneg.f32	s15, s15
 80032b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80032bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c4:	dd09      	ble.n	80032da <straight_table2+0x2fe>
 80032c6:	4b16      	ldr	r3, [pc, #88]	; (8003320 <straight_table2+0x344>)
 80032c8:	2205      	movs	r2, #5
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80032d0:	eef1 7a67 	vneg.f32	s15, s15
 80032d4:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <straight_table2+0x338>)
 80032d6:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80032da:	edd7 7a05 	vldr	s15, [r7, #20]
 80032de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e6:	f140 825b 	bpl.w	80037a0 <straight_table2+0x7c4>
 80032ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80032ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80032f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fa:	f140 8251 	bpl.w	80037a0 <straight_table2+0x7c4>
 80032fe:	4b08      	ldr	r3, [pc, #32]	; (8003320 <straight_table2+0x344>)
 8003300:	2206      	movs	r2, #6
 8003302:	701a      	strb	r2, [r3, #0]
 8003304:	4a03      	ldr	r2, [pc, #12]	; (8003314 <straight_table2+0x338>)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6053      	str	r3, [r2, #4]
 800330a:	e249      	b.n	80037a0 <straight_table2+0x7c4>
 800330c:	20000529 	.word	0x20000529
 8003310:	200004f0 	.word	0x200004f0
 8003314:	200004d8 	.word	0x200004d8
 8003318:	200004e4 	.word	0x200004e4
 800331c:	20000805 	.word	0x20000805
 8003320:	20000804 	.word	0x20000804
 8003324:	20000528 	.word	0x20000528
 8003328:	20000590 	.word	0x20000590
 800332c:	20000534 	.word	0x20000534
 8003330:	200005cc 	.word	0x200005cc
 8003334:	425c0000 	.word	0x425c0000
 8003338:	200005d0 	.word	0x200005d0
 800333c:	200005f2 	.word	0x200005f2
	}else if(motor_mode.WallCutMode==2){
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	2b02      	cmp	r3, #2
 8003344:	f040 80c9 	bne.w	80034da <straight_table2+0x4fe>
		//左壁or右壁がstart～endの中にあれば抜ける
		g_acc_flag=0;
 8003348:	4bb8      	ldr	r3, [pc, #736]	; (800362c <straight_table2+0x650>)
 800334a:	2200      	movs	r2, #0
 800334c:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 800334e:	4bb8      	ldr	r3, [pc, #736]	; (8003630 <straight_table2+0x654>)
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 8003356:	bf00      	nop
 8003358:	4bb6      	ldr	r3, [pc, #728]	; (8003634 <straight_table2+0x658>)
 800335a:	edd3 7a00 	vldr	s15, [r3]
 800335e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003366:	d913      	bls.n	8003390 <straight_table2+0x3b4>
 8003368:	4bb2      	ldr	r3, [pc, #712]	; (8003634 <straight_table2+0x658>)
 800336a:	edd3 7a00 	vldr	s15, [r3]
 800336e:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8003372:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337a:	d909      	bls.n	8003390 <straight_table2+0x3b4>
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 800337c:	4bad      	ldr	r3, [pc, #692]	; (8003634 <straight_table2+0x658>)
 800337e:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 8003382:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8003638 <straight_table2+0x65c>
 8003386:	eef4 7ac7 	vcmpe.f32	s15, s14
 800338a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338e:	db20      	blt.n	80033d2 <straight_table2+0x3f6>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 8003390:	4baa      	ldr	r3, [pc, #680]	; (800363c <straight_table2+0x660>)
 8003392:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 8003396:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800339a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339e:	d913      	bls.n	80033c8 <straight_table2+0x3ec>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 80033a0:	4ba6      	ldr	r3, [pc, #664]	; (800363c <straight_table2+0x660>)
 80033a2:	edd3 7a00 	vldr	s15, [r3]
 80033a6:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80033aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b2:	d909      	bls.n	80033c8 <straight_table2+0x3ec>
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 80033b4:	4ba1      	ldr	r3, [pc, #644]	; (800363c <straight_table2+0x660>)
 80033b6:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 80033ba:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8003638 <straight_table2+0x65c>
 80033be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c6:	db04      	blt.n	80033d2 <straight_table2+0x3f6>
			  front_wall_break_45==0){}
 80033c8:	4b9d      	ldr	r3, [pc, #628]	; (8003640 <straight_table2+0x664>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0c2      	beq.n	8003358 <straight_table2+0x37c>
//		while((NoWallDisplacementR90<=0 ||
//				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R45) &&
//				(NoWallDisplacementL90<=0 ||
//			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L45) &&
//			  front_wall_break_90==0){}
		enc.sigma_error=0;
 80033d2:	4b9c      	ldr	r3, [pc, #624]	; (8003644 <straight_table2+0x668>)
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	609a      	str	r2, [r3, #8]
		straight.displacement=0;
 80033da:	4b95      	ldr	r3, [pc, #596]	; (8003630 <straight_table2+0x654>)
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80033e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80033e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ee:	db03      	blt.n	80033f8 <straight_table2+0x41c>
 80033f0:	4a8f      	ldr	r2, [pc, #572]	; (8003630 <straight_table2+0x654>)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6053      	str	r3, [r2, #4]
 80033f6:	e006      	b.n	8003406 <straight_table2+0x42a>
			}else{straight.acceleration = -input_acceleration;}
 80033f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80033fc:	eef1 7a67 	vneg.f32	s15, s15
 8003400:	4b8b      	ldr	r3, [pc, #556]	; (8003630 <straight_table2+0x654>)
 8003402:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003406:	4b89      	ldr	r3, [pc, #548]	; (800362c <straight_table2+0x650>)
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800340c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003410:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003418:	dd0e      	ble.n	8003438 <straight_table2+0x45c>
 800341a:	ed97 7a07 	vldr	s14, [r7, #28]
 800341e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003422:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800342a:	dd05      	ble.n	8003438 <straight_table2+0x45c>
 800342c:	4b7f      	ldr	r3, [pc, #508]	; (800362c <straight_table2+0x650>)
 800342e:	2205      	movs	r2, #5
 8003430:	701a      	strb	r2, [r3, #0]
 8003432:	4a7f      	ldr	r2, [pc, #508]	; (8003630 <straight_table2+0x654>)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003438:	edd7 7a05 	vldr	s15, [r7, #20]
 800343c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003444:	dd14      	ble.n	8003470 <straight_table2+0x494>
 8003446:	edd7 7a05 	vldr	s15, [r7, #20]
 800344a:	eef1 7a67 	vneg.f32	s15, s15
 800344e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003452:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345a:	d509      	bpl.n	8003470 <straight_table2+0x494>
 800345c:	4b73      	ldr	r3, [pc, #460]	; (800362c <straight_table2+0x650>)
 800345e:	2206      	movs	r2, #6
 8003460:	701a      	strb	r2, [r3, #0]
 8003462:	edd7 7a01 	vldr	s15, [r7, #4]
 8003466:	eef1 7a67 	vneg.f32	s15, s15
 800346a:	4b71      	ldr	r3, [pc, #452]	; (8003630 <straight_table2+0x654>)
 800346c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003470:	edd7 7a05 	vldr	s15, [r7, #20]
 8003474:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347c:	d514      	bpl.n	80034a8 <straight_table2+0x4cc>
 800347e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003482:	eef1 7a67 	vneg.f32	s15, s15
 8003486:	ed97 7a07 	vldr	s14, [r7, #28]
 800348a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800348e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003492:	dd09      	ble.n	80034a8 <straight_table2+0x4cc>
 8003494:	4b65      	ldr	r3, [pc, #404]	; (800362c <straight_table2+0x650>)
 8003496:	2205      	movs	r2, #5
 8003498:	701a      	strb	r2, [r3, #0]
 800349a:	edd7 7a01 	vldr	s15, [r7, #4]
 800349e:	eef1 7a67 	vneg.f32	s15, s15
 80034a2:	4b63      	ldr	r3, [pc, #396]	; (8003630 <straight_table2+0x654>)
 80034a4:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80034a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80034ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b4:	f140 8174 	bpl.w	80037a0 <straight_table2+0x7c4>
 80034b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80034bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80034c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c8:	f140 816a 	bpl.w	80037a0 <straight_table2+0x7c4>
 80034cc:	4b57      	ldr	r3, [pc, #348]	; (800362c <straight_table2+0x650>)
 80034ce:	2206      	movs	r2, #6
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	4a57      	ldr	r2, [pc, #348]	; (8003630 <straight_table2+0x654>)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6053      	str	r3, [r2, #4]
 80034d8:	e162      	b.n	80037a0 <straight_table2+0x7c4>
	}else if(motor_mode.WallCutMode==3){
 80034da:	78fb      	ldrb	r3, [r7, #3]
 80034dc:	2b03      	cmp	r3, #3
 80034de:	f040 80b9 	bne.w	8003654 <straight_table2+0x678>
		//斜めの右旋回
		//左壁or右壁がstart～endの中にあれば抜ける

		g_acc_flag=0;
 80034e2:	4b52      	ldr	r3, [pc, #328]	; (800362c <straight_table2+0x650>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 80034e8:	4b51      	ldr	r3, [pc, #324]	; (8003630 <straight_table2+0x654>)
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 80034f0:	bf00      	nop
 80034f2:	4b55      	ldr	r3, [pc, #340]	; (8003648 <straight_table2+0x66c>)
 80034f4:	edd3 7a00 	vldr	s15, [r3]
 80034f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003504:	d409      	bmi.n	800351a <straight_table2+0x53e>
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 8003506:	4b50      	ldr	r3, [pc, #320]	; (8003648 <straight_table2+0x66c>)
 8003508:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 800350c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800364c <straight_table2+0x670>
 8003510:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003518:	dd04      	ble.n	8003524 <straight_table2+0x548>
				  front_wall_break_45slant==0){}
 800351a:	4b4d      	ldr	r3, [pc, #308]	; (8003650 <straight_table2+0x674>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	b2db      	uxtb	r3, r3
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0e6      	beq.n	80034f2 <straight_table2+0x516>
		enc.sigma_error=0;
 8003524:	4b47      	ldr	r3, [pc, #284]	; (8003644 <straight_table2+0x668>)
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	609a      	str	r2, [r3, #8]
		straight.displacement=0;
 800352c:	4b40      	ldr	r3, [pc, #256]	; (8003630 <straight_table2+0x654>)
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003534:	edd7 7a02 	vldr	s15, [r7, #8]
 8003538:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800353c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003540:	db03      	blt.n	800354a <straight_table2+0x56e>
 8003542:	4a3b      	ldr	r2, [pc, #236]	; (8003630 <straight_table2+0x654>)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6053      	str	r3, [r2, #4]
 8003548:	e006      	b.n	8003558 <straight_table2+0x57c>
			}else{straight.acceleration = -input_acceleration;}
 800354a:	edd7 7a01 	vldr	s15, [r7, #4]
 800354e:	eef1 7a67 	vneg.f32	s15, s15
 8003552:	4b37      	ldr	r3, [pc, #220]	; (8003630 <straight_table2+0x654>)
 8003554:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003558:	4b34      	ldr	r3, [pc, #208]	; (800362c <straight_table2+0x650>)
 800355a:	2201      	movs	r2, #1
 800355c:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800355e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003562:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356a:	dd0e      	ble.n	800358a <straight_table2+0x5ae>
 800356c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003570:	edd7 7a05 	vldr	s15, [r7, #20]
 8003574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357c:	dd05      	ble.n	800358a <straight_table2+0x5ae>
 800357e:	4b2b      	ldr	r3, [pc, #172]	; (800362c <straight_table2+0x650>)
 8003580:	2205      	movs	r2, #5
 8003582:	701a      	strb	r2, [r3, #0]
 8003584:	4a2a      	ldr	r2, [pc, #168]	; (8003630 <straight_table2+0x654>)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 800358a:	edd7 7a05 	vldr	s15, [r7, #20]
 800358e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003596:	dd14      	ble.n	80035c2 <straight_table2+0x5e6>
 8003598:	edd7 7a05 	vldr	s15, [r7, #20]
 800359c:	eef1 7a67 	vneg.f32	s15, s15
 80035a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80035a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ac:	d509      	bpl.n	80035c2 <straight_table2+0x5e6>
 80035ae:	4b1f      	ldr	r3, [pc, #124]	; (800362c <straight_table2+0x650>)
 80035b0:	2206      	movs	r2, #6
 80035b2:	701a      	strb	r2, [r3, #0]
 80035b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80035b8:	eef1 7a67 	vneg.f32	s15, s15
 80035bc:	4b1c      	ldr	r3, [pc, #112]	; (8003630 <straight_table2+0x654>)
 80035be:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80035c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80035c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ce:	d514      	bpl.n	80035fa <straight_table2+0x61e>
 80035d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80035d4:	eef1 7a67 	vneg.f32	s15, s15
 80035d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80035dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e4:	dd09      	ble.n	80035fa <straight_table2+0x61e>
 80035e6:	4b11      	ldr	r3, [pc, #68]	; (800362c <straight_table2+0x650>)
 80035e8:	2205      	movs	r2, #5
 80035ea:	701a      	strb	r2, [r3, #0]
 80035ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80035f0:	eef1 7a67 	vneg.f32	s15, s15
 80035f4:	4b0e      	ldr	r3, [pc, #56]	; (8003630 <straight_table2+0x654>)
 80035f6:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80035fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80035fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003606:	f140 80cb 	bpl.w	80037a0 <straight_table2+0x7c4>
 800360a:	ed97 7a07 	vldr	s14, [r7, #28]
 800360e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003612:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800361a:	f140 80c1 	bpl.w	80037a0 <straight_table2+0x7c4>
 800361e:	4b03      	ldr	r3, [pc, #12]	; (800362c <straight_table2+0x650>)
 8003620:	2206      	movs	r2, #6
 8003622:	701a      	strb	r2, [r3, #0]
 8003624:	4a02      	ldr	r2, [pc, #8]	; (8003630 <straight_table2+0x654>)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6053      	str	r3, [r2, #4]
 800362a:	e0b9      	b.n	80037a0 <straight_table2+0x7c4>
 800362c:	20000804 	.word	0x20000804
 8003630:	200004d8 	.word	0x200004d8
 8003634:	200005d4 	.word	0x200005d4
 8003638:	42000000 	.word	0x42000000
 800363c:	200005d8 	.word	0x200005d8
 8003640:	200005f3 	.word	0x200005f3
 8003644:	20000534 	.word	0x20000534
 8003648:	200005e4 	.word	0x200005e4
 800364c:	420c0000 	.word	0x420c0000
 8003650:	200005f4 	.word	0x200005f4
	}else if(motor_mode.WallCutMode==4){
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	2b04      	cmp	r3, #4
 8003658:	f040 80a2 	bne.w	80037a0 <straight_table2+0x7c4>
		//斜めの左旋回
		//左壁or右壁がstart～endの中にあれば抜ける

		g_acc_flag=0;
 800365c:	4ba6      	ldr	r3, [pc, #664]	; (80038f8 <straight_table2+0x91c>)
 800365e:	2200      	movs	r2, #0
 8003660:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8003662:	4ba6      	ldr	r3, [pc, #664]	; (80038fc <straight_table2+0x920>)
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 800366a:	bf00      	nop
 800366c:	4ba4      	ldr	r3, [pc, #656]	; (8003900 <straight_table2+0x924>)
 800366e:	edd3 7a00 	vldr	s15, [r3]
 8003672:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800367a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367e:	d409      	bmi.n	8003694 <straight_table2+0x6b8>
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 8003680:	4b9f      	ldr	r3, [pc, #636]	; (8003900 <straight_table2+0x924>)
 8003682:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 8003686:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8003904 <straight_table2+0x928>
 800368a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800368e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003692:	dd04      	ble.n	800369e <straight_table2+0x6c2>
				  front_wall_break_45slant==0){}
 8003694:	4b9c      	ldr	r3, [pc, #624]	; (8003908 <straight_table2+0x92c>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0e6      	beq.n	800366c <straight_table2+0x690>
		enc.sigma_error=0;
 800369e:	4b9b      	ldr	r3, [pc, #620]	; (800390c <straight_table2+0x930>)
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	609a      	str	r2, [r3, #8]
		straight.displacement=0;
 80036a6:	4b95      	ldr	r3, [pc, #596]	; (80038fc <straight_table2+0x920>)
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80036ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80036b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ba:	db03      	blt.n	80036c4 <straight_table2+0x6e8>
 80036bc:	4a8f      	ldr	r2, [pc, #572]	; (80038fc <straight_table2+0x920>)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6053      	str	r3, [r2, #4]
 80036c2:	e006      	b.n	80036d2 <straight_table2+0x6f6>
			}else{straight.acceleration = -input_acceleration;}
 80036c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80036c8:	eef1 7a67 	vneg.f32	s15, s15
 80036cc:	4b8b      	ldr	r3, [pc, #556]	; (80038fc <straight_table2+0x920>)
 80036ce:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 80036d2:	4b89      	ldr	r3, [pc, #548]	; (80038f8 <straight_table2+0x91c>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80036d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80036dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e4:	dd0e      	ble.n	8003704 <straight_table2+0x728>
 80036e6:	ed97 7a07 	vldr	s14, [r7, #28]
 80036ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80036ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f6:	dd05      	ble.n	8003704 <straight_table2+0x728>
 80036f8:	4b7f      	ldr	r3, [pc, #508]	; (80038f8 <straight_table2+0x91c>)
 80036fa:	2205      	movs	r2, #5
 80036fc:	701a      	strb	r2, [r3, #0]
 80036fe:	4a7f      	ldr	r2, [pc, #508]	; (80038fc <straight_table2+0x920>)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003704:	edd7 7a05 	vldr	s15, [r7, #20]
 8003708:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800370c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003710:	dd14      	ble.n	800373c <straight_table2+0x760>
 8003712:	edd7 7a05 	vldr	s15, [r7, #20]
 8003716:	eef1 7a67 	vneg.f32	s15, s15
 800371a:	ed97 7a07 	vldr	s14, [r7, #28]
 800371e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003726:	d509      	bpl.n	800373c <straight_table2+0x760>
 8003728:	4b73      	ldr	r3, [pc, #460]	; (80038f8 <straight_table2+0x91c>)
 800372a:	2206      	movs	r2, #6
 800372c:	701a      	strb	r2, [r3, #0]
 800372e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003732:	eef1 7a67 	vneg.f32	s15, s15
 8003736:	4b71      	ldr	r3, [pc, #452]	; (80038fc <straight_table2+0x920>)
 8003738:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 800373c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003740:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003748:	d514      	bpl.n	8003774 <straight_table2+0x798>
 800374a:	edd7 7a05 	vldr	s15, [r7, #20]
 800374e:	eef1 7a67 	vneg.f32	s15, s15
 8003752:	ed97 7a07 	vldr	s14, [r7, #28]
 8003756:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800375a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375e:	dd09      	ble.n	8003774 <straight_table2+0x798>
 8003760:	4b65      	ldr	r3, [pc, #404]	; (80038f8 <straight_table2+0x91c>)
 8003762:	2205      	movs	r2, #5
 8003764:	701a      	strb	r2, [r3, #0]
 8003766:	edd7 7a01 	vldr	s15, [r7, #4]
 800376a:	eef1 7a67 	vneg.f32	s15, s15
 800376e:	4b63      	ldr	r3, [pc, #396]	; (80038fc <straight_table2+0x920>)
 8003770:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003774:	edd7 7a05 	vldr	s15, [r7, #20]
 8003778:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800377c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003780:	d50e      	bpl.n	80037a0 <straight_table2+0x7c4>
 8003782:	ed97 7a07 	vldr	s14, [r7, #28]
 8003786:	edd7 7a05 	vldr	s15, [r7, #20]
 800378a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800378e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003792:	d505      	bpl.n	80037a0 <straight_table2+0x7c4>
 8003794:	4b58      	ldr	r3, [pc, #352]	; (80038f8 <straight_table2+0x91c>)
 8003796:	2206      	movs	r2, #6
 8003798:	701a      	strb	r2, [r3, #0]
 800379a:	4a58      	ldr	r2, [pc, #352]	; (80038fc <straight_table2+0x920>)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6053      	str	r3, [r2, #4]
	}

	if(motor_mode.calMazeMode==0){
 80037a0:	78bb      	ldrb	r3, [r7, #2]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f040 809e 	bne.w	80038e4 <straight_table2+0x908>
	while (g_acc_flag!=4){
 80037a8:	e074      	b.n	8003894 <straight_table2+0x8b8>
		if(motor_mode.WallCutMode==1){
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d120      	bne.n	80037f2 <straight_table2+0x816>
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 80037b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80037b4:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80037b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037bc:	4b54      	ldr	r3, [pc, #336]	; (8003910 <straight_table2+0x934>)
 80037be:	edd3 7a00 	vldr	s15, [r3]
 80037c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ca:	d90e      	bls.n	80037ea <straight_table2+0x80e>
			   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90)){
 80037cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80037d0:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 80037d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037d8:	4b4e      	ldr	r3, [pc, #312]	; (8003914 <straight_table2+0x938>)
 80037da:	edd3 7a00 	vldr	s15, [r3]
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 80037de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e6:	d900      	bls.n	80037ea <straight_table2+0x80e>
 80037e8:	e054      	b.n	8003894 <straight_table2+0x8b8>
				g_acc_flag=4;
 80037ea:	4b43      	ldr	r3, [pc, #268]	; (80038f8 <straight_table2+0x91c>)
 80037ec:	2204      	movs	r2, #4
 80037ee:	701a      	strb	r2, [r3, #0]
				break;
 80037f0:	e055      	b.n	800389e <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==2){
 80037f2:	78fb      	ldrb	r3, [r7, #3]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d121      	bne.n	800383c <straight_table2+0x860>
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 80037f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80037fc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003800:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003804:	4b44      	ldr	r3, [pc, #272]	; (8003918 <straight_table2+0x93c>)
 8003806:	edd3 7a00 	vldr	s15, [r3]
 800380a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800380e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003812:	d900      	bls.n	8003816 <straight_table2+0x83a>
 8003814:	e03e      	b.n	8003894 <straight_table2+0x8b8>
			   NoWallDisplacementR45>=input_displacement+CUTPLACE_TO_CENTER_R45 ){
 8003816:	edd7 7a05 	vldr	s15, [r7, #20]
 800381a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800381e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003822:	4b3e      	ldr	r3, [pc, #248]	; (800391c <straight_table2+0x940>)
 8003824:	edd3 7a00 	vldr	s15, [r3]
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 8003828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800382c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003830:	d900      	bls.n	8003834 <straight_table2+0x858>
 8003832:	e02f      	b.n	8003894 <straight_table2+0x8b8>
				g_acc_flag=4;
 8003834:	4b30      	ldr	r3, [pc, #192]	; (80038f8 <straight_table2+0x91c>)
 8003836:	2204      	movs	r2, #4
 8003838:	701a      	strb	r2, [r3, #0]
				break;
 800383a:	e030      	b.n	800389e <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==3){
 800383c:	78fb      	ldrb	r3, [r7, #3]
 800383e:	2b03      	cmp	r3, #3
 8003840:	d112      	bne.n	8003868 <straight_table2+0x88c>
			if(NoWallDisplacementR45slant2>=input_displacement+CUTPLACE_TO_CENTER_R45_SLANT ){
 8003842:	edd7 7a05 	vldr	s15, [r7, #20]
 8003846:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800384a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800384e:	4b34      	ldr	r3, [pc, #208]	; (8003920 <straight_table2+0x944>)
 8003850:	edd3 7a00 	vldr	s15, [r3]
 8003854:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800385c:	d900      	bls.n	8003860 <straight_table2+0x884>
 800385e:	e019      	b.n	8003894 <straight_table2+0x8b8>
				g_acc_flag=4;
 8003860:	4b25      	ldr	r3, [pc, #148]	; (80038f8 <straight_table2+0x91c>)
 8003862:	2204      	movs	r2, #4
 8003864:	701a      	strb	r2, [r3, #0]
				break;
 8003866:	e01a      	b.n	800389e <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==4){
 8003868:	78fb      	ldrb	r3, [r7, #3]
 800386a:	2b04      	cmp	r3, #4
 800386c:	d112      	bne.n	8003894 <straight_table2+0x8b8>
			if(NoWallDisplacementL45slant2>=input_displacement+CUTPLACE_TO_CENTER_L45_SLANT){
 800386e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003872:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003876:	ee37 7a87 	vadd.f32	s14, s15, s14
 800387a:	4b21      	ldr	r3, [pc, #132]	; (8003900 <straight_table2+0x924>)
 800387c:	edd3 7a00 	vldr	s15, [r3]
 8003880:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003888:	d900      	bls.n	800388c <straight_table2+0x8b0>
 800388a:	e003      	b.n	8003894 <straight_table2+0x8b8>
				g_acc_flag=4;
 800388c:	4b1a      	ldr	r3, [pc, #104]	; (80038f8 <straight_table2+0x91c>)
 800388e:	2204      	movs	r2, #4
 8003890:	701a      	strb	r2, [r3, #0]
				break;
 8003892:	e004      	b.n	800389e <straight_table2+0x8c2>
	while (g_acc_flag!=4){
 8003894:	4b18      	ldr	r3, [pc, #96]	; (80038f8 <straight_table2+0x91c>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b04      	cmp	r3, #4
 800389c:	d185      	bne.n	80037aa <straight_table2+0x7ce>
			}
		}

	}
	if(input_end_velocity==0){//BREAK
 800389e:	edd7 7a03 	vldr	s15, [r7, #12]
 80038a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80038a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038aa:	d105      	bne.n	80038b8 <straight_table2+0x8dc>
		wait_ms_NoReset(100);
 80038ac:	2064      	movs	r0, #100	; 0x64
 80038ae:	f004 fb3f 	bl	8007f30 <wait_ms_NoReset>
		modeacc = 0;
 80038b2:	4b1c      	ldr	r3, [pc, #112]	; (8003924 <straight_table2+0x948>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 80038b8:	4b1b      	ldr	r3, [pc, #108]	; (8003928 <straight_table2+0x94c>)
 80038ba:	ed93 7a00 	vldr	s14, [r3]
 80038be:	edd7 7a05 	vldr	s15, [r7, #20]
 80038c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038c6:	4b18      	ldr	r3, [pc, #96]	; (8003928 <straight_table2+0x94c>)
 80038c8:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 80038cc:	4b17      	ldr	r3, [pc, #92]	; (800392c <straight_table2+0x950>)
 80038ce:	ed93 7a00 	vldr	s14, [r3]
 80038d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80038d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038da:	4b14      	ldr	r3, [pc, #80]	; (800392c <straight_table2+0x950>)
 80038dc:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 80038e0:	f004 f85c 	bl	800799c <pl_DriveMotor_stop>

	}

	return straight.velocity;
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <straight_table2+0x920>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	ee07 3a90 	vmov	s15, r3



}
 80038ec:	eeb0 0a67 	vmov.f32	s0, s15
 80038f0:	3720      	adds	r7, #32
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000804 	.word	0x20000804
 80038fc:	200004d8 	.word	0x200004d8
 8003900:	200005e8 	.word	0x200005e8
 8003904:	420c0000 	.word	0x420c0000
 8003908:	200005f4 	.word	0x200005f4
 800390c:	20000534 	.word	0x20000534
 8003910:	200005d0 	.word	0x200005d0
 8003914:	200005cc 	.word	0x200005cc
 8003918:	200005d8 	.word	0x200005d8
 800391c:	200005d4 	.word	0x200005d4
 8003920:	200005e4 	.word	0x200005e4
 8003924:	20000528 	.word	0x20000528
 8003928:	20000220 	.word	0x20000220
 800392c:	20000224 	.word	0x20000224

08003930 <End_straight>:

void End_straight(float input_displacement,MOTOR_MODE motor_mode,_Bool right_wall,_Bool left_wall){
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	ed87 0a03 	vstr	s0, [r7, #12]
 800393a:	60b8      	str	r0, [r7, #8]
 800393c:	460b      	mov	r3, r1
 800393e:	71fb      	strb	r3, [r7, #7]
 8003940:	4613      	mov	r3, r2
 8003942:	71bb      	strb	r3, [r7, #6]
	while (g_acc_flag!=4){
 8003944:	e02f      	b.n	80039a6 <End_straight+0x76>
		if(right_wall == 0 || left_wall == 0){
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	f083 0301 	eor.w	r3, r3, #1
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d105      	bne.n	800395e <End_straight+0x2e>
 8003952:	79bb      	ldrb	r3, [r7, #6]
 8003954:	f083 0301 	eor.w	r3, r3, #1
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d023      	beq.n	80039a6 <End_straight+0x76>
		if(motor_mode.WallCutMode==1){
 800395e:	7afb      	ldrb	r3, [r7, #11]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d120      	bne.n	80039a6 <End_straight+0x76>
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003964:	edd7 7a03 	vldr	s15, [r7, #12]
 8003968:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800396c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003970:	4b1c      	ldr	r3, [pc, #112]	; (80039e4 <End_straight+0xb4>)
 8003972:	edd3 7a00 	vldr	s15, [r3]
 8003976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800397a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397e:	d90e      	bls.n	800399e <End_straight+0x6e>
					   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90 ){
 8003980:	edd7 7a03 	vldr	s15, [r7, #12]
 8003984:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8003988:	ee37 7a87 	vadd.f32	s14, s15, s14
 800398c:	4b16      	ldr	r3, [pc, #88]	; (80039e8 <End_straight+0xb8>)
 800398e:	edd3 7a00 	vldr	s15, [r3]
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800399a:	d900      	bls.n	800399e <End_straight+0x6e>
 800399c:	e003      	b.n	80039a6 <End_straight+0x76>
						g_acc_flag=4;
 800399e:	4b13      	ldr	r3, [pc, #76]	; (80039ec <End_straight+0xbc>)
 80039a0:	2204      	movs	r2, #4
 80039a2:	701a      	strb	r2, [r3, #0]
						break;
 80039a4:	e004      	b.n	80039b0 <End_straight+0x80>
	while (g_acc_flag!=4){
 80039a6:	4b11      	ldr	r3, [pc, #68]	; (80039ec <End_straight+0xbc>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d1ca      	bne.n	8003946 <End_straight+0x16>
//			}
//		}

	}
//	while(g_MotorEnd_flag==0){}
	E_distanceL = E_distanceL - input_displacement;
 80039b0:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <End_straight+0xc0>)
 80039b2:	ed93 7a00 	vldr	s14, [r3]
 80039b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80039ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039be:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <End_straight+0xc0>)
 80039c0:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <End_straight+0xc4>)
 80039c6:	ed93 7a00 	vldr	s14, [r3]
 80039ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80039ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039d2:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <End_straight+0xc4>)
 80039d4:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 80039d8:	f003 ffe0 	bl	800799c <pl_DriveMotor_stop>
}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	200005d0 	.word	0x200005d0
 80039e8:	200005cc 	.word	0x200005cc
 80039ec:	20000804 	.word	0x20000804
 80039f0:	20000220 	.word	0x20000220
 80039f4:	20000224 	.word	0x20000224

080039f8 <turning_table2>:

float turning_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	ed87 0a05 	vstr	s0, [r7, #20]
 8003a02:	edc7 0a04 	vstr	s1, [r7, #16]
 8003a06:	ed87 1a03 	vstr	s2, [r7, #12]
 8003a0a:	edc7 1a02 	vstr	s3, [r7, #8]
 8003a0e:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003a12:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a16:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003a1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003a22:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003a26:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003a2a:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003a2e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a36:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003a3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a46:	d505      	bpl.n	8003a54 <turning_table2+0x5c>
 8003a48:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a4c:	eef1 7a67 	vneg.f32	s15, s15
 8003a50:	edc7 7a01 	vstr	s15, [r7, #4]

	Trapezoid_turning.displacement = input_displacement;
 8003a54:	4a69      	ldr	r2, [pc, #420]	; (8003bfc <turning_table2+0x204>)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8003a5a:	4a68      	ldr	r2, [pc, #416]	; (8003bfc <turning_table2+0x204>)
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8003a60:	4a66      	ldr	r2, [pc, #408]	; (8003bfc <turning_table2+0x204>)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8003a66:	4a65      	ldr	r2, [pc, #404]	; (8003bfc <turning_table2+0x204>)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8003a6c:	4a63      	ldr	r2, [pc, #396]	; (8003bfc <turning_table2+0x204>)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8003a72:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7e:	db03      	blt.n	8003a88 <turning_table2+0x90>
 8003a80:	4a5f      	ldr	r2, [pc, #380]	; (8003c00 <turning_table2+0x208>)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6053      	str	r3, [r2, #4]
 8003a86:	e006      	b.n	8003a96 <turning_table2+0x9e>
	}else{turning.acceleration = -input_acceleration;}
 8003a88:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a8c:	eef1 7a67 	vneg.f32	s15, s15
 8003a90:	4b5b      	ldr	r3, [pc, #364]	; (8003c00 <turning_table2+0x208>)
 8003a92:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8003a96:	4a5a      	ldr	r2, [pc, #360]	; (8003c00 <turning_table2+0x208>)
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8003a9c:	4b58      	ldr	r3, [pc, #352]	; (8003c00 <turning_table2+0x208>)
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003aa4:	4b57      	ldr	r3, [pc, #348]	; (8003c04 <turning_table2+0x20c>)
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003aac:	4b55      	ldr	r3, [pc, #340]	; (8003c04 <turning_table2+0x20c>)
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003ab4:	4b53      	ldr	r3, [pc, #332]	; (8003c04 <turning_table2+0x20c>)
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003abc:	4b52      	ldr	r3, [pc, #328]	; (8003c08 <turning_table2+0x210>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003ac2:	4b52      	ldr	r3, [pc, #328]	; (8003c0c <turning_table2+0x214>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8003ac8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003acc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad4:	dd0e      	ble.n	8003af4 <turning_table2+0xfc>
 8003ad6:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ada:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ade:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae6:	dd05      	ble.n	8003af4 <turning_table2+0xfc>
 8003ae8:	4b48      	ldr	r3, [pc, #288]	; (8003c0c <turning_table2+0x214>)
 8003aea:	2205      	movs	r2, #5
 8003aec:	701a      	strb	r2, [r3, #0]
 8003aee:	4a44      	ldr	r2, [pc, #272]	; (8003c00 <turning_table2+0x208>)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8003af4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003af8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b00:	dd14      	ble.n	8003b2c <turning_table2+0x134>
 8003b02:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b06:	eef1 7a67 	vneg.f32	s15, s15
 8003b0a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b16:	d509      	bpl.n	8003b2c <turning_table2+0x134>
 8003b18:	4b3c      	ldr	r3, [pc, #240]	; (8003c0c <turning_table2+0x214>)
 8003b1a:	2206      	movs	r2, #6
 8003b1c:	701a      	strb	r2, [r3, #0]
 8003b1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b22:	eef1 7a67 	vneg.f32	s15, s15
 8003b26:	4b36      	ldr	r3, [pc, #216]	; (8003c00 <turning_table2+0x208>)
 8003b28:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8003b2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b38:	d514      	bpl.n	8003b64 <turning_table2+0x16c>
 8003b3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b3e:	eef1 7a67 	vneg.f32	s15, s15
 8003b42:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4e:	dd09      	ble.n	8003b64 <turning_table2+0x16c>
 8003b50:	4b2e      	ldr	r3, [pc, #184]	; (8003c0c <turning_table2+0x214>)
 8003b52:	2205      	movs	r2, #5
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b5a:	eef1 7a67 	vneg.f32	s15, s15
 8003b5e:	4b28      	ldr	r3, [pc, #160]	; (8003c00 <turning_table2+0x208>)
 8003b60:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8003b64:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b70:	d50e      	bpl.n	8003b90 <turning_table2+0x198>
 8003b72:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b76:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b82:	d505      	bpl.n	8003b90 <turning_table2+0x198>
 8003b84:	4b21      	ldr	r3, [pc, #132]	; (8003c0c <turning_table2+0x214>)
 8003b86:	2206      	movs	r2, #6
 8003b88:	701a      	strb	r2, [r3, #0]
 8003b8a:	4a1d      	ldr	r2, [pc, #116]	; (8003c00 <turning_table2+0x208>)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8003b90:	4b1f      	ldr	r3, [pc, #124]	; (8003c10 <turning_table2+0x218>)
 8003b92:	2202      	movs	r2, #2
 8003b94:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003b96:	f003 fef3 	bl	8007980 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003b9a:	bf00      	nop
 8003b9c:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <turning_table2+0x214>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d1fa      	bne.n	8003b9c <turning_table2+0x1a4>

	}
	if(input_end_velocity==0){//BREAK
 8003ba6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003baa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb2:	d106      	bne.n	8003bc2 <turning_table2+0x1ca>
		wait_ms_NoReset(300);
 8003bb4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003bb8:	f004 f9ba 	bl	8007f30 <wait_ms_NoReset>
		modeacc = 0;
 8003bbc:	4b14      	ldr	r3, [pc, #80]	; (8003c10 <turning_table2+0x218>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	angle = angle - input_displacement;
 8003bc2:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <turning_table2+0x21c>)
 8003bc4:	ed93 7a00 	vldr	s14, [r3]
 8003bc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bd0:	4b10      	ldr	r3, [pc, #64]	; (8003c14 <turning_table2+0x21c>)
 8003bd2:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003bd6:	f003 fee1 	bl	800799c <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8003bda:	4b0f      	ldr	r3, [pc, #60]	; (8003c18 <turning_table2+0x220>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a0f      	ldr	r2, [pc, #60]	; (8003c1c <turning_table2+0x224>)
 8003be0:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8003be2:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <turning_table2+0x228>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a0f      	ldr	r2, [pc, #60]	; (8003c24 <turning_table2+0x22c>)
 8003be8:	6013      	str	r3, [r2, #0]

	return turning.velocity;
 8003bea:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <turning_table2+0x208>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	ee07 3a90 	vmov	s15, r3
}
 8003bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf6:	3720      	adds	r7, #32
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	20000504 	.word	0x20000504
 8003c00:	200004e4 	.word	0x200004e4
 8003c04:	200004d8 	.word	0x200004d8
 8003c08:	20000805 	.word	0x20000805
 8003c0c:	20000804 	.word	0x20000804
 8003c10:	20000528 	.word	0x20000528
 8003c14:	20000264 	.word	0x20000264
 8003c18:	20000228 	.word	0x20000228
 8003c1c:	20000258 	.word	0x20000258
 8003c20:	2000022c 	.word	0x2000022c
 8003c24:	2000025c 	.word	0x2000025c

08003c28 <slalom_table2>:



float slalom_table2(float input_center_velocity,float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	ed87 0a05 	vstr	s0, [r7, #20]
 8003c32:	edc7 0a04 	vstr	s1, [r7, #16]
 8003c36:	ed87 1a03 	vstr	s2, [r7, #12]
 8003c3a:	edc7 1a02 	vstr	s3, [r7, #8]
 8003c3e:	ed87 2a01 	vstr	s4, [r7, #4]
 8003c42:	edc7 2a00 	vstr	s5, [r7]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003c46:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c4a:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003c4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c52:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003c56:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003c5a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003c5e:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003c62:	ed97 7a00 	vldr	s14, [r7]
 8003c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c6a:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003c6e:	edd7 7a00 	vldr	s15, [r7]
 8003c72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7a:	d505      	bpl.n	8003c88 <slalom_table2+0x60>
 8003c7c:	edd7 7a00 	vldr	s15, [r7]
 8003c80:	eef1 7a67 	vneg.f32	s15, s15
 8003c84:	edc7 7a00 	vstr	s15, [r7]

	Trapezoid_turning.displacement = input_displacement;
 8003c88:	4a5e      	ldr	r2, [pc, #376]	; (8003e04 <slalom_table2+0x1dc>)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8003c8e:	4a5d      	ldr	r2, [pc, #372]	; (8003e04 <slalom_table2+0x1dc>)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8003c94:	4a5b      	ldr	r2, [pc, #364]	; (8003e04 <slalom_table2+0x1dc>)
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8003c9a:	4a5a      	ldr	r2, [pc, #360]	; (8003e04 <slalom_table2+0x1dc>)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8003ca0:	4a58      	ldr	r2, [pc, #352]	; (8003e04 <slalom_table2+0x1dc>)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8003ca6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003caa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb2:	db03      	blt.n	8003cbc <slalom_table2+0x94>
 8003cb4:	4a54      	ldr	r2, [pc, #336]	; (8003e08 <slalom_table2+0x1e0>)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	6053      	str	r3, [r2, #4]
 8003cba:	e006      	b.n	8003cca <slalom_table2+0xa2>
	}else{turning.acceleration = -input_acceleration;}
 8003cbc:	edd7 7a00 	vldr	s15, [r7]
 8003cc0:	eef1 7a67 	vneg.f32	s15, s15
 8003cc4:	4b50      	ldr	r3, [pc, #320]	; (8003e08 <slalom_table2+0x1e0>)
 8003cc6:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8003cca:	4a4f      	ldr	r2, [pc, #316]	; (8003e08 <slalom_table2+0x1e0>)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8003cd0:	4b4d      	ldr	r3, [pc, #308]	; (8003e08 <slalom_table2+0x1e0>)
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8003cd8:	4a4c      	ldr	r2, [pc, #304]	; (8003e0c <slalom_table2+0x1e4>)
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8003cde:	4b4b      	ldr	r3, [pc, #300]	; (8003e0c <slalom_table2+0x1e4>)
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003ce6:	4b49      	ldr	r3, [pc, #292]	; (8003e0c <slalom_table2+0x1e4>)
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003cee:	4b48      	ldr	r3, [pc, #288]	; (8003e10 <slalom_table2+0x1e8>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003cf4:	4b47      	ldr	r3, [pc, #284]	; (8003e14 <slalom_table2+0x1ec>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8003cfa:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d06:	dd0e      	ble.n	8003d26 <slalom_table2+0xfe>
 8003d08:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d18:	dd05      	ble.n	8003d26 <slalom_table2+0xfe>
 8003d1a:	4b3e      	ldr	r3, [pc, #248]	; (8003e14 <slalom_table2+0x1ec>)
 8003d1c:	2205      	movs	r2, #5
 8003d1e:	701a      	strb	r2, [r3, #0]
 8003d20:	4a39      	ldr	r2, [pc, #228]	; (8003e08 <slalom_table2+0x1e0>)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8003d26:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d32:	dd14      	ble.n	8003d5e <slalom_table2+0x136>
 8003d34:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d38:	eef1 7a67 	vneg.f32	s15, s15
 8003d3c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d48:	d509      	bpl.n	8003d5e <slalom_table2+0x136>
 8003d4a:	4b32      	ldr	r3, [pc, #200]	; (8003e14 <slalom_table2+0x1ec>)
 8003d4c:	2206      	movs	r2, #6
 8003d4e:	701a      	strb	r2, [r3, #0]
 8003d50:	edd7 7a00 	vldr	s15, [r7]
 8003d54:	eef1 7a67 	vneg.f32	s15, s15
 8003d58:	4b2b      	ldr	r3, [pc, #172]	; (8003e08 <slalom_table2+0x1e0>)
 8003d5a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8003d5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d6a:	d514      	bpl.n	8003d96 <slalom_table2+0x16e>
 8003d6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d70:	eef1 7a67 	vneg.f32	s15, s15
 8003d74:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d80:	dd09      	ble.n	8003d96 <slalom_table2+0x16e>
 8003d82:	4b24      	ldr	r3, [pc, #144]	; (8003e14 <slalom_table2+0x1ec>)
 8003d84:	2205      	movs	r2, #5
 8003d86:	701a      	strb	r2, [r3, #0]
 8003d88:	edd7 7a00 	vldr	s15, [r7]
 8003d8c:	eef1 7a67 	vneg.f32	s15, s15
 8003d90:	4b1d      	ldr	r3, [pc, #116]	; (8003e08 <slalom_table2+0x1e0>)
 8003d92:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8003d96:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da2:	d50e      	bpl.n	8003dc2 <slalom_table2+0x19a>
 8003da4:	ed97 7a07 	vldr	s14, [r7, #28]
 8003da8:	edd7 7a04 	vldr	s15, [r7, #16]
 8003dac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db4:	d505      	bpl.n	8003dc2 <slalom_table2+0x19a>
 8003db6:	4b17      	ldr	r3, [pc, #92]	; (8003e14 <slalom_table2+0x1ec>)
 8003db8:	2206      	movs	r2, #6
 8003dba:	701a      	strb	r2, [r3, #0]
 8003dbc:	4a12      	ldr	r2, [pc, #72]	; (8003e08 <slalom_table2+0x1e0>)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	6053      	str	r3, [r2, #4]
	modeacc = 4;
 8003dc2:	4b15      	ldr	r3, [pc, #84]	; (8003e18 <slalom_table2+0x1f0>)
 8003dc4:	2204      	movs	r2, #4
 8003dc6:	701a      	strb	r2, [r3, #0]
//	enc.sigma_error=0;
	pl_DriveMotor_start();
 8003dc8:	f003 fdda 	bl	8007980 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003dcc:	bf00      	nop
 8003dce:	4b11      	ldr	r3, [pc, #68]	; (8003e14 <slalom_table2+0x1ec>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d1fa      	bne.n	8003dce <slalom_table2+0x1a6>

	}
//	modeacc = 0;
//	enc.sigma_error=0;

	angle = angle - input_displacement;
 8003dd8:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <slalom_table2+0x1f4>)
 8003dda:	ed93 7a00 	vldr	s14, [r3]
 8003dde:	edd7 7a04 	vldr	s15, [r7, #16]
 8003de2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003de6:	4b0d      	ldr	r3, [pc, #52]	; (8003e1c <slalom_table2+0x1f4>)
 8003de8:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003dec:	f003 fdd6 	bl	800799c <pl_DriveMotor_stop>

	return turning.velocity;
 8003df0:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <slalom_table2+0x1e0>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	ee07 3a90 	vmov	s15, r3
}
 8003df8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dfc:	3720      	adds	r7, #32
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20000504 	.word	0x20000504
 8003e08:	200004e4 	.word	0x200004e4
 8003e0c:	200004d8 	.word	0x200004d8
 8003e10:	20000805 	.word	0x20000805
 8003e14:	20000804 	.word	0x20000804
 8003e18:	20000528 	.word	0x20000528
 8003e1c:	20000264 	.word	0x20000264

08003e20 <no_angle>:

void no_angle(void){
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8003e24:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <no_angle+0x88>)
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8003e2c:	4b1e      	ldr	r3, [pc, #120]	; (8003ea8 <no_angle+0x88>)
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003e34:	4b1c      	ldr	r3, [pc, #112]	; (8003ea8 <no_angle+0x88>)
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003e3c:	4b1b      	ldr	r3, [pc, #108]	; (8003eac <no_angle+0x8c>)
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003e44:	4b19      	ldr	r3, [pc, #100]	; (8003eac <no_angle+0x8c>)
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003e4c:	4b17      	ldr	r3, [pc, #92]	; (8003eac <no_angle+0x8c>)
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	609a      	str	r2, [r3, #8]

	modeacc = 3;
 8003e54:	4b16      	ldr	r3, [pc, #88]	; (8003eb0 <no_angle+0x90>)
 8003e56:	2203      	movs	r2, #3
 8003e58:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003e5a:	f003 fd91 	bl	8007980 <pl_DriveMotor_start>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8003e5e:	e002      	b.n	8003e66 <no_angle+0x46>
		HAL_Delay(1);
 8003e60:	2001      	movs	r0, #1
 8003e62:	f014 ff79 	bl	8018d58 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8003e66:	4b13      	ldr	r3, [pc, #76]	; (8003eb4 <no_angle+0x94>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003e6e:	ddf7      	ble.n	8003e60 <no_angle+0x40>
 8003e70:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <no_angle+0x94>)
 8003e72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e76:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003e7a:	ddf1      	ble.n	8003e60 <no_angle+0x40>
 8003e7c:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <no_angle+0x94>)
 8003e7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003e82:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003e86:	ddeb      	ble.n	8003e60 <no_angle+0x40>
//		if(record_time >= max_record_time){
//			break;
//		}
	}
	modeacc = 0;
 8003e88:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <no_angle+0x90>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8003e8e:	f003 fd85 	bl	800799c <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8003e92:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <no_angle+0x98>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a09      	ldr	r2, [pc, #36]	; (8003ebc <no_angle+0x9c>)
 8003e98:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8003e9a:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <no_angle+0xa0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a09      	ldr	r2, [pc, #36]	; (8003ec4 <no_angle+0xa4>)
 8003ea0:	6013      	str	r3, [r2, #0]

}
 8003ea2:	bf00      	nop
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	200004e4 	.word	0x200004e4
 8003eac:	200004d8 	.word	0x200004d8
 8003eb0:	20000528 	.word	0x20000528
 8003eb4:	200002b8 	.word	0x200002b8
 8003eb8:	20000228 	.word	0x20000228
 8003ebc:	20000258 	.word	0x20000258
 8003ec0:	2000022c 	.word	0x2000022c
 8003ec4:	2000025c 	.word	0x2000025c

08003ec8 <mollifier_slalom_table>:


void mollifier_slalom_table(float input_center_velocity,float input_displacement, float input_max_turning_velocity) {
 8003ec8:	b5b0      	push	{r4, r5, r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	ed87 0a03 	vstr	s0, [r7, #12]
 8003ed2:	edc7 0a02 	vstr	s1, [r7, #8]
 8003ed6:	ed87 1a01 	vstr	s2, [r7, #4]

	// 例外処理

	Mollifier_turning.center_velocity = input_center_velocity;
 8003eda:	4a3d      	ldr	r2, [pc, #244]	; (8003fd0 <mollifier_slalom_table+0x108>)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6053      	str	r3, [r2, #4]
	Mollifier_turning.displacement = input_displacement;
 8003ee0:	4a3b      	ldr	r2, [pc, #236]	; (8003fd0 <mollifier_slalom_table+0x108>)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	6013      	str	r3, [r2, #0]
	Mollifier_turning.max_turning_velocity = input_max_turning_velocity;
 8003ee6:	4a3a      	ldr	r2, [pc, #232]	; (8003fd0 <mollifier_slalom_table+0x108>)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6093      	str	r3, [r2, #8]


	turning.velocity = 0;
 8003eec:	4b39      	ldr	r3, [pc, #228]	; (8003fd4 <mollifier_slalom_table+0x10c>)
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003ef4:	4b37      	ldr	r3, [pc, #220]	; (8003fd4 <mollifier_slalom_table+0x10c>)
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8003efc:	4a36      	ldr	r2, [pc, #216]	; (8003fd8 <mollifier_slalom_table+0x110>)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8003f02:	4b35      	ldr	r3, [pc, #212]	; (8003fd8 <mollifier_slalom_table+0x110>)
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003f0a:	4b33      	ldr	r3, [pc, #204]	; (8003fd8 <mollifier_slalom_table+0x110>)
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003f12:	4b32      	ldr	r3, [pc, #200]	; (8003fdc <mollifier_slalom_table+0x114>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003f18:	4b31      	ldr	r3, [pc, #196]	; (8003fe0 <mollifier_slalom_table+0x118>)
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	701a      	strb	r2, [r3, #0]
	mollifier_timer=-fabs(input_displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input_max_turning_velocity;
 8003f1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f22:	eef0 7ae7 	vabs.f32	s15, s15
 8003f26:	ee17 0a90 	vmov	r0, s15
 8003f2a:	f7fc fb35 	bl	8000598 <__aeabi_f2d>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4614      	mov	r4, r2
 8003f34:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003f38:	a321      	add	r3, pc, #132	; (adr r3, 8003fc0 <mollifier_slalom_table+0xf8>)
 8003f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3e:	4620      	mov	r0, r4
 8003f40:	4629      	mov	r1, r5
 8003f42:	f7fc fcab 	bl	800089c <__aeabi_ddiv>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	a31e      	add	r3, pc, #120	; (adr r3, 8003fc8 <mollifier_slalom_table+0x100>)
 8003f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f54:	f7fc fb78 	bl	8000648 <__aeabi_dmul>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4614      	mov	r4, r2
 8003f5e:	461d      	mov	r5, r3
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7fc fb19 	bl	8000598 <__aeabi_f2d>
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	f7fc fc95 	bl	800089c <__aeabi_ddiv>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	4610      	mov	r0, r2
 8003f78:	4619      	mov	r1, r3
 8003f7a:	f7fc fe3d 	bl	8000bf8 <__aeabi_d2f>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	4a18      	ldr	r2, [pc, #96]	; (8003fe4 <mollifier_slalom_table+0x11c>)
 8003f82:	6013      	str	r3, [r2, #0]
	modeacc = 6;
 8003f84:	4b18      	ldr	r3, [pc, #96]	; (8003fe8 <mollifier_slalom_table+0x120>)
 8003f86:	2206      	movs	r2, #6
 8003f88:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003f8a:	f003 fcf9 	bl	8007980 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003f8e:	bf00      	nop
 8003f90:	4b13      	ldr	r3, [pc, #76]	; (8003fe0 <mollifier_slalom_table+0x118>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d1fa      	bne.n	8003f90 <mollifier_slalom_table+0xc8>

	}
//	modeacc = 0;


	angle = angle - input_displacement;
 8003f9a:	4b14      	ldr	r3, [pc, #80]	; (8003fec <mollifier_slalom_table+0x124>)
 8003f9c:	ed93 7a00 	vldr	s14, [r3]
 8003fa0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fa8:	4b10      	ldr	r3, [pc, #64]	; (8003fec <mollifier_slalom_table+0x124>)
 8003faa:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003fae:	f003 fcf5 	bl	800799c <pl_DriveMotor_stop>

}
 8003fb2:	bf00      	nop
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	f3af 8000 	nop.w
 8003fc0:	f9db22d1 	.word	0xf9db22d1
 8003fc4:	3fdc6a7e 	.word	0x3fdc6a7e
 8003fc8:	362cef38 	.word	0x362cef38
 8003fcc:	3fd78b56 	.word	0x3fd78b56
 8003fd0:	20000518 	.word	0x20000518
 8003fd4:	200004e4 	.word	0x200004e4
 8003fd8:	200004d8 	.word	0x200004d8
 8003fdc:	20000805 	.word	0x20000805
 8003fe0:	20000804 	.word	0x20000804
 8003fe4:	20000800 	.word	0x20000800
 8003fe8:	20000528 	.word	0x20000528
 8003fec:	20000264 	.word	0x20000264

08003ff0 <no_frontwall_straight>:


void no_frontwall_straight(void){
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8003ff4:	4b1a      	ldr	r3, [pc, #104]	; (8004060 <no_frontwall_straight+0x70>)
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8003ffc:	4b18      	ldr	r3, [pc, #96]	; (8004060 <no_frontwall_straight+0x70>)
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8004004:	4b16      	ldr	r3, [pc, #88]	; (8004060 <no_frontwall_straight+0x70>)
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 800400c:	4b15      	ldr	r3, [pc, #84]	; (8004064 <no_frontwall_straight+0x74>)
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8004014:	4b13      	ldr	r3, [pc, #76]	; (8004064 <no_frontwall_straight+0x74>)
 8004016:	f04f 0200 	mov.w	r2, #0
 800401a:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 800401c:	4b11      	ldr	r3, [pc, #68]	; (8004064 <no_frontwall_straight+0x74>)
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	609a      	str	r2, [r3, #8]

	g_FrontWallControl_mode=1;
 8004024:	4b10      	ldr	r3, [pc, #64]	; (8004068 <no_frontwall_straight+0x78>)
 8004026:	2201      	movs	r2, #1
 8004028:	701a      	strb	r2, [r3, #0]
	modeacc = 5;
 800402a:	4b10      	ldr	r3, [pc, #64]	; (800406c <no_frontwall_straight+0x7c>)
 800402c:	2205      	movs	r2, #5
 800402e:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8004030:	f003 fca6 	bl	8007980 <pl_DriveMotor_start>
	wait_ms_NoReset(150);
 8004034:	2096      	movs	r0, #150	; 0x96
 8004036:	f003 ff7b 	bl	8007f30 <wait_ms_NoReset>
//		HAL_Delay(1);
////		if(record_time >= max_record_time){
////			break;
////		}
//	}
	g_FrontWallControl_mode=0;
 800403a:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <no_frontwall_straight+0x78>)
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]
	modeacc = 0;
 8004040:	4b0a      	ldr	r3, [pc, #40]	; (800406c <no_frontwall_straight+0x7c>)
 8004042:	2200      	movs	r2, #0
 8004044:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8004046:	f003 fca9 	bl	800799c <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 800404a:	4b09      	ldr	r3, [pc, #36]	; (8004070 <no_frontwall_straight+0x80>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a09      	ldr	r2, [pc, #36]	; (8004074 <no_frontwall_straight+0x84>)
 8004050:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8004052:	4b09      	ldr	r3, [pc, #36]	; (8004078 <no_frontwall_straight+0x88>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a09      	ldr	r2, [pc, #36]	; (800407c <no_frontwall_straight+0x8c>)
 8004058:	6013      	str	r3, [r2, #0]

}
 800405a:	bf00      	nop
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	200004e4 	.word	0x200004e4
 8004064:	200004d8 	.word	0x200004d8
 8004068:	20000591 	.word	0x20000591
 800406c:	20000528 	.word	0x20000528
 8004070:	20000228 	.word	0x20000228
 8004074:	20000258 	.word	0x20000258
 8004078:	2000022c 	.word	0x2000022c
 800407c:	2000025c 	.word	0x2000025c

08004080 <feedforward_const_accel>:
#include "fail_safe.h"

void feedforward_const_accel(float *feedforward_straight,
		float straight_velocity, float straight_acceleration,
		float *feedforward_turning, float turning_velocity,
		float turning_acceleration) {
 8004080:	b5b0      	push	{r4, r5, r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af00      	add	r7, sp, #0
 8004086:	6178      	str	r0, [r7, #20]
 8004088:	ed87 0a04 	vstr	s0, [r7, #16]
 800408c:	edc7 0a03 	vstr	s1, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	ed87 1a01 	vstr	s2, [r7, #4]
 8004096:	edc7 1a00 	vstr	s3, [r7]

float ImT;//0.00000116 //kg/m^2 ロータ慣性モーメントターン用

if(highspeed_mode == 1){
 800409a:	4bd3      	ldr	r3, [pc, #844]	; (80043e8 <feedforward_const_accel+0x368>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d102      	bne.n	80040a8 <feedforward_const_accel+0x28>
	ImT=0.00000052;
 80040a2:	4bd2      	ldr	r3, [pc, #840]	; (80043ec <feedforward_const_accel+0x36c>)
 80040a4:	61fb      	str	r3, [r7, #28]
 80040a6:	e001      	b.n	80040ac <feedforward_const_accel+0x2c>
}else{
	ImT=0.00000035;
 80040a8:	4bd1      	ldr	r3, [pc, #836]	; (80043f0 <feedforward_const_accel+0x370>)
 80040aa:	61fb      	str	r3, [r7, #28]

}

	if (straight_velocity >= 0) {
 80040ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80040b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b8:	db7c      	blt.n	80041b4 <feedforward_const_accel+0x134>
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f7fc fa6c 	bl	8000598 <__aeabi_f2d>
 80040c0:	a3bd      	add	r3, pc, #756	; (adr r3, 80043b8 <feedforward_const_accel+0x338>)
 80040c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c6:	f7fc fabf 	bl	8000648 <__aeabi_dmul>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	4610      	mov	r0, r2
 80040d0:	4619      	mov	r1, r3
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	4bc7      	ldr	r3, [pc, #796]	; (80043f4 <feedforward_const_accel+0x374>)
 80040d8:	f7fc fbe0 	bl	800089c <__aeabi_ddiv>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4610      	mov	r0, r2
 80040e2:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 80040e4:	a3b6      	add	r3, pc, #728	; (adr r3, 80043c0 <feedforward_const_accel+0x340>)
 80040e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ea:	f7fc fbd7 	bl	800089c <__aeabi_ddiv>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4610      	mov	r0, r2
 80040f4:	4619      	mov	r1, r3
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80040fe:	f7fc fbcd 	bl	800089c <__aeabi_ddiv>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4610      	mov	r0, r2
 8004108:	4619      	mov	r1, r3
 800410a:	a3af      	add	r3, pc, #700	; (adr r3, 80043c8 <feedforward_const_accel+0x348>)
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	f7fc f8e4 	bl	80002dc <__adddf3>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4610      	mov	r0, r2
 800411a:	4619      	mov	r1, r3
 800411c:	a3ac      	add	r3, pc, #688	; (adr r3, 80043d0 <feedforward_const_accel+0x350>)
 800411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004122:	f7fc fa91 	bl	8000648 <__aeabi_dmul>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4610      	mov	r0, r2
 800412c:	4619      	mov	r1, r3
 800412e:	a3aa      	add	r3, pc, #680	; (adr r3, 80043d8 <feedforward_const_accel+0x358>)
 8004130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004134:	f7fc fbb2 	bl	800089c <__aeabi_ddiv>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4614      	mov	r4, r2
 800413e:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004140:	ed97 7a04 	vldr	s14, [r7, #16]
 8004144:	eddf 6aad 	vldr	s13, [pc, #692]	; 80043fc <feedforward_const_accel+0x37c>
 8004148:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800414c:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 80043f8 <feedforward_const_accel+0x378>
 8004150:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004154:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004158:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800415c:	ee16 0a90 	vmov	r0, s13
 8004160:	f7fc fa1a 	bl	8000598 <__aeabi_f2d>
 8004164:	a39e      	add	r3, pc, #632	; (adr r3, 80043e0 <feedforward_const_accel+0x360>)
 8004166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416a:	f7fc fa6d 	bl	8000648 <__aeabi_dmul>
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4610      	mov	r0, r2
 8004174:	4619      	mov	r1, r3
 8004176:	a392      	add	r3, pc, #584	; (adr r3, 80043c0 <feedforward_const_accel+0x340>)
 8004178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417c:	f7fc fb8e 	bl	800089c <__aeabi_ddiv>
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	4610      	mov	r0, r2
 8004186:	4619      	mov	r1, r3
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004190:	f7fc fb84 	bl	800089c <__aeabi_ddiv>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4620      	mov	r0, r4
 800419a:	4629      	mov	r1, r5
 800419c:	f7fc f89e 	bl	80002dc <__adddf3>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4610      	mov	r0, r2
 80041a6:	4619      	mov	r1, r3
 80041a8:	f7fc fd26 	bl	8000bf8 <__aeabi_d2f>
 80041ac:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	e07b      	b.n	80042ac <feedforward_const_accel+0x22c>
	} else {
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f7fc f9ef 	bl	8000598 <__aeabi_f2d>
 80041ba:	a37f      	add	r3, pc, #508	; (adr r3, 80043b8 <feedforward_const_accel+0x338>)
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	f7fc fa42 	bl	8000648 <__aeabi_dmul>
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	4610      	mov	r0, r2
 80041ca:	4619      	mov	r1, r3
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	4b88      	ldr	r3, [pc, #544]	; (80043f4 <feedforward_const_accel+0x374>)
 80041d2:	f7fc fb63 	bl	800089c <__aeabi_ddiv>
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	4610      	mov	r0, r2
 80041dc:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 80041de:	a378      	add	r3, pc, #480	; (adr r3, 80043c0 <feedforward_const_accel+0x340>)
 80041e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e4:	f7fc fb5a 	bl	800089c <__aeabi_ddiv>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4610      	mov	r0, r2
 80041ee:	4619      	mov	r1, r3
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041f8:	f7fc fb50 	bl	800089c <__aeabi_ddiv>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4610      	mov	r0, r2
 8004202:	4619      	mov	r1, r3
 8004204:	a370      	add	r3, pc, #448	; (adr r3, 80043c8 <feedforward_const_accel+0x348>)
 8004206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420a:	f7fc f865 	bl	80002d8 <__aeabi_dsub>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4610      	mov	r0, r2
 8004214:	4619      	mov	r1, r3
 8004216:	a36e      	add	r3, pc, #440	; (adr r3, 80043d0 <feedforward_const_accel+0x350>)
 8004218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421c:	f7fc fa14 	bl	8000648 <__aeabi_dmul>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4610      	mov	r0, r2
 8004226:	4619      	mov	r1, r3
 8004228:	a36b      	add	r3, pc, #428	; (adr r3, 80043d8 <feedforward_const_accel+0x358>)
 800422a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422e:	f7fc fb35 	bl	800089c <__aeabi_ddiv>
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	4614      	mov	r4, r2
 8004238:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 800423a:	ed97 7a04 	vldr	s14, [r7, #16]
 800423e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80043fc <feedforward_const_accel+0x37c>
 8004242:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004246:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80043f8 <feedforward_const_accel+0x378>
 800424a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800424e:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004252:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004256:	ee16 0a90 	vmov	r0, s13
 800425a:	f7fc f99d 	bl	8000598 <__aeabi_f2d>
 800425e:	a360      	add	r3, pc, #384	; (adr r3, 80043e0 <feedforward_const_accel+0x360>)
 8004260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004264:	f7fc f9f0 	bl	8000648 <__aeabi_dmul>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4610      	mov	r0, r2
 800426e:	4619      	mov	r1, r3
 8004270:	a353      	add	r3, pc, #332	; (adr r3, 80043c0 <feedforward_const_accel+0x340>)
 8004272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004276:	f7fc fb11 	bl	800089c <__aeabi_ddiv>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	4610      	mov	r0, r2
 8004280:	4619      	mov	r1, r3
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800428a:	f7fc fb07 	bl	800089c <__aeabi_ddiv>
 800428e:	4602      	mov	r2, r0
 8004290:	460b      	mov	r3, r1
 8004292:	4620      	mov	r0, r4
 8004294:	4629      	mov	r1, r5
 8004296:	f7fc f821 	bl	80002dc <__adddf3>
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	4610      	mov	r0, r2
 80042a0:	4619      	mov	r1, r3
 80042a2:	f7fc fca9 	bl	8000bf8 <__aeabi_d2f>
 80042a6:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	601a      	str	r2, [r3, #0]
	}
	if (turning_velocity >= 0) {
 80042ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80042b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b8:	f2c0 80a2 	blt.w	8004400 <feedforward_const_accel+0x380>
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80042bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80042c0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80043f8 <feedforward_const_accel+0x378>
 80042c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042c8:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 80042cc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80042d0:	edd7 7a00 	vldr	s15, [r7]
 80042d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042d8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80043fc <feedforward_const_accel+0x37c>
 80042dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80042e0:	ee16 0a90 	vmov	r0, s13
 80042e4:	f7fc f958 	bl	8000598 <__aeabi_f2d>
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 80042e8:	a335      	add	r3, pc, #212	; (adr r3, 80043c0 <feedforward_const_accel+0x340>)
 80042ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ee:	f7fc fad5 	bl	800089c <__aeabi_ddiv>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4610      	mov	r0, r2
 80042f8:	4619      	mov	r1, r3
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004302:	f7fc facb 	bl	800089c <__aeabi_ddiv>
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	4610      	mov	r0, r2
 800430c:	4619      	mov	r1, r3
 800430e:	a32e      	add	r3, pc, #184	; (adr r3, 80043c8 <feedforward_const_accel+0x348>)
 8004310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004314:	f7fb ffe2 	bl	80002dc <__adddf3>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4610      	mov	r0, r2
 800431e:	4619      	mov	r1, r3
 8004320:	a32b      	add	r3, pc, #172	; (adr r3, 80043d0 <feedforward_const_accel+0x350>)
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	f7fc f98f 	bl	8000648 <__aeabi_dmul>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4610      	mov	r0, r2
 8004330:	4619      	mov	r1, r3
 8004332:	a329      	add	r3, pc, #164	; (adr r3, 80043d8 <feedforward_const_accel+0x358>)
 8004334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004338:	f7fc fab0 	bl	800089c <__aeabi_ddiv>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	4614      	mov	r4, r2
 8004342:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004344:	ed97 7a01 	vldr	s14, [r7, #4]
 8004348:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80043fc <feedforward_const_accel+0x37c>
 800434c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004350:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80043f8 <feedforward_const_accel+0x378>
 8004354:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004358:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800435c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004360:	ee16 0a90 	vmov	r0, s13
 8004364:	f7fc f918 	bl	8000598 <__aeabi_f2d>
 8004368:	a31d      	add	r3, pc, #116	; (adr r3, 80043e0 <feedforward_const_accel+0x360>)
 800436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436e:	f7fc f96b 	bl	8000648 <__aeabi_dmul>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4610      	mov	r0, r2
 8004378:	4619      	mov	r1, r3
 800437a:	a311      	add	r3, pc, #68	; (adr r3, 80043c0 <feedforward_const_accel+0x340>)
 800437c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004380:	f7fc fa8c 	bl	800089c <__aeabi_ddiv>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4610      	mov	r0, r2
 800438a:	4619      	mov	r1, r3
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004394:	f7fc fa82 	bl	800089c <__aeabi_ddiv>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4620      	mov	r0, r4
 800439e:	4629      	mov	r1, r5
 80043a0:	f7fb ff9c 	bl	80002dc <__adddf3>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4610      	mov	r0, r2
 80043aa:	4619      	mov	r1, r3
 80043ac:	f7fc fc24 	bl	8000bf8 <__aeabi_d2f>
 80043b0:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	601a      	str	r2, [r3, #0]
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
	}
	//*feedforward_straight=0;
	//*feedforward_turning =0;

}
 80043b6:	e0a0      	b.n	80044fa <feedforward_const_accel+0x47a>
 80043b8:	7df8b79b 	.word	0x7df8b79b
 80043bc:	3ed5fdfc 	.word	0x3ed5fdfc
 80043c0:	ca619631 	.word	0xca619631
 80043c4:	3f9b3322 	.word	0x3f9b3322
 80043c8:	eb1c432d 	.word	0xeb1c432d
 80043cc:	3f1a36e2 	.word	0x3f1a36e2
 80043d0:	51eb851f 	.word	0x51eb851f
 80043d4:	3ff11eb8 	.word	0x3ff11eb8
 80043d8:	b7952d23 	.word	0xb7952d23
 80043dc:	3f569c23 	.word	0x3f569c23
 80043e0:	761b0f50 	.word	0x761b0f50
 80043e4:	3f66bf29 	.word	0x3f66bf29
 80043e8:	20000808 	.word	0x20000808
 80043ec:	350b9621 	.word	0x350b9621
 80043f0:	34bbe7a2 	.word	0x34bbe7a2
 80043f4:	408f4000 	.word	0x408f4000
 80043f8:	421c0000 	.word	0x421c0000
 80043fc:	447a0000 	.word	0x447a0000
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 8004400:	edd7 7a07 	vldr	s15, [r7, #28]
 8004404:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 80043f8 <feedforward_const_accel+0x378>
 8004408:	ee67 7a87 	vmul.f32	s15, s15, s14
 800440c:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 8004410:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004414:	edd7 7a00 	vldr	s15, [r7]
 8004418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800441c:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 80043fc <feedforward_const_accel+0x37c>
 8004420:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004424:	ee16 0a90 	vmov	r0, s13
 8004428:	f7fc f8b6 	bl	8000598 <__aeabi_f2d>
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 800442c:	a338      	add	r3, pc, #224	; (adr r3, 8004510 <feedforward_const_accel+0x490>)
 800442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004432:	f7fc fa33 	bl	800089c <__aeabi_ddiv>
 8004436:	4602      	mov	r2, r0
 8004438:	460b      	mov	r3, r1
 800443a:	4610      	mov	r0, r2
 800443c:	4619      	mov	r1, r3
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004446:	f7fc fa29 	bl	800089c <__aeabi_ddiv>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4610      	mov	r0, r2
 8004450:	4619      	mov	r1, r3
 8004452:	a333      	add	r3, pc, #204	; (adr r3, 8004520 <feedforward_const_accel+0x4a0>)
 8004454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004458:	f7fb ff3e 	bl	80002d8 <__aeabi_dsub>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4610      	mov	r0, r2
 8004462:	4619      	mov	r1, r3
 8004464:	a330      	add	r3, pc, #192	; (adr r3, 8004528 <feedforward_const_accel+0x4a8>)
 8004466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446a:	f7fc f8ed 	bl	8000648 <__aeabi_dmul>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4610      	mov	r0, r2
 8004474:	4619      	mov	r1, r3
 8004476:	a32e      	add	r3, pc, #184	; (adr r3, 8004530 <feedforward_const_accel+0x4b0>)
 8004478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447c:	f7fc fa0e 	bl	800089c <__aeabi_ddiv>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4614      	mov	r4, r2
 8004486:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004488:	ed97 7a01 	vldr	s14, [r7, #4]
 800448c:	eddf 6a22 	vldr	s13, [pc, #136]	; 8004518 <feedforward_const_accel+0x498>
 8004490:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004494:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800451c <feedforward_const_accel+0x49c>
 8004498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800449c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80044a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80044a4:	ee16 0a90 	vmov	r0, s13
 80044a8:	f7fc f876 	bl	8000598 <__aeabi_f2d>
 80044ac:	a316      	add	r3, pc, #88	; (adr r3, 8004508 <feedforward_const_accel+0x488>)
 80044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b2:	f7fc f8c9 	bl	8000648 <__aeabi_dmul>
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	4610      	mov	r0, r2
 80044bc:	4619      	mov	r1, r3
 80044be:	a314      	add	r3, pc, #80	; (adr r3, 8004510 <feedforward_const_accel+0x490>)
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	f7fc f9ea 	bl	800089c <__aeabi_ddiv>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4610      	mov	r0, r2
 80044ce:	4619      	mov	r1, r3
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044d8:	f7fc f9e0 	bl	800089c <__aeabi_ddiv>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	4620      	mov	r0, r4
 80044e2:	4629      	mov	r1, r5
 80044e4:	f7fb fefa 	bl	80002dc <__adddf3>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4610      	mov	r0, r2
 80044ee:	4619      	mov	r1, r3
 80044f0:	f7fc fb82 	bl	8000bf8 <__aeabi_d2f>
 80044f4:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	601a      	str	r2, [r3, #0]
}
 80044fa:	bf00      	nop
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bdb0      	pop	{r4, r5, r7, pc}
 8004502:	bf00      	nop
 8004504:	f3af 8000 	nop.w
 8004508:	761b0f50 	.word	0x761b0f50
 800450c:	3f66bf29 	.word	0x3f66bf29
 8004510:	ca619631 	.word	0xca619631
 8004514:	3f9b3322 	.word	0x3f9b3322
 8004518:	447a0000 	.word	0x447a0000
 800451c:	421c0000 	.word	0x421c0000
 8004520:	eb1c432d 	.word	0xeb1c432d
 8004524:	3f1a36e2 	.word	0x3f1a36e2
 8004528:	51eb851f 	.word	0x51eb851f
 800452c:	3ff11eb8 	.word	0x3ff11eb8
 8004530:	b7952d23 	.word	0xb7952d23
 8004534:	3f569c23 	.word	0x3f569c23

08004538 <PID_Init>:
struct PID Gyro;

float Ksp, Ksi, Ksd;
float Ktp, Kti, Ktd;

void PID_Init(void) {
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0

	Ksp = 3.1; //3//P項の制御量直進*****************************************************
 800453c:	4b0f      	ldr	r3, [pc, #60]	; (800457c <PID_Init+0x44>)
 800453e:	4a10      	ldr	r2, [pc, #64]	; (8004580 <PID_Init+0x48>)
 8004540:	601a      	str	r2, [r3, #0]
	Ksi = 0.08; //80//5//43//I項の制御量直進*****************************************************
 8004542:	4b10      	ldr	r3, [pc, #64]	; (8004584 <PID_Init+0x4c>)
 8004544:	4a10      	ldr	r2, [pc, #64]	; (8004588 <PID_Init+0x50>)
 8004546:	601a      	str	r2, [r3, #0]
	Ksd = 0.00; //D項の制御量直進*****************************************************
 8004548:	4b10      	ldr	r3, [pc, #64]	; (800458c <PID_Init+0x54>)
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	601a      	str	r2, [r3, #0]
	Ktp = 1.6; //295//P項の制御量旋回*****************************************************
 8004550:	4b0f      	ldr	r3, [pc, #60]	; (8004590 <PID_Init+0x58>)
 8004552:	4a10      	ldr	r2, [pc, #64]	; (8004594 <PID_Init+0x5c>)
 8004554:	601a      	str	r2, [r3, #0]
	Kti = 0.06; //1//.6//I項の制御量旋回*****************************************************
 8004556:	4b10      	ldr	r3, [pc, #64]	; (8004598 <PID_Init+0x60>)
 8004558:	4a10      	ldr	r2, [pc, #64]	; (800459c <PID_Init+0x64>)
 800455a:	601a      	str	r2, [r3, #0]
	Ktd = 0.002; //205//D項の制御量旋回*****************************************************
 800455c:	4b10      	ldr	r3, [pc, #64]	; (80045a0 <PID_Init+0x68>)
 800455e:	4a11      	ldr	r2, [pc, #68]	; (80045a4 <PID_Init+0x6c>)
 8004560:	601a      	str	r2, [r3, #0]
	enc.sigma_error = 0;
 8004562:	4b11      	ldr	r3, [pc, #68]	; (80045a8 <PID_Init+0x70>)
 8004564:	f04f 0200 	mov.w	r2, #0
 8004568:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 800456a:	4b10      	ldr	r3, [pc, #64]	; (80045ac <PID_Init+0x74>)
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	609a      	str	r2, [r3, #8]

}
 8004572:	bf00      	nop
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	20000554 	.word	0x20000554
 8004580:	40466666 	.word	0x40466666
 8004584:	20000558 	.word	0x20000558
 8004588:	3da3d70a 	.word	0x3da3d70a
 800458c:	2000055c 	.word	0x2000055c
 8004590:	20000560 	.word	0x20000560
 8004594:	3fcccccd 	.word	0x3fcccccd
 8004598:	20000564 	.word	0x20000564
 800459c:	3d75c28f 	.word	0x3d75c28f
 80045a0:	20000568 	.word	0x20000568
 80045a4:	3b03126f 	.word	0x3b03126f
 80045a8:	20000534 	.word	0x20000534
 80045ac:	20000544 	.word	0x20000544

080045b0 <clear_Ierror>:

void clear_Ierror(void) {
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0
	enc.sigma_error = 0;
 80045b4:	4b06      	ldr	r3, [pc, #24]	; (80045d0 <clear_Ierror+0x20>)
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 80045bc:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <clear_Ierror+0x24>)
 80045be:	f04f 0200 	mov.w	r2, #0
 80045c2:	609a      	str	r2, [r3, #8]
}
 80045c4:	bf00      	nop
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	20000534 	.word	0x20000534
 80045d4:	20000544 	.word	0x20000544

080045d8 <EncoderGyro_PID>:


void EncoderGyro_PID(float *PID_s, float *PID_t,float straight_velocity,float turning_velocity) {
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80045e6:	edc7 0a00 	vstr	s1, [r7]
	float PID_stra = 0;
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	617b      	str	r3, [r7, #20]
	float PID_turn = 0;
 80045f0:	f04f 0300 	mov.w	r3, #0
 80045f4:	613b      	str	r3, [r7, #16]
	if(highspeed_mode == 1){
 80045f6:	4b80      	ldr	r3, [pc, #512]	; (80047f8 <EncoderGyro_PID+0x220>)
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d111      	bne.n	8004622 <EncoderGyro_PID+0x4a>
		Ksp = 3.7; //3//P項の制御量直進*****************************************************
 80045fe:	4b7f      	ldr	r3, [pc, #508]	; (80047fc <EncoderGyro_PID+0x224>)
 8004600:	4a7f      	ldr	r2, [pc, #508]	; (8004800 <EncoderGyro_PID+0x228>)
 8004602:	601a      	str	r2, [r3, #0]
		Ksi = 0.09; //80//5//43//I項の制御量直進*****************************************************
 8004604:	4b7f      	ldr	r3, [pc, #508]	; (8004804 <EncoderGyro_PID+0x22c>)
 8004606:	4a80      	ldr	r2, [pc, #512]	; (8004808 <EncoderGyro_PID+0x230>)
 8004608:	601a      	str	r2, [r3, #0]
		Ksd = -0.007; //D項の制御量直進*****************************************************
 800460a:	4b80      	ldr	r3, [pc, #512]	; (800480c <EncoderGyro_PID+0x234>)
 800460c:	4a80      	ldr	r2, [pc, #512]	; (8004810 <EncoderGyro_PID+0x238>)
 800460e:	601a      	str	r2, [r3, #0]
		Ktp = 2.2; //295//P項の制御量旋回*****************************************************
 8004610:	4b80      	ldr	r3, [pc, #512]	; (8004814 <EncoderGyro_PID+0x23c>)
 8004612:	4a81      	ldr	r2, [pc, #516]	; (8004818 <EncoderGyro_PID+0x240>)
 8004614:	601a      	str	r2, [r3, #0]
		Kti = 0.07; //1//.6//I項の制御量旋回*****************************************************
 8004616:	4b81      	ldr	r3, [pc, #516]	; (800481c <EncoderGyro_PID+0x244>)
 8004618:	4a81      	ldr	r2, [pc, #516]	; (8004820 <EncoderGyro_PID+0x248>)
 800461a:	601a      	str	r2, [r3, #0]
		Ktd = -0.001; //205//D項の制御量旋回*****************************************************
 800461c:	4b81      	ldr	r3, [pc, #516]	; (8004824 <EncoderGyro_PID+0x24c>)
 800461e:	4a82      	ldr	r2, [pc, #520]	; (8004828 <EncoderGyro_PID+0x250>)
 8004620:	601a      	str	r2, [r3, #0]
	}

	if (straight_velocity == 0) {
 8004622:	edd7 7a01 	vldr	s15, [r7, #4]
 8004626:	eef5 7a40 	vcmp.f32	s15, #0.0
 800462a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800462e:	d101      	bne.n	8004634 <EncoderGyro_PID+0x5c>
		reset_speed();
 8004630:	f7fc fcf2 	bl	8001018 <reset_speed>
	}
	//straight.velocity>=2500 && fabs(angle_speed)<100
	if (fabs(angle_speed) < 120 && straight_velocity >= 100 && modeacc!=4) {
 8004634:	4b7d      	ldr	r3, [pc, #500]	; (800482c <EncoderGyro_PID+0x254>)
 8004636:	edd3 7a00 	vldr	s15, [r3]
 800463a:	eef0 7ae7 	vabs.f32	s15, s15
 800463e:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8004830 <EncoderGyro_PID+0x258>
 8004642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800464a:	d520      	bpl.n	800468e <EncoderGyro_PID+0xb6>
 800464c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004650:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8004834 <EncoderGyro_PID+0x25c>
 8004654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800465c:	db17      	blt.n	800468e <EncoderGyro_PID+0xb6>
 800465e:	4b76      	ldr	r3, [pc, #472]	; (8004838 <EncoderGyro_PID+0x260>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b04      	cmp	r3, #4
 8004664:	d013      	beq.n	800468e <EncoderGyro_PID+0xb6>
		enc.error = (straight_velocity - (fusion_speedR + fusion_speedL) / 2);
 8004666:	4b75      	ldr	r3, [pc, #468]	; (800483c <EncoderGyro_PID+0x264>)
 8004668:	ed93 7a00 	vldr	s14, [r3]
 800466c:	4b74      	ldr	r3, [pc, #464]	; (8004840 <EncoderGyro_PID+0x268>)
 800466e:	edd3 7a00 	vldr	s15, [r3]
 8004672:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004676:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800467a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800467e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004682:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004686:	4b6f      	ldr	r3, [pc, #444]	; (8004844 <EncoderGyro_PID+0x26c>)
 8004688:	edc3 7a00 	vstr	s15, [r3]
 800468c:	e01a      	b.n	80046c4 <EncoderGyro_PID+0xec>
	} else {
		enc.error = (straight_velocity - (E_speedR + E_speedL) / 2);
 800468e:	4b6e      	ldr	r3, [pc, #440]	; (8004848 <EncoderGyro_PID+0x270>)
 8004690:	ed93 7a00 	vldr	s14, [r3]
 8004694:	4b6d      	ldr	r3, [pc, #436]	; (800484c <EncoderGyro_PID+0x274>)
 8004696:	edd3 7a00 	vldr	s15, [r3]
 800469a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800469e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80046a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80046aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ae:	4b65      	ldr	r3, [pc, #404]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046b0:	edc3 7a00 	vstr	s15, [r3]
		fusion_speedL = E_lpf_speedL;
 80046b4:	4b66      	ldr	r3, [pc, #408]	; (8004850 <EncoderGyro_PID+0x278>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a61      	ldr	r2, [pc, #388]	; (8004840 <EncoderGyro_PID+0x268>)
 80046ba:	6013      	str	r3, [r2, #0]
		fusion_speedR = E_lpf_speedR;
 80046bc:	4b65      	ldr	r3, [pc, #404]	; (8004854 <EncoderGyro_PID+0x27c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a5e      	ldr	r2, [pc, #376]	; (800483c <EncoderGyro_PID+0x264>)
 80046c2:	6013      	str	r3, [r2, #0]
	}
	//enc.error = (straight.velocity - (fusion_speedR + fusion_speedL) / 2);
	enc.delta_error = enc.error - enc.old_error;
 80046c4:	4b5f      	ldr	r3, [pc, #380]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046c6:	ed93 7a00 	vldr	s14, [r3]
 80046ca:	4b5e      	ldr	r3, [pc, #376]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80046d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046d4:	4b5b      	ldr	r3, [pc, #364]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046d6:	edc3 7a03 	vstr	s15, [r3, #12]
	enc.old_error = enc.error;
 80046da:	4b5a      	ldr	r3, [pc, #360]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a59      	ldr	r2, [pc, #356]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046e0:	6053      	str	r3, [r2, #4]
	enc.sigma_error += enc.error;
 80046e2:	4b58      	ldr	r3, [pc, #352]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80046e8:	4b56      	ldr	r3, [pc, #344]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046ea:	edd3 7a00 	vldr	s15, [r3]
 80046ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046f2:	4b54      	ldr	r3, [pc, #336]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046f4:	edc3 7a02 	vstr	s15, [r3, #8]
	PID_stra = Ksp * enc.error + Ksi * enc.sigma_error + Ksd * enc.delta_error;
 80046f8:	4b52      	ldr	r3, [pc, #328]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046fa:	ed93 7a00 	vldr	s14, [r3]
 80046fe:	4b3f      	ldr	r3, [pc, #252]	; (80047fc <EncoderGyro_PID+0x224>)
 8004700:	edd3 7a00 	vldr	s15, [r3]
 8004704:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004708:	4b4e      	ldr	r3, [pc, #312]	; (8004844 <EncoderGyro_PID+0x26c>)
 800470a:	edd3 6a02 	vldr	s13, [r3, #8]
 800470e:	4b3d      	ldr	r3, [pc, #244]	; (8004804 <EncoderGyro_PID+0x22c>)
 8004710:	edd3 7a00 	vldr	s15, [r3]
 8004714:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004718:	ee37 7a27 	vadd.f32	s14, s14, s15
 800471c:	4b49      	ldr	r3, [pc, #292]	; (8004844 <EncoderGyro_PID+0x26c>)
 800471e:	edd3 6a03 	vldr	s13, [r3, #12]
 8004722:	4b3a      	ldr	r3, [pc, #232]	; (800480c <EncoderGyro_PID+0x234>)
 8004724:	edd3 7a00 	vldr	s15, [r3]
 8004728:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800472c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004730:	edc7 7a05 	vstr	s15, [r7, #20]



//	if ((g_WallControl_mode == 3 || g_WallControl_mode == 1)
//			&& (highspeed_mode == 1)) {
		Gyro.error = (turning_velocity - angle_speed);
 8004734:	4b3d      	ldr	r3, [pc, #244]	; (800482c <EncoderGyro_PID+0x254>)
 8004736:	edd3 7a00 	vldr	s15, [r3]
 800473a:	ed97 7a00 	vldr	s14, [r7]
 800473e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004742:	4b45      	ldr	r3, [pc, #276]	; (8004858 <EncoderGyro_PID+0x280>)
 8004744:	edc3 7a00 	vstr	s15, [r3]
		Gyro.delta_error = Gyro.error - Gyro.old_error;
 8004748:	4b43      	ldr	r3, [pc, #268]	; (8004858 <EncoderGyro_PID+0x280>)
 800474a:	ed93 7a00 	vldr	s14, [r3]
 800474e:	4b42      	ldr	r3, [pc, #264]	; (8004858 <EncoderGyro_PID+0x280>)
 8004750:	edd3 7a01 	vldr	s15, [r3, #4]
 8004754:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004758:	4b3f      	ldr	r3, [pc, #252]	; (8004858 <EncoderGyro_PID+0x280>)
 800475a:	edc3 7a03 	vstr	s15, [r3, #12]
		Gyro.old_error = Gyro.error;
 800475e:	4b3e      	ldr	r3, [pc, #248]	; (8004858 <EncoderGyro_PID+0x280>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a3d      	ldr	r2, [pc, #244]	; (8004858 <EncoderGyro_PID+0x280>)
 8004764:	6053      	str	r3, [r2, #4]
		Gyro.sigma_error += Gyro.error;
 8004766:	4b3c      	ldr	r3, [pc, #240]	; (8004858 <EncoderGyro_PID+0x280>)
 8004768:	ed93 7a02 	vldr	s14, [r3, #8]
 800476c:	4b3a      	ldr	r3, [pc, #232]	; (8004858 <EncoderGyro_PID+0x280>)
 800476e:	edd3 7a00 	vldr	s15, [r3]
 8004772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004776:	4b38      	ldr	r3, [pc, #224]	; (8004858 <EncoderGyro_PID+0x280>)
 8004778:	edc3 7a02 	vstr	s15, [r3, #8]
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 800477c:	4b36      	ldr	r3, [pc, #216]	; (8004858 <EncoderGyro_PID+0x280>)
 800477e:	ed93 7a00 	vldr	s14, [r3]
 8004782:	4b24      	ldr	r3, [pc, #144]	; (8004814 <EncoderGyro_PID+0x23c>)
 8004784:	edd3 7a00 	vldr	s15, [r3]
 8004788:	ee27 7a27 	vmul.f32	s14, s14, s15
 800478c:	4b32      	ldr	r3, [pc, #200]	; (8004858 <EncoderGyro_PID+0x280>)
 800478e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004792:	4b22      	ldr	r3, [pc, #136]	; (800481c <EncoderGyro_PID+0x244>)
 8004794:	edd3 7a00 	vldr	s15, [r3]
 8004798:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800479c:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ Ktd * Gyro.delta_error;
 80047a0:	4b2d      	ldr	r3, [pc, #180]	; (8004858 <EncoderGyro_PID+0x280>)
 80047a2:	edd3 6a03 	vldr	s13, [r3, #12]
 80047a6:	4b1f      	ldr	r3, [pc, #124]	; (8004824 <EncoderGyro_PID+0x24c>)
 80047a8:	edd3 7a00 	vldr	s15, [r3]
 80047ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 80047b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047b4:	edc7 7a04 	vstr	s15, [r7, #16]
//
//		*PID_all_R += PID_turn;
//		*PID_all_L -= PID_turn;
//	}

	*PID_s = PID_stra / MAXMOTOR * g_V_battery_mean;
 80047b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80047bc:	eddf 6a27 	vldr	s13, [pc, #156]	; 800485c <EncoderGyro_PID+0x284>
 80047c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80047c4:	4b26      	ldr	r3, [pc, #152]	; (8004860 <EncoderGyro_PID+0x288>)
 80047c6:	edd3 7a00 	vldr	s15, [r3]
 80047ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	edc3 7a00 	vstr	s15, [r3]
	*PID_t = PID_turn / MAXMOTOR * g_V_battery_mean;
 80047d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80047d8:	eddf 6a20 	vldr	s13, [pc, #128]	; 800485c <EncoderGyro_PID+0x284>
 80047dc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80047e0:	4b1f      	ldr	r3, [pc, #124]	; (8004860 <EncoderGyro_PID+0x288>)
 80047e2:	edd3 7a00 	vldr	s15, [r3]
 80047e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	edc3 7a00 	vstr	s15, [r3]

}
 80047f0:	bf00      	nop
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	20000808 	.word	0x20000808
 80047fc:	20000554 	.word	0x20000554
 8004800:	406ccccd 	.word	0x406ccccd
 8004804:	20000558 	.word	0x20000558
 8004808:	3db851ec 	.word	0x3db851ec
 800480c:	2000055c 	.word	0x2000055c
 8004810:	bbe56042 	.word	0xbbe56042
 8004814:	20000560 	.word	0x20000560
 8004818:	400ccccd 	.word	0x400ccccd
 800481c:	20000564 	.word	0x20000564
 8004820:	3d8f5c29 	.word	0x3d8f5c29
 8004824:	20000568 	.word	0x20000568
 8004828:	ba83126f 	.word	0xba83126f
 800482c:	20000268 	.word	0x20000268
 8004830:	42f00000 	.word	0x42f00000
 8004834:	42c80000 	.word	0x42c80000
 8004838:	20000528 	.word	0x20000528
 800483c:	2000025c 	.word	0x2000025c
 8004840:	20000258 	.word	0x20000258
 8004844:	20000534 	.word	0x20000534
 8004848:	2000022c 	.word	0x2000022c
 800484c:	20000228 	.word	0x20000228
 8004850:	20000238 	.word	0x20000238
 8004854:	2000023c 	.word	0x2000023c
 8004858:	20000544 	.word	0x20000544
 800485c:	44d1e000 	.word	0x44d1e000
 8004860:	200004d4 	.word	0x200004d4

08004864 <init_WallControl>:
float g_CenterSlantR90_diff, g_CenterSlantL90_diff, g_CenterSlantR45_diff,
		g_CenterSlantL45_diff;



void init_WallControl(void) {
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
	g_WallControl_mode = 0;
 8004868:	4b3f      	ldr	r3, [pc, #252]	; (8004968 <init_WallControl+0x104>)
 800486a:	2200      	movs	r2, #0
 800486c:	701a      	strb	r2, [r3, #0]
	g_FrontWallControl_mode = 0;
 800486e:	4b3f      	ldr	r3, [pc, #252]	; (800496c <init_WallControl+0x108>)
 8004870:	2200      	movs	r2, #0
 8004872:	701a      	strb	r2, [r3, #0]
	g_WallControlStatus = 0;
 8004874:	4b3e      	ldr	r3, [pc, #248]	; (8004970 <init_WallControl+0x10c>)
 8004876:	2200      	movs	r2, #0
 8004878:	701a      	strb	r2, [r3, #0]
	g_wallCut_mode = 0;
 800487a:	4b3e      	ldr	r3, [pc, #248]	; (8004974 <init_WallControl+0x110>)
 800487c:	2200      	movs	r2, #0
 800487e:	701a      	strb	r2, [r3, #0]
	StabilityCount_reset = 0;
 8004880:	4b3d      	ldr	r3, [pc, #244]	; (8004978 <init_WallControl+0x114>)
 8004882:	2200      	movs	r2, #0
 8004884:	701a      	strb	r2, [r3, #0]
	StabilityCount_L = 0;
 8004886:	4b3d      	ldr	r3, [pc, #244]	; (800497c <init_WallControl+0x118>)
 8004888:	2200      	movs	r2, #0
 800488a:	701a      	strb	r2, [r3, #0]
	StabilityCount_R = 0;
 800488c:	4b3c      	ldr	r3, [pc, #240]	; (8004980 <init_WallControl+0x11c>)
 800488e:	2200      	movs	r2, #0
 8004890:	701a      	strb	r2, [r3, #0]
	g_sensor_max_l = CENTER_L;
 8004892:	4b3c      	ldr	r3, [pc, #240]	; (8004984 <init_WallControl+0x120>)
 8004894:	4a3c      	ldr	r2, [pc, #240]	; (8004988 <init_WallControl+0x124>)
 8004896:	601a      	str	r2, [r3, #0]
	g_sensor_max_r = CENTER_R;
 8004898:	4b3c      	ldr	r3, [pc, #240]	; (800498c <init_WallControl+0x128>)
 800489a:	4a3d      	ldr	r2, [pc, #244]	; (8004990 <init_WallControl+0x12c>)
 800489c:	601a      	str	r2, [r3, #0]
	g_skewer_displacement = SKEWER_LIMIT;
 800489e:	4b3d      	ldr	r3, [pc, #244]	; (8004994 <init_WallControl+0x130>)
 80048a0:	4a3d      	ldr	r2, [pc, #244]	; (8004998 <init_WallControl+0x134>)
 80048a2:	601a      	str	r2, [r3, #0]

	NoWallCountL90 = 0;
 80048a4:	4b3d      	ldr	r3, [pc, #244]	; (800499c <init_WallControl+0x138>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]
	NoWallCountR90 = 0;
 80048aa:	4b3d      	ldr	r3, [pc, #244]	; (80049a0 <init_WallControl+0x13c>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]
	NoWallCountL45 = 0;
 80048b0:	4b3c      	ldr	r3, [pc, #240]	; (80049a4 <init_WallControl+0x140>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
	NoWallCountR45 = 0;
 80048b6:	4b3c      	ldr	r3, [pc, #240]	; (80049a8 <init_WallControl+0x144>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]
	NoWallCountL45slant = 0;
 80048bc:	4b3b      	ldr	r3, [pc, #236]	; (80049ac <init_WallControl+0x148>)
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
	NoWallCountR45slant = 0;
 80048c2:	4b3b      	ldr	r3, [pc, #236]	; (80049b0 <init_WallControl+0x14c>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]

	NoWallDisplacementL90 = 0;
 80048c8:	4b3a      	ldr	r3, [pc, #232]	; (80049b4 <init_WallControl+0x150>)
 80048ca:	f04f 0200 	mov.w	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR90 = 0;
 80048d0:	4b39      	ldr	r3, [pc, #228]	; (80049b8 <init_WallControl+0x154>)
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 80048d8:	4b38      	ldr	r3, [pc, #224]	; (80049bc <init_WallControl+0x158>)
 80048da:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80048de:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 80048e0:	4b37      	ldr	r3, [pc, #220]	; (80049c0 <init_WallControl+0x15c>)
 80048e2:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80048e6:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant = 0;
 80048e8:	4b36      	ldr	r3, [pc, #216]	; (80049c4 <init_WallControl+0x160>)
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant = 0;
 80048f0:	4b35      	ldr	r3, [pc, #212]	; (80049c8 <init_WallControl+0x164>)
 80048f2:	f04f 0200 	mov.w	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant2 = 0;
 80048f8:	4b34      	ldr	r3, [pc, #208]	; (80049cc <init_WallControl+0x168>)
 80048fa:	f04f 0200 	mov.w	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant2 = 0;
 8004900:	4b33      	ldr	r3, [pc, #204]	; (80049d0 <init_WallControl+0x16c>)
 8004902:	f04f 0200 	mov.w	r2, #0
 8004906:	601a      	str	r2, [r3, #0]

	NoWallCountL45_flag = 0;
 8004908:	4b32      	ldr	r3, [pc, #200]	; (80049d4 <init_WallControl+0x170>)
 800490a:	2200      	movs	r2, #0
 800490c:	701a      	strb	r2, [r3, #0]
	NoWallCountR45_flag = 0;
 800490e:	4b32      	ldr	r3, [pc, #200]	; (80049d8 <init_WallControl+0x174>)
 8004910:	2200      	movs	r2, #0
 8004912:	701a      	strb	r2, [r3, #0]
	NoWallCountL45slant_flag = 0;
 8004914:	4b31      	ldr	r3, [pc, #196]	; (80049dc <init_WallControl+0x178>)
 8004916:	2200      	movs	r2, #0
 8004918:	701a      	strb	r2, [r3, #0]
	NoWallCountR45slant_flag = 0;
 800491a:	4b31      	ldr	r3, [pc, #196]	; (80049e0 <init_WallControl+0x17c>)
 800491c:	2200      	movs	r2, #0
 800491e:	701a      	strb	r2, [r3, #0]
	slantWallControlL_flag = 0;
 8004920:	4b30      	ldr	r3, [pc, #192]	; (80049e4 <init_WallControl+0x180>)
 8004922:	2200      	movs	r2, #0
 8004924:	701a      	strb	r2, [r3, #0]
	slantWallControlR_flag = 0;
 8004926:	4b30      	ldr	r3, [pc, #192]	; (80049e8 <init_WallControl+0x184>)
 8004928:	2200      	movs	r2, #0
 800492a:	701a      	strb	r2, [r3, #0]

	front_wall_break_90 = 0;
 800492c:	4b2f      	ldr	r3, [pc, #188]	; (80049ec <init_WallControl+0x188>)
 800492e:	2200      	movs	r2, #0
 8004930:	701a      	strb	r2, [r3, #0]
	front_wall_break_45 = 0;
 8004932:	4b2f      	ldr	r3, [pc, #188]	; (80049f0 <init_WallControl+0x18c>)
 8004934:	2200      	movs	r2, #0
 8004936:	701a      	strb	r2, [r3, #0]
	front_wall_break_45slant = 0;
 8004938:	4b2e      	ldr	r3, [pc, #184]	; (80049f4 <init_WallControl+0x190>)
 800493a:	2200      	movs	r2, #0
 800493c:	701a      	strb	r2, [r3, #0]

	g_sensor_max_fl = 0;
 800493e:	4b2e      	ldr	r3, [pc, #184]	; (80049f8 <init_WallControl+0x194>)
 8004940:	f04f 0200 	mov.w	r2, #0
 8004944:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr = 0;
 8004946:	4b2d      	ldr	r3, [pc, #180]	; (80049fc <init_WallControl+0x198>)
 8004948:	f04f 0200 	mov.w	r2, #0
 800494c:	601a      	str	r2, [r3, #0]
	g_sensor_max_fl_slant = 0;
 800494e:	4b2c      	ldr	r3, [pc, #176]	; (8004a00 <init_WallControl+0x19c>)
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr_slant = 0;
 8004956:	4b2b      	ldr	r3, [pc, #172]	; (8004a04 <init_WallControl+0x1a0>)
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	601a      	str	r2, [r3, #0]
}
 800495e:	bf00      	nop
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	20000590 	.word	0x20000590
 800496c:	20000591 	.word	0x20000591
 8004970:	20000593 	.word	0x20000593
 8004974:	20000592 	.word	0x20000592
 8004978:	20000595 	.word	0x20000595
 800497c:	20000596 	.word	0x20000596
 8004980:	20000597 	.word	0x20000597
 8004984:	20000598 	.word	0x20000598
 8004988:	44be6000 	.word	0x44be6000
 800498c:	2000059c 	.word	0x2000059c
 8004990:	44974000 	.word	0x44974000
 8004994:	200005a0 	.word	0x200005a0
 8004998:	41a00000 	.word	0x41a00000
 800499c:	200005b8 	.word	0x200005b8
 80049a0:	200005b4 	.word	0x200005b4
 80049a4:	200005c0 	.word	0x200005c0
 80049a8:	200005bc 	.word	0x200005bc
 80049ac:	200005c8 	.word	0x200005c8
 80049b0:	200005c4 	.word	0x200005c4
 80049b4:	200005d0 	.word	0x200005d0
 80049b8:	200005cc 	.word	0x200005cc
 80049bc:	200005d8 	.word	0x200005d8
 80049c0:	200005d4 	.word	0x200005d4
 80049c4:	200005e0 	.word	0x200005e0
 80049c8:	200005dc 	.word	0x200005dc
 80049cc:	200005e8 	.word	0x200005e8
 80049d0:	200005e4 	.word	0x200005e4
 80049d4:	200005ec 	.word	0x200005ec
 80049d8:	200005ed 	.word	0x200005ed
 80049dc:	200005ee 	.word	0x200005ee
 80049e0:	200005ef 	.word	0x200005ef
 80049e4:	200005f0 	.word	0x200005f0
 80049e8:	200005f1 	.word	0x200005f1
 80049ec:	200005f2 	.word	0x200005f2
 80049f0:	200005f3 	.word	0x200005f3
 80049f4:	200005f4 	.word	0x200005f4
 80049f8:	200005f8 	.word	0x200005f8
 80049fc:	200005fc 	.word	0x200005fc
 8004a00:	20000600 	.word	0x20000600
 8004a04:	20000604 	.word	0x20000604

08004a08 <calWallConrol>:


float calWallConrol(void) {
 8004a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a0c:	b0aa      	sub	sp, #168	; 0xa8
 8004a0e:	af00      	add	r7, sp, #0
	float PID_wall,PID_w;
	float sensor_gain_p, sensor_gain_d;
	float sensorWall_L, sensorWall_R;
	float wallcut_threshold_L, wallcut_threshold_R;

	if (highspeed_mode == 1) {
 8004a10:	4ba1      	ldr	r3, [pc, #644]	; (8004c98 <calWallConrol+0x290>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d13d      	bne.n	8004a94 <calWallConrol+0x8c>
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_SHORT_L;
 8004a18:	4ba0      	ldr	r3, [pc, #640]	; (8004c9c <calWallConrol+0x294>)
 8004a1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_SHORT_R;
 8004a1e:	4ba0      	ldr	r3, [pc, #640]	; (8004ca0 <calWallConrol+0x298>)
 8004a20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		if (straight.velocity > 1000) {
 8004a24:	4b9f      	ldr	r3, [pc, #636]	; (8004ca4 <calWallConrol+0x29c>)
 8004a26:	edd3 7a00 	vldr	s15, [r3]
 8004a2a:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8004ca8 <calWallConrol+0x2a0>
 8004a2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a36:	dd06      	ble.n	8004a46 <calWallConrol+0x3e>
			sensor_gain_p = SENSOR_GAIN_SHORT_P * 1000;
 8004a38:	4b9c      	ldr	r3, [pc, #624]	; (8004cac <calWallConrol+0x2a4>)
 8004a3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * 1000;
 8004a3e:	4b9c      	ldr	r3, [pc, #624]	; (8004cb0 <calWallConrol+0x2a8>)
 8004a40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a44:	e052      	b.n	8004aec <calWallConrol+0xe4>
		} else {
			sensor_gain_p = SENSOR_GAIN_SHORT_P * straight.velocity;
 8004a46:	4b97      	ldr	r3, [pc, #604]	; (8004ca4 <calWallConrol+0x29c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fb fda4 	bl	8000598 <__aeabi_f2d>
 8004a50:	a389      	add	r3, pc, #548	; (adr r3, 8004c78 <calWallConrol+0x270>)
 8004a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a56:	f7fb fdf7 	bl	8000648 <__aeabi_dmul>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4610      	mov	r0, r2
 8004a60:	4619      	mov	r1, r3
 8004a62:	f7fc f8c9 	bl	8000bf8 <__aeabi_d2f>
 8004a66:	4603      	mov	r3, r0
 8004a68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * straight.velocity;
 8004a6c:	4b8d      	ldr	r3, [pc, #564]	; (8004ca4 <calWallConrol+0x29c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fb fd91 	bl	8000598 <__aeabi_f2d>
 8004a76:	a382      	add	r3, pc, #520	; (adr r3, 8004c80 <calWallConrol+0x278>)
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	f7fb fde4 	bl	8000648 <__aeabi_dmul>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4610      	mov	r0, r2
 8004a86:	4619      	mov	r1, r3
 8004a88:	f7fc f8b6 	bl	8000bf8 <__aeabi_d2f>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a92:	e02b      	b.n	8004aec <calWallConrol+0xe4>
		}
	} else {
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_L;
 8004a94:	4b87      	ldr	r3, [pc, #540]	; (8004cb4 <calWallConrol+0x2ac>)
 8004a96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_R;
 8004a9a:	4b87      	ldr	r3, [pc, #540]	; (8004cb8 <calWallConrol+0x2b0>)
 8004a9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		sensor_gain_p = SENSOR_GAIN_P * straight.velocity;
 8004aa0:	4b80      	ldr	r3, [pc, #512]	; (8004ca4 <calWallConrol+0x29c>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fb fd77 	bl	8000598 <__aeabi_f2d>
 8004aaa:	a377      	add	r3, pc, #476	; (adr r3, 8004c88 <calWallConrol+0x280>)
 8004aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab0:	f7fb fdca 	bl	8000648 <__aeabi_dmul>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4610      	mov	r0, r2
 8004aba:	4619      	mov	r1, r3
 8004abc:	f7fc f89c 	bl	8000bf8 <__aeabi_d2f>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		sensor_gain_d = SENSOR_GAIN_D * straight.velocity;
 8004ac6:	4b77      	ldr	r3, [pc, #476]	; (8004ca4 <calWallConrol+0x29c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fb fd64 	bl	8000598 <__aeabi_f2d>
 8004ad0:	a36f      	add	r3, pc, #444	; (adr r3, 8004c90 <calWallConrol+0x288>)
 8004ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad6:	f7fb fdb7 	bl	8000648 <__aeabi_dmul>
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	4610      	mov	r0, r2
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	f7fc f889 	bl	8000bf8 <__aeabi_d2f>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	}
	if (g_sensor[SENSOR_LEFT][0] < SENSOR_L_MIN) {
 8004aec:	4b73      	ldr	r3, [pc, #460]	; (8004cbc <calWallConrol+0x2b4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f240 2289 	movw	r2, #649	; 0x289
 8004af4:	4293      	cmp	r3, r2
 8004af6:	dc03      	bgt.n	8004b00 <calWallConrol+0xf8>
		sensorWall_L = SENSOR_L_MIN;
 8004af8:	4b71      	ldr	r3, [pc, #452]	; (8004cc0 <calWallConrol+0x2b8>)
 8004afa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004afe:	e011      	b.n	8004b24 <calWallConrol+0x11c>
	} else if (g_sensor[SENSOR_LEFT][0] > SENSOR_L_MAX) {
 8004b00:	4b6e      	ldr	r3, [pc, #440]	; (8004cbc <calWallConrol+0x2b4>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	dd03      	ble.n	8004b14 <calWallConrol+0x10c>
		sensorWall_L = SENSOR_L_MAX;
 8004b0c:	4b6d      	ldr	r3, [pc, #436]	; (8004cc4 <calWallConrol+0x2bc>)
 8004b0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b12:	e007      	b.n	8004b24 <calWallConrol+0x11c>
	} else {
		sensorWall_L = (float) (g_sensor[SENSOR_LEFT][0]);
 8004b14:	4b69      	ldr	r3, [pc, #420]	; (8004cbc <calWallConrol+0x2b4>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	ee07 3a90 	vmov	s15, r3
 8004b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b20:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	}
	if (g_sensor[SENSOR_RIGHT][0] < SENSOR_R_MIN) {
 8004b24:	4b65      	ldr	r3, [pc, #404]	; (8004cbc <calWallConrol+0x2b4>)
 8004b26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004b2a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004b2e:	da03      	bge.n	8004b38 <calWallConrol+0x130>
		sensorWall_R = SENSOR_R_MIN;
 8004b30:	4b65      	ldr	r3, [pc, #404]	; (8004cc8 <calWallConrol+0x2c0>)
 8004b32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b36:	e012      	b.n	8004b5e <calWallConrol+0x156>
	} else if (g_sensor[SENSOR_RIGHT][0] > SENSOR_R_MAX) {
 8004b38:	4b60      	ldr	r3, [pc, #384]	; (8004cbc <calWallConrol+0x2b4>)
 8004b3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004b3e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004b42:	dd03      	ble.n	8004b4c <calWallConrol+0x144>
		sensorWall_R = SENSOR_R_MAX;
 8004b44:	4b61      	ldr	r3, [pc, #388]	; (8004ccc <calWallConrol+0x2c4>)
 8004b46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b4a:	e008      	b.n	8004b5e <calWallConrol+0x156>
	} else {
		sensorWall_R = (float) (g_sensor[SENSOR_RIGHT][0]);
 8004b4c:	4b5b      	ldr	r3, [pc, #364]	; (8004cbc <calWallConrol+0x2b4>)
 8004b4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004b52:	ee07 3a90 	vmov	s15, r3
 8004b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b5a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
//
//	SensorDistanceR = -0.0000001684 * g_sensor[2][0] * g_sensor[2][0] * g_sensor[2][0]
//				+ 0.0004061427 * g_sensor[2][0] * g_sensor[2][0] - 0.3784837856 * g_sensor[2][0]
//				+ 197.1162;

	PID_wall = 0;
 8004b5e:	f04f 0300 	mov.w	r3, #0
 8004b62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	PID_w = 0;
 8004b66:	f04f 0300 	mov.w	r3, #0
 8004b6a:	66bb      	str	r3, [r7, #104]	; 0x68
	if (g_WallControl_mode == 0) {
 8004b6c:	4b58      	ldr	r3, [pc, #352]	; (8004cd0 <calWallConrol+0x2c8>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d11c      	bne.n	8004bae <calWallConrol+0x1a6>
		g_WallControlStatus = 0;
 8004b74:	4b57      	ldr	r3, [pc, #348]	; (8004cd4 <calWallConrol+0x2cc>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	701a      	strb	r2, [r3, #0]
		StabilityCount_reset = 0;
 8004b7a:	4b57      	ldr	r3, [pc, #348]	; (8004cd8 <calWallConrol+0x2d0>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	701a      	strb	r2, [r3, #0]
		StabilityCount_L = 0;
 8004b80:	4b56      	ldr	r3, [pc, #344]	; (8004cdc <calWallConrol+0x2d4>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	701a      	strb	r2, [r3, #0]
		StabilityCount_R = 0;
 8004b86:	4b56      	ldr	r3, [pc, #344]	; (8004ce0 <calWallConrol+0x2d8>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	701a      	strb	r2, [r3, #0]
		g_sensor_max_l = CENTER_L;
 8004b8c:	4b55      	ldr	r3, [pc, #340]	; (8004ce4 <calWallConrol+0x2dc>)
 8004b8e:	4a56      	ldr	r2, [pc, #344]	; (8004ce8 <calWallConrol+0x2e0>)
 8004b90:	601a      	str	r2, [r3, #0]
		g_sensor_max_r = CENTER_R;
 8004b92:	4b56      	ldr	r3, [pc, #344]	; (8004cec <calWallConrol+0x2e4>)
 8004b94:	4a56      	ldr	r2, [pc, #344]	; (8004cf0 <calWallConrol+0x2e8>)
 8004b96:	601a      	str	r2, [r3, #0]
		g_skewer_displacement = SKEWER_LIMIT;
 8004b98:	4b56      	ldr	r3, [pc, #344]	; (8004cf4 <calWallConrol+0x2ec>)
 8004b9a:	4a57      	ldr	r2, [pc, #348]	; (8004cf8 <calWallConrol+0x2f0>)
 8004b9c:	601a      	str	r2, [r3, #0]
		PID_wall = 0;
 8004b9e:	f04f 0300 	mov.w	r3, #0
 8004ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		pl_yellow_LED_off();
 8004ba6:	f002 f905 	bl	8006db4 <pl_yellow_LED_off>
 8004baa:	f001 ba4c 	b.w	8006046 <calWallConrol+0x163e>

	} else if (g_WallControl_mode == 1) {
 8004bae:	4b48      	ldr	r3, [pc, #288]	; (8004cd0 <calWallConrol+0x2c8>)
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	f040 82ef 	bne.w	8005196 <calWallConrol+0x78e>

		// 左壁の有無の判定
		if (((g_WallControlStatus >> 0) & 1) == 1) {
 8004bb8:	4b46      	ldr	r3, [pc, #280]	; (8004cd4 <calWallConrol+0x2cc>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 809d 	beq.w	8004d00 <calWallConrol+0x2f8>
			//前回左壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_L
 8004bc6:	4b3d      	ldr	r3, [pc, #244]	; (8004cbc <calWallConrol+0x2b4>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004bce:	db16      	blt.n	8004bfe <calWallConrol+0x1f6>
					|| fabs(g_sensor_diff[SENSOR_LEFT]) > wallcut_threshold_L) {
 8004bd0:	4b4a      	ldr	r3, [pc, #296]	; (8004cfc <calWallConrol+0x2f4>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7fb fccd 	bl	8000574 <__aeabi_i2d>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4690      	mov	r8, r2
 8004be0:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8004be4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8004be8:	f7fb fcd6 	bl	8000598 <__aeabi_f2d>
 8004bec:	4602      	mov	r2, r0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	4640      	mov	r0, r8
 8004bf2:	4649      	mov	r1, r9
 8004bf4:	f7fb ffb8 	bl	8000b68 <__aeabi_dcmpgt>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d037      	beq.n	8004c6e <calWallConrol+0x266>
				g_WallControlStatus = g_WallControlStatus - 1;
 8004bfe:	4b35      	ldr	r3, [pc, #212]	; (8004cd4 <calWallConrol+0x2cc>)
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	4b33      	ldr	r3, [pc, #204]	; (8004cd4 <calWallConrol+0x2cc>)
 8004c08:	701a      	strb	r2, [r3, #0]
				g_sensor_max_l = 0;
 8004c0a:	4b36      	ldr	r3, [pc, #216]	; (8004ce4 <calWallConrol+0x2dc>)
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 8004c12:	2300      	movs	r3, #0
 8004c14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c18:	e021      	b.n	8004c5e <calWallConrol+0x256>
					if (g_sensor_max_l < (float) (g_sensor[SENSOR_LEFT][i])) {
 8004c1a:	4a28      	ldr	r2, [pc, #160]	; (8004cbc <calWallConrol+0x2b4>)
 8004c1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c24:	ee07 3a90 	vmov	s15, r3
 8004c28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c2c:	4b2d      	ldr	r3, [pc, #180]	; (8004ce4 <calWallConrol+0x2dc>)
 8004c2e:	edd3 7a00 	vldr	s15, [r3]
 8004c32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3a:	dd0b      	ble.n	8004c54 <calWallConrol+0x24c>
						g_sensor_max_l = (float) (g_sensor[SENSOR_LEFT][i]);
 8004c3c:	4a1f      	ldr	r2, [pc, #124]	; (8004cbc <calWallConrol+0x2b4>)
 8004c3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c46:	ee07 3a90 	vmov	s15, r3
 8004c4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c4e:	4b25      	ldr	r3, [pc, #148]	; (8004ce4 <calWallConrol+0x2dc>)
 8004c50:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8004c54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c58:	3301      	adds	r3, #1
 8004c5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c62:	2b13      	cmp	r3, #19
 8004c64:	ddd9      	ble.n	8004c1a <calWallConrol+0x212>
					}
				}
				g_skewer_displacement = 0;
 8004c66:	4b23      	ldr	r3, [pc, #140]	; (8004cf4 <calWallConrol+0x2ec>)
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_L = 0;
 8004c6e:	4b1b      	ldr	r3, [pc, #108]	; (8004cdc <calWallConrol+0x2d4>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	701a      	strb	r2, [r3, #0]
 8004c74:	e066      	b.n	8004d44 <calWallConrol+0x33c>
 8004c76:	bf00      	nop
 8004c78:	33333333 	.word	0x33333333
 8004c7c:	3fd33333 	.word	0x3fd33333
 8004c80:	d2f1a9fc 	.word	0xd2f1a9fc
 8004c84:	bf70624d 	.word	0xbf70624d
 8004c88:	33333333 	.word	0x33333333
 8004c8c:	3fe33333 	.word	0x3fe33333
 8004c90:	bc6a7efa 	.word	0xbc6a7efa
 8004c94:	3f789374 	.word	0x3f789374
 8004c98:	20000808 	.word	0x20000808
 8004c9c:	435c0000 	.word	0x435c0000
 8004ca0:	43480000 	.word	0x43480000
 8004ca4:	200004d8 	.word	0x200004d8
 8004ca8:	447a0000 	.word	0x447a0000
 8004cac:	43960000 	.word	0x43960000
 8004cb0:	c0800000 	.word	0xc0800000
 8004cb4:	431d0000 	.word	0x431d0000
 8004cb8:	42dc0000 	.word	0x42dc0000
 8004cbc:	200002b8 	.word	0x200002b8
 8004cc0:	44228000 	.word	0x44228000
 8004cc4:	450fc000 	.word	0x450fc000
 8004cc8:	44160000 	.word	0x44160000
 8004ccc:	44fa0000 	.word	0x44fa0000
 8004cd0:	20000590 	.word	0x20000590
 8004cd4:	20000593 	.word	0x20000593
 8004cd8:	20000595 	.word	0x20000595
 8004cdc:	20000596 	.word	0x20000596
 8004ce0:	20000597 	.word	0x20000597
 8004ce4:	20000598 	.word	0x20000598
 8004ce8:	44be6000 	.word	0x44be6000
 8004cec:	2000059c 	.word	0x2000059c
 8004cf0:	44974000 	.word	0x44974000
 8004cf4:	200005a0 	.word	0x200005a0
 8004cf8:	41a00000 	.word	0x41a00000
 8004cfc:	20000448 	.word	0x20000448
		} else {
			//前回左壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_L
 8004d00:	4bbf      	ldr	r3, [pc, #764]	; (8005000 <calWallConrol+0x5f8>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004d08:	dd1c      	ble.n	8004d44 <calWallConrol+0x33c>
					&& fabs(g_sensor_diff[SENSOR_LEFT]) < wallcut_threshold_L) {
 8004d0a:	4bbe      	ldr	r3, [pc, #760]	; (8005004 <calWallConrol+0x5fc>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fb fc30 	bl	8000574 <__aeabi_i2d>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	4614      	mov	r4, r2
 8004d1a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004d1e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8004d22:	f7fb fc39 	bl	8000598 <__aeabi_f2d>
 8004d26:	4602      	mov	r2, r0
 8004d28:	460b      	mov	r3, r1
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	4629      	mov	r1, r5
 8004d2e:	f7fb fefd 	bl	8000b2c <__aeabi_dcmplt>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <calWallConrol+0x33c>
				g_WallControlStatus = g_WallControlStatus + 1;
 8004d38:	4bb3      	ldr	r3, [pc, #716]	; (8005008 <calWallConrol+0x600>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	4bb1      	ldr	r3, [pc, #708]	; (8005008 <calWallConrol+0x600>)
 8004d42:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_L >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 1;
//			}
		}
		// 右壁の有無の判定
		if (((g_WallControlStatus >> 1) & 1) == 1) {
 8004d44:	4bb0      	ldr	r3, [pc, #704]	; (8005008 <calWallConrol+0x600>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	085b      	lsrs	r3, r3, #1
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d05c      	beq.n	8004e0e <calWallConrol+0x406>
			//前回右壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_R
 8004d54:	4baa      	ldr	r3, [pc, #680]	; (8005000 <calWallConrol+0x5f8>)
 8004d56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004d5a:	f240 2225 	movw	r2, #549	; 0x225
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	dd17      	ble.n	8004d92 <calWallConrol+0x38a>
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 8004d62:	4ba8      	ldr	r3, [pc, #672]	; (8005004 <calWallConrol+0x5fc>)
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fb fc04 	bl	8000574 <__aeabi_i2d>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	613a      	str	r2, [r7, #16]
 8004d72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d76:	617b      	str	r3, [r7, #20]
							> wallcut_threshold_R) {
 8004d78:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004d7c:	f7fb fc0c 	bl	8000598 <__aeabi_f2d>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 8004d84:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d88:	f7fb feee 	bl	8000b68 <__aeabi_dcmpgt>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d039      	beq.n	8004e06 <calWallConrol+0x3fe>
				g_WallControlStatus = g_WallControlStatus - 2;
 8004d92:	4b9d      	ldr	r3, [pc, #628]	; (8005008 <calWallConrol+0x600>)
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	3b02      	subs	r3, #2
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	4b9b      	ldr	r3, [pc, #620]	; (8005008 <calWallConrol+0x600>)
 8004d9c:	701a      	strb	r2, [r3, #0]
				g_sensor_max_r = 0;
 8004d9e:	4b9b      	ldr	r3, [pc, #620]	; (800500c <calWallConrol+0x604>)
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 8004da6:	2300      	movs	r3, #0
 8004da8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004dac:	e023      	b.n	8004df6 <calWallConrol+0x3ee>
					if (g_sensor_max_r < (float) (g_sensor[SENSOR_RIGHT][i])) {
 8004dae:	4a94      	ldr	r2, [pc, #592]	; (8005000 <calWallConrol+0x5f8>)
 8004db0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004db4:	3350      	adds	r3, #80	; 0x50
 8004db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dba:	ee07 3a90 	vmov	s15, r3
 8004dbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dc2:	4b92      	ldr	r3, [pc, #584]	; (800500c <calWallConrol+0x604>)
 8004dc4:	edd3 7a00 	vldr	s15, [r3]
 8004dc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd0:	dd0c      	ble.n	8004dec <calWallConrol+0x3e4>
						g_sensor_max_r = (float) (g_sensor[SENSOR_RIGHT][i]);
 8004dd2:	4a8b      	ldr	r2, [pc, #556]	; (8005000 <calWallConrol+0x5f8>)
 8004dd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dd8:	3350      	adds	r3, #80	; 0x50
 8004dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004de6:	4b89      	ldr	r3, [pc, #548]	; (800500c <calWallConrol+0x604>)
 8004de8:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8004dec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004df0:	3301      	adds	r3, #1
 8004df2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004df6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dfa:	2b13      	cmp	r3, #19
 8004dfc:	ddd7      	ble.n	8004dae <calWallConrol+0x3a6>
					}
				}
				g_skewer_displacement = 0;
 8004dfe:	4b84      	ldr	r3, [pc, #528]	; (8005010 <calWallConrol+0x608>)
 8004e00:	f04f 0200 	mov.w	r2, #0
 8004e04:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_R = 0;
 8004e06:	4b83      	ldr	r3, [pc, #524]	; (8005014 <calWallConrol+0x60c>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	701a      	strb	r2, [r3, #0]
 8004e0c:	e024      	b.n	8004e58 <calWallConrol+0x450>
		} else {
			//前回右壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_R
 8004e0e:	4b7c      	ldr	r3, [pc, #496]	; (8005000 <calWallConrol+0x5f8>)
 8004e10:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004e14:	f240 2226 	movw	r2, #550	; 0x226
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	dd1d      	ble.n	8004e58 <calWallConrol+0x450>
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8004e1c:	4b79      	ldr	r3, [pc, #484]	; (8005004 <calWallConrol+0x5fc>)
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fb fba7 	bl	8000574 <__aeabi_i2d>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	60ba      	str	r2, [r7, #8]
 8004e2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e30:	60fb      	str	r3, [r7, #12]
							< wallcut_threshold_R) {
 8004e32:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004e36:	f7fb fbaf 	bl	8000598 <__aeabi_f2d>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8004e3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e42:	f7fb fe73 	bl	8000b2c <__aeabi_dcmplt>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d005      	beq.n	8004e58 <calWallConrol+0x450>
				//StabilityCount_R++;
				g_WallControlStatus = g_WallControlStatus + 2;			//安定消す
 8004e4c:	4b6e      	ldr	r3, [pc, #440]	; (8005008 <calWallConrol+0x600>)
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	3302      	adds	r3, #2
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	4b6c      	ldr	r3, [pc, #432]	; (8005008 <calWallConrol+0x600>)
 8004e56:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_R >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 2;
//			}
		}

		switch (g_WallControlStatus) {
 8004e58:	4b6b      	ldr	r3, [pc, #428]	; (8005008 <calWallConrol+0x600>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	2b03      	cmp	r3, #3
 8004e5e:	f201 80f2 	bhi.w	8006046 <calWallConrol+0x163e>
 8004e62:	a201      	add	r2, pc, #4	; (adr r2, 8004e68 <calWallConrol+0x460>)
 8004e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e68:	08004e79 	.word	0x08004e79
 8004e6c:	08004f7f 	.word	0x08004f7f
 8004e70:	0800502d 	.word	0x0800502d
 8004e74:	08005097 	.word	0x08005097
		case 0:			//両壁なし
			g_skewer_displacement += straight.velocity * INTERRUPT_TIME;
 8004e78:	4b65      	ldr	r3, [pc, #404]	; (8005010 <calWallConrol+0x608>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fb fb8b 	bl	8000598 <__aeabi_f2d>
 8004e82:	4604      	mov	r4, r0
 8004e84:	460d      	mov	r5, r1
 8004e86:	4b64      	ldr	r3, [pc, #400]	; (8005018 <calWallConrol+0x610>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fb fb84 	bl	8000598 <__aeabi_f2d>
 8004e90:	a357      	add	r3, pc, #348	; (adr r3, 8004ff0 <calWallConrol+0x5e8>)
 8004e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e96:	f7fb fbd7 	bl	8000648 <__aeabi_dmul>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	f7fb fa1b 	bl	80002dc <__adddf3>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	4610      	mov	r0, r2
 8004eac:	4619      	mov	r1, r3
 8004eae:	f7fb fea3 	bl	8000bf8 <__aeabi_d2f>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	4a56      	ldr	r2, [pc, #344]	; (8005010 <calWallConrol+0x608>)
 8004eb6:	6013      	str	r3, [r2, #0]
			if (g_skewer_displacement < SKEWER_LIMIT) {
 8004eb8:	4b55      	ldr	r3, [pc, #340]	; (8005010 <calWallConrol+0x608>)
 8004eba:	edd3 7a00 	vldr	s15, [r3]
 8004ebe:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eca:	d52e      	bpl.n	8004f2a <calWallConrol+0x522>
				wall_normal.error = 0.7
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8004ecc:	4b53      	ldr	r3, [pc, #332]	; (800501c <calWallConrol+0x614>)
 8004ece:	edd3 7a00 	vldr	s15, [r3]
 8004ed2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8005020 <calWallConrol+0x618>
 8004ed6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004eda:	eef1 6a67 	vneg.f32	s13, s15
 8004ede:	4b4f      	ldr	r3, [pc, #316]	; (800501c <calWallConrol+0x614>)
 8004ee0:	edd3 7a00 	vldr	s15, [r3]
 8004ee4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
								+ (g_sensor_max_r - CENTER_R) / g_sensor_max_r);
 8004ee8:	4b48      	ldr	r3, [pc, #288]	; (800500c <calWallConrol+0x604>)
 8004eea:	edd3 7a00 	vldr	s15, [r3]
 8004eee:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005028 <calWallConrol+0x620>
 8004ef2:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8004ef6:	4b45      	ldr	r3, [pc, #276]	; (800500c <calWallConrol+0x604>)
 8004ef8:	edd3 6a00 	vldr	s13, [r3]
 8004efc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f04:	ee17 0a90 	vmov	r0, s15
 8004f08:	f7fb fb46 	bl	8000598 <__aeabi_f2d>
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8004f0c:	a33a      	add	r3, pc, #232	; (adr r3, 8004ff8 <calWallConrol+0x5f0>)
 8004f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f12:	f7fb fb99 	bl	8000648 <__aeabi_dmul>
 8004f16:	4602      	mov	r2, r0
 8004f18:	460b      	mov	r3, r1
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	f7fb fe6b 	bl	8000bf8 <__aeabi_d2f>
 8004f22:	4603      	mov	r3, r0
				wall_normal.error = 0.7
 8004f24:	4a3f      	ldr	r2, [pc, #252]	; (8005024 <calWallConrol+0x61c>)
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	e003      	b.n	8004f32 <calWallConrol+0x52a>
			} else {
				wall_normal.error = 0;
 8004f2a:	4b3e      	ldr	r3, [pc, #248]	; (8005024 <calWallConrol+0x61c>)
 8004f2c:	f04f 0200 	mov.w	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
			}
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8004f32:	4b3c      	ldr	r3, [pc, #240]	; (8005024 <calWallConrol+0x61c>)
 8004f34:	ed93 7a00 	vldr	s14, [r3]
 8004f38:	4b3a      	ldr	r3, [pc, #232]	; (8005024 <calWallConrol+0x61c>)
 8004f3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f42:	4b38      	ldr	r3, [pc, #224]	; (8005024 <calWallConrol+0x61c>)
 8004f44:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8004f48:	4b36      	ldr	r3, [pc, #216]	; (8005024 <calWallConrol+0x61c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a35      	ldr	r2, [pc, #212]	; (8005024 <calWallConrol+0x61c>)
 8004f4e:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8004f50:	4b34      	ldr	r3, [pc, #208]	; (8005024 <calWallConrol+0x61c>)
 8004f52:	ed93 7a00 	vldr	s14, [r3]
 8004f56:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004f5a:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8004f5e:	4b31      	ldr	r3, [pc, #196]	; (8005024 <calWallConrol+0x61c>)
 8004f60:	edd3 6a02 	vldr	s13, [r3, #8]
 8004f64:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004f68:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8004f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f70:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_count(0);
 8004f74:	2000      	movs	r0, #0
 8004f76:	f001 ff57 	bl	8006e28 <pl_yellow_LED_count>
			break;
 8004f7a:	f001 b864 	b.w	8006046 <calWallConrol+0x163e>
		case 1:			//左壁のみ
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 8004f7e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8004f82:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005020 <calWallConrol+0x618>
 8004f86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f8a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8004f8e:	ee67 6a87 	vmul.f32	s13, s15, s14
					/ (float) (sensorWall_L));
 8004f92:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 8004f9a:	4b22      	ldr	r3, [pc, #136]	; (8005024 <calWallConrol+0x61c>)
 8004f9c:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8004fa0:	4b20      	ldr	r3, [pc, #128]	; (8005024 <calWallConrol+0x61c>)
 8004fa2:	ed93 7a00 	vldr	s14, [r3]
 8004fa6:	4b1f      	ldr	r3, [pc, #124]	; (8005024 <calWallConrol+0x61c>)
 8004fa8:	edd3 7a01 	vldr	s15, [r3, #4]
 8004fac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fb0:	4b1c      	ldr	r3, [pc, #112]	; (8005024 <calWallConrol+0x61c>)
 8004fb2:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8004fb6:	4b1b      	ldr	r3, [pc, #108]	; (8005024 <calWallConrol+0x61c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a1a      	ldr	r2, [pc, #104]	; (8005024 <calWallConrol+0x61c>)
 8004fbc:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8004fbe:	4b19      	ldr	r3, [pc, #100]	; (8005024 <calWallConrol+0x61c>)
 8004fc0:	ed93 7a00 	vldr	s14, [r3]
 8004fc4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004fc8:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8004fcc:	4b15      	ldr	r3, [pc, #84]	; (8005024 <calWallConrol+0x61c>)
 8004fce:	edd3 6a02 	vldr	s13, [r3, #8]
 8004fd2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004fd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8004fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fde:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-2 * (float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0]));
			pl_yellow_LED_count(128);
 8004fe2:	2080      	movs	r0, #128	; 0x80
 8004fe4:	f001 ff20 	bl	8006e28 <pl_yellow_LED_count>
			break;
 8004fe8:	f001 b82d 	b.w	8006046 <calWallConrol+0x163e>
 8004fec:	f3af 8000 	nop.w
 8004ff0:	d2f1a9fc 	.word	0xd2f1a9fc
 8004ff4:	3f50624d 	.word	0x3f50624d
 8004ff8:	66666666 	.word	0x66666666
 8004ffc:	3fe66666 	.word	0x3fe66666
 8005000:	200002b8 	.word	0x200002b8
 8005004:	20000448 	.word	0x20000448
 8005008:	20000593 	.word	0x20000593
 800500c:	2000059c 	.word	0x2000059c
 8005010:	200005a0 	.word	0x200005a0
 8005014:	20000597 	.word	0x20000597
 8005018:	200004d8 	.word	0x200004d8
 800501c:	20000598 	.word	0x20000598
 8005020:	44be6000 	.word	0x44be6000
 8005024:	2000056c 	.word	0x2000056c
 8005028:	44974000 	.word	0x44974000
		case 2:			//右壁のみ
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 800502c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005030:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8005028 <calWallConrol+0x620>
 8005034:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005038:	ee77 6aa7 	vadd.f32	s13, s15, s15
					/ (float) (sensorWall_R));
 800503c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005040:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 8005044:	4baa      	ldr	r3, [pc, #680]	; (80052f0 <calWallConrol+0x8e8>)
 8005046:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 800504a:	4ba9      	ldr	r3, [pc, #676]	; (80052f0 <calWallConrol+0x8e8>)
 800504c:	ed93 7a00 	vldr	s14, [r3]
 8005050:	4ba7      	ldr	r3, [pc, #668]	; (80052f0 <calWallConrol+0x8e8>)
 8005052:	edd3 7a01 	vldr	s15, [r3, #4]
 8005056:	ee77 7a67 	vsub.f32	s15, s14, s15
 800505a:	4ba5      	ldr	r3, [pc, #660]	; (80052f0 <calWallConrol+0x8e8>)
 800505c:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005060:	4ba3      	ldr	r3, [pc, #652]	; (80052f0 <calWallConrol+0x8e8>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4aa2      	ldr	r2, [pc, #648]	; (80052f0 <calWallConrol+0x8e8>)
 8005066:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8005068:	4ba1      	ldr	r3, [pc, #644]	; (80052f0 <calWallConrol+0x8e8>)
 800506a:	ed93 7a00 	vldr	s14, [r3]
 800506e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005072:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005076:	4b9e      	ldr	r3, [pc, #632]	; (80052f0 <calWallConrol+0x8e8>)
 8005078:	edd3 6a02 	vldr	s13, [r3, #8]
 800507c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005080:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005088:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (2 * (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(1);
 800508c:	2001      	movs	r0, #1
 800508e:	f001 fecb 	bl	8006e28 <pl_yellow_LED_count>
			break;
 8005092:	f000 bfd8 	b.w	8006046 <calWallConrol+0x163e>
		case 3:			//両壁あり
			wall_normal.error =
					(-(float) (sensorWall_L - CENTER_L) / (float) (sensorWall_L)
 8005096:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800509a:	ed9f 7a96 	vldr	s14, [pc, #600]	; 80052f4 <calWallConrol+0x8ec>
 800509e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80050a2:	eef1 6a67 	vneg.f32	s13, s15
 80050a6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80050aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
							+ (float) (sensorWall_R - CENTER_R)
 80050ae:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80050b2:	eddf 6a91 	vldr	s13, [pc, #580]	; 80052f8 <calWallConrol+0x8f0>
 80050b6:	ee37 6ae6 	vsub.f32	s12, s15, s13
									/ (float) (sensorWall_R));
 80050ba:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80050be:	eec6 7a26 	vdiv.f32	s15, s12, s13
							+ (float) (sensorWall_R - CENTER_R)
 80050c2:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_normal.error =
 80050c6:	4b8a      	ldr	r3, [pc, #552]	; (80052f0 <calWallConrol+0x8e8>)
 80050c8:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 80050cc:	4b88      	ldr	r3, [pc, #544]	; (80052f0 <calWallConrol+0x8e8>)
 80050ce:	ed93 7a00 	vldr	s14, [r3]
 80050d2:	4b87      	ldr	r3, [pc, #540]	; (80052f0 <calWallConrol+0x8e8>)
 80050d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80050d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050dc:	4b84      	ldr	r3, [pc, #528]	; (80052f0 <calWallConrol+0x8e8>)
 80050de:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 80050e2:	4b83      	ldr	r3, [pc, #524]	; (80052f0 <calWallConrol+0x8e8>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a82      	ldr	r2, [pc, #520]	; (80052f0 <calWallConrol+0x8e8>)
 80050e8:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 80050ea:	4b81      	ldr	r3, [pc, #516]	; (80052f0 <calWallConrol+0x8e8>)
 80050ec:	ed93 7a00 	vldr	s14, [r3]
 80050f0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80050f4:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 80050f8:	4b7d      	ldr	r3, [pc, #500]	; (80052f0 <calWallConrol+0x8e8>)
 80050fa:	edd3 6a02 	vldr	s13, [r3, #8]
 80050fe:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005102:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800510a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-(float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0])
//							+ (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(129);
 800510e:	2081      	movs	r0, #129	; 0x81
 8005110:	f001 fe8a 	bl	8006e28 <pl_yellow_LED_count>
			if ((fabs(g_sensor_diff[SENSOR_LEFT]) < 30)
 8005114:	4b79      	ldr	r3, [pc, #484]	; (80052fc <calWallConrol+0x8f4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4618      	mov	r0, r3
 800511a:	f7fb fa2b 	bl	8000574 <__aeabi_i2d>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	603a      	str	r2, [r7, #0]
 8005124:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005128:	607b      	str	r3, [r7, #4]
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	4b74      	ldr	r3, [pc, #464]	; (8005300 <calWallConrol+0x8f8>)
 8005130:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005134:	f7fb fcfa 	bl	8000b2c <__aeabi_dcmplt>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d01a      	beq.n	8005174 <calWallConrol+0x76c>
					&& (fabs(g_sensor_diff[SENSOR_RIGHT]) < 30)) {
 800513e:	4b6f      	ldr	r3, [pc, #444]	; (80052fc <calWallConrol+0x8f4>)
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	4618      	mov	r0, r3
 8005144:	f7fb fa16 	bl	8000574 <__aeabi_i2d>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	4692      	mov	sl, r2
 800514e:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8005152:	f04f 0200 	mov.w	r2, #0
 8005156:	4b6a      	ldr	r3, [pc, #424]	; (8005300 <calWallConrol+0x8f8>)
 8005158:	4650      	mov	r0, sl
 800515a:	4659      	mov	r1, fp
 800515c:	f7fb fce6 	bl	8000b2c <__aeabi_dcmplt>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d006      	beq.n	8005174 <calWallConrol+0x76c>
				StabilityCount_reset++;
 8005166:	4b67      	ldr	r3, [pc, #412]	; (8005304 <calWallConrol+0x8fc>)
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	3301      	adds	r3, #1
 800516c:	b2da      	uxtb	r2, r3
 800516e:	4b65      	ldr	r3, [pc, #404]	; (8005304 <calWallConrol+0x8fc>)
 8005170:	701a      	strb	r2, [r3, #0]
 8005172:	e002      	b.n	800517a <calWallConrol+0x772>
			} else {
				StabilityCount_reset = 0;
 8005174:	4b63      	ldr	r3, [pc, #396]	; (8005304 <calWallConrol+0x8fc>)
 8005176:	2200      	movs	r2, #0
 8005178:	701a      	strb	r2, [r3, #0]
			}
			if (StabilityCount_reset >= 25) {
 800517a:	4b62      	ldr	r3, [pc, #392]	; (8005304 <calWallConrol+0x8fc>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	2b18      	cmp	r3, #24
 8005180:	f240 8760 	bls.w	8006044 <calWallConrol+0x163c>
				Gyro.sigma_error = 0;
 8005184:	4b60      	ldr	r3, [pc, #384]	; (8005308 <calWallConrol+0x900>)
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	609a      	str	r2, [r3, #8]
				StabilityCount_reset = 0;
 800518c:	4b5d      	ldr	r3, [pc, #372]	; (8005304 <calWallConrol+0x8fc>)
 800518e:	2200      	movs	r2, #0
 8005190:	701a      	strb	r2, [r3, #0]
			}
			break;
 8005192:	f000 bf57 	b.w	8006044 <calWallConrol+0x163c>
		}
//		if (highspeed_mode == 1) {
//			PID_wall = PID_wall * 0.7;
//		}

	} else if (g_WallControl_mode == 2) {
 8005196:	4b5d      	ldr	r3, [pc, #372]	; (800530c <calWallConrol+0x904>)
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b02      	cmp	r3, #2
 800519c:	f000 8753 	beq.w	8006046 <calWallConrol+0x163e>
// 斜めの制御


	} else if (g_WallControl_mode == 3) {
 80051a0:	4b5a      	ldr	r3, [pc, #360]	; (800530c <calWallConrol+0x904>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b03      	cmp	r3, #3
 80051a6:	f040 874e 	bne.w	8006046 <calWallConrol+0x163e>
		//g_WallControlStatus=3;
		float CenterSlantR, CenterSlantL;
		float coefficientR[4];
		float coefficientL[4];
		float sensor_gain_slant90_p, sensor_gain_slant90_d;
		if (straight.velocity > 1000) {
 80051aa:	4b59      	ldr	r3, [pc, #356]	; (8005310 <calWallConrol+0x908>)
 80051ac:	edd3 7a00 	vldr	s15, [r3]
 80051b0:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8005314 <calWallConrol+0x90c>
 80051b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051bc:	dd05      	ble.n	80051ca <calWallConrol+0x7c2>
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * 1000;
 80051be:	4b56      	ldr	r3, [pc, #344]	; (8005318 <calWallConrol+0x910>)
 80051c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * 1000;
 80051c4:	4b55      	ldr	r3, [pc, #340]	; (800531c <calWallConrol+0x914>)
 80051c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80051c8:	e024      	b.n	8005214 <calWallConrol+0x80c>
		} else {
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * straight.velocity;
 80051ca:	4b51      	ldr	r3, [pc, #324]	; (8005310 <calWallConrol+0x908>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fb f9e2 	bl	8000598 <__aeabi_f2d>
 80051d4:	a342      	add	r3, pc, #264	; (adr r3, 80052e0 <calWallConrol+0x8d8>)
 80051d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051da:	f7fb fa35 	bl	8000648 <__aeabi_dmul>
 80051de:	4602      	mov	r2, r0
 80051e0:	460b      	mov	r3, r1
 80051e2:	4610      	mov	r0, r2
 80051e4:	4619      	mov	r1, r3
 80051e6:	f7fb fd07 	bl	8000bf8 <__aeabi_d2f>
 80051ea:	4603      	mov	r3, r0
 80051ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * straight.velocity;
 80051f0:	4b47      	ldr	r3, [pc, #284]	; (8005310 <calWallConrol+0x908>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fb f9cf 	bl	8000598 <__aeabi_f2d>
 80051fa:	a33b      	add	r3, pc, #236	; (adr r3, 80052e8 <calWallConrol+0x8e0>)
 80051fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005200:	f7fb fa22 	bl	8000648 <__aeabi_dmul>
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	4610      	mov	r0, r2
 800520a:	4619      	mov	r1, r3
 800520c:	f7fb fcf4 	bl	8000bf8 <__aeabi_d2f>
 8005210:	4603      	mov	r3, r0
 8005212:	67fb      	str	r3, [r7, #124]	; 0x7c
		}

		if (NoWallDisplacementR45slant > AREAMIN_R0
 8005214:	4b42      	ldr	r3, [pc, #264]	; (8005320 <calWallConrol+0x918>)
 8005216:	edd3 7a00 	vldr	s15, [r3]
 800521a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800521e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005226:	dd12      	ble.n	800524e <calWallConrol+0x846>
				&& NoWallDisplacementR45slant <= AREAMAX_R0) {
 8005228:	4b3d      	ldr	r3, [pc, #244]	; (8005320 <calWallConrol+0x918>)
 800522a:	edd3 7a00 	vldr	s15, [r3]
 800522e:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8005232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800523a:	d808      	bhi.n	800524e <calWallConrol+0x846>
			coefficientR[0] = COEFFICIENT_R0_0;
 800523c:	4b39      	ldr	r3, [pc, #228]	; (8005324 <calWallConrol+0x91c>)
 800523e:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R0_1;
 8005240:	4b39      	ldr	r3, [pc, #228]	; (8005328 <calWallConrol+0x920>)
 8005242:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R0_2;
 8005244:	4b39      	ldr	r3, [pc, #228]	; (800532c <calWallConrol+0x924>)
 8005246:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R0_3;
 8005248:	4b39      	ldr	r3, [pc, #228]	; (8005330 <calWallConrol+0x928>)
 800524a:	657b      	str	r3, [r7, #84]	; 0x54
 800524c:	e0a7      	b.n	800539e <calWallConrol+0x996>
		} else if (NoWallDisplacementR45slant > AREAMIN_R1
 800524e:	4b34      	ldr	r3, [pc, #208]	; (8005320 <calWallConrol+0x918>)
 8005250:	edd3 7a00 	vldr	s15, [r3]
 8005254:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8005334 <calWallConrol+0x92c>
 8005258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800525c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005260:	dd12      	ble.n	8005288 <calWallConrol+0x880>
				&& NoWallDisplacementR45slant <= AREAMAX_R1) {
 8005262:	4b2f      	ldr	r3, [pc, #188]	; (8005320 <calWallConrol+0x918>)
 8005264:	edd3 7a00 	vldr	s15, [r3]
 8005268:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8005338 <calWallConrol+0x930>
 800526c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005274:	d808      	bhi.n	8005288 <calWallConrol+0x880>
			coefficientR[0] = COEFFICIENT_R1_0;
 8005276:	4b31      	ldr	r3, [pc, #196]	; (800533c <calWallConrol+0x934>)
 8005278:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R1_1;
 800527a:	4b31      	ldr	r3, [pc, #196]	; (8005340 <calWallConrol+0x938>)
 800527c:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R1_2;
 800527e:	4b31      	ldr	r3, [pc, #196]	; (8005344 <calWallConrol+0x93c>)
 8005280:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R1_3;
 8005282:	4b31      	ldr	r3, [pc, #196]	; (8005348 <calWallConrol+0x940>)
 8005284:	657b      	str	r3, [r7, #84]	; 0x54
 8005286:	e08a      	b.n	800539e <calWallConrol+0x996>
		} else if (NoWallDisplacementR45slant > AREAMIN_R2
 8005288:	4b25      	ldr	r3, [pc, #148]	; (8005320 <calWallConrol+0x918>)
 800528a:	edd3 7a00 	vldr	s15, [r3]
 800528e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800534c <calWallConrol+0x944>
 8005292:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800529a:	dd12      	ble.n	80052c2 <calWallConrol+0x8ba>
				&& NoWallDisplacementR45slant <= AREAMAX_R2) {
 800529c:	4b20      	ldr	r3, [pc, #128]	; (8005320 <calWallConrol+0x918>)
 800529e:	edd3 7a00 	vldr	s15, [r3]
 80052a2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005350 <calWallConrol+0x948>
 80052a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ae:	d808      	bhi.n	80052c2 <calWallConrol+0x8ba>
			coefficientR[0] = COEFFICIENT_R2_0;
 80052b0:	4b28      	ldr	r3, [pc, #160]	; (8005354 <calWallConrol+0x94c>)
 80052b2:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R2_1;
 80052b4:	4b28      	ldr	r3, [pc, #160]	; (8005358 <calWallConrol+0x950>)
 80052b6:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R2_2;
 80052b8:	4b28      	ldr	r3, [pc, #160]	; (800535c <calWallConrol+0x954>)
 80052ba:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R2_3;
 80052bc:	4b28      	ldr	r3, [pc, #160]	; (8005360 <calWallConrol+0x958>)
 80052be:	657b      	str	r3, [r7, #84]	; 0x54
 80052c0:	e06d      	b.n	800539e <calWallConrol+0x996>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R) {
 80052c2:	4b28      	ldr	r3, [pc, #160]	; (8005364 <calWallConrol+0x95c>)
 80052c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80052c8:	2bb4      	cmp	r3, #180	; 0xb4
 80052ca:	dd4f      	ble.n	800536c <calWallConrol+0x964>
				g_WallControlStatus = g_WallControlStatus | (1 << 1);
 80052cc:	4b26      	ldr	r3, [pc, #152]	; (8005368 <calWallConrol+0x960>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	f043 0302 	orr.w	r3, r3, #2
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	4b24      	ldr	r3, [pc, #144]	; (8005368 <calWallConrol+0x960>)
 80052d8:	701a      	strb	r2, [r3, #0]
 80052da:	e04e      	b.n	800537a <calWallConrol+0x972>
 80052dc:	f3af 8000 	nop.w
 80052e0:	66666666 	.word	0x66666666
 80052e4:	3fe66666 	.word	0x3fe66666
 80052e8:	1eb851ec 	.word	0x1eb851ec
 80052ec:	bfb1eb85 	.word	0xbfb1eb85
 80052f0:	2000056c 	.word	0x2000056c
 80052f4:	44be6000 	.word	0x44be6000
 80052f8:	44974000 	.word	0x44974000
 80052fc:	20000448 	.word	0x20000448
 8005300:	403e0000 	.word	0x403e0000
 8005304:	20000595 	.word	0x20000595
 8005308:	20000544 	.word	0x20000544
 800530c:	20000590 	.word	0x20000590
 8005310:	200004d8 	.word	0x200004d8
 8005314:	447a0000 	.word	0x447a0000
 8005318:	442f0000 	.word	0x442f0000
 800531c:	c28c0000 	.word	0xc28c0000
 8005320:	200005dc 	.word	0x200005dc
 8005324:	4519d2f5 	.word	0x4519d2f5
 8005328:	c40e02ec 	.word	0xc40e02ec
 800532c:	423da41a 	.word	0x423da41a
 8005330:	bfa28f5c 	.word	0xbfa28f5c
 8005334:	420c0000 	.word	0x420c0000
 8005338:	42700000 	.word	0x42700000
 800533c:	440d1857 	.word	0x440d1857
 8005340:	c181619b 	.word	0xc181619b
 8005344:	3eaab6f2 	.word	0x3eaab6f2
 8005348:	bacaf00f 	.word	0xbacaf00f
 800534c:	42c80000 	.word	0x42c80000
 8005350:	42f00000 	.word	0x42f00000
 8005354:	4559c991 	.word	0x4559c991
 8005358:	41cef541 	.word	0x41cef541
 800535c:	bfbda504 	.word	0xbfbda504
 8005360:	3c22339c 	.word	0x3c22339c
 8005364:	200002b8 	.word	0x200002b8
 8005368:	20000593 	.word	0x20000593
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 800536c:	4b79      	ldr	r3, [pc, #484]	; (8005554 <calWallConrol+0xb4c>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	f023 0302 	bic.w	r3, r3, #2
 8005374:	b2da      	uxtb	r2, r3
 8005376:	4b77      	ldr	r3, [pc, #476]	; (8005554 <calWallConrol+0xb4c>)
 8005378:	701a      	strb	r2, [r3, #0]
			}
			coefficientR[0] = (float) (g_sensor[SENSOR_RIGHT][0]);
 800537a:	4b77      	ldr	r3, [pc, #476]	; (8005558 <calWallConrol+0xb50>)
 800537c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005380:	ee07 3a90 	vmov	s15, r3
 8005384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005388:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			coefficientR[1] = 0;
 800538c:	f04f 0300 	mov.w	r3, #0
 8005390:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = 0;
 8005392:	f04f 0300 	mov.w	r3, #0
 8005396:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = 0;
 8005398:	f04f 0300 	mov.w	r3, #0
 800539c:	657b      	str	r3, [r7, #84]	; 0x54
		}

		if (NoWallDisplacementL45slant > AREAMIN_L0
 800539e:	4b6f      	ldr	r3, [pc, #444]	; (800555c <calWallConrol+0xb54>)
 80053a0:	edd3 7a00 	vldr	s15, [r3]
 80053a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b0:	dd12      	ble.n	80053d8 <calWallConrol+0x9d0>
				&& NoWallDisplacementL45slant <= AREAMAX_L0) {
 80053b2:	4b6a      	ldr	r3, [pc, #424]	; (800555c <calWallConrol+0xb54>)
 80053b4:	edd3 7a00 	vldr	s15, [r3]
 80053b8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80053bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c4:	d808      	bhi.n	80053d8 <calWallConrol+0x9d0>
			coefficientL[0] = COEFFICIENT_L0_0;
 80053c6:	4b66      	ldr	r3, [pc, #408]	; (8005560 <calWallConrol+0xb58>)
 80053c8:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L0_1;
 80053ca:	4b66      	ldr	r3, [pc, #408]	; (8005564 <calWallConrol+0xb5c>)
 80053cc:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L0_2;
 80053ce:	4b66      	ldr	r3, [pc, #408]	; (8005568 <calWallConrol+0xb60>)
 80053d0:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L0_3;
 80053d2:	4b66      	ldr	r3, [pc, #408]	; (800556c <calWallConrol+0xb64>)
 80053d4:	647b      	str	r3, [r7, #68]	; 0x44
 80053d6:	e05d      	b.n	8005494 <calWallConrol+0xa8c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L1
 80053d8:	4b60      	ldr	r3, [pc, #384]	; (800555c <calWallConrol+0xb54>)
 80053da:	edd3 7a00 	vldr	s15, [r3]
 80053de:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8005570 <calWallConrol+0xb68>
 80053e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ea:	dd12      	ble.n	8005412 <calWallConrol+0xa0a>
				&& NoWallDisplacementL45slant <= AREAMAX_L1) {
 80053ec:	4b5b      	ldr	r3, [pc, #364]	; (800555c <calWallConrol+0xb54>)
 80053ee:	edd3 7a00 	vldr	s15, [r3]
 80053f2:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8005574 <calWallConrol+0xb6c>
 80053f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053fe:	d808      	bhi.n	8005412 <calWallConrol+0xa0a>
			coefficientL[0] = COEFFICIENT_L1_0;
 8005400:	4b5d      	ldr	r3, [pc, #372]	; (8005578 <calWallConrol+0xb70>)
 8005402:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L1_1;
 8005404:	4b5d      	ldr	r3, [pc, #372]	; (800557c <calWallConrol+0xb74>)
 8005406:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L1_2;
 8005408:	4b5d      	ldr	r3, [pc, #372]	; (8005580 <calWallConrol+0xb78>)
 800540a:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L1_3;
 800540c:	4b5d      	ldr	r3, [pc, #372]	; (8005584 <calWallConrol+0xb7c>)
 800540e:	647b      	str	r3, [r7, #68]	; 0x44
 8005410:	e040      	b.n	8005494 <calWallConrol+0xa8c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L2
 8005412:	4b52      	ldr	r3, [pc, #328]	; (800555c <calWallConrol+0xb54>)
 8005414:	edd3 7a00 	vldr	s15, [r3]
 8005418:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8005588 <calWallConrol+0xb80>
 800541c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005424:	dd12      	ble.n	800544c <calWallConrol+0xa44>
				&& NoWallDisplacementL45slant <= AREAMAX_L2) {
 8005426:	4b4d      	ldr	r3, [pc, #308]	; (800555c <calWallConrol+0xb54>)
 8005428:	edd3 7a00 	vldr	s15, [r3]
 800542c:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800558c <calWallConrol+0xb84>
 8005430:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005438:	d808      	bhi.n	800544c <calWallConrol+0xa44>
			coefficientL[0] = COEFFICIENT_L2_0;
 800543a:	4b55      	ldr	r3, [pc, #340]	; (8005590 <calWallConrol+0xb88>)
 800543c:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L2_1;
 800543e:	4b55      	ldr	r3, [pc, #340]	; (8005594 <calWallConrol+0xb8c>)
 8005440:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L2_2;
 8005442:	4b55      	ldr	r3, [pc, #340]	; (8005598 <calWallConrol+0xb90>)
 8005444:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L2_3;
 8005446:	4b55      	ldr	r3, [pc, #340]	; (800559c <calWallConrol+0xb94>)
 8005448:	647b      	str	r3, [r7, #68]	; 0x44
 800544a:	e023      	b.n	8005494 <calWallConrol+0xa8c>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L) {
 800544c:	4b42      	ldr	r3, [pc, #264]	; (8005558 <calWallConrol+0xb50>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2bb4      	cmp	r3, #180	; 0xb4
 8005452:	dd07      	ble.n	8005464 <calWallConrol+0xa5c>
				g_WallControlStatus = g_WallControlStatus | (1 << 0);
 8005454:	4b3f      	ldr	r3, [pc, #252]	; (8005554 <calWallConrol+0xb4c>)
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	f043 0301 	orr.w	r3, r3, #1
 800545c:	b2da      	uxtb	r2, r3
 800545e:	4b3d      	ldr	r3, [pc, #244]	; (8005554 <calWallConrol+0xb4c>)
 8005460:	701a      	strb	r2, [r3, #0]
 8005462:	e006      	b.n	8005472 <calWallConrol+0xa6a>
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 8005464:	4b3b      	ldr	r3, [pc, #236]	; (8005554 <calWallConrol+0xb4c>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	f023 0301 	bic.w	r3, r3, #1
 800546c:	b2da      	uxtb	r2, r3
 800546e:	4b39      	ldr	r3, [pc, #228]	; (8005554 <calWallConrol+0xb4c>)
 8005470:	701a      	strb	r2, [r3, #0]
			}
			coefficientL[0] = (float) (g_sensor[SENSOR_LEFT][0]);
 8005472:	4b39      	ldr	r3, [pc, #228]	; (8005558 <calWallConrol+0xb50>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	ee07 3a90 	vmov	s15, r3
 800547a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800547e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			coefficientL[1] = 0;
 8005482:	f04f 0300 	mov.w	r3, #0
 8005486:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = 0;
 8005488:	f04f 0300 	mov.w	r3, #0
 800548c:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = 0;
 800548e:	f04f 0300 	mov.w	r3, #0
 8005492:	647b      	str	r3, [r7, #68]	; 0x44
		}

		CenterSlantR = coefficientR[0]
 8005494:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
				+ coefficientR[1] * NoWallDisplacementR45slant
 8005498:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800549c:	4b40      	ldr	r3, [pc, #256]	; (80055a0 <calWallConrol+0xb98>)
 800549e:	edd3 7a00 	vldr	s15, [r3]
 80054a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054a6:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 80054aa:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80054ae:	4b3c      	ldr	r3, [pc, #240]	; (80055a0 <calWallConrol+0xb98>)
 80054b0:	edd3 7a00 	vldr	s15, [r3]
 80054b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 80054b8:	4b39      	ldr	r3, [pc, #228]	; (80055a0 <calWallConrol+0xb98>)
 80054ba:	edd3 7a00 	vldr	s15, [r3]
 80054be:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 80054c2:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[3] * NoWallDisplacementR45slant
 80054c6:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80054ca:	4b35      	ldr	r3, [pc, #212]	; (80055a0 <calWallConrol+0xb98>)
 80054cc:	edd3 7a00 	vldr	s15, [r3]
 80054d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 80054d4:	4b32      	ldr	r3, [pc, #200]	; (80055a0 <calWallConrol+0xb98>)
 80054d6:	edd3 7a00 	vldr	s15, [r3]
 80054da:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 80054de:	4b30      	ldr	r3, [pc, #192]	; (80055a0 <calWallConrol+0xb98>)
 80054e0:	edd3 7a00 	vldr	s15, [r3]
 80054e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR = coefficientR[0]
 80054e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054ec:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

		CenterSlantL = coefficientL[0]
 80054f0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
				+ coefficientL[1] * NoWallDisplacementL45slant
 80054f4:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80054f8:	4b18      	ldr	r3, [pc, #96]	; (800555c <calWallConrol+0xb54>)
 80054fa:	edd3 7a00 	vldr	s15, [r3]
 80054fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005502:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 8005506:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800550a:	4b14      	ldr	r3, [pc, #80]	; (800555c <calWallConrol+0xb54>)
 800550c:	edd3 7a00 	vldr	s15, [r3]
 8005510:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005514:	4b11      	ldr	r3, [pc, #68]	; (800555c <calWallConrol+0xb54>)
 8005516:	edd3 7a00 	vldr	s15, [r3]
 800551a:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 800551e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[3] * NoWallDisplacementL45slant
 8005522:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8005526:	4b0d      	ldr	r3, [pc, #52]	; (800555c <calWallConrol+0xb54>)
 8005528:	edd3 7a00 	vldr	s15, [r3]
 800552c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005530:	4b0a      	ldr	r3, [pc, #40]	; (800555c <calWallConrol+0xb54>)
 8005532:	edd3 7a00 	vldr	s15, [r3]
 8005536:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 800553a:	4b08      	ldr	r3, [pc, #32]	; (800555c <calWallConrol+0xb54>)
 800553c:	edd3 7a00 	vldr	s15, [r3]
 8005540:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL = coefficientL[0]
 8005544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005548:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		for (int j = 11; j >= 1; j--) {
 800554c:	230b      	movs	r3, #11
 800554e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005550:	e041      	b.n	80055d6 <calWallConrol+0xbce>
 8005552:	bf00      	nop
 8005554:	20000593 	.word	0x20000593
 8005558:	200002b8 	.word	0x200002b8
 800555c:	200005e0 	.word	0x200005e0
 8005560:	44f286e9 	.word	0x44f286e9
 8005564:	c3c54757 	.word	0xc3c54757
 8005568:	41e9f1c4 	.word	0x41e9f1c4
 800556c:	bf307804 	.word	0xbf307804
 8005570:	420c0000 	.word	0x420c0000
 8005574:	42700000 	.word	0x42700000
 8005578:	43b4a7f9 	.word	0x43b4a7f9
 800557c:	c04f43da 	.word	0xc04f43da
 8005580:	3a9164ed 	.word	0x3a9164ed
 8005584:	3a8c6aa9 	.word	0x3a8c6aa9
 8005588:	42c80000 	.word	0x42c80000
 800558c:	42f00000 	.word	0x42f00000
 8005590:	478c2a26 	.word	0x478c2a26
 8005594:	c4fbb229 	.word	0xc4fbb229
 8005598:	4195b611 	.word	0x4195b611
 800559c:	bd67d567 	.word	0xbd67d567
 80055a0:	200005dc 	.word	0x200005dc
			g_CenterSlantR90[j] = g_CenterSlantR90[j - 1];
 80055a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055a6:	3b01      	subs	r3, #1
 80055a8:	4a9c      	ldr	r2, [pc, #624]	; (800581c <calWallConrol+0xe14>)
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	499a      	ldr	r1, [pc, #616]	; (800581c <calWallConrol+0xe14>)
 80055b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	601a      	str	r2, [r3, #0]
			g_CenterSlantL90[j] = g_CenterSlantL90[j - 1];
 80055ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055bc:	3b01      	subs	r3, #1
 80055be:	4a98      	ldr	r2, [pc, #608]	; (8005820 <calWallConrol+0xe18>)
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	4996      	ldr	r1, [pc, #600]	; (8005820 <calWallConrol+0xe18>)
 80055c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	440b      	add	r3, r1
 80055ce:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 80055d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055d2:	3b01      	subs	r3, #1
 80055d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80055d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055d8:	2b00      	cmp	r3, #0
 80055da:	dce3      	bgt.n	80055a4 <calWallConrol+0xb9c>
		}
		g_CenterSlantR90[0] = CenterSlantR;
 80055dc:	4a8f      	ldr	r2, [pc, #572]	; (800581c <calWallConrol+0xe14>)
 80055de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055e0:	6013      	str	r3, [r2, #0]
		g_CenterSlantL90[0] = CenterSlantL;
 80055e2:	4a8f      	ldr	r2, [pc, #572]	; (8005820 <calWallConrol+0xe18>)
 80055e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055e6:	6013      	str	r3, [r2, #0]

		g_CenterSlantR90_diff = g_CenterSlantR90[0] - g_CenterSlantR90[11];
 80055e8:	4b8c      	ldr	r3, [pc, #560]	; (800581c <calWallConrol+0xe14>)
 80055ea:	ed93 7a00 	vldr	s14, [r3]
 80055ee:	4b8b      	ldr	r3, [pc, #556]	; (800581c <calWallConrol+0xe14>)
 80055f0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80055f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055f8:	4b8a      	ldr	r3, [pc, #552]	; (8005824 <calWallConrol+0xe1c>)
 80055fa:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL90_diff = g_CenterSlantL90[0] - g_CenterSlantL90[11];
 80055fe:	4b88      	ldr	r3, [pc, #544]	; (8005820 <calWallConrol+0xe18>)
 8005600:	ed93 7a00 	vldr	s14, [r3]
 8005604:	4b86      	ldr	r3, [pc, #536]	; (8005820 <calWallConrol+0xe18>)
 8005606:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800560a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800560e:	4b86      	ldr	r3, [pc, #536]	; (8005828 <calWallConrol+0xe20>)
 8005610:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R
 8005614:	4b85      	ldr	r3, [pc, #532]	; (800582c <calWallConrol+0xe24>)
 8005616:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800561a:	2bb4      	cmp	r3, #180	; 0xb4
 800561c:	dd1a      	ble.n	8005654 <calWallConrol+0xc4c>
				&& fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 800561e:	4b84      	ldr	r3, [pc, #528]	; (8005830 <calWallConrol+0xe28>)
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	ee07 3a90 	vmov	s15, r3
 8005626:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800562a:	4b7e      	ldr	r3, [pc, #504]	; (8005824 <calWallConrol+0xe1c>)
 800562c:	edd3 7a00 	vldr	s15, [r3]
 8005630:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005634:	eef0 7ae7 	vabs.f32	s15, s15
 8005638:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8005834 <calWallConrol+0xe2c>
 800563c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005644:	d506      	bpl.n	8005654 <calWallConrol+0xc4c>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus | (1 << 1);
 8005646:	4b7c      	ldr	r3, [pc, #496]	; (8005838 <calWallConrol+0xe30>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	f043 0302 	orr.w	r3, r3, #2
 800564e:	b2da      	uxtb	r2, r3
 8005650:	4b79      	ldr	r3, [pc, #484]	; (8005838 <calWallConrol+0xe30>)
 8005652:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L
 8005654:	4b75      	ldr	r3, [pc, #468]	; (800582c <calWallConrol+0xe24>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2bb4      	cmp	r3, #180	; 0xb4
 800565a:	dd1a      	ble.n	8005692 <calWallConrol+0xc8a>
				&& fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 800565c:	4b74      	ldr	r3, [pc, #464]	; (8005830 <calWallConrol+0xe28>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	ee07 3a90 	vmov	s15, r3
 8005664:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005668:	4b6f      	ldr	r3, [pc, #444]	; (8005828 <calWallConrol+0xe20>)
 800566a:	edd3 7a00 	vldr	s15, [r3]
 800566e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005672:	eef0 7ae7 	vabs.f32	s15, s15
 8005676:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8005834 <calWallConrol+0xe2c>
 800567a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800567e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005682:	d506      	bpl.n	8005692 <calWallConrol+0xc8a>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus | (1 << 0);
 8005684:	4b6c      	ldr	r3, [pc, #432]	; (8005838 <calWallConrol+0xe30>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	f043 0301 	orr.w	r3, r3, #1
 800568c:	b2da      	uxtb	r2, r3
 800568e:	4b6a      	ldr	r3, [pc, #424]	; (8005838 <calWallConrol+0xe30>)
 8005690:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT_R
 8005692:	4b66      	ldr	r3, [pc, #408]	; (800582c <calWallConrol+0xe24>)
 8005694:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005698:	2bb3      	cmp	r3, #179	; 0xb3
 800569a:	dd13      	ble.n	80056c4 <calWallConrol+0xcbc>
				|| fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 800569c:	4b64      	ldr	r3, [pc, #400]	; (8005830 <calWallConrol+0xe28>)
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	ee07 3a90 	vmov	s15, r3
 80056a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056a8:	4b5e      	ldr	r3, [pc, #376]	; (8005824 <calWallConrol+0xe1c>)
 80056aa:	edd3 7a00 	vldr	s15, [r3]
 80056ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056b2:	eef0 7ae7 	vabs.f32	s15, s15
 80056b6:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8005834 <calWallConrol+0xe2c>
 80056ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056c2:	dd06      	ble.n	80056d2 <calWallConrol+0xcca>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 80056c4:	4b5c      	ldr	r3, [pc, #368]	; (8005838 <calWallConrol+0xe30>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	f023 0302 	bic.w	r3, r3, #2
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	4b5a      	ldr	r3, [pc, #360]	; (8005838 <calWallConrol+0xe30>)
 80056d0:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT_L
 80056d2:	4b56      	ldr	r3, [pc, #344]	; (800582c <calWallConrol+0xe24>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2bb3      	cmp	r3, #179	; 0xb3
 80056d8:	dd13      	ble.n	8005702 <calWallConrol+0xcfa>
				|| fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 80056da:	4b55      	ldr	r3, [pc, #340]	; (8005830 <calWallConrol+0xe28>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	ee07 3a90 	vmov	s15, r3
 80056e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056e6:	4b50      	ldr	r3, [pc, #320]	; (8005828 <calWallConrol+0xe20>)
 80056e8:	edd3 7a00 	vldr	s15, [r3]
 80056ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056f0:	eef0 7ae7 	vabs.f32	s15, s15
 80056f4:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8005834 <calWallConrol+0xe2c>
 80056f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005700:	dd06      	ble.n	8005710 <calWallConrol+0xd08>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 8005702:	4b4d      	ldr	r3, [pc, #308]	; (8005838 <calWallConrol+0xe30>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	f023 0301 	bic.w	r3, r3, #1
 800570a:	b2da      	uxtb	r2, r3
 800570c:	4b4a      	ldr	r3, [pc, #296]	; (8005838 <calWallConrol+0xe30>)
 800570e:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus) {
 8005710:	4b49      	ldr	r3, [pc, #292]	; (8005838 <calWallConrol+0xe30>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	2b03      	cmp	r3, #3
 8005716:	f200 813d 	bhi.w	8005994 <calWallConrol+0xf8c>
 800571a:	a201      	add	r2, pc, #4	; (adr r2, 8005720 <calWallConrol+0xd18>)
 800571c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005720:	08005731 	.word	0x08005731
 8005724:	08005785 	.word	0x08005785
 8005728:	08005849 	.word	0x08005849
 800572c:	080058df 	.word	0x080058df
		case 0:			//両壁なし
			PID_wall = 0;
 8005730:	f04f 0300 	mov.w	r3, #0
 8005734:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			pl_yellow_LED_1(0);
 8005738:	2000      	movs	r0, #0
 800573a:	f001 faf3 	bl	8006d24 <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 800573e:	2000      	movs	r0, #0
 8005740:	f001 fb26 	bl	8006d90 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005744:	4b39      	ldr	r3, [pc, #228]	; (800582c <calWallConrol+0xe24>)
 8005746:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800574a:	ee07 3a90 	vmov	s15, r3
 800574e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005752:	4b3a      	ldr	r3, [pc, #232]	; (800583c <calWallConrol+0xe34>)
 8005754:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 8005758:	4b34      	ldr	r3, [pc, #208]	; (800582c <calWallConrol+0xe24>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	ee07 3a90 	vmov	s15, r3
 8005760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005764:	4b36      	ldr	r3, [pc, #216]	; (8005840 <calWallConrol+0xe38>)
 8005766:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = 0;
 800576a:	4b36      	ldr	r3, [pc, #216]	; (8005844 <calWallConrol+0xe3c>)
 800576c:	f04f 0200 	mov.w	r2, #0
 8005770:	601a      	str	r2, [r3, #0]
			wall_slant90.delta_error = 0;
 8005772:	4b34      	ldr	r3, [pc, #208]	; (8005844 <calWallConrol+0xe3c>)
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	609a      	str	r2, [r3, #8]
			wall_slant90.old_error = 0;
 800577a:	4b32      	ldr	r3, [pc, #200]	; (8005844 <calWallConrol+0xe3c>)
 800577c:	f04f 0200 	mov.w	r2, #0
 8005780:	605a      	str	r2, [r3, #4]
			break;
 8005782:	e107      	b.n	8005994 <calWallConrol+0xf8c>
		case 1:			//左壁のみ
			pl_yellow_LED_1(0);
 8005784:	2000      	movs	r0, #0
 8005786:	f001 facd 	bl	8006d24 <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 800578a:	2001      	movs	r0, #1
 800578c:	f001 fb00 	bl	8006d90 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005790:	4b26      	ldr	r3, [pc, #152]	; (800582c <calWallConrol+0xe24>)
 8005792:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005796:	ee07 3a90 	vmov	s15, r3
 800579a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800579e:	4b27      	ldr	r3, [pc, #156]	; (800583c <calWallConrol+0xe34>)
 80057a0:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = CenterSlantL;
 80057a4:	4a26      	ldr	r2, [pc, #152]	; (8005840 <calWallConrol+0xe38>)
 80057a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057a8:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 80057aa:	4b20      	ldr	r3, [pc, #128]	; (800582c <calWallConrol+0xe24>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	ee07 3a90 	vmov	s15, r3
 80057b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057b6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80057ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057be:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0]));
 80057c2:	4b1a      	ldr	r3, [pc, #104]	; (800582c <calWallConrol+0xe24>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	ee07 3a90 	vmov	s15, r3
 80057ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 80057d2:	4b1c      	ldr	r3, [pc, #112]	; (8005844 <calWallConrol+0xe3c>)
 80057d4:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 80057d8:	4b1a      	ldr	r3, [pc, #104]	; (8005844 <calWallConrol+0xe3c>)
 80057da:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 80057de:	4b19      	ldr	r3, [pc, #100]	; (8005844 <calWallConrol+0xe3c>)
 80057e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80057e4:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 80057e8:	4b16      	ldr	r3, [pc, #88]	; (8005844 <calWallConrol+0xe3c>)
 80057ea:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 80057ee:	4b15      	ldr	r3, [pc, #84]	; (8005844 <calWallConrol+0xe3c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a14      	ldr	r2, [pc, #80]	; (8005844 <calWallConrol+0xe3c>)
 80057f4:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 80057f6:	4b13      	ldr	r3, [pc, #76]	; (8005844 <calWallConrol+0xe3c>)
 80057f8:	ed93 7a00 	vldr	s14, [r3]
 80057fc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005800:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005804:	4b0f      	ldr	r3, [pc, #60]	; (8005844 <calWallConrol+0xe3c>)
 8005806:	edd3 6a02 	vldr	s13, [r3, #8]
 800580a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800580e:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005816:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 800581a:	e0bb      	b.n	8005994 <calWallConrol+0xf8c>
 800581c:	20000608 	.word	0x20000608
 8005820:	20000638 	.word	0x20000638
 8005824:	200006c8 	.word	0x200006c8
 8005828:	200006cc 	.word	0x200006cc
 800582c:	200002b8 	.word	0x200002b8
 8005830:	20000448 	.word	0x20000448
 8005834:	42a00000 	.word	0x42a00000
 8005838:	20000593 	.word	0x20000593
 800583c:	200005ac 	.word	0x200005ac
 8005840:	200005b0 	.word	0x200005b0
 8005844:	20000578 	.word	0x20000578
		case 2:			//右壁のみ
			pl_yellow_LED_1(1);
 8005848:	2001      	movs	r0, #1
 800584a:	f001 fa6b 	bl	8006d24 <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 800584e:	2000      	movs	r0, #0
 8005850:	f001 fa9e 	bl	8006d90 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 8005854:	4aa4      	ldr	r2, [pc, #656]	; (8005ae8 <calWallConrol+0x10e0>)
 8005856:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005858:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 800585a:	4ba4      	ldr	r3, [pc, #656]	; (8005aec <calWallConrol+0x10e4>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	ee07 3a90 	vmov	s15, r3
 8005862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005866:	4ba2      	ldr	r3, [pc, #648]	; (8005af0 <calWallConrol+0x10e8>)
 8005868:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 800586c:	4b9f      	ldr	r3, [pc, #636]	; (8005aec <calWallConrol+0x10e4>)
 800586e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005872:	ee07 3a90 	vmov	s15, r3
 8005876:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800587a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800587e:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR) / (float) (g_sensor[SENSOR_RIGHT][0]));
 8005882:	4b9a      	ldr	r3, [pc, #616]	; (8005aec <calWallConrol+0x10e4>)
 8005884:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005888:	ee07 3a90 	vmov	s15, r3
 800588c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005890:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 8005894:	4b97      	ldr	r3, [pc, #604]	; (8005af4 <calWallConrol+0x10ec>)
 8005896:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 800589a:	4b96      	ldr	r3, [pc, #600]	; (8005af4 <calWallConrol+0x10ec>)
 800589c:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 80058a0:	4b94      	ldr	r3, [pc, #592]	; (8005af4 <calWallConrol+0x10ec>)
 80058a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80058a6:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 80058aa:	4b92      	ldr	r3, [pc, #584]	; (8005af4 <calWallConrol+0x10ec>)
 80058ac:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 80058b0:	4b90      	ldr	r3, [pc, #576]	; (8005af4 <calWallConrol+0x10ec>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a8f      	ldr	r2, [pc, #572]	; (8005af4 <calWallConrol+0x10ec>)
 80058b6:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 80058b8:	4b8e      	ldr	r3, [pc, #568]	; (8005af4 <calWallConrol+0x10ec>)
 80058ba:	ed93 7a00 	vldr	s14, [r3]
 80058be:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80058c2:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 80058c6:	4b8b      	ldr	r3, [pc, #556]	; (8005af4 <calWallConrol+0x10ec>)
 80058c8:	edd3 6a02 	vldr	s13, [r3, #8]
 80058cc:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80058d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 80058d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058d8:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 80058dc:	e05a      	b.n	8005994 <calWallConrol+0xf8c>
		case 3:			//両壁あり
			pl_yellow_LED_1(1);
 80058de:	2001      	movs	r0, #1
 80058e0:	f001 fa20 	bl	8006d24 <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 80058e4:	2001      	movs	r0, #1
 80058e6:	f001 fa53 	bl	8006d90 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 80058ea:	4a7f      	ldr	r2, [pc, #508]	; (8005ae8 <calWallConrol+0x10e0>)
 80058ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058ee:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = CenterSlantL;
 80058f0:	4a7f      	ldr	r2, [pc, #508]	; (8005af0 <calWallConrol+0x10e8>)
 80058f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058f4:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 80058f6:	4b7d      	ldr	r3, [pc, #500]	; (8005aec <calWallConrol+0x10e4>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	ee07 3a90 	vmov	s15, r3
 80058fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005902:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005906:	ee77 7a67 	vsub.f32	s15, s14, s15
 800590a:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0])
 800590e:	4b77      	ldr	r3, [pc, #476]	; (8005aec <calWallConrol+0x10e4>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	ee07 3a90 	vmov	s15, r3
 8005916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800591a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 800591e:	4b73      	ldr	r3, [pc, #460]	; (8005aec <calWallConrol+0x10e4>)
 8005920:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005924:	ee07 3a90 	vmov	s15, r3
 8005928:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800592c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005930:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_RIGHT][0]));
 8005934:	4b6d      	ldr	r3, [pc, #436]	; (8005aec <calWallConrol+0x10e4>)
 8005936:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800593a:	ee07 3a90 	vmov	s15, r3
 800593e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005942:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 8005946:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 800594a:	4b6a      	ldr	r3, [pc, #424]	; (8005af4 <calWallConrol+0x10ec>)
 800594c:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005950:	4b68      	ldr	r3, [pc, #416]	; (8005af4 <calWallConrol+0x10ec>)
 8005952:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005956:	4b67      	ldr	r3, [pc, #412]	; (8005af4 <calWallConrol+0x10ec>)
 8005958:	edd3 7a01 	vldr	s15, [r3, #4]
 800595c:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005960:	4b64      	ldr	r3, [pc, #400]	; (8005af4 <calWallConrol+0x10ec>)
 8005962:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005966:	4b63      	ldr	r3, [pc, #396]	; (8005af4 <calWallConrol+0x10ec>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a62      	ldr	r2, [pc, #392]	; (8005af4 <calWallConrol+0x10ec>)
 800596c:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 800596e:	4b61      	ldr	r3, [pc, #388]	; (8005af4 <calWallConrol+0x10ec>)
 8005970:	ed93 7a00 	vldr	s14, [r3]
 8005974:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005978:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 800597c:	4b5d      	ldr	r3, [pc, #372]	; (8005af4 <calWallConrol+0x10ec>)
 800597e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005982:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005986:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 800598a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800598e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005992:	bf00      	nop
// 斜め45度
		float CenterSlantR45, CenterSlantL45;
		float coefficientR45[4];
		float coefficientL45[4];
		float sensor_gain_slant45_p, sensor_gain_slant45_d;
		if (straight.velocity > 1000) {
 8005994:	4b58      	ldr	r3, [pc, #352]	; (8005af8 <calWallConrol+0x10f0>)
 8005996:	edd3 7a00 	vldr	s15, [r3]
 800599a:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8005afc <calWallConrol+0x10f4>
 800599e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059a6:	dd04      	ble.n	80059b2 <calWallConrol+0xfaa>
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * 1000;
 80059a8:	4b55      	ldr	r3, [pc, #340]	; (8005b00 <calWallConrol+0x10f8>)
 80059aa:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * 1000;
 80059ac:	4b55      	ldr	r3, [pc, #340]	; (8005b04 <calWallConrol+0x10fc>)
 80059ae:	673b      	str	r3, [r7, #112]	; 0x70
 80059b0:	e023      	b.n	80059fa <calWallConrol+0xff2>
		} else {
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * straight.velocity;
 80059b2:	4b51      	ldr	r3, [pc, #324]	; (8005af8 <calWallConrol+0x10f0>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fa fdee 	bl	8000598 <__aeabi_f2d>
 80059bc:	a346      	add	r3, pc, #280	; (adr r3, 8005ad8 <calWallConrol+0x10d0>)
 80059be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c2:	f7fa fe41 	bl	8000648 <__aeabi_dmul>
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	4610      	mov	r0, r2
 80059cc:	4619      	mov	r1, r3
 80059ce:	f7fb f913 	bl	8000bf8 <__aeabi_d2f>
 80059d2:	4603      	mov	r3, r0
 80059d4:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * straight.velocity;
 80059d6:	4b48      	ldr	r3, [pc, #288]	; (8005af8 <calWallConrol+0x10f0>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fa fddc 	bl	8000598 <__aeabi_f2d>
 80059e0:	a33f      	add	r3, pc, #252	; (adr r3, 8005ae0 <calWallConrol+0x10d8>)
 80059e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e6:	f7fa fe2f 	bl	8000648 <__aeabi_dmul>
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	4610      	mov	r0, r2
 80059f0:	4619      	mov	r1, r3
 80059f2:	f7fb f901 	bl	8000bf8 <__aeabi_d2f>
 80059f6:	4603      	mov	r3, r0
 80059f8:	673b      	str	r3, [r7, #112]	; 0x70
		}

		if (NoWallDisplacementR45slant > AREAMIN45_R0
 80059fa:	4b43      	ldr	r3, [pc, #268]	; (8005b08 <calWallConrol+0x1100>)
 80059fc:	edd3 7a00 	vldr	s15, [r3]
 8005a00:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005a04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a0c:	dd12      	ble.n	8005a34 <calWallConrol+0x102c>
				&& NoWallDisplacementR45slant <= AREAMAX45_R0) {
 8005a0e:	4b3e      	ldr	r3, [pc, #248]	; (8005b08 <calWallConrol+0x1100>)
 8005a10:	edd3 7a00 	vldr	s15, [r3]
 8005a14:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8005b0c <calWallConrol+0x1104>
 8005a18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a20:	d808      	bhi.n	8005a34 <calWallConrol+0x102c>
			coefficientR45[0] = COEFFICIENT45_R0_0;
 8005a22:	4b3b      	ldr	r3, [pc, #236]	; (8005b10 <calWallConrol+0x1108>)
 8005a24:	62bb      	str	r3, [r7, #40]	; 0x28
			coefficientR45[1] = COEFFICIENT45_R0_1;
 8005a26:	4b3b      	ldr	r3, [pc, #236]	; (8005b14 <calWallConrol+0x110c>)
 8005a28:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = COEFFICIENT45_R0_2;
 8005a2a:	4b3b      	ldr	r3, [pc, #236]	; (8005b18 <calWallConrol+0x1110>)
 8005a2c:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = COEFFICIENT45_R0_3;
 8005a2e:	4b3b      	ldr	r3, [pc, #236]	; (8005b1c <calWallConrol+0x1114>)
 8005a30:	637b      	str	r3, [r7, #52]	; 0x34
 8005a32:	e025      	b.n	8005a80 <calWallConrol+0x1078>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_RIGHT][0]
 8005a34:	4b2d      	ldr	r3, [pc, #180]	; (8005aec <calWallConrol+0x10e4>)
 8005a36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a3a:	2bdc      	cmp	r3, #220	; 0xdc
 8005a3c:	dd07      	ble.n	8005a4e <calWallConrol+0x1046>
					> CONTROLWALL_THRESHOLD_SLANT45_R) {
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8005a3e:	4b38      	ldr	r3, [pc, #224]	; (8005b20 <calWallConrol+0x1118>)
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	f043 0302 	orr.w	r3, r3, #2
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	4b35      	ldr	r3, [pc, #212]	; (8005b20 <calWallConrol+0x1118>)
 8005a4a:	701a      	strb	r2, [r3, #0]
 8005a4c:	e006      	b.n	8005a5c <calWallConrol+0x1054>
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8005a4e:	4b34      	ldr	r3, [pc, #208]	; (8005b20 <calWallConrol+0x1118>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	f023 0302 	bic.w	r3, r3, #2
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	4b31      	ldr	r3, [pc, #196]	; (8005b20 <calWallConrol+0x1118>)
 8005a5a:	701a      	strb	r2, [r3, #0]
			}
			coefficientR45[0] = g_sensor[SENSOR_FRONT_RIGHT][0];
 8005a5c:	4b23      	ldr	r3, [pc, #140]	; (8005aec <calWallConrol+0x10e4>)
 8005a5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a62:	ee07 3a90 	vmov	s15, r3
 8005a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a6a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			coefficientR45[1] = 0;
 8005a6e:	f04f 0300 	mov.w	r3, #0
 8005a72:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = 0;
 8005a74:	f04f 0300 	mov.w	r3, #0
 8005a78:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = 0;
 8005a7a:	f04f 0300 	mov.w	r3, #0
 8005a7e:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if (NoWallDisplacementL45slant > AREAMIN45_L0
 8005a80:	4b28      	ldr	r3, [pc, #160]	; (8005b24 <calWallConrol+0x111c>)
 8005a82:	edd3 7a00 	vldr	s15, [r3]
 8005a86:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005a8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a92:	dd12      	ble.n	8005aba <calWallConrol+0x10b2>
				&& NoWallDisplacementL45slant <= AREAMAX45_L0) {
 8005a94:	4b23      	ldr	r3, [pc, #140]	; (8005b24 <calWallConrol+0x111c>)
 8005a96:	edd3 7a00 	vldr	s15, [r3]
 8005a9a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005b0c <calWallConrol+0x1104>
 8005a9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa6:	d808      	bhi.n	8005aba <calWallConrol+0x10b2>
			coefficientL45[0] = COEFFICIENT45_L0_0;
 8005aa8:	4b1f      	ldr	r3, [pc, #124]	; (8005b28 <calWallConrol+0x1120>)
 8005aaa:	61bb      	str	r3, [r7, #24]
			coefficientL45[1] = COEFFICIENT45_L0_1;
 8005aac:	4b1f      	ldr	r3, [pc, #124]	; (8005b2c <calWallConrol+0x1124>)
 8005aae:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = COEFFICIENT45_L0_2;
 8005ab0:	4b1f      	ldr	r3, [pc, #124]	; (8005b30 <calWallConrol+0x1128>)
 8005ab2:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = COEFFICIENT45_L0_3;
 8005ab4:	4b1f      	ldr	r3, [pc, #124]	; (8005b34 <calWallConrol+0x112c>)
 8005ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab8:	e056      	b.n	8005b68 <calWallConrol+0x1160>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L) {
 8005aba:	4b0c      	ldr	r3, [pc, #48]	; (8005aec <calWallConrol+0x10e4>)
 8005abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005abe:	2bdc      	cmp	r3, #220	; 0xdc
 8005ac0:	dd3a      	ble.n	8005b38 <calWallConrol+0x1130>
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8005ac2:	4b17      	ldr	r3, [pc, #92]	; (8005b20 <calWallConrol+0x1118>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	f043 0301 	orr.w	r3, r3, #1
 8005aca:	b2da      	uxtb	r2, r3
 8005acc:	4b14      	ldr	r3, [pc, #80]	; (8005b20 <calWallConrol+0x1118>)
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	e039      	b.n	8005b46 <calWallConrol+0x113e>
 8005ad2:	bf00      	nop
 8005ad4:	f3af 8000 	nop.w
 8005ad8:	33333333 	.word	0x33333333
 8005adc:	3fe33333 	.word	0x3fe33333
 8005ae0:	eb851eb8 	.word	0xeb851eb8
 8005ae4:	bfaeb851 	.word	0xbfaeb851
 8005ae8:	200005ac 	.word	0x200005ac
 8005aec:	200002b8 	.word	0x200002b8
 8005af0:	200005b0 	.word	0x200005b0
 8005af4:	20000578 	.word	0x20000578
 8005af8:	200004d8 	.word	0x200004d8
 8005afc:	447a0000 	.word	0x447a0000
 8005b00:	44160000 	.word	0x44160000
 8005b04:	c2700000 	.word	0xc2700000
 8005b08:	200005dc 	.word	0x200005dc
 8005b0c:	42a00000 	.word	0x42a00000
 8005b10:	43e7e73c 	.word	0x43e7e73c
 8005b14:	c0f9d45b 	.word	0xc0f9d45b
 8005b18:	3e043787 	.word	0x3e043787
 8005b1c:	b83cbe62 	.word	0xb83cbe62
 8005b20:	20000594 	.word	0x20000594
 8005b24:	200005e0 	.word	0x200005e0
 8005b28:	440fa6b0 	.word	0x440fa6b0
 8005b2c:	c1892199 	.word	0xc1892199
 8005b30:	3ea1604b 	.word	0x3ea1604b
 8005b34:	baa12c1b 	.word	0xbaa12c1b
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8005b38:	4bb5      	ldr	r3, [pc, #724]	; (8005e10 <calWallConrol+0x1408>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	f023 0301 	bic.w	r3, r3, #1
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	4bb3      	ldr	r3, [pc, #716]	; (8005e10 <calWallConrol+0x1408>)
 8005b44:	701a      	strb	r2, [r3, #0]
			}
			coefficientL45[0] = g_sensor[SENSOR_FRONT_LEFT][0];
 8005b46:	4bb3      	ldr	r3, [pc, #716]	; (8005e14 <calWallConrol+0x140c>)
 8005b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b4a:	ee07 3a90 	vmov	s15, r3
 8005b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b52:	edc7 7a06 	vstr	s15, [r7, #24]
			coefficientL45[1] = 0;
 8005b56:	f04f 0300 	mov.w	r3, #0
 8005b5a:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = 0;
 8005b5c:	f04f 0300 	mov.w	r3, #0
 8005b60:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = 0;
 8005b62:	f04f 0300 	mov.w	r3, #0
 8005b66:	627b      	str	r3, [r7, #36]	; 0x24
		}
		CenterSlantR45 = coefficientR45[0]
 8005b68:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
				+ coefficientR45[1] * NoWallDisplacementR45slant
 8005b6c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8005b70:	4ba9      	ldr	r3, [pc, #676]	; (8005e18 <calWallConrol+0x1410>)
 8005b72:	edd3 7a00 	vldr	s15, [r3]
 8005b76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b7a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8005b7e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8005b82:	4ba5      	ldr	r3, [pc, #660]	; (8005e18 <calWallConrol+0x1410>)
 8005b84:	edd3 7a00 	vldr	s15, [r3]
 8005b88:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005b8c:	4ba2      	ldr	r3, [pc, #648]	; (8005e18 <calWallConrol+0x1410>)
 8005b8e:	edd3 7a00 	vldr	s15, [r3]
 8005b92:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8005b96:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[3] * NoWallDisplacementR45slant
 8005b9a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005b9e:	4b9e      	ldr	r3, [pc, #632]	; (8005e18 <calWallConrol+0x1410>)
 8005ba0:	edd3 7a00 	vldr	s15, [r3]
 8005ba4:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005ba8:	4b9b      	ldr	r3, [pc, #620]	; (8005e18 <calWallConrol+0x1410>)
 8005baa:	edd3 7a00 	vldr	s15, [r3]
 8005bae:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 8005bb2:	4b99      	ldr	r3, [pc, #612]	; (8005e18 <calWallConrol+0x1410>)
 8005bb4:	edd3 7a00 	vldr	s15, [r3]
 8005bb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR45 = coefficientR45[0]
 8005bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bc0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		CenterSlantL45 = coefficientL45[0]
 8005bc4:	ed97 7a06 	vldr	s14, [r7, #24]
				+ coefficientL45[1] * NoWallDisplacementL45slant
 8005bc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bcc:	4b93      	ldr	r3, [pc, #588]	; (8005e1c <calWallConrol+0x1414>)
 8005bce:	edd3 7a00 	vldr	s15, [r3]
 8005bd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bd6:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 8005bda:	edd7 6a08 	vldr	s13, [r7, #32]
 8005bde:	4b8f      	ldr	r3, [pc, #572]	; (8005e1c <calWallConrol+0x1414>)
 8005be0:	edd3 7a00 	vldr	s15, [r3]
 8005be4:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005be8:	4b8c      	ldr	r3, [pc, #560]	; (8005e1c <calWallConrol+0x1414>)
 8005bea:	edd3 7a00 	vldr	s15, [r3]
 8005bee:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 8005bf2:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[3] * NoWallDisplacementL45slant
 8005bf6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005bfa:	4b88      	ldr	r3, [pc, #544]	; (8005e1c <calWallConrol+0x1414>)
 8005bfc:	edd3 7a00 	vldr	s15, [r3]
 8005c00:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005c04:	4b85      	ldr	r3, [pc, #532]	; (8005e1c <calWallConrol+0x1414>)
 8005c06:	edd3 7a00 	vldr	s15, [r3]
 8005c0a:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 8005c0e:	4b83      	ldr	r3, [pc, #524]	; (8005e1c <calWallConrol+0x1414>)
 8005c10:	edd3 7a00 	vldr	s15, [r3]
 8005c14:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL45 = coefficientL45[0]
 8005c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c1c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

		for (int j = 11; j >= 1; j--) {
 8005c20:	230b      	movs	r3, #11
 8005c22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c24:	e018      	b.n	8005c58 <calWallConrol+0x1250>
			g_CenterSlantR45[j] = g_CenterSlantR45[j - 1];
 8005c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	4a7d      	ldr	r2, [pc, #500]	; (8005e20 <calWallConrol+0x1418>)
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	497b      	ldr	r1, [pc, #492]	; (8005e20 <calWallConrol+0x1418>)
 8005c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	440b      	add	r3, r1
 8005c3a:	601a      	str	r2, [r3, #0]
			g_CenterSlantL45[j] = g_CenterSlantL45[j - 1];
 8005c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	4a78      	ldr	r2, [pc, #480]	; (8005e24 <calWallConrol+0x141c>)
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	4976      	ldr	r1, [pc, #472]	; (8005e24 <calWallConrol+0x141c>)
 8005c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	440b      	add	r3, r1
 8005c50:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 8005c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c54:	3b01      	subs	r3, #1
 8005c56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	dce3      	bgt.n	8005c26 <calWallConrol+0x121e>
		}
		g_CenterSlantR45[0] = CenterSlantR45;
 8005c5e:	4a70      	ldr	r2, [pc, #448]	; (8005e20 <calWallConrol+0x1418>)
 8005c60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c62:	6013      	str	r3, [r2, #0]
		g_CenterSlantL45[0] = CenterSlantL45;
 8005c64:	4a6f      	ldr	r2, [pc, #444]	; (8005e24 <calWallConrol+0x141c>)
 8005c66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c68:	6013      	str	r3, [r2, #0]

		g_CenterSlantR45_diff = g_CenterSlantR45[0] - g_CenterSlantR45[11];
 8005c6a:	4b6d      	ldr	r3, [pc, #436]	; (8005e20 <calWallConrol+0x1418>)
 8005c6c:	ed93 7a00 	vldr	s14, [r3]
 8005c70:	4b6b      	ldr	r3, [pc, #428]	; (8005e20 <calWallConrol+0x1418>)
 8005c72:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005c76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c7a:	4b6b      	ldr	r3, [pc, #428]	; (8005e28 <calWallConrol+0x1420>)
 8005c7c:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL45_diff = g_CenterSlantL45[0] - g_CenterSlantL45[11];
 8005c80:	4b68      	ldr	r3, [pc, #416]	; (8005e24 <calWallConrol+0x141c>)
 8005c82:	ed93 7a00 	vldr	s14, [r3]
 8005c86:	4b67      	ldr	r3, [pc, #412]	; (8005e24 <calWallConrol+0x141c>)
 8005c88:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005c8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c90:	4b66      	ldr	r3, [pc, #408]	; (8005e2c <calWallConrol+0x1424>)
 8005c92:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_FRONT_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT45_R
 8005c96:	4b5f      	ldr	r3, [pc, #380]	; (8005e14 <calWallConrol+0x140c>)
 8005c98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c9c:	2bdc      	cmp	r3, #220	; 0xdc
 8005c9e:	dd1a      	ble.n	8005cd6 <calWallConrol+0x12ce>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 8005ca0:	4b63      	ldr	r3, [pc, #396]	; (8005e30 <calWallConrol+0x1428>)
 8005ca2:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 8005ca4:	ee07 3a90 	vmov	s15, r3
 8005ca8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cac:	4b5e      	ldr	r3, [pc, #376]	; (8005e28 <calWallConrol+0x1420>)
 8005cae:	edd3 7a00 	vldr	s15, [r3]
 8005cb2:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 8005cb6:	eef0 7ae7 	vabs.f32	s15, s15
 8005cba:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8005e34 <calWallConrol+0x142c>
 8005cbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cc6:	d506      	bpl.n	8005cd6 <calWallConrol+0x12ce>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8005cc8:	4b51      	ldr	r3, [pc, #324]	; (8005e10 <calWallConrol+0x1408>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	f043 0302 	orr.w	r3, r3, #2
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	4b4f      	ldr	r3, [pc, #316]	; (8005e10 <calWallConrol+0x1408>)
 8005cd4:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L
 8005cd6:	4b4f      	ldr	r3, [pc, #316]	; (8005e14 <calWallConrol+0x140c>)
 8005cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cda:	2bdc      	cmp	r3, #220	; 0xdc
 8005cdc:	dd1a      	ble.n	8005d14 <calWallConrol+0x130c>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 8005cde:	4b54      	ldr	r3, [pc, #336]	; (8005e30 <calWallConrol+0x1428>)
 8005ce0:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 8005ce2:	ee07 3a90 	vmov	s15, r3
 8005ce6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cea:	4b50      	ldr	r3, [pc, #320]	; (8005e2c <calWallConrol+0x1424>)
 8005cec:	edd3 7a00 	vldr	s15, [r3]
 8005cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 8005cf4:	eef0 7ae7 	vabs.f32	s15, s15
 8005cf8:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8005e34 <calWallConrol+0x142c>
 8005cfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d04:	d506      	bpl.n	8005d14 <calWallConrol+0x130c>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8005d06:	4b42      	ldr	r3, [pc, #264]	; (8005e10 <calWallConrol+0x1408>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	f043 0301 	orr.w	r3, r3, #1
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	4b3f      	ldr	r3, [pc, #252]	; (8005e10 <calWallConrol+0x1408>)
 8005d12:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT45_R
 8005d14:	4b3f      	ldr	r3, [pc, #252]	; (8005e14 <calWallConrol+0x140c>)
 8005d16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d1a:	2bdb      	cmp	r3, #219	; 0xdb
 8005d1c:	dd13      	ble.n	8005d46 <calWallConrol+0x133e>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 8005d1e:	4b44      	ldr	r3, [pc, #272]	; (8005e30 <calWallConrol+0x1428>)
 8005d20:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 8005d22:	ee07 3a90 	vmov	s15, r3
 8005d26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d2a:	4b3f      	ldr	r3, [pc, #252]	; (8005e28 <calWallConrol+0x1420>)
 8005d2c:	edd3 7a00 	vldr	s15, [r3]
 8005d30:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 8005d34:	eef0 7ae7 	vabs.f32	s15, s15
 8005d38:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8005e34 <calWallConrol+0x142c>
 8005d3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d44:	dd06      	ble.n	8005d54 <calWallConrol+0x134c>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8005d46:	4b32      	ldr	r3, [pc, #200]	; (8005e10 <calWallConrol+0x1408>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	f023 0302 	bic.w	r3, r3, #2
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	4b2f      	ldr	r3, [pc, #188]	; (8005e10 <calWallConrol+0x1408>)
 8005d52:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT45_L
 8005d54:	4b2f      	ldr	r3, [pc, #188]	; (8005e14 <calWallConrol+0x140c>)
 8005d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d58:	2bdb      	cmp	r3, #219	; 0xdb
 8005d5a:	dd13      	ble.n	8005d84 <calWallConrol+0x137c>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 8005d5c:	4b34      	ldr	r3, [pc, #208]	; (8005e30 <calWallConrol+0x1428>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 8005d60:	ee07 3a90 	vmov	s15, r3
 8005d64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d68:	4b30      	ldr	r3, [pc, #192]	; (8005e2c <calWallConrol+0x1424>)
 8005d6a:	edd3 7a00 	vldr	s15, [r3]
 8005d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 8005d72:	eef0 7ae7 	vabs.f32	s15, s15
 8005d76:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005e34 <calWallConrol+0x142c>
 8005d7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d82:	dd06      	ble.n	8005d92 <calWallConrol+0x138a>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8005d84:	4b22      	ldr	r3, [pc, #136]	; (8005e10 <calWallConrol+0x1408>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	f023 0301 	bic.w	r3, r3, #1
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	4b20      	ldr	r3, [pc, #128]	; (8005e10 <calWallConrol+0x1408>)
 8005d90:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus45) {
 8005d92:	4b1f      	ldr	r3, [pc, #124]	; (8005e10 <calWallConrol+0x1408>)
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	f200 8155 	bhi.w	8006046 <calWallConrol+0x163e>
 8005d9c:	a201      	add	r2, pc, #4	; (adr r2, 8005da4 <calWallConrol+0x139c>)
 8005d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da2:	bf00      	nop
 8005da4:	08005db5 	.word	0x08005db5
 8005da8:	08005e49 	.word	0x08005e49
 8005dac:	08005ee9 	.word	0x08005ee9
 8005db0:	08005f87 	.word	0x08005f87
		case 0:			//両壁なし
			PID_wall += 0;
 8005db4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005db8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005e38 <calWallConrol+0x1430>
 8005dbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dc0:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_3(0);
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	f000 ffbf 	bl	8006d48 <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 8005dca:	2000      	movs	r0, #0
 8005dcc:	f000 ffce 	bl	8006d6c <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 8005dd0:	4b10      	ldr	r3, [pc, #64]	; (8005e14 <calWallConrol+0x140c>)
 8005dd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005dd6:	ee07 3a90 	vmov	s15, r3
 8005dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dde:	4b17      	ldr	r3, [pc, #92]	; (8005e3c <calWallConrol+0x1434>)
 8005de0:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 8005de4:	4b0b      	ldr	r3, [pc, #44]	; (8005e14 <calWallConrol+0x140c>)
 8005de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de8:	ee07 3a90 	vmov	s15, r3
 8005dec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005df0:	4b13      	ldr	r3, [pc, #76]	; (8005e40 <calWallConrol+0x1438>)
 8005df2:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = 0;
 8005df6:	4b13      	ldr	r3, [pc, #76]	; (8005e44 <calWallConrol+0x143c>)
 8005df8:	f04f 0200 	mov.w	r2, #0
 8005dfc:	601a      	str	r2, [r3, #0]
			wall_slant45.delta_error = 0;
 8005dfe:	4b11      	ldr	r3, [pc, #68]	; (8005e44 <calWallConrol+0x143c>)
 8005e00:	f04f 0200 	mov.w	r2, #0
 8005e04:	609a      	str	r2, [r3, #8]
			wall_slant45.old_error = 0;
 8005e06:	4b0f      	ldr	r3, [pc, #60]	; (8005e44 <calWallConrol+0x143c>)
 8005e08:	f04f 0200 	mov.w	r2, #0
 8005e0c:	605a      	str	r2, [r3, #4]
			break;
 8005e0e:	e11a      	b.n	8006046 <calWallConrol+0x163e>
 8005e10:	20000594 	.word	0x20000594
 8005e14:	200002b8 	.word	0x200002b8
 8005e18:	200005dc 	.word	0x200005dc
 8005e1c:	200005e0 	.word	0x200005e0
 8005e20:	20000668 	.word	0x20000668
 8005e24:	20000698 	.word	0x20000698
 8005e28:	200006d0 	.word	0x200006d0
 8005e2c:	200006d4 	.word	0x200006d4
 8005e30:	20000448 	.word	0x20000448
 8005e34:	42a00000 	.word	0x42a00000
 8005e38:	00000000 	.word	0x00000000
 8005e3c:	200005a4 	.word	0x200005a4
 8005e40:	200005a8 	.word	0x200005a8
 8005e44:	20000584 	.word	0x20000584
		case 1:			//左壁のみ
			pl_yellow_LED_3(0);
 8005e48:	2000      	movs	r0, #0
 8005e4a:	f000 ff7d 	bl	8006d48 <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 8005e4e:	2001      	movs	r0, #1
 8005e50:	f000 ff8c 	bl	8006d6c <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 8005e54:	4b87      	ldr	r3, [pc, #540]	; (8006074 <calWallConrol+0x166c>)
 8005e56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e5a:	ee07 3a90 	vmov	s15, r3
 8005e5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e62:	4b85      	ldr	r3, [pc, #532]	; (8006078 <calWallConrol+0x1670>)
 8005e64:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = CenterSlantL45;
 8005e68:	4a84      	ldr	r2, [pc, #528]	; (800607c <calWallConrol+0x1674>)
 8005e6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e6c:	6013      	str	r3, [r2, #0]
			wall_slant45.error =
					(-(float) (g_sensor[SENSOR_FRONT_LEFT][0] - CenterSlantL45)
 8005e6e:	4b81      	ldr	r3, [pc, #516]	; (8006074 <calWallConrol+0x166c>)
 8005e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e72:	ee07 3a90 	vmov	s15, r3
 8005e76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e7a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005e7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e82:	eef1 6a67 	vneg.f32	s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_LEFT][0]));
 8005e86:	4b7b      	ldr	r3, [pc, #492]	; (8006074 <calWallConrol+0x166c>)
 8005e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e8a:	ee07 3a90 	vmov	s15, r3
 8005e8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error =
 8005e96:	4b7a      	ldr	r3, [pc, #488]	; (8006080 <calWallConrol+0x1678>)
 8005e98:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8005e9c:	4b78      	ldr	r3, [pc, #480]	; (8006080 <calWallConrol+0x1678>)
 8005e9e:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8005ea2:	4b77      	ldr	r3, [pc, #476]	; (8006080 <calWallConrol+0x1678>)
 8005ea4:	edd3 7a01 	vldr	s15, [r3, #4]
 8005ea8:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8005eac:	4b74      	ldr	r3, [pc, #464]	; (8006080 <calWallConrol+0x1678>)
 8005eae:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8005eb2:	4b73      	ldr	r3, [pc, #460]	; (8006080 <calWallConrol+0x1678>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a72      	ldr	r2, [pc, #456]	; (8006080 <calWallConrol+0x1678>)
 8005eb8:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8005eba:	4b71      	ldr	r3, [pc, #452]	; (8006080 <calWallConrol+0x1678>)
 8005ebc:	ed93 7a00 	vldr	s14, [r3]
 8005ec0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005ec4:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8005ec8:	4b6d      	ldr	r3, [pc, #436]	; (8006080 <calWallConrol+0x1678>)
 8005eca:	edd3 6a02 	vldr	s13, [r3, #8]
 8005ece:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005ed2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8005eda:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005ede:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ee2:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005ee6:	e0ae      	b.n	8006046 <calWallConrol+0x163e>
		case 2:			//右壁のみ
			pl_yellow_LED_3(1);
 8005ee8:	2001      	movs	r0, #1
 8005eea:	f000 ff2d 	bl	8006d48 <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 8005eee:	2000      	movs	r0, #0
 8005ef0:	f000 ff3c 	bl	8006d6c <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 8005ef4:	4a60      	ldr	r2, [pc, #384]	; (8006078 <calWallConrol+0x1670>)
 8005ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ef8:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 8005efa:	4b5e      	ldr	r3, [pc, #376]	; (8006074 <calWallConrol+0x166c>)
 8005efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005efe:	ee07 3a90 	vmov	s15, r3
 8005f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f06:	4b5d      	ldr	r3, [pc, #372]	; (800607c <calWallConrol+0x1674>)
 8005f08:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 8005f0c:	4b59      	ldr	r3, [pc, #356]	; (8006074 <calWallConrol+0x166c>)
 8005f0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f12:	ee07 3a90 	vmov	s15, r3
 8005f16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f1a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005f1e:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR45)
					/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 8005f22:	4b54      	ldr	r3, [pc, #336]	; (8006074 <calWallConrol+0x166c>)
 8005f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f28:	ee07 3a90 	vmov	s15, r3
 8005f2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 8005f34:	4b52      	ldr	r3, [pc, #328]	; (8006080 <calWallConrol+0x1678>)
 8005f36:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8005f3a:	4b51      	ldr	r3, [pc, #324]	; (8006080 <calWallConrol+0x1678>)
 8005f3c:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8005f40:	4b4f      	ldr	r3, [pc, #316]	; (8006080 <calWallConrol+0x1678>)
 8005f42:	edd3 7a01 	vldr	s15, [r3, #4]
 8005f46:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8005f4a:	4b4d      	ldr	r3, [pc, #308]	; (8006080 <calWallConrol+0x1678>)
 8005f4c:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8005f50:	4b4b      	ldr	r3, [pc, #300]	; (8006080 <calWallConrol+0x1678>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a4a      	ldr	r2, [pc, #296]	; (8006080 <calWallConrol+0x1678>)
 8005f56:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8005f58:	4b49      	ldr	r3, [pc, #292]	; (8006080 <calWallConrol+0x1678>)
 8005f5a:	ed93 7a00 	vldr	s14, [r3]
 8005f5e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005f62:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8005f66:	4b46      	ldr	r3, [pc, #280]	; (8006080 <calWallConrol+0x1678>)
 8005f68:	edd3 6a02 	vldr	s13, [r3, #8]
 8005f6c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005f70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f74:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8005f78:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f80:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005f84:	e05f      	b.n	8006046 <calWallConrol+0x163e>
		case 3:			//両壁あり
			pl_yellow_LED_3(1);
 8005f86:	2001      	movs	r0, #1
 8005f88:	f000 fede 	bl	8006d48 <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 8005f8c:	2001      	movs	r0, #1
 8005f8e:	f000 feed 	bl	8006d6c <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 8005f92:	4a39      	ldr	r2, [pc, #228]	; (8006078 <calWallConrol+0x1670>)
 8005f94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f96:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = CenterSlantL45;
 8005f98:	4a38      	ldr	r2, [pc, #224]	; (800607c <calWallConrol+0x1674>)
 8005f9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f9c:	6013      	str	r3, [r2, #0]
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 8005f9e:	4b35      	ldr	r3, [pc, #212]	; (8006074 <calWallConrol+0x166c>)
 8005fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa2:	ee07 3a90 	vmov	s15, r3
 8005fa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005faa:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005fae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fb2:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL45) / (float) (g_sensor[SENSOR_FRONT_LEFT][0])
 8005fb6:	4b2f      	ldr	r3, [pc, #188]	; (8006074 <calWallConrol+0x166c>)
 8005fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 8005fc6:	4b2b      	ldr	r3, [pc, #172]	; (8006074 <calWallConrol+0x166c>)
 8005fc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fcc:	ee07 3a90 	vmov	s15, r3
 8005fd0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005fd4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005fd8:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 8005fdc:	4b25      	ldr	r3, [pc, #148]	; (8006074 <calWallConrol+0x166c>)
 8005fde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fe2:	ee07 3a90 	vmov	s15, r3
 8005fe6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005fea:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 8005fee:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 8005ff2:	4b23      	ldr	r3, [pc, #140]	; (8006080 <calWallConrol+0x1678>)
 8005ff4:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8005ff8:	4b21      	ldr	r3, [pc, #132]	; (8006080 <calWallConrol+0x1678>)
 8005ffa:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8005ffe:	4b20      	ldr	r3, [pc, #128]	; (8006080 <calWallConrol+0x1678>)
 8006000:	edd3 7a01 	vldr	s15, [r3, #4]
 8006004:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8006008:	4b1d      	ldr	r3, [pc, #116]	; (8006080 <calWallConrol+0x1678>)
 800600a:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 800600e:	4b1c      	ldr	r3, [pc, #112]	; (8006080 <calWallConrol+0x1678>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a1b      	ldr	r2, [pc, #108]	; (8006080 <calWallConrol+0x1678>)
 8006014:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006016:	4b1a      	ldr	r3, [pc, #104]	; (8006080 <calWallConrol+0x1678>)
 8006018:	ed93 7a00 	vldr	s14, [r3]
 800601c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006020:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8006024:	4b16      	ldr	r3, [pc, #88]	; (8006080 <calWallConrol+0x1678>)
 8006026:	edd3 6a02 	vldr	s13, [r3, #8]
 800602a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800602e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006032:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006036:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800603a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800603e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8006042:	e000      	b.n	8006046 <calWallConrol+0x163e>
			break;
 8006044:	bf00      	nop
		}

	}
	PID_w = PID_wall / MAXMOTOR * g_V_battery_mean;
 8006046:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800604a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8006084 <calWallConrol+0x167c>
 800604e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006052:	4b0d      	ldr	r3, [pc, #52]	; (8006088 <calWallConrol+0x1680>)
 8006054:	edd3 7a00 	vldr	s15, [r3]
 8006058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800605c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	return PID_w;
 8006060:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006062:	ee07 3a90 	vmov	s15, r3
}
 8006066:	eeb0 0a67 	vmov.f32	s0, s15
 800606a:	37a8      	adds	r7, #168	; 0xa8
 800606c:	46bd      	mov	sp, r7
 800606e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006072:	bf00      	nop
 8006074:	200002b8 	.word	0x200002b8
 8006078:	200005a4 	.word	0x200005a4
 800607c:	200005a8 	.word	0x200005a8
 8006080:	20000584 	.word	0x20000584
 8006084:	44d1e000 	.word	0x44d1e000
 8006088:	200004d4 	.word	0x200004d4
 800608c:	00000000 	.word	0x00000000

08006090 <interrupt_WallCut>:
			*PID_frontwall_r = 0;
		}
	}
}

void interrupt_WallCut(void) {
 8006090:	b5b0      	push	{r4, r5, r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
	int del_time=ceil(3.5/INTERRUPT_TIME/fabs(straight.velocity));
 8006096:	4ba0      	ldr	r3, [pc, #640]	; (8006318 <interrupt_WallCut+0x288>)
 8006098:	edd3 7a00 	vldr	s15, [r3]
 800609c:	eef0 7ae7 	vabs.f32	s15, s15
 80060a0:	ee17 0a90 	vmov	r0, s15
 80060a4:	f7fa fa78 	bl	8000598 <__aeabi_f2d>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	a196      	add	r1, pc, #600	; (adr r1, 8006308 <interrupt_WallCut+0x278>)
 80060ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060b2:	f7fa fbf3 	bl	800089c <__aeabi_ddiv>
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	ec43 2b17 	vmov	d7, r2, r3
 80060be:	eeb0 0a47 	vmov.f32	s0, s14
 80060c2:	eef0 0a67 	vmov.f32	s1, s15
 80060c6:	f01c ff23 	bl	8022f10 <ceil>
 80060ca:	ec53 2b10 	vmov	r2, r3, d0
 80060ce:	4610      	mov	r0, r2
 80060d0:	4619      	mov	r1, r3
 80060d2:	f7fa fd69 	bl	8000ba8 <__aeabi_d2iz>
 80060d6:	4603      	mov	r3, r0
 80060d8:	617b      	str	r3, [r7, #20]
	if(del_time>=11){del_time=11;}
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b0a      	cmp	r3, #10
 80060de:	dd01      	ble.n	80060e4 <interrupt_WallCut+0x54>
 80060e0:	230b      	movs	r3, #11
 80060e2:	617b      	str	r3, [r7, #20]
	for (int j = 0; j <= 4; j++) {
 80060e4:	2300      	movs	r3, #0
 80060e6:	613b      	str	r3, [r7, #16]
 80060e8:	e019      	b.n	800611e <interrupt_WallCut+0x8e>
		g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][del_time];
 80060ea:	498c      	ldr	r1, [pc, #560]	; (800631c <interrupt_WallCut+0x28c>)
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	4613      	mov	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	440b      	add	r3, r1
 80060f8:	6819      	ldr	r1, [r3, #0]
 80060fa:	4888      	ldr	r0, [pc, #544]	; (800631c <interrupt_WallCut+0x28c>)
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	4613      	mov	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	4413      	add	r3, r2
 800610a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800610e:	1aca      	subs	r2, r1, r3
 8006110:	4983      	ldr	r1, [pc, #524]	; (8006320 <interrupt_WallCut+0x290>)
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int j = 0; j <= 4; j++) {
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	3301      	adds	r3, #1
 800611c:	613b      	str	r3, [r7, #16]
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	2b04      	cmp	r3, #4
 8006122:	dde2      	ble.n	80060ea <interrupt_WallCut+0x5a>
	}
//	if (maze_mode == 1 || (modeacc != 0 && modeacc != 3)) {}

	if (g_wallCut_mode == 1) {
 8006124:	4b7f      	ldr	r3, [pc, #508]	; (8006324 <interrupt_WallCut+0x294>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b01      	cmp	r3, #1
 800612a:	f040 8556 	bne.w	8006bda <interrupt_WallCut+0xb4a>
// 壁壁の検知判定()
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_90) {
 800612e:	4b7b      	ldr	r3, [pc, #492]	; (800631c <interrupt_WallCut+0x28c>)
 8006130:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006134:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006138:	dd03      	ble.n	8006142 <interrupt_WallCut+0xb2>
			front_wall_break_90 = 1;
 800613a:	4b7b      	ldr	r3, [pc, #492]	; (8006328 <interrupt_WallCut+0x298>)
 800613c:	2201      	movs	r2, #1
 800613e:	701a      	strb	r2, [r3, #0]
 8006140:	e002      	b.n	8006148 <interrupt_WallCut+0xb8>
		} else {
			front_wall_break_90 = 0;
 8006142:	4b79      	ldr	r3, [pc, #484]	; (8006328 <interrupt_WallCut+0x298>)
 8006144:	2200      	movs	r2, #0
 8006146:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45) {
 8006148:	4b74      	ldr	r3, [pc, #464]	; (800631c <interrupt_WallCut+0x28c>)
 800614a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800614e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006152:	dd03      	ble.n	800615c <interrupt_WallCut+0xcc>
			front_wall_break_45 = 1;
 8006154:	4b75      	ldr	r3, [pc, #468]	; (800632c <interrupt_WallCut+0x29c>)
 8006156:	2201      	movs	r2, #1
 8006158:	701a      	strb	r2, [r3, #0]
 800615a:	e002      	b.n	8006162 <interrupt_WallCut+0xd2>
		} else {
			front_wall_break_45 = 0;
 800615c:	4b73      	ldr	r3, [pc, #460]	; (800632c <interrupt_WallCut+0x29c>)
 800615e:	2200      	movs	r2, #0
 8006160:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45SLANT) {
 8006162:	4b6e      	ldr	r3, [pc, #440]	; (800631c <interrupt_WallCut+0x28c>)
 8006164:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006168:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800616c:	dd03      	ble.n	8006176 <interrupt_WallCut+0xe6>
			front_wall_break_45slant = 1;
 800616e:	4b70      	ldr	r3, [pc, #448]	; (8006330 <interrupt_WallCut+0x2a0>)
 8006170:	2201      	movs	r2, #1
 8006172:	701a      	strb	r2, [r3, #0]
 8006174:	e002      	b.n	800617c <interrupt_WallCut+0xec>
		} else {
			front_wall_break_45slant = 0;
 8006176:	4b6e      	ldr	r3, [pc, #440]	; (8006330 <interrupt_WallCut+0x2a0>)
 8006178:	2200      	movs	r2, #0
 800617a:	701a      	strb	r2, [r3, #0]
		}

// スラロームで用いる90度センサーの壁切れ
		if (g_sensor[SENSOR_LEFT][0] < WALLCUT_THRESHOLD_L90) {
 800617c:	4b67      	ldr	r3, [pc, #412]	; (800631c <interrupt_WallCut+0x28c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006184:	da30      	bge.n	80061e8 <interrupt_WallCut+0x158>
			NoWallCountL90++;
 8006186:	4b6b      	ldr	r3, [pc, #428]	; (8006334 <interrupt_WallCut+0x2a4>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3301      	adds	r3, #1
 800618c:	4a69      	ldr	r2, [pc, #420]	; (8006334 <interrupt_WallCut+0x2a4>)
 800618e:	6013      	str	r3, [r2, #0]
			//straight.velocityのほうが良き？
			NoWallDisplacementL90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006190:	4b69      	ldr	r3, [pc, #420]	; (8006338 <interrupt_WallCut+0x2a8>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4618      	mov	r0, r3
 8006196:	f7fa f9ff 	bl	8000598 <__aeabi_f2d>
 800619a:	4604      	mov	r4, r0
 800619c:	460d      	mov	r5, r1
 800619e:	4b67      	ldr	r3, [pc, #412]	; (800633c <interrupt_WallCut+0x2ac>)
 80061a0:	ed93 7a00 	vldr	s14, [r3]
 80061a4:	4b66      	ldr	r3, [pc, #408]	; (8006340 <interrupt_WallCut+0x2b0>)
 80061a6:	edd3 7a00 	vldr	s15, [r3]
 80061aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061ae:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80061b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80061b6:	ee16 0a90 	vmov	r0, s13
 80061ba:	f7fa f9ed 	bl	8000598 <__aeabi_f2d>
 80061be:	a354      	add	r3, pc, #336	; (adr r3, 8006310 <interrupt_WallCut+0x280>)
 80061c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c4:	f7fa fa40 	bl	8000648 <__aeabi_dmul>
 80061c8:	4602      	mov	r2, r0
 80061ca:	460b      	mov	r3, r1
 80061cc:	4620      	mov	r0, r4
 80061ce:	4629      	mov	r1, r5
 80061d0:	f7fa f884 	bl	80002dc <__adddf3>
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	4610      	mov	r0, r2
 80061da:	4619      	mov	r1, r3
 80061dc:	f7fa fd0c 	bl	8000bf8 <__aeabi_d2f>
 80061e0:	4603      	mov	r3, r0
 80061e2:	4a55      	ldr	r2, [pc, #340]	; (8006338 <interrupt_WallCut+0x2a8>)
 80061e4:	6013      	str	r3, [r2, #0]
 80061e6:	e006      	b.n	80061f6 <interrupt_WallCut+0x166>
//			straight.velocity*INTERRUPT_TIME - straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2
		} else {
			NoWallCountL90 = 0;
 80061e8:	4b52      	ldr	r3, [pc, #328]	; (8006334 <interrupt_WallCut+0x2a4>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	601a      	str	r2, [r3, #0]
			NoWallDisplacementL90 = 0;
 80061ee:	4b52      	ldr	r3, [pc, #328]	; (8006338 <interrupt_WallCut+0x2a8>)
 80061f0:	f04f 0200 	mov.w	r2, #0
 80061f4:	601a      	str	r2, [r3, #0]
		}

		if (g_sensor[SENSOR_RIGHT][0] < WALLCUT_THRESHOLD_R90) {
 80061f6:	4b49      	ldr	r3, [pc, #292]	; (800631c <interrupt_WallCut+0x28c>)
 80061f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80061fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006200:	da30      	bge.n	8006264 <interrupt_WallCut+0x1d4>
			NoWallCountR90++;
 8006202:	4b50      	ldr	r3, [pc, #320]	; (8006344 <interrupt_WallCut+0x2b4>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	3301      	adds	r3, #1
 8006208:	4a4e      	ldr	r2, [pc, #312]	; (8006344 <interrupt_WallCut+0x2b4>)
 800620a:	6013      	str	r3, [r2, #0]
			NoWallDisplacementR90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 800620c:	4b4e      	ldr	r3, [pc, #312]	; (8006348 <interrupt_WallCut+0x2b8>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4618      	mov	r0, r3
 8006212:	f7fa f9c1 	bl	8000598 <__aeabi_f2d>
 8006216:	4604      	mov	r4, r0
 8006218:	460d      	mov	r5, r1
 800621a:	4b48      	ldr	r3, [pc, #288]	; (800633c <interrupt_WallCut+0x2ac>)
 800621c:	ed93 7a00 	vldr	s14, [r3]
 8006220:	4b47      	ldr	r3, [pc, #284]	; (8006340 <interrupt_WallCut+0x2b0>)
 8006222:	edd3 7a00 	vldr	s15, [r3]
 8006226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800622a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800622e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006232:	ee16 0a90 	vmov	r0, s13
 8006236:	f7fa f9af 	bl	8000598 <__aeabi_f2d>
 800623a:	a335      	add	r3, pc, #212	; (adr r3, 8006310 <interrupt_WallCut+0x280>)
 800623c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006240:	f7fa fa02 	bl	8000648 <__aeabi_dmul>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	4620      	mov	r0, r4
 800624a:	4629      	mov	r1, r5
 800624c:	f7fa f846 	bl	80002dc <__adddf3>
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	4610      	mov	r0, r2
 8006256:	4619      	mov	r1, r3
 8006258:	f7fa fcce 	bl	8000bf8 <__aeabi_d2f>
 800625c:	4603      	mov	r3, r0
 800625e:	4a3a      	ldr	r2, [pc, #232]	; (8006348 <interrupt_WallCut+0x2b8>)
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	e006      	b.n	8006272 <interrupt_WallCut+0x1e2>
		} else {
			NoWallCountR90 = 0;
 8006264:	4b37      	ldr	r3, [pc, #220]	; (8006344 <interrupt_WallCut+0x2b4>)
 8006266:	2200      	movs	r2, #0
 8006268:	601a      	str	r2, [r3, #0]
			NoWallDisplacementR90 = 0;
 800626a:	4b37      	ldr	r3, [pc, #220]	; (8006348 <interrupt_WallCut+0x2b8>)
 800626c:	f04f 0200 	mov.w	r2, #0
 8006270:	601a      	str	r2, [r3, #0]
		}

// 大回りターンで用いる45度センサーの壁切れ
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 8006272:	4b2b      	ldr	r3, [pc, #172]	; (8006320 <interrupt_WallCut+0x290>)
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f113 0f59 	cmn.w	r3, #89	; 0x59
 800627a:	da03      	bge.n	8006284 <interrupt_WallCut+0x1f4>
				> WALLCUT_THRESHOLD_DIFF_L45 || g_sensor[SENSOR_FRONT_LEFT][0]
 800627c:	4b27      	ldr	r3, [pc, #156]	; (800631c <interrupt_WallCut+0x28c>)
 800627e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006280:	2bc8      	cmp	r3, #200	; 0xc8
 8006282:	dd37      	ble.n	80062f4 <interrupt_WallCut+0x264>
																				> WALLCUT_THRESHOLD_L45) {
			g_sensor_max_fl = 0;			//CENTER_FL;
 8006284:	4b31      	ldr	r3, [pc, #196]	; (800634c <interrupt_WallCut+0x2bc>)
 8006286:	f04f 0200 	mov.w	r2, #0
 800628a:	601a      	str	r2, [r3, #0]
			NoWallCountL45++;
 800628c:	4b30      	ldr	r3, [pc, #192]	; (8006350 <interrupt_WallCut+0x2c0>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	3301      	adds	r3, #1
 8006292:	4a2f      	ldr	r2, [pc, #188]	; (8006350 <interrupt_WallCut+0x2c0>)
 8006294:	6013      	str	r3, [r2, #0]
			//pl_l_blue_LED(0);
			NoWallCountL45_flag = 0;
 8006296:	4b2f      	ldr	r3, [pc, #188]	; (8006354 <interrupt_WallCut+0x2c4>)
 8006298:	2200      	movs	r2, #0
 800629a:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountL45_flag == 1) {
//			NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 800629c:	4b2e      	ldr	r3, [pc, #184]	; (8006358 <interrupt_WallCut+0x2c8>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7fa f979 	bl	8000598 <__aeabi_f2d>
 80062a6:	4604      	mov	r4, r0
 80062a8:	460d      	mov	r5, r1
 80062aa:	4b24      	ldr	r3, [pc, #144]	; (800633c <interrupt_WallCut+0x2ac>)
 80062ac:	ed93 7a00 	vldr	s14, [r3]
 80062b0:	4b23      	ldr	r3, [pc, #140]	; (8006340 <interrupt_WallCut+0x2b0>)
 80062b2:	edd3 7a00 	vldr	s15, [r3]
 80062b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062ba:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80062be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80062c2:	ee16 0a90 	vmov	r0, s13
 80062c6:	f7fa f967 	bl	8000598 <__aeabi_f2d>
 80062ca:	a311      	add	r3, pc, #68	; (adr r3, 8006310 <interrupt_WallCut+0x280>)
 80062cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d0:	f7fa f9ba 	bl	8000648 <__aeabi_dmul>
 80062d4:	4602      	mov	r2, r0
 80062d6:	460b      	mov	r3, r1
 80062d8:	4620      	mov	r0, r4
 80062da:	4629      	mov	r1, r5
 80062dc:	f7f9 fffe 	bl	80002dc <__adddf3>
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	4610      	mov	r0, r2
 80062e6:	4619      	mov	r1, r3
 80062e8:	f7fa fc86 	bl	8000bf8 <__aeabi_d2f>
 80062ec:	4603      	mov	r3, r0
 80062ee:	4a1a      	ldr	r2, [pc, #104]	; (8006358 <interrupt_WallCut+0x2c8>)
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	e0a0      	b.n	8006436 <interrupt_WallCut+0x3a6>
//			}
		} else {

			if (NoWallCountL45_flag == 0) {
 80062f4:	4b17      	ldr	r3, [pc, #92]	; (8006354 <interrupt_WallCut+0x2c4>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d16c      	bne.n	80063d6 <interrupt_WallCut+0x346>
				for (int i = 0; i <= 19; i++) {
 80062fc:	2300      	movs	r3, #0
 80062fe:	60fb      	str	r3, [r7, #12]
 8006300:	e04c      	b.n	800639c <interrupt_WallCut+0x30c>
 8006302:	bf00      	nop
 8006304:	f3af 8000 	nop.w
 8006308:	00000000 	.word	0x00000000
 800630c:	40ab5800 	.word	0x40ab5800
 8006310:	d2f1a9fc 	.word	0xd2f1a9fc
 8006314:	3f50624d 	.word	0x3f50624d
 8006318:	200004d8 	.word	0x200004d8
 800631c:	200002b8 	.word	0x200002b8
 8006320:	2000045c 	.word	0x2000045c
 8006324:	20000592 	.word	0x20000592
 8006328:	200005f2 	.word	0x200005f2
 800632c:	200005f3 	.word	0x200005f3
 8006330:	200005f4 	.word	0x200005f4
 8006334:	200005b8 	.word	0x200005b8
 8006338:	200005d0 	.word	0x200005d0
 800633c:	20000258 	.word	0x20000258
 8006340:	2000025c 	.word	0x2000025c
 8006344:	200005b4 	.word	0x200005b4
 8006348:	200005cc 	.word	0x200005cc
 800634c:	200005f8 	.word	0x200005f8
 8006350:	200005c0 	.word	0x200005c0
 8006354:	200005ec 	.word	0x200005ec
 8006358:	200005d8 	.word	0x200005d8
					if (g_sensor_max_fl
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 800635c:	4a7c      	ldr	r2, [pc, #496]	; (8006550 <interrupt_WallCut+0x4c0>)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	3314      	adds	r3, #20
 8006362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006366:	ee07 3a90 	vmov	s15, r3
 800636a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800636e:	4b79      	ldr	r3, [pc, #484]	; (8006554 <interrupt_WallCut+0x4c4>)
 8006370:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl
 8006374:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800637c:	dd0b      	ble.n	8006396 <interrupt_WallCut+0x306>
						g_sensor_max_fl =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 800637e:	4a74      	ldr	r2, [pc, #464]	; (8006550 <interrupt_WallCut+0x4c0>)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	3314      	adds	r3, #20
 8006384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006388:	ee07 3a90 	vmov	s15, r3
 800638c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl =
 8006390:	4b70      	ldr	r3, [pc, #448]	; (8006554 <interrupt_WallCut+0x4c4>)
 8006392:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	3301      	adds	r3, #1
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2b13      	cmp	r3, #19
 80063a0:	dddc      	ble.n	800635c <interrupt_WallCut+0x2cc>
					}
				}
				NoWallCountL45 = 0;
 80063a2:	4b6d      	ldr	r3, [pc, #436]	; (8006558 <interrupt_WallCut+0x4c8>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	601a      	str	r2, [r3, #0]
				NoWallCountL45_flag = 1;
 80063a8:	4b6c      	ldr	r3, [pc, #432]	; (800655c <interrupt_WallCut+0x4cc>)
 80063aa:	2201      	movs	r2, #1
 80063ac:	701a      	strb	r2, [r3, #0]
				//pl_l_blue_LED(1);
				//NoWallDisplacementL45 = 0;
				NoWallDisplacementL45 = GAIN_WALLCUT
						* (g_sensor_max_fl - CENTER_FL) / g_sensor_max_fl;
 80063ae:	4b69      	ldr	r3, [pc, #420]	; (8006554 <interrupt_WallCut+0x4c4>)
 80063b0:	edd3 7a00 	vldr	s15, [r3]
 80063b4:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8006560 <interrupt_WallCut+0x4d0>
 80063b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80063bc:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8006564 <interrupt_WallCut+0x4d4>
 80063c0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80063c4:	4b63      	ldr	r3, [pc, #396]	; (8006554 <interrupt_WallCut+0x4c4>)
 80063c6:	ed93 7a00 	vldr	s14, [r3]
 80063ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementL45 = GAIN_WALLCUT
 80063ce:	4b66      	ldr	r3, [pc, #408]	; (8006568 <interrupt_WallCut+0x4d8>)
 80063d0:	edc3 7a00 	vstr	s15, [r3]
 80063d4:	e02f      	b.n	8006436 <interrupt_WallCut+0x3a6>
			} else {
				NoWallCountL45++;
 80063d6:	4b60      	ldr	r3, [pc, #384]	; (8006558 <interrupt_WallCut+0x4c8>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3301      	adds	r3, #1
 80063dc:	4a5e      	ldr	r2, [pc, #376]	; (8006558 <interrupt_WallCut+0x4c8>)
 80063de:	6013      	str	r3, [r2, #0]
//				NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 80063e0:	4b61      	ldr	r3, [pc, #388]	; (8006568 <interrupt_WallCut+0x4d8>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7fa f8d7 	bl	8000598 <__aeabi_f2d>
 80063ea:	4604      	mov	r4, r0
 80063ec:	460d      	mov	r5, r1
 80063ee:	4b5f      	ldr	r3, [pc, #380]	; (800656c <interrupt_WallCut+0x4dc>)
 80063f0:	ed93 7a00 	vldr	s14, [r3]
 80063f4:	4b5e      	ldr	r3, [pc, #376]	; (8006570 <interrupt_WallCut+0x4e0>)
 80063f6:	edd3 7a00 	vldr	s15, [r3]
 80063fa:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 80063fe:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006402:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006406:	ee16 0a90 	vmov	r0, s13
 800640a:	f7fa f8c5 	bl	8000598 <__aeabi_f2d>
 800640e:	a34e      	add	r3, pc, #312	; (adr r3, 8006548 <interrupt_WallCut+0x4b8>)
 8006410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006414:	f7fa f918 	bl	8000648 <__aeabi_dmul>
 8006418:	4602      	mov	r2, r0
 800641a:	460b      	mov	r3, r1
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 800641c:	4620      	mov	r0, r4
 800641e:	4629      	mov	r1, r5
 8006420:	f7f9 ff5c 	bl	80002dc <__adddf3>
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	4610      	mov	r0, r2
 800642a:	4619      	mov	r1, r3
 800642c:	f7fa fbe4 	bl	8000bf8 <__aeabi_d2f>
 8006430:	4603      	mov	r3, r0
 8006432:	4a4d      	ldr	r2, [pc, #308]	; (8006568 <interrupt_WallCut+0x4d8>)
 8006434:	6013      	str	r3, [r2, #0]
			}
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 8006436:	4b4f      	ldr	r3, [pc, #316]	; (8006574 <interrupt_WallCut+0x4e4>)
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	f113 0f45 	cmn.w	r3, #69	; 0x45
 800643e:	da05      	bge.n	800644c <interrupt_WallCut+0x3bc>
				> WALLCUT_THRESHOLD_DIFF_R45 || g_sensor[SENSOR_FRONT_RIGHT][0]
 8006440:	4b43      	ldr	r3, [pc, #268]	; (8006550 <interrupt_WallCut+0x4c0>)
 8006442:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006446:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800644a:	dd37      	ble.n	80064bc <interrupt_WallCut+0x42c>
																		> WALLCUT_THRESHOLD_R45) {
			g_sensor_max_fr = 0;			//CENTER_FR;
 800644c:	4b4a      	ldr	r3, [pc, #296]	; (8006578 <interrupt_WallCut+0x4e8>)
 800644e:	f04f 0200 	mov.w	r2, #0
 8006452:	601a      	str	r2, [r3, #0]
			NoWallCountR45++;
 8006454:	4b49      	ldr	r3, [pc, #292]	; (800657c <interrupt_WallCut+0x4ec>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	3301      	adds	r3, #1
 800645a:	4a48      	ldr	r2, [pc, #288]	; (800657c <interrupt_WallCut+0x4ec>)
 800645c:	6013      	str	r3, [r2, #0]
			//pl_r_blue_LED(0);
			NoWallCountR45_flag = 0;
 800645e:	4b48      	ldr	r3, [pc, #288]	; (8006580 <interrupt_WallCut+0x4f0>)
 8006460:	2200      	movs	r2, #0
 8006462:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountR45_flag == 1) {
//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006464:	4b47      	ldr	r3, [pc, #284]	; (8006584 <interrupt_WallCut+0x4f4>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4618      	mov	r0, r3
 800646a:	f7fa f895 	bl	8000598 <__aeabi_f2d>
 800646e:	4604      	mov	r4, r0
 8006470:	460d      	mov	r5, r1
 8006472:	4b3e      	ldr	r3, [pc, #248]	; (800656c <interrupt_WallCut+0x4dc>)
 8006474:	ed93 7a00 	vldr	s14, [r3]
 8006478:	4b3d      	ldr	r3, [pc, #244]	; (8006570 <interrupt_WallCut+0x4e0>)
 800647a:	edd3 7a00 	vldr	s15, [r3]
 800647e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006482:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006486:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800648a:	ee16 0a90 	vmov	r0, s13
 800648e:	f7fa f883 	bl	8000598 <__aeabi_f2d>
 8006492:	a32d      	add	r3, pc, #180	; (adr r3, 8006548 <interrupt_WallCut+0x4b8>)
 8006494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006498:	f7fa f8d6 	bl	8000648 <__aeabi_dmul>
 800649c:	4602      	mov	r2, r0
 800649e:	460b      	mov	r3, r1
 80064a0:	4620      	mov	r0, r4
 80064a2:	4629      	mov	r1, r5
 80064a4:	f7f9 ff1a 	bl	80002dc <__adddf3>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	4610      	mov	r0, r2
 80064ae:	4619      	mov	r1, r3
 80064b0:	f7fa fba2 	bl	8000bf8 <__aeabi_d2f>
 80064b4:	4603      	mov	r3, r0
 80064b6:	4a33      	ldr	r2, [pc, #204]	; (8006584 <interrupt_WallCut+0x4f4>)
 80064b8:	6013      	str	r3, [r2, #0]
 80064ba:	e097      	b.n	80065ec <interrupt_WallCut+0x55c>
//			}
		} else {
			if (NoWallCountR45_flag == 0) {
 80064bc:	4b30      	ldr	r3, [pc, #192]	; (8006580 <interrupt_WallCut+0x4f0>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d163      	bne.n	800658c <interrupt_WallCut+0x4fc>
				for (int i = 0; i <= 19; i++) {
 80064c4:	2300      	movs	r3, #0
 80064c6:	60bb      	str	r3, [r7, #8]
 80064c8:	e01f      	b.n	800650a <interrupt_WallCut+0x47a>
					if (g_sensor_max_fr
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 80064ca:	4a21      	ldr	r2, [pc, #132]	; (8006550 <interrupt_WallCut+0x4c0>)
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	333c      	adds	r3, #60	; 0x3c
 80064d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064d4:	ee07 3a90 	vmov	s15, r3
 80064d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064dc:	4b26      	ldr	r3, [pc, #152]	; (8006578 <interrupt_WallCut+0x4e8>)
 80064de:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr
 80064e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ea:	dd0b      	ble.n	8006504 <interrupt_WallCut+0x474>
						g_sensor_max_fr =
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 80064ec:	4a18      	ldr	r2, [pc, #96]	; (8006550 <interrupt_WallCut+0x4c0>)
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	333c      	adds	r3, #60	; 0x3c
 80064f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064f6:	ee07 3a90 	vmov	s15, r3
 80064fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr =
 80064fe:	4b1e      	ldr	r3, [pc, #120]	; (8006578 <interrupt_WallCut+0x4e8>)
 8006500:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	3301      	adds	r3, #1
 8006508:	60bb      	str	r3, [r7, #8]
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2b13      	cmp	r3, #19
 800650e:	dddc      	ble.n	80064ca <interrupt_WallCut+0x43a>
					}
				}
				NoWallCountR45 = 0;
 8006510:	4b1a      	ldr	r3, [pc, #104]	; (800657c <interrupt_WallCut+0x4ec>)
 8006512:	2200      	movs	r2, #0
 8006514:	601a      	str	r2, [r3, #0]
				NoWallCountR45_flag = 1;
 8006516:	4b1a      	ldr	r3, [pc, #104]	; (8006580 <interrupt_WallCut+0x4f0>)
 8006518:	2201      	movs	r2, #1
 800651a:	701a      	strb	r2, [r3, #0]
				//pl_r_blue_LED(1);
				//NoWallDisplacementR45 = 0;
				NoWallDisplacementR45 = GAIN_WALLCUT
						* (g_sensor_max_fr - CENTER_FR) / g_sensor_max_fr;
 800651c:	4b16      	ldr	r3, [pc, #88]	; (8006578 <interrupt_WallCut+0x4e8>)
 800651e:	edd3 7a00 	vldr	s15, [r3]
 8006522:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006588 <interrupt_WallCut+0x4f8>
 8006526:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800652a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8006564 <interrupt_WallCut+0x4d4>
 800652e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8006532:	4b11      	ldr	r3, [pc, #68]	; (8006578 <interrupt_WallCut+0x4e8>)
 8006534:	ed93 7a00 	vldr	s14, [r3]
 8006538:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementR45 = GAIN_WALLCUT
 800653c:	4b11      	ldr	r3, [pc, #68]	; (8006584 <interrupt_WallCut+0x4f4>)
 800653e:	edc3 7a00 	vstr	s15, [r3]
 8006542:	e053      	b.n	80065ec <interrupt_WallCut+0x55c>
 8006544:	f3af 8000 	nop.w
 8006548:	d2f1a9fc 	.word	0xd2f1a9fc
 800654c:	3f50624d 	.word	0x3f50624d
 8006550:	200002b8 	.word	0x200002b8
 8006554:	200005f8 	.word	0x200005f8
 8006558:	200005c0 	.word	0x200005c0
 800655c:	200005ec 	.word	0x200005ec
 8006560:	43f68000 	.word	0x43f68000
 8006564:	00000000 	.word	0x00000000
 8006568:	200005d8 	.word	0x200005d8
 800656c:	20000258 	.word	0x20000258
 8006570:	2000025c 	.word	0x2000025c
 8006574:	2000045c 	.word	0x2000045c
 8006578:	200005fc 	.word	0x200005fc
 800657c:	200005bc 	.word	0x200005bc
 8006580:	200005ed 	.word	0x200005ed
 8006584:	200005d4 	.word	0x200005d4
 8006588:	44484000 	.word	0x44484000
			} else {
				NoWallCountR45++;
 800658c:	4b94      	ldr	r3, [pc, #592]	; (80067e0 <interrupt_WallCut+0x750>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3301      	adds	r3, #1
 8006592:	4a93      	ldr	r2, [pc, #588]	; (80067e0 <interrupt_WallCut+0x750>)
 8006594:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 8006596:	4b93      	ldr	r3, [pc, #588]	; (80067e4 <interrupt_WallCut+0x754>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4618      	mov	r0, r3
 800659c:	f7f9 fffc 	bl	8000598 <__aeabi_f2d>
 80065a0:	4604      	mov	r4, r0
 80065a2:	460d      	mov	r5, r1
 80065a4:	4b90      	ldr	r3, [pc, #576]	; (80067e8 <interrupt_WallCut+0x758>)
 80065a6:	ed93 7a00 	vldr	s14, [r3]
 80065aa:	4b90      	ldr	r3, [pc, #576]	; (80067ec <interrupt_WallCut+0x75c>)
 80065ac:	edd3 7a00 	vldr	s15, [r3]
 80065b0:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 80065b4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80065b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80065bc:	ee16 0a90 	vmov	r0, s13
 80065c0:	f7f9 ffea 	bl	8000598 <__aeabi_f2d>
 80065c4:	a384      	add	r3, pc, #528	; (adr r3, 80067d8 <interrupt_WallCut+0x748>)
 80065c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ca:	f7fa f83d 	bl	8000648 <__aeabi_dmul>
 80065ce:	4602      	mov	r2, r0
 80065d0:	460b      	mov	r3, r1
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 80065d2:	4620      	mov	r0, r4
 80065d4:	4629      	mov	r1, r5
 80065d6:	f7f9 fe81 	bl	80002dc <__adddf3>
 80065da:	4602      	mov	r2, r0
 80065dc:	460b      	mov	r3, r1
 80065de:	4610      	mov	r0, r2
 80065e0:	4619      	mov	r1, r3
 80065e2:	f7fa fb09 	bl	8000bf8 <__aeabi_d2f>
 80065e6:	4603      	mov	r3, r0
 80065e8:	4a7e      	ldr	r2, [pc, #504]	; (80067e4 <interrupt_WallCut+0x754>)
 80065ea:	6013      	str	r3, [r2, #0]
			}

		}

		// 大回りターンで用いる45度センサーの壁切れ(斜め)
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 80065ec:	4b80      	ldr	r3, [pc, #512]	; (80067f0 <interrupt_WallCut+0x760>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f113 0fef 	cmn.w	r3, #239	; 0xef
 80065f4:	db5f      	blt.n	80066b6 <interrupt_WallCut+0x626>
				> WALLCUT_THRESHOLD_DIFF_L45_SLANT) {
			g_sensor_max_fl_slant = 0;			//CENTER_FL_SLANT;
 80065f6:	4b7f      	ldr	r3, [pc, #508]	; (80067f4 <interrupt_WallCut+0x764>)
 80065f8:	f04f 0200 	mov.w	r2, #0
 80065fc:	601a      	str	r2, [r3, #0]
			NoWallCountL45slant++;
 80065fe:	4b7e      	ldr	r3, [pc, #504]	; (80067f8 <interrupt_WallCut+0x768>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3301      	adds	r3, #1
 8006604:	4a7c      	ldr	r2, [pc, #496]	; (80067f8 <interrupt_WallCut+0x768>)
 8006606:	6013      	str	r3, [r2, #0]
			pl_l_blue_LED(0);
 8006608:	2000      	movs	r0, #0
 800660a:	f000 fccf 	bl	8006fac <pl_l_blue_LED>
			NoWallCountL45slant_flag = 0;
 800660e:	4b7b      	ldr	r3, [pc, #492]	; (80067fc <interrupt_WallCut+0x76c>)
 8006610:	2200      	movs	r2, #0
 8006612:	701a      	strb	r2, [r3, #0]
			//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006614:	4b7a      	ldr	r3, [pc, #488]	; (8006800 <interrupt_WallCut+0x770>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4618      	mov	r0, r3
 800661a:	f7f9 ffbd 	bl	8000598 <__aeabi_f2d>
 800661e:	4604      	mov	r4, r0
 8006620:	460d      	mov	r5, r1
 8006622:	4b71      	ldr	r3, [pc, #452]	; (80067e8 <interrupt_WallCut+0x758>)
 8006624:	ed93 7a00 	vldr	s14, [r3]
 8006628:	4b70      	ldr	r3, [pc, #448]	; (80067ec <interrupt_WallCut+0x75c>)
 800662a:	edd3 7a00 	vldr	s15, [r3]
 800662e:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 8006632:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006636:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800663a:	ee16 0a90 	vmov	r0, s13
 800663e:	f7f9 ffab 	bl	8000598 <__aeabi_f2d>
 8006642:	a365      	add	r3, pc, #404	; (adr r3, 80067d8 <interrupt_WallCut+0x748>)
 8006644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006648:	f7f9 fffe 	bl	8000648 <__aeabi_dmul>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006650:	4620      	mov	r0, r4
 8006652:	4629      	mov	r1, r5
 8006654:	f7f9 fe42 	bl	80002dc <__adddf3>
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	4610      	mov	r0, r2
 800665e:	4619      	mov	r1, r3
 8006660:	f7fa faca 	bl	8000bf8 <__aeabi_d2f>
 8006664:	4603      	mov	r3, r0
 8006666:	4a66      	ldr	r2, [pc, #408]	; (8006800 <interrupt_WallCut+0x770>)
 8006668:	6013      	str	r3, [r2, #0]
			if (slantWallControlL_flag == 1) {
 800666a:	4b66      	ldr	r3, [pc, #408]	; (8006804 <interrupt_WallCut+0x774>)
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	2b01      	cmp	r3, #1
 8006670:	f040 812b 	bne.w	80068ca <interrupt_WallCut+0x83a>
				NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 8006674:	4b64      	ldr	r3, [pc, #400]	; (8006808 <interrupt_WallCut+0x778>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4618      	mov	r0, r3
 800667a:	f7f9 ff8d 	bl	8000598 <__aeabi_f2d>
 800667e:	4604      	mov	r4, r0
 8006680:	460d      	mov	r5, r1
 8006682:	4b62      	ldr	r3, [pc, #392]	; (800680c <interrupt_WallCut+0x77c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4618      	mov	r0, r3
 8006688:	f7f9 ff86 	bl	8000598 <__aeabi_f2d>
 800668c:	a352      	add	r3, pc, #328	; (adr r3, 80067d8 <interrupt_WallCut+0x748>)
 800668e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006692:	f7f9 ffd9 	bl	8000648 <__aeabi_dmul>
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	4620      	mov	r0, r4
 800669c:	4629      	mov	r1, r5
 800669e:	f7f9 fe1d 	bl	80002dc <__adddf3>
 80066a2:	4602      	mov	r2, r0
 80066a4:	460b      	mov	r3, r1
 80066a6:	4610      	mov	r0, r2
 80066a8:	4619      	mov	r1, r3
 80066aa:	f7fa faa5 	bl	8000bf8 <__aeabi_d2f>
 80066ae:	4603      	mov	r3, r0
 80066b0:	4a55      	ldr	r2, [pc, #340]	; (8006808 <interrupt_WallCut+0x778>)
 80066b2:	6013      	str	r3, [r2, #0]
 80066b4:	e109      	b.n	80068ca <interrupt_WallCut+0x83a>
				//NoWallDisplacementL45slant += (E_speedL + E_speedR)
				//		/ 2*INTERRUPT_TIME;
			}
		} else {
			if (NoWallCountL45slant_flag == 0) {
 80066b6:	4b51      	ldr	r3, [pc, #324]	; (80067fc <interrupt_WallCut+0x76c>)
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f040 80ae 	bne.w	800681c <interrupt_WallCut+0x78c>
				for (int i = 0; i <= 19; i++) {
 80066c0:	2300      	movs	r3, #0
 80066c2:	607b      	str	r3, [r7, #4]
 80066c4:	e01f      	b.n	8006706 <interrupt_WallCut+0x676>
					if (g_sensor_max_fl_slant
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 80066c6:	4a52      	ldr	r2, [pc, #328]	; (8006810 <interrupt_WallCut+0x780>)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	3314      	adds	r3, #20
 80066cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066d0:	ee07 3a90 	vmov	s15, r3
 80066d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066d8:	4b46      	ldr	r3, [pc, #280]	; (80067f4 <interrupt_WallCut+0x764>)
 80066da:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl_slant
 80066de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066e6:	dd0b      	ble.n	8006700 <interrupt_WallCut+0x670>
						g_sensor_max_fl_slant =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 80066e8:	4a49      	ldr	r2, [pc, #292]	; (8006810 <interrupt_WallCut+0x780>)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	3314      	adds	r3, #20
 80066ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066f2:	ee07 3a90 	vmov	s15, r3
 80066f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl_slant =
 80066fa:	4b3e      	ldr	r3, [pc, #248]	; (80067f4 <interrupt_WallCut+0x764>)
 80066fc:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	3301      	adds	r3, #1
 8006704:	607b      	str	r3, [r7, #4]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b13      	cmp	r3, #19
 800670a:	dddc      	ble.n	80066c6 <interrupt_WallCut+0x636>
					}
				}
				NoWallCountL45slant = 0;
 800670c:	4b3a      	ldr	r3, [pc, #232]	; (80067f8 <interrupt_WallCut+0x768>)
 800670e:	2200      	movs	r2, #0
 8006710:	601a      	str	r2, [r3, #0]
				NoWallCountL45slant_flag = 1;
 8006712:	4b3a      	ldr	r3, [pc, #232]	; (80067fc <interrupt_WallCut+0x76c>)
 8006714:	2201      	movs	r2, #1
 8006716:	701a      	strb	r2, [r3, #0]
				pl_l_blue_LED(1);
 8006718:	2001      	movs	r0, #1
 800671a:	f000 fc47 	bl	8006fac <pl_l_blue_LED>
				//			NoWallDisplacementL45slant = 0;
				//			NoWallDisplacementL45slant2 = 0;
				if (g_sensor_max_fl_slant - CENTER_FL_SLANT >= 0) {
 800671e:	4b35      	ldr	r3, [pc, #212]	; (80067f4 <interrupt_WallCut+0x764>)
 8006720:	edd3 7a00 	vldr	s15, [r3]
 8006724:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006814 <interrupt_WallCut+0x784>
 8006728:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800672c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006734:	db26      	blt.n	8006784 <interrupt_WallCut+0x6f4>
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006736:	4b2f      	ldr	r3, [pc, #188]	; (80067f4 <interrupt_WallCut+0x764>)
 8006738:	edd3 7a00 	vldr	s15, [r3]
 800673c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8006814 <interrupt_WallCut+0x784>
 8006740:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006744:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8006818 <interrupt_WallCut+0x788>
 8006748:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 800674c:	4b29      	ldr	r3, [pc, #164]	; (80067f4 <interrupt_WallCut+0x764>)
 800674e:	ed93 7a00 	vldr	s14, [r3]
 8006752:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
 8006756:	4b2c      	ldr	r3, [pc, #176]	; (8006808 <interrupt_WallCut+0x778>)
 8006758:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 800675c:	4b25      	ldr	r3, [pc, #148]	; (80067f4 <interrupt_WallCut+0x764>)
 800675e:	edd3 7a00 	vldr	s15, [r3]
 8006762:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006814 <interrupt_WallCut+0x784>
 8006766:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800676a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006818 <interrupt_WallCut+0x788>
 800676e:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006772:	4b20      	ldr	r3, [pc, #128]	; (80067f4 <interrupt_WallCut+0x764>)
 8006774:	ed93 7a00 	vldr	s14, [r3]
 8006778:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
 800677c:	4b20      	ldr	r3, [pc, #128]	; (8006800 <interrupt_WallCut+0x770>)
 800677e:	edc3 7a00 	vstr	s15, [r3]
 8006782:	e09f      	b.n	80068c4 <interrupt_WallCut+0x834>
				} else {
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006784:	4b1b      	ldr	r3, [pc, #108]	; (80067f4 <interrupt_WallCut+0x764>)
 8006786:	edd3 7a00 	vldr	s15, [r3]
 800678a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006814 <interrupt_WallCut+0x784>
 800678e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006792:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8006818 <interrupt_WallCut+0x788>
 8006796:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 800679a:	4b16      	ldr	r3, [pc, #88]	; (80067f4 <interrupt_WallCut+0x764>)
 800679c:	ed93 7a00 	vldr	s14, [r3]
 80067a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
 80067a4:	4b18      	ldr	r3, [pc, #96]	; (8006808 <interrupt_WallCut+0x778>)
 80067a6:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 80067aa:	4b12      	ldr	r3, [pc, #72]	; (80067f4 <interrupt_WallCut+0x764>)
 80067ac:	edd3 7a00 	vldr	s15, [r3]
 80067b0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006814 <interrupt_WallCut+0x784>
 80067b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80067b8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006818 <interrupt_WallCut+0x788>
 80067bc:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 80067c0:	4b0c      	ldr	r3, [pc, #48]	; (80067f4 <interrupt_WallCut+0x764>)
 80067c2:	ed93 7a00 	vldr	s14, [r3]
 80067c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
 80067ca:	4b0d      	ldr	r3, [pc, #52]	; (8006800 <interrupt_WallCut+0x770>)
 80067cc:	edc3 7a00 	vstr	s15, [r3]
 80067d0:	e078      	b.n	80068c4 <interrupt_WallCut+0x834>
 80067d2:	bf00      	nop
 80067d4:	f3af 8000 	nop.w
 80067d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80067dc:	3f50624d 	.word	0x3f50624d
 80067e0:	200005bc 	.word	0x200005bc
 80067e4:	200005d4 	.word	0x200005d4
 80067e8:	20000258 	.word	0x20000258
 80067ec:	2000025c 	.word	0x2000025c
 80067f0:	2000045c 	.word	0x2000045c
 80067f4:	20000600 	.word	0x20000600
 80067f8:	200005c8 	.word	0x200005c8
 80067fc:	200005ee 	.word	0x200005ee
 8006800:	200005e8 	.word	0x200005e8
 8006804:	200005f0 	.word	0x200005f0
 8006808:	200005e0 	.word	0x200005e0
 800680c:	200004d8 	.word	0x200004d8
 8006810:	200002b8 	.word	0x200002b8
 8006814:	455ac000 	.word	0x455ac000
 8006818:	00000000 	.word	0x00000000
				}

			} else {
				NoWallCountL45slant++;
 800681c:	4bac      	ldr	r3, [pc, #688]	; (8006ad0 <interrupt_WallCut+0xa40>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	3301      	adds	r3, #1
 8006822:	4aab      	ldr	r2, [pc, #684]	; (8006ad0 <interrupt_WallCut+0xa40>)
 8006824:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006826:	4bab      	ldr	r3, [pc, #684]	; (8006ad4 <interrupt_WallCut+0xa44>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4618      	mov	r0, r3
 800682c:	f7f9 feb4 	bl	8000598 <__aeabi_f2d>
 8006830:	4604      	mov	r4, r0
 8006832:	460d      	mov	r5, r1
 8006834:	4ba8      	ldr	r3, [pc, #672]	; (8006ad8 <interrupt_WallCut+0xa48>)
 8006836:	ed93 7a00 	vldr	s14, [r3]
 800683a:	4ba8      	ldr	r3, [pc, #672]	; (8006adc <interrupt_WallCut+0xa4c>)
 800683c:	edd3 7a00 	vldr	s15, [r3]
 8006840:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006844:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006848:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800684c:	ee16 0a90 	vmov	r0, s13
 8006850:	f7f9 fea2 	bl	8000598 <__aeabi_f2d>
 8006854:	a39c      	add	r3, pc, #624	; (adr r3, 8006ac8 <interrupt_WallCut+0xa38>)
 8006856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685a:	f7f9 fef5 	bl	8000648 <__aeabi_dmul>
 800685e:	4602      	mov	r2, r0
 8006860:	460b      	mov	r3, r1
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006862:	4620      	mov	r0, r4
 8006864:	4629      	mov	r1, r5
 8006866:	f7f9 fd39 	bl	80002dc <__adddf3>
 800686a:	4602      	mov	r2, r0
 800686c:	460b      	mov	r3, r1
 800686e:	4610      	mov	r0, r2
 8006870:	4619      	mov	r1, r3
 8006872:	f7fa f9c1 	bl	8000bf8 <__aeabi_d2f>
 8006876:	4603      	mov	r3, r0
 8006878:	4a96      	ldr	r2, [pc, #600]	; (8006ad4 <interrupt_WallCut+0xa44>)
 800687a:	6013      	str	r3, [r2, #0]
				if (slantWallControlL_flag == 1) {
 800687c:	4b98      	ldr	r3, [pc, #608]	; (8006ae0 <interrupt_WallCut+0xa50>)
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d11f      	bne.n	80068c4 <interrupt_WallCut+0x834>
					NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 8006884:	4b97      	ldr	r3, [pc, #604]	; (8006ae4 <interrupt_WallCut+0xa54>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4618      	mov	r0, r3
 800688a:	f7f9 fe85 	bl	8000598 <__aeabi_f2d>
 800688e:	4604      	mov	r4, r0
 8006890:	460d      	mov	r5, r1
 8006892:	4b95      	ldr	r3, [pc, #596]	; (8006ae8 <interrupt_WallCut+0xa58>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4618      	mov	r0, r3
 8006898:	f7f9 fe7e 	bl	8000598 <__aeabi_f2d>
 800689c:	a38a      	add	r3, pc, #552	; (adr r3, 8006ac8 <interrupt_WallCut+0xa38>)
 800689e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a2:	f7f9 fed1 	bl	8000648 <__aeabi_dmul>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4620      	mov	r0, r4
 80068ac:	4629      	mov	r1, r5
 80068ae:	f7f9 fd15 	bl	80002dc <__adddf3>
 80068b2:	4602      	mov	r2, r0
 80068b4:	460b      	mov	r3, r1
 80068b6:	4610      	mov	r0, r2
 80068b8:	4619      	mov	r1, r3
 80068ba:	f7fa f99d 	bl	8000bf8 <__aeabi_d2f>
 80068be:	4603      	mov	r3, r0
 80068c0:	4a88      	ldr	r2, [pc, #544]	; (8006ae4 <interrupt_WallCut+0xa54>)
 80068c2:	6013      	str	r3, [r2, #0]
//					NoWallDisplacementL45slant += (E_speedL + E_speedR)
//							/ 2*INTERRUPT_TIME;
				}
			}

			slantWallControlL_flag = 1;
 80068c4:	4b86      	ldr	r3, [pc, #536]	; (8006ae0 <interrupt_WallCut+0xa50>)
 80068c6:	2201      	movs	r2, #1
 80068c8:	701a      	strb	r2, [r3, #0]
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 80068ca:	4b88      	ldr	r3, [pc, #544]	; (8006aec <interrupt_WallCut+0xa5c>)
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f113 0fef 	cmn.w	r3, #239	; 0xef
 80068d2:	db6a      	blt.n	80069aa <interrupt_WallCut+0x91a>
				> WALLCUT_THRESHOLD_DIFF_R45_SLANT) {
			g_sensor_max_fr_slant = 0;				//CENTER_FR_SLANT;
 80068d4:	4b86      	ldr	r3, [pc, #536]	; (8006af0 <interrupt_WallCut+0xa60>)
 80068d6:	f04f 0200 	mov.w	r2, #0
 80068da:	601a      	str	r2, [r3, #0]
			NoWallCountR45slant++;
 80068dc:	4b85      	ldr	r3, [pc, #532]	; (8006af4 <interrupt_WallCut+0xa64>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	3301      	adds	r3, #1
 80068e2:	4a84      	ldr	r2, [pc, #528]	; (8006af4 <interrupt_WallCut+0xa64>)
 80068e4:	6013      	str	r3, [r2, #0]
			pl_r_blue_LED(0);
 80068e6:	2000      	movs	r0, #0
 80068e8:	f000 fb4e 	bl	8006f88 <pl_r_blue_LED>
			NoWallCountR45slant_flag = 0;
 80068ec:	4b82      	ldr	r3, [pc, #520]	; (8006af8 <interrupt_WallCut+0xa68>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	701a      	strb	r2, [r3, #0]
//	 		NoWallDisplacementR45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 80068f2:	4b82      	ldr	r3, [pc, #520]	; (8006afc <interrupt_WallCut+0xa6c>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7f9 fe4e 	bl	8000598 <__aeabi_f2d>
 80068fc:	4604      	mov	r4, r0
 80068fe:	460d      	mov	r5, r1
 8006900:	4b75      	ldr	r3, [pc, #468]	; (8006ad8 <interrupt_WallCut+0xa48>)
 8006902:	ed93 7a00 	vldr	s14, [r3]
 8006906:	4b75      	ldr	r3, [pc, #468]	; (8006adc <interrupt_WallCut+0xa4c>)
 8006908:	edd3 7a00 	vldr	s15, [r3]
 800690c:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 8006910:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006914:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006918:	ee16 0a90 	vmov	r0, s13
 800691c:	f7f9 fe3c 	bl	8000598 <__aeabi_f2d>
 8006920:	a369      	add	r3, pc, #420	; (adr r3, 8006ac8 <interrupt_WallCut+0xa38>)
 8006922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006926:	f7f9 fe8f 	bl	8000648 <__aeabi_dmul>
 800692a:	4602      	mov	r2, r0
 800692c:	460b      	mov	r3, r1
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 800692e:	4620      	mov	r0, r4
 8006930:	4629      	mov	r1, r5
 8006932:	f7f9 fcd3 	bl	80002dc <__adddf3>
 8006936:	4602      	mov	r2, r0
 8006938:	460b      	mov	r3, r1
 800693a:	4610      	mov	r0, r2
 800693c:	4619      	mov	r1, r3
 800693e:	f7fa f95b 	bl	8000bf8 <__aeabi_d2f>
 8006942:	4603      	mov	r3, r0
 8006944:	4a6d      	ldr	r2, [pc, #436]	; (8006afc <interrupt_WallCut+0xa6c>)
 8006946:	6013      	str	r3, [r2, #0]
			if (slantWallControlR_flag == 1) {
 8006948:	4b6d      	ldr	r3, [pc, #436]	; (8006b00 <interrupt_WallCut+0xa70>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	2b01      	cmp	r3, #1
 800694e:	f040 81a4 	bne.w	8006c9a <interrupt_WallCut+0xc0a>
//				NoWallDisplacementR45slant += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006952:	4b6c      	ldr	r3, [pc, #432]	; (8006b04 <interrupt_WallCut+0xa74>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4618      	mov	r0, r3
 8006958:	f7f9 fe1e 	bl	8000598 <__aeabi_f2d>
 800695c:	4604      	mov	r4, r0
 800695e:	460d      	mov	r5, r1
 8006960:	4b5d      	ldr	r3, [pc, #372]	; (8006ad8 <interrupt_WallCut+0xa48>)
 8006962:	ed93 7a00 	vldr	s14, [r3]
 8006966:	4b5d      	ldr	r3, [pc, #372]	; (8006adc <interrupt_WallCut+0xa4c>)
 8006968:	edd3 7a00 	vldr	s15, [r3]
 800696c:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006970:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006974:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006978:	ee16 0a90 	vmov	r0, s13
 800697c:	f7f9 fe0c 	bl	8000598 <__aeabi_f2d>
 8006980:	a351      	add	r3, pc, #324	; (adr r3, 8006ac8 <interrupt_WallCut+0xa38>)
 8006982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006986:	f7f9 fe5f 	bl	8000648 <__aeabi_dmul>
 800698a:	4602      	mov	r2, r0
 800698c:	460b      	mov	r3, r1
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 800698e:	4620      	mov	r0, r4
 8006990:	4629      	mov	r1, r5
 8006992:	f7f9 fca3 	bl	80002dc <__adddf3>
 8006996:	4602      	mov	r2, r0
 8006998:	460b      	mov	r3, r1
 800699a:	4610      	mov	r0, r2
 800699c:	4619      	mov	r1, r3
 800699e:	f7fa f92b 	bl	8000bf8 <__aeabi_d2f>
 80069a2:	4603      	mov	r3, r0
 80069a4:	4a57      	ldr	r2, [pc, #348]	; (8006b04 <interrupt_WallCut+0xa74>)
 80069a6:	6013      	str	r3, [r2, #0]
		g_sensor_max_fl_slant = 0;
		g_sensor_max_fr_slant = 0;

	}

}
 80069a8:	e177      	b.n	8006c9a <interrupt_WallCut+0xc0a>
			if (NoWallCountR45slant_flag == 0) {
 80069aa:	4b53      	ldr	r3, [pc, #332]	; (8006af8 <interrupt_WallCut+0xa68>)
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f040 80b0 	bne.w	8006b14 <interrupt_WallCut+0xa84>
				for (int i = 0; i <= 19; i++) {
 80069b4:	2300      	movs	r3, #0
 80069b6:	603b      	str	r3, [r7, #0]
 80069b8:	e01f      	b.n	80069fa <interrupt_WallCut+0x96a>
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 80069ba:	4a53      	ldr	r2, [pc, #332]	; (8006b08 <interrupt_WallCut+0xa78>)
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	333c      	adds	r3, #60	; 0x3c
 80069c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069c4:	ee07 3a90 	vmov	s15, r3
 80069c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069cc:	4b48      	ldr	r3, [pc, #288]	; (8006af0 <interrupt_WallCut+0xa60>)
 80069ce:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr_slant
 80069d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069da:	dd0b      	ble.n	80069f4 <interrupt_WallCut+0x964>
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 80069dc:	4a4a      	ldr	r2, [pc, #296]	; (8006b08 <interrupt_WallCut+0xa78>)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	333c      	adds	r3, #60	; 0x3c
 80069e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069e6:	ee07 3a90 	vmov	s15, r3
 80069ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr_slant =
 80069ee:	4b40      	ldr	r3, [pc, #256]	; (8006af0 <interrupt_WallCut+0xa60>)
 80069f0:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	3301      	adds	r3, #1
 80069f8:	603b      	str	r3, [r7, #0]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b13      	cmp	r3, #19
 80069fe:	dddc      	ble.n	80069ba <interrupt_WallCut+0x92a>
				NoWallCountR45slant = 0;
 8006a00:	4b3c      	ldr	r3, [pc, #240]	; (8006af4 <interrupt_WallCut+0xa64>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	601a      	str	r2, [r3, #0]
				NoWallCountR45slant_flag = 1;
 8006a06:	4b3c      	ldr	r3, [pc, #240]	; (8006af8 <interrupt_WallCut+0xa68>)
 8006a08:	2201      	movs	r2, #1
 8006a0a:	701a      	strb	r2, [r3, #0]
				pl_r_blue_LED(1);
 8006a0c:	2001      	movs	r0, #1
 8006a0e:	f000 fabb 	bl	8006f88 <pl_r_blue_LED>
				if (g_sensor_max_fr_slant - CENTER_FR_SLANT >= 0) {
 8006a12:	4b37      	ldr	r3, [pc, #220]	; (8006af0 <interrupt_WallCut+0xa60>)
 8006a14:	edd3 7a00 	vldr	s15, [r3]
 8006a18:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8006b0c <interrupt_WallCut+0xa7c>
 8006a1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a28:	db26      	blt.n	8006a78 <interrupt_WallCut+0x9e8>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006a2a:	4b31      	ldr	r3, [pc, #196]	; (8006af0 <interrupt_WallCut+0xa60>)
 8006a2c:	edd3 7a00 	vldr	s15, [r3]
 8006a30:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006b0c <interrupt_WallCut+0xa7c>
 8006a34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a38:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8006b10 <interrupt_WallCut+0xa80>
 8006a3c:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006a40:	4b2b      	ldr	r3, [pc, #172]	; (8006af0 <interrupt_WallCut+0xa60>)
 8006a42:	ed93 7a00 	vldr	s14, [r3]
 8006a46:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT
 8006a4a:	4b2e      	ldr	r3, [pc, #184]	; (8006b04 <interrupt_WallCut+0xa74>)
 8006a4c:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006a50:	4b27      	ldr	r3, [pc, #156]	; (8006af0 <interrupt_WallCut+0xa60>)
 8006a52:	edd3 7a00 	vldr	s15, [r3]
 8006a56:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8006b0c <interrupt_WallCut+0xa7c>
 8006a5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a5e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006b10 <interrupt_WallCut+0xa80>
 8006a62:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006a66:	4b22      	ldr	r3, [pc, #136]	; (8006af0 <interrupt_WallCut+0xa60>)
 8006a68:	ed93 7a00 	vldr	s14, [r3]
 8006a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT
 8006a70:	4b22      	ldr	r3, [pc, #136]	; (8006afc <interrupt_WallCut+0xa6c>)
 8006a72:	edc3 7a00 	vstr	s15, [r3]
 8006a76:	e0ac      	b.n	8006bd2 <interrupt_WallCut+0xb42>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006a78:	4b1d      	ldr	r3, [pc, #116]	; (8006af0 <interrupt_WallCut+0xa60>)
 8006a7a:	edd3 7a00 	vldr	s15, [r3]
 8006a7e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8006b0c <interrupt_WallCut+0xa7c>
 8006a82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a86:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006b10 <interrupt_WallCut+0xa80>
 8006a8a:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006a8e:	4b18      	ldr	r3, [pc, #96]	; (8006af0 <interrupt_WallCut+0xa60>)
 8006a90:	ed93 7a00 	vldr	s14, [r3]
 8006a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT2
 8006a98:	4b1a      	ldr	r3, [pc, #104]	; (8006b04 <interrupt_WallCut+0xa74>)
 8006a9a:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006a9e:	4b14      	ldr	r3, [pc, #80]	; (8006af0 <interrupt_WallCut+0xa60>)
 8006aa0:	edd3 7a00 	vldr	s15, [r3]
 8006aa4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006b0c <interrupt_WallCut+0xa7c>
 8006aa8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006aac:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006b10 <interrupt_WallCut+0xa80>
 8006ab0:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006ab4:	4b0e      	ldr	r3, [pc, #56]	; (8006af0 <interrupt_WallCut+0xa60>)
 8006ab6:	ed93 7a00 	vldr	s14, [r3]
 8006aba:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT2
 8006abe:	4b0f      	ldr	r3, [pc, #60]	; (8006afc <interrupt_WallCut+0xa6c>)
 8006ac0:	edc3 7a00 	vstr	s15, [r3]
 8006ac4:	e085      	b.n	8006bd2 <interrupt_WallCut+0xb42>
 8006ac6:	bf00      	nop
 8006ac8:	d2f1a9fc 	.word	0xd2f1a9fc
 8006acc:	3f50624d 	.word	0x3f50624d
 8006ad0:	200005c8 	.word	0x200005c8
 8006ad4:	200005e8 	.word	0x200005e8
 8006ad8:	20000258 	.word	0x20000258
 8006adc:	2000025c 	.word	0x2000025c
 8006ae0:	200005f0 	.word	0x200005f0
 8006ae4:	200005e0 	.word	0x200005e0
 8006ae8:	200004d8 	.word	0x200004d8
 8006aec:	2000045c 	.word	0x2000045c
 8006af0:	20000604 	.word	0x20000604
 8006af4:	200005c4 	.word	0x200005c4
 8006af8:	200005ef 	.word	0x200005ef
 8006afc:	200005e4 	.word	0x200005e4
 8006b00:	200005f1 	.word	0x200005f1
 8006b04:	200005dc 	.word	0x200005dc
 8006b08:	200002b8 	.word	0x200002b8
 8006b0c:	455ac000 	.word	0x455ac000
 8006b10:	00000000 	.word	0x00000000
				NoWallCountR45slant++;
 8006b14:	4b66      	ldr	r3, [pc, #408]	; (8006cb0 <interrupt_WallCut+0xc20>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	4a65      	ldr	r2, [pc, #404]	; (8006cb0 <interrupt_WallCut+0xc20>)
 8006b1c:	6013      	str	r3, [r2, #0]
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006b1e:	4b65      	ldr	r3, [pc, #404]	; (8006cb4 <interrupt_WallCut+0xc24>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7f9 fd38 	bl	8000598 <__aeabi_f2d>
 8006b28:	4604      	mov	r4, r0
 8006b2a:	460d      	mov	r5, r1
 8006b2c:	4b62      	ldr	r3, [pc, #392]	; (8006cb8 <interrupt_WallCut+0xc28>)
 8006b2e:	ed93 7a00 	vldr	s14, [r3]
 8006b32:	4b62      	ldr	r3, [pc, #392]	; (8006cbc <interrupt_WallCut+0xc2c>)
 8006b34:	edd3 7a00 	vldr	s15, [r3]
 8006b38:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006b3c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006b40:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006b44:	ee16 0a90 	vmov	r0, s13
 8006b48:	f7f9 fd26 	bl	8000598 <__aeabi_f2d>
 8006b4c:	a356      	add	r3, pc, #344	; (adr r3, 8006ca8 <interrupt_WallCut+0xc18>)
 8006b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b52:	f7f9 fd79 	bl	8000648 <__aeabi_dmul>
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	f7f9 fbbd 	bl	80002dc <__adddf3>
 8006b62:	4602      	mov	r2, r0
 8006b64:	460b      	mov	r3, r1
 8006b66:	4610      	mov	r0, r2
 8006b68:	4619      	mov	r1, r3
 8006b6a:	f7fa f845 	bl	8000bf8 <__aeabi_d2f>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	4a50      	ldr	r2, [pc, #320]	; (8006cb4 <interrupt_WallCut+0xc24>)
 8006b72:	6013      	str	r3, [r2, #0]
				if (slantWallControlR_flag == 1) {
 8006b74:	4b52      	ldr	r3, [pc, #328]	; (8006cc0 <interrupt_WallCut+0xc30>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d12a      	bne.n	8006bd2 <interrupt_WallCut+0xb42>
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006b7c:	4b51      	ldr	r3, [pc, #324]	; (8006cc4 <interrupt_WallCut+0xc34>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7f9 fd09 	bl	8000598 <__aeabi_f2d>
 8006b86:	4604      	mov	r4, r0
 8006b88:	460d      	mov	r5, r1
 8006b8a:	4b4b      	ldr	r3, [pc, #300]	; (8006cb8 <interrupt_WallCut+0xc28>)
 8006b8c:	ed93 7a00 	vldr	s14, [r3]
 8006b90:	4b4a      	ldr	r3, [pc, #296]	; (8006cbc <interrupt_WallCut+0xc2c>)
 8006b92:	edd3 7a00 	vldr	s15, [r3]
 8006b96:	ee77 7a27 	vadd.f32	s15, s14, s15
							/ 2*INTERRUPT_TIME;
 8006b9a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006b9e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006ba2:	ee16 0a90 	vmov	r0, s13
 8006ba6:	f7f9 fcf7 	bl	8000598 <__aeabi_f2d>
 8006baa:	a33f      	add	r3, pc, #252	; (adr r3, 8006ca8 <interrupt_WallCut+0xc18>)
 8006bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb0:	f7f9 fd4a 	bl	8000648 <__aeabi_dmul>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	460b      	mov	r3, r1
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006bb8:	4620      	mov	r0, r4
 8006bba:	4629      	mov	r1, r5
 8006bbc:	f7f9 fb8e 	bl	80002dc <__adddf3>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	f7fa f816 	bl	8000bf8 <__aeabi_d2f>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	4a3d      	ldr	r2, [pc, #244]	; (8006cc4 <interrupt_WallCut+0xc34>)
 8006bd0:	6013      	str	r3, [r2, #0]
			slantWallControlR_flag = 1;
 8006bd2:	4b3b      	ldr	r3, [pc, #236]	; (8006cc0 <interrupt_WallCut+0xc30>)
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	701a      	strb	r2, [r3, #0]
}
 8006bd8:	e05f      	b.n	8006c9a <interrupt_WallCut+0xc0a>
		NoWallCountL90 = 0;
 8006bda:	4b3b      	ldr	r3, [pc, #236]	; (8006cc8 <interrupt_WallCut+0xc38>)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	601a      	str	r2, [r3, #0]
		NoWallCountR90 = 0;
 8006be0:	4b3a      	ldr	r3, [pc, #232]	; (8006ccc <interrupt_WallCut+0xc3c>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	601a      	str	r2, [r3, #0]
		NoWallCountL45 = 0;
 8006be6:	4b3a      	ldr	r3, [pc, #232]	; (8006cd0 <interrupt_WallCut+0xc40>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]
		NoWallCountR45 = 0;
 8006bec:	4b39      	ldr	r3, [pc, #228]	; (8006cd4 <interrupt_WallCut+0xc44>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	601a      	str	r2, [r3, #0]
		NoWallCountL45slant = 0;
 8006bf2:	4b39      	ldr	r3, [pc, #228]	; (8006cd8 <interrupt_WallCut+0xc48>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	601a      	str	r2, [r3, #0]
		NoWallCountR45slant = 0;
 8006bf8:	4b2d      	ldr	r3, [pc, #180]	; (8006cb0 <interrupt_WallCut+0xc20>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL90 = 0;
 8006bfe:	4b37      	ldr	r3, [pc, #220]	; (8006cdc <interrupt_WallCut+0xc4c>)
 8006c00:	f04f 0200 	mov.w	r2, #0
 8006c04:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR90 = 0;
 8006c06:	4b36      	ldr	r3, [pc, #216]	; (8006ce0 <interrupt_WallCut+0xc50>)
 8006c08:	f04f 0200 	mov.w	r2, #0
 8006c0c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 8006c0e:	4b35      	ldr	r3, [pc, #212]	; (8006ce4 <interrupt_WallCut+0xc54>)
 8006c10:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8006c14:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 8006c16:	4b34      	ldr	r3, [pc, #208]	; (8006ce8 <interrupt_WallCut+0xc58>)
 8006c18:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8006c1c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant = 0;
 8006c1e:	4b33      	ldr	r3, [pc, #204]	; (8006cec <interrupt_WallCut+0xc5c>)
 8006c20:	f04f 0200 	mov.w	r2, #0
 8006c24:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant = 0;
 8006c26:	4b27      	ldr	r3, [pc, #156]	; (8006cc4 <interrupt_WallCut+0xc34>)
 8006c28:	f04f 0200 	mov.w	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant2 = 0;			//単純な壁切れ用
 8006c2e:	4b30      	ldr	r3, [pc, #192]	; (8006cf0 <interrupt_WallCut+0xc60>)
 8006c30:	f04f 0200 	mov.w	r2, #0
 8006c34:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant2 = 0;			//単純な壁切れ用
 8006c36:	4b1f      	ldr	r3, [pc, #124]	; (8006cb4 <interrupt_WallCut+0xc24>)
 8006c38:	f04f 0200 	mov.w	r2, #0
 8006c3c:	601a      	str	r2, [r3, #0]
		NoWallCountL45_flag = 0;
 8006c3e:	4b2d      	ldr	r3, [pc, #180]	; (8006cf4 <interrupt_WallCut+0xc64>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	701a      	strb	r2, [r3, #0]
		NoWallCountR45_flag = 0;
 8006c44:	4b2c      	ldr	r3, [pc, #176]	; (8006cf8 <interrupt_WallCut+0xc68>)
 8006c46:	2200      	movs	r2, #0
 8006c48:	701a      	strb	r2, [r3, #0]
		NoWallCountL45slant_flag = 0;
 8006c4a:	4b2c      	ldr	r3, [pc, #176]	; (8006cfc <interrupt_WallCut+0xc6c>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	701a      	strb	r2, [r3, #0]
		NoWallCountR45slant_flag = 0;
 8006c50:	4b2b      	ldr	r3, [pc, #172]	; (8006d00 <interrupt_WallCut+0xc70>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	701a      	strb	r2, [r3, #0]
		slantWallControlL_flag = 0;
 8006c56:	4b2b      	ldr	r3, [pc, #172]	; (8006d04 <interrupt_WallCut+0xc74>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	701a      	strb	r2, [r3, #0]
		slantWallControlR_flag = 0;
 8006c5c:	4b18      	ldr	r3, [pc, #96]	; (8006cc0 <interrupt_WallCut+0xc30>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	701a      	strb	r2, [r3, #0]
		front_wall_break_90 = 0;
 8006c62:	4b29      	ldr	r3, [pc, #164]	; (8006d08 <interrupt_WallCut+0xc78>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	701a      	strb	r2, [r3, #0]
		front_wall_break_45 = 0;
 8006c68:	4b28      	ldr	r3, [pc, #160]	; (8006d0c <interrupt_WallCut+0xc7c>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 8006c6e:	4b28      	ldr	r3, [pc, #160]	; (8006d10 <interrupt_WallCut+0xc80>)
 8006c70:	2200      	movs	r2, #0
 8006c72:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 8006c74:	4b26      	ldr	r3, [pc, #152]	; (8006d10 <interrupt_WallCut+0xc80>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	701a      	strb	r2, [r3, #0]
		g_sensor_max_fl = 0;
 8006c7a:	4b26      	ldr	r3, [pc, #152]	; (8006d14 <interrupt_WallCut+0xc84>)
 8006c7c:	f04f 0200 	mov.w	r2, #0
 8006c80:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr = 0;
 8006c82:	4b25      	ldr	r3, [pc, #148]	; (8006d18 <interrupt_WallCut+0xc88>)
 8006c84:	f04f 0200 	mov.w	r2, #0
 8006c88:	601a      	str	r2, [r3, #0]
		g_sensor_max_fl_slant = 0;
 8006c8a:	4b24      	ldr	r3, [pc, #144]	; (8006d1c <interrupt_WallCut+0xc8c>)
 8006c8c:	f04f 0200 	mov.w	r2, #0
 8006c90:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr_slant = 0;
 8006c92:	4b23      	ldr	r3, [pc, #140]	; (8006d20 <interrupt_WallCut+0xc90>)
 8006c94:	f04f 0200 	mov.w	r2, #0
 8006c98:	601a      	str	r2, [r3, #0]
}
 8006c9a:	bf00      	nop
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bdb0      	pop	{r4, r5, r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	f3af 8000 	nop.w
 8006ca8:	d2f1a9fc 	.word	0xd2f1a9fc
 8006cac:	3f50624d 	.word	0x3f50624d
 8006cb0:	200005c4 	.word	0x200005c4
 8006cb4:	200005e4 	.word	0x200005e4
 8006cb8:	20000258 	.word	0x20000258
 8006cbc:	2000025c 	.word	0x2000025c
 8006cc0:	200005f1 	.word	0x200005f1
 8006cc4:	200005dc 	.word	0x200005dc
 8006cc8:	200005b8 	.word	0x200005b8
 8006ccc:	200005b4 	.word	0x200005b4
 8006cd0:	200005c0 	.word	0x200005c0
 8006cd4:	200005bc 	.word	0x200005bc
 8006cd8:	200005c8 	.word	0x200005c8
 8006cdc:	200005d0 	.word	0x200005d0
 8006ce0:	200005cc 	.word	0x200005cc
 8006ce4:	200005d8 	.word	0x200005d8
 8006ce8:	200005d4 	.word	0x200005d4
 8006cec:	200005e0 	.word	0x200005e0
 8006cf0:	200005e8 	.word	0x200005e8
 8006cf4:	200005ec 	.word	0x200005ec
 8006cf8:	200005ed 	.word	0x200005ed
 8006cfc:	200005ee 	.word	0x200005ee
 8006d00:	200005ef 	.word	0x200005ef
 8006d04:	200005f0 	.word	0x200005f0
 8006d08:	200005f2 	.word	0x200005f2
 8006d0c:	200005f3 	.word	0x200005f3
 8006d10:	200005f4 	.word	0x200005f4
 8006d14:	200005f8 	.word	0x200005f8
 8006d18:	200005fc 	.word	0x200005fc
 8006d1c:	20000600 	.word	0x20000600
 8006d20:	20000604 	.word	0x20000604

08006d24 <pl_yellow_LED_1>:
#include "gpio.h"
#include "main.h"



void pl_yellow_LED_1(int pin){
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,pin);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	461a      	mov	r2, r3
 8006d32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d3a:	f015 f9c9 	bl	801c0d0 <HAL_GPIO_WritePin>
}
 8006d3e:	bf00      	nop
 8006d40:	3708      	adds	r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
	...

08006d48 <pl_yellow_LED_3>:
void pl_yellow_LED_2(int pin){
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,pin);
}
void pl_yellow_LED_3(int pin){
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,pin);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	461a      	mov	r2, r3
 8006d56:	2140      	movs	r1, #64	; 0x40
 8006d58:	4803      	ldr	r0, [pc, #12]	; (8006d68 <pl_yellow_LED_3+0x20>)
 8006d5a:	f015 f9b9 	bl	801c0d0 <HAL_GPIO_WritePin>
}
 8006d5e:	bf00      	nop
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	48000800 	.word	0x48000800

08006d6c <pl_yellow_LED_6>:
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,pin);
}
void pl_yellow_LED_5(int pin){
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,pin);
}
void pl_yellow_LED_6(int pin){
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,pin);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	461a      	mov	r2, r3
 8006d7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006d7e:	4803      	ldr	r0, [pc, #12]	; (8006d8c <pl_yellow_LED_6+0x20>)
 8006d80:	f015 f9a6 	bl	801c0d0 <HAL_GPIO_WritePin>
}
 8006d84:	bf00      	nop
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	48000400 	.word	0x48000400

08006d90 <pl_yellow_LED_8>:
void pl_yellow_LED_7(int pin){
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,pin);
}
void pl_yellow_LED_8(int pin){
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,pin);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006da2:	4803      	ldr	r0, [pc, #12]	; (8006db0 <pl_yellow_LED_8+0x20>)
 8006da4:	f015 f994 	bl	801c0d0 <HAL_GPIO_WritePin>
}
 8006da8:	bf00      	nop
 8006daa:	3708      	adds	r7, #8
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	48000400 	.word	0x48000400

08006db4 <pl_yellow_LED_off>:




void pl_yellow_LED_off(void){
 8006db4:	b580      	push	{r7, lr}
 8006db6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8006db8:	2200      	movs	r2, #0
 8006dba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006dc2:	f015 f985 	bl	801c0d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006dcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006dd0:	f015 f97e 	bl	801c0d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	2140      	movs	r1, #64	; 0x40
 8006dd8:	4811      	ldr	r0, [pc, #68]	; (8006e20 <pl_yellow_LED_off+0x6c>)
 8006dda:	f015 f979 	bl	801c0d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8006dde:	2200      	movs	r2, #0
 8006de0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006de4:	480f      	ldr	r0, [pc, #60]	; (8006e24 <pl_yellow_LED_off+0x70>)
 8006de6:	f015 f973 	bl	801c0d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8006dea:	2200      	movs	r2, #0
 8006dec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006df0:	480c      	ldr	r0, [pc, #48]	; (8006e24 <pl_yellow_LED_off+0x70>)
 8006df2:	f015 f96d 	bl	801c0d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8006df6:	2200      	movs	r2, #0
 8006df8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006dfc:	4809      	ldr	r0, [pc, #36]	; (8006e24 <pl_yellow_LED_off+0x70>)
 8006dfe:	f015 f967 	bl	801c0d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8006e02:	2200      	movs	r2, #0
 8006e04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e08:	4806      	ldr	r0, [pc, #24]	; (8006e24 <pl_yellow_LED_off+0x70>)
 8006e0a:	f015 f961 	bl	801c0d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006e14:	4803      	ldr	r0, [pc, #12]	; (8006e24 <pl_yellow_LED_off+0x70>)
 8006e16:	f015 f95b 	bl	801c0d0 <HAL_GPIO_WritePin>
}
 8006e1a:	bf00      	nop
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	48000800 	.word	0x48000800
 8006e24:	48000400 	.word	0x48000400

08006e28 <pl_yellow_LED_count>:
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
}


void pl_yellow_LED_count(unsigned char yy){
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	4603      	mov	r3, r0
 8006e30:	71fb      	strb	r3, [r7, #7]

unsigned char yy1,yy2,yy3,yy4,yy5,yy6,yy7,yy8;

yy1 = yy & 1;
 8006e32:	79fb      	ldrb	r3, [r7, #7]
 8006e34:	f003 0301 	and.w	r3, r3, #1
 8006e38:	73fb      	strb	r3, [r7, #15]
yy2 = yy & 2;
 8006e3a:	79fb      	ldrb	r3, [r7, #7]
 8006e3c:	f003 0302 	and.w	r3, r3, #2
 8006e40:	73bb      	strb	r3, [r7, #14]
yy3 = yy & 4;
 8006e42:	79fb      	ldrb	r3, [r7, #7]
 8006e44:	f003 0304 	and.w	r3, r3, #4
 8006e48:	737b      	strb	r3, [r7, #13]
yy4 = yy & 8;
 8006e4a:	79fb      	ldrb	r3, [r7, #7]
 8006e4c:	f003 0308 	and.w	r3, r3, #8
 8006e50:	733b      	strb	r3, [r7, #12]
yy5 = yy & 16;
 8006e52:	79fb      	ldrb	r3, [r7, #7]
 8006e54:	f003 0310 	and.w	r3, r3, #16
 8006e58:	72fb      	strb	r3, [r7, #11]
yy6 = yy & 32;
 8006e5a:	79fb      	ldrb	r3, [r7, #7]
 8006e5c:	f003 0320 	and.w	r3, r3, #32
 8006e60:	72bb      	strb	r3, [r7, #10]
yy7 = yy & 64;
 8006e62:	79fb      	ldrb	r3, [r7, #7]
 8006e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e68:	727b      	strb	r3, [r7, #9]
yy8 = yy & 128;
 8006e6a:	79fb      	ldrb	r3, [r7, #7]
 8006e6c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e70:	723b      	strb	r3, [r7, #8]

if(yy1 >= 1){
 8006e72:	7bfb      	ldrb	r3, [r7, #15]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d007      	beq.n	8006e88 <pl_yellow_LED_count+0x60>
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e82:	f015 f925 	bl	801c0d0 <HAL_GPIO_WritePin>
 8006e86:	e006      	b.n	8006e96 <pl_yellow_LED_count+0x6e>
}else{
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e92:	f015 f91d 	bl	801c0d0 <HAL_GPIO_WritePin>
}
if(yy2 >= 1){
 8006e96:	7bbb      	ldrb	r3, [r7, #14]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d007      	beq.n	8006eac <pl_yellow_LED_count+0x84>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006ea2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ea6:	f015 f913 	bl	801c0d0 <HAL_GPIO_WritePin>
 8006eaa:	e006      	b.n	8006eba <pl_yellow_LED_count+0x92>
}
else{
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8006eac:	2200      	movs	r2, #0
 8006eae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006eb6:	f015 f90b 	bl	801c0d0 <HAL_GPIO_WritePin>
}
if(yy3 >= 1){
 8006eba:	7b7b      	ldrb	r3, [r7, #13]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d005      	beq.n	8006ecc <pl_yellow_LED_count+0xa4>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	2140      	movs	r1, #64	; 0x40
 8006ec4:	482e      	ldr	r0, [pc, #184]	; (8006f80 <pl_yellow_LED_count+0x158>)
 8006ec6:	f015 f903 	bl	801c0d0 <HAL_GPIO_WritePin>
 8006eca:	e004      	b.n	8006ed6 <pl_yellow_LED_count+0xae>
}else{
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8006ecc:	2200      	movs	r2, #0
 8006ece:	2140      	movs	r1, #64	; 0x40
 8006ed0:	482b      	ldr	r0, [pc, #172]	; (8006f80 <pl_yellow_LED_count+0x158>)
 8006ed2:	f015 f8fd 	bl	801c0d0 <HAL_GPIO_WritePin>
}
if(yy4 >= 1){
 8006ed6:	7b3b      	ldrb	r3, [r7, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d006      	beq.n	8006eea <pl_yellow_LED_count+0xc2>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 8006edc:	2201      	movs	r2, #1
 8006ede:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ee2:	4828      	ldr	r0, [pc, #160]	; (8006f84 <pl_yellow_LED_count+0x15c>)
 8006ee4:	f015 f8f4 	bl	801c0d0 <HAL_GPIO_WritePin>
 8006ee8:	e005      	b.n	8006ef6 <pl_yellow_LED_count+0xce>
}else{
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8006eea:	2200      	movs	r2, #0
 8006eec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ef0:	4824      	ldr	r0, [pc, #144]	; (8006f84 <pl_yellow_LED_count+0x15c>)
 8006ef2:	f015 f8ed 	bl	801c0d0 <HAL_GPIO_WritePin>
}
if(yy5 >= 1){
 8006ef6:	7afb      	ldrb	r3, [r7, #11]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d006      	beq.n	8006f0a <pl_yellow_LED_count+0xe2>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_SET);
 8006efc:	2201      	movs	r2, #1
 8006efe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f02:	4820      	ldr	r0, [pc, #128]	; (8006f84 <pl_yellow_LED_count+0x15c>)
 8006f04:	f015 f8e4 	bl	801c0d0 <HAL_GPIO_WritePin>
 8006f08:	e005      	b.n	8006f16 <pl_yellow_LED_count+0xee>
}else{
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f10:	481c      	ldr	r0, [pc, #112]	; (8006f84 <pl_yellow_LED_count+0x15c>)
 8006f12:	f015 f8dd 	bl	801c0d0 <HAL_GPIO_WritePin>
}
if(yy6 >= 1){
 8006f16:	7abb      	ldrb	r3, [r7, #10]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d006      	beq.n	8006f2a <pl_yellow_LED_count+0x102>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_SET);
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006f22:	4818      	ldr	r0, [pc, #96]	; (8006f84 <pl_yellow_LED_count+0x15c>)
 8006f24:	f015 f8d4 	bl	801c0d0 <HAL_GPIO_WritePin>
 8006f28:	e005      	b.n	8006f36 <pl_yellow_LED_count+0x10e>
}else{
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006f30:	4814      	ldr	r0, [pc, #80]	; (8006f84 <pl_yellow_LED_count+0x15c>)
 8006f32:	f015 f8cd 	bl	801c0d0 <HAL_GPIO_WritePin>
}
if(yy7 >= 1){
 8006f36:	7a7b      	ldrb	r3, [r7, #9]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d006      	beq.n	8006f4a <pl_yellow_LED_count+0x122>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f42:	4810      	ldr	r0, [pc, #64]	; (8006f84 <pl_yellow_LED_count+0x15c>)
 8006f44:	f015 f8c4 	bl	801c0d0 <HAL_GPIO_WritePin>
 8006f48:	e005      	b.n	8006f56 <pl_yellow_LED_count+0x12e>
}else{
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f50:	480c      	ldr	r0, [pc, #48]	; (8006f84 <pl_yellow_LED_count+0x15c>)
 8006f52:	f015 f8bd 	bl	801c0d0 <HAL_GPIO_WritePin>
}
if(yy8 >= 1){
 8006f56:	7a3b      	ldrb	r3, [r7, #8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d006      	beq.n	8006f6a <pl_yellow_LED_count+0x142>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f62:	4808      	ldr	r0, [pc, #32]	; (8006f84 <pl_yellow_LED_count+0x15c>)
 8006f64:	f015 f8b4 	bl	801c0d0 <HAL_GPIO_WritePin>
}else{
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
}
}
 8006f68:	e005      	b.n	8006f76 <pl_yellow_LED_count+0x14e>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f70:	4804      	ldr	r0, [pc, #16]	; (8006f84 <pl_yellow_LED_count+0x15c>)
 8006f72:	f015 f8ad 	bl	801c0d0 <HAL_GPIO_WritePin>
}
 8006f76:	bf00      	nop
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	48000800 	.word	0x48000800
 8006f84:	48000400 	.word	0x48000400

08006f88 <pl_r_blue_LED>:


void pl_r_blue_LED(int pin){
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_R_LED_GPIO_Port,BLUE_R_LED_Pin,pin);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	461a      	mov	r2, r3
 8006f96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f9a:	4803      	ldr	r0, [pc, #12]	; (8006fa8 <pl_r_blue_LED+0x20>)
 8006f9c:	f015 f898 	bl	801c0d0 <HAL_GPIO_WritePin>
}
 8006fa0:	bf00      	nop
 8006fa2:	3708      	adds	r7, #8
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	48000800 	.word	0x48000800

08006fac <pl_l_blue_LED>:

void pl_l_blue_LED(int pin){
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_L_LED_GPIO_Port,BLUE_L_LED_Pin,pin);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	461a      	mov	r2, r3
 8006fba:	2104      	movs	r1, #4
 8006fbc:	4803      	ldr	r0, [pc, #12]	; (8006fcc <pl_l_blue_LED+0x20>)
 8006fbe:	f015 f887 	bl	801c0d0 <HAL_GPIO_WritePin>
}
 8006fc2:	bf00      	nop
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	48000400 	.word	0x48000400

08006fd0 <encoder_read_byte_R>:
#include "spi.h"
#include <stdio.h>

float encoder_R,encoder_L;

uint16_t encoder_read_byte_R(uint16_t address,uint16_t data){
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b088      	sub	sp, #32
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	460a      	mov	r2, r1
 8006fda:	80fb      	strh	r3, [r7, #6]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	2110      	movs	r1, #16
 8006fe4:	4833      	ldr	r0, [pc, #204]	; (80070b4 <encoder_read_byte_R+0xe4>)
 8006fe6:	f015 f873 	bl	801c0d0 <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 8006fea:	88fb      	ldrh	r3, [r7, #6]
 8006fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ff0:	80fb      	strh	r3, [r7, #6]
	parity=0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	61bb      	str	r3, [r7, #24]
 8006ffa:	e00d      	b.n	8007018 <encoder_read_byte_R+0x48>
 8006ffc:	88fa      	ldrh	r2, [r7, #6]
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	fa42 f303 	asr.w	r3, r2, r3
 8007004:	b29b      	uxth	r3, r3
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	b29a      	uxth	r2, r3
 800700c:	8bfb      	ldrh	r3, [r7, #30]
 800700e:	4413      	add	r3, r2
 8007010:	83fb      	strh	r3, [r7, #30]
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	3301      	adds	r3, #1
 8007016:	61bb      	str	r3, [r7, #24]
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	2b0e      	cmp	r3, #14
 800701c:	ddee      	ble.n	8006ffc <encoder_read_byte_R+0x2c>
	address = address | ((parity % 2) << 15);
 800701e:	8bfb      	ldrh	r3, [r7, #30]
 8007020:	03db      	lsls	r3, r3, #15
 8007022:	b21a      	sxth	r2, r3
 8007024:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007028:	4313      	orrs	r3, r2
 800702a:	b21b      	sxth	r3, r3
 800702c:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 800702e:	88fb      	ldrh	r3, [r7, #6]
 8007030:	0a1b      	lsrs	r3, r3, #8
 8007032:	b29b      	uxth	r3, r3
 8007034:	b2db      	uxtb	r3, r3
 8007036:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 8007038:	88fb      	ldrh	r3, [r7, #6]
 800703a:	b2db      	uxtb	r3, r3
 800703c:	747b      	strb	r3, [r7, #17]


	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 800703e:	f107 0110 	add.w	r1, r7, #16
 8007042:	2364      	movs	r3, #100	; 0x64
 8007044:	2202      	movs	r2, #2
 8007046:	481c      	ldr	r0, [pc, #112]	; (80070b8 <encoder_read_byte_R+0xe8>)
 8007048:	f016 f925 	bl	801d296 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi3, address, 2, 100);

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 800704c:	2201      	movs	r2, #1
 800704e:	2110      	movs	r1, #16
 8007050:	4818      	ldr	r0, [pc, #96]	; (80070b4 <encoder_read_byte_R+0xe4>)
 8007052:	f015 f83d 	bl	801c0d0 <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 8007056:	2300      	movs	r3, #0
 8007058:	617b      	str	r3, [r7, #20]
 800705a:	e002      	b.n	8007062 <encoder_read_byte_R+0x92>
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	3301      	adds	r3, #1
 8007060:	617b      	str	r3, [r7, #20]
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2b95      	cmp	r3, #149	; 0x95
 8007066:	ddf9      	ble.n	800705c <encoder_read_byte_R+0x8c>

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007068:	2200      	movs	r2, #0
 800706a:	2110      	movs	r1, #16
 800706c:	4811      	ldr	r0, [pc, #68]	; (80070b4 <encoder_read_byte_R+0xe4>)
 800706e:	f015 f82f 	bl	801c0d0 <HAL_GPIO_WritePin>

//	data=0xC000;
	dataBuffer[0]=data>>8;
 8007072:	88bb      	ldrh	r3, [r7, #4]
 8007074:	0a1b      	lsrs	r3, r3, #8
 8007076:	b29b      	uxth	r3, r3
 8007078:	b2db      	uxtb	r3, r3
 800707a:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 800707c:	88bb      	ldrh	r3, [r7, #4]
 800707e:	b2db      	uxtb	r3, r3
 8007080:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 8007082:	f107 010c 	add.w	r1, r7, #12
 8007086:	2364      	movs	r3, #100	; 0x64
 8007088:	2202      	movs	r2, #2
 800708a:	480b      	ldr	r0, [pc, #44]	; (80070b8 <encoder_read_byte_R+0xe8>)
 800708c:	f016 fa71 	bl	801d572 <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8007090:	7b3b      	ldrb	r3, [r7, #12]
 8007092:	021b      	lsls	r3, r3, #8
 8007094:	b21a      	sxth	r2, r3
 8007096:	7b7b      	ldrb	r3, [r7, #13]
 8007098:	b21b      	sxth	r3, r3
 800709a:	4313      	orrs	r3, r2
 800709c:	b21b      	sxth	r3, r3
 800709e:	80bb      	strh	r3, [r7, #4]
//	HAL_SPI_Transmit(&hspi3, data, 2, 100);
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 80070a0:	2201      	movs	r2, #1
 80070a2:	2110      	movs	r1, #16
 80070a4:	4803      	ldr	r0, [pc, #12]	; (80070b4 <encoder_read_byte_R+0xe4>)
 80070a6:	f015 f813 	bl	801c0d0 <HAL_GPIO_WritePin>

	return data;
 80070aa:	88bb      	ldrh	r3, [r7, #4]

}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3720      	adds	r7, #32
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	48000400 	.word	0x48000400
 80070b8:	2000ee34 	.word	0x2000ee34

080070bc <encoder_read_byte_L>:
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;

}


uint16_t encoder_read_byte_L(uint16_t address,uint16_t data){
 80070bc:	b580      	push	{r7, lr}
 80070be:	b088      	sub	sp, #32
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	4603      	mov	r3, r0
 80070c4:	460a      	mov	r2, r1
 80070c6:	80fb      	strh	r3, [r7, #6]
 80070c8:	4613      	mov	r3, r2
 80070ca:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 80070cc:	2200      	movs	r2, #0
 80070ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80070d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80070d6:	f014 fffb 	bl	801c0d0 <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 80070da:	88fb      	ldrh	r3, [r7, #6]
 80070dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070e0:	80fb      	strh	r3, [r7, #6]
	parity=0;
 80070e2:	2300      	movs	r3, #0
 80070e4:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 80070e6:	2300      	movs	r3, #0
 80070e8:	61bb      	str	r3, [r7, #24]
 80070ea:	e00d      	b.n	8007108 <encoder_read_byte_L+0x4c>
 80070ec:	88fa      	ldrh	r2, [r7, #6]
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	fa42 f303 	asr.w	r3, r2, r3
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	8bfb      	ldrh	r3, [r7, #30]
 80070fe:	4413      	add	r3, r2
 8007100:	83fb      	strh	r3, [r7, #30]
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	3301      	adds	r3, #1
 8007106:	61bb      	str	r3, [r7, #24]
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	2b0e      	cmp	r3, #14
 800710c:	ddee      	ble.n	80070ec <encoder_read_byte_L+0x30>
	address = address | ((parity % 2) << 15);
 800710e:	8bfb      	ldrh	r3, [r7, #30]
 8007110:	03db      	lsls	r3, r3, #15
 8007112:	b21a      	sxth	r2, r3
 8007114:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007118:	4313      	orrs	r3, r2
 800711a:	b21b      	sxth	r3, r3
 800711c:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 800711e:	88fb      	ldrh	r3, [r7, #6]
 8007120:	0a1b      	lsrs	r3, r3, #8
 8007122:	b29b      	uxth	r3, r3
 8007124:	b2db      	uxtb	r3, r3
 8007126:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 8007128:	88fb      	ldrh	r3, [r7, #6]
 800712a:	b2db      	uxtb	r3, r3
 800712c:	747b      	strb	r3, [r7, #17]

	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 800712e:	f107 0110 	add.w	r1, r7, #16
 8007132:	2364      	movs	r3, #100	; 0x64
 8007134:	2202      	movs	r2, #2
 8007136:	481e      	ldr	r0, [pc, #120]	; (80071b0 <encoder_read_byte_L+0xf4>)
 8007138:	f016 f8ad 	bl	801d296 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 800713c:	2201      	movs	r2, #1
 800713e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007146:	f014 ffc3 	bl	801c0d0 <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 800714a:	2300      	movs	r3, #0
 800714c:	617b      	str	r3, [r7, #20]
 800714e:	e002      	b.n	8007156 <encoder_read_byte_L+0x9a>
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	3301      	adds	r3, #1
 8007154:	617b      	str	r3, [r7, #20]
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	2b95      	cmp	r3, #149	; 0x95
 800715a:	ddf9      	ble.n	8007150 <encoder_read_byte_L+0x94>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 800715c:	2200      	movs	r2, #0
 800715e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007166:	f014 ffb3 	bl	801c0d0 <HAL_GPIO_WritePin>

//	data=0x0000;
	dataBuffer[0]=data>>8;
 800716a:	88bb      	ldrh	r3, [r7, #4]
 800716c:	0a1b      	lsrs	r3, r3, #8
 800716e:	b29b      	uxth	r3, r3
 8007170:	b2db      	uxtb	r3, r3
 8007172:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 8007174:	88bb      	ldrh	r3, [r7, #4]
 8007176:	b2db      	uxtb	r3, r3
 8007178:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 800717a:	f107 010c 	add.w	r1, r7, #12
 800717e:	2364      	movs	r3, #100	; 0x64
 8007180:	2202      	movs	r2, #2
 8007182:	480b      	ldr	r0, [pc, #44]	; (80071b0 <encoder_read_byte_L+0xf4>)
 8007184:	f016 f9f5 	bl	801d572 <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8007188:	7b3b      	ldrb	r3, [r7, #12]
 800718a:	021b      	lsls	r3, r3, #8
 800718c:	b21a      	sxth	r2, r3
 800718e:	7b7b      	ldrb	r3, [r7, #13]
 8007190:	b21b      	sxth	r3, r3
 8007192:	4313      	orrs	r3, r2
 8007194:	b21b      	sxth	r3, r3
 8007196:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007198:	2201      	movs	r2, #1
 800719a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800719e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80071a2:	f014 ff95 	bl	801c0d0 <HAL_GPIO_WritePin>

	return data;
 80071a6:	88bb      	ldrh	r3, [r7, #4]

}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3720      	adds	r7, #32
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	2000ee34 	.word	0x2000ee34

080071b4 <AS5047_DataUpdate>:

}



void AS5047_DataUpdate(void){
 80071b4:	b580      	push	{r7, lr}
 80071b6:	af00      	add	r7, sp, #0

		//encoder_read_byte_L(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_R=(float)(encoder_read_byte_R(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 80071b8:	2100      	movs	r1, #0
 80071ba:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80071be:	f7ff ff07 	bl	8006fd0 <encoder_read_byte_R>
 80071c2:	4603      	mov	r3, r0
 80071c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80071c8:	ee07 3a90 	vmov	s15, r3
 80071cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071d0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8007218 <AS5047_DataUpdate+0x64>
 80071d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80071d8:	eddf 6a10 	vldr	s13, [pc, #64]	; 800721c <AS5047_DataUpdate+0x68>
 80071dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071e0:	4b0f      	ldr	r3, [pc, #60]	; (8007220 <AS5047_DataUpdate+0x6c>)
 80071e2:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(500);

		//encoder_read_byte_R(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_L=(float)(encoder_read_byte_L(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 80071e6:	2100      	movs	r1, #0
 80071e8:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80071ec:	f7ff ff66 	bl	80070bc <encoder_read_byte_L>
 80071f0:	4603      	mov	r3, r0
 80071f2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80071f6:	ee07 3a90 	vmov	s15, r3
 80071fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071fe:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8007218 <AS5047_DataUpdate+0x64>
 8007202:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007206:	eddf 6a05 	vldr	s13, [pc, #20]	; 800721c <AS5047_DataUpdate+0x68>
 800720a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800720e:	4b05      	ldr	r3, [pc, #20]	; (8007224 <AS5047_DataUpdate+0x70>)
 8007210:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(5);

}
 8007214:	bf00      	nop
 8007216:	bd80      	pop	{r7, pc}
 8007218:	43b40000 	.word	0x43b40000
 800721c:	46800000 	.word	0x46800000
 8007220:	200006d8 	.word	0x200006d8
 8007224:	200006dc 	.word	0x200006dc

08007228 <test_flash>:


const uint32_t start_address = 0x807F000; //bank1 page last start address
const uint32_t end_adress = 0x807FFFF; // bank1 page last end address

void test_flash(void){
 8007228:	b580      	push	{r7, lr}
 800722a:	af00      	add	r7, sp, #0
		  record_out();
 800722c:	f000 f91a 	bl	8007464 <record_out>
		  maze_display();
 8007230:	f00d fdf8 	bl	8014e24 <maze_display>
		  flash_record_init();
 8007234:	f000 f9c2 	bl	80075bc <flash_record_init>
		  record_in();
 8007238:	f000 f858 	bl	80072ec <record_in>
}
 800723c:	bf00      	nop
 800723e:	bd80      	pop	{r7, pc}

08007240 <eraseFlash>:


void eraseFlash( void )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_PAGES;	// select page
 8007246:	2300      	movs	r3, #0
 8007248:	60bb      	str	r3, [r7, #8]
	erase.Banks = FLASH_BANK_1;		       // set bank1
 800724a:	2301      	movs	r3, #1
 800724c:	60fb      	str	r3, [r7, #12]
	erase.Page = 254;// set page254(127)
 800724e:	23fe      	movs	r3, #254	; 0xfe
 8007250:	613b      	str	r3, [r7, #16]
	erase.NbPages = 1;//delete page
 8007252:	2301      	movs	r3, #1
 8007254:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 8007256:	2300      	movs	r3, #0
 8007258:	607b      	str	r3, [r7, #4]

	HAL_FLASHEx_Erase(&erase, &pageError);	// erase sector
 800725a:	1d3a      	adds	r2, r7, #4
 800725c:	f107 0308 	add.w	r3, r7, #8
 8007260:	4611      	mov	r1, r2
 8007262:	4618      	mov	r0, r3
 8007264:	f014 fc8c 	bl	801bb80 <HAL_FLASHEx_Erase>

//	for (int i=0;i<10;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 8007268:	bf00      	nop
 800726a:	3718      	adds	r7, #24
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <writeFlash>:


void writeFlash(uint32_t address, uint64_t *data, uint32_t size,uint8_t erasemode)
{
 8007270:	b5b0      	push	{r4, r5, r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
 800727c:	70fb      	strb	r3, [r7, #3]
	HAL_FLASH_Unlock();		// unlock flash
 800727e:	f014 fb93 	bl	801b9a8 <HAL_FLASH_Unlock>
	if(erasemode==1){eraseFlash();}
 8007282:	78fb      	ldrb	r3, [r7, #3]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d101      	bne.n	800728c <writeFlash+0x1c>
 8007288:	f7ff ffda 	bl	8007240 <eraseFlash>

	for ( uint32_t add = address; add < (address + size); add+=8 ){
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	617b      	str	r3, [r7, #20]
 8007290:	e00f      	b.n	80072b2 <writeFlash+0x42>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, add, (uint64_t *)data); // write byte
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	17da      	asrs	r2, r3, #31
 8007296:	461c      	mov	r4, r3
 8007298:	4615      	mov	r5, r2
 800729a:	4622      	mov	r2, r4
 800729c:	462b      	mov	r3, r5
 800729e:	6979      	ldr	r1, [r7, #20]
 80072a0:	2000      	movs	r0, #0
 80072a2:	f014 fb2b 	bl	801b8fc <HAL_FLASH_Program>
		data=data+4;  // add data pointer
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	3320      	adds	r3, #32
 80072aa:	60bb      	str	r3, [r7, #8]
	for ( uint32_t add = address; add < (address + size); add+=8 ){
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	3308      	adds	r3, #8
 80072b0:	617b      	str	r3, [r7, #20]
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4413      	add	r3, r2
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d3e9      	bcc.n	8007292 <writeFlash+0x22>
	}

	HAL_FLASH_Lock();		// lock flash
 80072be:	f014 fb95 	bl	801b9ec <HAL_FLASH_Lock>

}
 80072c2:	bf00      	nop
 80072c4:	3718      	adds	r7, #24
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bdb0      	pop	{r4, r5, r7, pc}

080072ca <loadFlash>:

void loadFlash(uint32_t address, uint64_t *data, uint32_t size )
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b084      	sub	sp, #16
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	60f8      	str	r0, [r7, #12]
 80072d2:	60b9      	str	r1, [r7, #8]
 80072d4:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*)address,size); // copy data
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	4619      	mov	r1, r3
 80072dc:	68b8      	ldr	r0, [r7, #8]
 80072de:	f019 f80d 	bl	80202fc <memcpy>

}
 80072e2:	bf00      	nop
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
	...

080072ec <record_in>:


void record_in(void) {
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
	int t = 0;
 80072f2:	2300      	movs	r3, #0
 80072f4:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 80072f6:	4b58      	ldr	r3, [pc, #352]	; (8007458 <record_in+0x16c>)
 80072f8:	603b      	str	r3, [r7, #0]

	while (t <= 14) {
 80072fa:	e017      	b.n	800732c <record_in+0x40>
		record.row[t] = wall.row[t];
 80072fc:	4a57      	ldr	r2, [pc, #348]	; (800745c <record_in+0x170>)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8007304:	4a56      	ldr	r2, [pc, #344]	; (8007460 <record_in+0x174>)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		record.column[t] = wall.column[t];
 800730c:	4a53      	ldr	r2, [pc, #332]	; (800745c <record_in+0x170>)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	330c      	adds	r3, #12
 8007312:	005b      	lsls	r3, r3, #1
 8007314:	4413      	add	r3, r2
 8007316:	88d9      	ldrh	r1, [r3, #6]
 8007318:	4a51      	ldr	r2, [pc, #324]	; (8007460 <record_in+0x174>)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	330c      	adds	r3, #12
 800731e:	005b      	lsls	r3, r3, #1
 8007320:	4413      	add	r3, r2
 8007322:	460a      	mov	r2, r1
 8007324:	80da      	strh	r2, [r3, #6]
		t++;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	3301      	adds	r3, #1
 800732a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b0e      	cmp	r3, #14
 8007330:	dde4      	ble.n	80072fc <record_in+0x10>
	}
	t = 0;
 8007332:	2300      	movs	r3, #0
 8007334:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007336:	e01c      	b.n	8007372 <record_in+0x86>
		record.row_look[t] = wall.row_look[t];
 8007338:	4a48      	ldr	r2, [pc, #288]	; (800745c <record_in+0x170>)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	331c      	adds	r3, #28
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	4413      	add	r3, r2
 8007342:	8899      	ldrh	r1, [r3, #4]
 8007344:	4a46      	ldr	r2, [pc, #280]	; (8007460 <record_in+0x174>)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	331c      	adds	r3, #28
 800734a:	005b      	lsls	r3, r3, #1
 800734c:	4413      	add	r3, r2
 800734e:	460a      	mov	r2, r1
 8007350:	809a      	strh	r2, [r3, #4]
		record.column_look[t] = wall.column_look[t];
 8007352:	4a42      	ldr	r2, [pc, #264]	; (800745c <record_in+0x170>)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	332c      	adds	r3, #44	; 0x2c
 8007358:	005b      	lsls	r3, r3, #1
 800735a:	4413      	add	r3, r2
 800735c:	8859      	ldrh	r1, [r3, #2]
 800735e:	4a40      	ldr	r2, [pc, #256]	; (8007460 <record_in+0x174>)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	332c      	adds	r3, #44	; 0x2c
 8007364:	005b      	lsls	r3, r3, #1
 8007366:	4413      	add	r3, r2
 8007368:	460a      	mov	r2, r1
 800736a:	805a      	strh	r2, [r3, #2]
		t++;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	3301      	adds	r3, #1
 8007370:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b0e      	cmp	r3, #14
 8007376:	dddf      	ble.n	8007338 <record_in+0x4c>
	}
	t = 0;
 8007378:	2300      	movs	r3, #0
 800737a:	607b      	str	r3, [r7, #4]

	writeFlash(address, (uint64_t*) record.row[0], 1, ON);
 800737c:	4b38      	ldr	r3, [pc, #224]	; (8007460 <record_in+0x174>)
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	4619      	mov	r1, r3
 8007382:	2301      	movs	r3, #1
 8007384:	2201      	movs	r2, #1
 8007386:	6838      	ldr	r0, [r7, #0]
 8007388:	f7ff ff72 	bl	8007270 <writeFlash>
	address+=16;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	3310      	adds	r3, #16
 8007390:	603b      	str	r3, [r7, #0]
	t=1;
 8007392:	2301      	movs	r3, #1
 8007394:	607b      	str	r3, [r7, #4]

	while (t <= 14) {
 8007396:	e00f      	b.n	80073b8 <record_in+0xcc>
	writeFlash(address, (uint64_t*) record.row[t], 1, OFF);
 8007398:	4a31      	ldr	r2, [pc, #196]	; (8007460 <record_in+0x174>)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073a0:	4619      	mov	r1, r3
 80073a2:	2300      	movs	r3, #0
 80073a4:	2201      	movs	r2, #1
 80073a6:	6838      	ldr	r0, [r7, #0]
 80073a8:	f7ff ff62 	bl	8007270 <writeFlash>
	address+=16;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	3310      	adds	r3, #16
 80073b0:	603b      	str	r3, [r7, #0]
	t++;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	3301      	adds	r3, #1
 80073b6:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2b0e      	cmp	r3, #14
 80073bc:	ddec      	ble.n	8007398 <record_in+0xac>
	}

	t=0;
 80073be:	2300      	movs	r3, #0
 80073c0:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80073c2:	e011      	b.n	80073e8 <record_in+0xfc>
	writeFlash(address, (uint64_t*) record.column[t], 1, OFF);
 80073c4:	4a26      	ldr	r2, [pc, #152]	; (8007460 <record_in+0x174>)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	330c      	adds	r3, #12
 80073ca:	005b      	lsls	r3, r3, #1
 80073cc:	4413      	add	r3, r2
 80073ce:	88db      	ldrh	r3, [r3, #6]
 80073d0:	4619      	mov	r1, r3
 80073d2:	2300      	movs	r3, #0
 80073d4:	2201      	movs	r2, #1
 80073d6:	6838      	ldr	r0, [r7, #0]
 80073d8:	f7ff ff4a 	bl	8007270 <writeFlash>
	address+=16;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	3310      	adds	r3, #16
 80073e0:	603b      	str	r3, [r7, #0]
	t++;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	3301      	adds	r3, #1
 80073e6:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b0e      	cmp	r3, #14
 80073ec:	ddea      	ble.n	80073c4 <record_in+0xd8>
	}

	t=0;
 80073ee:	2300      	movs	r3, #0
 80073f0:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80073f2:	e011      	b.n	8007418 <record_in+0x12c>
	writeFlash(address, (uint64_t*) record.row_look[t], 1, OFF);
 80073f4:	4a1a      	ldr	r2, [pc, #104]	; (8007460 <record_in+0x174>)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	331c      	adds	r3, #28
 80073fa:	005b      	lsls	r3, r3, #1
 80073fc:	4413      	add	r3, r2
 80073fe:	889b      	ldrh	r3, [r3, #4]
 8007400:	4619      	mov	r1, r3
 8007402:	2300      	movs	r3, #0
 8007404:	2201      	movs	r2, #1
 8007406:	6838      	ldr	r0, [r7, #0]
 8007408:	f7ff ff32 	bl	8007270 <writeFlash>
	address+=16;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	3310      	adds	r3, #16
 8007410:	603b      	str	r3, [r7, #0]
	t++;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	3301      	adds	r3, #1
 8007416:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b0e      	cmp	r3, #14
 800741c:	ddea      	ble.n	80073f4 <record_in+0x108>
	}

	t=0;
 800741e:	2300      	movs	r3, #0
 8007420:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007422:	e011      	b.n	8007448 <record_in+0x15c>
	writeFlash(address, (uint64_t*) record.column_look[t], 1, OFF);
 8007424:	4a0e      	ldr	r2, [pc, #56]	; (8007460 <record_in+0x174>)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	332c      	adds	r3, #44	; 0x2c
 800742a:	005b      	lsls	r3, r3, #1
 800742c:	4413      	add	r3, r2
 800742e:	885b      	ldrh	r3, [r3, #2]
 8007430:	4619      	mov	r1, r3
 8007432:	2300      	movs	r3, #0
 8007434:	2201      	movs	r2, #1
 8007436:	6838      	ldr	r0, [r7, #0]
 8007438:	f7ff ff1a 	bl	8007270 <writeFlash>
	address+=16;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	3310      	adds	r3, #16
 8007440:	603b      	str	r3, [r7, #0]
	t++;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	3301      	adds	r3, #1
 8007446:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b0e      	cmp	r3, #14
 800744c:	ddea      	ble.n	8007424 <record_in+0x138>

//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 800744e:	bf00      	nop
 8007450:	bf00      	nop
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	0807f000 	.word	0x0807f000
 800745c:	20000c3c 	.word	0x20000c3c
 8007460:	20000cb4 	.word	0x20000cb4

08007464 <record_out>:


void record_out(void) {
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

	int t=0;
 800746a:	2300      	movs	r3, #0
 800746c:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 800746e:	4b50      	ldr	r3, [pc, #320]	; (80075b0 <record_out+0x14c>)
 8007470:	603b      	str	r3, [r7, #0]
	while (t <= 14) {
 8007472:	e00e      	b.n	8007492 <record_out+0x2e>
	loadFlash(address, (uint64_t*)&record.row[t], 2);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	005b      	lsls	r3, r3, #1
 8007478:	4a4e      	ldr	r2, [pc, #312]	; (80075b4 <record_out+0x150>)
 800747a:	4413      	add	r3, r2
 800747c:	2202      	movs	r2, #2
 800747e:	4619      	mov	r1, r3
 8007480:	6838      	ldr	r0, [r7, #0]
 8007482:	f7ff ff22 	bl	80072ca <loadFlash>
	address+=16;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	3310      	adds	r3, #16
 800748a:	603b      	str	r3, [r7, #0]
	t++;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	3301      	adds	r3, #1
 8007490:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2b0e      	cmp	r3, #14
 8007496:	dded      	ble.n	8007474 <record_out+0x10>
	}

	t=0;
 8007498:	2300      	movs	r3, #0
 800749a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800749c:	e010      	b.n	80074c0 <record_out+0x5c>
	loadFlash(address, (uint64_t*)&record.column[t], 2);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	330c      	adds	r3, #12
 80074a2:	005b      	lsls	r3, r3, #1
 80074a4:	4a43      	ldr	r2, [pc, #268]	; (80075b4 <record_out+0x150>)
 80074a6:	4413      	add	r3, r2
 80074a8:	3306      	adds	r3, #6
 80074aa:	2202      	movs	r2, #2
 80074ac:	4619      	mov	r1, r3
 80074ae:	6838      	ldr	r0, [r7, #0]
 80074b0:	f7ff ff0b 	bl	80072ca <loadFlash>
	address+=16;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	3310      	adds	r3, #16
 80074b8:	603b      	str	r3, [r7, #0]
	t++;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	3301      	adds	r3, #1
 80074be:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b0e      	cmp	r3, #14
 80074c4:	ddeb      	ble.n	800749e <record_out+0x3a>
	}

	t=0;
 80074c6:	2300      	movs	r3, #0
 80074c8:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80074ca:	e010      	b.n	80074ee <record_out+0x8a>
		loadFlash(address, (uint64_t*)&record.row_look[t], 2);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	331c      	adds	r3, #28
 80074d0:	005b      	lsls	r3, r3, #1
 80074d2:	4a38      	ldr	r2, [pc, #224]	; (80075b4 <record_out+0x150>)
 80074d4:	4413      	add	r3, r2
 80074d6:	3304      	adds	r3, #4
 80074d8:	2202      	movs	r2, #2
 80074da:	4619      	mov	r1, r3
 80074dc:	6838      	ldr	r0, [r7, #0]
 80074de:	f7ff fef4 	bl	80072ca <loadFlash>
		address+=16;
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	3310      	adds	r3, #16
 80074e6:	603b      	str	r3, [r7, #0]
		t++;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	3301      	adds	r3, #1
 80074ec:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2b0e      	cmp	r3, #14
 80074f2:	ddeb      	ble.n	80074cc <record_out+0x68>
	}

	t=0;
 80074f4:	2300      	movs	r3, #0
 80074f6:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80074f8:	e010      	b.n	800751c <record_out+0xb8>
		loadFlash(address, (uint64_t*)&record.column_look[t], 2);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	332c      	adds	r3, #44	; 0x2c
 80074fe:	005b      	lsls	r3, r3, #1
 8007500:	4a2c      	ldr	r2, [pc, #176]	; (80075b4 <record_out+0x150>)
 8007502:	4413      	add	r3, r2
 8007504:	3302      	adds	r3, #2
 8007506:	2202      	movs	r2, #2
 8007508:	4619      	mov	r1, r3
 800750a:	6838      	ldr	r0, [r7, #0]
 800750c:	f7ff fedd 	bl	80072ca <loadFlash>
		address+=16;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	3310      	adds	r3, #16
 8007514:	603b      	str	r3, [r7, #0]
		t++;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	3301      	adds	r3, #1
 800751a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b0e      	cmp	r3, #14
 8007520:	ddeb      	ble.n	80074fa <record_out+0x96>
//			sizeof(record.column));
//	loadFlash(start_address + 2 * sizeof(record.row),
//			(uint64_t*) record.row_look, sizeof(record.row_look));
//	loadFlash(start_address + 3 * sizeof(record.row),
//			(uint64_t*) record.column_look, sizeof(record.column_look));
	t = 0;
 8007522:	2300      	movs	r3, #0
 8007524:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007526:	e017      	b.n	8007558 <record_out+0xf4>
		wall.row[t] = record.row[t];
 8007528:	4a22      	ldr	r2, [pc, #136]	; (80075b4 <record_out+0x150>)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8007530:	4a21      	ldr	r2, [pc, #132]	; (80075b8 <record_out+0x154>)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = record.column[t];
 8007538:	4a1e      	ldr	r2, [pc, #120]	; (80075b4 <record_out+0x150>)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	330c      	adds	r3, #12
 800753e:	005b      	lsls	r3, r3, #1
 8007540:	4413      	add	r3, r2
 8007542:	88d9      	ldrh	r1, [r3, #6]
 8007544:	4a1c      	ldr	r2, [pc, #112]	; (80075b8 <record_out+0x154>)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	330c      	adds	r3, #12
 800754a:	005b      	lsls	r3, r3, #1
 800754c:	4413      	add	r3, r2
 800754e:	460a      	mov	r2, r1
 8007550:	80da      	strh	r2, [r3, #6]
		t++;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	3301      	adds	r3, #1
 8007556:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b0e      	cmp	r3, #14
 800755c:	dde4      	ble.n	8007528 <record_out+0xc4>
	}
	t = 0;
 800755e:	2300      	movs	r3, #0
 8007560:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007562:	e01c      	b.n	800759e <record_out+0x13a>
		wall.row_look[t] = record.row_look[t];
 8007564:	4a13      	ldr	r2, [pc, #76]	; (80075b4 <record_out+0x150>)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	331c      	adds	r3, #28
 800756a:	005b      	lsls	r3, r3, #1
 800756c:	4413      	add	r3, r2
 800756e:	8899      	ldrh	r1, [r3, #4]
 8007570:	4a11      	ldr	r2, [pc, #68]	; (80075b8 <record_out+0x154>)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	331c      	adds	r3, #28
 8007576:	005b      	lsls	r3, r3, #1
 8007578:	4413      	add	r3, r2
 800757a:	460a      	mov	r2, r1
 800757c:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = record.column_look[t];
 800757e:	4a0d      	ldr	r2, [pc, #52]	; (80075b4 <record_out+0x150>)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	332c      	adds	r3, #44	; 0x2c
 8007584:	005b      	lsls	r3, r3, #1
 8007586:	4413      	add	r3, r2
 8007588:	8859      	ldrh	r1, [r3, #2]
 800758a:	4a0b      	ldr	r2, [pc, #44]	; (80075b8 <record_out+0x154>)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	332c      	adds	r3, #44	; 0x2c
 8007590:	005b      	lsls	r3, r3, #1
 8007592:	4413      	add	r3, r2
 8007594:	460a      	mov	r2, r1
 8007596:	805a      	strh	r2, [r3, #2]
		t++;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	3301      	adds	r3, #1
 800759c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2b0e      	cmp	r3, #14
 80075a2:	dddf      	ble.n	8007564 <record_out+0x100>
	}

	t = 0;
 80075a4:	2300      	movs	r3, #0
 80075a6:	607b      	str	r3, [r7, #4]

}
 80075a8:	bf00      	nop
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	0807f000 	.word	0x0807f000
 80075b4:	20000cb4 	.word	0x20000cb4
 80075b8:	20000c3c 	.word	0x20000c3c

080075bc <flash_record_init>:

void flash_record_init(void){
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
	int t = 0;
 80075c2:	2300      	movs	r3, #0
 80075c4:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80075c6:	e013      	b.n	80075f0 <flash_record_init+0x34>
		wall.row[t] = 0b111100011;
 80075c8:	4a1e      	ldr	r2, [pc, #120]	; (8007644 <flash_record_init+0x88>)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f240 11e3 	movw	r1, #483	; 0x1e3
 80075d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = t*2;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	005b      	lsls	r3, r3, #1
 80075da:	b299      	uxth	r1, r3
 80075dc:	4a19      	ldr	r2, [pc, #100]	; (8007644 <flash_record_init+0x88>)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	330c      	adds	r3, #12
 80075e2:	005b      	lsls	r3, r3, #1
 80075e4:	4413      	add	r3, r2
 80075e6:	460a      	mov	r2, r1
 80075e8:	80da      	strh	r2, [r3, #6]
		t++;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	3301      	adds	r3, #1
 80075ee:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b0e      	cmp	r3, #14
 80075f4:	dde8      	ble.n	80075c8 <flash_record_init+0xc>
	}
	t = 0;
 80075f6:	2300      	movs	r3, #0
 80075f8:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80075fa:	e018      	b.n	800762e <flash_record_init+0x72>
		wall.row_look[t] = t*4;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	b29b      	uxth	r3, r3
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	b299      	uxth	r1, r3
 8007604:	4a0f      	ldr	r2, [pc, #60]	; (8007644 <flash_record_init+0x88>)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	331c      	adds	r3, #28
 800760a:	005b      	lsls	r3, r3, #1
 800760c:	4413      	add	r3, r2
 800760e:	460a      	mov	r2, r1
 8007610:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = t*8;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	b29b      	uxth	r3, r3
 8007616:	00db      	lsls	r3, r3, #3
 8007618:	b299      	uxth	r1, r3
 800761a:	4a0a      	ldr	r2, [pc, #40]	; (8007644 <flash_record_init+0x88>)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	332c      	adds	r3, #44	; 0x2c
 8007620:	005b      	lsls	r3, r3, #1
 8007622:	4413      	add	r3, r2
 8007624:	460a      	mov	r2, r1
 8007626:	805a      	strh	r2, [r3, #2]
		t++;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	3301      	adds	r3, #1
 800762c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2b0e      	cmp	r3, #14
 8007632:	dde3      	ble.n	80075fc <flash_record_init+0x40>
	}

}
 8007634:	bf00      	nop
 8007636:	bf00      	nop
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	20000c3c 	.word	0x20000c3c

08007648 <gyro_read_byte>:

GYRO_DATA gyro;

uint8_t gyro_read_byte(uint8_t reg)

{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	4603      	mov	r3, r0
 8007650:	71fb      	strb	r3, [r7, #7]

	uint8_t ret, val;

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007652:	2200      	movs	r2, #0
 8007654:	2110      	movs	r1, #16
 8007656:	4810      	ldr	r0, [pc, #64]	; (8007698 <gyro_read_byte+0x50>)
 8007658:	f014 fd3a 	bl	801c0d0 <HAL_GPIO_WritePin>

	ret = reg | 0x80;//先頭のbitを1に
 800765c:	79fb      	ldrb	r3, [r7, #7]
 800765e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007662:	b2db      	uxtb	r3, r3
 8007664:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 8007666:	f107 010f 	add.w	r1, r7, #15
 800766a:	2364      	movs	r3, #100	; 0x64
 800766c:	2201      	movs	r2, #1
 800766e:	480b      	ldr	r0, [pc, #44]	; (800769c <gyro_read_byte+0x54>)
 8007670:	f015 fe11 	bl	801d296 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &val, 1, 100);
 8007674:	f107 010e 	add.w	r1, r7, #14
 8007678:	2364      	movs	r3, #100	; 0x64
 800767a:	2201      	movs	r2, #1
 800767c:	4807      	ldr	r0, [pc, #28]	; (800769c <gyro_read_byte+0x54>)
 800767e:	f015 ff78 	bl	801d572 <HAL_SPI_Receive>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007682:	2201      	movs	r2, #1
 8007684:	2110      	movs	r1, #16
 8007686:	4804      	ldr	r0, [pc, #16]	; (8007698 <gyro_read_byte+0x50>)
 8007688:	f014 fd22 	bl	801c0d0 <HAL_GPIO_WritePin>

	return val;
 800768c:	7bbb      	ldrb	r3, [r7, #14]

}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	48000800 	.word	0x48000800
 800769c:	2000edd0 	.word	0x2000edd0

080076a0 <gyro_write_byte>:

void gyro_write_byte(uint8_t reg, uint8_t val)

{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	4603      	mov	r3, r0
 80076a8:	460a      	mov	r2, r1
 80076aa:	71fb      	strb	r3, [r7, #7]
 80076ac:	4613      	mov	r3, r2
 80076ae:	71bb      	strb	r3, [r7, #6]

	uint8_t ret;

	ret = reg & 0x7F;//先頭のbitを0に
 80076b0:	79fb      	ldrb	r3, [r7, #7]
 80076b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80076ba:	2200      	movs	r2, #0
 80076bc:	2110      	movs	r1, #16
 80076be:	480c      	ldr	r0, [pc, #48]	; (80076f0 <gyro_write_byte+0x50>)
 80076c0:	f014 fd06 	bl	801c0d0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 80076c4:	f107 010f 	add.w	r1, r7, #15
 80076c8:	2364      	movs	r3, #100	; 0x64
 80076ca:	2201      	movs	r2, #1
 80076cc:	4809      	ldr	r0, [pc, #36]	; (80076f4 <gyro_write_byte+0x54>)
 80076ce:	f015 fde2 	bl	801d296 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, &val, 1, 100);
 80076d2:	1db9      	adds	r1, r7, #6
 80076d4:	2364      	movs	r3, #100	; 0x64
 80076d6:	2201      	movs	r2, #1
 80076d8:	4806      	ldr	r0, [pc, #24]	; (80076f4 <gyro_write_byte+0x54>)
 80076da:	f015 fddc 	bl	801d296 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80076de:	2201      	movs	r2, #1
 80076e0:	2110      	movs	r1, #16
 80076e2:	4803      	ldr	r0, [pc, #12]	; (80076f0 <gyro_write_byte+0x50>)
 80076e4:	f014 fcf4 	bl	801c0d0 <HAL_GPIO_WritePin>

}
 80076e8:	bf00      	nop
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	48000800 	.word	0x48000800
 80076f4:	2000edd0 	.word	0x2000edd0

080076f8 <pl_gyro_init>:

void pl_gyro_init(void)

{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80076fe:	2300      	movs	r3, #0
 8007700:	71fb      	strb	r3, [r7, #7]

// check WHO_AM_I (0x75)

	who_am_i = gyro_read_byte(0x75);
 8007702:	2075      	movs	r0, #117	; 0x75
 8007704:	f7ff ffa0 	bl	8007648 <gyro_read_byte>
 8007708:	4603      	mov	r3, r0
 800770a:	71fb      	strb	r3, [r7, #7]

// who am i = 0x12

	printf("\r\nwho_am_i = 0x%x\r\n", who_am_i);
 800770c:	79fb      	ldrb	r3, [r7, #7]
 800770e:	4619      	mov	r1, r3
 8007710:	481b      	ldr	r0, [pc, #108]	; (8007780 <pl_gyro_init+0x88>)
 8007712:	f019 fa73 	bl	8020bfc <iprintf>

// recheck

	if (who_am_i != 0x98) {
 8007716:	79fb      	ldrb	r3, [r7, #7]
 8007718:	2b98      	cmp	r3, #152	; 0x98
 800771a:	d00e      	beq.n	800773a <pl_gyro_init+0x42>

		HAL_Delay(100);
 800771c:	2064      	movs	r0, #100	; 0x64
 800771e:	f011 fb1b 	bl	8018d58 <HAL_Delay>

		who_am_i = gyro_read_byte(0x75);
 8007722:	2075      	movs	r0, #117	; 0x75
 8007724:	f7ff ff90 	bl	8007648 <gyro_read_byte>
 8007728:	4603      	mov	r3, r0
 800772a:	71fb      	strb	r3, [r7, #7]

		if (who_am_i != 0x98) {
 800772c:	79fb      	ldrb	r3, [r7, #7]
 800772e:	2b98      	cmp	r3, #152	; 0x98
 8007730:	d003      	beq.n	800773a <pl_gyro_init+0x42>

			while (1) {

				printf("gyro_error\r");
 8007732:	4814      	ldr	r0, [pc, #80]	; (8007784 <pl_gyro_init+0x8c>)
 8007734:	f019 fa62 	bl	8020bfc <iprintf>
 8007738:	e7fb      	b.n	8007732 <pl_gyro_init+0x3a>

// set pwr might

// PWR_MIGHT_1 0x6B

	gyro_write_byte(0x6B, 0x00);
 800773a:	2100      	movs	r1, #0
 800773c:	206b      	movs	r0, #107	; 0x6b
 800773e:	f7ff ffaf 	bl	80076a0 <gyro_write_byte>

	HAL_Delay(50);
 8007742:	2032      	movs	r0, #50	; 0x32
 8007744:	f011 fb08 	bl	8018d58 <HAL_Delay>

// PWR_MIGHT_2 0x6C

	gyro_write_byte(0x6C, 0x00);
 8007748:	2100      	movs	r1, #0
 800774a:	206c      	movs	r0, #108	; 0x6c
 800774c:	f7ff ffa8 	bl	80076a0 <gyro_write_byte>

	HAL_Delay(50);
 8007750:	2032      	movs	r0, #50	; 0x32
 8007752:	f011 fb01 	bl	8018d58 <HAL_Delay>

// set gyro config

// GYRO_CONFIG 0x1B

	gyro_write_byte(0x1B, 0x18); // use 2000 dps
 8007756:	2118      	movs	r1, #24
 8007758:	201b      	movs	r0, #27
 800775a:	f7ff ffa1 	bl	80076a0 <gyro_write_byte>

	HAL_Delay(50);
 800775e:	2032      	movs	r0, #50	; 0x32
 8007760:	f011 fafa 	bl	8018d58 <HAL_Delay>

// ACCEL_CONFIG 0x1C

	gyro_write_byte(0x1C, 0x18); // use pm 16g
 8007764:	2118      	movs	r1, #24
 8007766:	201c      	movs	r0, #28
 8007768:	f7ff ff9a 	bl	80076a0 <gyro_write_byte>

	HAL_Delay(50);
 800776c:	2032      	movs	r0, #50	; 0x32
 800776e:	f011 faf3 	bl	8018d58 <HAL_Delay>

	//gyro_write_byte(0x1D, 0x08);
	//HAL_Delay(50);

	set_flag = 1;
 8007772:	4b05      	ldr	r3, [pc, #20]	; (8007788 <pl_gyro_init+0x90>)
 8007774:	2201      	movs	r2, #1
 8007776:	701a      	strb	r2, [r3, #0]

}
 8007778:	bf00      	nop
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	080234a0 	.word	0x080234a0
 8007784:	080234b4 	.word	0x080234b4
 8007788:	200006e0 	.word	0x200006e0

0800778c <ICM20602_GYRO_READ>:

float ICM20602_GYRO_READ(uint8_t H_reg)

{
 800778c:	b590      	push	{r4, r7, lr}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	4603      	mov	r3, r0
 8007794:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8007796:	79fb      	ldrb	r3, [r7, #7]
 8007798:	4618      	mov	r0, r3
 800779a:	f7ff ff55 	bl	8007648 <gyro_read_byte>
 800779e:	4603      	mov	r3, r0
 80077a0:	021b      	lsls	r3, r3, #8
 80077a2:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 80077a4:	79fb      	ldrb	r3, [r7, #7]
 80077a6:	3301      	adds	r3, #1
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7ff ff4c 	bl	8007648 <gyro_read_byte>
 80077b0:	4603      	mov	r3, r0
 80077b2:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 80077b4:	4323      	orrs	r3, r4
 80077b6:	81fb      	strh	r3, [r7, #14]

	float omega = (float) (data / 16.4f);
 80077b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80077bc:	ee07 3a90 	vmov	s15, r3
 80077c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077c4:	eddf 6a06 	vldr	s13, [pc, #24]	; 80077e0 <ICM20602_GYRO_READ+0x54>
 80077c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80077cc:	edc7 7a02 	vstr	s15, [r7, #8]

	return omega;
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	ee07 3a90 	vmov	s15, r3

}
 80077d6:	eeb0 0a67 	vmov.f32	s0, s15
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd90      	pop	{r4, r7, pc}
 80077e0:	41833333 	.word	0x41833333

080077e4 <ICM20602_ACCEL_READ>:

float ICM20602_ACCEL_READ(uint8_t H_reg)

{
 80077e4:	b590      	push	{r4, r7, lr}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	4603      	mov	r3, r0
 80077ec:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 80077ee:	79fb      	ldrb	r3, [r7, #7]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7ff ff29 	bl	8007648 <gyro_read_byte>
 80077f6:	4603      	mov	r3, r0
 80077f8:	021b      	lsls	r3, r3, #8
 80077fa:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 80077fc:	79fb      	ldrb	r3, [r7, #7]
 80077fe:	3301      	adds	r3, #1
 8007800:	b2db      	uxtb	r3, r3
 8007802:	4618      	mov	r0, r3
 8007804:	f7ff ff20 	bl	8007648 <gyro_read_byte>
 8007808:	4603      	mov	r3, r0
 800780a:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 800780c:	4323      	orrs	r3, r4
 800780e:	81fb      	strh	r3, [r7, #14]

	float accel = (float) (data / 2048.0f);
 8007810:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007814:	ee07 3a90 	vmov	s15, r3
 8007818:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800781c:	eddf 6a06 	vldr	s13, [pc, #24]	; 8007838 <ICM20602_ACCEL_READ+0x54>
 8007820:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007824:	edc7 7a02 	vstr	s15, [r7, #8]

	return accel;
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	ee07 3a90 	vmov	s15, r3

}
 800782e:	eeb0 0a67 	vmov.f32	s0, s15
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	bd90      	pop	{r4, r7, pc}
 8007838:	45000000 	.word	0x45000000

0800783c <ICM20602_DataUpdate>:

void ICM20602_DataUpdate(void)

{
 800783c:	b580      	push	{r7, lr}
 800783e:	af00      	add	r7, sp, #0

	if (set_flag == 1) {
 8007840:	4b0e      	ldr	r3, [pc, #56]	; (800787c <ICM20602_DataUpdate+0x40>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	2b01      	cmp	r3, #1
 8007846:	d117      	bne.n	8007878 <ICM20602_DataUpdate+0x3c>

// get yawrate

		//gyro.omega_y = ICM20602_GYRO_READ(0x43);

		gyro.omega_x = ICM20602_GYRO_READ(0x45);
 8007848:	2045      	movs	r0, #69	; 0x45
 800784a:	f7ff ff9f 	bl	800778c <ICM20602_GYRO_READ>
 800784e:	eef0 7a40 	vmov.f32	s15, s0
 8007852:	4b0b      	ldr	r3, [pc, #44]	; (8007880 <ICM20602_DataUpdate+0x44>)
 8007854:	edc3 7a00 	vstr	s15, [r3]

		gyro.omega_z = ICM20602_GYRO_READ(0x47);
 8007858:	2047      	movs	r0, #71	; 0x47
 800785a:	f7ff ff97 	bl	800778c <ICM20602_GYRO_READ>
 800785e:	eef0 7a40 	vmov.f32	s15, s0
 8007862:	4b07      	ldr	r3, [pc, #28]	; (8007880 <ICM20602_DataUpdate+0x44>)
 8007864:	edc3 7a02 	vstr	s15, [r3, #8]

// get accel

		gyro.accel_y = ICM20602_ACCEL_READ(0x3B);
 8007868:	203b      	movs	r0, #59	; 0x3b
 800786a:	f7ff ffbb 	bl	80077e4 <ICM20602_ACCEL_READ>
 800786e:	eef0 7a40 	vmov.f32	s15, s0
 8007872:	4b03      	ldr	r3, [pc, #12]	; (8007880 <ICM20602_DataUpdate+0x44>)
 8007874:	edc3 7a04 	vstr	s15, [r3, #16]

		//gyro.accel_z = ICM20602_ACCEL_READ(0x3F);

	}

}
 8007878:	bf00      	nop
 800787a:	bd80      	pop	{r7, pc}
 800787c:	200006e0 	.word	0x200006e0
 8007880:	200006e4 	.word	0x200006e4

08007884 <pl_motor_init>:
#include "PL_motor.h"
#include "tim.h"
#include "gpio.h"
#include "define.h"

void pl_motor_init(void){
 8007884:	b580      	push	{r7, lr}
 8007886:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim8);//モータ
 8007888:	480f      	ldr	r0, [pc, #60]	; (80078c8 <pl_motor_init+0x44>)
 800788a:	f016 fbc9 	bl	801e020 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim8);//モータ
 800788e:	480e      	ldr	r0, [pc, #56]	; (80078c8 <pl_motor_init+0x44>)
 8007890:	f010 f8ee 	bl	8017a70 <HAL_TIM_PWM_MspInit>
	  HAL_TIM_Base_Start_IT(&htim16);//吸
 8007894:	480d      	ldr	r0, [pc, #52]	; (80078cc <pl_motor_init+0x48>)
 8007896:	f016 fbc3 	bl	801e020 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim16);//吸
 800789a:	480c      	ldr	r0, [pc, #48]	; (80078cc <pl_motor_init+0x48>)
 800789c:	f010 f8e8 	bl	8017a70 <HAL_TIM_PWM_MspInit>

	pl_L_DriveMotor_mode(MOTOR_FRONT);
 80078a0:	2001      	movs	r0, #1
 80078a2:	f000 f81f 	bl	80078e4 <pl_L_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,90);
 80078a6:	4b08      	ldr	r3, [pc, #32]	; (80078c8 <pl_motor_init+0x44>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	225a      	movs	r2, #90	; 0x5a
 80078ac:	63da      	str	r2, [r3, #60]	; 0x3c
	pl_R_DriveMotor_mode(MOTOR_FRONT);
 80078ae:	2001      	movs	r0, #1
 80078b0:	f000 f840 	bl	8007934 <pl_R_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,90);
 80078b4:	4b04      	ldr	r3, [pc, #16]	; (80078c8 <pl_motor_init+0x44>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	225a      	movs	r2, #90	; 0x5a
 80078ba:	635a      	str	r2, [r3, #52]	; 0x34

	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,30);
 80078bc:	4b03      	ldr	r3, [pc, #12]	; (80078cc <pl_motor_init+0x48>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	221e      	movs	r2, #30
 80078c2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80078c4:	bf00      	nop
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	2000eee8 	.word	0x2000eee8
 80078cc:	2000ef34 	.word	0x2000ef34

080078d0 <pl_DriveMotor_standby>:

void pl_DriveMotor_standby(int pin){
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, pin);
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <pl_L_DriveMotor_mode>:

void pl_L_DriveMotor_mode(int l_motor_mode){
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]

switch (l_motor_mode){
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	d819      	bhi.n	8007926 <pl_L_DriveMotor_mode+0x42>
 80078f2:	a201      	add	r2, pc, #4	; (adr r2, 80078f8 <pl_L_DriveMotor_mode+0x14>)
 80078f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f8:	08007925 	.word	0x08007925
 80078fc:	08007909 	.word	0x08007909
 8007900:	08007917 	.word	0x08007917
 8007904:	08007925 	.word	0x08007925
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_RESET);
 8007908:	2200      	movs	r2, #0
 800790a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800790e:	4808      	ldr	r0, [pc, #32]	; (8007930 <pl_L_DriveMotor_mode+0x4c>)
 8007910:	f014 fbde 	bl	801c0d0 <HAL_GPIO_WritePin>
break;
 8007914:	e007      	b.n	8007926 <pl_L_DriveMotor_mode+0x42>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_SET);
 8007916:	2201      	movs	r2, #1
 8007918:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800791c:	4804      	ldr	r0, [pc, #16]	; (8007930 <pl_L_DriveMotor_mode+0x4c>)
 800791e:	f014 fbd7 	bl	801c0d0 <HAL_GPIO_WritePin>
break;
 8007922:	e000      	b.n	8007926 <pl_L_DriveMotor_mode+0x42>
break;
 8007924:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 8007926:	bf00      	nop
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	48000800 	.word	0x48000800

08007934 <pl_R_DriveMotor_mode>:

void pl_R_DriveMotor_mode(int r_motor_mode){
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]

switch (r_motor_mode){
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b03      	cmp	r3, #3
 8007940:	d817      	bhi.n	8007972 <pl_R_DriveMotor_mode+0x3e>
 8007942:	a201      	add	r2, pc, #4	; (adr r2, 8007948 <pl_R_DriveMotor_mode+0x14>)
 8007944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007948:	08007971 	.word	0x08007971
 800794c:	08007959 	.word	0x08007959
 8007950:	08007965 	.word	0x08007965
 8007954:	08007971 	.word	0x08007971
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_SET);
 8007958:	2201      	movs	r2, #1
 800795a:	2180      	movs	r1, #128	; 0x80
 800795c:	4807      	ldr	r0, [pc, #28]	; (800797c <pl_R_DriveMotor_mode+0x48>)
 800795e:	f014 fbb7 	bl	801c0d0 <HAL_GPIO_WritePin>
break;
 8007962:	e006      	b.n	8007972 <pl_R_DriveMotor_mode+0x3e>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_RESET);
 8007964:	2200      	movs	r2, #0
 8007966:	2180      	movs	r1, #128	; 0x80
 8007968:	4804      	ldr	r0, [pc, #16]	; (800797c <pl_R_DriveMotor_mode+0x48>)
 800796a:	f014 fbb1 	bl	801c0d0 <HAL_GPIO_WritePin>
break;
 800796e:	e000      	b.n	8007972 <pl_R_DriveMotor_mode+0x3e>
break;
 8007970:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 8007972:	bf00      	nop
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	48000400 	.word	0x48000400

08007980 <pl_DriveMotor_start>:



void pl_DriveMotor_start(void){
 8007980:	b580      	push	{r7, lr}
 8007982:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8007984:	2108      	movs	r1, #8
 8007986:	4804      	ldr	r0, [pc, #16]	; (8007998 <pl_DriveMotor_start+0x18>)
 8007988:	f016 fc12 	bl	801e1b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800798c:	2100      	movs	r1, #0
 800798e:	4802      	ldr	r0, [pc, #8]	; (8007998 <pl_DriveMotor_start+0x18>)
 8007990:	f016 fc0e 	bl	801e1b0 <HAL_TIM_PWM_Start>
}
 8007994:	bf00      	nop
 8007996:	bd80      	pop	{r7, pc}
 8007998:	2000eee8 	.word	0x2000eee8

0800799c <pl_DriveMotor_stop>:

void pl_DriveMotor_stop(void){
 800799c:	b580      	push	{r7, lr}
 800799e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 80079a0:	2108      	movs	r1, #8
 80079a2:	4804      	ldr	r0, [pc, #16]	; (80079b4 <pl_DriveMotor_stop+0x18>)
 80079a4:	f016 fd10 	bl	801e3c8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 80079a8:	2100      	movs	r1, #0
 80079aa:	4802      	ldr	r0, [pc, #8]	; (80079b4 <pl_DriveMotor_stop+0x18>)
 80079ac:	f016 fd0c 	bl	801e3c8 <HAL_TIM_PWM_Stop>
}
 80079b0:	bf00      	nop
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	2000eee8 	.word	0x2000eee8

080079b8 <pl_DriveMotor_duty>:

void pl_DriveMotor_duty(int duty_l,int duty_r){
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,duty_l);
 80079c2:	4b07      	ldr	r3, [pc, #28]	; (80079e0 <pl_DriveMotor_duty+0x28>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,duty_r);
 80079ca:	4b05      	ldr	r3, [pc, #20]	; (80079e0 <pl_DriveMotor_duty+0x28>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	683a      	ldr	r2, [r7, #0]
 80079d0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80079d2:	bf00      	nop
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	2000eee8 	.word	0x2000eee8

080079e4 <pl_FunMotor_start>:



void pl_FunMotor_start(void){
 80079e4:	b580      	push	{r7, lr}
 80079e6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80079e8:	2100      	movs	r1, #0
 80079ea:	4802      	ldr	r0, [pc, #8]	; (80079f4 <pl_FunMotor_start+0x10>)
 80079ec:	f016 fbe0 	bl	801e1b0 <HAL_TIM_PWM_Start>
}
 80079f0:	bf00      	nop
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	2000ef34 	.word	0x2000ef34

080079f8 <pl_FunMotor_stop>:

void pl_FunMotor_stop(void){
 80079f8:	b580      	push	{r7, lr}
 80079fa:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 80079fc:	2100      	movs	r1, #0
 80079fe:	4802      	ldr	r0, [pc, #8]	; (8007a08 <pl_FunMotor_stop+0x10>)
 8007a00:	f016 fce2 	bl	801e3c8 <HAL_TIM_PWM_Stop>
}
 8007a04:	bf00      	nop
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	2000ef34 	.word	0x2000ef34

08007a0c <pl_FunMotor_duty>:

void pl_FunMotor_duty(float fun_ratio){
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	ed87 0a01 	vstr	s0, [r7, #4]
	int duty_fun=(int)(FUN_MAX_DUTY*fun_ratio);
 8007a16:	edd7 7a01 	vldr	s15, [r7, #4]
 8007a1a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007a50 <pl_FunMotor_duty+0x44>
 8007a1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a26:	ee17 3a90 	vmov	r3, s15
 8007a2a:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim16, FUN_MAX_DUTY);
 8007a2c:	4b09      	ldr	r3, [pc, #36]	; (8007a54 <pl_FunMotor_duty+0x48>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2264      	movs	r2, #100	; 0x64
 8007a32:	62da      	str	r2, [r3, #44]	; 0x2c
 8007a34:	4b07      	ldr	r3, [pc, #28]	; (8007a54 <pl_FunMotor_duty+0x48>)
 8007a36:	2264      	movs	r2, #100	; 0x64
 8007a38:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,duty_fun);
 8007a3a:	4b06      	ldr	r3, [pc, #24]	; (8007a54 <pl_FunMotor_duty+0x48>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	635a      	str	r2, [r3, #52]	; 0x34

}
 8007a42:	bf00      	nop
 8007a44:	3714      	adds	r7, #20
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	42c80000 	.word	0x42c80000
 8007a54:	2000ef34 	.word	0x2000ef34

08007a58 <pl_sensor_init>:
/*******************************************************************/
/*	sensorのinit					(pl_sensor_init)	*/
/*******************************************************************/
/*	sensorを初期設定						*/
/*******************************************************************/
void pl_sensor_init(void){
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	af00      	add	r7, sp, #0
	AD_step=0;
 8007a5c:	4b04      	ldr	r3, [pc, #16]	; (8007a70 <pl_sensor_init+0x18>)
 8007a5e:	2200      	movs	r2, #0
 8007a60:	701a      	strb	r2, [r3, #0]
	//HAL_ADC_Init(&hadc1);
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8007a62:	217f      	movs	r1, #127	; 0x7f
 8007a64:	4803      	ldr	r0, [pc, #12]	; (8007a74 <pl_sensor_init+0x1c>)
 8007a66:	f013 f9f1 	bl	801ae4c <HAL_ADCEx_Calibration_Start>
	//HAL_ADC_ConfigChannel(&hadc1,&sConfig);
}
 8007a6a:	bf00      	nop
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	20000708 	.word	0x20000708
 8007a74:	20000734 	.word	0x20000734

08007a78 <pl_getbatt>:
/*******************************************************************/
/*	電圧の取得			(pl_getbatt)	*/
/*******************************************************************/
/*	戻り値に電圧を返す．						*/
/*******************************************************************/
float pl_getbatt(void){
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
	 float batt;
	 uint16_t battAD;


	HAL_ADC_Start(&hadc1);
 8007a7e:	483c      	ldr	r0, [pc, #240]	; (8007b70 <pl_getbatt+0xf8>)
 8007a80:	f011 fdd2 	bl	8019628 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 8007a84:	2132      	movs	r1, #50	; 0x32
 8007a86:	483a      	ldr	r0, [pc, #232]	; (8007b70 <pl_getbatt+0xf8>)
 8007a88:	f011 fecc 	bl	8019824 <HAL_ADC_PollForConversion>
	battAD = HAL_ADC_GetValue(&hadc1);
 8007a8c:	4838      	ldr	r0, [pc, #224]	; (8007b70 <pl_getbatt+0xf8>)
 8007a8e:	f012 f8e8 	bl	8019c62 <HAL_ADC_GetValue>
 8007a92:	4603      	mov	r3, r0
 8007a94:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 8007a96:	4836      	ldr	r0, [pc, #216]	; (8007b70 <pl_getbatt+0xf8>)
 8007a98:	f011 fe90 	bl	80197bc <HAL_ADC_Stop>
	batt = 3.3 * (float) battAD / 4095 * (10.0 + 10.0) / 10.0*1.15*3.7/3.86;//* 1.2975
 8007a9c:	88fb      	ldrh	r3, [r7, #6]
 8007a9e:	ee07 3a90 	vmov	s15, r3
 8007aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aa6:	ee17 0a90 	vmov	r0, s15
 8007aaa:	f7f8 fd75 	bl	8000598 <__aeabi_f2d>
 8007aae:	a326      	add	r3, pc, #152	; (adr r3, 8007b48 <pl_getbatt+0xd0>)
 8007ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab4:	f7f8 fdc8 	bl	8000648 <__aeabi_dmul>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	460b      	mov	r3, r1
 8007abc:	4610      	mov	r0, r2
 8007abe:	4619      	mov	r1, r3
 8007ac0:	a323      	add	r3, pc, #140	; (adr r3, 8007b50 <pl_getbatt+0xd8>)
 8007ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac6:	f7f8 fee9 	bl	800089c <__aeabi_ddiv>
 8007aca:	4602      	mov	r2, r0
 8007acc:	460b      	mov	r3, r1
 8007ace:	4610      	mov	r0, r2
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	f04f 0200 	mov.w	r2, #0
 8007ad6:	4b27      	ldr	r3, [pc, #156]	; (8007b74 <pl_getbatt+0xfc>)
 8007ad8:	f7f8 fdb6 	bl	8000648 <__aeabi_dmul>
 8007adc:	4602      	mov	r2, r0
 8007ade:	460b      	mov	r3, r1
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	f04f 0200 	mov.w	r2, #0
 8007ae8:	4b23      	ldr	r3, [pc, #140]	; (8007b78 <pl_getbatt+0x100>)
 8007aea:	f7f8 fed7 	bl	800089c <__aeabi_ddiv>
 8007aee:	4602      	mov	r2, r0
 8007af0:	460b      	mov	r3, r1
 8007af2:	4610      	mov	r0, r2
 8007af4:	4619      	mov	r1, r3
 8007af6:	a318      	add	r3, pc, #96	; (adr r3, 8007b58 <pl_getbatt+0xe0>)
 8007af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afc:	f7f8 fda4 	bl	8000648 <__aeabi_dmul>
 8007b00:	4602      	mov	r2, r0
 8007b02:	460b      	mov	r3, r1
 8007b04:	4610      	mov	r0, r2
 8007b06:	4619      	mov	r1, r3
 8007b08:	a315      	add	r3, pc, #84	; (adr r3, 8007b60 <pl_getbatt+0xe8>)
 8007b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0e:	f7f8 fd9b 	bl	8000648 <__aeabi_dmul>
 8007b12:	4602      	mov	r2, r0
 8007b14:	460b      	mov	r3, r1
 8007b16:	4610      	mov	r0, r2
 8007b18:	4619      	mov	r1, r3
 8007b1a:	a313      	add	r3, pc, #76	; (adr r3, 8007b68 <pl_getbatt+0xf0>)
 8007b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b20:	f7f8 febc 	bl	800089c <__aeabi_ddiv>
 8007b24:	4602      	mov	r2, r0
 8007b26:	460b      	mov	r3, r1
 8007b28:	4610      	mov	r0, r2
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	f7f9 f864 	bl	8000bf8 <__aeabi_d2f>
 8007b30:	4603      	mov	r3, r0
 8007b32:	603b      	str	r3, [r7, #0]
return batt;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	ee07 3a90 	vmov	s15, r3
}
 8007b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	f3af 8000 	nop.w
 8007b48:	66666666 	.word	0x66666666
 8007b4c:	400a6666 	.word	0x400a6666
 8007b50:	00000000 	.word	0x00000000
 8007b54:	40affe00 	.word	0x40affe00
 8007b58:	66666666 	.word	0x66666666
 8007b5c:	3ff26666 	.word	0x3ff26666
 8007b60:	9999999a 	.word	0x9999999a
 8007b64:	400d9999 	.word	0x400d9999
 8007b68:	ae147ae1 	.word	0xae147ae1
 8007b6c:	400ee147 	.word	0x400ee147
 8007b70:	20000734 	.word	0x20000734
 8007b74:	40340000 	.word	0x40340000
 8007b78:	40240000 	.word	0x40240000
 8007b7c:	00000000 	.word	0x00000000

08007b80 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 8007b86:	4882      	ldr	r0, [pc, #520]	; (8007d90 <pl_callback_getSensor+0x210>)
 8007b88:	f012 f80a 	bl	8019ba0 <HAL_ADC_Stop_DMA>


	switch (AD_step) {
 8007b8c:	4b81      	ldr	r3, [pc, #516]	; (8007d94 <pl_callback_getSensor+0x214>)
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	2b04      	cmp	r3, #4
 8007b92:	f200 80d9 	bhi.w	8007d48 <pl_callback_getSensor+0x1c8>
 8007b96:	a201      	add	r2, pc, #4	; (adr r2, 8007b9c <pl_callback_getSensor+0x1c>)
 8007b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9c:	08007bb1 	.word	0x08007bb1
 8007ba0:	08007be9 	.word	0x08007be9
 8007ba4:	08007c49 	.word	0x08007c49
 8007ba8:	08007c89 	.word	0x08007c89
 8007bac:	08007d49 	.word	0x08007d49
	case 0:
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin, GPIO_PIN_SET);
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	2102      	movs	r1, #2
 8007bb4:	4878      	ldr	r0, [pc, #480]	; (8007d98 <pl_callback_getSensor+0x218>)
 8007bb6:	f014 fa8b 	bl	801c0d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007bba:	2200      	movs	r2, #0
 8007bbc:	2110      	movs	r1, #16
 8007bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007bc2:	f014 fa85 	bl	801c0d0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007bcc:	4873      	ldr	r0, [pc, #460]	; (8007d9c <pl_callback_getSensor+0x21c>)
 8007bce:	f014 fa7f 	bl	801c0d0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007bd6:	e002      	b.n	8007bde <pl_callback_getSensor+0x5e>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	607b      	str	r3, [r7, #4]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007be4:	ddf8      	ble.n	8007bd8 <pl_callback_getSensor+0x58>
		break;
 8007be6:	e0af      	b.n	8007d48 <pl_callback_getSensor+0x1c8>
	case 1:
		g_sensor_on[0] = g_ADCBuffer[1];
 8007be8:	4b6d      	ldr	r3, [pc, #436]	; (8007da0 <pl_callback_getSensor+0x220>)
 8007bea:	885a      	ldrh	r2, [r3, #2]
 8007bec:	4b6d      	ldr	r3, [pc, #436]	; (8007da4 <pl_callback_getSensor+0x224>)
 8007bee:	801a      	strh	r2, [r3, #0]
		g_sensor_on[1] = g_ADCBuffer[2];
 8007bf0:	4b6b      	ldr	r3, [pc, #428]	; (8007da0 <pl_callback_getSensor+0x220>)
 8007bf2:	889a      	ldrh	r2, [r3, #4]
 8007bf4:	4b6b      	ldr	r3, [pc, #428]	; (8007da4 <pl_callback_getSensor+0x224>)
 8007bf6:	805a      	strh	r2, [r3, #2]
		g_sensor_off[2] = g_ADCBuffer[3];
 8007bf8:	4b69      	ldr	r3, [pc, #420]	; (8007da0 <pl_callback_getSensor+0x220>)
 8007bfa:	88da      	ldrh	r2, [r3, #6]
 8007bfc:	4b6a      	ldr	r3, [pc, #424]	; (8007da8 <pl_callback_getSensor+0x228>)
 8007bfe:	809a      	strh	r2, [r3, #4]
		g_sensor_off[3] = g_ADCBuffer[4];
 8007c00:	4b67      	ldr	r3, [pc, #412]	; (8007da0 <pl_callback_getSensor+0x220>)
 8007c02:	891a      	ldrh	r2, [r3, #8]
 8007c04:	4b68      	ldr	r3, [pc, #416]	; (8007da8 <pl_callback_getSensor+0x228>)
 8007c06:	80da      	strh	r2, [r3, #6]
		g_sensor_off[4] = g_ADCBuffer[5];
 8007c08:	4b65      	ldr	r3, [pc, #404]	; (8007da0 <pl_callback_getSensor+0x220>)
 8007c0a:	895a      	ldrh	r2, [r3, #10]
 8007c0c:	4b66      	ldr	r3, [pc, #408]	; (8007da8 <pl_callback_getSensor+0x228>)
 8007c0e:	811a      	strh	r2, [r3, #8]

		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007c10:	2200      	movs	r2, #0
 8007c12:	2102      	movs	r1, #2
 8007c14:	4860      	ldr	r0, [pc, #384]	; (8007d98 <pl_callback_getSensor+0x218>)
 8007c16:	f014 fa5b 	bl	801c0d0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin, GPIO_PIN_SET);
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	2110      	movs	r1, #16
 8007c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c22:	f014 fa55 	bl	801c0d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007c26:	2200      	movs	r2, #0
 8007c28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c2c:	485b      	ldr	r0, [pc, #364]	; (8007d9c <pl_callback_getSensor+0x21c>)
 8007c2e:	f014 fa4f 	bl	801c0d0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007c32:	2300      	movs	r3, #0
 8007c34:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007c36:	e002      	b.n	8007c3e <pl_callback_getSensor+0xbe>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	607b      	str	r3, [r7, #4]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c44:	ddf8      	ble.n	8007c38 <pl_callback_getSensor+0xb8>
		break;
 8007c46:	e07f      	b.n	8007d48 <pl_callback_getSensor+0x1c8>
	case 2:
		g_sensor_on[2] = g_ADCBuffer[3];
 8007c48:	4b55      	ldr	r3, [pc, #340]	; (8007da0 <pl_callback_getSensor+0x220>)
 8007c4a:	88da      	ldrh	r2, [r3, #6]
 8007c4c:	4b55      	ldr	r3, [pc, #340]	; (8007da4 <pl_callback_getSensor+0x224>)
 8007c4e:	809a      	strh	r2, [r3, #4]
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007c50:	2200      	movs	r2, #0
 8007c52:	2102      	movs	r1, #2
 8007c54:	4850      	ldr	r0, [pc, #320]	; (8007d98 <pl_callback_getSensor+0x218>)
 8007c56:	f014 fa3b 	bl	801c0d0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	2110      	movs	r1, #16
 8007c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c62:	f014 fa35 	bl	801c0d0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin, GPIO_PIN_SET);
 8007c66:	2201      	movs	r2, #1
 8007c68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c6c:	484b      	ldr	r0, [pc, #300]	; (8007d9c <pl_callback_getSensor+0x21c>)
 8007c6e:	f014 fa2f 	bl	801c0d0 <HAL_GPIO_WritePin>
		j=0;
 8007c72:	2300      	movs	r3, #0
 8007c74:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007c76:	e002      	b.n	8007c7e <pl_callback_getSensor+0xfe>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	607b      	str	r3, [r7, #4]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c84:	ddf8      	ble.n	8007c78 <pl_callback_getSensor+0xf8>
		break;
 8007c86:	e05f      	b.n	8007d48 <pl_callback_getSensor+0x1c8>
	case 3:
		g_sensor_off[0] = g_ADCBuffer[1];
 8007c88:	4b45      	ldr	r3, [pc, #276]	; (8007da0 <pl_callback_getSensor+0x220>)
 8007c8a:	885a      	ldrh	r2, [r3, #2]
 8007c8c:	4b46      	ldr	r3, [pc, #280]	; (8007da8 <pl_callback_getSensor+0x228>)
 8007c8e:	801a      	strh	r2, [r3, #0]
		g_sensor_off[1] = g_ADCBuffer[2];
 8007c90:	4b43      	ldr	r3, [pc, #268]	; (8007da0 <pl_callback_getSensor+0x220>)
 8007c92:	889a      	ldrh	r2, [r3, #4]
 8007c94:	4b44      	ldr	r3, [pc, #272]	; (8007da8 <pl_callback_getSensor+0x228>)
 8007c96:	805a      	strh	r2, [r3, #2]
		g_sensor_on[3] = g_ADCBuffer[4];
 8007c98:	4b41      	ldr	r3, [pc, #260]	; (8007da0 <pl_callback_getSensor+0x220>)
 8007c9a:	891a      	ldrh	r2, [r3, #8]
 8007c9c:	4b41      	ldr	r3, [pc, #260]	; (8007da4 <pl_callback_getSensor+0x224>)
 8007c9e:	80da      	strh	r2, [r3, #6]
		g_sensor_on[4] = g_ADCBuffer[5];
 8007ca0:	4b3f      	ldr	r3, [pc, #252]	; (8007da0 <pl_callback_getSensor+0x220>)
 8007ca2:	895a      	ldrh	r2, [r3, #10]
 8007ca4:	4b3f      	ldr	r3, [pc, #252]	; (8007da4 <pl_callback_getSensor+0x224>)
 8007ca6:	811a      	strh	r2, [r3, #8]


		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007ca8:	2200      	movs	r2, #0
 8007caa:	2102      	movs	r1, #2
 8007cac:	483a      	ldr	r0, [pc, #232]	; (8007d98 <pl_callback_getSensor+0x218>)
 8007cae:	f014 fa0f 	bl	801c0d0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	2110      	movs	r1, #16
 8007cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007cba:	f014 fa09 	bl	801c0d0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007cc4:	4835      	ldr	r0, [pc, #212]	; (8007d9c <pl_callback_getSensor+0x21c>)
 8007cc6:	f014 fa03 	bl	801c0d0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	607b      	str	r3, [r7, #4]
		while (j <= 50) {j++;}
 8007cce:	e002      	b.n	8007cd6 <pl_callback_getSensor+0x156>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	607b      	str	r3, [r7, #4]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2b32      	cmp	r3, #50	; 0x32
 8007cda:	ddf9      	ble.n	8007cd0 <pl_callback_getSensor+0x150>
		V_battAD = g_ADCBuffer[0];
 8007cdc:	4b30      	ldr	r3, [pc, #192]	; (8007da0 <pl_callback_getSensor+0x220>)
 8007cde:	881b      	ldrh	r3, [r3, #0]
 8007ce0:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 4095.0 * (100.0 + 50.0) / 50.0;
 8007ce2:	887b      	ldrh	r3, [r7, #2]
 8007ce4:	ee07 3a90 	vmov	s15, r3
 8007ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cec:	ee17 0a90 	vmov	r0, s15
 8007cf0:	f7f8 fc52 	bl	8000598 <__aeabi_f2d>
 8007cf4:	a320      	add	r3, pc, #128	; (adr r3, 8007d78 <pl_callback_getSensor+0x1f8>)
 8007cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfa:	f7f8 fca5 	bl	8000648 <__aeabi_dmul>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	4610      	mov	r0, r2
 8007d04:	4619      	mov	r1, r3
 8007d06:	a31e      	add	r3, pc, #120	; (adr r3, 8007d80 <pl_callback_getSensor+0x200>)
 8007d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0c:	f7f8 fdc6 	bl	800089c <__aeabi_ddiv>
 8007d10:	4602      	mov	r2, r0
 8007d12:	460b      	mov	r3, r1
 8007d14:	4610      	mov	r0, r2
 8007d16:	4619      	mov	r1, r3
 8007d18:	a31b      	add	r3, pc, #108	; (adr r3, 8007d88 <pl_callback_getSensor+0x208>)
 8007d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1e:	f7f8 fc93 	bl	8000648 <__aeabi_dmul>
 8007d22:	4602      	mov	r2, r0
 8007d24:	460b      	mov	r3, r1
 8007d26:	4610      	mov	r0, r2
 8007d28:	4619      	mov	r1, r3
 8007d2a:	f04f 0200 	mov.w	r2, #0
 8007d2e:	4b1f      	ldr	r3, [pc, #124]	; (8007dac <pl_callback_getSensor+0x22c>)
 8007d30:	f7f8 fdb4 	bl	800089c <__aeabi_ddiv>
 8007d34:	4602      	mov	r2, r0
 8007d36:	460b      	mov	r3, r1
 8007d38:	4610      	mov	r0, r2
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	f7f8 ff5c 	bl	8000bf8 <__aeabi_d2f>
 8007d40:	4603      	mov	r3, r0
 8007d42:	4a1b      	ldr	r2, [pc, #108]	; (8007db0 <pl_callback_getSensor+0x230>)
 8007d44:	6013      	str	r3, [r2, #0]
		break;
 8007d46:	bf00      	nop

		break;
	}


	AD_step++;
 8007d48:	4b12      	ldr	r3, [pc, #72]	; (8007d94 <pl_callback_getSensor+0x214>)
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	b2da      	uxtb	r2, r3
 8007d50:	4b10      	ldr	r3, [pc, #64]	; (8007d94 <pl_callback_getSensor+0x214>)
 8007d52:	701a      	strb	r2, [r3, #0]
	//for(j=0;j<=2000;j++){}
	if (AD_step != 4) {
 8007d54:	4b0f      	ldr	r3, [pc, #60]	; (8007d94 <pl_callback_getSensor+0x214>)
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	2b04      	cmp	r3, #4
 8007d5a:	d005      	beq.n	8007d68 <pl_callback_getSensor+0x1e8>
		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8007d5c:	2206      	movs	r2, #6
 8007d5e:	4910      	ldr	r1, [pc, #64]	; (8007da0 <pl_callback_getSensor+0x220>)
 8007d60:	480b      	ldr	r0, [pc, #44]	; (8007d90 <pl_callback_getSensor+0x210>)
 8007d62:	f011 fe53 	bl	8019a0c <HAL_ADC_Start_DMA>
	 the HAL_ADC_ConvCpltCallback could be implemented in the user file
	 */
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer)/sizeof(uint16_t));
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
	//	sizeof(g_ADCBuffer) / sizeof(uint16_t));
}
 8007d66:	e002      	b.n	8007d6e <pl_callback_getSensor+0x1ee>
		AD_step = 0;
 8007d68:	4b0a      	ldr	r3, [pc, #40]	; (8007d94 <pl_callback_getSensor+0x214>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	701a      	strb	r2, [r3, #0]
}
 8007d6e:	bf00      	nop
 8007d70:	3708      	adds	r7, #8
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	66666666 	.word	0x66666666
 8007d7c:	400a6666 	.word	0x400a6666
 8007d80:	00000000 	.word	0x00000000
 8007d84:	40affe00 	.word	0x40affe00
 8007d88:	00000000 	.word	0x00000000
 8007d8c:	4062c000 	.word	0x4062c000
 8007d90:	20000734 	.word	0x20000734
 8007d94:	20000708 	.word	0x20000708
 8007d98:	48000400 	.word	0x48000400
 8007d9c:	48000800 	.word	0x48000800
 8007da0:	200006fc 	.word	0x200006fc
 8007da4:	2000070c 	.word	0x2000070c
 8007da8:	20000718 	.word	0x20000718
 8007dac:	40490000 	.word	0x40490000
 8007db0:	20000724 	.word	0x20000724

08007db4 <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 8007db4:	b580      	push	{r7, lr}
 8007db6:	af00      	add	r7, sp, #0

		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8007db8:	2206      	movs	r2, #6
 8007dba:	4903      	ldr	r1, [pc, #12]	; (8007dc8 <pl_interupt_getSensor+0x14>)
 8007dbc:	4803      	ldr	r0, [pc, #12]	; (8007dcc <pl_interupt_getSensor+0x18>)
 8007dbe:	f011 fe25 	bl	8019a0c <HAL_ADC_Start_DMA>

}
 8007dc2:	bf00      	nop
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	200006fc 	.word	0x200006fc
 8007dcc:	20000734 	.word	0x20000734

08007dd0 <pl_timer_init>:

volatile uint32_t g_timCount;
float g_timCount_sec;
uint8_t count_mode;

void pl_timer_init(void){
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
	count_mode=0;
 8007dd4:	4b05      	ldr	r3, [pc, #20]	; (8007dec <pl_timer_init+0x1c>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8007dda:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <pl_timer_init+0x20>)
 8007ddc:	f04f 0200 	mov.w	r2, #0
 8007de0:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);//割り込み
 8007de2:	4804      	ldr	r0, [pc, #16]	; (8007df4 <pl_timer_init+0x24>)
 8007de4:	f016 f91c 	bl	801e020 <HAL_TIM_Base_Start_IT>
}
 8007de8:	bf00      	nop
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	20000730 	.word	0x20000730
 8007df0:	2000072c 	.word	0x2000072c
 8007df4:	2000ee9c 	.word	0x2000ee9c

08007df8 <interrupt_timer>:

void interrupt_timer(void){
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	af00      	add	r7, sp, #0
	g_timCount++;
 8007dfc:	4b10      	ldr	r3, [pc, #64]	; (8007e40 <interrupt_timer+0x48>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3301      	adds	r3, #1
 8007e02:	4a0f      	ldr	r2, [pc, #60]	; (8007e40 <interrupt_timer+0x48>)
 8007e04:	6013      	str	r3, [r2, #0]
	if(count_mode==1){
 8007e06:	4b0f      	ldr	r3, [pc, #60]	; (8007e44 <interrupt_timer+0x4c>)
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d112      	bne.n	8007e34 <interrupt_timer+0x3c>
	g_timCount_sec=g_timCount_sec + INTERRUPT_TIME;
 8007e0e:	4b0e      	ldr	r3, [pc, #56]	; (8007e48 <interrupt_timer+0x50>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7f8 fbc0 	bl	8000598 <__aeabi_f2d>
 8007e18:	a307      	add	r3, pc, #28	; (adr r3, 8007e38 <interrupt_timer+0x40>)
 8007e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1e:	f7f8 fa5d 	bl	80002dc <__adddf3>
 8007e22:	4602      	mov	r2, r0
 8007e24:	460b      	mov	r3, r1
 8007e26:	4610      	mov	r0, r2
 8007e28:	4619      	mov	r1, r3
 8007e2a:	f7f8 fee5 	bl	8000bf8 <__aeabi_d2f>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	4a05      	ldr	r2, [pc, #20]	; (8007e48 <interrupt_timer+0x50>)
 8007e32:	6013      	str	r3, [r2, #0]
	}

}
 8007e34:	bf00      	nop
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	d2f1a9fc 	.word	0xd2f1a9fc
 8007e3c:	3f50624d 	.word	0x3f50624d
 8007e40:	20000728 	.word	0x20000728
 8007e44:	20000730 	.word	0x20000730
 8007e48:	2000072c 	.word	0x2000072c

08007e4c <tic_timer>:

void tic_timer(void){
 8007e4c:	b480      	push	{r7}
 8007e4e:	af00      	add	r7, sp, #0
	count_mode=1;
 8007e50:	4b05      	ldr	r3, [pc, #20]	; (8007e68 <tic_timer+0x1c>)
 8007e52:	2201      	movs	r2, #1
 8007e54:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8007e56:	4b05      	ldr	r3, [pc, #20]	; (8007e6c <tic_timer+0x20>)
 8007e58:	f04f 0200 	mov.w	r2, #0
 8007e5c:	601a      	str	r2, [r3, #0]
}
 8007e5e:	bf00      	nop
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr
 8007e68:	20000730 	.word	0x20000730
 8007e6c:	2000072c 	.word	0x2000072c

08007e70 <toc_timer>:

float toc_timer(void){
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
	float timer;
	timer=g_timCount_sec;
 8007e76:	4b0a      	ldr	r3, [pc, #40]	; (8007ea0 <toc_timer+0x30>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	607b      	str	r3, [r7, #4]
	count_mode=0;
 8007e7c:	4b09      	ldr	r3, [pc, #36]	; (8007ea4 <toc_timer+0x34>)
 8007e7e:	2200      	movs	r2, #0
 8007e80:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8007e82:	4b07      	ldr	r3, [pc, #28]	; (8007ea0 <toc_timer+0x30>)
 8007e84:	f04f 0200 	mov.w	r2, #0
 8007e88:	601a      	str	r2, [r3, #0]
	return timer;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	ee07 3a90 	vmov	s15, r3
}
 8007e90:	eeb0 0a67 	vmov.f32	s0, s15
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	2000072c 	.word	0x2000072c
 8007ea4:	20000730 	.word	0x20000730

08007ea8 <wait_ms>:

void wait_ms(uint32_t waitTime) {
 8007ea8:	b5b0      	push	{r4, r5, r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8007eb0:	4b1d      	ldr	r3, [pc, #116]	; (8007f28 <wait_ms+0x80>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 8007eb6:	4b1d      	ldr	r3, [pc, #116]	; (8007f2c <wait_ms+0x84>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	625a      	str	r2, [r3, #36]	; 0x24
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 8007ebe:	bf00      	nop
 8007ec0:	4b19      	ldr	r3, [pc, #100]	; (8007f28 <wait_ms+0x80>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	ee07 3a90 	vmov	s15, r3
 8007ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ecc:	ee17 0a90 	vmov	r0, s15
 8007ed0:	f7f8 fb62 	bl	8000598 <__aeabi_f2d>
 8007ed4:	a312      	add	r3, pc, #72	; (adr r3, 8007f20 <wait_ms+0x78>)
 8007ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eda:	f7f8 fbb5 	bl	8000648 <__aeabi_dmul>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	4610      	mov	r0, r2
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	a30e      	add	r3, pc, #56	; (adr r3, 8007f20 <wait_ms+0x78>)
 8007ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eec:	f7f8 fcd6 	bl	800089c <__aeabi_ddiv>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	4614      	mov	r4, r2
 8007ef6:	461d      	mov	r5, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7f8 fb2b 	bl	8000554 <__aeabi_ui2d>
 8007efe:	4602      	mov	r2, r0
 8007f00:	460b      	mov	r3, r1
 8007f02:	4620      	mov	r0, r4
 8007f04:	4629      	mov	r1, r5
 8007f06:	f7f8 fe11 	bl	8000b2c <__aeabi_dcmplt>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1d7      	bne.n	8007ec0 <wait_ms+0x18>
        }

}
 8007f10:	bf00      	nop
 8007f12:	bf00      	nop
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bdb0      	pop	{r4, r5, r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	f3af 8000 	nop.w
 8007f20:	d2f1a9fc 	.word	0xd2f1a9fc
 8007f24:	3f50624d 	.word	0x3f50624d
 8007f28:	20000728 	.word	0x20000728
 8007f2c:	2000ee9c 	.word	0x2000ee9c

08007f30 <wait_ms_NoReset>:

void wait_ms_NoReset(uint32_t waitTime) {
 8007f30:	b5b0      	push	{r4, r5, r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8007f38:	4b1b      	ldr	r3, [pc, #108]	; (8007fa8 <wait_ms_NoReset+0x78>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	601a      	str	r2, [r3, #0]
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 8007f3e:	bf00      	nop
 8007f40:	4b19      	ldr	r3, [pc, #100]	; (8007fa8 <wait_ms_NoReset+0x78>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	ee07 3a90 	vmov	s15, r3
 8007f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f4c:	ee17 0a90 	vmov	r0, s15
 8007f50:	f7f8 fb22 	bl	8000598 <__aeabi_f2d>
 8007f54:	a312      	add	r3, pc, #72	; (adr r3, 8007fa0 <wait_ms_NoReset+0x70>)
 8007f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5a:	f7f8 fb75 	bl	8000648 <__aeabi_dmul>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	460b      	mov	r3, r1
 8007f62:	4610      	mov	r0, r2
 8007f64:	4619      	mov	r1, r3
 8007f66:	a30e      	add	r3, pc, #56	; (adr r3, 8007fa0 <wait_ms_NoReset+0x70>)
 8007f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6c:	f7f8 fc96 	bl	800089c <__aeabi_ddiv>
 8007f70:	4602      	mov	r2, r0
 8007f72:	460b      	mov	r3, r1
 8007f74:	4614      	mov	r4, r2
 8007f76:	461d      	mov	r5, r3
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f7f8 faeb 	bl	8000554 <__aeabi_ui2d>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	4620      	mov	r0, r4
 8007f84:	4629      	mov	r1, r5
 8007f86:	f7f8 fdd1 	bl	8000b2c <__aeabi_dcmplt>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1d7      	bne.n	8007f40 <wait_ms_NoReset+0x10>
        }

}
 8007f90:	bf00      	nop
 8007f92:	bf00      	nop
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bdb0      	pop	{r4, r5, r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	f3af 8000 	nop.w
 8007fa0:	d2f1a9fc 	.word	0xd2f1a9fc
 8007fa4:	3f50624d 	.word	0x3f50624d
 8007fa8:	20000728 	.word	0x20000728

08007fac <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b08c      	sub	sp, #48	; 0x30
 8007fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8007fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	601a      	str	r2, [r3, #0]
 8007fba:	605a      	str	r2, [r3, #4]
 8007fbc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8007fbe:	1d3b      	adds	r3, r7, #4
 8007fc0:	2220      	movs	r2, #32
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f018 f9a7 	bl	8020318 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8007fca:	4b56      	ldr	r3, [pc, #344]	; (8008124 <MX_ADC1_Init+0x178>)
 8007fcc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007fd0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007fd2:	4b54      	ldr	r3, [pc, #336]	; (8008124 <MX_ADC1_Init+0x178>)
 8007fd4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007fd8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007fda:	4b52      	ldr	r3, [pc, #328]	; (8008124 <MX_ADC1_Init+0x178>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007fe0:	4b50      	ldr	r3, [pc, #320]	; (8008124 <MX_ADC1_Init+0x178>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8007fe6:	4b4f      	ldr	r3, [pc, #316]	; (8008124 <MX_ADC1_Init+0x178>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007fec:	4b4d      	ldr	r3, [pc, #308]	; (8008124 <MX_ADC1_Init+0x178>)
 8007fee:	2201      	movs	r2, #1
 8007ff0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007ff2:	4b4c      	ldr	r3, [pc, #304]	; (8008124 <MX_ADC1_Init+0x178>)
 8007ff4:	2208      	movs	r2, #8
 8007ff6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007ff8:	4b4a      	ldr	r3, [pc, #296]	; (8008124 <MX_ADC1_Init+0x178>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007ffe:	4b49      	ldr	r3, [pc, #292]	; (8008124 <MX_ADC1_Init+0x178>)
 8008000:	2201      	movs	r2, #1
 8008002:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 8008004:	4b47      	ldr	r3, [pc, #284]	; (8008124 <MX_ADC1_Init+0x178>)
 8008006:	2206      	movs	r2, #6
 8008008:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800800a:	4b46      	ldr	r3, [pc, #280]	; (8008124 <MX_ADC1_Init+0x178>)
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008012:	4b44      	ldr	r3, [pc, #272]	; (8008124 <MX_ADC1_Init+0x178>)
 8008014:	2200      	movs	r2, #0
 8008016:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008018:	4b42      	ldr	r3, [pc, #264]	; (8008124 <MX_ADC1_Init+0x178>)
 800801a:	2200      	movs	r2, #0
 800801c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800801e:	4b41      	ldr	r3, [pc, #260]	; (8008124 <MX_ADC1_Init+0x178>)
 8008020:	2201      	movs	r2, #1
 8008022:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008026:	4b3f      	ldr	r3, [pc, #252]	; (8008124 <MX_ADC1_Init+0x178>)
 8008028:	2200      	movs	r2, #0
 800802a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800802c:	4b3d      	ldr	r3, [pc, #244]	; (8008124 <MX_ADC1_Init+0x178>)
 800802e:	2200      	movs	r2, #0
 8008030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008034:	483b      	ldr	r0, [pc, #236]	; (8008124 <MX_ADC1_Init+0x178>)
 8008036:	f011 f943 	bl	80192c0 <HAL_ADC_Init>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8008040:	f001 fecb 	bl	8009dda <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8008044:	2300      	movs	r3, #0
 8008046:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8008048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800804c:	4619      	mov	r1, r3
 800804e:	4835      	ldr	r0, [pc, #212]	; (8008124 <MX_ADC1_Init+0x178>)
 8008050:	f012 ff90 	bl	801af74 <HAL_ADCEx_MultiModeConfigChannel>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d001      	beq.n	800805e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800805a:	f001 febe 	bl	8009dda <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800805e:	4b32      	ldr	r3, [pc, #200]	; (8008128 <MX_ADC1_Init+0x17c>)
 8008060:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8008062:	2306      	movs	r3, #6
 8008064:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8008066:	2301      	movs	r3, #1
 8008068:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800806a:	237f      	movs	r3, #127	; 0x7f
 800806c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800806e:	2304      	movs	r3, #4
 8008070:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8008072:	2300      	movs	r3, #0
 8008074:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008076:	1d3b      	adds	r3, r7, #4
 8008078:	4619      	mov	r1, r3
 800807a:	482a      	ldr	r0, [pc, #168]	; (8008124 <MX_ADC1_Init+0x178>)
 800807c:	f012 f856 	bl	801a12c <HAL_ADC_ConfigChannel>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d001      	beq.n	800808a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8008086:	f001 fea8 	bl	8009dda <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800808a:	4b28      	ldr	r3, [pc, #160]	; (800812c <MX_ADC1_Init+0x180>)
 800808c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800808e:	230c      	movs	r3, #12
 8008090:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008092:	1d3b      	adds	r3, r7, #4
 8008094:	4619      	mov	r1, r3
 8008096:	4823      	ldr	r0, [pc, #140]	; (8008124 <MX_ADC1_Init+0x178>)
 8008098:	f012 f848 	bl	801a12c <HAL_ADC_ConfigChannel>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80080a2:	f001 fe9a 	bl	8009dda <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80080a6:	4b22      	ldr	r3, [pc, #136]	; (8008130 <MX_ADC1_Init+0x184>)
 80080a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80080aa:	2312      	movs	r3, #18
 80080ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80080ae:	1d3b      	adds	r3, r7, #4
 80080b0:	4619      	mov	r1, r3
 80080b2:	481c      	ldr	r0, [pc, #112]	; (8008124 <MX_ADC1_Init+0x178>)
 80080b4:	f012 f83a 	bl	801a12c <HAL_ADC_ConfigChannel>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d001      	beq.n	80080c2 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80080be:	f001 fe8c 	bl	8009dda <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80080c2:	4b1c      	ldr	r3, [pc, #112]	; (8008134 <MX_ADC1_Init+0x188>)
 80080c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80080c6:	2318      	movs	r3, #24
 80080c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80080ca:	1d3b      	adds	r3, r7, #4
 80080cc:	4619      	mov	r1, r3
 80080ce:	4815      	ldr	r0, [pc, #84]	; (8008124 <MX_ADC1_Init+0x178>)
 80080d0:	f012 f82c 	bl	801a12c <HAL_ADC_ConfigChannel>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80080da:	f001 fe7e 	bl	8009dda <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80080de:	4b16      	ldr	r3, [pc, #88]	; (8008138 <MX_ADC1_Init+0x18c>)
 80080e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80080e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80080e8:	1d3b      	adds	r3, r7, #4
 80080ea:	4619      	mov	r1, r3
 80080ec:	480d      	ldr	r0, [pc, #52]	; (8008124 <MX_ADC1_Init+0x178>)
 80080ee:	f012 f81d 	bl	801a12c <HAL_ADC_ConfigChannel>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d001      	beq.n	80080fc <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 80080f8:	f001 fe6f 	bl	8009dda <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80080fc:	4b0f      	ldr	r3, [pc, #60]	; (800813c <MX_ADC1_Init+0x190>)
 80080fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8008100:	f44f 7383 	mov.w	r3, #262	; 0x106
 8008104:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008106:	1d3b      	adds	r3, r7, #4
 8008108:	4619      	mov	r1, r3
 800810a:	4806      	ldr	r0, [pc, #24]	; (8008124 <MX_ADC1_Init+0x178>)
 800810c:	f012 f80e 	bl	801a12c <HAL_ADC_ConfigChannel>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d001      	beq.n	800811a <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8008116:	f001 fe60 	bl	8009dda <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800811a:	bf00      	nop
 800811c:	3730      	adds	r7, #48	; 0x30
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	20000734 	.word	0x20000734
 8008128:	2e300800 	.word	0x2e300800
 800812c:	3ef08000 	.word	0x3ef08000
 8008130:	10c00010 	.word	0x10c00010
 8008134:	0c900008 	.word	0x0c900008
 8008138:	08600004 	.word	0x08600004
 800813c:	04300002 	.word	0x04300002

08008140 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b09e      	sub	sp, #120	; 0x78
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008148:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800814c:	2200      	movs	r2, #0
 800814e:	601a      	str	r2, [r3, #0]
 8008150:	605a      	str	r2, [r3, #4]
 8008152:	609a      	str	r2, [r3, #8]
 8008154:	60da      	str	r2, [r3, #12]
 8008156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008158:	f107 0314 	add.w	r3, r7, #20
 800815c:	2250      	movs	r2, #80	; 0x50
 800815e:	2100      	movs	r1, #0
 8008160:	4618      	mov	r0, r3
 8008162:	f018 f8d9 	bl	8020318 <memset>
  if(adcHandle->Instance==ADC1)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800816e:	f040 8082 	bne.w	8008276 <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8008172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008176:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8008178:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800817c:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800817e:	f107 0314 	add.w	r3, r7, #20
 8008182:	4618      	mov	r0, r3
 8008184:	f014 fda0 	bl	801ccc8 <HAL_RCCEx_PeriphCLKConfig>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d001      	beq.n	8008192 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800818e:	f001 fe24 	bl	8009dda <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8008192:	4b3b      	ldr	r3, [pc, #236]	; (8008280 <HAL_ADC_MspInit+0x140>)
 8008194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008196:	4a3a      	ldr	r2, [pc, #232]	; (8008280 <HAL_ADC_MspInit+0x140>)
 8008198:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800819c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800819e:	4b38      	ldr	r3, [pc, #224]	; (8008280 <HAL_ADC_MspInit+0x140>)
 80081a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081a6:	613b      	str	r3, [r7, #16]
 80081a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081aa:	4b35      	ldr	r3, [pc, #212]	; (8008280 <HAL_ADC_MspInit+0x140>)
 80081ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ae:	4a34      	ldr	r2, [pc, #208]	; (8008280 <HAL_ADC_MspInit+0x140>)
 80081b0:	f043 0301 	orr.w	r3, r3, #1
 80081b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081b6:	4b32      	ldr	r3, [pc, #200]	; (8008280 <HAL_ADC_MspInit+0x140>)
 80081b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	60fb      	str	r3, [r7, #12]
 80081c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80081c2:	4b2f      	ldr	r3, [pc, #188]	; (8008280 <HAL_ADC_MspInit+0x140>)
 80081c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081c6:	4a2e      	ldr	r2, [pc, #184]	; (8008280 <HAL_ADC_MspInit+0x140>)
 80081c8:	f043 0302 	orr.w	r3, r3, #2
 80081cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081ce:	4b2c      	ldr	r3, [pc, #176]	; (8008280 <HAL_ADC_MspInit+0x140>)
 80081d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081d2:	f003 0302 	and.w	r3, r3, #2
 80081d6:	60bb      	str	r3, [r7, #8]
 80081d8:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin;
 80081da:	230f      	movs	r3, #15
 80081dc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80081de:	2303      	movs	r3, #3
 80081e0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081e2:	2300      	movs	r3, #0
 80081e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80081ea:	4619      	mov	r1, r3
 80081ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80081f0:	f013 fdec 	bl	801bdcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR1_Pin|BATT_Pin;
 80081f4:	f241 0301 	movw	r3, #4097	; 0x1001
 80081f8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80081fa:	2303      	movs	r3, #3
 80081fc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081fe:	2300      	movs	r3, #0
 8008200:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008202:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008206:	4619      	mov	r1, r3
 8008208:	481e      	ldr	r0, [pc, #120]	; (8008284 <HAL_ADC_MspInit+0x144>)
 800820a:	f013 fddf 	bl	801bdcc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800820e:	4b1e      	ldr	r3, [pc, #120]	; (8008288 <HAL_ADC_MspInit+0x148>)
 8008210:	4a1e      	ldr	r2, [pc, #120]	; (800828c <HAL_ADC_MspInit+0x14c>)
 8008212:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8008214:	4b1c      	ldr	r3, [pc, #112]	; (8008288 <HAL_ADC_MspInit+0x148>)
 8008216:	2205      	movs	r2, #5
 8008218:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800821a:	4b1b      	ldr	r3, [pc, #108]	; (8008288 <HAL_ADC_MspInit+0x148>)
 800821c:	2200      	movs	r2, #0
 800821e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008220:	4b19      	ldr	r3, [pc, #100]	; (8008288 <HAL_ADC_MspInit+0x148>)
 8008222:	2200      	movs	r2, #0
 8008224:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8008226:	4b18      	ldr	r3, [pc, #96]	; (8008288 <HAL_ADC_MspInit+0x148>)
 8008228:	2280      	movs	r2, #128	; 0x80
 800822a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800822c:	4b16      	ldr	r3, [pc, #88]	; (8008288 <HAL_ADC_MspInit+0x148>)
 800822e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008232:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008234:	4b14      	ldr	r3, [pc, #80]	; (8008288 <HAL_ADC_MspInit+0x148>)
 8008236:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800823a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800823c:	4b12      	ldr	r3, [pc, #72]	; (8008288 <HAL_ADC_MspInit+0x148>)
 800823e:	2220      	movs	r2, #32
 8008240:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8008242:	4b11      	ldr	r3, [pc, #68]	; (8008288 <HAL_ADC_MspInit+0x148>)
 8008244:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008248:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800824a:	480f      	ldr	r0, [pc, #60]	; (8008288 <HAL_ADC_MspInit+0x148>)
 800824c:	f013 f88a 	bl	801b364 <HAL_DMA_Init>
 8008250:	4603      	mov	r3, r0
 8008252:	2b00      	cmp	r3, #0
 8008254:	d001      	beq.n	800825a <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 8008256:	f001 fdc0 	bl	8009dda <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a0a      	ldr	r2, [pc, #40]	; (8008288 <HAL_ADC_MspInit+0x148>)
 800825e:	655a      	str	r2, [r3, #84]	; 0x54
 8008260:	4a09      	ldr	r2, [pc, #36]	; (8008288 <HAL_ADC_MspInit+0x148>)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8008266:	2200      	movs	r2, #0
 8008268:	2100      	movs	r1, #0
 800826a:	2012      	movs	r0, #18
 800826c:	f013 f845 	bl	801b2fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8008270:	2012      	movs	r0, #18
 8008272:	f013 f85c 	bl	801b32e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8008276:	bf00      	nop
 8008278:	3778      	adds	r7, #120	; 0x78
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	40021000 	.word	0x40021000
 8008284:	48000400 	.word	0x48000400
 8008288:	200007a0 	.word	0x200007a0
 800828c:	40020008 	.word	0x40020008

08008290 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 8008298:	f7ff fc72 	bl	8007b80 <pl_callback_getSensor>
}
 800829c:	bf00      	nop
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <cal_table>:

volatile char g_acc_flag;
volatile char g_MotorEnd_flag;


void cal_table(TRAPEZOID input,TARGET *target){
 80082a4:	b084      	sub	sp, #16
 80082a6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	f107 0420 	add.w	r4, r7, #32
 80082b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
if (input.displacement>=0){
 80082b6:	edd7 7a08 	vldr	s15, [r7, #32]
 80082ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80082be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082c2:	f2c0 819d 	blt.w	8008600 <cal_table+0x35c>
	switch (g_acc_flag) {
 80082c6:	4bcd      	ldr	r3, [pc, #820]	; (80085fc <cal_table+0x358>)
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b06      	cmp	r3, #6
 80082ce:	f200 833a 	bhi.w	8008946 <cal_table+0x6a2>
 80082d2:	a201      	add	r2, pc, #4	; (adr r2, 80082d8 <cal_table+0x34>)
 80082d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d8:	08008939 	.word	0x08008939
 80082dc:	080082f5 	.word	0x080082f5
 80082e0:	08008467 	.word	0x08008467
 80082e4:	08008585 	.word	0x08008585
 80082e8:	08008939 	.word	0x08008939
 80082ec:	080085b1 	.word	0x080085b1
 80082f0:	080085d7 	.word	0x080085d7
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity >= input.count_velocity){
 80082f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f6:	ed93 7a00 	vldr	s14, [r3]
 80082fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80082fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008306:	db0a      	blt.n	800831e <cal_table+0x7a>
				target->velocity = input.count_velocity;
 8008308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800830a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800830c:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 800830e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008310:	f04f 0200 	mov.w	r2, #0
 8008314:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 8008316:	4bb9      	ldr	r3, [pc, #740]	; (80085fc <cal_table+0x358>)
 8008318:	2202      	movs	r2, #2
 800831a:	701a      	strb	r2, [r3, #0]
				target->velocity -= input.acceleration*(2*time_over);

				target->acceleration = -input.acceleration;
				g_acc_flag=3;
			}
		break;
 800831c:	e313      	b.n	8008946 <cal_table+0x6a2>
			else if((input.displacement <= (2*target->velocity*target->velocity
 800831e:	ed97 7a08 	vldr	s14, [r7, #32]
 8008322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008324:	edd3 7a00 	vldr	s15, [r3]
 8008328:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800832c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800832e:	edd3 7a00 	vldr	s15, [r3]
 8008332:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 8008336:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 800833a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800833e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008342:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 8008346:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800834a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800834e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008352:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 8008356:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800835a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 800835e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008362:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((input.displacement <= (2*target->velocity*target->velocity
 8008366:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800836a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800836e:	d900      	bls.n	8008372 <cal_table+0xce>
		break;
 8008370:	e2e9      	b.n	8008946 <cal_table+0x6a2>
				time_over=((2*target->velocity*target->velocity
 8008372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008374:	edd3 7a00 	vldr	s15, [r3]
 8008378:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800837c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800837e:	edd3 7a00 	vldr	s15, [r3]
 8008382:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 8008386:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800838a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800838e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008392:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 8008396:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800839a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800839e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083a2:	ee77 7a67 	vsub.f32	s15, s14, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 80083a6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80083aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80083ae:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80083b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083b6:	edd7 7a08 	vldr	s15, [r7, #32]
 80083ba:	ee77 6a67 	vsub.f32	s13, s14, s15
 80083be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c0:	ed93 7a00 	vldr	s14, [r3]
				time_over=((2*target->velocity*target->velocity
 80083c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083c8:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 80083cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7f8 f8e1 	bl	8000598 <__aeabi_f2d>
 80083d6:	4604      	mov	r4, r0
 80083d8:	460d      	mov	r5, r1
 80083da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083dc:	4618      	mov	r0, r3
 80083de:	f7f8 f8db 	bl	8000598 <__aeabi_f2d>
 80083e2:	f04f 0200 	mov.w	r2, #0
 80083e6:	f04f 0300 	mov.w	r3, #0
 80083ea:	f7f8 f92d 	bl	8000648 <__aeabi_dmul>
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	4690      	mov	r8, r2
 80083f4:	4699      	mov	r9, r3
 80083f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80083fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80083fe:	ee17 0a90 	vmov	r0, s15
 8008402:	f7f8 f8c9 	bl	8000598 <__aeabi_f2d>
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	4640      	mov	r0, r8
 800840c:	4649      	mov	r1, r9
 800840e:	f7f8 f91b 	bl	8000648 <__aeabi_dmul>
 8008412:	4602      	mov	r2, r0
 8008414:	460b      	mov	r3, r1
 8008416:	4620      	mov	r0, r4
 8008418:	4629      	mov	r1, r5
 800841a:	f7f7 ff5d 	bl	80002d8 <__aeabi_dsub>
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	4610      	mov	r0, r2
 8008424:	4619      	mov	r1, r3
 8008426:	f7f8 fbe7 	bl	8000bf8 <__aeabi_d2f>
 800842a:	4602      	mov	r2, r0
 800842c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800842e:	609a      	str	r2, [r3, #8]
				target->velocity -= input.acceleration*(2*time_over);
 8008430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008432:	ed93 7a00 	vldr	s14, [r3]
 8008436:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800843a:	edd7 7a01 	vldr	s15, [r7, #4]
 800843e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008442:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008446:	ee77 7a67 	vsub.f32	s15, s14, s15
 800844a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800844c:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = -input.acceleration;
 8008450:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008454:	eef1 7a67 	vneg.f32	s15, s15
 8008458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800845a:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 800845e:	4b67      	ldr	r3, [pc, #412]	; (80085fc <cal_table+0x358>)
 8008460:	2203      	movs	r2, #3
 8008462:	701a      	strb	r2, [r3, #0]
		break;
 8008464:	e26f      	b.n	8008946 <cal_table+0x6a2>
	case 2:
		//定常
		if (input.displacement-target->displacement <=
 8008466:	ed97 7a08 	vldr	s14, [r7, #32]
 800846a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800846c:	edd3 7a02 	vldr	s15, [r3, #8]
 8008470:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 8008474:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008478:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800847c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 8008480:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008484:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008488:	ee66 7a27 	vmul.f32	s15, s12, s15
 800848c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008490:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008494:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008498:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800849c:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (input.displacement-target->displacement <=
 80084a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80084a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084a8:	d900      	bls.n	80084ac <cal_table+0x208>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.acceleration;
			g_acc_flag=3;
		}
		break;
 80084aa:	e24c      	b.n	8008946 <cal_table+0x6a2>
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80084ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ae:	ed93 7a02 	vldr	s14, [r3, #8]
 80084b2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80084b6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80084ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 80084be:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80084c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80084c6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80084ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80084ce:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80084d2:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 80084d6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80084da:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80084de:	ee37 7a27 	vadd.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 80084e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80084e6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80084ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ec:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80084f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084f4:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 80084f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7f8 f84b 	bl	8000598 <__aeabi_f2d>
 8008502:	4604      	mov	r4, r0
 8008504:	460d      	mov	r5, r1
 8008506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008508:	4618      	mov	r0, r3
 800850a:	f7f8 f845 	bl	8000598 <__aeabi_f2d>
 800850e:	f04f 0200 	mov.w	r2, #0
 8008512:	f04f 0300 	mov.w	r3, #0
 8008516:	f7f8 f897 	bl	8000648 <__aeabi_dmul>
 800851a:	4602      	mov	r2, r0
 800851c:	460b      	mov	r3, r1
 800851e:	4690      	mov	r8, r2
 8008520:	4699      	mov	r9, r3
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f7f8 f838 	bl	8000598 <__aeabi_f2d>
 8008528:	4602      	mov	r2, r0
 800852a:	460b      	mov	r3, r1
 800852c:	4640      	mov	r0, r8
 800852e:	4649      	mov	r1, r9
 8008530:	f7f8 f88a 	bl	8000648 <__aeabi_dmul>
 8008534:	4602      	mov	r2, r0
 8008536:	460b      	mov	r3, r1
 8008538:	4620      	mov	r0, r4
 800853a:	4629      	mov	r1, r5
 800853c:	f7f7 fecc 	bl	80002d8 <__aeabi_dsub>
 8008540:	4602      	mov	r2, r0
 8008542:	460b      	mov	r3, r1
 8008544:	4610      	mov	r0, r2
 8008546:	4619      	mov	r1, r3
 8008548:	f7f8 fb56 	bl	8000bf8 <__aeabi_d2f>
 800854c:	4602      	mov	r2, r0
 800854e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008550:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 8008552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008554:	ed93 7a00 	vldr	s14, [r3]
 8008558:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800855c:	edd7 7a01 	vldr	s15, [r7, #4]
 8008560:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008564:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800856a:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.acceleration;
 800856e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008572:	eef1 7a67 	vneg.f32	s15, s15
 8008576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008578:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 800857c:	4b1f      	ldr	r3, [pc, #124]	; (80085fc <cal_table+0x358>)
 800857e:	2203      	movs	r2, #3
 8008580:	701a      	strb	r2, [r3, #0]
		break;
 8008582:	e1e0      	b.n	8008946 <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 8008584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008586:	ed93 7a00 	vldr	s14, [r3]
 800858a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800858e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008596:	d900      	bls.n	800859a <cal_table+0x2f6>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008598:	e1d5      	b.n	8008946 <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 800859a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800859c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800859e:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 80085a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a2:	f04f 0200 	mov.w	r2, #0
 80085a6:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80085a8:	4b14      	ldr	r3, [pc, #80]	; (80085fc <cal_table+0x358>)
 80085aa:	2204      	movs	r2, #4
 80085ac:	701a      	strb	r2, [r3, #0]
		break;
 80085ae:	e1ca      	b.n	8008946 <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 80085b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b2:	ed93 7a02 	vldr	s14, [r3, #8]
 80085b6:	edd7 7a08 	vldr	s15, [r7, #32]
 80085ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085c2:	da00      	bge.n	80085c6 <cal_table+0x322>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80085c4:	e1bf      	b.n	8008946 <cal_table+0x6a2>
			target->acceleration = 0;
 80085c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c8:	f04f 0200 	mov.w	r2, #0
 80085cc:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80085ce:	4b0b      	ldr	r3, [pc, #44]	; (80085fc <cal_table+0x358>)
 80085d0:	2204      	movs	r2, #4
 80085d2:	701a      	strb	r2, [r3, #0]
		break;
 80085d4:	e1b7      	b.n	8008946 <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 80085d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d8:	ed93 7a02 	vldr	s14, [r3, #8]
 80085dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80085e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085e8:	da00      	bge.n	80085ec <cal_table+0x348>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80085ea:	e1ac      	b.n	8008946 <cal_table+0x6a2>
			target->acceleration = 0;
 80085ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ee:	f04f 0200 	mov.w	r2, #0
 80085f2:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80085f4:	4b01      	ldr	r3, [pc, #4]	; (80085fc <cal_table+0x358>)
 80085f6:	2204      	movs	r2, #4
 80085f8:	701a      	strb	r2, [r3, #0]
		break;
 80085fa:	e1a4      	b.n	8008946 <cal_table+0x6a2>
 80085fc:	20000804 	.word	0x20000804
	}
}else{
	switch (g_acc_flag) {
 8008600:	4bce      	ldr	r3, [pc, #824]	; (800893c <cal_table+0x698>)
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b06      	cmp	r3, #6
 8008608:	f200 819d 	bhi.w	8008946 <cal_table+0x6a2>
 800860c:	a201      	add	r2, pc, #4	; (adr r2, 8008614 <cal_table+0x370>)
 800860e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008612:	bf00      	nop
 8008614:	08008945 	.word	0x08008945
 8008618:	08008631 	.word	0x08008631
 800861c:	080087a3 	.word	0x080087a3
 8008620:	080088b9 	.word	0x080088b9
 8008624:	080088e5 	.word	0x080088e5
 8008628:	080088ed 	.word	0x080088ed
 800862c:	08008913 	.word	0x08008913
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity <= input.count_velocity){
 8008630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008632:	ed93 7a00 	vldr	s14, [r3]
 8008636:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800863a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800863e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008642:	d80a      	bhi.n	800865a <cal_table+0x3b6>
				target->velocity = input.count_velocity;
 8008644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008648:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 800864a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800864c:	f04f 0200 	mov.w	r2, #0
 8008650:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 8008652:	4bba      	ldr	r3, [pc, #744]	; (800893c <cal_table+0x698>)
 8008654:	2202      	movs	r2, #2
 8008656:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.acceleration;
				g_acc_flag=3;
			}
		break;
 8008658:	e175      	b.n	8008946 <cal_table+0x6a2>
			else if((-input.displacement <= (2*target->velocity*target->velocity
 800865a:	edd7 7a08 	vldr	s15, [r7, #32]
 800865e:	eeb1 7a67 	vneg.f32	s14, s15
 8008662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008664:	edd3 7a00 	vldr	s15, [r3]
 8008668:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800866c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800866e:	edd3 7a00 	vldr	s15, [r3]
 8008672:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 8008676:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 800867a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800867e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008682:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 8008686:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800868a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800868e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008692:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 8008696:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800869a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 800869e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80086a2:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((-input.displacement <= (2*target->velocity*target->velocity
 80086a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80086aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086ae:	d900      	bls.n	80086b2 <cal_table+0x40e>
		break;
 80086b0:	e149      	b.n	8008946 <cal_table+0x6a2>
				time_over=(-(2*target->velocity*target->velocity
 80086b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b4:	edd3 7a00 	vldr	s15, [r3]
 80086b8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80086bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086be:	edd3 7a00 	vldr	s15, [r3]
 80086c2:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 80086c6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80086ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80086ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80086d2:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 80086d6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80086da:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80086de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80086e2:	ee77 7a67 	vsub.f32	s15, s14, s15
				time_over=(-(2*target->velocity*target->velocity
 80086e6:	eef1 7a67 	vneg.f32	s15, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 80086ea:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80086ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80086f2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80086f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80086fe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008704:	ed93 7a00 	vldr	s14, [r3]
				time_over=(-(2*target->velocity*target->velocity
 8008708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800870c:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8008710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	4618      	mov	r0, r3
 8008716:	f7f7 ff3f 	bl	8000598 <__aeabi_f2d>
 800871a:	4604      	mov	r4, r0
 800871c:	460d      	mov	r5, r1
 800871e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008720:	4618      	mov	r0, r3
 8008722:	f7f7 ff39 	bl	8000598 <__aeabi_f2d>
 8008726:	f04f 0200 	mov.w	r2, #0
 800872a:	f04f 0300 	mov.w	r3, #0
 800872e:	f7f7 ff8b 	bl	8000648 <__aeabi_dmul>
 8008732:	4602      	mov	r2, r0
 8008734:	460b      	mov	r3, r1
 8008736:	4690      	mov	r8, r2
 8008738:	4699      	mov	r9, r3
 800873a:	edd7 7a01 	vldr	s15, [r7, #4]
 800873e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008742:	ee17 0a90 	vmov	r0, s15
 8008746:	f7f7 ff27 	bl	8000598 <__aeabi_f2d>
 800874a:	4602      	mov	r2, r0
 800874c:	460b      	mov	r3, r1
 800874e:	4640      	mov	r0, r8
 8008750:	4649      	mov	r1, r9
 8008752:	f7f7 ff79 	bl	8000648 <__aeabi_dmul>
 8008756:	4602      	mov	r2, r0
 8008758:	460b      	mov	r3, r1
 800875a:	4620      	mov	r0, r4
 800875c:	4629      	mov	r1, r5
 800875e:	f7f7 fdbd 	bl	80002dc <__adddf3>
 8008762:	4602      	mov	r2, r0
 8008764:	460b      	mov	r3, r1
 8008766:	4610      	mov	r0, r2
 8008768:	4619      	mov	r1, r3
 800876a:	f7f8 fa45 	bl	8000bf8 <__aeabi_d2f>
 800876e:	4602      	mov	r2, r0
 8008770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008772:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 8008774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008776:	ed93 7a00 	vldr	s14, [r3]
 800877a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800877e:	edd7 7a01 	vldr	s15, [r7, #4]
 8008782:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008786:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800878a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800878e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008790:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.acceleration;
 8008794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008798:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 800879a:	4b68      	ldr	r3, [pc, #416]	; (800893c <cal_table+0x698>)
 800879c:	2203      	movs	r2, #3
 800879e:	701a      	strb	r2, [r3, #0]
		break;
 80087a0:	e0d1      	b.n	8008946 <cal_table+0x6a2>
	case 2:
		//定常
		if (-input.displacement+target->displacement <=
 80087a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a4:	ed93 7a02 	vldr	s14, [r3, #8]
 80087a8:	edd7 7a08 	vldr	s15, [r7, #32]
 80087ac:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 80087b0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80087b4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80087b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 80087bc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80087c0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80087c4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80087c8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80087cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80087d0:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80087d4:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80087d8:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (-input.displacement+target->displacement <=
 80087dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80087e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087e4:	d900      	bls.n	80087e8 <cal_table+0x544>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.acceleration;
			g_acc_flag=3;
		}
		break;
 80087e6:	e0ae      	b.n	8008946 <cal_table+0x6a2>
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 80087e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ea:	ed93 7a02 	vldr	s14, [r3, #8]
 80087ee:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80087f2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80087f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 80087fa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80087fe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008802:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008806:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800880a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800880e:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 8008812:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008816:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 800881a:	ee37 7a67 	vsub.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 800881e:	edd7 7a08 	vldr	s15, [r7, #32]
 8008822:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008828:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 800882c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008830:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8008834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	4618      	mov	r0, r3
 800883a:	f7f7 fead 	bl	8000598 <__aeabi_f2d>
 800883e:	4604      	mov	r4, r0
 8008840:	460d      	mov	r5, r1
 8008842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008844:	4618      	mov	r0, r3
 8008846:	f7f7 fea7 	bl	8000598 <__aeabi_f2d>
 800884a:	f04f 0200 	mov.w	r2, #0
 800884e:	f04f 0300 	mov.w	r3, #0
 8008852:	f7f7 fef9 	bl	8000648 <__aeabi_dmul>
 8008856:	4602      	mov	r2, r0
 8008858:	460b      	mov	r3, r1
 800885a:	4690      	mov	r8, r2
 800885c:	4699      	mov	r9, r3
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7f7 fe9a 	bl	8000598 <__aeabi_f2d>
 8008864:	4602      	mov	r2, r0
 8008866:	460b      	mov	r3, r1
 8008868:	4640      	mov	r0, r8
 800886a:	4649      	mov	r1, r9
 800886c:	f7f7 feec 	bl	8000648 <__aeabi_dmul>
 8008870:	4602      	mov	r2, r0
 8008872:	460b      	mov	r3, r1
 8008874:	4620      	mov	r0, r4
 8008876:	4629      	mov	r1, r5
 8008878:	f7f7 fd30 	bl	80002dc <__adddf3>
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	4610      	mov	r0, r2
 8008882:	4619      	mov	r1, r3
 8008884:	f7f8 f9b8 	bl	8000bf8 <__aeabi_d2f>
 8008888:	4602      	mov	r2, r0
 800888a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888c:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 800888e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008890:	ed93 7a00 	vldr	s14, [r3]
 8008894:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008898:	edd7 7a01 	vldr	s15, [r7, #4]
 800889c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80088a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088a6:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.acceleration;
 80088aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ae:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 80088b0:	4b22      	ldr	r3, [pc, #136]	; (800893c <cal_table+0x698>)
 80088b2:	2203      	movs	r2, #3
 80088b4:	701a      	strb	r2, [r3, #0]
		break;
 80088b6:	e046      	b.n	8008946 <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 80088b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ba:	ed93 7a00 	vldr	s14, [r3]
 80088be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80088c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80088c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ca:	da00      	bge.n	80088ce <cal_table+0x62a>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80088cc:	e03b      	b.n	8008946 <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 80088ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d2:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 80088d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d6:	f04f 0200 	mov.w	r2, #0
 80088da:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80088dc:	4b17      	ldr	r3, [pc, #92]	; (800893c <cal_table+0x698>)
 80088de:	2204      	movs	r2, #4
 80088e0:	701a      	strb	r2, [r3, #0]
		break;
 80088e2:	e030      	b.n	8008946 <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		g_MotorEnd_flag=1;
 80088e4:	4b16      	ldr	r3, [pc, #88]	; (8008940 <cal_table+0x69c>)
 80088e6:	2201      	movs	r2, #1
 80088e8:	701a      	strb	r2, [r3, #0]
		break;
 80088ea:	e02c      	b.n	8008946 <cal_table+0x6a2>
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 80088ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ee:	ed93 7a02 	vldr	s14, [r3, #8]
 80088f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80088f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80088fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088fe:	d900      	bls.n	8008902 <cal_table+0x65e>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008900:	e021      	b.n	8008946 <cal_table+0x6a2>
			target->acceleration = 0;
 8008902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008904:	f04f 0200 	mov.w	r2, #0
 8008908:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 800890a:	4b0c      	ldr	r3, [pc, #48]	; (800893c <cal_table+0x698>)
 800890c:	2204      	movs	r2, #4
 800890e:	701a      	strb	r2, [r3, #0]
		break;
 8008910:	e019      	b.n	8008946 <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 8008912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008914:	ed93 7a02 	vldr	s14, [r3, #8]
 8008918:	edd7 7a08 	vldr	s15, [r7, #32]
 800891c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008924:	d900      	bls.n	8008928 <cal_table+0x684>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008926:	e00e      	b.n	8008946 <cal_table+0x6a2>
			target->acceleration = 0;
 8008928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800892a:	f04f 0200 	mov.w	r2, #0
 800892e:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008930:	4b02      	ldr	r3, [pc, #8]	; (800893c <cal_table+0x698>)
 8008932:	2204      	movs	r2, #4
 8008934:	701a      	strb	r2, [r3, #0]
		break;
 8008936:	e006      	b.n	8008946 <cal_table+0x6a2>
		break;
 8008938:	bf00      	nop
 800893a:	e004      	b.n	8008946 <cal_table+0x6a2>
 800893c:	20000804 	.word	0x20000804
 8008940:	20000805 	.word	0x20000805
		break;
 8008944:	bf00      	nop
	}

}

}
 8008946:	bf00      	nop
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8008950:	b004      	add	sp, #16
 8008952:	4770      	bx	lr
 8008954:	0000      	movs	r0, r0
	...

08008958 <cal_mollifier_table>:





void cal_mollifier_table(MOLLIFIER input,TARGET *target){
 8008958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800895c:	b08c      	sub	sp, #48	; 0x30
 800895e:	af00      	add	r7, sp, #0
 8008960:	eef0 6a40 	vmov.f32	s13, s0
 8008964:	eeb0 7a60 	vmov.f32	s14, s1
 8008968:	eef0 7a41 	vmov.f32	s15, s2
 800896c:	6138      	str	r0, [r7, #16]
 800896e:	edc7 6a05 	vstr	s13, [r7, #20]
 8008972:	ed87 7a06 	vstr	s14, [r7, #24]
 8008976:	edc7 7a07 	vstr	s15, [r7, #28]

float mollifier_T;
float old_velocity;
float time_delay=15;
 800897a:	4be7      	ldr	r3, [pc, #924]	; (8008d18 <cal_mollifier_table+0x3c0>)
 800897c:	62fb      	str	r3, [r7, #44]	; 0x2c
float time_delay2=-15;
 800897e:	4be7      	ldr	r3, [pc, #924]	; (8008d1c <cal_mollifier_table+0x3c4>)
 8008980:	62bb      	str	r3, [r7, #40]	; 0x28
	mollifier_timer+=INTERRUPT_TIME;
 8008982:	4be7      	ldr	r3, [pc, #924]	; (8008d20 <cal_mollifier_table+0x3c8>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4618      	mov	r0, r3
 8008988:	f7f7 fe06 	bl	8000598 <__aeabi_f2d>
 800898c:	a3da      	add	r3, pc, #872	; (adr r3, 8008cf8 <cal_mollifier_table+0x3a0>)
 800898e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008992:	f7f7 fca3 	bl	80002dc <__adddf3>
 8008996:	4602      	mov	r2, r0
 8008998:	460b      	mov	r3, r1
 800899a:	4610      	mov	r0, r2
 800899c:	4619      	mov	r1, r3
 800899e:	f7f8 f92b 	bl	8000bf8 <__aeabi_d2f>
 80089a2:	4603      	mov	r3, r0
 80089a4:	4ade      	ldr	r2, [pc, #888]	; (8008d20 <cal_mollifier_table+0x3c8>)
 80089a6:	6013      	str	r3, [r2, #0]
		mollifier_T=2*fabs(input.displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input.max_turning_velocity;
 80089a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80089ac:	eef0 7ae7 	vabs.f32	s15, s15
 80089b0:	ee17 0a90 	vmov	r0, s15
 80089b4:	f7f7 fdf0 	bl	8000598 <__aeabi_f2d>
 80089b8:	4602      	mov	r2, r0
 80089ba:	460b      	mov	r3, r1
 80089bc:	f7f7 fc8e 	bl	80002dc <__adddf3>
 80089c0:	4602      	mov	r2, r0
 80089c2:	460b      	mov	r3, r1
 80089c4:	4610      	mov	r0, r2
 80089c6:	4619      	mov	r1, r3
 80089c8:	a3cd      	add	r3, pc, #820	; (adr r3, 8008d00 <cal_mollifier_table+0x3a8>)
 80089ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ce:	f7f7 ff65 	bl	800089c <__aeabi_ddiv>
 80089d2:	4602      	mov	r2, r0
 80089d4:	460b      	mov	r3, r1
 80089d6:	4610      	mov	r0, r2
 80089d8:	4619      	mov	r1, r3
 80089da:	a3cb      	add	r3, pc, #812	; (adr r3, 8008d08 <cal_mollifier_table+0x3b0>)
 80089dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e0:	f7f7 fe32 	bl	8000648 <__aeabi_dmul>
 80089e4:	4602      	mov	r2, r0
 80089e6:	460b      	mov	r3, r1
 80089e8:	4614      	mov	r4, r2
 80089ea:	461d      	mov	r5, r3
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7f7 fdd2 	bl	8000598 <__aeabi_f2d>
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	4620      	mov	r0, r4
 80089fa:	4629      	mov	r1, r5
 80089fc:	f7f7 ff4e 	bl	800089c <__aeabi_ddiv>
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	4610      	mov	r0, r2
 8008a06:	4619      	mov	r1, r3
 8008a08:	f7f8 f8f6 	bl	8000bf8 <__aeabi_d2f>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	627b      	str	r3, [r7, #36]	; 0x24
		if (mollifier_timer>-mollifier_T/2 && mollifier_timer<mollifier_T/2){
 8008a10:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a14:	eef1 7a67 	vneg.f32	s15, s15
 8008a18:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008a1c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008a20:	4bbf      	ldr	r3, [pc, #764]	; (8008d20 <cal_mollifier_table+0x3c8>)
 8008a22:	edd3 7a00 	vldr	s15, [r3]
 8008a26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a2e:	f140 8698 	bpl.w	8009762 <cal_mollifier_table+0xe0a>
 8008a32:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a36:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008a3a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008a3e:	4bb8      	ldr	r3, [pc, #736]	; (8008d20 <cal_mollifier_table+0x3c8>)
 8008a40:	edd3 7a00 	vldr	s15, [r3]
 8008a44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a4c:	f340 8689 	ble.w	8009762 <cal_mollifier_table+0xe0a>
			old_velocity=target->velocity;
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	623b      	str	r3, [r7, #32]
			target->velocity = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-mollifier_timer*mollifier_timer));
 8008a56:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008a5a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a62:	edd7 7a05 	vldr	s15, [r7, #20]
 8008a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a6a:	ee17 0a90 	vmov	r0, s15
 8008a6e:	f7f7 fd93 	bl	8000598 <__aeabi_f2d>
 8008a72:	a3a3      	add	r3, pc, #652	; (adr r3, 8008d00 <cal_mollifier_table+0x3a8>)
 8008a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a78:	f7f7 ff10 	bl	800089c <__aeabi_ddiv>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	460b      	mov	r3, r1
 8008a80:	4614      	mov	r4, r2
 8008a82:	461d      	mov	r5, r3
 8008a84:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a88:	eeb1 7a67 	vneg.f32	s14, s15
 8008a8c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a94:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8008a98:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008a9c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008aa0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008aa4:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8008aa8:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8008aac:	4b9c      	ldr	r3, [pc, #624]	; (8008d20 <cal_mollifier_table+0x3c8>)
 8008aae:	ed93 6a00 	vldr	s12, [r3]
 8008ab2:	4b9b      	ldr	r3, [pc, #620]	; (8008d20 <cal_mollifier_table+0x3c8>)
 8008ab4:	edd3 7a00 	vldr	s15, [r3]
 8008ab8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008abc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008ac0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008ac4:	ee16 0a90 	vmov	r0, s13
 8008ac8:	f7f7 fd66 	bl	8000598 <__aeabi_f2d>
 8008acc:	4602      	mov	r2, r0
 8008ace:	460b      	mov	r3, r1
 8008ad0:	ec43 2b10 	vmov	d0, r2, r3
 8008ad4:	f01a faa0 	bl	8023018 <exp>
 8008ad8:	ec53 2b10 	vmov	r2, r3, d0
 8008adc:	4620      	mov	r0, r4
 8008ade:	4629      	mov	r1, r5
 8008ae0:	f7f7 fdb2 	bl	8000648 <__aeabi_dmul>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	4610      	mov	r0, r2
 8008aea:	4619      	mov	r1, r3
 8008aec:	f7f8 f884 	bl	8000bf8 <__aeabi_d2f>
 8008af0:	4602      	mov	r2, r0
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	601a      	str	r2, [r3, #0]
			//if(mollifier_timer<0){
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8008af6:	4b8a      	ldr	r3, [pc, #552]	; (8008d20 <cal_mollifier_table+0x3c8>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7f7 fd4c 	bl	8000598 <__aeabi_f2d>
 8008b00:	4604      	mov	r4, r0
 8008b02:	460d      	mov	r5, r1
 8008b04:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b08:	eef1 7a67 	vneg.f32	s15, s15
 8008b0c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008b10:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008b14:	ee16 0a90 	vmov	r0, s13
 8008b18:	f7f7 fd3e 	bl	8000598 <__aeabi_f2d>
 8008b1c:	a37c      	add	r3, pc, #496	; (adr r3, 8008d10 <cal_mollifier_table+0x3b8>)
 8008b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b22:	f7f7 febb 	bl	800089c <__aeabi_ddiv>
 8008b26:	4602      	mov	r2, r0
 8008b28:	460b      	mov	r3, r1
 8008b2a:	4690      	mov	r8, r2
 8008b2c:	4699      	mov	r9, r3
 8008b2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b30:	f7f7 fd32 	bl	8000598 <__aeabi_f2d>
 8008b34:	a370      	add	r3, pc, #448	; (adr r3, 8008cf8 <cal_mollifier_table+0x3a0>)
 8008b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3a:	f7f7 fd85 	bl	8000648 <__aeabi_dmul>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	460b      	mov	r3, r1
 8008b42:	4640      	mov	r0, r8
 8008b44:	4649      	mov	r1, r9
 8008b46:	f7f7 fbc9 	bl	80002dc <__adddf3>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	4620      	mov	r0, r4
 8008b50:	4629      	mov	r1, r5
 8008b52:	f7f7 ffeb 	bl	8000b2c <__aeabi_dcmplt>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f000 8163 	beq.w	8008e24 <cal_mollifier_table+0x4cc>
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(-mollifier_T/2/1.316)/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316))/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316)));
 8008b5e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008b62:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b72:	ee17 0a90 	vmov	r0, s15
 8008b76:	f7f7 fd0f 	bl	8000598 <__aeabi_f2d>
 8008b7a:	a361      	add	r3, pc, #388	; (adr r3, 8008d00 <cal_mollifier_table+0x3a8>)
 8008b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b80:	f7f7 fe8c 	bl	800089c <__aeabi_ddiv>
 8008b84:	4602      	mov	r2, r0
 8008b86:	460b      	mov	r3, r1
 8008b88:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008b8c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b90:	eeb1 7a67 	vneg.f32	s14, s15
 8008b94:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b9c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008ba0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008ba4:	ee16 0a90 	vmov	r0, s13
 8008ba8:	f7f7 fcf6 	bl	8000598 <__aeabi_f2d>
 8008bac:	4604      	mov	r4, r0
 8008bae:	460d      	mov	r5, r1
 8008bb0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008bb4:	eef1 7a67 	vneg.f32	s15, s15
 8008bb8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008bbc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008bc0:	ee16 0a90 	vmov	r0, s13
 8008bc4:	f7f7 fce8 	bl	8000598 <__aeabi_f2d>
 8008bc8:	a351      	add	r3, pc, #324	; (adr r3, 8008d10 <cal_mollifier_table+0x3b8>)
 8008bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bce:	f7f7 fe65 	bl	800089c <__aeabi_ddiv>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	4629      	mov	r1, r5
 8008bda:	f7f7 fd35 	bl	8000648 <__aeabi_dmul>
 8008bde:	4602      	mov	r2, r0
 8008be0:	460b      	mov	r3, r1
 8008be2:	4690      	mov	r8, r2
 8008be4:	4699      	mov	r9, r3
 8008be6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008bea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008bee:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008bf2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008bf6:	ee16 0a90 	vmov	r0, s13
 8008bfa:	f7f7 fccd 	bl	8000598 <__aeabi_f2d>
 8008bfe:	4604      	mov	r4, r0
 8008c00:	460d      	mov	r5, r1
 8008c02:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c06:	eef1 7a67 	vneg.f32	s15, s15
 8008c0a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008c0e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008c12:	ee16 0a90 	vmov	r0, s13
 8008c16:	f7f7 fcbf 	bl	8000598 <__aeabi_f2d>
 8008c1a:	a33d      	add	r3, pc, #244	; (adr r3, 8008d10 <cal_mollifier_table+0x3b8>)
 8008c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c20:	f7f7 fe3c 	bl	800089c <__aeabi_ddiv>
 8008c24:	4602      	mov	r2, r0
 8008c26:	460b      	mov	r3, r1
 8008c28:	4692      	mov	sl, r2
 8008c2a:	469b      	mov	fp, r3
 8008c2c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c30:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008c34:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008c38:	ee16 0a90 	vmov	r0, s13
 8008c3c:	f7f7 fcac 	bl	8000598 <__aeabi_f2d>
 8008c40:	a333      	add	r3, pc, #204	; (adr r3, 8008d10 <cal_mollifier_table+0x3b8>)
 8008c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c46:	f7f7 fe29 	bl	800089c <__aeabi_ddiv>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	4650      	mov	r0, sl
 8008c50:	4659      	mov	r1, fp
 8008c52:	f7f7 fcf9 	bl	8000648 <__aeabi_dmul>
 8008c56:	4602      	mov	r2, r0
 8008c58:	460b      	mov	r3, r1
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	4629      	mov	r1, r5
 8008c5e:	f7f7 fb3d 	bl	80002dc <__adddf3>
 8008c62:	4602      	mov	r2, r0
 8008c64:	460b      	mov	r3, r1
 8008c66:	4640      	mov	r0, r8
 8008c68:	4649      	mov	r1, r9
 8008c6a:	f7f7 fe17 	bl	800089c <__aeabi_ddiv>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	460b      	mov	r3, r1
 8008c72:	4690      	mov	r8, r2
 8008c74:	4699      	mov	r9, r3
 8008c76:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c7a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008c7e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008c82:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008c86:	ee16 0a90 	vmov	r0, s13
 8008c8a:	f7f7 fc85 	bl	8000598 <__aeabi_f2d>
 8008c8e:	4604      	mov	r4, r0
 8008c90:	460d      	mov	r5, r1
 8008c92:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c96:	eef1 7a67 	vneg.f32	s15, s15
 8008c9a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008c9e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008ca2:	ee16 0a90 	vmov	r0, s13
 8008ca6:	f7f7 fc77 	bl	8000598 <__aeabi_f2d>
 8008caa:	a319      	add	r3, pc, #100	; (adr r3, 8008d10 <cal_mollifier_table+0x3b8>)
 8008cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb0:	f7f7 fdf4 	bl	800089c <__aeabi_ddiv>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	4692      	mov	sl, r2
 8008cba:	469b      	mov	fp, r3
 8008cbc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008cc0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008cc4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008cc8:	ee16 0a90 	vmov	r0, s13
 8008ccc:	f7f7 fc64 	bl	8000598 <__aeabi_f2d>
 8008cd0:	a30f      	add	r3, pc, #60	; (adr r3, 8008d10 <cal_mollifier_table+0x3b8>)
 8008cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd6:	f7f7 fde1 	bl	800089c <__aeabi_ddiv>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	460b      	mov	r3, r1
 8008cde:	4650      	mov	r0, sl
 8008ce0:	4659      	mov	r1, fp
 8008ce2:	f7f7 fcb1 	bl	8000648 <__aeabi_dmul>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	460b      	mov	r3, r1
 8008cea:	4620      	mov	r0, r4
 8008cec:	4629      	mov	r1, r5
 8008cee:	f7f7 faf5 	bl	80002dc <__adddf3>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	e016      	b.n	8008d24 <cal_mollifier_table+0x3cc>
 8008cf6:	bf00      	nop
 8008cf8:	d2f1a9fc 	.word	0xd2f1a9fc
 8008cfc:	3f50624d 	.word	0x3f50624d
 8008d00:	f9db22d1 	.word	0xf9db22d1
 8008d04:	3fdc6a7e 	.word	0x3fdc6a7e
 8008d08:	362cef38 	.word	0x362cef38
 8008d0c:	3fd78b56 	.word	0x3fd78b56
 8008d10:	04189375 	.word	0x04189375
 8008d14:	3ff50e56 	.word	0x3ff50e56
 8008d18:	41700000 	.word	0x41700000
 8008d1c:	c1700000 	.word	0xc1700000
 8008d20:	20000800 	.word	0x20000800
 8008d24:	460b      	mov	r3, r1
 8008d26:	4640      	mov	r0, r8
 8008d28:	4649      	mov	r1, r9
 8008d2a:	f7f7 fdb7 	bl	800089c <__aeabi_ddiv>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	460b      	mov	r3, r1
 8008d32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d36:	f7f7 fc87 	bl	8000648 <__aeabi_dmul>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	4692      	mov	sl, r2
 8008d40:	469b      	mov	fp, r3
 8008d42:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d46:	eeb1 7a67 	vneg.f32	s14, s15
 8008d4a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d52:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008d56:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d5a:	ee16 0a90 	vmov	r0, s13
 8008d5e:	f7f7 fc1b 	bl	8000598 <__aeabi_f2d>
 8008d62:	4604      	mov	r4, r0
 8008d64:	460d      	mov	r5, r1
 8008d66:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d6a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008d6e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008d72:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d76:	ee16 0a90 	vmov	r0, s13
 8008d7a:	f7f7 fc0d 	bl	8000598 <__aeabi_f2d>
 8008d7e:	4680      	mov	r8, r0
 8008d80:	4689      	mov	r9, r1
 8008d82:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d86:	eef1 7a67 	vneg.f32	s15, s15
 8008d8a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008d8e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d92:	ee16 0a90 	vmov	r0, s13
 8008d96:	f7f7 fbff 	bl	8000598 <__aeabi_f2d>
 8008d9a:	a3e1      	add	r3, pc, #900	; (adr r3, 8009120 <cal_mollifier_table+0x7c8>)
 8008d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da0:	f7f7 fd7c 	bl	800089c <__aeabi_ddiv>
 8008da4:	4602      	mov	r2, r0
 8008da6:	460b      	mov	r3, r1
 8008da8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008dac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008db0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008db4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008db8:	ee16 0a90 	vmov	r0, s13
 8008dbc:	f7f7 fbec 	bl	8000598 <__aeabi_f2d>
 8008dc0:	a3d7      	add	r3, pc, #860	; (adr r3, 8009120 <cal_mollifier_table+0x7c8>)
 8008dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc6:	f7f7 fd69 	bl	800089c <__aeabi_ddiv>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	460b      	mov	r3, r1
 8008dce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008dd2:	f7f7 fc39 	bl	8000648 <__aeabi_dmul>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	460b      	mov	r3, r1
 8008dda:	4640      	mov	r0, r8
 8008ddc:	4649      	mov	r1, r9
 8008dde:	f7f7 fa7d 	bl	80002dc <__adddf3>
 8008de2:	4602      	mov	r2, r0
 8008de4:	460b      	mov	r3, r1
 8008de6:	4620      	mov	r0, r4
 8008de8:	4629      	mov	r1, r5
 8008dea:	f7f7 fd57 	bl	800089c <__aeabi_ddiv>
 8008dee:	4602      	mov	r2, r0
 8008df0:	460b      	mov	r3, r1
 8008df2:	ec43 2b17 	vmov	d7, r2, r3
 8008df6:	eeb0 0a47 	vmov.f32	s0, s14
 8008dfa:	eef0 0a67 	vmov.f32	s1, s15
 8008dfe:	f01a f90b 	bl	8023018 <exp>
 8008e02:	ec53 2b10 	vmov	r2, r3, d0
 8008e06:	4650      	mov	r0, sl
 8008e08:	4659      	mov	r1, fp
 8008e0a:	f7f7 fc1d 	bl	8000648 <__aeabi_dmul>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	460b      	mov	r3, r1
 8008e12:	4610      	mov	r0, r2
 8008e14:	4619      	mov	r1, r3
 8008e16:	f7f7 feef 	bl	8000bf8 <__aeabi_d2f>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8008e20:	f000 bcb4 	b.w	800978c <cal_mollifier_table+0xe34>
			}else if(mollifier_timer<0){
 8008e24:	4bc0      	ldr	r3, [pc, #768]	; (8009128 <cal_mollifier_table+0x7d0>)
 8008e26:	edd3 7a00 	vldr	s15, [r3]
 8008e2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e32:	f140 817b 	bpl.w	800912c <cal_mollifier_table+0x7d4>
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 8008e36:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008e3a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e42:	edd7 7a05 	vldr	s15, [r7, #20]
 8008e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e4a:	ee17 0a90 	vmov	r0, s15
 8008e4e:	f7f7 fba3 	bl	8000598 <__aeabi_f2d>
 8008e52:	a3af      	add	r3, pc, #700	; (adr r3, 8009110 <cal_mollifier_table+0x7b8>)
 8008e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e58:	f7f7 fd20 	bl	800089c <__aeabi_ddiv>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008e64:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e68:	eeb1 7a67 	vneg.f32	s14, s15
 8008e6c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e74:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008e78:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008e7c:	ee16 0a90 	vmov	r0, s13
 8008e80:	f7f7 fb8a 	bl	8000598 <__aeabi_f2d>
 8008e84:	4604      	mov	r4, r0
 8008e86:	460d      	mov	r5, r1
 8008e88:	4ba7      	ldr	r3, [pc, #668]	; (8009128 <cal_mollifier_table+0x7d0>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7f7 fb83 	bl	8000598 <__aeabi_f2d>
 8008e92:	4680      	mov	r8, r0
 8008e94:	4689      	mov	r9, r1
 8008e96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e98:	f7f7 fb7e 	bl	8000598 <__aeabi_f2d>
 8008e9c:	a39e      	add	r3, pc, #632	; (adr r3, 8009118 <cal_mollifier_table+0x7c0>)
 8008e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea2:	f7f7 fbd1 	bl	8000648 <__aeabi_dmul>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	4640      	mov	r0, r8
 8008eac:	4649      	mov	r1, r9
 8008eae:	f7f7 fa13 	bl	80002d8 <__aeabi_dsub>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	4629      	mov	r1, r5
 8008eba:	f7f7 fbc5 	bl	8000648 <__aeabi_dmul>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	e9c7 2300 	strd	r2, r3, [r7]
 8008ec6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008eca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008ece:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008ed2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008ed6:	ee16 0a90 	vmov	r0, s13
 8008eda:	f7f7 fb5d 	bl	8000598 <__aeabi_f2d>
 8008ede:	4680      	mov	r8, r0
 8008ee0:	4689      	mov	r9, r1
 8008ee2:	4b91      	ldr	r3, [pc, #580]	; (8009128 <cal_mollifier_table+0x7d0>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7f7 fb56 	bl	8000598 <__aeabi_f2d>
 8008eec:	4604      	mov	r4, r0
 8008eee:	460d      	mov	r5, r1
 8008ef0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ef2:	f7f7 fb51 	bl	8000598 <__aeabi_f2d>
 8008ef6:	a388      	add	r3, pc, #544	; (adr r3, 8009118 <cal_mollifier_table+0x7c0>)
 8008ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efc:	f7f7 fba4 	bl	8000648 <__aeabi_dmul>
 8008f00:	4602      	mov	r2, r0
 8008f02:	460b      	mov	r3, r1
 8008f04:	4620      	mov	r0, r4
 8008f06:	4629      	mov	r1, r5
 8008f08:	f7f7 f9e6 	bl	80002d8 <__aeabi_dsub>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	460b      	mov	r3, r1
 8008f10:	4692      	mov	sl, r2
 8008f12:	469b      	mov	fp, r3
 8008f14:	4b84      	ldr	r3, [pc, #528]	; (8009128 <cal_mollifier_table+0x7d0>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7f7 fb3d 	bl	8000598 <__aeabi_f2d>
 8008f1e:	4604      	mov	r4, r0
 8008f20:	460d      	mov	r5, r1
 8008f22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f24:	f7f7 fb38 	bl	8000598 <__aeabi_f2d>
 8008f28:	a37b      	add	r3, pc, #492	; (adr r3, 8009118 <cal_mollifier_table+0x7c0>)
 8008f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2e:	f7f7 fb8b 	bl	8000648 <__aeabi_dmul>
 8008f32:	4602      	mov	r2, r0
 8008f34:	460b      	mov	r3, r1
 8008f36:	4620      	mov	r0, r4
 8008f38:	4629      	mov	r1, r5
 8008f3a:	f7f7 f9cd 	bl	80002d8 <__aeabi_dsub>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	460b      	mov	r3, r1
 8008f42:	4650      	mov	r0, sl
 8008f44:	4659      	mov	r1, fp
 8008f46:	f7f7 fb7f 	bl	8000648 <__aeabi_dmul>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	4640      	mov	r0, r8
 8008f50:	4649      	mov	r1, r9
 8008f52:	f7f7 f9c1 	bl	80002d8 <__aeabi_dsub>
 8008f56:	4602      	mov	r2, r0
 8008f58:	460b      	mov	r3, r1
 8008f5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f5e:	f7f7 fc9d 	bl	800089c <__aeabi_ddiv>
 8008f62:	4602      	mov	r2, r0
 8008f64:	460b      	mov	r3, r1
 8008f66:	e9c7 2300 	strd	r2, r3, [r7]
 8008f6a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008f6e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008f72:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008f76:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008f7a:	ee16 0a90 	vmov	r0, s13
 8008f7e:	f7f7 fb0b 	bl	8000598 <__aeabi_f2d>
 8008f82:	4680      	mov	r8, r0
 8008f84:	4689      	mov	r9, r1
 8008f86:	4b68      	ldr	r3, [pc, #416]	; (8009128 <cal_mollifier_table+0x7d0>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7f7 fb04 	bl	8000598 <__aeabi_f2d>
 8008f90:	4604      	mov	r4, r0
 8008f92:	460d      	mov	r5, r1
 8008f94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f96:	f7f7 faff 	bl	8000598 <__aeabi_f2d>
 8008f9a:	a35f      	add	r3, pc, #380	; (adr r3, 8009118 <cal_mollifier_table+0x7c0>)
 8008f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa0:	f7f7 fb52 	bl	8000648 <__aeabi_dmul>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	4620      	mov	r0, r4
 8008faa:	4629      	mov	r1, r5
 8008fac:	f7f7 f994 	bl	80002d8 <__aeabi_dsub>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	4692      	mov	sl, r2
 8008fb6:	469b      	mov	fp, r3
 8008fb8:	4b5b      	ldr	r3, [pc, #364]	; (8009128 <cal_mollifier_table+0x7d0>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f7f7 faeb 	bl	8000598 <__aeabi_f2d>
 8008fc2:	4604      	mov	r4, r0
 8008fc4:	460d      	mov	r5, r1
 8008fc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fc8:	f7f7 fae6 	bl	8000598 <__aeabi_f2d>
 8008fcc:	a352      	add	r3, pc, #328	; (adr r3, 8009118 <cal_mollifier_table+0x7c0>)
 8008fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd2:	f7f7 fb39 	bl	8000648 <__aeabi_dmul>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	4620      	mov	r0, r4
 8008fdc:	4629      	mov	r1, r5
 8008fde:	f7f7 f97b 	bl	80002d8 <__aeabi_dsub>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	4650      	mov	r0, sl
 8008fe8:	4659      	mov	r1, fp
 8008fea:	f7f7 fb2d 	bl	8000648 <__aeabi_dmul>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	4640      	mov	r0, r8
 8008ff4:	4649      	mov	r1, r9
 8008ff6:	f7f7 f96f 	bl	80002d8 <__aeabi_dsub>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009002:	f7f7 fc4b 	bl	800089c <__aeabi_ddiv>
 8009006:	4602      	mov	r2, r0
 8009008:	460b      	mov	r3, r1
 800900a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800900e:	f7f7 fb1b 	bl	8000648 <__aeabi_dmul>
 8009012:	4602      	mov	r2, r0
 8009014:	460b      	mov	r3, r1
 8009016:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800901a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800901e:	eeb1 7a67 	vneg.f32	s14, s15
 8009022:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800902a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800902e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009032:	ee16 0a90 	vmov	r0, s13
 8009036:	f7f7 faaf 	bl	8000598 <__aeabi_f2d>
 800903a:	4680      	mov	r8, r0
 800903c:	4689      	mov	r9, r1
 800903e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009042:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009046:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800904a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800904e:	ee16 0a90 	vmov	r0, s13
 8009052:	f7f7 faa1 	bl	8000598 <__aeabi_f2d>
 8009056:	4682      	mov	sl, r0
 8009058:	468b      	mov	fp, r1
 800905a:	4b33      	ldr	r3, [pc, #204]	; (8009128 <cal_mollifier_table+0x7d0>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4618      	mov	r0, r3
 8009060:	f7f7 fa9a 	bl	8000598 <__aeabi_f2d>
 8009064:	4604      	mov	r4, r0
 8009066:	460d      	mov	r5, r1
 8009068:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800906a:	f7f7 fa95 	bl	8000598 <__aeabi_f2d>
 800906e:	a32a      	add	r3, pc, #168	; (adr r3, 8009118 <cal_mollifier_table+0x7c0>)
 8009070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009074:	f7f7 fae8 	bl	8000648 <__aeabi_dmul>
 8009078:	4602      	mov	r2, r0
 800907a:	460b      	mov	r3, r1
 800907c:	4620      	mov	r0, r4
 800907e:	4629      	mov	r1, r5
 8009080:	f7f7 f92a 	bl	80002d8 <__aeabi_dsub>
 8009084:	4602      	mov	r2, r0
 8009086:	460b      	mov	r3, r1
 8009088:	e9c7 2300 	strd	r2, r3, [r7]
 800908c:	4b26      	ldr	r3, [pc, #152]	; (8009128 <cal_mollifier_table+0x7d0>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4618      	mov	r0, r3
 8009092:	f7f7 fa81 	bl	8000598 <__aeabi_f2d>
 8009096:	4604      	mov	r4, r0
 8009098:	460d      	mov	r5, r1
 800909a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800909c:	f7f7 fa7c 	bl	8000598 <__aeabi_f2d>
 80090a0:	a31d      	add	r3, pc, #116	; (adr r3, 8009118 <cal_mollifier_table+0x7c0>)
 80090a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a6:	f7f7 facf 	bl	8000648 <__aeabi_dmul>
 80090aa:	4602      	mov	r2, r0
 80090ac:	460b      	mov	r3, r1
 80090ae:	4620      	mov	r0, r4
 80090b0:	4629      	mov	r1, r5
 80090b2:	f7f7 f911 	bl	80002d8 <__aeabi_dsub>
 80090b6:	4602      	mov	r2, r0
 80090b8:	460b      	mov	r3, r1
 80090ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090be:	f7f7 fac3 	bl	8000648 <__aeabi_dmul>
 80090c2:	4602      	mov	r2, r0
 80090c4:	460b      	mov	r3, r1
 80090c6:	4650      	mov	r0, sl
 80090c8:	4659      	mov	r1, fp
 80090ca:	f7f7 f905 	bl	80002d8 <__aeabi_dsub>
 80090ce:	4602      	mov	r2, r0
 80090d0:	460b      	mov	r3, r1
 80090d2:	4640      	mov	r0, r8
 80090d4:	4649      	mov	r1, r9
 80090d6:	f7f7 fbe1 	bl	800089c <__aeabi_ddiv>
 80090da:	4602      	mov	r2, r0
 80090dc:	460b      	mov	r3, r1
 80090de:	ec43 2b17 	vmov	d7, r2, r3
 80090e2:	eeb0 0a47 	vmov.f32	s0, s14
 80090e6:	eef0 0a67 	vmov.f32	s1, s15
 80090ea:	f019 ff95 	bl	8023018 <exp>
 80090ee:	ec53 2b10 	vmov	r2, r3, d0
 80090f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80090f6:	f7f7 faa7 	bl	8000648 <__aeabi_dmul>
 80090fa:	4602      	mov	r2, r0
 80090fc:	460b      	mov	r3, r1
 80090fe:	4610      	mov	r0, r2
 8009100:	4619      	mov	r1, r3
 8009102:	f7f7 fd79 	bl	8000bf8 <__aeabi_d2f>
 8009106:	4602      	mov	r2, r0
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 800910c:	e33e      	b.n	800978c <cal_mollifier_table+0xe34>
 800910e:	bf00      	nop
 8009110:	f9db22d1 	.word	0xf9db22d1
 8009114:	3fdc6a7e 	.word	0x3fdc6a7e
 8009118:	d2f1a9fc 	.word	0xd2f1a9fc
 800911c:	3f50624d 	.word	0x3f50624d
 8009120:	04189375 	.word	0x04189375
 8009124:	3ff50e56 	.word	0x3ff50e56
 8009128:	20000800 	.word	0x20000800
			}else if(mollifier_timer<mollifier_T/2/1.316+time_delay2*INTERRUPT_TIME){
 800912c:	4bd4      	ldr	r3, [pc, #848]	; (8009480 <cal_mollifier_table+0xb28>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4618      	mov	r0, r3
 8009132:	f7f7 fa31 	bl	8000598 <__aeabi_f2d>
 8009136:	4604      	mov	r4, r0
 8009138:	460d      	mov	r5, r1
 800913a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800913e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009142:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009146:	ee16 0a90 	vmov	r0, s13
 800914a:	f7f7 fa25 	bl	8000598 <__aeabi_f2d>
 800914e:	a3c6      	add	r3, pc, #792	; (adr r3, 8009468 <cal_mollifier_table+0xb10>)
 8009150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009154:	f7f7 fba2 	bl	800089c <__aeabi_ddiv>
 8009158:	4602      	mov	r2, r0
 800915a:	460b      	mov	r3, r1
 800915c:	4690      	mov	r8, r2
 800915e:	4699      	mov	r9, r3
 8009160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009162:	f7f7 fa19 	bl	8000598 <__aeabi_f2d>
 8009166:	a3c2      	add	r3, pc, #776	; (adr r3, 8009470 <cal_mollifier_table+0xb18>)
 8009168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916c:	f7f7 fa6c 	bl	8000648 <__aeabi_dmul>
 8009170:	4602      	mov	r2, r0
 8009172:	460b      	mov	r3, r1
 8009174:	4640      	mov	r0, r8
 8009176:	4649      	mov	r1, r9
 8009178:	f7f7 f8b0 	bl	80002dc <__adddf3>
 800917c:	4602      	mov	r2, r0
 800917e:	460b      	mov	r3, r1
 8009180:	4620      	mov	r0, r4
 8009182:	4629      	mov	r1, r5
 8009184:	f7f7 fcd2 	bl	8000b2c <__aeabi_dcmplt>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	f000 817a 	beq.w	8009484 <cal_mollifier_table+0xb2c>
				//target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay2)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2)));
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 8009190:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009194:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009198:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800919c:	edd7 7a05 	vldr	s15, [r7, #20]
 80091a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091a4:	ee17 0a90 	vmov	r0, s15
 80091a8:	f7f7 f9f6 	bl	8000598 <__aeabi_f2d>
 80091ac:	a3b2      	add	r3, pc, #712	; (adr r3, 8009478 <cal_mollifier_table+0xb20>)
 80091ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b2:	f7f7 fb73 	bl	800089c <__aeabi_ddiv>
 80091b6:	4602      	mov	r2, r0
 80091b8:	460b      	mov	r3, r1
 80091ba:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80091be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80091c2:	eeb1 7a67 	vneg.f32	s14, s15
 80091c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80091ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ce:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80091d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80091d6:	ee16 0a90 	vmov	r0, s13
 80091da:	f7f7 f9dd 	bl	8000598 <__aeabi_f2d>
 80091de:	4604      	mov	r4, r0
 80091e0:	460d      	mov	r5, r1
 80091e2:	4ba7      	ldr	r3, [pc, #668]	; (8009480 <cal_mollifier_table+0xb28>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7f7 f9d6 	bl	8000598 <__aeabi_f2d>
 80091ec:	4680      	mov	r8, r0
 80091ee:	4689      	mov	r9, r1
 80091f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091f2:	f7f7 f9d1 	bl	8000598 <__aeabi_f2d>
 80091f6:	a39e      	add	r3, pc, #632	; (adr r3, 8009470 <cal_mollifier_table+0xb18>)
 80091f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fc:	f7f7 fa24 	bl	8000648 <__aeabi_dmul>
 8009200:	4602      	mov	r2, r0
 8009202:	460b      	mov	r3, r1
 8009204:	4640      	mov	r0, r8
 8009206:	4649      	mov	r1, r9
 8009208:	f7f7 f866 	bl	80002d8 <__aeabi_dsub>
 800920c:	4602      	mov	r2, r0
 800920e:	460b      	mov	r3, r1
 8009210:	4620      	mov	r0, r4
 8009212:	4629      	mov	r1, r5
 8009214:	f7f7 fa18 	bl	8000648 <__aeabi_dmul>
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	e9c7 2300 	strd	r2, r3, [r7]
 8009220:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009224:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009228:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800922c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009230:	ee16 0a90 	vmov	r0, s13
 8009234:	f7f7 f9b0 	bl	8000598 <__aeabi_f2d>
 8009238:	4680      	mov	r8, r0
 800923a:	4689      	mov	r9, r1
 800923c:	4b90      	ldr	r3, [pc, #576]	; (8009480 <cal_mollifier_table+0xb28>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4618      	mov	r0, r3
 8009242:	f7f7 f9a9 	bl	8000598 <__aeabi_f2d>
 8009246:	4604      	mov	r4, r0
 8009248:	460d      	mov	r5, r1
 800924a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800924c:	f7f7 f9a4 	bl	8000598 <__aeabi_f2d>
 8009250:	a387      	add	r3, pc, #540	; (adr r3, 8009470 <cal_mollifier_table+0xb18>)
 8009252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009256:	f7f7 f9f7 	bl	8000648 <__aeabi_dmul>
 800925a:	4602      	mov	r2, r0
 800925c:	460b      	mov	r3, r1
 800925e:	4620      	mov	r0, r4
 8009260:	4629      	mov	r1, r5
 8009262:	f7f7 f839 	bl	80002d8 <__aeabi_dsub>
 8009266:	4602      	mov	r2, r0
 8009268:	460b      	mov	r3, r1
 800926a:	4692      	mov	sl, r2
 800926c:	469b      	mov	fp, r3
 800926e:	4b84      	ldr	r3, [pc, #528]	; (8009480 <cal_mollifier_table+0xb28>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4618      	mov	r0, r3
 8009274:	f7f7 f990 	bl	8000598 <__aeabi_f2d>
 8009278:	4604      	mov	r4, r0
 800927a:	460d      	mov	r5, r1
 800927c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800927e:	f7f7 f98b 	bl	8000598 <__aeabi_f2d>
 8009282:	a37b      	add	r3, pc, #492	; (adr r3, 8009470 <cal_mollifier_table+0xb18>)
 8009284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009288:	f7f7 f9de 	bl	8000648 <__aeabi_dmul>
 800928c:	4602      	mov	r2, r0
 800928e:	460b      	mov	r3, r1
 8009290:	4620      	mov	r0, r4
 8009292:	4629      	mov	r1, r5
 8009294:	f7f7 f820 	bl	80002d8 <__aeabi_dsub>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	4650      	mov	r0, sl
 800929e:	4659      	mov	r1, fp
 80092a0:	f7f7 f9d2 	bl	8000648 <__aeabi_dmul>
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	4640      	mov	r0, r8
 80092aa:	4649      	mov	r1, r9
 80092ac:	f7f7 f814 	bl	80002d8 <__aeabi_dsub>
 80092b0:	4602      	mov	r2, r0
 80092b2:	460b      	mov	r3, r1
 80092b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092b8:	f7f7 faf0 	bl	800089c <__aeabi_ddiv>
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	e9c7 2300 	strd	r2, r3, [r7]
 80092c4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80092c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80092cc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80092d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80092d4:	ee16 0a90 	vmov	r0, s13
 80092d8:	f7f7 f95e 	bl	8000598 <__aeabi_f2d>
 80092dc:	4680      	mov	r8, r0
 80092de:	4689      	mov	r9, r1
 80092e0:	4b67      	ldr	r3, [pc, #412]	; (8009480 <cal_mollifier_table+0xb28>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7f7 f957 	bl	8000598 <__aeabi_f2d>
 80092ea:	4604      	mov	r4, r0
 80092ec:	460d      	mov	r5, r1
 80092ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092f0:	f7f7 f952 	bl	8000598 <__aeabi_f2d>
 80092f4:	a35e      	add	r3, pc, #376	; (adr r3, 8009470 <cal_mollifier_table+0xb18>)
 80092f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fa:	f7f7 f9a5 	bl	8000648 <__aeabi_dmul>
 80092fe:	4602      	mov	r2, r0
 8009300:	460b      	mov	r3, r1
 8009302:	4620      	mov	r0, r4
 8009304:	4629      	mov	r1, r5
 8009306:	f7f6 ffe7 	bl	80002d8 <__aeabi_dsub>
 800930a:	4602      	mov	r2, r0
 800930c:	460b      	mov	r3, r1
 800930e:	4692      	mov	sl, r2
 8009310:	469b      	mov	fp, r3
 8009312:	4b5b      	ldr	r3, [pc, #364]	; (8009480 <cal_mollifier_table+0xb28>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4618      	mov	r0, r3
 8009318:	f7f7 f93e 	bl	8000598 <__aeabi_f2d>
 800931c:	4604      	mov	r4, r0
 800931e:	460d      	mov	r5, r1
 8009320:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009322:	f7f7 f939 	bl	8000598 <__aeabi_f2d>
 8009326:	a352      	add	r3, pc, #328	; (adr r3, 8009470 <cal_mollifier_table+0xb18>)
 8009328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932c:	f7f7 f98c 	bl	8000648 <__aeabi_dmul>
 8009330:	4602      	mov	r2, r0
 8009332:	460b      	mov	r3, r1
 8009334:	4620      	mov	r0, r4
 8009336:	4629      	mov	r1, r5
 8009338:	f7f6 ffce 	bl	80002d8 <__aeabi_dsub>
 800933c:	4602      	mov	r2, r0
 800933e:	460b      	mov	r3, r1
 8009340:	4650      	mov	r0, sl
 8009342:	4659      	mov	r1, fp
 8009344:	f7f7 f980 	bl	8000648 <__aeabi_dmul>
 8009348:	4602      	mov	r2, r0
 800934a:	460b      	mov	r3, r1
 800934c:	4640      	mov	r0, r8
 800934e:	4649      	mov	r1, r9
 8009350:	f7f6 ffc2 	bl	80002d8 <__aeabi_dsub>
 8009354:	4602      	mov	r2, r0
 8009356:	460b      	mov	r3, r1
 8009358:	e9d7 0100 	ldrd	r0, r1, [r7]
 800935c:	f7f7 fa9e 	bl	800089c <__aeabi_ddiv>
 8009360:	4602      	mov	r2, r0
 8009362:	460b      	mov	r3, r1
 8009364:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009368:	f7f7 f96e 	bl	8000648 <__aeabi_dmul>
 800936c:	4602      	mov	r2, r0
 800936e:	460b      	mov	r3, r1
 8009370:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009374:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009378:	eeb1 7a67 	vneg.f32	s14, s15
 800937c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009384:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009388:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800938c:	ee16 0a90 	vmov	r0, s13
 8009390:	f7f7 f902 	bl	8000598 <__aeabi_f2d>
 8009394:	4680      	mov	r8, r0
 8009396:	4689      	mov	r9, r1
 8009398:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800939c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80093a0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80093a4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80093a8:	ee16 0a90 	vmov	r0, s13
 80093ac:	f7f7 f8f4 	bl	8000598 <__aeabi_f2d>
 80093b0:	4682      	mov	sl, r0
 80093b2:	468b      	mov	fp, r1
 80093b4:	4b32      	ldr	r3, [pc, #200]	; (8009480 <cal_mollifier_table+0xb28>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7f7 f8ed 	bl	8000598 <__aeabi_f2d>
 80093be:	4604      	mov	r4, r0
 80093c0:	460d      	mov	r5, r1
 80093c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093c4:	f7f7 f8e8 	bl	8000598 <__aeabi_f2d>
 80093c8:	a329      	add	r3, pc, #164	; (adr r3, 8009470 <cal_mollifier_table+0xb18>)
 80093ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ce:	f7f7 f93b 	bl	8000648 <__aeabi_dmul>
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	4620      	mov	r0, r4
 80093d8:	4629      	mov	r1, r5
 80093da:	f7f6 ff7d 	bl	80002d8 <__aeabi_dsub>
 80093de:	4602      	mov	r2, r0
 80093e0:	460b      	mov	r3, r1
 80093e2:	e9c7 2300 	strd	r2, r3, [r7]
 80093e6:	4b26      	ldr	r3, [pc, #152]	; (8009480 <cal_mollifier_table+0xb28>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7f7 f8d4 	bl	8000598 <__aeabi_f2d>
 80093f0:	4604      	mov	r4, r0
 80093f2:	460d      	mov	r5, r1
 80093f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093f6:	f7f7 f8cf 	bl	8000598 <__aeabi_f2d>
 80093fa:	a31d      	add	r3, pc, #116	; (adr r3, 8009470 <cal_mollifier_table+0xb18>)
 80093fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009400:	f7f7 f922 	bl	8000648 <__aeabi_dmul>
 8009404:	4602      	mov	r2, r0
 8009406:	460b      	mov	r3, r1
 8009408:	4620      	mov	r0, r4
 800940a:	4629      	mov	r1, r5
 800940c:	f7f6 ff64 	bl	80002d8 <__aeabi_dsub>
 8009410:	4602      	mov	r2, r0
 8009412:	460b      	mov	r3, r1
 8009414:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009418:	f7f7 f916 	bl	8000648 <__aeabi_dmul>
 800941c:	4602      	mov	r2, r0
 800941e:	460b      	mov	r3, r1
 8009420:	4650      	mov	r0, sl
 8009422:	4659      	mov	r1, fp
 8009424:	f7f6 ff58 	bl	80002d8 <__aeabi_dsub>
 8009428:	4602      	mov	r2, r0
 800942a:	460b      	mov	r3, r1
 800942c:	4640      	mov	r0, r8
 800942e:	4649      	mov	r1, r9
 8009430:	f7f7 fa34 	bl	800089c <__aeabi_ddiv>
 8009434:	4602      	mov	r2, r0
 8009436:	460b      	mov	r3, r1
 8009438:	ec43 2b17 	vmov	d7, r2, r3
 800943c:	eeb0 0a47 	vmov.f32	s0, s14
 8009440:	eef0 0a67 	vmov.f32	s1, s15
 8009444:	f019 fde8 	bl	8023018 <exp>
 8009448:	ec53 2b10 	vmov	r2, r3, d0
 800944c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009450:	f7f7 f8fa 	bl	8000648 <__aeabi_dmul>
 8009454:	4602      	mov	r2, r0
 8009456:	460b      	mov	r3, r1
 8009458:	4610      	mov	r0, r2
 800945a:	4619      	mov	r1, r3
 800945c:	f7f7 fbcc 	bl	8000bf8 <__aeabi_d2f>
 8009460:	4602      	mov	r2, r0
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009466:	e191      	b.n	800978c <cal_mollifier_table+0xe34>
 8009468:	04189375 	.word	0x04189375
 800946c:	3ff50e56 	.word	0x3ff50e56
 8009470:	d2f1a9fc 	.word	0xd2f1a9fc
 8009474:	3f50624d 	.word	0x3f50624d
 8009478:	f9db22d1 	.word	0xf9db22d1
 800947c:	3fdc6a7e 	.word	0x3fdc6a7e
 8009480:	20000800 	.word	0x20000800
			}else{
				time_delay=0;
 8009484:	f04f 0300 	mov.w	r3, #0
 8009488:	62fb      	str	r3, [r7, #44]	; 0x2c
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 800948a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800948e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009496:	edd7 7a05 	vldr	s15, [r7, #20]
 800949a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800949e:	ee17 0a90 	vmov	r0, s15
 80094a2:	f7f7 f879 	bl	8000598 <__aeabi_f2d>
 80094a6:	a3c0      	add	r3, pc, #768	; (adr r3, 80097a8 <cal_mollifier_table+0xe50>)
 80094a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ac:	f7f7 f9f6 	bl	800089c <__aeabi_ddiv>
 80094b0:	4602      	mov	r2, r0
 80094b2:	460b      	mov	r3, r1
 80094b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80094b8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80094bc:	eeb1 7a67 	vneg.f32	s14, s15
 80094c0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80094c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094c8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80094cc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80094d0:	ee16 0a90 	vmov	r0, s13
 80094d4:	f7f7 f860 	bl	8000598 <__aeabi_f2d>
 80094d8:	4604      	mov	r4, r0
 80094da:	460d      	mov	r5, r1
 80094dc:	4bb0      	ldr	r3, [pc, #704]	; (80097a0 <cal_mollifier_table+0xe48>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7f7 f859 	bl	8000598 <__aeabi_f2d>
 80094e6:	4680      	mov	r8, r0
 80094e8:	4689      	mov	r9, r1
 80094ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094ec:	f7f7 f854 	bl	8000598 <__aeabi_f2d>
 80094f0:	a3a9      	add	r3, pc, #676	; (adr r3, 8009798 <cal_mollifier_table+0xe40>)
 80094f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f6:	f7f7 f8a7 	bl	8000648 <__aeabi_dmul>
 80094fa:	4602      	mov	r2, r0
 80094fc:	460b      	mov	r3, r1
 80094fe:	4640      	mov	r0, r8
 8009500:	4649      	mov	r1, r9
 8009502:	f7f6 fee9 	bl	80002d8 <__aeabi_dsub>
 8009506:	4602      	mov	r2, r0
 8009508:	460b      	mov	r3, r1
 800950a:	4620      	mov	r0, r4
 800950c:	4629      	mov	r1, r5
 800950e:	f7f7 f89b 	bl	8000648 <__aeabi_dmul>
 8009512:	4602      	mov	r2, r0
 8009514:	460b      	mov	r3, r1
 8009516:	e9c7 2300 	strd	r2, r3, [r7]
 800951a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800951e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009522:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009526:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800952a:	ee16 0a90 	vmov	r0, s13
 800952e:	f7f7 f833 	bl	8000598 <__aeabi_f2d>
 8009532:	4680      	mov	r8, r0
 8009534:	4689      	mov	r9, r1
 8009536:	4b9a      	ldr	r3, [pc, #616]	; (80097a0 <cal_mollifier_table+0xe48>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4618      	mov	r0, r3
 800953c:	f7f7 f82c 	bl	8000598 <__aeabi_f2d>
 8009540:	4604      	mov	r4, r0
 8009542:	460d      	mov	r5, r1
 8009544:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009546:	f7f7 f827 	bl	8000598 <__aeabi_f2d>
 800954a:	a393      	add	r3, pc, #588	; (adr r3, 8009798 <cal_mollifier_table+0xe40>)
 800954c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009550:	f7f7 f87a 	bl	8000648 <__aeabi_dmul>
 8009554:	4602      	mov	r2, r0
 8009556:	460b      	mov	r3, r1
 8009558:	4620      	mov	r0, r4
 800955a:	4629      	mov	r1, r5
 800955c:	f7f6 febc 	bl	80002d8 <__aeabi_dsub>
 8009560:	4602      	mov	r2, r0
 8009562:	460b      	mov	r3, r1
 8009564:	4692      	mov	sl, r2
 8009566:	469b      	mov	fp, r3
 8009568:	4b8d      	ldr	r3, [pc, #564]	; (80097a0 <cal_mollifier_table+0xe48>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4618      	mov	r0, r3
 800956e:	f7f7 f813 	bl	8000598 <__aeabi_f2d>
 8009572:	4604      	mov	r4, r0
 8009574:	460d      	mov	r5, r1
 8009576:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009578:	f7f7 f80e 	bl	8000598 <__aeabi_f2d>
 800957c:	a386      	add	r3, pc, #536	; (adr r3, 8009798 <cal_mollifier_table+0xe40>)
 800957e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009582:	f7f7 f861 	bl	8000648 <__aeabi_dmul>
 8009586:	4602      	mov	r2, r0
 8009588:	460b      	mov	r3, r1
 800958a:	4620      	mov	r0, r4
 800958c:	4629      	mov	r1, r5
 800958e:	f7f6 fea3 	bl	80002d8 <__aeabi_dsub>
 8009592:	4602      	mov	r2, r0
 8009594:	460b      	mov	r3, r1
 8009596:	4650      	mov	r0, sl
 8009598:	4659      	mov	r1, fp
 800959a:	f7f7 f855 	bl	8000648 <__aeabi_dmul>
 800959e:	4602      	mov	r2, r0
 80095a0:	460b      	mov	r3, r1
 80095a2:	4640      	mov	r0, r8
 80095a4:	4649      	mov	r1, r9
 80095a6:	f7f6 fe97 	bl	80002d8 <__aeabi_dsub>
 80095aa:	4602      	mov	r2, r0
 80095ac:	460b      	mov	r3, r1
 80095ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095b2:	f7f7 f973 	bl	800089c <__aeabi_ddiv>
 80095b6:	4602      	mov	r2, r0
 80095b8:	460b      	mov	r3, r1
 80095ba:	e9c7 2300 	strd	r2, r3, [r7]
 80095be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80095c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80095c6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80095ca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80095ce:	ee16 0a90 	vmov	r0, s13
 80095d2:	f7f6 ffe1 	bl	8000598 <__aeabi_f2d>
 80095d6:	4680      	mov	r8, r0
 80095d8:	4689      	mov	r9, r1
 80095da:	4b71      	ldr	r3, [pc, #452]	; (80097a0 <cal_mollifier_table+0xe48>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4618      	mov	r0, r3
 80095e0:	f7f6 ffda 	bl	8000598 <__aeabi_f2d>
 80095e4:	4604      	mov	r4, r0
 80095e6:	460d      	mov	r5, r1
 80095e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095ea:	f7f6 ffd5 	bl	8000598 <__aeabi_f2d>
 80095ee:	a36a      	add	r3, pc, #424	; (adr r3, 8009798 <cal_mollifier_table+0xe40>)
 80095f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f4:	f7f7 f828 	bl	8000648 <__aeabi_dmul>
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	4620      	mov	r0, r4
 80095fe:	4629      	mov	r1, r5
 8009600:	f7f6 fe6a 	bl	80002d8 <__aeabi_dsub>
 8009604:	4602      	mov	r2, r0
 8009606:	460b      	mov	r3, r1
 8009608:	4692      	mov	sl, r2
 800960a:	469b      	mov	fp, r3
 800960c:	4b64      	ldr	r3, [pc, #400]	; (80097a0 <cal_mollifier_table+0xe48>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4618      	mov	r0, r3
 8009612:	f7f6 ffc1 	bl	8000598 <__aeabi_f2d>
 8009616:	4604      	mov	r4, r0
 8009618:	460d      	mov	r5, r1
 800961a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800961c:	f7f6 ffbc 	bl	8000598 <__aeabi_f2d>
 8009620:	a35d      	add	r3, pc, #372	; (adr r3, 8009798 <cal_mollifier_table+0xe40>)
 8009622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009626:	f7f7 f80f 	bl	8000648 <__aeabi_dmul>
 800962a:	4602      	mov	r2, r0
 800962c:	460b      	mov	r3, r1
 800962e:	4620      	mov	r0, r4
 8009630:	4629      	mov	r1, r5
 8009632:	f7f6 fe51 	bl	80002d8 <__aeabi_dsub>
 8009636:	4602      	mov	r2, r0
 8009638:	460b      	mov	r3, r1
 800963a:	4650      	mov	r0, sl
 800963c:	4659      	mov	r1, fp
 800963e:	f7f7 f803 	bl	8000648 <__aeabi_dmul>
 8009642:	4602      	mov	r2, r0
 8009644:	460b      	mov	r3, r1
 8009646:	4640      	mov	r0, r8
 8009648:	4649      	mov	r1, r9
 800964a:	f7f6 fe45 	bl	80002d8 <__aeabi_dsub>
 800964e:	4602      	mov	r2, r0
 8009650:	460b      	mov	r3, r1
 8009652:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009656:	f7f7 f921 	bl	800089c <__aeabi_ddiv>
 800965a:	4602      	mov	r2, r0
 800965c:	460b      	mov	r3, r1
 800965e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009662:	f7f6 fff1 	bl	8000648 <__aeabi_dmul>
 8009666:	4602      	mov	r2, r0
 8009668:	460b      	mov	r3, r1
 800966a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800966e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009672:	eeb1 7a67 	vneg.f32	s14, s15
 8009676:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800967a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800967e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009682:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009686:	ee16 0a90 	vmov	r0, s13
 800968a:	f7f6 ff85 	bl	8000598 <__aeabi_f2d>
 800968e:	4680      	mov	r8, r0
 8009690:	4689      	mov	r9, r1
 8009692:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009696:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800969a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800969e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80096a2:	ee16 0a90 	vmov	r0, s13
 80096a6:	f7f6 ff77 	bl	8000598 <__aeabi_f2d>
 80096aa:	4682      	mov	sl, r0
 80096ac:	468b      	mov	fp, r1
 80096ae:	4b3c      	ldr	r3, [pc, #240]	; (80097a0 <cal_mollifier_table+0xe48>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7f6 ff70 	bl	8000598 <__aeabi_f2d>
 80096b8:	4604      	mov	r4, r0
 80096ba:	460d      	mov	r5, r1
 80096bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096be:	f7f6 ff6b 	bl	8000598 <__aeabi_f2d>
 80096c2:	a335      	add	r3, pc, #212	; (adr r3, 8009798 <cal_mollifier_table+0xe40>)
 80096c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c8:	f7f6 ffbe 	bl	8000648 <__aeabi_dmul>
 80096cc:	4602      	mov	r2, r0
 80096ce:	460b      	mov	r3, r1
 80096d0:	4620      	mov	r0, r4
 80096d2:	4629      	mov	r1, r5
 80096d4:	f7f6 fe00 	bl	80002d8 <__aeabi_dsub>
 80096d8:	4602      	mov	r2, r0
 80096da:	460b      	mov	r3, r1
 80096dc:	e9c7 2300 	strd	r2, r3, [r7]
 80096e0:	4b2f      	ldr	r3, [pc, #188]	; (80097a0 <cal_mollifier_table+0xe48>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7f6 ff57 	bl	8000598 <__aeabi_f2d>
 80096ea:	4604      	mov	r4, r0
 80096ec:	460d      	mov	r5, r1
 80096ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096f0:	f7f6 ff52 	bl	8000598 <__aeabi_f2d>
 80096f4:	a328      	add	r3, pc, #160	; (adr r3, 8009798 <cal_mollifier_table+0xe40>)
 80096f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fa:	f7f6 ffa5 	bl	8000648 <__aeabi_dmul>
 80096fe:	4602      	mov	r2, r0
 8009700:	460b      	mov	r3, r1
 8009702:	4620      	mov	r0, r4
 8009704:	4629      	mov	r1, r5
 8009706:	f7f6 fde7 	bl	80002d8 <__aeabi_dsub>
 800970a:	4602      	mov	r2, r0
 800970c:	460b      	mov	r3, r1
 800970e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009712:	f7f6 ff99 	bl	8000648 <__aeabi_dmul>
 8009716:	4602      	mov	r2, r0
 8009718:	460b      	mov	r3, r1
 800971a:	4650      	mov	r0, sl
 800971c:	4659      	mov	r1, fp
 800971e:	f7f6 fddb 	bl	80002d8 <__aeabi_dsub>
 8009722:	4602      	mov	r2, r0
 8009724:	460b      	mov	r3, r1
 8009726:	4640      	mov	r0, r8
 8009728:	4649      	mov	r1, r9
 800972a:	f7f7 f8b7 	bl	800089c <__aeabi_ddiv>
 800972e:	4602      	mov	r2, r0
 8009730:	460b      	mov	r3, r1
 8009732:	ec43 2b17 	vmov	d7, r2, r3
 8009736:	eeb0 0a47 	vmov.f32	s0, s14
 800973a:	eef0 0a67 	vmov.f32	s1, s15
 800973e:	f019 fc6b 	bl	8023018 <exp>
 8009742:	ec53 2b10 	vmov	r2, r3, d0
 8009746:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800974a:	f7f6 ff7d 	bl	8000648 <__aeabi_dmul>
 800974e:	4602      	mov	r2, r0
 8009750:	460b      	mov	r3, r1
 8009752:	4610      	mov	r0, r2
 8009754:	4619      	mov	r1, r3
 8009756:	f7f7 fa4f 	bl	8000bf8 <__aeabi_d2f>
 800975a:	4602      	mov	r2, r0
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009760:	e014      	b.n	800978c <cal_mollifier_table+0xe34>
//				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_T/2/1.316)/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316))/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316)));;
				//target->acceleration = 0;
			}
		}else{
			old_velocity=target->velocity;
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	623b      	str	r3, [r7, #32]
			target->velocity=0;
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	f04f 0200 	mov.w	r2, #0
 800976e:	601a      	str	r2, [r3, #0]
			target->acceleration = target->velocity-old_velocity;
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	ed93 7a00 	vldr	s14, [r3]
 8009776:	edd7 7a08 	vldr	s15, [r7, #32]
 800977a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=4;
 8009784:	4b07      	ldr	r3, [pc, #28]	; (80097a4 <cal_mollifier_table+0xe4c>)
 8009786:	2204      	movs	r2, #4
 8009788:	701a      	strb	r2, [r3, #0]
		}

}
 800978a:	bf00      	nop
 800978c:	bf00      	nop
 800978e:	3730      	adds	r7, #48	; 0x30
 8009790:	46bd      	mov	sp, r7
 8009792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009796:	bf00      	nop
 8009798:	d2f1a9fc 	.word	0xd2f1a9fc
 800979c:	3f50624d 	.word	0x3f50624d
 80097a0:	20000800 	.word	0x20000800
 80097a4:	20000804 	.word	0x20000804
 80097a8:	f9db22d1 	.word	0xf9db22d1
 80097ac:	3fdc6a7e 	.word	0x3fdc6a7e

080097b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80097b6:	4b12      	ldr	r3, [pc, #72]	; (8009800 <MX_DMA_Init+0x50>)
 80097b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097ba:	4a11      	ldr	r2, [pc, #68]	; (8009800 <MX_DMA_Init+0x50>)
 80097bc:	f043 0304 	orr.w	r3, r3, #4
 80097c0:	6493      	str	r3, [r2, #72]	; 0x48
 80097c2:	4b0f      	ldr	r3, [pc, #60]	; (8009800 <MX_DMA_Init+0x50>)
 80097c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097c6:	f003 0304 	and.w	r3, r3, #4
 80097ca:	607b      	str	r3, [r7, #4]
 80097cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80097ce:	4b0c      	ldr	r3, [pc, #48]	; (8009800 <MX_DMA_Init+0x50>)
 80097d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097d2:	4a0b      	ldr	r2, [pc, #44]	; (8009800 <MX_DMA_Init+0x50>)
 80097d4:	f043 0301 	orr.w	r3, r3, #1
 80097d8:	6493      	str	r3, [r2, #72]	; 0x48
 80097da:	4b09      	ldr	r3, [pc, #36]	; (8009800 <MX_DMA_Init+0x50>)
 80097dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097de:	f003 0301 	and.w	r3, r3, #1
 80097e2:	603b      	str	r3, [r7, #0]
 80097e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80097e6:	2200      	movs	r2, #0
 80097e8:	2100      	movs	r1, #0
 80097ea:	200b      	movs	r0, #11
 80097ec:	f011 fd85 	bl	801b2fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80097f0:	200b      	movs	r0, #11
 80097f2:	f011 fd9c 	bl	801b32e <HAL_NVIC_EnableIRQ>

}
 80097f6:	bf00      	nop
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	40021000 	.word	0x40021000

08009804 <init_FailSafe>:
float encoder_PID_error_highspeed;
float gyro_PID_error_highspeed;
float gyro_x_error_highspeed;
int error_time_count;

void init_FailSafe(void){
 8009804:	b480      	push	{r7}
 8009806:	af00      	add	r7, sp, #0
	error_mode=0;
 8009808:	4b11      	ldr	r3, [pc, #68]	; (8009850 <init_FailSafe+0x4c>)
 800980a:	2200      	movs	r2, #0
 800980c:	701a      	strb	r2, [r3, #0]
	no_safty=0;
 800980e:	4b11      	ldr	r3, [pc, #68]	; (8009854 <init_FailSafe+0x50>)
 8009810:	2200      	movs	r2, #0
 8009812:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 8009814:	4b10      	ldr	r3, [pc, #64]	; (8009858 <init_FailSafe+0x54>)
 8009816:	2200      	movs	r2, #0
 8009818:	701a      	strb	r2, [r3, #0]
	error_time_count=0;
 800981a:	4b10      	ldr	r3, [pc, #64]	; (800985c <init_FailSafe+0x58>)
 800981c:	2200      	movs	r2, #0
 800981e:	601a      	str	r2, [r3, #0]
	encoder_PID_error=1500;
 8009820:	4b0f      	ldr	r3, [pc, #60]	; (8009860 <init_FailSafe+0x5c>)
 8009822:	4a10      	ldr	r2, [pc, #64]	; (8009864 <init_FailSafe+0x60>)
 8009824:	601a      	str	r2, [r3, #0]
	gyro_PID_error=800;
 8009826:	4b10      	ldr	r3, [pc, #64]	; (8009868 <init_FailSafe+0x64>)
 8009828:	4a10      	ldr	r2, [pc, #64]	; (800986c <init_FailSafe+0x68>)
 800982a:	601a      	str	r2, [r3, #0]
	gyro_x_error=1500;
 800982c:	4b10      	ldr	r3, [pc, #64]	; (8009870 <init_FailSafe+0x6c>)
 800982e:	4a0d      	ldr	r2, [pc, #52]	; (8009864 <init_FailSafe+0x60>)
 8009830:	601a      	str	r2, [r3, #0]

	encoder_PID_error_highspeed=3500;//3000
 8009832:	4b10      	ldr	r3, [pc, #64]	; (8009874 <init_FailSafe+0x70>)
 8009834:	4a10      	ldr	r2, [pc, #64]	; (8009878 <init_FailSafe+0x74>)
 8009836:	601a      	str	r2, [r3, #0]
	gyro_PID_error_highspeed=1900;
 8009838:	4b10      	ldr	r3, [pc, #64]	; (800987c <init_FailSafe+0x78>)
 800983a:	4a11      	ldr	r2, [pc, #68]	; (8009880 <init_FailSafe+0x7c>)
 800983c:	601a      	str	r2, [r3, #0]
	gyro_x_error_highspeed=1900;
 800983e:	4b11      	ldr	r3, [pc, #68]	; (8009884 <init_FailSafe+0x80>)
 8009840:	4a0f      	ldr	r2, [pc, #60]	; (8009880 <init_FailSafe+0x7c>)
 8009842:	601a      	str	r2, [r3, #0]
}
 8009844:	bf00      	nop
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop
 8009850:	20000807 	.word	0x20000807
 8009854:	20000806 	.word	0x20000806
 8009858:	20000808 	.word	0x20000808
 800985c:	20000824 	.word	0x20000824
 8009860:	2000080c 	.word	0x2000080c
 8009864:	44bb8000 	.word	0x44bb8000
 8009868:	20000810 	.word	0x20000810
 800986c:	44480000 	.word	0x44480000
 8009870:	20000814 	.word	0x20000814
 8009874:	20000818 	.word	0x20000818
 8009878:	455ac000 	.word	0x455ac000
 800987c:	2000081c 	.word	0x2000081c
 8009880:	44ed8000 	.word	0x44ed8000
 8009884:	20000820 	.word	0x20000820

08009888 <interrupt_FailSafe>:


void interrupt_FailSafe(void){
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
	float encoder_PID_error_in;
	float gyro_PID_error_in;
	float gyro_x_error_in;

	if (highspeed_mode == 0) {
 800988e:	4b6e      	ldr	r3, [pc, #440]	; (8009a48 <interrupt_FailSafe+0x1c0>)
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d109      	bne.n	80098aa <interrupt_FailSafe+0x22>
		encoder_PID_error_in=encoder_PID_error;
 8009896:	4b6d      	ldr	r3, [pc, #436]	; (8009a4c <interrupt_FailSafe+0x1c4>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error;
 800989c:	4b6c      	ldr	r3, [pc, #432]	; (8009a50 <interrupt_FailSafe+0x1c8>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error;
 80098a2:	4b6c      	ldr	r3, [pc, #432]	; (8009a54 <interrupt_FailSafe+0x1cc>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	607b      	str	r3, [r7, #4]
 80098a8:	e008      	b.n	80098bc <interrupt_FailSafe+0x34>
	}else{
		encoder_PID_error_in=encoder_PID_error_highspeed;
 80098aa:	4b6b      	ldr	r3, [pc, #428]	; (8009a58 <interrupt_FailSafe+0x1d0>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error_highspeed;
 80098b0:	4b6a      	ldr	r3, [pc, #424]	; (8009a5c <interrupt_FailSafe+0x1d4>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error_highspeed;
 80098b6:	4b6a      	ldr	r3, [pc, #424]	; (8009a60 <interrupt_FailSafe+0x1d8>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	607b      	str	r3, [r7, #4]
	}

	if (modeacc != 0 && modeacc != 3){
 80098bc:	4b69      	ldr	r3, [pc, #420]	; (8009a64 <interrupt_FailSafe+0x1dc>)
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d062      	beq.n	800998a <interrupt_FailSafe+0x102>
 80098c4:	4b67      	ldr	r3, [pc, #412]	; (8009a64 <interrupt_FailSafe+0x1dc>)
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	2b03      	cmp	r3, #3
 80098ca:	d05e      	beq.n	800998a <interrupt_FailSafe+0x102>
		if (no_safty == 0 && error_mode == 0) {
 80098cc:	4b66      	ldr	r3, [pc, #408]	; (8009a68 <interrupt_FailSafe+0x1e0>)
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d15a      	bne.n	800998a <interrupt_FailSafe+0x102>
 80098d4:	4b65      	ldr	r3, [pc, #404]	; (8009a6c <interrupt_FailSafe+0x1e4>)
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d156      	bne.n	800998a <interrupt_FailSafe+0x102>
			//ジャイロの誤差が一定以上
					if (fabs(turning.velocity - angle_speed) >= gyro_PID_error_in ) {
 80098dc:	4b64      	ldr	r3, [pc, #400]	; (8009a70 <interrupt_FailSafe+0x1e8>)
 80098de:	ed93 7a00 	vldr	s14, [r3]
 80098e2:	4b64      	ldr	r3, [pc, #400]	; (8009a74 <interrupt_FailSafe+0x1ec>)
 80098e4:	edd3 7a00 	vldr	s15, [r3]
 80098e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098ec:	eef0 7ae7 	vabs.f32	s15, s15
 80098f0:	ed97 7a02 	vldr	s14, [r7, #8]
 80098f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80098f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098fc:	d809      	bhi.n	8009912 <interrupt_FailSafe+0x8a>
						//(gyro.omega_x >= 320 && gyro.omega_y >= 320) ||
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 80098fe:	f7fe f87b 	bl	80079f8 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(1);
 8009902:	2001      	movs	r0, #1
 8009904:	f7fd fa90 	bl	8006e28 <pl_yellow_LED_count>
						error_mode = 1;
 8009908:	4b58      	ldr	r3, [pc, #352]	; (8009a6c <interrupt_FailSafe+0x1e4>)
 800990a:	2201      	movs	r2, #1
 800990c:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 800990e:	f7fa fe4f 	bl	80045b0 <clear_Ierror>
					}
					if (angle_speedx_set >= gyro_x_error_in) {
 8009912:	4b59      	ldr	r3, [pc, #356]	; (8009a78 <interrupt_FailSafe+0x1f0>)
 8009914:	edd3 7a00 	vldr	s15, [r3]
 8009918:	ed97 7a01 	vldr	s14, [r7, #4]
 800991c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009924:	d809      	bhi.n	800993a <interrupt_FailSafe+0xb2>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 8009926:	f7fe f867 	bl	80079f8 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(2);
 800992a:	2002      	movs	r0, #2
 800992c:	f7fd fa7c 	bl	8006e28 <pl_yellow_LED_count>
						error_mode = 1;
 8009930:	4b4e      	ldr	r3, [pc, #312]	; (8009a6c <interrupt_FailSafe+0x1e4>)
 8009932:	2201      	movs	r2, #1
 8009934:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 8009936:	f7fa fe3b 	bl	80045b0 <clear_Ierror>
					}
					if(fabs(straight.velocity - (fusion_speedR+fusion_speedL)/2) >= encoder_PID_error_in && modeacc==1){
 800993a:	4b50      	ldr	r3, [pc, #320]	; (8009a7c <interrupt_FailSafe+0x1f4>)
 800993c:	ed93 7a00 	vldr	s14, [r3]
 8009940:	4b4f      	ldr	r3, [pc, #316]	; (8009a80 <interrupt_FailSafe+0x1f8>)
 8009942:	edd3 6a00 	vldr	s13, [r3]
 8009946:	4b4f      	ldr	r3, [pc, #316]	; (8009a84 <interrupt_FailSafe+0x1fc>)
 8009948:	edd3 7a00 	vldr	s15, [r3]
 800994c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009950:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8009954:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009958:	ee77 7a67 	vsub.f32	s15, s14, s15
 800995c:	eef0 7ae7 	vabs.f32	s15, s15
 8009960:	ed97 7a03 	vldr	s14, [r7, #12]
 8009964:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800996c:	d80d      	bhi.n	800998a <interrupt_FailSafe+0x102>
 800996e:	4b3d      	ldr	r3, [pc, #244]	; (8009a64 <interrupt_FailSafe+0x1dc>)
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	2b01      	cmp	r3, #1
 8009974:	d109      	bne.n	800998a <interrupt_FailSafe+0x102>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 8009976:	f7fe f83f 	bl	80079f8 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(4);
 800997a:	2004      	movs	r0, #4
 800997c:	f7fd fa54 	bl	8006e28 <pl_yellow_LED_count>
						error_mode = 1;
 8009980:	4b3a      	ldr	r3, [pc, #232]	; (8009a6c <interrupt_FailSafe+0x1e4>)
 8009982:	2201      	movs	r2, #1
 8009984:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 8009986:	f7fa fe13 	bl	80045b0 <clear_Ierror>

				}

	}

	if(error_mode==1){
 800998a:	4b38      	ldr	r3, [pc, #224]	; (8009a6c <interrupt_FailSafe+0x1e4>)
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	2b01      	cmp	r3, #1
 8009990:	d153      	bne.n	8009a3a <interrupt_FailSafe+0x1b2>
		record_mode=0;
 8009992:	4b3d      	ldr	r3, [pc, #244]	; (8009a88 <interrupt_FailSafe+0x200>)
 8009994:	2200      	movs	r2, #0
 8009996:	701a      	strb	r2, [r3, #0]
		error_time_count++;
 8009998:	4b3c      	ldr	r3, [pc, #240]	; (8009a8c <interrupt_FailSafe+0x204>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	3301      	adds	r3, #1
 800999e:	4a3b      	ldr	r2, [pc, #236]	; (8009a8c <interrupt_FailSafe+0x204>)
 80099a0:	6013      	str	r3, [r2, #0]
		if(error_time_count<=1000){
 80099a2:	4b3a      	ldr	r3, [pc, #232]	; (8009a8c <interrupt_FailSafe+0x204>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099aa:	dc05      	bgt.n	80099b8 <interrupt_FailSafe+0x130>
			init_WallControl();
 80099ac:	f7fa ff5a 	bl	8004864 <init_WallControl>
			modeacc=100;//エラー用
 80099b0:	4b2c      	ldr	r3, [pc, #176]	; (8009a64 <interrupt_FailSafe+0x1dc>)
 80099b2:	2264      	movs	r2, #100	; 0x64
 80099b4:	701a      	strb	r2, [r3, #0]
 80099b6:	e009      	b.n	80099cc <interrupt_FailSafe+0x144>
			//pl_R_DriveMotor_mode(MOTOR_BREAK);
			//pl_L_DriveMotor_mode(MOTOR_BREAK);
		}else{
			pl_DriveMotor_standby(OFF);
 80099b8:	2000      	movs	r0, #0
 80099ba:	f7fd ff89 	bl	80078d0 <pl_DriveMotor_standby>
			pl_DriveMotor_stop();
 80099be:	f7fd ffed 	bl	800799c <pl_DriveMotor_stop>
			pl_FunMotor_stop();
 80099c2:	f7fe f819 	bl	80079f8 <pl_FunMotor_stop>
			modeacc=0;
 80099c6:	4b27      	ldr	r3, [pc, #156]	; (8009a64 <interrupt_FailSafe+0x1dc>)
 80099c8:	2200      	movs	r2, #0
 80099ca:	701a      	strb	r2, [r3, #0]
		}
					NoWallCountL90 = 4294967295;
 80099cc:	4b30      	ldr	r3, [pc, #192]	; (8009a90 <interrupt_FailSafe+0x208>)
 80099ce:	f04f 32ff 	mov.w	r2, #4294967295
 80099d2:	601a      	str	r2, [r3, #0]
					NoWallCountR90 = 4294967295;
 80099d4:	4b2f      	ldr	r3, [pc, #188]	; (8009a94 <interrupt_FailSafe+0x20c>)
 80099d6:	f04f 32ff 	mov.w	r2, #4294967295
 80099da:	601a      	str	r2, [r3, #0]
					NoWallCountL45 = 4294967295;
 80099dc:	4b2e      	ldr	r3, [pc, #184]	; (8009a98 <interrupt_FailSafe+0x210>)
 80099de:	f04f 32ff 	mov.w	r2, #4294967295
 80099e2:	601a      	str	r2, [r3, #0]
					NoWallCountR45 = 4294967295;
 80099e4:	4b2d      	ldr	r3, [pc, #180]	; (8009a9c <interrupt_FailSafe+0x214>)
 80099e6:	f04f 32ff 	mov.w	r2, #4294967295
 80099ea:	601a      	str	r2, [r3, #0]
					NoWallCountL45slant = 4294967295;
 80099ec:	4b2c      	ldr	r3, [pc, #176]	; (8009aa0 <interrupt_FailSafe+0x218>)
 80099ee:	f04f 32ff 	mov.w	r2, #4294967295
 80099f2:	601a      	str	r2, [r3, #0]
					NoWallCountR45slant = 4294967295;
 80099f4:	4b2b      	ldr	r3, [pc, #172]	; (8009aa4 <interrupt_FailSafe+0x21c>)
 80099f6:	f04f 32ff 	mov.w	r2, #4294967295
 80099fa:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL90 = 50;
 80099fc:	4b2a      	ldr	r3, [pc, #168]	; (8009aa8 <interrupt_FailSafe+0x220>)
 80099fe:	4a2b      	ldr	r2, [pc, #172]	; (8009aac <interrupt_FailSafe+0x224>)
 8009a00:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR90 = 50;
 8009a02:	4b2b      	ldr	r3, [pc, #172]	; (8009ab0 <interrupt_FailSafe+0x228>)
 8009a04:	4a29      	ldr	r2, [pc, #164]	; (8009aac <interrupt_FailSafe+0x224>)
 8009a06:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45 = 20;
 8009a08:	4b2a      	ldr	r3, [pc, #168]	; (8009ab4 <interrupt_FailSafe+0x22c>)
 8009a0a:	4a2b      	ldr	r2, [pc, #172]	; (8009ab8 <interrupt_FailSafe+0x230>)
 8009a0c:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45 = 20;
 8009a0e:	4b2b      	ldr	r3, [pc, #172]	; (8009abc <interrupt_FailSafe+0x234>)
 8009a10:	4a29      	ldr	r2, [pc, #164]	; (8009ab8 <interrupt_FailSafe+0x230>)
 8009a12:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant = 35;
 8009a14:	4b2a      	ldr	r3, [pc, #168]	; (8009ac0 <interrupt_FailSafe+0x238>)
 8009a16:	4a2b      	ldr	r2, [pc, #172]	; (8009ac4 <interrupt_FailSafe+0x23c>)
 8009a18:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant = 35;
 8009a1a:	4b2b      	ldr	r3, [pc, #172]	; (8009ac8 <interrupt_FailSafe+0x240>)
 8009a1c:	4a29      	ldr	r2, [pc, #164]	; (8009ac4 <interrupt_FailSafe+0x23c>)
 8009a1e:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant2 = 35;
 8009a20:	4b2a      	ldr	r3, [pc, #168]	; (8009acc <interrupt_FailSafe+0x244>)
 8009a22:	4a28      	ldr	r2, [pc, #160]	; (8009ac4 <interrupt_FailSafe+0x23c>)
 8009a24:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant2 = 35;
 8009a26:	4b2a      	ldr	r3, [pc, #168]	; (8009ad0 <interrupt_FailSafe+0x248>)
 8009a28:	4a26      	ldr	r2, [pc, #152]	; (8009ac4 <interrupt_FailSafe+0x23c>)
 8009a2a:	601a      	str	r2, [r3, #0]
					g_acc_flag=4;
 8009a2c:	4b29      	ldr	r3, [pc, #164]	; (8009ad4 <interrupt_FailSafe+0x24c>)
 8009a2e:	2204      	movs	r2, #4
 8009a30:	701a      	strb	r2, [r3, #0]
					g_wallCut_mode = 0;
 8009a32:	4b29      	ldr	r3, [pc, #164]	; (8009ad8 <interrupt_FailSafe+0x250>)
 8009a34:	2200      	movs	r2, #0
 8009a36:	701a      	strb	r2, [r3, #0]
	}else{
		error_time_count=0;
	}


}
 8009a38:	e002      	b.n	8009a40 <interrupt_FailSafe+0x1b8>
		error_time_count=0;
 8009a3a:	4b14      	ldr	r3, [pc, #80]	; (8009a8c <interrupt_FailSafe+0x204>)
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	601a      	str	r2, [r3, #0]
}
 8009a40:	bf00      	nop
 8009a42:	3710      	adds	r7, #16
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	20000808 	.word	0x20000808
 8009a4c:	2000080c 	.word	0x2000080c
 8009a50:	20000810 	.word	0x20000810
 8009a54:	20000814 	.word	0x20000814
 8009a58:	20000818 	.word	0x20000818
 8009a5c:	2000081c 	.word	0x2000081c
 8009a60:	20000820 	.word	0x20000820
 8009a64:	20000528 	.word	0x20000528
 8009a68:	20000806 	.word	0x20000806
 8009a6c:	20000807 	.word	0x20000807
 8009a70:	200004e4 	.word	0x200004e4
 8009a74:	20000268 	.word	0x20000268
 8009a78:	20000274 	.word	0x20000274
 8009a7c:	200004d8 	.word	0x200004d8
 8009a80:	2000025c 	.word	0x2000025c
 8009a84:	20000258 	.word	0x20000258
 8009a88:	2000edc0 	.word	0x2000edc0
 8009a8c:	20000824 	.word	0x20000824
 8009a90:	200005b8 	.word	0x200005b8
 8009a94:	200005b4 	.word	0x200005b4
 8009a98:	200005c0 	.word	0x200005c0
 8009a9c:	200005bc 	.word	0x200005bc
 8009aa0:	200005c8 	.word	0x200005c8
 8009aa4:	200005c4 	.word	0x200005c4
 8009aa8:	200005d0 	.word	0x200005d0
 8009aac:	42480000 	.word	0x42480000
 8009ab0:	200005cc 	.word	0x200005cc
 8009ab4:	200005d8 	.word	0x200005d8
 8009ab8:	41a00000 	.word	0x41a00000
 8009abc:	200005d4 	.word	0x200005d4
 8009ac0:	200005e0 	.word	0x200005e0
 8009ac4:	420c0000 	.word	0x420c0000
 8009ac8:	200005dc 	.word	0x200005dc
 8009acc:	200005e8 	.word	0x200005e8
 8009ad0:	200005e4 	.word	0x200005e4
 8009ad4:	20000804 	.word	0x20000804
 8009ad8:	20000592 	.word	0x20000592

08009adc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b08a      	sub	sp, #40	; 0x28
 8009ae0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ae2:	f107 0314 	add.w	r3, r7, #20
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	601a      	str	r2, [r3, #0]
 8009aea:	605a      	str	r2, [r3, #4]
 8009aec:	609a      	str	r2, [r3, #8]
 8009aee:	60da      	str	r2, [r3, #12]
 8009af0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009af2:	4b3a      	ldr	r3, [pc, #232]	; (8009bdc <MX_GPIO_Init+0x100>)
 8009af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009af6:	4a39      	ldr	r2, [pc, #228]	; (8009bdc <MX_GPIO_Init+0x100>)
 8009af8:	f043 0304 	orr.w	r3, r3, #4
 8009afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009afe:	4b37      	ldr	r3, [pc, #220]	; (8009bdc <MX_GPIO_Init+0x100>)
 8009b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b02:	f003 0304 	and.w	r3, r3, #4
 8009b06:	613b      	str	r3, [r7, #16]
 8009b08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009b0a:	4b34      	ldr	r3, [pc, #208]	; (8009bdc <MX_GPIO_Init+0x100>)
 8009b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b0e:	4a33      	ldr	r2, [pc, #204]	; (8009bdc <MX_GPIO_Init+0x100>)
 8009b10:	f043 0320 	orr.w	r3, r3, #32
 8009b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b16:	4b31      	ldr	r3, [pc, #196]	; (8009bdc <MX_GPIO_Init+0x100>)
 8009b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b1a:	f003 0320 	and.w	r3, r3, #32
 8009b1e:	60fb      	str	r3, [r7, #12]
 8009b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b22:	4b2e      	ldr	r3, [pc, #184]	; (8009bdc <MX_GPIO_Init+0x100>)
 8009b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b26:	4a2d      	ldr	r2, [pc, #180]	; (8009bdc <MX_GPIO_Init+0x100>)
 8009b28:	f043 0301 	orr.w	r3, r3, #1
 8009b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b2e:	4b2b      	ldr	r3, [pc, #172]	; (8009bdc <MX_GPIO_Init+0x100>)
 8009b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b32:	f003 0301 	and.w	r3, r3, #1
 8009b36:	60bb      	str	r3, [r7, #8]
 8009b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009b3a:	4b28      	ldr	r3, [pc, #160]	; (8009bdc <MX_GPIO_Init+0x100>)
 8009b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b3e:	4a27      	ldr	r2, [pc, #156]	; (8009bdc <MX_GPIO_Init+0x100>)
 8009b40:	f043 0302 	orr.w	r3, r3, #2
 8009b44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b46:	4b25      	ldr	r3, [pc, #148]	; (8009bdc <MX_GPIO_Init+0x100>)
 8009b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b4a:	f003 0302 	and.w	r3, r3, #2
 8009b4e:	607b      	str	r3, [r7, #4]
 8009b50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8009b52:	2200      	movs	r2, #0
 8009b54:	f24e 0150 	movw	r1, #57424	; 0xe050
 8009b58:	4821      	ldr	r0, [pc, #132]	; (8009be0 <MX_GPIO_Init+0x104>)
 8009b5a:	f012 fab9 	bl	801c0d0 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin, GPIO_PIN_RESET);
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f648 1110 	movw	r1, #35088	; 0x8910
 8009b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009b68:	f012 fab2 	bl	801c0d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f64e 4196 	movw	r1, #60566	; 0xec96
 8009b72:	481c      	ldr	r0, [pc, #112]	; (8009be4 <MX_GPIO_Init+0x108>)
 8009b74:	f012 faac 	bl	801c0d0 <HAL_GPIO_WritePin>
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8009b78:	f24e 0350 	movw	r3, #57424	; 0xe050
 8009b7c:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b82:	2300      	movs	r3, #0
 8009b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b86:	2300      	movs	r3, #0
 8009b88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009b8a:	f107 0314 	add.w	r3, r7, #20
 8009b8e:	4619      	mov	r1, r3
 8009b90:	4813      	ldr	r0, [pc, #76]	; (8009be0 <MX_GPIO_Init+0x104>)
 8009b92:	f012 f91b 	bl	801bdcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin;
 8009b96:	f648 1310 	movw	r3, #35088	; 0x8910
 8009b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ba8:	f107 0314 	add.w	r3, r7, #20
 8009bac:	4619      	mov	r1, r3
 8009bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009bb2:	f012 f90b 	bl	801bdcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8009bb6:	f64e 4396 	movw	r3, #60566	; 0xec96
 8009bba:	617b      	str	r3, [r7, #20]
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009bc8:	f107 0314 	add.w	r3, r7, #20
 8009bcc:	4619      	mov	r1, r3
 8009bce:	4805      	ldr	r0, [pc, #20]	; (8009be4 <MX_GPIO_Init+0x108>)
 8009bd0:	f012 f8fc 	bl	801bdcc <HAL_GPIO_Init>

}
 8009bd4:	bf00      	nop
 8009bd6:	3728      	adds	r7, #40	; 0x28
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	40021000 	.word	0x40021000
 8009be0:	48000800 	.word	0x48000800
 8009be4:	48000400 	.word	0x48000400

08009be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009be8:	b590      	push	{r4, r7, lr}
 8009bea:	b087      	sub	sp, #28
 8009bec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009bee:	f00f f83b 	bl	8018c68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009bf2:	f000 f8a7 	bl	8009d44 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8009bf6:	f7ff fddb 	bl	80097b0 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009bfa:	f7ff ff6f 	bl	8009adc <MX_GPIO_Init>
  MX_ADC1_Init();
 8009bfe:	f7fe f9d5 	bl	8007fac <MX_ADC1_Init>
  MX_SPI1_Init();
 8009c02:	f00d fb3f 	bl	8017284 <MX_SPI1_Init>
  MX_TIM6_Init();
 8009c06:	f00d fdab 	bl	8017760 <MX_TIM6_Init>
  MX_TIM8_Init();
 8009c0a:	f00d fddf 	bl	80177cc <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8009c0e:	f00e ff5d 	bl	8018acc <MX_USART1_UART_Init>
  //MX_DMA_Init();
  MX_SPI3_Init();
 8009c12:	f00d fb75 	bl	8017300 <MX_SPI3_Init>
  MX_TIM16_Init();
 8009c16:	f00d fe79 	bl	801790c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  pl_timer_init();
 8009c1a:	f7fe f8d9 	bl	8007dd0 <pl_timer_init>
  pl_gyro_init();
 8009c1e:	f7fd fd6b 	bl	80076f8 <pl_gyro_init>
  pl_sensor_init();
 8009c22:	f7fd ff19 	bl	8007a58 <pl_sensor_init>
  reset_distance();
 8009c26:	f7f7 f9b9 	bl	8000f9c <reset_distance>
  reset_gyro();
 8009c2a:	f7f7 fd9d 	bl	8001768 <reset_gyro>
  reset_speed();
 8009c2e:	f7f7 f9f3 	bl	8001018 <reset_speed>
  record_reset();
 8009c32:	f00d f8b5 	bl	8016da0 <record_reset>
  pl_motor_init();
 8009c36:	f7fd fe25 	bl	8007884 <pl_motor_init>
  PID_Init();
 8009c3a:	f7fa fc7d 	bl	8004538 <PID_Init>
  init_WallControl();
 8009c3e:	f7fa fe11 	bl	8004864 <init_WallControl>
  Control_mode_Init();
 8009c42:	f7f8 f8db 	bl	8001dfc <Control_mode_Init>
  init_FailSafe();
 8009c46:	f7ff fddd 	bl	8009804 <init_FailSafe>
  input_parameter();
 8009c4a:	f00e f83f 	bl	8017ccc <input_parameter>

	//uint8_t hello[] = "Hello World\n\r";
  //float PI=3.14;
  //uint8_t hoge = 3;
  int mode=0;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	60fb      	str	r3, [r7, #12]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009c52:	4b37      	ldr	r3, [pc, #220]	; (8009d30 <main+0x148>)
 8009c54:	881b      	ldrh	r3, [r3, #0]
 8009c56:	4619      	mov	r1, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009c58:	4b35      	ldr	r3, [pc, #212]	; (8009d30 <main+0x148>)
 8009c5a:	885b      	ldrh	r3, [r3, #2]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009c5c:	4618      	mov	r0, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009c5e:	4b34      	ldr	r3, [pc, #208]	; (8009d30 <main+0x148>)
 8009c60:	889b      	ldrh	r3, [r3, #4]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009c62:	461c      	mov	r4, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009c64:	4b32      	ldr	r3, [pc, #200]	; (8009d30 <main+0x148>)
 8009c66:	88db      	ldrh	r3, [r3, #6]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009c68:	461a      	mov	r2, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009c6a:	4b31      	ldr	r3, [pc, #196]	; (8009d30 <main+0x148>)
 8009c6c:	891b      	ldrh	r3, [r3, #8]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009c6e:	9301      	str	r3, [sp, #4]
 8009c70:	9200      	str	r2, [sp, #0]
 8009c72:	4623      	mov	r3, r4
 8009c74:	4602      	mov	r2, r0
 8009c76:	482f      	ldr	r0, [pc, #188]	; (8009d34 <main+0x14c>)
 8009c78:	f016 ffc0 	bl	8020bfc <iprintf>
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009c7c:	4b2e      	ldr	r3, [pc, #184]	; (8009d38 <main+0x150>)
 8009c7e:	881b      	ldrh	r3, [r3, #0]
 8009c80:	4619      	mov	r1, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009c82:	4b2d      	ldr	r3, [pc, #180]	; (8009d38 <main+0x150>)
 8009c84:	885b      	ldrh	r3, [r3, #2]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009c86:	4618      	mov	r0, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009c88:	4b2b      	ldr	r3, [pc, #172]	; (8009d38 <main+0x150>)
 8009c8a:	889b      	ldrh	r3, [r3, #4]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009c8c:	461c      	mov	r4, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009c8e:	4b2a      	ldr	r3, [pc, #168]	; (8009d38 <main+0x150>)
 8009c90:	88db      	ldrh	r3, [r3, #6]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009c92:	461a      	mov	r2, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009c94:	4b28      	ldr	r3, [pc, #160]	; (8009d38 <main+0x150>)
 8009c96:	891b      	ldrh	r3, [r3, #8]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009c98:	9301      	str	r3, [sp, #4]
 8009c9a:	9200      	str	r2, [sp, #0]
 8009c9c:	4623      	mov	r3, r4
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	4826      	ldr	r0, [pc, #152]	; (8009d3c <main+0x154>)
 8009ca2:	f016 ffab 	bl	8020bfc <iprintf>
	battcheak();
 8009ca6:	f7f7 ff6b 	bl	8001b80 <battcheak>

//起動cheak
	int yellow_count=1;
 8009caa:	2301      	movs	r3, #1
 8009cac:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<8;i++){
 8009cae:	2300      	movs	r3, #0
 8009cb0:	607b      	str	r3, [r7, #4]
 8009cb2:	e00d      	b.n	8009cd0 <main+0xe8>
		pl_yellow_LED_count(yellow_count);
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7fd f8b5 	bl	8006e28 <pl_yellow_LED_count>
		HAL_Delay(50);
 8009cbe:	2032      	movs	r0, #50	; 0x32
 8009cc0:	f00f f84a 	bl	8018d58 <HAL_Delay>
		yellow_count=yellow_count*2;
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	005b      	lsls	r3, r3, #1
 8009cc8:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<8;i++){
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	607b      	str	r3, [r7, #4]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2b07      	cmp	r3, #7
 8009cd4:	ddee      	ble.n	8009cb4 <main+0xcc>
	}
	for(int i=0;i<9;i++){
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	603b      	str	r3, [r7, #0]
 8009cda:	e00f      	b.n	8009cfc <main+0x114>
			pl_yellow_LED_count(yellow_count);
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7fd f8a1 	bl	8006e28 <pl_yellow_LED_count>
			HAL_Delay(50);
 8009ce6:	2032      	movs	r0, #50	; 0x32
 8009ce8:	f00f f836 	bl	8018d58 <HAL_Delay>
			yellow_count=yellow_count/2;
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	0fda      	lsrs	r2, r3, #31
 8009cf0:	4413      	add	r3, r2
 8009cf2:	105b      	asrs	r3, r3, #1
 8009cf4:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<9;i++){
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	603b      	str	r3, [r7, #0]
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	2b08      	cmp	r3, #8
 8009d00:	ddec      	ble.n	8009cdc <main+0xf4>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  		mode=mode_decision(mode);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	4618      	mov	r0, r3
 8009d08:	f00b fa92 	bl	8015230 <mode_decision>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	60fb      	str	r3, [r7, #12]
//	  		clear_Ierror();
	  		reset_distance();
 8009d10:	f7f7 f944 	bl	8000f9c <reset_distance>
	  		reset_gyro();
 8009d14:	f7f7 fd28 	bl	8001768 <reset_gyro>
	  		reset_speed();
 8009d18:	f7f7 f97e 	bl	8001018 <reset_speed>

	  		mode_execution(mode);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	4618      	mov	r0, r3
 8009d22:	f00b fb7f 	bl	8015424 <mode_execution>

	  		error_mode = 0;
 8009d26:	4b06      	ldr	r3, [pc, #24]	; (8009d40 <main+0x158>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	701a      	strb	r2, [r3, #0]
	  		mode=mode_decision(mode);
 8009d2c:	e7e9      	b.n	8009d02 <main+0x11a>
 8009d2e:	bf00      	nop
 8009d30:	2000070c 	.word	0x2000070c
 8009d34:	080234c0 	.word	0x080234c0
 8009d38:	20000718 	.word	0x20000718
 8009d3c:	080234ec 	.word	0x080234ec
 8009d40:	20000807 	.word	0x20000807

08009d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b094      	sub	sp, #80	; 0x50
 8009d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009d4a:	f107 0318 	add.w	r3, r7, #24
 8009d4e:	2238      	movs	r2, #56	; 0x38
 8009d50:	2100      	movs	r1, #0
 8009d52:	4618      	mov	r0, r3
 8009d54:	f016 fae0 	bl	8020318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009d58:	1d3b      	adds	r3, r7, #4
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	601a      	str	r2, [r3, #0]
 8009d5e:	605a      	str	r2, [r3, #4]
 8009d60:	609a      	str	r2, [r3, #8]
 8009d62:	60da      	str	r2, [r3, #12]
 8009d64:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8009d66:	2000      	movs	r0, #0
 8009d68:	f012 f9ca 	bl	801c100 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009d70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009d74:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009d76:	2302      	movs	r3, #2
 8009d78:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009d7a:	2303      	movs	r3, #3
 8009d7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8009d7e:	2304      	movs	r3, #4
 8009d80:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8009d82:	2355      	movs	r3, #85	; 0x55
 8009d84:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009d86:	2302      	movs	r3, #2
 8009d88:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009d8a:	2302      	movs	r3, #2
 8009d8c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009d8e:	2302      	movs	r3, #2
 8009d90:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009d92:	f107 0318 	add.w	r3, r7, #24
 8009d96:	4618      	mov	r0, r3
 8009d98:	f012 fa66 	bl	801c268 <HAL_RCC_OscConfig>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d001      	beq.n	8009da6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8009da2:	f000 f81a 	bl	8009dda <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009da6:	230f      	movs	r3, #15
 8009da8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009daa:	2303      	movs	r3, #3
 8009dac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009dae:	2300      	movs	r3, #0
 8009db0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009db2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8009db6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dbc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8009dbe:	1d3b      	adds	r3, r7, #4
 8009dc0:	2104      	movs	r1, #4
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f012 fd68 	bl	801c898 <HAL_RCC_ClockConfig>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d001      	beq.n	8009dd2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8009dce:	f000 f804 	bl	8009dda <Error_Handler>
  }
}
 8009dd2:	bf00      	nop
 8009dd4:	3750      	adds	r7, #80	; 0x50
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009dda:	b480      	push	{r7}
 8009ddc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009dde:	b672      	cpsid	i
}
 8009de0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009de2:	e7fe      	b.n	8009de2 <Error_Handler+0x8>

08009de4 <backTurn_controlWall>:
		pl_L_DriveMotor_mode(MOTOR_BREAK);
	}

}

void backTurn_controlWall(float input_TurningVelocity,float input_TurningAcceleration,_Bool front_wall,_Bool left_wall,_Bool right_wall){
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	ed87 0a03 	vstr	s0, [r7, #12]
 8009dee:	edc7 0a02 	vstr	s1, [r7, #8]
 8009df2:	4603      	mov	r3, r0
 8009df4:	71fb      	strb	r3, [r7, #7]
 8009df6:	460b      	mov	r3, r1
 8009df8:	71bb      	strb	r3, [r7, #6]
 8009dfa:	4613      	mov	r3, r2
 8009dfc:	717b      	strb	r3, [r7, #5]
	if(front_wall){
 8009dfe:	79fb      	ldrb	r3, [r7, #7]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d00a      	beq.n	8009e1a <backTurn_controlWall+0x36>
		no_frontwall_straight();
 8009e04:	f7fa f8f4 	bl	8003ff0 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009e08:	2003      	movs	r0, #3
 8009e0a:	f7fd fd93 	bl	8007934 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009e0e:	2003      	movs	r0, #3
 8009e10:	f7fd fd68 	bl	80078e4 <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009e14:	2032      	movs	r0, #50	; 0x32
 8009e16:	f7fe f88b 	bl	8007f30 <wait_ms_NoReset>
	}
	if(left_wall){
 8009e1a:	79bb      	ldrb	r3, [r7, #6]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d02c      	beq.n	8009e7a <backTurn_controlWall+0x96>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009e20:	ed97 2a02 	vldr	s4, [r7, #8]
 8009e24:	edd7 1a03 	vldr	s3, [r7, #12]
 8009e28:	ed9f 1a50 	vldr	s2, [pc, #320]	; 8009f6c <backTurn_controlWall+0x188>
 8009e2c:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8009f6c <backTurn_controlWall+0x188>
 8009e30:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8009f70 <backTurn_controlWall+0x18c>
 8009e34:	f7f9 fde0 	bl	80039f8 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009e38:	2003      	movs	r0, #3
 8009e3a:	f7fd fd7b 	bl	8007934 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009e3e:	2003      	movs	r0, #3
 8009e40:	f7fd fd50 	bl	80078e4 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 8009e44:	2032      	movs	r0, #50	; 0x32
 8009e46:	f7fe f873 	bl	8007f30 <wait_ms_NoReset>
		no_frontwall_straight();
 8009e4a:	f7fa f8d1 	bl	8003ff0 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009e4e:	2003      	movs	r0, #3
 8009e50:	f7fd fd70 	bl	8007934 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009e54:	2003      	movs	r0, #3
 8009e56:	f7fd fd45 	bl	80078e4 <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009e5a:	2032      	movs	r0, #50	; 0x32
 8009e5c:	f7fe f868 	bl	8007f30 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009e60:	ed97 2a02 	vldr	s4, [r7, #8]
 8009e64:	edd7 1a03 	vldr	s3, [r7, #12]
 8009e68:	ed9f 1a40 	vldr	s2, [pc, #256]	; 8009f6c <backTurn_controlWall+0x188>
 8009e6c:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8009f6c <backTurn_controlWall+0x188>
 8009e70:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8009f70 <backTurn_controlWall+0x18c>
 8009e74:	f7f9 fdc0 	bl	80039f8 <turning_table2>
 8009e78:	e06a      	b.n	8009f50 <backTurn_controlWall+0x16c>
	}else if(left_wall==0 && right_wall){
 8009e7a:	79bb      	ldrb	r3, [r7, #6]
 8009e7c:	f083 0301 	eor.w	r3, r3, #1
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d037      	beq.n	8009ef6 <backTurn_controlWall+0x112>
 8009e86:	797b      	ldrb	r3, [r7, #5]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d034      	beq.n	8009ef6 <backTurn_controlWall+0x112>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 8009e8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e90:	eef1 7a67 	vneg.f32	s15, s15
 8009e94:	ed97 2a02 	vldr	s4, [r7, #8]
 8009e98:	eef0 1a67 	vmov.f32	s3, s15
 8009e9c:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8009f6c <backTurn_controlWall+0x188>
 8009ea0:	eddf 0a32 	vldr	s1, [pc, #200]	; 8009f6c <backTurn_controlWall+0x188>
 8009ea4:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8009f74 <backTurn_controlWall+0x190>
 8009ea8:	f7f9 fda6 	bl	80039f8 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009eac:	2003      	movs	r0, #3
 8009eae:	f7fd fd41 	bl	8007934 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009eb2:	2003      	movs	r0, #3
 8009eb4:	f7fd fd16 	bl	80078e4 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 8009eb8:	2032      	movs	r0, #50	; 0x32
 8009eba:	f7fe f839 	bl	8007f30 <wait_ms_NoReset>
		no_frontwall_straight();
 8009ebe:	f7fa f897 	bl	8003ff0 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009ec2:	2003      	movs	r0, #3
 8009ec4:	f7fd fd36 	bl	8007934 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009ec8:	2003      	movs	r0, #3
 8009eca:	f7fd fd0b 	bl	80078e4 <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009ece:	2032      	movs	r0, #50	; 0x32
 8009ed0:	f7fe f82e 	bl	8007f30 <wait_ms_NoReset>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 8009ed4:	edd7 7a03 	vldr	s15, [r7, #12]
 8009ed8:	eef1 7a67 	vneg.f32	s15, s15
 8009edc:	ed97 2a02 	vldr	s4, [r7, #8]
 8009ee0:	eef0 1a67 	vmov.f32	s3, s15
 8009ee4:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8009f6c <backTurn_controlWall+0x188>
 8009ee8:	eddf 0a20 	vldr	s1, [pc, #128]	; 8009f6c <backTurn_controlWall+0x188>
 8009eec:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8009f74 <backTurn_controlWall+0x190>
 8009ef0:	f7f9 fd82 	bl	80039f8 <turning_table2>
 8009ef4:	e02c      	b.n	8009f50 <backTurn_controlWall+0x16c>
	}else if(left_wall==0 && right_wall==0){
 8009ef6:	79bb      	ldrb	r3, [r7, #6]
 8009ef8:	f083 0301 	eor.w	r3, r3, #1
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d026      	beq.n	8009f50 <backTurn_controlWall+0x16c>
 8009f02:	797b      	ldrb	r3, [r7, #5]
 8009f04:	f083 0301 	eor.w	r3, r3, #1
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d020      	beq.n	8009f50 <backTurn_controlWall+0x16c>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009f0e:	ed97 2a02 	vldr	s4, [r7, #8]
 8009f12:	edd7 1a03 	vldr	s3, [r7, #12]
 8009f16:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8009f6c <backTurn_controlWall+0x188>
 8009f1a:	eddf 0a14 	vldr	s1, [pc, #80]	; 8009f6c <backTurn_controlWall+0x188>
 8009f1e:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8009f70 <backTurn_controlWall+0x18c>
 8009f22:	f7f9 fd69 	bl	80039f8 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009f26:	2003      	movs	r0, #3
 8009f28:	f7fd fd04 	bl	8007934 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009f2c:	2003      	movs	r0, #3
 8009f2e:	f7fd fcd9 	bl	80078e4 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 8009f32:	2032      	movs	r0, #50	; 0x32
 8009f34:	f7fd fffc 	bl	8007f30 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009f38:	ed97 2a02 	vldr	s4, [r7, #8]
 8009f3c:	edd7 1a03 	vldr	s3, [r7, #12]
 8009f40:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8009f6c <backTurn_controlWall+0x188>
 8009f44:	eddf 0a09 	vldr	s1, [pc, #36]	; 8009f6c <backTurn_controlWall+0x188>
 8009f48:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8009f70 <backTurn_controlWall+0x18c>
 8009f4c:	f7f9 fd54 	bl	80039f8 <turning_table2>
	}
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009f50:	2003      	movs	r0, #3
 8009f52:	f7fd fcef 	bl	8007934 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009f56:	2003      	movs	r0, #3
 8009f58:	f7fd fcc4 	bl	80078e4 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(50);
 8009f5c:	2032      	movs	r0, #50	; 0x32
 8009f5e:	f7fd ffe7 	bl	8007f30 <wait_ms_NoReset>

}
 8009f62:	bf00      	nop
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	00000000 	.word	0x00000000
 8009f70:	42b40000 	.word	0x42b40000
 8009f74:	c2b40000 	.word	0xc2b40000

08009f78 <slalomR>:


void slalomR(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 8009f78:	b084      	sub	sp, #16
 8009f7a:	b5b0      	push	{r4, r5, r7, lr}
 8009f7c:	ed2d 8b02 	vpush	{d8}
 8009f80:	b084      	sub	sp, #16
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8009f88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009f8c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 8009f90:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	f040 80f5 	bne.w	800a184 <slalomR+0x20c>
		highspeed_mode = 0;
 8009f9a:	4be3      	ldr	r3, [pc, #908]	; (800a328 <slalomR+0x3b0>)
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 8009fac:	2300      	movs	r3, #0
 8009fae:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 8009fb0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d11f      	bne.n	8009ff8 <slalomR+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009fb8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8009fbc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009fc0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009fc4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009fc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009fcc:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8009fd0:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009fd4:	eddf 5ad5 	vldr	s11, [pc, #852]	; 800a32c <slalomR+0x3b4>
 8009fd8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8009fdc:	68f8      	ldr	r0, [r7, #12]
 8009fde:	eeb0 2a47 	vmov.f32	s4, s14
 8009fe2:	eef0 1a46 	vmov.f32	s3, s12
 8009fe6:	eeb0 1a66 	vmov.f32	s2, s13
 8009fea:	eddf 0ad1 	vldr	s1, [pc, #836]	; 800a330 <slalomR+0x3b8>
 8009fee:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 800a334 <slalomR+0x3bc>
 8009ff2:	f7f8 fff3 	bl	8002fdc <straight_table2>
 8009ff6:	e01e      	b.n	800a036 <slalomR+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009ff8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8009ffc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a000:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a004:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a008:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a00c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a010:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a014:	eddf 5ac5 	vldr	s11, [pc, #788]	; 800a32c <slalomR+0x3b4>
 800a018:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	eeb0 2a47 	vmov.f32	s4, s14
 800a022:	eef0 1a46 	vmov.f32	s3, s12
 800a026:	eeb0 1a66 	vmov.f32	s2, s13
 800a02a:	eddf 0ac1 	vldr	s1, [pc, #772]	; 800a330 <slalomR+0x3b8>
 800a02e:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800a338 <slalomR+0x3c0>
 800a032:	f7f8 ffd3 	bl	8002fdc <straight_table2>
		}
		wallmode.WallCutMode=1;
 800a036:	2301      	movs	r3, #1
 800a038:	73fb      	strb	r3, [r7, #15]
		wallmode.WallControlMode=0;
 800a03a:	2300      	movs	r3, #0
 800a03c:	733b      	strb	r3, [r7, #12]
		if(shortest_mode==0){
 800a03e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a042:	2b00      	cmp	r3, #0
 800a044:	d127      	bne.n	800a096 <slalomR+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a046:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a04a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a04e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a052:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a056:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a05a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a05e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a062:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a066:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a06a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a06e:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a072:	eddf 4aae 	vldr	s9, [pc, #696]	; 800a32c <slalomR+0x3b4>
 800a076:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	eeb0 2a47 	vmov.f32	s4, s14
 800a080:	eef0 1a45 	vmov.f32	s3, s10
 800a084:	eeb0 1a65 	vmov.f32	s2, s11
 800a088:	eef0 0a46 	vmov.f32	s1, s12
 800a08c:	eeb0 0a66 	vmov.f32	s0, s13
 800a090:	f7f8 ffa4 	bl	8002fdc <straight_table2>
 800a094:	e022      	b.n	800a0dc <slalomR+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a096:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a09a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a09e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a0a2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a0a6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a0aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a0ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a0b2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a0b6:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a0ba:	eddf 4a9c 	vldr	s9, [pc, #624]	; 800a32c <slalomR+0x3b4>
 800a0be:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a0c2:	68f8      	ldr	r0, [r7, #12]
 800a0c4:	eeb0 2a47 	vmov.f32	s4, s14
 800a0c8:	eef0 1a45 	vmov.f32	s3, s10
 800a0cc:	eeb0 1a65 	vmov.f32	s2, s11
 800a0d0:	eef0 0a46 	vmov.f32	s1, s12
 800a0d4:	eeb0 0a66 	vmov.f32	s0, s13
 800a0d8:	f7f8 ff80 	bl	8002fdc <straight_table2>
		}
		if(mollifier_mode == ON){
 800a0dc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d10c      	bne.n	800a0fe <slalomR+0x186>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a0e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a0e8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a0ec:	eeb0 1a47 	vmov.f32	s2, s14
 800a0f0:	eddf 0a92 	vldr	s1, [pc, #584]	; 800a33c <slalomR+0x3c4>
 800a0f4:	eeb0 0a67 	vmov.f32	s0, s15
 800a0f8:	f7f9 fee6 	bl	8003ec8 <mollifier_slalom_table>
 800a0fc:	e015      	b.n	800a12a <slalomR+0x1b2>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a0fe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a102:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a106:	eef1 7a67 	vneg.f32	s15, s15
 800a10a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a10e:	eef0 2a66 	vmov.f32	s5, s13
 800a112:	eeb0 2a67 	vmov.f32	s4, s15
 800a116:	eddf 1a86 	vldr	s3, [pc, #536]	; 800a330 <slalomR+0x3b8>
 800a11a:	ed9f 1a85 	vldr	s2, [pc, #532]	; 800a330 <slalomR+0x3b8>
 800a11e:	eddf 0a87 	vldr	s1, [pc, #540]	; 800a33c <slalomR+0x3c4>
 800a122:	eeb0 0a47 	vmov.f32	s0, s14
 800a126:	f7f9 fd7f 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800a12a:	2300      	movs	r3, #0
 800a12c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a12e:	2300      	movs	r3, #0
 800a130:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a132:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a136:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800a32c <slalomR+0x3b4>
 800a13a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a13e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a142:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a146:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a14a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a14e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a152:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a156:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a15a:	ed9f 5a74 	vldr	s10, [pc, #464]	; 800a32c <slalomR+0x3b4>
 800a15e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	eeb0 2a47 	vmov.f32	s4, s14
 800a168:	eef0 1a65 	vmov.f32	s3, s11
 800a16c:	ed9f 1a70 	vldr	s2, [pc, #448]	; 800a330 <slalomR+0x3b8>
 800a170:	eef0 0a46 	vmov.f32	s1, s12
 800a174:	eeb0 0a66 	vmov.f32	s0, s13
 800a178:	f7f8 ff30 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800a17c:	4b6a      	ldr	r3, [pc, #424]	; (800a328 <slalomR+0x3b0>)
 800a17e:	2200      	movs	r2, #0
 800a180:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
//		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
//										fabs(end_velocity*end_velocity-turnpara.g_speed * turnpara.g_speed)  / 2 / turnpara.e_ofset,wallmode);
	}
}
 800a182:	e0c8      	b.n	800a316 <slalomR+0x39e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800a184:	2300      	movs	r3, #0
 800a186:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a188:	2300      	movs	r3, #0
 800a18a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800a18c:	2301      	movs	r3, #1
 800a18e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a190:	2300      	movs	r3, #0
 800a192:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800a194:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d127      	bne.n	800a1ec <slalomR+0x274>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a19c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a1a0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a1a4:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a1a8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a1ac:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a1b0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a1b4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a1b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a1bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a1c0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a1c4:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a1c8:	eddf 4a58 	vldr	s9, [pc, #352]	; 800a32c <slalomR+0x3b4>
 800a1cc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a1d0:	68f8      	ldr	r0, [r7, #12]
 800a1d2:	eeb0 2a47 	vmov.f32	s4, s14
 800a1d6:	eef0 1a45 	vmov.f32	s3, s10
 800a1da:	eeb0 1a65 	vmov.f32	s2, s11
 800a1de:	eef0 0a46 	vmov.f32	s1, s12
 800a1e2:	eeb0 0a66 	vmov.f32	s0, s13
 800a1e6:	f7f8 fef9 	bl	8002fdc <straight_table2>
 800a1ea:	e022      	b.n	800a232 <slalomR+0x2ba>
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a1ec:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a1f0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a1f4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a1f8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a1fc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a200:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a204:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a208:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a20c:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a210:	eddf 4a46 	vldr	s9, [pc, #280]	; 800a32c <slalomR+0x3b4>
 800a214:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	eeb0 2a47 	vmov.f32	s4, s14
 800a21e:	eef0 1a45 	vmov.f32	s3, s10
 800a222:	eeb0 1a65 	vmov.f32	s2, s11
 800a226:	eef0 0a46 	vmov.f32	s1, s12
 800a22a:	eeb0 0a66 	vmov.f32	s0, s13
 800a22e:	f7f8 fed5 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800a232:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a236:	2b01      	cmp	r3, #1
 800a238:	d10c      	bne.n	800a254 <slalomR+0x2dc>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a23a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a23e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a242:	eeb0 1a47 	vmov.f32	s2, s14
 800a246:	eddf 0a3d 	vldr	s1, [pc, #244]	; 800a33c <slalomR+0x3c4>
 800a24a:	eeb0 0a67 	vmov.f32	s0, s15
 800a24e:	f7f9 fe3b 	bl	8003ec8 <mollifier_slalom_table>
 800a252:	e015      	b.n	800a280 <slalomR+0x308>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a254:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a258:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a25c:	eef1 7a67 	vneg.f32	s15, s15
 800a260:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a264:	eef0 2a66 	vmov.f32	s5, s13
 800a268:	eeb0 2a67 	vmov.f32	s4, s15
 800a26c:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a330 <slalomR+0x3b8>
 800a270:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a330 <slalomR+0x3b8>
 800a274:	eddf 0a31 	vldr	s1, [pc, #196]	; 800a33c <slalomR+0x3c4>
 800a278:	eeb0 0a47 	vmov.f32	s0, s14
 800a27c:	f7f9 fcd4 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800a280:	2300      	movs	r3, #0
 800a282:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a284:	2300      	movs	r3, #0
 800a286:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a288:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a28c:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a290:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a294:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a298:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a29c:	edd7 7a01 	vldr	s15, [r7, #4]
 800a2a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a2a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2a8:	eef0 7ae7 	vabs.f32	s15, s15
 800a2ac:	ee17 0a90 	vmov	r0, s15
 800a2b0:	f7f6 f972 	bl	8000598 <__aeabi_f2d>
 800a2b4:	f04f 0200 	mov.w	r2, #0
 800a2b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a2bc:	f7f6 faee 	bl	800089c <__aeabi_ddiv>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	4614      	mov	r4, r2
 800a2c6:	461d      	mov	r5, r3
 800a2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7f6 f964 	bl	8000598 <__aeabi_f2d>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	4629      	mov	r1, r5
 800a2d8:	f7f6 fae0 	bl	800089c <__aeabi_ddiv>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	460b      	mov	r3, r1
 800a2e0:	4610      	mov	r0, r2
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	f04f 0200 	mov.w	r2, #0
 800a2e8:	4b15      	ldr	r3, [pc, #84]	; (800a340 <slalomR+0x3c8>)
 800a2ea:	f7f5 fff7 	bl	80002dc <__adddf3>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a2f2:	4610      	mov	r0, r2
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	f7f6 fc7f 	bl	8000bf8 <__aeabi_d2f>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	ee02 3a10 	vmov	s4, r3
 800a302:	edd7 1a01 	vldr	s3, [r7, #4]
 800a306:	ed97 1a01 	vldr	s2, [r7, #4]
 800a30a:	eef0 0a68 	vmov.f32	s1, s17
 800a30e:	eeb0 0a48 	vmov.f32	s0, s16
 800a312:	f7f8 fe63 	bl	8002fdc <straight_table2>
}
 800a316:	bf00      	nop
 800a318:	3710      	adds	r7, #16
 800a31a:	46bd      	mov	sp, r7
 800a31c:	ecbd 8b02 	vpop	{d8}
 800a320:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a324:	b004      	add	sp, #16
 800a326:	4770      	bx	lr
 800a328:	20000808 	.word	0x20000808
 800a32c:	42340000 	.word	0x42340000
 800a330:	00000000 	.word	0x00000000
 800a334:	431b8000 	.word	0x431b8000
 800a338:	43138000 	.word	0x43138000
 800a33c:	c2b40000 	.word	0xc2b40000
 800a340:	408f4000 	.word	0x408f4000

0800a344 <slalomL>:

void slalomL(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 800a344:	b084      	sub	sp, #16
 800a346:	b5b0      	push	{r4, r5, r7, lr}
 800a348:	ed2d 8b02 	vpush	{d8}
 800a34c:	b084      	sub	sp, #16
 800a34e:	af00      	add	r7, sp, #0
 800a350:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a354:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a358:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 800a35c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a360:	2b01      	cmp	r3, #1
 800a362:	f040 80f3 	bne.w	800a54c <slalomL+0x208>
		highspeed_mode = 0;
 800a366:	4be1      	ldr	r3, [pc, #900]	; (800a6ec <slalomL+0x3a8>)
 800a368:	2200      	movs	r2, #0
 800a36a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a36c:	2301      	movs	r3, #1
 800a36e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a370:	2300      	movs	r3, #0
 800a372:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a374:	2300      	movs	r3, #0
 800a376:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a378:	2300      	movs	r3, #0
 800a37a:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800a37c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a380:	2b00      	cmp	r3, #0
 800a382:	d11f      	bne.n	800a3c4 <slalomL+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a384:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a388:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a38c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a390:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a394:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a398:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a39c:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a3a0:	eddf 5ad3 	vldr	s11, [pc, #844]	; 800a6f0 <slalomL+0x3ac>
 800a3a4:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	eeb0 2a47 	vmov.f32	s4, s14
 800a3ae:	eef0 1a46 	vmov.f32	s3, s12
 800a3b2:	eeb0 1a66 	vmov.f32	s2, s13
 800a3b6:	eddf 0acf 	vldr	s1, [pc, #828]	; 800a6f4 <slalomL+0x3b0>
 800a3ba:	ed9f 0acf 	vldr	s0, [pc, #828]	; 800a6f8 <slalomL+0x3b4>
 800a3be:	f7f8 fe0d 	bl	8002fdc <straight_table2>
 800a3c2:	e01e      	b.n	800a402 <slalomL+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a3c4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a3c8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a3cc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a3d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a3d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a3d8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a3dc:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a3e0:	eddf 5ac3 	vldr	s11, [pc, #780]	; 800a6f0 <slalomL+0x3ac>
 800a3e4:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a3e8:	68f8      	ldr	r0, [r7, #12]
 800a3ea:	eeb0 2a47 	vmov.f32	s4, s14
 800a3ee:	eef0 1a46 	vmov.f32	s3, s12
 800a3f2:	eeb0 1a66 	vmov.f32	s2, s13
 800a3f6:	eddf 0abf 	vldr	s1, [pc, #764]	; 800a6f4 <slalomL+0x3b0>
 800a3fa:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 800a6fc <slalomL+0x3b8>
 800a3fe:	f7f8 fded 	bl	8002fdc <straight_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800a402:	2300      	movs	r3, #0
 800a404:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=1;
 800a406:	2301      	movs	r3, #1
 800a408:	73fb      	strb	r3, [r7, #15]
		if(shortest_mode==0){
 800a40a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d127      	bne.n	800a462 <slalomL+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a412:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a416:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a41a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a41e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a422:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a426:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a42a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a42e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a432:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a436:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a43a:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a43e:	eddf 4aac 	vldr	s9, [pc, #688]	; 800a6f0 <slalomL+0x3ac>
 800a442:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	eeb0 2a47 	vmov.f32	s4, s14
 800a44c:	eef0 1a45 	vmov.f32	s3, s10
 800a450:	eeb0 1a65 	vmov.f32	s2, s11
 800a454:	eef0 0a46 	vmov.f32	s1, s12
 800a458:	eeb0 0a66 	vmov.f32	s0, s13
 800a45c:	f7f8 fdbe 	bl	8002fdc <straight_table2>
 800a460:	e022      	b.n	800a4a8 <slalomL+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a462:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a466:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a46a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a46e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a472:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a476:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a47a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a47e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a482:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a486:	eddf 4a9a 	vldr	s9, [pc, #616]	; 800a6f0 <slalomL+0x3ac>
 800a48a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	eeb0 2a47 	vmov.f32	s4, s14
 800a494:	eef0 1a45 	vmov.f32	s3, s10
 800a498:	eeb0 1a65 	vmov.f32	s2, s11
 800a49c:	eef0 0a46 	vmov.f32	s1, s12
 800a4a0:	eeb0 0a66 	vmov.f32	s0, s13
 800a4a4:	f7f8 fd9a 	bl	8002fdc <straight_table2>
		}
		if(mollifier_mode == ON){
 800a4a8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d10c      	bne.n	800a4ca <slalomL+0x186>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a4b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a4b4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a4b8:	eeb0 1a47 	vmov.f32	s2, s14
 800a4bc:	eddf 0a90 	vldr	s1, [pc, #576]	; 800a700 <slalomL+0x3bc>
 800a4c0:	eeb0 0a67 	vmov.f32	s0, s15
 800a4c4:	f7f9 fd00 	bl	8003ec8 <mollifier_slalom_table>
 800a4c8:	e013      	b.n	800a4f2 <slalomL+0x1ae>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a4ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a4ce:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a4d2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a4d6:	eef0 2a66 	vmov.f32	s5, s13
 800a4da:	eeb0 2a47 	vmov.f32	s4, s14
 800a4de:	eddf 1a85 	vldr	s3, [pc, #532]	; 800a6f4 <slalomL+0x3b0>
 800a4e2:	ed9f 1a84 	vldr	s2, [pc, #528]	; 800a6f4 <slalomL+0x3b0>
 800a4e6:	eddf 0a86 	vldr	s1, [pc, #536]	; 800a700 <slalomL+0x3bc>
 800a4ea:	eeb0 0a67 	vmov.f32	s0, s15
 800a4ee:	f7f9 fb9b 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a4fa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a4fe:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800a6f0 <slalomL+0x3ac>
 800a502:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a506:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a50a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a50e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a512:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a516:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a51a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a51e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a522:	ed9f 5a73 	vldr	s10, [pc, #460]	; 800a6f0 <slalomL+0x3ac>
 800a526:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	eeb0 2a47 	vmov.f32	s4, s14
 800a530:	eef0 1a65 	vmov.f32	s3, s11
 800a534:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800a6f4 <slalomL+0x3b0>
 800a538:	eef0 0a46 	vmov.f32	s1, s12
 800a53c:	eeb0 0a66 	vmov.f32	s0, s13
 800a540:	f7f8 fd4c 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800a544:	4b69      	ldr	r3, [pc, #420]	; (800a6ec <slalomL+0x3a8>)
 800a546:	2200      	movs	r2, #0
 800a548:	701a      	strb	r2, [r3, #0]
		wallmode.WallCutMode=0;
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}
}
 800a54a:	e0c6      	b.n	800a6da <slalomL+0x396>
		wallmode.WallControlMode=0;
 800a54c:	2300      	movs	r3, #0
 800a54e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a550:	2300      	movs	r3, #0
 800a552:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800a554:	2301      	movs	r3, #1
 800a556:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a558:	2300      	movs	r3, #0
 800a55a:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800a55c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a560:	2b00      	cmp	r3, #0
 800a562:	d127      	bne.n	800a5b4 <slalomL+0x270>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a564:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a568:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a56c:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a570:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a574:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a578:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a57c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a580:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a584:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a588:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a58c:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a590:	eddf 4a57 	vldr	s9, [pc, #348]	; 800a6f0 <slalomL+0x3ac>
 800a594:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a598:	68f8      	ldr	r0, [r7, #12]
 800a59a:	eeb0 2a47 	vmov.f32	s4, s14
 800a59e:	eef0 1a45 	vmov.f32	s3, s10
 800a5a2:	eeb0 1a65 	vmov.f32	s2, s11
 800a5a6:	eef0 0a46 	vmov.f32	s1, s12
 800a5aa:	eeb0 0a66 	vmov.f32	s0, s13
 800a5ae:	f7f8 fd15 	bl	8002fdc <straight_table2>
 800a5b2:	e022      	b.n	800a5fa <slalomL+0x2b6>
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a5b4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a5b8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a5bc:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a5c0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a5c4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a5c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a5cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a5d0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a5d4:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a5d8:	eddf 4a45 	vldr	s9, [pc, #276]	; 800a6f0 <slalomL+0x3ac>
 800a5dc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a5e0:	68f8      	ldr	r0, [r7, #12]
 800a5e2:	eeb0 2a47 	vmov.f32	s4, s14
 800a5e6:	eef0 1a45 	vmov.f32	s3, s10
 800a5ea:	eeb0 1a65 	vmov.f32	s2, s11
 800a5ee:	eef0 0a46 	vmov.f32	s1, s12
 800a5f2:	eeb0 0a66 	vmov.f32	s0, s13
 800a5f6:	f7f8 fcf1 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800a5fa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d10c      	bne.n	800a61c <slalomL+0x2d8>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a602:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a606:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a60a:	eeb0 1a47 	vmov.f32	s2, s14
 800a60e:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800a700 <slalomL+0x3bc>
 800a612:	eeb0 0a67 	vmov.f32	s0, s15
 800a616:	f7f9 fc57 	bl	8003ec8 <mollifier_slalom_table>
 800a61a:	e013      	b.n	800a644 <slalomL+0x300>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a61c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a620:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a624:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a628:	eef0 2a66 	vmov.f32	s5, s13
 800a62c:	eeb0 2a47 	vmov.f32	s4, s14
 800a630:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a6f4 <slalomL+0x3b0>
 800a634:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a6f4 <slalomL+0x3b0>
 800a638:	eddf 0a31 	vldr	s1, [pc, #196]	; 800a700 <slalomL+0x3bc>
 800a63c:	eeb0 0a67 	vmov.f32	s0, s15
 800a640:	f7f9 faf2 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800a644:	2300      	movs	r3, #0
 800a646:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a648:	2300      	movs	r3, #0
 800a64a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a64c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a650:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a654:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a658:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a65c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a660:	edd7 7a01 	vldr	s15, [r7, #4]
 800a664:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a66c:	eef0 7ae7 	vabs.f32	s15, s15
 800a670:	ee17 0a90 	vmov	r0, s15
 800a674:	f7f5 ff90 	bl	8000598 <__aeabi_f2d>
 800a678:	f04f 0200 	mov.w	r2, #0
 800a67c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a680:	f7f6 f90c 	bl	800089c <__aeabi_ddiv>
 800a684:	4602      	mov	r2, r0
 800a686:	460b      	mov	r3, r1
 800a688:	4614      	mov	r4, r2
 800a68a:	461d      	mov	r5, r3
 800a68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68e:	4618      	mov	r0, r3
 800a690:	f7f5 ff82 	bl	8000598 <__aeabi_f2d>
 800a694:	4602      	mov	r2, r0
 800a696:	460b      	mov	r3, r1
 800a698:	4620      	mov	r0, r4
 800a69a:	4629      	mov	r1, r5
 800a69c:	f7f6 f8fe 	bl	800089c <__aeabi_ddiv>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	4610      	mov	r0, r2
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	f04f 0200 	mov.w	r2, #0
 800a6ac:	4b15      	ldr	r3, [pc, #84]	; (800a704 <slalomL+0x3c0>)
 800a6ae:	f7f5 fe15 	bl	80002dc <__adddf3>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a6b6:	4610      	mov	r0, r2
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	f7f6 fa9d 	bl	8000bf8 <__aeabi_d2f>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	68f8      	ldr	r0, [r7, #12]
 800a6c2:	ee02 3a10 	vmov	s4, r3
 800a6c6:	edd7 1a01 	vldr	s3, [r7, #4]
 800a6ca:	ed97 1a01 	vldr	s2, [r7, #4]
 800a6ce:	eef0 0a68 	vmov.f32	s1, s17
 800a6d2:	eeb0 0a48 	vmov.f32	s0, s16
 800a6d6:	f7f8 fc81 	bl	8002fdc <straight_table2>
}
 800a6da:	bf00      	nop
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	ecbd 8b02 	vpop	{d8}
 800a6e4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a6e8:	b004      	add	sp, #16
 800a6ea:	4770      	bx	lr
 800a6ec:	20000808 	.word	0x20000808
 800a6f0:	42340000 	.word	0x42340000
 800a6f4:	00000000 	.word	0x00000000
 800a6f8:	431b8000 	.word	0x431b8000
 800a6fc:	43138000 	.word	0x43138000
 800a700:	42b40000 	.word	0x42b40000
 800a704:	408f4000 	.word	0x408f4000

0800a708 <turn90R>:


void turn90R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800a708:	b084      	sub	sp, #16
 800a70a:	b5b0      	push	{r4, r5, r7, lr}
 800a70c:	ed2d 8b02 	vpush	{d8}
 800a710:	b084      	sub	sp, #16
 800a712:	af00      	add	r7, sp, #0
 800a714:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a718:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a71c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800a720:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a724:	2b01      	cmp	r3, #1
 800a726:	f040 80a5 	bne.w	800a874 <turn90R+0x16c>
		highspeed_mode = 1;
 800a72a:	4ba5      	ldr	r3, [pc, #660]	; (800a9c0 <turn90R+0x2b8>)
 800a72c:	2201      	movs	r2, #1
 800a72e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a730:	2301      	movs	r3, #1
 800a732:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a734:	2300      	movs	r3, #0
 800a736:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a738:	2300      	movs	r3, #0
 800a73a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a73c:	2300      	movs	r3, #0
 800a73e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a740:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a744:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a748:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a74c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a750:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a754:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a758:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a75c:	eddf 5a99 	vldr	s11, [pc, #612]	; 800a9c4 <turn90R+0x2bc>
 800a760:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a764:	68f8      	ldr	r0, [r7, #12]
 800a766:	eeb0 2a47 	vmov.f32	s4, s14
 800a76a:	eef0 1a46 	vmov.f32	s3, s12
 800a76e:	eeb0 1a66 	vmov.f32	s2, s13
 800a772:	eddf 0a95 	vldr	s1, [pc, #596]	; 800a9c8 <turn90R+0x2c0>
 800a776:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800a9cc <turn90R+0x2c4>
 800a77a:	f7f8 fc2f 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800a77e:	2300      	movs	r3, #0
 800a780:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800a782:	2302      	movs	r3, #2
 800a784:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a786:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a78a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a78e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a792:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a796:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a79a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a79e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7a2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a7a6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a7aa:	eddf 4a86 	vldr	s9, [pc, #536]	; 800a9c4 <turn90R+0x2bc>
 800a7ae:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	eeb0 2a47 	vmov.f32	s4, s14
 800a7b8:	eef0 1a45 	vmov.f32	s3, s10
 800a7bc:	eeb0 1a65 	vmov.f32	s2, s11
 800a7c0:	eef0 0a46 	vmov.f32	s1, s12
 800a7c4:	eeb0 0a66 	vmov.f32	s0, s13
 800a7c8:	f7f8 fc08 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800a7cc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d10c      	bne.n	800a7ee <turn90R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a7d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a7d8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a7dc:	eeb0 1a47 	vmov.f32	s2, s14
 800a7e0:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800a9d0 <turn90R+0x2c8>
 800a7e4:	eeb0 0a67 	vmov.f32	s0, s15
 800a7e8:	f7f9 fb6e 	bl	8003ec8 <mollifier_slalom_table>
 800a7ec:	e015      	b.n	800a81a <turn90R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a7ee:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a7f2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a7f6:	eef1 7a67 	vneg.f32	s15, s15
 800a7fa:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a7fe:	eef0 2a66 	vmov.f32	s5, s13
 800a802:	eeb0 2a67 	vmov.f32	s4, s15
 800a806:	eddf 1a70 	vldr	s3, [pc, #448]	; 800a9c8 <turn90R+0x2c0>
 800a80a:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800a9c8 <turn90R+0x2c0>
 800a80e:	eddf 0a70 	vldr	s1, [pc, #448]	; 800a9d0 <turn90R+0x2c8>
 800a812:	eeb0 0a47 	vmov.f32	s0, s14
 800a816:	f7f9 fa07 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800a81a:	2300      	movs	r3, #0
 800a81c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a81e:	2300      	movs	r3, #0
 800a820:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a822:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a826:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800a9d4 <turn90R+0x2cc>
 800a82a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a82e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a832:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a836:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a83a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a83e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a842:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a846:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a84a:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800a9c4 <turn90R+0x2bc>
 800a84e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a852:	68f8      	ldr	r0, [r7, #12]
 800a854:	eeb0 2a47 	vmov.f32	s4, s14
 800a858:	eef0 1a65 	vmov.f32	s3, s11
 800a85c:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800a9c8 <turn90R+0x2c0>
 800a860:	eef0 0a46 	vmov.f32	s1, s12
 800a864:	eeb0 0a66 	vmov.f32	s0, s13
 800a868:	f7f8 fbb8 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800a86c:	4b54      	ldr	r3, [pc, #336]	; (800a9c0 <turn90R+0x2b8>)
 800a86e:	2200      	movs	r2, #0
 800a870:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800a872:	e09c      	b.n	800a9ae <turn90R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800a874:	2300      	movs	r3, #0
 800a876:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a878:	2300      	movs	r3, #0
 800a87a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800a87c:	2302      	movs	r3, #2
 800a87e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a880:	2300      	movs	r3, #0
 800a882:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a884:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a888:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a88c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a890:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a894:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a898:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a89c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a8a0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a8a4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a8a8:	eddf 4a46 	vldr	s9, [pc, #280]	; 800a9c4 <turn90R+0x2bc>
 800a8ac:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a8b0:	68f8      	ldr	r0, [r7, #12]
 800a8b2:	eeb0 2a47 	vmov.f32	s4, s14
 800a8b6:	eef0 1a45 	vmov.f32	s3, s10
 800a8ba:	eeb0 1a65 	vmov.f32	s2, s11
 800a8be:	eef0 0a46 	vmov.f32	s1, s12
 800a8c2:	eeb0 0a66 	vmov.f32	s0, s13
 800a8c6:	f7f8 fb89 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800a8ca:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d10c      	bne.n	800a8ec <turn90R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a8d2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a8d6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a8da:	eeb0 1a47 	vmov.f32	s2, s14
 800a8de:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800a9d0 <turn90R+0x2c8>
 800a8e2:	eeb0 0a67 	vmov.f32	s0, s15
 800a8e6:	f7f9 faef 	bl	8003ec8 <mollifier_slalom_table>
 800a8ea:	e015      	b.n	800a918 <turn90R+0x210>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a8ec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a8f0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a8f4:	eef1 7a67 	vneg.f32	s15, s15
 800a8f8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a8fc:	eef0 2a66 	vmov.f32	s5, s13
 800a900:	eeb0 2a67 	vmov.f32	s4, s15
 800a904:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a9c8 <turn90R+0x2c0>
 800a908:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a9c8 <turn90R+0x2c0>
 800a90c:	eddf 0a30 	vldr	s1, [pc, #192]	; 800a9d0 <turn90R+0x2c8>
 800a910:	eeb0 0a47 	vmov.f32	s0, s14
 800a914:	f7f9 f988 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800a918:	2301      	movs	r3, #1
 800a91a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a91c:	2300      	movs	r3, #0
 800a91e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a920:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a924:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a928:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a92c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a930:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a934:	edd7 7a01 	vldr	s15, [r7, #4]
 800a938:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a93c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a940:	eef0 7ae7 	vabs.f32	s15, s15
 800a944:	ee17 0a90 	vmov	r0, s15
 800a948:	f7f5 fe26 	bl	8000598 <__aeabi_f2d>
 800a94c:	f04f 0200 	mov.w	r2, #0
 800a950:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a954:	f7f5 ffa2 	bl	800089c <__aeabi_ddiv>
 800a958:	4602      	mov	r2, r0
 800a95a:	460b      	mov	r3, r1
 800a95c:	4614      	mov	r4, r2
 800a95e:	461d      	mov	r5, r3
 800a960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a962:	4618      	mov	r0, r3
 800a964:	f7f5 fe18 	bl	8000598 <__aeabi_f2d>
 800a968:	4602      	mov	r2, r0
 800a96a:	460b      	mov	r3, r1
 800a96c:	4620      	mov	r0, r4
 800a96e:	4629      	mov	r1, r5
 800a970:	f7f5 ff94 	bl	800089c <__aeabi_ddiv>
 800a974:	4602      	mov	r2, r0
 800a976:	460b      	mov	r3, r1
 800a978:	4610      	mov	r0, r2
 800a97a:	4619      	mov	r1, r3
 800a97c:	f04f 0200 	mov.w	r2, #0
 800a980:	4b15      	ldr	r3, [pc, #84]	; (800a9d8 <turn90R+0x2d0>)
 800a982:	f7f5 fcab 	bl	80002dc <__adddf3>
 800a986:	4602      	mov	r2, r0
 800a988:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a98a:	4610      	mov	r0, r2
 800a98c:	4619      	mov	r1, r3
 800a98e:	f7f6 f933 	bl	8000bf8 <__aeabi_d2f>
 800a992:	4603      	mov	r3, r0
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	ee02 3a10 	vmov	s4, r3
 800a99a:	edd7 1a01 	vldr	s3, [r7, #4]
 800a99e:	ed97 1a01 	vldr	s2, [r7, #4]
 800a9a2:	eef0 0a68 	vmov.f32	s1, s17
 800a9a6:	eeb0 0a48 	vmov.f32	s0, s16
 800a9aa:	f7f8 fb17 	bl	8002fdc <straight_table2>
}
 800a9ae:	bf00      	nop
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	ecbd 8b02 	vpop	{d8}
 800a9b8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a9bc:	b004      	add	sp, #16
 800a9be:	4770      	bx	lr
 800a9c0:	20000808 	.word	0x20000808
 800a9c4:	42340000 	.word	0x42340000
 800a9c8:	00000000 	.word	0x00000000
 800a9cc:	42cd0000 	.word	0x42cd0000
 800a9d0:	c2b40000 	.word	0xc2b40000
 800a9d4:	42b40000 	.word	0x42b40000
 800a9d8:	408f4000 	.word	0x408f4000

0800a9dc <turn90L>:

void turn90L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800a9dc:	b084      	sub	sp, #16
 800a9de:	b5b0      	push	{r4, r5, r7, lr}
 800a9e0:	ed2d 8b02 	vpush	{d8}
 800a9e4:	b084      	sub	sp, #16
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a9ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a9f0:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800a9f4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	f040 80a3 	bne.w	800ab44 <turn90L+0x168>
		highspeed_mode = 1;
 800a9fe:	4ba3      	ldr	r3, [pc, #652]	; (800ac8c <turn90L+0x2b0>)
 800aa00:	2201      	movs	r2, #1
 800aa02:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800aa04:	2301      	movs	r3, #1
 800aa06:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800aa10:	2300      	movs	r3, #0
 800aa12:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800aa14:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800aa18:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aa1c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aa20:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aa24:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa28:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800aa2c:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800aa30:	eddf 5a97 	vldr	s11, [pc, #604]	; 800ac90 <turn90L+0x2b4>
 800aa34:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800aa38:	68f8      	ldr	r0, [r7, #12]
 800aa3a:	eeb0 2a47 	vmov.f32	s4, s14
 800aa3e:	eef0 1a46 	vmov.f32	s3, s12
 800aa42:	eeb0 1a66 	vmov.f32	s2, s13
 800aa46:	eddf 0a93 	vldr	s1, [pc, #588]	; 800ac94 <turn90L+0x2b8>
 800aa4a:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800ac98 <turn90L+0x2bc>
 800aa4e:	f7f8 fac5 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800aa52:	2300      	movs	r3, #0
 800aa54:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800aa56:	2302      	movs	r3, #2
 800aa58:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aa5a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800aa5e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800aa62:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800aa66:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aa6a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aa6e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aa72:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa76:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800aa7a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aa7e:	eddf 4a84 	vldr	s9, [pc, #528]	; 800ac90 <turn90L+0x2b4>
 800aa82:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800aa86:	68f8      	ldr	r0, [r7, #12]
 800aa88:	eeb0 2a47 	vmov.f32	s4, s14
 800aa8c:	eef0 1a45 	vmov.f32	s3, s10
 800aa90:	eeb0 1a65 	vmov.f32	s2, s11
 800aa94:	eef0 0a46 	vmov.f32	s1, s12
 800aa98:	eeb0 0a66 	vmov.f32	s0, s13
 800aa9c:	f7f8 fa9e 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800aaa0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d10c      	bne.n	800aac2 <turn90L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800aaa8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aaac:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800aab0:	eeb0 1a47 	vmov.f32	s2, s14
 800aab4:	eddf 0a79 	vldr	s1, [pc, #484]	; 800ac9c <turn90L+0x2c0>
 800aab8:	eeb0 0a67 	vmov.f32	s0, s15
 800aabc:	f7f9 fa04 	bl	8003ec8 <mollifier_slalom_table>
 800aac0:	e013      	b.n	800aaea <turn90L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800aac2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aac6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800aaca:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800aace:	eef0 2a66 	vmov.f32	s5, s13
 800aad2:	eeb0 2a47 	vmov.f32	s4, s14
 800aad6:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800ac94 <turn90L+0x2b8>
 800aada:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800ac94 <turn90L+0x2b8>
 800aade:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800ac9c <turn90L+0x2c0>
 800aae2:	eeb0 0a67 	vmov.f32	s0, s15
 800aae6:	f7f9 f89f 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800aaea:	2300      	movs	r3, #0
 800aaec:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800aaf2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800aaf6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800ac9c <turn90L+0x2c0>
 800aafa:	ee77 6a87 	vadd.f32	s13, s15, s14
 800aafe:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ab02:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ab06:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab0a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab12:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ab16:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ab1a:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800ac90 <turn90L+0x2b4>
 800ab1e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	eeb0 2a47 	vmov.f32	s4, s14
 800ab28:	eef0 1a65 	vmov.f32	s3, s11
 800ab2c:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800ac94 <turn90L+0x2b8>
 800ab30:	eef0 0a46 	vmov.f32	s1, s12
 800ab34:	eeb0 0a66 	vmov.f32	s0, s13
 800ab38:	f7f8 fa50 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800ab3c:	4b53      	ldr	r3, [pc, #332]	; (800ac8c <turn90L+0x2b0>)
 800ab3e:	2200      	movs	r2, #0
 800ab40:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800ab42:	e09a      	b.n	800ac7a <turn90L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800ab44:	2300      	movs	r3, #0
 800ab46:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800ab4c:	2302      	movs	r3, #2
 800ab4e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ab50:	2300      	movs	r3, #0
 800ab52:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ab54:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ab58:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ab5c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ab60:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ab64:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab68:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab70:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ab74:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ab78:	eddf 4a45 	vldr	s9, [pc, #276]	; 800ac90 <turn90L+0x2b4>
 800ab7c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	eeb0 2a47 	vmov.f32	s4, s14
 800ab86:	eef0 1a45 	vmov.f32	s3, s10
 800ab8a:	eeb0 1a65 	vmov.f32	s2, s11
 800ab8e:	eef0 0a46 	vmov.f32	s1, s12
 800ab92:	eeb0 0a66 	vmov.f32	s0, s13
 800ab96:	f7f8 fa21 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800ab9a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d10c      	bne.n	800abbc <turn90L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800aba2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aba6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800abaa:	eeb0 1a47 	vmov.f32	s2, s14
 800abae:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800ac9c <turn90L+0x2c0>
 800abb2:	eeb0 0a67 	vmov.f32	s0, s15
 800abb6:	f7f9 f987 	bl	8003ec8 <mollifier_slalom_table>
 800abba:	e013      	b.n	800abe4 <turn90L+0x208>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800abbc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800abc0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800abc4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800abc8:	eef0 2a66 	vmov.f32	s5, s13
 800abcc:	eeb0 2a47 	vmov.f32	s4, s14
 800abd0:	eddf 1a30 	vldr	s3, [pc, #192]	; 800ac94 <turn90L+0x2b8>
 800abd4:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800ac94 <turn90L+0x2b8>
 800abd8:	eddf 0a30 	vldr	s1, [pc, #192]	; 800ac9c <turn90L+0x2c0>
 800abdc:	eeb0 0a67 	vmov.f32	s0, s15
 800abe0:	f7f9 f822 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800abe4:	2301      	movs	r3, #1
 800abe6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800abe8:	2300      	movs	r3, #0
 800abea:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800abec:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800abf0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800abf4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800abf8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800abfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac00:	edd7 7a01 	vldr	s15, [r7, #4]
 800ac04:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ac08:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac0c:	eef0 7ae7 	vabs.f32	s15, s15
 800ac10:	ee17 0a90 	vmov	r0, s15
 800ac14:	f7f5 fcc0 	bl	8000598 <__aeabi_f2d>
 800ac18:	f04f 0200 	mov.w	r2, #0
 800ac1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac20:	f7f5 fe3c 	bl	800089c <__aeabi_ddiv>
 800ac24:	4602      	mov	r2, r0
 800ac26:	460b      	mov	r3, r1
 800ac28:	4614      	mov	r4, r2
 800ac2a:	461d      	mov	r5, r3
 800ac2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7f5 fcb2 	bl	8000598 <__aeabi_f2d>
 800ac34:	4602      	mov	r2, r0
 800ac36:	460b      	mov	r3, r1
 800ac38:	4620      	mov	r0, r4
 800ac3a:	4629      	mov	r1, r5
 800ac3c:	f7f5 fe2e 	bl	800089c <__aeabi_ddiv>
 800ac40:	4602      	mov	r2, r0
 800ac42:	460b      	mov	r3, r1
 800ac44:	4610      	mov	r0, r2
 800ac46:	4619      	mov	r1, r3
 800ac48:	f04f 0200 	mov.w	r2, #0
 800ac4c:	4b14      	ldr	r3, [pc, #80]	; (800aca0 <turn90L+0x2c4>)
 800ac4e:	f7f5 fb45 	bl	80002dc <__adddf3>
 800ac52:	4602      	mov	r2, r0
 800ac54:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ac56:	4610      	mov	r0, r2
 800ac58:	4619      	mov	r1, r3
 800ac5a:	f7f5 ffcd 	bl	8000bf8 <__aeabi_d2f>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	ee02 3a10 	vmov	s4, r3
 800ac66:	edd7 1a01 	vldr	s3, [r7, #4]
 800ac6a:	ed97 1a01 	vldr	s2, [r7, #4]
 800ac6e:	eef0 0a68 	vmov.f32	s1, s17
 800ac72:	eeb0 0a48 	vmov.f32	s0, s16
 800ac76:	f7f8 f9b1 	bl	8002fdc <straight_table2>
}
 800ac7a:	bf00      	nop
 800ac7c:	3710      	adds	r7, #16
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	ecbd 8b02 	vpop	{d8}
 800ac84:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ac88:	b004      	add	sp, #16
 800ac8a:	4770      	bx	lr
 800ac8c:	20000808 	.word	0x20000808
 800ac90:	42340000 	.word	0x42340000
 800ac94:	00000000 	.word	0x00000000
 800ac98:	42cd0000 	.word	0x42cd0000
 800ac9c:	42b40000 	.word	0x42b40000
 800aca0:	408f4000 	.word	0x408f4000

0800aca4 <turn180R>:


void turn180R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800aca4:	b084      	sub	sp, #16
 800aca6:	b5b0      	push	{r4, r5, r7, lr}
 800aca8:	ed2d 8b02 	vpush	{d8}
 800acac:	b084      	sub	sp, #16
 800acae:	af00      	add	r7, sp, #0
 800acb0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800acb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800acb8:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800acbc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	f040 80a5 	bne.w	800ae10 <turn180R+0x16c>
		highspeed_mode = 1;
 800acc6:	4ba5      	ldr	r3, [pc, #660]	; (800af5c <turn180R+0x2b8>)
 800acc8:	2201      	movs	r2, #1
 800acca:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800accc:	2301      	movs	r3, #1
 800acce:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800acd0:	2300      	movs	r3, #0
 800acd2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800acd4:	2300      	movs	r3, #0
 800acd6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800acd8:	2300      	movs	r3, #0
 800acda:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800acdc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ace0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ace4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ace8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800acec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800acf0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800acf4:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800acf8:	eddf 5a99 	vldr	s11, [pc, #612]	; 800af60 <turn180R+0x2bc>
 800acfc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800ad00:	68f8      	ldr	r0, [r7, #12]
 800ad02:	eeb0 2a47 	vmov.f32	s4, s14
 800ad06:	eef0 1a46 	vmov.f32	s3, s12
 800ad0a:	eeb0 1a66 	vmov.f32	s2, s13
 800ad0e:	eddf 0a95 	vldr	s1, [pc, #596]	; 800af64 <turn180R+0x2c0>
 800ad12:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800af68 <turn180R+0x2c4>
 800ad16:	f7f8 f961 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800ad1e:	2302      	movs	r3, #2
 800ad20:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ad22:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ad26:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ad2a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ad2e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ad32:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad36:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad3e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ad42:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ad46:	eddf 4a86 	vldr	s9, [pc, #536]	; 800af60 <turn180R+0x2bc>
 800ad4a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	eeb0 2a47 	vmov.f32	s4, s14
 800ad54:	eef0 1a45 	vmov.f32	s3, s10
 800ad58:	eeb0 1a65 	vmov.f32	s2, s11
 800ad5c:	eef0 0a46 	vmov.f32	s1, s12
 800ad60:	eeb0 0a66 	vmov.f32	s0, s13
 800ad64:	f7f8 f93a 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800ad68:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d10c      	bne.n	800ad8a <turn180R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800ad70:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad74:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ad78:	eeb0 1a47 	vmov.f32	s2, s14
 800ad7c:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800af6c <turn180R+0x2c8>
 800ad80:	eeb0 0a67 	vmov.f32	s0, s15
 800ad84:	f7f9 f8a0 	bl	8003ec8 <mollifier_slalom_table>
 800ad88:	e015      	b.n	800adb6 <turn180R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ad8a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad8e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ad92:	eef1 7a67 	vneg.f32	s15, s15
 800ad96:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ad9a:	eef0 2a66 	vmov.f32	s5, s13
 800ad9e:	eeb0 2a67 	vmov.f32	s4, s15
 800ada2:	eddf 1a70 	vldr	s3, [pc, #448]	; 800af64 <turn180R+0x2c0>
 800ada6:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800af64 <turn180R+0x2c0>
 800adaa:	eddf 0a70 	vldr	s1, [pc, #448]	; 800af6c <turn180R+0x2c8>
 800adae:	eeb0 0a47 	vmov.f32	s0, s14
 800adb2:	f7f8 ff39 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800adb6:	2300      	movs	r3, #0
 800adb8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800adba:	2300      	movs	r3, #0
 800adbc:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800adbe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800adc2:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800af70 <turn180R+0x2cc>
 800adc6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800adca:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800adce:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800add2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800add6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800adda:	ee27 7a27 	vmul.f32	s14, s14, s15
 800adde:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ade2:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ade6:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800af60 <turn180R+0x2bc>
 800adea:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800adee:	68f8      	ldr	r0, [r7, #12]
 800adf0:	eeb0 2a47 	vmov.f32	s4, s14
 800adf4:	eef0 1a65 	vmov.f32	s3, s11
 800adf8:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800af64 <turn180R+0x2c0>
 800adfc:	eef0 0a46 	vmov.f32	s1, s12
 800ae00:	eeb0 0a66 	vmov.f32	s0, s13
 800ae04:	f7f8 f8ea 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800ae08:	4b54      	ldr	r3, [pc, #336]	; (800af5c <turn180R+0x2b8>)
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800ae0e:	e09c      	b.n	800af4a <turn180R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800ae10:	2300      	movs	r3, #0
 800ae12:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ae14:	2300      	movs	r3, #0
 800ae16:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800ae18:	2302      	movs	r3, #2
 800ae1a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ae20:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ae24:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ae28:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ae2c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ae30:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ae34:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae38:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae3c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ae40:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ae44:	eddf 4a46 	vldr	s9, [pc, #280]	; 800af60 <turn180R+0x2bc>
 800ae48:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	eeb0 2a47 	vmov.f32	s4, s14
 800ae52:	eef0 1a45 	vmov.f32	s3, s10
 800ae56:	eeb0 1a65 	vmov.f32	s2, s11
 800ae5a:	eef0 0a46 	vmov.f32	s1, s12
 800ae5e:	eeb0 0a66 	vmov.f32	s0, s13
 800ae62:	f7f8 f8bb 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800ae66:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d10c      	bne.n	800ae88 <turn180R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800ae6e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae72:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ae76:	eeb0 1a47 	vmov.f32	s2, s14
 800ae7a:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800af6c <turn180R+0x2c8>
 800ae7e:	eeb0 0a67 	vmov.f32	s0, s15
 800ae82:	f7f9 f821 	bl	8003ec8 <mollifier_slalom_table>
 800ae86:	e015      	b.n	800aeb4 <turn180R+0x210>
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ae88:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ae8c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ae90:	eef1 7a67 	vneg.f32	s15, s15
 800ae94:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ae98:	eef0 2a66 	vmov.f32	s5, s13
 800ae9c:	eeb0 2a67 	vmov.f32	s4, s15
 800aea0:	eddf 1a30 	vldr	s3, [pc, #192]	; 800af64 <turn180R+0x2c0>
 800aea4:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800af64 <turn180R+0x2c0>
 800aea8:	eddf 0a30 	vldr	s1, [pc, #192]	; 800af6c <turn180R+0x2c8>
 800aeac:	eeb0 0a47 	vmov.f32	s0, s14
 800aeb0:	f7f8 feba 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800aebc:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800aec0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800aec4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aec8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aecc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aed0:	edd7 7a01 	vldr	s15, [r7, #4]
 800aed4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800aed8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aedc:	eef0 7ae7 	vabs.f32	s15, s15
 800aee0:	ee17 0a90 	vmov	r0, s15
 800aee4:	f7f5 fb58 	bl	8000598 <__aeabi_f2d>
 800aee8:	f04f 0200 	mov.w	r2, #0
 800aeec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aef0:	f7f5 fcd4 	bl	800089c <__aeabi_ddiv>
 800aef4:	4602      	mov	r2, r0
 800aef6:	460b      	mov	r3, r1
 800aef8:	4614      	mov	r4, r2
 800aefa:	461d      	mov	r5, r3
 800aefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefe:	4618      	mov	r0, r3
 800af00:	f7f5 fb4a 	bl	8000598 <__aeabi_f2d>
 800af04:	4602      	mov	r2, r0
 800af06:	460b      	mov	r3, r1
 800af08:	4620      	mov	r0, r4
 800af0a:	4629      	mov	r1, r5
 800af0c:	f7f5 fcc6 	bl	800089c <__aeabi_ddiv>
 800af10:	4602      	mov	r2, r0
 800af12:	460b      	mov	r3, r1
 800af14:	4610      	mov	r0, r2
 800af16:	4619      	mov	r1, r3
 800af18:	f04f 0200 	mov.w	r2, #0
 800af1c:	4b15      	ldr	r3, [pc, #84]	; (800af74 <turn180R+0x2d0>)
 800af1e:	f7f5 f9dd 	bl	80002dc <__adddf3>
 800af22:	4602      	mov	r2, r0
 800af24:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800af26:	4610      	mov	r0, r2
 800af28:	4619      	mov	r1, r3
 800af2a:	f7f5 fe65 	bl	8000bf8 <__aeabi_d2f>
 800af2e:	4603      	mov	r3, r0
 800af30:	68f8      	ldr	r0, [r7, #12]
 800af32:	ee02 3a10 	vmov	s4, r3
 800af36:	edd7 1a01 	vldr	s3, [r7, #4]
 800af3a:	ed97 1a01 	vldr	s2, [r7, #4]
 800af3e:	eef0 0a68 	vmov.f32	s1, s17
 800af42:	eeb0 0a48 	vmov.f32	s0, s16
 800af46:	f7f8 f849 	bl	8002fdc <straight_table2>
}
 800af4a:	bf00      	nop
 800af4c:	3710      	adds	r7, #16
 800af4e:	46bd      	mov	sp, r7
 800af50:	ecbd 8b02 	vpop	{d8}
 800af54:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800af58:	b004      	add	sp, #16
 800af5a:	4770      	bx	lr
 800af5c:	20000808 	.word	0x20000808
 800af60:	42340000 	.word	0x42340000
 800af64:	00000000 	.word	0x00000000
 800af68:	42cd0000 	.word	0x42cd0000
 800af6c:	c3340000 	.word	0xc3340000
 800af70:	42b40000 	.word	0x42b40000
 800af74:	408f4000 	.word	0x408f4000

0800af78 <turn180L>:

void turn180L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800af78:	b084      	sub	sp, #16
 800af7a:	b5b0      	push	{r4, r5, r7, lr}
 800af7c:	ed2d 8b02 	vpush	{d8}
 800af80:	b084      	sub	sp, #16
 800af82:	af00      	add	r7, sp, #0
 800af84:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800af88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800af8c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800af90:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800af94:	2b01      	cmp	r3, #1
 800af96:	f040 80a3 	bne.w	800b0e0 <turn180L+0x168>
		highspeed_mode = 1;
 800af9a:	4ba3      	ldr	r3, [pc, #652]	; (800b228 <turn180L+0x2b0>)
 800af9c:	2201      	movs	r2, #1
 800af9e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800afa0:	2301      	movs	r3, #1
 800afa2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800afa4:	2300      	movs	r3, #0
 800afa6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800afa8:	2300      	movs	r3, #0
 800afaa:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800afac:	2300      	movs	r3, #0
 800afae:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800afb0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800afb4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800afb8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800afbc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800afc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800afc4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800afc8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800afcc:	eddf 5a97 	vldr	s11, [pc, #604]	; 800b22c <turn180L+0x2b4>
 800afd0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	eeb0 2a47 	vmov.f32	s4, s14
 800afda:	eef0 1a46 	vmov.f32	s3, s12
 800afde:	eeb0 1a66 	vmov.f32	s2, s13
 800afe2:	eddf 0a93 	vldr	s1, [pc, #588]	; 800b230 <turn180L+0x2b8>
 800afe6:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800b234 <turn180L+0x2bc>
 800afea:	f7f7 fff7 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800afee:	2300      	movs	r3, #0
 800aff0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800aff2:	2302      	movs	r3, #2
 800aff4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aff6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800affa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800affe:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b002:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b006:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b00a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b00e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b012:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b016:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b01a:	eddf 4a84 	vldr	s9, [pc, #528]	; 800b22c <turn180L+0x2b4>
 800b01e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	eeb0 2a47 	vmov.f32	s4, s14
 800b028:	eef0 1a45 	vmov.f32	s3, s10
 800b02c:	eeb0 1a65 	vmov.f32	s2, s11
 800b030:	eef0 0a46 	vmov.f32	s1, s12
 800b034:	eeb0 0a66 	vmov.f32	s0, s13
 800b038:	f7f7 ffd0 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b03c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b040:	2b01      	cmp	r3, #1
 800b042:	d10c      	bne.n	800b05e <turn180L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800b044:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b048:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b04c:	eeb0 1a47 	vmov.f32	s2, s14
 800b050:	eddf 0a79 	vldr	s1, [pc, #484]	; 800b238 <turn180L+0x2c0>
 800b054:	eeb0 0a67 	vmov.f32	s0, s15
 800b058:	f7f8 ff36 	bl	8003ec8 <mollifier_slalom_table>
 800b05c:	e013      	b.n	800b086 <turn180L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b05e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b062:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b066:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b06a:	eef0 2a66 	vmov.f32	s5, s13
 800b06e:	eeb0 2a47 	vmov.f32	s4, s14
 800b072:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800b230 <turn180L+0x2b8>
 800b076:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800b230 <turn180L+0x2b8>
 800b07a:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800b238 <turn180L+0x2c0>
 800b07e:	eeb0 0a67 	vmov.f32	s0, s15
 800b082:	f7f8 fdd1 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b086:	2300      	movs	r3, #0
 800b088:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b08a:	2300      	movs	r3, #0
 800b08c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b08e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b092:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800b23c <turn180L+0x2c4>
 800b096:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b09a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b09e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b0a2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b0a6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b0aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b0ae:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b0b2:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b0b6:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800b22c <turn180L+0x2b4>
 800b0ba:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b0be:	68f8      	ldr	r0, [r7, #12]
 800b0c0:	eeb0 2a47 	vmov.f32	s4, s14
 800b0c4:	eef0 1a65 	vmov.f32	s3, s11
 800b0c8:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800b230 <turn180L+0x2b8>
 800b0cc:	eef0 0a46 	vmov.f32	s1, s12
 800b0d0:	eeb0 0a66 	vmov.f32	s0, s13
 800b0d4:	f7f7 ff82 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800b0d8:	4b53      	ldr	r3, [pc, #332]	; (800b228 <turn180L+0x2b0>)
 800b0da:	2200      	movs	r2, #0
 800b0dc:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800b0de:	e09a      	b.n	800b216 <turn180L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b0e8:	2302      	movs	r3, #2
 800b0ea:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b0f0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b0f4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b0f8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b0fc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b100:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b104:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b108:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b10c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b110:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b114:	eddf 4a45 	vldr	s9, [pc, #276]	; 800b22c <turn180L+0x2b4>
 800b118:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	eeb0 2a47 	vmov.f32	s4, s14
 800b122:	eef0 1a45 	vmov.f32	s3, s10
 800b126:	eeb0 1a65 	vmov.f32	s2, s11
 800b12a:	eef0 0a46 	vmov.f32	s1, s12
 800b12e:	eeb0 0a66 	vmov.f32	s0, s13
 800b132:	f7f7 ff53 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b136:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d10c      	bne.n	800b158 <turn180L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800b13e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b142:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b146:	eeb0 1a47 	vmov.f32	s2, s14
 800b14a:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800b238 <turn180L+0x2c0>
 800b14e:	eeb0 0a67 	vmov.f32	s0, s15
 800b152:	f7f8 feb9 	bl	8003ec8 <mollifier_slalom_table>
 800b156:	e013      	b.n	800b180 <turn180L+0x208>
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b158:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b15c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b160:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b164:	eef0 2a66 	vmov.f32	s5, s13
 800b168:	eeb0 2a47 	vmov.f32	s4, s14
 800b16c:	eddf 1a30 	vldr	s3, [pc, #192]	; 800b230 <turn180L+0x2b8>
 800b170:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800b230 <turn180L+0x2b8>
 800b174:	eddf 0a30 	vldr	s1, [pc, #192]	; 800b238 <turn180L+0x2c0>
 800b178:	eeb0 0a67 	vmov.f32	s0, s15
 800b17c:	f7f8 fd54 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800b180:	2301      	movs	r3, #1
 800b182:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b184:	2300      	movs	r3, #0
 800b186:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b188:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b18c:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b190:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b194:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b198:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b19c:	edd7 7a01 	vldr	s15, [r7, #4]
 800b1a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b1a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1a8:	eef0 7ae7 	vabs.f32	s15, s15
 800b1ac:	ee17 0a90 	vmov	r0, s15
 800b1b0:	f7f5 f9f2 	bl	8000598 <__aeabi_f2d>
 800b1b4:	f04f 0200 	mov.w	r2, #0
 800b1b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b1bc:	f7f5 fb6e 	bl	800089c <__aeabi_ddiv>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	4614      	mov	r4, r2
 800b1c6:	461d      	mov	r5, r3
 800b1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7f5 f9e4 	bl	8000598 <__aeabi_f2d>
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	4629      	mov	r1, r5
 800b1d8:	f7f5 fb60 	bl	800089c <__aeabi_ddiv>
 800b1dc:	4602      	mov	r2, r0
 800b1de:	460b      	mov	r3, r1
 800b1e0:	4610      	mov	r0, r2
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	f04f 0200 	mov.w	r2, #0
 800b1e8:	4b15      	ldr	r3, [pc, #84]	; (800b240 <turn180L+0x2c8>)
 800b1ea:	f7f5 f877 	bl	80002dc <__adddf3>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b1f2:	4610      	mov	r0, r2
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	f7f5 fcff 	bl	8000bf8 <__aeabi_d2f>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	68f8      	ldr	r0, [r7, #12]
 800b1fe:	ee02 3a10 	vmov	s4, r3
 800b202:	edd7 1a01 	vldr	s3, [r7, #4]
 800b206:	ed97 1a01 	vldr	s2, [r7, #4]
 800b20a:	eef0 0a68 	vmov.f32	s1, s17
 800b20e:	eeb0 0a48 	vmov.f32	s0, s16
 800b212:	f7f7 fee3 	bl	8002fdc <straight_table2>
}
 800b216:	bf00      	nop
 800b218:	3710      	adds	r7, #16
 800b21a:	46bd      	mov	sp, r7
 800b21c:	ecbd 8b02 	vpop	{d8}
 800b220:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b224:	b004      	add	sp, #16
 800b226:	4770      	bx	lr
 800b228:	20000808 	.word	0x20000808
 800b22c:	42340000 	.word	0x42340000
 800b230:	00000000 	.word	0x00000000
 800b234:	42cd0000 	.word	0x42cd0000
 800b238:	43340000 	.word	0x43340000
 800b23c:	42b40000 	.word	0x42b40000
 800b240:	408f4000 	.word	0x408f4000
 800b244:	00000000 	.word	0x00000000

0800b248 <turn45inR>:



void turn45inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b248:	b084      	sub	sp, #16
 800b24a:	b5b0      	push	{r4, r5, r7, lr}
 800b24c:	ed2d 8b02 	vpush	{d8}
 800b250:	b084      	sub	sp, #16
 800b252:	af00      	add	r7, sp, #0
 800b254:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b258:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b25c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b260:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b264:	2b01      	cmp	r3, #1
 800b266:	f040 80ae 	bne.w	800b3c6 <turn45inR+0x17e>
		highspeed_mode = 1;
 800b26a:	4bdd      	ldr	r3, [pc, #884]	; (800b5e0 <turn45inR+0x398>)
 800b26c:	2201      	movs	r2, #1
 800b26e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b270:	2301      	movs	r3, #1
 800b272:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b274:	2300      	movs	r3, #0
 800b276:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b278:	2300      	movs	r3, #0
 800b27a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b27c:	2300      	movs	r3, #0
 800b27e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b280:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b284:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b288:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b28c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b290:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b294:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b298:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b29c:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800b5e4 <turn45inR+0x39c>
 800b2a0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b2a4:	68f8      	ldr	r0, [r7, #12]
 800b2a6:	eeb0 2a47 	vmov.f32	s4, s14
 800b2aa:	eef0 1a46 	vmov.f32	s3, s12
 800b2ae:	eeb0 1a66 	vmov.f32	s2, s13
 800b2b2:	eddf 0acf 	vldr	s1, [pc, #828]	; 800b5f0 <turn45inR+0x3a8>
 800b2b6:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800b5e8 <turn45inR+0x3a0>
 800b2ba:	f7f7 fe8f 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b2c2:	2302      	movs	r3, #2
 800b2c4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b2c6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b2ca:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b2ce:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b2d2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b2d6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b2da:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b2de:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b2e2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b2e6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b2ea:	eddf 4abe 	vldr	s9, [pc, #760]	; 800b5e4 <turn45inR+0x39c>
 800b2ee:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b2f2:	68f8      	ldr	r0, [r7, #12]
 800b2f4:	eeb0 2a47 	vmov.f32	s4, s14
 800b2f8:	eef0 1a45 	vmov.f32	s3, s10
 800b2fc:	eeb0 1a65 	vmov.f32	s2, s11
 800b300:	eef0 0a46 	vmov.f32	s1, s12
 800b304:	eeb0 0a66 	vmov.f32	s0, s13
 800b308:	f7f7 fe68 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b30c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b310:	2b01      	cmp	r3, #1
 800b312:	d10c      	bne.n	800b32e <turn45inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b314:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b318:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b31c:	eeb0 1a47 	vmov.f32	s2, s14
 800b320:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800b5f4 <turn45inR+0x3ac>
 800b324:	eeb0 0a67 	vmov.f32	s0, s15
 800b328:	f7f8 fdce 	bl	8003ec8 <mollifier_slalom_table>
 800b32c:	e015      	b.n	800b35a <turn45inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b32e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b332:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b336:	eef1 7a67 	vneg.f32	s15, s15
 800b33a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b33e:	eef0 2a66 	vmov.f32	s5, s13
 800b342:	eeb0 2a67 	vmov.f32	s4, s15
 800b346:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800b5f0 <turn45inR+0x3a8>
 800b34a:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800b5f0 <turn45inR+0x3a8>
 800b34e:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800b5f4 <turn45inR+0x3ac>
 800b352:	eeb0 0a47 	vmov.f32	s0, s14
 800b356:	f7f8 fc67 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b35a:	2300      	movs	r3, #0
 800b35c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b35e:	2300      	movs	r3, #0
 800b360:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b364:	4618      	mov	r0, r3
 800b366:	f7f5 f917 	bl	8000598 <__aeabi_f2d>
 800b36a:	a39b      	add	r3, pc, #620	; (adr r3, 800b5d8 <turn45inR+0x390>)
 800b36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b370:	f7f4 ffb4 	bl	80002dc <__adddf3>
 800b374:	4602      	mov	r2, r0
 800b376:	460b      	mov	r3, r1
 800b378:	4610      	mov	r0, r2
 800b37a:	4619      	mov	r1, r3
 800b37c:	f7f5 fc3c 	bl	8000bf8 <__aeabi_d2f>
 800b380:	4603      	mov	r3, r0
 800b382:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b386:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b38a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b38e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b392:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b396:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b39a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b39e:	eddf 5a91 	vldr	s11, [pc, #580]	; 800b5e4 <turn45inR+0x39c>
 800b3a2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b3a6:	68f8      	ldr	r0, [r7, #12]
 800b3a8:	eeb0 2a47 	vmov.f32	s4, s14
 800b3ac:	eef0 1a46 	vmov.f32	s3, s12
 800b3b0:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800b5f0 <turn45inR+0x3a8>
 800b3b4:	eef0 0a66 	vmov.f32	s1, s13
 800b3b8:	ee00 3a10 	vmov	s0, r3
 800b3bc:	f7f7 fe0e 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800b3c0:	4b87      	ldr	r3, [pc, #540]	; (800b5e0 <turn45inR+0x398>)
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b3c6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	f040 809d 	bne.w	800b50a <turn45inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b3d8:	2302      	movs	r3, #2
 800b3da:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b3e0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b3e4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b3e8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b3ec:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b3f0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b3f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b3f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b3fc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b400:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b404:	eddf 4a77 	vldr	s9, [pc, #476]	; 800b5e4 <turn45inR+0x39c>
 800b408:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b40c:	68f8      	ldr	r0, [r7, #12]
 800b40e:	eeb0 2a47 	vmov.f32	s4, s14
 800b412:	eef0 1a45 	vmov.f32	s3, s10
 800b416:	eeb0 1a65 	vmov.f32	s2, s11
 800b41a:	eef0 0a46 	vmov.f32	s1, s12
 800b41e:	eeb0 0a66 	vmov.f32	s0, s13
 800b422:	f7f7 fddb 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b426:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d10c      	bne.n	800b448 <turn45inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b42e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b432:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b436:	eeb0 1a47 	vmov.f32	s2, s14
 800b43a:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800b5f4 <turn45inR+0x3ac>
 800b43e:	eeb0 0a67 	vmov.f32	s0, s15
 800b442:	f7f8 fd41 	bl	8003ec8 <mollifier_slalom_table>
 800b446:	e015      	b.n	800b474 <turn45inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b448:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b44c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b450:	eef1 7a67 	vneg.f32	s15, s15
 800b454:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b458:	eef0 2a66 	vmov.f32	s5, s13
 800b45c:	eeb0 2a67 	vmov.f32	s4, s15
 800b460:	eddf 1a63 	vldr	s3, [pc, #396]	; 800b5f0 <turn45inR+0x3a8>
 800b464:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800b5f0 <turn45inR+0x3a8>
 800b468:	eddf 0a62 	vldr	s1, [pc, #392]	; 800b5f4 <turn45inR+0x3ac>
 800b46c:	eeb0 0a47 	vmov.f32	s0, s14
 800b470:	f7f8 fbda 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800b474:	2303      	movs	r3, #3
 800b476:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b478:	2300      	movs	r3, #0
 800b47a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b47c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b480:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b484:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b488:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b48c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b490:	edd7 7a01 	vldr	s15, [r7, #4]
 800b494:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b49c:	eef0 7ae7 	vabs.f32	s15, s15
 800b4a0:	ee17 0a90 	vmov	r0, s15
 800b4a4:	f7f5 f878 	bl	8000598 <__aeabi_f2d>
 800b4a8:	f04f 0200 	mov.w	r2, #0
 800b4ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b4b0:	f7f5 f9f4 	bl	800089c <__aeabi_ddiv>
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	460b      	mov	r3, r1
 800b4b8:	4614      	mov	r4, r2
 800b4ba:	461d      	mov	r5, r3
 800b4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7f5 f86a 	bl	8000598 <__aeabi_f2d>
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	460b      	mov	r3, r1
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	4629      	mov	r1, r5
 800b4cc:	f7f5 f9e6 	bl	800089c <__aeabi_ddiv>
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	4610      	mov	r0, r2
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	f04f 0200 	mov.w	r2, #0
 800b4dc:	4b43      	ldr	r3, [pc, #268]	; (800b5ec <turn45inR+0x3a4>)
 800b4de:	f7f4 fefd 	bl	80002dc <__adddf3>
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b4e6:	4610      	mov	r0, r2
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	f7f5 fb85 	bl	8000bf8 <__aeabi_d2f>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	68f8      	ldr	r0, [r7, #12]
 800b4f2:	ee02 3a10 	vmov	s4, r3
 800b4f6:	edd7 1a01 	vldr	s3, [r7, #4]
 800b4fa:	ed97 1a01 	vldr	s2, [r7, #4]
 800b4fe:	eef0 0a68 	vmov.f32	s1, s17
 800b502:	eeb0 0a48 	vmov.f32	s0, s16
 800b506:	f7f7 fd69 	bl	8002fdc <straight_table2>

	}
	if (test_mode >= 2) {
 800b50a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b50e:	2b01      	cmp	r3, #1
 800b510:	f240 80d0 	bls.w	800b6b4 <turn45inR+0x46c>

		highspeed_mode = 1;
 800b514:	4b32      	ldr	r3, [pc, #200]	; (800b5e0 <turn45inR+0x398>)
 800b516:	2201      	movs	r2, #1
 800b518:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b51a:	2301      	movs	r3, #1
 800b51c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b51e:	2300      	movs	r3, #0
 800b520:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b522:	2300      	movs	r3, #0
 800b524:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b526:	2300      	movs	r3, #0
 800b528:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b52a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b52e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b532:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b536:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b53a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b53e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b542:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b546:	eddf 5a27 	vldr	s11, [pc, #156]	; 800b5e4 <turn45inR+0x39c>
 800b54a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b54e:	68f8      	ldr	r0, [r7, #12]
 800b550:	eeb0 2a47 	vmov.f32	s4, s14
 800b554:	eef0 1a46 	vmov.f32	s3, s12
 800b558:	eeb0 1a66 	vmov.f32	s2, s13
 800b55c:	eddf 0a24 	vldr	s1, [pc, #144]	; 800b5f0 <turn45inR+0x3a8>
 800b560:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800b5e8 <turn45inR+0x3a0>
 800b564:	f7f7 fd3a 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800b568:	2300      	movs	r3, #0
 800b56a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b56c:	2302      	movs	r3, #2
 800b56e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b570:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b574:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b578:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b57c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b580:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b584:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b588:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b58c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b590:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b594:	eddf 4a13 	vldr	s9, [pc, #76]	; 800b5e4 <turn45inR+0x39c>
 800b598:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b59c:	68f8      	ldr	r0, [r7, #12]
 800b59e:	eeb0 2a47 	vmov.f32	s4, s14
 800b5a2:	eef0 1a45 	vmov.f32	s3, s10
 800b5a6:	eeb0 1a65 	vmov.f32	s2, s11
 800b5aa:	eef0 0a46 	vmov.f32	s1, s12
 800b5ae:	eeb0 0a66 	vmov.f32	s0, s13
 800b5b2:	f7f7 fd13 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b5b6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d11c      	bne.n	800b5f8 <turn45inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b5be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b5c2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b5c6:	eeb0 1a47 	vmov.f32	s2, s14
 800b5ca:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800b5f4 <turn45inR+0x3ac>
 800b5ce:	eeb0 0a67 	vmov.f32	s0, s15
 800b5d2:	f7f8 fc79 	bl	8003ec8 <mollifier_slalom_table>
 800b5d6:	e025      	b.n	800b624 <turn45inR+0x3dc>
 800b5d8:	c022ec18 	.word	0xc022ec18
 800b5dc:	405fd1de 	.word	0x405fd1de
 800b5e0:	20000808 	.word	0x20000808
 800b5e4:	42340000 	.word	0x42340000
 800b5e8:	42cd0000 	.word	0x42cd0000
 800b5ec:	408f4000 	.word	0x408f4000
 800b5f0:	00000000 	.word	0x00000000
 800b5f4:	c2340000 	.word	0xc2340000
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b5f8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b5fc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b600:	eef1 7a67 	vneg.f32	s15, s15
 800b604:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b608:	eef0 2a66 	vmov.f32	s5, s13
 800b60c:	eeb0 2a67 	vmov.f32	s4, s15
 800b610:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800b5f0 <turn45inR+0x3a8>
 800b614:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800b5f0 <turn45inR+0x3a8>
 800b618:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800b5f4 <turn45inR+0x3ac>
 800b61c:	eeb0 0a47 	vmov.f32	s0, s14
 800b620:	f7f8 fb02 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b624:	2300      	movs	r3, #0
 800b626:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b628:	2300      	movs	r3, #0
 800b62a:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b62c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b630:	3b02      	subs	r3, #2
 800b632:	4618      	mov	r0, r3
 800b634:	f7f4 ff9e 	bl	8000574 <__aeabi_i2d>
 800b638:	a325      	add	r3, pc, #148	; (adr r3, 800b6d0 <turn45inR+0x488>)
 800b63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63e:	f7f5 f803 	bl	8000648 <__aeabi_dmul>
 800b642:	4602      	mov	r2, r0
 800b644:	460b      	mov	r3, r1
 800b646:	4614      	mov	r4, r2
 800b648:	461d      	mov	r5, r3
 800b64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b64c:	4618      	mov	r0, r3
 800b64e:	f7f4 ffa3 	bl	8000598 <__aeabi_f2d>
 800b652:	4602      	mov	r2, r0
 800b654:	460b      	mov	r3, r1
 800b656:	4620      	mov	r0, r4
 800b658:	4629      	mov	r1, r5
 800b65a:	f7f4 fe3f 	bl	80002dc <__adddf3>
 800b65e:	4602      	mov	r2, r0
 800b660:	460b      	mov	r3, r1
 800b662:	4610      	mov	r0, r2
 800b664:	4619      	mov	r1, r3
 800b666:	f7f5 fac7 	bl	8000bf8 <__aeabi_d2f>
 800b66a:	4603      	mov	r3, r0
 800b66c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b670:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b674:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b678:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b67c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b680:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b684:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b688:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b68c:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800b6c8 <turn45inR+0x480>
 800b690:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	eeb0 2a47 	vmov.f32	s4, s14
 800b69a:	eef0 1a65 	vmov.f32	s3, s11
 800b69e:	eeb0 1a46 	vmov.f32	s2, s12
 800b6a2:	eef0 0a66 	vmov.f32	s1, s13
 800b6a6:	ee00 3a10 	vmov	s0, r3
 800b6aa:	f7f7 fc97 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800b6ae:	4b07      	ldr	r3, [pc, #28]	; (800b6cc <turn45inR+0x484>)
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	701a      	strb	r2, [r3, #0]
	}

}
 800b6b4:	bf00      	nop
 800b6b6:	3710      	adds	r7, #16
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	ecbd 8b02 	vpop	{d8}
 800b6be:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b6c2:	b004      	add	sp, #16
 800b6c4:	4770      	bx	lr
 800b6c6:	bf00      	nop
 800b6c8:	42340000 	.word	0x42340000
 800b6cc:	20000808 	.word	0x20000808
 800b6d0:	c022ec18 	.word	0xc022ec18
 800b6d4:	404fd1de 	.word	0x404fd1de

0800b6d8 <turn45inL>:

void turn45inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b6d8:	b084      	sub	sp, #16
 800b6da:	b5b0      	push	{r4, r5, r7, lr}
 800b6dc:	ed2d 8b02 	vpush	{d8}
 800b6e0:	b084      	sub	sp, #16
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b6e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b6ec:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b6f0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	f040 80ac 	bne.w	800b852 <turn45inL+0x17a>
		highspeed_mode = 1;
 800b6fa:	4bdb      	ldr	r3, [pc, #876]	; (800ba68 <turn45inL+0x390>)
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b700:	2301      	movs	r3, #1
 800b702:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b704:	2300      	movs	r3, #0
 800b706:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b708:	2300      	movs	r3, #0
 800b70a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b70c:	2300      	movs	r3, #0
 800b70e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b710:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b714:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b718:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b71c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b720:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b724:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b728:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b72c:	eddf 5ad2 	vldr	s11, [pc, #840]	; 800ba78 <turn45inL+0x3a0>
 800b730:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b734:	68f8      	ldr	r0, [r7, #12]
 800b736:	eeb0 2a47 	vmov.f32	s4, s14
 800b73a:	eef0 1a46 	vmov.f32	s3, s12
 800b73e:	eeb0 1a66 	vmov.f32	s2, s13
 800b742:	eddf 0acc 	vldr	s1, [pc, #816]	; 800ba74 <turn45inL+0x39c>
 800b746:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 800ba6c <turn45inL+0x394>
 800b74a:	f7f7 fc47 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800b74e:	2300      	movs	r3, #0
 800b750:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b752:	2302      	movs	r3, #2
 800b754:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b756:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b75a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b75e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b762:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b766:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b76a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b76e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b772:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b776:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b77a:	eddf 4abf 	vldr	s9, [pc, #764]	; 800ba78 <turn45inL+0x3a0>
 800b77e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b782:	68f8      	ldr	r0, [r7, #12]
 800b784:	eeb0 2a47 	vmov.f32	s4, s14
 800b788:	eef0 1a45 	vmov.f32	s3, s10
 800b78c:	eeb0 1a65 	vmov.f32	s2, s11
 800b790:	eef0 0a46 	vmov.f32	s1, s12
 800b794:	eeb0 0a66 	vmov.f32	s0, s13
 800b798:	f7f7 fc20 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b79c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d10c      	bne.n	800b7be <turn45inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b7a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b7a8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b7ac:	eeb0 1a47 	vmov.f32	s2, s14
 800b7b0:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800ba78 <turn45inL+0x3a0>
 800b7b4:	eeb0 0a67 	vmov.f32	s0, s15
 800b7b8:	f7f8 fb86 	bl	8003ec8 <mollifier_slalom_table>
 800b7bc:	e013      	b.n	800b7e6 <turn45inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b7be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b7c2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b7c6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b7ca:	eef0 2a66 	vmov.f32	s5, s13
 800b7ce:	eeb0 2a47 	vmov.f32	s4, s14
 800b7d2:	eddf 1aa8 	vldr	s3, [pc, #672]	; 800ba74 <turn45inL+0x39c>
 800b7d6:	ed9f 1aa7 	vldr	s2, [pc, #668]	; 800ba74 <turn45inL+0x39c>
 800b7da:	eddf 0aa7 	vldr	s1, [pc, #668]	; 800ba78 <turn45inL+0x3a0>
 800b7de:	eeb0 0a67 	vmov.f32	s0, s15
 800b7e2:	f7f8 fa21 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f7f4 fed1 	bl	8000598 <__aeabi_f2d>
 800b7f6:	a39a      	add	r3, pc, #616	; (adr r3, 800ba60 <turn45inL+0x388>)
 800b7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fc:	f7f4 fd6e 	bl	80002dc <__adddf3>
 800b800:	4602      	mov	r2, r0
 800b802:	460b      	mov	r3, r1
 800b804:	4610      	mov	r0, r2
 800b806:	4619      	mov	r1, r3
 800b808:	f7f5 f9f6 	bl	8000bf8 <__aeabi_d2f>
 800b80c:	4603      	mov	r3, r0
 800b80e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b812:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b816:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b81a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b81e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b822:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b826:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b82a:	eddf 5a93 	vldr	s11, [pc, #588]	; 800ba78 <turn45inL+0x3a0>
 800b82e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b832:	68f8      	ldr	r0, [r7, #12]
 800b834:	eeb0 2a47 	vmov.f32	s4, s14
 800b838:	eef0 1a46 	vmov.f32	s3, s12
 800b83c:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 800ba74 <turn45inL+0x39c>
 800b840:	eef0 0a66 	vmov.f32	s1, s13
 800b844:	ee00 3a10 	vmov	s0, r3
 800b848:	f7f7 fbc8 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800b84c:	4b86      	ldr	r3, [pc, #536]	; (800ba68 <turn45inL+0x390>)
 800b84e:	2200      	movs	r2, #0
 800b850:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b852:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b856:	2b00      	cmp	r3, #0
 800b858:	f040 809b 	bne.w	800b992 <turn45inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b85c:	2300      	movs	r3, #0
 800b85e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b860:	2300      	movs	r3, #0
 800b862:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b864:	2302      	movs	r3, #2
 800b866:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b868:	2300      	movs	r3, #0
 800b86a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b86c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b870:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b874:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b878:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b87c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b880:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b884:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b888:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b88c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b890:	eddf 4a79 	vldr	s9, [pc, #484]	; 800ba78 <turn45inL+0x3a0>
 800b894:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b898:	68f8      	ldr	r0, [r7, #12]
 800b89a:	eeb0 2a47 	vmov.f32	s4, s14
 800b89e:	eef0 1a45 	vmov.f32	s3, s10
 800b8a2:	eeb0 1a65 	vmov.f32	s2, s11
 800b8a6:	eef0 0a46 	vmov.f32	s1, s12
 800b8aa:	eeb0 0a66 	vmov.f32	s0, s13
 800b8ae:	f7f7 fb95 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b8b2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b8b6:	2b01      	cmp	r3, #1
 800b8b8:	d10c      	bne.n	800b8d4 <turn45inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b8ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b8be:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b8c2:	eeb0 1a47 	vmov.f32	s2, s14
 800b8c6:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800ba78 <turn45inL+0x3a0>
 800b8ca:	eeb0 0a67 	vmov.f32	s0, s15
 800b8ce:	f7f8 fafb 	bl	8003ec8 <mollifier_slalom_table>
 800b8d2:	e013      	b.n	800b8fc <turn45inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b8d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b8d8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b8dc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b8e0:	eef0 2a66 	vmov.f32	s5, s13
 800b8e4:	eeb0 2a47 	vmov.f32	s4, s14
 800b8e8:	eddf 1a62 	vldr	s3, [pc, #392]	; 800ba74 <turn45inL+0x39c>
 800b8ec:	ed9f 1a61 	vldr	s2, [pc, #388]	; 800ba74 <turn45inL+0x39c>
 800b8f0:	eddf 0a61 	vldr	s1, [pc, #388]	; 800ba78 <turn45inL+0x3a0>
 800b8f4:	eeb0 0a67 	vmov.f32	s0, s15
 800b8f8:	f7f8 f996 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800b8fc:	2303      	movs	r3, #3
 800b8fe:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b900:	2300      	movs	r3, #0
 800b902:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b904:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b908:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b90c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b910:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b914:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b918:	edd7 7a01 	vldr	s15, [r7, #4]
 800b91c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b920:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b924:	eef0 7ae7 	vabs.f32	s15, s15
 800b928:	ee17 0a90 	vmov	r0, s15
 800b92c:	f7f4 fe34 	bl	8000598 <__aeabi_f2d>
 800b930:	f04f 0200 	mov.w	r2, #0
 800b934:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b938:	f7f4 ffb0 	bl	800089c <__aeabi_ddiv>
 800b93c:	4602      	mov	r2, r0
 800b93e:	460b      	mov	r3, r1
 800b940:	4614      	mov	r4, r2
 800b942:	461d      	mov	r5, r3
 800b944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b946:	4618      	mov	r0, r3
 800b948:	f7f4 fe26 	bl	8000598 <__aeabi_f2d>
 800b94c:	4602      	mov	r2, r0
 800b94e:	460b      	mov	r3, r1
 800b950:	4620      	mov	r0, r4
 800b952:	4629      	mov	r1, r5
 800b954:	f7f4 ffa2 	bl	800089c <__aeabi_ddiv>
 800b958:	4602      	mov	r2, r0
 800b95a:	460b      	mov	r3, r1
 800b95c:	4610      	mov	r0, r2
 800b95e:	4619      	mov	r1, r3
 800b960:	f04f 0200 	mov.w	r2, #0
 800b964:	4b42      	ldr	r3, [pc, #264]	; (800ba70 <turn45inL+0x398>)
 800b966:	f7f4 fcb9 	bl	80002dc <__adddf3>
 800b96a:	4602      	mov	r2, r0
 800b96c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b96e:	4610      	mov	r0, r2
 800b970:	4619      	mov	r1, r3
 800b972:	f7f5 f941 	bl	8000bf8 <__aeabi_d2f>
 800b976:	4603      	mov	r3, r0
 800b978:	68f8      	ldr	r0, [r7, #12]
 800b97a:	ee02 3a10 	vmov	s4, r3
 800b97e:	edd7 1a01 	vldr	s3, [r7, #4]
 800b982:	ed97 1a01 	vldr	s2, [r7, #4]
 800b986:	eef0 0a68 	vmov.f32	s1, s17
 800b98a:	eeb0 0a48 	vmov.f32	s0, s16
 800b98e:	f7f7 fb25 	bl	8002fdc <straight_table2>

	}
	if (test_mode >= 2) {
 800b992:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b996:	2b01      	cmp	r3, #1
 800b998:	f240 80cc 	bls.w	800bb34 <turn45inL+0x45c>

		highspeed_mode = 1;
 800b99c:	4b32      	ldr	r3, [pc, #200]	; (800ba68 <turn45inL+0x390>)
 800b99e:	2201      	movs	r2, #1
 800b9a0:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b9b2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b9b6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b9ba:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b9be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b9c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9c6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b9ca:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b9ce:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800ba78 <turn45inL+0x3a0>
 800b9d2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b9d6:	68f8      	ldr	r0, [r7, #12]
 800b9d8:	eeb0 2a47 	vmov.f32	s4, s14
 800b9dc:	eef0 1a46 	vmov.f32	s3, s12
 800b9e0:	eeb0 1a66 	vmov.f32	s2, s13
 800b9e4:	eddf 0a23 	vldr	s1, [pc, #140]	; 800ba74 <turn45inL+0x39c>
 800b9e8:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800ba6c <turn45inL+0x394>
 800b9ec:	f7f7 faf6 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b9f4:	2302      	movs	r3, #2
 800b9f6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b9f8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b9fc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ba00:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ba04:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ba08:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ba0c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba10:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba14:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ba18:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ba1c:	eddf 4a16 	vldr	s9, [pc, #88]	; 800ba78 <turn45inL+0x3a0>
 800ba20:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ba24:	68f8      	ldr	r0, [r7, #12]
 800ba26:	eeb0 2a47 	vmov.f32	s4, s14
 800ba2a:	eef0 1a45 	vmov.f32	s3, s10
 800ba2e:	eeb0 1a65 	vmov.f32	s2, s11
 800ba32:	eef0 0a46 	vmov.f32	s1, s12
 800ba36:	eeb0 0a66 	vmov.f32	s0, s13
 800ba3a:	f7f7 facf 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800ba3e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d11a      	bne.n	800ba7c <turn45inL+0x3a4>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800ba46:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba4a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ba4e:	eeb0 1a47 	vmov.f32	s2, s14
 800ba52:	eddf 0a09 	vldr	s1, [pc, #36]	; 800ba78 <turn45inL+0x3a0>
 800ba56:	eeb0 0a67 	vmov.f32	s0, s15
 800ba5a:	f7f8 fa35 	bl	8003ec8 <mollifier_slalom_table>
 800ba5e:	e021      	b.n	800baa4 <turn45inL+0x3cc>
 800ba60:	c022ec18 	.word	0xc022ec18
 800ba64:	405fd1de 	.word	0x405fd1de
 800ba68:	20000808 	.word	0x20000808
 800ba6c:	42cd0000 	.word	0x42cd0000
 800ba70:	408f4000 	.word	0x408f4000
 800ba74:	00000000 	.word	0x00000000
 800ba78:	42340000 	.word	0x42340000
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ba7c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba80:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ba84:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ba88:	eef0 2a66 	vmov.f32	s5, s13
 800ba8c:	eeb0 2a47 	vmov.f32	s4, s14
 800ba90:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800ba74 <turn45inL+0x39c>
 800ba94:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800ba74 <turn45inL+0x39c>
 800ba98:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800ba78 <turn45inL+0x3a0>
 800ba9c:	eeb0 0a67 	vmov.f32	s0, s15
 800baa0:	f7f8 f8c2 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800baa4:	2300      	movs	r3, #0
 800baa6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800baa8:	2300      	movs	r3, #0
 800baaa:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800baac:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bab0:	3b02      	subs	r3, #2
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7f4 fd5e 	bl	8000574 <__aeabi_i2d>
 800bab8:	a325      	add	r3, pc, #148	; (adr r3, 800bb50 <turn45inL+0x478>)
 800baba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800babe:	f7f4 fdc3 	bl	8000648 <__aeabi_dmul>
 800bac2:	4602      	mov	r2, r0
 800bac4:	460b      	mov	r3, r1
 800bac6:	4614      	mov	r4, r2
 800bac8:	461d      	mov	r5, r3
 800baca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bacc:	4618      	mov	r0, r3
 800bace:	f7f4 fd63 	bl	8000598 <__aeabi_f2d>
 800bad2:	4602      	mov	r2, r0
 800bad4:	460b      	mov	r3, r1
 800bad6:	4620      	mov	r0, r4
 800bad8:	4629      	mov	r1, r5
 800bada:	f7f4 fbff 	bl	80002dc <__adddf3>
 800bade:	4602      	mov	r2, r0
 800bae0:	460b      	mov	r3, r1
 800bae2:	4610      	mov	r0, r2
 800bae4:	4619      	mov	r1, r3
 800bae6:	f7f5 f887 	bl	8000bf8 <__aeabi_d2f>
 800baea:	4603      	mov	r3, r0
 800baec:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800baf0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800baf4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800baf8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bafc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb00:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb04:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800bb08:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bb0c:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800bb48 <turn45inL+0x470>
 800bb10:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800bb14:	68f8      	ldr	r0, [r7, #12]
 800bb16:	eeb0 2a47 	vmov.f32	s4, s14
 800bb1a:	eef0 1a65 	vmov.f32	s3, s11
 800bb1e:	eeb0 1a46 	vmov.f32	s2, s12
 800bb22:	eef0 0a66 	vmov.f32	s1, s13
 800bb26:	ee00 3a10 	vmov	s0, r3
 800bb2a:	f7f7 fa57 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800bb2e:	4b07      	ldr	r3, [pc, #28]	; (800bb4c <turn45inL+0x474>)
 800bb30:	2200      	movs	r2, #0
 800bb32:	701a      	strb	r2, [r3, #0]
	}

}
 800bb34:	bf00      	nop
 800bb36:	3710      	adds	r7, #16
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	ecbd 8b02 	vpop	{d8}
 800bb3e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800bb42:	b004      	add	sp, #16
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	42340000 	.word	0x42340000
 800bb4c:	20000808 	.word	0x20000808
 800bb50:	c022ec18 	.word	0xc022ec18
 800bb54:	404fd1de 	.word	0x404fd1de

0800bb58 <turn135inR>:

void turn135inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800bb58:	b084      	sub	sp, #16
 800bb5a:	b5b0      	push	{r4, r5, r7, lr}
 800bb5c:	ed2d 8b02 	vpush	{d8}
 800bb60:	b084      	sub	sp, #16
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800bb68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bb6c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800bb70:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	f040 80ae 	bne.w	800bcd6 <turn135inR+0x17e>
		highspeed_mode = 1;
 800bb7a:	4bdd      	ldr	r3, [pc, #884]	; (800bef0 <turn135inR+0x398>)
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bb80:	2301      	movs	r3, #1
 800bb82:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bb84:	2300      	movs	r3, #0
 800bb86:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bb90:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bb94:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bb98:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bb9c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bba0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bba4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bba8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bbac:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800bef4 <turn135inR+0x39c>
 800bbb0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bbb4:	68f8      	ldr	r0, [r7, #12]
 800bbb6:	eeb0 2a47 	vmov.f32	s4, s14
 800bbba:	eef0 1a46 	vmov.f32	s3, s12
 800bbbe:	eeb0 1a66 	vmov.f32	s2, s13
 800bbc2:	eddf 0acf 	vldr	s1, [pc, #828]	; 800bf00 <turn135inR+0x3a8>
 800bbc6:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800bef8 <turn135inR+0x3a0>
 800bbca:	f7f7 fa07 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800bbd2:	2302      	movs	r3, #2
 800bbd4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bbd6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bbda:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bbde:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bbe2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bbe6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bbea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bbee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bbf2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bbf6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bbfa:	eddf 4abe 	vldr	s9, [pc, #760]	; 800bef4 <turn135inR+0x39c>
 800bbfe:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bc02:	68f8      	ldr	r0, [r7, #12]
 800bc04:	eeb0 2a47 	vmov.f32	s4, s14
 800bc08:	eef0 1a45 	vmov.f32	s3, s10
 800bc0c:	eeb0 1a65 	vmov.f32	s2, s11
 800bc10:	eef0 0a46 	vmov.f32	s1, s12
 800bc14:	eeb0 0a66 	vmov.f32	s0, s13
 800bc18:	f7f7 f9e0 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800bc1c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d10c      	bne.n	800bc3e <turn135inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bc24:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc28:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bc2c:	eeb0 1a47 	vmov.f32	s2, s14
 800bc30:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800bf04 <turn135inR+0x3ac>
 800bc34:	eeb0 0a67 	vmov.f32	s0, s15
 800bc38:	f7f8 f946 	bl	8003ec8 <mollifier_slalom_table>
 800bc3c:	e015      	b.n	800bc6a <turn135inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bc3e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc42:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bc46:	eef1 7a67 	vneg.f32	s15, s15
 800bc4a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bc4e:	eef0 2a66 	vmov.f32	s5, s13
 800bc52:	eeb0 2a67 	vmov.f32	s4, s15
 800bc56:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800bf00 <turn135inR+0x3a8>
 800bc5a:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800bf00 <turn135inR+0x3a8>
 800bc5e:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800bf04 <turn135inR+0x3ac>
 800bc62:	eeb0 0a47 	vmov.f32	s0, s14
 800bc66:	f7f7 ffdf 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc74:	4618      	mov	r0, r3
 800bc76:	f7f4 fc8f 	bl	8000598 <__aeabi_f2d>
 800bc7a:	a39b      	add	r3, pc, #620	; (adr r3, 800bee8 <turn135inR+0x390>)
 800bc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc80:	f7f4 fb2c 	bl	80002dc <__adddf3>
 800bc84:	4602      	mov	r2, r0
 800bc86:	460b      	mov	r3, r1
 800bc88:	4610      	mov	r0, r2
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	f7f4 ffb4 	bl	8000bf8 <__aeabi_d2f>
 800bc90:	4603      	mov	r3, r0
 800bc92:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bc96:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bc9a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc9e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bca2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bca6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bcaa:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bcae:	eddf 5a91 	vldr	s11, [pc, #580]	; 800bef4 <turn135inR+0x39c>
 800bcb2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bcb6:	68f8      	ldr	r0, [r7, #12]
 800bcb8:	eeb0 2a47 	vmov.f32	s4, s14
 800bcbc:	eef0 1a46 	vmov.f32	s3, s12
 800bcc0:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800bf00 <turn135inR+0x3a8>
 800bcc4:	eef0 0a66 	vmov.f32	s1, s13
 800bcc8:	ee00 3a10 	vmov	s0, r3
 800bccc:	f7f7 f986 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800bcd0:	4b87      	ldr	r3, [pc, #540]	; (800bef0 <turn135inR+0x398>)
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800bcd6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	f040 809d 	bne.w	800be1a <turn135inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800bce0:	2300      	movs	r3, #0
 800bce2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bce4:	2300      	movs	r3, #0
 800bce6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800bce8:	2302      	movs	r3, #2
 800bcea:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bcec:	2300      	movs	r3, #0
 800bcee:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bcf0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bcf4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bcf8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bcfc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bd00:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd08:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd0c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bd10:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bd14:	eddf 4a77 	vldr	s9, [pc, #476]	; 800bef4 <turn135inR+0x39c>
 800bd18:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bd1c:	68f8      	ldr	r0, [r7, #12]
 800bd1e:	eeb0 2a47 	vmov.f32	s4, s14
 800bd22:	eef0 1a45 	vmov.f32	s3, s10
 800bd26:	eeb0 1a65 	vmov.f32	s2, s11
 800bd2a:	eef0 0a46 	vmov.f32	s1, s12
 800bd2e:	eeb0 0a66 	vmov.f32	s0, s13
 800bd32:	f7f7 f953 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800bd36:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bd3a:	2b01      	cmp	r3, #1
 800bd3c:	d10c      	bne.n	800bd58 <turn135inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bd3e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd42:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bd46:	eeb0 1a47 	vmov.f32	s2, s14
 800bd4a:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800bf04 <turn135inR+0x3ac>
 800bd4e:	eeb0 0a67 	vmov.f32	s0, s15
 800bd52:	f7f8 f8b9 	bl	8003ec8 <mollifier_slalom_table>
 800bd56:	e015      	b.n	800bd84 <turn135inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bd58:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd5c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bd60:	eef1 7a67 	vneg.f32	s15, s15
 800bd64:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bd68:	eef0 2a66 	vmov.f32	s5, s13
 800bd6c:	eeb0 2a67 	vmov.f32	s4, s15
 800bd70:	eddf 1a63 	vldr	s3, [pc, #396]	; 800bf00 <turn135inR+0x3a8>
 800bd74:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800bf00 <turn135inR+0x3a8>
 800bd78:	eddf 0a62 	vldr	s1, [pc, #392]	; 800bf04 <turn135inR+0x3ac>
 800bd7c:	eeb0 0a47 	vmov.f32	s0, s14
 800bd80:	f7f7 ff52 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800bd84:	2303      	movs	r3, #3
 800bd86:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bd8c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800bd90:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800bd94:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd98:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bda0:	edd7 7a01 	vldr	s15, [r7, #4]
 800bda4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bda8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bdac:	eef0 7ae7 	vabs.f32	s15, s15
 800bdb0:	ee17 0a90 	vmov	r0, s15
 800bdb4:	f7f4 fbf0 	bl	8000598 <__aeabi_f2d>
 800bdb8:	f04f 0200 	mov.w	r2, #0
 800bdbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bdc0:	f7f4 fd6c 	bl	800089c <__aeabi_ddiv>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	460b      	mov	r3, r1
 800bdc8:	4614      	mov	r4, r2
 800bdca:	461d      	mov	r5, r3
 800bdcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7f4 fbe2 	bl	8000598 <__aeabi_f2d>
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	4620      	mov	r0, r4
 800bdda:	4629      	mov	r1, r5
 800bddc:	f7f4 fd5e 	bl	800089c <__aeabi_ddiv>
 800bde0:	4602      	mov	r2, r0
 800bde2:	460b      	mov	r3, r1
 800bde4:	4610      	mov	r0, r2
 800bde6:	4619      	mov	r1, r3
 800bde8:	f04f 0200 	mov.w	r2, #0
 800bdec:	4b43      	ldr	r3, [pc, #268]	; (800befc <turn135inR+0x3a4>)
 800bdee:	f7f4 fa75 	bl	80002dc <__adddf3>
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bdf6:	4610      	mov	r0, r2
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	f7f4 fefd 	bl	8000bf8 <__aeabi_d2f>
 800bdfe:	4603      	mov	r3, r0
 800be00:	68f8      	ldr	r0, [r7, #12]
 800be02:	ee02 3a10 	vmov	s4, r3
 800be06:	edd7 1a01 	vldr	s3, [r7, #4]
 800be0a:	ed97 1a01 	vldr	s2, [r7, #4]
 800be0e:	eef0 0a68 	vmov.f32	s1, s17
 800be12:	eeb0 0a48 	vmov.f32	s0, s16
 800be16:	f7f7 f8e1 	bl	8002fdc <straight_table2>

	}
	if (test_mode >= 2) {
 800be1a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800be1e:	2b01      	cmp	r3, #1
 800be20:	f240 80d0 	bls.w	800bfc4 <turn135inR+0x46c>

		highspeed_mode = 1;
 800be24:	4b32      	ldr	r3, [pc, #200]	; (800bef0 <turn135inR+0x398>)
 800be26:	2201      	movs	r2, #1
 800be28:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800be2a:	2301      	movs	r3, #1
 800be2c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800be2e:	2300      	movs	r3, #0
 800be30:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800be32:	2300      	movs	r3, #0
 800be34:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800be36:	2300      	movs	r3, #0
 800be38:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800be3a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800be3e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800be42:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800be46:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be4e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800be52:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800be56:	eddf 5a27 	vldr	s11, [pc, #156]	; 800bef4 <turn135inR+0x39c>
 800be5a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800be5e:	68f8      	ldr	r0, [r7, #12]
 800be60:	eeb0 2a47 	vmov.f32	s4, s14
 800be64:	eef0 1a46 	vmov.f32	s3, s12
 800be68:	eeb0 1a66 	vmov.f32	s2, s13
 800be6c:	eddf 0a24 	vldr	s1, [pc, #144]	; 800bf00 <turn135inR+0x3a8>
 800be70:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800bef8 <turn135inR+0x3a0>
 800be74:	f7f7 f8b2 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800be78:	2300      	movs	r3, #0
 800be7a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800be7c:	2302      	movs	r3, #2
 800be7e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800be80:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800be84:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800be88:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800be8c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800be90:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800be94:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be98:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be9c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bea0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bea4:	eddf 4a13 	vldr	s9, [pc, #76]	; 800bef4 <turn135inR+0x39c>
 800bea8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800beac:	68f8      	ldr	r0, [r7, #12]
 800beae:	eeb0 2a47 	vmov.f32	s4, s14
 800beb2:	eef0 1a45 	vmov.f32	s3, s10
 800beb6:	eeb0 1a65 	vmov.f32	s2, s11
 800beba:	eef0 0a46 	vmov.f32	s1, s12
 800bebe:	eeb0 0a66 	vmov.f32	s0, s13
 800bec2:	f7f7 f88b 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800bec6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800beca:	2b01      	cmp	r3, #1
 800becc:	d11c      	bne.n	800bf08 <turn135inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bece:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bed2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bed6:	eeb0 1a47 	vmov.f32	s2, s14
 800beda:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800bf04 <turn135inR+0x3ac>
 800bede:	eeb0 0a67 	vmov.f32	s0, s15
 800bee2:	f7f7 fff1 	bl	8003ec8 <mollifier_slalom_table>
 800bee6:	e025      	b.n	800bf34 <turn135inR+0x3dc>
 800bee8:	c022ec18 	.word	0xc022ec18
 800beec:	405fd1de 	.word	0x405fd1de
 800bef0:	20000808 	.word	0x20000808
 800bef4:	42340000 	.word	0x42340000
 800bef8:	42cd0000 	.word	0x42cd0000
 800befc:	408f4000 	.word	0x408f4000
 800bf00:	00000000 	.word	0x00000000
 800bf04:	c3070000 	.word	0xc3070000
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bf08:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf0c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bf10:	eef1 7a67 	vneg.f32	s15, s15
 800bf14:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bf18:	eef0 2a66 	vmov.f32	s5, s13
 800bf1c:	eeb0 2a67 	vmov.f32	s4, s15
 800bf20:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800bf00 <turn135inR+0x3a8>
 800bf24:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800bf00 <turn135inR+0x3a8>
 800bf28:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800bf04 <turn135inR+0x3ac>
 800bf2c:	eeb0 0a47 	vmov.f32	s0, s14
 800bf30:	f7f7 fe7a 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bf34:	2300      	movs	r3, #0
 800bf36:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bf3c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bf40:	3b02      	subs	r3, #2
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7f4 fb16 	bl	8000574 <__aeabi_i2d>
 800bf48:	a325      	add	r3, pc, #148	; (adr r3, 800bfe0 <turn135inR+0x488>)
 800bf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4e:	f7f4 fb7b 	bl	8000648 <__aeabi_dmul>
 800bf52:	4602      	mov	r2, r0
 800bf54:	460b      	mov	r3, r1
 800bf56:	4614      	mov	r4, r2
 800bf58:	461d      	mov	r5, r3
 800bf5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f7f4 fb1b 	bl	8000598 <__aeabi_f2d>
 800bf62:	4602      	mov	r2, r0
 800bf64:	460b      	mov	r3, r1
 800bf66:	4620      	mov	r0, r4
 800bf68:	4629      	mov	r1, r5
 800bf6a:	f7f4 f9b7 	bl	80002dc <__adddf3>
 800bf6e:	4602      	mov	r2, r0
 800bf70:	460b      	mov	r3, r1
 800bf72:	4610      	mov	r0, r2
 800bf74:	4619      	mov	r1, r3
 800bf76:	f7f4 fe3f 	bl	8000bf8 <__aeabi_d2f>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bf80:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bf84:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bf88:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf90:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf94:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800bf98:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bf9c:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800bfd8 <turn135inR+0x480>
 800bfa0:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800bfa4:	68f8      	ldr	r0, [r7, #12]
 800bfa6:	eeb0 2a47 	vmov.f32	s4, s14
 800bfaa:	eef0 1a65 	vmov.f32	s3, s11
 800bfae:	eeb0 1a46 	vmov.f32	s2, s12
 800bfb2:	eef0 0a66 	vmov.f32	s1, s13
 800bfb6:	ee00 3a10 	vmov	s0, r3
 800bfba:	f7f7 f80f 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800bfbe:	4b07      	ldr	r3, [pc, #28]	; (800bfdc <turn135inR+0x484>)
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	701a      	strb	r2, [r3, #0]
	}

}
 800bfc4:	bf00      	nop
 800bfc6:	3710      	adds	r7, #16
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	ecbd 8b02 	vpop	{d8}
 800bfce:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800bfd2:	b004      	add	sp, #16
 800bfd4:	4770      	bx	lr
 800bfd6:	bf00      	nop
 800bfd8:	42340000 	.word	0x42340000
 800bfdc:	20000808 	.word	0x20000808
 800bfe0:	c022ec18 	.word	0xc022ec18
 800bfe4:	404fd1de 	.word	0x404fd1de

0800bfe8 <turn135inL>:

void turn135inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800bfe8:	b084      	sub	sp, #16
 800bfea:	b5b0      	push	{r4, r5, r7, lr}
 800bfec:	ed2d 8b02 	vpush	{d8}
 800bff0:	b084      	sub	sp, #16
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800bff8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bffc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c000:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c004:	2b01      	cmp	r3, #1
 800c006:	f040 80ac 	bne.w	800c162 <turn135inL+0x17a>
		highspeed_mode = 1;
 800c00a:	4bdb      	ldr	r3, [pc, #876]	; (800c378 <turn135inL+0x390>)
 800c00c:	2201      	movs	r2, #1
 800c00e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c010:	2301      	movs	r3, #1
 800c012:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c014:	2300      	movs	r3, #0
 800c016:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c018:	2300      	movs	r3, #0
 800c01a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c01c:	2300      	movs	r3, #0
 800c01e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c020:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c024:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c028:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c02c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c030:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c034:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c038:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c03c:	eddf 5acf 	vldr	s11, [pc, #828]	; 800c37c <turn135inL+0x394>
 800c040:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c044:	68f8      	ldr	r0, [r7, #12]
 800c046:	eeb0 2a47 	vmov.f32	s4, s14
 800c04a:	eef0 1a46 	vmov.f32	s3, s12
 800c04e:	eeb0 1a66 	vmov.f32	s2, s13
 800c052:	eddf 0acd 	vldr	s1, [pc, #820]	; 800c388 <turn135inL+0x3a0>
 800c056:	ed9f 0aca 	vldr	s0, [pc, #808]	; 800c380 <turn135inL+0x398>
 800c05a:	f7f6 ffbf 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800c05e:	2300      	movs	r3, #0
 800c060:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c062:	2302      	movs	r3, #2
 800c064:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c066:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c06a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c06e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c072:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c076:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c07a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c07e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c082:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c086:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c08a:	eddf 4abc 	vldr	s9, [pc, #752]	; 800c37c <turn135inL+0x394>
 800c08e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c092:	68f8      	ldr	r0, [r7, #12]
 800c094:	eeb0 2a47 	vmov.f32	s4, s14
 800c098:	eef0 1a45 	vmov.f32	s3, s10
 800c09c:	eeb0 1a65 	vmov.f32	s2, s11
 800c0a0:	eef0 0a46 	vmov.f32	s1, s12
 800c0a4:	eeb0 0a66 	vmov.f32	s0, s13
 800c0a8:	f7f6 ff98 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c0ac:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d10c      	bne.n	800c0ce <turn135inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c0b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c0b8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c0bc:	eeb0 1a47 	vmov.f32	s2, s14
 800c0c0:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800c38c <turn135inL+0x3a4>
 800c0c4:	eeb0 0a67 	vmov.f32	s0, s15
 800c0c8:	f7f7 fefe 	bl	8003ec8 <mollifier_slalom_table>
 800c0cc:	e013      	b.n	800c0f6 <turn135inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c0ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c0d2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c0d6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c0da:	eef0 2a66 	vmov.f32	s5, s13
 800c0de:	eeb0 2a47 	vmov.f32	s4, s14
 800c0e2:	eddf 1aa9 	vldr	s3, [pc, #676]	; 800c388 <turn135inL+0x3a0>
 800c0e6:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 800c388 <turn135inL+0x3a0>
 800c0ea:	eddf 0aa8 	vldr	s1, [pc, #672]	; 800c38c <turn135inL+0x3a4>
 800c0ee:	eeb0 0a67 	vmov.f32	s0, s15
 800c0f2:	f7f7 fd99 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c100:	4618      	mov	r0, r3
 800c102:	f7f4 fa49 	bl	8000598 <__aeabi_f2d>
 800c106:	a39a      	add	r3, pc, #616	; (adr r3, 800c370 <turn135inL+0x388>)
 800c108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10c:	f7f4 f8e6 	bl	80002dc <__adddf3>
 800c110:	4602      	mov	r2, r0
 800c112:	460b      	mov	r3, r1
 800c114:	4610      	mov	r0, r2
 800c116:	4619      	mov	r1, r3
 800c118:	f7f4 fd6e 	bl	8000bf8 <__aeabi_d2f>
 800c11c:	4603      	mov	r3, r0
 800c11e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c122:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c126:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c12a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c12e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c132:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c136:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c13a:	eddf 5a90 	vldr	s11, [pc, #576]	; 800c37c <turn135inL+0x394>
 800c13e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c142:	68f8      	ldr	r0, [r7, #12]
 800c144:	eeb0 2a47 	vmov.f32	s4, s14
 800c148:	eef0 1a46 	vmov.f32	s3, s12
 800c14c:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 800c388 <turn135inL+0x3a0>
 800c150:	eef0 0a66 	vmov.f32	s1, s13
 800c154:	ee00 3a10 	vmov	s0, r3
 800c158:	f7f6 ff40 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800c15c:	4b86      	ldr	r3, [pc, #536]	; (800c378 <turn135inL+0x390>)
 800c15e:	2200      	movs	r2, #0
 800c160:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800c162:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c166:	2b00      	cmp	r3, #0
 800c168:	f040 809b 	bne.w	800c2a2 <turn135inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800c16c:	2300      	movs	r3, #0
 800c16e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c170:	2300      	movs	r3, #0
 800c172:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800c174:	2302      	movs	r3, #2
 800c176:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c178:	2300      	movs	r3, #0
 800c17a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c17c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c180:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c184:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c188:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c18c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c190:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c194:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c198:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c19c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c1a0:	eddf 4a76 	vldr	s9, [pc, #472]	; 800c37c <turn135inL+0x394>
 800c1a4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c1a8:	68f8      	ldr	r0, [r7, #12]
 800c1aa:	eeb0 2a47 	vmov.f32	s4, s14
 800c1ae:	eef0 1a45 	vmov.f32	s3, s10
 800c1b2:	eeb0 1a65 	vmov.f32	s2, s11
 800c1b6:	eef0 0a46 	vmov.f32	s1, s12
 800c1ba:	eeb0 0a66 	vmov.f32	s0, s13
 800c1be:	f7f6 ff0d 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c1c2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d10c      	bne.n	800c1e4 <turn135inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c1ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c1ce:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c1d2:	eeb0 1a47 	vmov.f32	s2, s14
 800c1d6:	eddf 0a6d 	vldr	s1, [pc, #436]	; 800c38c <turn135inL+0x3a4>
 800c1da:	eeb0 0a67 	vmov.f32	s0, s15
 800c1de:	f7f7 fe73 	bl	8003ec8 <mollifier_slalom_table>
 800c1e2:	e013      	b.n	800c20c <turn135inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c1e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c1e8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c1ec:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c1f0:	eef0 2a66 	vmov.f32	s5, s13
 800c1f4:	eeb0 2a47 	vmov.f32	s4, s14
 800c1f8:	eddf 1a63 	vldr	s3, [pc, #396]	; 800c388 <turn135inL+0x3a0>
 800c1fc:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800c388 <turn135inL+0x3a0>
 800c200:	eddf 0a62 	vldr	s1, [pc, #392]	; 800c38c <turn135inL+0x3a4>
 800c204:	eeb0 0a67 	vmov.f32	s0, s15
 800c208:	f7f7 fd0e 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800c20c:	2303      	movs	r3, #3
 800c20e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c210:	2300      	movs	r3, #0
 800c212:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c214:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c218:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c21c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c220:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c224:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c228:	edd7 7a01 	vldr	s15, [r7, #4]
 800c22c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c230:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c234:	eef0 7ae7 	vabs.f32	s15, s15
 800c238:	ee17 0a90 	vmov	r0, s15
 800c23c:	f7f4 f9ac 	bl	8000598 <__aeabi_f2d>
 800c240:	f04f 0200 	mov.w	r2, #0
 800c244:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c248:	f7f4 fb28 	bl	800089c <__aeabi_ddiv>
 800c24c:	4602      	mov	r2, r0
 800c24e:	460b      	mov	r3, r1
 800c250:	4614      	mov	r4, r2
 800c252:	461d      	mov	r5, r3
 800c254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c256:	4618      	mov	r0, r3
 800c258:	f7f4 f99e 	bl	8000598 <__aeabi_f2d>
 800c25c:	4602      	mov	r2, r0
 800c25e:	460b      	mov	r3, r1
 800c260:	4620      	mov	r0, r4
 800c262:	4629      	mov	r1, r5
 800c264:	f7f4 fb1a 	bl	800089c <__aeabi_ddiv>
 800c268:	4602      	mov	r2, r0
 800c26a:	460b      	mov	r3, r1
 800c26c:	4610      	mov	r0, r2
 800c26e:	4619      	mov	r1, r3
 800c270:	f04f 0200 	mov.w	r2, #0
 800c274:	4b43      	ldr	r3, [pc, #268]	; (800c384 <turn135inL+0x39c>)
 800c276:	f7f4 f831 	bl	80002dc <__adddf3>
 800c27a:	4602      	mov	r2, r0
 800c27c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c27e:	4610      	mov	r0, r2
 800c280:	4619      	mov	r1, r3
 800c282:	f7f4 fcb9 	bl	8000bf8 <__aeabi_d2f>
 800c286:	4603      	mov	r3, r0
 800c288:	68f8      	ldr	r0, [r7, #12]
 800c28a:	ee02 3a10 	vmov	s4, r3
 800c28e:	edd7 1a01 	vldr	s3, [r7, #4]
 800c292:	ed97 1a01 	vldr	s2, [r7, #4]
 800c296:	eef0 0a68 	vmov.f32	s1, s17
 800c29a:	eeb0 0a48 	vmov.f32	s0, s16
 800c29e:	f7f6 fe9d 	bl	8002fdc <straight_table2>

	}
	if (test_mode >= 2) {
 800c2a2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	f240 80ce 	bls.w	800c448 <turn135inL+0x460>

		highspeed_mode = 1;
 800c2ac:	4b32      	ldr	r3, [pc, #200]	; (800c378 <turn135inL+0x390>)
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c2c2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c2c6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c2ca:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c2ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c2d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2d6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c2da:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c2de:	eddf 5a27 	vldr	s11, [pc, #156]	; 800c37c <turn135inL+0x394>
 800c2e2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c2e6:	68f8      	ldr	r0, [r7, #12]
 800c2e8:	eeb0 2a47 	vmov.f32	s4, s14
 800c2ec:	eef0 1a46 	vmov.f32	s3, s12
 800c2f0:	eeb0 1a66 	vmov.f32	s2, s13
 800c2f4:	eddf 0a24 	vldr	s1, [pc, #144]	; 800c388 <turn135inL+0x3a0>
 800c2f8:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800c380 <turn135inL+0x398>
 800c2fc:	f7f6 fe6e 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800c300:	2300      	movs	r3, #0
 800c302:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c304:	2302      	movs	r3, #2
 800c306:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c308:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c30c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c310:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c314:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c318:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c31c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c320:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c324:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c328:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c32c:	eddf 4a13 	vldr	s9, [pc, #76]	; 800c37c <turn135inL+0x394>
 800c330:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c334:	68f8      	ldr	r0, [r7, #12]
 800c336:	eeb0 2a47 	vmov.f32	s4, s14
 800c33a:	eef0 1a45 	vmov.f32	s3, s10
 800c33e:	eeb0 1a65 	vmov.f32	s2, s11
 800c342:	eef0 0a46 	vmov.f32	s1, s12
 800c346:	eeb0 0a66 	vmov.f32	s0, s13
 800c34a:	f7f6 fe47 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c34e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c352:	2b01      	cmp	r3, #1
 800c354:	d11c      	bne.n	800c390 <turn135inL+0x3a8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c356:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c35a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c35e:	eeb0 1a47 	vmov.f32	s2, s14
 800c362:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800c38c <turn135inL+0x3a4>
 800c366:	eeb0 0a67 	vmov.f32	s0, s15
 800c36a:	f7f7 fdad 	bl	8003ec8 <mollifier_slalom_table>
 800c36e:	e023      	b.n	800c3b8 <turn135inL+0x3d0>
 800c370:	c022ec18 	.word	0xc022ec18
 800c374:	405fd1de 	.word	0x405fd1de
 800c378:	20000808 	.word	0x20000808
 800c37c:	42340000 	.word	0x42340000
 800c380:	42cd0000 	.word	0x42cd0000
 800c384:	408f4000 	.word	0x408f4000
 800c388:	00000000 	.word	0x00000000
 800c38c:	43070000 	.word	0x43070000
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c390:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c394:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c398:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c39c:	eef0 2a66 	vmov.f32	s5, s13
 800c3a0:	eeb0 2a47 	vmov.f32	s4, s14
 800c3a4:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800c388 <turn135inL+0x3a0>
 800c3a8:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800c388 <turn135inL+0x3a0>
 800c3ac:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800c38c <turn135inL+0x3a4>
 800c3b0:	eeb0 0a67 	vmov.f32	s0, s15
 800c3b4:	f7f7 fc38 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c3c0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c3c4:	3b02      	subs	r3, #2
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7f4 f8d4 	bl	8000574 <__aeabi_i2d>
 800c3cc:	a326      	add	r3, pc, #152	; (adr r3, 800c468 <turn135inL+0x480>)
 800c3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d2:	f7f4 f939 	bl	8000648 <__aeabi_dmul>
 800c3d6:	4602      	mov	r2, r0
 800c3d8:	460b      	mov	r3, r1
 800c3da:	4614      	mov	r4, r2
 800c3dc:	461d      	mov	r5, r3
 800c3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7f4 f8d9 	bl	8000598 <__aeabi_f2d>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	4629      	mov	r1, r5
 800c3ee:	f7f3 ff75 	bl	80002dc <__adddf3>
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	4610      	mov	r0, r2
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	f7f4 fbfd 	bl	8000bf8 <__aeabi_d2f>
 800c3fe:	4603      	mov	r3, r0
 800c400:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c404:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c408:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c40c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c410:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c414:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c418:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c41c:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c420:	ed9f 5a0f 	vldr	s10, [pc, #60]	; 800c460 <turn135inL+0x478>
 800c424:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c428:	68f8      	ldr	r0, [r7, #12]
 800c42a:	eeb0 2a47 	vmov.f32	s4, s14
 800c42e:	eef0 1a65 	vmov.f32	s3, s11
 800c432:	eeb0 1a46 	vmov.f32	s2, s12
 800c436:	eef0 0a66 	vmov.f32	s1, s13
 800c43a:	ee00 3a10 	vmov	s0, r3
 800c43e:	f7f6 fdcd 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800c442:	4b08      	ldr	r3, [pc, #32]	; (800c464 <turn135inL+0x47c>)
 800c444:	2200      	movs	r2, #0
 800c446:	701a      	strb	r2, [r3, #0]
	}

}
 800c448:	bf00      	nop
 800c44a:	3710      	adds	r7, #16
 800c44c:	46bd      	mov	sp, r7
 800c44e:	ecbd 8b02 	vpop	{d8}
 800c452:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c456:	b004      	add	sp, #16
 800c458:	4770      	bx	lr
 800c45a:	bf00      	nop
 800c45c:	f3af 8000 	nop.w
 800c460:	42340000 	.word	0x42340000
 800c464:	20000808 	.word	0x20000808
 800c468:	c022ec18 	.word	0xc022ec18
 800c46c:	404fd1de 	.word	0x404fd1de

0800c470 <turn45outR>:


void turn45outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c470:	b084      	sub	sp, #16
 800c472:	b5b0      	push	{r4, r5, r7, lr}
 800c474:	ed2d 8b02 	vpush	{d8}
 800c478:	b084      	sub	sp, #16
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c480:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c484:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;

	if (test_mode == 1) {
 800c488:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	f040 80a5 	bne.w	800c5dc <turn45outR+0x16c>
		highspeed_mode = 1;
 800c492:	4be9      	ldr	r3, [pc, #932]	; (800c838 <turn45outR+0x3c8>)
 800c494:	2201      	movs	r2, #1
 800c496:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c498:	2300      	movs	r3, #0
 800c49a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c49c:	2300      	movs	r3, #0
 800c49e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c4a8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c4ac:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c4b0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c4b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c4b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4bc:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c4c0:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c4c4:	eddf 5add 	vldr	s11, [pc, #884]	; 800c83c <turn45outR+0x3cc>
 800c4c8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c4cc:	68f8      	ldr	r0, [r7, #12]
 800c4ce:	eeb0 2a47 	vmov.f32	s4, s14
 800c4d2:	eef0 1a46 	vmov.f32	s3, s12
 800c4d6:	eeb0 1a66 	vmov.f32	s2, s13
 800c4da:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800c840 <turn45outR+0x3d0>
 800c4de:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800c844 <turn45outR+0x3d4>
 800c4e2:	f7f6 fd7b 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=3;
 800c4ea:	2303      	movs	r3, #3
 800c4ec:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c4ee:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c4f2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c4f6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c4fa:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c4fe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c502:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c506:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c50a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c50e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c512:	eddf 4aca 	vldr	s9, [pc, #808]	; 800c83c <turn45outR+0x3cc>
 800c516:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c51a:	68f8      	ldr	r0, [r7, #12]
 800c51c:	eeb0 2a47 	vmov.f32	s4, s14
 800c520:	eef0 1a45 	vmov.f32	s3, s10
 800c524:	eeb0 1a65 	vmov.f32	s2, s11
 800c528:	eef0 0a46 	vmov.f32	s1, s12
 800c52c:	eeb0 0a66 	vmov.f32	s0, s13
 800c530:	f7f6 fd54 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c534:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c538:	2b01      	cmp	r3, #1
 800c53a:	d10c      	bne.n	800c556 <turn45outR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c53c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c540:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c544:	eeb0 1a47 	vmov.f32	s2, s14
 800c548:	eddf 0abf 	vldr	s1, [pc, #764]	; 800c848 <turn45outR+0x3d8>
 800c54c:	eeb0 0a67 	vmov.f32	s0, s15
 800c550:	f7f7 fcba 	bl	8003ec8 <mollifier_slalom_table>
 800c554:	e015      	b.n	800c582 <turn45outR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c556:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c55a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c55e:	eef1 7a67 	vneg.f32	s15, s15
 800c562:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c566:	eef0 2a66 	vmov.f32	s5, s13
 800c56a:	eeb0 2a67 	vmov.f32	s4, s15
 800c56e:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800c840 <turn45outR+0x3d0>
 800c572:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800c840 <turn45outR+0x3d0>
 800c576:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800c848 <turn45outR+0x3d8>
 800c57a:	eeb0 0a47 	vmov.f32	s0, s14
 800c57e:	f7f7 fb53 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c582:	2300      	movs	r3, #0
 800c584:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c586:	2300      	movs	r3, #0
 800c588:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c58a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c58e:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800c84c <turn45outR+0x3dc>
 800c592:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c596:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c59a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c59e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c5a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c5a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5aa:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c5ae:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c5b2:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800c83c <turn45outR+0x3cc>
 800c5b6:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c5ba:	68f8      	ldr	r0, [r7, #12]
 800c5bc:	eeb0 2a47 	vmov.f32	s4, s14
 800c5c0:	eef0 1a65 	vmov.f32	s3, s11
 800c5c4:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800c840 <turn45outR+0x3d0>
 800c5c8:	eef0 0a46 	vmov.f32	s1, s12
 800c5cc:	eeb0 0a66 	vmov.f32	s0, s13
 800c5d0:	f7f6 fd04 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800c5d4:	4b98      	ldr	r3, [pc, #608]	; (800c838 <turn45outR+0x3c8>)
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800c5da:	e123      	b.n	800c824 <turn45outR+0x3b4>
	}else if (test_mode >= 2) {
 800c5dc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	f240 8082 	bls.w	800c6ea <turn45outR+0x27a>
		highspeed_mode = 1;
 800c5e6:	4b94      	ldr	r3, [pc, #592]	; (800c838 <turn45outR+0x3c8>)
 800c5e8:	2201      	movs	r2, #1
 800c5ea:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800c5f4:	2303      	movs	r3, #3
 800c5f6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c5fc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c600:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c604:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c608:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c60c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c610:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c614:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c618:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c61c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c620:	eddf 4a86 	vldr	s9, [pc, #536]	; 800c83c <turn45outR+0x3cc>
 800c624:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c628:	68f8      	ldr	r0, [r7, #12]
 800c62a:	eeb0 2a47 	vmov.f32	s4, s14
 800c62e:	eef0 1a45 	vmov.f32	s3, s10
 800c632:	eeb0 1a65 	vmov.f32	s2, s11
 800c636:	eef0 0a46 	vmov.f32	s1, s12
 800c63a:	eeb0 0a66 	vmov.f32	s0, s13
 800c63e:	f7f6 fccd 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c642:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c646:	2b01      	cmp	r3, #1
 800c648:	d10c      	bne.n	800c664 <turn45outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c64a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c64e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c652:	eeb0 1a47 	vmov.f32	s2, s14
 800c656:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800c848 <turn45outR+0x3d8>
 800c65a:	eeb0 0a67 	vmov.f32	s0, s15
 800c65e:	f7f7 fc33 	bl	8003ec8 <mollifier_slalom_table>
 800c662:	e015      	b.n	800c690 <turn45outR+0x220>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c664:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c668:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c66c:	eef1 7a67 	vneg.f32	s15, s15
 800c670:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c674:	eef0 2a66 	vmov.f32	s5, s13
 800c678:	eeb0 2a67 	vmov.f32	s4, s15
 800c67c:	eddf 1a70 	vldr	s3, [pc, #448]	; 800c840 <turn45outR+0x3d0>
 800c680:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800c840 <turn45outR+0x3d0>
 800c684:	eddf 0a70 	vldr	s1, [pc, #448]	; 800c848 <turn45outR+0x3d8>
 800c688:	eeb0 0a47 	vmov.f32	s0, s14
 800c68c:	f7f7 facc 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800c690:	2300      	movs	r3, #0
 800c692:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c694:	2300      	movs	r3, #0
 800c696:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c698:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c69c:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800c84c <turn45outR+0x3dc>
 800c6a0:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c6a4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c6a8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c6ac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c6b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c6b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6b8:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c6bc:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c6c0:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800c83c <turn45outR+0x3cc>
 800c6c4:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c6c8:	68f8      	ldr	r0, [r7, #12]
 800c6ca:	eeb0 2a47 	vmov.f32	s4, s14
 800c6ce:	eef0 1a65 	vmov.f32	s3, s11
 800c6d2:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800c840 <turn45outR+0x3d0>
 800c6d6:	eef0 0a46 	vmov.f32	s1, s12
 800c6da:	eeb0 0a66 	vmov.f32	s0, s13
 800c6de:	f7f6 fc7d 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800c6e2:	4b55      	ldr	r3, [pc, #340]	; (800c838 <turn45outR+0x3c8>)
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	701a      	strb	r2, [r3, #0]
}
 800c6e8:	e09c      	b.n	800c824 <turn45outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800c6f2:	2303      	movs	r3, #3
 800c6f4:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c6fa:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c6fe:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c702:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c706:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c70a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c70e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c712:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c716:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c71a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c71e:	eddf 4a47 	vldr	s9, [pc, #284]	; 800c83c <turn45outR+0x3cc>
 800c722:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c726:	68f8      	ldr	r0, [r7, #12]
 800c728:	eeb0 2a47 	vmov.f32	s4, s14
 800c72c:	eef0 1a45 	vmov.f32	s3, s10
 800c730:	eeb0 1a65 	vmov.f32	s2, s11
 800c734:	eef0 0a46 	vmov.f32	s1, s12
 800c738:	eeb0 0a66 	vmov.f32	s0, s13
 800c73c:	f7f6 fc4e 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c740:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c744:	2b01      	cmp	r3, #1
 800c746:	d10c      	bne.n	800c762 <turn45outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c748:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c74c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c750:	eeb0 1a47 	vmov.f32	s2, s14
 800c754:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800c848 <turn45outR+0x3d8>
 800c758:	eeb0 0a67 	vmov.f32	s0, s15
 800c75c:	f7f7 fbb4 	bl	8003ec8 <mollifier_slalom_table>
 800c760:	e015      	b.n	800c78e <turn45outR+0x31e>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c762:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c766:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c76a:	eef1 7a67 	vneg.f32	s15, s15
 800c76e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c772:	eef0 2a66 	vmov.f32	s5, s13
 800c776:	eeb0 2a67 	vmov.f32	s4, s15
 800c77a:	eddf 1a31 	vldr	s3, [pc, #196]	; 800c840 <turn45outR+0x3d0>
 800c77e:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800c840 <turn45outR+0x3d0>
 800c782:	eddf 0a31 	vldr	s1, [pc, #196]	; 800c848 <turn45outR+0x3d8>
 800c786:	eeb0 0a47 	vmov.f32	s0, s14
 800c78a:	f7f7 fa4d 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800c78e:	2301      	movs	r3, #1
 800c790:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c792:	2300      	movs	r3, #0
 800c794:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c796:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c79a:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c79e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c7a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c7a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7aa:	edd7 7a01 	vldr	s15, [r7, #4]
 800c7ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c7b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7b6:	eef0 7ae7 	vabs.f32	s15, s15
 800c7ba:	ee17 0a90 	vmov	r0, s15
 800c7be:	f7f3 feeb 	bl	8000598 <__aeabi_f2d>
 800c7c2:	f04f 0200 	mov.w	r2, #0
 800c7c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c7ca:	f7f4 f867 	bl	800089c <__aeabi_ddiv>
 800c7ce:	4602      	mov	r2, r0
 800c7d0:	460b      	mov	r3, r1
 800c7d2:	4614      	mov	r4, r2
 800c7d4:	461d      	mov	r5, r3
 800c7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f7f3 fedd 	bl	8000598 <__aeabi_f2d>
 800c7de:	4602      	mov	r2, r0
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	4629      	mov	r1, r5
 800c7e6:	f7f4 f859 	bl	800089c <__aeabi_ddiv>
 800c7ea:	4602      	mov	r2, r0
 800c7ec:	460b      	mov	r3, r1
 800c7ee:	4610      	mov	r0, r2
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	f04f 0200 	mov.w	r2, #0
 800c7f6:	4b16      	ldr	r3, [pc, #88]	; (800c850 <turn45outR+0x3e0>)
 800c7f8:	f7f3 fd70 	bl	80002dc <__adddf3>
 800c7fc:	4602      	mov	r2, r0
 800c7fe:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c800:	4610      	mov	r0, r2
 800c802:	4619      	mov	r1, r3
 800c804:	f7f4 f9f8 	bl	8000bf8 <__aeabi_d2f>
 800c808:	4603      	mov	r3, r0
 800c80a:	68f8      	ldr	r0, [r7, #12]
 800c80c:	ee02 3a10 	vmov	s4, r3
 800c810:	edd7 1a01 	vldr	s3, [r7, #4]
 800c814:	ed97 1a01 	vldr	s2, [r7, #4]
 800c818:	eef0 0a68 	vmov.f32	s1, s17
 800c81c:	eeb0 0a48 	vmov.f32	s0, s16
 800c820:	f7f6 fbdc 	bl	8002fdc <straight_table2>
}
 800c824:	bf00      	nop
 800c826:	3710      	adds	r7, #16
 800c828:	46bd      	mov	sp, r7
 800c82a:	ecbd 8b02 	vpop	{d8}
 800c82e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c832:	b004      	add	sp, #16
 800c834:	4770      	bx	lr
 800c836:	bf00      	nop
 800c838:	20000808 	.word	0x20000808
 800c83c:	42340000 	.word	0x42340000
 800c840:	00000000 	.word	0x00000000
 800c844:	42c4477b 	.word	0x42c4477b
 800c848:	c2340000 	.word	0xc2340000
 800c84c:	42b40000 	.word	0x42b40000
 800c850:	408f4000 	.word	0x408f4000

0800c854 <turn45outL>:


void turn45outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c854:	b084      	sub	sp, #16
 800c856:	b5b0      	push	{r4, r5, r7, lr}
 800c858:	ed2d 8b02 	vpush	{d8}
 800c85c:	b084      	sub	sp, #16
 800c85e:	af00      	add	r7, sp, #0
 800c860:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c864:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c868:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c86c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c870:	2b01      	cmp	r3, #1
 800c872:	f040 80a3 	bne.w	800c9bc <turn45outL+0x168>
			highspeed_mode = 1;
 800c876:	4be5      	ldr	r3, [pc, #916]	; (800cc0c <turn45outL+0x3b8>)
 800c878:	2201      	movs	r2, #1
 800c87a:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800c87c:	2300      	movs	r3, #0
 800c87e:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800c880:	2300      	movs	r3, #0
 800c882:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800c884:	2300      	movs	r3, #0
 800c886:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800c888:	2300      	movs	r3, #0
 800c88a:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c88c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c890:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c894:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c898:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c89c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8a0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c8a4:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c8a8:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800cc10 <turn45outL+0x3bc>
 800c8ac:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c8b0:	68f8      	ldr	r0, [r7, #12]
 800c8b2:	eeb0 2a47 	vmov.f32	s4, s14
 800c8b6:	eef0 1a46 	vmov.f32	s3, s12
 800c8ba:	eeb0 1a66 	vmov.f32	s2, s13
 800c8be:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800cc14 <turn45outL+0x3c0>
 800c8c2:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800cc18 <turn45outL+0x3c4>
 800c8c6:	f7f6 fb89 	bl	8002fdc <straight_table2>
			wallmode.WallControlMode=0;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=4;
 800c8ce:	2304      	movs	r3, #4
 800c8d0:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c8d2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c8d6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c8da:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c8de:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c8e2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c8e6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c8ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8ee:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c8f2:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c8f6:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800cc10 <turn45outL+0x3bc>
 800c8fa:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c8fe:	68f8      	ldr	r0, [r7, #12]
 800c900:	eeb0 2a47 	vmov.f32	s4, s14
 800c904:	eef0 1a45 	vmov.f32	s3, s10
 800c908:	eeb0 1a65 	vmov.f32	s2, s11
 800c90c:	eef0 0a46 	vmov.f32	s1, s12
 800c910:	eeb0 0a66 	vmov.f32	s0, s13
 800c914:	f7f6 fb62 	bl	8002fdc <straight_table2>
			if(mollifier_mode == ON){
 800c918:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d10c      	bne.n	800c93a <turn45outL+0xe6>
				mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c920:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c924:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c928:	eeb0 1a47 	vmov.f32	s2, s14
 800c92c:	eddf 0ab8 	vldr	s1, [pc, #736]	; 800cc10 <turn45outL+0x3bc>
 800c930:	eeb0 0a67 	vmov.f32	s0, s15
 800c934:	f7f7 fac8 	bl	8003ec8 <mollifier_slalom_table>
 800c938:	e013      	b.n	800c962 <turn45outL+0x10e>
			}else{
				slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c93a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c93e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c942:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c946:	eef0 2a66 	vmov.f32	s5, s13
 800c94a:	eeb0 2a47 	vmov.f32	s4, s14
 800c94e:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800cc14 <turn45outL+0x3c0>
 800c952:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800cc14 <turn45outL+0x3c0>
 800c956:	eddf 0aae 	vldr	s1, [pc, #696]	; 800cc10 <turn45outL+0x3bc>
 800c95a:	eeb0 0a67 	vmov.f32	s0, s15
 800c95e:	f7f7 f963 	bl	8003c28 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800c962:	2300      	movs	r3, #0
 800c964:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800c966:	2300      	movs	r3, #0
 800c968:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c96a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c96e:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800cc1c <turn45outL+0x3c8>
 800c972:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c976:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c97a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c97e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c982:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c986:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c98a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c98e:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c992:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800cc10 <turn45outL+0x3bc>
 800c996:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c99a:	68f8      	ldr	r0, [r7, #12]
 800c99c:	eeb0 2a47 	vmov.f32	s4, s14
 800c9a0:	eef0 1a65 	vmov.f32	s3, s11
 800c9a4:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800cc14 <turn45outL+0x3c0>
 800c9a8:	eef0 0a46 	vmov.f32	s1, s12
 800c9ac:	eeb0 0a66 	vmov.f32	s0, s13
 800c9b0:	f7f6 fb14 	bl	8002fdc <straight_table2>
			highspeed_mode = 0;
 800c9b4:	4b95      	ldr	r3, [pc, #596]	; (800cc0c <turn45outL+0x3b8>)
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800c9ba:	e11e      	b.n	800cbfa <turn45outL+0x3a6>
		}else if (test_mode >= 2) {
 800c9bc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d97f      	bls.n	800cac4 <turn45outL+0x270>
		highspeed_mode = 1;
 800c9c4:	4b91      	ldr	r3, [pc, #580]	; (800cc0c <turn45outL+0x3b8>)
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800c9d2:	2304      	movs	r3, #4
 800c9d4:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c9da:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c9de:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c9e2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c9e6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c9ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c9ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c9f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9f6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c9fa:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c9fe:	eddf 4a84 	vldr	s9, [pc, #528]	; 800cc10 <turn45outL+0x3bc>
 800ca02:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ca06:	68f8      	ldr	r0, [r7, #12]
 800ca08:	eeb0 2a47 	vmov.f32	s4, s14
 800ca0c:	eef0 1a45 	vmov.f32	s3, s10
 800ca10:	eeb0 1a65 	vmov.f32	s2, s11
 800ca14:	eef0 0a46 	vmov.f32	s1, s12
 800ca18:	eeb0 0a66 	vmov.f32	s0, s13
 800ca1c:	f7f6 fade 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800ca20:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	d10c      	bne.n	800ca42 <turn45outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800ca28:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca2c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ca30:	eeb0 1a47 	vmov.f32	s2, s14
 800ca34:	eddf 0a76 	vldr	s1, [pc, #472]	; 800cc10 <turn45outL+0x3bc>
 800ca38:	eeb0 0a67 	vmov.f32	s0, s15
 800ca3c:	f7f7 fa44 	bl	8003ec8 <mollifier_slalom_table>
 800ca40:	e013      	b.n	800ca6a <turn45outL+0x216>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ca42:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca46:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ca4a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ca4e:	eef0 2a66 	vmov.f32	s5, s13
 800ca52:	eeb0 2a47 	vmov.f32	s4, s14
 800ca56:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800cc14 <turn45outL+0x3c0>
 800ca5a:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800cc14 <turn45outL+0x3c0>
 800ca5e:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800cc10 <turn45outL+0x3bc>
 800ca62:	eeb0 0a67 	vmov.f32	s0, s15
 800ca66:	f7f7 f8df 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ca72:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ca76:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800cc1c <turn45outL+0x3c8>
 800ca7a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ca7e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ca82:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ca86:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ca8a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca92:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ca96:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ca9a:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800cc10 <turn45outL+0x3bc>
 800ca9e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800caa2:	68f8      	ldr	r0, [r7, #12]
 800caa4:	eeb0 2a47 	vmov.f32	s4, s14
 800caa8:	eef0 1a65 	vmov.f32	s3, s11
 800caac:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800cc14 <turn45outL+0x3c0>
 800cab0:	eef0 0a46 	vmov.f32	s1, s12
 800cab4:	eeb0 0a66 	vmov.f32	s0, s13
 800cab8:	f7f6 fa90 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800cabc:	4b53      	ldr	r3, [pc, #332]	; (800cc0c <turn45outL+0x3b8>)
 800cabe:	2200      	movs	r2, #0
 800cac0:	701a      	strb	r2, [r3, #0]
}
 800cac2:	e09a      	b.n	800cbfa <turn45outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800cac4:	2300      	movs	r3, #0
 800cac6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cac8:	2300      	movs	r3, #0
 800caca:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800cacc:	2304      	movs	r3, #4
 800cace:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cad0:	2300      	movs	r3, #0
 800cad2:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cad4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cad8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cadc:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cae0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cae4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cae8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800caec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800caf0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800caf4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800caf8:	eddf 4a45 	vldr	s9, [pc, #276]	; 800cc10 <turn45outL+0x3bc>
 800cafc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cb00:	68f8      	ldr	r0, [r7, #12]
 800cb02:	eeb0 2a47 	vmov.f32	s4, s14
 800cb06:	eef0 1a45 	vmov.f32	s3, s10
 800cb0a:	eeb0 1a65 	vmov.f32	s2, s11
 800cb0e:	eef0 0a46 	vmov.f32	s1, s12
 800cb12:	eeb0 0a66 	vmov.f32	s0, s13
 800cb16:	f7f6 fa61 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800cb1a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d10c      	bne.n	800cb3c <turn45outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800cb22:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb26:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cb2a:	eeb0 1a47 	vmov.f32	s2, s14
 800cb2e:	eddf 0a38 	vldr	s1, [pc, #224]	; 800cc10 <turn45outL+0x3bc>
 800cb32:	eeb0 0a67 	vmov.f32	s0, s15
 800cb36:	f7f7 f9c7 	bl	8003ec8 <mollifier_slalom_table>
 800cb3a:	e013      	b.n	800cb64 <turn45outL+0x310>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800cb3c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb40:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cb44:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cb48:	eef0 2a66 	vmov.f32	s5, s13
 800cb4c:	eeb0 2a47 	vmov.f32	s4, s14
 800cb50:	eddf 1a30 	vldr	s3, [pc, #192]	; 800cc14 <turn45outL+0x3c0>
 800cb54:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800cc14 <turn45outL+0x3c0>
 800cb58:	eddf 0a2d 	vldr	s1, [pc, #180]	; 800cc10 <turn45outL+0x3bc>
 800cb5c:	eeb0 0a67 	vmov.f32	s0, s15
 800cb60:	f7f7 f862 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800cb64:	2301      	movs	r3, #1
 800cb66:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cb6c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800cb70:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800cb74:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cb78:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb80:	edd7 7a01 	vldr	s15, [r7, #4]
 800cb84:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cb88:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb8c:	eef0 7ae7 	vabs.f32	s15, s15
 800cb90:	ee17 0a90 	vmov	r0, s15
 800cb94:	f7f3 fd00 	bl	8000598 <__aeabi_f2d>
 800cb98:	f04f 0200 	mov.w	r2, #0
 800cb9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cba0:	f7f3 fe7c 	bl	800089c <__aeabi_ddiv>
 800cba4:	4602      	mov	r2, r0
 800cba6:	460b      	mov	r3, r1
 800cba8:	4614      	mov	r4, r2
 800cbaa:	461d      	mov	r5, r3
 800cbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7f3 fcf2 	bl	8000598 <__aeabi_f2d>
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	4620      	mov	r0, r4
 800cbba:	4629      	mov	r1, r5
 800cbbc:	f7f3 fe6e 	bl	800089c <__aeabi_ddiv>
 800cbc0:	4602      	mov	r2, r0
 800cbc2:	460b      	mov	r3, r1
 800cbc4:	4610      	mov	r0, r2
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	f04f 0200 	mov.w	r2, #0
 800cbcc:	4b14      	ldr	r3, [pc, #80]	; (800cc20 <turn45outL+0x3cc>)
 800cbce:	f7f3 fb85 	bl	80002dc <__adddf3>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cbd6:	4610      	mov	r0, r2
 800cbd8:	4619      	mov	r1, r3
 800cbda:	f7f4 f80d 	bl	8000bf8 <__aeabi_d2f>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	68f8      	ldr	r0, [r7, #12]
 800cbe2:	ee02 3a10 	vmov	s4, r3
 800cbe6:	edd7 1a01 	vldr	s3, [r7, #4]
 800cbea:	ed97 1a01 	vldr	s2, [r7, #4]
 800cbee:	eef0 0a68 	vmov.f32	s1, s17
 800cbf2:	eeb0 0a48 	vmov.f32	s0, s16
 800cbf6:	f7f6 f9f1 	bl	8002fdc <straight_table2>
}
 800cbfa:	bf00      	nop
 800cbfc:	3710      	adds	r7, #16
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	ecbd 8b02 	vpop	{d8}
 800cc04:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800cc08:	b004      	add	sp, #16
 800cc0a:	4770      	bx	lr
 800cc0c:	20000808 	.word	0x20000808
 800cc10:	42340000 	.word	0x42340000
 800cc14:	00000000 	.word	0x00000000
 800cc18:	42c4477b 	.word	0x42c4477b
 800cc1c:	42b40000 	.word	0x42b40000
 800cc20:	408f4000 	.word	0x408f4000

0800cc24 <turn135outR>:



void turn135outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800cc24:	b084      	sub	sp, #16
 800cc26:	b5b0      	push	{r4, r5, r7, lr}
 800cc28:	ed2d 8b02 	vpush	{d8}
 800cc2c:	b084      	sub	sp, #16
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800cc34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cc38:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800cc3c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	f040 80a5 	bne.w	800cd90 <turn135outR+0x16c>
			highspeed_mode = 1;
 800cc46:	4be9      	ldr	r3, [pc, #932]	; (800cfec <turn135outR+0x3c8>)
 800cc48:	2201      	movs	r2, #1
 800cc4a:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800cc50:	2300      	movs	r3, #0
 800cc52:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800cc54:	2300      	movs	r3, #0
 800cc56:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cc5c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cc60:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cc64:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cc68:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc70:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cc74:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cc78:	eddf 5add 	vldr	s11, [pc, #884]	; 800cff0 <turn135outR+0x3cc>
 800cc7c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800cc80:	68f8      	ldr	r0, [r7, #12]
 800cc82:	eeb0 2a47 	vmov.f32	s4, s14
 800cc86:	eef0 1a46 	vmov.f32	s3, s12
 800cc8a:	eeb0 1a66 	vmov.f32	s2, s13
 800cc8e:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800cff4 <turn135outR+0x3d0>
 800cc92:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800cff8 <turn135outR+0x3d4>
 800cc96:	f7f6 f9a1 	bl	8002fdc <straight_table2>
			wallmode.WallControlMode=0;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800cc9e:	2303      	movs	r3, #3
 800cca0:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cca2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cca6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ccaa:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ccae:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ccb2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ccb6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ccba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccbe:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ccc2:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ccc6:	eddf 4aca 	vldr	s9, [pc, #808]	; 800cff0 <turn135outR+0x3cc>
 800ccca:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ccce:	68f8      	ldr	r0, [r7, #12]
 800ccd0:	eeb0 2a47 	vmov.f32	s4, s14
 800ccd4:	eef0 1a45 	vmov.f32	s3, s10
 800ccd8:	eeb0 1a65 	vmov.f32	s2, s11
 800ccdc:	eef0 0a46 	vmov.f32	s1, s12
 800cce0:	eeb0 0a66 	vmov.f32	s0, s13
 800cce4:	f7f6 f97a 	bl	8002fdc <straight_table2>
			if(mollifier_mode == ON){
 800cce8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d10c      	bne.n	800cd0a <turn135outR+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800ccf0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ccf4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ccf8:	eeb0 1a47 	vmov.f32	s2, s14
 800ccfc:	eddf 0abf 	vldr	s1, [pc, #764]	; 800cffc <turn135outR+0x3d8>
 800cd00:	eeb0 0a67 	vmov.f32	s0, s15
 800cd04:	f7f7 f8e0 	bl	8003ec8 <mollifier_slalom_table>
 800cd08:	e015      	b.n	800cd36 <turn135outR+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cd0a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cd0e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cd12:	eef1 7a67 	vneg.f32	s15, s15
 800cd16:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cd1a:	eef0 2a66 	vmov.f32	s5, s13
 800cd1e:	eeb0 2a67 	vmov.f32	s4, s15
 800cd22:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800cff4 <turn135outR+0x3d0>
 800cd26:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800cff4 <turn135outR+0x3d0>
 800cd2a:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800cffc <turn135outR+0x3d8>
 800cd2e:	eeb0 0a47 	vmov.f32	s0, s14
 800cd32:	f7f6 ff79 	bl	8003c28 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800cd36:	2300      	movs	r3, #0
 800cd38:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cd3e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800cd42:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800d000 <turn135outR+0x3dc>
 800cd46:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cd4a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cd4e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cd52:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cd56:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd5e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800cd62:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cd66:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800cff0 <turn135outR+0x3cc>
 800cd6a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cd6e:	68f8      	ldr	r0, [r7, #12]
 800cd70:	eeb0 2a47 	vmov.f32	s4, s14
 800cd74:	eef0 1a65 	vmov.f32	s3, s11
 800cd78:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800cff4 <turn135outR+0x3d0>
 800cd7c:	eef0 0a46 	vmov.f32	s1, s12
 800cd80:	eeb0 0a66 	vmov.f32	s0, s13
 800cd84:	f7f6 f92a 	bl	8002fdc <straight_table2>
			highspeed_mode = 0;
 800cd88:	4b98      	ldr	r3, [pc, #608]	; (800cfec <turn135outR+0x3c8>)
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800cd8e:	e123      	b.n	800cfd8 <turn135outR+0x3b4>
		}else if (test_mode >= 2) {
 800cd90:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cd94:	2b01      	cmp	r3, #1
 800cd96:	f240 8082 	bls.w	800ce9e <turn135outR+0x27a>
		highspeed_mode = 1;
 800cd9a:	4b94      	ldr	r3, [pc, #592]	; (800cfec <turn135outR+0x3c8>)
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800cda0:	2300      	movs	r3, #0
 800cda2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cda4:	2300      	movs	r3, #0
 800cda6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800cda8:	2303      	movs	r3, #3
 800cdaa:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cdac:	2300      	movs	r3, #0
 800cdae:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cdb0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cdb4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cdb8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cdbc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cdc0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cdc4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cdc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdcc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cdd0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cdd4:	eddf 4a86 	vldr	s9, [pc, #536]	; 800cff0 <turn135outR+0x3cc>
 800cdd8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cddc:	68f8      	ldr	r0, [r7, #12]
 800cdde:	eeb0 2a47 	vmov.f32	s4, s14
 800cde2:	eef0 1a45 	vmov.f32	s3, s10
 800cde6:	eeb0 1a65 	vmov.f32	s2, s11
 800cdea:	eef0 0a46 	vmov.f32	s1, s12
 800cdee:	eeb0 0a66 	vmov.f32	s0, s13
 800cdf2:	f7f6 f8f3 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800cdf6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	d10c      	bne.n	800ce18 <turn135outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800cdfe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce02:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ce06:	eeb0 1a47 	vmov.f32	s2, s14
 800ce0a:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800cffc <turn135outR+0x3d8>
 800ce0e:	eeb0 0a67 	vmov.f32	s0, s15
 800ce12:	f7f7 f859 	bl	8003ec8 <mollifier_slalom_table>
 800ce16:	e015      	b.n	800ce44 <turn135outR+0x220>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ce18:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ce1c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ce20:	eef1 7a67 	vneg.f32	s15, s15
 800ce24:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ce28:	eef0 2a66 	vmov.f32	s5, s13
 800ce2c:	eeb0 2a67 	vmov.f32	s4, s15
 800ce30:	eddf 1a70 	vldr	s3, [pc, #448]	; 800cff4 <turn135outR+0x3d0>
 800ce34:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800cff4 <turn135outR+0x3d0>
 800ce38:	eddf 0a70 	vldr	s1, [pc, #448]	; 800cffc <turn135outR+0x3d8>
 800ce3c:	eeb0 0a47 	vmov.f32	s0, s14
 800ce40:	f7f6 fef2 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800ce44:	2300      	movs	r3, #0
 800ce46:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ce4c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ce50:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800d000 <turn135outR+0x3dc>
 800ce54:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ce58:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ce5c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ce60:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ce64:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce68:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce6c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ce70:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ce74:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800cff0 <turn135outR+0x3cc>
 800ce78:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ce7c:	68f8      	ldr	r0, [r7, #12]
 800ce7e:	eeb0 2a47 	vmov.f32	s4, s14
 800ce82:	eef0 1a65 	vmov.f32	s3, s11
 800ce86:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800cff4 <turn135outR+0x3d0>
 800ce8a:	eef0 0a46 	vmov.f32	s1, s12
 800ce8e:	eeb0 0a66 	vmov.f32	s0, s13
 800ce92:	f7f6 f8a3 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800ce96:	4b55      	ldr	r3, [pc, #340]	; (800cfec <turn135outR+0x3c8>)
 800ce98:	2200      	movs	r2, #0
 800ce9a:	701a      	strb	r2, [r3, #0]
}
 800ce9c:	e09c      	b.n	800cfd8 <turn135outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cea2:	2300      	movs	r3, #0
 800cea4:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800cea6:	2303      	movs	r3, #3
 800cea8:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ceae:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ceb2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ceb6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ceba:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cebe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cec2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cec6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ceca:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cece:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ced2:	eddf 4a47 	vldr	s9, [pc, #284]	; 800cff0 <turn135outR+0x3cc>
 800ced6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ceda:	68f8      	ldr	r0, [r7, #12]
 800cedc:	eeb0 2a47 	vmov.f32	s4, s14
 800cee0:	eef0 1a45 	vmov.f32	s3, s10
 800cee4:	eeb0 1a65 	vmov.f32	s2, s11
 800cee8:	eef0 0a46 	vmov.f32	s1, s12
 800ceec:	eeb0 0a66 	vmov.f32	s0, s13
 800cef0:	f7f6 f874 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800cef4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cef8:	2b01      	cmp	r3, #1
 800cefa:	d10c      	bne.n	800cf16 <turn135outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800cefc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf00:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cf04:	eeb0 1a47 	vmov.f32	s2, s14
 800cf08:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800cffc <turn135outR+0x3d8>
 800cf0c:	eeb0 0a67 	vmov.f32	s0, s15
 800cf10:	f7f6 ffda 	bl	8003ec8 <mollifier_slalom_table>
 800cf14:	e015      	b.n	800cf42 <turn135outR+0x31e>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cf16:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf1a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cf1e:	eef1 7a67 	vneg.f32	s15, s15
 800cf22:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cf26:	eef0 2a66 	vmov.f32	s5, s13
 800cf2a:	eeb0 2a67 	vmov.f32	s4, s15
 800cf2e:	eddf 1a31 	vldr	s3, [pc, #196]	; 800cff4 <turn135outR+0x3d0>
 800cf32:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800cff4 <turn135outR+0x3d0>
 800cf36:	eddf 0a31 	vldr	s1, [pc, #196]	; 800cffc <turn135outR+0x3d8>
 800cf3a:	eeb0 0a47 	vmov.f32	s0, s14
 800cf3e:	f7f6 fe73 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800cf42:	2301      	movs	r3, #1
 800cf44:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cf46:	2300      	movs	r3, #0
 800cf48:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cf4a:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800cf4e:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800cf52:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf56:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf5e:	edd7 7a01 	vldr	s15, [r7, #4]
 800cf62:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cf66:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf6a:	eef0 7ae7 	vabs.f32	s15, s15
 800cf6e:	ee17 0a90 	vmov	r0, s15
 800cf72:	f7f3 fb11 	bl	8000598 <__aeabi_f2d>
 800cf76:	f04f 0200 	mov.w	r2, #0
 800cf7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cf7e:	f7f3 fc8d 	bl	800089c <__aeabi_ddiv>
 800cf82:	4602      	mov	r2, r0
 800cf84:	460b      	mov	r3, r1
 800cf86:	4614      	mov	r4, r2
 800cf88:	461d      	mov	r5, r3
 800cf8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f7f3 fb03 	bl	8000598 <__aeabi_f2d>
 800cf92:	4602      	mov	r2, r0
 800cf94:	460b      	mov	r3, r1
 800cf96:	4620      	mov	r0, r4
 800cf98:	4629      	mov	r1, r5
 800cf9a:	f7f3 fc7f 	bl	800089c <__aeabi_ddiv>
 800cf9e:	4602      	mov	r2, r0
 800cfa0:	460b      	mov	r3, r1
 800cfa2:	4610      	mov	r0, r2
 800cfa4:	4619      	mov	r1, r3
 800cfa6:	f04f 0200 	mov.w	r2, #0
 800cfaa:	4b16      	ldr	r3, [pc, #88]	; (800d004 <turn135outR+0x3e0>)
 800cfac:	f7f3 f996 	bl	80002dc <__adddf3>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cfb4:	4610      	mov	r0, r2
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	f7f3 fe1e 	bl	8000bf8 <__aeabi_d2f>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	68f8      	ldr	r0, [r7, #12]
 800cfc0:	ee02 3a10 	vmov	s4, r3
 800cfc4:	edd7 1a01 	vldr	s3, [r7, #4]
 800cfc8:	ed97 1a01 	vldr	s2, [r7, #4]
 800cfcc:	eef0 0a68 	vmov.f32	s1, s17
 800cfd0:	eeb0 0a48 	vmov.f32	s0, s16
 800cfd4:	f7f6 f802 	bl	8002fdc <straight_table2>
}
 800cfd8:	bf00      	nop
 800cfda:	3710      	adds	r7, #16
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	ecbd 8b02 	vpop	{d8}
 800cfe2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800cfe6:	b004      	add	sp, #16
 800cfe8:	4770      	bx	lr
 800cfea:	bf00      	nop
 800cfec:	20000808 	.word	0x20000808
 800cff0:	42340000 	.word	0x42340000
 800cff4:	00000000 	.word	0x00000000
 800cff8:	42c4477b 	.word	0x42c4477b
 800cffc:	c3070000 	.word	0xc3070000
 800d000:	42b40000 	.word	0x42b40000
 800d004:	408f4000 	.word	0x408f4000

0800d008 <turn135outL>:


void turn135outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d008:	b084      	sub	sp, #16
 800d00a:	b5b0      	push	{r4, r5, r7, lr}
 800d00c:	ed2d 8b02 	vpush	{d8}
 800d010:	b084      	sub	sp, #16
 800d012:	af00      	add	r7, sp, #0
 800d014:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d018:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d01c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d020:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d024:	2b01      	cmp	r3, #1
 800d026:	f040 80a3 	bne.w	800d170 <turn135outL+0x168>
		highspeed_mode = 1;
 800d02a:	4be5      	ldr	r3, [pc, #916]	; (800d3c0 <turn135outL+0x3b8>)
 800d02c:	2201      	movs	r2, #1
 800d02e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d030:	2300      	movs	r3, #0
 800d032:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d034:	2300      	movs	r3, #0
 800d036:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800d038:	2300      	movs	r3, #0
 800d03a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d03c:	2300      	movs	r3, #0
 800d03e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d040:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d044:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d048:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d04c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d050:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d054:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d058:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d05c:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800d3c4 <turn135outL+0x3bc>
 800d060:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d064:	68f8      	ldr	r0, [r7, #12]
 800d066:	eeb0 2a47 	vmov.f32	s4, s14
 800d06a:	eef0 1a46 	vmov.f32	s3, s12
 800d06e:	eeb0 1a66 	vmov.f32	s2, s13
 800d072:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800d3c8 <turn135outL+0x3c0>
 800d076:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800d3cc <turn135outL+0x3c4>
 800d07a:	f7f5 ffaf 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800d07e:	2300      	movs	r3, #0
 800d080:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=4;
 800d082:	2304      	movs	r3, #4
 800d084:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d086:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d08a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d08e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d092:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d096:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d09a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d09e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0a2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d0a6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d0aa:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800d3c4 <turn135outL+0x3bc>
 800d0ae:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d0b2:	68f8      	ldr	r0, [r7, #12]
 800d0b4:	eeb0 2a47 	vmov.f32	s4, s14
 800d0b8:	eef0 1a45 	vmov.f32	s3, s10
 800d0bc:	eeb0 1a65 	vmov.f32	s2, s11
 800d0c0:	eef0 0a46 	vmov.f32	s1, s12
 800d0c4:	eeb0 0a66 	vmov.f32	s0, s13
 800d0c8:	f7f5 ff88 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d0cc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	d10c      	bne.n	800d0ee <turn135outL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d0d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d0d8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d0dc:	eeb0 1a47 	vmov.f32	s2, s14
 800d0e0:	eddf 0abb 	vldr	s1, [pc, #748]	; 800d3d0 <turn135outL+0x3c8>
 800d0e4:	eeb0 0a67 	vmov.f32	s0, s15
 800d0e8:	f7f6 feee 	bl	8003ec8 <mollifier_slalom_table>
 800d0ec:	e013      	b.n	800d116 <turn135outL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d0ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d0f2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d0f6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d0fa:	eef0 2a66 	vmov.f32	s5, s13
 800d0fe:	eeb0 2a47 	vmov.f32	s4, s14
 800d102:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800d3c8 <turn135outL+0x3c0>
 800d106:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800d3c8 <turn135outL+0x3c0>
 800d10a:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800d3d0 <turn135outL+0x3c8>
 800d10e:	eeb0 0a67 	vmov.f32	s0, s15
 800d112:	f7f6 fd89 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800d116:	2300      	movs	r3, #0
 800d118:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d11a:	2300      	movs	r3, #0
 800d11c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d11e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d122:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800d3d4 <turn135outL+0x3cc>
 800d126:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d12a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d12e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d132:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d136:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d13a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d13e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d142:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d146:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800d3c4 <turn135outL+0x3bc>
 800d14a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d14e:	68f8      	ldr	r0, [r7, #12]
 800d150:	eeb0 2a47 	vmov.f32	s4, s14
 800d154:	eef0 1a65 	vmov.f32	s3, s11
 800d158:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800d3c8 <turn135outL+0x3c0>
 800d15c:	eef0 0a46 	vmov.f32	s1, s12
 800d160:	eeb0 0a66 	vmov.f32	s0, s13
 800d164:	f7f5 ff3a 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800d168:	4b95      	ldr	r3, [pc, #596]	; (800d3c0 <turn135outL+0x3b8>)
 800d16a:	2200      	movs	r2, #0
 800d16c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d16e:	e11e      	b.n	800d3ae <turn135outL+0x3a6>
	}else if (test_mode >= 2) {
 800d170:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d174:	2b01      	cmp	r3, #1
 800d176:	d97f      	bls.n	800d278 <turn135outL+0x270>
		highspeed_mode = 1;
 800d178:	4b91      	ldr	r3, [pc, #580]	; (800d3c0 <turn135outL+0x3b8>)
 800d17a:	2201      	movs	r2, #1
 800d17c:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d17e:	2300      	movs	r3, #0
 800d180:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d182:	2300      	movs	r3, #0
 800d184:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d186:	2304      	movs	r3, #4
 800d188:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d18a:	2300      	movs	r3, #0
 800d18c:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d18e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d192:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d196:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d19a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d19e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d1a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d1a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1aa:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d1ae:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d1b2:	eddf 4a84 	vldr	s9, [pc, #528]	; 800d3c4 <turn135outL+0x3bc>
 800d1b6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d1ba:	68f8      	ldr	r0, [r7, #12]
 800d1bc:	eeb0 2a47 	vmov.f32	s4, s14
 800d1c0:	eef0 1a45 	vmov.f32	s3, s10
 800d1c4:	eeb0 1a65 	vmov.f32	s2, s11
 800d1c8:	eef0 0a46 	vmov.f32	s1, s12
 800d1cc:	eeb0 0a66 	vmov.f32	s0, s13
 800d1d0:	f7f5 ff04 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d1d4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d10c      	bne.n	800d1f6 <turn135outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d1dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d1e0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d1e4:	eeb0 1a47 	vmov.f32	s2, s14
 800d1e8:	eddf 0a79 	vldr	s1, [pc, #484]	; 800d3d0 <turn135outL+0x3c8>
 800d1ec:	eeb0 0a67 	vmov.f32	s0, s15
 800d1f0:	f7f6 fe6a 	bl	8003ec8 <mollifier_slalom_table>
 800d1f4:	e013      	b.n	800d21e <turn135outL+0x216>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d1f6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d1fa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d1fe:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d202:	eef0 2a66 	vmov.f32	s5, s13
 800d206:	eeb0 2a47 	vmov.f32	s4, s14
 800d20a:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800d3c8 <turn135outL+0x3c0>
 800d20e:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800d3c8 <turn135outL+0x3c0>
 800d212:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800d3d0 <turn135outL+0x3c8>
 800d216:	eeb0 0a67 	vmov.f32	s0, s15
 800d21a:	f7f6 fd05 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800d21e:	2300      	movs	r3, #0
 800d220:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d222:	2300      	movs	r3, #0
 800d224:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d226:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d22a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800d3d4 <turn135outL+0x3cc>
 800d22e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d232:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d236:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d23a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d23e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d242:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d246:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d24a:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d24e:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800d3c4 <turn135outL+0x3bc>
 800d252:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d256:	68f8      	ldr	r0, [r7, #12]
 800d258:	eeb0 2a47 	vmov.f32	s4, s14
 800d25c:	eef0 1a65 	vmov.f32	s3, s11
 800d260:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800d3c8 <turn135outL+0x3c0>
 800d264:	eef0 0a46 	vmov.f32	s1, s12
 800d268:	eeb0 0a66 	vmov.f32	s0, s13
 800d26c:	f7f5 feb6 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800d270:	4b53      	ldr	r3, [pc, #332]	; (800d3c0 <turn135outL+0x3b8>)
 800d272:	2200      	movs	r2, #0
 800d274:	701a      	strb	r2, [r3, #0]
}
 800d276:	e09a      	b.n	800d3ae <turn135outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d278:	2300      	movs	r3, #0
 800d27a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d27c:	2300      	movs	r3, #0
 800d27e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d280:	2304      	movs	r3, #4
 800d282:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d284:	2300      	movs	r3, #0
 800d286:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d288:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d28c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d290:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d294:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d298:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d29c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2a4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d2a8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d2ac:	eddf 4a45 	vldr	s9, [pc, #276]	; 800d3c4 <turn135outL+0x3bc>
 800d2b0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d2b4:	68f8      	ldr	r0, [r7, #12]
 800d2b6:	eeb0 2a47 	vmov.f32	s4, s14
 800d2ba:	eef0 1a45 	vmov.f32	s3, s10
 800d2be:	eeb0 1a65 	vmov.f32	s2, s11
 800d2c2:	eef0 0a46 	vmov.f32	s1, s12
 800d2c6:	eeb0 0a66 	vmov.f32	s0, s13
 800d2ca:	f7f5 fe87 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d2ce:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d2d2:	2b01      	cmp	r3, #1
 800d2d4:	d10c      	bne.n	800d2f0 <turn135outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d2d6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2da:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d2de:	eeb0 1a47 	vmov.f32	s2, s14
 800d2e2:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800d3d0 <turn135outL+0x3c8>
 800d2e6:	eeb0 0a67 	vmov.f32	s0, s15
 800d2ea:	f7f6 fded 	bl	8003ec8 <mollifier_slalom_table>
 800d2ee:	e013      	b.n	800d318 <turn135outL+0x310>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d2f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2f4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d2f8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d2fc:	eef0 2a66 	vmov.f32	s5, s13
 800d300:	eeb0 2a47 	vmov.f32	s4, s14
 800d304:	eddf 1a30 	vldr	s3, [pc, #192]	; 800d3c8 <turn135outL+0x3c0>
 800d308:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800d3c8 <turn135outL+0x3c0>
 800d30c:	eddf 0a30 	vldr	s1, [pc, #192]	; 800d3d0 <turn135outL+0x3c8>
 800d310:	eeb0 0a67 	vmov.f32	s0, s15
 800d314:	f7f6 fc88 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800d318:	2301      	movs	r3, #1
 800d31a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d31c:	2300      	movs	r3, #0
 800d31e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d320:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d324:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d328:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d32c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d330:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d334:	edd7 7a01 	vldr	s15, [r7, #4]
 800d338:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d33c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d340:	eef0 7ae7 	vabs.f32	s15, s15
 800d344:	ee17 0a90 	vmov	r0, s15
 800d348:	f7f3 f926 	bl	8000598 <__aeabi_f2d>
 800d34c:	f04f 0200 	mov.w	r2, #0
 800d350:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d354:	f7f3 faa2 	bl	800089c <__aeabi_ddiv>
 800d358:	4602      	mov	r2, r0
 800d35a:	460b      	mov	r3, r1
 800d35c:	4614      	mov	r4, r2
 800d35e:	461d      	mov	r5, r3
 800d360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d362:	4618      	mov	r0, r3
 800d364:	f7f3 f918 	bl	8000598 <__aeabi_f2d>
 800d368:	4602      	mov	r2, r0
 800d36a:	460b      	mov	r3, r1
 800d36c:	4620      	mov	r0, r4
 800d36e:	4629      	mov	r1, r5
 800d370:	f7f3 fa94 	bl	800089c <__aeabi_ddiv>
 800d374:	4602      	mov	r2, r0
 800d376:	460b      	mov	r3, r1
 800d378:	4610      	mov	r0, r2
 800d37a:	4619      	mov	r1, r3
 800d37c:	f04f 0200 	mov.w	r2, #0
 800d380:	4b15      	ldr	r3, [pc, #84]	; (800d3d8 <turn135outL+0x3d0>)
 800d382:	f7f2 ffab 	bl	80002dc <__adddf3>
 800d386:	4602      	mov	r2, r0
 800d388:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d38a:	4610      	mov	r0, r2
 800d38c:	4619      	mov	r1, r3
 800d38e:	f7f3 fc33 	bl	8000bf8 <__aeabi_d2f>
 800d392:	4603      	mov	r3, r0
 800d394:	68f8      	ldr	r0, [r7, #12]
 800d396:	ee02 3a10 	vmov	s4, r3
 800d39a:	edd7 1a01 	vldr	s3, [r7, #4]
 800d39e:	ed97 1a01 	vldr	s2, [r7, #4]
 800d3a2:	eef0 0a68 	vmov.f32	s1, s17
 800d3a6:	eeb0 0a48 	vmov.f32	s0, s16
 800d3aa:	f7f5 fe17 	bl	8002fdc <straight_table2>
}
 800d3ae:	bf00      	nop
 800d3b0:	3710      	adds	r7, #16
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	ecbd 8b02 	vpop	{d8}
 800d3b8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d3bc:	b004      	add	sp, #16
 800d3be:	4770      	bx	lr
 800d3c0:	20000808 	.word	0x20000808
 800d3c4:	42340000 	.word	0x42340000
 800d3c8:	00000000 	.word	0x00000000
 800d3cc:	42c4477b 	.word	0x42c4477b
 800d3d0:	43070000 	.word	0x43070000
 800d3d4:	42b40000 	.word	0x42b40000
 800d3d8:	408f4000 	.word	0x408f4000
 800d3dc:	00000000 	.word	0x00000000

0800d3e0 <V90R>:


void V90R(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d3e0:	b084      	sub	sp, #16
 800d3e2:	b5b0      	push	{r4, r5, r7, lr}
 800d3e4:	ed2d 8b02 	vpush	{d8}
 800d3e8:	b084      	sub	sp, #16
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d3f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d3f4:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d3f8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	f040 80af 	bne.w	800d560 <V90R+0x180>
			highspeed_mode = 1;
 800d402:	4bc1      	ldr	r3, [pc, #772]	; (800d708 <V90R+0x328>)
 800d404:	2201      	movs	r2, #1
 800d406:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800d408:	2300      	movs	r3, #0
 800d40a:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800d40c:	2300      	movs	r3, #0
 800d40e:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800d410:	2300      	movs	r3, #0
 800d412:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800d414:	2300      	movs	r3, #0
 800d416:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d418:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d41c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d420:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d424:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d428:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d42c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d430:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d434:	eddf 5ab5 	vldr	s11, [pc, #724]	; 800d70c <V90R+0x32c>
 800d438:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d43c:	68f8      	ldr	r0, [r7, #12]
 800d43e:	eeb0 2a47 	vmov.f32	s4, s14
 800d442:	eef0 1a46 	vmov.f32	s3, s12
 800d446:	eeb0 1a66 	vmov.f32	s2, s13
 800d44a:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800d714 <V90R+0x334>
 800d44e:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 800d710 <V90R+0x330>
 800d452:	f7f5 fdc3 	bl	8002fdc <straight_table2>
			wallmode.WallControlMode=0;
 800d456:	2300      	movs	r3, #0
 800d458:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800d45a:	2303      	movs	r3, #3
 800d45c:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d45e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d462:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d466:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d46a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d46e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d472:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d476:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d47a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d47e:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d482:	eddf 4aa2 	vldr	s9, [pc, #648]	; 800d70c <V90R+0x32c>
 800d486:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d48a:	68f8      	ldr	r0, [r7, #12]
 800d48c:	eeb0 2a47 	vmov.f32	s4, s14
 800d490:	eef0 1a45 	vmov.f32	s3, s10
 800d494:	eeb0 1a65 	vmov.f32	s2, s11
 800d498:	eef0 0a46 	vmov.f32	s1, s12
 800d49c:	eeb0 0a66 	vmov.f32	s0, s13
 800d4a0:	f7f5 fd9c 	bl	8002fdc <straight_table2>
			if(mollifier_mode == ON){
 800d4a4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d4a8:	2b01      	cmp	r3, #1
 800d4aa:	d10c      	bne.n	800d4c6 <V90R+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d4ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d4b0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d4b4:	eeb0 1a47 	vmov.f32	s2, s14
 800d4b8:	eddf 0a97 	vldr	s1, [pc, #604]	; 800d718 <V90R+0x338>
 800d4bc:	eeb0 0a67 	vmov.f32	s0, s15
 800d4c0:	f7f6 fd02 	bl	8003ec8 <mollifier_slalom_table>
 800d4c4:	e015      	b.n	800d4f2 <V90R+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d4c6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d4ca:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d4ce:	eef1 7a67 	vneg.f32	s15, s15
 800d4d2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d4d6:	eef0 2a66 	vmov.f32	s5, s13
 800d4da:	eeb0 2a67 	vmov.f32	s4, s15
 800d4de:	eddf 1a8d 	vldr	s3, [pc, #564]	; 800d714 <V90R+0x334>
 800d4e2:	ed9f 1a8c 	vldr	s2, [pc, #560]	; 800d714 <V90R+0x334>
 800d4e6:	eddf 0a8c 	vldr	s1, [pc, #560]	; 800d718 <V90R+0x338>
 800d4ea:	eeb0 0a47 	vmov.f32	s0, s14
 800d4ee:	f7f6 fb9b 	bl	8003c28 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	73fb      	strb	r3, [r7, #15]
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f7f3 f84b 	bl	8000598 <__aeabi_f2d>
 800d502:	a37f      	add	r3, pc, #508	; (adr r3, 800d700 <V90R+0x320>)
 800d504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d508:	f7f2 fee8 	bl	80002dc <__adddf3>
 800d50c:	4602      	mov	r2, r0
 800d50e:	460b      	mov	r3, r1
 800d510:	4610      	mov	r0, r2
 800d512:	4619      	mov	r1, r3
 800d514:	f7f3 fb70 	bl	8000bf8 <__aeabi_d2f>
 800d518:	4603      	mov	r3, r0
 800d51a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d51e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d522:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d526:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d52a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d52e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d532:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d536:	eddf 5a75 	vldr	s11, [pc, #468]	; 800d70c <V90R+0x32c>
 800d53a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d53e:	68f8      	ldr	r0, [r7, #12]
 800d540:	eeb0 2a47 	vmov.f32	s4, s14
 800d544:	eef0 1a46 	vmov.f32	s3, s12
 800d548:	ed9f 1a72 	vldr	s2, [pc, #456]	; 800d714 <V90R+0x334>
 800d54c:	eef0 0a66 	vmov.f32	s1, s13
 800d550:	ee00 3a10 	vmov	s0, r3
 800d554:	f7f5 fd42 	bl	8002fdc <straight_table2>
			highspeed_mode = 0;
 800d558:	4b6b      	ldr	r3, [pc, #428]	; (800d708 <V90R+0x328>)
 800d55a:	2200      	movs	r2, #0
 800d55c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d55e:	e13e      	b.n	800d7de <V90R+0x3fe>
		}else if (test_mode >= 2) {
 800d560:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d564:	2b01      	cmp	r3, #1
 800d566:	f240 808c 	bls.w	800d682 <V90R+0x2a2>
		highspeed_mode = 1;
 800d56a:	4b67      	ldr	r3, [pc, #412]	; (800d708 <V90R+0x328>)
 800d56c:	2201      	movs	r2, #1
 800d56e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d570:	2300      	movs	r3, #0
 800d572:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d574:	2300      	movs	r3, #0
 800d576:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d578:	2303      	movs	r3, #3
 800d57a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d57c:	2300      	movs	r3, #0
 800d57e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d580:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d584:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d588:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d58c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d590:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d594:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d598:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d59c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d5a0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d5a4:	eddf 4a59 	vldr	s9, [pc, #356]	; 800d70c <V90R+0x32c>
 800d5a8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d5ac:	68f8      	ldr	r0, [r7, #12]
 800d5ae:	eeb0 2a47 	vmov.f32	s4, s14
 800d5b2:	eef0 1a45 	vmov.f32	s3, s10
 800d5b6:	eeb0 1a65 	vmov.f32	s2, s11
 800d5ba:	eef0 0a46 	vmov.f32	s1, s12
 800d5be:	eeb0 0a66 	vmov.f32	s0, s13
 800d5c2:	f7f5 fd0b 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d5c6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d5ca:	2b01      	cmp	r3, #1
 800d5cc:	d10c      	bne.n	800d5e8 <V90R+0x208>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d5ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d5d2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d5d6:	eeb0 1a47 	vmov.f32	s2, s14
 800d5da:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800d718 <V90R+0x338>
 800d5de:	eeb0 0a67 	vmov.f32	s0, s15
 800d5e2:	f7f6 fc71 	bl	8003ec8 <mollifier_slalom_table>
 800d5e6:	e015      	b.n	800d614 <V90R+0x234>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d5e8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d5ec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d5f0:	eef1 7a67 	vneg.f32	s15, s15
 800d5f4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d5f8:	eef0 2a66 	vmov.f32	s5, s13
 800d5fc:	eeb0 2a67 	vmov.f32	s4, s15
 800d600:	eddf 1a44 	vldr	s3, [pc, #272]	; 800d714 <V90R+0x334>
 800d604:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800d714 <V90R+0x334>
 800d608:	eddf 0a43 	vldr	s1, [pc, #268]	; 800d718 <V90R+0x338>
 800d60c:	eeb0 0a47 	vmov.f32	s0, s14
 800d610:	f7f6 fb0a 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800d614:	2300      	movs	r3, #0
 800d616:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d618:	2300      	movs	r3, #0
 800d61a:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d61e:	4618      	mov	r0, r3
 800d620:	f7f2 ffba 	bl	8000598 <__aeabi_f2d>
 800d624:	a336      	add	r3, pc, #216	; (adr r3, 800d700 <V90R+0x320>)
 800d626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d62a:	f7f2 fe57 	bl	80002dc <__adddf3>
 800d62e:	4602      	mov	r2, r0
 800d630:	460b      	mov	r3, r1
 800d632:	4610      	mov	r0, r2
 800d634:	4619      	mov	r1, r3
 800d636:	f7f3 fadf 	bl	8000bf8 <__aeabi_d2f>
 800d63a:	4603      	mov	r3, r0
 800d63c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d640:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d644:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d648:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d64c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d650:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d654:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d658:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800d70c <V90R+0x32c>
 800d65c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d660:	68f8      	ldr	r0, [r7, #12]
 800d662:	eeb0 2a47 	vmov.f32	s4, s14
 800d666:	eef0 1a46 	vmov.f32	s3, s12
 800d66a:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800d714 <V90R+0x334>
 800d66e:	eef0 0a66 	vmov.f32	s1, s13
 800d672:	ee00 3a10 	vmov	s0, r3
 800d676:	f7f5 fcb1 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800d67a:	4b23      	ldr	r3, [pc, #140]	; (800d708 <V90R+0x328>)
 800d67c:	2200      	movs	r2, #0
 800d67e:	701a      	strb	r2, [r3, #0]
}
 800d680:	e0ad      	b.n	800d7de <V90R+0x3fe>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d682:	2300      	movs	r3, #0
 800d684:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d686:	2300      	movs	r3, #0
 800d688:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d68a:	2303      	movs	r3, #3
 800d68c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d68e:	2300      	movs	r3, #0
 800d690:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d692:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d696:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d69a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d69e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d6a2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d6a6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d6aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6ae:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d6b2:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d6b6:	eddf 4a15 	vldr	s9, [pc, #84]	; 800d70c <V90R+0x32c>
 800d6ba:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d6be:	68f8      	ldr	r0, [r7, #12]
 800d6c0:	eeb0 2a47 	vmov.f32	s4, s14
 800d6c4:	eef0 1a45 	vmov.f32	s3, s10
 800d6c8:	eeb0 1a65 	vmov.f32	s2, s11
 800d6cc:	eef0 0a46 	vmov.f32	s1, s12
 800d6d0:	eeb0 0a66 	vmov.f32	s0, s13
 800d6d4:	f7f5 fc82 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d6d8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d6dc:	2b01      	cmp	r3, #1
 800d6de:	d11d      	bne.n	800d71c <V90R+0x33c>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d6e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d6e4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d6e8:	eeb0 1a47 	vmov.f32	s2, s14
 800d6ec:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800d718 <V90R+0x338>
 800d6f0:	eeb0 0a67 	vmov.f32	s0, s15
 800d6f4:	f7f6 fbe8 	bl	8003ec8 <mollifier_slalom_table>
 800d6f8:	e026      	b.n	800d748 <V90R+0x368>
 800d6fa:	bf00      	nop
 800d6fc:	f3af 8000 	nop.w
 800d700:	c022ec18 	.word	0xc022ec18
 800d704:	405fd1de 	.word	0x405fd1de
 800d708:	20000808 	.word	0x20000808
 800d70c:	42340000 	.word	0x42340000
 800d710:	42c4477b 	.word	0x42c4477b
 800d714:	00000000 	.word	0x00000000
 800d718:	c2b40000 	.word	0xc2b40000
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d71c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d720:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d724:	eef1 7a67 	vneg.f32	s15, s15
 800d728:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d72c:	eef0 2a66 	vmov.f32	s5, s13
 800d730:	eeb0 2a67 	vmov.f32	s4, s15
 800d734:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800d714 <V90R+0x334>
 800d738:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800d714 <V90R+0x334>
 800d73c:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800d718 <V90R+0x338>
 800d740:	eeb0 0a47 	vmov.f32	s0, s14
 800d744:	f7f6 fa70 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800d748:	2303      	movs	r3, #3
 800d74a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d74c:	2300      	movs	r3, #0
 800d74e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d750:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d754:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d758:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d75c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d760:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d764:	edd7 7a01 	vldr	s15, [r7, #4]
 800d768:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d76c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d770:	eef0 7ae7 	vabs.f32	s15, s15
 800d774:	ee17 0a90 	vmov	r0, s15
 800d778:	f7f2 ff0e 	bl	8000598 <__aeabi_f2d>
 800d77c:	f04f 0200 	mov.w	r2, #0
 800d780:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d784:	f7f3 f88a 	bl	800089c <__aeabi_ddiv>
 800d788:	4602      	mov	r2, r0
 800d78a:	460b      	mov	r3, r1
 800d78c:	4614      	mov	r4, r2
 800d78e:	461d      	mov	r5, r3
 800d790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d792:	4618      	mov	r0, r3
 800d794:	f7f2 ff00 	bl	8000598 <__aeabi_f2d>
 800d798:	4602      	mov	r2, r0
 800d79a:	460b      	mov	r3, r1
 800d79c:	4620      	mov	r0, r4
 800d79e:	4629      	mov	r1, r5
 800d7a0:	f7f3 f87c 	bl	800089c <__aeabi_ddiv>
 800d7a4:	4602      	mov	r2, r0
 800d7a6:	460b      	mov	r3, r1
 800d7a8:	4610      	mov	r0, r2
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	f04f 0200 	mov.w	r2, #0
 800d7b0:	4b0f      	ldr	r3, [pc, #60]	; (800d7f0 <V90R+0x410>)
 800d7b2:	f7f2 fd93 	bl	80002dc <__adddf3>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d7ba:	4610      	mov	r0, r2
 800d7bc:	4619      	mov	r1, r3
 800d7be:	f7f3 fa1b 	bl	8000bf8 <__aeabi_d2f>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	68f8      	ldr	r0, [r7, #12]
 800d7c6:	ee02 3a10 	vmov	s4, r3
 800d7ca:	edd7 1a01 	vldr	s3, [r7, #4]
 800d7ce:	ed97 1a01 	vldr	s2, [r7, #4]
 800d7d2:	eef0 0a68 	vmov.f32	s1, s17
 800d7d6:	eeb0 0a48 	vmov.f32	s0, s16
 800d7da:	f7f5 fbff 	bl	8002fdc <straight_table2>
}
 800d7de:	bf00      	nop
 800d7e0:	3710      	adds	r7, #16
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	ecbd 8b02 	vpop	{d8}
 800d7e8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d7ec:	b004      	add	sp, #16
 800d7ee:	4770      	bx	lr
 800d7f0:	408f4000 	.word	0x408f4000
 800d7f4:	00000000 	.word	0x00000000

0800d7f8 <V90L>:

void V90L(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d7f8:	b084      	sub	sp, #16
 800d7fa:	b5b0      	push	{r4, r5, r7, lr}
 800d7fc:	ed2d 8b02 	vpush	{d8}
 800d800:	b084      	sub	sp, #16
 800d802:	af00      	add	r7, sp, #0
 800d804:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d808:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d80c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d810:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d814:	2b01      	cmp	r3, #1
 800d816:	f040 80ad 	bne.w	800d974 <V90L+0x17c>
				highspeed_mode = 1;
 800d81a:	4bbf      	ldr	r3, [pc, #764]	; (800db18 <V90L+0x320>)
 800d81c:	2201      	movs	r2, #1
 800d81e:	701a      	strb	r2, [r3, #0]
				wallmode.WallControlMode=0;
 800d820:	2300      	movs	r3, #0
 800d822:	733b      	strb	r3, [r7, #12]
				wallmode.WallControlStatus=0;
 800d824:	2300      	movs	r3, #0
 800d826:	737b      	strb	r3, [r7, #13]
				wallmode.WallCutMode=0;
 800d828:	2300      	movs	r3, #0
 800d82a:	73fb      	strb	r3, [r7, #15]
				wallmode.calMazeMode=0;
 800d82c:	2300      	movs	r3, #0
 800d82e:	73bb      	strb	r3, [r7, #14]
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d830:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d834:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
							turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d838:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d83c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d840:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d844:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d848:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d84c:	eddf 5ab3 	vldr	s11, [pc, #716]	; 800db1c <V90L+0x324>
 800d850:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d854:	68f8      	ldr	r0, [r7, #12]
 800d856:	eeb0 2a47 	vmov.f32	s4, s14
 800d85a:	eef0 1a46 	vmov.f32	s3, s12
 800d85e:	eeb0 1a66 	vmov.f32	s2, s13
 800d862:	eddf 0ab0 	vldr	s1, [pc, #704]	; 800db24 <V90L+0x32c>
 800d866:	ed9f 0aae 	vldr	s0, [pc, #696]	; 800db20 <V90L+0x328>
 800d86a:	f7f5 fbb7 	bl	8002fdc <straight_table2>
				wallmode.WallControlMode=0;
 800d86e:	2300      	movs	r3, #0
 800d870:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=4;
 800d872:	2304      	movs	r3, #4
 800d874:	73fb      	strb	r3, [r7, #15]
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d876:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d87a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d87e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d882:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d886:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d88a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d88e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d892:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d896:	eec7 7a24 	vdiv.f32	s15, s14, s9
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d89a:	eddf 4aa0 	vldr	s9, [pc, #640]	; 800db1c <V90L+0x324>
 800d89e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d8a2:	68f8      	ldr	r0, [r7, #12]
 800d8a4:	eeb0 2a47 	vmov.f32	s4, s14
 800d8a8:	eef0 1a45 	vmov.f32	s3, s10
 800d8ac:	eeb0 1a65 	vmov.f32	s2, s11
 800d8b0:	eef0 0a46 	vmov.f32	s1, s12
 800d8b4:	eeb0 0a66 	vmov.f32	s0, s13
 800d8b8:	f7f5 fb90 	bl	8002fdc <straight_table2>
				if(mollifier_mode == ON){
 800d8bc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	d10c      	bne.n	800d8de <V90L+0xe6>
					mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800d8c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d8c8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d8cc:	eeb0 1a47 	vmov.f32	s2, s14
 800d8d0:	eddf 0a95 	vldr	s1, [pc, #596]	; 800db28 <V90L+0x330>
 800d8d4:	eeb0 0a67 	vmov.f32	s0, s15
 800d8d8:	f7f6 faf6 	bl	8003ec8 <mollifier_slalom_table>
 800d8dc:	e013      	b.n	800d906 <V90L+0x10e>
				}else{
					slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d8de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d8e2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d8e6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d8ea:	eef0 2a66 	vmov.f32	s5, s13
 800d8ee:	eeb0 2a47 	vmov.f32	s4, s14
 800d8f2:	eddf 1a8c 	vldr	s3, [pc, #560]	; 800db24 <V90L+0x32c>
 800d8f6:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 800db24 <V90L+0x32c>
 800d8fa:	eddf 0a8b 	vldr	s1, [pc, #556]	; 800db28 <V90L+0x330>
 800d8fe:	eeb0 0a67 	vmov.f32	s0, s15
 800d902:	f7f6 f991 	bl	8003c28 <slalom_table2>
				}
				wallmode.WallControlMode=0;
 800d906:	2300      	movs	r3, #0
 800d908:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=0;
 800d90a:	2300      	movs	r3, #0
 800d90c:	73fb      	strb	r3, [r7, #15]
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d910:	4618      	mov	r0, r3
 800d912:	f7f2 fe41 	bl	8000598 <__aeabi_f2d>
 800d916:	a37e      	add	r3, pc, #504	; (adr r3, 800db10 <V90L+0x318>)
 800d918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d91c:	f7f2 fcde 	bl	80002dc <__adddf3>
 800d920:	4602      	mov	r2, r0
 800d922:	460b      	mov	r3, r1
 800d924:	4610      	mov	r0, r2
 800d926:	4619      	mov	r1, r3
 800d928:	f7f3 f966 	bl	8000bf8 <__aeabi_d2f>
 800d92c:	4603      	mov	r3, r0
 800d92e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d932:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d936:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d93a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d93e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d942:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d946:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d94a:	eddf 5a74 	vldr	s11, [pc, #464]	; 800db1c <V90L+0x324>
 800d94e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d952:	68f8      	ldr	r0, [r7, #12]
 800d954:	eeb0 2a47 	vmov.f32	s4, s14
 800d958:	eef0 1a46 	vmov.f32	s3, s12
 800d95c:	ed9f 1a71 	vldr	s2, [pc, #452]	; 800db24 <V90L+0x32c>
 800d960:	eef0 0a66 	vmov.f32	s1, s13
 800d964:	ee00 3a10 	vmov	s0, r3
 800d968:	f7f5 fb38 	bl	8002fdc <straight_table2>
				highspeed_mode = 0;
 800d96c:	4b6a      	ldr	r3, [pc, #424]	; (800db18 <V90L+0x320>)
 800d96e:	2200      	movs	r2, #0
 800d970:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d972:	e13a      	b.n	800dbea <V90L+0x3f2>
			}else if (test_mode >= 2) {
 800d974:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d978:	2b01      	cmp	r3, #1
 800d97a:	f240 808a 	bls.w	800da92 <V90L+0x29a>
		highspeed_mode = 1;
 800d97e:	4b66      	ldr	r3, [pc, #408]	; (800db18 <V90L+0x320>)
 800d980:	2201      	movs	r2, #1
 800d982:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d984:	2300      	movs	r3, #0
 800d986:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d988:	2300      	movs	r3, #0
 800d98a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d98c:	2304      	movs	r3, #4
 800d98e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d990:	2300      	movs	r3, #0
 800d992:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d994:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d998:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d99c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d9a0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d9a4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d9a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d9ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d9b0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d9b4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d9b8:	eddf 4a58 	vldr	s9, [pc, #352]	; 800db1c <V90L+0x324>
 800d9bc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d9c0:	68f8      	ldr	r0, [r7, #12]
 800d9c2:	eeb0 2a47 	vmov.f32	s4, s14
 800d9c6:	eef0 1a45 	vmov.f32	s3, s10
 800d9ca:	eeb0 1a65 	vmov.f32	s2, s11
 800d9ce:	eef0 0a46 	vmov.f32	s1, s12
 800d9d2:	eeb0 0a66 	vmov.f32	s0, s13
 800d9d6:	f7f5 fb01 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d9da:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d9de:	2b01      	cmp	r3, #1
 800d9e0:	d10c      	bne.n	800d9fc <V90L+0x204>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800d9e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d9e6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d9ea:	eeb0 1a47 	vmov.f32	s2, s14
 800d9ee:	eddf 0a4e 	vldr	s1, [pc, #312]	; 800db28 <V90L+0x330>
 800d9f2:	eeb0 0a67 	vmov.f32	s0, s15
 800d9f6:	f7f6 fa67 	bl	8003ec8 <mollifier_slalom_table>
 800d9fa:	e013      	b.n	800da24 <V90L+0x22c>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d9fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800da00:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800da04:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800da08:	eef0 2a66 	vmov.f32	s5, s13
 800da0c:	eeb0 2a47 	vmov.f32	s4, s14
 800da10:	eddf 1a44 	vldr	s3, [pc, #272]	; 800db24 <V90L+0x32c>
 800da14:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800db24 <V90L+0x32c>
 800da18:	eddf 0a43 	vldr	s1, [pc, #268]	; 800db28 <V90L+0x330>
 800da1c:	eeb0 0a67 	vmov.f32	s0, s15
 800da20:	f7f6 f902 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800da24:	2300      	movs	r3, #0
 800da26:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800da28:	2300      	movs	r3, #0
 800da2a:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800da2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2e:	4618      	mov	r0, r3
 800da30:	f7f2 fdb2 	bl	8000598 <__aeabi_f2d>
 800da34:	a336      	add	r3, pc, #216	; (adr r3, 800db10 <V90L+0x318>)
 800da36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da3a:	f7f2 fc4f 	bl	80002dc <__adddf3>
 800da3e:	4602      	mov	r2, r0
 800da40:	460b      	mov	r3, r1
 800da42:	4610      	mov	r0, r2
 800da44:	4619      	mov	r1, r3
 800da46:	f7f3 f8d7 	bl	8000bf8 <__aeabi_d2f>
 800da4a:	4603      	mov	r3, r0
 800da4c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800da50:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800da54:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800da58:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800da5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da60:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800da64:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800da68:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800db1c <V90L+0x324>
 800da6c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800da70:	68f8      	ldr	r0, [r7, #12]
 800da72:	eeb0 2a47 	vmov.f32	s4, s14
 800da76:	eef0 1a46 	vmov.f32	s3, s12
 800da7a:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800db24 <V90L+0x32c>
 800da7e:	eef0 0a66 	vmov.f32	s1, s13
 800da82:	ee00 3a10 	vmov	s0, r3
 800da86:	f7f5 faa9 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800da8a:	4b23      	ldr	r3, [pc, #140]	; (800db18 <V90L+0x320>)
 800da8c:	2200      	movs	r2, #0
 800da8e:	701a      	strb	r2, [r3, #0]
}
 800da90:	e0ab      	b.n	800dbea <V90L+0x3f2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800da92:	2300      	movs	r3, #0
 800da94:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800da96:	2300      	movs	r3, #0
 800da98:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800da9a:	2304      	movs	r3, #4
 800da9c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800da9e:	2300      	movs	r3, #0
 800daa0:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800daa2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800daa6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800daaa:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800daae:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800dab2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dab6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800daba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dabe:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800dac2:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dac6:	eddf 4a15 	vldr	s9, [pc, #84]	; 800db1c <V90L+0x324>
 800daca:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800dace:	68f8      	ldr	r0, [r7, #12]
 800dad0:	eeb0 2a47 	vmov.f32	s4, s14
 800dad4:	eef0 1a45 	vmov.f32	s3, s10
 800dad8:	eeb0 1a65 	vmov.f32	s2, s11
 800dadc:	eef0 0a46 	vmov.f32	s1, s12
 800dae0:	eeb0 0a66 	vmov.f32	s0, s13
 800dae4:	f7f5 fa7a 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800dae8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800daec:	2b01      	cmp	r3, #1
 800daee:	d11d      	bne.n	800db2c <V90L+0x334>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800daf0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800daf4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800daf8:	eeb0 1a47 	vmov.f32	s2, s14
 800dafc:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800db28 <V90L+0x330>
 800db00:	eeb0 0a67 	vmov.f32	s0, s15
 800db04:	f7f6 f9e0 	bl	8003ec8 <mollifier_slalom_table>
 800db08:	e024      	b.n	800db54 <V90L+0x35c>
 800db0a:	bf00      	nop
 800db0c:	f3af 8000 	nop.w
 800db10:	c022ec18 	.word	0xc022ec18
 800db14:	405fd1de 	.word	0x405fd1de
 800db18:	20000808 	.word	0x20000808
 800db1c:	42340000 	.word	0x42340000
 800db20:	42d4477b 	.word	0x42d4477b
 800db24:	00000000 	.word	0x00000000
 800db28:	42b40000 	.word	0x42b40000
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800db2c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db30:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800db34:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800db38:	eef0 2a66 	vmov.f32	s5, s13
 800db3c:	eeb0 2a47 	vmov.f32	s4, s14
 800db40:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800db24 <V90L+0x32c>
 800db44:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800db24 <V90L+0x32c>
 800db48:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800db28 <V90L+0x330>
 800db4c:	eeb0 0a67 	vmov.f32	s0, s15
 800db50:	f7f6 f86a 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800db54:	2303      	movs	r3, #3
 800db56:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800db58:	2300      	movs	r3, #0
 800db5a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800db5c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800db60:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800db64:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800db68:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db70:	edd7 7a01 	vldr	s15, [r7, #4]
 800db74:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800db78:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db7c:	eef0 7ae7 	vabs.f32	s15, s15
 800db80:	ee17 0a90 	vmov	r0, s15
 800db84:	f7f2 fd08 	bl	8000598 <__aeabi_f2d>
 800db88:	f04f 0200 	mov.w	r2, #0
 800db8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800db90:	f7f2 fe84 	bl	800089c <__aeabi_ddiv>
 800db94:	4602      	mov	r2, r0
 800db96:	460b      	mov	r3, r1
 800db98:	4614      	mov	r4, r2
 800db9a:	461d      	mov	r5, r3
 800db9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9e:	4618      	mov	r0, r3
 800dba0:	f7f2 fcfa 	bl	8000598 <__aeabi_f2d>
 800dba4:	4602      	mov	r2, r0
 800dba6:	460b      	mov	r3, r1
 800dba8:	4620      	mov	r0, r4
 800dbaa:	4629      	mov	r1, r5
 800dbac:	f7f2 fe76 	bl	800089c <__aeabi_ddiv>
 800dbb0:	4602      	mov	r2, r0
 800dbb2:	460b      	mov	r3, r1
 800dbb4:	4610      	mov	r0, r2
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	f04f 0200 	mov.w	r2, #0
 800dbbc:	4b0f      	ldr	r3, [pc, #60]	; (800dbfc <V90L+0x404>)
 800dbbe:	f7f2 fb8d 	bl	80002dc <__adddf3>
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800dbc6:	4610      	mov	r0, r2
 800dbc8:	4619      	mov	r1, r3
 800dbca:	f7f3 f815 	bl	8000bf8 <__aeabi_d2f>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	68f8      	ldr	r0, [r7, #12]
 800dbd2:	ee02 3a10 	vmov	s4, r3
 800dbd6:	edd7 1a01 	vldr	s3, [r7, #4]
 800dbda:	ed97 1a01 	vldr	s2, [r7, #4]
 800dbde:	eef0 0a68 	vmov.f32	s1, s17
 800dbe2:	eeb0 0a48 	vmov.f32	s0, s16
 800dbe6:	f7f5 f9f9 	bl	8002fdc <straight_table2>
}
 800dbea:	bf00      	nop
 800dbec:	3710      	adds	r7, #16
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	ecbd 8b02 	vpop	{d8}
 800dbf4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800dbf8:	b004      	add	sp, #16
 800dbfa:	4770      	bx	lr
 800dbfc:	408f4000 	.word	0x408f4000

0800dc00 <testturning>:


void testturning(parameter_speed Howspeed,int turnmode,char shortest_mode,char funmode,float funduty,char mollifier_mode){
 800dc00:	b084      	sub	sp, #16
 800dc02:	b580      	push	{r7, lr}
 800dc04:	b086      	sub	sp, #24
 800dc06:	af04      	add	r7, sp, #16
 800dc08:	f107 0c10 	add.w	ip, r7, #16
 800dc0c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800dc10:	ed87 0a01 	vstr	s0, [r7, #4]
	//0=slalomR,1=slalomL,2=90R,3=90L,4=180R,5=180L,6=in45R,7=in45L,8=in135R,9=in135L
	//10=out45R,11=out45L,12=out135R,13=out135L,14=V90R,15=V90L
	if(funmode==ON){
 800dc14:	f897 3160 	ldrb.w	r3, [r7, #352]	; 0x160
 800dc18:	2b01      	cmp	r3, #1
 800dc1a:	d116      	bne.n	800dc4a <testturning+0x4a>
		pl_DriveMotor_standby(ON);
 800dc1c:	2001      	movs	r0, #1
 800dc1e:	f7f9 fe57 	bl	80078d0 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800dc22:	2003      	movs	r0, #3
 800dc24:	f7f9 fe5e 	bl	80078e4 <pl_L_DriveMotor_mode>
		pl_FunMotor_duty(funduty);
 800dc28:	ed97 0a01 	vldr	s0, [r7, #4]
 800dc2c:	f7f9 feee 	bl	8007a0c <pl_FunMotor_duty>
		pl_FunMotor_start();
 800dc30:	f7f9 fed8 	bl	80079e4 <pl_FunMotor_start>
		HAL_Delay(600);
 800dc34:	f44f 7016 	mov.w	r0, #600	; 0x258
 800dc38:	f00b f88e 	bl	8018d58 <HAL_Delay>
		reset_gyro();
 800dc3c:	f7f3 fd94 	bl	8001768 <reset_gyro>
		reset_speed();
 800dc40:	f7f3 f9ea 	bl	8001018 <reset_speed>
		clear_Ierror();
 800dc44:	f7f6 fcb4 	bl	80045b0 <clear_Ierror>
 800dc48:	e00b      	b.n	800dc62 <testturning+0x62>

	}else{
		pl_DriveMotor_standby(ON);
 800dc4a:	2001      	movs	r0, #1
 800dc4c:	f7f9 fe40 	bl	80078d0 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800dc50:	2003      	movs	r0, #3
 800dc52:	f7f9 fe47 	bl	80078e4 <pl_L_DriveMotor_mode>
		reset_gyro();
 800dc56:	f7f3 fd87 	bl	8001768 <reset_gyro>
		reset_speed();
 800dc5a:	f7f3 f9dd 	bl	8001018 <reset_speed>
		clear_Ierror();
 800dc5e:	f7f6 fca7 	bl	80045b0 <clear_Ierror>

	}
	record_mode=2;
 800dc62:	4ba8      	ldr	r3, [pc, #672]	; (800df04 <testturning+0x304>)
 800dc64:	2202      	movs	r2, #2
 800dc66:	701a      	strb	r2, [r3, #0]
//	if(turnmode==0){test_mollifier_slalomR(Howspeed.slalom_R);}
	if(turnmode==0){slalomR(Howspeed.slalom_R,ON,shortest_mode,mollifier_mode,-100);}
 800dc68:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d110      	bne.n	800dc92 <testturning+0x92>
 800dc70:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dc74:	9303      	str	r3, [sp, #12]
 800dc76:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800dc7a:	9302      	str	r3, [sp, #8]
 800dc7c:	2301      	movs	r3, #1
 800dc7e:	9301      	str	r3, [sp, #4]
 800dc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc82:	9300      	str	r3, [sp, #0]
 800dc84:	f107 0318 	add.w	r3, r7, #24
 800dc88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc8a:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 800df08 <testturning+0x308>
 800dc8e:	f7fc f973 	bl	8009f78 <slalomR>
	if(turnmode==1){slalomL(Howspeed.slalom_L,ON,shortest_mode,mollifier_mode,-100);}
 800dc92:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dc96:	2b01      	cmp	r3, #1
 800dc98:	d110      	bne.n	800dcbc <testturning+0xbc>
 800dc9a:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dc9e:	9303      	str	r3, [sp, #12]
 800dca0:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800dca4:	9302      	str	r3, [sp, #8]
 800dca6:	2301      	movs	r3, #1
 800dca8:	9301      	str	r3, [sp, #4]
 800dcaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcac:	9300      	str	r3, [sp, #0]
 800dcae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dcb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dcb4:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800df08 <testturning+0x308>
 800dcb8:	f7fc fb44 	bl	800a344 <slalomL>
	if(turnmode==2){turn90R(Howspeed.turn90_R,ON,mollifier_mode,-100);}
 800dcbc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dcc0:	2b02      	cmp	r3, #2
 800dcc2:	d10d      	bne.n	800dce0 <testturning+0xe0>
 800dcc4:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dcc8:	9302      	str	r3, [sp, #8]
 800dcca:	2301      	movs	r3, #1
 800dccc:	9301      	str	r3, [sp, #4]
 800dcce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcd0:	9300      	str	r3, [sp, #0]
 800dcd2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800dcd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dcd8:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800df08 <testturning+0x308>
 800dcdc:	f7fc fd14 	bl	800a708 <turn90R>
	if(turnmode==3){turn90L(Howspeed.turn90_L,ON,mollifier_mode,-100);}
 800dce0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dce4:	2b03      	cmp	r3, #3
 800dce6:	d10d      	bne.n	800dd04 <testturning+0x104>
 800dce8:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dcec:	9302      	str	r3, [sp, #8]
 800dcee:	2301      	movs	r3, #1
 800dcf0:	9301      	str	r3, [sp, #4]
 800dcf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dcf4:	9300      	str	r3, [sp, #0]
 800dcf6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800dcfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dcfc:	ed9f 0a82 	vldr	s0, [pc, #520]	; 800df08 <testturning+0x308>
 800dd00:	f7fc fe6c 	bl	800a9dc <turn90L>
	if(turnmode==4){turn180R(Howspeed.turn180_R,ON,mollifier_mode,-100);}
 800dd04:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd08:	2b04      	cmp	r3, #4
 800dd0a:	d10d      	bne.n	800dd28 <testturning+0x128>
 800dd0c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd10:	9302      	str	r3, [sp, #8]
 800dd12:	2301      	movs	r3, #1
 800dd14:	9301      	str	r3, [sp, #4]
 800dd16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd18:	9300      	str	r3, [sp, #0]
 800dd1a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800dd1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd20:	ed9f 0a79 	vldr	s0, [pc, #484]	; 800df08 <testturning+0x308>
 800dd24:	f7fc ffbe 	bl	800aca4 <turn180R>
	if(turnmode==5){turn180L(Howspeed.turn180_L,ON,mollifier_mode,-100);}
 800dd28:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd2c:	2b05      	cmp	r3, #5
 800dd2e:	d10e      	bne.n	800dd4e <testturning+0x14e>
 800dd30:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd34:	9302      	str	r3, [sp, #8]
 800dd36:	2301      	movs	r3, #1
 800dd38:	9301      	str	r3, [sp, #4]
 800dd3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd3e:	9300      	str	r3, [sp, #0]
 800dd40:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800dd44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd46:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800df08 <testturning+0x308>
 800dd4a:	f7fd f915 	bl	800af78 <turn180L>
	if(turnmode==6){turn45inR(Howspeed.turn45in_R,ON,mollifier_mode,-100);}
 800dd4e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd52:	2b06      	cmp	r3, #6
 800dd54:	d10e      	bne.n	800dd74 <testturning+0x174>
 800dd56:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd5a:	9302      	str	r3, [sp, #8]
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	9301      	str	r3, [sp, #4]
 800dd60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dd64:	9300      	str	r3, [sp, #0]
 800dd66:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800dd6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd6c:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800df08 <testturning+0x308>
 800dd70:	f7fd fa6a 	bl	800b248 <turn45inR>
	if(turnmode==7){turn45inL(Howspeed.turn45in_L,ON,mollifier_mode,-100);}
 800dd74:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd78:	2b07      	cmp	r3, #7
 800dd7a:	d10e      	bne.n	800dd9a <testturning+0x19a>
 800dd7c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd80:	9302      	str	r3, [sp, #8]
 800dd82:	2301      	movs	r3, #1
 800dd84:	9301      	str	r3, [sp, #4]
 800dd86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dd8a:	9300      	str	r3, [sp, #0]
 800dd8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800dd90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd92:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800df08 <testturning+0x308>
 800dd96:	f7fd fc9f 	bl	800b6d8 <turn45inL>
	if(turnmode==8){turn135inR(Howspeed.turn135in_R,ON,mollifier_mode,-100);}
 800dd9a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd9e:	2b08      	cmp	r3, #8
 800dda0:	d10e      	bne.n	800ddc0 <testturning+0x1c0>
 800dda2:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dda6:	9302      	str	r3, [sp, #8]
 800dda8:	2301      	movs	r3, #1
 800ddaa:	9301      	str	r3, [sp, #4]
 800ddac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ddb0:	9300      	str	r3, [sp, #0]
 800ddb2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800ddb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ddb8:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800df08 <testturning+0x308>
 800ddbc:	f7fd fecc 	bl	800bb58 <turn135inR>
	if(turnmode==9){turn135inL(Howspeed.turn135in_L,ON,mollifier_mode,-100);}
 800ddc0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800ddc4:	2b09      	cmp	r3, #9
 800ddc6:	d10e      	bne.n	800dde6 <testturning+0x1e6>
 800ddc8:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800ddcc:	9302      	str	r3, [sp, #8]
 800ddce:	2301      	movs	r3, #1
 800ddd0:	9301      	str	r3, [sp, #4]
 800ddd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddd6:	9300      	str	r3, [sp, #0]
 800ddd8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800dddc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ddde:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800df08 <testturning+0x308>
 800dde2:	f7fe f901 	bl	800bfe8 <turn135inL>
	if(turnmode==10){turn45outR(Howspeed.turn45out_R,ON,mollifier_mode,-100);}
 800dde6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800ddea:	2b0a      	cmp	r3, #10
 800ddec:	d10e      	bne.n	800de0c <testturning+0x20c>
 800ddee:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800ddf2:	9302      	str	r3, [sp, #8]
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	9301      	str	r3, [sp, #4]
 800ddf8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ddfc:	9300      	str	r3, [sp, #0]
 800ddfe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800de02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de04:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800df08 <testturning+0x308>
 800de08:	f7fe fb32 	bl	800c470 <turn45outR>
	if(turnmode==11){turn45outL(Howspeed.turn45out_L,ON,mollifier_mode,-100);}
 800de0c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de10:	2b0b      	cmp	r3, #11
 800de12:	d10e      	bne.n	800de32 <testturning+0x232>
 800de14:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de18:	9302      	str	r3, [sp, #8]
 800de1a:	2301      	movs	r3, #1
 800de1c:	9301      	str	r3, [sp, #4]
 800de1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de22:	9300      	str	r3, [sp, #0]
 800de24:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800de28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de2a:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800df08 <testturning+0x308>
 800de2e:	f7fe fd11 	bl	800c854 <turn45outL>
	if(turnmode==12){turn135outR(Howspeed.turn135out_R,ON,mollifier_mode,-100);}
 800de32:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de36:	2b0c      	cmp	r3, #12
 800de38:	d10e      	bne.n	800de58 <testturning+0x258>
 800de3a:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de3e:	9302      	str	r3, [sp, #8]
 800de40:	2301      	movs	r3, #1
 800de42:	9301      	str	r3, [sp, #4]
 800de44:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800de48:	9300      	str	r3, [sp, #0]
 800de4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de50:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800df08 <testturning+0x308>
 800de54:	f7fe fee6 	bl	800cc24 <turn135outR>
	if(turnmode==13){turn135outL(Howspeed.turn135out_L,ON,mollifier_mode,-100);}
 800de58:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de5c:	2b0d      	cmp	r3, #13
 800de5e:	d10e      	bne.n	800de7e <testturning+0x27e>
 800de60:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de64:	9302      	str	r3, [sp, #8]
 800de66:	2301      	movs	r3, #1
 800de68:	9301      	str	r3, [sp, #4]
 800de6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800de6e:	9300      	str	r3, [sp, #0]
 800de70:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800de74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de76:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800df08 <testturning+0x308>
 800de7a:	f7ff f8c5 	bl	800d008 <turn135outL>
	if(turnmode==14){V90R(Howspeed.V90_R,ON,mollifier_mode,-100);}
 800de7e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de82:	2b0e      	cmp	r3, #14
 800de84:	d10e      	bne.n	800dea4 <testturning+0x2a4>
 800de86:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de8a:	9302      	str	r3, [sp, #8]
 800de8c:	2301      	movs	r3, #1
 800de8e:	9301      	str	r3, [sp, #4]
 800de90:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800de94:	9300      	str	r3, [sp, #0]
 800de96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800de9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de9c:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800df08 <testturning+0x308>
 800dea0:	f7ff fa9e 	bl	800d3e0 <V90R>
	if(turnmode==15){V90L(Howspeed.V90_L,ON,mollifier_mode,-100);}
 800dea4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dea8:	2b0f      	cmp	r3, #15
 800deaa:	d10e      	bne.n	800deca <testturning+0x2ca>
 800deac:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800deb0:	9302      	str	r3, [sp, #8]
 800deb2:	2301      	movs	r3, #1
 800deb4:	9301      	str	r3, [sp, #4]
 800deb6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800deba:	9300      	str	r3, [sp, #0]
 800debc:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800dec0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dec2:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800df08 <testturning+0x308>
 800dec6:	f7ff fc97 	bl	800d7f8 <V90L>
//	if(turnmode==12){turn135inL(Howspeed.turn135in_L, CONNECT);turn135outR(Howspeed.turn135out_R,CONNECT);}
//	if(turnmode==13){turn135inR(Howspeed.turn135in_R, CONNECT);turn135outL(Howspeed.turn135out_L,CONNECT);}
//	if(turnmode==14){turn45inL(Howspeed.turn45in_L, CONNECT);V90R(Howspeed.V90_R,CONNECT);}
//	if(turnmode==15){turn45inR(Howspeed.turn45in_R, CONNECT);V90L(Howspeed.V90_L,CONNECT);}

	record_mode=0;
 800deca:	4b0e      	ldr	r3, [pc, #56]	; (800df04 <testturning+0x304>)
 800decc:	2200      	movs	r2, #0
 800dece:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ded0:	2003      	movs	r0, #3
 800ded2:	f7f9 fd2f 	bl	8007934 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ded6:	2003      	movs	r0, #3
 800ded8:	f7f9 fd04 	bl	80078e4 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800dedc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dee0:	f7fa f826 	bl	8007f30 <wait_ms_NoReset>
	pl_FunMotor_stop();
 800dee4:	f7f9 fd88 	bl	80079f8 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 800dee8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800deec:	f7fa f820 	bl	8007f30 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 800def0:	2000      	movs	r0, #0
 800def2:	f7f9 fced 	bl	80078d0 <pl_DriveMotor_standby>

}
 800def6:	bf00      	nop
 800def8:	3708      	adds	r7, #8
 800defa:	46bd      	mov	sp, r7
 800defc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800df00:	b004      	add	sp, #16
 800df02:	4770      	bx	lr
 800df04:	2000edc0 	.word	0x2000edc0
 800df08:	c2c80000 	.word	0xc2c80000

0800df0c <update_coordinate>:
//char slant_break;
//拡張左手法***********************************************



void update_coordinate(int *x,int *y,int direction){
 800df0c:	b480      	push	{r7}
 800df0e:	b085      	sub	sp, #20
 800df10:	af00      	add	r7, sp, #0
 800df12:	60f8      	str	r0, [r7, #12]
 800df14:	60b9      	str	r1, [r7, #8]
 800df16:	607a      	str	r2, [r7, #4]
// int direction,int *x_coordinate,int *y_coordinate
//	*direction = *direction % 4;
//	if (*direction <= 0) {
//		*direction = *direction+4;
//	}
	switch (direction) {
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	3b01      	subs	r3, #1
 800df1c:	2b03      	cmp	r3, #3
 800df1e:	d823      	bhi.n	800df68 <update_coordinate+0x5c>
 800df20:	a201      	add	r2, pc, #4	; (adr r2, 800df28 <update_coordinate+0x1c>)
 800df22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df26:	bf00      	nop
 800df28:	0800df39 	.word	0x0800df39
 800df2c:	0800df45 	.word	0x0800df45
 800df30:	0800df51 	.word	0x0800df51
 800df34:	0800df5d 	.word	0x0800df5d
	case 1://北
		*y += 1;
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	1c5a      	adds	r2, r3, #1
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	601a      	str	r2, [r3, #0]
		break;
 800df42:	e011      	b.n	800df68 <update_coordinate+0x5c>
	case 2://東
		*x += 1;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	1c5a      	adds	r2, r3, #1
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	601a      	str	r2, [r3, #0]
		break;
 800df4e:	e00b      	b.n	800df68 <update_coordinate+0x5c>
	case 3://南
		*y -= 1;
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	1e5a      	subs	r2, r3, #1
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	601a      	str	r2, [r3, #0]
		break;
 800df5a:	e005      	b.n	800df68 <update_coordinate+0x5c>
	case 4://西
		*x -= 1;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	1e5a      	subs	r2, r3, #1
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	601a      	str	r2, [r3, #0]
		break;
 800df66:	bf00      	nop
	}



}
 800df68:	bf00      	nop
 800df6a:	3714      	adds	r7, #20
 800df6c:	46bd      	mov	sp, r7
 800df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df72:	4770      	bx	lr

0800df74 <AdatiWayReturn>:




void AdatiWayReturn(float input_StraightVelocity, float input_TurningVelocity, float input_StraightAcceleration,
		float input_TurningAcceleration, parameter_speed howspeed,int know_mode,uint8_t Dijkstra_mode) {
 800df74:	b084      	sub	sp, #16
 800df76:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df78:	b091      	sub	sp, #68	; 0x44
 800df7a:	af04      	add	r7, sp, #16
 800df7c:	ed87 0a03 	vstr	s0, [r7, #12]
 800df80:	edc7 0a02 	vstr	s1, [r7, #8]
 800df84:	ed87 1a01 	vstr	s2, [r7, #4]
 800df88:	edc7 1a00 	vstr	s3, [r7]
 800df8c:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800df90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	unsigned short front_count, right_count, back_count, left_count;
//	float v_e,v_ea;

	maze_mode = 1; //***************************************************************************************
 800df94:	4b7d      	ldr	r3, [pc, #500]	; (800e18c <AdatiWayReturn+0x218>)
 800df96:	2201      	movs	r2, #1
 800df98:	701a      	strb	r2, [r3, #0]
	//Avespeed = 700;
	pl_DriveMotor_standby(ON);
 800df9a:	2001      	movs	r0, #1
 800df9c:	f7f9 fc98 	bl	80078d0 <pl_DriveMotor_standby>
	HAL_Delay(500);
 800dfa0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dfa4:	f00a fed8 	bl	8018d58 <HAL_Delay>
//初期化
	//構造体にする
	int x=0;
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	623b      	str	r3, [r7, #32]
	int y=0;
 800dfac:	2300      	movs	r3, #0
 800dfae:	61fb      	str	r3, [r7, #28]
	int direction=1;
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	61bb      	str	r3, [r7, #24]
	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;
	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	753b      	strb	r3, [r7, #20]
	mode.WallControlStatus=0;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	757b      	strb	r3, [r7, #21]
	mode.WallCutMode=0;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	75fb      	strb	r3, [r7, #23]
	mode.calMazeMode=0;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	75bb      	strb	r3, [r7, #22]


//初期位置のセンサー確認
	front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800dfc4:	4b72      	ldr	r3, [pc, #456]	; (800e190 <AdatiWayReturn+0x21c>)
 800dfc6:	689b      	ldr	r3, [r3, #8]
 800dfc8:	2b95      	cmp	r3, #149	; 0x95
 800dfca:	bfcc      	ite	gt
 800dfcc:	2301      	movgt	r3, #1
 800dfce:	2300      	movle	r3, #0
 800dfd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800dfd4:	4b6e      	ldr	r3, [pc, #440]	; (800e190 <AdatiWayReturn+0x21c>)
 800dfd6:	691b      	ldr	r3, [r3, #16]
 800dfd8:	f240 12f3 	movw	r2, #499	; 0x1f3
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	bfcc      	ite	gt
 800dfe0:	2301      	movgt	r3, #1
 800dfe2:	2300      	movle	r3, #0
 800dfe4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800dfe8:	4b69      	ldr	r3, [pc, #420]	; (800e190 <AdatiWayReturn+0x21c>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	f240 12f3 	movw	r2, #499	; 0x1f3
 800dff0:	4293      	cmp	r3, r2
 800dff2:	bfcc      	ite	gt
 800dff4:	2301      	movgt	r3, #1
 800dff6:	2300      	movle	r3, #0
 800dff8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800dffc:	6a38      	ldr	r0, [r7, #32]
 800dffe:	69f9      	ldr	r1, [r7, #28]
 800e000:	69ba      	ldr	r2, [r7, #24]
 800e002:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e006:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e00a:	9301      	str	r3, [sp, #4]
 800e00c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e010:	9300      	str	r3, [sp, #0]
 800e012:	4623      	mov	r3, r4
 800e014:	f002 fcbe 	bl	8010994 <update_wall>
	//初期位置での迷路展開
	create_StepCountMap_queue();
 800e018:	f006 f8e0 	bl	80141dc <create_StepCountMap_queue>
	HAL_Delay(100);
 800e01c:	2064      	movs	r0, #100	; 0x64
 800e01e:	f00a fe9b 	bl	8018d58 <HAL_Delay>
	straight_table2(90/2+BACK_TO_CENTER,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e022:	6978      	ldr	r0, [r7, #20]
 800e024:	ed97 2a01 	vldr	s4, [r7, #4]
 800e028:	edd7 1a03 	vldr	s3, [r7, #12]
 800e02c:	ed97 1a03 	vldr	s2, [r7, #12]
 800e030:	eddf 0a58 	vldr	s1, [pc, #352]	; 800e194 <AdatiWayReturn+0x220>
 800e034:	ed9f 0a58 	vldr	s0, [pc, #352]	; 800e198 <AdatiWayReturn+0x224>
 800e038:	f7f4 ffd0 	bl	8002fdc <straight_table2>

	while (1) {

		//straight_table2(90, 300, 300, 500);

		update_coordinate(&x,&y,direction);
 800e03c:	69ba      	ldr	r2, [r7, #24]
 800e03e:	f107 011c 	add.w	r1, r7, #28
 800e042:	f107 0320 	add.w	r3, r7, #32
 800e046:	4618      	mov	r0, r3
 800e048:	f7ff ff60 	bl	800df0c <update_coordinate>


		front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e04c:	4b50      	ldr	r3, [pc, #320]	; (800e190 <AdatiWayReturn+0x21c>)
 800e04e:	689b      	ldr	r3, [r3, #8]
 800e050:	2b95      	cmp	r3, #149	; 0x95
 800e052:	bfcc      	ite	gt
 800e054:	2301      	movgt	r3, #1
 800e056:	2300      	movle	r3, #0
 800e058:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e05c:	4b4c      	ldr	r3, [pc, #304]	; (800e190 <AdatiWayReturn+0x21c>)
 800e05e:	691b      	ldr	r3, [r3, #16]
 800e060:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e064:	4293      	cmp	r3, r2
 800e066:	bfcc      	ite	gt
 800e068:	2301      	movgt	r3, #1
 800e06a:	2300      	movle	r3, #0
 800e06c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e070:	4b47      	ldr	r3, [pc, #284]	; (800e190 <AdatiWayReturn+0x21c>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e078:	4293      	cmp	r3, r2
 800e07a:	bfcc      	ite	gt
 800e07c:	2301      	movgt	r3, #1
 800e07e:	2300      	movle	r3, #0
 800e080:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		mode.WallControlMode=1;
 800e084:	2301      	movs	r3, #1
 800e086:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=1;
 800e088:	2301      	movs	r3, #1
 800e08a:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 800e08c:	2300      	movs	r3, #0
 800e08e:	75fb      	strb	r3, [r7, #23]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e090:	6978      	ldr	r0, [r7, #20]
 800e092:	ed97 2a01 	vldr	s4, [r7, #4]
 800e096:	edd7 1a03 	vldr	s3, [r7, #12]
 800e09a:	ed97 1a03 	vldr	s2, [r7, #12]
 800e09e:	edd7 0a03 	vldr	s1, [r7, #12]
 800e0a2:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e0a6:	f7f4 ff99 	bl	8002fdc <straight_table2>
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e0aa:	6a38      	ldr	r0, [r7, #32]
 800e0ac:	69f9      	ldr	r1, [r7, #28]
 800e0ae:	69ba      	ldr	r2, [r7, #24]
 800e0b0:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e0b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e0b8:	9301      	str	r3, [sp, #4]
 800e0ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e0be:	9300      	str	r3, [sp, #0]
 800e0c0:	4623      	mov	r3, r4
 800e0c2:	f002 fc67 	bl	8010994 <update_wall>
		if(Dijkstra_mode==2){
 800e0c6:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800e0ca:	2b02      	cmp	r3, #2
 800e0cc:	d104      	bne.n	800e0d8 <AdatiWayReturn+0x164>
					route_Dijkstra();
 800e0ce:	f005 f84b 	bl	8013168 <route_Dijkstra>
					create_StepCountMap_unknown();
 800e0d2:	f005 fd4d 	bl	8013b70 <create_StepCountMap_unknown>
 800e0d6:	e001      	b.n	800e0dc <AdatiWayReturn+0x168>
				}else{
					create_StepCountMap_queue();
 800e0d8:	f006 f880 	bl	80141dc <create_StepCountMap_queue>
				}
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e0dc:	6a3b      	ldr	r3, [r7, #32]
 800e0de:	69fa      	ldr	r2, [r7, #28]
 800e0e0:	69b9      	ldr	r1, [r7, #24]
 800e0e2:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e0e6:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e0ea:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e0ee:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e0f2:	9102      	str	r1, [sp, #8]
 800e0f4:	9201      	str	r2, [sp, #4]
 800e0f6:	9300      	str	r3, [sp, #0]
 800e0f8:	4633      	mov	r3, r6
 800e0fa:	462a      	mov	r2, r5
 800e0fc:	4621      	mov	r1, r4
 800e0fe:	f003 f9c3 	bl	8011488 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e102:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e106:	2b00      	cmp	r3, #0
 800e108:	d001      	beq.n	800e10e <AdatiWayReturn+0x19a>
 800e10a:	23ff      	movs	r3, #255	; 0xff
 800e10c:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e10e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e112:	2b00      	cmp	r3, #0
 800e114:	d001      	beq.n	800e11a <AdatiWayReturn+0x1a6>
 800e116:	23ff      	movs	r3, #255	; 0xff
 800e118:	853b      	strh	r3, [r7, #40]	; 0x28
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e11a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d001      	beq.n	800e126 <AdatiWayReturn+0x1b2>
 800e122:	23ff      	movs	r3, #255	; 0xff
 800e124:	84bb      	strh	r3, [r7, #36]	; 0x24
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800e126:	6a38      	ldr	r0, [r7, #32]
 800e128:	69fc      	ldr	r4, [r7, #28]
 800e12a:	69bd      	ldr	r5, [r7, #24]
 800e12c:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
 800e12e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e130:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e132:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e134:	9102      	str	r1, [sp, #8]
 800e136:	9201      	str	r2, [sp, #4]
 800e138:	9300      	str	r3, [sp, #0]
 800e13a:	4633      	mov	r3, r6
 800e13c:	462a      	mov	r2, r5
 800e13e:	4621      	mov	r1, r4
 800e140:	f002 f9d4 	bl	80104ec <decision_kitiku>
		mode.WallCutMode=1;
 800e144:	2301      	movs	r3, #1
 800e146:	75fb      	strb	r3, [r7, #23]
		End_straight(MAZE_OFFSET, mode,right_wall,left_wall);
 800e148:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e14c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e150:	4619      	mov	r1, r3
 800e152:	6978      	ldr	r0, [r7, #20]
 800e154:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e158:	f7f5 fbea 	bl	8003930 <End_straight>



		if (x == 0 && y == 0) {break;}
 800e15c:	6a3b      	ldr	r3, [r7, #32]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d103      	bne.n	800e16a <AdatiWayReturn+0x1f6>
 800e162:	69fb      	ldr	r3, [r7, #28]
 800e164:	2b00      	cmp	r3, #0
 800e166:	f000 827c 	beq.w	800e662 <AdatiWayReturn+0x6ee>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800e16a:	6a3b      	ldr	r3, [r7, #32]
 800e16c:	2b01      	cmp	r3, #1
 800e16e:	d003      	beq.n	800e178 <AdatiWayReturn+0x204>
 800e170:	6a3b      	ldr	r3, [r7, #32]
 800e172:	2b02      	cmp	r3, #2
 800e174:	f040 810d 	bne.w	800e392 <AdatiWayReturn+0x41e>
 800e178:	69fb      	ldr	r3, [r7, #28]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	f000 809b 	beq.w	800e2b6 <AdatiWayReturn+0x342>
 800e180:	69fb      	ldr	r3, [r7, #28]
 800e182:	2b01      	cmp	r3, #1
 800e184:	f040 8105 	bne.w	800e392 <AdatiWayReturn+0x41e>


			while (front_wall==0) {
 800e188:	e095      	b.n	800e2b6 <AdatiWayReturn+0x342>
 800e18a:	bf00      	nop
 800e18c:	20000834 	.word	0x20000834
 800e190:	20000470 	.word	0x20000470
 800e194:	00000000 	.word	0x00000000
 800e198:	42830000 	.word	0x42830000
 800e19c:	42a40000 	.word	0x42a40000
				//直進
				mode.WallControlMode=1;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	75fb      	strb	r3, [r7, #23]
				straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e1ac:	6978      	ldr	r0, [r7, #20]
 800e1ae:	ed97 2a01 	vldr	s4, [r7, #4]
 800e1b2:	edd7 1a03 	vldr	s3, [r7, #12]
 800e1b6:	ed97 1a03 	vldr	s2, [r7, #12]
 800e1ba:	edd7 0a03 	vldr	s1, [r7, #12]
 800e1be:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 800e19c <AdatiWayReturn+0x228>
 800e1c2:	f7f4 ff0b 	bl	8002fdc <straight_table2>

				update_coordinate(&x,&y,direction);
 800e1c6:	69ba      	ldr	r2, [r7, #24]
 800e1c8:	f107 011c 	add.w	r1, r7, #28
 800e1cc:	f107 0320 	add.w	r3, r7, #32
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f7ff fe9b 	bl	800df0c <update_coordinate>

				front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e1d6:	4b7f      	ldr	r3, [pc, #508]	; (800e3d4 <AdatiWayReturn+0x460>)
 800e1d8:	689b      	ldr	r3, [r3, #8]
 800e1da:	2b95      	cmp	r3, #149	; 0x95
 800e1dc:	bfcc      	ite	gt
 800e1de:	2301      	movgt	r3, #1
 800e1e0:	2300      	movle	r3, #0
 800e1e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e1e6:	4b7b      	ldr	r3, [pc, #492]	; (800e3d4 <AdatiWayReturn+0x460>)
 800e1e8:	691b      	ldr	r3, [r3, #16]
 800e1ea:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	bfcc      	ite	gt
 800e1f2:	2301      	movgt	r3, #1
 800e1f4:	2300      	movle	r3, #0
 800e1f6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e1fa:	4b76      	ldr	r3, [pc, #472]	; (800e3d4 <AdatiWayReturn+0x460>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e202:	4293      	cmp	r3, r2
 800e204:	bfcc      	ite	gt
 800e206:	2301      	movgt	r3, #1
 800e208:	2300      	movle	r3, #0
 800e20a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

				mode.WallControlMode=1;
 800e20e:	2301      	movs	r3, #1
 800e210:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=1;
 800e212:	2301      	movs	r3, #1
 800e214:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e216:	2300      	movs	r3, #0
 800e218:	75fb      	strb	r3, [r7, #23]
				straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e21a:	6978      	ldr	r0, [r7, #20]
 800e21c:	ed97 2a01 	vldr	s4, [r7, #4]
 800e220:	edd7 1a03 	vldr	s3, [r7, #12]
 800e224:	ed97 1a03 	vldr	s2, [r7, #12]
 800e228:	edd7 0a03 	vldr	s1, [r7, #12]
 800e22c:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e230:	f7f4 fed4 	bl	8002fdc <straight_table2>
				update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e234:	6a38      	ldr	r0, [r7, #32]
 800e236:	69f9      	ldr	r1, [r7, #28]
 800e238:	69ba      	ldr	r2, [r7, #24]
 800e23a:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e23e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e242:	9301      	str	r3, [sp, #4]
 800e244:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e248:	9300      	str	r3, [sp, #0]
 800e24a:	4623      	mov	r3, r4
 800e24c:	f002 fba2 	bl	8010994 <update_wall>
				create_StepCountMap_queue();
 800e250:	f005 ffc4 	bl	80141dc <create_StepCountMap_queue>
				search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e254:	6a3b      	ldr	r3, [r7, #32]
 800e256:	69fa      	ldr	r2, [r7, #28]
 800e258:	69b9      	ldr	r1, [r7, #24]
 800e25a:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e25e:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e262:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e266:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e26a:	9102      	str	r1, [sp, #8]
 800e26c:	9201      	str	r2, [sp, #4]
 800e26e:	9300      	str	r3, [sp, #0]
 800e270:	4633      	mov	r3, r6
 800e272:	462a      	mov	r2, r5
 800e274:	4621      	mov	r1, r4
 800e276:	f003 f907 	bl	8011488 <search_AroundWalkCount>
				if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e27a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d001      	beq.n	800e286 <AdatiWayReturn+0x312>
 800e282:	23ff      	movs	r3, #255	; 0xff
 800e284:	857b      	strh	r3, [r7, #42]	; 0x2a
				if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e286:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d001      	beq.n	800e292 <AdatiWayReturn+0x31e>
 800e28e:	23ff      	movs	r3, #255	; 0xff
 800e290:	853b      	strh	r3, [r7, #40]	; 0x28
				if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e292:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e296:	2b00      	cmp	r3, #0
 800e298:	d001      	beq.n	800e29e <AdatiWayReturn+0x32a>
 800e29a:	23ff      	movs	r3, #255	; 0xff
 800e29c:	84bb      	strh	r3, [r7, #36]	; 0x24
				mode.WallCutMode=1;
 800e29e:	2301      	movs	r3, #1
 800e2a0:	75fb      	strb	r3, [r7, #23]
				End_straight(MAZE_OFFSET,mode,right_wall,left_wall);
 800e2a2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e2a6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e2aa:	4619      	mov	r1, r3
 800e2ac:	6978      	ldr	r0, [r7, #20]
 800e2ae:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e2b2:	f7f5 fb3d 	bl	8003930 <End_straight>
			while (front_wall==0) {
 800e2b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2ba:	f083 0301 	eor.w	r3, r3, #1
 800e2be:	b2db      	uxtb	r3, r3
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	f47f af6d 	bne.w	800e1a0 <AdatiWayReturn+0x22c>


			}
			mode.WallControlMode=0;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	75fb      	strb	r3, [r7, #23]
			straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e2d2:	6978      	ldr	r0, [r7, #20]
 800e2d4:	ed97 2a01 	vldr	s4, [r7, #4]
 800e2d8:	edd7 1a03 	vldr	s3, [r7, #12]
 800e2dc:	ed9f 1a48 	vldr	s2, [pc, #288]	; 800e400 <AdatiWayReturn+0x48c>
 800e2e0:	edd7 0a03 	vldr	s1, [r7, #12]
 800e2e4:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800e3d8 <AdatiWayReturn+0x464>
 800e2e8:	f7f4 fe78 	bl	8002fdc <straight_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e2ec:	2003      	movs	r0, #3
 800e2ee:	f7f9 fb21 	bl	8007934 <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e2f2:	2003      	movs	r0, #3
 800e2f4:	f7f9 faf6 	bl	80078e4 <pl_L_DriveMotor_mode>
			wait_ms_NoReset(500);
 800e2f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e2fc:	f7f9 fe18 	bl	8007f30 <wait_ms_NoReset>
			no_safty = 1;
 800e300:	4b36      	ldr	r3, [pc, #216]	; (800e3dc <AdatiWayReturn+0x468>)
 800e302:	2201      	movs	r2, #1
 800e304:	701a      	strb	r2, [r3, #0]
			turning_table2(180,0,0,input_TurningVelocity,input_TurningAcceleration);
 800e306:	ed97 2a00 	vldr	s4, [r7]
 800e30a:	edd7 1a02 	vldr	s3, [r7, #8]
 800e30e:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 800e400 <AdatiWayReturn+0x48c>
 800e312:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800e400 <AdatiWayReturn+0x48c>
 800e316:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800e3e0 <AdatiWayReturn+0x46c>
 800e31a:	f7f5 fb6d 	bl	80039f8 <turning_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e31e:	2003      	movs	r0, #3
 800e320:	f7f9 fb08 	bl	8007934 <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e324:	2003      	movs	r0, #3
 800e326:	f7f9 fadd 	bl	80078e4 <pl_L_DriveMotor_mode>
			wait_ms_NoReset(500);
 800e32a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e32e:	f7f9 fdff 	bl	8007f30 <wait_ms_NoReset>
			straight_table2(-BACK_TO_CENTER-20/2, 0,0,-150,1000, mode);
 800e332:	6978      	ldr	r0, [r7, #20]
 800e334:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 800e3e4 <AdatiWayReturn+0x470>
 800e338:	eddf 1a2b 	vldr	s3, [pc, #172]	; 800e3e8 <AdatiWayReturn+0x474>
 800e33c:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800e400 <AdatiWayReturn+0x48c>
 800e340:	eddf 0a2f 	vldr	s1, [pc, #188]	; 800e400 <AdatiWayReturn+0x48c>
 800e344:	ed9f 0a29 	vldr	s0, [pc, #164]	; 800e3ec <AdatiWayReturn+0x478>
 800e348:	f7f4 fe48 	bl	8002fdc <straight_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e34c:	2003      	movs	r0, #3
 800e34e:	f7f9 faf1 	bl	8007934 <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e352:	2003      	movs	r0, #3
 800e354:	f7f9 fac6 	bl	80078e4 <pl_L_DriveMotor_mode>
			wait_ms_NoReset(500);
 800e358:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e35c:	f7f9 fde8 	bl	8007f30 <wait_ms_NoReset>
			no_safty = 0;
 800e360:	4b1e      	ldr	r3, [pc, #120]	; (800e3dc <AdatiWayReturn+0x468>)
 800e362:	2200      	movs	r2, #0
 800e364:	701a      	strb	r2, [r3, #0]
			clear_Ierror();
 800e366:	f7f6 f923 	bl	80045b0 <clear_Ierror>
			maze_mode = 0;
 800e36a:	4b21      	ldr	r3, [pc, #132]	; (800e3f0 <AdatiWayReturn+0x47c>)
 800e36c:	2200      	movs	r2, #0
 800e36e:	701a      	strb	r2, [r3, #0]

			direction = direction + 2;
 800e370:	69bb      	ldr	r3, [r7, #24]
 800e372:	3302      	adds	r3, #2
 800e374:	61bb      	str	r3, [r7, #24]

			if (direction >= 5) {
 800e376:	69bb      	ldr	r3, [r7, #24]
 800e378:	2b04      	cmp	r3, #4
 800e37a:	dd02      	ble.n	800e382 <AdatiWayReturn+0x40e>
				direction = direction-4;
 800e37c:	69bb      	ldr	r3, [r7, #24]
 800e37e:	3b04      	subs	r3, #4
 800e380:	61bb      	str	r3, [r7, #24]
			}
			if (direction <= 0) {
 800e382:	69bb      	ldr	r3, [r7, #24]
 800e384:	2b00      	cmp	r3, #0
 800e386:	f300 816e 	bgt.w	800e666 <AdatiWayReturn+0x6f2>
				direction = direction+4;
 800e38a:	69bb      	ldr	r3, [r7, #24]
 800e38c:	3304      	adds	r3, #4
 800e38e:	61bb      	str	r3, [r7, #24]
			}

			break;
 800e390:	e169      	b.n	800e666 <AdatiWayReturn+0x6f2>
		}
		if(know_mode==0){
 800e392:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800e396:	2b00      	cmp	r3, #0
 800e398:	d102      	bne.n	800e3a0 <AdatiWayReturn+0x42c>
			kitikukan = 0;
 800e39a:	4b16      	ldr	r3, [pc, #88]	; (800e3f4 <AdatiWayReturn+0x480>)
 800e39c:	2200      	movs	r2, #0
 800e39e:	601a      	str	r2, [r3, #0]
		}
		if (kitikukan == OFF) {
 800e3a0:	4b14      	ldr	r3, [pc, #80]	; (800e3f4 <AdatiWayReturn+0x480>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	f040 80f8 	bne.w	800e59a <AdatiWayReturn+0x626>

			// 移動の優先順位 ： 前→右→左→後
			if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800e3aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e3ac:	2bff      	cmp	r3, #255	; 0xff
 800e3ae:	d12b      	bne.n	800e408 <AdatiWayReturn+0x494>
 800e3b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e3b2:	2bff      	cmp	r3, #255	; 0xff
 800e3b4:	d128      	bne.n	800e408 <AdatiWayReturn+0x494>
 800e3b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3b8:	2bff      	cmp	r3, #255	; 0xff
 800e3ba:	d125      	bne.n	800e408 <AdatiWayReturn+0x494>
 800e3bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e3be:	2bff      	cmp	r3, #255	; 0xff
 800e3c0:	d122      	bne.n	800e408 <AdatiWayReturn+0x494>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
				error_mode=1;
 800e3c2:	4b0d      	ldr	r3, [pc, #52]	; (800e3f8 <AdatiWayReturn+0x484>)
 800e3c4:	2201      	movs	r2, #1
 800e3c6:	701a      	strb	r2, [r3, #0]
				pl_DriveMotor_stop();
 800e3c8:	f7f9 fae8 	bl	800799c <pl_DriveMotor_stop>
				pl_DriveMotor_standby(OFF);
 800e3cc:	2000      	movs	r0, #0
 800e3ce:	f7f9 fa7f 	bl	80078d0 <pl_DriveMotor_standby>

				break;
 800e3d2:	e14b      	b.n	800e66c <AdatiWayReturn+0x6f8>
 800e3d4:	20000470 	.word	0x20000470
 800e3d8:	42140000 	.word	0x42140000
 800e3dc:	20000806 	.word	0x20000806
 800e3e0:	43340000 	.word	0x43340000
 800e3e4:	447a0000 	.word	0x447a0000
 800e3e8:	c3160000 	.word	0xc3160000
 800e3ec:	c1f40000 	.word	0xc1f40000
 800e3f0:	20000834 	.word	0x20000834
 800e3f4:	20000838 	.word	0x20000838
 800e3f8:	20000807 	.word	0x20000807
 800e3fc:	42a40000 	.word	0x42a40000
 800e400:	00000000 	.word	0x00000000
 800e404:	42080000 	.word	0x42080000
			}
			if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800e408:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e40a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e40c:	429a      	cmp	r2, r3
 800e40e:	d81a      	bhi.n	800e446 <AdatiWayReturn+0x4d2>
 800e410:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e412:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e414:	429a      	cmp	r2, r3
 800e416:	d816      	bhi.n	800e446 <AdatiWayReturn+0x4d2>
 800e418:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e41a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d812      	bhi.n	800e446 <AdatiWayReturn+0x4d2>
				// 直進
				mode.WallControlMode=1;
 800e420:	2301      	movs	r3, #1
 800e422:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e424:	2300      	movs	r3, #0
 800e426:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e428:	2300      	movs	r3, #0
 800e42a:	75fb      	strb	r3, [r7, #23]
				straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e42c:	6978      	ldr	r0, [r7, #20]
 800e42e:	ed97 2a01 	vldr	s4, [r7, #4]
 800e432:	edd7 1a03 	vldr	s3, [r7, #12]
 800e436:	ed97 1a03 	vldr	s2, [r7, #12]
 800e43a:	edd7 0a03 	vldr	s1, [r7, #12]
 800e43e:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 800e3fc <AdatiWayReturn+0x488>
 800e442:	f7f4 fdcb 	bl	8002fdc <straight_table2>
			}
			if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800e446:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e448:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d219      	bcs.n	800e482 <AdatiWayReturn+0x50e>
 800e44e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e450:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e452:	429a      	cmp	r2, r3
 800e454:	d815      	bhi.n	800e482 <AdatiWayReturn+0x50e>
 800e456:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e458:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e45a:	429a      	cmp	r2, r3
 800e45c:	d811      	bhi.n	800e482 <AdatiWayReturn+0x50e>
				// 右旋回
				slalomR(howspeed.slalom_R, OFF,EXPLORATION,0,input_StraightVelocity);
 800e45e:	2300      	movs	r3, #0
 800e460:	9303      	str	r3, [sp, #12]
 800e462:	2300      	movs	r3, #0
 800e464:	9302      	str	r3, [sp, #8]
 800e466:	2300      	movs	r3, #0
 800e468:	9301      	str	r3, [sp, #4]
 800e46a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e46c:	9300      	str	r3, [sp, #0]
 800e46e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e472:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e474:	ed97 0a03 	vldr	s0, [r7, #12]
 800e478:	f7fb fd7e 	bl	8009f78 <slalomR>
				direction++;
 800e47c:	69bb      	ldr	r3, [r7, #24]
 800e47e:	3301      	adds	r3, #1
 800e480:	61bb      	str	r3, [r7, #24]
			}
			if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800e482:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e484:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e486:	429a      	cmp	r2, r3
 800e488:	d219      	bcs.n	800e4be <AdatiWayReturn+0x54a>
 800e48a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e48c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e48e:	429a      	cmp	r2, r3
 800e490:	d215      	bcs.n	800e4be <AdatiWayReturn+0x54a>
 800e492:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e494:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e496:	429a      	cmp	r2, r3
 800e498:	d811      	bhi.n	800e4be <AdatiWayReturn+0x54a>
				// 左旋回
				slalomL(howspeed.slalom_L, OFF,EXPLORATION,0,input_StraightVelocity);
 800e49a:	2300      	movs	r3, #0
 800e49c:	9303      	str	r3, [sp, #12]
 800e49e:	2300      	movs	r3, #0
 800e4a0:	9302      	str	r3, [sp, #8]
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	9301      	str	r3, [sp, #4]
 800e4a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4a8:	9300      	str	r3, [sp, #0]
 800e4aa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e4ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e4b0:	ed97 0a03 	vldr	s0, [r7, #12]
 800e4b4:	f7fb ff46 	bl	800a344 <slalomL>
				direction--;
 800e4b8:	69bb      	ldr	r3, [r7, #24]
 800e4ba:	3b01      	subs	r3, #1
 800e4bc:	61bb      	str	r3, [r7, #24]
			}
			if(back_count < front_count && back_count < right_count
 800e4be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e4c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	f080 80ac 	bcs.w	800e620 <AdatiWayReturn+0x6ac>
 800e4c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e4ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	f080 80a7 	bcs.w	800e620 <AdatiWayReturn+0x6ac>
					&& back_count < left_count){
 800e4d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e4d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4d6:	429a      	cmp	r2, r3
 800e4d8:	f080 80a2 	bcs.w	800e620 <AdatiWayReturn+0x6ac>
				//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
				mode.WallControlMode=1;
 800e4dc:	2301      	movs	r3, #1
 800e4de:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET-3, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e4e8:	6978      	ldr	r0, [r7, #20]
 800e4ea:	ed97 2a01 	vldr	s4, [r7, #4]
 800e4ee:	edd7 1a03 	vldr	s3, [r7, #12]
 800e4f2:	ed1f 1a3d 	vldr	s2, [pc, #-244]	; 800e400 <AdatiWayReturn+0x48c>
 800e4f6:	edd7 0a03 	vldr	s1, [r7, #12]
 800e4fa:	ed1f 0a3e 	vldr	s0, [pc, #-248]	; 800e404 <AdatiWayReturn+0x490>
 800e4fe:	f7f4 fd6d 	bl	8002fdc <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e502:	2003      	movs	r0, #3
 800e504:	f7f9 fa16 	bl	8007934 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e508:	2003      	movs	r0, #3
 800e50a:	f7f9 f9eb 	bl	80078e4 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e50e:	2064      	movs	r0, #100	; 0x64
 800e510:	f7f9 fd0e 	bl	8007f30 <wait_ms_NoReset>
				no_safty = 1;
 800e514:	4b8a      	ldr	r3, [pc, #552]	; (800e740 <AdatiWayReturn+0x7cc>)
 800e516:	2201      	movs	r2, #1
 800e518:	701a      	strb	r2, [r3, #0]
				backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800e51a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e51e:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800e522:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e526:	4618      	mov	r0, r3
 800e528:	edd7 0a00 	vldr	s1, [r7]
 800e52c:	ed97 0a02 	vldr	s0, [r7, #8]
 800e530:	f7fb fc58 	bl	8009de4 <backTurn_controlWall>
				//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
				wait_ms_NoReset(100);
 800e534:	2064      	movs	r0, #100	; 0x64
 800e536:	f7f9 fcfb 	bl	8007f30 <wait_ms_NoReset>
				no_safty = 0;
 800e53a:	4b81      	ldr	r3, [pc, #516]	; (800e740 <AdatiWayReturn+0x7cc>)
 800e53c:	2200      	movs	r2, #0
 800e53e:	701a      	strb	r2, [r3, #0]
				//clear_Ierror();
				mode.WallControlMode=0;
 800e540:	2300      	movs	r3, #0
 800e542:	753b      	strb	r3, [r7, #20]
				straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800e544:	6978      	ldr	r0, [r7, #20]
 800e546:	ed9f 2a7f 	vldr	s4, [pc, #508]	; 800e744 <AdatiWayReturn+0x7d0>
 800e54a:	eddf 1a7f 	vldr	s3, [pc, #508]	; 800e748 <AdatiWayReturn+0x7d4>
 800e54e:	ed9f 1a88 	vldr	s2, [pc, #544]	; 800e770 <AdatiWayReturn+0x7fc>
 800e552:	eddf 0a87 	vldr	s1, [pc, #540]	; 800e770 <AdatiWayReturn+0x7fc>
 800e556:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800e74c <AdatiWayReturn+0x7d8>
 800e55a:	f7f4 fd3f 	bl	8002fdc <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e55e:	2003      	movs	r0, #3
 800e560:	f7f9 f9e8 	bl	8007934 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e564:	2003      	movs	r0, #3
 800e566:	f7f9 f9bd 	bl	80078e4 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e56a:	2064      	movs	r0, #100	; 0x64
 800e56c:	f7f9 fce0 	bl	8007f30 <wait_ms_NoReset>
				clear_Ierror();
 800e570:	f7f6 f81e 	bl	80045b0 <clear_Ierror>
				mode.WallControlMode=1;
 800e574:	2301      	movs	r3, #1
 800e576:	753b      	strb	r3, [r7, #20]
				straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e578:	6978      	ldr	r0, [r7, #20]
 800e57a:	ed97 2a01 	vldr	s4, [r7, #4]
 800e57e:	edd7 1a03 	vldr	s3, [r7, #12]
 800e582:	ed97 1a03 	vldr	s2, [r7, #12]
 800e586:	eddf 0a7a 	vldr	s1, [pc, #488]	; 800e770 <AdatiWayReturn+0x7fc>
 800e58a:	ed9f 0a71 	vldr	s0, [pc, #452]	; 800e750 <AdatiWayReturn+0x7dc>
 800e58e:	f7f4 fd25 	bl	8002fdc <straight_table2>
				//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
				direction = direction + 2;
 800e592:	69bb      	ldr	r3, [r7, #24]
 800e594:	3302      	adds	r3, #2
 800e596:	61bb      	str	r3, [r7, #24]
 800e598:	e042      	b.n	800e620 <AdatiWayReturn+0x6ac>

			}

		} else {
			mode.WallControlMode=1;
 800e59a:	2301      	movs	r3, #1
 800e59c:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	75fb      	strb	r3, [r7, #23]
			straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e5a6:	6978      	ldr	r0, [r7, #20]
 800e5a8:	ed97 2a01 	vldr	s4, [r7, #4]
 800e5ac:	edd7 1a03 	vldr	s3, [r7, #12]
 800e5b0:	ed97 1a03 	vldr	s2, [r7, #12]
 800e5b4:	edd7 0a03 	vldr	s1, [r7, #12]
 800e5b8:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 800e774 <AdatiWayReturn+0x800>
 800e5bc:	f7f4 fd0e 	bl	8002fdc <straight_table2>
			compress_kitiku(&x,&y,&direction);
 800e5c0:	f107 0218 	add.w	r2, r7, #24
 800e5c4:	f107 011c 	add.w	r1, r7, #28
 800e5c8:	f107 0320 	add.w	r3, r7, #32
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f001 ffff 	bl	80105d0 <compress_kitiku>
			mode.WallCutMode=0;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	75fb      	strb	r3, [r7, #23]
			End_straight(90/2-MAZE_OFFSET,mode,1,1);
 800e5d6:	2201      	movs	r2, #1
 800e5d8:	2101      	movs	r1, #1
 800e5da:	6978      	ldr	r0, [r7, #20]
 800e5dc:	ed9f 0a65 	vldr	s0, [pc, #404]	; 800e774 <AdatiWayReturn+0x800>
 800e5e0:	f7f5 f9a6 	bl	8003930 <End_straight>
			mode.WallControlMode=1;
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	75fb      	strb	r3, [r7, #23]
			straight_table2((90/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,900,input_StraightAcceleration, mode);
 800e5f0:	4b58      	ldr	r3, [pc, #352]	; (800e754 <AdatiWayReturn+0x7e0>)
 800e5f2:	681a      	ldr	r2, [r3, #0]
 800e5f4:	4613      	mov	r3, r2
 800e5f6:	005b      	lsls	r3, r3, #1
 800e5f8:	4413      	add	r3, r2
 800e5fa:	011a      	lsls	r2, r3, #4
 800e5fc:	1ad3      	subs	r3, r2, r3
 800e5fe:	ee07 3a90 	vmov	s15, r3
 800e602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e606:	6978      	ldr	r0, [r7, #20]
 800e608:	ed97 2a01 	vldr	s4, [r7, #4]
 800e60c:	eddf 1a52 	vldr	s3, [pc, #328]	; 800e758 <AdatiWayReturn+0x7e4>
 800e610:	ed97 1a03 	vldr	s2, [r7, #12]
 800e614:	edd7 0a03 	vldr	s1, [r7, #12]
 800e618:	eeb0 0a67 	vmov.f32	s0, s15
 800e61c:	f7f4 fcde 	bl	8002fdc <straight_table2>

		}

		if (direction >= 5) {
 800e620:	69bb      	ldr	r3, [r7, #24]
 800e622:	2b04      	cmp	r3, #4
 800e624:	dd02      	ble.n	800e62c <AdatiWayReturn+0x6b8>
			direction = direction-4;
 800e626:	69bb      	ldr	r3, [r7, #24]
 800e628:	3b04      	subs	r3, #4
 800e62a:	61bb      	str	r3, [r7, #24]
		}
		if (direction <= 0) {
 800e62c:	69bb      	ldr	r3, [r7, #24]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	dc02      	bgt.n	800e638 <AdatiWayReturn+0x6c4>
			direction = direction+4;
 800e632:	69bb      	ldr	r3, [r7, #24]
 800e634:	3304      	adds	r3, #4
 800e636:	61bb      	str	r3, [r7, #24]
//基地区間**********************************************************************
//		if (know_road == 1) {
//			most_speed_kitikukan_play(850, 1600);
//		}
//基地区間
		if(error_mode==1){break;}
 800e638:	4b48      	ldr	r3, [pc, #288]	; (800e75c <AdatiWayReturn+0x7e8>)
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	2b01      	cmp	r3, #1
 800e63e:	d014      	beq.n	800e66a <AdatiWayReturn+0x6f6>
		if (g_timCount_sec>240){
 800e640:	4b47      	ldr	r3, [pc, #284]	; (800e760 <AdatiWayReturn+0x7ec>)
 800e642:	edd3 7a00 	vldr	s15, [r3]
 800e646:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800e764 <AdatiWayReturn+0x7f0>
 800e64a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e64e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e652:	dd05      	ble.n	800e660 <AdatiWayReturn+0x6ec>
					// 秒数エンド

						pl_DriveMotor_stop();
 800e654:	f7f9 f9a2 	bl	800799c <pl_DriveMotor_stop>
						pl_DriveMotor_standby(OFF);
 800e658:	2000      	movs	r0, #0
 800e65a:	f7f9 f939 	bl	80078d0 <pl_DriveMotor_standby>
						break;
 800e65e:	e005      	b.n	800e66c <AdatiWayReturn+0x6f8>
		update_coordinate(&x,&y,direction);
 800e660:	e4ec      	b.n	800e03c <AdatiWayReturn+0xc8>
		if (x == 0 && y == 0) {break;}
 800e662:	bf00      	nop
 800e664:	e002      	b.n	800e66c <AdatiWayReturn+0x6f8>
			break;
 800e666:	bf00      	nop
 800e668:	e000      	b.n	800e66c <AdatiWayReturn+0x6f8>
		if(error_mode==1){break;}
 800e66a:	bf00      	nop
					}

	}
	if(error_mode==0){
 800e66c:	4b3b      	ldr	r3, [pc, #236]	; (800e75c <AdatiWayReturn+0x7e8>)
 800e66e:	781b      	ldrb	r3, [r3, #0]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d101      	bne.n	800e678 <AdatiWayReturn+0x704>
	record_in();
 800e674:	f7f8 fe3a 	bl	80072ec <record_in>
	}
	create_DijkstraMap();
 800e678:	f003 f82e 	bl	80116d8 <create_DijkstraMap>
	clear_Ierror();
 800e67c:	f7f5 ff98 	bl	80045b0 <clear_Ierror>
	reset_gyro();
 800e680:	f7f3 f872 	bl	8001768 <reset_gyro>
	//reset_speed();
	maze_mode = 1;
 800e684:	4b38      	ldr	r3, [pc, #224]	; (800e768 <AdatiWayReturn+0x7f4>)
 800e686:	2201      	movs	r2, #1
 800e688:	701a      	strb	r2, [r3, #0]
	straight_table2(90/2+BACK_TO_CENTER,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e68a:	6978      	ldr	r0, [r7, #20]
 800e68c:	ed97 2a01 	vldr	s4, [r7, #4]
 800e690:	edd7 1a03 	vldr	s3, [r7, #12]
 800e694:	ed97 1a03 	vldr	s2, [r7, #12]
 800e698:	eddf 0a35 	vldr	s1, [pc, #212]	; 800e770 <AdatiWayReturn+0x7fc>
 800e69c:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800e750 <AdatiWayReturn+0x7dc>
 800e6a0:	f7f4 fc9c 	bl	8002fdc <straight_table2>

	while (1) {

		//straight_table2(90, 300, 300, 500);

		update_coordinate(&x,&y,direction);
 800e6a4:	69ba      	ldr	r2, [r7, #24]
 800e6a6:	f107 011c 	add.w	r1, r7, #28
 800e6aa:	f107 0320 	add.w	r3, r7, #32
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f7ff fc2c 	bl	800df0c <update_coordinate>

		front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e6b4:	4b2d      	ldr	r3, [pc, #180]	; (800e76c <AdatiWayReturn+0x7f8>)
 800e6b6:	689b      	ldr	r3, [r3, #8]
 800e6b8:	2b95      	cmp	r3, #149	; 0x95
 800e6ba:	bfcc      	ite	gt
 800e6bc:	2301      	movgt	r3, #1
 800e6be:	2300      	movle	r3, #0
 800e6c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e6c4:	4b29      	ldr	r3, [pc, #164]	; (800e76c <AdatiWayReturn+0x7f8>)
 800e6c6:	691b      	ldr	r3, [r3, #16]
 800e6c8:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e6cc:	4293      	cmp	r3, r2
 800e6ce:	bfcc      	ite	gt
 800e6d0:	2301      	movgt	r3, #1
 800e6d2:	2300      	movle	r3, #0
 800e6d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e6d8:	4b24      	ldr	r3, [pc, #144]	; (800e76c <AdatiWayReturn+0x7f8>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e6e0:	4293      	cmp	r3, r2
 800e6e2:	bfcc      	ite	gt
 800e6e4:	2301      	movgt	r3, #1
 800e6e6:	2300      	movle	r3, #0
 800e6e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		mode.WallControlMode=1;
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=1;
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	75fb      	strb	r3, [r7, #23]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e6f8:	6978      	ldr	r0, [r7, #20]
 800e6fa:	ed97 2a01 	vldr	s4, [r7, #4]
 800e6fe:	edd7 1a03 	vldr	s3, [r7, #12]
 800e702:	ed97 1a03 	vldr	s2, [r7, #12]
 800e706:	edd7 0a03 	vldr	s1, [r7, #12]
 800e70a:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e70e:	f7f4 fc65 	bl	8002fdc <straight_table2>
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e712:	6a38      	ldr	r0, [r7, #32]
 800e714:	69f9      	ldr	r1, [r7, #28]
 800e716:	69ba      	ldr	r2, [r7, #24]
 800e718:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e71c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e720:	9301      	str	r3, [sp, #4]
 800e722:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e726:	9300      	str	r3, [sp, #0]
 800e728:	4623      	mov	r3, r4
 800e72a:	f002 f933 	bl	8010994 <update_wall>
		if(Dijkstra_mode==1){
 800e72e:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800e732:	2b01      	cmp	r3, #1
 800e734:	d120      	bne.n	800e778 <AdatiWayReturn+0x804>
			route_Dijkstra();//ダイクストラ法のマップを作成
 800e736:	f004 fd17 	bl	8013168 <route_Dijkstra>
			create_StepCountMap_unknown();
 800e73a:	f005 fa19 	bl	8013b70 <create_StepCountMap_unknown>
 800e73e:	e01d      	b.n	800e77c <AdatiWayReturn+0x808>
 800e740:	20000806 	.word	0x20000806
 800e744:	447a0000 	.word	0x447a0000
 800e748:	c3160000 	.word	0xc3160000
 800e74c:	c1a40000 	.word	0xc1a40000
 800e750:	42830000 	.word	0x42830000
 800e754:	2000082c 	.word	0x2000082c
 800e758:	44610000 	.word	0x44610000
 800e75c:	20000807 	.word	0x20000807
 800e760:	2000072c 	.word	0x2000072c
 800e764:	43700000 	.word	0x43700000
 800e768:	20000834 	.word	0x20000834
 800e76c:	20000470 	.word	0x20000470
 800e770:	00000000 	.word	0x00000000
 800e774:	42140000 	.word	0x42140000
		}else{
			create_StepCountMapBack_queue();
 800e778:	f006 f818 	bl	80147ac <create_StepCountMapBack_queue>
		}
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e77c:	6a3b      	ldr	r3, [r7, #32]
 800e77e:	69fa      	ldr	r2, [r7, #28]
 800e780:	69b9      	ldr	r1, [r7, #24]
 800e782:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e786:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e78a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e78e:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e792:	9102      	str	r1, [sp, #8]
 800e794:	9201      	str	r2, [sp, #4]
 800e796:	9300      	str	r3, [sp, #0]
 800e798:	4633      	mov	r3, r6
 800e79a:	462a      	mov	r2, r5
 800e79c:	4621      	mov	r1, r4
 800e79e:	f002 fe73 	bl	8011488 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e7a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d001      	beq.n	800e7ae <AdatiWayReturn+0x83a>
 800e7aa:	23ff      	movs	r3, #255	; 0xff
 800e7ac:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e7ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d001      	beq.n	800e7ba <AdatiWayReturn+0x846>
 800e7b6:	23ff      	movs	r3, #255	; 0xff
 800e7b8:	853b      	strh	r3, [r7, #40]	; 0x28
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e7ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d001      	beq.n	800e7c6 <AdatiWayReturn+0x852>
 800e7c2:	23ff      	movs	r3, #255	; 0xff
 800e7c4:	84bb      	strh	r3, [r7, #36]	; 0x24
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800e7c6:	6a38      	ldr	r0, [r7, #32]
 800e7c8:	69fc      	ldr	r4, [r7, #28]
 800e7ca:	69bd      	ldr	r5, [r7, #24]
 800e7cc:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
 800e7ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e7d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e7d2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e7d4:	9102      	str	r1, [sp, #8]
 800e7d6:	9201      	str	r2, [sp, #4]
 800e7d8:	9300      	str	r3, [sp, #0]
 800e7da:	4633      	mov	r3, r6
 800e7dc:	462a      	mov	r2, r5
 800e7de:	4621      	mov	r1, r4
 800e7e0:	f001 fe84 	bl	80104ec <decision_kitiku>
		mode.WallCutMode=1;
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	75fb      	strb	r3, [r7, #23]
		End_straight(MAZE_OFFSET,mode,right_wall,left_wall);
 800e7e8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e7ec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e7f0:	4619      	mov	r1, r3
 800e7f2:	6978      	ldr	r0, [r7, #20]
 800e7f4:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e7f8:	f7f5 f89a 	bl	8003930 <End_straight>


			if(x == 0 && y == 0) {
 800e7fc:	6a3b      	ldr	r3, [r7, #32]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d165      	bne.n	800e8ce <AdatiWayReturn+0x95a>
 800e802:	69fb      	ldr	r3, [r7, #28]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d162      	bne.n	800e8ce <AdatiWayReturn+0x95a>

				mode.WallControlMode=0;
 800e808:	2300      	movs	r3, #0
 800e80a:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e80c:	2300      	movs	r3, #0
 800e80e:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e810:	2300      	movs	r3, #0
 800e812:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e814:	6978      	ldr	r0, [r7, #20]
 800e816:	ed97 2a01 	vldr	s4, [r7, #4]
 800e81a:	edd7 1a03 	vldr	s3, [r7, #12]
 800e81e:	ed1f 1a2c 	vldr	s2, [pc, #-176]	; 800e770 <AdatiWayReturn+0x7fc>
 800e822:	edd7 0a03 	vldr	s1, [r7, #12]
 800e826:	ed1f 0a2d 	vldr	s0, [pc, #-180]	; 800e774 <AdatiWayReturn+0x800>
 800e82a:	f7f4 fbd7 	bl	8002fdc <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e82e:	2003      	movs	r0, #3
 800e830:	f7f9 f880 	bl	8007934 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e834:	2003      	movs	r0, #3
 800e836:	f7f9 f855 	bl	80078e4 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(500);
 800e83a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e83e:	f7f9 fb77 	bl	8007f30 <wait_ms_NoReset>
				no_safty = 1;
 800e842:	4bbb      	ldr	r3, [pc, #748]	; (800eb30 <AdatiWayReturn+0xbbc>)
 800e844:	2201      	movs	r2, #1
 800e846:	701a      	strb	r2, [r3, #0]
				turning_table2(180,0,0,input_TurningVelocity,input_TurningAcceleration);
 800e848:	ed97 2a00 	vldr	s4, [r7]
 800e84c:	edd7 1a02 	vldr	s3, [r7, #8]
 800e850:	ed9f 1ab8 	vldr	s2, [pc, #736]	; 800eb34 <AdatiWayReturn+0xbc0>
 800e854:	eddf 0ab7 	vldr	s1, [pc, #732]	; 800eb34 <AdatiWayReturn+0xbc0>
 800e858:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 800eb38 <AdatiWayReturn+0xbc4>
 800e85c:	f7f5 f8cc 	bl	80039f8 <turning_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e860:	2003      	movs	r0, #3
 800e862:	f7f9 f867 	bl	8007934 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e866:	2003      	movs	r0, #3
 800e868:	f7f9 f83c 	bl	80078e4 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(500);
 800e86c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e870:	f7f9 fb5e 	bl	8007f30 <wait_ms_NoReset>
				straight_table2(-60/2, 0,0,-150,1000, mode);
 800e874:	6978      	ldr	r0, [r7, #20]
 800e876:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 800eb3c <AdatiWayReturn+0xbc8>
 800e87a:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800eb40 <AdatiWayReturn+0xbcc>
 800e87e:	ed9f 1aad 	vldr	s2, [pc, #692]	; 800eb34 <AdatiWayReturn+0xbc0>
 800e882:	eddf 0aac 	vldr	s1, [pc, #688]	; 800eb34 <AdatiWayReturn+0xbc0>
 800e886:	eebb 0a0e 	vmov.f32	s0, #190	; 0xc1f00000 -30.0
 800e88a:	f7f4 fba7 	bl	8002fdc <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e88e:	2003      	movs	r0, #3
 800e890:	f7f9 f850 	bl	8007934 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e894:	2003      	movs	r0, #3
 800e896:	f7f9 f825 	bl	80078e4 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(500);
 800e89a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e89e:	f7f9 fb47 	bl	8007f30 <wait_ms_NoReset>
				no_safty = 0;
 800e8a2:	4ba3      	ldr	r3, [pc, #652]	; (800eb30 <AdatiWayReturn+0xbbc>)
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	701a      	strb	r2, [r3, #0]
				clear_Ierror();
 800e8a8:	f7f5 fe82 	bl	80045b0 <clear_Ierror>

				direction = direction + 2;
 800e8ac:	69bb      	ldr	r3, [r7, #24]
 800e8ae:	3302      	adds	r3, #2
 800e8b0:	61bb      	str	r3, [r7, #24]

				if (direction >= 5) {
 800e8b2:	69bb      	ldr	r3, [r7, #24]
 800e8b4:	2b04      	cmp	r3, #4
 800e8b6:	dd02      	ble.n	800e8be <AdatiWayReturn+0x94a>
					direction = direction-4;
 800e8b8:	69bb      	ldr	r3, [r7, #24]
 800e8ba:	3b04      	subs	r3, #4
 800e8bc:	61bb      	str	r3, [r7, #24]
				}
				if (direction <= 0) {
 800e8be:	69bb      	ldr	r3, [r7, #24]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	f300 82f0 	bgt.w	800eea6 <AdatiWayReturn+0xf32>
					direction = direction+4;
 800e8c6:	69bb      	ldr	r3, [r7, #24]
 800e8c8:	3304      	adds	r3, #4
 800e8ca:	61bb      	str	r3, [r7, #24]
				}

				break;
 800e8cc:	e2eb      	b.n	800eea6 <AdatiWayReturn+0xf32>
			}


			if(Dijkstra_maker_flag==1){
 800e8ce:	4b9d      	ldr	r3, [pc, #628]	; (800eb44 <AdatiWayReturn+0xbd0>)
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	2b01      	cmp	r3, #1
 800e8d4:	f040 8144 	bne.w	800eb60 <AdatiWayReturn+0xbec>
				// 移動の優先順位 ： 前→右→左→後
				mode.WallControlMode=1;
 800e8d8:	2301      	movs	r3, #1
 800e8da:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e8dc:	2300      	movs	r3, #0
 800e8de:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET-(BACK_TO_CENTER-BACK_TO_CENTER_FRONT), input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e8e4:	6978      	ldr	r0, [r7, #20]
 800e8e6:	ed97 2a01 	vldr	s4, [r7, #4]
 800e8ea:	edd7 1a03 	vldr	s3, [r7, #12]
 800e8ee:	ed9f 1a91 	vldr	s2, [pc, #580]	; 800eb34 <AdatiWayReturn+0xbc0>
 800e8f2:	edd7 0a03 	vldr	s1, [r7, #12]
 800e8f6:	eeb3 0a0d 	vmov.f32	s0, #61	; 0x41e80000  29.0
 800e8fa:	f7f4 fb6f 	bl	8002fdc <straight_table2>

				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e8fe:	2003      	movs	r0, #3
 800e900:	f7f9 f818 	bl	8007934 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e904:	2003      	movs	r0, #3
 800e906:	f7f8 ffed 	bl	80078e4 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e90a:	2064      	movs	r0, #100	; 0x64
 800e90c:	f7f9 fb10 	bl	8007f30 <wait_ms_NoReset>
				create_DijkstraMap();
 800e910:	f002 fee2 	bl	80116d8 <create_DijkstraMap>
								if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800e914:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e916:	2bff      	cmp	r3, #255	; 0xff
 800e918:	d10c      	bne.n	800e934 <AdatiWayReturn+0x9c0>
 800e91a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e91c:	2bff      	cmp	r3, #255	; 0xff
 800e91e:	d109      	bne.n	800e934 <AdatiWayReturn+0x9c0>
 800e920:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e922:	2bff      	cmp	r3, #255	; 0xff
 800e924:	d106      	bne.n	800e934 <AdatiWayReturn+0x9c0>
 800e926:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e928:	2bff      	cmp	r3, #255	; 0xff
 800e92a:	d103      	bne.n	800e934 <AdatiWayReturn+0x9c0>
								// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
									error_mode=1;
 800e92c:	4b86      	ldr	r3, [pc, #536]	; (800eb48 <AdatiWayReturn+0xbd4>)
 800e92e:	2201      	movs	r2, #1
 800e930:	701a      	strb	r2, [r3, #0]
									break;
 800e932:	e2bb      	b.n	800eeac <AdatiWayReturn+0xf38>
								}
								if (x<0 || y<0 || x>15 || y>15){
 800e934:	6a3b      	ldr	r3, [r7, #32]
 800e936:	2b00      	cmp	r3, #0
 800e938:	db08      	blt.n	800e94c <AdatiWayReturn+0x9d8>
 800e93a:	69fb      	ldr	r3, [r7, #28]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	db05      	blt.n	800e94c <AdatiWayReturn+0x9d8>
 800e940:	6a3b      	ldr	r3, [r7, #32]
 800e942:	2b0f      	cmp	r3, #15
 800e944:	dc02      	bgt.n	800e94c <AdatiWayReturn+0x9d8>
 800e946:	69fb      	ldr	r3, [r7, #28]
 800e948:	2b0f      	cmp	r3, #15
 800e94a:	dd03      	ble.n	800e954 <AdatiWayReturn+0x9e0>
												// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
													error_mode=1;
 800e94c:	4b7e      	ldr	r3, [pc, #504]	; (800eb48 <AdatiWayReturn+0xbd4>)
 800e94e:	2201      	movs	r2, #1
 800e950:	701a      	strb	r2, [r3, #0]
													break;
 800e952:	e2ab      	b.n	800eeac <AdatiWayReturn+0xf38>
								}
								mode.WallControlMode=0;
 800e954:	2300      	movs	r3, #0
 800e956:	753b      	strb	r3, [r7, #20]
								mode.WallCutMode=0;
 800e958:	2300      	movs	r3, #0
 800e95a:	75fb      	strb	r3, [r7, #23]
								mode.calMazeMode=0;
 800e95c:	2300      	movs	r3, #0
 800e95e:	75bb      	strb	r3, [r7, #22]
								if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800e960:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e962:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e964:	429a      	cmp	r2, r3
 800e966:	d814      	bhi.n	800e992 <AdatiWayReturn+0xa1e>
 800e968:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e96a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e96c:	429a      	cmp	r2, r3
 800e96e:	d810      	bhi.n	800e992 <AdatiWayReturn+0xa1e>
 800e970:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e972:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e974:	429a      	cmp	r2, r3
 800e976:	d80c      	bhi.n	800e992 <AdatiWayReturn+0xa1e>
									// 直進
									straight_table2(90/2+(BACK_TO_CENTER-BACK_TO_CENTER_FRONT), 0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e978:	6978      	ldr	r0, [r7, #20]
 800e97a:	ed97 2a01 	vldr	s4, [r7, #4]
 800e97e:	edd7 1a03 	vldr	s3, [r7, #12]
 800e982:	ed97 1a03 	vldr	s2, [r7, #12]
 800e986:	eddf 0a6b 	vldr	s1, [pc, #428]	; 800eb34 <AdatiWayReturn+0xbc0>
 800e98a:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800eb4c <AdatiWayReturn+0xbd8>
 800e98e:	f7f4 fb25 	bl	8002fdc <straight_table2>
								}
								if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800e992:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e994:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e996:	429a      	cmp	r2, r3
 800e998:	d230      	bcs.n	800e9fc <AdatiWayReturn+0xa88>
 800e99a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e99c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e99e:	429a      	cmp	r2, r3
 800e9a0:	d82c      	bhi.n	800e9fc <AdatiWayReturn+0xa88>
 800e9a2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e9a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e9a6:	429a      	cmp	r2, r3
 800e9a8:	d828      	bhi.n	800e9fc <AdatiWayReturn+0xa88>
									// 右旋回
									turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 800e9aa:	edd7 7a02 	vldr	s15, [r7, #8]
 800e9ae:	eef1 7a67 	vneg.f32	s15, s15
 800e9b2:	ed97 2a00 	vldr	s4, [r7]
 800e9b6:	eef0 1a67 	vmov.f32	s3, s15
 800e9ba:	ed9f 1a5e 	vldr	s2, [pc, #376]	; 800eb34 <AdatiWayReturn+0xbc0>
 800e9be:	eddf 0a5d 	vldr	s1, [pc, #372]	; 800eb34 <AdatiWayReturn+0xbc0>
 800e9c2:	ed9f 0a63 	vldr	s0, [pc, #396]	; 800eb50 <AdatiWayReturn+0xbdc>
 800e9c6:	f7f5 f817 	bl	80039f8 <turning_table2>
									pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e9ca:	2003      	movs	r0, #3
 800e9cc:	f7f8 ffb2 	bl	8007934 <pl_R_DriveMotor_mode>
									pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e9d0:	2003      	movs	r0, #3
 800e9d2:	f7f8 ff87 	bl	80078e4 <pl_L_DriveMotor_mode>
									wait_ms_NoReset(100);
 800e9d6:	2064      	movs	r0, #100	; 0x64
 800e9d8:	f7f9 faaa 	bl	8007f30 <wait_ms_NoReset>
									straight_table2(90/2+(BACK_TO_CENTER-BACK_TO_CENTER_FRONT), 0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e9dc:	6978      	ldr	r0, [r7, #20]
 800e9de:	ed97 2a01 	vldr	s4, [r7, #4]
 800e9e2:	edd7 1a03 	vldr	s3, [r7, #12]
 800e9e6:	ed97 1a03 	vldr	s2, [r7, #12]
 800e9ea:	eddf 0a52 	vldr	s1, [pc, #328]	; 800eb34 <AdatiWayReturn+0xbc0>
 800e9ee:	ed9f 0a57 	vldr	s0, [pc, #348]	; 800eb4c <AdatiWayReturn+0xbd8>
 800e9f2:	f7f4 faf3 	bl	8002fdc <straight_table2>
									direction++;
 800e9f6:	69bb      	ldr	r3, [r7, #24]
 800e9f8:	3301      	adds	r3, #1
 800e9fa:	61bb      	str	r3, [r7, #24]
								}
								if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800e9fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e9fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea00:	429a      	cmp	r2, r3
 800ea02:	d22c      	bcs.n	800ea5e <AdatiWayReturn+0xaea>
 800ea04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ea06:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d228      	bcs.n	800ea5e <AdatiWayReturn+0xaea>
 800ea0c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ea0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d824      	bhi.n	800ea5e <AdatiWayReturn+0xaea>
									// 左旋回
									turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800ea14:	ed97 2a00 	vldr	s4, [r7]
 800ea18:	edd7 1a02 	vldr	s3, [r7, #8]
 800ea1c:	ed9f 1a45 	vldr	s2, [pc, #276]	; 800eb34 <AdatiWayReturn+0xbc0>
 800ea20:	eddf 0a44 	vldr	s1, [pc, #272]	; 800eb34 <AdatiWayReturn+0xbc0>
 800ea24:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 800eb54 <AdatiWayReturn+0xbe0>
 800ea28:	f7f4 ffe6 	bl	80039f8 <turning_table2>
									pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ea2c:	2003      	movs	r0, #3
 800ea2e:	f7f8 ff81 	bl	8007934 <pl_R_DriveMotor_mode>
									pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ea32:	2003      	movs	r0, #3
 800ea34:	f7f8 ff56 	bl	80078e4 <pl_L_DriveMotor_mode>
									wait_ms_NoReset(100);
 800ea38:	2064      	movs	r0, #100	; 0x64
 800ea3a:	f7f9 fa79 	bl	8007f30 <wait_ms_NoReset>
									straight_table2(90/2+(BACK_TO_CENTER-BACK_TO_CENTER_FRONT), 0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ea3e:	6978      	ldr	r0, [r7, #20]
 800ea40:	ed97 2a01 	vldr	s4, [r7, #4]
 800ea44:	edd7 1a03 	vldr	s3, [r7, #12]
 800ea48:	ed97 1a03 	vldr	s2, [r7, #12]
 800ea4c:	eddf 0a39 	vldr	s1, [pc, #228]	; 800eb34 <AdatiWayReturn+0xbc0>
 800ea50:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 800eb4c <AdatiWayReturn+0xbd8>
 800ea54:	f7f4 fac2 	bl	8002fdc <straight_table2>
									direction--;
 800ea58:	69bb      	ldr	r3, [r7, #24]
 800ea5a:	3b01      	subs	r3, #1
 800ea5c:	61bb      	str	r3, [r7, #24]
								}
								if(back_count < front_count && back_count < right_count
 800ea5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea62:	429a      	cmp	r2, r3
 800ea64:	f080 820d 	bcs.w	800ee82 <AdatiWayReturn+0xf0e>
 800ea68:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	f080 8208 	bcs.w	800ee82 <AdatiWayReturn+0xf0e>
										&& back_count < left_count){
 800ea72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea76:	429a      	cmp	r2, r3
 800ea78:	f080 8203 	bcs.w	800ee82 <AdatiWayReturn+0xf0e>
									//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
									no_safty = 1;
 800ea7c:	4b2c      	ldr	r3, [pc, #176]	; (800eb30 <AdatiWayReturn+0xbbc>)
 800ea7e:	2201      	movs	r2, #1
 800ea80:	701a      	strb	r2, [r3, #0]
									backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800ea82:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ea86:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800ea8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea8e:	4618      	mov	r0, r3
 800ea90:	edd7 0a00 	vldr	s1, [r7]
 800ea94:	ed97 0a02 	vldr	s0, [r7, #8]
 800ea98:	f7fb f9a4 	bl	8009de4 <backTurn_controlWall>
									//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
									wait_ms_NoReset(100);
 800ea9c:	2064      	movs	r0, #100	; 0x64
 800ea9e:	f7f9 fa47 	bl	8007f30 <wait_ms_NoReset>
									no_safty = 0;
 800eaa2:	4b23      	ldr	r3, [pc, #140]	; (800eb30 <AdatiWayReturn+0xbbc>)
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	701a      	strb	r2, [r3, #0]
									//clear_Ierror();
									mode.WallControlMode=0;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	753b      	strb	r3, [r7, #20]
									if(front_wall){
 800eaac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d027      	beq.n	800eb04 <AdatiWayReturn+0xb90>
									straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800eab4:	6978      	ldr	r0, [r7, #20]
 800eab6:	ed9f 2a21 	vldr	s4, [pc, #132]	; 800eb3c <AdatiWayReturn+0xbc8>
 800eaba:	eddf 1a21 	vldr	s3, [pc, #132]	; 800eb40 <AdatiWayReturn+0xbcc>
 800eabe:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 800eb34 <AdatiWayReturn+0xbc0>
 800eac2:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800eb34 <AdatiWayReturn+0xbc0>
 800eac6:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800eb58 <AdatiWayReturn+0xbe4>
 800eaca:	f7f4 fa87 	bl	8002fdc <straight_table2>
									pl_R_DriveMotor_mode(MOTOR_BREAK);
 800eace:	2003      	movs	r0, #3
 800ead0:	f7f8 ff30 	bl	8007934 <pl_R_DriveMotor_mode>
									pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ead4:	2003      	movs	r0, #3
 800ead6:	f7f8 ff05 	bl	80078e4 <pl_L_DriveMotor_mode>
									wait_ms_NoReset(100);
 800eada:	2064      	movs	r0, #100	; 0x64
 800eadc:	f7f9 fa28 	bl	8007f30 <wait_ms_NoReset>

									clear_Ierror();
 800eae0:	f7f5 fd66 	bl	80045b0 <clear_Ierror>
									mode.WallControlMode=1;
 800eae4:	2301      	movs	r3, #1
 800eae6:	753b      	strb	r3, [r7, #20]
									straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800eae8:	6978      	ldr	r0, [r7, #20]
 800eaea:	ed97 2a01 	vldr	s4, [r7, #4]
 800eaee:	edd7 1a03 	vldr	s3, [r7, #12]
 800eaf2:	ed97 1a03 	vldr	s2, [r7, #12]
 800eaf6:	eddf 0a0f 	vldr	s1, [pc, #60]	; 800eb34 <AdatiWayReturn+0xbc0>
 800eafa:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800eb5c <AdatiWayReturn+0xbe8>
 800eafe:	f7f4 fa6d 	bl	8002fdc <straight_table2>
 800eb02:	e010      	b.n	800eb26 <AdatiWayReturn+0xbb2>
									}else{
										clear_Ierror();
 800eb04:	f7f5 fd54 	bl	80045b0 <clear_Ierror>
										mode.WallControlMode=1;
 800eb08:	2301      	movs	r3, #1
 800eb0a:	753b      	strb	r3, [r7, #20]
										straight_table2(90/2+(BACK_TO_CENTER-BACK_TO_CENTER_FRONT),0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800eb0c:	6978      	ldr	r0, [r7, #20]
 800eb0e:	ed97 2a01 	vldr	s4, [r7, #4]
 800eb12:	edd7 1a03 	vldr	s3, [r7, #12]
 800eb16:	ed97 1a03 	vldr	s2, [r7, #12]
 800eb1a:	eddf 0a06 	vldr	s1, [pc, #24]	; 800eb34 <AdatiWayReturn+0xbc0>
 800eb1e:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800eb4c <AdatiWayReturn+0xbd8>
 800eb22:	f7f4 fa5b 	bl	8002fdc <straight_table2>

									}
									//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
									direction = direction + 2;
 800eb26:	69bb      	ldr	r3, [r7, #24]
 800eb28:	3302      	adds	r3, #2
 800eb2a:	61bb      	str	r3, [r7, #24]
 800eb2c:	e1a9      	b.n	800ee82 <AdatiWayReturn+0xf0e>
 800eb2e:	bf00      	nop
 800eb30:	20000806 	.word	0x20000806
 800eb34:	00000000 	.word	0x00000000
 800eb38:	43340000 	.word	0x43340000
 800eb3c:	447a0000 	.word	0x447a0000
 800eb40:	c3160000 	.word	0xc3160000
 800eb44:	20000d2c 	.word	0x20000d2c
 800eb48:	20000807 	.word	0x20000807
 800eb4c:	42540000 	.word	0x42540000
 800eb50:	c2b40000 	.word	0xc2b40000
 800eb54:	42b40000 	.word	0x42b40000
 800eb58:	c1a40000 	.word	0xc1a40000
 800eb5c:	42830000 	.word	0x42830000
								}


			}else{

				if(know_mode==0){
 800eb60:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d102      	bne.n	800eb6e <AdatiWayReturn+0xbfa>
					kitikukan = 0;
 800eb68:	4b97      	ldr	r3, [pc, #604]	; (800edc8 <AdatiWayReturn+0xe54>)
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	601a      	str	r2, [r3, #0]
				}
			if (kitikukan == OFF) {
 800eb6e:	4b96      	ldr	r3, [pc, #600]	; (800edc8 <AdatiWayReturn+0xe54>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	f040 8142 	bne.w	800edfc <AdatiWayReturn+0xe88>

				// 移動の優先順位 ： 前→右→左→後
				if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800eb78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eb7a:	2bff      	cmp	r3, #255	; 0xff
 800eb7c:	d10c      	bne.n	800eb98 <AdatiWayReturn+0xc24>
 800eb7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eb80:	2bff      	cmp	r3, #255	; 0xff
 800eb82:	d109      	bne.n	800eb98 <AdatiWayReturn+0xc24>
 800eb84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb86:	2bff      	cmp	r3, #255	; 0xff
 800eb88:	d106      	bne.n	800eb98 <AdatiWayReturn+0xc24>
 800eb8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eb8c:	2bff      	cmp	r3, #255	; 0xff
 800eb8e:	d103      	bne.n	800eb98 <AdatiWayReturn+0xc24>
				// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

					error_mode=1;
 800eb90:	4b8e      	ldr	r3, [pc, #568]	; (800edcc <AdatiWayReturn+0xe58>)
 800eb92:	2201      	movs	r2, #1
 800eb94:	701a      	strb	r2, [r3, #0]
					break;
 800eb96:	e189      	b.n	800eeac <AdatiWayReturn+0xf38>
				}
				if (x<0 || y<0 || x>15 || y>15){
 800eb98:	6a3b      	ldr	r3, [r7, #32]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	db08      	blt.n	800ebb0 <AdatiWayReturn+0xc3c>
 800eb9e:	69fb      	ldr	r3, [r7, #28]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	db05      	blt.n	800ebb0 <AdatiWayReturn+0xc3c>
 800eba4:	6a3b      	ldr	r3, [r7, #32]
 800eba6:	2b0f      	cmp	r3, #15
 800eba8:	dc02      	bgt.n	800ebb0 <AdatiWayReturn+0xc3c>
 800ebaa:	69fb      	ldr	r3, [r7, #28]
 800ebac:	2b0f      	cmp	r3, #15
 800ebae:	dd03      	ble.n	800ebb8 <AdatiWayReturn+0xc44>
								// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

									error_mode=1;
 800ebb0:	4b86      	ldr	r3, [pc, #536]	; (800edcc <AdatiWayReturn+0xe58>)
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	701a      	strb	r2, [r3, #0]
									break;
 800ebb6:	e179      	b.n	800eeac <AdatiWayReturn+0xf38>
				}
				if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800ebb8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800ebba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d81a      	bhi.n	800ebf6 <AdatiWayReturn+0xc82>
 800ebc0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800ebc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d816      	bhi.n	800ebf6 <AdatiWayReturn+0xc82>
 800ebc8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800ebca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	d812      	bhi.n	800ebf6 <AdatiWayReturn+0xc82>
					// 直進
					mode.WallControlMode=1;
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 800ebd8:	2300      	movs	r3, #0
 800ebda:	75fb      	strb	r3, [r7, #23]
					straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ebdc:	6978      	ldr	r0, [r7, #20]
 800ebde:	ed97 2a01 	vldr	s4, [r7, #4]
 800ebe2:	edd7 1a03 	vldr	s3, [r7, #12]
 800ebe6:	ed97 1a03 	vldr	s2, [r7, #12]
 800ebea:	edd7 0a03 	vldr	s1, [r7, #12]
 800ebee:	ed9f 0a78 	vldr	s0, [pc, #480]	; 800edd0 <AdatiWayReturn+0xe5c>
 800ebf2:	f7f4 f9f3 	bl	8002fdc <straight_table2>
				}
				if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800ebf6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ebf8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	d22c      	bcs.n	800ec58 <AdatiWayReturn+0xce4>
 800ebfe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ec00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d828      	bhi.n	800ec58 <AdatiWayReturn+0xce4>
 800ec06:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ec08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ec0a:	429a      	cmp	r2, r3
 800ec0c:	d824      	bhi.n	800ec58 <AdatiWayReturn+0xce4>
					// 右旋回
					if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800ec0e:	6a3b      	ldr	r3, [r7, #32]
 800ec10:	2b01      	cmp	r3, #1
 800ec12:	d002      	beq.n	800ec1a <AdatiWayReturn+0xca6>
 800ec14:	6a3b      	ldr	r3, [r7, #32]
 800ec16:	2b02      	cmp	r3, #2
 800ec18:	d109      	bne.n	800ec2e <AdatiWayReturn+0xcba>
 800ec1a:	69fb      	ldr	r3, [r7, #28]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d002      	beq.n	800ec26 <AdatiWayReturn+0xcb2>
 800ec20:	69fb      	ldr	r3, [r7, #28]
 800ec22:	2b01      	cmp	r3, #1
 800ec24:	d103      	bne.n	800ec2e <AdatiWayReturn+0xcba>
						noGoalPillarMode=1;
 800ec26:	4b6b      	ldr	r3, [pc, #428]	; (800edd4 <AdatiWayReturn+0xe60>)
 800ec28:	2201      	movs	r2, #1
 800ec2a:	701a      	strb	r2, [r3, #0]
 800ec2c:	e002      	b.n	800ec34 <AdatiWayReturn+0xcc0>
					}else{
						noGoalPillarMode=0;
 800ec2e:	4b69      	ldr	r3, [pc, #420]	; (800edd4 <AdatiWayReturn+0xe60>)
 800ec30:	2200      	movs	r2, #0
 800ec32:	701a      	strb	r2, [r3, #0]
					}
					slalomR(speed300_exploration.slalom_R, OFF,EXPLORATION,0,input_StraightVelocity);
 800ec34:	4b68      	ldr	r3, [pc, #416]	; (800edd8 <AdatiWayReturn+0xe64>)
 800ec36:	2200      	movs	r2, #0
 800ec38:	9203      	str	r2, [sp, #12]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	9202      	str	r2, [sp, #8]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	9201      	str	r2, [sp, #4]
 800ec42:	699a      	ldr	r2, [r3, #24]
 800ec44:	9200      	str	r2, [sp, #0]
 800ec46:	3308      	adds	r3, #8
 800ec48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ec4a:	ed97 0a03 	vldr	s0, [r7, #12]
 800ec4e:	f7fb f993 	bl	8009f78 <slalomR>
					direction++;
 800ec52:	69bb      	ldr	r3, [r7, #24]
 800ec54:	3301      	adds	r3, #1
 800ec56:	61bb      	str	r3, [r7, #24]
				}
				if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800ec58:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ec5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d22c      	bcs.n	800ecba <AdatiWayReturn+0xd46>
 800ec60:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ec62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d228      	bcs.n	800ecba <AdatiWayReturn+0xd46>
 800ec68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ec6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ec6c:	429a      	cmp	r2, r3
 800ec6e:	d824      	bhi.n	800ecba <AdatiWayReturn+0xd46>
					// 左旋回
					if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800ec70:	6a3b      	ldr	r3, [r7, #32]
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	d002      	beq.n	800ec7c <AdatiWayReturn+0xd08>
 800ec76:	6a3b      	ldr	r3, [r7, #32]
 800ec78:	2b02      	cmp	r3, #2
 800ec7a:	d109      	bne.n	800ec90 <AdatiWayReturn+0xd1c>
 800ec7c:	69fb      	ldr	r3, [r7, #28]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d002      	beq.n	800ec88 <AdatiWayReturn+0xd14>
 800ec82:	69fb      	ldr	r3, [r7, #28]
 800ec84:	2b01      	cmp	r3, #1
 800ec86:	d103      	bne.n	800ec90 <AdatiWayReturn+0xd1c>
						noGoalPillarMode=1;
 800ec88:	4b52      	ldr	r3, [pc, #328]	; (800edd4 <AdatiWayReturn+0xe60>)
 800ec8a:	2201      	movs	r2, #1
 800ec8c:	701a      	strb	r2, [r3, #0]
 800ec8e:	e002      	b.n	800ec96 <AdatiWayReturn+0xd22>
					}else{
						noGoalPillarMode=0;
 800ec90:	4b50      	ldr	r3, [pc, #320]	; (800edd4 <AdatiWayReturn+0xe60>)
 800ec92:	2200      	movs	r2, #0
 800ec94:	701a      	strb	r2, [r3, #0]
					}
					slalomL(speed300_exploration.slalom_L, OFF,EXPLORATION,0,input_StraightVelocity);
 800ec96:	4b50      	ldr	r3, [pc, #320]	; (800edd8 <AdatiWayReturn+0xe64>)
 800ec98:	2200      	movs	r2, #0
 800ec9a:	9203      	str	r2, [sp, #12]
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	9202      	str	r2, [sp, #8]
 800eca0:	2200      	movs	r2, #0
 800eca2:	9201      	str	r2, [sp, #4]
 800eca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eca6:	9200      	str	r2, [sp, #0]
 800eca8:	331c      	adds	r3, #28
 800ecaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ecac:	ed97 0a03 	vldr	s0, [r7, #12]
 800ecb0:	f7fb fb48 	bl	800a344 <slalomL>
					direction--;
 800ecb4:	69bb      	ldr	r3, [r7, #24]
 800ecb6:	3b01      	subs	r3, #1
 800ecb8:	61bb      	str	r3, [r7, #24]
				}
				if(back_count < front_count && back_count < right_count
 800ecba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ecbc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	f080 80df 	bcs.w	800ee82 <AdatiWayReturn+0xf0e>
 800ecc4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ecc6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	f080 80da 	bcs.w	800ee82 <AdatiWayReturn+0xf0e>
						&& back_count < left_count){
 800ecce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ecd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	f080 80d5 	bcs.w	800ee82 <AdatiWayReturn+0xf0e>
					//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
					//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
					mode.WallControlMode=1;
 800ecd8:	2301      	movs	r3, #1
 800ecda:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 800ece0:	2300      	movs	r3, #0
 800ece2:	75fb      	strb	r3, [r7, #23]
					straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800ece4:	6978      	ldr	r0, [r7, #20]
 800ece6:	ed97 2a01 	vldr	s4, [r7, #4]
 800ecea:	edd7 1a03 	vldr	s3, [r7, #12]
 800ecee:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 800eddc <AdatiWayReturn+0xe68>
 800ecf2:	edd7 0a03 	vldr	s1, [r7, #12]
 800ecf6:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800edf8 <AdatiWayReturn+0xe84>
 800ecfa:	f7f4 f96f 	bl	8002fdc <straight_table2>
					pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ecfe:	2003      	movs	r0, #3
 800ed00:	f7f8 fe18 	bl	8007934 <pl_R_DriveMotor_mode>
					pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ed04:	2003      	movs	r0, #3
 800ed06:	f7f8 fded 	bl	80078e4 <pl_L_DriveMotor_mode>
					wait_ms_NoReset(100);
 800ed0a:	2064      	movs	r0, #100	; 0x64
 800ed0c:	f7f9 f910 	bl	8007f30 <wait_ms_NoReset>
					create_DijkstraMap();
 800ed10:	f002 fce2 	bl	80116d8 <create_DijkstraMap>
					no_safty = 1;
 800ed14:	4b32      	ldr	r3, [pc, #200]	; (800ede0 <AdatiWayReturn+0xe6c>)
 800ed16:	2201      	movs	r2, #1
 800ed18:	701a      	strb	r2, [r3, #0]
					backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800ed1a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ed1e:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800ed22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed26:	4618      	mov	r0, r3
 800ed28:	edd7 0a00 	vldr	s1, [r7]
 800ed2c:	ed97 0a02 	vldr	s0, [r7, #8]
 800ed30:	f7fb f858 	bl	8009de4 <backTurn_controlWall>
					//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
					wait_ms_NoReset(100);
 800ed34:	2064      	movs	r0, #100	; 0x64
 800ed36:	f7f9 f8fb 	bl	8007f30 <wait_ms_NoReset>
					no_safty = 0;
 800ed3a:	4b29      	ldr	r3, [pc, #164]	; (800ede0 <AdatiWayReturn+0xe6c>)
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	701a      	strb	r2, [r3, #0]
					//clear_Ierror();
					mode.WallControlMode=0;
 800ed40:	2300      	movs	r3, #0
 800ed42:	753b      	strb	r3, [r7, #20]
					if(front_wall){
 800ed44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d027      	beq.n	800ed9c <AdatiWayReturn+0xe28>
					straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800ed4c:	6978      	ldr	r0, [r7, #20]
 800ed4e:	ed9f 2a25 	vldr	s4, [pc, #148]	; 800ede4 <AdatiWayReturn+0xe70>
 800ed52:	eddf 1a25 	vldr	s3, [pc, #148]	; 800ede8 <AdatiWayReturn+0xe74>
 800ed56:	ed9f 1a21 	vldr	s2, [pc, #132]	; 800eddc <AdatiWayReturn+0xe68>
 800ed5a:	eddf 0a20 	vldr	s1, [pc, #128]	; 800eddc <AdatiWayReturn+0xe68>
 800ed5e:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800edec <AdatiWayReturn+0xe78>
 800ed62:	f7f4 f93b 	bl	8002fdc <straight_table2>
					pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ed66:	2003      	movs	r0, #3
 800ed68:	f7f8 fde4 	bl	8007934 <pl_R_DriveMotor_mode>
					pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ed6c:	2003      	movs	r0, #3
 800ed6e:	f7f8 fdb9 	bl	80078e4 <pl_L_DriveMotor_mode>
					wait_ms_NoReset(100);
 800ed72:	2064      	movs	r0, #100	; 0x64
 800ed74:	f7f9 f8dc 	bl	8007f30 <wait_ms_NoReset>

					clear_Ierror();
 800ed78:	f7f5 fc1a 	bl	80045b0 <clear_Ierror>
					mode.WallControlMode=1;
 800ed7c:	2301      	movs	r3, #1
 800ed7e:	753b      	strb	r3, [r7, #20]
					straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ed80:	6978      	ldr	r0, [r7, #20]
 800ed82:	ed97 2a01 	vldr	s4, [r7, #4]
 800ed86:	edd7 1a03 	vldr	s3, [r7, #12]
 800ed8a:	ed97 1a03 	vldr	s2, [r7, #12]
 800ed8e:	eddf 0a13 	vldr	s1, [pc, #76]	; 800eddc <AdatiWayReturn+0xe68>
 800ed92:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800edf0 <AdatiWayReturn+0xe7c>
 800ed96:	f7f4 f921 	bl	8002fdc <straight_table2>
 800ed9a:	e010      	b.n	800edbe <AdatiWayReturn+0xe4a>
					}else{
						clear_Ierror();
 800ed9c:	f7f5 fc08 	bl	80045b0 <clear_Ierror>
						mode.WallControlMode=1;
 800eda0:	2301      	movs	r3, #1
 800eda2:	753b      	strb	r3, [r7, #20]
						straight_table2(90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800eda4:	6978      	ldr	r0, [r7, #20]
 800eda6:	ed97 2a01 	vldr	s4, [r7, #4]
 800edaa:	edd7 1a03 	vldr	s3, [r7, #12]
 800edae:	ed97 1a03 	vldr	s2, [r7, #12]
 800edb2:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800eddc <AdatiWayReturn+0xe68>
 800edb6:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800edf4 <AdatiWayReturn+0xe80>
 800edba:	f7f4 f90f 	bl	8002fdc <straight_table2>

					}
					//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
					direction = direction + 2;
 800edbe:	69bb      	ldr	r3, [r7, #24]
 800edc0:	3302      	adds	r3, #2
 800edc2:	61bb      	str	r3, [r7, #24]
 800edc4:	e05d      	b.n	800ee82 <AdatiWayReturn+0xf0e>
 800edc6:	bf00      	nop
 800edc8:	20000838 	.word	0x20000838
 800edcc:	20000807 	.word	0x20000807
 800edd0:	42a40000 	.word	0x42a40000
 800edd4:	20000529 	.word	0x20000529
 800edd8:	2000ef80 	.word	0x2000ef80
 800eddc:	00000000 	.word	0x00000000
 800ede0:	20000806 	.word	0x20000806
 800ede4:	447a0000 	.word	0x447a0000
 800ede8:	c3160000 	.word	0xc3160000
 800edec:	c1a40000 	.word	0xc1a40000
 800edf0:	42830000 	.word	0x42830000
 800edf4:	42340000 	.word	0x42340000
 800edf8:	42140000 	.word	0x42140000

				}

			} else {
				mode.WallControlMode=1;
 800edfc:	2301      	movs	r3, #1
 800edfe:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=1;
 800ee00:	2301      	movs	r3, #1
 800ee02:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800ee04:	2300      	movs	r3, #0
 800ee06:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ee08:	6978      	ldr	r0, [r7, #20]
 800ee0a:	ed97 2a01 	vldr	s4, [r7, #4]
 800ee0e:	edd7 1a03 	vldr	s3, [r7, #12]
 800ee12:	ed97 1a03 	vldr	s2, [r7, #12]
 800ee16:	edd7 0a03 	vldr	s1, [r7, #12]
 800ee1a:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 800edf8 <AdatiWayReturn+0xe84>
 800ee1e:	f7f4 f8dd 	bl	8002fdc <straight_table2>
				compress_kitiku(&x,&y,&direction);
 800ee22:	f107 0218 	add.w	r2, r7, #24
 800ee26:	f107 011c 	add.w	r1, r7, #28
 800ee2a:	f107 0320 	add.w	r3, r7, #32
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f001 fbce 	bl	80105d0 <compress_kitiku>
				mode.WallCutMode=0;
 800ee34:	2300      	movs	r3, #0
 800ee36:	75fb      	strb	r3, [r7, #23]
				End_straight(90/2-MAZE_OFFSET,mode,1,1);
 800ee38:	2201      	movs	r2, #1
 800ee3a:	2101      	movs	r1, #1
 800ee3c:	6978      	ldr	r0, [r7, #20]
 800ee3e:	ed1f 0a12 	vldr	s0, [pc, #-72]	; 800edf8 <AdatiWayReturn+0xe84>
 800ee42:	f7f4 fd75 	bl	8003930 <End_straight>
				mode.WallControlMode=1;
 800ee46:	2301      	movs	r3, #1
 800ee48:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	75fb      	strb	r3, [r7, #23]
				straight_table2((90/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,1000,input_StraightAcceleration, mode);
 800ee52:	4b28      	ldr	r3, [pc, #160]	; (800eef4 <AdatiWayReturn+0xf80>)
 800ee54:	681a      	ldr	r2, [r3, #0]
 800ee56:	4613      	mov	r3, r2
 800ee58:	005b      	lsls	r3, r3, #1
 800ee5a:	4413      	add	r3, r2
 800ee5c:	011a      	lsls	r2, r3, #4
 800ee5e:	1ad3      	subs	r3, r2, r3
 800ee60:	ee07 3a90 	vmov	s15, r3
 800ee64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee68:	6978      	ldr	r0, [r7, #20]
 800ee6a:	ed97 2a01 	vldr	s4, [r7, #4]
 800ee6e:	eddf 1a22 	vldr	s3, [pc, #136]	; 800eef8 <AdatiWayReturn+0xf84>
 800ee72:	ed97 1a03 	vldr	s2, [r7, #12]
 800ee76:	edd7 0a03 	vldr	s1, [r7, #12]
 800ee7a:	eeb0 0a67 	vmov.f32	s0, s15
 800ee7e:	f7f4 f8ad 	bl	8002fdc <straight_table2>

			}
			}

			if (direction >= 5) {
 800ee82:	69bb      	ldr	r3, [r7, #24]
 800ee84:	2b04      	cmp	r3, #4
 800ee86:	dd02      	ble.n	800ee8e <AdatiWayReturn+0xf1a>
				direction = direction-4;
 800ee88:	69bb      	ldr	r3, [r7, #24]
 800ee8a:	3b04      	subs	r3, #4
 800ee8c:	61bb      	str	r3, [r7, #24]
			}
			if (direction <= 0) {
 800ee8e:	69bb      	ldr	r3, [r7, #24]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	dc02      	bgt.n	800ee9a <AdatiWayReturn+0xf26>
				direction = direction+4;
 800ee94:	69bb      	ldr	r3, [r7, #24]
 800ee96:	3304      	adds	r3, #4
 800ee98:	61bb      	str	r3, [r7, #24]
	//基地区間**********************************************************************
	//		if (know_road == 1) {
	//			most_speed_kitikukan_play(850, 1600);
	//		}
	//基地区間
			if(error_mode==1){break;}
 800ee9a:	4b18      	ldr	r3, [pc, #96]	; (800eefc <AdatiWayReturn+0xf88>)
 800ee9c:	781b      	ldrb	r3, [r3, #0]
 800ee9e:	2b01      	cmp	r3, #1
 800eea0:	d003      	beq.n	800eeaa <AdatiWayReturn+0xf36>
		update_coordinate(&x,&y,direction);
 800eea2:	f7ff bbff 	b.w	800e6a4 <AdatiWayReturn+0x730>
				break;
 800eea6:	bf00      	nop
 800eea8:	e000      	b.n	800eeac <AdatiWayReturn+0xf38>
			if(error_mode==1){break;}
 800eeaa:	bf00      	nop
		}

	pl_DriveMotor_standby(OFF); //MTU2.TSTR.BIT.CST0 = 0;
 800eeac:	2000      	movs	r0, #0
 800eeae:	f7f8 fd0f 	bl	80078d0 <pl_DriveMotor_standby>
	maze_mode = 0;
 800eeb2:	4b13      	ldr	r3, [pc, #76]	; (800ef00 <AdatiWayReturn+0xf8c>)
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 800eeb8:	2064      	movs	r0, #100	; 0x64
 800eeba:	f009 ff4d 	bl	8018d58 <HAL_Delay>
	maze_display();
 800eebe:	f005 ffb1 	bl	8014e24 <maze_display>
	create_StepCountMap_queue();
 800eec2:	f005 f98b 	bl	80141dc <create_StepCountMap_queue>
	if(walk_count[0][0] == 255){
 800eec6:	4b0f      	ldr	r3, [pc, #60]	; (800ef04 <AdatiWayReturn+0xf90>)
 800eec8:	881b      	ldrh	r3, [r3, #0]
 800eeca:	2bff      	cmp	r3, #255	; 0xff
 800eecc:	d102      	bne.n	800eed4 <AdatiWayReturn+0xf60>
		error_mode = 1;
 800eece:	4b0b      	ldr	r3, [pc, #44]	; (800eefc <AdatiWayReturn+0xf88>)
 800eed0:	2201      	movs	r2, #1
 800eed2:	701a      	strb	r2, [r3, #0]
	}
	if (error_mode == 0) {
 800eed4:	4b09      	ldr	r3, [pc, #36]	; (800eefc <AdatiWayReturn+0xf88>)
 800eed6:	781b      	ldrb	r3, [r3, #0]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d102      	bne.n	800eee2 <AdatiWayReturn+0xf6e>
		record_in();
 800eedc:	f7f8 fa06 	bl	80072ec <record_in>
	} else {
		record_out();
	}

}
 800eee0:	e001      	b.n	800eee6 <AdatiWayReturn+0xf72>
		record_out();
 800eee2:	f7f8 fabf 	bl	8007464 <record_out>
}
 800eee6:	bf00      	nop
 800eee8:	3734      	adds	r7, #52	; 0x34
 800eeea:	46bd      	mov	sp, r7
 800eeec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800eef0:	b004      	add	sp, #16
 800eef2:	4770      	bx	lr
 800eef4:	2000082c 	.word	0x2000082c
 800eef8:	447a0000 	.word	0x447a0000
 800eefc:	20000807 	.word	0x20000807
 800ef00:	20000834 	.word	0x20000834
 800ef04:	20000d30 	.word	0x20000d30

0800ef08 <pass_maker_Dijkstra>:





void pass_maker_Dijkstra(void){
 800ef08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef0a:	b08b      	sub	sp, #44	; 0x2c
 800ef0c:	af04      	add	r7, sp, #16

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int x = 0;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	607b      	str	r3, [r7, #4]
	int y = 0;
 800ef12:	2300      	movs	r3, #0
 800ef14:	603b      	str	r3, [r7, #0]
	int direction = 1;
 800ef16:	2301      	movs	r3, #1
 800ef18:	617b      	str	r3, [r7, #20]
	pass_count = 0;
 800ef1a:	4b8b      	ldr	r3, [pc, #556]	; (800f148 <pass_maker_Dijkstra+0x240>)
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	701a      	strb	r2, [r3, #0]
	create_DijkstraMap();
 800ef20:	f002 fbda 	bl	80116d8 <create_DijkstraMap>
	maze_display_Dijkstra();
 800ef24:	f006 f89c 	bl	8015060 <maze_display_Dijkstra>
	pass[0] = 1;
 800ef28:	4b88      	ldr	r3, [pc, #544]	; (800f14c <pass_maker_Dijkstra+0x244>)
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	601a      	str	r2, [r3, #0]
	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&x,&y,direction);
 800ef2e:	4639      	mov	r1, r7
 800ef30:	1d3b      	adds	r3, r7, #4
 800ef32:	697a      	ldr	r2, [r7, #20]
 800ef34:	4618      	mov	r0, r3
 800ef36:	f7fe ffe9 	bl	800df0c <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2b01      	cmp	r3, #1
 800ef3e:	d002      	beq.n	800ef46 <pass_maker_Dijkstra+0x3e>
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2b02      	cmp	r3, #2
 800ef44:	d13a      	bne.n	800efbc <pass_maker_Dijkstra+0xb4>
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d002      	beq.n	800ef52 <pass_maker_Dijkstra+0x4a>
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	2b01      	cmp	r3, #1
 800ef50:	d134      	bne.n	800efbc <pass_maker_Dijkstra+0xb4>

			if (pass[pass_count] >= 0) {
 800ef52:	4b7d      	ldr	r3, [pc, #500]	; (800f148 <pass_maker_Dijkstra+0x240>)
 800ef54:	781b      	ldrb	r3, [r3, #0]
 800ef56:	461a      	mov	r2, r3
 800ef58:	4b7c      	ldr	r3, [pc, #496]	; (800f14c <pass_maker_Dijkstra+0x244>)
 800ef5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	da05      	bge.n	800ef6e <pass_maker_Dijkstra+0x66>
					} else {
						pass_count++;
 800ef62:	4b79      	ldr	r3, [pc, #484]	; (800f148 <pass_maker_Dijkstra+0x240>)
 800ef64:	781b      	ldrb	r3, [r3, #0]
 800ef66:	3301      	adds	r3, #1
 800ef68:	b2da      	uxtb	r2, r3
 800ef6a:	4b77      	ldr	r3, [pc, #476]	; (800f148 <pass_maker_Dijkstra+0x240>)
 800ef6c:	701a      	strb	r2, [r3, #0]
					}
					pass[pass_count] = pass[pass_count] + 1;
 800ef6e:	4b76      	ldr	r3, [pc, #472]	; (800f148 <pass_maker_Dijkstra+0x240>)
 800ef70:	781b      	ldrb	r3, [r3, #0]
 800ef72:	461a      	mov	r2, r3
 800ef74:	4b75      	ldr	r3, [pc, #468]	; (800f14c <pass_maker_Dijkstra+0x244>)
 800ef76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef7a:	4a73      	ldr	r2, [pc, #460]	; (800f148 <pass_maker_Dijkstra+0x240>)
 800ef7c:	7812      	ldrb	r2, [r2, #0]
 800ef7e:	4611      	mov	r1, r2
 800ef80:	3301      	adds	r3, #1
 800ef82:	4a72      	ldr	r2, [pc, #456]	; (800f14c <pass_maker_Dijkstra+0x244>)
 800ef84:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//			wait(10);
		//			maze_display();
		//			x = 0;
		//			y = 0;
					direction = direction + 2;
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	3302      	adds	r3, #2
 800ef8c:	617b      	str	r3, [r7, #20]
					if (direction == 5) {
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	2b05      	cmp	r3, #5
 800ef92:	d101      	bne.n	800ef98 <pass_maker_Dijkstra+0x90>
						direction = 1;
 800ef94:	2301      	movs	r3, #1
 800ef96:	617b      	str	r3, [r7, #20]
					}
					if (direction == 6) {
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	2b06      	cmp	r3, #6
 800ef9c:	d101      	bne.n	800efa2 <pass_maker_Dijkstra+0x9a>
						direction = 2;
 800ef9e:	2302      	movs	r3, #2
 800efa0:	617b      	str	r3, [r7, #20]
					}
					if (direction == 0) {
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d101      	bne.n	800efac <pass_maker_Dijkstra+0xa4>
						direction = 4;
 800efa8:	2304      	movs	r3, #4
 800efaa:	617b      	str	r3, [r7, #20]
					}
					if (direction == -1) {
 800efac:	697b      	ldr	r3, [r7, #20]
 800efae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efb2:	f040 80c2 	bne.w	800f13a <pass_maker_Dijkstra+0x232>
						direction = 3;
 800efb6:	2303      	movs	r3, #3
 800efb8:	617b      	str	r3, [r7, #20]
					}
					break;
 800efba:	e0be      	b.n	800f13a <pass_maker_Dijkstra+0x232>

		}

		get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
 800efbc:	6878      	ldr	r0, [r7, #4]
 800efbe:	6839      	ldr	r1, [r7, #0]
 800efc0:	f107 020b 	add.w	r2, r7, #11
 800efc4:	f107 0309 	add.w	r3, r7, #9
 800efc8:	9301      	str	r3, [sp, #4]
 800efca:	f107 030a 	add.w	r3, r7, #10
 800efce:	9300      	str	r3, [sp, #0]
 800efd0:	4613      	mov	r3, r2
 800efd2:	697a      	ldr	r2, [r7, #20]
 800efd4:	f001 ff64 	bl	8010ea0 <get_wall>
		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	683a      	ldr	r2, [r7, #0]
 800efdc:	f107 060c 	add.w	r6, r7, #12
 800efe0:	f107 050e 	add.w	r5, r7, #14
 800efe4:	f107 0410 	add.w	r4, r7, #16
 800efe8:	f107 0012 	add.w	r0, r7, #18
 800efec:	6979      	ldr	r1, [r7, #20]
 800efee:	9102      	str	r1, [sp, #8]
 800eff0:	9201      	str	r2, [sp, #4]
 800eff2:	9300      	str	r3, [sp, #0]
 800eff4:	4633      	mov	r3, r6
 800eff6:	462a      	mov	r2, r5
 800eff8:	4621      	mov	r1, r4
 800effa:	f002 fad3 	bl	80115a4 <search_AroundDijkstraCount>
		if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
 800effe:	7afb      	ldrb	r3, [r7, #11]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d002      	beq.n	800f00a <pass_maker_Dijkstra+0x102>
 800f004:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f008:	827b      	strh	r3, [r7, #18]
		if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
 800f00a:	7abb      	ldrb	r3, [r7, #10]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d002      	beq.n	800f016 <pass_maker_Dijkstra+0x10e>
 800f010:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f014:	823b      	strh	r3, [r7, #16]
		if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}
 800f016:	7a7b      	ldrb	r3, [r7, #9]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d002      	beq.n	800f022 <pass_maker_Dijkstra+0x11a>
 800f01c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f020:	81bb      	strh	r3, [r7, #12]

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 800f022:	8a7b      	ldrh	r3, [r7, #18]
 800f024:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f028:	4293      	cmp	r3, r2
 800f02a:	d10e      	bne.n	800f04a <pass_maker_Dijkstra+0x142>
 800f02c:	8a3b      	ldrh	r3, [r7, #16]
 800f02e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f032:	4293      	cmp	r3, r2
 800f034:	d109      	bne.n	800f04a <pass_maker_Dijkstra+0x142>
 800f036:	89bb      	ldrh	r3, [r7, #12]
 800f038:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f03c:	4293      	cmp	r3, r2
 800f03e:	d104      	bne.n	800f04a <pass_maker_Dijkstra+0x142>
 800f040:	89fb      	ldrh	r3, [r7, #14]
 800f042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f046:	4293      	cmp	r3, r2
 800f048:	d079      	beq.n	800f13e <pass_maker_Dijkstra+0x236>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800f04a:	8a7a      	ldrh	r2, [r7, #18]
 800f04c:	8a3b      	ldrh	r3, [r7, #16]
 800f04e:	429a      	cmp	r2, r3
 800f050:	d822      	bhi.n	800f098 <pass_maker_Dijkstra+0x190>
 800f052:	8a7a      	ldrh	r2, [r7, #18]
 800f054:	89bb      	ldrh	r3, [r7, #12]
 800f056:	429a      	cmp	r2, r3
 800f058:	d81e      	bhi.n	800f098 <pass_maker_Dijkstra+0x190>
 800f05a:	8a7a      	ldrh	r2, [r7, #18]
 800f05c:	89fb      	ldrh	r3, [r7, #14]
 800f05e:	429a      	cmp	r2, r3
 800f060:	d81a      	bhi.n	800f098 <pass_maker_Dijkstra+0x190>
			// 直進
			if (pass[pass_count] >= 0) {} else {pass_count++;}
 800f062:	4b39      	ldr	r3, [pc, #228]	; (800f148 <pass_maker_Dijkstra+0x240>)
 800f064:	781b      	ldrb	r3, [r3, #0]
 800f066:	461a      	mov	r2, r3
 800f068:	4b38      	ldr	r3, [pc, #224]	; (800f14c <pass_maker_Dijkstra+0x244>)
 800f06a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	da05      	bge.n	800f07e <pass_maker_Dijkstra+0x176>
 800f072:	4b35      	ldr	r3, [pc, #212]	; (800f148 <pass_maker_Dijkstra+0x240>)
 800f074:	781b      	ldrb	r3, [r3, #0]
 800f076:	3301      	adds	r3, #1
 800f078:	b2da      	uxtb	r2, r3
 800f07a:	4b33      	ldr	r3, [pc, #204]	; (800f148 <pass_maker_Dijkstra+0x240>)
 800f07c:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = pass[pass_count] + 2;
 800f07e:	4b32      	ldr	r3, [pc, #200]	; (800f148 <pass_maker_Dijkstra+0x240>)
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	461a      	mov	r2, r3
 800f084:	4b31      	ldr	r3, [pc, #196]	; (800f14c <pass_maker_Dijkstra+0x244>)
 800f086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f08a:	4a2f      	ldr	r2, [pc, #188]	; (800f148 <pass_maker_Dijkstra+0x240>)
 800f08c:	7812      	ldrb	r2, [r2, #0]
 800f08e:	4611      	mov	r1, r2
 800f090:	3302      	adds	r3, #2
 800f092:	4a2e      	ldr	r2, [pc, #184]	; (800f14c <pass_maker_Dijkstra+0x244>)
 800f094:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800f098:	8a3a      	ldrh	r2, [r7, #16]
 800f09a:	8a7b      	ldrh	r3, [r7, #18]
 800f09c:	429a      	cmp	r2, r3
 800f09e:	d218      	bcs.n	800f0d2 <pass_maker_Dijkstra+0x1ca>
 800f0a0:	8a3a      	ldrh	r2, [r7, #16]
 800f0a2:	89bb      	ldrh	r3, [r7, #12]
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d814      	bhi.n	800f0d2 <pass_maker_Dijkstra+0x1ca>
 800f0a8:	8a3a      	ldrh	r2, [r7, #16]
 800f0aa:	89fb      	ldrh	r3, [r7, #14]
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	d810      	bhi.n	800f0d2 <pass_maker_Dijkstra+0x1ca>
			// 右旋回
			pass_count++;
 800f0b0:	4b25      	ldr	r3, [pc, #148]	; (800f148 <pass_maker_Dijkstra+0x240>)
 800f0b2:	781b      	ldrb	r3, [r3, #0]
 800f0b4:	3301      	adds	r3, #1
 800f0b6:	b2da      	uxtb	r2, r3
 800f0b8:	4b23      	ldr	r3, [pc, #140]	; (800f148 <pass_maker_Dijkstra+0x240>)
 800f0ba:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = -2;
 800f0bc:	4b22      	ldr	r3, [pc, #136]	; (800f148 <pass_maker_Dijkstra+0x240>)
 800f0be:	781b      	ldrb	r3, [r3, #0]
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	4b22      	ldr	r3, [pc, #136]	; (800f14c <pass_maker_Dijkstra+0x244>)
 800f0c4:	f06f 0201 	mvn.w	r2, #1
 800f0c8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction++;
 800f0cc:	697b      	ldr	r3, [r7, #20]
 800f0ce:	3301      	adds	r3, #1
 800f0d0:	617b      	str	r3, [r7, #20]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800f0d2:	89ba      	ldrh	r2, [r7, #12]
 800f0d4:	8a7b      	ldrh	r3, [r7, #18]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d218      	bcs.n	800f10c <pass_maker_Dijkstra+0x204>
 800f0da:	89ba      	ldrh	r2, [r7, #12]
 800f0dc:	8a3b      	ldrh	r3, [r7, #16]
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	d214      	bcs.n	800f10c <pass_maker_Dijkstra+0x204>
 800f0e2:	89ba      	ldrh	r2, [r7, #12]
 800f0e4:	89fb      	ldrh	r3, [r7, #14]
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d810      	bhi.n	800f10c <pass_maker_Dijkstra+0x204>
			// 左旋回
			pass_count++;
 800f0ea:	4b17      	ldr	r3, [pc, #92]	; (800f148 <pass_maker_Dijkstra+0x240>)
 800f0ec:	781b      	ldrb	r3, [r3, #0]
 800f0ee:	3301      	adds	r3, #1
 800f0f0:	b2da      	uxtb	r2, r3
 800f0f2:	4b15      	ldr	r3, [pc, #84]	; (800f148 <pass_maker_Dijkstra+0x240>)
 800f0f4:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = -3;
 800f0f6:	4b14      	ldr	r3, [pc, #80]	; (800f148 <pass_maker_Dijkstra+0x240>)
 800f0f8:	781b      	ldrb	r3, [r3, #0]
 800f0fa:	4619      	mov	r1, r3
 800f0fc:	4b13      	ldr	r3, [pc, #76]	; (800f14c <pass_maker_Dijkstra+0x244>)
 800f0fe:	f06f 0202 	mvn.w	r2, #2
 800f102:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction--;
 800f106:	697b      	ldr	r3, [r7, #20]
 800f108:	3b01      	subs	r3, #1
 800f10a:	617b      	str	r3, [r7, #20]
		}

		if (direction == 5) {
 800f10c:	697b      	ldr	r3, [r7, #20]
 800f10e:	2b05      	cmp	r3, #5
 800f110:	d101      	bne.n	800f116 <pass_maker_Dijkstra+0x20e>
			direction = 1;
 800f112:	2301      	movs	r3, #1
 800f114:	617b      	str	r3, [r7, #20]
		}
		if (direction == 6) {
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	2b06      	cmp	r3, #6
 800f11a:	d101      	bne.n	800f120 <pass_maker_Dijkstra+0x218>
			direction = 2;
 800f11c:	2302      	movs	r3, #2
 800f11e:	617b      	str	r3, [r7, #20]
		}
		if (direction == 0) {
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d101      	bne.n	800f12a <pass_maker_Dijkstra+0x222>
			direction = 4;
 800f126:	2304      	movs	r3, #4
 800f128:	617b      	str	r3, [r7, #20]
		}
		if (direction == -1) {
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f130:	f47f aefd 	bne.w	800ef2e <pass_maker_Dijkstra+0x26>
			direction = 3;
 800f134:	2303      	movs	r3, #3
 800f136:	617b      	str	r3, [r7, #20]
		update_coordinate(&x,&y,direction);
 800f138:	e6f9      	b.n	800ef2e <pass_maker_Dijkstra+0x26>
					break;
 800f13a:	bf00      	nop
 800f13c:	e000      	b.n	800f140 <pass_maker_Dijkstra+0x238>
			break;
 800f13e:	bf00      	nop
		}

	}
}
 800f140:	bf00      	nop
 800f142:	371c      	adds	r7, #28
 800f144:	46bd      	mov	sp, r7
 800f146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f148:	20000828 	.word	0x20000828
 800f14c:	2000083c 	.word	0x2000083c

0800f150 <run_shortest>:


void run_shortest(float inspeed, float inacc, int stmass, char pass_mode, char fun_mode,
		char slant_mode, parameter_speed howspeed,float fun_ratio,char mollifier_mode) {
 800f150:	b5b0      	push	{r4, r5, r7, lr}
 800f152:	b0e0      	sub	sp, #384	; 0x180
 800f154:	af50      	add	r7, sp, #320	; 0x140
 800f156:	ed87 0a05 	vstr	s0, [r7, #20]
 800f15a:	edc7 0a04 	vstr	s1, [r7, #16]
 800f15e:	60f8      	str	r0, [r7, #12]
 800f160:	4608      	mov	r0, r1
 800f162:	4611      	mov	r1, r2
 800f164:	461a      	mov	r2, r3
 800f166:	ed87 1a01 	vstr	s2, [r7, #4]
 800f16a:	4603      	mov	r3, r0
 800f16c:	72fb      	strb	r3, [r7, #11]
 800f16e:	460b      	mov	r3, r1
 800f170:	72bb      	strb	r3, [r7, #10]
 800f172:	4613      	mov	r3, r2
 800f174:	727b      	strb	r3, [r7, #9]
//	_Bool left_wall;
//
//	int x = 0;
//	int y = 0;
//	int direction = 1;
	slant_direction = -2;
 800f176:	f06f 0301 	mvn.w	r3, #1
 800f17a:	63bb      	str	r3, [r7, #56]	; 0x38

	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800f17c:	2301      	movs	r3, #1
 800f17e:	763b      	strb	r3, [r7, #24]
	mode.WallControlStatus=0;
 800f180:	2300      	movs	r3, #0
 800f182:	767b      	strb	r3, [r7, #25]
	mode.WallCutMode=0;
 800f184:	2300      	movs	r3, #0
 800f186:	76fb      	strb	r3, [r7, #27]
	mode.calMazeMode=0;
 800f188:	2300      	movs	r3, #0
 800f18a:	76bb      	strb	r3, [r7, #26]

	//highspeed_mode = 1;
	for(int i = 0; i <= 254; i++){pass[i] = 0;}
 800f18c:	2300      	movs	r3, #0
 800f18e:	633b      	str	r3, [r7, #48]	; 0x30
 800f190:	e007      	b.n	800f1a2 <run_shortest+0x52>
 800f192:	4a07      	ldr	r2, [pc, #28]	; (800f1b0 <run_shortest+0x60>)
 800f194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f196:	2100      	movs	r1, #0
 800f198:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f19e:	3301      	adds	r3, #1
 800f1a0:	633b      	str	r3, [r7, #48]	; 0x30
 800f1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a4:	2bfe      	cmp	r3, #254	; 0xfe
 800f1a6:	ddf4      	ble.n	800f192 <run_shortest+0x42>
	for(int i = 0; i <= 14; i++){
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f1ac:	e077      	b.n	800f29e <run_shortest+0x14e>
 800f1ae:	bf00      	nop
 800f1b0:	2000083c 	.word	0x2000083c
		record.row[i] = wall.row[i];
 800f1b4:	4aa9      	ldr	r2, [pc, #676]	; (800f45c <run_shortest+0x30c>)
 800f1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800f1bc:	4aa8      	ldr	r2, [pc, #672]	; (800f460 <run_shortest+0x310>)
 800f1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		record.column[i] = wall.column[i];
 800f1c4:	4aa5      	ldr	r2, [pc, #660]	; (800f45c <run_shortest+0x30c>)
 800f1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c8:	330c      	adds	r3, #12
 800f1ca:	005b      	lsls	r3, r3, #1
 800f1cc:	4413      	add	r3, r2
 800f1ce:	88d9      	ldrh	r1, [r3, #6]
 800f1d0:	4aa3      	ldr	r2, [pc, #652]	; (800f460 <run_shortest+0x310>)
 800f1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d4:	330c      	adds	r3, #12
 800f1d6:	005b      	lsls	r3, r3, #1
 800f1d8:	4413      	add	r3, r2
 800f1da:	460a      	mov	r2, r1
 800f1dc:	80da      	strh	r2, [r3, #6]
		record.row_look[i] = wall.row_look[i];
 800f1de:	4a9f      	ldr	r2, [pc, #636]	; (800f45c <run_shortest+0x30c>)
 800f1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e2:	331c      	adds	r3, #28
 800f1e4:	005b      	lsls	r3, r3, #1
 800f1e6:	4413      	add	r3, r2
 800f1e8:	8899      	ldrh	r1, [r3, #4]
 800f1ea:	4a9d      	ldr	r2, [pc, #628]	; (800f460 <run_shortest+0x310>)
 800f1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ee:	331c      	adds	r3, #28
 800f1f0:	005b      	lsls	r3, r3, #1
 800f1f2:	4413      	add	r3, r2
 800f1f4:	460a      	mov	r2, r1
 800f1f6:	809a      	strh	r2, [r3, #4]
		record.column_look[i] = wall.column_look[i];
 800f1f8:	4a98      	ldr	r2, [pc, #608]	; (800f45c <run_shortest+0x30c>)
 800f1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1fc:	332c      	adds	r3, #44	; 0x2c
 800f1fe:	005b      	lsls	r3, r3, #1
 800f200:	4413      	add	r3, r2
 800f202:	8859      	ldrh	r1, [r3, #2]
 800f204:	4a96      	ldr	r2, [pc, #600]	; (800f460 <run_shortest+0x310>)
 800f206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f208:	332c      	adds	r3, #44	; 0x2c
 800f20a:	005b      	lsls	r3, r3, #1
 800f20c:	4413      	add	r3, r2
 800f20e:	460a      	mov	r2, r1
 800f210:	805a      	strh	r2, [r3, #2]
		wall.row_look[i] = ~wall.row_look[i];
 800f212:	4a92      	ldr	r2, [pc, #584]	; (800f45c <run_shortest+0x30c>)
 800f214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f216:	331c      	adds	r3, #28
 800f218:	005b      	lsls	r3, r3, #1
 800f21a:	4413      	add	r3, r2
 800f21c:	889b      	ldrh	r3, [r3, #4]
 800f21e:	43db      	mvns	r3, r3
 800f220:	b299      	uxth	r1, r3
 800f222:	4a8e      	ldr	r2, [pc, #568]	; (800f45c <run_shortest+0x30c>)
 800f224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f226:	331c      	adds	r3, #28
 800f228:	005b      	lsls	r3, r3, #1
 800f22a:	4413      	add	r3, r2
 800f22c:	460a      	mov	r2, r1
 800f22e:	809a      	strh	r2, [r3, #4]
		wall.column_look[i] = ~wall.column_look[i];
 800f230:	4a8a      	ldr	r2, [pc, #552]	; (800f45c <run_shortest+0x30c>)
 800f232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f234:	332c      	adds	r3, #44	; 0x2c
 800f236:	005b      	lsls	r3, r3, #1
 800f238:	4413      	add	r3, r2
 800f23a:	885b      	ldrh	r3, [r3, #2]
 800f23c:	43db      	mvns	r3, r3
 800f23e:	b299      	uxth	r1, r3
 800f240:	4a86      	ldr	r2, [pc, #536]	; (800f45c <run_shortest+0x30c>)
 800f242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f244:	332c      	adds	r3, #44	; 0x2c
 800f246:	005b      	lsls	r3, r3, #1
 800f248:	4413      	add	r3, r2
 800f24a:	460a      	mov	r2, r1
 800f24c:	805a      	strh	r2, [r3, #2]
		wall.row[i] = wall.row[i] | wall.row_look[i];
 800f24e:	4a83      	ldr	r2, [pc, #524]	; (800f45c <run_shortest+0x30c>)
 800f250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f252:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800f256:	4981      	ldr	r1, [pc, #516]	; (800f45c <run_shortest+0x30c>)
 800f258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f25a:	331c      	adds	r3, #28
 800f25c:	005b      	lsls	r3, r3, #1
 800f25e:	440b      	add	r3, r1
 800f260:	889b      	ldrh	r3, [r3, #4]
 800f262:	4313      	orrs	r3, r2
 800f264:	b299      	uxth	r1, r3
 800f266:	4a7d      	ldr	r2, [pc, #500]	; (800f45c <run_shortest+0x30c>)
 800f268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[i] = wall.column[i] | wall.column_look[i];
 800f26e:	4a7b      	ldr	r2, [pc, #492]	; (800f45c <run_shortest+0x30c>)
 800f270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f272:	330c      	adds	r3, #12
 800f274:	005b      	lsls	r3, r3, #1
 800f276:	4413      	add	r3, r2
 800f278:	88da      	ldrh	r2, [r3, #6]
 800f27a:	4978      	ldr	r1, [pc, #480]	; (800f45c <run_shortest+0x30c>)
 800f27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f27e:	332c      	adds	r3, #44	; 0x2c
 800f280:	005b      	lsls	r3, r3, #1
 800f282:	440b      	add	r3, r1
 800f284:	885b      	ldrh	r3, [r3, #2]
 800f286:	4313      	orrs	r3, r2
 800f288:	b299      	uxth	r1, r3
 800f28a:	4a74      	ldr	r2, [pc, #464]	; (800f45c <run_shortest+0x30c>)
 800f28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f28e:	330c      	adds	r3, #12
 800f290:	005b      	lsls	r3, r3, #1
 800f292:	4413      	add	r3, r2
 800f294:	460a      	mov	r2, r1
 800f296:	80da      	strh	r2, [r3, #6]
	for(int i = 0; i <= 14; i++){
 800f298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f29a:	3301      	adds	r3, #1
 800f29c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a0:	2b0e      	cmp	r3, #14
 800f2a2:	dd87      	ble.n	800f1b4 <run_shortest+0x64>
	}
	//pass_maker();
   pass_maker_Dijkstra();
 800f2a4:	f7ff fe30 	bl	800ef08 <pass_maker_Dijkstra>

	pass_count = 1;
 800f2a8:	4b6e      	ldr	r3, [pc, #440]	; (800f464 <run_shortest+0x314>)
 800f2aa:	2201      	movs	r2, #1
 800f2ac:	701a      	strb	r2, [r3, #0]
if(pass_mode==1){
 800f2ae:	7afb      	ldrb	r3, [r7, #11]
 800f2b0:	2b01      	cmp	r3, #1
 800f2b2:	f040 84b5 	bne.w	800fc20 <run_shortest+0xad0>
	while (1) {		//パス圧縮
//		if (mode_safty == 1) {
//
//			break;
//		}
		if (pass[pass_count] == 0) {
 800f2b6:	4b6b      	ldr	r3, [pc, #428]	; (800f464 <run_shortest+0x314>)
 800f2b8:	781b      	ldrb	r3, [r3, #0]
 800f2ba:	461a      	mov	r2, r3
 800f2bc:	4b6a      	ldr	r3, [pc, #424]	; (800f468 <run_shortest+0x318>)
 800f2be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	f000 813a 	beq.w	800f53c <run_shortest+0x3ec>
			break;
		}

		if (pass[pass_count] == -2 && pass[pass_count - 1] >= 1	//右90度大回りの条件
 800f2c8:	4b66      	ldr	r3, [pc, #408]	; (800f464 <run_shortest+0x314>)
 800f2ca:	781b      	ldrb	r3, [r3, #0]
 800f2cc:	461a      	mov	r2, r3
 800f2ce:	4b66      	ldr	r3, [pc, #408]	; (800f468 <run_shortest+0x318>)
 800f2d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2d4:	f113 0f02 	cmn.w	r3, #2
 800f2d8:	d131      	bne.n	800f33e <run_shortest+0x1ee>
 800f2da:	4b62      	ldr	r3, [pc, #392]	; (800f464 <run_shortest+0x314>)
 800f2dc:	781b      	ldrb	r3, [r3, #0]
 800f2de:	3b01      	subs	r3, #1
 800f2e0:	4a61      	ldr	r2, [pc, #388]	; (800f468 <run_shortest+0x318>)
 800f2e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	dd29      	ble.n	800f33e <run_shortest+0x1ee>
		&& pass[pass_count + 1] >= 1) {
 800f2ea:	4b5e      	ldr	r3, [pc, #376]	; (800f464 <run_shortest+0x314>)
 800f2ec:	781b      	ldrb	r3, [r3, #0]
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	4a5d      	ldr	r2, [pc, #372]	; (800f468 <run_shortest+0x318>)
 800f2f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	dd21      	ble.n	800f33e <run_shortest+0x1ee>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800f2fa:	4b5a      	ldr	r3, [pc, #360]	; (800f464 <run_shortest+0x314>)
 800f2fc:	781b      	ldrb	r3, [r3, #0]
 800f2fe:	3b01      	subs	r3, #1
 800f300:	4a59      	ldr	r2, [pc, #356]	; (800f468 <run_shortest+0x318>)
 800f302:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f306:	4b57      	ldr	r3, [pc, #348]	; (800f464 <run_shortest+0x314>)
 800f308:	781b      	ldrb	r3, [r3, #0]
 800f30a:	3b01      	subs	r3, #1
 800f30c:	3a01      	subs	r2, #1
 800f30e:	4956      	ldr	r1, [pc, #344]	; (800f468 <run_shortest+0x318>)
 800f310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800f314:	4b53      	ldr	r3, [pc, #332]	; (800f464 <run_shortest+0x314>)
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	3301      	adds	r3, #1
 800f31a:	4a53      	ldr	r2, [pc, #332]	; (800f468 <run_shortest+0x318>)
 800f31c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f320:	4b50      	ldr	r3, [pc, #320]	; (800f464 <run_shortest+0x314>)
 800f322:	781b      	ldrb	r3, [r3, #0]
 800f324:	3301      	adds	r3, #1
 800f326:	3a01      	subs	r2, #1
 800f328:	494f      	ldr	r1, [pc, #316]	; (800f468 <run_shortest+0x318>)
 800f32a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -4;		//右90度大回り
 800f32e:	4b4d      	ldr	r3, [pc, #308]	; (800f464 <run_shortest+0x314>)
 800f330:	781b      	ldrb	r3, [r3, #0]
 800f332:	4619      	mov	r1, r3
 800f334:	4b4c      	ldr	r3, [pc, #304]	; (800f468 <run_shortest+0x318>)
 800f336:	f06f 0203 	mvn.w	r2, #3
 800f33a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count] == -3 && pass[pass_count - 1] >= 1	//左90度大回りの条件
 800f33e:	4b49      	ldr	r3, [pc, #292]	; (800f464 <run_shortest+0x314>)
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	461a      	mov	r2, r3
 800f344:	4b48      	ldr	r3, [pc, #288]	; (800f468 <run_shortest+0x318>)
 800f346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f34a:	f113 0f03 	cmn.w	r3, #3
 800f34e:	d131      	bne.n	800f3b4 <run_shortest+0x264>
 800f350:	4b44      	ldr	r3, [pc, #272]	; (800f464 <run_shortest+0x314>)
 800f352:	781b      	ldrb	r3, [r3, #0]
 800f354:	3b01      	subs	r3, #1
 800f356:	4a44      	ldr	r2, [pc, #272]	; (800f468 <run_shortest+0x318>)
 800f358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	dd29      	ble.n	800f3b4 <run_shortest+0x264>
		&& pass[pass_count + 1] >= 1) {
 800f360:	4b40      	ldr	r3, [pc, #256]	; (800f464 <run_shortest+0x314>)
 800f362:	781b      	ldrb	r3, [r3, #0]
 800f364:	3301      	adds	r3, #1
 800f366:	4a40      	ldr	r2, [pc, #256]	; (800f468 <run_shortest+0x318>)
 800f368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	dd21      	ble.n	800f3b4 <run_shortest+0x264>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800f370:	4b3c      	ldr	r3, [pc, #240]	; (800f464 <run_shortest+0x314>)
 800f372:	781b      	ldrb	r3, [r3, #0]
 800f374:	3b01      	subs	r3, #1
 800f376:	4a3c      	ldr	r2, [pc, #240]	; (800f468 <run_shortest+0x318>)
 800f378:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f37c:	4b39      	ldr	r3, [pc, #228]	; (800f464 <run_shortest+0x314>)
 800f37e:	781b      	ldrb	r3, [r3, #0]
 800f380:	3b01      	subs	r3, #1
 800f382:	3a01      	subs	r2, #1
 800f384:	4938      	ldr	r1, [pc, #224]	; (800f468 <run_shortest+0x318>)
 800f386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800f38a:	4b36      	ldr	r3, [pc, #216]	; (800f464 <run_shortest+0x314>)
 800f38c:	781b      	ldrb	r3, [r3, #0]
 800f38e:	3301      	adds	r3, #1
 800f390:	4a35      	ldr	r2, [pc, #212]	; (800f468 <run_shortest+0x318>)
 800f392:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f396:	4b33      	ldr	r3, [pc, #204]	; (800f464 <run_shortest+0x314>)
 800f398:	781b      	ldrb	r3, [r3, #0]
 800f39a:	3301      	adds	r3, #1
 800f39c:	3a01      	subs	r2, #1
 800f39e:	4932      	ldr	r1, [pc, #200]	; (800f468 <run_shortest+0x318>)
 800f3a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -5;		//左90度大回り
 800f3a4:	4b2f      	ldr	r3, [pc, #188]	; (800f464 <run_shortest+0x314>)
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	4619      	mov	r1, r3
 800f3aa:	4b2f      	ldr	r3, [pc, #188]	; (800f468 <run_shortest+0x318>)
 800f3ac:	f06f 0204 	mvn.w	r2, #4
 800f3b0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -2
 800f3b4:	4b2b      	ldr	r3, [pc, #172]	; (800f464 <run_shortest+0x314>)
 800f3b6:	781b      	ldrb	r3, [r3, #0]
 800f3b8:	3b01      	subs	r3, #1
 800f3ba:	4a2b      	ldr	r2, [pc, #172]	; (800f468 <run_shortest+0x318>)
 800f3bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	dd43      	ble.n	800f44c <run_shortest+0x2fc>
 800f3c4:	4b27      	ldr	r3, [pc, #156]	; (800f464 <run_shortest+0x314>)
 800f3c6:	781b      	ldrb	r3, [r3, #0]
 800f3c8:	461a      	mov	r2, r3
 800f3ca:	4b27      	ldr	r3, [pc, #156]	; (800f468 <run_shortest+0x318>)
 800f3cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3d0:	f113 0f02 	cmn.w	r3, #2
 800f3d4:	d13a      	bne.n	800f44c <run_shortest+0x2fc>
				&& pass[pass_count + 1] == -2 && pass[pass_count + 2] >= 1) {//右180度大回りの条件
 800f3d6:	4b23      	ldr	r3, [pc, #140]	; (800f464 <run_shortest+0x314>)
 800f3d8:	781b      	ldrb	r3, [r3, #0]
 800f3da:	3301      	adds	r3, #1
 800f3dc:	4a22      	ldr	r2, [pc, #136]	; (800f468 <run_shortest+0x318>)
 800f3de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3e2:	f113 0f02 	cmn.w	r3, #2
 800f3e6:	d131      	bne.n	800f44c <run_shortest+0x2fc>
 800f3e8:	4b1e      	ldr	r3, [pc, #120]	; (800f464 <run_shortest+0x314>)
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	3302      	adds	r3, #2
 800f3ee:	4a1e      	ldr	r2, [pc, #120]	; (800f468 <run_shortest+0x318>)
 800f3f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	dd29      	ble.n	800f44c <run_shortest+0x2fc>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f3f8:	4b1a      	ldr	r3, [pc, #104]	; (800f464 <run_shortest+0x314>)
 800f3fa:	781b      	ldrb	r3, [r3, #0]
 800f3fc:	3b01      	subs	r3, #1
 800f3fe:	4a1a      	ldr	r2, [pc, #104]	; (800f468 <run_shortest+0x318>)
 800f400:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f404:	4b17      	ldr	r3, [pc, #92]	; (800f464 <run_shortest+0x314>)
 800f406:	781b      	ldrb	r3, [r3, #0]
 800f408:	3b01      	subs	r3, #1
 800f40a:	3a01      	subs	r2, #1
 800f40c:	4916      	ldr	r1, [pc, #88]	; (800f468 <run_shortest+0x318>)
 800f40e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -6;
 800f412:	4b14      	ldr	r3, [pc, #80]	; (800f464 <run_shortest+0x314>)
 800f414:	781b      	ldrb	r3, [r3, #0]
 800f416:	4619      	mov	r1, r3
 800f418:	4b13      	ldr	r3, [pc, #76]	; (800f468 <run_shortest+0x318>)
 800f41a:	f06f 0205 	mvn.w	r2, #5
 800f41e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800f422:	4b10      	ldr	r3, [pc, #64]	; (800f464 <run_shortest+0x314>)
 800f424:	781b      	ldrb	r3, [r3, #0]
 800f426:	3301      	adds	r3, #1
 800f428:	4a0f      	ldr	r2, [pc, #60]	; (800f468 <run_shortest+0x318>)
 800f42a:	f04f 31ff 	mov.w	r1, #4294967295
 800f42e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800f432:	4b0c      	ldr	r3, [pc, #48]	; (800f464 <run_shortest+0x314>)
 800f434:	781b      	ldrb	r3, [r3, #0]
 800f436:	3302      	adds	r3, #2
 800f438:	4a0b      	ldr	r2, [pc, #44]	; (800f468 <run_shortest+0x318>)
 800f43a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f43e:	4b09      	ldr	r3, [pc, #36]	; (800f464 <run_shortest+0x314>)
 800f440:	781b      	ldrb	r3, [r3, #0]
 800f442:	3302      	adds	r3, #2
 800f444:	3a01      	subs	r2, #1
 800f446:	4908      	ldr	r1, [pc, #32]	; (800f468 <run_shortest+0x318>)
 800f448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -3
 800f44c:	4b05      	ldr	r3, [pc, #20]	; (800f464 <run_shortest+0x314>)
 800f44e:	781b      	ldrb	r3, [r3, #0]
 800f450:	3b01      	subs	r3, #1
 800f452:	4a05      	ldr	r2, [pc, #20]	; (800f468 <run_shortest+0x318>)
 800f454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	e007      	b.n	800f46c <run_shortest+0x31c>
 800f45c:	20000c3c 	.word	0x20000c3c
 800f460:	20000cb4 	.word	0x20000cb4
 800f464:	20000828 	.word	0x20000828
 800f468:	2000083c 	.word	0x2000083c
 800f46c:	dd43      	ble.n	800f4f6 <run_shortest+0x3a6>
 800f46e:	4b31      	ldr	r3, [pc, #196]	; (800f534 <run_shortest+0x3e4>)
 800f470:	781b      	ldrb	r3, [r3, #0]
 800f472:	461a      	mov	r2, r3
 800f474:	4b30      	ldr	r3, [pc, #192]	; (800f538 <run_shortest+0x3e8>)
 800f476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f47a:	f113 0f03 	cmn.w	r3, #3
 800f47e:	d13a      	bne.n	800f4f6 <run_shortest+0x3a6>
				&& pass[pass_count + 1] == -3 && pass[pass_count + 2] >= 1) {//左180度大回りの条件
 800f480:	4b2c      	ldr	r3, [pc, #176]	; (800f534 <run_shortest+0x3e4>)
 800f482:	781b      	ldrb	r3, [r3, #0]
 800f484:	3301      	adds	r3, #1
 800f486:	4a2c      	ldr	r2, [pc, #176]	; (800f538 <run_shortest+0x3e8>)
 800f488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f48c:	f113 0f03 	cmn.w	r3, #3
 800f490:	d131      	bne.n	800f4f6 <run_shortest+0x3a6>
 800f492:	4b28      	ldr	r3, [pc, #160]	; (800f534 <run_shortest+0x3e4>)
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	3302      	adds	r3, #2
 800f498:	4a27      	ldr	r2, [pc, #156]	; (800f538 <run_shortest+0x3e8>)
 800f49a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	dd29      	ble.n	800f4f6 <run_shortest+0x3a6>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f4a2:	4b24      	ldr	r3, [pc, #144]	; (800f534 <run_shortest+0x3e4>)
 800f4a4:	781b      	ldrb	r3, [r3, #0]
 800f4a6:	3b01      	subs	r3, #1
 800f4a8:	4a23      	ldr	r2, [pc, #140]	; (800f538 <run_shortest+0x3e8>)
 800f4aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f4ae:	4b21      	ldr	r3, [pc, #132]	; (800f534 <run_shortest+0x3e4>)
 800f4b0:	781b      	ldrb	r3, [r3, #0]
 800f4b2:	3b01      	subs	r3, #1
 800f4b4:	3a01      	subs	r2, #1
 800f4b6:	4920      	ldr	r1, [pc, #128]	; (800f538 <run_shortest+0x3e8>)
 800f4b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -7;
 800f4bc:	4b1d      	ldr	r3, [pc, #116]	; (800f534 <run_shortest+0x3e4>)
 800f4be:	781b      	ldrb	r3, [r3, #0]
 800f4c0:	4619      	mov	r1, r3
 800f4c2:	4b1d      	ldr	r3, [pc, #116]	; (800f538 <run_shortest+0x3e8>)
 800f4c4:	f06f 0206 	mvn.w	r2, #6
 800f4c8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800f4cc:	4b19      	ldr	r3, [pc, #100]	; (800f534 <run_shortest+0x3e4>)
 800f4ce:	781b      	ldrb	r3, [r3, #0]
 800f4d0:	3301      	adds	r3, #1
 800f4d2:	4a19      	ldr	r2, [pc, #100]	; (800f538 <run_shortest+0x3e8>)
 800f4d4:	f04f 31ff 	mov.w	r1, #4294967295
 800f4d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800f4dc:	4b15      	ldr	r3, [pc, #84]	; (800f534 <run_shortest+0x3e4>)
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	3302      	adds	r3, #2
 800f4e2:	4a15      	ldr	r2, [pc, #84]	; (800f538 <run_shortest+0x3e8>)
 800f4e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f4e8:	4b12      	ldr	r3, [pc, #72]	; (800f534 <run_shortest+0x3e4>)
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	3302      	adds	r3, #2
 800f4ee:	3a01      	subs	r2, #1
 800f4f0:	4911      	ldr	r1, [pc, #68]	; (800f538 <run_shortest+0x3e8>)
 800f4f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if (pass[pass_count] == -2 && pass[pass_count - 1] == -3	//左90度大回りの条件
 800f4f6:	4b0f      	ldr	r3, [pc, #60]	; (800f534 <run_shortest+0x3e4>)
 800f4f8:	781b      	ldrb	r3, [r3, #0]
 800f4fa:	461a      	mov	r2, r3
 800f4fc:	4b0e      	ldr	r3, [pc, #56]	; (800f538 <run_shortest+0x3e8>)
 800f4fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f502:	f113 0f02 	cmn.w	r3, #2

				) {
		}
//		if(){}
		if (pass[pass_count - 1] == 0) {
 800f506:	4b0b      	ldr	r3, [pc, #44]	; (800f534 <run_shortest+0x3e4>)
 800f508:	781b      	ldrb	r3, [r3, #0]
 800f50a:	3b01      	subs	r3, #1
 800f50c:	4a0a      	ldr	r2, [pc, #40]	; (800f538 <run_shortest+0x3e8>)
 800f50e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d107      	bne.n	800f526 <run_shortest+0x3d6>
			pass[pass_count - 1] = -1;		//passが0になってしまったときの対策
 800f516:	4b07      	ldr	r3, [pc, #28]	; (800f534 <run_shortest+0x3e4>)
 800f518:	781b      	ldrb	r3, [r3, #0]
 800f51a:	3b01      	subs	r3, #1
 800f51c:	4a06      	ldr	r2, [pc, #24]	; (800f538 <run_shortest+0x3e8>)
 800f51e:	f04f 31ff 	mov.w	r1, #4294967295
 800f522:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		pass_count++;
 800f526:	4b03      	ldr	r3, [pc, #12]	; (800f534 <run_shortest+0x3e4>)
 800f528:	781b      	ldrb	r3, [r3, #0]
 800f52a:	3301      	adds	r3, #1
 800f52c:	b2da      	uxtb	r2, r3
 800f52e:	4b01      	ldr	r3, [pc, #4]	; (800f534 <run_shortest+0x3e4>)
 800f530:	701a      	strb	r2, [r3, #0]
		if (pass[pass_count] == 0) {
 800f532:	e6c0      	b.n	800f2b6 <run_shortest+0x166>
 800f534:	20000828 	.word	0x20000828
 800f538:	2000083c 	.word	0x2000083c
			break;
 800f53c:	bf00      	nop
	}

	pass_count = 1;
 800f53e:	4b8c      	ldr	r3, [pc, #560]	; (800f770 <run_shortest+0x620>)
 800f540:	2201      	movs	r2, #1
 800f542:	701a      	strb	r2, [r3, #0]
	if (slant_mode == 1) {
 800f544:	7a7b      	ldrb	r3, [r7, #9]
 800f546:	2b01      	cmp	r3, #1
 800f548:	f040 836a 	bne.w	800fc20 <run_shortest+0xad0>
		while (1) {		//斜め入出の圧縮
			if (pass[pass_count] == 0) {
 800f54c:	4b88      	ldr	r3, [pc, #544]	; (800f770 <run_shortest+0x620>)
 800f54e:	781b      	ldrb	r3, [r3, #0]
 800f550:	461a      	mov	r2, r3
 800f552:	4b88      	ldr	r3, [pc, #544]	; (800f774 <run_shortest+0x624>)
 800f554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	f000 81f1 	beq.w	800f940 <run_shortest+0x7f0>
				break;
			}

			if (pass[pass_count - 1] >= 1) {
 800f55e:	4b84      	ldr	r3, [pc, #528]	; (800f770 <run_shortest+0x620>)
 800f560:	781b      	ldrb	r3, [r3, #0]
 800f562:	3b01      	subs	r3, #1
 800f564:	4a83      	ldr	r2, [pc, #524]	; (800f774 <run_shortest+0x624>)
 800f566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	f340 81dc 	ble.w	800f928 <run_shortest+0x7d8>
				if (pass[pass_count] == -2 || pass[pass_count] == -3) {
 800f570:	4b7f      	ldr	r3, [pc, #508]	; (800f770 <run_shortest+0x620>)
 800f572:	781b      	ldrb	r3, [r3, #0]
 800f574:	461a      	mov	r2, r3
 800f576:	4b7f      	ldr	r3, [pc, #508]	; (800f774 <run_shortest+0x624>)
 800f578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f57c:	f113 0f02 	cmn.w	r3, #2
 800f580:	d009      	beq.n	800f596 <run_shortest+0x446>
 800f582:	4b7b      	ldr	r3, [pc, #492]	; (800f770 <run_shortest+0x620>)
 800f584:	781b      	ldrb	r3, [r3, #0]
 800f586:	461a      	mov	r2, r3
 800f588:	4b7a      	ldr	r3, [pc, #488]	; (800f774 <run_shortest+0x624>)
 800f58a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f58e:	f113 0f03 	cmn.w	r3, #3
 800f592:	f040 81c9 	bne.w	800f928 <run_shortest+0x7d8>
//***************************************************************************************入りのモーションstart
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -3) {
 800f596:	4b76      	ldr	r3, [pc, #472]	; (800f770 <run_shortest+0x620>)
 800f598:	781b      	ldrb	r3, [r3, #0]
 800f59a:	461a      	mov	r2, r3
 800f59c:	4b75      	ldr	r3, [pc, #468]	; (800f774 <run_shortest+0x624>)
 800f59e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5a2:	f113 0f02 	cmn.w	r3, #2
 800f5a6:	d12d      	bne.n	800f604 <run_shortest+0x4b4>
 800f5a8:	4b71      	ldr	r3, [pc, #452]	; (800f770 <run_shortest+0x620>)
 800f5aa:	781b      	ldrb	r3, [r3, #0]
 800f5ac:	3301      	adds	r3, #1
 800f5ae:	4a71      	ldr	r2, [pc, #452]	; (800f774 <run_shortest+0x624>)
 800f5b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5b4:	f113 0f03 	cmn.w	r3, #3
 800f5b8:	d124      	bne.n	800f604 <run_shortest+0x4b4>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f5ba:	4b6d      	ldr	r3, [pc, #436]	; (800f770 <run_shortest+0x620>)
 800f5bc:	781b      	ldrb	r3, [r3, #0]
 800f5be:	3b01      	subs	r3, #1
 800f5c0:	4a6c      	ldr	r2, [pc, #432]	; (800f774 <run_shortest+0x624>)
 800f5c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f5c6:	4b6a      	ldr	r3, [pc, #424]	; (800f770 <run_shortest+0x620>)
 800f5c8:	781b      	ldrb	r3, [r3, #0]
 800f5ca:	3b01      	subs	r3, #1
 800f5cc:	3a01      	subs	r2, #1
 800f5ce:	4969      	ldr	r1, [pc, #420]	; (800f774 <run_shortest+0x624>)
 800f5d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f5d4:	4b66      	ldr	r3, [pc, #408]	; (800f770 <run_shortest+0x620>)
 800f5d6:	781b      	ldrb	r3, [r3, #0]
 800f5d8:	3b01      	subs	r3, #1
 800f5da:	4a66      	ldr	r2, [pc, #408]	; (800f774 <run_shortest+0x624>)
 800f5dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d107      	bne.n	800f5f4 <run_shortest+0x4a4>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f5e4:	4b62      	ldr	r3, [pc, #392]	; (800f770 <run_shortest+0x620>)
 800f5e6:	781b      	ldrb	r3, [r3, #0]
 800f5e8:	3b01      	subs	r3, #1
 800f5ea:	4a62      	ldr	r2, [pc, #392]	; (800f774 <run_shortest+0x624>)
 800f5ec:	f04f 31ff 	mov.w	r1, #4294967295
 800f5f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -8;		//右45
 800f5f4:	4b5e      	ldr	r3, [pc, #376]	; (800f770 <run_shortest+0x620>)
 800f5f6:	781b      	ldrb	r3, [r3, #0]
 800f5f8:	4619      	mov	r1, r3
 800f5fa:	4b5e      	ldr	r3, [pc, #376]	; (800f774 <run_shortest+0x624>)
 800f5fc:	f06f 0207 	mvn.w	r2, #7
 800f600:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -2) {
 800f604:	4b5a      	ldr	r3, [pc, #360]	; (800f770 <run_shortest+0x620>)
 800f606:	781b      	ldrb	r3, [r3, #0]
 800f608:	461a      	mov	r2, r3
 800f60a:	4b5a      	ldr	r3, [pc, #360]	; (800f774 <run_shortest+0x624>)
 800f60c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f610:	f113 0f03 	cmn.w	r3, #3
 800f614:	d12d      	bne.n	800f672 <run_shortest+0x522>
 800f616:	4b56      	ldr	r3, [pc, #344]	; (800f770 <run_shortest+0x620>)
 800f618:	781b      	ldrb	r3, [r3, #0]
 800f61a:	3301      	adds	r3, #1
 800f61c:	4a55      	ldr	r2, [pc, #340]	; (800f774 <run_shortest+0x624>)
 800f61e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f622:	f113 0f02 	cmn.w	r3, #2
 800f626:	d124      	bne.n	800f672 <run_shortest+0x522>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f628:	4b51      	ldr	r3, [pc, #324]	; (800f770 <run_shortest+0x620>)
 800f62a:	781b      	ldrb	r3, [r3, #0]
 800f62c:	3b01      	subs	r3, #1
 800f62e:	4a51      	ldr	r2, [pc, #324]	; (800f774 <run_shortest+0x624>)
 800f630:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f634:	4b4e      	ldr	r3, [pc, #312]	; (800f770 <run_shortest+0x620>)
 800f636:	781b      	ldrb	r3, [r3, #0]
 800f638:	3b01      	subs	r3, #1
 800f63a:	3a01      	subs	r2, #1
 800f63c:	494d      	ldr	r1, [pc, #308]	; (800f774 <run_shortest+0x624>)
 800f63e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f642:	4b4b      	ldr	r3, [pc, #300]	; (800f770 <run_shortest+0x620>)
 800f644:	781b      	ldrb	r3, [r3, #0]
 800f646:	3b01      	subs	r3, #1
 800f648:	4a4a      	ldr	r2, [pc, #296]	; (800f774 <run_shortest+0x624>)
 800f64a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d107      	bne.n	800f662 <run_shortest+0x512>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f652:	4b47      	ldr	r3, [pc, #284]	; (800f770 <run_shortest+0x620>)
 800f654:	781b      	ldrb	r3, [r3, #0]
 800f656:	3b01      	subs	r3, #1
 800f658:	4a46      	ldr	r2, [pc, #280]	; (800f774 <run_shortest+0x624>)
 800f65a:	f04f 31ff 	mov.w	r1, #4294967295
 800f65e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -9;		//左45
 800f662:	4b43      	ldr	r3, [pc, #268]	; (800f770 <run_shortest+0x620>)
 800f664:	781b      	ldrb	r3, [r3, #0]
 800f666:	4619      	mov	r1, r3
 800f668:	4b42      	ldr	r3, [pc, #264]	; (800f774 <run_shortest+0x624>)
 800f66a:	f06f 0208 	mvn.w	r2, #8
 800f66e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -2) {
 800f672:	4b3f      	ldr	r3, [pc, #252]	; (800f770 <run_shortest+0x620>)
 800f674:	781b      	ldrb	r3, [r3, #0]
 800f676:	461a      	mov	r2, r3
 800f678:	4b3e      	ldr	r3, [pc, #248]	; (800f774 <run_shortest+0x624>)
 800f67a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f67e:	f113 0f02 	cmn.w	r3, #2
 800f682:	d135      	bne.n	800f6f0 <run_shortest+0x5a0>
 800f684:	4b3a      	ldr	r3, [pc, #232]	; (800f770 <run_shortest+0x620>)
 800f686:	781b      	ldrb	r3, [r3, #0]
 800f688:	3301      	adds	r3, #1
 800f68a:	4a3a      	ldr	r2, [pc, #232]	; (800f774 <run_shortest+0x624>)
 800f68c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f690:	f113 0f02 	cmn.w	r3, #2
 800f694:	d12c      	bne.n	800f6f0 <run_shortest+0x5a0>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f696:	4b36      	ldr	r3, [pc, #216]	; (800f770 <run_shortest+0x620>)
 800f698:	781b      	ldrb	r3, [r3, #0]
 800f69a:	3b01      	subs	r3, #1
 800f69c:	4a35      	ldr	r2, [pc, #212]	; (800f774 <run_shortest+0x624>)
 800f69e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f6a2:	4b33      	ldr	r3, [pc, #204]	; (800f770 <run_shortest+0x620>)
 800f6a4:	781b      	ldrb	r3, [r3, #0]
 800f6a6:	3b01      	subs	r3, #1
 800f6a8:	3a01      	subs	r2, #1
 800f6aa:	4932      	ldr	r1, [pc, #200]	; (800f774 <run_shortest+0x624>)
 800f6ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f6b0:	4b2f      	ldr	r3, [pc, #188]	; (800f770 <run_shortest+0x620>)
 800f6b2:	781b      	ldrb	r3, [r3, #0]
 800f6b4:	3b01      	subs	r3, #1
 800f6b6:	4a2f      	ldr	r2, [pc, #188]	; (800f774 <run_shortest+0x624>)
 800f6b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d107      	bne.n	800f6d0 <run_shortest+0x580>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f6c0:	4b2b      	ldr	r3, [pc, #172]	; (800f770 <run_shortest+0x620>)
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	3b01      	subs	r3, #1
 800f6c6:	4a2b      	ldr	r2, [pc, #172]	; (800f774 <run_shortest+0x624>)
 800f6c8:	f04f 31ff 	mov.w	r1, #4294967295
 800f6cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -10;		//右135
 800f6d0:	4b27      	ldr	r3, [pc, #156]	; (800f770 <run_shortest+0x620>)
 800f6d2:	781b      	ldrb	r3, [r3, #0]
 800f6d4:	4619      	mov	r1, r3
 800f6d6:	4b27      	ldr	r3, [pc, #156]	; (800f774 <run_shortest+0x624>)
 800f6d8:	f06f 0209 	mvn.w	r2, #9
 800f6dc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800f6e0:	4b23      	ldr	r3, [pc, #140]	; (800f770 <run_shortest+0x620>)
 800f6e2:	781b      	ldrb	r3, [r3, #0]
 800f6e4:	3301      	adds	r3, #1
 800f6e6:	4a23      	ldr	r2, [pc, #140]	; (800f774 <run_shortest+0x624>)
 800f6e8:	f04f 31ff 	mov.w	r1, #4294967295
 800f6ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -3) {
 800f6f0:	4b1f      	ldr	r3, [pc, #124]	; (800f770 <run_shortest+0x620>)
 800f6f2:	781b      	ldrb	r3, [r3, #0]
 800f6f4:	461a      	mov	r2, r3
 800f6f6:	4b1f      	ldr	r3, [pc, #124]	; (800f774 <run_shortest+0x624>)
 800f6f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6fc:	f113 0f03 	cmn.w	r3, #3
 800f700:	d140      	bne.n	800f784 <run_shortest+0x634>
 800f702:	4b1b      	ldr	r3, [pc, #108]	; (800f770 <run_shortest+0x620>)
 800f704:	781b      	ldrb	r3, [r3, #0]
 800f706:	3301      	adds	r3, #1
 800f708:	4a1a      	ldr	r2, [pc, #104]	; (800f774 <run_shortest+0x624>)
 800f70a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f70e:	f113 0f03 	cmn.w	r3, #3
 800f712:	d137      	bne.n	800f784 <run_shortest+0x634>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f714:	4b16      	ldr	r3, [pc, #88]	; (800f770 <run_shortest+0x620>)
 800f716:	781b      	ldrb	r3, [r3, #0]
 800f718:	3b01      	subs	r3, #1
 800f71a:	4a16      	ldr	r2, [pc, #88]	; (800f774 <run_shortest+0x624>)
 800f71c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f720:	4b13      	ldr	r3, [pc, #76]	; (800f770 <run_shortest+0x620>)
 800f722:	781b      	ldrb	r3, [r3, #0]
 800f724:	3b01      	subs	r3, #1
 800f726:	3a01      	subs	r2, #1
 800f728:	4912      	ldr	r1, [pc, #72]	; (800f774 <run_shortest+0x624>)
 800f72a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f72e:	4b10      	ldr	r3, [pc, #64]	; (800f770 <run_shortest+0x620>)
 800f730:	781b      	ldrb	r3, [r3, #0]
 800f732:	3b01      	subs	r3, #1
 800f734:	4a0f      	ldr	r2, [pc, #60]	; (800f774 <run_shortest+0x624>)
 800f736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d107      	bne.n	800f74e <run_shortest+0x5fe>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f73e:	4b0c      	ldr	r3, [pc, #48]	; (800f770 <run_shortest+0x620>)
 800f740:	781b      	ldrb	r3, [r3, #0]
 800f742:	3b01      	subs	r3, #1
 800f744:	4a0b      	ldr	r2, [pc, #44]	; (800f774 <run_shortest+0x624>)
 800f746:	f04f 31ff 	mov.w	r1, #4294967295
 800f74a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -11;		//左135
 800f74e:	4b08      	ldr	r3, [pc, #32]	; (800f770 <run_shortest+0x620>)
 800f750:	781b      	ldrb	r3, [r3, #0]
 800f752:	4619      	mov	r1, r3
 800f754:	4b07      	ldr	r3, [pc, #28]	; (800f774 <run_shortest+0x624>)
 800f756:	f06f 020a 	mvn.w	r2, #10
 800f75a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800f75e:	4b04      	ldr	r3, [pc, #16]	; (800f770 <run_shortest+0x620>)
 800f760:	781b      	ldrb	r3, [r3, #0]
 800f762:	3301      	adds	r3, #1
 800f764:	4a03      	ldr	r2, [pc, #12]	; (800f774 <run_shortest+0x624>)
 800f766:	f04f 31ff 	mov.w	r1, #4294967295
 800f76a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
//***************************************************************************************入りのモーションend

//***************************************************************************************途中のモーションstart
					while (pass[pass_count] <= -1) {
 800f76e:	e009      	b.n	800f784 <run_shortest+0x634>
 800f770:	20000828 	.word	0x20000828
 800f774:	2000083c 	.word	0x2000083c
						pass_count++;
 800f778:	4b6f      	ldr	r3, [pc, #444]	; (800f938 <run_shortest+0x7e8>)
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	3301      	adds	r3, #1
 800f77e:	b2da      	uxtb	r2, r3
 800f780:	4b6d      	ldr	r3, [pc, #436]	; (800f938 <run_shortest+0x7e8>)
 800f782:	701a      	strb	r2, [r3, #0]
					while (pass[pass_count] <= -1) {
 800f784:	4b6c      	ldr	r3, [pc, #432]	; (800f938 <run_shortest+0x7e8>)
 800f786:	781b      	ldrb	r3, [r3, #0]
 800f788:	461a      	mov	r2, r3
 800f78a:	4b6c      	ldr	r3, [pc, #432]	; (800f93c <run_shortest+0x7ec>)
 800f78c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f790:	2b00      	cmp	r3, #0
 800f792:	dbf1      	blt.n	800f778 <run_shortest+0x628>
					}
//***************************************************************************************途中のモーションend

//***************************************************************************************出のモーションstart
					if (pass[pass_count - 1] == -2) {
 800f794:	4b68      	ldr	r3, [pc, #416]	; (800f938 <run_shortest+0x7e8>)
 800f796:	781b      	ldrb	r3, [r3, #0]
 800f798:	3b01      	subs	r3, #1
 800f79a:	4a68      	ldr	r2, [pc, #416]	; (800f93c <run_shortest+0x7ec>)
 800f79c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7a0:	f113 0f02 	cmn.w	r3, #2
 800f7a4:	d15b      	bne.n	800f85e <run_shortest+0x70e>
						if (pass[pass_count - 2] == -2) {
 800f7a6:	4b64      	ldr	r3, [pc, #400]	; (800f938 <run_shortest+0x7e8>)
 800f7a8:	781b      	ldrb	r3, [r3, #0]
 800f7aa:	3b02      	subs	r3, #2
 800f7ac:	4a63      	ldr	r2, [pc, #396]	; (800f93c <run_shortest+0x7ec>)
 800f7ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7b2:	f113 0f02 	cmn.w	r3, #2
 800f7b6:	d12d      	bne.n	800f814 <run_shortest+0x6c4>
							pass[pass_count] = pass[pass_count] - 1;
 800f7b8:	4b5f      	ldr	r3, [pc, #380]	; (800f938 <run_shortest+0x7e8>)
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	461a      	mov	r2, r3
 800f7be:	4b5f      	ldr	r3, [pc, #380]	; (800f93c <run_shortest+0x7ec>)
 800f7c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7c4:	4a5c      	ldr	r2, [pc, #368]	; (800f938 <run_shortest+0x7e8>)
 800f7c6:	7812      	ldrb	r2, [r2, #0]
 800f7c8:	4611      	mov	r1, r2
 800f7ca:	3b01      	subs	r3, #1
 800f7cc:	4a5b      	ldr	r2, [pc, #364]	; (800f93c <run_shortest+0x7ec>)
 800f7ce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f7d2:	4b59      	ldr	r3, [pc, #356]	; (800f938 <run_shortest+0x7e8>)
 800f7d4:	781b      	ldrb	r3, [r3, #0]
 800f7d6:	461a      	mov	r2, r3
 800f7d8:	4b58      	ldr	r3, [pc, #352]	; (800f93c <run_shortest+0x7ec>)
 800f7da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d107      	bne.n	800f7f2 <run_shortest+0x6a2>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f7e2:	4b55      	ldr	r3, [pc, #340]	; (800f938 <run_shortest+0x7e8>)
 800f7e4:	781b      	ldrb	r3, [r3, #0]
 800f7e6:	4619      	mov	r1, r3
 800f7e8:	4b54      	ldr	r3, [pc, #336]	; (800f93c <run_shortest+0x7ec>)
 800f7ea:	f04f 32ff 	mov.w	r2, #4294967295
 800f7ee:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -14;		//右135
 800f7f2:	4b51      	ldr	r3, [pc, #324]	; (800f938 <run_shortest+0x7e8>)
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	3b01      	subs	r3, #1
 800f7f8:	4a50      	ldr	r2, [pc, #320]	; (800f93c <run_shortest+0x7ec>)
 800f7fa:	f06f 010d 	mvn.w	r1, #13
 800f7fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 800f802:	4b4d      	ldr	r3, [pc, #308]	; (800f938 <run_shortest+0x7e8>)
 800f804:	781b      	ldrb	r3, [r3, #0]
 800f806:	3b02      	subs	r3, #2
 800f808:	4a4c      	ldr	r2, [pc, #304]	; (800f93c <run_shortest+0x7ec>)
 800f80a:	f04f 31ff 	mov.w	r1, #4294967295
 800f80e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f812:	e024      	b.n	800f85e <run_shortest+0x70e>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 800f814:	4b48      	ldr	r3, [pc, #288]	; (800f938 <run_shortest+0x7e8>)
 800f816:	781b      	ldrb	r3, [r3, #0]
 800f818:	461a      	mov	r2, r3
 800f81a:	4b48      	ldr	r3, [pc, #288]	; (800f93c <run_shortest+0x7ec>)
 800f81c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f820:	4a45      	ldr	r2, [pc, #276]	; (800f938 <run_shortest+0x7e8>)
 800f822:	7812      	ldrb	r2, [r2, #0]
 800f824:	4611      	mov	r1, r2
 800f826:	3b01      	subs	r3, #1
 800f828:	4a44      	ldr	r2, [pc, #272]	; (800f93c <run_shortest+0x7ec>)
 800f82a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f82e:	4b42      	ldr	r3, [pc, #264]	; (800f938 <run_shortest+0x7e8>)
 800f830:	781b      	ldrb	r3, [r3, #0]
 800f832:	461a      	mov	r2, r3
 800f834:	4b41      	ldr	r3, [pc, #260]	; (800f93c <run_shortest+0x7ec>)
 800f836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d107      	bne.n	800f84e <run_shortest+0x6fe>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f83e:	4b3e      	ldr	r3, [pc, #248]	; (800f938 <run_shortest+0x7e8>)
 800f840:	781b      	ldrb	r3, [r3, #0]
 800f842:	4619      	mov	r1, r3
 800f844:	4b3d      	ldr	r3, [pc, #244]	; (800f93c <run_shortest+0x7ec>)
 800f846:	f04f 32ff 	mov.w	r2, #4294967295
 800f84a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -12;		//右45
 800f84e:	4b3a      	ldr	r3, [pc, #232]	; (800f938 <run_shortest+0x7e8>)
 800f850:	781b      	ldrb	r3, [r3, #0]
 800f852:	3b01      	subs	r3, #1
 800f854:	4a39      	ldr	r2, [pc, #228]	; (800f93c <run_shortest+0x7ec>)
 800f856:	f06f 010b 	mvn.w	r1, #11
 800f85a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}

					}
					if (pass[pass_count - 1] == -3) {
 800f85e:	4b36      	ldr	r3, [pc, #216]	; (800f938 <run_shortest+0x7e8>)
 800f860:	781b      	ldrb	r3, [r3, #0]
 800f862:	3b01      	subs	r3, #1
 800f864:	4a35      	ldr	r2, [pc, #212]	; (800f93c <run_shortest+0x7ec>)
 800f866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f86a:	f113 0f03 	cmn.w	r3, #3
 800f86e:	d15b      	bne.n	800f928 <run_shortest+0x7d8>
						if (pass[pass_count - 2] == -3) {
 800f870:	4b31      	ldr	r3, [pc, #196]	; (800f938 <run_shortest+0x7e8>)
 800f872:	781b      	ldrb	r3, [r3, #0]
 800f874:	3b02      	subs	r3, #2
 800f876:	4a31      	ldr	r2, [pc, #196]	; (800f93c <run_shortest+0x7ec>)
 800f878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f87c:	f113 0f03 	cmn.w	r3, #3
 800f880:	d12d      	bne.n	800f8de <run_shortest+0x78e>
							pass[pass_count] = pass[pass_count] - 1;
 800f882:	4b2d      	ldr	r3, [pc, #180]	; (800f938 <run_shortest+0x7e8>)
 800f884:	781b      	ldrb	r3, [r3, #0]
 800f886:	461a      	mov	r2, r3
 800f888:	4b2c      	ldr	r3, [pc, #176]	; (800f93c <run_shortest+0x7ec>)
 800f88a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f88e:	4a2a      	ldr	r2, [pc, #168]	; (800f938 <run_shortest+0x7e8>)
 800f890:	7812      	ldrb	r2, [r2, #0]
 800f892:	4611      	mov	r1, r2
 800f894:	3b01      	subs	r3, #1
 800f896:	4a29      	ldr	r2, [pc, #164]	; (800f93c <run_shortest+0x7ec>)
 800f898:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f89c:	4b26      	ldr	r3, [pc, #152]	; (800f938 <run_shortest+0x7e8>)
 800f89e:	781b      	ldrb	r3, [r3, #0]
 800f8a0:	461a      	mov	r2, r3
 800f8a2:	4b26      	ldr	r3, [pc, #152]	; (800f93c <run_shortest+0x7ec>)
 800f8a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d107      	bne.n	800f8bc <run_shortest+0x76c>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f8ac:	4b22      	ldr	r3, [pc, #136]	; (800f938 <run_shortest+0x7e8>)
 800f8ae:	781b      	ldrb	r3, [r3, #0]
 800f8b0:	4619      	mov	r1, r3
 800f8b2:	4b22      	ldr	r3, [pc, #136]	; (800f93c <run_shortest+0x7ec>)
 800f8b4:	f04f 32ff 	mov.w	r2, #4294967295
 800f8b8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -15;		//左135
 800f8bc:	4b1e      	ldr	r3, [pc, #120]	; (800f938 <run_shortest+0x7e8>)
 800f8be:	781b      	ldrb	r3, [r3, #0]
 800f8c0:	3b01      	subs	r3, #1
 800f8c2:	4a1e      	ldr	r2, [pc, #120]	; (800f93c <run_shortest+0x7ec>)
 800f8c4:	f06f 010e 	mvn.w	r1, #14
 800f8c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 800f8cc:	4b1a      	ldr	r3, [pc, #104]	; (800f938 <run_shortest+0x7e8>)
 800f8ce:	781b      	ldrb	r3, [r3, #0]
 800f8d0:	3b02      	subs	r3, #2
 800f8d2:	4a1a      	ldr	r2, [pc, #104]	; (800f93c <run_shortest+0x7ec>)
 800f8d4:	f04f 31ff 	mov.w	r1, #4294967295
 800f8d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f8dc:	e024      	b.n	800f928 <run_shortest+0x7d8>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 800f8de:	4b16      	ldr	r3, [pc, #88]	; (800f938 <run_shortest+0x7e8>)
 800f8e0:	781b      	ldrb	r3, [r3, #0]
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	4b15      	ldr	r3, [pc, #84]	; (800f93c <run_shortest+0x7ec>)
 800f8e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8ea:	4a13      	ldr	r2, [pc, #76]	; (800f938 <run_shortest+0x7e8>)
 800f8ec:	7812      	ldrb	r2, [r2, #0]
 800f8ee:	4611      	mov	r1, r2
 800f8f0:	3b01      	subs	r3, #1
 800f8f2:	4a12      	ldr	r2, [pc, #72]	; (800f93c <run_shortest+0x7ec>)
 800f8f4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f8f8:	4b0f      	ldr	r3, [pc, #60]	; (800f938 <run_shortest+0x7e8>)
 800f8fa:	781b      	ldrb	r3, [r3, #0]
 800f8fc:	461a      	mov	r2, r3
 800f8fe:	4b0f      	ldr	r3, [pc, #60]	; (800f93c <run_shortest+0x7ec>)
 800f900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d107      	bne.n	800f918 <run_shortest+0x7c8>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f908:	4b0b      	ldr	r3, [pc, #44]	; (800f938 <run_shortest+0x7e8>)
 800f90a:	781b      	ldrb	r3, [r3, #0]
 800f90c:	4619      	mov	r1, r3
 800f90e:	4b0b      	ldr	r3, [pc, #44]	; (800f93c <run_shortest+0x7ec>)
 800f910:	f04f 32ff 	mov.w	r2, #4294967295
 800f914:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -13;		//左45
 800f918:	4b07      	ldr	r3, [pc, #28]	; (800f938 <run_shortest+0x7e8>)
 800f91a:	781b      	ldrb	r3, [r3, #0]
 800f91c:	3b01      	subs	r3, #1
 800f91e:	4a07      	ldr	r2, [pc, #28]	; (800f93c <run_shortest+0x7ec>)
 800f920:	f06f 010c 	mvn.w	r1, #12
 800f924:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//***************************************************************************************出のモーションend
				}
			}
			//		if(){}

			pass_count++;
 800f928:	4b03      	ldr	r3, [pc, #12]	; (800f938 <run_shortest+0x7e8>)
 800f92a:	781b      	ldrb	r3, [r3, #0]
 800f92c:	3301      	adds	r3, #1
 800f92e:	b2da      	uxtb	r2, r3
 800f930:	4b01      	ldr	r3, [pc, #4]	; (800f938 <run_shortest+0x7e8>)
 800f932:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 800f934:	e60a      	b.n	800f54c <run_shortest+0x3fc>
 800f936:	bf00      	nop
 800f938:	20000828 	.word	0x20000828
 800f93c:	2000083c 	.word	0x2000083c
				break;
 800f940:	bf00      	nop
		}

		pass_count = 1;
 800f942:	4ba3      	ldr	r3, [pc, #652]	; (800fbd0 <run_shortest+0xa80>)
 800f944:	2201      	movs	r2, #1
 800f946:	701a      	strb	r2, [r3, #0]
		while (1) {		//斜の圧縮
			if (pass[pass_count] == 0) {
 800f948:	4ba1      	ldr	r3, [pc, #644]	; (800fbd0 <run_shortest+0xa80>)
 800f94a:	781b      	ldrb	r3, [r3, #0]
 800f94c:	461a      	mov	r2, r3
 800f94e:	4ba1      	ldr	r3, [pc, #644]	; (800fbd4 <run_shortest+0xa84>)
 800f950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f954:	2b00      	cmp	r3, #0
 800f956:	f000 813f 	beq.w	800fbd8 <run_shortest+0xa88>
				break;
			}

			if (pass[pass_count] == -8 || pass[pass_count] == -9
 800f95a:	4b9d      	ldr	r3, [pc, #628]	; (800fbd0 <run_shortest+0xa80>)
 800f95c:	781b      	ldrb	r3, [r3, #0]
 800f95e:	461a      	mov	r2, r3
 800f960:	4b9c      	ldr	r3, [pc, #624]	; (800fbd4 <run_shortest+0xa84>)
 800f962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f966:	f113 0f08 	cmn.w	r3, #8
 800f96a:	d01b      	beq.n	800f9a4 <run_shortest+0x854>
 800f96c:	4b98      	ldr	r3, [pc, #608]	; (800fbd0 <run_shortest+0xa80>)
 800f96e:	781b      	ldrb	r3, [r3, #0]
 800f970:	461a      	mov	r2, r3
 800f972:	4b98      	ldr	r3, [pc, #608]	; (800fbd4 <run_shortest+0xa84>)
 800f974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f978:	f113 0f09 	cmn.w	r3, #9
 800f97c:	d012      	beq.n	800f9a4 <run_shortest+0x854>
					|| pass[pass_count] == -10 || pass[pass_count] == -11) {
 800f97e:	4b94      	ldr	r3, [pc, #592]	; (800fbd0 <run_shortest+0xa80>)
 800f980:	781b      	ldrb	r3, [r3, #0]
 800f982:	461a      	mov	r2, r3
 800f984:	4b93      	ldr	r3, [pc, #588]	; (800fbd4 <run_shortest+0xa84>)
 800f986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f98a:	f113 0f0a 	cmn.w	r3, #10
 800f98e:	d009      	beq.n	800f9a4 <run_shortest+0x854>
 800f990:	4b8f      	ldr	r3, [pc, #572]	; (800fbd0 <run_shortest+0xa80>)
 800f992:	781b      	ldrb	r3, [r3, #0]
 800f994:	461a      	mov	r2, r3
 800f996:	4b8f      	ldr	r3, [pc, #572]	; (800fbd4 <run_shortest+0xa84>)
 800f998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f99c:	f113 0f0b 	cmn.w	r3, #11
 800f9a0:	f040 810f 	bne.w	800fbc2 <run_shortest+0xa72>
				if (pass[pass_count] == -8 || pass[pass_count] == -10) {
 800f9a4:	4b8a      	ldr	r3, [pc, #552]	; (800fbd0 <run_shortest+0xa80>)
 800f9a6:	781b      	ldrb	r3, [r3, #0]
 800f9a8:	461a      	mov	r2, r3
 800f9aa:	4b8a      	ldr	r3, [pc, #552]	; (800fbd4 <run_shortest+0xa84>)
 800f9ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9b0:	f113 0f08 	cmn.w	r3, #8
 800f9b4:	d008      	beq.n	800f9c8 <run_shortest+0x878>
 800f9b6:	4b86      	ldr	r3, [pc, #536]	; (800fbd0 <run_shortest+0xa80>)
 800f9b8:	781b      	ldrb	r3, [r3, #0]
 800f9ba:	461a      	mov	r2, r3
 800f9bc:	4b85      	ldr	r3, [pc, #532]	; (800fbd4 <run_shortest+0xa84>)
 800f9be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9c2:	f113 0f0a 	cmn.w	r3, #10
 800f9c6:	d102      	bne.n	800f9ce <run_shortest+0x87e>
					slant_direction = -3;
 800f9c8:	f06f 0302 	mvn.w	r3, #2
 800f9cc:	63bb      	str	r3, [r7, #56]	; 0x38
				}
				if (pass[pass_count] == -9 || pass[pass_count] == -11) {
 800f9ce:	4b80      	ldr	r3, [pc, #512]	; (800fbd0 <run_shortest+0xa80>)
 800f9d0:	781b      	ldrb	r3, [r3, #0]
 800f9d2:	461a      	mov	r2, r3
 800f9d4:	4b7f      	ldr	r3, [pc, #508]	; (800fbd4 <run_shortest+0xa84>)
 800f9d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9da:	f113 0f09 	cmn.w	r3, #9
 800f9de:	d008      	beq.n	800f9f2 <run_shortest+0x8a2>
 800f9e0:	4b7b      	ldr	r3, [pc, #492]	; (800fbd0 <run_shortest+0xa80>)
 800f9e2:	781b      	ldrb	r3, [r3, #0]
 800f9e4:	461a      	mov	r2, r3
 800f9e6:	4b7b      	ldr	r3, [pc, #492]	; (800fbd4 <run_shortest+0xa84>)
 800f9e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9ec:	f113 0f0b 	cmn.w	r3, #11
 800f9f0:	d102      	bne.n	800f9f8 <run_shortest+0x8a8>
					slant_direction = -2;
 800f9f2:	f06f 0301 	mvn.w	r3, #1
 800f9f6:	63bb      	str	r3, [r7, #56]	; 0x38
				}
				pass_count++;
 800f9f8:	4b75      	ldr	r3, [pc, #468]	; (800fbd0 <run_shortest+0xa80>)
 800f9fa:	781b      	ldrb	r3, [r3, #0]
 800f9fc:	3301      	adds	r3, #1
 800f9fe:	b2da      	uxtb	r2, r3
 800fa00:	4b73      	ldr	r3, [pc, #460]	; (800fbd0 <run_shortest+0xa80>)
 800fa02:	701a      	strb	r2, [r3, #0]
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800fa04:	4b72      	ldr	r3, [pc, #456]	; (800fbd0 <run_shortest+0xa80>)
 800fa06:	781b      	ldrb	r3, [r3, #0]
 800fa08:	461a      	mov	r2, r3
 800fa0a:	4b72      	ldr	r3, [pc, #456]	; (800fbd4 <run_shortest+0xa84>)
 800fa0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa14:	d105      	bne.n	800fa22 <run_shortest+0x8d2>
					pass_count++;
 800fa16:	4b6e      	ldr	r3, [pc, #440]	; (800fbd0 <run_shortest+0xa80>)
 800fa18:	781b      	ldrb	r3, [r3, #0]
 800fa1a:	3301      	adds	r3, #1
 800fa1c:	b2da      	uxtb	r2, r3
 800fa1e:	4b6c      	ldr	r3, [pc, #432]	; (800fbd0 <run_shortest+0xa80>)
 800fa20:	701a      	strb	r2, [r3, #0]
				}
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800fa22:	4b6b      	ldr	r3, [pc, #428]	; (800fbd0 <run_shortest+0xa80>)
 800fa24:	781b      	ldrb	r3, [r3, #0]
 800fa26:	461a      	mov	r2, r3
 800fa28:	4b6a      	ldr	r3, [pc, #424]	; (800fbd4 <run_shortest+0xa84>)
 800fa2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa32:	d105      	bne.n	800fa40 <run_shortest+0x8f0>
					pass_count++;
 800fa34:	4b66      	ldr	r3, [pc, #408]	; (800fbd0 <run_shortest+0xa80>)
 800fa36:	781b      	ldrb	r3, [r3, #0]
 800fa38:	3301      	adds	r3, #1
 800fa3a:	b2da      	uxtb	r2, r3
 800fa3c:	4b64      	ldr	r3, [pc, #400]	; (800fbd0 <run_shortest+0xa80>)
 800fa3e:	701a      	strb	r2, [r3, #0]
				}
				if (pass[pass_count] >= -3) {
 800fa40:	4b63      	ldr	r3, [pc, #396]	; (800fbd0 <run_shortest+0xa80>)
 800fa42:	781b      	ldrb	r3, [r3, #0]
 800fa44:	461a      	mov	r2, r3
 800fa46:	4b63      	ldr	r3, [pc, #396]	; (800fbd4 <run_shortest+0xa84>)
 800fa48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa4c:	f113 0f03 	cmn.w	r3, #3
 800fa50:	f2c0 80ad 	blt.w	800fbae <run_shortest+0xa5e>
					slant_count = pass_count;
 800fa54:	4b5e      	ldr	r3, [pc, #376]	; (800fbd0 <run_shortest+0xa80>)
 800fa56:	781b      	ldrb	r3, [r3, #0]
 800fa58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					pass[slant_count] = 51;
 800fa5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fa60:	4a5c      	ldr	r2, [pc, #368]	; (800fbd4 <run_shortest+0xa84>)
 800fa62:	2133      	movs	r1, #51	; 0x33
 800fa64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					pass_count++;
 800fa68:	4b59      	ldr	r3, [pc, #356]	; (800fbd0 <run_shortest+0xa80>)
 800fa6a:	781b      	ldrb	r3, [r3, #0]
 800fa6c:	3301      	adds	r3, #1
 800fa6e:	b2da      	uxtb	r2, r3
 800fa70:	4b57      	ldr	r3, [pc, #348]	; (800fbd0 <run_shortest+0xa80>)
 800fa72:	701a      	strb	r2, [r3, #0]
				}

				//***************************************************************************************途中のモーションstart
				while (pass[pass_count] >= -3) {
 800fa74:	e09b      	b.n	800fbae <run_shortest+0xa5e>
					if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800fa76:	4b56      	ldr	r3, [pc, #344]	; (800fbd0 <run_shortest+0xa80>)
 800fa78:	781b      	ldrb	r3, [r3, #0]
 800fa7a:	461a      	mov	r2, r3
 800fa7c:	4b55      	ldr	r3, [pc, #340]	; (800fbd4 <run_shortest+0xa84>)
 800fa7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa86:	d105      	bne.n	800fa94 <run_shortest+0x944>
						pass_count++;
 800fa88:	4b51      	ldr	r3, [pc, #324]	; (800fbd0 <run_shortest+0xa80>)
 800fa8a:	781b      	ldrb	r3, [r3, #0]
 800fa8c:	3301      	adds	r3, #1
 800fa8e:	b2da      	uxtb	r2, r3
 800fa90:	4b4f      	ldr	r3, [pc, #316]	; (800fbd0 <run_shortest+0xa80>)
 800fa92:	701a      	strb	r2, [r3, #0]
					}
					if (pass[pass_count] == -12 || pass[pass_count] == -13
 800fa94:	4b4e      	ldr	r3, [pc, #312]	; (800fbd0 <run_shortest+0xa80>)
 800fa96:	781b      	ldrb	r3, [r3, #0]
 800fa98:	461a      	mov	r2, r3
 800fa9a:	4b4e      	ldr	r3, [pc, #312]	; (800fbd4 <run_shortest+0xa84>)
 800fa9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800faa0:	f113 0f0c 	cmn.w	r3, #12
 800faa4:	f000 808d 	beq.w	800fbc2 <run_shortest+0xa72>
 800faa8:	4b49      	ldr	r3, [pc, #292]	; (800fbd0 <run_shortest+0xa80>)
 800faaa:	781b      	ldrb	r3, [r3, #0]
 800faac:	461a      	mov	r2, r3
 800faae:	4b49      	ldr	r3, [pc, #292]	; (800fbd4 <run_shortest+0xa84>)
 800fab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fab4:	f113 0f0d 	cmn.w	r3, #13
 800fab8:	f000 8083 	beq.w	800fbc2 <run_shortest+0xa72>
							|| pass[pass_count] == -14
 800fabc:	4b44      	ldr	r3, [pc, #272]	; (800fbd0 <run_shortest+0xa80>)
 800fabe:	781b      	ldrb	r3, [r3, #0]
 800fac0:	461a      	mov	r2, r3
 800fac2:	4b44      	ldr	r3, [pc, #272]	; (800fbd4 <run_shortest+0xa84>)
 800fac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fac8:	f113 0f0e 	cmn.w	r3, #14
 800facc:	d079      	beq.n	800fbc2 <run_shortest+0xa72>
							|| pass[pass_count] == -15) {
 800face:	4b40      	ldr	r3, [pc, #256]	; (800fbd0 <run_shortest+0xa80>)
 800fad0:	781b      	ldrb	r3, [r3, #0]
 800fad2:	461a      	mov	r2, r3
 800fad4:	4b3f      	ldr	r3, [pc, #252]	; (800fbd4 <run_shortest+0xa84>)
 800fad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fada:	f113 0f0f 	cmn.w	r3, #15
 800fade:	d070      	beq.n	800fbc2 <run_shortest+0xa72>
						break;
					}
					if (pass[pass_count] == slant_direction) {
 800fae0:	4b3b      	ldr	r3, [pc, #236]	; (800fbd0 <run_shortest+0xa80>)
 800fae2:	781b      	ldrb	r3, [r3, #0]
 800fae4:	461a      	mov	r2, r3
 800fae6:	4b3b      	ldr	r3, [pc, #236]	; (800fbd4 <run_shortest+0xa84>)
 800fae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800faec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800faee:	429a      	cmp	r2, r3
 800faf0:	d127      	bne.n	800fb42 <run_shortest+0x9f2>
						pass[slant_count] = pass[slant_count] - 1;
 800faf2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800faf6:	4a37      	ldr	r2, [pc, #220]	; (800fbd4 <run_shortest+0xa84>)
 800faf8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fafc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb00:	3a01      	subs	r2, #1
 800fb02:	4934      	ldr	r1, [pc, #208]	; (800fbd4 <run_shortest+0xa84>)
 800fb04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						slant_count = pass_count;
 800fb08:	4b31      	ldr	r3, [pc, #196]	; (800fbd0 <run_shortest+0xa80>)
 800fb0a:	781b      	ldrb	r3, [r3, #0]
 800fb0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						if (slant_direction == -2) {
 800fb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb12:	f113 0f02 	cmn.w	r3, #2
 800fb16:	d107      	bne.n	800fb28 <run_shortest+0x9d8>
							pass[pass_count] = -16;
 800fb18:	4b2d      	ldr	r3, [pc, #180]	; (800fbd0 <run_shortest+0xa80>)
 800fb1a:	781b      	ldrb	r3, [r3, #0]
 800fb1c:	4619      	mov	r1, r3
 800fb1e:	4b2d      	ldr	r3, [pc, #180]	; (800fbd4 <run_shortest+0xa84>)
 800fb20:	f06f 020f 	mvn.w	r2, #15
 800fb24:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						}
						if (slant_direction == -3) {
 800fb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb2a:	f113 0f03 	cmn.w	r3, #3
 800fb2e:	d138      	bne.n	800fba2 <run_shortest+0xa52>
							pass[pass_count] = -17;
 800fb30:	4b27      	ldr	r3, [pc, #156]	; (800fbd0 <run_shortest+0xa80>)
 800fb32:	781b      	ldrb	r3, [r3, #0]
 800fb34:	4619      	mov	r1, r3
 800fb36:	4b27      	ldr	r3, [pc, #156]	; (800fbd4 <run_shortest+0xa84>)
 800fb38:	f06f 0210 	mvn.w	r2, #16
 800fb3c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800fb40:	e02f      	b.n	800fba2 <run_shortest+0xa52>
						}

					} else {
						if (pass[slant_count] >= 50) {
 800fb42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb46:	4a23      	ldr	r2, [pc, #140]	; (800fbd4 <run_shortest+0xa84>)
 800fb48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb4c:	2b31      	cmp	r3, #49	; 0x31
 800fb4e:	dd08      	ble.n	800fb62 <run_shortest+0xa12>
							pass[pass_count] = -1;
 800fb50:	4b1f      	ldr	r3, [pc, #124]	; (800fbd0 <run_shortest+0xa80>)
 800fb52:	781b      	ldrb	r3, [r3, #0]
 800fb54:	4619      	mov	r1, r3
 800fb56:	4b1f      	ldr	r3, [pc, #124]	; (800fbd4 <run_shortest+0xa84>)
 800fb58:	f04f 32ff 	mov.w	r2, #4294967295
 800fb5c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800fb60:	e009      	b.n	800fb76 <run_shortest+0xa26>
						} else {
							slant_count = pass_count;
 800fb62:	4b1b      	ldr	r3, [pc, #108]	; (800fbd0 <run_shortest+0xa80>)
 800fb64:	781b      	ldrb	r3, [r3, #0]
 800fb66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							pass[slant_count] = 50;
 800fb6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb6e:	4a19      	ldr	r2, [pc, #100]	; (800fbd4 <run_shortest+0xa84>)
 800fb70:	2132      	movs	r1, #50	; 0x32
 800fb72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[slant_count] = pass[slant_count] + 1;
 800fb76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb7a:	4a16      	ldr	r2, [pc, #88]	; (800fbd4 <run_shortest+0xa84>)
 800fb7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fb80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb84:	3201      	adds	r2, #1
 800fb86:	4913      	ldr	r1, [pc, #76]	; (800fbd4 <run_shortest+0xa84>)
 800fb88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (slant_direction == -2) {
 800fb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb8e:	f113 0f02 	cmn.w	r3, #2
 800fb92:	d103      	bne.n	800fb9c <run_shortest+0xa4c>
							slant_direction = -3;
 800fb94:	f06f 0302 	mvn.w	r3, #2
 800fb98:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb9a:	e002      	b.n	800fba2 <run_shortest+0xa52>
						} else {
							slant_direction = -2;
 800fb9c:	f06f 0301 	mvn.w	r3, #1
 800fba0:	63bb      	str	r3, [r7, #56]	; 0x38
						}

					}

					pass_count++;
 800fba2:	4b0b      	ldr	r3, [pc, #44]	; (800fbd0 <run_shortest+0xa80>)
 800fba4:	781b      	ldrb	r3, [r3, #0]
 800fba6:	3301      	adds	r3, #1
 800fba8:	b2da      	uxtb	r2, r3
 800fbaa:	4b09      	ldr	r3, [pc, #36]	; (800fbd0 <run_shortest+0xa80>)
 800fbac:	701a      	strb	r2, [r3, #0]
				while (pass[pass_count] >= -3) {
 800fbae:	4b08      	ldr	r3, [pc, #32]	; (800fbd0 <run_shortest+0xa80>)
 800fbb0:	781b      	ldrb	r3, [r3, #0]
 800fbb2:	461a      	mov	r2, r3
 800fbb4:	4b07      	ldr	r3, [pc, #28]	; (800fbd4 <run_shortest+0xa84>)
 800fbb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbba:	f113 0f03 	cmn.w	r3, #3
 800fbbe:	f6bf af5a 	bge.w	800fa76 <run_shortest+0x926>

			}

			//		if(){}

			pass_count++;
 800fbc2:	4b03      	ldr	r3, [pc, #12]	; (800fbd0 <run_shortest+0xa80>)
 800fbc4:	781b      	ldrb	r3, [r3, #0]
 800fbc6:	3301      	adds	r3, #1
 800fbc8:	b2da      	uxtb	r2, r3
 800fbca:	4b01      	ldr	r3, [pc, #4]	; (800fbd0 <run_shortest+0xa80>)
 800fbcc:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 800fbce:	e6bb      	b.n	800f948 <run_shortest+0x7f8>
 800fbd0:	20000828 	.word	0x20000828
 800fbd4:	2000083c 	.word	0x2000083c
				break;
 800fbd8:	bf00      	nop
		}
		pass_count=0;
 800fbda:	4bb3      	ldr	r3, [pc, #716]	; (800fea8 <run_shortest+0xd58>)
 800fbdc:	2200      	movs	r2, #0
 800fbde:	701a      	strb	r2, [r3, #0]
		while (1) {		//パス圧縮

			if (pass[pass_count] == 50) {
 800fbe0:	4bb1      	ldr	r3, [pc, #708]	; (800fea8 <run_shortest+0xd58>)
 800fbe2:	781b      	ldrb	r3, [r3, #0]
 800fbe4:	461a      	mov	r2, r3
 800fbe6:	4bb1      	ldr	r3, [pc, #708]	; (800feac <run_shortest+0xd5c>)
 800fbe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbec:	2b32      	cmp	r3, #50	; 0x32
 800fbee:	d107      	bne.n	800fc00 <run_shortest+0xab0>
				pass[pass_count] =-1;
 800fbf0:	4bad      	ldr	r3, [pc, #692]	; (800fea8 <run_shortest+0xd58>)
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	4619      	mov	r1, r3
 800fbf6:	4bad      	ldr	r3, [pc, #692]	; (800feac <run_shortest+0xd5c>)
 800fbf8:	f04f 32ff 	mov.w	r2, #4294967295
 800fbfc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

			}
			if (pass[pass_count] == 0) {
 800fc00:	4ba9      	ldr	r3, [pc, #676]	; (800fea8 <run_shortest+0xd58>)
 800fc02:	781b      	ldrb	r3, [r3, #0]
 800fc04:	461a      	mov	r2, r3
 800fc06:	4ba9      	ldr	r3, [pc, #676]	; (800feac <run_shortest+0xd5c>)
 800fc08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d006      	beq.n	800fc1e <run_shortest+0xace>
				break;
			}
			pass_count++;
 800fc10:	4ba5      	ldr	r3, [pc, #660]	; (800fea8 <run_shortest+0xd58>)
 800fc12:	781b      	ldrb	r3, [r3, #0]
 800fc14:	3301      	adds	r3, #1
 800fc16:	b2da      	uxtb	r2, r3
 800fc18:	4ba3      	ldr	r3, [pc, #652]	; (800fea8 <run_shortest+0xd58>)
 800fc1a:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 50) {
 800fc1c:	e7e0      	b.n	800fbe0 <run_shortest+0xa90>
				break;
 800fc1e:	bf00      	nop
		}

	}
}
	int j = 0;
 800fc20:	2300      	movs	r3, #0
 800fc22:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pass[j] != 0) {
 800fc24:	e00b      	b.n	800fc3e <run_shortest+0xaee>
		printf("pass_count %d pass %d\n", j, pass[j]);
 800fc26:	4aa1      	ldr	r2, [pc, #644]	; (800feac <run_shortest+0xd5c>)
 800fc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc2e:	461a      	mov	r2, r3
 800fc30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc32:	489f      	ldr	r0, [pc, #636]	; (800feb0 <run_shortest+0xd60>)
 800fc34:	f010 ffe2 	bl	8020bfc <iprintf>
		j++;
 800fc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc3a:	3301      	adds	r3, #1
 800fc3c:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pass[j] != 0) {
 800fc3e:	4a9b      	ldr	r2, [pc, #620]	; (800feac <run_shortest+0xd5c>)
 800fc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d1ed      	bne.n	800fc26 <run_shortest+0xad6>
	}
	int pass_count2;
	pass_count2=0;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fc4e:	e002      	b.n	800fc56 <run_shortest+0xb06>
		pass_count2++;
 800fc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc52:	3301      	adds	r3, #1
 800fc54:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fc56:	4a95      	ldr	r2, [pc, #596]	; (800feac <run_shortest+0xd5c>)
 800fc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc62:	d0f5      	beq.n	800fc50 <run_shortest+0xb00>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800fc64:	4a91      	ldr	r2, [pc, #580]	; (800feac <run_shortest+0xd5c>)
 800fc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc6c:	934e      	str	r3, [sp, #312]	; 0x138
 800fc6e:	4668      	mov	r0, sp
 800fc70:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fc74:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fc78:	4619      	mov	r1, r3
 800fc7a:	f010 fb3f 	bl	80202fc <memcpy>
 800fc7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fc82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fc84:	f007 ff82 	bl	8017b8c <get_center_velocity>
 800fc88:	ed87 0a08 	vstr	s0, [r7, #32]
	printf("%d,%f\n",pass_count2, end_velocity);
 800fc8c:	6a38      	ldr	r0, [r7, #32]
 800fc8e:	f7f0 fc83 	bl	8000598 <__aeabi_f2d>
 800fc92:	4602      	mov	r2, r0
 800fc94:	460b      	mov	r3, r1
 800fc96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc98:	4886      	ldr	r0, [pc, #536]	; (800feb4 <run_shortest+0xd64>)
 800fc9a:	f010 ffaf 	bl	8020bfc <iprintf>

	HAL_Delay(500);
 800fc9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fca2:	f009 f859 	bl	8018d58 <HAL_Delay>
	pl_DriveMotor_standby(ON);
 800fca6:	2001      	movs	r0, #1
 800fca8:	f7f7 fe12 	bl	80078d0 <pl_DriveMotor_standby>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800fcac:	2003      	movs	r0, #3
 800fcae:	f7f7 fe41 	bl	8007934 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800fcb2:	2003      	movs	r0, #3
 800fcb4:	f7f7 fe16 	bl	80078e4 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800fcb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fcbc:	f7f8 f938 	bl	8007f30 <wait_ms_NoReset>
	no_safty = 1;
 800fcc0:	4b7d      	ldr	r3, [pc, #500]	; (800feb8 <run_shortest+0xd68>)
 800fcc2:	2201      	movs	r2, #1
 800fcc4:	701a      	strb	r2, [r3, #0]
	no_safty = 0;
 800fcc6:	4b7c      	ldr	r3, [pc, #496]	; (800feb8 <run_shortest+0xd68>)
 800fcc8:	2200      	movs	r2, #0
 800fcca:	701a      	strb	r2, [r3, #0]
	clear_Ierror();
 800fccc:	f7f4 fc70 	bl	80045b0 <clear_Ierror>
	////wall_control_mode = 1;
	if (fun_mode == 1) {
 800fcd0:	7abb      	ldrb	r3, [r7, #10]
 800fcd2:	2b01      	cmp	r3, #1
 800fcd4:	d12d      	bne.n	800fd32 <run_shortest+0xbe2>
		pl_FunMotor_duty(fun_ratio*BATT_MAX/g_V_battery_mean);
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f7f0 fc5e 	bl	8000598 <__aeabi_f2d>
 800fcdc:	a370      	add	r3, pc, #448	; (adr r3, 800fea0 <run_shortest+0xd50>)
 800fcde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fce2:	f7f0 fcb1 	bl	8000648 <__aeabi_dmul>
 800fce6:	4602      	mov	r2, r0
 800fce8:	460b      	mov	r3, r1
 800fcea:	4614      	mov	r4, r2
 800fcec:	461d      	mov	r5, r3
 800fcee:	4b73      	ldr	r3, [pc, #460]	; (800febc <run_shortest+0xd6c>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f7f0 fc50 	bl	8000598 <__aeabi_f2d>
 800fcf8:	4602      	mov	r2, r0
 800fcfa:	460b      	mov	r3, r1
 800fcfc:	4620      	mov	r0, r4
 800fcfe:	4629      	mov	r1, r5
 800fd00:	f7f0 fdcc 	bl	800089c <__aeabi_ddiv>
 800fd04:	4602      	mov	r2, r0
 800fd06:	460b      	mov	r3, r1
 800fd08:	4610      	mov	r0, r2
 800fd0a:	4619      	mov	r1, r3
 800fd0c:	f7f0 ff74 	bl	8000bf8 <__aeabi_d2f>
 800fd10:	4603      	mov	r3, r0
 800fd12:	ee00 3a10 	vmov	s0, r3
 800fd16:	f7f7 fe79 	bl	8007a0c <pl_FunMotor_duty>
		pl_FunMotor_start();
 800fd1a:	f7f7 fe63 	bl	80079e4 <pl_FunMotor_start>
		HAL_Delay(600);
 800fd1e:	f44f 7016 	mov.w	r0, #600	; 0x258
 800fd22:	f009 f819 	bl	8018d58 <HAL_Delay>
		reset_gyro();
 800fd26:	f7f1 fd1f 	bl	8001768 <reset_gyro>
		reset_speed();
 800fd2a:	f7f1 f975 	bl	8001018 <reset_speed>
		clear_Ierror();
 800fd2e:	f7f4 fc3f 	bl	80045b0 <clear_Ierror>
//				pl_FunMotor_duty(160);
//		pl_FunMotor_start();
//						HAL_Delay(2000);	//候補1

	}
	maze_mode = 1;
 800fd32:	4b63      	ldr	r3, [pc, #396]	; (800fec0 <run_shortest+0xd70>)
 800fd34:	2201      	movs	r2, #1
 800fd36:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 1;
 800fd38:	4b62      	ldr	r3, [pc, #392]	; (800fec4 <run_shortest+0xd74>)
 800fd3a:	2201      	movs	r2, #1
 800fd3c:	701a      	strb	r2, [r3, #0]
//	record_mode=14;
	record_mode=18;
 800fd3e:	4b62      	ldr	r3, [pc, #392]	; (800fec8 <run_shortest+0xd78>)
 800fd40:	2212      	movs	r2, #18
 800fd42:	701a      	strb	r2, [r3, #0]
//	encoder_PID_error=2500;
//	gyro_PID_error=1800;
	wall_control = 0;
 800fd44:	4b61      	ldr	r3, [pc, #388]	; (800fecc <run_shortest+0xd7c>)
 800fd46:	2200      	movs	r2, #0
 800fd48:	601a      	str	r2, [r3, #0]
	pass_count = 0;
 800fd4a:	4b57      	ldr	r3, [pc, #348]	; (800fea8 <run_shortest+0xd58>)
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	701a      	strb	r2, [r3, #0]


	mode.WallControlMode=1;
 800fd50:	2301      	movs	r3, #1
 800fd52:	763b      	strb	r3, [r7, #24]
	mode.WallControlStatus=0;
 800fd54:	2300      	movs	r3, #0
 800fd56:	767b      	strb	r3, [r7, #25]
	mode.calMazeMode=0;
 800fd58:	2300      	movs	r3, #0
 800fd5a:	76bb      	strb	r3, [r7, #26]
	mode.WallCutMode=0;
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	76fb      	strb	r3, [r7, #27]
	pass_count2=0;
 800fd60:	2300      	movs	r3, #0
 800fd62:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fd64:	e002      	b.n	800fd6c <run_shortest+0xc1c>
		pass_count2++;
 800fd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd68:	3301      	adds	r3, #1
 800fd6a:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fd6c:	4a4f      	ldr	r2, [pc, #316]	; (800feac <run_shortest+0xd5c>)
 800fd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd78:	d0f5      	beq.n	800fd66 <run_shortest+0xc16>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800fd7a:	4a4c      	ldr	r2, [pc, #304]	; (800feac <run_shortest+0xd5c>)
 800fd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd82:	934e      	str	r3, [sp, #312]	; 0x138
 800fd84:	4668      	mov	r0, sp
 800fd86:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fd8a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fd8e:	4619      	mov	r1, r3
 800fd90:	f010 fab4 	bl	80202fc <memcpy>
 800fd94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fd98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fd9a:	f007 fef7 	bl	8017b8c <get_center_velocity>
 800fd9e:	ed87 0a08 	vstr	s0, [r7, #32]
	straight_table2(BACK_TO_CENTER_FRONT,0,end_velocity,end_velocity,end_velocity*end_velocity/ BACK_TO_CENTER_FRONT/2, mode);
 800fda2:	edd7 7a08 	vldr	s15, [r7, #32]
 800fda6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fdaa:	ee17 0a90 	vmov	r0, s15
 800fdae:	f7f0 fbf3 	bl	8000598 <__aeabi_f2d>
 800fdb2:	f04f 0200 	mov.w	r2, #0
 800fdb6:	4b46      	ldr	r3, [pc, #280]	; (800fed0 <run_shortest+0xd80>)
 800fdb8:	f7f0 fd70 	bl	800089c <__aeabi_ddiv>
 800fdbc:	4602      	mov	r2, r0
 800fdbe:	460b      	mov	r3, r1
 800fdc0:	4610      	mov	r0, r2
 800fdc2:	4619      	mov	r1, r3
 800fdc4:	f04f 0200 	mov.w	r2, #0
 800fdc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fdcc:	f7f0 fd66 	bl	800089c <__aeabi_ddiv>
 800fdd0:	4602      	mov	r2, r0
 800fdd2:	460b      	mov	r3, r1
 800fdd4:	4610      	mov	r0, r2
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	f7f0 ff0e 	bl	8000bf8 <__aeabi_d2f>
 800fddc:	4603      	mov	r3, r0
 800fdde:	69b8      	ldr	r0, [r7, #24]
 800fde0:	ee02 3a10 	vmov	s4, r3
 800fde4:	edd7 1a08 	vldr	s3, [r7, #32]
 800fde8:	ed97 1a08 	vldr	s2, [r7, #32]
 800fdec:	eddf 0a39 	vldr	s1, [pc, #228]	; 800fed4 <run_shortest+0xd84>
 800fdf0:	eeb2 0a09 	vmov.f32	s0, #41	; 0x41480000  12.5
 800fdf4:	f7f3 f8f2 	bl	8002fdc <straight_table2>


	while (pass_count <= 255) {
		pass_count2=pass_count+1;
 800fdf8:	4b2b      	ldr	r3, [pc, #172]	; (800fea8 <run_shortest+0xd58>)
 800fdfa:	781b      	ldrb	r3, [r3, #0]
 800fdfc:	3301      	adds	r3, #1
 800fdfe:	627b      	str	r3, [r7, #36]	; 0x24
		while(pass[pass_count2] == -1){
 800fe00:	e002      	b.n	800fe08 <run_shortest+0xcb8>
			pass_count2++;
 800fe02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe04:	3301      	adds	r3, #1
 800fe06:	627b      	str	r3, [r7, #36]	; 0x24
		while(pass[pass_count2] == -1){
 800fe08:	4a28      	ldr	r2, [pc, #160]	; (800feac <run_shortest+0xd5c>)
 800fe0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe14:	d0f5      	beq.n	800fe02 <run_shortest+0xcb2>
		}
		end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800fe16:	4a25      	ldr	r2, [pc, #148]	; (800feac <run_shortest+0xd5c>)
 800fe18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe1e:	934e      	str	r3, [sp, #312]	; 0x138
 800fe20:	4668      	mov	r0, sp
 800fe22:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fe26:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fe2a:	4619      	mov	r1, r3
 800fe2c:	f010 fa66 	bl	80202fc <memcpy>
 800fe30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fe34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe36:	f007 fea9 	bl	8017b8c <get_center_velocity>
 800fe3a:	ed87 0a08 	vstr	s0, [r7, #32]

		if (pass[pass_count] == -1) {
 800fe3e:	4b1a      	ldr	r3, [pc, #104]	; (800fea8 <run_shortest+0xd58>)
 800fe40:	781b      	ldrb	r3, [r3, #0]
 800fe42:	461a      	mov	r2, r3
 800fe44:	4b19      	ldr	r3, [pc, #100]	; (800feac <run_shortest+0xd5c>)
 800fe46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe4e:	d106      	bne.n	800fe5e <run_shortest+0xd0e>
			pass_count++;
 800fe50:	4b15      	ldr	r3, [pc, #84]	; (800fea8 <run_shortest+0xd58>)
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	3301      	adds	r3, #1
 800fe56:	b2da      	uxtb	r2, r3
 800fe58:	4b13      	ldr	r3, [pc, #76]	; (800fea8 <run_shortest+0xd58>)
 800fe5a:	701a      	strb	r2, [r3, #0]
 800fe5c:	e2a1      	b.n	80103a2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -2) {
 800fe5e:	4b12      	ldr	r3, [pc, #72]	; (800fea8 <run_shortest+0xd58>)
 800fe60:	781b      	ldrb	r3, [r3, #0]
 800fe62:	461a      	mov	r2, r3
 800fe64:	4b11      	ldr	r3, [pc, #68]	; (800feac <run_shortest+0xd5c>)
 800fe66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe6a:	f113 0f02 	cmn.w	r3, #2
 800fe6e:	d133      	bne.n	800fed8 <run_shortest+0xd88>

			slalomR(howspeed.slalom_R, OFF,SHORTEST,mollifier_mode,end_velocity);
 800fe70:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fe74:	9303      	str	r3, [sp, #12]
 800fe76:	2301      	movs	r3, #1
 800fe78:	9302      	str	r3, [sp, #8]
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	9301      	str	r3, [sp, #4]
 800fe7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe80:	9300      	str	r3, [sp, #0]
 800fe82:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fe86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe88:	ed97 0a08 	vldr	s0, [r7, #32]
 800fe8c:	f7fa f874 	bl	8009f78 <slalomR>

			pass_count++;
 800fe90:	4b05      	ldr	r3, [pc, #20]	; (800fea8 <run_shortest+0xd58>)
 800fe92:	781b      	ldrb	r3, [r3, #0]
 800fe94:	3301      	adds	r3, #1
 800fe96:	b2da      	uxtb	r2, r3
 800fe98:	4b03      	ldr	r3, [pc, #12]	; (800fea8 <run_shortest+0xd58>)
 800fe9a:	701a      	strb	r2, [r3, #0]
 800fe9c:	e281      	b.n	80103a2 <run_shortest+0x1252>
 800fe9e:	bf00      	nop
 800fea0:	cccccccd 	.word	0xcccccccd
 800fea4:	4010cccc 	.word	0x4010cccc
 800fea8:	20000828 	.word	0x20000828
 800feac:	2000083c 	.word	0x2000083c
 800feb0:	0802351c 	.word	0x0802351c
 800feb4:	08023534 	.word	0x08023534
 800feb8:	20000806 	.word	0x20000806
 800febc:	200004d4 	.word	0x200004d4
 800fec0:	20000834 	.word	0x20000834
 800fec4:	20000808 	.word	0x20000808
 800fec8:	2000edc0 	.word	0x2000edc0
 800fecc:	20000830 	.word	0x20000830
 800fed0:	40290000 	.word	0x40290000
 800fed4:	00000000 	.word	0x00000000
		}
		else if (pass[pass_count] == -3) {
 800fed8:	4baa      	ldr	r3, [pc, #680]	; (8010184 <run_shortest+0x1034>)
 800feda:	781b      	ldrb	r3, [r3, #0]
 800fedc:	461a      	mov	r2, r3
 800fede:	4baa      	ldr	r3, [pc, #680]	; (8010188 <run_shortest+0x1038>)
 800fee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fee4:	f113 0f03 	cmn.w	r3, #3
 800fee8:	d116      	bne.n	800ff18 <run_shortest+0xdc8>

			slalomL(howspeed.slalom_L, OFF,SHORTEST,mollifier_mode,end_velocity);
 800feea:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800feee:	9303      	str	r3, [sp, #12]
 800fef0:	2301      	movs	r3, #1
 800fef2:	9302      	str	r3, [sp, #8]
 800fef4:	2300      	movs	r3, #0
 800fef6:	9301      	str	r3, [sp, #4]
 800fef8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fefa:	9300      	str	r3, [sp, #0]
 800fefc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ff00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff02:	ed97 0a08 	vldr	s0, [r7, #32]
 800ff06:	f7fa fa1d 	bl	800a344 <slalomL>

			pass_count++;
 800ff0a:	4b9e      	ldr	r3, [pc, #632]	; (8010184 <run_shortest+0x1034>)
 800ff0c:	781b      	ldrb	r3, [r3, #0]
 800ff0e:	3301      	adds	r3, #1
 800ff10:	b2da      	uxtb	r2, r3
 800ff12:	4b9c      	ldr	r3, [pc, #624]	; (8010184 <run_shortest+0x1034>)
 800ff14:	701a      	strb	r2, [r3, #0]
 800ff16:	e244      	b.n	80103a2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -4) {
 800ff18:	4b9a      	ldr	r3, [pc, #616]	; (8010184 <run_shortest+0x1034>)
 800ff1a:	781b      	ldrb	r3, [r3, #0]
 800ff1c:	461a      	mov	r2, r3
 800ff1e:	4b9a      	ldr	r3, [pc, #616]	; (8010188 <run_shortest+0x1038>)
 800ff20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff24:	f113 0f04 	cmn.w	r3, #4
 800ff28:	d115      	bne.n	800ff56 <run_shortest+0xe06>
			turn90R(howspeed.turn90_R, OFF,mollifier_mode,end_velocity);
 800ff2a:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ff2e:	9302      	str	r3, [sp, #8]
 800ff30:	2300      	movs	r3, #0
 800ff32:	9301      	str	r3, [sp, #4]
 800ff34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff38:	9300      	str	r3, [sp, #0]
 800ff3a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ff3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff40:	ed97 0a08 	vldr	s0, [r7, #32]
 800ff44:	f7fa fbe0 	bl	800a708 <turn90R>
			pass_count++;
 800ff48:	4b8e      	ldr	r3, [pc, #568]	; (8010184 <run_shortest+0x1034>)
 800ff4a:	781b      	ldrb	r3, [r3, #0]
 800ff4c:	3301      	adds	r3, #1
 800ff4e:	b2da      	uxtb	r2, r3
 800ff50:	4b8c      	ldr	r3, [pc, #560]	; (8010184 <run_shortest+0x1034>)
 800ff52:	701a      	strb	r2, [r3, #0]
 800ff54:	e225      	b.n	80103a2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -5) {
 800ff56:	4b8b      	ldr	r3, [pc, #556]	; (8010184 <run_shortest+0x1034>)
 800ff58:	781b      	ldrb	r3, [r3, #0]
 800ff5a:	461a      	mov	r2, r3
 800ff5c:	4b8a      	ldr	r3, [pc, #552]	; (8010188 <run_shortest+0x1038>)
 800ff5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff62:	f113 0f05 	cmn.w	r3, #5
 800ff66:	d115      	bne.n	800ff94 <run_shortest+0xe44>
			turn90L(howspeed.turn90_L, OFF,mollifier_mode,end_velocity);
 800ff68:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ff6c:	9302      	str	r3, [sp, #8]
 800ff6e:	2300      	movs	r3, #0
 800ff70:	9301      	str	r3, [sp, #4]
 800ff72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ff76:	9300      	str	r3, [sp, #0]
 800ff78:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800ff7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff7e:	ed97 0a08 	vldr	s0, [r7, #32]
 800ff82:	f7fa fd2b 	bl	800a9dc <turn90L>
			pass_count++;
 800ff86:	4b7f      	ldr	r3, [pc, #508]	; (8010184 <run_shortest+0x1034>)
 800ff88:	781b      	ldrb	r3, [r3, #0]
 800ff8a:	3301      	adds	r3, #1
 800ff8c:	b2da      	uxtb	r2, r3
 800ff8e:	4b7d      	ldr	r3, [pc, #500]	; (8010184 <run_shortest+0x1034>)
 800ff90:	701a      	strb	r2, [r3, #0]
 800ff92:	e206      	b.n	80103a2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -6) {
 800ff94:	4b7b      	ldr	r3, [pc, #492]	; (8010184 <run_shortest+0x1034>)
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	461a      	mov	r2, r3
 800ff9a:	4b7b      	ldr	r3, [pc, #492]	; (8010188 <run_shortest+0x1038>)
 800ff9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffa0:	f113 0f06 	cmn.w	r3, #6
 800ffa4:	d115      	bne.n	800ffd2 <run_shortest+0xe82>
			turn180R(howspeed.turn180_R, OFF,mollifier_mode,end_velocity);
 800ffa6:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ffaa:	9302      	str	r3, [sp, #8]
 800ffac:	2300      	movs	r3, #0
 800ffae:	9301      	str	r3, [sp, #4]
 800ffb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ffb4:	9300      	str	r3, [sp, #0]
 800ffb6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800ffba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ffbc:	ed97 0a08 	vldr	s0, [r7, #32]
 800ffc0:	f7fa fe70 	bl	800aca4 <turn180R>
			pass_count++;
 800ffc4:	4b6f      	ldr	r3, [pc, #444]	; (8010184 <run_shortest+0x1034>)
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	3301      	adds	r3, #1
 800ffca:	b2da      	uxtb	r2, r3
 800ffcc:	4b6d      	ldr	r3, [pc, #436]	; (8010184 <run_shortest+0x1034>)
 800ffce:	701a      	strb	r2, [r3, #0]
 800ffd0:	e1e7      	b.n	80103a2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -7) {
 800ffd2:	4b6c      	ldr	r3, [pc, #432]	; (8010184 <run_shortest+0x1034>)
 800ffd4:	781b      	ldrb	r3, [r3, #0]
 800ffd6:	461a      	mov	r2, r3
 800ffd8:	4b6b      	ldr	r3, [pc, #428]	; (8010188 <run_shortest+0x1038>)
 800ffda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffde:	f113 0f07 	cmn.w	r3, #7
 800ffe2:	d115      	bne.n	8010010 <run_shortest+0xec0>
			turn180L(howspeed.turn180_L, OFF,mollifier_mode,end_velocity);
 800ffe4:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ffe8:	9302      	str	r3, [sp, #8]
 800ffea:	2300      	movs	r3, #0
 800ffec:	9301      	str	r3, [sp, #4]
 800ffee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800fff2:	9300      	str	r3, [sp, #0]
 800fff4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800fff8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fffa:	ed97 0a08 	vldr	s0, [r7, #32]
 800fffe:	f7fa ffbb 	bl	800af78 <turn180L>
			pass_count++;
 8010002:	4b60      	ldr	r3, [pc, #384]	; (8010184 <run_shortest+0x1034>)
 8010004:	781b      	ldrb	r3, [r3, #0]
 8010006:	3301      	adds	r3, #1
 8010008:	b2da      	uxtb	r2, r3
 801000a:	4b5e      	ldr	r3, [pc, #376]	; (8010184 <run_shortest+0x1034>)
 801000c:	701a      	strb	r2, [r3, #0]
 801000e:	e1c8      	b.n	80103a2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -8) { //入り45R
 8010010:	4b5c      	ldr	r3, [pc, #368]	; (8010184 <run_shortest+0x1034>)
 8010012:	781b      	ldrb	r3, [r3, #0]
 8010014:	461a      	mov	r2, r3
 8010016:	4b5c      	ldr	r3, [pc, #368]	; (8010188 <run_shortest+0x1038>)
 8010018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801001c:	f113 0f08 	cmn.w	r3, #8
 8010020:	d115      	bne.n	801004e <run_shortest+0xefe>
			turn45inR(howspeed.turn45in_R, OFF,mollifier_mode,end_velocity);
 8010022:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010026:	9302      	str	r3, [sp, #8]
 8010028:	2300      	movs	r3, #0
 801002a:	9301      	str	r3, [sp, #4]
 801002c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010030:	9300      	str	r3, [sp, #0]
 8010032:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8010036:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010038:	ed97 0a08 	vldr	s0, [r7, #32]
 801003c:	f7fb f904 	bl	800b248 <turn45inR>
			pass_count++;
 8010040:	4b50      	ldr	r3, [pc, #320]	; (8010184 <run_shortest+0x1034>)
 8010042:	781b      	ldrb	r3, [r3, #0]
 8010044:	3301      	adds	r3, #1
 8010046:	b2da      	uxtb	r2, r3
 8010048:	4b4e      	ldr	r3, [pc, #312]	; (8010184 <run_shortest+0x1034>)
 801004a:	701a      	strb	r2, [r3, #0]
 801004c:	e1a9      	b.n	80103a2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -9) { //入り45L
 801004e:	4b4d      	ldr	r3, [pc, #308]	; (8010184 <run_shortest+0x1034>)
 8010050:	781b      	ldrb	r3, [r3, #0]
 8010052:	461a      	mov	r2, r3
 8010054:	4b4c      	ldr	r3, [pc, #304]	; (8010188 <run_shortest+0x1038>)
 8010056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801005a:	f113 0f09 	cmn.w	r3, #9
 801005e:	d115      	bne.n	801008c <run_shortest+0xf3c>
			turn45inL(howspeed.turn45in_L, OFF,mollifier_mode,end_velocity);
 8010060:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010064:	9302      	str	r3, [sp, #8]
 8010066:	2300      	movs	r3, #0
 8010068:	9301      	str	r3, [sp, #4]
 801006a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801006e:	9300      	str	r3, [sp, #0]
 8010070:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8010074:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010076:	ed97 0a08 	vldr	s0, [r7, #32]
 801007a:	f7fb fb2d 	bl	800b6d8 <turn45inL>
			pass_count++;
 801007e:	4b41      	ldr	r3, [pc, #260]	; (8010184 <run_shortest+0x1034>)
 8010080:	781b      	ldrb	r3, [r3, #0]
 8010082:	3301      	adds	r3, #1
 8010084:	b2da      	uxtb	r2, r3
 8010086:	4b3f      	ldr	r3, [pc, #252]	; (8010184 <run_shortest+0x1034>)
 8010088:	701a      	strb	r2, [r3, #0]
 801008a:	e18a      	b.n	80103a2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -10) { //入り135R
 801008c:	4b3d      	ldr	r3, [pc, #244]	; (8010184 <run_shortest+0x1034>)
 801008e:	781b      	ldrb	r3, [r3, #0]
 8010090:	461a      	mov	r2, r3
 8010092:	4b3d      	ldr	r3, [pc, #244]	; (8010188 <run_shortest+0x1038>)
 8010094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010098:	f113 0f0a 	cmn.w	r3, #10
 801009c:	d115      	bne.n	80100ca <run_shortest+0xf7a>
			turn135inR(howspeed.turn135in_R, OFF,mollifier_mode,end_velocity);
 801009e:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80100a2:	9302      	str	r3, [sp, #8]
 80100a4:	2300      	movs	r3, #0
 80100a6:	9301      	str	r3, [sp, #4]
 80100a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80100ac:	9300      	str	r3, [sp, #0]
 80100ae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80100b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80100b4:	ed97 0a08 	vldr	s0, [r7, #32]
 80100b8:	f7fb fd4e 	bl	800bb58 <turn135inR>
			pass_count++;
 80100bc:	4b31      	ldr	r3, [pc, #196]	; (8010184 <run_shortest+0x1034>)
 80100be:	781b      	ldrb	r3, [r3, #0]
 80100c0:	3301      	adds	r3, #1
 80100c2:	b2da      	uxtb	r2, r3
 80100c4:	4b2f      	ldr	r3, [pc, #188]	; (8010184 <run_shortest+0x1034>)
 80100c6:	701a      	strb	r2, [r3, #0]
 80100c8:	e16b      	b.n	80103a2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -11) { //入り135L
 80100ca:	4b2e      	ldr	r3, [pc, #184]	; (8010184 <run_shortest+0x1034>)
 80100cc:	781b      	ldrb	r3, [r3, #0]
 80100ce:	461a      	mov	r2, r3
 80100d0:	4b2d      	ldr	r3, [pc, #180]	; (8010188 <run_shortest+0x1038>)
 80100d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100d6:	f113 0f0b 	cmn.w	r3, #11
 80100da:	d115      	bne.n	8010108 <run_shortest+0xfb8>
			turn135inL(howspeed.turn135in_L, OFF,mollifier_mode,end_velocity);
 80100dc:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80100e0:	9302      	str	r3, [sp, #8]
 80100e2:	2300      	movs	r3, #0
 80100e4:	9301      	str	r3, [sp, #4]
 80100e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80100ea:	9300      	str	r3, [sp, #0]
 80100ec:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80100f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80100f2:	ed97 0a08 	vldr	s0, [r7, #32]
 80100f6:	f7fb ff77 	bl	800bfe8 <turn135inL>
			pass_count++;
 80100fa:	4b22      	ldr	r3, [pc, #136]	; (8010184 <run_shortest+0x1034>)
 80100fc:	781b      	ldrb	r3, [r3, #0]
 80100fe:	3301      	adds	r3, #1
 8010100:	b2da      	uxtb	r2, r3
 8010102:	4b20      	ldr	r3, [pc, #128]	; (8010184 <run_shortest+0x1034>)
 8010104:	701a      	strb	r2, [r3, #0]
 8010106:	e14c      	b.n	80103a2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -12) { //出り45R
 8010108:	4b1e      	ldr	r3, [pc, #120]	; (8010184 <run_shortest+0x1034>)
 801010a:	781b      	ldrb	r3, [r3, #0]
 801010c:	461a      	mov	r2, r3
 801010e:	4b1e      	ldr	r3, [pc, #120]	; (8010188 <run_shortest+0x1038>)
 8010110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010114:	f113 0f0c 	cmn.w	r3, #12
 8010118:	d115      	bne.n	8010146 <run_shortest+0xff6>
			turn45outR(howspeed.turn45out_R, OFF,mollifier_mode,end_velocity);
 801011a:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 801011e:	9302      	str	r3, [sp, #8]
 8010120:	2300      	movs	r3, #0
 8010122:	9301      	str	r3, [sp, #4]
 8010124:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010128:	9300      	str	r3, [sp, #0]
 801012a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801012e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010130:	ed97 0a08 	vldr	s0, [r7, #32]
 8010134:	f7fc f99c 	bl	800c470 <turn45outR>
			pass_count++;
 8010138:	4b12      	ldr	r3, [pc, #72]	; (8010184 <run_shortest+0x1034>)
 801013a:	781b      	ldrb	r3, [r3, #0]
 801013c:	3301      	adds	r3, #1
 801013e:	b2da      	uxtb	r2, r3
 8010140:	4b10      	ldr	r3, [pc, #64]	; (8010184 <run_shortest+0x1034>)
 8010142:	701a      	strb	r2, [r3, #0]
 8010144:	e12d      	b.n	80103a2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -13) { //出り45L
 8010146:	4b0f      	ldr	r3, [pc, #60]	; (8010184 <run_shortest+0x1034>)
 8010148:	781b      	ldrb	r3, [r3, #0]
 801014a:	461a      	mov	r2, r3
 801014c:	4b0e      	ldr	r3, [pc, #56]	; (8010188 <run_shortest+0x1038>)
 801014e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010152:	f113 0f0d 	cmn.w	r3, #13
 8010156:	d119      	bne.n	801018c <run_shortest+0x103c>
			turn45outL(howspeed.turn45out_L, OFF,mollifier_mode,end_velocity);
 8010158:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 801015c:	9302      	str	r3, [sp, #8]
 801015e:	2300      	movs	r3, #0
 8010160:	9301      	str	r3, [sp, #4]
 8010162:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8010166:	9300      	str	r3, [sp, #0]
 8010168:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801016c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801016e:	ed97 0a08 	vldr	s0, [r7, #32]
 8010172:	f7fc fb6f 	bl	800c854 <turn45outL>
			pass_count++;
 8010176:	4b03      	ldr	r3, [pc, #12]	; (8010184 <run_shortest+0x1034>)
 8010178:	781b      	ldrb	r3, [r3, #0]
 801017a:	3301      	adds	r3, #1
 801017c:	b2da      	uxtb	r2, r3
 801017e:	4b01      	ldr	r3, [pc, #4]	; (8010184 <run_shortest+0x1034>)
 8010180:	701a      	strb	r2, [r3, #0]
 8010182:	e10e      	b.n	80103a2 <run_shortest+0x1252>
 8010184:	20000828 	.word	0x20000828
 8010188:	2000083c 	.word	0x2000083c
		}
		else if (pass[pass_count] == -14) { //出り135R
 801018c:	4ba0      	ldr	r3, [pc, #640]	; (8010410 <run_shortest+0x12c0>)
 801018e:	781b      	ldrb	r3, [r3, #0]
 8010190:	461a      	mov	r2, r3
 8010192:	4ba0      	ldr	r3, [pc, #640]	; (8010414 <run_shortest+0x12c4>)
 8010194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010198:	f113 0f0e 	cmn.w	r3, #14
 801019c:	d115      	bne.n	80101ca <run_shortest+0x107a>
			turn135outR(howspeed.turn135out_R, OFF,mollifier_mode,end_velocity);
 801019e:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80101a2:	9302      	str	r3, [sp, #8]
 80101a4:	2300      	movs	r3, #0
 80101a6:	9301      	str	r3, [sp, #4]
 80101a8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80101ac:	9300      	str	r3, [sp, #0]
 80101ae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80101b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80101b4:	ed97 0a08 	vldr	s0, [r7, #32]
 80101b8:	f7fc fd34 	bl	800cc24 <turn135outR>
			pass_count++;
 80101bc:	4b94      	ldr	r3, [pc, #592]	; (8010410 <run_shortest+0x12c0>)
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	3301      	adds	r3, #1
 80101c2:	b2da      	uxtb	r2, r3
 80101c4:	4b92      	ldr	r3, [pc, #584]	; (8010410 <run_shortest+0x12c0>)
 80101c6:	701a      	strb	r2, [r3, #0]
 80101c8:	e0eb      	b.n	80103a2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -15) { //出り135L
 80101ca:	4b91      	ldr	r3, [pc, #580]	; (8010410 <run_shortest+0x12c0>)
 80101cc:	781b      	ldrb	r3, [r3, #0]
 80101ce:	461a      	mov	r2, r3
 80101d0:	4b90      	ldr	r3, [pc, #576]	; (8010414 <run_shortest+0x12c4>)
 80101d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101d6:	f113 0f0f 	cmn.w	r3, #15
 80101da:	d115      	bne.n	8010208 <run_shortest+0x10b8>
			turn135outL(howspeed.turn135out_L, OFF,mollifier_mode,end_velocity);
 80101dc:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80101e0:	9302      	str	r3, [sp, #8]
 80101e2:	2300      	movs	r3, #0
 80101e4:	9301      	str	r3, [sp, #4]
 80101e6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80101ea:	9300      	str	r3, [sp, #0]
 80101ec:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80101f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80101f2:	ed97 0a08 	vldr	s0, [r7, #32]
 80101f6:	f7fc ff07 	bl	800d008 <turn135outL>
			pass_count++;
 80101fa:	4b85      	ldr	r3, [pc, #532]	; (8010410 <run_shortest+0x12c0>)
 80101fc:	781b      	ldrb	r3, [r3, #0]
 80101fe:	3301      	adds	r3, #1
 8010200:	b2da      	uxtb	r2, r3
 8010202:	4b83      	ldr	r3, [pc, #524]	; (8010410 <run_shortest+0x12c0>)
 8010204:	701a      	strb	r2, [r3, #0]
 8010206:	e0cc      	b.n	80103a2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -16) { //V90R
 8010208:	4b81      	ldr	r3, [pc, #516]	; (8010410 <run_shortest+0x12c0>)
 801020a:	781b      	ldrb	r3, [r3, #0]
 801020c:	461a      	mov	r2, r3
 801020e:	4b81      	ldr	r3, [pc, #516]	; (8010414 <run_shortest+0x12c4>)
 8010210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010214:	f113 0f10 	cmn.w	r3, #16
 8010218:	d115      	bne.n	8010246 <run_shortest+0x10f6>
			V90R(howspeed.V90_R, OFF,mollifier_mode,end_velocity);
 801021a:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 801021e:	9302      	str	r3, [sp, #8]
 8010220:	2300      	movs	r3, #0
 8010222:	9301      	str	r3, [sp, #4]
 8010224:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8010228:	9300      	str	r3, [sp, #0]
 801022a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801022e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010230:	ed97 0a08 	vldr	s0, [r7, #32]
 8010234:	f7fd f8d4 	bl	800d3e0 <V90R>
			pass_count++;
 8010238:	4b75      	ldr	r3, [pc, #468]	; (8010410 <run_shortest+0x12c0>)
 801023a:	781b      	ldrb	r3, [r3, #0]
 801023c:	3301      	adds	r3, #1
 801023e:	b2da      	uxtb	r2, r3
 8010240:	4b73      	ldr	r3, [pc, #460]	; (8010410 <run_shortest+0x12c0>)
 8010242:	701a      	strb	r2, [r3, #0]
 8010244:	e0ad      	b.n	80103a2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -17) { //V90L
 8010246:	4b72      	ldr	r3, [pc, #456]	; (8010410 <run_shortest+0x12c0>)
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	461a      	mov	r2, r3
 801024c:	4b71      	ldr	r3, [pc, #452]	; (8010414 <run_shortest+0x12c4>)
 801024e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010252:	f113 0f11 	cmn.w	r3, #17
 8010256:	d115      	bne.n	8010284 <run_shortest+0x1134>
			V90L(howspeed.V90_L, OFF,mollifier_mode,end_velocity);
 8010258:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 801025c:	9302      	str	r3, [sp, #8]
 801025e:	2300      	movs	r3, #0
 8010260:	9301      	str	r3, [sp, #4]
 8010262:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8010266:	9300      	str	r3, [sp, #0]
 8010268:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801026c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801026e:	ed97 0a08 	vldr	s0, [r7, #32]
 8010272:	f7fd fac1 	bl	800d7f8 <V90L>
			pass_count++;
 8010276:	4b66      	ldr	r3, [pc, #408]	; (8010410 <run_shortest+0x12c0>)
 8010278:	781b      	ldrb	r3, [r3, #0]
 801027a:	3301      	adds	r3, #1
 801027c:	b2da      	uxtb	r2, r3
 801027e:	4b64      	ldr	r3, [pc, #400]	; (8010410 <run_shortest+0x12c0>)
 8010280:	701a      	strb	r2, [r3, #0]
 8010282:	e08e      	b.n	80103a2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] >= 1) {
 8010284:	4b62      	ldr	r3, [pc, #392]	; (8010410 <run_shortest+0x12c0>)
 8010286:	781b      	ldrb	r3, [r3, #0]
 8010288:	461a      	mov	r2, r3
 801028a:	4b62      	ldr	r3, [pc, #392]	; (8010414 <run_shortest+0x12c4>)
 801028c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010290:	2b00      	cmp	r3, #0
 8010292:	f340 8086 	ble.w	80103a2 <run_shortest+0x1252>
			first_v = howspeed.TurnCentervelocity;
 8010296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010298:	637b      	str	r3, [r7, #52]	; 0x34
			last_v = howspeed.TurnCentervelocity;
 801029a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801029c:	61fb      	str	r3, [r7, #28]
			if (pass_count >= 1) {
 801029e:	4b5c      	ldr	r3, [pc, #368]	; (8010410 <run_shortest+0x12c0>)
 80102a0:	781b      	ldrb	r3, [r3, #0]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d013      	beq.n	80102ce <run_shortest+0x117e>

				if (pass[pass_count - 1] == -2 || pass[pass_count - 1] == -3) {
 80102a6:	4b5a      	ldr	r3, [pc, #360]	; (8010410 <run_shortest+0x12c0>)
 80102a8:	781b      	ldrb	r3, [r3, #0]
 80102aa:	3b01      	subs	r3, #1
 80102ac:	4a59      	ldr	r2, [pc, #356]	; (8010414 <run_shortest+0x12c4>)
 80102ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102b2:	f113 0f02 	cmn.w	r3, #2
 80102b6:	d008      	beq.n	80102ca <run_shortest+0x117a>
 80102b8:	4b55      	ldr	r3, [pc, #340]	; (8010410 <run_shortest+0x12c0>)
 80102ba:	781b      	ldrb	r3, [r3, #0]
 80102bc:	3b01      	subs	r3, #1
 80102be:	4a55      	ldr	r2, [pc, #340]	; (8010414 <run_shortest+0x12c4>)
 80102c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102c4:	f113 0f03 	cmn.w	r3, #3
 80102c8:	d101      	bne.n	80102ce <run_shortest+0x117e>
					first_v = howspeed.SlalomCentervelocity;
 80102ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102cc:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
			if (pass[pass_count + 1] == -2 || pass[pass_count + 1] == -3) {
 80102ce:	4b50      	ldr	r3, [pc, #320]	; (8010410 <run_shortest+0x12c0>)
 80102d0:	781b      	ldrb	r3, [r3, #0]
 80102d2:	3301      	adds	r3, #1
 80102d4:	4a4f      	ldr	r2, [pc, #316]	; (8010414 <run_shortest+0x12c4>)
 80102d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102da:	f113 0f02 	cmn.w	r3, #2
 80102de:	d008      	beq.n	80102f2 <run_shortest+0x11a2>
 80102e0:	4b4b      	ldr	r3, [pc, #300]	; (8010410 <run_shortest+0x12c0>)
 80102e2:	781b      	ldrb	r3, [r3, #0]
 80102e4:	3301      	adds	r3, #1
 80102e6:	4a4b      	ldr	r2, [pc, #300]	; (8010414 <run_shortest+0x12c4>)
 80102e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102ec:	f113 0f03 	cmn.w	r3, #3
 80102f0:	d101      	bne.n	80102f6 <run_shortest+0x11a6>
				last_v = howspeed.SlalomCentervelocity;
 80102f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102f4:	61fb      	str	r3, [r7, #28]
			}
			if (pass[pass_count] >= 50) {
 80102f6:	4b46      	ldr	r3, [pc, #280]	; (8010410 <run_shortest+0x12c0>)
 80102f8:	781b      	ldrb	r3, [r3, #0]
 80102fa:	461a      	mov	r2, r3
 80102fc:	4b45      	ldr	r3, [pc, #276]	; (8010414 <run_shortest+0x12c4>)
 80102fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010302:	2b31      	cmp	r3, #49	; 0x31
 8010304:	dd27      	ble.n	8010356 <run_shortest+0x1206>
				mode.WallControlMode=3;
 8010306:	2303      	movs	r3, #3
 8010308:	763b      	strb	r3, [r7, #24]
				mode.WallControlStatus=0;
 801030a:	2300      	movs	r3, #0
 801030c:	767b      	strb	r3, [r7, #25]
				straight_table2((45 * sqrt(2) * (pass[pass_count] - 50)),first_v, end_velocity,inspeed, inacc, mode);
 801030e:	4b40      	ldr	r3, [pc, #256]	; (8010410 <run_shortest+0x12c0>)
 8010310:	781b      	ldrb	r3, [r3, #0]
 8010312:	461a      	mov	r2, r3
 8010314:	4b3f      	ldr	r3, [pc, #252]	; (8010414 <run_shortest+0x12c4>)
 8010316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801031a:	3b32      	subs	r3, #50	; 0x32
 801031c:	4618      	mov	r0, r3
 801031e:	f7f0 f929 	bl	8000574 <__aeabi_i2d>
 8010322:	a339      	add	r3, pc, #228	; (adr r3, 8010408 <run_shortest+0x12b8>)
 8010324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010328:	f7f0 f98e 	bl	8000648 <__aeabi_dmul>
 801032c:	4602      	mov	r2, r0
 801032e:	460b      	mov	r3, r1
 8010330:	4610      	mov	r0, r2
 8010332:	4619      	mov	r1, r3
 8010334:	f7f0 fc60 	bl	8000bf8 <__aeabi_d2f>
 8010338:	4603      	mov	r3, r0
 801033a:	69b8      	ldr	r0, [r7, #24]
 801033c:	ed97 2a04 	vldr	s4, [r7, #16]
 8010340:	edd7 1a05 	vldr	s3, [r7, #20]
 8010344:	ed97 1a08 	vldr	s2, [r7, #32]
 8010348:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 801034c:	ee00 3a10 	vmov	s0, r3
 8010350:	f7f2 fe44 	bl	8002fdc <straight_table2>
 8010354:	e01f      	b.n	8010396 <run_shortest+0x1246>
			} else {
				mode.WallControlMode=1;
 8010356:	2301      	movs	r3, #1
 8010358:	763b      	strb	r3, [r7, #24]
				mode.WallControlStatus=0;
 801035a:	2300      	movs	r3, #0
 801035c:	767b      	strb	r3, [r7, #25]
				straight_table2((45 * pass[pass_count]),first_v, end_velocity,inspeed, inacc, mode);
 801035e:	4b2c      	ldr	r3, [pc, #176]	; (8010410 <run_shortest+0x12c0>)
 8010360:	781b      	ldrb	r3, [r3, #0]
 8010362:	461a      	mov	r2, r3
 8010364:	4b2b      	ldr	r3, [pc, #172]	; (8010414 <run_shortest+0x12c4>)
 8010366:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801036a:	4613      	mov	r3, r2
 801036c:	005b      	lsls	r3, r3, #1
 801036e:	4413      	add	r3, r2
 8010370:	011a      	lsls	r2, r3, #4
 8010372:	1ad3      	subs	r3, r2, r3
 8010374:	ee07 3a90 	vmov	s15, r3
 8010378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801037c:	69b8      	ldr	r0, [r7, #24]
 801037e:	ed97 2a04 	vldr	s4, [r7, #16]
 8010382:	edd7 1a05 	vldr	s3, [r7, #20]
 8010386:	ed97 1a08 	vldr	s2, [r7, #32]
 801038a:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 801038e:	eeb0 0a67 	vmov.f32	s0, s15
 8010392:	f7f2 fe23 	bl	8002fdc <straight_table2>
			}

			pass_count++;
 8010396:	4b1e      	ldr	r3, [pc, #120]	; (8010410 <run_shortest+0x12c0>)
 8010398:	781b      	ldrb	r3, [r3, #0]
 801039a:	3301      	adds	r3, #1
 801039c:	b2da      	uxtb	r2, r3
 801039e:	4b1c      	ldr	r3, [pc, #112]	; (8010410 <run_shortest+0x12c0>)
 80103a0:	701a      	strb	r2, [r3, #0]
		}

		if (pass[pass_count] == 0) {
 80103a2:	4b1b      	ldr	r3, [pc, #108]	; (8010410 <run_shortest+0x12c0>)
 80103a4:	781b      	ldrb	r3, [r3, #0]
 80103a6:	461a      	mov	r2, r3
 80103a8:	4b1a      	ldr	r3, [pc, #104]	; (8010414 <run_shortest+0x12c4>)
 80103aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d000      	beq.n	80103b4 <run_shortest+0x1264>
		pass_count2=pass_count+1;
 80103b2:	e521      	b.n	800fdf8 <run_shortest+0xca8>
			break;
 80103b4:	bf00      	nop
//
//			break;
//		}
	}

		mode.WallControlMode=1;
 80103b6:	2301      	movs	r3, #1
 80103b8:	763b      	strb	r3, [r7, #24]
		mode.WallControlStatus=0;
 80103ba:	2300      	movs	r3, #0
 80103bc:	767b      	strb	r3, [r7, #25]
		straight_table2(90,end_velocity, 0,inspeed, inacc, mode);
 80103be:	69b8      	ldr	r0, [r7, #24]
 80103c0:	ed97 2a04 	vldr	s4, [r7, #16]
 80103c4:	edd7 1a05 	vldr	s3, [r7, #20]
 80103c8:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8010418 <run_shortest+0x12c8>
 80103cc:	edd7 0a08 	vldr	s1, [r7, #32]
 80103d0:	ed9f 0a12 	vldr	s0, [pc, #72]	; 801041c <run_shortest+0x12cc>
 80103d4:	f7f2 fe02 	bl	8002fdc <straight_table2>
		HAL_Delay(700);
 80103d8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80103dc:	f008 fcbc 	bl	8018d58 <HAL_Delay>
		pl_FunMotor_stop();
 80103e0:	f7f7 fb0a 	bl	80079f8 <pl_FunMotor_stop>
//		turning_table(180, 0, 0, 400, 5000);

	maze_mode = 0;
 80103e4:	4b0e      	ldr	r3, [pc, #56]	; (8010420 <run_shortest+0x12d0>)
 80103e6:	2200      	movs	r2, #0
 80103e8:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 80103ea:	4b0e      	ldr	r3, [pc, #56]	; (8010424 <run_shortest+0x12d4>)
 80103ec:	2200      	movs	r2, #0
 80103ee:	701a      	strb	r2, [r3, #0]
	record_mode=0;
 80103f0:	4b0d      	ldr	r3, [pc, #52]	; (8010428 <run_shortest+0x12d8>)
 80103f2:	2200      	movs	r2, #0
 80103f4:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_standby(OFF);
 80103f6:	2000      	movs	r0, #0
 80103f8:	f7f7 fa6a 	bl	80078d0 <pl_DriveMotor_standby>
	t = 0;
 80103fc:	4b0b      	ldr	r3, [pc, #44]	; (801042c <run_shortest+0x12dc>)
 80103fe:	2200      	movs	r2, #0
 8010400:	601a      	str	r2, [r3, #0]

	while (t <= 14) {
 8010402:	e034      	b.n	801046e <run_shortest+0x131e>
 8010404:	f3af 8000 	nop.w
 8010408:	c022ec18 	.word	0xc022ec18
 801040c:	404fd1de 	.word	0x404fd1de
 8010410:	20000828 	.word	0x20000828
 8010414:	2000083c 	.word	0x2000083c
 8010418:	00000000 	.word	0x00000000
 801041c:	42b40000 	.word	0x42b40000
 8010420:	20000834 	.word	0x20000834
 8010424:	20000808 	.word	0x20000808
 8010428:	2000edc0 	.word	0x2000edc0
 801042c:	20000c38 	.word	0x20000c38
		wall.row[t] = record.row[t];
 8010430:	4b2b      	ldr	r3, [pc, #172]	; (80104e0 <run_shortest+0x1390>)
 8010432:	681a      	ldr	r2, [r3, #0]
 8010434:	4b2a      	ldr	r3, [pc, #168]	; (80104e0 <run_shortest+0x1390>)
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	492a      	ldr	r1, [pc, #168]	; (80104e4 <run_shortest+0x1394>)
 801043a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 801043e:	4a2a      	ldr	r2, [pc, #168]	; (80104e8 <run_shortest+0x1398>)
 8010440:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = record.column[t];
 8010444:	4b26      	ldr	r3, [pc, #152]	; (80104e0 <run_shortest+0x1390>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	4a25      	ldr	r2, [pc, #148]	; (80104e0 <run_shortest+0x1390>)
 801044a:	6812      	ldr	r2, [r2, #0]
 801044c:	4925      	ldr	r1, [pc, #148]	; (80104e4 <run_shortest+0x1394>)
 801044e:	330c      	adds	r3, #12
 8010450:	005b      	lsls	r3, r3, #1
 8010452:	440b      	add	r3, r1
 8010454:	88d8      	ldrh	r0, [r3, #6]
 8010456:	4924      	ldr	r1, [pc, #144]	; (80104e8 <run_shortest+0x1398>)
 8010458:	f102 030c 	add.w	r3, r2, #12
 801045c:	005b      	lsls	r3, r3, #1
 801045e:	440b      	add	r3, r1
 8010460:	4602      	mov	r2, r0
 8010462:	80da      	strh	r2, [r3, #6]
		t++;
 8010464:	4b1e      	ldr	r3, [pc, #120]	; (80104e0 <run_shortest+0x1390>)
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	3301      	adds	r3, #1
 801046a:	4a1d      	ldr	r2, [pc, #116]	; (80104e0 <run_shortest+0x1390>)
 801046c:	6013      	str	r3, [r2, #0]
	while (t <= 14) {
 801046e:	4b1c      	ldr	r3, [pc, #112]	; (80104e0 <run_shortest+0x1390>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	2b0e      	cmp	r3, #14
 8010474:	dddc      	ble.n	8010430 <run_shortest+0x12e0>
	}
	t = 0;
 8010476:	4b1a      	ldr	r3, [pc, #104]	; (80104e0 <run_shortest+0x1390>)
 8010478:	2200      	movs	r2, #0
 801047a:	601a      	str	r2, [r3, #0]
	while (t <= 14) {
 801047c:	e026      	b.n	80104cc <run_shortest+0x137c>
		wall.row_look[t] = ~wall.row_look[t];
 801047e:	4b18      	ldr	r3, [pc, #96]	; (80104e0 <run_shortest+0x1390>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	4a19      	ldr	r2, [pc, #100]	; (80104e8 <run_shortest+0x1398>)
 8010484:	331c      	adds	r3, #28
 8010486:	005b      	lsls	r3, r3, #1
 8010488:	4413      	add	r3, r2
 801048a:	889a      	ldrh	r2, [r3, #4]
 801048c:	4b14      	ldr	r3, [pc, #80]	; (80104e0 <run_shortest+0x1390>)
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	43d2      	mvns	r2, r2
 8010492:	b291      	uxth	r1, r2
 8010494:	4a14      	ldr	r2, [pc, #80]	; (80104e8 <run_shortest+0x1398>)
 8010496:	331c      	adds	r3, #28
 8010498:	005b      	lsls	r3, r3, #1
 801049a:	4413      	add	r3, r2
 801049c:	460a      	mov	r2, r1
 801049e:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = ~wall.column_look[t];
 80104a0:	4b0f      	ldr	r3, [pc, #60]	; (80104e0 <run_shortest+0x1390>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	4a10      	ldr	r2, [pc, #64]	; (80104e8 <run_shortest+0x1398>)
 80104a6:	332c      	adds	r3, #44	; 0x2c
 80104a8:	005b      	lsls	r3, r3, #1
 80104aa:	4413      	add	r3, r2
 80104ac:	885a      	ldrh	r2, [r3, #2]
 80104ae:	4b0c      	ldr	r3, [pc, #48]	; (80104e0 <run_shortest+0x1390>)
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	43d2      	mvns	r2, r2
 80104b4:	b291      	uxth	r1, r2
 80104b6:	4a0c      	ldr	r2, [pc, #48]	; (80104e8 <run_shortest+0x1398>)
 80104b8:	332c      	adds	r3, #44	; 0x2c
 80104ba:	005b      	lsls	r3, r3, #1
 80104bc:	4413      	add	r3, r2
 80104be:	460a      	mov	r2, r1
 80104c0:	805a      	strh	r2, [r3, #2]
		t++;
 80104c2:	4b07      	ldr	r3, [pc, #28]	; (80104e0 <run_shortest+0x1390>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	3301      	adds	r3, #1
 80104c8:	4a05      	ldr	r2, [pc, #20]	; (80104e0 <run_shortest+0x1390>)
 80104ca:	6013      	str	r3, [r2, #0]
	while (t <= 14) {
 80104cc:	4b04      	ldr	r3, [pc, #16]	; (80104e0 <run_shortest+0x1390>)
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	2b0e      	cmp	r3, #14
 80104d2:	ddd4      	ble.n	801047e <run_shortest+0x132e>
	}

}
 80104d4:	bf00      	nop
 80104d6:	bf00      	nop
 80104d8:	3740      	adds	r7, #64	; 0x40
 80104da:	46bd      	mov	sp, r7
 80104dc:	bdb0      	pop	{r4, r5, r7, pc}
 80104de:	bf00      	nop
 80104e0:	20000c38 	.word	0x20000c38
 80104e4:	20000cb4 	.word	0x20000cb4
 80104e8:	20000c3c 	.word	0x20000c3c

080104ec <decision_kitiku>:





void decision_kitiku(int x,int y,int direction,unsigned short front_count,unsigned short right_count,unsigned short back_count,unsigned short left_count){
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b08a      	sub	sp, #40	; 0x28
 80104f0:	af02      	add	r7, sp, #8
 80104f2:	60f8      	str	r0, [r7, #12]
 80104f4:	60b9      	str	r1, [r7, #8]
 80104f6:	607a      	str	r2, [r7, #4]
 80104f8:	807b      	strh	r3, [r7, #2]
	_Bool front_wall=1;
 80104fa:	2301      	movs	r3, #1
 80104fc:	77bb      	strb	r3, [r7, #30]
	_Bool right_wall=1;
 80104fe:	2301      	movs	r3, #1
 8010500:	777b      	strb	r3, [r7, #29]
	_Bool left_wall=1;
 8010502:	2301      	movs	r3, #1
 8010504:	773b      	strb	r3, [r7, #28]
	int x_front=x;
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	61bb      	str	r3, [r7, #24]
	int y_front=y;
 801050a:	68bb      	ldr	r3, [r7, #8]
 801050c:	617b      	str	r3, [r7, #20]
	update_coordinate(&x_front,&y_front,direction);
 801050e:	f107 0114 	add.w	r1, r7, #20
 8010512:	f107 0318 	add.w	r3, r7, #24
 8010516:	687a      	ldr	r2, [r7, #4]
 8010518:	4618      	mov	r0, r3
 801051a:	f7fd fcf7 	bl	800df0c <update_coordinate>
	get_wall_look(x_front,y_front,direction,&front_wall,&right_wall,&left_wall);
 801051e:	69b8      	ldr	r0, [r7, #24]
 8010520:	6979      	ldr	r1, [r7, #20]
 8010522:	f107 021e 	add.w	r2, r7, #30
 8010526:	f107 031c 	add.w	r3, r7, #28
 801052a:	9301      	str	r3, [sp, #4]
 801052c:	f107 031d 	add.w	r3, r7, #29
 8010530:	9300      	str	r3, [sp, #0]
 8010532:	4613      	mov	r3, r2
 8010534:	687a      	ldr	r2, [r7, #4]
 8010536:	f000 fe27 	bl	8011188 <get_wall_look>
	_Bool look_f=(front_wall && right_wall && left_wall);
 801053a:	7fbb      	ldrb	r3, [r7, #30]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d007      	beq.n	8010550 <decision_kitiku+0x64>
 8010540:	7f7b      	ldrb	r3, [r7, #29]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d004      	beq.n	8010550 <decision_kitiku+0x64>
 8010546:	7f3b      	ldrb	r3, [r7, #28]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d001      	beq.n	8010550 <decision_kitiku+0x64>
 801054c:	2301      	movs	r3, #1
 801054e:	e000      	b.n	8010552 <decision_kitiku+0x66>
 8010550:	2300      	movs	r3, #0
 8010552:	77fb      	strb	r3, [r7, #31]
 8010554:	7ffb      	ldrb	r3, [r7, #31]
 8010556:	f003 0301 	and.w	r3, r3, #1
 801055a:	77fb      	strb	r3, [r7, #31]

	//ここに壁条件がない
	if (look_f && front_count <= right_count
 801055c:	7ffb      	ldrb	r3, [r7, #31]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d02b      	beq.n	80105ba <decision_kitiku+0xce>
 8010562:	887a      	ldrh	r2, [r7, #2]
 8010564:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010566:	429a      	cmp	r2, r3
 8010568:	d827      	bhi.n	80105ba <decision_kitiku+0xce>
			&& front_count <= left_count && front_count <= back_count) {
 801056a:	887a      	ldrh	r2, [r7, #2]
 801056c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801056e:	429a      	cmp	r2, r3
 8010570:	d823      	bhi.n	80105ba <decision_kitiku+0xce>
 8010572:	887a      	ldrh	r2, [r7, #2]
 8010574:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010576:	429a      	cmp	r2, r3
 8010578:	d81f      	bhi.n	80105ba <decision_kitiku+0xce>
		if ((direction==1 && y>=14) ||
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	2b01      	cmp	r3, #1
 801057e:	d102      	bne.n	8010586 <decision_kitiku+0x9a>
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	2b0d      	cmp	r3, #13
 8010584:	dc11      	bgt.n	80105aa <decision_kitiku+0xbe>
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	2b02      	cmp	r3, #2
 801058a:	d102      	bne.n	8010592 <decision_kitiku+0xa6>
			(direction==2 && x>=14) ||
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	2b0d      	cmp	r3, #13
 8010590:	dc0b      	bgt.n	80105aa <decision_kitiku+0xbe>
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	2b03      	cmp	r3, #3
 8010596:	d102      	bne.n	801059e <decision_kitiku+0xb2>
			(direction==3 && y<=1) ||
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	2b01      	cmp	r3, #1
 801059c:	dd05      	ble.n	80105aa <decision_kitiku+0xbe>
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	2b04      	cmp	r3, #4
 80105a2:	d106      	bne.n	80105b2 <decision_kitiku+0xc6>
			(direction==4 && x<=1) ){
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	2b01      	cmp	r3, #1
 80105a8:	dc03      	bgt.n	80105b2 <decision_kitiku+0xc6>
			kitikukan = 0;
 80105aa:	4b08      	ldr	r3, [pc, #32]	; (80105cc <decision_kitiku+0xe0>)
 80105ac:	2200      	movs	r2, #0
 80105ae:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 80105b0:	e007      	b.n	80105c2 <decision_kitiku+0xd6>
		}else{
			kitikukan = 1;
 80105b2:	4b06      	ldr	r3, [pc, #24]	; (80105cc <decision_kitiku+0xe0>)
 80105b4:	2201      	movs	r2, #1
 80105b6:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 80105b8:	e003      	b.n	80105c2 <decision_kitiku+0xd6>
		}

	} else {
		kitikukan = 0;
 80105ba:	4b04      	ldr	r3, [pc, #16]	; (80105cc <decision_kitiku+0xe0>)
 80105bc:	2200      	movs	r2, #0
 80105be:	601a      	str	r2, [r3, #0]
	}


}
 80105c0:	bf00      	nop
 80105c2:	bf00      	nop
 80105c4:	3720      	adds	r7, #32
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}
 80105ca:	bf00      	nop
 80105cc:	20000838 	.word	0x20000838

080105d0 <compress_kitiku>:

void compress_kitiku(int *x,int *y,int *direction) {
 80105d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105d2:	b099      	sub	sp, #100	; 0x64
 80105d4:	af04      	add	r7, sp, #16
 80105d6:	60f8      	str	r0, [r7, #12]
 80105d8:	60b9      	str	r1, [r7, #8]
 80105da:	607a      	str	r2, [r7, #4]
	kitiku_distance = 1;
 80105dc:	4b9f      	ldr	r3, [pc, #636]	; (801085c <compress_kitiku+0x28c>)
 80105de:	2201      	movs	r2, #1
 80105e0:	601a      	str	r2, [r3, #0]
	kitiku = 1;
 80105e2:	4b9f      	ldr	r3, [pc, #636]	; (8010860 <compress_kitiku+0x290>)
 80105e4:	2201      	movs	r2, #1
 80105e6:	701a      	strb	r2, [r3, #0]
	_Bool look_f,look_r,look_l;
	int x_now,y_now,direction_now;
	int x_front,y_front,x_right,y_right,x_left,y_left;
	int direction_right,direction_left;
	unsigned short front_count, right_count, back_count, left_count;
	x_now=*x;y_now=*y;direction_now=*direction;
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	637b      	str	r3, [r7, #52]	; 0x34
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	633b      	str	r3, [r7, #48]	; 0x30
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (1) {
		update_coordinate(&x_now,&y_now,direction_now);
 80105fa:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80105fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010602:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010604:	4618      	mov	r0, r3
 8010606:	f7fd fc81 	bl	800df0c <update_coordinate>
		x_front=x_now;y_front=y_now;x_right=x_now;y_right=y_now;x_left=x_now;y_left=y_now;
 801060a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801060c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801060e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010610:	62bb      	str	r3, [r7, #40]	; 0x28
 8010612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010614:	627b      	str	r3, [r7, #36]	; 0x24
 8010616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010618:	623b      	str	r3, [r7, #32]
 801061a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801061c:	61fb      	str	r3, [r7, #28]
 801061e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010620:	61bb      	str	r3, [r7, #24]

		update_coordinate(&x_front,&y_front,direction_now);
 8010622:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010626:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801062a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801062c:	4618      	mov	r0, r3
 801062e:	f7fd fc6d 	bl	800df0c <update_coordinate>
		get_wall_look(x_front,y_front,direction_now,&front_wall,&right_wall,&left_wall);
 8010632:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010634:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010636:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801063a:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 801063e:	9301      	str	r3, [sp, #4]
 8010640:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8010644:	9300      	str	r3, [sp, #0]
 8010646:	4613      	mov	r3, r2
 8010648:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801064a:	f000 fd9d 	bl	8011188 <get_wall_look>
		look_f=(front_wall && right_wall && left_wall);
 801064e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010652:	2b00      	cmp	r3, #0
 8010654:	d009      	beq.n	801066a <compress_kitiku+0x9a>
 8010656:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801065a:	2b00      	cmp	r3, #0
 801065c:	d005      	beq.n	801066a <compress_kitiku+0x9a>
 801065e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8010662:	2b00      	cmp	r3, #0
 8010664:	d001      	beq.n	801066a <compress_kitiku+0x9a>
 8010666:	2301      	movs	r3, #1
 8010668:	e000      	b.n	801066c <compress_kitiku+0x9c>
 801066a:	2300      	movs	r3, #0
 801066c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010670:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010674:	f003 0301 	and.w	r3, r3, #1
 8010678:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


		if(direction_now==4){direction_right=1;}else{direction_right=direction_now+1;}
 801067c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801067e:	2b04      	cmp	r3, #4
 8010680:	d102      	bne.n	8010688 <compress_kitiku+0xb8>
 8010682:	2301      	movs	r3, #1
 8010684:	64bb      	str	r3, [r7, #72]	; 0x48
 8010686:	e002      	b.n	801068e <compress_kitiku+0xbe>
 8010688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801068a:	3301      	adds	r3, #1
 801068c:	64bb      	str	r3, [r7, #72]	; 0x48
		update_coordinate(&x_right,&y_right,direction_right);
 801068e:	f107 0120 	add.w	r1, r7, #32
 8010692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010696:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010698:	4618      	mov	r0, r3
 801069a:	f7fd fc37 	bl	800df0c <update_coordinate>
		get_wall_look(x_right,y_right,direction_right,&front_wall,&right_wall,&left_wall);
 801069e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80106a0:	6a39      	ldr	r1, [r7, #32]
 80106a2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80106a6:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80106aa:	9301      	str	r3, [sp, #4]
 80106ac:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 80106b0:	9300      	str	r3, [sp, #0]
 80106b2:	4613      	mov	r3, r2
 80106b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80106b6:	f000 fd67 	bl	8011188 <get_wall_look>
		look_r=(front_wall && right_wall && left_wall);
 80106ba:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d009      	beq.n	80106d6 <compress_kitiku+0x106>
 80106c2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d005      	beq.n	80106d6 <compress_kitiku+0x106>
 80106ca:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d001      	beq.n	80106d6 <compress_kitiku+0x106>
 80106d2:	2301      	movs	r3, #1
 80106d4:	e000      	b.n	80106d8 <compress_kitiku+0x108>
 80106d6:	2300      	movs	r3, #0
 80106d8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80106dc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80106e0:	f003 0301 	and.w	r3, r3, #1
 80106e4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e


		if(direction_now==1){direction_left=4;}else{direction_left=direction_now-1;}
 80106e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106ea:	2b01      	cmp	r3, #1
 80106ec:	d102      	bne.n	80106f4 <compress_kitiku+0x124>
 80106ee:	2304      	movs	r3, #4
 80106f0:	647b      	str	r3, [r7, #68]	; 0x44
 80106f2:	e002      	b.n	80106fa <compress_kitiku+0x12a>
 80106f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106f6:	3b01      	subs	r3, #1
 80106f8:	647b      	str	r3, [r7, #68]	; 0x44
		update_coordinate(&x_left,&y_left,direction_left);
 80106fa:	f107 0118 	add.w	r1, r7, #24
 80106fe:	f107 031c 	add.w	r3, r7, #28
 8010702:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010704:	4618      	mov	r0, r3
 8010706:	f7fd fc01 	bl	800df0c <update_coordinate>
		get_wall_look(x_left,y_left,direction_left,&front_wall,&right_wall,&left_wall);
 801070a:	69f8      	ldr	r0, [r7, #28]
 801070c:	69b9      	ldr	r1, [r7, #24]
 801070e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8010712:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8010716:	9301      	str	r3, [sp, #4]
 8010718:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 801071c:	9300      	str	r3, [sp, #0]
 801071e:	4613      	mov	r3, r2
 8010720:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010722:	f000 fd31 	bl	8011188 <get_wall_look>
		look_l=(front_wall && right_wall && left_wall);
 8010726:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801072a:	2b00      	cmp	r3, #0
 801072c:	d009      	beq.n	8010742 <compress_kitiku+0x172>
 801072e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010732:	2b00      	cmp	r3, #0
 8010734:	d005      	beq.n	8010742 <compress_kitiku+0x172>
 8010736:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 801073a:	2b00      	cmp	r3, #0
 801073c:	d001      	beq.n	8010742 <compress_kitiku+0x172>
 801073e:	2301      	movs	r3, #1
 8010740:	e000      	b.n	8010744 <compress_kitiku+0x174>
 8010742:	2300      	movs	r3, #0
 8010744:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8010748:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801074c:	f003 0301 	and.w	r3, r3, #1
 8010750:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

		get_wall(x_now,y_now,direction_now,&front_wall,&right_wall,&left_wall);
 8010754:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010756:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010758:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801075c:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8010760:	9301      	str	r3, [sp, #4]
 8010762:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8010766:	9300      	str	r3, [sp, #0]
 8010768:	4613      	mov	r3, r2
 801076a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801076c:	f000 fb98 	bl	8010ea0 <get_wall>

		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x_now,y_now,direction_now);
 8010770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010774:	f107 0610 	add.w	r6, r7, #16
 8010778:	f107 0512 	add.w	r5, r7, #18
 801077c:	f107 0414 	add.w	r4, r7, #20
 8010780:	f107 0016 	add.w	r0, r7, #22
 8010784:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010786:	9102      	str	r1, [sp, #8]
 8010788:	9201      	str	r2, [sp, #4]
 801078a:	9300      	str	r3, [sp, #0]
 801078c:	4633      	mov	r3, r6
 801078e:	462a      	mov	r2, r5
 8010790:	4621      	mov	r1, r4
 8010792:	f000 fe79 	bl	8011488 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 8010796:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801079a:	2b00      	cmp	r3, #0
 801079c:	d001      	beq.n	80107a2 <compress_kitiku+0x1d2>
 801079e:	23ff      	movs	r3, #255	; 0xff
 80107a0:	82fb      	strh	r3, [r7, #22]
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 80107a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d001      	beq.n	80107ae <compress_kitiku+0x1de>
 80107aa:	23ff      	movs	r3, #255	; 0xff
 80107ac:	82bb      	strh	r3, [r7, #20]
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 80107ae:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d001      	beq.n	80107ba <compress_kitiku+0x1ea>
 80107b6:	23ff      	movs	r3, #255	; 0xff
 80107b8:	823b      	strh	r3, [r7, #16]
		// 移動の優先順位 ： 前→右→左→後
		if (walk_count[x_now][y_now] <= 1) {
 80107ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80107bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107be:	4929      	ldr	r1, [pc, #164]	; (8010864 <compress_kitiku+0x294>)
 80107c0:	0112      	lsls	r2, r2, #4
 80107c2:	4413      	add	r3, r2
 80107c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80107c8:	2b01      	cmp	r3, #1
 80107ca:	f240 80a9 	bls.w	8010920 <compress_kitiku+0x350>
			//goal間近で停止
			break;
		}
		if (direction_now==1 && y_now>=14) {break;}
 80107ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107d0:	2b01      	cmp	r3, #1
 80107d2:	d103      	bne.n	80107dc <compress_kitiku+0x20c>
 80107d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107d6:	2b0d      	cmp	r3, #13
 80107d8:	f300 80a4 	bgt.w	8010924 <compress_kitiku+0x354>
		if (direction_now==2 && x_now>=14) {break;}
 80107dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107de:	2b02      	cmp	r3, #2
 80107e0:	d103      	bne.n	80107ea <compress_kitiku+0x21a>
 80107e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107e4:	2b0d      	cmp	r3, #13
 80107e6:	f300 809f 	bgt.w	8010928 <compress_kitiku+0x358>
		if (direction_now==3 && y_now<=1) {break;}
 80107ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107ec:	2b03      	cmp	r3, #3
 80107ee:	d103      	bne.n	80107f8 <compress_kitiku+0x228>
 80107f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107f2:	2b01      	cmp	r3, #1
 80107f4:	f340 809a 	ble.w	801092c <compress_kitiku+0x35c>
		if (direction_now==4 && x_now<=1) {break;}
 80107f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107fa:	2b04      	cmp	r3, #4
 80107fc:	d103      	bne.n	8010806 <compress_kitiku+0x236>
 80107fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010800:	2b01      	cmp	r3, #1
 8010802:	f340 8095 	ble.w	8010930 <compress_kitiku+0x360>
		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 8010806:	8afb      	ldrh	r3, [r7, #22]
 8010808:	2bff      	cmp	r3, #255	; 0xff
 801080a:	d10c      	bne.n	8010826 <compress_kitiku+0x256>
 801080c:	8abb      	ldrh	r3, [r7, #20]
 801080e:	2bff      	cmp	r3, #255	; 0xff
 8010810:	d109      	bne.n	8010826 <compress_kitiku+0x256>
 8010812:	8a3b      	ldrh	r3, [r7, #16]
 8010814:	2bff      	cmp	r3, #255	; 0xff
 8010816:	d106      	bne.n	8010826 <compress_kitiku+0x256>
 8010818:	8a7b      	ldrh	r3, [r7, #18]
 801081a:	2bff      	cmp	r3, #255	; 0xff
 801081c:	d103      	bne.n	8010826 <compress_kitiku+0x256>
		// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
			error_mode=1;
 801081e:	4b12      	ldr	r3, [pc, #72]	; (8010868 <compress_kitiku+0x298>)
 8010820:	2201      	movs	r2, #1
 8010822:	701a      	strb	r2, [r3, #0]
		break;
 8010824:	e087      	b.n	8010936 <compress_kitiku+0x366>
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 8010826:	8afa      	ldrh	r2, [r7, #22]
 8010828:	8abb      	ldrh	r3, [r7, #20]
 801082a:	429a      	cmp	r2, r3
 801082c:	d81e      	bhi.n	801086c <compress_kitiku+0x29c>
 801082e:	8afa      	ldrh	r2, [r7, #22]
 8010830:	8a3b      	ldrh	r3, [r7, #16]
 8010832:	429a      	cmp	r2, r3
 8010834:	d81a      	bhi.n	801086c <compress_kitiku+0x29c>
 8010836:	8afa      	ldrh	r2, [r7, #22]
 8010838:	8a7b      	ldrh	r3, [r7, #18]
 801083a:	429a      	cmp	r2, r3
 801083c:	d816      	bhi.n	801086c <compress_kitiku+0x29c>
		// 直進
			if(look_f){
 801083e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010842:	2b00      	cmp	r3, #0
 8010844:	d005      	beq.n	8010852 <compress_kitiku+0x282>
				kitiku_distance += 2;
 8010846:	4b05      	ldr	r3, [pc, #20]	; (801085c <compress_kitiku+0x28c>)
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	3302      	adds	r3, #2
 801084c:	4a03      	ldr	r2, [pc, #12]	; (801085c <compress_kitiku+0x28c>)
 801084e:	6013      	str	r3, [r2, #0]
 8010850:	e00c      	b.n	801086c <compress_kitiku+0x29c>
			}else{
				kitiku = 0;
 8010852:	4b03      	ldr	r3, [pc, #12]	; (8010860 <compress_kitiku+0x290>)
 8010854:	2200      	movs	r2, #0
 8010856:	701a      	strb	r2, [r3, #0]
				break;
 8010858:	e06d      	b.n	8010936 <compress_kitiku+0x366>
 801085a:	bf00      	nop
 801085c:	2000082c 	.word	0x2000082c
 8010860:	20000829 	.word	0x20000829
 8010864:	20000d30 	.word	0x20000d30
 8010868:	20000807 	.word	0x20000807
			}
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 801086c:	8aba      	ldrh	r2, [r7, #20]
 801086e:	8afb      	ldrh	r3, [r7, #22]
 8010870:	429a      	cmp	r2, r3
 8010872:	d213      	bcs.n	801089c <compress_kitiku+0x2cc>
 8010874:	8aba      	ldrh	r2, [r7, #20]
 8010876:	8a3b      	ldrh	r3, [r7, #16]
 8010878:	429a      	cmp	r2, r3
 801087a:	d80f      	bhi.n	801089c <compress_kitiku+0x2cc>
 801087c:	8aba      	ldrh	r2, [r7, #20]
 801087e:	8a7b      	ldrh	r3, [r7, #18]
 8010880:	429a      	cmp	r2, r3
 8010882:	d80b      	bhi.n	801089c <compress_kitiku+0x2cc>
		// 右旋回
			if(look_r){
 8010884:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010888:	2b00      	cmp	r3, #0
 801088a:	d003      	beq.n	8010894 <compress_kitiku+0x2c4>
				kitiku = 0;
 801088c:	4b40      	ldr	r3, [pc, #256]	; (8010990 <compress_kitiku+0x3c0>)
 801088e:	2200      	movs	r2, #0
 8010890:	701a      	strb	r2, [r3, #0]
				break;
 8010892:	e050      	b.n	8010936 <compress_kitiku+0x366>
			}else{
				kitiku = 0;
 8010894:	4b3e      	ldr	r3, [pc, #248]	; (8010990 <compress_kitiku+0x3c0>)
 8010896:	2200      	movs	r2, #0
 8010898:	701a      	strb	r2, [r3, #0]
				break;
 801089a:	e04c      	b.n	8010936 <compress_kitiku+0x366>
			}
			direction_now++;
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 801089c:	8a3a      	ldrh	r2, [r7, #16]
 801089e:	8afb      	ldrh	r3, [r7, #22]
 80108a0:	429a      	cmp	r2, r3
 80108a2:	d213      	bcs.n	80108cc <compress_kitiku+0x2fc>
 80108a4:	8a3a      	ldrh	r2, [r7, #16]
 80108a6:	8abb      	ldrh	r3, [r7, #20]
 80108a8:	429a      	cmp	r2, r3
 80108aa:	d20f      	bcs.n	80108cc <compress_kitiku+0x2fc>
 80108ac:	8a3a      	ldrh	r2, [r7, #16]
 80108ae:	8a7b      	ldrh	r3, [r7, #18]
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d80b      	bhi.n	80108cc <compress_kitiku+0x2fc>
		// 左旋回
			if(look_l){
 80108b4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d003      	beq.n	80108c4 <compress_kitiku+0x2f4>
				kitiku = 0;
 80108bc:	4b34      	ldr	r3, [pc, #208]	; (8010990 <compress_kitiku+0x3c0>)
 80108be:	2200      	movs	r2, #0
 80108c0:	701a      	strb	r2, [r3, #0]
				break;
 80108c2:	e038      	b.n	8010936 <compress_kitiku+0x366>
			}else{
				kitiku = 0;
 80108c4:	4b32      	ldr	r3, [pc, #200]	; (8010990 <compress_kitiku+0x3c0>)
 80108c6:	2200      	movs	r2, #0
 80108c8:	701a      	strb	r2, [r3, #0]
				break;
 80108ca:	e034      	b.n	8010936 <compress_kitiku+0x366>
			}
			direction_now--;
		}
		if(back_count < front_count && back_count < right_count
 80108cc:	8a7a      	ldrh	r2, [r7, #18]
 80108ce:	8afb      	ldrh	r3, [r7, #22]
 80108d0:	429a      	cmp	r2, r3
 80108d2:	d20b      	bcs.n	80108ec <compress_kitiku+0x31c>
 80108d4:	8a7a      	ldrh	r2, [r7, #18]
 80108d6:	8abb      	ldrh	r3, [r7, #20]
 80108d8:	429a      	cmp	r2, r3
 80108da:	d207      	bcs.n	80108ec <compress_kitiku+0x31c>
								&& back_count < left_count){
 80108dc:	8a7a      	ldrh	r2, [r7, #18]
 80108de:	8a3b      	ldrh	r3, [r7, #16]
 80108e0:	429a      	cmp	r2, r3
 80108e2:	d203      	bcs.n	80108ec <compress_kitiku+0x31c>
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
			kitiku = 0;
 80108e4:	4b2a      	ldr	r3, [pc, #168]	; (8010990 <compress_kitiku+0x3c0>)
 80108e6:	2200      	movs	r2, #0
 80108e8:	701a      	strb	r2, [r3, #0]
			break;
 80108ea:	e024      	b.n	8010936 <compress_kitiku+0x366>
			direction_now+=2;
		}


		if (direction_now == 5) {
 80108ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108ee:	2b05      	cmp	r3, #5
 80108f0:	d101      	bne.n	80108f6 <compress_kitiku+0x326>
			direction_now = 1;
 80108f2:	2301      	movs	r3, #1
 80108f4:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == 6) {
 80108f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108f8:	2b06      	cmp	r3, #6
 80108fa:	d101      	bne.n	8010900 <compress_kitiku+0x330>
			direction_now = 2;
 80108fc:	2302      	movs	r3, #2
 80108fe:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == 0) {
 8010900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010902:	2b00      	cmp	r3, #0
 8010904:	d101      	bne.n	801090a <compress_kitiku+0x33a>
			direction_now = 4;
 8010906:	2304      	movs	r3, #4
 8010908:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == -1) {
 801090a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801090c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010910:	d101      	bne.n	8010916 <compress_kitiku+0x346>
			direction_now = 3;
 8010912:	2303      	movs	r3, #3
 8010914:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (kitiku == 0) {
 8010916:	4b1e      	ldr	r3, [pc, #120]	; (8010990 <compress_kitiku+0x3c0>)
 8010918:	781b      	ldrb	r3, [r3, #0]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d00a      	beq.n	8010934 <compress_kitiku+0x364>
		update_coordinate(&x_now,&y_now,direction_now);
 801091e:	e66c      	b.n	80105fa <compress_kitiku+0x2a>
			break;
 8010920:	bf00      	nop
 8010922:	e008      	b.n	8010936 <compress_kitiku+0x366>
		if (direction_now==1 && y_now>=14) {break;}
 8010924:	bf00      	nop
 8010926:	e006      	b.n	8010936 <compress_kitiku+0x366>
		if (direction_now==2 && x_now>=14) {break;}
 8010928:	bf00      	nop
 801092a:	e004      	b.n	8010936 <compress_kitiku+0x366>
		if (direction_now==3 && y_now<=1) {break;}
 801092c:	bf00      	nop
 801092e:	e002      	b.n	8010936 <compress_kitiku+0x366>
		if (direction_now==4 && x_now<=1) {break;}
 8010930:	bf00      	nop
 8010932:	e000      	b.n	8010936 <compress_kitiku+0x366>

			break;
 8010934:	bf00      	nop
		}

	}

	int direction2=direction_now+2;
 8010936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010938:	3302      	adds	r3, #2
 801093a:	643b      	str	r3, [r7, #64]	; 0x40
	if (direction2 == 5) {
 801093c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801093e:	2b05      	cmp	r3, #5
 8010940:	d101      	bne.n	8010946 <compress_kitiku+0x376>
				direction2 = 1;
 8010942:	2301      	movs	r3, #1
 8010944:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == 6) {
 8010946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010948:	2b06      	cmp	r3, #6
 801094a:	d101      	bne.n	8010950 <compress_kitiku+0x380>
				direction2 = 2;
 801094c:	2302      	movs	r3, #2
 801094e:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == 0) {
 8010950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010952:	2b00      	cmp	r3, #0
 8010954:	d101      	bne.n	801095a <compress_kitiku+0x38a>
				direction2 = 4;
 8010956:	2304      	movs	r3, #4
 8010958:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == -1) {
 801095a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801095c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010960:	d101      	bne.n	8010966 <compress_kitiku+0x396>
				direction2 = 3;
 8010962:	2303      	movs	r3, #3
 8010964:	643b      	str	r3, [r7, #64]	; 0x40
			}

	update_coordinate(&x_now,&y_now,direction2);
 8010966:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801096a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801096e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010970:	4618      	mov	r0, r3
 8010972:	f7fd facb 	bl	800df0c <update_coordinate>

	*x=x_now;
 8010976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	601a      	str	r2, [r3, #0]
	*y=y_now;
 801097c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801097e:	68bb      	ldr	r3, [r7, #8]
 8010980:	601a      	str	r2, [r3, #0]
	*direction=direction_now;
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010986:	601a      	str	r2, [r3, #0]

}
 8010988:	bf00      	nop
 801098a:	3754      	adds	r7, #84	; 0x54
 801098c:	46bd      	mov	sp, r7
 801098e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010990:	20000829 	.word	0x20000829

08010994 <update_wall>:

}



void update_wall(int x,int y,int direction,_Bool front_wall,_Bool right_wall,_Bool left_wall){
 8010994:	b480      	push	{r7}
 8010996:	b085      	sub	sp, #20
 8010998:	af00      	add	r7, sp, #0
 801099a:	60f8      	str	r0, [r7, #12]
 801099c:	60b9      	str	r1, [r7, #8]
 801099e:	607a      	str	r2, [r7, #4]
 80109a0:	70fb      	strb	r3, [r7, #3]
// x:x座標, y:y座標, direction:向き(北1東2南3西4),
//front_wall:前壁の有無(Ture=1 false=0), right_wall:右壁の有無(Ture=1 false=0), left_wall:左壁の有無(Ture=1 false=0)

	switch (direction) {
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	3b01      	subs	r3, #1
 80109a6:	2b03      	cmp	r3, #3
 80109a8:	f200 8272 	bhi.w	8010e90 <update_wall+0x4fc>
 80109ac:	a201      	add	r2, pc, #4	; (adr r2, 80109b4 <update_wall+0x20>)
 80109ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109b2:	bf00      	nop
 80109b4:	080109c5 	.word	0x080109c5
 80109b8:	08010aeb 	.word	0x08010aeb
 80109bc:	08010c21 	.word	0x08010c21
 80109c0:	08010d4f 	.word	0x08010d4f
	case 1:
		if (y <= 14) {
 80109c4:	68bb      	ldr	r3, [r7, #8]
 80109c6:	2b0e      	cmp	r3, #14
 80109c8:	dc2e      	bgt.n	8010a28 <update_wall+0x94>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 80109ca:	4a94      	ldr	r2, [pc, #592]	; (8010c1c <update_wall+0x288>)
 80109cc:	68bb      	ldr	r3, [r7, #8]
 80109ce:	332c      	adds	r3, #44	; 0x2c
 80109d0:	005b      	lsls	r3, r3, #1
 80109d2:	4413      	add	r3, r2
 80109d4:	885b      	ldrh	r3, [r3, #2]
 80109d6:	b21a      	sxth	r2, r3
 80109d8:	2101      	movs	r1, #1
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	fa01 f303 	lsl.w	r3, r1, r3
 80109e0:	b21b      	sxth	r3, r3
 80109e2:	4313      	orrs	r3, r2
 80109e4:	b21b      	sxth	r3, r3
 80109e6:	b299      	uxth	r1, r3
 80109e8:	4a8c      	ldr	r2, [pc, #560]	; (8010c1c <update_wall+0x288>)
 80109ea:	68bb      	ldr	r3, [r7, #8]
 80109ec:	332c      	adds	r3, #44	; 0x2c
 80109ee:	005b      	lsls	r3, r3, #1
 80109f0:	4413      	add	r3, r2
 80109f2:	460a      	mov	r2, r1
 80109f4:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y] = wall.column[y] | (1 << x);}
 80109f6:	78fb      	ldrb	r3, [r7, #3]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d015      	beq.n	8010a28 <update_wall+0x94>
 80109fc:	4a87      	ldr	r2, [pc, #540]	; (8010c1c <update_wall+0x288>)
 80109fe:	68bb      	ldr	r3, [r7, #8]
 8010a00:	330c      	adds	r3, #12
 8010a02:	005b      	lsls	r3, r3, #1
 8010a04:	4413      	add	r3, r2
 8010a06:	88db      	ldrh	r3, [r3, #6]
 8010a08:	b21a      	sxth	r2, r3
 8010a0a:	2101      	movs	r1, #1
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8010a12:	b21b      	sxth	r3, r3
 8010a14:	4313      	orrs	r3, r2
 8010a16:	b21b      	sxth	r3, r3
 8010a18:	b299      	uxth	r1, r3
 8010a1a:	4a80      	ldr	r2, [pc, #512]	; (8010c1c <update_wall+0x288>)
 8010a1c:	68bb      	ldr	r3, [r7, #8]
 8010a1e:	330c      	adds	r3, #12
 8010a20:	005b      	lsls	r3, r3, #1
 8010a22:	4413      	add	r3, r2
 8010a24:	460a      	mov	r2, r1
 8010a26:	80da      	strh	r2, [r3, #6]
		}

		if (x >= 1) {
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	dd2d      	ble.n	8010a8a <update_wall+0xf6>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	3b01      	subs	r3, #1
 8010a32:	4a7a      	ldr	r2, [pc, #488]	; (8010c1c <update_wall+0x288>)
 8010a34:	331c      	adds	r3, #28
 8010a36:	005b      	lsls	r3, r3, #1
 8010a38:	4413      	add	r3, r2
 8010a3a:	889b      	ldrh	r3, [r3, #4]
 8010a3c:	b21a      	sxth	r2, r3
 8010a3e:	2101      	movs	r1, #1
 8010a40:	68bb      	ldr	r3, [r7, #8]
 8010a42:	fa01 f303 	lsl.w	r3, r1, r3
 8010a46:	b21b      	sxth	r3, r3
 8010a48:	4313      	orrs	r3, r2
 8010a4a:	b21a      	sxth	r2, r3
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	3b01      	subs	r3, #1
 8010a50:	b291      	uxth	r1, r2
 8010a52:	4a72      	ldr	r2, [pc, #456]	; (8010c1c <update_wall+0x288>)
 8010a54:	331c      	adds	r3, #28
 8010a56:	005b      	lsls	r3, r3, #1
 8010a58:	4413      	add	r3, r2
 8010a5a:	460a      	mov	r2, r1
 8010a5c:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010a5e:	7f3b      	ldrb	r3, [r7, #28]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d012      	beq.n	8010a8a <update_wall+0xf6>
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	3b01      	subs	r3, #1
 8010a68:	4a6c      	ldr	r2, [pc, #432]	; (8010c1c <update_wall+0x288>)
 8010a6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a6e:	b21a      	sxth	r2, r3
 8010a70:	2101      	movs	r1, #1
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	fa01 f303 	lsl.w	r3, r1, r3
 8010a78:	b21b      	sxth	r3, r3
 8010a7a:	4313      	orrs	r3, r2
 8010a7c:	b21a      	sxth	r2, r3
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	3b01      	subs	r3, #1
 8010a82:	b291      	uxth	r1, r2
 8010a84:	4a65      	ldr	r2, [pc, #404]	; (8010c1c <update_wall+0x288>)
 8010a86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x <= 14) {
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	2b0e      	cmp	r3, #14
 8010a8e:	f300 81f8 	bgt.w	8010e82 <update_wall+0x4ee>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8010a92:	4a62      	ldr	r2, [pc, #392]	; (8010c1c <update_wall+0x288>)
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	331c      	adds	r3, #28
 8010a98:	005b      	lsls	r3, r3, #1
 8010a9a:	4413      	add	r3, r2
 8010a9c:	889b      	ldrh	r3, [r3, #4]
 8010a9e:	b21a      	sxth	r2, r3
 8010aa0:	2101      	movs	r1, #1
 8010aa2:	68bb      	ldr	r3, [r7, #8]
 8010aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8010aa8:	b21b      	sxth	r3, r3
 8010aaa:	4313      	orrs	r3, r2
 8010aac:	b21b      	sxth	r3, r3
 8010aae:	b299      	uxth	r1, r3
 8010ab0:	4a5a      	ldr	r2, [pc, #360]	; (8010c1c <update_wall+0x288>)
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	331c      	adds	r3, #28
 8010ab6:	005b      	lsls	r3, r3, #1
 8010ab8:	4413      	add	r3, r2
 8010aba:	460a      	mov	r2, r1
 8010abc:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010abe:	7e3b      	ldrb	r3, [r7, #24]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	f000 81de 	beq.w	8010e82 <update_wall+0x4ee>
 8010ac6:	4a55      	ldr	r2, [pc, #340]	; (8010c1c <update_wall+0x288>)
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ace:	b21a      	sxth	r2, r3
 8010ad0:	2101      	movs	r1, #1
 8010ad2:	68bb      	ldr	r3, [r7, #8]
 8010ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8010ad8:	b21b      	sxth	r3, r3
 8010ada:	4313      	orrs	r3, r2
 8010adc:	b21b      	sxth	r3, r3
 8010ade:	b299      	uxth	r1, r3
 8010ae0:	4a4e      	ldr	r2, [pc, #312]	; (8010c1c <update_wall+0x288>)
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 8010ae8:	e1cb      	b.n	8010e82 <update_wall+0x4ee>
	case 2:
		if (x <= 14) {
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	2b0e      	cmp	r3, #14
 8010aee:	dc29      	bgt.n	8010b44 <update_wall+0x1b0>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8010af0:	4a4a      	ldr	r2, [pc, #296]	; (8010c1c <update_wall+0x288>)
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	331c      	adds	r3, #28
 8010af6:	005b      	lsls	r3, r3, #1
 8010af8:	4413      	add	r3, r2
 8010afa:	889b      	ldrh	r3, [r3, #4]
 8010afc:	b21a      	sxth	r2, r3
 8010afe:	2101      	movs	r1, #1
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	fa01 f303 	lsl.w	r3, r1, r3
 8010b06:	b21b      	sxth	r3, r3
 8010b08:	4313      	orrs	r3, r2
 8010b0a:	b21b      	sxth	r3, r3
 8010b0c:	b299      	uxth	r1, r3
 8010b0e:	4a43      	ldr	r2, [pc, #268]	; (8010c1c <update_wall+0x288>)
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	331c      	adds	r3, #28
 8010b14:	005b      	lsls	r3, r3, #1
 8010b16:	4413      	add	r3, r2
 8010b18:	460a      	mov	r2, r1
 8010b1a:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010b1c:	78fb      	ldrb	r3, [r7, #3]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d010      	beq.n	8010b44 <update_wall+0x1b0>
 8010b22:	4a3e      	ldr	r2, [pc, #248]	; (8010c1c <update_wall+0x288>)
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b2a:	b21a      	sxth	r2, r3
 8010b2c:	2101      	movs	r1, #1
 8010b2e:	68bb      	ldr	r3, [r7, #8]
 8010b30:	fa01 f303 	lsl.w	r3, r1, r3
 8010b34:	b21b      	sxth	r3, r3
 8010b36:	4313      	orrs	r3, r2
 8010b38:	b21b      	sxth	r3, r3
 8010b3a:	b299      	uxth	r1, r3
 8010b3c:	4a37      	ldr	r2, [pc, #220]	; (8010c1c <update_wall+0x288>)
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y <= 14) {
 8010b44:	68bb      	ldr	r3, [r7, #8]
 8010b46:	2b0e      	cmp	r3, #14
 8010b48:	dc2e      	bgt.n	8010ba8 <update_wall+0x214>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8010b4a:	4a34      	ldr	r2, [pc, #208]	; (8010c1c <update_wall+0x288>)
 8010b4c:	68bb      	ldr	r3, [r7, #8]
 8010b4e:	332c      	adds	r3, #44	; 0x2c
 8010b50:	005b      	lsls	r3, r3, #1
 8010b52:	4413      	add	r3, r2
 8010b54:	885b      	ldrh	r3, [r3, #2]
 8010b56:	b21a      	sxth	r2, r3
 8010b58:	2101      	movs	r1, #1
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8010b60:	b21b      	sxth	r3, r3
 8010b62:	4313      	orrs	r3, r2
 8010b64:	b21b      	sxth	r3, r3
 8010b66:	b299      	uxth	r1, r3
 8010b68:	4a2c      	ldr	r2, [pc, #176]	; (8010c1c <update_wall+0x288>)
 8010b6a:	68bb      	ldr	r3, [r7, #8]
 8010b6c:	332c      	adds	r3, #44	; 0x2c
 8010b6e:	005b      	lsls	r3, r3, #1
 8010b70:	4413      	add	r3, r2
 8010b72:	460a      	mov	r2, r1
 8010b74:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y] = wall.column[y] | (1 << x);}
 8010b76:	7f3b      	ldrb	r3, [r7, #28]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d015      	beq.n	8010ba8 <update_wall+0x214>
 8010b7c:	4a27      	ldr	r2, [pc, #156]	; (8010c1c <update_wall+0x288>)
 8010b7e:	68bb      	ldr	r3, [r7, #8]
 8010b80:	330c      	adds	r3, #12
 8010b82:	005b      	lsls	r3, r3, #1
 8010b84:	4413      	add	r3, r2
 8010b86:	88db      	ldrh	r3, [r3, #6]
 8010b88:	b21a      	sxth	r2, r3
 8010b8a:	2101      	movs	r1, #1
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8010b92:	b21b      	sxth	r3, r3
 8010b94:	4313      	orrs	r3, r2
 8010b96:	b21b      	sxth	r3, r3
 8010b98:	b299      	uxth	r1, r3
 8010b9a:	4a20      	ldr	r2, [pc, #128]	; (8010c1c <update_wall+0x288>)
 8010b9c:	68bb      	ldr	r3, [r7, #8]
 8010b9e:	330c      	adds	r3, #12
 8010ba0:	005b      	lsls	r3, r3, #1
 8010ba2:	4413      	add	r3, r2
 8010ba4:	460a      	mov	r2, r1
 8010ba6:	80da      	strh	r2, [r3, #6]
		}

		if (y >= 1) {
 8010ba8:	68bb      	ldr	r3, [r7, #8]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	f340 816b 	ble.w	8010e86 <update_wall+0x4f2>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010bb0:	68bb      	ldr	r3, [r7, #8]
 8010bb2:	3b01      	subs	r3, #1
 8010bb4:	4a19      	ldr	r2, [pc, #100]	; (8010c1c <update_wall+0x288>)
 8010bb6:	332c      	adds	r3, #44	; 0x2c
 8010bb8:	005b      	lsls	r3, r3, #1
 8010bba:	4413      	add	r3, r2
 8010bbc:	885b      	ldrh	r3, [r3, #2]
 8010bbe:	b21a      	sxth	r2, r3
 8010bc0:	2101      	movs	r1, #1
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8010bc8:	b21b      	sxth	r3, r3
 8010bca:	4313      	orrs	r3, r2
 8010bcc:	b21a      	sxth	r2, r3
 8010bce:	68bb      	ldr	r3, [r7, #8]
 8010bd0:	3b01      	subs	r3, #1
 8010bd2:	b291      	uxth	r1, r2
 8010bd4:	4a11      	ldr	r2, [pc, #68]	; (8010c1c <update_wall+0x288>)
 8010bd6:	332c      	adds	r3, #44	; 0x2c
 8010bd8:	005b      	lsls	r3, r3, #1
 8010bda:	4413      	add	r3, r2
 8010bdc:	460a      	mov	r2, r1
 8010bde:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010be0:	7e3b      	ldrb	r3, [r7, #24]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	f000 814f 	beq.w	8010e86 <update_wall+0x4f2>
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	3b01      	subs	r3, #1
 8010bec:	4a0b      	ldr	r2, [pc, #44]	; (8010c1c <update_wall+0x288>)
 8010bee:	330c      	adds	r3, #12
 8010bf0:	005b      	lsls	r3, r3, #1
 8010bf2:	4413      	add	r3, r2
 8010bf4:	88db      	ldrh	r3, [r3, #6]
 8010bf6:	b21a      	sxth	r2, r3
 8010bf8:	2101      	movs	r1, #1
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8010c00:	b21b      	sxth	r3, r3
 8010c02:	4313      	orrs	r3, r2
 8010c04:	b21a      	sxth	r2, r3
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	3b01      	subs	r3, #1
 8010c0a:	b291      	uxth	r1, r2
 8010c0c:	4a03      	ldr	r2, [pc, #12]	; (8010c1c <update_wall+0x288>)
 8010c0e:	330c      	adds	r3, #12
 8010c10:	005b      	lsls	r3, r3, #1
 8010c12:	4413      	add	r3, r2
 8010c14:	460a      	mov	r2, r1
 8010c16:	80da      	strh	r2, [r3, #6]
		}

		break;
 8010c18:	e135      	b.n	8010e86 <update_wall+0x4f2>
 8010c1a:	bf00      	nop
 8010c1c:	20000c3c 	.word	0x20000c3c
	case 3:
		if (y >= 1) {
 8010c20:	68bb      	ldr	r3, [r7, #8]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	dd32      	ble.n	8010c8c <update_wall+0x2f8>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010c26:	68bb      	ldr	r3, [r7, #8]
 8010c28:	3b01      	subs	r3, #1
 8010c2a:	4a9c      	ldr	r2, [pc, #624]	; (8010e9c <update_wall+0x508>)
 8010c2c:	332c      	adds	r3, #44	; 0x2c
 8010c2e:	005b      	lsls	r3, r3, #1
 8010c30:	4413      	add	r3, r2
 8010c32:	885b      	ldrh	r3, [r3, #2]
 8010c34:	b21a      	sxth	r2, r3
 8010c36:	2101      	movs	r1, #1
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8010c3e:	b21b      	sxth	r3, r3
 8010c40:	4313      	orrs	r3, r2
 8010c42:	b21a      	sxth	r2, r3
 8010c44:	68bb      	ldr	r3, [r7, #8]
 8010c46:	3b01      	subs	r3, #1
 8010c48:	b291      	uxth	r1, r2
 8010c4a:	4a94      	ldr	r2, [pc, #592]	; (8010e9c <update_wall+0x508>)
 8010c4c:	332c      	adds	r3, #44	; 0x2c
 8010c4e:	005b      	lsls	r3, r3, #1
 8010c50:	4413      	add	r3, r2
 8010c52:	460a      	mov	r2, r1
 8010c54:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010c56:	78fb      	ldrb	r3, [r7, #3]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d017      	beq.n	8010c8c <update_wall+0x2f8>
 8010c5c:	68bb      	ldr	r3, [r7, #8]
 8010c5e:	3b01      	subs	r3, #1
 8010c60:	4a8e      	ldr	r2, [pc, #568]	; (8010e9c <update_wall+0x508>)
 8010c62:	330c      	adds	r3, #12
 8010c64:	005b      	lsls	r3, r3, #1
 8010c66:	4413      	add	r3, r2
 8010c68:	88db      	ldrh	r3, [r3, #6]
 8010c6a:	b21a      	sxth	r2, r3
 8010c6c:	2101      	movs	r1, #1
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	fa01 f303 	lsl.w	r3, r1, r3
 8010c74:	b21b      	sxth	r3, r3
 8010c76:	4313      	orrs	r3, r2
 8010c78:	b21a      	sxth	r2, r3
 8010c7a:	68bb      	ldr	r3, [r7, #8]
 8010c7c:	3b01      	subs	r3, #1
 8010c7e:	b291      	uxth	r1, r2
 8010c80:	4a86      	ldr	r2, [pc, #536]	; (8010e9c <update_wall+0x508>)
 8010c82:	330c      	adds	r3, #12
 8010c84:	005b      	lsls	r3, r3, #1
 8010c86:	4413      	add	r3, r2
 8010c88:	460a      	mov	r2, r1
 8010c8a:	80da      	strh	r2, [r3, #6]
		}

		if (x <= 14) {
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	2b0e      	cmp	r3, #14
 8010c90:	dc29      	bgt.n	8010ce6 <update_wall+0x352>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8010c92:	4a82      	ldr	r2, [pc, #520]	; (8010e9c <update_wall+0x508>)
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	331c      	adds	r3, #28
 8010c98:	005b      	lsls	r3, r3, #1
 8010c9a:	4413      	add	r3, r2
 8010c9c:	889b      	ldrh	r3, [r3, #4]
 8010c9e:	b21a      	sxth	r2, r3
 8010ca0:	2101      	movs	r1, #1
 8010ca2:	68bb      	ldr	r3, [r7, #8]
 8010ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8010ca8:	b21b      	sxth	r3, r3
 8010caa:	4313      	orrs	r3, r2
 8010cac:	b21b      	sxth	r3, r3
 8010cae:	b299      	uxth	r1, r3
 8010cb0:	4a7a      	ldr	r2, [pc, #488]	; (8010e9c <update_wall+0x508>)
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	331c      	adds	r3, #28
 8010cb6:	005b      	lsls	r3, r3, #1
 8010cb8:	4413      	add	r3, r2
 8010cba:	460a      	mov	r2, r1
 8010cbc:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010cbe:	7f3b      	ldrb	r3, [r7, #28]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d010      	beq.n	8010ce6 <update_wall+0x352>
 8010cc4:	4a75      	ldr	r2, [pc, #468]	; (8010e9c <update_wall+0x508>)
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ccc:	b21a      	sxth	r2, r3
 8010cce:	2101      	movs	r1, #1
 8010cd0:	68bb      	ldr	r3, [r7, #8]
 8010cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8010cd6:	b21b      	sxth	r3, r3
 8010cd8:	4313      	orrs	r3, r2
 8010cda:	b21b      	sxth	r3, r3
 8010cdc:	b299      	uxth	r1, r3
 8010cde:	4a6f      	ldr	r2, [pc, #444]	; (8010e9c <update_wall+0x508>)
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x >= 1) {
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	f340 80ce 	ble.w	8010e8a <update_wall+0x4f6>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	3b01      	subs	r3, #1
 8010cf2:	4a6a      	ldr	r2, [pc, #424]	; (8010e9c <update_wall+0x508>)
 8010cf4:	331c      	adds	r3, #28
 8010cf6:	005b      	lsls	r3, r3, #1
 8010cf8:	4413      	add	r3, r2
 8010cfa:	889b      	ldrh	r3, [r3, #4]
 8010cfc:	b21a      	sxth	r2, r3
 8010cfe:	2101      	movs	r1, #1
 8010d00:	68bb      	ldr	r3, [r7, #8]
 8010d02:	fa01 f303 	lsl.w	r3, r1, r3
 8010d06:	b21b      	sxth	r3, r3
 8010d08:	4313      	orrs	r3, r2
 8010d0a:	b21a      	sxth	r2, r3
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	3b01      	subs	r3, #1
 8010d10:	b291      	uxth	r1, r2
 8010d12:	4a62      	ldr	r2, [pc, #392]	; (8010e9c <update_wall+0x508>)
 8010d14:	331c      	adds	r3, #28
 8010d16:	005b      	lsls	r3, r3, #1
 8010d18:	4413      	add	r3, r2
 8010d1a:	460a      	mov	r2, r1
 8010d1c:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010d1e:	7e3b      	ldrb	r3, [r7, #24]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	f000 80b2 	beq.w	8010e8a <update_wall+0x4f6>
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	3b01      	subs	r3, #1
 8010d2a:	4a5c      	ldr	r2, [pc, #368]	; (8010e9c <update_wall+0x508>)
 8010d2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d30:	b21a      	sxth	r2, r3
 8010d32:	2101      	movs	r1, #1
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	fa01 f303 	lsl.w	r3, r1, r3
 8010d3a:	b21b      	sxth	r3, r3
 8010d3c:	4313      	orrs	r3, r2
 8010d3e:	b21a      	sxth	r2, r3
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	3b01      	subs	r3, #1
 8010d44:	b291      	uxth	r1, r2
 8010d46:	4a55      	ldr	r2, [pc, #340]	; (8010e9c <update_wall+0x508>)
 8010d48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 8010d4c:	e09d      	b.n	8010e8a <update_wall+0x4f6>
	case 4:
		if (x >= 1) {
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	dd2d      	ble.n	8010db0 <update_wall+0x41c>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	3b01      	subs	r3, #1
 8010d58:	4a50      	ldr	r2, [pc, #320]	; (8010e9c <update_wall+0x508>)
 8010d5a:	331c      	adds	r3, #28
 8010d5c:	005b      	lsls	r3, r3, #1
 8010d5e:	4413      	add	r3, r2
 8010d60:	889b      	ldrh	r3, [r3, #4]
 8010d62:	b21a      	sxth	r2, r3
 8010d64:	2101      	movs	r1, #1
 8010d66:	68bb      	ldr	r3, [r7, #8]
 8010d68:	fa01 f303 	lsl.w	r3, r1, r3
 8010d6c:	b21b      	sxth	r3, r3
 8010d6e:	4313      	orrs	r3, r2
 8010d70:	b21a      	sxth	r2, r3
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	3b01      	subs	r3, #1
 8010d76:	b291      	uxth	r1, r2
 8010d78:	4a48      	ldr	r2, [pc, #288]	; (8010e9c <update_wall+0x508>)
 8010d7a:	331c      	adds	r3, #28
 8010d7c:	005b      	lsls	r3, r3, #1
 8010d7e:	4413      	add	r3, r2
 8010d80:	460a      	mov	r2, r1
 8010d82:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010d84:	78fb      	ldrb	r3, [r7, #3]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d012      	beq.n	8010db0 <update_wall+0x41c>
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	3b01      	subs	r3, #1
 8010d8e:	4a43      	ldr	r2, [pc, #268]	; (8010e9c <update_wall+0x508>)
 8010d90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d94:	b21a      	sxth	r2, r3
 8010d96:	2101      	movs	r1, #1
 8010d98:	68bb      	ldr	r3, [r7, #8]
 8010d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8010d9e:	b21b      	sxth	r3, r3
 8010da0:	4313      	orrs	r3, r2
 8010da2:	b21a      	sxth	r2, r3
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	3b01      	subs	r3, #1
 8010da8:	b291      	uxth	r1, r2
 8010daa:	4a3c      	ldr	r2, [pc, #240]	; (8010e9c <update_wall+0x508>)
 8010dac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y >= 1) {
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	dd32      	ble.n	8010e1c <update_wall+0x488>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	3b01      	subs	r3, #1
 8010dba:	4a38      	ldr	r2, [pc, #224]	; (8010e9c <update_wall+0x508>)
 8010dbc:	332c      	adds	r3, #44	; 0x2c
 8010dbe:	005b      	lsls	r3, r3, #1
 8010dc0:	4413      	add	r3, r2
 8010dc2:	885b      	ldrh	r3, [r3, #2]
 8010dc4:	b21a      	sxth	r2, r3
 8010dc6:	2101      	movs	r1, #1
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	fa01 f303 	lsl.w	r3, r1, r3
 8010dce:	b21b      	sxth	r3, r3
 8010dd0:	4313      	orrs	r3, r2
 8010dd2:	b21a      	sxth	r2, r3
 8010dd4:	68bb      	ldr	r3, [r7, #8]
 8010dd6:	3b01      	subs	r3, #1
 8010dd8:	b291      	uxth	r1, r2
 8010dda:	4a30      	ldr	r2, [pc, #192]	; (8010e9c <update_wall+0x508>)
 8010ddc:	332c      	adds	r3, #44	; 0x2c
 8010dde:	005b      	lsls	r3, r3, #1
 8010de0:	4413      	add	r3, r2
 8010de2:	460a      	mov	r2, r1
 8010de4:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010de6:	7f3b      	ldrb	r3, [r7, #28]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d017      	beq.n	8010e1c <update_wall+0x488>
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	3b01      	subs	r3, #1
 8010df0:	4a2a      	ldr	r2, [pc, #168]	; (8010e9c <update_wall+0x508>)
 8010df2:	330c      	adds	r3, #12
 8010df4:	005b      	lsls	r3, r3, #1
 8010df6:	4413      	add	r3, r2
 8010df8:	88db      	ldrh	r3, [r3, #6]
 8010dfa:	b21a      	sxth	r2, r3
 8010dfc:	2101      	movs	r1, #1
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	fa01 f303 	lsl.w	r3, r1, r3
 8010e04:	b21b      	sxth	r3, r3
 8010e06:	4313      	orrs	r3, r2
 8010e08:	b21a      	sxth	r2, r3
 8010e0a:	68bb      	ldr	r3, [r7, #8]
 8010e0c:	3b01      	subs	r3, #1
 8010e0e:	b291      	uxth	r1, r2
 8010e10:	4a22      	ldr	r2, [pc, #136]	; (8010e9c <update_wall+0x508>)
 8010e12:	330c      	adds	r3, #12
 8010e14:	005b      	lsls	r3, r3, #1
 8010e16:	4413      	add	r3, r2
 8010e18:	460a      	mov	r2, r1
 8010e1a:	80da      	strh	r2, [r3, #6]
		}

		if (y <= 14) {
 8010e1c:	68bb      	ldr	r3, [r7, #8]
 8010e1e:	2b0e      	cmp	r3, #14
 8010e20:	dc35      	bgt.n	8010e8e <update_wall+0x4fa>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8010e22:	4a1e      	ldr	r2, [pc, #120]	; (8010e9c <update_wall+0x508>)
 8010e24:	68bb      	ldr	r3, [r7, #8]
 8010e26:	332c      	adds	r3, #44	; 0x2c
 8010e28:	005b      	lsls	r3, r3, #1
 8010e2a:	4413      	add	r3, r2
 8010e2c:	885b      	ldrh	r3, [r3, #2]
 8010e2e:	b21a      	sxth	r2, r3
 8010e30:	2101      	movs	r1, #1
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	fa01 f303 	lsl.w	r3, r1, r3
 8010e38:	b21b      	sxth	r3, r3
 8010e3a:	4313      	orrs	r3, r2
 8010e3c:	b21b      	sxth	r3, r3
 8010e3e:	b299      	uxth	r1, r3
 8010e40:	4a16      	ldr	r2, [pc, #88]	; (8010e9c <update_wall+0x508>)
 8010e42:	68bb      	ldr	r3, [r7, #8]
 8010e44:	332c      	adds	r3, #44	; 0x2c
 8010e46:	005b      	lsls	r3, r3, #1
 8010e48:	4413      	add	r3, r2
 8010e4a:	460a      	mov	r2, r1
 8010e4c:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y] = wall.column[y] | (1 << x);}
 8010e4e:	7e3b      	ldrb	r3, [r7, #24]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d01c      	beq.n	8010e8e <update_wall+0x4fa>
 8010e54:	4a11      	ldr	r2, [pc, #68]	; (8010e9c <update_wall+0x508>)
 8010e56:	68bb      	ldr	r3, [r7, #8]
 8010e58:	330c      	adds	r3, #12
 8010e5a:	005b      	lsls	r3, r3, #1
 8010e5c:	4413      	add	r3, r2
 8010e5e:	88db      	ldrh	r3, [r3, #6]
 8010e60:	b21a      	sxth	r2, r3
 8010e62:	2101      	movs	r1, #1
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	fa01 f303 	lsl.w	r3, r1, r3
 8010e6a:	b21b      	sxth	r3, r3
 8010e6c:	4313      	orrs	r3, r2
 8010e6e:	b21b      	sxth	r3, r3
 8010e70:	b299      	uxth	r1, r3
 8010e72:	4a0a      	ldr	r2, [pc, #40]	; (8010e9c <update_wall+0x508>)
 8010e74:	68bb      	ldr	r3, [r7, #8]
 8010e76:	330c      	adds	r3, #12
 8010e78:	005b      	lsls	r3, r3, #1
 8010e7a:	4413      	add	r3, r2
 8010e7c:	460a      	mov	r2, r1
 8010e7e:	80da      	strh	r2, [r3, #6]
		}

		break;
 8010e80:	e005      	b.n	8010e8e <update_wall+0x4fa>
		break;
 8010e82:	bf00      	nop
 8010e84:	e004      	b.n	8010e90 <update_wall+0x4fc>
		break;
 8010e86:	bf00      	nop
 8010e88:	e002      	b.n	8010e90 <update_wall+0x4fc>
		break;
 8010e8a:	bf00      	nop
 8010e8c:	e000      	b.n	8010e90 <update_wall+0x4fc>
		break;
 8010e8e:	bf00      	nop

	}


}
 8010e90:	bf00      	nop
 8010e92:	3714      	adds	r7, #20
 8010e94:	46bd      	mov	sp, r7
 8010e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9a:	4770      	bx	lr
 8010e9c:	20000c3c 	.word	0x20000c3c

08010ea0 <get_wall>:



void get_wall(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 8010ea0:	b480      	push	{r7}
 8010ea2:	b085      	sub	sp, #20
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	60f8      	str	r0, [r7, #12]
 8010ea8:	60b9      	str	r1, [r7, #8]
 8010eaa:	607a      	str	r2, [r7, #4]
 8010eac:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 8010eae:	683b      	ldr	r3, [r7, #0]
 8010eb0:	2201      	movs	r2, #1
 8010eb2:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 8010eb4:	69bb      	ldr	r3, [r7, #24]
 8010eb6:	2201      	movs	r2, #1
 8010eb8:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 8010eba:	69fb      	ldr	r3, [r7, #28]
 8010ebc:	2201      	movs	r2, #1
 8010ebe:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	3b01      	subs	r3, #1
 8010ec4:	2b03      	cmp	r3, #3
 8010ec6:	f200 8156 	bhi.w	8011176 <get_wall+0x2d6>
 8010eca:	a201      	add	r2, pc, #4	; (adr r2, 8010ed0 <get_wall+0x30>)
 8010ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ed0:	08010ee1 	.word	0x08010ee1
 8010ed4:	08010f81 	.word	0x08010f81
 8010ed8:	08011025 	.word	0x08011025
 8010edc:	080110c5 	.word	0x080110c5
	case 1:
		if (y <= 14) {
 8010ee0:	68bb      	ldr	r3, [r7, #8]
 8010ee2:	2b0e      	cmp	r3, #14
 8010ee4:	dc17      	bgt.n	8010f16 <get_wall+0x76>
			*front_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8010ee6:	4aa7      	ldr	r2, [pc, #668]	; (8011184 <get_wall+0x2e4>)
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	330c      	adds	r3, #12
 8010eec:	005b      	lsls	r3, r3, #1
 8010eee:	4413      	add	r3, r2
 8010ef0:	88db      	ldrh	r3, [r3, #6]
 8010ef2:	4619      	mov	r1, r3
 8010ef4:	2201      	movs	r2, #1
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8010efc:	ea01 0203 	and.w	r2, r1, r3
 8010f00:	2101      	movs	r1, #1
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	fa01 f303 	lsl.w	r3, r1, r3
 8010f08:	429a      	cmp	r2, r3
 8010f0a:	bf0c      	ite	eq
 8010f0c:	2301      	moveq	r3, #1
 8010f0e:	2300      	movne	r3, #0
 8010f10:	b2da      	uxtb	r2, r3
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	dd16      	ble.n	8010f4a <get_wall+0xaa>
			*left_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	3b01      	subs	r3, #1
 8010f20:	4a98      	ldr	r2, [pc, #608]	; (8011184 <get_wall+0x2e4>)
 8010f22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f26:	4619      	mov	r1, r3
 8010f28:	2201      	movs	r2, #1
 8010f2a:	68bb      	ldr	r3, [r7, #8]
 8010f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8010f30:	ea01 0203 	and.w	r2, r1, r3
 8010f34:	2101      	movs	r1, #1
 8010f36:	68bb      	ldr	r3, [r7, #8]
 8010f38:	fa01 f303 	lsl.w	r3, r1, r3
 8010f3c:	429a      	cmp	r2, r3
 8010f3e:	bf0c      	ite	eq
 8010f40:	2301      	moveq	r3, #1
 8010f42:	2300      	movne	r3, #0
 8010f44:	b2da      	uxtb	r2, r3
 8010f46:	69fb      	ldr	r3, [r7, #28]
 8010f48:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	2b0e      	cmp	r3, #14
 8010f4e:	f300 810b 	bgt.w	8011168 <get_wall+0x2c8>
			*right_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8010f52:	4a8c      	ldr	r2, [pc, #560]	; (8011184 <get_wall+0x2e4>)
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f5a:	4619      	mov	r1, r3
 8010f5c:	2201      	movs	r2, #1
 8010f5e:	68bb      	ldr	r3, [r7, #8]
 8010f60:	fa02 f303 	lsl.w	r3, r2, r3
 8010f64:	ea01 0203 	and.w	r2, r1, r3
 8010f68:	2101      	movs	r1, #1
 8010f6a:	68bb      	ldr	r3, [r7, #8]
 8010f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8010f70:	429a      	cmp	r2, r3
 8010f72:	bf0c      	ite	eq
 8010f74:	2301      	moveq	r3, #1
 8010f76:	2300      	movne	r3, #0
 8010f78:	b2da      	uxtb	r2, r3
 8010f7a:	69bb      	ldr	r3, [r7, #24]
 8010f7c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010f7e:	e0f3      	b.n	8011168 <get_wall+0x2c8>
	case 2:
		if (x <= 14) {
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	2b0e      	cmp	r3, #14
 8010f84:	dc15      	bgt.n	8010fb2 <get_wall+0x112>
			*front_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8010f86:	4a7f      	ldr	r2, [pc, #508]	; (8011184 <get_wall+0x2e4>)
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f8e:	4619      	mov	r1, r3
 8010f90:	2201      	movs	r2, #1
 8010f92:	68bb      	ldr	r3, [r7, #8]
 8010f94:	fa02 f303 	lsl.w	r3, r2, r3
 8010f98:	ea01 0203 	and.w	r2, r1, r3
 8010f9c:	2101      	movs	r1, #1
 8010f9e:	68bb      	ldr	r3, [r7, #8]
 8010fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8010fa4:	429a      	cmp	r2, r3
 8010fa6:	bf0c      	ite	eq
 8010fa8:	2301      	moveq	r3, #1
 8010faa:	2300      	movne	r3, #0
 8010fac:	b2da      	uxtb	r2, r3
 8010fae:	683b      	ldr	r3, [r7, #0]
 8010fb0:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8010fb2:	68bb      	ldr	r3, [r7, #8]
 8010fb4:	2b0e      	cmp	r3, #14
 8010fb6:	dc17      	bgt.n	8010fe8 <get_wall+0x148>
			*left_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8010fb8:	4a72      	ldr	r2, [pc, #456]	; (8011184 <get_wall+0x2e4>)
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	330c      	adds	r3, #12
 8010fbe:	005b      	lsls	r3, r3, #1
 8010fc0:	4413      	add	r3, r2
 8010fc2:	88db      	ldrh	r3, [r3, #6]
 8010fc4:	4619      	mov	r1, r3
 8010fc6:	2201      	movs	r2, #1
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	fa02 f303 	lsl.w	r3, r2, r3
 8010fce:	ea01 0203 	and.w	r2, r1, r3
 8010fd2:	2101      	movs	r1, #1
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8010fda:	429a      	cmp	r2, r3
 8010fdc:	bf0c      	ite	eq
 8010fde:	2301      	moveq	r3, #1
 8010fe0:	2300      	movne	r3, #0
 8010fe2:	b2da      	uxtb	r2, r3
 8010fe4:	69fb      	ldr	r3, [r7, #28]
 8010fe6:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8010fe8:	68bb      	ldr	r3, [r7, #8]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	f340 80be 	ble.w	801116c <get_wall+0x2cc>
			*right_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	3b01      	subs	r3, #1
 8010ff4:	4a63      	ldr	r2, [pc, #396]	; (8011184 <get_wall+0x2e4>)
 8010ff6:	330c      	adds	r3, #12
 8010ff8:	005b      	lsls	r3, r3, #1
 8010ffa:	4413      	add	r3, r2
 8010ffc:	88db      	ldrh	r3, [r3, #6]
 8010ffe:	4619      	mov	r1, r3
 8011000:	2201      	movs	r2, #1
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	fa02 f303 	lsl.w	r3, r2, r3
 8011008:	ea01 0203 	and.w	r2, r1, r3
 801100c:	2101      	movs	r1, #1
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	fa01 f303 	lsl.w	r3, r1, r3
 8011014:	429a      	cmp	r2, r3
 8011016:	bf0c      	ite	eq
 8011018:	2301      	moveq	r3, #1
 801101a:	2300      	movne	r3, #0
 801101c:	b2da      	uxtb	r2, r3
 801101e:	69bb      	ldr	r3, [r7, #24]
 8011020:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011022:	e0a3      	b.n	801116c <get_wall+0x2cc>
	case 3:
		if (y >= 1) {
 8011024:	68bb      	ldr	r3, [r7, #8]
 8011026:	2b00      	cmp	r3, #0
 8011028:	dd18      	ble.n	801105c <get_wall+0x1bc>
			*front_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	3b01      	subs	r3, #1
 801102e:	4a55      	ldr	r2, [pc, #340]	; (8011184 <get_wall+0x2e4>)
 8011030:	330c      	adds	r3, #12
 8011032:	005b      	lsls	r3, r3, #1
 8011034:	4413      	add	r3, r2
 8011036:	88db      	ldrh	r3, [r3, #6]
 8011038:	4619      	mov	r1, r3
 801103a:	2201      	movs	r2, #1
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	fa02 f303 	lsl.w	r3, r2, r3
 8011042:	ea01 0203 	and.w	r2, r1, r3
 8011046:	2101      	movs	r1, #1
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	fa01 f303 	lsl.w	r3, r1, r3
 801104e:	429a      	cmp	r2, r3
 8011050:	bf0c      	ite	eq
 8011052:	2301      	moveq	r3, #1
 8011054:	2300      	movne	r3, #0
 8011056:	b2da      	uxtb	r2, r3
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	2b0e      	cmp	r3, #14
 8011060:	dc15      	bgt.n	801108e <get_wall+0x1ee>
			*left_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8011062:	4a48      	ldr	r2, [pc, #288]	; (8011184 <get_wall+0x2e4>)
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801106a:	4619      	mov	r1, r3
 801106c:	2201      	movs	r2, #1
 801106e:	68bb      	ldr	r3, [r7, #8]
 8011070:	fa02 f303 	lsl.w	r3, r2, r3
 8011074:	ea01 0203 	and.w	r2, r1, r3
 8011078:	2101      	movs	r1, #1
 801107a:	68bb      	ldr	r3, [r7, #8]
 801107c:	fa01 f303 	lsl.w	r3, r1, r3
 8011080:	429a      	cmp	r2, r3
 8011082:	bf0c      	ite	eq
 8011084:	2301      	moveq	r3, #1
 8011086:	2300      	movne	r3, #0
 8011088:	b2da      	uxtb	r2, r3
 801108a:	69fb      	ldr	r3, [r7, #28]
 801108c:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	2b00      	cmp	r3, #0
 8011092:	dd6d      	ble.n	8011170 <get_wall+0x2d0>
			*right_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	3b01      	subs	r3, #1
 8011098:	4a3a      	ldr	r2, [pc, #232]	; (8011184 <get_wall+0x2e4>)
 801109a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801109e:	4619      	mov	r1, r3
 80110a0:	2201      	movs	r2, #1
 80110a2:	68bb      	ldr	r3, [r7, #8]
 80110a4:	fa02 f303 	lsl.w	r3, r2, r3
 80110a8:	ea01 0203 	and.w	r2, r1, r3
 80110ac:	2101      	movs	r1, #1
 80110ae:	68bb      	ldr	r3, [r7, #8]
 80110b0:	fa01 f303 	lsl.w	r3, r1, r3
 80110b4:	429a      	cmp	r2, r3
 80110b6:	bf0c      	ite	eq
 80110b8:	2301      	moveq	r3, #1
 80110ba:	2300      	movne	r3, #0
 80110bc:	b2da      	uxtb	r2, r3
 80110be:	69bb      	ldr	r3, [r7, #24]
 80110c0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80110c2:	e055      	b.n	8011170 <get_wall+0x2d0>
	case 4:
		if (x >= 1) {
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	dd16      	ble.n	80110f8 <get_wall+0x258>
			*front_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	3b01      	subs	r3, #1
 80110ce:	4a2d      	ldr	r2, [pc, #180]	; (8011184 <get_wall+0x2e4>)
 80110d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80110d4:	4619      	mov	r1, r3
 80110d6:	2201      	movs	r2, #1
 80110d8:	68bb      	ldr	r3, [r7, #8]
 80110da:	fa02 f303 	lsl.w	r3, r2, r3
 80110de:	ea01 0203 	and.w	r2, r1, r3
 80110e2:	2101      	movs	r1, #1
 80110e4:	68bb      	ldr	r3, [r7, #8]
 80110e6:	fa01 f303 	lsl.w	r3, r1, r3
 80110ea:	429a      	cmp	r2, r3
 80110ec:	bf0c      	ite	eq
 80110ee:	2301      	moveq	r3, #1
 80110f0:	2300      	movne	r3, #0
 80110f2:	b2da      	uxtb	r2, r3
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 80110f8:	68bb      	ldr	r3, [r7, #8]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	dd18      	ble.n	8011130 <get_wall+0x290>
			*left_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 80110fe:	68bb      	ldr	r3, [r7, #8]
 8011100:	3b01      	subs	r3, #1
 8011102:	4a20      	ldr	r2, [pc, #128]	; (8011184 <get_wall+0x2e4>)
 8011104:	330c      	adds	r3, #12
 8011106:	005b      	lsls	r3, r3, #1
 8011108:	4413      	add	r3, r2
 801110a:	88db      	ldrh	r3, [r3, #6]
 801110c:	4619      	mov	r1, r3
 801110e:	2201      	movs	r2, #1
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	fa02 f303 	lsl.w	r3, r2, r3
 8011116:	ea01 0203 	and.w	r2, r1, r3
 801111a:	2101      	movs	r1, #1
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	fa01 f303 	lsl.w	r3, r1, r3
 8011122:	429a      	cmp	r2, r3
 8011124:	bf0c      	ite	eq
 8011126:	2301      	moveq	r3, #1
 8011128:	2300      	movne	r3, #0
 801112a:	b2da      	uxtb	r2, r3
 801112c:	69fb      	ldr	r3, [r7, #28]
 801112e:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8011130:	68bb      	ldr	r3, [r7, #8]
 8011132:	2b0e      	cmp	r3, #14
 8011134:	dc1e      	bgt.n	8011174 <get_wall+0x2d4>
			*right_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8011136:	4a13      	ldr	r2, [pc, #76]	; (8011184 <get_wall+0x2e4>)
 8011138:	68bb      	ldr	r3, [r7, #8]
 801113a:	330c      	adds	r3, #12
 801113c:	005b      	lsls	r3, r3, #1
 801113e:	4413      	add	r3, r2
 8011140:	88db      	ldrh	r3, [r3, #6]
 8011142:	4619      	mov	r1, r3
 8011144:	2201      	movs	r2, #1
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	fa02 f303 	lsl.w	r3, r2, r3
 801114c:	ea01 0203 	and.w	r2, r1, r3
 8011150:	2101      	movs	r1, #1
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	fa01 f303 	lsl.w	r3, r1, r3
 8011158:	429a      	cmp	r2, r3
 801115a:	bf0c      	ite	eq
 801115c:	2301      	moveq	r3, #1
 801115e:	2300      	movne	r3, #0
 8011160:	b2da      	uxtb	r2, r3
 8011162:	69bb      	ldr	r3, [r7, #24]
 8011164:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011166:	e005      	b.n	8011174 <get_wall+0x2d4>
		break;
 8011168:	bf00      	nop
 801116a:	e004      	b.n	8011176 <get_wall+0x2d6>
		break;
 801116c:	bf00      	nop
 801116e:	e002      	b.n	8011176 <get_wall+0x2d6>
		break;
 8011170:	bf00      	nop
 8011172:	e000      	b.n	8011176 <get_wall+0x2d6>
		break;
 8011174:	bf00      	nop
	}

}
 8011176:	bf00      	nop
 8011178:	3714      	adds	r7, #20
 801117a:	46bd      	mov	sp, r7
 801117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011180:	4770      	bx	lr
 8011182:	bf00      	nop
 8011184:	20000c3c 	.word	0x20000c3c

08011188 <get_wall_look>:


void get_wall_look(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 8011188:	b480      	push	{r7}
 801118a:	b085      	sub	sp, #20
 801118c:	af00      	add	r7, sp, #0
 801118e:	60f8      	str	r0, [r7, #12]
 8011190:	60b9      	str	r1, [r7, #8]
 8011192:	607a      	str	r2, [r7, #4]
 8011194:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 8011196:	683b      	ldr	r3, [r7, #0]
 8011198:	2201      	movs	r2, #1
 801119a:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 801119c:	69bb      	ldr	r3, [r7, #24]
 801119e:	2201      	movs	r2, #1
 80111a0:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 80111a2:	69fb      	ldr	r3, [r7, #28]
 80111a4:	2201      	movs	r2, #1
 80111a6:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	3b01      	subs	r3, #1
 80111ac:	2b03      	cmp	r3, #3
 80111ae:	f200 8162 	bhi.w	8011476 <get_wall_look+0x2ee>
 80111b2:	a201      	add	r2, pc, #4	; (adr r2, 80111b8 <get_wall_look+0x30>)
 80111b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111b8:	080111c9 	.word	0x080111c9
 80111bc:	08011271 	.word	0x08011271
 80111c0:	08011319 	.word	0x08011319
 80111c4:	080113c1 	.word	0x080113c1
	case 1:
		if (y <= 14) {
 80111c8:	68bb      	ldr	r3, [r7, #8]
 80111ca:	2b0e      	cmp	r3, #14
 80111cc:	dc17      	bgt.n	80111fe <get_wall_look+0x76>
			*front_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 80111ce:	4aad      	ldr	r2, [pc, #692]	; (8011484 <get_wall_look+0x2fc>)
 80111d0:	68bb      	ldr	r3, [r7, #8]
 80111d2:	332c      	adds	r3, #44	; 0x2c
 80111d4:	005b      	lsls	r3, r3, #1
 80111d6:	4413      	add	r3, r2
 80111d8:	885b      	ldrh	r3, [r3, #2]
 80111da:	4619      	mov	r1, r3
 80111dc:	2201      	movs	r2, #1
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	fa02 f303 	lsl.w	r3, r2, r3
 80111e4:	ea01 0203 	and.w	r2, r1, r3
 80111e8:	2101      	movs	r1, #1
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	fa01 f303 	lsl.w	r3, r1, r3
 80111f0:	429a      	cmp	r2, r3
 80111f2:	bf0c      	ite	eq
 80111f4:	2301      	moveq	r3, #1
 80111f6:	2300      	movne	r3, #0
 80111f8:	b2da      	uxtb	r2, r3
 80111fa:	683b      	ldr	r3, [r7, #0]
 80111fc:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	2b00      	cmp	r3, #0
 8011202:	dd18      	ble.n	8011236 <get_wall_look+0xae>
			*left_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	3b01      	subs	r3, #1
 8011208:	4a9e      	ldr	r2, [pc, #632]	; (8011484 <get_wall_look+0x2fc>)
 801120a:	331c      	adds	r3, #28
 801120c:	005b      	lsls	r3, r3, #1
 801120e:	4413      	add	r3, r2
 8011210:	889b      	ldrh	r3, [r3, #4]
 8011212:	4619      	mov	r1, r3
 8011214:	2201      	movs	r2, #1
 8011216:	68bb      	ldr	r3, [r7, #8]
 8011218:	fa02 f303 	lsl.w	r3, r2, r3
 801121c:	ea01 0203 	and.w	r2, r1, r3
 8011220:	2101      	movs	r1, #1
 8011222:	68bb      	ldr	r3, [r7, #8]
 8011224:	fa01 f303 	lsl.w	r3, r1, r3
 8011228:	429a      	cmp	r2, r3
 801122a:	bf0c      	ite	eq
 801122c:	2301      	moveq	r3, #1
 801122e:	2300      	movne	r3, #0
 8011230:	b2da      	uxtb	r2, r3
 8011232:	69fb      	ldr	r3, [r7, #28]
 8011234:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	2b0e      	cmp	r3, #14
 801123a:	f300 8115 	bgt.w	8011468 <get_wall_look+0x2e0>
			*right_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 801123e:	4a91      	ldr	r2, [pc, #580]	; (8011484 <get_wall_look+0x2fc>)
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	331c      	adds	r3, #28
 8011244:	005b      	lsls	r3, r3, #1
 8011246:	4413      	add	r3, r2
 8011248:	889b      	ldrh	r3, [r3, #4]
 801124a:	4619      	mov	r1, r3
 801124c:	2201      	movs	r2, #1
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	fa02 f303 	lsl.w	r3, r2, r3
 8011254:	ea01 0203 	and.w	r2, r1, r3
 8011258:	2101      	movs	r1, #1
 801125a:	68bb      	ldr	r3, [r7, #8]
 801125c:	fa01 f303 	lsl.w	r3, r1, r3
 8011260:	429a      	cmp	r2, r3
 8011262:	bf0c      	ite	eq
 8011264:	2301      	moveq	r3, #1
 8011266:	2300      	movne	r3, #0
 8011268:	b2da      	uxtb	r2, r3
 801126a:	69bb      	ldr	r3, [r7, #24]
 801126c:	701a      	strb	r2, [r3, #0]
		}
		break;
 801126e:	e0fb      	b.n	8011468 <get_wall_look+0x2e0>
	case 2:
		if (x <= 14) {
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	2b0e      	cmp	r3, #14
 8011274:	dc17      	bgt.n	80112a6 <get_wall_look+0x11e>
			*front_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 8011276:	4a83      	ldr	r2, [pc, #524]	; (8011484 <get_wall_look+0x2fc>)
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	331c      	adds	r3, #28
 801127c:	005b      	lsls	r3, r3, #1
 801127e:	4413      	add	r3, r2
 8011280:	889b      	ldrh	r3, [r3, #4]
 8011282:	4619      	mov	r1, r3
 8011284:	2201      	movs	r2, #1
 8011286:	68bb      	ldr	r3, [r7, #8]
 8011288:	fa02 f303 	lsl.w	r3, r2, r3
 801128c:	ea01 0203 	and.w	r2, r1, r3
 8011290:	2101      	movs	r1, #1
 8011292:	68bb      	ldr	r3, [r7, #8]
 8011294:	fa01 f303 	lsl.w	r3, r1, r3
 8011298:	429a      	cmp	r2, r3
 801129a:	bf0c      	ite	eq
 801129c:	2301      	moveq	r3, #1
 801129e:	2300      	movne	r3, #0
 80112a0:	b2da      	uxtb	r2, r3
 80112a2:	683b      	ldr	r3, [r7, #0]
 80112a4:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 80112a6:	68bb      	ldr	r3, [r7, #8]
 80112a8:	2b0e      	cmp	r3, #14
 80112aa:	dc17      	bgt.n	80112dc <get_wall_look+0x154>
			*left_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 80112ac:	4a75      	ldr	r2, [pc, #468]	; (8011484 <get_wall_look+0x2fc>)
 80112ae:	68bb      	ldr	r3, [r7, #8]
 80112b0:	332c      	adds	r3, #44	; 0x2c
 80112b2:	005b      	lsls	r3, r3, #1
 80112b4:	4413      	add	r3, r2
 80112b6:	885b      	ldrh	r3, [r3, #2]
 80112b8:	4619      	mov	r1, r3
 80112ba:	2201      	movs	r2, #1
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	fa02 f303 	lsl.w	r3, r2, r3
 80112c2:	ea01 0203 	and.w	r2, r1, r3
 80112c6:	2101      	movs	r1, #1
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	fa01 f303 	lsl.w	r3, r1, r3
 80112ce:	429a      	cmp	r2, r3
 80112d0:	bf0c      	ite	eq
 80112d2:	2301      	moveq	r3, #1
 80112d4:	2300      	movne	r3, #0
 80112d6:	b2da      	uxtb	r2, r3
 80112d8:	69fb      	ldr	r3, [r7, #28]
 80112da:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 80112dc:	68bb      	ldr	r3, [r7, #8]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	f340 80c4 	ble.w	801146c <get_wall_look+0x2e4>
			*right_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	3b01      	subs	r3, #1
 80112e8:	4a66      	ldr	r2, [pc, #408]	; (8011484 <get_wall_look+0x2fc>)
 80112ea:	332c      	adds	r3, #44	; 0x2c
 80112ec:	005b      	lsls	r3, r3, #1
 80112ee:	4413      	add	r3, r2
 80112f0:	885b      	ldrh	r3, [r3, #2]
 80112f2:	4619      	mov	r1, r3
 80112f4:	2201      	movs	r2, #1
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	fa02 f303 	lsl.w	r3, r2, r3
 80112fc:	ea01 0203 	and.w	r2, r1, r3
 8011300:	2101      	movs	r1, #1
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	fa01 f303 	lsl.w	r3, r1, r3
 8011308:	429a      	cmp	r2, r3
 801130a:	bf0c      	ite	eq
 801130c:	2301      	moveq	r3, #1
 801130e:	2300      	movne	r3, #0
 8011310:	b2da      	uxtb	r2, r3
 8011312:	69bb      	ldr	r3, [r7, #24]
 8011314:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011316:	e0a9      	b.n	801146c <get_wall_look+0x2e4>
	case 3:
		if (y >= 1) {
 8011318:	68bb      	ldr	r3, [r7, #8]
 801131a:	2b00      	cmp	r3, #0
 801131c:	dd18      	ble.n	8011350 <get_wall_look+0x1c8>
			*front_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	3b01      	subs	r3, #1
 8011322:	4a58      	ldr	r2, [pc, #352]	; (8011484 <get_wall_look+0x2fc>)
 8011324:	332c      	adds	r3, #44	; 0x2c
 8011326:	005b      	lsls	r3, r3, #1
 8011328:	4413      	add	r3, r2
 801132a:	885b      	ldrh	r3, [r3, #2]
 801132c:	4619      	mov	r1, r3
 801132e:	2201      	movs	r2, #1
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	fa02 f303 	lsl.w	r3, r2, r3
 8011336:	ea01 0203 	and.w	r2, r1, r3
 801133a:	2101      	movs	r1, #1
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	fa01 f303 	lsl.w	r3, r1, r3
 8011342:	429a      	cmp	r2, r3
 8011344:	bf0c      	ite	eq
 8011346:	2301      	moveq	r3, #1
 8011348:	2300      	movne	r3, #0
 801134a:	b2da      	uxtb	r2, r3
 801134c:	683b      	ldr	r3, [r7, #0]
 801134e:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	2b0e      	cmp	r3, #14
 8011354:	dc17      	bgt.n	8011386 <get_wall_look+0x1fe>
			*left_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 8011356:	4a4b      	ldr	r2, [pc, #300]	; (8011484 <get_wall_look+0x2fc>)
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	331c      	adds	r3, #28
 801135c:	005b      	lsls	r3, r3, #1
 801135e:	4413      	add	r3, r2
 8011360:	889b      	ldrh	r3, [r3, #4]
 8011362:	4619      	mov	r1, r3
 8011364:	2201      	movs	r2, #1
 8011366:	68bb      	ldr	r3, [r7, #8]
 8011368:	fa02 f303 	lsl.w	r3, r2, r3
 801136c:	ea01 0203 	and.w	r2, r1, r3
 8011370:	2101      	movs	r1, #1
 8011372:	68bb      	ldr	r3, [r7, #8]
 8011374:	fa01 f303 	lsl.w	r3, r1, r3
 8011378:	429a      	cmp	r2, r3
 801137a:	bf0c      	ite	eq
 801137c:	2301      	moveq	r3, #1
 801137e:	2300      	movne	r3, #0
 8011380:	b2da      	uxtb	r2, r3
 8011382:	69fb      	ldr	r3, [r7, #28]
 8011384:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	2b00      	cmp	r3, #0
 801138a:	dd71      	ble.n	8011470 <get_wall_look+0x2e8>
			*right_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	3b01      	subs	r3, #1
 8011390:	4a3c      	ldr	r2, [pc, #240]	; (8011484 <get_wall_look+0x2fc>)
 8011392:	331c      	adds	r3, #28
 8011394:	005b      	lsls	r3, r3, #1
 8011396:	4413      	add	r3, r2
 8011398:	889b      	ldrh	r3, [r3, #4]
 801139a:	4619      	mov	r1, r3
 801139c:	2201      	movs	r2, #1
 801139e:	68bb      	ldr	r3, [r7, #8]
 80113a0:	fa02 f303 	lsl.w	r3, r2, r3
 80113a4:	ea01 0203 	and.w	r2, r1, r3
 80113a8:	2101      	movs	r1, #1
 80113aa:	68bb      	ldr	r3, [r7, #8]
 80113ac:	fa01 f303 	lsl.w	r3, r1, r3
 80113b0:	429a      	cmp	r2, r3
 80113b2:	bf0c      	ite	eq
 80113b4:	2301      	moveq	r3, #1
 80113b6:	2300      	movne	r3, #0
 80113b8:	b2da      	uxtb	r2, r3
 80113ba:	69bb      	ldr	r3, [r7, #24]
 80113bc:	701a      	strb	r2, [r3, #0]
		}
		break;
 80113be:	e057      	b.n	8011470 <get_wall_look+0x2e8>
	case 4:
		if (x >= 1) {
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	dd18      	ble.n	80113f8 <get_wall_look+0x270>
			*front_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	3b01      	subs	r3, #1
 80113ca:	4a2e      	ldr	r2, [pc, #184]	; (8011484 <get_wall_look+0x2fc>)
 80113cc:	331c      	adds	r3, #28
 80113ce:	005b      	lsls	r3, r3, #1
 80113d0:	4413      	add	r3, r2
 80113d2:	889b      	ldrh	r3, [r3, #4]
 80113d4:	4619      	mov	r1, r3
 80113d6:	2201      	movs	r2, #1
 80113d8:	68bb      	ldr	r3, [r7, #8]
 80113da:	fa02 f303 	lsl.w	r3, r2, r3
 80113de:	ea01 0203 	and.w	r2, r1, r3
 80113e2:	2101      	movs	r1, #1
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	fa01 f303 	lsl.w	r3, r1, r3
 80113ea:	429a      	cmp	r2, r3
 80113ec:	bf0c      	ite	eq
 80113ee:	2301      	moveq	r3, #1
 80113f0:	2300      	movne	r3, #0
 80113f2:	b2da      	uxtb	r2, r3
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 80113f8:	68bb      	ldr	r3, [r7, #8]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	dd18      	ble.n	8011430 <get_wall_look+0x2a8>
			*left_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 80113fe:	68bb      	ldr	r3, [r7, #8]
 8011400:	3b01      	subs	r3, #1
 8011402:	4a20      	ldr	r2, [pc, #128]	; (8011484 <get_wall_look+0x2fc>)
 8011404:	332c      	adds	r3, #44	; 0x2c
 8011406:	005b      	lsls	r3, r3, #1
 8011408:	4413      	add	r3, r2
 801140a:	885b      	ldrh	r3, [r3, #2]
 801140c:	4619      	mov	r1, r3
 801140e:	2201      	movs	r2, #1
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	fa02 f303 	lsl.w	r3, r2, r3
 8011416:	ea01 0203 	and.w	r2, r1, r3
 801141a:	2101      	movs	r1, #1
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	fa01 f303 	lsl.w	r3, r1, r3
 8011422:	429a      	cmp	r2, r3
 8011424:	bf0c      	ite	eq
 8011426:	2301      	moveq	r3, #1
 8011428:	2300      	movne	r3, #0
 801142a:	b2da      	uxtb	r2, r3
 801142c:	69fb      	ldr	r3, [r7, #28]
 801142e:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8011430:	68bb      	ldr	r3, [r7, #8]
 8011432:	2b0e      	cmp	r3, #14
 8011434:	dc1e      	bgt.n	8011474 <get_wall_look+0x2ec>
			*right_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 8011436:	4a13      	ldr	r2, [pc, #76]	; (8011484 <get_wall_look+0x2fc>)
 8011438:	68bb      	ldr	r3, [r7, #8]
 801143a:	332c      	adds	r3, #44	; 0x2c
 801143c:	005b      	lsls	r3, r3, #1
 801143e:	4413      	add	r3, r2
 8011440:	885b      	ldrh	r3, [r3, #2]
 8011442:	4619      	mov	r1, r3
 8011444:	2201      	movs	r2, #1
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	fa02 f303 	lsl.w	r3, r2, r3
 801144c:	ea01 0203 	and.w	r2, r1, r3
 8011450:	2101      	movs	r1, #1
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	fa01 f303 	lsl.w	r3, r1, r3
 8011458:	429a      	cmp	r2, r3
 801145a:	bf0c      	ite	eq
 801145c:	2301      	moveq	r3, #1
 801145e:	2300      	movne	r3, #0
 8011460:	b2da      	uxtb	r2, r3
 8011462:	69bb      	ldr	r3, [r7, #24]
 8011464:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011466:	e005      	b.n	8011474 <get_wall_look+0x2ec>
		break;
 8011468:	bf00      	nop
 801146a:	e004      	b.n	8011476 <get_wall_look+0x2ee>
		break;
 801146c:	bf00      	nop
 801146e:	e002      	b.n	8011476 <get_wall_look+0x2ee>
		break;
 8011470:	bf00      	nop
 8011472:	e000      	b.n	8011476 <get_wall_look+0x2ee>
		break;
 8011474:	bf00      	nop
	}

}
 8011476:	bf00      	nop
 8011478:	3714      	adds	r7, #20
 801147a:	46bd      	mov	sp, r7
 801147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011480:	4770      	bx	lr
 8011482:	bf00      	nop
 8011484:	20000c3c 	.word	0x20000c3c

08011488 <search_AroundWalkCount>:


void search_AroundWalkCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 8011488:	b480      	push	{r7}
 801148a:	b087      	sub	sp, #28
 801148c:	af00      	add	r7, sp, #0
 801148e:	60f8      	str	r0, [r7, #12]
 8011490:	60b9      	str	r1, [r7, #8]
 8011492:	607a      	str	r2, [r7, #4]
 8011494:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = MAX_WALKCOUNT;}
 8011496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011498:	2b0e      	cmp	r3, #14
 801149a:	dd02      	ble.n	80114a2 <search_AroundWalkCount+0x1a>
 801149c:	23ff      	movs	r3, #255	; 0xff
 801149e:	82fb      	strh	r3, [r7, #22]
 80114a0:	e008      	b.n	80114b4 <search_AroundWalkCount+0x2c>
	else {north_count = walk_count[x][y + 1];}
 80114a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a4:	3301      	adds	r3, #1
 80114a6:	493e      	ldr	r1, [pc, #248]	; (80115a0 <search_AroundWalkCount+0x118>)
 80114a8:	6a3a      	ldr	r2, [r7, #32]
 80114aa:	0112      	lsls	r2, r2, #4
 80114ac:	4413      	add	r3, r2
 80114ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80114b2:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = MAX_WALKCOUNT;}
 80114b4:	6a3b      	ldr	r3, [r7, #32]
 80114b6:	2b0e      	cmp	r3, #14
 80114b8:	dd02      	ble.n	80114c0 <search_AroundWalkCount+0x38>
 80114ba:	23ff      	movs	r3, #255	; 0xff
 80114bc:	82bb      	strh	r3, [r7, #20]
 80114be:	e008      	b.n	80114d2 <search_AroundWalkCount+0x4a>
	else {east_count = walk_count[x + 1][y];}
 80114c0:	6a3b      	ldr	r3, [r7, #32]
 80114c2:	3301      	adds	r3, #1
 80114c4:	4936      	ldr	r1, [pc, #216]	; (80115a0 <search_AroundWalkCount+0x118>)
 80114c6:	011a      	lsls	r2, r3, #4
 80114c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ca:	4413      	add	r3, r2
 80114cc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80114d0:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = MAX_WALKCOUNT;}
 80114d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	dc02      	bgt.n	80114de <search_AroundWalkCount+0x56>
 80114d8:	23ff      	movs	r3, #255	; 0xff
 80114da:	827b      	strh	r3, [r7, #18]
 80114dc:	e008      	b.n	80114f0 <search_AroundWalkCount+0x68>
	else {south_count = walk_count[x][y - 1];}
 80114de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114e0:	3b01      	subs	r3, #1
 80114e2:	492f      	ldr	r1, [pc, #188]	; (80115a0 <search_AroundWalkCount+0x118>)
 80114e4:	6a3a      	ldr	r2, [r7, #32]
 80114e6:	0112      	lsls	r2, r2, #4
 80114e8:	4413      	add	r3, r2
 80114ea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80114ee:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = MAX_WALKCOUNT;}
 80114f0:	6a3b      	ldr	r3, [r7, #32]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	dc02      	bgt.n	80114fc <search_AroundWalkCount+0x74>
 80114f6:	23ff      	movs	r3, #255	; 0xff
 80114f8:	823b      	strh	r3, [r7, #16]
 80114fa:	e008      	b.n	801150e <search_AroundWalkCount+0x86>
	else {west_count = walk_count[x - 1][y];}
 80114fc:	6a3b      	ldr	r3, [r7, #32]
 80114fe:	3b01      	subs	r3, #1
 8011500:	4927      	ldr	r1, [pc, #156]	; (80115a0 <search_AroundWalkCount+0x118>)
 8011502:	011a      	lsls	r2, r3, #4
 8011504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011506:	4413      	add	r3, r2
 8011508:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801150c:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 801150e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011510:	3b01      	subs	r3, #1
 8011512:	2b03      	cmp	r3, #3
 8011514:	d83e      	bhi.n	8011594 <search_AroundWalkCount+0x10c>
 8011516:	a201      	add	r2, pc, #4	; (adr r2, 801151c <search_AroundWalkCount+0x94>)
 8011518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801151c:	0801152d 	.word	0x0801152d
 8011520:	08011547 	.word	0x08011547
 8011524:	08011561 	.word	0x08011561
 8011528:	0801157b 	.word	0x0801157b
	case 1:
		*front_count = north_count;
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	8afa      	ldrh	r2, [r7, #22]
 8011530:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 8011532:	68bb      	ldr	r3, [r7, #8]
 8011534:	8aba      	ldrh	r2, [r7, #20]
 8011536:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	8a7a      	ldrh	r2, [r7, #18]
 801153c:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 801153e:	683b      	ldr	r3, [r7, #0]
 8011540:	8a3a      	ldrh	r2, [r7, #16]
 8011542:	801a      	strh	r2, [r3, #0]
		break;
 8011544:	e026      	b.n	8011594 <search_AroundWalkCount+0x10c>
	case 2:
		*front_count = east_count;
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	8aba      	ldrh	r2, [r7, #20]
 801154a:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 801154c:	68bb      	ldr	r3, [r7, #8]
 801154e:	8a7a      	ldrh	r2, [r7, #18]
 8011550:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	8a3a      	ldrh	r2, [r7, #16]
 8011556:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 8011558:	683b      	ldr	r3, [r7, #0]
 801155a:	8afa      	ldrh	r2, [r7, #22]
 801155c:	801a      	strh	r2, [r3, #0]
		break;
 801155e:	e019      	b.n	8011594 <search_AroundWalkCount+0x10c>
	case 3:
		*front_count = south_count;
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	8a7a      	ldrh	r2, [r7, #18]
 8011564:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	8a3a      	ldrh	r2, [r7, #16]
 801156a:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	8afa      	ldrh	r2, [r7, #22]
 8011570:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 8011572:	683b      	ldr	r3, [r7, #0]
 8011574:	8aba      	ldrh	r2, [r7, #20]
 8011576:	801a      	strh	r2, [r3, #0]
		break;
 8011578:	e00c      	b.n	8011594 <search_AroundWalkCount+0x10c>
	case 4:
		*front_count = west_count;
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	8a3a      	ldrh	r2, [r7, #16]
 801157e:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	8afa      	ldrh	r2, [r7, #22]
 8011584:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	8aba      	ldrh	r2, [r7, #20]
 801158a:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	8a7a      	ldrh	r2, [r7, #18]
 8011590:	801a      	strh	r2, [r3, #0]
		break;
 8011592:	bf00      	nop

	}


}
 8011594:	bf00      	nop
 8011596:	371c      	adds	r7, #28
 8011598:	46bd      	mov	sp, r7
 801159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159e:	4770      	bx	lr
 80115a0:	20000d30 	.word	0x20000d30

080115a4 <search_AroundDijkstraCount>:





void search_AroundDijkstraCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 80115a4:	b480      	push	{r7}
 80115a6:	b087      	sub	sp, #28
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	60f8      	str	r0, [r7, #12]
 80115ac:	60b9      	str	r1, [r7, #8]
 80115ae:	607a      	str	r2, [r7, #4]
 80115b0:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = 65535;}
 80115b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115b4:	2b0e      	cmp	r3, #14
 80115b6:	dd03      	ble.n	80115c0 <search_AroundDijkstraCount+0x1c>
 80115b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80115bc:	82fb      	strh	r3, [r7, #22]
 80115be:	e00a      	b.n	80115d6 <search_AroundDijkstraCount+0x32>
	else {north_count = Dijkstra.column_count[x][y];}
 80115c0:	4944      	ldr	r1, [pc, #272]	; (80116d4 <search_AroundDijkstraCount+0x130>)
 80115c2:	6a3a      	ldr	r2, [r7, #32]
 80115c4:	4613      	mov	r3, r2
 80115c6:	011b      	lsls	r3, r3, #4
 80115c8:	1a9b      	subs	r3, r3, r2
 80115ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115cc:	4413      	add	r3, r2
 80115ce:	33f0      	adds	r3, #240	; 0xf0
 80115d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80115d4:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = 65535;}
 80115d6:	6a3b      	ldr	r3, [r7, #32]
 80115d8:	2b0e      	cmp	r3, #14
 80115da:	dd03      	ble.n	80115e4 <search_AroundDijkstraCount+0x40>
 80115dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80115e0:	82bb      	strh	r3, [r7, #20]
 80115e2:	e009      	b.n	80115f8 <search_AroundDijkstraCount+0x54>
	else {east_count = Dijkstra.row_count[y][x];}
 80115e4:	493b      	ldr	r1, [pc, #236]	; (80116d4 <search_AroundDijkstraCount+0x130>)
 80115e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115e8:	4613      	mov	r3, r2
 80115ea:	011b      	lsls	r3, r3, #4
 80115ec:	1a9b      	subs	r3, r3, r2
 80115ee:	6a3a      	ldr	r2, [r7, #32]
 80115f0:	4413      	add	r3, r2
 80115f2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80115f6:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = 65535;}
 80115f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	dc03      	bgt.n	8011606 <search_AroundDijkstraCount+0x62>
 80115fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011602:	827b      	strh	r3, [r7, #18]
 8011604:	e00b      	b.n	801161e <search_AroundDijkstraCount+0x7a>
	else {south_count = Dijkstra.column_count[x][y-1];}
 8011606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011608:	1e59      	subs	r1, r3, #1
 801160a:	4832      	ldr	r0, [pc, #200]	; (80116d4 <search_AroundDijkstraCount+0x130>)
 801160c:	6a3a      	ldr	r2, [r7, #32]
 801160e:	4613      	mov	r3, r2
 8011610:	011b      	lsls	r3, r3, #4
 8011612:	1a9b      	subs	r3, r3, r2
 8011614:	440b      	add	r3, r1
 8011616:	33f0      	adds	r3, #240	; 0xf0
 8011618:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801161c:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = 65535;}
 801161e:	6a3b      	ldr	r3, [r7, #32]
 8011620:	2b00      	cmp	r3, #0
 8011622:	dc03      	bgt.n	801162c <search_AroundDijkstraCount+0x88>
 8011624:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011628:	823b      	strh	r3, [r7, #16]
 801162a:	e00a      	b.n	8011642 <search_AroundDijkstraCount+0x9e>
	else {west_count = Dijkstra.row_count[y][x-1];}
 801162c:	6a3b      	ldr	r3, [r7, #32]
 801162e:	1e59      	subs	r1, r3, #1
 8011630:	4828      	ldr	r0, [pc, #160]	; (80116d4 <search_AroundDijkstraCount+0x130>)
 8011632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011634:	4613      	mov	r3, r2
 8011636:	011b      	lsls	r3, r3, #4
 8011638:	1a9b      	subs	r3, r3, r2
 801163a:	440b      	add	r3, r1
 801163c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011640:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 8011642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011644:	3b01      	subs	r3, #1
 8011646:	2b03      	cmp	r3, #3
 8011648:	d83e      	bhi.n	80116c8 <search_AroundDijkstraCount+0x124>
 801164a:	a201      	add	r2, pc, #4	; (adr r2, 8011650 <search_AroundDijkstraCount+0xac>)
 801164c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011650:	08011661 	.word	0x08011661
 8011654:	0801167b 	.word	0x0801167b
 8011658:	08011695 	.word	0x08011695
 801165c:	080116af 	.word	0x080116af
	case 1:
		*front_count = north_count;
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	8afa      	ldrh	r2, [r7, #22]
 8011664:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 8011666:	68bb      	ldr	r3, [r7, #8]
 8011668:	8aba      	ldrh	r2, [r7, #20]
 801166a:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	8a7a      	ldrh	r2, [r7, #18]
 8011670:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 8011672:	683b      	ldr	r3, [r7, #0]
 8011674:	8a3a      	ldrh	r2, [r7, #16]
 8011676:	801a      	strh	r2, [r3, #0]
		break;
 8011678:	e026      	b.n	80116c8 <search_AroundDijkstraCount+0x124>
	case 2:
		*front_count = east_count;
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	8aba      	ldrh	r2, [r7, #20]
 801167e:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 8011680:	68bb      	ldr	r3, [r7, #8]
 8011682:	8a7a      	ldrh	r2, [r7, #18]
 8011684:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	8a3a      	ldrh	r2, [r7, #16]
 801168a:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	8afa      	ldrh	r2, [r7, #22]
 8011690:	801a      	strh	r2, [r3, #0]
		break;
 8011692:	e019      	b.n	80116c8 <search_AroundDijkstraCount+0x124>
	case 3:
		*front_count = south_count;
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	8a7a      	ldrh	r2, [r7, #18]
 8011698:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 801169a:	68bb      	ldr	r3, [r7, #8]
 801169c:	8a3a      	ldrh	r2, [r7, #16]
 801169e:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	8afa      	ldrh	r2, [r7, #22]
 80116a4:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 80116a6:	683b      	ldr	r3, [r7, #0]
 80116a8:	8aba      	ldrh	r2, [r7, #20]
 80116aa:	801a      	strh	r2, [r3, #0]
		break;
 80116ac:	e00c      	b.n	80116c8 <search_AroundDijkstraCount+0x124>
	case 4:
		*front_count = west_count;
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	8a3a      	ldrh	r2, [r7, #16]
 80116b2:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 80116b4:	68bb      	ldr	r3, [r7, #8]
 80116b6:	8afa      	ldrh	r2, [r7, #22]
 80116b8:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	8aba      	ldrh	r2, [r7, #20]
 80116be:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 80116c0:	683b      	ldr	r3, [r7, #0]
 80116c2:	8a7a      	ldrh	r2, [r7, #18]
 80116c4:	801a      	strh	r2, [r3, #0]
		break;
 80116c6:	bf00      	nop

	}


}
 80116c8:	bf00      	nop
 80116ca:	371c      	adds	r7, #28
 80116cc:	46bd      	mov	sp, r7
 80116ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d2:	4770      	bx	lr
 80116d4:	20000f30 	.word	0x20000f30

080116d8 <create_DijkstraMap>:




void create_DijkstraMap(void){
 80116d8:	b590      	push	{r4, r7, lr}
 80116da:	f5ad 4d9d 	sub.w	sp, sp, #20096	; 0x4e80
 80116de:	b081      	sub	sp, #4
 80116e0:	af00      	add	r7, sp, #0
	STACK_T stack_x;
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_direction;//向き(0北　1北東　2東　3南東　4南　5南西　6西　7北西　8エラー)
	STACK_T stack_cost;//引かれるコスト
	int16_t VerticalCost=VERTICALCOST;
 80116e2:	23b4      	movs	r3, #180	; 0xb4
 80116e4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80116e8:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 80116ec:	8013      	strh	r3, [r2, #0]
	int16_t DiagonalCost=DIAGONALCOST;
 80116ee:	237f      	movs	r3, #127	; 0x7f
 80116f0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80116f4:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80116f8:	8013      	strh	r3, [r2, #0]
	int16_t discount_v[V_NUM_MAX]={180,118,100,91,90};
 80116fa:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80116fe:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8011702:	4a1d      	ldr	r2, [pc, #116]	; (8011778 <create_DijkstraMap+0xa0>)
 8011704:	ca07      	ldmia	r2, {r0, r1, r2}
 8011706:	c303      	stmia	r3!, {r0, r1}
 8011708:	801a      	strh	r2, [r3, #0]
	int16_t discount_d[D_NUM_MAX]={127,91,79,71,65,64};
 801170a:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801170e:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011712:	4a1a      	ldr	r2, [pc, #104]	; (801177c <create_DijkstraMap+0xa4>)
 8011714:	ca07      	ldmia	r2, {r0, r1, r2}
 8011716:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int16_t dis_cost_in;
	//printf("%d,%d,%d,%d,%d\n",discount_v[0],discount_v[1],discount_v[2],discount_v[3],discount_v[4]);
	//printf("%d,%d,%d,%d,%d,%d\n",discount_d[0],discount_d[1],discount_d[2],discount_d[3],discount_d[4],discount_d[5]);
	initStack_walk(&stack_x);
 801171a:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801171e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011722:	4618      	mov	r0, r3
 8011724:	f003 fb1a 	bl	8014d5c <initStack_walk>
	initStack_walk(&stack_y);
 8011728:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801172c:	f103 0320 	add.w	r3, r3, #32
 8011730:	3b0c      	subs	r3, #12
 8011732:	4618      	mov	r0, r3
 8011734:	f003 fb12 	bl	8014d5c <initStack_walk>
	initStack_walk(&stack_matrix);
 8011738:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801173c:	3b14      	subs	r3, #20
 801173e:	4618      	mov	r0, r3
 8011740:	f003 fb0c 	bl	8014d5c <initStack_walk>
	initStack_walk(&stack_direction);
 8011744:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011748:	3b3c      	subs	r3, #60	; 0x3c
 801174a:	4618      	mov	r0, r3
 801174c:	f003 fb06 	bl	8014d5c <initStack_walk>
	initStack_walk(&stack_cost);
 8011750:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011754:	3b64      	subs	r3, #100	; 0x64
 8011756:	4618      	mov	r0, r3
 8011758:	f003 fb00 	bl	8014d5c <initStack_walk>
	for(int i=0;i<=15;i++){
 801175c:	2300      	movs	r3, #0
 801175e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011762:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8011766:	6013      	str	r3, [r2, #0]
 8011768:	e04e      	b.n	8011808 <create_DijkstraMap+0x130>
		for(int j=0;j<=14;j++){
 801176a:	2300      	movs	r3, #0
 801176c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011770:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8011774:	6013      	str	r3, [r2, #0]
 8011776:	e035      	b.n	80117e4 <create_DijkstraMap+0x10c>
 8011778:	0802353c 	.word	0x0802353c
 801177c:	08023548 	.word	0x08023548
			Dijkstra.column_count[i][j]=65535;
 8011780:	49c6      	ldr	r1, [pc, #792]	; (8011a9c <create_DijkstraMap+0x3c4>)
 8011782:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011786:	f103 0374 	add.w	r3, r3, #116	; 0x74
 801178a:	681a      	ldr	r2, [r3, #0]
 801178c:	4613      	mov	r3, r2
 801178e:	011b      	lsls	r3, r3, #4
 8011790:	1a9b      	subs	r3, r3, r2
 8011792:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011796:	f102 0270 	add.w	r2, r2, #112	; 0x70
 801179a:	6812      	ldr	r2, [r2, #0]
 801179c:	4413      	add	r3, r2
 801179e:	33f0      	adds	r3, #240	; 0xf0
 80117a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80117a4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			Dijkstra.row_count[i][j]=65535;
 80117a8:	49bc      	ldr	r1, [pc, #752]	; (8011a9c <create_DijkstraMap+0x3c4>)
 80117aa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80117ae:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80117b2:	681a      	ldr	r2, [r3, #0]
 80117b4:	4613      	mov	r3, r2
 80117b6:	011b      	lsls	r3, r3, #4
 80117b8:	1a9b      	subs	r3, r3, r2
 80117ba:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80117be:	f102 0270 	add.w	r2, r2, #112	; 0x70
 80117c2:	6812      	ldr	r2, [r2, #0]
 80117c4:	4413      	add	r3, r2
 80117c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80117ca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j=0;j<=14;j++){
 80117ce:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80117d2:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	3301      	adds	r3, #1
 80117da:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80117de:	f102 0270 	add.w	r2, r2, #112	; 0x70
 80117e2:	6013      	str	r3, [r2, #0]
 80117e4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80117e8:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	2b0e      	cmp	r3, #14
 80117f0:	ddc6      	ble.n	8011780 <create_DijkstraMap+0xa8>
	for(int i=0;i<=15;i++){
 80117f2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80117f6:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	3301      	adds	r3, #1
 80117fe:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011802:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8011806:	6013      	str	r3, [r2, #0]
 8011808:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801180c:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	2b0f      	cmp	r3, #15
 8011814:	dda9      	ble.n	801176a <create_DijkstraMap+0x92>
		}
	}
	Dijkstra.column_count[GOAL_X][GOAL_Y]=0;
 8011816:	4ba1      	ldr	r3, [pc, #644]	; (8011a9c <create_DijkstraMap+0x3c4>)
 8011818:	2200      	movs	r2, #0
 801181a:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
	Dijkstra.column_count[GOAL_X+1][GOAL_Y]=0;
 801181e:	4b9f      	ldr	r3, [pc, #636]	; (8011a9c <create_DijkstraMap+0x3c4>)
 8011820:	2200      	movs	r2, #0
 8011822:	f8a3 221c 	strh.w	r2, [r3, #540]	; 0x21c
	Dijkstra.row_count[GOAL_Y][GOAL_X]=0;
 8011826:	4b9d      	ldr	r3, [pc, #628]	; (8011a9c <create_DijkstraMap+0x3c4>)
 8011828:	2200      	movs	r2, #0
 801182a:	805a      	strh	r2, [r3, #2]
	Dijkstra.row_count[GOAL_Y+1][GOAL_X]=0;
 801182c:	4b9b      	ldr	r3, [pc, #620]	; (8011a9c <create_DijkstraMap+0x3c4>)
 801182e:	2200      	movs	r2, #0
 8011830:	841a      	strh	r2, [r3, #32]
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 8011832:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011836:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801183a:	2101      	movs	r1, #1
 801183c:	4618      	mov	r0, r3
 801183e:	f003 fa9d 	bl	8014d7c <pushStack_walk>
 8011842:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011846:	f103 0320 	add.w	r3, r3, #32
 801184a:	3b0c      	subs	r3, #12
 801184c:	2100      	movs	r1, #0
 801184e:	4618      	mov	r0, r3
 8011850:	f003 fa94 	bl	8014d7c <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 8011854:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011858:	3b14      	subs	r3, #20
 801185a:	2100      	movs	r1, #0
 801185c:	4618      	mov	r0, r3
 801185e:	f003 fa8d 	bl	8014d7c <pushStack_walk>
 8011862:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011866:	3b3c      	subs	r3, #60	; 0x3c
 8011868:	2108      	movs	r1, #8
 801186a:	4618      	mov	r0, r3
 801186c:	f003 fa86 	bl	8014d7c <pushStack_walk>
 8011870:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011874:	3b64      	subs	r3, #100	; 0x64
 8011876:	2100      	movs	r1, #0
 8011878:	4618      	mov	r0, r3
 801187a:	f003 fa7f 	bl	8014d7c <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X+1);pushStack_walk(&stack_y,GOAL_Y);
 801187e:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011882:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011886:	2102      	movs	r1, #2
 8011888:	4618      	mov	r0, r3
 801188a:	f003 fa77 	bl	8014d7c <pushStack_walk>
 801188e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011892:	f103 0320 	add.w	r3, r3, #32
 8011896:	3b0c      	subs	r3, #12
 8011898:	2100      	movs	r1, #0
 801189a:	4618      	mov	r0, r3
 801189c:	f003 fa6e 	bl	8014d7c <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 80118a0:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80118a4:	3b14      	subs	r3, #20
 80118a6:	2100      	movs	r1, #0
 80118a8:	4618      	mov	r0, r3
 80118aa:	f003 fa67 	bl	8014d7c <pushStack_walk>
 80118ae:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80118b2:	3b3c      	subs	r3, #60	; 0x3c
 80118b4:	2108      	movs	r1, #8
 80118b6:	4618      	mov	r0, r3
 80118b8:	f003 fa60 	bl	8014d7c <pushStack_walk>
 80118bc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80118c0:	3b64      	subs	r3, #100	; 0x64
 80118c2:	2100      	movs	r1, #0
 80118c4:	4618      	mov	r0, r3
 80118c6:	f003 fa59 	bl	8014d7c <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 80118ca:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80118ce:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80118d2:	2101      	movs	r1, #1
 80118d4:	4618      	mov	r0, r3
 80118d6:	f003 fa51 	bl	8014d7c <pushStack_walk>
 80118da:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80118de:	f103 0320 	add.w	r3, r3, #32
 80118e2:	3b0c      	subs	r3, #12
 80118e4:	2100      	movs	r1, #0
 80118e6:	4618      	mov	r0, r3
 80118e8:	f003 fa48 	bl	8014d7c <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 80118ec:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80118f0:	3b14      	subs	r3, #20
 80118f2:	2101      	movs	r1, #1
 80118f4:	4618      	mov	r0, r3
 80118f6:	f003 fa41 	bl	8014d7c <pushStack_walk>
 80118fa:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80118fe:	3b3c      	subs	r3, #60	; 0x3c
 8011900:	2108      	movs	r1, #8
 8011902:	4618      	mov	r0, r3
 8011904:	f003 fa3a 	bl	8014d7c <pushStack_walk>
 8011908:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801190c:	3b64      	subs	r3, #100	; 0x64
 801190e:	2100      	movs	r1, #0
 8011910:	4618      	mov	r0, r3
 8011912:	f003 fa33 	bl	8014d7c <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y+1);
 8011916:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801191a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801191e:	2101      	movs	r1, #1
 8011920:	4618      	mov	r0, r3
 8011922:	f003 fa2b 	bl	8014d7c <pushStack_walk>
 8011926:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801192a:	f103 0320 	add.w	r3, r3, #32
 801192e:	3b0c      	subs	r3, #12
 8011930:	2101      	movs	r1, #1
 8011932:	4618      	mov	r0, r3
 8011934:	f003 fa22 	bl	8014d7c <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 8011938:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801193c:	3b14      	subs	r3, #20
 801193e:	2101      	movs	r1, #1
 8011940:	4618      	mov	r0, r3
 8011942:	f003 fa1b 	bl	8014d7c <pushStack_walk>
 8011946:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801194a:	3b3c      	subs	r3, #60	; 0x3c
 801194c:	2108      	movs	r1, #8
 801194e:	4618      	mov	r0, r3
 8011950:	f003 fa14 	bl	8014d7c <pushStack_walk>
 8011954:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011958:	3b64      	subs	r3, #100	; 0x64
 801195a:	2100      	movs	r1, #0
 801195c:	4618      	mov	r0, r3
 801195e:	f003 fa0d 	bl	8014d7c <pushStack_walk>



	unsigned short count_number = 1;
 8011962:	2301      	movs	r3, #1
 8011964:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011968:	f102 026e 	add.w	r2, r2, #110	; 0x6e
 801196c:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate,Row_or_Column,Direction,dis_cost;
	while (1) {

		Xcoordinate = popStack_walk(&stack_x);
 801196e:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011972:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011976:	4618      	mov	r0, r3
 8011978:	f003 fa2a 	bl	8014dd0 <popStack_walk>
 801197c:	4603      	mov	r3, r0
 801197e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011982:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8011986:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 8011988:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801198c:	f103 0320 	add.w	r3, r3, #32
 8011990:	3b0c      	subs	r3, #12
 8011992:	4618      	mov	r0, r3
 8011994:	f003 fa1c 	bl	8014dd0 <popStack_walk>
 8011998:	4603      	mov	r3, r0
 801199a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801199e:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 80119a2:	8013      	strh	r3, [r2, #0]
		Row_or_Column = popStack_walk(&stack_matrix);
 80119a4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80119a8:	3b14      	subs	r3, #20
 80119aa:	4618      	mov	r0, r3
 80119ac:	f003 fa10 	bl	8014dd0 <popStack_walk>
 80119b0:	4603      	mov	r3, r0
 80119b2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80119b6:	f102 0268 	add.w	r2, r2, #104	; 0x68
 80119ba:	8013      	strh	r3, [r2, #0]
		Direction = popStack_walk(&stack_direction);
 80119bc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80119c0:	3b3c      	subs	r3, #60	; 0x3c
 80119c2:	4618      	mov	r0, r3
 80119c4:	f003 fa04 	bl	8014dd0 <popStack_walk>
 80119c8:	4603      	mov	r3, r0
 80119ca:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80119ce:	f102 0266 	add.w	r2, r2, #102	; 0x66
 80119d2:	8013      	strh	r3, [r2, #0]
		dis_cost = popStack_walk(&stack_cost);
 80119d4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80119d8:	3b64      	subs	r3, #100	; 0x64
 80119da:	4618      	mov	r0, r3
 80119dc:	f003 f9f8 	bl	8014dd0 <popStack_walk>
 80119e0:	4603      	mov	r3, r0
 80119e2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80119e6:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80119ea:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
		//printf("cost_num %d\n",dis_cost);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 80119ec:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80119f0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80119f4:	881b      	ldrh	r3, [r3, #0]
 80119f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119fa:	4293      	cmp	r3, r2
 80119fc:	f001 83a9 	beq.w	8013152 <create_DijkstraMap+0x1a7a>
 8011a00:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a04:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011a08:	881b      	ldrh	r3, [r3, #0]
 8011a0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a0e:	4293      	cmp	r3, r2
 8011a10:	f001 839f 	beq.w	8013152 <create_DijkstraMap+0x1a7a>
			//printf("stack_end\n");
			break;
		}
		if(Row_or_Column==COLUMN){
 8011a14:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a18:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8011a1c:	881b      	ldrh	r3, [r3, #0]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	f040 85c5 	bne.w	80125ae <create_DijkstraMap+0xed6>
			if(Ycoordinate <= 13){
 8011a24:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a28:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011a2c:	881b      	ldrh	r3, [r3, #0]
 8011a2e:	2b0d      	cmp	r3, #13
 8011a30:	f200 80f2 	bhi.w	8011c18 <create_DijkstraMap+0x540>
				if(Direction==SLANT_NORTH){
 8011a34:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a38:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8011a3c:	881b      	ldrh	r3, [r3, #0]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d12e      	bne.n	8011aa0 <create_DijkstraMap+0x3c8>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8011a42:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a46:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8011a4a:	881b      	ldrh	r3, [r3, #0]
 8011a4c:	3301      	adds	r3, #1
 8011a4e:	b29b      	uxth	r3, r3
 8011a50:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011a54:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011a58:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8011a5a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a5e:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a66:	2b04      	cmp	r3, #4
 8011a68:	dd05      	ble.n	8011a76 <create_DijkstraMap+0x39e>
 8011a6a:	2304      	movs	r3, #4
 8011a6c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011a70:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011a74:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 8011a76:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a7a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011a7e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011a82:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011a86:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8011a8a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011a8e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011a92:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8011a96:	8013      	strh	r3, [r2, #0]
 8011a98:	e012      	b.n	8011ac0 <create_DijkstraMap+0x3e8>
 8011a9a:	bf00      	nop
 8011a9c:	20000f30 	.word	0x20000f30
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8011aa0:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011aa4:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8011aa8:	881b      	ldrh	r3, [r3, #0]
 8011aaa:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011aae:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8011ab2:	8013      	strh	r3, [r2, #0]
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011aba:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011abe:	8013      	strh	r3, [r2, #0]
				if((wall.column[Ycoordinate+1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate+1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost){
 8011ac0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ac4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011ac8:	881b      	ldrh	r3, [r3, #0]
 8011aca:	3301      	adds	r3, #1
 8011acc:	4a70      	ldr	r2, [pc, #448]	; (8011c90 <create_DijkstraMap+0x5b8>)
 8011ace:	330c      	adds	r3, #12
 8011ad0:	005b      	lsls	r3, r3, #1
 8011ad2:	4413      	add	r3, r2
 8011ad4:	88db      	ldrh	r3, [r3, #6]
 8011ad6:	461a      	mov	r2, r3
 8011ad8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011adc:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011ae0:	881b      	ldrh	r3, [r3, #0]
 8011ae2:	fa42 f303 	asr.w	r3, r2, r3
 8011ae6:	f003 0301 	and.w	r3, r3, #1
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	f040 8094 	bne.w	8011c18 <create_DijkstraMap+0x540>
 8011af0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011af4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011af8:	881a      	ldrh	r2, [r3, #0]
 8011afa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011afe:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011b02:	881b      	ldrh	r3, [r3, #0]
 8011b04:	1c59      	adds	r1, r3, #1
 8011b06:	4863      	ldr	r0, [pc, #396]	; (8011c94 <create_DijkstraMap+0x5bc>)
 8011b08:	4613      	mov	r3, r2
 8011b0a:	011b      	lsls	r3, r3, #4
 8011b0c:	1a9b      	subs	r3, r3, r2
 8011b0e:	440b      	add	r3, r1
 8011b10:	33f0      	adds	r3, #240	; 0xf0
 8011b12:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011b16:	461c      	mov	r4, r3
 8011b18:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b1c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011b20:	881a      	ldrh	r2, [r3, #0]
 8011b22:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b26:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011b2a:	8819      	ldrh	r1, [r3, #0]
 8011b2c:	4859      	ldr	r0, [pc, #356]	; (8011c94 <create_DijkstraMap+0x5bc>)
 8011b2e:	4613      	mov	r3, r2
 8011b30:	011b      	lsls	r3, r3, #4
 8011b32:	1a9b      	subs	r3, r3, r2
 8011b34:	440b      	add	r3, r1
 8011b36:	33f0      	adds	r3, #240	; 0xf0
 8011b38:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011b3c:	461a      	mov	r2, r3
 8011b3e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b42:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8011b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b4a:	4413      	add	r3, r2
 8011b4c:	429c      	cmp	r4, r3
 8011b4e:	dd63      	ble.n	8011c18 <create_DijkstraMap+0x540>
					Dijkstra.column_count[Xcoordinate][Ycoordinate+1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost;
 8011b50:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b54:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011b58:	881a      	ldrh	r2, [r3, #0]
 8011b5a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b5e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011b62:	8819      	ldrh	r1, [r3, #0]
 8011b64:	484b      	ldr	r0, [pc, #300]	; (8011c94 <create_DijkstraMap+0x5bc>)
 8011b66:	4613      	mov	r3, r2
 8011b68:	011b      	lsls	r3, r3, #4
 8011b6a:	1a9b      	subs	r3, r3, r2
 8011b6c:	440b      	add	r3, r1
 8011b6e:	33f0      	adds	r3, #240	; 0xf0
 8011b70:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011b74:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b78:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8011b7c:	881b      	ldrh	r3, [r3, #0]
 8011b7e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011b82:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8011b86:	8812      	ldrh	r2, [r2, #0]
 8011b88:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8011b8c:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8011b90:	8809      	ldrh	r1, [r1, #0]
 8011b92:	3101      	adds	r1, #1
 8011b94:	4403      	add	r3, r0
 8011b96:	b29c      	uxth	r4, r3
 8011b98:	483e      	ldr	r0, [pc, #248]	; (8011c94 <create_DijkstraMap+0x5bc>)
 8011b9a:	4613      	mov	r3, r2
 8011b9c:	011b      	lsls	r3, r3, #4
 8011b9e:	1a9b      	subs	r3, r3, r2
 8011ba0:	440b      	add	r3, r1
 8011ba2:	33f0      	adds	r3, #240	; 0xf0
 8011ba4:	4622      	mov	r2, r4
 8011ba6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011baa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011bae:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011bb2:	881a      	ldrh	r2, [r3, #0]
 8011bb4:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011bb8:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011bbc:	4611      	mov	r1, r2
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	f003 f8dc 	bl	8014d7c <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate + 1);
 8011bc4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011bc8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011bcc:	881b      	ldrh	r3, [r3, #0]
 8011bce:	3301      	adds	r3, #1
 8011bd0:	b29a      	uxth	r2, r3
 8011bd2:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011bd6:	f103 0320 	add.w	r3, r3, #32
 8011bda:	3b0c      	subs	r3, #12
 8011bdc:	4611      	mov	r1, r2
 8011bde:	4618      	mov	r0, r3
 8011be0:	f003 f8cc 	bl	8014d7c <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8011be4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011be8:	3b14      	subs	r3, #20
 8011bea:	2100      	movs	r1, #0
 8011bec:	4618      	mov	r0, r3
 8011bee:	f003 f8c5 	bl	8014d7c <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH);
 8011bf2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011bf6:	3b3c      	subs	r3, #60	; 0x3c
 8011bf8:	2100      	movs	r1, #0
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	f003 f8be 	bl	8014d7c <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011c00:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c04:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011c08:	881a      	ldrh	r2, [r3, #0]
 8011c0a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011c0e:	3b64      	subs	r3, #100	; 0x64
 8011c10:	4611      	mov	r1, r2
 8011c12:	4618      	mov	r0, r3
 8011c14:	f003 f8b2 	bl	8014d7c <pushStack_walk>
				}
			}
			if (Ycoordinate >= 1) {
 8011c18:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c1c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011c20:	881b      	ldrh	r3, [r3, #0]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	f000 80f4 	beq.w	8011e10 <create_DijkstraMap+0x738>
				if(Direction==SLANT_SOUTH){
 8011c28:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c2c:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8011c30:	881b      	ldrh	r3, [r3, #0]
 8011c32:	2b04      	cmp	r3, #4
 8011c34:	d130      	bne.n	8011c98 <create_DijkstraMap+0x5c0>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8011c36:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c3a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8011c3e:	881b      	ldrh	r3, [r3, #0]
 8011c40:	3301      	adds	r3, #1
 8011c42:	b29b      	uxth	r3, r3
 8011c44:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011c48:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011c4c:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8011c4e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c52:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c5a:	2b04      	cmp	r3, #4
 8011c5c:	dd05      	ble.n	8011c6a <create_DijkstraMap+0x592>
 8011c5e:	2304      	movs	r3, #4
 8011c60:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011c64:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011c68:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 8011c6a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c6e:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011c72:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011c76:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011c7a:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8011c7e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011c82:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011c86:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8011c8a:	8013      	strh	r3, [r2, #0]
 8011c8c:	e014      	b.n	8011cb8 <create_DijkstraMap+0x5e0>
 8011c8e:	bf00      	nop
 8011c90:	20000c3c 	.word	0x20000c3c
 8011c94:	20000f30 	.word	0x20000f30
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8011c98:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011c9c:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8011ca0:	881b      	ldrh	r3, [r3, #0]
 8011ca2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011ca6:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8011caa:	8013      	strh	r3, [r2, #0]
 8011cac:	2300      	movs	r3, #0
 8011cae:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011cb2:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011cb6:	8013      	strh	r3, [r2, #0]
				if((wall.column[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost){
 8011cb8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011cbc:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011cc0:	881b      	ldrh	r3, [r3, #0]
 8011cc2:	3b01      	subs	r3, #1
 8011cc4:	4a70      	ldr	r2, [pc, #448]	; (8011e88 <create_DijkstraMap+0x7b0>)
 8011cc6:	330c      	adds	r3, #12
 8011cc8:	005b      	lsls	r3, r3, #1
 8011cca:	4413      	add	r3, r2
 8011ccc:	88db      	ldrh	r3, [r3, #6]
 8011cce:	461a      	mov	r2, r3
 8011cd0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011cd4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011cd8:	881b      	ldrh	r3, [r3, #0]
 8011cda:	fa42 f303 	asr.w	r3, r2, r3
 8011cde:	f003 0301 	and.w	r3, r3, #1
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	f040 8094 	bne.w	8011e10 <create_DijkstraMap+0x738>
 8011ce8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011cec:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011cf0:	881a      	ldrh	r2, [r3, #0]
 8011cf2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011cf6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011cfa:	881b      	ldrh	r3, [r3, #0]
 8011cfc:	1e59      	subs	r1, r3, #1
 8011cfe:	4863      	ldr	r0, [pc, #396]	; (8011e8c <create_DijkstraMap+0x7b4>)
 8011d00:	4613      	mov	r3, r2
 8011d02:	011b      	lsls	r3, r3, #4
 8011d04:	1a9b      	subs	r3, r3, r2
 8011d06:	440b      	add	r3, r1
 8011d08:	33f0      	adds	r3, #240	; 0xf0
 8011d0a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011d0e:	461c      	mov	r4, r3
 8011d10:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d14:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011d18:	881a      	ldrh	r2, [r3, #0]
 8011d1a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d1e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011d22:	8819      	ldrh	r1, [r3, #0]
 8011d24:	4859      	ldr	r0, [pc, #356]	; (8011e8c <create_DijkstraMap+0x7b4>)
 8011d26:	4613      	mov	r3, r2
 8011d28:	011b      	lsls	r3, r3, #4
 8011d2a:	1a9b      	subs	r3, r3, r2
 8011d2c:	440b      	add	r3, r1
 8011d2e:	33f0      	adds	r3, #240	; 0xf0
 8011d30:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011d34:	461a      	mov	r2, r3
 8011d36:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d3a:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8011d3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011d42:	4413      	add	r3, r2
 8011d44:	429c      	cmp	r4, r3
 8011d46:	dd63      	ble.n	8011e10 <create_DijkstraMap+0x738>
					Dijkstra.column_count[Xcoordinate][Ycoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost;
 8011d48:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d4c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011d50:	881a      	ldrh	r2, [r3, #0]
 8011d52:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d56:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011d5a:	8819      	ldrh	r1, [r3, #0]
 8011d5c:	484b      	ldr	r0, [pc, #300]	; (8011e8c <create_DijkstraMap+0x7b4>)
 8011d5e:	4613      	mov	r3, r2
 8011d60:	011b      	lsls	r3, r3, #4
 8011d62:	1a9b      	subs	r3, r3, r2
 8011d64:	440b      	add	r3, r1
 8011d66:	33f0      	adds	r3, #240	; 0xf0
 8011d68:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011d6c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d70:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8011d74:	881b      	ldrh	r3, [r3, #0]
 8011d76:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011d7a:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8011d7e:	8812      	ldrh	r2, [r2, #0]
 8011d80:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8011d84:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8011d88:	8809      	ldrh	r1, [r1, #0]
 8011d8a:	3901      	subs	r1, #1
 8011d8c:	4403      	add	r3, r0
 8011d8e:	b29c      	uxth	r4, r3
 8011d90:	483e      	ldr	r0, [pc, #248]	; (8011e8c <create_DijkstraMap+0x7b4>)
 8011d92:	4613      	mov	r3, r2
 8011d94:	011b      	lsls	r3, r3, #4
 8011d96:	1a9b      	subs	r3, r3, r2
 8011d98:	440b      	add	r3, r1
 8011d9a:	33f0      	adds	r3, #240	; 0xf0
 8011d9c:	4622      	mov	r2, r4
 8011d9e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011da2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011da6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011daa:	881a      	ldrh	r2, [r3, #0]
 8011dac:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011db0:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011db4:	4611      	mov	r1, r2
 8011db6:	4618      	mov	r0, r3
 8011db8:	f002 ffe0 	bl	8014d7c <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate - 1);
 8011dbc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011dc0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011dc4:	881b      	ldrh	r3, [r3, #0]
 8011dc6:	3b01      	subs	r3, #1
 8011dc8:	b29a      	uxth	r2, r3
 8011dca:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011dce:	f103 0320 	add.w	r3, r3, #32
 8011dd2:	3b0c      	subs	r3, #12
 8011dd4:	4611      	mov	r1, r2
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f002 ffd0 	bl	8014d7c <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8011ddc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011de0:	3b14      	subs	r3, #20
 8011de2:	2100      	movs	r1, #0
 8011de4:	4618      	mov	r0, r3
 8011de6:	f002 ffc9 	bl	8014d7c <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH);
 8011dea:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011dee:	3b3c      	subs	r3, #60	; 0x3c
 8011df0:	2104      	movs	r1, #4
 8011df2:	4618      	mov	r0, r3
 8011df4:	f002 ffc2 	bl	8014d7c <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011df8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011dfc:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011e00:	881a      	ldrh	r2, [r3, #0]
 8011e02:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011e06:	3b64      	subs	r3, #100	; 0x64
 8011e08:	4611      	mov	r1, r2
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	f002 ffb6 	bl	8014d7c <pushStack_walk>
				}
			}
			if (Xcoordinate <= 14) {
 8011e10:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e14:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011e18:	881b      	ldrh	r3, [r3, #0]
 8011e1a:	2b0e      	cmp	r3, #14
 8011e1c:	f200 81da 	bhi.w	80121d4 <create_DijkstraMap+0xafc>
				if(Direction==SLANT_SOUTH_EAST){
 8011e20:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e24:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8011e28:	881b      	ldrh	r3, [r3, #0]
 8011e2a:	2b03      	cmp	r3, #3
 8011e2c:	d130      	bne.n	8011e90 <create_DijkstraMap+0x7b8>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8011e2e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e32:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8011e36:	881b      	ldrh	r3, [r3, #0]
 8011e38:	3301      	adds	r3, #1
 8011e3a:	b29b      	uxth	r3, r3
 8011e3c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011e40:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011e44:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8011e46:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e4a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e52:	2b05      	cmp	r3, #5
 8011e54:	dd05      	ble.n	8011e62 <create_DijkstraMap+0x78a>
 8011e56:	2305      	movs	r3, #5
 8011e58:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011e5c:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011e60:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8011e62:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e66:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011e6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011e6e:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011e72:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011e76:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011e7a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011e7e:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011e82:	8013      	strh	r3, [r2, #0]
 8011e84:	e014      	b.n	8011eb0 <create_DijkstraMap+0x7d8>
 8011e86:	bf00      	nop
 8011e88:	20000c3c 	.word	0x20000c3c
 8011e8c:	20000f30 	.word	0x20000f30
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8011e90:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011e94:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011e98:	881b      	ldrh	r3, [r3, #0]
 8011e9a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011e9e:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011ea2:	8013      	strh	r3, [r2, #0]
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011eaa:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011eae:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8011eb0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011eb4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011eb8:	881b      	ldrh	r3, [r3, #0]
 8011eba:	4a68      	ldr	r2, [pc, #416]	; (801205c <create_DijkstraMap+0x984>)
 8011ebc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ec0:	461a      	mov	r2, r3
 8011ec2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ec6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011eca:	881b      	ldrh	r3, [r3, #0]
 8011ecc:	fa42 f303 	asr.w	r3, r2, r3
 8011ed0:	f003 0301 	and.w	r3, r3, #1
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	f040 808e 	bne.w	8011ff6 <create_DijkstraMap+0x91e>
 8011eda:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ede:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011ee2:	881a      	ldrh	r2, [r3, #0]
 8011ee4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ee8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011eec:	8819      	ldrh	r1, [r3, #0]
 8011eee:	485c      	ldr	r0, [pc, #368]	; (8012060 <create_DijkstraMap+0x988>)
 8011ef0:	4613      	mov	r3, r2
 8011ef2:	011b      	lsls	r3, r3, #4
 8011ef4:	1a9b      	subs	r3, r3, r2
 8011ef6:	440b      	add	r3, r1
 8011ef8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011efc:	461c      	mov	r4, r3
 8011efe:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f02:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011f06:	881a      	ldrh	r2, [r3, #0]
 8011f08:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f0c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011f10:	8819      	ldrh	r1, [r3, #0]
 8011f12:	4853      	ldr	r0, [pc, #332]	; (8012060 <create_DijkstraMap+0x988>)
 8011f14:	4613      	mov	r3, r2
 8011f16:	011b      	lsls	r3, r3, #4
 8011f18:	1a9b      	subs	r3, r3, r2
 8011f1a:	440b      	add	r3, r1
 8011f1c:	33f0      	adds	r3, #240	; 0xf0
 8011f1e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011f22:	461a      	mov	r2, r3
 8011f24:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f28:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8011f2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011f30:	4413      	add	r3, r2
 8011f32:	429c      	cmp	r4, r3
 8011f34:	dd5f      	ble.n	8011ff6 <create_DijkstraMap+0x91e>
					Dijkstra.row_count[Ycoordinate][Xcoordinate]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8011f36:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f3a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011f3e:	881a      	ldrh	r2, [r3, #0]
 8011f40:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f44:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011f48:	8819      	ldrh	r1, [r3, #0]
 8011f4a:	4845      	ldr	r0, [pc, #276]	; (8012060 <create_DijkstraMap+0x988>)
 8011f4c:	4613      	mov	r3, r2
 8011f4e:	011b      	lsls	r3, r3, #4
 8011f50:	1a9b      	subs	r3, r3, r2
 8011f52:	440b      	add	r3, r1
 8011f54:	33f0      	adds	r3, #240	; 0xf0
 8011f56:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011f5a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f5e:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8011f62:	881b      	ldrh	r3, [r3, #0]
 8011f64:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011f68:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8011f6c:	8812      	ldrh	r2, [r2, #0]
 8011f6e:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8011f72:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8011f76:	8809      	ldrh	r1, [r1, #0]
 8011f78:	4403      	add	r3, r0
 8011f7a:	b29c      	uxth	r4, r3
 8011f7c:	4838      	ldr	r0, [pc, #224]	; (8012060 <create_DijkstraMap+0x988>)
 8011f7e:	4613      	mov	r3, r2
 8011f80:	011b      	lsls	r3, r3, #4
 8011f82:	1a9b      	subs	r3, r3, r2
 8011f84:	440b      	add	r3, r1
 8011f86:	4622      	mov	r2, r4
 8011f88:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011f8c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f90:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011f94:	881a      	ldrh	r2, [r3, #0]
 8011f96:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011f9a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011f9e:	4611      	mov	r1, r2
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	f002 feeb 	bl	8014d7c <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 8011fa6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011faa:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011fae:	881a      	ldrh	r2, [r3, #0]
 8011fb0:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011fb4:	f103 0320 	add.w	r3, r3, #32
 8011fb8:	3b0c      	subs	r3, #12
 8011fba:	4611      	mov	r1, r2
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	f002 fedd 	bl	8014d7c <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8011fc2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011fc6:	3b14      	subs	r3, #20
 8011fc8:	2101      	movs	r1, #1
 8011fca:	4618      	mov	r0, r3
 8011fcc:	f002 fed6 	bl	8014d7c <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 8011fd0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011fd4:	3b3c      	subs	r3, #60	; 0x3c
 8011fd6:	2103      	movs	r1, #3
 8011fd8:	4618      	mov	r0, r3
 8011fda:	f002 fecf 	bl	8014d7c <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011fde:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011fe2:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011fe6:	881a      	ldrh	r2, [r3, #0]
 8011fe8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011fec:	3b64      	subs	r3, #100	; 0x64
 8011fee:	4611      	mov	r1, r2
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f002 fec3 	bl	8014d7c <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_EAST){
 8011ff6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ffa:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8011ffe:	881b      	ldrh	r3, [r3, #0]
 8012000:	2b01      	cmp	r3, #1
 8012002:	d12f      	bne.n	8012064 <create_DijkstraMap+0x98c>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012004:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012008:	f103 0364 	add.w	r3, r3, #100	; 0x64
 801200c:	881b      	ldrh	r3, [r3, #0]
 801200e:	3301      	adds	r3, #1
 8012010:	b29b      	uxth	r3, r3
 8012012:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012016:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801201a:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 801201c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012020:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012024:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012028:	2b05      	cmp	r3, #5
 801202a:	dd05      	ble.n	8012038 <create_DijkstraMap+0x960>
 801202c:	2305      	movs	r3, #5
 801202e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012032:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012036:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8012038:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801203c:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012040:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012044:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012048:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801204c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012050:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012054:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012058:	8013      	strh	r3, [r2, #0]
 801205a:	e013      	b.n	8012084 <create_DijkstraMap+0x9ac>
 801205c:	20000c3c 	.word	0x20000c3c
 8012060:	20000f30 	.word	0x20000f30
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012064:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012068:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801206c:	881b      	ldrh	r3, [r3, #0]
 801206e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012072:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012076:	8013      	strh	r3, [r2, #0]
 8012078:	2300      	movs	r3, #0
 801207a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801207e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012082:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate] & (1 << (Ycoordinate+1)))==0 && Dijkstra.row_count[Ycoordinate+1][Xcoordinate]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8012084:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012088:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801208c:	881b      	ldrh	r3, [r3, #0]
 801208e:	4a6f      	ldr	r2, [pc, #444]	; (801224c <create_DijkstraMap+0xb74>)
 8012090:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012094:	461a      	mov	r2, r3
 8012096:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801209a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801209e:	881b      	ldrh	r3, [r3, #0]
 80120a0:	3301      	adds	r3, #1
 80120a2:	fa42 f303 	asr.w	r3, r2, r3
 80120a6:	f003 0301 	and.w	r3, r3, #1
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	f040 8092 	bne.w	80121d4 <create_DijkstraMap+0xafc>
 80120b0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120b4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80120b8:	881b      	ldrh	r3, [r3, #0]
 80120ba:	1c5a      	adds	r2, r3, #1
 80120bc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120c0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80120c4:	8819      	ldrh	r1, [r3, #0]
 80120c6:	4862      	ldr	r0, [pc, #392]	; (8012250 <create_DijkstraMap+0xb78>)
 80120c8:	4613      	mov	r3, r2
 80120ca:	011b      	lsls	r3, r3, #4
 80120cc:	1a9b      	subs	r3, r3, r2
 80120ce:	440b      	add	r3, r1
 80120d0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80120d4:	461c      	mov	r4, r3
 80120d6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120da:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80120de:	881a      	ldrh	r2, [r3, #0]
 80120e0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120e4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80120e8:	8819      	ldrh	r1, [r3, #0]
 80120ea:	4859      	ldr	r0, [pc, #356]	; (8012250 <create_DijkstraMap+0xb78>)
 80120ec:	4613      	mov	r3, r2
 80120ee:	011b      	lsls	r3, r3, #4
 80120f0:	1a9b      	subs	r3, r3, r2
 80120f2:	440b      	add	r3, r1
 80120f4:	33f0      	adds	r3, #240	; 0xf0
 80120f6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80120fa:	461a      	mov	r2, r3
 80120fc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012100:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012108:	4413      	add	r3, r2
 801210a:	429c      	cmp	r4, r3
 801210c:	dd62      	ble.n	80121d4 <create_DijkstraMap+0xafc>
					Dijkstra.row_count[Ycoordinate+1][Xcoordinate]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 801210e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012112:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012116:	881a      	ldrh	r2, [r3, #0]
 8012118:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801211c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012120:	8819      	ldrh	r1, [r3, #0]
 8012122:	484b      	ldr	r0, [pc, #300]	; (8012250 <create_DijkstraMap+0xb78>)
 8012124:	4613      	mov	r3, r2
 8012126:	011b      	lsls	r3, r3, #4
 8012128:	1a9b      	subs	r3, r3, r2
 801212a:	440b      	add	r3, r1
 801212c:	33f0      	adds	r3, #240	; 0xf0
 801212e:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012132:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012136:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 801213a:	881b      	ldrh	r3, [r3, #0]
 801213c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012140:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012144:	8812      	ldrh	r2, [r2, #0]
 8012146:	3201      	adds	r2, #1
 8012148:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 801214c:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8012150:	8809      	ldrh	r1, [r1, #0]
 8012152:	4403      	add	r3, r0
 8012154:	b29c      	uxth	r4, r3
 8012156:	483e      	ldr	r0, [pc, #248]	; (8012250 <create_DijkstraMap+0xb78>)
 8012158:	4613      	mov	r3, r2
 801215a:	011b      	lsls	r3, r3, #4
 801215c:	1a9b      	subs	r3, r3, r2
 801215e:	440b      	add	r3, r1
 8012160:	4622      	mov	r2, r4
 8012162:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8012166:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801216a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801216e:	881a      	ldrh	r2, [r3, #0]
 8012170:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012174:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012178:	4611      	mov	r1, r2
 801217a:	4618      	mov	r0, r3
 801217c:	f002 fdfe 	bl	8014d7c <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 8012180:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012184:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012188:	881b      	ldrh	r3, [r3, #0]
 801218a:	3301      	adds	r3, #1
 801218c:	b29a      	uxth	r2, r3
 801218e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012192:	f103 0320 	add.w	r3, r3, #32
 8012196:	3b0c      	subs	r3, #12
 8012198:	4611      	mov	r1, r2
 801219a:	4618      	mov	r0, r3
 801219c:	f002 fdee 	bl	8014d7c <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 80121a0:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80121a4:	3b14      	subs	r3, #20
 80121a6:	2101      	movs	r1, #1
 80121a8:	4618      	mov	r0, r3
 80121aa:	f002 fde7 	bl	8014d7c <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 80121ae:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80121b2:	3b3c      	subs	r3, #60	; 0x3c
 80121b4:	2101      	movs	r1, #1
 80121b6:	4618      	mov	r0, r3
 80121b8:	f002 fde0 	bl	8014d7c <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 80121bc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121c0:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80121c4:	881a      	ldrh	r2, [r3, #0]
 80121c6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80121ca:	3b64      	subs	r3, #100	; 0x64
 80121cc:	4611      	mov	r1, r2
 80121ce:	4618      	mov	r0, r3
 80121d0:	f002 fdd4 	bl	8014d7c <pushStack_walk>
				}
			}
			if (Xcoordinate >= 1) {
 80121d4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121d8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80121dc:	881b      	ldrh	r3, [r3, #0]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	f000 81e5 	beq.w	80125ae <create_DijkstraMap+0xed6>
				if(Direction==SLANT_SOUTH_WEST){
 80121e4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121e8:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80121ec:	881b      	ldrh	r3, [r3, #0]
 80121ee:	2b05      	cmp	r3, #5
 80121f0:	d130      	bne.n	8012254 <create_DijkstraMap+0xb7c>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80121f2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121f6:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80121fa:	881b      	ldrh	r3, [r3, #0]
 80121fc:	3301      	adds	r3, #1
 80121fe:	b29b      	uxth	r3, r3
 8012200:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012204:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012208:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 801220a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801220e:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012216:	2b05      	cmp	r3, #5
 8012218:	dd05      	ble.n	8012226 <create_DijkstraMap+0xb4e>
 801221a:	2305      	movs	r3, #5
 801221c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012220:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012224:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8012226:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801222a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801222e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012232:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012236:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801223a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801223e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012242:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012246:	8013      	strh	r3, [r2, #0]
 8012248:	e014      	b.n	8012274 <create_DijkstraMap+0xb9c>
 801224a:	bf00      	nop
 801224c:	20000c3c 	.word	0x20000c3c
 8012250:	20000f30 	.word	0x20000f30
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012254:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012258:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801225c:	881b      	ldrh	r3, [r3, #0]
 801225e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012262:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012266:	8013      	strh	r3, [r2, #0]
 8012268:	2300      	movs	r3, #0
 801226a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801226e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012272:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8012274:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012278:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801227c:	881b      	ldrh	r3, [r3, #0]
 801227e:	3b01      	subs	r3, #1
 8012280:	4a6a      	ldr	r2, [pc, #424]	; (801242c <create_DijkstraMap+0xd54>)
 8012282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012286:	461a      	mov	r2, r3
 8012288:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801228c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012290:	881b      	ldrh	r3, [r3, #0]
 8012292:	fa42 f303 	asr.w	r3, r2, r3
 8012296:	f003 0301 	and.w	r3, r3, #1
 801229a:	2b00      	cmp	r3, #0
 801229c:	f040 8092 	bne.w	80123c4 <create_DijkstraMap+0xcec>
 80122a0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122a4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80122a8:	881a      	ldrh	r2, [r3, #0]
 80122aa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122ae:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80122b2:	881b      	ldrh	r3, [r3, #0]
 80122b4:	1e59      	subs	r1, r3, #1
 80122b6:	485e      	ldr	r0, [pc, #376]	; (8012430 <create_DijkstraMap+0xd58>)
 80122b8:	4613      	mov	r3, r2
 80122ba:	011b      	lsls	r3, r3, #4
 80122bc:	1a9b      	subs	r3, r3, r2
 80122be:	440b      	add	r3, r1
 80122c0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80122c4:	461c      	mov	r4, r3
 80122c6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122ca:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80122ce:	881a      	ldrh	r2, [r3, #0]
 80122d0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122d4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80122d8:	8819      	ldrh	r1, [r3, #0]
 80122da:	4855      	ldr	r0, [pc, #340]	; (8012430 <create_DijkstraMap+0xd58>)
 80122dc:	4613      	mov	r3, r2
 80122de:	011b      	lsls	r3, r3, #4
 80122e0:	1a9b      	subs	r3, r3, r2
 80122e2:	440b      	add	r3, r1
 80122e4:	33f0      	adds	r3, #240	; 0xf0
 80122e6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80122ea:	461a      	mov	r2, r3
 80122ec:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122f0:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80122f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80122f8:	4413      	add	r3, r2
 80122fa:	429c      	cmp	r4, r3
 80122fc:	dd62      	ble.n	80123c4 <create_DijkstraMap+0xcec>
					Dijkstra.row_count[Ycoordinate][Xcoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 80122fe:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012302:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012306:	881a      	ldrh	r2, [r3, #0]
 8012308:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801230c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012310:	8819      	ldrh	r1, [r3, #0]
 8012312:	4847      	ldr	r0, [pc, #284]	; (8012430 <create_DijkstraMap+0xd58>)
 8012314:	4613      	mov	r3, r2
 8012316:	011b      	lsls	r3, r3, #4
 8012318:	1a9b      	subs	r3, r3, r2
 801231a:	440b      	add	r3, r1
 801231c:	33f0      	adds	r3, #240	; 0xf0
 801231e:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012322:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012326:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 801232a:	881b      	ldrh	r3, [r3, #0]
 801232c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012330:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012334:	8812      	ldrh	r2, [r2, #0]
 8012336:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 801233a:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 801233e:	8809      	ldrh	r1, [r1, #0]
 8012340:	3901      	subs	r1, #1
 8012342:	4403      	add	r3, r0
 8012344:	b29c      	uxth	r4, r3
 8012346:	483a      	ldr	r0, [pc, #232]	; (8012430 <create_DijkstraMap+0xd58>)
 8012348:	4613      	mov	r3, r2
 801234a:	011b      	lsls	r3, r3, #4
 801234c:	1a9b      	subs	r3, r3, r2
 801234e:	440b      	add	r3, r1
 8012350:	4622      	mov	r2, r4
 8012352:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 8012356:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801235a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801235e:	881b      	ldrh	r3, [r3, #0]
 8012360:	3b01      	subs	r3, #1
 8012362:	b29a      	uxth	r2, r3
 8012364:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012368:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801236c:	4611      	mov	r1, r2
 801236e:	4618      	mov	r0, r3
 8012370:	f002 fd04 	bl	8014d7c <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 8012374:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012378:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801237c:	881a      	ldrh	r2, [r3, #0]
 801237e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012382:	f103 0320 	add.w	r3, r3, #32
 8012386:	3b0c      	subs	r3, #12
 8012388:	4611      	mov	r1, r2
 801238a:	4618      	mov	r0, r3
 801238c:	f002 fcf6 	bl	8014d7c <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8012390:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012394:	3b14      	subs	r3, #20
 8012396:	2101      	movs	r1, #1
 8012398:	4618      	mov	r0, r3
 801239a:	f002 fcef 	bl	8014d7c <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 801239e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80123a2:	3b3c      	subs	r3, #60	; 0x3c
 80123a4:	2105      	movs	r1, #5
 80123a6:	4618      	mov	r0, r3
 80123a8:	f002 fce8 	bl	8014d7c <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 80123ac:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123b0:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80123b4:	881a      	ldrh	r2, [r3, #0]
 80123b6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80123ba:	3b64      	subs	r3, #100	; 0x64
 80123bc:	4611      	mov	r1, r2
 80123be:	4618      	mov	r0, r3
 80123c0:	f002 fcdc 	bl	8014d7c <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_WEST){
 80123c4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123c8:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80123cc:	881b      	ldrh	r3, [r3, #0]
 80123ce:	2b07      	cmp	r3, #7
 80123d0:	d130      	bne.n	8012434 <create_DijkstraMap+0xd5c>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80123d2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123d6:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80123da:	881b      	ldrh	r3, [r3, #0]
 80123dc:	3301      	adds	r3, #1
 80123de:	b29b      	uxth	r3, r3
 80123e0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80123e4:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80123e8:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 80123ea:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123ee:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80123f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80123f6:	2b05      	cmp	r3, #5
 80123f8:	dd05      	ble.n	8012406 <create_DijkstraMap+0xd2e>
 80123fa:	2305      	movs	r3, #5
 80123fc:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012400:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012404:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8012406:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801240a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801240e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012412:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012416:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801241a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801241e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012422:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012426:	8013      	strh	r3, [r2, #0]
 8012428:	e014      	b.n	8012454 <create_DijkstraMap+0xd7c>
 801242a:	bf00      	nop
 801242c:	20000c3c 	.word	0x20000c3c
 8012430:	20000f30 	.word	0x20000f30
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012434:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012438:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801243c:	881b      	ldrh	r3, [r3, #0]
 801243e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012442:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012446:	8013      	strh	r3, [r2, #0]
 8012448:	2300      	movs	r3, #0
 801244a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801244e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012452:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate-1] & (1 << (Ycoordinate+1)))==0 && Dijkstra.row_count[Ycoordinate+1][Xcoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8012454:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012458:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801245c:	881b      	ldrh	r3, [r3, #0]
 801245e:	3b01      	subs	r3, #1
 8012460:	4a74      	ldr	r2, [pc, #464]	; (8012634 <create_DijkstraMap+0xf5c>)
 8012462:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012466:	461a      	mov	r2, r3
 8012468:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801246c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012470:	881b      	ldrh	r3, [r3, #0]
 8012472:	3301      	adds	r3, #1
 8012474:	fa42 f303 	asr.w	r3, r2, r3
 8012478:	f003 0301 	and.w	r3, r3, #1
 801247c:	2b00      	cmp	r3, #0
 801247e:	f040 8096 	bne.w	80125ae <create_DijkstraMap+0xed6>
 8012482:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012486:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801248a:	881b      	ldrh	r3, [r3, #0]
 801248c:	1c5a      	adds	r2, r3, #1
 801248e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012492:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012496:	881b      	ldrh	r3, [r3, #0]
 8012498:	1e59      	subs	r1, r3, #1
 801249a:	4867      	ldr	r0, [pc, #412]	; (8012638 <create_DijkstraMap+0xf60>)
 801249c:	4613      	mov	r3, r2
 801249e:	011b      	lsls	r3, r3, #4
 80124a0:	1a9b      	subs	r3, r3, r2
 80124a2:	440b      	add	r3, r1
 80124a4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80124a8:	461c      	mov	r4, r3
 80124aa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124ae:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80124b2:	881a      	ldrh	r2, [r3, #0]
 80124b4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124b8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80124bc:	8819      	ldrh	r1, [r3, #0]
 80124be:	485e      	ldr	r0, [pc, #376]	; (8012638 <create_DijkstraMap+0xf60>)
 80124c0:	4613      	mov	r3, r2
 80124c2:	011b      	lsls	r3, r3, #4
 80124c4:	1a9b      	subs	r3, r3, r2
 80124c6:	440b      	add	r3, r1
 80124c8:	33f0      	adds	r3, #240	; 0xf0
 80124ca:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80124ce:	461a      	mov	r2, r3
 80124d0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124d4:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80124d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80124dc:	4413      	add	r3, r2
 80124de:	429c      	cmp	r4, r3
 80124e0:	dd65      	ble.n	80125ae <create_DijkstraMap+0xed6>
					Dijkstra.row_count[Ycoordinate+1][Xcoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 80124e2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124e6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80124ea:	881a      	ldrh	r2, [r3, #0]
 80124ec:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124f0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80124f4:	8819      	ldrh	r1, [r3, #0]
 80124f6:	4850      	ldr	r0, [pc, #320]	; (8012638 <create_DijkstraMap+0xf60>)
 80124f8:	4613      	mov	r3, r2
 80124fa:	011b      	lsls	r3, r3, #4
 80124fc:	1a9b      	subs	r3, r3, r2
 80124fe:	440b      	add	r3, r1
 8012500:	33f0      	adds	r3, #240	; 0xf0
 8012502:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012506:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801250a:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 801250e:	881b      	ldrh	r3, [r3, #0]
 8012510:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012514:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012518:	8812      	ldrh	r2, [r2, #0]
 801251a:	3201      	adds	r2, #1
 801251c:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012520:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8012524:	8809      	ldrh	r1, [r1, #0]
 8012526:	3901      	subs	r1, #1
 8012528:	4403      	add	r3, r0
 801252a:	b29c      	uxth	r4, r3
 801252c:	4842      	ldr	r0, [pc, #264]	; (8012638 <create_DijkstraMap+0xf60>)
 801252e:	4613      	mov	r3, r2
 8012530:	011b      	lsls	r3, r3, #4
 8012532:	1a9b      	subs	r3, r3, r2
 8012534:	440b      	add	r3, r1
 8012536:	4622      	mov	r2, r4
 8012538:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 801253c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012540:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012544:	881b      	ldrh	r3, [r3, #0]
 8012546:	3b01      	subs	r3, #1
 8012548:	b29a      	uxth	r2, r3
 801254a:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801254e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012552:	4611      	mov	r1, r2
 8012554:	4618      	mov	r0, r3
 8012556:	f002 fc11 	bl	8014d7c <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 801255a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801255e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012562:	881b      	ldrh	r3, [r3, #0]
 8012564:	3301      	adds	r3, #1
 8012566:	b29a      	uxth	r2, r3
 8012568:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801256c:	f103 0320 	add.w	r3, r3, #32
 8012570:	3b0c      	subs	r3, #12
 8012572:	4611      	mov	r1, r2
 8012574:	4618      	mov	r0, r3
 8012576:	f002 fc01 	bl	8014d7c <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 801257a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801257e:	3b14      	subs	r3, #20
 8012580:	2101      	movs	r1, #1
 8012582:	4618      	mov	r0, r3
 8012584:	f002 fbfa 	bl	8014d7c <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 8012588:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801258c:	3b3c      	subs	r3, #60	; 0x3c
 801258e:	2107      	movs	r1, #7
 8012590:	4618      	mov	r0, r3
 8012592:	f002 fbf3 	bl	8014d7c <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8012596:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801259a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801259e:	881a      	ldrh	r2, [r3, #0]
 80125a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80125a4:	3b64      	subs	r3, #100	; 0x64
 80125a6:	4611      	mov	r1, r2
 80125a8:	4618      	mov	r0, r3
 80125aa:	f002 fbe7 	bl	8014d7c <pushStack_walk>
				}
			}

		}
		if(Row_or_Column==ROW){
 80125ae:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125b2:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80125b6:	881b      	ldrh	r3, [r3, #0]
 80125b8:	2b01      	cmp	r3, #1
 80125ba:	f040 85bd 	bne.w	8013138 <create_DijkstraMap+0x1a60>
					if(Xcoordinate <= 13){
 80125be:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125c2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80125c6:	881b      	ldrh	r3, [r3, #0]
 80125c8:	2b0d      	cmp	r3, #13
 80125ca:	f200 80ed 	bhi.w	80127a8 <create_DijkstraMap+0x10d0>
						if(Direction==SLANT_EAST){
 80125ce:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125d2:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80125d6:	881b      	ldrh	r3, [r3, #0]
 80125d8:	2b02      	cmp	r3, #2
 80125da:	d12f      	bne.n	801263c <create_DijkstraMap+0xf64>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 80125dc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125e0:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80125e4:	881b      	ldrh	r3, [r3, #0]
 80125e6:	3301      	adds	r3, #1
 80125e8:	b29b      	uxth	r3, r3
 80125ea:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80125ee:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80125f2:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 80125f4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125f8:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80125fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012600:	2b04      	cmp	r3, #4
 8012602:	dd05      	ble.n	8012610 <create_DijkstraMap+0xf38>
 8012604:	2304      	movs	r3, #4
 8012606:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801260a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801260e:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 8012610:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012614:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012618:	f9b3 2000 	ldrsh.w	r2, [r3]
 801261c:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012620:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012624:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012628:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801262c:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8012630:	8013      	strh	r3, [r2, #0]
 8012632:	e013      	b.n	801265c <create_DijkstraMap+0xf84>
 8012634:	20000c3c 	.word	0x20000c3c
 8012638:	20000f30 	.word	0x20000f30
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 801263c:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012640:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012644:	881b      	ldrh	r3, [r3, #0]
 8012646:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801264a:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 801264e:	8013      	strh	r3, [r2, #0]
 8012650:	2300      	movs	r3, #0
 8012652:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012656:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801265a:	8013      	strh	r3, [r2, #0]
						if((wall.row[Xcoordinate+1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate+1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost){
 801265c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012660:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012664:	881b      	ldrh	r3, [r3, #0]
 8012666:	3301      	adds	r3, #1
 8012668:	4a6d      	ldr	r2, [pc, #436]	; (8012820 <create_DijkstraMap+0x1148>)
 801266a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801266e:	461a      	mov	r2, r3
 8012670:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012674:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012678:	881b      	ldrh	r3, [r3, #0]
 801267a:	fa42 f303 	asr.w	r3, r2, r3
 801267e:	f003 0301 	and.w	r3, r3, #1
 8012682:	2b00      	cmp	r3, #0
 8012684:	f040 8090 	bne.w	80127a8 <create_DijkstraMap+0x10d0>
 8012688:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801268c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012690:	881a      	ldrh	r2, [r3, #0]
 8012692:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012696:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801269a:	881b      	ldrh	r3, [r3, #0]
 801269c:	1c59      	adds	r1, r3, #1
 801269e:	4861      	ldr	r0, [pc, #388]	; (8012824 <create_DijkstraMap+0x114c>)
 80126a0:	4613      	mov	r3, r2
 80126a2:	011b      	lsls	r3, r3, #4
 80126a4:	1a9b      	subs	r3, r3, r2
 80126a6:	440b      	add	r3, r1
 80126a8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80126ac:	461c      	mov	r4, r3
 80126ae:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126b2:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80126b6:	881a      	ldrh	r2, [r3, #0]
 80126b8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126bc:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80126c0:	8819      	ldrh	r1, [r3, #0]
 80126c2:	4858      	ldr	r0, [pc, #352]	; (8012824 <create_DijkstraMap+0x114c>)
 80126c4:	4613      	mov	r3, r2
 80126c6:	011b      	lsls	r3, r3, #4
 80126c8:	1a9b      	subs	r3, r3, r2
 80126ca:	440b      	add	r3, r1
 80126cc:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80126d0:	461a      	mov	r2, r3
 80126d2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126d6:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80126da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80126de:	4413      	add	r3, r2
 80126e0:	429c      	cmp	r4, r3
 80126e2:	dd61      	ble.n	80127a8 <create_DijkstraMap+0x10d0>
							Dijkstra.row_count[Ycoordinate][Xcoordinate+1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost;
 80126e4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126e8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80126ec:	881a      	ldrh	r2, [r3, #0]
 80126ee:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126f2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80126f6:	8819      	ldrh	r1, [r3, #0]
 80126f8:	484a      	ldr	r0, [pc, #296]	; (8012824 <create_DijkstraMap+0x114c>)
 80126fa:	4613      	mov	r3, r2
 80126fc:	011b      	lsls	r3, r3, #4
 80126fe:	1a9b      	subs	r3, r3, r2
 8012700:	440b      	add	r3, r1
 8012702:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012706:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801270a:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 801270e:	881b      	ldrh	r3, [r3, #0]
 8012710:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012714:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012718:	8812      	ldrh	r2, [r2, #0]
 801271a:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 801271e:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8012722:	8809      	ldrh	r1, [r1, #0]
 8012724:	3101      	adds	r1, #1
 8012726:	4403      	add	r3, r0
 8012728:	b29c      	uxth	r4, r3
 801272a:	483e      	ldr	r0, [pc, #248]	; (8012824 <create_DijkstraMap+0x114c>)
 801272c:	4613      	mov	r3, r2
 801272e:	011b      	lsls	r3, r3, #4
 8012730:	1a9b      	subs	r3, r3, r2
 8012732:	440b      	add	r3, r1
 8012734:	4622      	mov	r2, r4
 8012736:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 801273a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801273e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012742:	881b      	ldrh	r3, [r3, #0]
 8012744:	3301      	adds	r3, #1
 8012746:	b29a      	uxth	r2, r3
 8012748:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801274c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012750:	4611      	mov	r1, r2
 8012752:	4618      	mov	r0, r3
 8012754:	f002 fb12 	bl	8014d7c <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012758:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801275c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012760:	881a      	ldrh	r2, [r3, #0]
 8012762:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012766:	f103 0320 	add.w	r3, r3, #32
 801276a:	3b0c      	subs	r3, #12
 801276c:	4611      	mov	r1, r2
 801276e:	4618      	mov	r0, r3
 8012770:	f002 fb04 	bl	8014d7c <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 8012774:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012778:	3b14      	subs	r3, #20
 801277a:	2101      	movs	r1, #1
 801277c:	4618      	mov	r0, r3
 801277e:	f002 fafd 	bl	8014d7c <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_EAST);
 8012782:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012786:	3b3c      	subs	r3, #60	; 0x3c
 8012788:	2102      	movs	r1, #2
 801278a:	4618      	mov	r0, r3
 801278c:	f002 faf6 	bl	8014d7c <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012790:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012794:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012798:	881a      	ldrh	r2, [r3, #0]
 801279a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801279e:	3b64      	subs	r3, #100	; 0x64
 80127a0:	4611      	mov	r1, r2
 80127a2:	4618      	mov	r0, r3
 80127a4:	f002 faea 	bl	8014d7c <pushStack_walk>
						}
					}
					if (Xcoordinate >= 1) {
 80127a8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127ac:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80127b0:	881b      	ldrh	r3, [r3, #0]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	f000 80ee 	beq.w	8012994 <create_DijkstraMap+0x12bc>
						if(Direction==SLANT_WEST){
 80127b8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127bc:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80127c0:	881b      	ldrh	r3, [r3, #0]
 80127c2:	2b06      	cmp	r3, #6
 80127c4:	d130      	bne.n	8012828 <create_DijkstraMap+0x1150>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 80127c6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127ca:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80127ce:	881b      	ldrh	r3, [r3, #0]
 80127d0:	3301      	adds	r3, #1
 80127d2:	b29b      	uxth	r3, r3
 80127d4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80127d8:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80127dc:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 80127de:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127e2:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80127e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80127ea:	2b04      	cmp	r3, #4
 80127ec:	dd05      	ble.n	80127fa <create_DijkstraMap+0x1122>
 80127ee:	2304      	movs	r3, #4
 80127f0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80127f4:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80127f8:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 80127fa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127fe:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012802:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012806:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801280a:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 801280e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012812:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012816:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 801281a:	8013      	strh	r3, [r2, #0]
 801281c:	e014      	b.n	8012848 <create_DijkstraMap+0x1170>
 801281e:	bf00      	nop
 8012820:	20000c3c 	.word	0x20000c3c
 8012824:	20000f30 	.word	0x20000f30
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8012828:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801282c:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012830:	881b      	ldrh	r3, [r3, #0]
 8012832:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012836:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 801283a:	8013      	strh	r3, [r2, #0]
 801283c:	2300      	movs	r3, #0
 801283e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012842:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012846:	8013      	strh	r3, [r2, #0]
						if((wall.row[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost){
 8012848:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801284c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012850:	881b      	ldrh	r3, [r3, #0]
 8012852:	3b01      	subs	r3, #1
 8012854:	4a6d      	ldr	r2, [pc, #436]	; (8012a0c <create_DijkstraMap+0x1334>)
 8012856:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801285a:	461a      	mov	r2, r3
 801285c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012860:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012864:	881b      	ldrh	r3, [r3, #0]
 8012866:	fa42 f303 	asr.w	r3, r2, r3
 801286a:	f003 0301 	and.w	r3, r3, #1
 801286e:	2b00      	cmp	r3, #0
 8012870:	f040 8090 	bne.w	8012994 <create_DijkstraMap+0x12bc>
 8012874:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012878:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801287c:	881a      	ldrh	r2, [r3, #0]
 801287e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012882:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012886:	881b      	ldrh	r3, [r3, #0]
 8012888:	1e59      	subs	r1, r3, #1
 801288a:	4861      	ldr	r0, [pc, #388]	; (8012a10 <create_DijkstraMap+0x1338>)
 801288c:	4613      	mov	r3, r2
 801288e:	011b      	lsls	r3, r3, #4
 8012890:	1a9b      	subs	r3, r3, r2
 8012892:	440b      	add	r3, r1
 8012894:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012898:	461c      	mov	r4, r3
 801289a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801289e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80128a2:	881a      	ldrh	r2, [r3, #0]
 80128a4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128a8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80128ac:	8819      	ldrh	r1, [r3, #0]
 80128ae:	4858      	ldr	r0, [pc, #352]	; (8012a10 <create_DijkstraMap+0x1338>)
 80128b0:	4613      	mov	r3, r2
 80128b2:	011b      	lsls	r3, r3, #4
 80128b4:	1a9b      	subs	r3, r3, r2
 80128b6:	440b      	add	r3, r1
 80128b8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80128bc:	461a      	mov	r2, r3
 80128be:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128c2:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80128c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80128ca:	4413      	add	r3, r2
 80128cc:	429c      	cmp	r4, r3
 80128ce:	dd61      	ble.n	8012994 <create_DijkstraMap+0x12bc>
							Dijkstra.row_count[Ycoordinate][Xcoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost;
 80128d0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128d4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80128d8:	881a      	ldrh	r2, [r3, #0]
 80128da:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128de:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80128e2:	8819      	ldrh	r1, [r3, #0]
 80128e4:	484a      	ldr	r0, [pc, #296]	; (8012a10 <create_DijkstraMap+0x1338>)
 80128e6:	4613      	mov	r3, r2
 80128e8:	011b      	lsls	r3, r3, #4
 80128ea:	1a9b      	subs	r3, r3, r2
 80128ec:	440b      	add	r3, r1
 80128ee:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80128f2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128f6:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80128fa:	881b      	ldrh	r3, [r3, #0]
 80128fc:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012900:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012904:	8812      	ldrh	r2, [r2, #0]
 8012906:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 801290a:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 801290e:	8809      	ldrh	r1, [r1, #0]
 8012910:	3901      	subs	r1, #1
 8012912:	4403      	add	r3, r0
 8012914:	b29c      	uxth	r4, r3
 8012916:	483e      	ldr	r0, [pc, #248]	; (8012a10 <create_DijkstraMap+0x1338>)
 8012918:	4613      	mov	r3, r2
 801291a:	011b      	lsls	r3, r3, #4
 801291c:	1a9b      	subs	r3, r3, r2
 801291e:	440b      	add	r3, r1
 8012920:	4622      	mov	r2, r4
 8012922:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate - 1);
 8012926:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801292a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801292e:	881b      	ldrh	r3, [r3, #0]
 8012930:	3b01      	subs	r3, #1
 8012932:	b29a      	uxth	r2, r3
 8012934:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012938:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801293c:	4611      	mov	r1, r2
 801293e:	4618      	mov	r0, r3
 8012940:	f002 fa1c 	bl	8014d7c <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012944:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012948:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801294c:	881a      	ldrh	r2, [r3, #0]
 801294e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012952:	f103 0320 	add.w	r3, r3, #32
 8012956:	3b0c      	subs	r3, #12
 8012958:	4611      	mov	r1, r2
 801295a:	4618      	mov	r0, r3
 801295c:	f002 fa0e 	bl	8014d7c <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 8012960:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012964:	3b14      	subs	r3, #20
 8012966:	2101      	movs	r1, #1
 8012968:	4618      	mov	r0, r3
 801296a:	f002 fa07 	bl	8014d7c <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_WEST);
 801296e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012972:	3b3c      	subs	r3, #60	; 0x3c
 8012974:	2106      	movs	r1, #6
 8012976:	4618      	mov	r0, r3
 8012978:	f002 fa00 	bl	8014d7c <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 801297c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012980:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012984:	881a      	ldrh	r2, [r3, #0]
 8012986:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801298a:	3b64      	subs	r3, #100	; 0x64
 801298c:	4611      	mov	r1, r2
 801298e:	4618      	mov	r0, r3
 8012990:	f002 f9f4 	bl	8014d7c <pushStack_walk>
						}
					}
					if (Ycoordinate <= 14) {
 8012994:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012998:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801299c:	881b      	ldrh	r3, [r3, #0]
 801299e:	2b0e      	cmp	r3, #14
 80129a0:	f200 81de 	bhi.w	8012d60 <create_DijkstraMap+0x1688>
						if(Direction==SLANT_NORTH_WEST){
 80129a4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129a8:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80129ac:	881b      	ldrh	r3, [r3, #0]
 80129ae:	2b07      	cmp	r3, #7
 80129b0:	d130      	bne.n	8012a14 <create_DijkstraMap+0x133c>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80129b2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129b6:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80129ba:	881b      	ldrh	r3, [r3, #0]
 80129bc:	3301      	adds	r3, #1
 80129be:	b29b      	uxth	r3, r3
 80129c0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80129c4:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80129c8:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 80129ca:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129ce:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80129d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80129d6:	2b05      	cmp	r3, #5
 80129d8:	dd05      	ble.n	80129e6 <create_DijkstraMap+0x130e>
 80129da:	2305      	movs	r3, #5
 80129dc:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80129e0:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80129e4:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 80129e6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129ea:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80129ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80129f2:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80129f6:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80129fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80129fe:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012a02:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012a06:	8013      	strh	r3, [r2, #0]
 8012a08:	e014      	b.n	8012a34 <create_DijkstraMap+0x135c>
 8012a0a:	bf00      	nop
 8012a0c:	20000c3c 	.word	0x20000c3c
 8012a10:	20000f30 	.word	0x20000f30
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012a14:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012a18:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012a1c:	881b      	ldrh	r3, [r3, #0]
 8012a1e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012a22:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012a26:	8013      	strh	r3, [r2, #0]
 8012a28:	2300      	movs	r3, #0
 8012a2a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012a2e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012a32:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012a34:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a38:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012a3c:	881b      	ldrh	r3, [r3, #0]
 8012a3e:	4a69      	ldr	r2, [pc, #420]	; (8012be4 <create_DijkstraMap+0x150c>)
 8012a40:	330c      	adds	r3, #12
 8012a42:	005b      	lsls	r3, r3, #1
 8012a44:	4413      	add	r3, r2
 8012a46:	88db      	ldrh	r3, [r3, #6]
 8012a48:	461a      	mov	r2, r3
 8012a4a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a4e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012a52:	881b      	ldrh	r3, [r3, #0]
 8012a54:	fa42 f303 	asr.w	r3, r2, r3
 8012a58:	f003 0301 	and.w	r3, r3, #1
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	f040 808e 	bne.w	8012b7e <create_DijkstraMap+0x14a6>
 8012a62:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a66:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012a6a:	881a      	ldrh	r2, [r3, #0]
 8012a6c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a70:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012a74:	8819      	ldrh	r1, [r3, #0]
 8012a76:	485c      	ldr	r0, [pc, #368]	; (8012be8 <create_DijkstraMap+0x1510>)
 8012a78:	4613      	mov	r3, r2
 8012a7a:	011b      	lsls	r3, r3, #4
 8012a7c:	1a9b      	subs	r3, r3, r2
 8012a7e:	440b      	add	r3, r1
 8012a80:	33f0      	adds	r3, #240	; 0xf0
 8012a82:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012a86:	461c      	mov	r4, r3
 8012a88:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a8c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012a90:	881a      	ldrh	r2, [r3, #0]
 8012a92:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a96:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012a9a:	8819      	ldrh	r1, [r3, #0]
 8012a9c:	4852      	ldr	r0, [pc, #328]	; (8012be8 <create_DijkstraMap+0x1510>)
 8012a9e:	4613      	mov	r3, r2
 8012aa0:	011b      	lsls	r3, r3, #4
 8012aa2:	1a9b      	subs	r3, r3, r2
 8012aa4:	440b      	add	r3, r1
 8012aa6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012aaa:	461a      	mov	r2, r3
 8012aac:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ab0:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012ab4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ab8:	4413      	add	r3, r2
 8012aba:	429c      	cmp	r4, r3
 8012abc:	dd5f      	ble.n	8012b7e <create_DijkstraMap+0x14a6>
							Dijkstra.column_count[Xcoordinate][Ycoordinate]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012abe:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ac2:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012ac6:	881a      	ldrh	r2, [r3, #0]
 8012ac8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012acc:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012ad0:	8819      	ldrh	r1, [r3, #0]
 8012ad2:	4845      	ldr	r0, [pc, #276]	; (8012be8 <create_DijkstraMap+0x1510>)
 8012ad4:	4613      	mov	r3, r2
 8012ad6:	011b      	lsls	r3, r3, #4
 8012ad8:	1a9b      	subs	r3, r3, r2
 8012ada:	440b      	add	r3, r1
 8012adc:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012ae0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ae4:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012ae8:	881b      	ldrh	r3, [r3, #0]
 8012aea:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012aee:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8012af2:	8812      	ldrh	r2, [r2, #0]
 8012af4:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012af8:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8012afc:	8809      	ldrh	r1, [r1, #0]
 8012afe:	4403      	add	r3, r0
 8012b00:	b29c      	uxth	r4, r3
 8012b02:	4839      	ldr	r0, [pc, #228]	; (8012be8 <create_DijkstraMap+0x1510>)
 8012b04:	4613      	mov	r3, r2
 8012b06:	011b      	lsls	r3, r3, #4
 8012b08:	1a9b      	subs	r3, r3, r2
 8012b0a:	440b      	add	r3, r1
 8012b0c:	33f0      	adds	r3, #240	; 0xf0
 8012b0e:	4622      	mov	r2, r4
 8012b10:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 8012b14:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b18:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012b1c:	881a      	ldrh	r2, [r3, #0]
 8012b1e:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012b22:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012b26:	4611      	mov	r1, r2
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f002 f927 	bl	8014d7c <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012b2e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b32:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012b36:	881a      	ldrh	r2, [r3, #0]
 8012b38:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012b3c:	f103 0320 	add.w	r3, r3, #32
 8012b40:	3b0c      	subs	r3, #12
 8012b42:	4611      	mov	r1, r2
 8012b44:	4618      	mov	r0, r3
 8012b46:	f002 f919 	bl	8014d7c <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012b4a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012b4e:	3b14      	subs	r3, #20
 8012b50:	2100      	movs	r1, #0
 8012b52:	4618      	mov	r0, r3
 8012b54:	f002 f912 	bl	8014d7c <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 8012b58:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012b5c:	3b3c      	subs	r3, #60	; 0x3c
 8012b5e:	2107      	movs	r1, #7
 8012b60:	4618      	mov	r0, r3
 8012b62:	f002 f90b 	bl	8014d7c <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012b66:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b6a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012b6e:	881a      	ldrh	r2, [r3, #0]
 8012b70:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012b74:	3b64      	subs	r3, #100	; 0x64
 8012b76:	4611      	mov	r1, r2
 8012b78:	4618      	mov	r0, r3
 8012b7a:	f002 f8ff 	bl	8014d7c <pushStack_walk>
						}
						if(Direction==SLANT_NORTH_EAST){
 8012b7e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b82:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012b86:	881b      	ldrh	r3, [r3, #0]
 8012b88:	2b01      	cmp	r3, #1
 8012b8a:	d12f      	bne.n	8012bec <create_DijkstraMap+0x1514>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012b8c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b90:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012b94:	881b      	ldrh	r3, [r3, #0]
 8012b96:	3301      	adds	r3, #1
 8012b98:	b29b      	uxth	r3, r3
 8012b9a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012b9e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012ba2:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012ba4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ba8:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012bac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012bb0:	2b05      	cmp	r3, #5
 8012bb2:	dd05      	ble.n	8012bc0 <create_DijkstraMap+0x14e8>
 8012bb4:	2305      	movs	r3, #5
 8012bb6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012bba:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012bbe:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012bc0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012bc4:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012bc8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012bcc:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012bd0:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012bd4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012bd8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012bdc:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012be0:	8013      	strh	r3, [r2, #0]
 8012be2:	e013      	b.n	8012c0c <create_DijkstraMap+0x1534>
 8012be4:	20000c3c 	.word	0x20000c3c
 8012be8:	20000f30 	.word	0x20000f30
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012bec:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012bf0:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012bf4:	881b      	ldrh	r3, [r3, #0]
 8012bf6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012bfa:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012bfe:	8013      	strh	r3, [r2, #0]
 8012c00:	2300      	movs	r3, #0
 8012c02:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012c06:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012c0a:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate] & (1 << (Xcoordinate+1)))==0 && Dijkstra.column_count[Xcoordinate+1][Ycoordinate]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012c0c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c10:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012c14:	881b      	ldrh	r3, [r3, #0]
 8012c16:	4a70      	ldr	r2, [pc, #448]	; (8012dd8 <create_DijkstraMap+0x1700>)
 8012c18:	330c      	adds	r3, #12
 8012c1a:	005b      	lsls	r3, r3, #1
 8012c1c:	4413      	add	r3, r2
 8012c1e:	88db      	ldrh	r3, [r3, #6]
 8012c20:	461a      	mov	r2, r3
 8012c22:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c26:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012c2a:	881b      	ldrh	r3, [r3, #0]
 8012c2c:	3301      	adds	r3, #1
 8012c2e:	fa42 f303 	asr.w	r3, r2, r3
 8012c32:	f003 0301 	and.w	r3, r3, #1
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	f040 8092 	bne.w	8012d60 <create_DijkstraMap+0x1688>
 8012c3c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c40:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012c44:	881b      	ldrh	r3, [r3, #0]
 8012c46:	1c5a      	adds	r2, r3, #1
 8012c48:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c4c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012c50:	8819      	ldrh	r1, [r3, #0]
 8012c52:	4862      	ldr	r0, [pc, #392]	; (8012ddc <create_DijkstraMap+0x1704>)
 8012c54:	4613      	mov	r3, r2
 8012c56:	011b      	lsls	r3, r3, #4
 8012c58:	1a9b      	subs	r3, r3, r2
 8012c5a:	440b      	add	r3, r1
 8012c5c:	33f0      	adds	r3, #240	; 0xf0
 8012c5e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012c62:	461c      	mov	r4, r3
 8012c64:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c68:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012c6c:	881a      	ldrh	r2, [r3, #0]
 8012c6e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c72:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012c76:	8819      	ldrh	r1, [r3, #0]
 8012c78:	4858      	ldr	r0, [pc, #352]	; (8012ddc <create_DijkstraMap+0x1704>)
 8012c7a:	4613      	mov	r3, r2
 8012c7c:	011b      	lsls	r3, r3, #4
 8012c7e:	1a9b      	subs	r3, r3, r2
 8012c80:	440b      	add	r3, r1
 8012c82:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012c86:	461a      	mov	r2, r3
 8012c88:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c8c:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012c94:	4413      	add	r3, r2
 8012c96:	429c      	cmp	r4, r3
 8012c98:	dd62      	ble.n	8012d60 <create_DijkstraMap+0x1688>
							Dijkstra.column_count[Xcoordinate+1][Ycoordinate]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012c9a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c9e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012ca2:	881a      	ldrh	r2, [r3, #0]
 8012ca4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ca8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012cac:	8819      	ldrh	r1, [r3, #0]
 8012cae:	484b      	ldr	r0, [pc, #300]	; (8012ddc <create_DijkstraMap+0x1704>)
 8012cb0:	4613      	mov	r3, r2
 8012cb2:	011b      	lsls	r3, r3, #4
 8012cb4:	1a9b      	subs	r3, r3, r2
 8012cb6:	440b      	add	r3, r1
 8012cb8:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012cbc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012cc0:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012cc4:	881b      	ldrh	r3, [r3, #0]
 8012cc6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012cca:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8012cce:	8812      	ldrh	r2, [r2, #0]
 8012cd0:	3201      	adds	r2, #1
 8012cd2:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012cd6:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8012cda:	8809      	ldrh	r1, [r1, #0]
 8012cdc:	4403      	add	r3, r0
 8012cde:	b29c      	uxth	r4, r3
 8012ce0:	483e      	ldr	r0, [pc, #248]	; (8012ddc <create_DijkstraMap+0x1704>)
 8012ce2:	4613      	mov	r3, r2
 8012ce4:	011b      	lsls	r3, r3, #4
 8012ce6:	1a9b      	subs	r3, r3, r2
 8012ce8:	440b      	add	r3, r1
 8012cea:	33f0      	adds	r3, #240	; 0xf0
 8012cec:	4622      	mov	r2, r4
 8012cee:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 8012cf2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012cf6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012cfa:	881b      	ldrh	r3, [r3, #0]
 8012cfc:	3301      	adds	r3, #1
 8012cfe:	b29a      	uxth	r2, r3
 8012d00:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012d04:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012d08:	4611      	mov	r1, r2
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	f002 f836 	bl	8014d7c <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012d10:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d14:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012d18:	881a      	ldrh	r2, [r3, #0]
 8012d1a:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012d1e:	f103 0320 	add.w	r3, r3, #32
 8012d22:	3b0c      	subs	r3, #12
 8012d24:	4611      	mov	r1, r2
 8012d26:	4618      	mov	r0, r3
 8012d28:	f002 f828 	bl	8014d7c <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012d2c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012d30:	3b14      	subs	r3, #20
 8012d32:	2100      	movs	r1, #0
 8012d34:	4618      	mov	r0, r3
 8012d36:	f002 f821 	bl	8014d7c <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 8012d3a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012d3e:	3b3c      	subs	r3, #60	; 0x3c
 8012d40:	2101      	movs	r1, #1
 8012d42:	4618      	mov	r0, r3
 8012d44:	f002 f81a 	bl	8014d7c <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012d48:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d4c:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012d50:	881a      	ldrh	r2, [r3, #0]
 8012d52:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012d56:	3b64      	subs	r3, #100	; 0x64
 8012d58:	4611      	mov	r1, r2
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f002 f80e 	bl	8014d7c <pushStack_walk>
						}
					}
					if (Ycoordinate >= 1) {
 8012d60:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d64:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012d68:	881b      	ldrh	r3, [r3, #0]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	f000 81e4 	beq.w	8013138 <create_DijkstraMap+0x1a60>
						if(Direction==SLANT_SOUTH_WEST){
 8012d70:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d74:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012d78:	881b      	ldrh	r3, [r3, #0]
 8012d7a:	2b05      	cmp	r3, #5
 8012d7c:	d130      	bne.n	8012de0 <create_DijkstraMap+0x1708>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012d7e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d82:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012d86:	881b      	ldrh	r3, [r3, #0]
 8012d88:	3301      	adds	r3, #1
 8012d8a:	b29b      	uxth	r3, r3
 8012d8c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012d90:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012d94:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012d96:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d9a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012d9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012da2:	2b05      	cmp	r3, #5
 8012da4:	dd05      	ble.n	8012db2 <create_DijkstraMap+0x16da>
 8012da6:	2305      	movs	r3, #5
 8012da8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012dac:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012db0:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012db2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012db6:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012dba:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012dbe:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012dc2:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012dc6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012dca:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012dce:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012dd2:	8013      	strh	r3, [r2, #0]
 8012dd4:	e014      	b.n	8012e00 <create_DijkstraMap+0x1728>
 8012dd6:	bf00      	nop
 8012dd8:	20000c3c 	.word	0x20000c3c
 8012ddc:	20000f30 	.word	0x20000f30
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012de0:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012de4:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012de8:	881b      	ldrh	r3, [r3, #0]
 8012dea:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012dee:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012df2:	8013      	strh	r3, [r2, #0]
 8012df4:	2300      	movs	r3, #0
 8012df6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012dfa:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012dfe:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012e00:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e04:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012e08:	881b      	ldrh	r3, [r3, #0]
 8012e0a:	3b01      	subs	r3, #1
 8012e0c:	4ad4      	ldr	r2, [pc, #848]	; (8013160 <create_DijkstraMap+0x1a88>)
 8012e0e:	330c      	adds	r3, #12
 8012e10:	005b      	lsls	r3, r3, #1
 8012e12:	4413      	add	r3, r2
 8012e14:	88db      	ldrh	r3, [r3, #6]
 8012e16:	461a      	mov	r2, r3
 8012e18:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e1c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012e20:	881b      	ldrh	r3, [r3, #0]
 8012e22:	fa42 f303 	asr.w	r3, r2, r3
 8012e26:	f003 0301 	and.w	r3, r3, #1
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	f040 8092 	bne.w	8012f54 <create_DijkstraMap+0x187c>
 8012e30:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e34:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012e38:	881a      	ldrh	r2, [r3, #0]
 8012e3a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e3e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012e42:	881b      	ldrh	r3, [r3, #0]
 8012e44:	1e59      	subs	r1, r3, #1
 8012e46:	48c7      	ldr	r0, [pc, #796]	; (8013164 <create_DijkstraMap+0x1a8c>)
 8012e48:	4613      	mov	r3, r2
 8012e4a:	011b      	lsls	r3, r3, #4
 8012e4c:	1a9b      	subs	r3, r3, r2
 8012e4e:	440b      	add	r3, r1
 8012e50:	33f0      	adds	r3, #240	; 0xf0
 8012e52:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012e56:	461c      	mov	r4, r3
 8012e58:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e5c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012e60:	881a      	ldrh	r2, [r3, #0]
 8012e62:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e66:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012e6a:	8819      	ldrh	r1, [r3, #0]
 8012e6c:	48bd      	ldr	r0, [pc, #756]	; (8013164 <create_DijkstraMap+0x1a8c>)
 8012e6e:	4613      	mov	r3, r2
 8012e70:	011b      	lsls	r3, r3, #4
 8012e72:	1a9b      	subs	r3, r3, r2
 8012e74:	440b      	add	r3, r1
 8012e76:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012e7a:	461a      	mov	r2, r3
 8012e7c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e80:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012e88:	4413      	add	r3, r2
 8012e8a:	429c      	cmp	r4, r3
 8012e8c:	dd62      	ble.n	8012f54 <create_DijkstraMap+0x187c>
							Dijkstra.column_count[Xcoordinate][Ycoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012e8e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e92:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012e96:	881a      	ldrh	r2, [r3, #0]
 8012e98:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e9c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012ea0:	8819      	ldrh	r1, [r3, #0]
 8012ea2:	48b0      	ldr	r0, [pc, #704]	; (8013164 <create_DijkstraMap+0x1a8c>)
 8012ea4:	4613      	mov	r3, r2
 8012ea6:	011b      	lsls	r3, r3, #4
 8012ea8:	1a9b      	subs	r3, r3, r2
 8012eaa:	440b      	add	r3, r1
 8012eac:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012eb0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012eb4:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012eb8:	881b      	ldrh	r3, [r3, #0]
 8012eba:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012ebe:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8012ec2:	8812      	ldrh	r2, [r2, #0]
 8012ec4:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012ec8:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8012ecc:	8809      	ldrh	r1, [r1, #0]
 8012ece:	3901      	subs	r1, #1
 8012ed0:	4403      	add	r3, r0
 8012ed2:	b29c      	uxth	r4, r3
 8012ed4:	48a3      	ldr	r0, [pc, #652]	; (8013164 <create_DijkstraMap+0x1a8c>)
 8012ed6:	4613      	mov	r3, r2
 8012ed8:	011b      	lsls	r3, r3, #4
 8012eda:	1a9b      	subs	r3, r3, r2
 8012edc:	440b      	add	r3, r1
 8012ede:	33f0      	adds	r3, #240	; 0xf0
 8012ee0:	4622      	mov	r2, r4
 8012ee2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 8012ee6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012eea:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012eee:	881a      	ldrh	r2, [r3, #0]
 8012ef0:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012ef4:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012ef8:	4611      	mov	r1, r2
 8012efa:	4618      	mov	r0, r3
 8012efc:	f001 ff3e 	bl	8014d7c <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate - 1);
 8012f00:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f04:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012f08:	881b      	ldrh	r3, [r3, #0]
 8012f0a:	3b01      	subs	r3, #1
 8012f0c:	b29a      	uxth	r2, r3
 8012f0e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012f12:	f103 0320 	add.w	r3, r3, #32
 8012f16:	3b0c      	subs	r3, #12
 8012f18:	4611      	mov	r1, r2
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	f001 ff2e 	bl	8014d7c <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012f20:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012f24:	3b14      	subs	r3, #20
 8012f26:	2100      	movs	r1, #0
 8012f28:	4618      	mov	r0, r3
 8012f2a:	f001 ff27 	bl	8014d7c <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 8012f2e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012f32:	3b3c      	subs	r3, #60	; 0x3c
 8012f34:	2105      	movs	r1, #5
 8012f36:	4618      	mov	r0, r3
 8012f38:	f001 ff20 	bl	8014d7c <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012f3c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f40:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012f44:	881a      	ldrh	r2, [r3, #0]
 8012f46:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012f4a:	3b64      	subs	r3, #100	; 0x64
 8012f4c:	4611      	mov	r1, r2
 8012f4e:	4618      	mov	r0, r3
 8012f50:	f001 ff14 	bl	8014d7c <pushStack_walk>
						}
						if(Direction==SLANT_SOUTH_EAST){
 8012f54:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f58:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012f5c:	881b      	ldrh	r3, [r3, #0]
 8012f5e:	2b03      	cmp	r3, #3
 8012f60:	d12b      	bne.n	8012fba <create_DijkstraMap+0x18e2>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012f62:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f66:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012f6a:	881b      	ldrh	r3, [r3, #0]
 8012f6c:	3301      	adds	r3, #1
 8012f6e:	b29b      	uxth	r3, r3
 8012f70:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012f74:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012f78:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012f7a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f7e:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012f82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012f86:	2b05      	cmp	r3, #5
 8012f88:	dd05      	ble.n	8012f96 <create_DijkstraMap+0x18be>
 8012f8a:	2305      	movs	r3, #5
 8012f8c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012f90:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012f94:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012f96:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f9a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012f9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012fa2:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012fa6:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012faa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012fae:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012fb2:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012fb6:	8013      	strh	r3, [r2, #0]
 8012fb8:	e00f      	b.n	8012fda <create_DijkstraMap+0x1902>
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012fba:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012fbe:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012fc2:	881b      	ldrh	r3, [r3, #0]
 8012fc4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012fc8:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012fcc:	8013      	strh	r3, [r2, #0]
 8012fce:	2300      	movs	r3, #0
 8012fd0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012fd4:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012fd8:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate-1] & (1 << (Xcoordinate+1)))==0 && Dijkstra.column_count[Xcoordinate+1][Ycoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012fda:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012fde:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012fe2:	881b      	ldrh	r3, [r3, #0]
 8012fe4:	3b01      	subs	r3, #1
 8012fe6:	4a5e      	ldr	r2, [pc, #376]	; (8013160 <create_DijkstraMap+0x1a88>)
 8012fe8:	330c      	adds	r3, #12
 8012fea:	005b      	lsls	r3, r3, #1
 8012fec:	4413      	add	r3, r2
 8012fee:	88db      	ldrh	r3, [r3, #6]
 8012ff0:	461a      	mov	r2, r3
 8012ff2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ff6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012ffa:	881b      	ldrh	r3, [r3, #0]
 8012ffc:	3301      	adds	r3, #1
 8012ffe:	fa42 f303 	asr.w	r3, r2, r3
 8013002:	f003 0301 	and.w	r3, r3, #1
 8013006:	2b00      	cmp	r3, #0
 8013008:	f040 8096 	bne.w	8013138 <create_DijkstraMap+0x1a60>
 801300c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013010:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013014:	881b      	ldrh	r3, [r3, #0]
 8013016:	1c5a      	adds	r2, r3, #1
 8013018:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801301c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013020:	881b      	ldrh	r3, [r3, #0]
 8013022:	1e59      	subs	r1, r3, #1
 8013024:	484f      	ldr	r0, [pc, #316]	; (8013164 <create_DijkstraMap+0x1a8c>)
 8013026:	4613      	mov	r3, r2
 8013028:	011b      	lsls	r3, r3, #4
 801302a:	1a9b      	subs	r3, r3, r2
 801302c:	440b      	add	r3, r1
 801302e:	33f0      	adds	r3, #240	; 0xf0
 8013030:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013034:	461c      	mov	r4, r3
 8013036:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801303a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801303e:	881a      	ldrh	r2, [r3, #0]
 8013040:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013044:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013048:	8819      	ldrh	r1, [r3, #0]
 801304a:	4846      	ldr	r0, [pc, #280]	; (8013164 <create_DijkstraMap+0x1a8c>)
 801304c:	4613      	mov	r3, r2
 801304e:	011b      	lsls	r3, r3, #4
 8013050:	1a9b      	subs	r3, r3, r2
 8013052:	440b      	add	r3, r1
 8013054:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013058:	461a      	mov	r2, r3
 801305a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801305e:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8013062:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013066:	4413      	add	r3, r2
 8013068:	429c      	cmp	r4, r3
 801306a:	dd65      	ble.n	8013138 <create_DijkstraMap+0x1a60>
							Dijkstra.column_count[Xcoordinate+1][Ycoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 801306c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013070:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013074:	881a      	ldrh	r2, [r3, #0]
 8013076:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801307a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801307e:	8819      	ldrh	r1, [r3, #0]
 8013080:	4838      	ldr	r0, [pc, #224]	; (8013164 <create_DijkstraMap+0x1a8c>)
 8013082:	4613      	mov	r3, r2
 8013084:	011b      	lsls	r3, r3, #4
 8013086:	1a9b      	subs	r3, r3, r2
 8013088:	440b      	add	r3, r1
 801308a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 801308e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013092:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8013096:	881b      	ldrh	r3, [r3, #0]
 8013098:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801309c:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80130a0:	8812      	ldrh	r2, [r2, #0]
 80130a2:	3201      	adds	r2, #1
 80130a4:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 80130a8:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 80130ac:	8809      	ldrh	r1, [r1, #0]
 80130ae:	3901      	subs	r1, #1
 80130b0:	4403      	add	r3, r0
 80130b2:	b29c      	uxth	r4, r3
 80130b4:	482b      	ldr	r0, [pc, #172]	; (8013164 <create_DijkstraMap+0x1a8c>)
 80130b6:	4613      	mov	r3, r2
 80130b8:	011b      	lsls	r3, r3, #4
 80130ba:	1a9b      	subs	r3, r3, r2
 80130bc:	440b      	add	r3, r1
 80130be:	33f0      	adds	r3, #240	; 0xf0
 80130c0:	4622      	mov	r2, r4
 80130c2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate+1);
 80130c6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80130ca:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80130ce:	881b      	ldrh	r3, [r3, #0]
 80130d0:	3301      	adds	r3, #1
 80130d2:	b29a      	uxth	r2, r3
 80130d4:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80130d8:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80130dc:	4611      	mov	r1, r2
 80130de:	4618      	mov	r0, r3
 80130e0:	f001 fe4c 	bl	8014d7c <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate-1);
 80130e4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80130e8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80130ec:	881b      	ldrh	r3, [r3, #0]
 80130ee:	3b01      	subs	r3, #1
 80130f0:	b29a      	uxth	r2, r3
 80130f2:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80130f6:	f103 0320 	add.w	r3, r3, #32
 80130fa:	3b0c      	subs	r3, #12
 80130fc:	4611      	mov	r1, r2
 80130fe:	4618      	mov	r0, r3
 8013100:	f001 fe3c 	bl	8014d7c <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8013104:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8013108:	3b14      	subs	r3, #20
 801310a:	2100      	movs	r1, #0
 801310c:	4618      	mov	r0, r3
 801310e:	f001 fe35 	bl	8014d7c <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 8013112:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8013116:	3b3c      	subs	r3, #60	; 0x3c
 8013118:	2103      	movs	r1, #3
 801311a:	4618      	mov	r0, r3
 801311c:	f001 fe2e 	bl	8014d7c <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8013120:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013124:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013128:	881a      	ldrh	r2, [r3, #0]
 801312a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801312e:	3b64      	subs	r3, #100	; 0x64
 8013130:	4611      	mov	r1, r2
 8013132:	4618      	mov	r0, r3
 8013134:	f001 fe22 	bl	8014d7c <pushStack_walk>
						}
					}

				}

		count_number+=1;
 8013138:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801313c:	f103 036e 	add.w	r3, r3, #110	; 0x6e
 8013140:	881b      	ldrh	r3, [r3, #0]
 8013142:	3301      	adds	r3, #1
 8013144:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013148:	f102 026e 	add.w	r2, r2, #110	; 0x6e
 801314c:	8013      	strh	r3, [r2, #0]
		Xcoordinate = popStack_walk(&stack_x);
 801314e:	f7fe bc0e 	b.w	801196e <create_DijkstraMap+0x296>

		}



}
 8013152:	bf00      	nop
 8013154:	f507 479d 	add.w	r7, r7, #20096	; 0x4e80
 8013158:	3704      	adds	r7, #4
 801315a:	46bd      	mov	sp, r7
 801315c:	bd90      	pop	{r4, r7, pc}
 801315e:	bf00      	nop
 8013160:	20000c3c 	.word	0x20000c3c
 8013164:	20000f30 	.word	0x20000f30

08013168 <route_Dijkstra>:





void route_Dijkstra(void){
 8013168:	b5f0      	push	{r4, r5, r6, r7, lr}
 801316a:	f5ad 4dbc 	sub.w	sp, sp, #24064	; 0x5e00
 801316e:	b089      	sub	sp, #36	; 0x24
 8013170:	af04      	add	r7, sp, #16
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_x_unknow;
	STACK_T stack_y_unknow;
	STACK_T stack_matrix_unknow;//行列
	initStack_walk(&stack_x);
 8013172:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013176:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801317a:	4618      	mov	r0, r3
 801317c:	f001 fdee 	bl	8014d5c <initStack_walk>
	initStack_walk(&stack_y);
 8013180:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013184:	f103 0310 	add.w	r3, r3, #16
 8013188:	3b1c      	subs	r3, #28
 801318a:	4618      	mov	r0, r3
 801318c:	f001 fde6 	bl	8014d5c <initStack_walk>
	initStack_walk(&stack_matrix);
 8013190:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013194:	f103 0310 	add.w	r3, r3, #16
 8013198:	3b04      	subs	r3, #4
 801319a:	4618      	mov	r0, r3
 801319c:	f001 fdde 	bl	8014d5c <initStack_walk>
	initStack_walk(&g_Goal_x);
 80131a0:	48ce      	ldr	r0, [pc, #824]	; (80134dc <route_Dijkstra+0x374>)
 80131a2:	f001 fddb 	bl	8014d5c <initStack_walk>
	initStack_walk(&g_Goal_y);
 80131a6:	48ce      	ldr	r0, [pc, #824]	; (80134e0 <route_Dijkstra+0x378>)
 80131a8:	f001 fdd8 	bl	8014d5c <initStack_walk>

	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 80131ac:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80131b0:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80131b4:	2100      	movs	r1, #0
 80131b6:	4618      	mov	r0, r3
 80131b8:	f001 fde0 	bl	8014d7c <pushStack_walk>
 80131bc:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80131c0:	f103 0310 	add.w	r3, r3, #16
 80131c4:	3b1c      	subs	r3, #28
 80131c6:	2100      	movs	r1, #0
 80131c8:	4618      	mov	r0, r3
 80131ca:	f001 fdd7 	bl	8014d7c <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);
 80131ce:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80131d2:	f103 0310 	add.w	r3, r3, #16
 80131d6:	3b04      	subs	r3, #4
 80131d8:	2100      	movs	r1, #0
 80131da:	4618      	mov	r0, r3
 80131dc:	f001 fdce 	bl	8014d7c <pushStack_walk>

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int x = 0;
 80131e0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80131e4:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80131e8:	2200      	movs	r2, #0
 80131ea:	601a      	str	r2, [r3, #0]
	int y = 0;
 80131ec:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80131f0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80131f4:	2200      	movs	r2, #0
 80131f6:	601a      	str	r2, [r3, #0]
	int direction = 1;
 80131f8:	2301      	movs	r3, #1
 80131fa:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80131fe:	f102 020c 	add.w	r2, r2, #12
 8013202:	6013      	str	r3, [r2, #0]


	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&x,&y,direction);
 8013204:	f107 0110 	add.w	r1, r7, #16
 8013208:	3910      	subs	r1, #16
 801320a:	f107 0310 	add.w	r3, r7, #16
 801320e:	3b0c      	subs	r3, #12
 8013210:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013214:	f102 020c 	add.w	r2, r2, #12
 8013218:	6812      	ldr	r2, [r2, #0]
 801321a:	4618      	mov	r0, r3
 801321c:	f7fa fe76 	bl	800df0c <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 8013220:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013224:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	2b01      	cmp	r3, #1
 801322c:	d006      	beq.n	801323c <route_Dijkstra+0xd4>
 801322e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013232:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	2b02      	cmp	r3, #2
 801323a:	d10f      	bne.n	801325c <route_Dijkstra+0xf4>
 801323c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013240:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	2b00      	cmp	r3, #0
 8013248:	f000 837b 	beq.w	8013942 <route_Dijkstra+0x7da>
 801324c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013250:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	2b01      	cmp	r3, #1
 8013258:	f000 8373 	beq.w	8013942 <route_Dijkstra+0x7da>
					break;
		}

		get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
 801325c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013260:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013264:	6818      	ldr	r0, [r3, #0]
 8013266:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801326a:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 801326e:	6819      	ldr	r1, [r3, #0]
 8013270:	f107 0210 	add.w	r2, r7, #16
 8013274:	3a05      	subs	r2, #5
 8013276:	f107 0310 	add.w	r3, r7, #16
 801327a:	3b07      	subs	r3, #7
 801327c:	9301      	str	r3, [sp, #4]
 801327e:	f107 0310 	add.w	r3, r7, #16
 8013282:	3b06      	subs	r3, #6
 8013284:	9300      	str	r3, [sp, #0]
 8013286:	4613      	mov	r3, r2
 8013288:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 801328c:	f102 020c 	add.w	r2, r2, #12
 8013290:	6812      	ldr	r2, [r2, #0]
 8013292:	f7fd fe05 	bl	8010ea0 <get_wall>
		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 8013296:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801329a:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801329e:	6819      	ldr	r1, [r3, #0]
 80132a0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80132a4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80132a8:	681c      	ldr	r4, [r3, #0]
 80132aa:	f107 0310 	add.w	r3, r7, #16
 80132ae:	3b04      	subs	r3, #4
 80132b0:	f107 0210 	add.w	r2, r7, #16
 80132b4:	3a02      	subs	r2, #2
 80132b6:	f107 0610 	add.w	r6, r7, #16
 80132ba:	f107 0090 	add.w	r0, r7, #144	; 0x90
 80132be:	387e      	subs	r0, #126	; 0x7e
 80132c0:	f507 45bc 	add.w	r5, r7, #24064	; 0x5e00
 80132c4:	f105 050c 	add.w	r5, r5, #12
 80132c8:	682d      	ldr	r5, [r5, #0]
 80132ca:	9502      	str	r5, [sp, #8]
 80132cc:	9401      	str	r4, [sp, #4]
 80132ce:	9100      	str	r1, [sp, #0]
 80132d0:	4631      	mov	r1, r6
 80132d2:	f7fe f967 	bl	80115a4 <search_AroundDijkstraCount>
		if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
 80132d6:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80132da:	f6a3 6305 	subw	r3, r3, #3589	; 0xe05
 80132de:	781b      	ldrb	r3, [r3, #0]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d006      	beq.n	80132f2 <route_Dijkstra+0x18a>
 80132e4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80132e8:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 80132ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80132f0:	801a      	strh	r2, [r3, #0]
		if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
 80132f2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80132f6:	f6a3 6306 	subw	r3, r3, #3590	; 0xe06
 80132fa:	781b      	ldrb	r3, [r3, #0]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d006      	beq.n	801330e <route_Dijkstra+0x1a6>
 8013300:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013304:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013308:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801330c:	801a      	strh	r2, [r3, #0]
		if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}
 801330e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013312:	f6a3 6307 	subw	r3, r3, #3591	; 0xe07
 8013316:	781b      	ldrb	r3, [r3, #0]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d006      	beq.n	801332a <route_Dijkstra+0x1c2>
 801331c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013320:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013328:	801a      	strh	r2, [r3, #0]

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 801332a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801332e:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013332:	881b      	ldrh	r3, [r3, #0]
 8013334:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013338:	4293      	cmp	r3, r2
 801333a:	d11b      	bne.n	8013374 <route_Dijkstra+0x20c>
 801333c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013340:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013344:	881b      	ldrh	r3, [r3, #0]
 8013346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801334a:	4293      	cmp	r3, r2
 801334c:	d112      	bne.n	8013374 <route_Dijkstra+0x20c>
 801334e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013352:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013356:	881b      	ldrh	r3, [r3, #0]
 8013358:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801335c:	4293      	cmp	r3, r2
 801335e:	d109      	bne.n	8013374 <route_Dijkstra+0x20c>
 8013360:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013364:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8013368:	881b      	ldrh	r3, [r3, #0]
 801336a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801336e:	4293      	cmp	r3, r2
 8013370:	f000 82e6 	beq.w	8013940 <route_Dijkstra+0x7d8>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 8013374:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013378:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 801337c:	881a      	ldrh	r2, [r3, #0]
 801337e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013382:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013386:	881b      	ldrh	r3, [r3, #0]
 8013388:	429a      	cmp	r2, r3
 801338a:	f200 80d4 	bhi.w	8013536 <route_Dijkstra+0x3ce>
 801338e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013392:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013396:	881a      	ldrh	r2, [r3, #0]
 8013398:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801339c:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 80133a0:	881b      	ldrh	r3, [r3, #0]
 80133a2:	429a      	cmp	r2, r3
 80133a4:	f200 80c7 	bhi.w	8013536 <route_Dijkstra+0x3ce>
 80133a8:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80133ac:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 80133b0:	881a      	ldrh	r2, [r3, #0]
 80133b2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80133b6:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 80133ba:	881b      	ldrh	r3, [r3, #0]
 80133bc:	429a      	cmp	r2, r3
 80133be:	f200 80ba 	bhi.w	8013536 <route_Dijkstra+0x3ce>
			// 直進
			switch (direction) {		//
 80133c2:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80133c6:	f103 030c 	add.w	r3, r3, #12
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	3b01      	subs	r3, #1
 80133ce:	2b03      	cmp	r3, #3
 80133d0:	f200 80b2 	bhi.w	8013538 <route_Dijkstra+0x3d0>
 80133d4:	a201      	add	r2, pc, #4	; (adr r2, 80133dc <route_Dijkstra+0x274>)
 80133d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133da:	bf00      	nop
 80133dc:	080133ed 	.word	0x080133ed
 80133e0:	0801343b 	.word	0x0801343b
 80133e4:	08013489 	.word	0x08013489
 80133e8:	080134e5 	.word	0x080134e5
			case 1:
				pushStack_walk(&stack_x,x);
 80133ec:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80133f0:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	b29a      	uxth	r2, r3
 80133f8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80133fc:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013400:	4611      	mov	r1, r2
 8013402:	4618      	mov	r0, r3
 8013404:	f001 fcba 	bl	8014d7c <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013408:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801340c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	b29a      	uxth	r2, r3
 8013414:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013418:	f103 0310 	add.w	r3, r3, #16
 801341c:	3b1c      	subs	r3, #28
 801341e:	4611      	mov	r1, r2
 8013420:	4618      	mov	r0, r3
 8013422:	f001 fcab 	bl	8014d7c <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013426:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801342a:	f103 0310 	add.w	r3, r3, #16
 801342e:	3b04      	subs	r3, #4
 8013430:	2100      	movs	r1, #0
 8013432:	4618      	mov	r0, r3
 8013434:	f001 fca2 	bl	8014d7c <pushStack_walk>
				break;
 8013438:	e07e      	b.n	8013538 <route_Dijkstra+0x3d0>
			case 2:
				pushStack_walk(&stack_x,x);
 801343a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801343e:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	b29a      	uxth	r2, r3
 8013446:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801344a:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801344e:	4611      	mov	r1, r2
 8013450:	4618      	mov	r0, r3
 8013452:	f001 fc93 	bl	8014d7c <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013456:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801345a:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	b29a      	uxth	r2, r3
 8013462:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013466:	f103 0310 	add.w	r3, r3, #16
 801346a:	3b1c      	subs	r3, #28
 801346c:	4611      	mov	r1, r2
 801346e:	4618      	mov	r0, r3
 8013470:	f001 fc84 	bl	8014d7c <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013474:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013478:	f103 0310 	add.w	r3, r3, #16
 801347c:	3b04      	subs	r3, #4
 801347e:	2101      	movs	r1, #1
 8013480:	4618      	mov	r0, r3
 8013482:	f001 fc7b 	bl	8014d7c <pushStack_walk>
				break;
 8013486:	e057      	b.n	8013538 <route_Dijkstra+0x3d0>
			case 3:
				pushStack_walk(&stack_x,x);
 8013488:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801348c:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	b29a      	uxth	r2, r3
 8013494:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013498:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801349c:	4611      	mov	r1, r2
 801349e:	4618      	mov	r0, r3
 80134a0:	f001 fc6c 	bl	8014d7c <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 80134a4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80134a8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	b29b      	uxth	r3, r3
 80134b0:	3b01      	subs	r3, #1
 80134b2:	b29a      	uxth	r2, r3
 80134b4:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80134b8:	f103 0310 	add.w	r3, r3, #16
 80134bc:	3b1c      	subs	r3, #28
 80134be:	4611      	mov	r1, r2
 80134c0:	4618      	mov	r0, r3
 80134c2:	f001 fc5b 	bl	8014d7c <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 80134c6:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80134ca:	f103 0310 	add.w	r3, r3, #16
 80134ce:	3b04      	subs	r3, #4
 80134d0:	2100      	movs	r1, #0
 80134d2:	4618      	mov	r0, r3
 80134d4:	f001 fc52 	bl	8014d7c <pushStack_walk>
				break;
 80134d8:	e02e      	b.n	8013538 <route_Dijkstra+0x3d0>
 80134da:	bf00      	nop
 80134dc:	200012f0 	.word	0x200012f0
 80134e0:	20002298 	.word	0x20002298
			case 4:
				pushStack_walk(&stack_x,x-1);
 80134e4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80134e8:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	b29b      	uxth	r3, r3
 80134f0:	3b01      	subs	r3, #1
 80134f2:	b29a      	uxth	r2, r3
 80134f4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80134f8:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80134fc:	4611      	mov	r1, r2
 80134fe:	4618      	mov	r0, r3
 8013500:	f001 fc3c 	bl	8014d7c <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013504:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013508:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	b29a      	uxth	r2, r3
 8013510:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013514:	f103 0310 	add.w	r3, r3, #16
 8013518:	3b1c      	subs	r3, #28
 801351a:	4611      	mov	r1, r2
 801351c:	4618      	mov	r0, r3
 801351e:	f001 fc2d 	bl	8014d7c <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013522:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013526:	f103 0310 	add.w	r3, r3, #16
 801352a:	3b04      	subs	r3, #4
 801352c:	2101      	movs	r1, #1
 801352e:	4618      	mov	r0, r3
 8013530:	f001 fc24 	bl	8014d7c <pushStack_walk>
				break;
 8013534:	e000      	b.n	8013538 <route_Dijkstra+0x3d0>
			}

		}
 8013536:	bf00      	nop

		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 8013538:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801353c:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013540:	881a      	ldrh	r2, [r3, #0]
 8013542:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013546:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 801354a:	881b      	ldrh	r3, [r3, #0]
 801354c:	429a      	cmp	r2, r3
 801354e:	f080 80da 	bcs.w	8013706 <route_Dijkstra+0x59e>
 8013552:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013556:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 801355a:	881a      	ldrh	r2, [r3, #0]
 801355c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013560:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013564:	881b      	ldrh	r3, [r3, #0]
 8013566:	429a      	cmp	r2, r3
 8013568:	f200 80cd 	bhi.w	8013706 <route_Dijkstra+0x59e>
 801356c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013570:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013574:	881a      	ldrh	r2, [r3, #0]
 8013576:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801357a:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 801357e:	881b      	ldrh	r3, [r3, #0]
 8013580:	429a      	cmp	r2, r3
 8013582:	f200 80c0 	bhi.w	8013706 <route_Dijkstra+0x59e>
			// 右旋回
			switch (direction) {		//
 8013586:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801358a:	f103 030c 	add.w	r3, r3, #12
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	3b01      	subs	r3, #1
 8013592:	2b03      	cmp	r3, #3
 8013594:	f200 80ac 	bhi.w	80136f0 <route_Dijkstra+0x588>
 8013598:	a201      	add	r2, pc, #4	; (adr r2, 80135a0 <route_Dijkstra+0x438>)
 801359a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801359e:	bf00      	nop
 80135a0:	080135b1 	.word	0x080135b1
 80135a4:	080135ff 	.word	0x080135ff
 80135a8:	08013651 	.word	0x08013651
 80135ac:	080136a3 	.word	0x080136a3
			case 1:
				pushStack_walk(&stack_x,x);
 80135b0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80135b4:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	b29a      	uxth	r2, r3
 80135bc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80135c0:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80135c4:	4611      	mov	r1, r2
 80135c6:	4618      	mov	r0, r3
 80135c8:	f001 fbd8 	bl	8014d7c <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80135cc:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80135d0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	b29a      	uxth	r2, r3
 80135d8:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80135dc:	f103 0310 	add.w	r3, r3, #16
 80135e0:	3b1c      	subs	r3, #28
 80135e2:	4611      	mov	r1, r2
 80135e4:	4618      	mov	r0, r3
 80135e6:	f001 fbc9 	bl	8014d7c <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80135ea:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80135ee:	f103 0310 	add.w	r3, r3, #16
 80135f2:	3b04      	subs	r3, #4
 80135f4:	2101      	movs	r1, #1
 80135f6:	4618      	mov	r0, r3
 80135f8:	f001 fbc0 	bl	8014d7c <pushStack_walk>
				break;
 80135fc:	e078      	b.n	80136f0 <route_Dijkstra+0x588>
			case 2:
				pushStack_walk(&stack_x,x);
 80135fe:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013602:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	b29a      	uxth	r2, r3
 801360a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801360e:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013612:	4611      	mov	r1, r2
 8013614:	4618      	mov	r0, r3
 8013616:	f001 fbb1 	bl	8014d7c <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 801361a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801361e:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	b29b      	uxth	r3, r3
 8013626:	3b01      	subs	r3, #1
 8013628:	b29a      	uxth	r2, r3
 801362a:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 801362e:	f103 0310 	add.w	r3, r3, #16
 8013632:	3b1c      	subs	r3, #28
 8013634:	4611      	mov	r1, r2
 8013636:	4618      	mov	r0, r3
 8013638:	f001 fba0 	bl	8014d7c <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 801363c:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013640:	f103 0310 	add.w	r3, r3, #16
 8013644:	3b04      	subs	r3, #4
 8013646:	2100      	movs	r1, #0
 8013648:	4618      	mov	r0, r3
 801364a:	f001 fb97 	bl	8014d7c <pushStack_walk>
				break;
 801364e:	e04f      	b.n	80136f0 <route_Dijkstra+0x588>
			case 3:
				pushStack_walk(&stack_x,x-1);
 8013650:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013654:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	b29b      	uxth	r3, r3
 801365c:	3b01      	subs	r3, #1
 801365e:	b29a      	uxth	r2, r3
 8013660:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013664:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013668:	4611      	mov	r1, r2
 801366a:	4618      	mov	r0, r3
 801366c:	f001 fb86 	bl	8014d7c <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013670:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013674:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	b29a      	uxth	r2, r3
 801367c:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013680:	f103 0310 	add.w	r3, r3, #16
 8013684:	3b1c      	subs	r3, #28
 8013686:	4611      	mov	r1, r2
 8013688:	4618      	mov	r0, r3
 801368a:	f001 fb77 	bl	8014d7c <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 801368e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013692:	f103 0310 	add.w	r3, r3, #16
 8013696:	3b04      	subs	r3, #4
 8013698:	2101      	movs	r1, #1
 801369a:	4618      	mov	r0, r3
 801369c:	f001 fb6e 	bl	8014d7c <pushStack_walk>
				break;
 80136a0:	e026      	b.n	80136f0 <route_Dijkstra+0x588>
			case 4:
				pushStack_walk(&stack_x,x);
 80136a2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80136a6:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	b29a      	uxth	r2, r3
 80136ae:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80136b2:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80136b6:	4611      	mov	r1, r2
 80136b8:	4618      	mov	r0, r3
 80136ba:	f001 fb5f 	bl	8014d7c <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80136be:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80136c2:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	b29a      	uxth	r2, r3
 80136ca:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80136ce:	f103 0310 	add.w	r3, r3, #16
 80136d2:	3b1c      	subs	r3, #28
 80136d4:	4611      	mov	r1, r2
 80136d6:	4618      	mov	r0, r3
 80136d8:	f001 fb50 	bl	8014d7c <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 80136dc:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80136e0:	f103 0310 	add.w	r3, r3, #16
 80136e4:	3b04      	subs	r3, #4
 80136e6:	2100      	movs	r1, #0
 80136e8:	4618      	mov	r0, r3
 80136ea:	f001 fb47 	bl	8014d7c <pushStack_walk>
				break;
 80136ee:	bf00      	nop
			}
			direction++;
 80136f0:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80136f4:	f103 030c 	add.w	r3, r3, #12
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	3301      	adds	r3, #1
 80136fc:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013700:	f102 020c 	add.w	r2, r2, #12
 8013704:	6013      	str	r3, [r2, #0]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 8013706:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801370a:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 801370e:	881a      	ldrh	r2, [r3, #0]
 8013710:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013714:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013718:	881b      	ldrh	r3, [r3, #0]
 801371a:	429a      	cmp	r2, r3
 801371c:	f080 80d9 	bcs.w	80138d2 <route_Dijkstra+0x76a>
 8013720:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013724:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013728:	881a      	ldrh	r2, [r3, #0]
 801372a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801372e:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013732:	881b      	ldrh	r3, [r3, #0]
 8013734:	429a      	cmp	r2, r3
 8013736:	f080 80cc 	bcs.w	80138d2 <route_Dijkstra+0x76a>
 801373a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801373e:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013742:	881a      	ldrh	r2, [r3, #0]
 8013744:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013748:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 801374c:	881b      	ldrh	r3, [r3, #0]
 801374e:	429a      	cmp	r2, r3
 8013750:	f200 80bf 	bhi.w	80138d2 <route_Dijkstra+0x76a>
			// 左旋回
			switch (direction) {		//
 8013754:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013758:	f103 030c 	add.w	r3, r3, #12
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	3b01      	subs	r3, #1
 8013760:	2b03      	cmp	r3, #3
 8013762:	f200 80ab 	bhi.w	80138bc <route_Dijkstra+0x754>
 8013766:	a201      	add	r2, pc, #4	; (adr r2, 801376c <route_Dijkstra+0x604>)
 8013768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801376c:	0801377d 	.word	0x0801377d
 8013770:	080137cf 	.word	0x080137cf
 8013774:	0801381d 	.word	0x0801381d
 8013778:	0801386b 	.word	0x0801386b
			case 1:
				pushStack_walk(&stack_x,x-1);
 801377c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013780:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	b29b      	uxth	r3, r3
 8013788:	3b01      	subs	r3, #1
 801378a:	b29a      	uxth	r2, r3
 801378c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013790:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013794:	4611      	mov	r1, r2
 8013796:	4618      	mov	r0, r3
 8013798:	f001 faf0 	bl	8014d7c <pushStack_walk>
				pushStack_walk(&stack_y,y);
 801379c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80137a0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	b29a      	uxth	r2, r3
 80137a8:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80137ac:	f103 0310 	add.w	r3, r3, #16
 80137b0:	3b1c      	subs	r3, #28
 80137b2:	4611      	mov	r1, r2
 80137b4:	4618      	mov	r0, r3
 80137b6:	f001 fae1 	bl	8014d7c <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80137ba:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80137be:	f103 0310 	add.w	r3, r3, #16
 80137c2:	3b04      	subs	r3, #4
 80137c4:	2101      	movs	r1, #1
 80137c6:	4618      	mov	r0, r3
 80137c8:	f001 fad8 	bl	8014d7c <pushStack_walk>
				break;
 80137cc:	e076      	b.n	80138bc <route_Dijkstra+0x754>
			case 2:
				pushStack_walk(&stack_x,x);
 80137ce:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80137d2:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	b29a      	uxth	r2, r3
 80137da:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80137de:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80137e2:	4611      	mov	r1, r2
 80137e4:	4618      	mov	r0, r3
 80137e6:	f001 fac9 	bl	8014d7c <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80137ea:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80137ee:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	b29a      	uxth	r2, r3
 80137f6:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80137fa:	f103 0310 	add.w	r3, r3, #16
 80137fe:	3b1c      	subs	r3, #28
 8013800:	4611      	mov	r1, r2
 8013802:	4618      	mov	r0, r3
 8013804:	f001 faba 	bl	8014d7c <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013808:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801380c:	f103 0310 	add.w	r3, r3, #16
 8013810:	3b04      	subs	r3, #4
 8013812:	2100      	movs	r1, #0
 8013814:	4618      	mov	r0, r3
 8013816:	f001 fab1 	bl	8014d7c <pushStack_walk>
				break;
 801381a:	e04f      	b.n	80138bc <route_Dijkstra+0x754>
			case 3:
				pushStack_walk(&stack_x,x);
 801381c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013820:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	b29a      	uxth	r2, r3
 8013828:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801382c:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013830:	4611      	mov	r1, r2
 8013832:	4618      	mov	r0, r3
 8013834:	f001 faa2 	bl	8014d7c <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013838:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801383c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	b29a      	uxth	r2, r3
 8013844:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013848:	f103 0310 	add.w	r3, r3, #16
 801384c:	3b1c      	subs	r3, #28
 801384e:	4611      	mov	r1, r2
 8013850:	4618      	mov	r0, r3
 8013852:	f001 fa93 	bl	8014d7c <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013856:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801385a:	f103 0310 	add.w	r3, r3, #16
 801385e:	3b04      	subs	r3, #4
 8013860:	2101      	movs	r1, #1
 8013862:	4618      	mov	r0, r3
 8013864:	f001 fa8a 	bl	8014d7c <pushStack_walk>
				break;
 8013868:	e028      	b.n	80138bc <route_Dijkstra+0x754>
			case 4:
				pushStack_walk(&stack_x,x);
 801386a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801386e:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	b29a      	uxth	r2, r3
 8013876:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801387a:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801387e:	4611      	mov	r1, r2
 8013880:	4618      	mov	r0, r3
 8013882:	f001 fa7b 	bl	8014d7c <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 8013886:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801388a:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	b29b      	uxth	r3, r3
 8013892:	3b01      	subs	r3, #1
 8013894:	b29a      	uxth	r2, r3
 8013896:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 801389a:	f103 0310 	add.w	r3, r3, #16
 801389e:	3b1c      	subs	r3, #28
 80138a0:	4611      	mov	r1, r2
 80138a2:	4618      	mov	r0, r3
 80138a4:	f001 fa6a 	bl	8014d7c <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 80138a8:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80138ac:	f103 0310 	add.w	r3, r3, #16
 80138b0:	3b04      	subs	r3, #4
 80138b2:	2100      	movs	r1, #0
 80138b4:	4618      	mov	r0, r3
 80138b6:	f001 fa61 	bl	8014d7c <pushStack_walk>
				break;
 80138ba:	bf00      	nop
			}
			direction--;
 80138bc:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80138c0:	f103 030c 	add.w	r3, r3, #12
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	3b01      	subs	r3, #1
 80138c8:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80138cc:	f102 020c 	add.w	r2, r2, #12
 80138d0:	6013      	str	r3, [r2, #0]
		}

		if (direction == 5) {
 80138d2:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80138d6:	f103 030c 	add.w	r3, r3, #12
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	2b05      	cmp	r3, #5
 80138de:	d105      	bne.n	80138ec <route_Dijkstra+0x784>
			direction = 1;
 80138e0:	2301      	movs	r3, #1
 80138e2:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80138e6:	f102 020c 	add.w	r2, r2, #12
 80138ea:	6013      	str	r3, [r2, #0]
		}
		if (direction == 6) {
 80138ec:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80138f0:	f103 030c 	add.w	r3, r3, #12
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	2b06      	cmp	r3, #6
 80138f8:	d105      	bne.n	8013906 <route_Dijkstra+0x79e>
			direction = 2;
 80138fa:	2302      	movs	r3, #2
 80138fc:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013900:	f102 020c 	add.w	r2, r2, #12
 8013904:	6013      	str	r3, [r2, #0]
		}
		if (direction == 0) {
 8013906:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801390a:	f103 030c 	add.w	r3, r3, #12
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d105      	bne.n	8013920 <route_Dijkstra+0x7b8>
			direction = 4;
 8013914:	2304      	movs	r3, #4
 8013916:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 801391a:	f102 020c 	add.w	r2, r2, #12
 801391e:	6013      	str	r3, [r2, #0]
		}
		if (direction == -1) {
 8013920:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013924:	f103 030c 	add.w	r3, r3, #12
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801392e:	f47f ac69 	bne.w	8013204 <route_Dijkstra+0x9c>
			direction = 3;
 8013932:	2303      	movs	r3, #3
 8013934:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013938:	f102 020c 	add.w	r2, r2, #12
 801393c:	6013      	str	r3, [r2, #0]
		update_coordinate(&x,&y,direction);
 801393e:	e461      	b.n	8013204 <route_Dijkstra+0x9c>
			break;
 8013940:	bf00      	nop
	}

	unsigned short Xcoordinate,Ycoordinate,Row_or_Column;
	while (1) {

			Xcoordinate = popStack_walk(&stack_x);
 8013942:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013946:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801394a:	4618      	mov	r0, r3
 801394c:	f001 fa40 	bl	8014dd0 <popStack_walk>
 8013950:	4603      	mov	r3, r0
 8013952:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013956:	f102 020a 	add.w	r2, r2, #10
 801395a:	8013      	strh	r3, [r2, #0]
			Ycoordinate = popStack_walk(&stack_y);
 801395c:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013960:	f103 0310 	add.w	r3, r3, #16
 8013964:	3b1c      	subs	r3, #28
 8013966:	4618      	mov	r0, r3
 8013968:	f001 fa32 	bl	8014dd0 <popStack_walk>
 801396c:	4603      	mov	r3, r0
 801396e:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013972:	f102 0208 	add.w	r2, r2, #8
 8013976:	8013      	strh	r3, [r2, #0]
			Row_or_Column = popStack_walk(&stack_matrix);
 8013978:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801397c:	f103 0310 	add.w	r3, r3, #16
 8013980:	3b04      	subs	r3, #4
 8013982:	4618      	mov	r0, r3
 8013984:	f001 fa24 	bl	8014dd0 <popStack_walk>
 8013988:	4603      	mov	r3, r0
 801398a:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 801398e:	f102 0206 	add.w	r2, r2, #6
 8013992:	8013      	strh	r3, [r2, #0]
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8013994:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013998:	f103 030a 	add.w	r3, r3, #10
 801399c:	881b      	ldrh	r3, [r3, #0]
 801399e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80139a2:	4293      	cmp	r3, r2
 80139a4:	f000 80d5 	beq.w	8013b52 <route_Dijkstra+0x9ea>
 80139a8:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80139ac:	f103 0308 	add.w	r3, r3, #8
 80139b0:	881b      	ldrh	r3, [r3, #0]
 80139b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80139b6:	4293      	cmp	r3, r2
 80139b8:	f000 80cb 	beq.w	8013b52 <route_Dijkstra+0x9ea>
				//printf("stack_end\n");
				break;
			}
			if(Row_or_Column==COLUMN && ((wall.column_look[Ycoordinate] & (1 << Xcoordinate)) == 0)){
 80139bc:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80139c0:	f103 0306 	add.w	r3, r3, #6
 80139c4:	881b      	ldrh	r3, [r3, #0]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d15c      	bne.n	8013a84 <route_Dijkstra+0x91c>
 80139ca:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80139ce:	f103 0308 	add.w	r3, r3, #8
 80139d2:	881b      	ldrh	r3, [r3, #0]
 80139d4:	4a62      	ldr	r2, [pc, #392]	; (8013b60 <route_Dijkstra+0x9f8>)
 80139d6:	332c      	adds	r3, #44	; 0x2c
 80139d8:	005b      	lsls	r3, r3, #1
 80139da:	4413      	add	r3, r2
 80139dc:	885b      	ldrh	r3, [r3, #2]
 80139de:	461a      	mov	r2, r3
 80139e0:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80139e4:	f103 030a 	add.w	r3, r3, #10
 80139e8:	881b      	ldrh	r3, [r3, #0]
 80139ea:	fa42 f303 	asr.w	r3, r2, r3
 80139ee:	f003 0301 	and.w	r3, r3, #1
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d146      	bne.n	8013a84 <route_Dijkstra+0x91c>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[Xcoordinate][Ycoordinate] = 0;
 80139f6:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80139fa:	f103 030a 	add.w	r3, r3, #10
 80139fe:	881a      	ldrh	r2, [r3, #0]
 8013a00:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a04:	f103 0308 	add.w	r3, r3, #8
 8013a08:	881b      	ldrh	r3, [r3, #0]
 8013a0a:	4956      	ldr	r1, [pc, #344]	; (8013b64 <route_Dijkstra+0x9fc>)
 8013a0c:	0112      	lsls	r2, r2, #4
 8013a0e:	4413      	add	r3, r2
 8013a10:	2200      	movs	r2, #0
 8013a12:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				walk_count[Xcoordinate][Ycoordinate + 1] = 0;
 8013a16:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a1a:	f103 030a 	add.w	r3, r3, #10
 8013a1e:	881a      	ldrh	r2, [r3, #0]
 8013a20:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a24:	f103 0308 	add.w	r3, r3, #8
 8013a28:	881b      	ldrh	r3, [r3, #0]
 8013a2a:	3301      	adds	r3, #1
 8013a2c:	494d      	ldr	r1, [pc, #308]	; (8013b64 <route_Dijkstra+0x9fc>)
 8013a2e:	0112      	lsls	r2, r2, #4
 8013a30:	4413      	add	r3, r2
 8013a32:	2200      	movs	r2, #0
 8013a34:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 8013a38:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a3c:	f103 030a 	add.w	r3, r3, #10
 8013a40:	881b      	ldrh	r3, [r3, #0]
 8013a42:	4619      	mov	r1, r3
 8013a44:	4848      	ldr	r0, [pc, #288]	; (8013b68 <route_Dijkstra+0xa00>)
 8013a46:	f001 f999 	bl	8014d7c <pushStack_walk>
 8013a4a:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a4e:	f103 0308 	add.w	r3, r3, #8
 8013a52:	881b      	ldrh	r3, [r3, #0]
 8013a54:	4619      	mov	r1, r3
 8013a56:	4845      	ldr	r0, [pc, #276]	; (8013b6c <route_Dijkstra+0xa04>)
 8013a58:	f001 f990 	bl	8014d7c <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate+1);
 8013a5c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a60:	f103 030a 	add.w	r3, r3, #10
 8013a64:	881b      	ldrh	r3, [r3, #0]
 8013a66:	4619      	mov	r1, r3
 8013a68:	483f      	ldr	r0, [pc, #252]	; (8013b68 <route_Dijkstra+0xa00>)
 8013a6a:	f001 f987 	bl	8014d7c <pushStack_walk>
 8013a6e:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a72:	f103 0308 	add.w	r3, r3, #8
 8013a76:	881b      	ldrh	r3, [r3, #0]
 8013a78:	3301      	adds	r3, #1
 8013a7a:	b29b      	uxth	r3, r3
 8013a7c:	4619      	mov	r1, r3
 8013a7e:	483b      	ldr	r0, [pc, #236]	; (8013b6c <route_Dijkstra+0xa04>)
 8013a80:	f001 f97c 	bl	8014d7c <pushStack_walk>
			}
			if(Row_or_Column==ROW && ((wall.row_look[Xcoordinate] & (1 << Ycoordinate)) == 0)){
 8013a84:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a88:	f103 0306 	add.w	r3, r3, #6
 8013a8c:	881b      	ldrh	r3, [r3, #0]
 8013a8e:	2b01      	cmp	r3, #1
 8013a90:	f47f af57 	bne.w	8013942 <route_Dijkstra+0x7da>
 8013a94:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a98:	f103 030a 	add.w	r3, r3, #10
 8013a9c:	881b      	ldrh	r3, [r3, #0]
 8013a9e:	4a30      	ldr	r2, [pc, #192]	; (8013b60 <route_Dijkstra+0x9f8>)
 8013aa0:	331c      	adds	r3, #28
 8013aa2:	005b      	lsls	r3, r3, #1
 8013aa4:	4413      	add	r3, r2
 8013aa6:	889b      	ldrh	r3, [r3, #4]
 8013aa8:	461a      	mov	r2, r3
 8013aaa:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013aae:	f103 0308 	add.w	r3, r3, #8
 8013ab2:	881b      	ldrh	r3, [r3, #0]
 8013ab4:	fa42 f303 	asr.w	r3, r2, r3
 8013ab8:	f003 0301 	and.w	r3, r3, #1
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	f47f af40 	bne.w	8013942 <route_Dijkstra+0x7da>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[Xcoordinate][Ycoordinate] = 0;
 8013ac2:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013ac6:	f103 030a 	add.w	r3, r3, #10
 8013aca:	881a      	ldrh	r2, [r3, #0]
 8013acc:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013ad0:	f103 0308 	add.w	r3, r3, #8
 8013ad4:	881b      	ldrh	r3, [r3, #0]
 8013ad6:	4923      	ldr	r1, [pc, #140]	; (8013b64 <route_Dijkstra+0x9fc>)
 8013ad8:	0112      	lsls	r2, r2, #4
 8013ada:	4413      	add	r3, r2
 8013adc:	2200      	movs	r2, #0
 8013ade:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				walk_count[Xcoordinate + 1][Ycoordinate] = 0;
 8013ae2:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013ae6:	f103 030a 	add.w	r3, r3, #10
 8013aea:	881b      	ldrh	r3, [r3, #0]
 8013aec:	1c5a      	adds	r2, r3, #1
 8013aee:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013af2:	f103 0308 	add.w	r3, r3, #8
 8013af6:	881b      	ldrh	r3, [r3, #0]
 8013af8:	491a      	ldr	r1, [pc, #104]	; (8013b64 <route_Dijkstra+0x9fc>)
 8013afa:	0112      	lsls	r2, r2, #4
 8013afc:	4413      	add	r3, r2
 8013afe:	2200      	movs	r2, #0
 8013b00:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 8013b04:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013b08:	f103 030a 	add.w	r3, r3, #10
 8013b0c:	881b      	ldrh	r3, [r3, #0]
 8013b0e:	4619      	mov	r1, r3
 8013b10:	4815      	ldr	r0, [pc, #84]	; (8013b68 <route_Dijkstra+0xa00>)
 8013b12:	f001 f933 	bl	8014d7c <pushStack_walk>
 8013b16:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013b1a:	f103 0308 	add.w	r3, r3, #8
 8013b1e:	881b      	ldrh	r3, [r3, #0]
 8013b20:	4619      	mov	r1, r3
 8013b22:	4812      	ldr	r0, [pc, #72]	; (8013b6c <route_Dijkstra+0xa04>)
 8013b24:	f001 f92a 	bl	8014d7c <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate+1);pushStack_walk(&g_Goal_y,Ycoordinate);
 8013b28:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013b2c:	f103 030a 	add.w	r3, r3, #10
 8013b30:	881b      	ldrh	r3, [r3, #0]
 8013b32:	3301      	adds	r3, #1
 8013b34:	b29b      	uxth	r3, r3
 8013b36:	4619      	mov	r1, r3
 8013b38:	480b      	ldr	r0, [pc, #44]	; (8013b68 <route_Dijkstra+0xa00>)
 8013b3a:	f001 f91f 	bl	8014d7c <pushStack_walk>
 8013b3e:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013b42:	f103 0308 	add.w	r3, r3, #8
 8013b46:	881b      	ldrh	r3, [r3, #0]
 8013b48:	4619      	mov	r1, r3
 8013b4a:	4808      	ldr	r0, [pc, #32]	; (8013b6c <route_Dijkstra+0xa04>)
 8013b4c:	f001 f916 	bl	8014d7c <pushStack_walk>
			Xcoordinate = popStack_walk(&stack_x);
 8013b50:	e6f7      	b.n	8013942 <route_Dijkstra+0x7da>
			}
	}


}
 8013b52:	bf00      	nop
 8013b54:	f507 47bc 	add.w	r7, r7, #24064	; 0x5e00
 8013b58:	3714      	adds	r7, #20
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b5e:	bf00      	nop
 8013b60:	20000c3c 	.word	0x20000c3c
 8013b64:	20000d30 	.word	0x20000d30
 8013b68:	200012f0 	.word	0x200012f0
 8013b6c:	20002298 	.word	0x20002298

08013b70 <create_StepCountMap_unknown>:




void create_StepCountMap_unknown(void){
 8013b70:	b580      	push	{r7, lr}
 8013b72:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 8013b76:	b082      	sub	sp, #8
 8013b78:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	unsigned short goalX,goalY;
	for(uint8_t xx = 0;xx <= 15;xx++){
 8013b7a:	2300      	movs	r3, #0
 8013b7c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013b80:	f102 0207 	add.w	r2, r2, #7
 8013b84:	7013      	strb	r3, [r2, #0]
 8013b86:	e033      	b.n	8013bf0 <create_StepCountMap_unknown+0x80>
		for(uint8_t yy = 0;yy <= 15;yy++){
 8013b88:	2300      	movs	r3, #0
 8013b8a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013b8e:	f102 0206 	add.w	r2, r2, #6
 8013b92:	7013      	strb	r3, [r2, #0]
 8013b94:	e01a      	b.n	8013bcc <create_StepCountMap_unknown+0x5c>
			walk_count[xx][yy] = 255;
 8013b96:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013b9a:	f103 0307 	add.w	r3, r3, #7
 8013b9e:	781a      	ldrb	r2, [r3, #0]
 8013ba0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013ba4:	f103 0306 	add.w	r3, r3, #6
 8013ba8:	781b      	ldrb	r3, [r3, #0]
 8013baa:	4966      	ldr	r1, [pc, #408]	; (8013d44 <create_StepCountMap_unknown+0x1d4>)
 8013bac:	0112      	lsls	r2, r2, #4
 8013bae:	4413      	add	r3, r2
 8013bb0:	22ff      	movs	r2, #255	; 0xff
 8013bb2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 8013bb6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013bba:	f103 0306 	add.w	r3, r3, #6
 8013bbe:	781b      	ldrb	r3, [r3, #0]
 8013bc0:	3301      	adds	r3, #1
 8013bc2:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013bc6:	f102 0206 	add.w	r2, r2, #6
 8013bca:	7013      	strb	r3, [r2, #0]
 8013bcc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013bd0:	f103 0306 	add.w	r3, r3, #6
 8013bd4:	781b      	ldrb	r3, [r3, #0]
 8013bd6:	2b0f      	cmp	r3, #15
 8013bd8:	d9dd      	bls.n	8013b96 <create_StepCountMap_unknown+0x26>
	for(uint8_t xx = 0;xx <= 15;xx++){
 8013bda:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013bde:	f103 0307 	add.w	r3, r3, #7
 8013be2:	781b      	ldrb	r3, [r3, #0]
 8013be4:	3301      	adds	r3, #1
 8013be6:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013bea:	f102 0207 	add.w	r2, r2, #7
 8013bee:	7013      	strb	r3, [r2, #0]
 8013bf0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013bf4:	f103 0307 	add.w	r3, r3, #7
 8013bf8:	781b      	ldrb	r3, [r3, #0]
 8013bfa:	2b0f      	cmp	r3, #15
 8013bfc:	d9c4      	bls.n	8013b88 <create_StepCountMap_unknown+0x18>
		}
	}

	initStack_walk(&stack_x);
 8013bfe:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013c02:	4618      	mov	r0, r3
 8013c04:	f001 f8aa 	bl	8014d5c <initStack_walk>
	initStack_walk(&stack_y);
 8013c08:	f107 0308 	add.w	r3, r7, #8
 8013c0c:	3b04      	subs	r3, #4
 8013c0e:	4618      	mov	r0, r3
 8013c10:	f001 f8a4 	bl	8014d5c <initStack_walk>

	while (1) {

			goalX = popStack_walk(&g_Goal_x);
 8013c14:	484c      	ldr	r0, [pc, #304]	; (8013d48 <create_StepCountMap_unknown+0x1d8>)
 8013c16:	f001 f8db 	bl	8014dd0 <popStack_walk>
 8013c1a:	4603      	mov	r3, r0
 8013c1c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013c20:	f102 021a 	add.w	r2, r2, #26
 8013c24:	8013      	strh	r3, [r2, #0]
			goalY = popStack_walk(&g_Goal_y);
 8013c26:	4849      	ldr	r0, [pc, #292]	; (8013d4c <create_StepCountMap_unknown+0x1dc>)
 8013c28:	f001 f8d2 	bl	8014dd0 <popStack_walk>
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013c32:	f102 0218 	add.w	r2, r2, #24
 8013c36:	8013      	strh	r3, [r2, #0]
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (goalX == 65535 || goalY == 65535) {
 8013c38:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c3c:	f103 031a 	add.w	r3, r3, #26
 8013c40:	881b      	ldrh	r3, [r3, #0]
 8013c42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013c46:	4293      	cmp	r3, r2
 8013c48:	d030      	beq.n	8013cac <create_StepCountMap_unknown+0x13c>
 8013c4a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c4e:	f103 0318 	add.w	r3, r3, #24
 8013c52:	881b      	ldrh	r3, [r3, #0]
 8013c54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013c58:	4293      	cmp	r3, r2
 8013c5a:	d027      	beq.n	8013cac <create_StepCountMap_unknown+0x13c>
				//printf("stack_end\n");
				break;
			}
			walk_count[goalX][goalY] = 0;
 8013c5c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c60:	f103 031a 	add.w	r3, r3, #26
 8013c64:	881a      	ldrh	r2, [r3, #0]
 8013c66:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c6a:	f103 0318 	add.w	r3, r3, #24
 8013c6e:	881b      	ldrh	r3, [r3, #0]
 8013c70:	4934      	ldr	r1, [pc, #208]	; (8013d44 <create_StepCountMap_unknown+0x1d4>)
 8013c72:	0112      	lsls	r2, r2, #4
 8013c74:	4413      	add	r3, r2
 8013c76:	2200      	movs	r2, #0
 8013c78:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,goalX);pushStack_walk(&stack_y,goalY);
 8013c7c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c80:	f103 031a 	add.w	r3, r3, #26
 8013c84:	881a      	ldrh	r2, [r3, #0]
 8013c86:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013c8a:	4611      	mov	r1, r2
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	f001 f875 	bl	8014d7c <pushStack_walk>
 8013c92:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c96:	f103 0318 	add.w	r3, r3, #24
 8013c9a:	881a      	ldrh	r2, [r3, #0]
 8013c9c:	f107 0308 	add.w	r3, r7, #8
 8013ca0:	3b04      	subs	r3, #4
 8013ca2:	4611      	mov	r1, r2
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	f001 f869 	bl	8014d7c <pushStack_walk>
			goalX = popStack_walk(&g_Goal_x);
 8013caa:	e7b3      	b.n	8013c14 <create_StepCountMap_unknown+0xa4>
	}
	if(stack_x.tail == stack_x.head){
 8013cac:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013cb0:	f103 0308 	add.w	r3, r3, #8
 8013cb4:	f6a3 73bc 	subw	r3, r3, #4028	; 0xfbc
 8013cb8:	685a      	ldr	r2, [r3, #4]
 8013cba:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013cbe:	f103 0308 	add.w	r3, r3, #8
 8013cc2:	f6a3 73bc 	subw	r3, r3, #4028	; 0xfbc
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	429a      	cmp	r2, r3
 8013cca:	d11b      	bne.n	8013d04 <create_StepCountMap_unknown+0x194>
		walk_count[0][0] = 0;
 8013ccc:	4b1d      	ldr	r3, [pc, #116]	; (8013d44 <create_StepCountMap_unknown+0x1d4>)
 8013cce:	2200      	movs	r2, #0
 8013cd0:	801a      	strh	r2, [r3, #0]
		pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8013cd2:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013cd6:	2100      	movs	r1, #0
 8013cd8:	4618      	mov	r0, r3
 8013cda:	f001 f84f 	bl	8014d7c <pushStack_walk>
 8013cde:	f107 0308 	add.w	r3, r7, #8
 8013ce2:	3b04      	subs	r3, #4
 8013ce4:	2100      	movs	r1, #0
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	f001 f848 	bl	8014d7c <pushStack_walk>
		if (Dijkstra_maker_flag>=1){
 8013cec:	4b18      	ldr	r3, [pc, #96]	; (8013d50 <create_StepCountMap_unknown+0x1e0>)
 8013cee:	781b      	ldrb	r3, [r3, #0]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d003      	beq.n	8013cfc <create_StepCountMap_unknown+0x18c>
			Dijkstra_maker_flag=2;
 8013cf4:	4b16      	ldr	r3, [pc, #88]	; (8013d50 <create_StepCountMap_unknown+0x1e0>)
 8013cf6:	2202      	movs	r2, #2
 8013cf8:	701a      	strb	r2, [r3, #0]
 8013cfa:	e006      	b.n	8013d0a <create_StepCountMap_unknown+0x19a>
		}else{
			Dijkstra_maker_flag=1;
 8013cfc:	4b14      	ldr	r3, [pc, #80]	; (8013d50 <create_StepCountMap_unknown+0x1e0>)
 8013cfe:	2201      	movs	r2, #1
 8013d00:	701a      	strb	r2, [r3, #0]
 8013d02:	e002      	b.n	8013d0a <create_StepCountMap_unknown+0x19a>
		}
	}else{
		Dijkstra_maker_flag=0;
 8013d04:	4b12      	ldr	r3, [pc, #72]	; (8013d50 <create_StepCountMap_unknown+0x1e0>)
 8013d06:	2200      	movs	r2, #0
 8013d08:	701a      	strb	r2, [r3, #0]
	}
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short count_number = 1;
 8013d0a:	2301      	movs	r3, #1
 8013d0c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013d10:	f102 0204 	add.w	r2, r2, #4
 8013d14:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8013d16:	2301      	movs	r3, #1
 8013d18:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013d1c:	f102 0202 	add.w	r2, r2, #2
 8013d20:	8013      	strh	r3, [r2, #0]
 8013d22:	2301      	movs	r3, #1
 8013d24:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013d28:	8013      	strh	r3, [r2, #0]
 8013d2a:	2301      	movs	r3, #1
 8013d2c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013d30:	f102 021e 	add.w	r2, r2, #30
 8013d34:	8013      	strh	r3, [r2, #0]
 8013d36:	2301      	movs	r3, #1
 8013d38:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013d3c:	f102 021c 	add.w	r2, r2, #28
 8013d40:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8013d42:	e23b      	b.n	80141bc <create_StepCountMap_unknown+0x64c>
 8013d44:	20000d30 	.word	0x20000d30
 8013d48:	200012f0 	.word	0x200012f0
 8013d4c:	20002298 	.word	0x20002298
 8013d50:	20000d2c 	.word	0x20000d2c

		Xcoordinate = popStack_walk(&stack_x);
 8013d54:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013d58:	4618      	mov	r0, r3
 8013d5a:	f001 f839 	bl	8014dd0 <popStack_walk>
 8013d5e:	4603      	mov	r3, r0
 8013d60:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013d64:	f102 0216 	add.w	r2, r2, #22
 8013d68:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 8013d6a:	f107 0308 	add.w	r3, r7, #8
 8013d6e:	3b04      	subs	r3, #4
 8013d70:	4618      	mov	r0, r3
 8013d72:	f001 f82d 	bl	8014dd0 <popStack_walk>
 8013d76:	4603      	mov	r3, r0
 8013d78:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013d7c:	f102 0214 	add.w	r2, r2, #20
 8013d80:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8013d82:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013d86:	f103 0316 	add.w	r3, r3, #22
 8013d8a:	881b      	ldrh	r3, [r3, #0]
 8013d8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d90:	4293      	cmp	r3, r2
 8013d92:	f000 821b 	beq.w	80141cc <create_StepCountMap_unknown+0x65c>
 8013d96:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013d9a:	f103 0314 	add.w	r3, r3, #20
 8013d9e:	881b      	ldrh	r3, [r3, #0]
 8013da0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013da4:	4293      	cmp	r3, r2
 8013da6:	f000 8211 	beq.w	80141cc <create_StepCountMap_unknown+0x65c>
			//printf("stack_end\n");
			break;
		}

		if (Ycoordinate <= 14) {
 8013daa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013dae:	f103 0314 	add.w	r3, r3, #20
 8013db2:	881b      	ldrh	r3, [r3, #0]
 8013db4:	2b0e      	cmp	r3, #14
 8013db6:	d81a      	bhi.n	8013dee <create_StepCountMap_unknown+0x27e>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8013db8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013dbc:	f103 0314 	add.w	r3, r3, #20
 8013dc0:	881b      	ldrh	r3, [r3, #0]
 8013dc2:	4ac4      	ldr	r2, [pc, #784]	; (80140d4 <create_StepCountMap_unknown+0x564>)
 8013dc4:	330c      	adds	r3, #12
 8013dc6:	005b      	lsls	r3, r3, #1
 8013dc8:	4413      	add	r3, r2
 8013dca:	88db      	ldrh	r3, [r3, #6]
 8013dcc:	b21a      	sxth	r2, r3
 8013dce:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013dd2:	f103 0316 	add.w	r3, r3, #22
 8013dd6:	881b      	ldrh	r3, [r3, #0]
 8013dd8:	2101      	movs	r1, #1
 8013dda:	fa01 f303 	lsl.w	r3, r1, r3
 8013dde:	b21b      	sxth	r3, r3
 8013de0:	4013      	ands	r3, r2
 8013de2:	b21b      	sxth	r3, r3
 8013de4:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013de8:	f102 0202 	add.w	r2, r2, #2
 8013dec:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 8013dee:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013df2:	f103 0314 	add.w	r3, r3, #20
 8013df6:	881b      	ldrh	r3, [r3, #0]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d019      	beq.n	8013e30 <create_StepCountMap_unknown+0x2c0>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 8013dfc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e00:	f103 0314 	add.w	r3, r3, #20
 8013e04:	881b      	ldrh	r3, [r3, #0]
 8013e06:	3b01      	subs	r3, #1
 8013e08:	4ab2      	ldr	r2, [pc, #712]	; (80140d4 <create_StepCountMap_unknown+0x564>)
 8013e0a:	330c      	adds	r3, #12
 8013e0c:	005b      	lsls	r3, r3, #1
 8013e0e:	4413      	add	r3, r2
 8013e10:	88db      	ldrh	r3, [r3, #6]
 8013e12:	b21a      	sxth	r2, r3
 8013e14:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e18:	f103 0316 	add.w	r3, r3, #22
 8013e1c:	881b      	ldrh	r3, [r3, #0]
 8013e1e:	2101      	movs	r1, #1
 8013e20:	fa01 f303 	lsl.w	r3, r1, r3
 8013e24:	b21b      	sxth	r3, r3
 8013e26:	4013      	ands	r3, r2
 8013e28:	b21b      	sxth	r3, r3
 8013e2a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013e2e:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 8013e30:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e34:	f103 0316 	add.w	r3, r3, #22
 8013e38:	881b      	ldrh	r3, [r3, #0]
 8013e3a:	2b0e      	cmp	r3, #14
 8013e3c:	d818      	bhi.n	8013e70 <create_StepCountMap_unknown+0x300>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 8013e3e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e42:	f103 0316 	add.w	r3, r3, #22
 8013e46:	881b      	ldrh	r3, [r3, #0]
 8013e48:	4aa2      	ldr	r2, [pc, #648]	; (80140d4 <create_StepCountMap_unknown+0x564>)
 8013e4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013e4e:	b21a      	sxth	r2, r3
 8013e50:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e54:	f103 0314 	add.w	r3, r3, #20
 8013e58:	881b      	ldrh	r3, [r3, #0]
 8013e5a:	2101      	movs	r1, #1
 8013e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8013e60:	b21b      	sxth	r3, r3
 8013e62:	4013      	ands	r3, r2
 8013e64:	b21b      	sxth	r3, r3
 8013e66:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013e6a:	f102 021e 	add.w	r2, r2, #30
 8013e6e:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 8013e70:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e74:	f103 0316 	add.w	r3, r3, #22
 8013e78:	881b      	ldrh	r3, [r3, #0]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d019      	beq.n	8013eb2 <create_StepCountMap_unknown+0x342>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 8013e7e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e82:	f103 0316 	add.w	r3, r3, #22
 8013e86:	881b      	ldrh	r3, [r3, #0]
 8013e88:	3b01      	subs	r3, #1
 8013e8a:	4a92      	ldr	r2, [pc, #584]	; (80140d4 <create_StepCountMap_unknown+0x564>)
 8013e8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013e90:	b21a      	sxth	r2, r3
 8013e92:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e96:	f103 0314 	add.w	r3, r3, #20
 8013e9a:	881b      	ldrh	r3, [r3, #0]
 8013e9c:	2101      	movs	r1, #1
 8013e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8013ea2:	b21b      	sxth	r3, r3
 8013ea4:	4013      	ands	r3, r2
 8013ea6:	b21b      	sxth	r3, r3
 8013ea8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013eac:	f102 021c 	add.w	r2, r2, #28
 8013eb0:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 8013eb2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013eb6:	f103 0316 	add.w	r3, r3, #22
 8013eba:	881a      	ldrh	r2, [r3, #0]
 8013ebc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ec0:	f103 0314 	add.w	r3, r3, #20
 8013ec4:	881b      	ldrh	r3, [r3, #0]
 8013ec6:	3301      	adds	r3, #1
 8013ec8:	4983      	ldr	r1, [pc, #524]	; (80140d8 <create_StepCountMap_unknown+0x568>)
 8013eca:	0112      	lsls	r2, r2, #4
 8013ecc:	4413      	add	r3, r2
 8013ece:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013ed2:	2bff      	cmp	r3, #255	; 0xff
 8013ed4:	d148      	bne.n	8013f68 <create_StepCountMap_unknown+0x3f8>
 8013ed6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013eda:	f103 0314 	add.w	r3, r3, #20
 8013ede:	881b      	ldrh	r3, [r3, #0]
 8013ee0:	2b0f      	cmp	r3, #15
 8013ee2:	d041      	beq.n	8013f68 <create_StepCountMap_unknown+0x3f8>
 8013ee4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013ee8:	f103 0302 	add.w	r3, r3, #2
 8013eec:	881b      	ldrh	r3, [r3, #0]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d13a      	bne.n	8013f68 <create_StepCountMap_unknown+0x3f8>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8013ef2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ef6:	f103 0316 	add.w	r3, r3, #22
 8013efa:	881a      	ldrh	r2, [r3, #0]
 8013efc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f00:	f103 0314 	add.w	r3, r3, #20
 8013f04:	881b      	ldrh	r3, [r3, #0]
 8013f06:	4974      	ldr	r1, [pc, #464]	; (80140d8 <create_StepCountMap_unknown+0x568>)
 8013f08:	0112      	lsls	r2, r2, #4
 8013f0a:	4413      	add	r3, r2
 8013f0c:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8013f10:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f14:	f103 0316 	add.w	r3, r3, #22
 8013f18:	881a      	ldrh	r2, [r3, #0]
 8013f1a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f1e:	f103 0314 	add.w	r3, r3, #20
 8013f22:	881b      	ldrh	r3, [r3, #0]
 8013f24:	3301      	adds	r3, #1
 8013f26:	3101      	adds	r1, #1
 8013f28:	b288      	uxth	r0, r1
 8013f2a:	496b      	ldr	r1, [pc, #428]	; (80140d8 <create_StepCountMap_unknown+0x568>)
 8013f2c:	0112      	lsls	r2, r2, #4
 8013f2e:	4413      	add	r3, r2
 8013f30:	4602      	mov	r2, r0
 8013f32:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8013f36:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f3a:	f103 0316 	add.w	r3, r3, #22
 8013f3e:	881a      	ldrh	r2, [r3, #0]
 8013f40:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013f44:	4611      	mov	r1, r2
 8013f46:	4618      	mov	r0, r3
 8013f48:	f000 ff18 	bl	8014d7c <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8013f4c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f50:	f103 0314 	add.w	r3, r3, #20
 8013f54:	881b      	ldrh	r3, [r3, #0]
 8013f56:	3301      	adds	r3, #1
 8013f58:	b29a      	uxth	r2, r3
 8013f5a:	f107 0308 	add.w	r3, r7, #8
 8013f5e:	3b04      	subs	r3, #4
 8013f60:	4611      	mov	r1, r2
 8013f62:	4618      	mov	r0, r3
 8013f64:	f000 ff0a 	bl	8014d7c <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8013f68:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f6c:	f103 0316 	add.w	r3, r3, #22
 8013f70:	881a      	ldrh	r2, [r3, #0]
 8013f72:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f76:	f103 0314 	add.w	r3, r3, #20
 8013f7a:	881b      	ldrh	r3, [r3, #0]
 8013f7c:	3b01      	subs	r3, #1
 8013f7e:	4956      	ldr	r1, [pc, #344]	; (80140d8 <create_StepCountMap_unknown+0x568>)
 8013f80:	0112      	lsls	r2, r2, #4
 8013f82:	4413      	add	r3, r2
 8013f84:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013f88:	2bff      	cmp	r3, #255	; 0xff
 8013f8a:	d146      	bne.n	801401a <create_StepCountMap_unknown+0x4aa>
 8013f8c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f90:	f103 0314 	add.w	r3, r3, #20
 8013f94:	881b      	ldrh	r3, [r3, #0]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d03f      	beq.n	801401a <create_StepCountMap_unknown+0x4aa>
 8013f9a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013f9e:	881b      	ldrh	r3, [r3, #0]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d13a      	bne.n	801401a <create_StepCountMap_unknown+0x4aa>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8013fa4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013fa8:	f103 0316 	add.w	r3, r3, #22
 8013fac:	881a      	ldrh	r2, [r3, #0]
 8013fae:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013fb2:	f103 0314 	add.w	r3, r3, #20
 8013fb6:	881b      	ldrh	r3, [r3, #0]
 8013fb8:	4947      	ldr	r1, [pc, #284]	; (80140d8 <create_StepCountMap_unknown+0x568>)
 8013fba:	0112      	lsls	r2, r2, #4
 8013fbc:	4413      	add	r3, r2
 8013fbe:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8013fc2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013fc6:	f103 0316 	add.w	r3, r3, #22
 8013fca:	881a      	ldrh	r2, [r3, #0]
 8013fcc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013fd0:	f103 0314 	add.w	r3, r3, #20
 8013fd4:	881b      	ldrh	r3, [r3, #0]
 8013fd6:	3b01      	subs	r3, #1
 8013fd8:	3101      	adds	r1, #1
 8013fda:	b288      	uxth	r0, r1
 8013fdc:	493e      	ldr	r1, [pc, #248]	; (80140d8 <create_StepCountMap_unknown+0x568>)
 8013fde:	0112      	lsls	r2, r2, #4
 8013fe0:	4413      	add	r3, r2
 8013fe2:	4602      	mov	r2, r0
 8013fe4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8013fe8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013fec:	f103 0316 	add.w	r3, r3, #22
 8013ff0:	881a      	ldrh	r2, [r3, #0]
 8013ff2:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013ff6:	4611      	mov	r1, r2
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	f000 febf 	bl	8014d7c <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8013ffe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014002:	f103 0314 	add.w	r3, r3, #20
 8014006:	881b      	ldrh	r3, [r3, #0]
 8014008:	3b01      	subs	r3, #1
 801400a:	b29a      	uxth	r2, r3
 801400c:	f107 0308 	add.w	r3, r7, #8
 8014010:	3b04      	subs	r3, #4
 8014012:	4611      	mov	r1, r2
 8014014:	4618      	mov	r0, r3
 8014016:	f000 feb1 	bl	8014d7c <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == 255 && Xcoordinate != 15 && wall_east == 0) {
 801401a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801401e:	f103 0316 	add.w	r3, r3, #22
 8014022:	881b      	ldrh	r3, [r3, #0]
 8014024:	1c5a      	adds	r2, r3, #1
 8014026:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801402a:	f103 0314 	add.w	r3, r3, #20
 801402e:	881b      	ldrh	r3, [r3, #0]
 8014030:	4929      	ldr	r1, [pc, #164]	; (80140d8 <create_StepCountMap_unknown+0x568>)
 8014032:	0112      	lsls	r2, r2, #4
 8014034:	4413      	add	r3, r2
 8014036:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801403a:	2bff      	cmp	r3, #255	; 0xff
 801403c:	d14e      	bne.n	80140dc <create_StepCountMap_unknown+0x56c>
 801403e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014042:	f103 0316 	add.w	r3, r3, #22
 8014046:	881b      	ldrh	r3, [r3, #0]
 8014048:	2b0f      	cmp	r3, #15
 801404a:	d047      	beq.n	80140dc <create_StepCountMap_unknown+0x56c>
 801404c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014050:	f103 031e 	add.w	r3, r3, #30
 8014054:	881b      	ldrh	r3, [r3, #0]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d140      	bne.n	80140dc <create_StepCountMap_unknown+0x56c>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 801405a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801405e:	f103 0316 	add.w	r3, r3, #22
 8014062:	881a      	ldrh	r2, [r3, #0]
 8014064:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014068:	f103 0314 	add.w	r3, r3, #20
 801406c:	881b      	ldrh	r3, [r3, #0]
 801406e:	491a      	ldr	r1, [pc, #104]	; (80140d8 <create_StepCountMap_unknown+0x568>)
 8014070:	0112      	lsls	r2, r2, #4
 8014072:	4413      	add	r3, r2
 8014074:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014078:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801407c:	f103 0316 	add.w	r3, r3, #22
 8014080:	881b      	ldrh	r3, [r3, #0]
 8014082:	1c5a      	adds	r2, r3, #1
 8014084:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014088:	f103 0314 	add.w	r3, r3, #20
 801408c:	881b      	ldrh	r3, [r3, #0]
 801408e:	3101      	adds	r1, #1
 8014090:	b288      	uxth	r0, r1
 8014092:	4911      	ldr	r1, [pc, #68]	; (80140d8 <create_StepCountMap_unknown+0x568>)
 8014094:	0112      	lsls	r2, r2, #4
 8014096:	4413      	add	r3, r2
 8014098:	4602      	mov	r2, r0
 801409a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 801409e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140a2:	f103 0316 	add.w	r3, r3, #22
 80140a6:	881b      	ldrh	r3, [r3, #0]
 80140a8:	3301      	adds	r3, #1
 80140aa:	b29a      	uxth	r2, r3
 80140ac:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80140b0:	4611      	mov	r1, r2
 80140b2:	4618      	mov	r0, r3
 80140b4:	f000 fe62 	bl	8014d7c <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 80140b8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140bc:	f103 0314 	add.w	r3, r3, #20
 80140c0:	881a      	ldrh	r2, [r3, #0]
 80140c2:	f107 0308 	add.w	r3, r7, #8
 80140c6:	3b04      	subs	r3, #4
 80140c8:	4611      	mov	r1, r2
 80140ca:	4618      	mov	r0, r3
 80140cc:	f000 fe56 	bl	8014d7c <pushStack_walk>
 80140d0:	e004      	b.n	80140dc <create_StepCountMap_unknown+0x56c>
 80140d2:	bf00      	nop
 80140d4:	20000c3c 	.word	0x20000c3c
 80140d8:	20000d30 	.word	0x20000d30
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == 255 && Xcoordinate != 0 && wall_west == 0) {
 80140dc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140e0:	f103 0316 	add.w	r3, r3, #22
 80140e4:	881b      	ldrh	r3, [r3, #0]
 80140e6:	1e5a      	subs	r2, r3, #1
 80140e8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140ec:	f103 0314 	add.w	r3, r3, #20
 80140f0:	881b      	ldrh	r3, [r3, #0]
 80140f2:	4939      	ldr	r1, [pc, #228]	; (80141d8 <create_StepCountMap_unknown+0x668>)
 80140f4:	0112      	lsls	r2, r2, #4
 80140f6:	4413      	add	r3, r2
 80140f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80140fc:	2bff      	cmp	r3, #255	; 0xff
 80140fe:	d148      	bne.n	8014192 <create_StepCountMap_unknown+0x622>
 8014100:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014104:	f103 0316 	add.w	r3, r3, #22
 8014108:	881b      	ldrh	r3, [r3, #0]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d041      	beq.n	8014192 <create_StepCountMap_unknown+0x622>
 801410e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014112:	f103 031c 	add.w	r3, r3, #28
 8014116:	881b      	ldrh	r3, [r3, #0]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d13a      	bne.n	8014192 <create_StepCountMap_unknown+0x622>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 801411c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014120:	f103 0316 	add.w	r3, r3, #22
 8014124:	881a      	ldrh	r2, [r3, #0]
 8014126:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801412a:	f103 0314 	add.w	r3, r3, #20
 801412e:	881b      	ldrh	r3, [r3, #0]
 8014130:	4929      	ldr	r1, [pc, #164]	; (80141d8 <create_StepCountMap_unknown+0x668>)
 8014132:	0112      	lsls	r2, r2, #4
 8014134:	4413      	add	r3, r2
 8014136:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 801413a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801413e:	f103 0316 	add.w	r3, r3, #22
 8014142:	881b      	ldrh	r3, [r3, #0]
 8014144:	1e5a      	subs	r2, r3, #1
 8014146:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801414a:	f103 0314 	add.w	r3, r3, #20
 801414e:	881b      	ldrh	r3, [r3, #0]
 8014150:	3101      	adds	r1, #1
 8014152:	b288      	uxth	r0, r1
 8014154:	4920      	ldr	r1, [pc, #128]	; (80141d8 <create_StepCountMap_unknown+0x668>)
 8014156:	0112      	lsls	r2, r2, #4
 8014158:	4413      	add	r3, r2
 801415a:	4602      	mov	r2, r0
 801415c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8014160:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014164:	f103 0316 	add.w	r3, r3, #22
 8014168:	881b      	ldrh	r3, [r3, #0]
 801416a:	3b01      	subs	r3, #1
 801416c:	b29a      	uxth	r2, r3
 801416e:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014172:	4611      	mov	r1, r2
 8014174:	4618      	mov	r0, r3
 8014176:	f000 fe01 	bl	8014d7c <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 801417a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801417e:	f103 0314 	add.w	r3, r3, #20
 8014182:	881a      	ldrh	r2, [r3, #0]
 8014184:	f107 0308 	add.w	r3, r7, #8
 8014188:	3b04      	subs	r3, #4
 801418a:	4611      	mov	r1, r2
 801418c:	4618      	mov	r0, r3
 801418e:	f000 fdf5 	bl	8014d7c <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 8014192:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014196:	f103 0316 	add.w	r3, r3, #22
 801419a:	881a      	ldrh	r2, [r3, #0]
 801419c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80141a0:	f103 0314 	add.w	r3, r3, #20
 80141a4:	881b      	ldrh	r3, [r3, #0]
 80141a6:	490c      	ldr	r1, [pc, #48]	; (80141d8 <create_StepCountMap_unknown+0x668>)
 80141a8:	0112      	lsls	r2, r2, #4
 80141aa:	4413      	add	r3, r2
 80141ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80141b0:	3301      	adds	r3, #1
 80141b2:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80141b6:	f102 0204 	add.w	r2, r2, #4
 80141ba:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 80141bc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80141c0:	f103 0304 	add.w	r3, r3, #4
 80141c4:	881b      	ldrh	r3, [r3, #0]
 80141c6:	2bfe      	cmp	r3, #254	; 0xfe
 80141c8:	f67f adc4 	bls.w	8013d54 <create_StepCountMap_unknown+0x1e4>

		}

}
 80141cc:	bf00      	nop
 80141ce:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 80141d2:	3708      	adds	r7, #8
 80141d4:	46bd      	mov	sp, r7
 80141d6:	bd80      	pop	{r7, pc}
 80141d8:	20000d30 	.word	0x20000d30

080141dc <create_StepCountMap_queue>:





void create_StepCountMap_queue(void){
 80141dc:	b580      	push	{r7, lr}
 80141de:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 80141e2:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(uint8_t xx = 0;xx <= 15;xx++){
 80141e4:	2300      	movs	r3, #0
 80141e6:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80141ea:	f102 021f 	add.w	r2, r2, #31
 80141ee:	7013      	strb	r3, [r2, #0]
 80141f0:	e033      	b.n	801425a <create_StepCountMap_queue+0x7e>
		for(uint8_t yy = 0;yy <= 15;yy++){
 80141f2:	2300      	movs	r3, #0
 80141f4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80141f8:	f102 021e 	add.w	r2, r2, #30
 80141fc:	7013      	strb	r3, [r2, #0]
 80141fe:	e01a      	b.n	8014236 <create_StepCountMap_queue+0x5a>
			walk_count[xx][yy] = 255;
 8014200:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014204:	f103 031f 	add.w	r3, r3, #31
 8014208:	781a      	ldrb	r2, [r3, #0]
 801420a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801420e:	f103 031e 	add.w	r3, r3, #30
 8014212:	781b      	ldrb	r3, [r3, #0]
 8014214:	4945      	ldr	r1, [pc, #276]	; (801432c <create_StepCountMap_queue+0x150>)
 8014216:	0112      	lsls	r2, r2, #4
 8014218:	4413      	add	r3, r2
 801421a:	22ff      	movs	r2, #255	; 0xff
 801421c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 8014220:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014224:	f103 031e 	add.w	r3, r3, #30
 8014228:	781b      	ldrb	r3, [r3, #0]
 801422a:	3301      	adds	r3, #1
 801422c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014230:	f102 021e 	add.w	r2, r2, #30
 8014234:	7013      	strb	r3, [r2, #0]
 8014236:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801423a:	f103 031e 	add.w	r3, r3, #30
 801423e:	781b      	ldrb	r3, [r3, #0]
 8014240:	2b0f      	cmp	r3, #15
 8014242:	d9dd      	bls.n	8014200 <create_StepCountMap_queue+0x24>
	for(uint8_t xx = 0;xx <= 15;xx++){
 8014244:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014248:	f103 031f 	add.w	r3, r3, #31
 801424c:	781b      	ldrb	r3, [r3, #0]
 801424e:	3301      	adds	r3, #1
 8014250:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014254:	f102 021f 	add.w	r2, r2, #31
 8014258:	7013      	strb	r3, [r2, #0]
 801425a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801425e:	f103 031f 	add.w	r3, r3, #31
 8014262:	781b      	ldrb	r3, [r3, #0]
 8014264:	2b0f      	cmp	r3, #15
 8014266:	d9c4      	bls.n	80141f2 <create_StepCountMap_queue+0x16>
		}
	}
	initStack_walk(&stack_x);
 8014268:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 801426c:	4618      	mov	r0, r3
 801426e:	f000 fd75 	bl	8014d5c <initStack_walk>
	initStack_walk(&stack_y);
 8014272:	463b      	mov	r3, r7
 8014274:	4618      	mov	r0, r3
 8014276:	f000 fd71 	bl	8014d5c <initStack_walk>


	walk_count[GOAL_X][GOAL_Y] = 0;
 801427a:	4b2c      	ldr	r3, [pc, #176]	; (801432c <create_StepCountMap_queue+0x150>)
 801427c:	2200      	movs	r2, #0
 801427e:	841a      	strh	r2, [r3, #32]
	walk_count[GOAL_X + 1][GOAL_Y] = 0;
 8014280:	4b2a      	ldr	r3, [pc, #168]	; (801432c <create_StepCountMap_queue+0x150>)
 8014282:	2200      	movs	r2, #0
 8014284:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	walk_count[GOAL_X][GOAL_Y + 1] = 0;
 8014288:	4b28      	ldr	r3, [pc, #160]	; (801432c <create_StepCountMap_queue+0x150>)
 801428a:	2200      	movs	r2, #0
 801428c:	845a      	strh	r2, [r3, #34]	; 0x22
	walk_count[GOAL_X + 1][GOAL_Y + 1] = 0;
 801428e:	4b27      	ldr	r3, [pc, #156]	; (801432c <create_StepCountMap_queue+0x150>)
 8014290:	2200      	movs	r2, #0
 8014292:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 8014296:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 801429a:	2101      	movs	r1, #1
 801429c:	4618      	mov	r0, r3
 801429e:	f000 fd6d 	bl	8014d7c <pushStack_walk>
 80142a2:	463b      	mov	r3, r7
 80142a4:	2100      	movs	r1, #0
 80142a6:	4618      	mov	r0, r3
 80142a8:	f000 fd68 	bl	8014d7c <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y);
 80142ac:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 80142b0:	2102      	movs	r1, #2
 80142b2:	4618      	mov	r0, r3
 80142b4:	f000 fd62 	bl	8014d7c <pushStack_walk>
 80142b8:	463b      	mov	r3, r7
 80142ba:	2100      	movs	r1, #0
 80142bc:	4618      	mov	r0, r3
 80142be:	f000 fd5d 	bl	8014d7c <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y + 1);
 80142c2:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 80142c6:	2101      	movs	r1, #1
 80142c8:	4618      	mov	r0, r3
 80142ca:	f000 fd57 	bl	8014d7c <pushStack_walk>
 80142ce:	463b      	mov	r3, r7
 80142d0:	2101      	movs	r1, #1
 80142d2:	4618      	mov	r0, r3
 80142d4:	f000 fd52 	bl	8014d7c <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y + 1);
 80142d8:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 80142dc:	2102      	movs	r1, #2
 80142de:	4618      	mov	r0, r3
 80142e0:	f000 fd4c 	bl	8014d7c <pushStack_walk>
 80142e4:	463b      	mov	r3, r7
 80142e6:	2101      	movs	r1, #1
 80142e8:	4618      	mov	r0, r3
 80142ea:	f000 fd47 	bl	8014d7c <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short count_number = 1;
 80142ee:	2301      	movs	r3, #1
 80142f0:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80142f4:	f102 021c 	add.w	r2, r2, #28
 80142f8:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 80142fa:	2301      	movs	r3, #1
 80142fc:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014300:	f102 021a 	add.w	r2, r2, #26
 8014304:	8013      	strh	r3, [r2, #0]
 8014306:	2301      	movs	r3, #1
 8014308:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801430c:	f102 0218 	add.w	r2, r2, #24
 8014310:	8013      	strh	r3, [r2, #0]
 8014312:	2301      	movs	r3, #1
 8014314:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014318:	f102 0216 	add.w	r2, r2, #22
 801431c:	8013      	strh	r3, [r2, #0]
 801431e:	2301      	movs	r3, #1
 8014320:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014324:	f102 0214 	add.w	r2, r2, #20
 8014328:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 801432a:	e22f      	b.n	801478c <create_StepCountMap_queue+0x5b0>
 801432c:	20000d30 	.word	0x20000d30

		Xcoordinate = popStack_walk(&stack_x);
 8014330:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014334:	4618      	mov	r0, r3
 8014336:	f000 fd4b 	bl	8014dd0 <popStack_walk>
 801433a:	4603      	mov	r3, r0
 801433c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014340:	f102 0212 	add.w	r2, r2, #18
 8014344:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 8014346:	463b      	mov	r3, r7
 8014348:	4618      	mov	r0, r3
 801434a:	f000 fd41 	bl	8014dd0 <popStack_walk>
 801434e:	4603      	mov	r3, r0
 8014350:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014354:	f102 0210 	add.w	r2, r2, #16
 8014358:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 801435a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801435e:	f103 0312 	add.w	r3, r3, #18
 8014362:	881b      	ldrh	r3, [r3, #0]
 8014364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014368:	4293      	cmp	r3, r2
 801436a:	f000 8217 	beq.w	801479c <create_StepCountMap_queue+0x5c0>
 801436e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014372:	f103 0310 	add.w	r3, r3, #16
 8014376:	881b      	ldrh	r3, [r3, #0]
 8014378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801437c:	4293      	cmp	r3, r2
 801437e:	f000 820d 	beq.w	801479c <create_StepCountMap_queue+0x5c0>
			//printf("stack_end\n");
			break;
		}

		if (Ycoordinate <= 14) {
 8014382:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014386:	f103 0310 	add.w	r3, r3, #16
 801438a:	881b      	ldrh	r3, [r3, #0]
 801438c:	2b0e      	cmp	r3, #14
 801438e:	d81a      	bhi.n	80143c6 <create_StepCountMap_queue+0x1ea>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8014390:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014394:	f103 0310 	add.w	r3, r3, #16
 8014398:	881b      	ldrh	r3, [r3, #0]
 801439a:	4aca      	ldr	r2, [pc, #808]	; (80146c4 <create_StepCountMap_queue+0x4e8>)
 801439c:	330c      	adds	r3, #12
 801439e:	005b      	lsls	r3, r3, #1
 80143a0:	4413      	add	r3, r2
 80143a2:	88db      	ldrh	r3, [r3, #6]
 80143a4:	b21a      	sxth	r2, r3
 80143a6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143aa:	f103 0312 	add.w	r3, r3, #18
 80143ae:	881b      	ldrh	r3, [r3, #0]
 80143b0:	2101      	movs	r1, #1
 80143b2:	fa01 f303 	lsl.w	r3, r1, r3
 80143b6:	b21b      	sxth	r3, r3
 80143b8:	4013      	ands	r3, r2
 80143ba:	b21b      	sxth	r3, r3
 80143bc:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80143c0:	f102 021a 	add.w	r2, r2, #26
 80143c4:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 80143c6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143ca:	f103 0310 	add.w	r3, r3, #16
 80143ce:	881b      	ldrh	r3, [r3, #0]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d01b      	beq.n	801440c <create_StepCountMap_queue+0x230>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 80143d4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143d8:	f103 0310 	add.w	r3, r3, #16
 80143dc:	881b      	ldrh	r3, [r3, #0]
 80143de:	3b01      	subs	r3, #1
 80143e0:	4ab8      	ldr	r2, [pc, #736]	; (80146c4 <create_StepCountMap_queue+0x4e8>)
 80143e2:	330c      	adds	r3, #12
 80143e4:	005b      	lsls	r3, r3, #1
 80143e6:	4413      	add	r3, r2
 80143e8:	88db      	ldrh	r3, [r3, #6]
 80143ea:	b21a      	sxth	r2, r3
 80143ec:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143f0:	f103 0312 	add.w	r3, r3, #18
 80143f4:	881b      	ldrh	r3, [r3, #0]
 80143f6:	2101      	movs	r1, #1
 80143f8:	fa01 f303 	lsl.w	r3, r1, r3
 80143fc:	b21b      	sxth	r3, r3
 80143fe:	4013      	ands	r3, r2
 8014400:	b21b      	sxth	r3, r3
 8014402:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014406:	f102 0218 	add.w	r2, r2, #24
 801440a:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 801440c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014410:	f103 0312 	add.w	r3, r3, #18
 8014414:	881b      	ldrh	r3, [r3, #0]
 8014416:	2b0e      	cmp	r3, #14
 8014418:	d818      	bhi.n	801444c <create_StepCountMap_queue+0x270>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 801441a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801441e:	f103 0312 	add.w	r3, r3, #18
 8014422:	881b      	ldrh	r3, [r3, #0]
 8014424:	4aa7      	ldr	r2, [pc, #668]	; (80146c4 <create_StepCountMap_queue+0x4e8>)
 8014426:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801442a:	b21a      	sxth	r2, r3
 801442c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014430:	f103 0310 	add.w	r3, r3, #16
 8014434:	881b      	ldrh	r3, [r3, #0]
 8014436:	2101      	movs	r1, #1
 8014438:	fa01 f303 	lsl.w	r3, r1, r3
 801443c:	b21b      	sxth	r3, r3
 801443e:	4013      	ands	r3, r2
 8014440:	b21b      	sxth	r3, r3
 8014442:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014446:	f102 0216 	add.w	r2, r2, #22
 801444a:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 801444c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014450:	f103 0312 	add.w	r3, r3, #18
 8014454:	881b      	ldrh	r3, [r3, #0]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d019      	beq.n	801448e <create_StepCountMap_queue+0x2b2>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 801445a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801445e:	f103 0312 	add.w	r3, r3, #18
 8014462:	881b      	ldrh	r3, [r3, #0]
 8014464:	3b01      	subs	r3, #1
 8014466:	4a97      	ldr	r2, [pc, #604]	; (80146c4 <create_StepCountMap_queue+0x4e8>)
 8014468:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801446c:	b21a      	sxth	r2, r3
 801446e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014472:	f103 0310 	add.w	r3, r3, #16
 8014476:	881b      	ldrh	r3, [r3, #0]
 8014478:	2101      	movs	r1, #1
 801447a:	fa01 f303 	lsl.w	r3, r1, r3
 801447e:	b21b      	sxth	r3, r3
 8014480:	4013      	ands	r3, r2
 8014482:	b21b      	sxth	r3, r3
 8014484:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014488:	f102 0214 	add.w	r2, r2, #20
 801448c:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 801448e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014492:	f103 0312 	add.w	r3, r3, #18
 8014496:	881a      	ldrh	r2, [r3, #0]
 8014498:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801449c:	f103 0310 	add.w	r3, r3, #16
 80144a0:	881b      	ldrh	r3, [r3, #0]
 80144a2:	3301      	adds	r3, #1
 80144a4:	4988      	ldr	r1, [pc, #544]	; (80146c8 <create_StepCountMap_queue+0x4ec>)
 80144a6:	0112      	lsls	r2, r2, #4
 80144a8:	4413      	add	r3, r2
 80144aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80144ae:	2bff      	cmp	r3, #255	; 0xff
 80144b0:	d146      	bne.n	8014540 <create_StepCountMap_queue+0x364>
 80144b2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144b6:	f103 0310 	add.w	r3, r3, #16
 80144ba:	881b      	ldrh	r3, [r3, #0]
 80144bc:	2b0f      	cmp	r3, #15
 80144be:	d03f      	beq.n	8014540 <create_StepCountMap_queue+0x364>
 80144c0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144c4:	f103 031a 	add.w	r3, r3, #26
 80144c8:	881b      	ldrh	r3, [r3, #0]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d138      	bne.n	8014540 <create_StepCountMap_queue+0x364>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80144ce:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144d2:	f103 0312 	add.w	r3, r3, #18
 80144d6:	881a      	ldrh	r2, [r3, #0]
 80144d8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144dc:	f103 0310 	add.w	r3, r3, #16
 80144e0:	881b      	ldrh	r3, [r3, #0]
 80144e2:	4979      	ldr	r1, [pc, #484]	; (80146c8 <create_StepCountMap_queue+0x4ec>)
 80144e4:	0112      	lsls	r2, r2, #4
 80144e6:	4413      	add	r3, r2
 80144e8:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80144ec:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144f0:	f103 0312 	add.w	r3, r3, #18
 80144f4:	881a      	ldrh	r2, [r3, #0]
 80144f6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144fa:	f103 0310 	add.w	r3, r3, #16
 80144fe:	881b      	ldrh	r3, [r3, #0]
 8014500:	3301      	adds	r3, #1
 8014502:	3101      	adds	r1, #1
 8014504:	b288      	uxth	r0, r1
 8014506:	4970      	ldr	r1, [pc, #448]	; (80146c8 <create_StepCountMap_queue+0x4ec>)
 8014508:	0112      	lsls	r2, r2, #4
 801450a:	4413      	add	r3, r2
 801450c:	4602      	mov	r2, r0
 801450e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8014512:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014516:	f103 0312 	add.w	r3, r3, #18
 801451a:	881a      	ldrh	r2, [r3, #0]
 801451c:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014520:	4611      	mov	r1, r2
 8014522:	4618      	mov	r0, r3
 8014524:	f000 fc2a 	bl	8014d7c <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8014528:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801452c:	f103 0310 	add.w	r3, r3, #16
 8014530:	881b      	ldrh	r3, [r3, #0]
 8014532:	3301      	adds	r3, #1
 8014534:	b29a      	uxth	r2, r3
 8014536:	463b      	mov	r3, r7
 8014538:	4611      	mov	r1, r2
 801453a:	4618      	mov	r0, r3
 801453c:	f000 fc1e 	bl	8014d7c <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8014540:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014544:	f103 0312 	add.w	r3, r3, #18
 8014548:	881a      	ldrh	r2, [r3, #0]
 801454a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801454e:	f103 0310 	add.w	r3, r3, #16
 8014552:	881b      	ldrh	r3, [r3, #0]
 8014554:	3b01      	subs	r3, #1
 8014556:	495c      	ldr	r1, [pc, #368]	; (80146c8 <create_StepCountMap_queue+0x4ec>)
 8014558:	0112      	lsls	r2, r2, #4
 801455a:	4413      	add	r3, r2
 801455c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014560:	2bff      	cmp	r3, #255	; 0xff
 8014562:	d146      	bne.n	80145f2 <create_StepCountMap_queue+0x416>
 8014564:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014568:	f103 0310 	add.w	r3, r3, #16
 801456c:	881b      	ldrh	r3, [r3, #0]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d03f      	beq.n	80145f2 <create_StepCountMap_queue+0x416>
 8014572:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014576:	f103 0318 	add.w	r3, r3, #24
 801457a:	881b      	ldrh	r3, [r3, #0]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d138      	bne.n	80145f2 <create_StepCountMap_queue+0x416>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014580:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014584:	f103 0312 	add.w	r3, r3, #18
 8014588:	881a      	ldrh	r2, [r3, #0]
 801458a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801458e:	f103 0310 	add.w	r3, r3, #16
 8014592:	881b      	ldrh	r3, [r3, #0]
 8014594:	494c      	ldr	r1, [pc, #304]	; (80146c8 <create_StepCountMap_queue+0x4ec>)
 8014596:	0112      	lsls	r2, r2, #4
 8014598:	4413      	add	r3, r2
 801459a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 801459e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145a2:	f103 0312 	add.w	r3, r3, #18
 80145a6:	881a      	ldrh	r2, [r3, #0]
 80145a8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145ac:	f103 0310 	add.w	r3, r3, #16
 80145b0:	881b      	ldrh	r3, [r3, #0]
 80145b2:	3b01      	subs	r3, #1
 80145b4:	3101      	adds	r1, #1
 80145b6:	b288      	uxth	r0, r1
 80145b8:	4943      	ldr	r1, [pc, #268]	; (80146c8 <create_StepCountMap_queue+0x4ec>)
 80145ba:	0112      	lsls	r2, r2, #4
 80145bc:	4413      	add	r3, r2
 80145be:	4602      	mov	r2, r0
 80145c0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 80145c4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145c8:	f103 0312 	add.w	r3, r3, #18
 80145cc:	881a      	ldrh	r2, [r3, #0]
 80145ce:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 80145d2:	4611      	mov	r1, r2
 80145d4:	4618      	mov	r0, r3
 80145d6:	f000 fbd1 	bl	8014d7c <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 80145da:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145de:	f103 0310 	add.w	r3, r3, #16
 80145e2:	881b      	ldrh	r3, [r3, #0]
 80145e4:	3b01      	subs	r3, #1
 80145e6:	b29a      	uxth	r2, r3
 80145e8:	463b      	mov	r3, r7
 80145ea:	4611      	mov	r1, r2
 80145ec:	4618      	mov	r0, r3
 80145ee:	f000 fbc5 	bl	8014d7c <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == 255 && Xcoordinate != 15 && wall_east == 0) {
 80145f2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145f6:	f103 0312 	add.w	r3, r3, #18
 80145fa:	881b      	ldrh	r3, [r3, #0]
 80145fc:	1c5a      	adds	r2, r3, #1
 80145fe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014602:	f103 0310 	add.w	r3, r3, #16
 8014606:	881b      	ldrh	r3, [r3, #0]
 8014608:	492f      	ldr	r1, [pc, #188]	; (80146c8 <create_StepCountMap_queue+0x4ec>)
 801460a:	0112      	lsls	r2, r2, #4
 801460c:	4413      	add	r3, r2
 801460e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014612:	2bff      	cmp	r3, #255	; 0xff
 8014614:	d146      	bne.n	80146a4 <create_StepCountMap_queue+0x4c8>
 8014616:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801461a:	f103 0312 	add.w	r3, r3, #18
 801461e:	881b      	ldrh	r3, [r3, #0]
 8014620:	2b0f      	cmp	r3, #15
 8014622:	d03f      	beq.n	80146a4 <create_StepCountMap_queue+0x4c8>
 8014624:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014628:	f103 0316 	add.w	r3, r3, #22
 801462c:	881b      	ldrh	r3, [r3, #0]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d138      	bne.n	80146a4 <create_StepCountMap_queue+0x4c8>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014632:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014636:	f103 0312 	add.w	r3, r3, #18
 801463a:	881a      	ldrh	r2, [r3, #0]
 801463c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014640:	f103 0310 	add.w	r3, r3, #16
 8014644:	881b      	ldrh	r3, [r3, #0]
 8014646:	4920      	ldr	r1, [pc, #128]	; (80146c8 <create_StepCountMap_queue+0x4ec>)
 8014648:	0112      	lsls	r2, r2, #4
 801464a:	4413      	add	r3, r2
 801464c:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014650:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014654:	f103 0312 	add.w	r3, r3, #18
 8014658:	881b      	ldrh	r3, [r3, #0]
 801465a:	1c5a      	adds	r2, r3, #1
 801465c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014660:	f103 0310 	add.w	r3, r3, #16
 8014664:	881b      	ldrh	r3, [r3, #0]
 8014666:	3101      	adds	r1, #1
 8014668:	b288      	uxth	r0, r1
 801466a:	4917      	ldr	r1, [pc, #92]	; (80146c8 <create_StepCountMap_queue+0x4ec>)
 801466c:	0112      	lsls	r2, r2, #4
 801466e:	4413      	add	r3, r2
 8014670:	4602      	mov	r2, r0
 8014672:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 8014676:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801467a:	f103 0312 	add.w	r3, r3, #18
 801467e:	881b      	ldrh	r3, [r3, #0]
 8014680:	3301      	adds	r3, #1
 8014682:	b29a      	uxth	r2, r3
 8014684:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014688:	4611      	mov	r1, r2
 801468a:	4618      	mov	r0, r3
 801468c:	f000 fb76 	bl	8014d7c <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014690:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014694:	f103 0310 	add.w	r3, r3, #16
 8014698:	881a      	ldrh	r2, [r3, #0]
 801469a:	463b      	mov	r3, r7
 801469c:	4611      	mov	r1, r2
 801469e:	4618      	mov	r0, r3
 80146a0:	f000 fb6c 	bl	8014d7c <pushStack_walk>
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == 255 && Xcoordinate != 0 && wall_west == 0) {
 80146a4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146a8:	f103 0312 	add.w	r3, r3, #18
 80146ac:	881b      	ldrh	r3, [r3, #0]
 80146ae:	1e5a      	subs	r2, r3, #1
 80146b0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146b4:	f103 0310 	add.w	r3, r3, #16
 80146b8:	881b      	ldrh	r3, [r3, #0]
 80146ba:	4903      	ldr	r1, [pc, #12]	; (80146c8 <create_StepCountMap_queue+0x4ec>)
 80146bc:	0112      	lsls	r2, r2, #4
 80146be:	4413      	add	r3, r2
 80146c0:	e004      	b.n	80146cc <create_StepCountMap_queue+0x4f0>
 80146c2:	bf00      	nop
 80146c4:	20000c3c 	.word	0x20000c3c
 80146c8:	20000d30 	.word	0x20000d30
 80146cc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80146d0:	2bff      	cmp	r3, #255	; 0xff
 80146d2:	d146      	bne.n	8014762 <create_StepCountMap_queue+0x586>
 80146d4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146d8:	f103 0312 	add.w	r3, r3, #18
 80146dc:	881b      	ldrh	r3, [r3, #0]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d03f      	beq.n	8014762 <create_StepCountMap_queue+0x586>
 80146e2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146e6:	f103 0314 	add.w	r3, r3, #20
 80146ea:	881b      	ldrh	r3, [r3, #0]
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d138      	bne.n	8014762 <create_StepCountMap_queue+0x586>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80146f0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146f4:	f103 0312 	add.w	r3, r3, #18
 80146f8:	881a      	ldrh	r2, [r3, #0]
 80146fa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146fe:	f103 0310 	add.w	r3, r3, #16
 8014702:	881b      	ldrh	r3, [r3, #0]
 8014704:	4928      	ldr	r1, [pc, #160]	; (80147a8 <create_StepCountMap_queue+0x5cc>)
 8014706:	0112      	lsls	r2, r2, #4
 8014708:	4413      	add	r3, r2
 801470a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 801470e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014712:	f103 0312 	add.w	r3, r3, #18
 8014716:	881b      	ldrh	r3, [r3, #0]
 8014718:	1e5a      	subs	r2, r3, #1
 801471a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801471e:	f103 0310 	add.w	r3, r3, #16
 8014722:	881b      	ldrh	r3, [r3, #0]
 8014724:	3101      	adds	r1, #1
 8014726:	b288      	uxth	r0, r1
 8014728:	491f      	ldr	r1, [pc, #124]	; (80147a8 <create_StepCountMap_queue+0x5cc>)
 801472a:	0112      	lsls	r2, r2, #4
 801472c:	4413      	add	r3, r2
 801472e:	4602      	mov	r2, r0
 8014730:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8014734:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014738:	f103 0312 	add.w	r3, r3, #18
 801473c:	881b      	ldrh	r3, [r3, #0]
 801473e:	3b01      	subs	r3, #1
 8014740:	b29a      	uxth	r2, r3
 8014742:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014746:	4611      	mov	r1, r2
 8014748:	4618      	mov	r0, r3
 801474a:	f000 fb17 	bl	8014d7c <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 801474e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014752:	f103 0310 	add.w	r3, r3, #16
 8014756:	881a      	ldrh	r2, [r3, #0]
 8014758:	463b      	mov	r3, r7
 801475a:	4611      	mov	r1, r2
 801475c:	4618      	mov	r0, r3
 801475e:	f000 fb0d 	bl	8014d7c <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 8014762:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014766:	f103 0312 	add.w	r3, r3, #18
 801476a:	881a      	ldrh	r2, [r3, #0]
 801476c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014770:	f103 0310 	add.w	r3, r3, #16
 8014774:	881b      	ldrh	r3, [r3, #0]
 8014776:	490c      	ldr	r1, [pc, #48]	; (80147a8 <create_StepCountMap_queue+0x5cc>)
 8014778:	0112      	lsls	r2, r2, #4
 801477a:	4413      	add	r3, r2
 801477c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014780:	3301      	adds	r3, #1
 8014782:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014786:	f102 021c 	add.w	r2, r2, #28
 801478a:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 801478c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014790:	f103 031c 	add.w	r3, r3, #28
 8014794:	881b      	ldrh	r3, [r3, #0]
 8014796:	2bfe      	cmp	r3, #254	; 0xfe
 8014798:	f67f adca 	bls.w	8014330 <create_StepCountMap_queue+0x154>

		}

}
 801479c:	bf00      	nop
 801479e:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 80147a2:	46bd      	mov	sp, r7
 80147a4:	bd80      	pop	{r7, pc}
 80147a6:	bf00      	nop
 80147a8:	20000d30 	.word	0x20000d30

080147ac <create_StepCountMapBack_queue>:



void create_StepCountMapBack_queue(void){
 80147ac:	b580      	push	{r7, lr}
 80147ae:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 80147b2:	b082      	sub	sp, #8
 80147b4:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(uint8_t xx = 0;xx <= 15;xx++){
 80147b6:	2300      	movs	r3, #0
 80147b8:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80147bc:	f102 0207 	add.w	r2, r2, #7
 80147c0:	7013      	strb	r3, [r2, #0]
 80147c2:	e033      	b.n	801482c <create_StepCountMapBack_queue+0x80>
		for(uint8_t yy = 0;yy <= 15;yy++){
 80147c4:	2300      	movs	r3, #0
 80147c6:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80147ca:	f102 0206 	add.w	r2, r2, #6
 80147ce:	7013      	strb	r3, [r2, #0]
 80147d0:	e01a      	b.n	8014808 <create_StepCountMapBack_queue+0x5c>
			walk_count[xx][yy] = 255;
 80147d2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80147d6:	f103 0307 	add.w	r3, r3, #7
 80147da:	781a      	ldrb	r2, [r3, #0]
 80147dc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80147e0:	f103 0306 	add.w	r3, r3, #6
 80147e4:	781b      	ldrb	r3, [r3, #0]
 80147e6:	4931      	ldr	r1, [pc, #196]	; (80148ac <create_StepCountMapBack_queue+0x100>)
 80147e8:	0112      	lsls	r2, r2, #4
 80147ea:	4413      	add	r3, r2
 80147ec:	22ff      	movs	r2, #255	; 0xff
 80147ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 80147f2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80147f6:	f103 0306 	add.w	r3, r3, #6
 80147fa:	781b      	ldrb	r3, [r3, #0]
 80147fc:	3301      	adds	r3, #1
 80147fe:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014802:	f102 0206 	add.w	r2, r2, #6
 8014806:	7013      	strb	r3, [r2, #0]
 8014808:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801480c:	f103 0306 	add.w	r3, r3, #6
 8014810:	781b      	ldrb	r3, [r3, #0]
 8014812:	2b0f      	cmp	r3, #15
 8014814:	d9dd      	bls.n	80147d2 <create_StepCountMapBack_queue+0x26>
	for(uint8_t xx = 0;xx <= 15;xx++){
 8014816:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801481a:	f103 0307 	add.w	r3, r3, #7
 801481e:	781b      	ldrb	r3, [r3, #0]
 8014820:	3301      	adds	r3, #1
 8014822:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014826:	f102 0207 	add.w	r2, r2, #7
 801482a:	7013      	strb	r3, [r2, #0]
 801482c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014830:	f103 0307 	add.w	r3, r3, #7
 8014834:	781b      	ldrb	r3, [r3, #0]
 8014836:	2b0f      	cmp	r3, #15
 8014838:	d9c4      	bls.n	80147c4 <create_StepCountMapBack_queue+0x18>
		}
	}
	initStack_walk(&stack_x);
 801483a:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801483e:	4618      	mov	r0, r3
 8014840:	f000 fa8c 	bl	8014d5c <initStack_walk>
	initStack_walk(&stack_y);
 8014844:	f107 0308 	add.w	r3, r7, #8
 8014848:	3b04      	subs	r3, #4
 801484a:	4618      	mov	r0, r3
 801484c:	f000 fa86 	bl	8014d5c <initStack_walk>


	walk_count[0][0] = 0;
 8014850:	4b16      	ldr	r3, [pc, #88]	; (80148ac <create_StepCountMapBack_queue+0x100>)
 8014852:	2200      	movs	r2, #0
 8014854:	801a      	strh	r2, [r3, #0]
	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8014856:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801485a:	2100      	movs	r1, #0
 801485c:	4618      	mov	r0, r3
 801485e:	f000 fa8d 	bl	8014d7c <pushStack_walk>
 8014862:	f107 0308 	add.w	r3, r7, #8
 8014866:	3b04      	subs	r3, #4
 8014868:	2100      	movs	r1, #0
 801486a:	4618      	mov	r0, r3
 801486c:	f000 fa86 	bl	8014d7c <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short coordinate;
	unsigned short count_number = 1;
 8014870:	2301      	movs	r3, #1
 8014872:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014876:	f102 0204 	add.w	r2, r2, #4
 801487a:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 801487c:	2301      	movs	r3, #1
 801487e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014882:	f102 0202 	add.w	r2, r2, #2
 8014886:	8013      	strh	r3, [r2, #0]
 8014888:	2301      	movs	r3, #1
 801488a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801488e:	8013      	strh	r3, [r2, #0]
 8014890:	2301      	movs	r3, #1
 8014892:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014896:	f102 021e 	add.w	r2, r2, #30
 801489a:	8013      	strh	r3, [r2, #0]
 801489c:	2301      	movs	r3, #1
 801489e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80148a2:	f102 021c 	add.w	r2, r2, #28
 80148a6:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 80148a8:	e248      	b.n	8014d3c <create_StepCountMapBack_queue+0x590>
 80148aa:	bf00      	nop
 80148ac:	20000d30 	.word	0x20000d30

		Xcoordinate = popStack_walk(&stack_x);
 80148b0:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80148b4:	4618      	mov	r0, r3
 80148b6:	f000 fa8b 	bl	8014dd0 <popStack_walk>
 80148ba:	4603      	mov	r3, r0
 80148bc:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80148c0:	f102 021a 	add.w	r2, r2, #26
 80148c4:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 80148c6:	f107 0308 	add.w	r3, r7, #8
 80148ca:	3b04      	subs	r3, #4
 80148cc:	4618      	mov	r0, r3
 80148ce:	f000 fa7f 	bl	8014dd0 <popStack_walk>
 80148d2:	4603      	mov	r3, r0
 80148d4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80148d8:	f102 0218 	add.w	r2, r2, #24
 80148dc:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 80148de:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148e2:	f103 031a 	add.w	r3, r3, #26
 80148e6:	881b      	ldrh	r3, [r3, #0]
 80148e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80148ec:	4293      	cmp	r3, r2
 80148ee:	f000 822d 	beq.w	8014d4c <create_StepCountMapBack_queue+0x5a0>
 80148f2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148f6:	f103 0318 	add.w	r3, r3, #24
 80148fa:	881b      	ldrh	r3, [r3, #0]
 80148fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014900:	4293      	cmp	r3, r2
 8014902:	f000 8223 	beq.w	8014d4c <create_StepCountMapBack_queue+0x5a0>
			//printf("stack_end\n");
			break;
		}

		coordinate = (Xcoordinate * 16) + Ycoordinate;
 8014906:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801490a:	f103 031a 	add.w	r3, r3, #26
 801490e:	881b      	ldrh	r3, [r3, #0]
 8014910:	011b      	lsls	r3, r3, #4
 8014912:	b29a      	uxth	r2, r3
 8014914:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014918:	f103 0318 	add.w	r3, r3, #24
 801491c:	881b      	ldrh	r3, [r3, #0]
 801491e:	4413      	add	r3, r2
 8014920:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014924:	f102 0216 	add.w	r2, r2, #22
 8014928:	8013      	strh	r3, [r2, #0]
		if (Ycoordinate <= 14) {
 801492a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801492e:	f103 0318 	add.w	r3, r3, #24
 8014932:	881b      	ldrh	r3, [r3, #0]
 8014934:	2b0e      	cmp	r3, #14
 8014936:	d81a      	bhi.n	801496e <create_StepCountMapBack_queue+0x1c2>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8014938:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801493c:	f103 0318 	add.w	r3, r3, #24
 8014940:	881b      	ldrh	r3, [r3, #0]
 8014942:	4ac4      	ldr	r2, [pc, #784]	; (8014c54 <create_StepCountMapBack_queue+0x4a8>)
 8014944:	330c      	adds	r3, #12
 8014946:	005b      	lsls	r3, r3, #1
 8014948:	4413      	add	r3, r2
 801494a:	88db      	ldrh	r3, [r3, #6]
 801494c:	b21a      	sxth	r2, r3
 801494e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014952:	f103 031a 	add.w	r3, r3, #26
 8014956:	881b      	ldrh	r3, [r3, #0]
 8014958:	2101      	movs	r1, #1
 801495a:	fa01 f303 	lsl.w	r3, r1, r3
 801495e:	b21b      	sxth	r3, r3
 8014960:	4013      	ands	r3, r2
 8014962:	b21b      	sxth	r3, r3
 8014964:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014968:	f102 0202 	add.w	r2, r2, #2
 801496c:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 801496e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014972:	f103 0318 	add.w	r3, r3, #24
 8014976:	881b      	ldrh	r3, [r3, #0]
 8014978:	2b00      	cmp	r3, #0
 801497a:	d019      	beq.n	80149b0 <create_StepCountMapBack_queue+0x204>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 801497c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014980:	f103 0318 	add.w	r3, r3, #24
 8014984:	881b      	ldrh	r3, [r3, #0]
 8014986:	3b01      	subs	r3, #1
 8014988:	4ab2      	ldr	r2, [pc, #712]	; (8014c54 <create_StepCountMapBack_queue+0x4a8>)
 801498a:	330c      	adds	r3, #12
 801498c:	005b      	lsls	r3, r3, #1
 801498e:	4413      	add	r3, r2
 8014990:	88db      	ldrh	r3, [r3, #6]
 8014992:	b21a      	sxth	r2, r3
 8014994:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014998:	f103 031a 	add.w	r3, r3, #26
 801499c:	881b      	ldrh	r3, [r3, #0]
 801499e:	2101      	movs	r1, #1
 80149a0:	fa01 f303 	lsl.w	r3, r1, r3
 80149a4:	b21b      	sxth	r3, r3
 80149a6:	4013      	ands	r3, r2
 80149a8:	b21b      	sxth	r3, r3
 80149aa:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80149ae:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 80149b0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149b4:	f103 031a 	add.w	r3, r3, #26
 80149b8:	881b      	ldrh	r3, [r3, #0]
 80149ba:	2b0e      	cmp	r3, #14
 80149bc:	d818      	bhi.n	80149f0 <create_StepCountMapBack_queue+0x244>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 80149be:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149c2:	f103 031a 	add.w	r3, r3, #26
 80149c6:	881b      	ldrh	r3, [r3, #0]
 80149c8:	4aa2      	ldr	r2, [pc, #648]	; (8014c54 <create_StepCountMapBack_queue+0x4a8>)
 80149ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80149ce:	b21a      	sxth	r2, r3
 80149d0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149d4:	f103 0318 	add.w	r3, r3, #24
 80149d8:	881b      	ldrh	r3, [r3, #0]
 80149da:	2101      	movs	r1, #1
 80149dc:	fa01 f303 	lsl.w	r3, r1, r3
 80149e0:	b21b      	sxth	r3, r3
 80149e2:	4013      	ands	r3, r2
 80149e4:	b21b      	sxth	r3, r3
 80149e6:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80149ea:	f102 021e 	add.w	r2, r2, #30
 80149ee:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 80149f0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149f4:	f103 031a 	add.w	r3, r3, #26
 80149f8:	881b      	ldrh	r3, [r3, #0]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d019      	beq.n	8014a32 <create_StepCountMapBack_queue+0x286>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 80149fe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a02:	f103 031a 	add.w	r3, r3, #26
 8014a06:	881b      	ldrh	r3, [r3, #0]
 8014a08:	3b01      	subs	r3, #1
 8014a0a:	4a92      	ldr	r2, [pc, #584]	; (8014c54 <create_StepCountMapBack_queue+0x4a8>)
 8014a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014a10:	b21a      	sxth	r2, r3
 8014a12:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a16:	f103 0318 	add.w	r3, r3, #24
 8014a1a:	881b      	ldrh	r3, [r3, #0]
 8014a1c:	2101      	movs	r1, #1
 8014a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8014a22:	b21b      	sxth	r3, r3
 8014a24:	4013      	ands	r3, r2
 8014a26:	b21b      	sxth	r3, r3
 8014a28:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014a2c:	f102 021c 	add.w	r2, r2, #28
 8014a30:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 8014a32:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a36:	f103 031a 	add.w	r3, r3, #26
 8014a3a:	881a      	ldrh	r2, [r3, #0]
 8014a3c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a40:	f103 0318 	add.w	r3, r3, #24
 8014a44:	881b      	ldrh	r3, [r3, #0]
 8014a46:	3301      	adds	r3, #1
 8014a48:	4983      	ldr	r1, [pc, #524]	; (8014c58 <create_StepCountMapBack_queue+0x4ac>)
 8014a4a:	0112      	lsls	r2, r2, #4
 8014a4c:	4413      	add	r3, r2
 8014a4e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014a52:	2bff      	cmp	r3, #255	; 0xff
 8014a54:	d148      	bne.n	8014ae8 <create_StepCountMapBack_queue+0x33c>
 8014a56:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a5a:	f103 0318 	add.w	r3, r3, #24
 8014a5e:	881b      	ldrh	r3, [r3, #0]
 8014a60:	2b0f      	cmp	r3, #15
 8014a62:	d041      	beq.n	8014ae8 <create_StepCountMapBack_queue+0x33c>
 8014a64:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014a68:	f103 0302 	add.w	r3, r3, #2
 8014a6c:	881b      	ldrh	r3, [r3, #0]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d13a      	bne.n	8014ae8 <create_StepCountMapBack_queue+0x33c>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014a72:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a76:	f103 031a 	add.w	r3, r3, #26
 8014a7a:	881a      	ldrh	r2, [r3, #0]
 8014a7c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a80:	f103 0318 	add.w	r3, r3, #24
 8014a84:	881b      	ldrh	r3, [r3, #0]
 8014a86:	4974      	ldr	r1, [pc, #464]	; (8014c58 <create_StepCountMapBack_queue+0x4ac>)
 8014a88:	0112      	lsls	r2, r2, #4
 8014a8a:	4413      	add	r3, r2
 8014a8c:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014a90:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a94:	f103 031a 	add.w	r3, r3, #26
 8014a98:	881a      	ldrh	r2, [r3, #0]
 8014a9a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a9e:	f103 0318 	add.w	r3, r3, #24
 8014aa2:	881b      	ldrh	r3, [r3, #0]
 8014aa4:	3301      	adds	r3, #1
 8014aa6:	3101      	adds	r1, #1
 8014aa8:	b288      	uxth	r0, r1
 8014aaa:	496b      	ldr	r1, [pc, #428]	; (8014c58 <create_StepCountMapBack_queue+0x4ac>)
 8014aac:	0112      	lsls	r2, r2, #4
 8014aae:	4413      	add	r3, r2
 8014ab0:	4602      	mov	r2, r0
 8014ab2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8014ab6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014aba:	f103 031a 	add.w	r3, r3, #26
 8014abe:	881a      	ldrh	r2, [r3, #0]
 8014ac0:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014ac4:	4611      	mov	r1, r2
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	f000 f958 	bl	8014d7c <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8014acc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ad0:	f103 0318 	add.w	r3, r3, #24
 8014ad4:	881b      	ldrh	r3, [r3, #0]
 8014ad6:	3301      	adds	r3, #1
 8014ad8:	b29a      	uxth	r2, r3
 8014ada:	f107 0308 	add.w	r3, r7, #8
 8014ade:	3b04      	subs	r3, #4
 8014ae0:	4611      	mov	r1, r2
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	f000 f94a 	bl	8014d7c <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8014ae8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014aec:	f103 031a 	add.w	r3, r3, #26
 8014af0:	881a      	ldrh	r2, [r3, #0]
 8014af2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014af6:	f103 0318 	add.w	r3, r3, #24
 8014afa:	881b      	ldrh	r3, [r3, #0]
 8014afc:	3b01      	subs	r3, #1
 8014afe:	4956      	ldr	r1, [pc, #344]	; (8014c58 <create_StepCountMapBack_queue+0x4ac>)
 8014b00:	0112      	lsls	r2, r2, #4
 8014b02:	4413      	add	r3, r2
 8014b04:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014b08:	2bff      	cmp	r3, #255	; 0xff
 8014b0a:	d146      	bne.n	8014b9a <create_StepCountMapBack_queue+0x3ee>
 8014b0c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b10:	f103 0318 	add.w	r3, r3, #24
 8014b14:	881b      	ldrh	r3, [r3, #0]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d03f      	beq.n	8014b9a <create_StepCountMapBack_queue+0x3ee>
 8014b1a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014b1e:	881b      	ldrh	r3, [r3, #0]
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d13a      	bne.n	8014b9a <create_StepCountMapBack_queue+0x3ee>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014b24:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b28:	f103 031a 	add.w	r3, r3, #26
 8014b2c:	881a      	ldrh	r2, [r3, #0]
 8014b2e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b32:	f103 0318 	add.w	r3, r3, #24
 8014b36:	881b      	ldrh	r3, [r3, #0]
 8014b38:	4947      	ldr	r1, [pc, #284]	; (8014c58 <create_StepCountMapBack_queue+0x4ac>)
 8014b3a:	0112      	lsls	r2, r2, #4
 8014b3c:	4413      	add	r3, r2
 8014b3e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014b42:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b46:	f103 031a 	add.w	r3, r3, #26
 8014b4a:	881a      	ldrh	r2, [r3, #0]
 8014b4c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b50:	f103 0318 	add.w	r3, r3, #24
 8014b54:	881b      	ldrh	r3, [r3, #0]
 8014b56:	3b01      	subs	r3, #1
 8014b58:	3101      	adds	r1, #1
 8014b5a:	b288      	uxth	r0, r1
 8014b5c:	493e      	ldr	r1, [pc, #248]	; (8014c58 <create_StepCountMapBack_queue+0x4ac>)
 8014b5e:	0112      	lsls	r2, r2, #4
 8014b60:	4413      	add	r3, r2
 8014b62:	4602      	mov	r2, r0
 8014b64:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8014b68:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b6c:	f103 031a 	add.w	r3, r3, #26
 8014b70:	881a      	ldrh	r2, [r3, #0]
 8014b72:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014b76:	4611      	mov	r1, r2
 8014b78:	4618      	mov	r0, r3
 8014b7a:	f000 f8ff 	bl	8014d7c <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8014b7e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b82:	f103 0318 	add.w	r3, r3, #24
 8014b86:	881b      	ldrh	r3, [r3, #0]
 8014b88:	3b01      	subs	r3, #1
 8014b8a:	b29a      	uxth	r2, r3
 8014b8c:	f107 0308 	add.w	r3, r7, #8
 8014b90:	3b04      	subs	r3, #4
 8014b92:	4611      	mov	r1, r2
 8014b94:	4618      	mov	r0, r3
 8014b96:	f000 f8f1 	bl	8014d7c <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == 255 && Xcoordinate != 15 && wall_east == 0) {
 8014b9a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b9e:	f103 031a 	add.w	r3, r3, #26
 8014ba2:	881b      	ldrh	r3, [r3, #0]
 8014ba4:	1c5a      	adds	r2, r3, #1
 8014ba6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014baa:	f103 0318 	add.w	r3, r3, #24
 8014bae:	881b      	ldrh	r3, [r3, #0]
 8014bb0:	4929      	ldr	r1, [pc, #164]	; (8014c58 <create_StepCountMapBack_queue+0x4ac>)
 8014bb2:	0112      	lsls	r2, r2, #4
 8014bb4:	4413      	add	r3, r2
 8014bb6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014bba:	2bff      	cmp	r3, #255	; 0xff
 8014bbc:	d14e      	bne.n	8014c5c <create_StepCountMapBack_queue+0x4b0>
 8014bbe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014bc2:	f103 031a 	add.w	r3, r3, #26
 8014bc6:	881b      	ldrh	r3, [r3, #0]
 8014bc8:	2b0f      	cmp	r3, #15
 8014bca:	d047      	beq.n	8014c5c <create_StepCountMapBack_queue+0x4b0>
 8014bcc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014bd0:	f103 031e 	add.w	r3, r3, #30
 8014bd4:	881b      	ldrh	r3, [r3, #0]
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d140      	bne.n	8014c5c <create_StepCountMapBack_queue+0x4b0>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014bda:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014bde:	f103 031a 	add.w	r3, r3, #26
 8014be2:	881a      	ldrh	r2, [r3, #0]
 8014be4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014be8:	f103 0318 	add.w	r3, r3, #24
 8014bec:	881b      	ldrh	r3, [r3, #0]
 8014bee:	491a      	ldr	r1, [pc, #104]	; (8014c58 <create_StepCountMapBack_queue+0x4ac>)
 8014bf0:	0112      	lsls	r2, r2, #4
 8014bf2:	4413      	add	r3, r2
 8014bf4:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014bf8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014bfc:	f103 031a 	add.w	r3, r3, #26
 8014c00:	881b      	ldrh	r3, [r3, #0]
 8014c02:	1c5a      	adds	r2, r3, #1
 8014c04:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c08:	f103 0318 	add.w	r3, r3, #24
 8014c0c:	881b      	ldrh	r3, [r3, #0]
 8014c0e:	3101      	adds	r1, #1
 8014c10:	b288      	uxth	r0, r1
 8014c12:	4911      	ldr	r1, [pc, #68]	; (8014c58 <create_StepCountMapBack_queue+0x4ac>)
 8014c14:	0112      	lsls	r2, r2, #4
 8014c16:	4413      	add	r3, r2
 8014c18:	4602      	mov	r2, r0
 8014c1a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 8014c1e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c22:	f103 031a 	add.w	r3, r3, #26
 8014c26:	881b      	ldrh	r3, [r3, #0]
 8014c28:	3301      	adds	r3, #1
 8014c2a:	b29a      	uxth	r2, r3
 8014c2c:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014c30:	4611      	mov	r1, r2
 8014c32:	4618      	mov	r0, r3
 8014c34:	f000 f8a2 	bl	8014d7c <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014c38:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c3c:	f103 0318 	add.w	r3, r3, #24
 8014c40:	881a      	ldrh	r2, [r3, #0]
 8014c42:	f107 0308 	add.w	r3, r7, #8
 8014c46:	3b04      	subs	r3, #4
 8014c48:	4611      	mov	r1, r2
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	f000 f896 	bl	8014d7c <pushStack_walk>
 8014c50:	e004      	b.n	8014c5c <create_StepCountMapBack_queue+0x4b0>
 8014c52:	bf00      	nop
 8014c54:	20000c3c 	.word	0x20000c3c
 8014c58:	20000d30 	.word	0x20000d30
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == 255 && Xcoordinate != 0 && wall_west == 0) {
 8014c5c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c60:	f103 031a 	add.w	r3, r3, #26
 8014c64:	881b      	ldrh	r3, [r3, #0]
 8014c66:	1e5a      	subs	r2, r3, #1
 8014c68:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c6c:	f103 0318 	add.w	r3, r3, #24
 8014c70:	881b      	ldrh	r3, [r3, #0]
 8014c72:	4939      	ldr	r1, [pc, #228]	; (8014d58 <create_StepCountMapBack_queue+0x5ac>)
 8014c74:	0112      	lsls	r2, r2, #4
 8014c76:	4413      	add	r3, r2
 8014c78:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014c7c:	2bff      	cmp	r3, #255	; 0xff
 8014c7e:	d148      	bne.n	8014d12 <create_StepCountMapBack_queue+0x566>
 8014c80:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c84:	f103 031a 	add.w	r3, r3, #26
 8014c88:	881b      	ldrh	r3, [r3, #0]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d041      	beq.n	8014d12 <create_StepCountMapBack_queue+0x566>
 8014c8e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c92:	f103 031c 	add.w	r3, r3, #28
 8014c96:	881b      	ldrh	r3, [r3, #0]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d13a      	bne.n	8014d12 <create_StepCountMapBack_queue+0x566>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014c9c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ca0:	f103 031a 	add.w	r3, r3, #26
 8014ca4:	881a      	ldrh	r2, [r3, #0]
 8014ca6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014caa:	f103 0318 	add.w	r3, r3, #24
 8014cae:	881b      	ldrh	r3, [r3, #0]
 8014cb0:	4929      	ldr	r1, [pc, #164]	; (8014d58 <create_StepCountMapBack_queue+0x5ac>)
 8014cb2:	0112      	lsls	r2, r2, #4
 8014cb4:	4413      	add	r3, r2
 8014cb6:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014cba:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014cbe:	f103 031a 	add.w	r3, r3, #26
 8014cc2:	881b      	ldrh	r3, [r3, #0]
 8014cc4:	1e5a      	subs	r2, r3, #1
 8014cc6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014cca:	f103 0318 	add.w	r3, r3, #24
 8014cce:	881b      	ldrh	r3, [r3, #0]
 8014cd0:	3101      	adds	r1, #1
 8014cd2:	b288      	uxth	r0, r1
 8014cd4:	4920      	ldr	r1, [pc, #128]	; (8014d58 <create_StepCountMapBack_queue+0x5ac>)
 8014cd6:	0112      	lsls	r2, r2, #4
 8014cd8:	4413      	add	r3, r2
 8014cda:	4602      	mov	r2, r0
 8014cdc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8014ce0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ce4:	f103 031a 	add.w	r3, r3, #26
 8014ce8:	881b      	ldrh	r3, [r3, #0]
 8014cea:	3b01      	subs	r3, #1
 8014cec:	b29a      	uxth	r2, r3
 8014cee:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014cf2:	4611      	mov	r1, r2
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	f000 f841 	bl	8014d7c <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014cfa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014cfe:	f103 0318 	add.w	r3, r3, #24
 8014d02:	881a      	ldrh	r2, [r3, #0]
 8014d04:	f107 0308 	add.w	r3, r7, #8
 8014d08:	3b04      	subs	r3, #4
 8014d0a:	4611      	mov	r1, r2
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	f000 f835 	bl	8014d7c <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 8014d12:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d16:	f103 031a 	add.w	r3, r3, #26
 8014d1a:	881a      	ldrh	r2, [r3, #0]
 8014d1c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d20:	f103 0318 	add.w	r3, r3, #24
 8014d24:	881b      	ldrh	r3, [r3, #0]
 8014d26:	490c      	ldr	r1, [pc, #48]	; (8014d58 <create_StepCountMapBack_queue+0x5ac>)
 8014d28:	0112      	lsls	r2, r2, #4
 8014d2a:	4413      	add	r3, r2
 8014d2c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014d30:	3301      	adds	r3, #1
 8014d32:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014d36:	f102 0204 	add.w	r2, r2, #4
 8014d3a:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8014d3c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014d40:	f103 0304 	add.w	r3, r3, #4
 8014d44:	881b      	ldrh	r3, [r3, #0]
 8014d46:	2bfe      	cmp	r3, #254	; 0xfe
 8014d48:	f67f adb2 	bls.w	80148b0 <create_StepCountMapBack_queue+0x104>

		}

}
 8014d4c:	bf00      	nop
 8014d4e:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 8014d52:	3708      	adds	r7, #8
 8014d54:	46bd      	mov	sp, r7
 8014d56:	bd80      	pop	{r7, pc}
 8014d58:	20000d30 	.word	0x20000d30

08014d5c <initStack_walk>:




void initStack_walk(STACK_T *stack){
 8014d5c:	b480      	push	{r7}
 8014d5e:	b083      	sub	sp, #12
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
//	for(int i=0;i<=MAX_QUEUE_NUM-1;i++){
//		stack->data[i] = 0;
//	}
    /* スタックを空に設定 */
	stack->head = 0;
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	2200      	movs	r2, #0
 8014d68:	601a      	str	r2, [r3, #0]
    stack->tail = 0;
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	2200      	movs	r2, #0
 8014d6e:	605a      	str	r2, [r3, #4]
}
 8014d70:	bf00      	nop
 8014d72:	370c      	adds	r7, #12
 8014d74:	46bd      	mov	sp, r7
 8014d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d7a:	4770      	bx	lr

08014d7c <pushStack_walk>:



void pushStack_walk(STACK_T *stack, unsigned short input){
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	b082      	sub	sp, #8
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	6078      	str	r0, [r7, #4]
 8014d84:	460b      	mov	r3, r1
 8014d86:	807b      	strh	r3, [r7, #2]

    /* データをデータの最後尾の１つ後ろに格納 */
    stack->data[stack->tail] = input;
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	685a      	ldr	r2, [r3, #4]
 8014d8c:	8879      	ldrh	r1, [r7, #2]
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	3202      	adds	r2, #2
 8014d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* データの最後尾を１つ後ろに移動 */
    stack->tail = stack->tail + 1;
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	685b      	ldr	r3, [r3, #4]
 8014d9a:	1c5a      	adds	r2, r3, #1
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	605a      	str	r2, [r3, #4]

    /* 巡回シフト */
    if(stack->tail == MAX_QUEUE_NUM) stack->tail = 0;
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	685b      	ldr	r3, [r3, #4]
 8014da4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014da8:	d102      	bne.n	8014db0 <pushStack_walk+0x34>
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	2200      	movs	r2, #0
 8014dae:	605a      	str	r2, [r3, #4]

    /* スタックが満杯なら何もせず関数終了 */
    if(stack->tail == stack->head ){
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	685a      	ldr	r2, [r3, #4]
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	429a      	cmp	r2, r3
 8014dba:	d103      	bne.n	8014dc4 <pushStack_walk+0x48>
    	printf("stack_full\n");
 8014dbc:	4803      	ldr	r0, [pc, #12]	; (8014dcc <pushStack_walk+0x50>)
 8014dbe:	f00b ffb9 	bl	8020d34 <puts>
        return;
 8014dc2:	bf00      	nop
    }
}
 8014dc4:	3708      	adds	r7, #8
 8014dc6:	46bd      	mov	sp, r7
 8014dc8:	bd80      	pop	{r7, pc}
 8014dca:	bf00      	nop
 8014dcc:	08023554 	.word	0x08023554

08014dd0 <popStack_walk>:


unsigned short popStack_walk(STACK_T *stack){
 8014dd0:	b480      	push	{r7}
 8014dd2:	b085      	sub	sp, #20
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	6078      	str	r0, [r7, #4]
    unsigned short ret = 0;
 8014dd8:	2300      	movs	r3, #0
 8014dda:	81fb      	strh	r3, [r7, #14]

    /* スタックが空なら何もせずに関数終了 */
    if(stack->tail == stack->head){
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	685a      	ldr	r2, [r3, #4]
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	429a      	cmp	r2, r3
 8014de6:	d102      	bne.n	8014dee <popStack_walk+0x1e>
    	//printf("stack_empty\n");
        return 65535;
 8014de8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014dec:	e014      	b.n	8014e18 <popStack_walk+0x48>
    }

    /* データの最前列からデータを取得 */
    ret = stack->data[stack->head];
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	681a      	ldr	r2, [r3, #0]
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	3202      	adds	r2, #2
 8014df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dfa:	81fb      	strh	r3, [r7, #14]

    /* データの最前列を１つ前にずらす */
    stack->head = stack->head + 1;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	1c5a      	adds	r2, r3, #1
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	601a      	str	r2, [r3, #0]

    /* 巡回シフト */
    if(stack->head == MAX_QUEUE_NUM) stack->head = 0;
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014e0e:	d102      	bne.n	8014e16 <popStack_walk+0x46>
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	2200      	movs	r2, #0
 8014e14:	601a      	str	r2, [r3, #0]

    /* 取得したデータを返却 */
    return ret;
 8014e16:	89fb      	ldrh	r3, [r7, #14]
}
 8014e18:	4618      	mov	r0, r3
 8014e1a:	3714      	adds	r7, #20
 8014e1c:	46bd      	mov	sp, r7
 8014e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e22:	4770      	bx	lr

08014e24 <maze_display>:

void maze_makerback(int direction, int front_SEN, int left_SEN, int right_SEN,
		int x, int y) {}


void maze_display(void) {
 8014e24:	b580      	push	{r7, lr}
 8014e26:	b082      	sub	sp, #8
 8014e28:	af00      	add	r7, sp, #0

	int tt = 14;
 8014e2a:	230e      	movs	r3, #14
 8014e2c:	607b      	str	r3, [r7, #4]
	int ss = 0;
 8014e2e:	2300      	movs	r3, #0
 8014e30:	603b      	str	r3, [r7, #0]

	printf(
 8014e32:	4881      	ldr	r0, [pc, #516]	; (8015038 <maze_display+0x214>)
 8014e34:	f00b ff7e 	bl	8020d34 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 8014e38:	230e      	movs	r3, #14
 8014e3a:	607b      	str	r3, [r7, #4]
 8014e3c:	e06e      	b.n	8014f1c <maze_display+0xf8>

		printf("|%5d", walk_count[0][tt + 1]);
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	3301      	adds	r3, #1
 8014e42:	4a7e      	ldr	r2, [pc, #504]	; (801503c <maze_display+0x218>)
 8014e44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014e48:	4619      	mov	r1, r3
 8014e4a:	487d      	ldr	r0, [pc, #500]	; (8015040 <maze_display+0x21c>)
 8014e4c:	f00b fed6 	bl	8020bfc <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014e50:	2300      	movs	r3, #0
 8014e52:	603b      	str	r3, [r7, #0]
 8014e54:	e030      	b.n	8014eb8 <maze_display+0x94>
			if ((wall.row[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 8014e56:	4a7b      	ldr	r2, [pc, #492]	; (8015044 <maze_display+0x220>)
 8014e58:	683b      	ldr	r3, [r7, #0]
 8014e5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014e5e:	4619      	mov	r1, r3
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	3301      	adds	r3, #1
 8014e64:	2201      	movs	r2, #1
 8014e66:	fa02 f303 	lsl.w	r3, r2, r3
 8014e6a:	ea01 0203 	and.w	r2, r1, r3
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	3301      	adds	r3, #1
 8014e72:	2101      	movs	r1, #1
 8014e74:	fa01 f303 	lsl.w	r3, r1, r3
 8014e78:	429a      	cmp	r2, r3
 8014e7a:	d10d      	bne.n	8014e98 <maze_display+0x74>
				printf("|%5d", walk_count[ss + 1][tt + 1]);
 8014e7c:	683b      	ldr	r3, [r7, #0]
 8014e7e:	1c5a      	adds	r2, r3, #1
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	3301      	adds	r3, #1
 8014e84:	496d      	ldr	r1, [pc, #436]	; (801503c <maze_display+0x218>)
 8014e86:	0112      	lsls	r2, r2, #4
 8014e88:	4413      	add	r3, r2
 8014e8a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014e8e:	4619      	mov	r1, r3
 8014e90:	486b      	ldr	r0, [pc, #428]	; (8015040 <maze_display+0x21c>)
 8014e92:	f00b feb3 	bl	8020bfc <iprintf>
 8014e96:	e00c      	b.n	8014eb2 <maze_display+0x8e>
			}else{
				printf(" %5d", walk_count[ss + 1][tt + 1]);
 8014e98:	683b      	ldr	r3, [r7, #0]
 8014e9a:	1c5a      	adds	r2, r3, #1
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	3301      	adds	r3, #1
 8014ea0:	4966      	ldr	r1, [pc, #408]	; (801503c <maze_display+0x218>)
 8014ea2:	0112      	lsls	r2, r2, #4
 8014ea4:	4413      	add	r3, r2
 8014ea6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014eaa:	4619      	mov	r1, r3
 8014eac:	4866      	ldr	r0, [pc, #408]	; (8015048 <maze_display+0x224>)
 8014eae:	f00b fea5 	bl	8020bfc <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014eb2:	683b      	ldr	r3, [r7, #0]
 8014eb4:	3301      	adds	r3, #1
 8014eb6:	603b      	str	r3, [r7, #0]
 8014eb8:	683b      	ldr	r3, [r7, #0]
 8014eba:	2b0e      	cmp	r3, #14
 8014ebc:	ddcb      	ble.n	8014e56 <maze_display+0x32>
			}
		}
		printf("|\n");
 8014ebe:	4863      	ldr	r0, [pc, #396]	; (801504c <maze_display+0x228>)
 8014ec0:	f00b ff38 	bl	8020d34 <puts>
		if (tt <= -1) {
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	db2d      	blt.n	8014f26 <maze_display+0x102>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8014eca:	2300      	movs	r3, #0
 8014ecc:	603b      	str	r3, [r7, #0]
 8014ece:	e01c      	b.n	8014f0a <maze_display+0xe6>
			if ((wall.column[tt] & (1 << ss)) == (1 << ss)){
 8014ed0:	4a5c      	ldr	r2, [pc, #368]	; (8015044 <maze_display+0x220>)
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	330c      	adds	r3, #12
 8014ed6:	005b      	lsls	r3, r3, #1
 8014ed8:	4413      	add	r3, r2
 8014eda:	88db      	ldrh	r3, [r3, #6]
 8014edc:	4619      	mov	r1, r3
 8014ede:	2201      	movs	r2, #1
 8014ee0:	683b      	ldr	r3, [r7, #0]
 8014ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8014ee6:	ea01 0203 	and.w	r2, r1, r3
 8014eea:	2101      	movs	r1, #1
 8014eec:	683b      	ldr	r3, [r7, #0]
 8014eee:	fa01 f303 	lsl.w	r3, r1, r3
 8014ef2:	429a      	cmp	r2, r3
 8014ef4:	d103      	bne.n	8014efe <maze_display+0xda>
				printf("+-----");
 8014ef6:	4856      	ldr	r0, [pc, #344]	; (8015050 <maze_display+0x22c>)
 8014ef8:	f00b fe80 	bl	8020bfc <iprintf>
 8014efc:	e002      	b.n	8014f04 <maze_display+0xe0>
			}else{
				printf("+     ");
 8014efe:	4855      	ldr	r0, [pc, #340]	; (8015054 <maze_display+0x230>)
 8014f00:	f00b fe7c 	bl	8020bfc <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8014f04:	683b      	ldr	r3, [r7, #0]
 8014f06:	3301      	adds	r3, #1
 8014f08:	603b      	str	r3, [r7, #0]
 8014f0a:	683b      	ldr	r3, [r7, #0]
 8014f0c:	2b0f      	cmp	r3, #15
 8014f0e:	dddf      	ble.n	8014ed0 <maze_display+0xac>
			}
		}

		printf("+\n");
 8014f10:	4851      	ldr	r0, [pc, #324]	; (8015058 <maze_display+0x234>)
 8014f12:	f00b ff0f 	bl	8020d34 <puts>
	for (tt = 14;tt >= -1;tt--){
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	3b01      	subs	r3, #1
 8014f1a:	607b      	str	r3, [r7, #4]
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f22:	da8c      	bge.n	8014e3e <maze_display+0x1a>
 8014f24:	e000      	b.n	8014f28 <maze_display+0x104>
			break;
 8014f26:	bf00      	nop

	}

	printf(
 8014f28:	484c      	ldr	r0, [pc, #304]	; (801505c <maze_display+0x238>)
 8014f2a:	f00b ff03 	bl	8020d34 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 8014f2e:	4842      	ldr	r0, [pc, #264]	; (8015038 <maze_display+0x214>)
 8014f30:	f00b ff00 	bl	8020d34 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");

	for (tt = 14;tt >= -1;tt--){
 8014f34:	230e      	movs	r3, #14
 8014f36:	607b      	str	r3, [r7, #4]
 8014f38:	e070      	b.n	801501c <maze_display+0x1f8>
		printf("|%5d", walk_count[0][tt + 1]);
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	3301      	adds	r3, #1
 8014f3e:	4a3f      	ldr	r2, [pc, #252]	; (801503c <maze_display+0x218>)
 8014f40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014f44:	4619      	mov	r1, r3
 8014f46:	483e      	ldr	r0, [pc, #248]	; (8015040 <maze_display+0x21c>)
 8014f48:	f00b fe58 	bl	8020bfc <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014f4c:	2300      	movs	r3, #0
 8014f4e:	603b      	str	r3, [r7, #0]
 8014f50:	e032      	b.n	8014fb8 <maze_display+0x194>
			if ((wall.row_look[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 8014f52:	4a3c      	ldr	r2, [pc, #240]	; (8015044 <maze_display+0x220>)
 8014f54:	683b      	ldr	r3, [r7, #0]
 8014f56:	331c      	adds	r3, #28
 8014f58:	005b      	lsls	r3, r3, #1
 8014f5a:	4413      	add	r3, r2
 8014f5c:	889b      	ldrh	r3, [r3, #4]
 8014f5e:	4619      	mov	r1, r3
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	3301      	adds	r3, #1
 8014f64:	2201      	movs	r2, #1
 8014f66:	fa02 f303 	lsl.w	r3, r2, r3
 8014f6a:	ea01 0203 	and.w	r2, r1, r3
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	3301      	adds	r3, #1
 8014f72:	2101      	movs	r1, #1
 8014f74:	fa01 f303 	lsl.w	r3, r1, r3
 8014f78:	429a      	cmp	r2, r3
 8014f7a:	d10d      	bne.n	8014f98 <maze_display+0x174>
				printf("|%5d", walk_count[ss + 1][tt + 1]);
 8014f7c:	683b      	ldr	r3, [r7, #0]
 8014f7e:	1c5a      	adds	r2, r3, #1
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	3301      	adds	r3, #1
 8014f84:	492d      	ldr	r1, [pc, #180]	; (801503c <maze_display+0x218>)
 8014f86:	0112      	lsls	r2, r2, #4
 8014f88:	4413      	add	r3, r2
 8014f8a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014f8e:	4619      	mov	r1, r3
 8014f90:	482b      	ldr	r0, [pc, #172]	; (8015040 <maze_display+0x21c>)
 8014f92:	f00b fe33 	bl	8020bfc <iprintf>
 8014f96:	e00c      	b.n	8014fb2 <maze_display+0x18e>
			}else{
				printf(" %5d", walk_count[ss + 1][tt + 1]);
 8014f98:	683b      	ldr	r3, [r7, #0]
 8014f9a:	1c5a      	adds	r2, r3, #1
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	3301      	adds	r3, #1
 8014fa0:	4926      	ldr	r1, [pc, #152]	; (801503c <maze_display+0x218>)
 8014fa2:	0112      	lsls	r2, r2, #4
 8014fa4:	4413      	add	r3, r2
 8014fa6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014faa:	4619      	mov	r1, r3
 8014fac:	4826      	ldr	r0, [pc, #152]	; (8015048 <maze_display+0x224>)
 8014fae:	f00b fe25 	bl	8020bfc <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014fb2:	683b      	ldr	r3, [r7, #0]
 8014fb4:	3301      	adds	r3, #1
 8014fb6:	603b      	str	r3, [r7, #0]
 8014fb8:	683b      	ldr	r3, [r7, #0]
 8014fba:	2b0e      	cmp	r3, #14
 8014fbc:	ddc9      	ble.n	8014f52 <maze_display+0x12e>
			}
		}
		printf("|\n");
 8014fbe:	4823      	ldr	r0, [pc, #140]	; (801504c <maze_display+0x228>)
 8014fc0:	f00b feb8 	bl	8020d34 <puts>
		if (tt <= -1) {
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	db2d      	blt.n	8015026 <maze_display+0x202>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8014fca:	2300      	movs	r3, #0
 8014fcc:	603b      	str	r3, [r7, #0]
 8014fce:	e01c      	b.n	801500a <maze_display+0x1e6>
			if ((wall.column_look[tt] & (1 << ss)) == (1 << ss)){
 8014fd0:	4a1c      	ldr	r2, [pc, #112]	; (8015044 <maze_display+0x220>)
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	332c      	adds	r3, #44	; 0x2c
 8014fd6:	005b      	lsls	r3, r3, #1
 8014fd8:	4413      	add	r3, r2
 8014fda:	885b      	ldrh	r3, [r3, #2]
 8014fdc:	4619      	mov	r1, r3
 8014fde:	2201      	movs	r2, #1
 8014fe0:	683b      	ldr	r3, [r7, #0]
 8014fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8014fe6:	ea01 0203 	and.w	r2, r1, r3
 8014fea:	2101      	movs	r1, #1
 8014fec:	683b      	ldr	r3, [r7, #0]
 8014fee:	fa01 f303 	lsl.w	r3, r1, r3
 8014ff2:	429a      	cmp	r2, r3
 8014ff4:	d103      	bne.n	8014ffe <maze_display+0x1da>
				printf("+-----");
 8014ff6:	4816      	ldr	r0, [pc, #88]	; (8015050 <maze_display+0x22c>)
 8014ff8:	f00b fe00 	bl	8020bfc <iprintf>
 8014ffc:	e002      	b.n	8015004 <maze_display+0x1e0>
			}else{
				printf("+     ");
 8014ffe:	4815      	ldr	r0, [pc, #84]	; (8015054 <maze_display+0x230>)
 8015000:	f00b fdfc 	bl	8020bfc <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8015004:	683b      	ldr	r3, [r7, #0]
 8015006:	3301      	adds	r3, #1
 8015008:	603b      	str	r3, [r7, #0]
 801500a:	683b      	ldr	r3, [r7, #0]
 801500c:	2b0f      	cmp	r3, #15
 801500e:	dddf      	ble.n	8014fd0 <maze_display+0x1ac>
			}
		}
		printf("+\n");
 8015010:	4811      	ldr	r0, [pc, #68]	; (8015058 <maze_display+0x234>)
 8015012:	f00b fe8f 	bl	8020d34 <puts>
	for (tt = 14;tt >= -1;tt--){
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	3b01      	subs	r3, #1
 801501a:	607b      	str	r3, [r7, #4]
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015022:	da8a      	bge.n	8014f3a <maze_display+0x116>
 8015024:	e000      	b.n	8015028 <maze_display+0x204>
			break;
 8015026:	bf00      	nop
	}

	printf(
 8015028:	480c      	ldr	r0, [pc, #48]	; (801505c <maze_display+0x238>)
 801502a:	f00b fe83 	bl	8020d34 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");

}
 801502e:	bf00      	nop
 8015030:	3708      	adds	r7, #8
 8015032:	46bd      	mov	sp, r7
 8015034:	bd80      	pop	{r7, pc}
 8015036:	bf00      	nop
 8015038:	08023560 	.word	0x08023560
 801503c:	20000d30 	.word	0x20000d30
 8015040:	080235c4 	.word	0x080235c4
 8015044:	20000c3c 	.word	0x20000c3c
 8015048:	080235cc 	.word	0x080235cc
 801504c:	080235d4 	.word	0x080235d4
 8015050:	080235d8 	.word	0x080235d8
 8015054:	080235e0 	.word	0x080235e0
 8015058:	080235e8 	.word	0x080235e8
 801505c:	080235ec 	.word	0x080235ec

08015060 <maze_display_Dijkstra>:





void maze_display_Dijkstra(void) {
 8015060:	b580      	push	{r7, lr}
 8015062:	b082      	sub	sp, #8
 8015064:	af00      	add	r7, sp, #0

	int tt = 14;
 8015066:	230e      	movs	r3, #14
 8015068:	607b      	str	r3, [r7, #4]
	int ss = 0;
 801506a:	2300      	movs	r3, #0
 801506c:	603b      	str	r3, [r7, #0]

	printf(
 801506e:	4865      	ldr	r0, [pc, #404]	; (8015204 <maze_display_Dijkstra+0x1a4>)
 8015070:	f00b fe60 	bl	8020d34 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 8015074:	230e      	movs	r3, #14
 8015076:	607b      	str	r3, [r7, #4]
 8015078:	e06a      	b.n	8015150 <maze_display_Dijkstra+0xf0>

		printf("|   ");//walk_count[tt + 1]
 801507a:	4863      	ldr	r0, [pc, #396]	; (8015208 <maze_display_Dijkstra+0x1a8>)
 801507c:	f00b fdbe 	bl	8020bfc <iprintf>
		for(ss = 0;ss < 15;ss++){
 8015080:	2300      	movs	r3, #0
 8015082:	603b      	str	r3, [r7, #0]
 8015084:	e027      	b.n	80150d6 <maze_display_Dijkstra+0x76>
			if ((wall.row[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 8015086:	4a61      	ldr	r2, [pc, #388]	; (801520c <maze_display_Dijkstra+0x1ac>)
 8015088:	683b      	ldr	r3, [r7, #0]
 801508a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801508e:	4619      	mov	r1, r3
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	3301      	adds	r3, #1
 8015094:	2201      	movs	r2, #1
 8015096:	fa02 f303 	lsl.w	r3, r2, r3
 801509a:	ea01 0203 	and.w	r2, r1, r3
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	3301      	adds	r3, #1
 80150a2:	2101      	movs	r1, #1
 80150a4:	fa01 f303 	lsl.w	r3, r1, r3
 80150a8:	429a      	cmp	r2, r3
 80150aa:	d103      	bne.n	80150b4 <maze_display_Dijkstra+0x54>
				printf("  |   ");
 80150ac:	4858      	ldr	r0, [pc, #352]	; (8015210 <maze_display_Dijkstra+0x1b0>)
 80150ae:	f00b fda5 	bl	8020bfc <iprintf>
 80150b2:	e00d      	b.n	80150d0 <maze_display_Dijkstra+0x70>
			}else{
				printf("%5d ", Dijkstra.row_count[(tt + 1)][ss]);
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	1c5a      	adds	r2, r3, #1
 80150b8:	4956      	ldr	r1, [pc, #344]	; (8015214 <maze_display_Dijkstra+0x1b4>)
 80150ba:	4613      	mov	r3, r2
 80150bc:	011b      	lsls	r3, r3, #4
 80150be:	1a9b      	subs	r3, r3, r2
 80150c0:	683a      	ldr	r2, [r7, #0]
 80150c2:	4413      	add	r3, r2
 80150c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80150c8:	4619      	mov	r1, r3
 80150ca:	4853      	ldr	r0, [pc, #332]	; (8015218 <maze_display_Dijkstra+0x1b8>)
 80150cc:	f00b fd96 	bl	8020bfc <iprintf>
		for(ss = 0;ss < 15;ss++){
 80150d0:	683b      	ldr	r3, [r7, #0]
 80150d2:	3301      	adds	r3, #1
 80150d4:	603b      	str	r3, [r7, #0]
 80150d6:	683b      	ldr	r3, [r7, #0]
 80150d8:	2b0e      	cmp	r3, #14
 80150da:	ddd4      	ble.n	8015086 <maze_display_Dijkstra+0x26>
			}
		}
		printf("   |\n");
 80150dc:	484f      	ldr	r0, [pc, #316]	; (801521c <maze_display_Dijkstra+0x1bc>)
 80150de:	f00b fe29 	bl	8020d34 <puts>
		if (tt <= -1) {
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	db38      	blt.n	801515a <maze_display_Dijkstra+0xfa>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 80150e8:	2300      	movs	r3, #0
 80150ea:	603b      	str	r3, [r7, #0]
 80150ec:	e027      	b.n	801513e <maze_display_Dijkstra+0xde>
			if ((wall.column[tt] & (1 << ss)) == (1 << ss)){
 80150ee:	4a47      	ldr	r2, [pc, #284]	; (801520c <maze_display_Dijkstra+0x1ac>)
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	330c      	adds	r3, #12
 80150f4:	005b      	lsls	r3, r3, #1
 80150f6:	4413      	add	r3, r2
 80150f8:	88db      	ldrh	r3, [r3, #6]
 80150fa:	4619      	mov	r1, r3
 80150fc:	2201      	movs	r2, #1
 80150fe:	683b      	ldr	r3, [r7, #0]
 8015100:	fa02 f303 	lsl.w	r3, r2, r3
 8015104:	ea01 0203 	and.w	r2, r1, r3
 8015108:	2101      	movs	r1, #1
 801510a:	683b      	ldr	r3, [r7, #0]
 801510c:	fa01 f303 	lsl.w	r3, r1, r3
 8015110:	429a      	cmp	r2, r3
 8015112:	d103      	bne.n	801511c <maze_display_Dijkstra+0xbc>
				printf("+-----");
 8015114:	4842      	ldr	r0, [pc, #264]	; (8015220 <maze_display_Dijkstra+0x1c0>)
 8015116:	f00b fd71 	bl	8020bfc <iprintf>
 801511a:	e00d      	b.n	8015138 <maze_display_Dijkstra+0xd8>
			}else{
				printf("+%5d",Dijkstra.column_count[ss][tt]);
 801511c:	493d      	ldr	r1, [pc, #244]	; (8015214 <maze_display_Dijkstra+0x1b4>)
 801511e:	683a      	ldr	r2, [r7, #0]
 8015120:	4613      	mov	r3, r2
 8015122:	011b      	lsls	r3, r3, #4
 8015124:	1a9b      	subs	r3, r3, r2
 8015126:	687a      	ldr	r2, [r7, #4]
 8015128:	4413      	add	r3, r2
 801512a:	33f0      	adds	r3, #240	; 0xf0
 801512c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015130:	4619      	mov	r1, r3
 8015132:	483c      	ldr	r0, [pc, #240]	; (8015224 <maze_display_Dijkstra+0x1c4>)
 8015134:	f00b fd62 	bl	8020bfc <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8015138:	683b      	ldr	r3, [r7, #0]
 801513a:	3301      	adds	r3, #1
 801513c:	603b      	str	r3, [r7, #0]
 801513e:	683b      	ldr	r3, [r7, #0]
 8015140:	2b0f      	cmp	r3, #15
 8015142:	ddd4      	ble.n	80150ee <maze_display_Dijkstra+0x8e>
			}
		}

		printf("+\n");
 8015144:	4838      	ldr	r0, [pc, #224]	; (8015228 <maze_display_Dijkstra+0x1c8>)
 8015146:	f00b fdf5 	bl	8020d34 <puts>
	for (tt = 14;tt >= -1;tt--){
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	3b01      	subs	r3, #1
 801514e:	607b      	str	r3, [r7, #4]
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015156:	da90      	bge.n	801507a <maze_display_Dijkstra+0x1a>
 8015158:	e000      	b.n	801515c <maze_display_Dijkstra+0xfc>
			break;
 801515a:	bf00      	nop

	}

	printf(
 801515c:	4833      	ldr	r0, [pc, #204]	; (801522c <maze_display_Dijkstra+0x1cc>)
 801515e:	f00b fde9 	bl	8020d34 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 8015162:	4828      	ldr	r0, [pc, #160]	; (8015204 <maze_display_Dijkstra+0x1a4>)
 8015164:	f00b fde6 	bl	8020d34 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 8015168:	230e      	movs	r3, #14
 801516a:	607b      	str	r3, [r7, #4]
 801516c:	e03c      	b.n	80151e8 <maze_display_Dijkstra+0x188>

		printf("|   ");//walk_count[tt + 1]
 801516e:	4826      	ldr	r0, [pc, #152]	; (8015208 <maze_display_Dijkstra+0x1a8>)
 8015170:	f00b fd44 	bl	8020bfc <iprintf>
		for(ss = 0;ss < 15;ss++){
 8015174:	2300      	movs	r3, #0
 8015176:	603b      	str	r3, [r7, #0]
 8015178:	e010      	b.n	801519c <maze_display_Dijkstra+0x13c>

				printf("%5d ", Dijkstra.row_count[(tt + 1)][ss]);
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	1c5a      	adds	r2, r3, #1
 801517e:	4925      	ldr	r1, [pc, #148]	; (8015214 <maze_display_Dijkstra+0x1b4>)
 8015180:	4613      	mov	r3, r2
 8015182:	011b      	lsls	r3, r3, #4
 8015184:	1a9b      	subs	r3, r3, r2
 8015186:	683a      	ldr	r2, [r7, #0]
 8015188:	4413      	add	r3, r2
 801518a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801518e:	4619      	mov	r1, r3
 8015190:	4821      	ldr	r0, [pc, #132]	; (8015218 <maze_display_Dijkstra+0x1b8>)
 8015192:	f00b fd33 	bl	8020bfc <iprintf>
		for(ss = 0;ss < 15;ss++){
 8015196:	683b      	ldr	r3, [r7, #0]
 8015198:	3301      	adds	r3, #1
 801519a:	603b      	str	r3, [r7, #0]
 801519c:	683b      	ldr	r3, [r7, #0]
 801519e:	2b0e      	cmp	r3, #14
 80151a0:	ddeb      	ble.n	801517a <maze_display_Dijkstra+0x11a>

		}
		printf("   |\n");
 80151a2:	481e      	ldr	r0, [pc, #120]	; (801521c <maze_display_Dijkstra+0x1bc>)
 80151a4:	f00b fdc6 	bl	8020d34 <puts>
		if (tt <= -1) {
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	db21      	blt.n	80151f2 <maze_display_Dijkstra+0x192>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 80151ae:	2300      	movs	r3, #0
 80151b0:	603b      	str	r3, [r7, #0]
 80151b2:	e010      	b.n	80151d6 <maze_display_Dijkstra+0x176>
				printf("+%5d",Dijkstra.column_count[ss][tt]);
 80151b4:	4917      	ldr	r1, [pc, #92]	; (8015214 <maze_display_Dijkstra+0x1b4>)
 80151b6:	683a      	ldr	r2, [r7, #0]
 80151b8:	4613      	mov	r3, r2
 80151ba:	011b      	lsls	r3, r3, #4
 80151bc:	1a9b      	subs	r3, r3, r2
 80151be:	687a      	ldr	r2, [r7, #4]
 80151c0:	4413      	add	r3, r2
 80151c2:	33f0      	adds	r3, #240	; 0xf0
 80151c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80151c8:	4619      	mov	r1, r3
 80151ca:	4816      	ldr	r0, [pc, #88]	; (8015224 <maze_display_Dijkstra+0x1c4>)
 80151cc:	f00b fd16 	bl	8020bfc <iprintf>
		for(ss = 0;ss <= 15;ss++){
 80151d0:	683b      	ldr	r3, [r7, #0]
 80151d2:	3301      	adds	r3, #1
 80151d4:	603b      	str	r3, [r7, #0]
 80151d6:	683b      	ldr	r3, [r7, #0]
 80151d8:	2b0f      	cmp	r3, #15
 80151da:	ddeb      	ble.n	80151b4 <maze_display_Dijkstra+0x154>
		}

		printf("+\n");
 80151dc:	4812      	ldr	r0, [pc, #72]	; (8015228 <maze_display_Dijkstra+0x1c8>)
 80151de:	f00b fda9 	bl	8020d34 <puts>
	for (tt = 14;tt >= -1;tt--){
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	3b01      	subs	r3, #1
 80151e6:	607b      	str	r3, [r7, #4]
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151ee:	dabe      	bge.n	801516e <maze_display_Dijkstra+0x10e>
 80151f0:	e000      	b.n	80151f4 <maze_display_Dijkstra+0x194>
			break;
 80151f2:	bf00      	nop

	}

	printf(
 80151f4:	480d      	ldr	r0, [pc, #52]	; (801522c <maze_display_Dijkstra+0x1cc>)
 80151f6:	f00b fd9d 	bl	8020d34 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");




}
 80151fa:	bf00      	nop
 80151fc:	3708      	adds	r7, #8
 80151fe:	46bd      	mov	sp, r7
 8015200:	bd80      	pop	{r7, pc}
 8015202:	bf00      	nop
 8015204:	08023560 	.word	0x08023560
 8015208:	08023650 	.word	0x08023650
 801520c:	20000c3c 	.word	0x20000c3c
 8015210:	08023658 	.word	0x08023658
 8015214:	20000f30 	.word	0x20000f30
 8015218:	08023660 	.word	0x08023660
 801521c:	08023668 	.word	0x08023668
 8015220:	080235d8 	.word	0x080235d8
 8015224:	08023670 	.word	0x08023670
 8015228:	080235e8 	.word	0x080235e8
 801522c:	080235ec 	.word	0x080235ec

08015230 <mode_decision>:





unsigned char mode_decision(unsigned char now_mode){
 8015230:	b580      	push	{r7, lr}
 8015232:	b084      	sub	sp, #16
 8015234:	af00      	add	r7, sp, #0
 8015236:	4603      	mov	r3, r0
 8015238:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 801523a:	2300      	movs	r3, #0
 801523c:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 801523e:	2300      	movs	r3, #0
 8015240:	73bb      	strb	r3, [r7, #14]
unsigned char main_mode=0;
 8015242:	2300      	movs	r3, #0
 8015244:	737b      	strb	r3, [r7, #13]
float dis8 =10;
 8015246:	4b71      	ldr	r3, [pc, #452]	; (801540c <mode_decision+0x1dc>)
 8015248:	60bb      	str	r3, [r7, #8]
main_modeR=now_mode & 0x0F;
 801524a:	79fb      	ldrb	r3, [r7, #7]
 801524c:	f003 030f 	and.w	r3, r3, #15
 8015250:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 8015252:	79fb      	ldrb	r3, [r7, #7]
 8015254:	091b      	lsrs	r3, r3, #4
 8015256:	73bb      	strb	r3, [r7, #14]

	pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8015258:	7bbb      	ldrb	r3, [r7, #14]
 801525a:	011b      	lsls	r3, r3, #4
 801525c:	b2da      	uxtb	r2, r3
 801525e:	7bfb      	ldrb	r3, [r7, #15]
 8015260:	4413      	add	r3, r2
 8015262:	b2db      	uxtb	r3, r3
 8015264:	4618      	mov	r0, r3
 8015266:	f7f1 fddf 	bl	8006e28 <pl_yellow_LED_count>
			//pl_play_oneSound(main_modeR);
			//モード選択*************************************************************************
			while (angle_speedx <= 400) {
 801526a:	e07f      	b.n	801536c <mode_decision+0x13c>
				HAL_Delay(1);
 801526c:	2001      	movs	r0, #1
 801526e:	f003 fd73 	bl	8018d58 <HAL_Delay>
				if (E_distanceR >= dis8) {
 8015272:	4b67      	ldr	r3, [pc, #412]	; (8015410 <mode_decision+0x1e0>)
 8015274:	edd3 7a00 	vldr	s15, [r3]
 8015278:	ed97 7a02 	vldr	s14, [r7, #8]
 801527c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015284:	d813      	bhi.n	80152ae <mode_decision+0x7e>
					if (main_modeR == 15) {
 8015286:	7bfb      	ldrb	r3, [r7, #15]
 8015288:	2b0f      	cmp	r3, #15
 801528a:	d102      	bne.n	8015292 <mode_decision+0x62>
						main_modeR = 0;
 801528c:	2300      	movs	r3, #0
 801528e:	73fb      	strb	r3, [r7, #15]
 8015290:	e002      	b.n	8015298 <mode_decision+0x68>
					} else {
						main_modeR++;
 8015292:	7bfb      	ldrb	r3, [r7, #15]
 8015294:	3301      	adds	r3, #1
 8015296:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8015298:	f7eb fe80 	bl	8000f9c <reset_distance>

					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 801529c:	7bbb      	ldrb	r3, [r7, #14]
 801529e:	011b      	lsls	r3, r3, #4
 80152a0:	b2da      	uxtb	r2, r3
 80152a2:	7bfb      	ldrb	r3, [r7, #15]
 80152a4:	4413      	add	r3, r2
 80152a6:	b2db      	uxtb	r3, r3
 80152a8:	4618      	mov	r0, r3
 80152aa:	f7f1 fdbd 	bl	8006e28 <pl_yellow_LED_count>
				}
				if (E_distanceR <= -dis8) {
 80152ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80152b2:	eeb1 7a67 	vneg.f32	s14, s15
 80152b6:	4b56      	ldr	r3, [pc, #344]	; (8015410 <mode_decision+0x1e0>)
 80152b8:	edd3 7a00 	vldr	s15, [r3]
 80152bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80152c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152c4:	db13      	blt.n	80152ee <mode_decision+0xbe>
					if (main_modeR == 0) {
 80152c6:	7bfb      	ldrb	r3, [r7, #15]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d102      	bne.n	80152d2 <mode_decision+0xa2>
						main_modeR = 15;
 80152cc:	230f      	movs	r3, #15
 80152ce:	73fb      	strb	r3, [r7, #15]
 80152d0:	e002      	b.n	80152d8 <mode_decision+0xa8>
					} else {
						main_modeR = main_modeR - 1;
 80152d2:	7bfb      	ldrb	r3, [r7, #15]
 80152d4:	3b01      	subs	r3, #1
 80152d6:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 80152d8:	f7eb fe60 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 80152dc:	7bbb      	ldrb	r3, [r7, #14]
 80152de:	011b      	lsls	r3, r3, #4
 80152e0:	b2da      	uxtb	r2, r3
 80152e2:	7bfb      	ldrb	r3, [r7, #15]
 80152e4:	4413      	add	r3, r2
 80152e6:	b2db      	uxtb	r3, r3
 80152e8:	4618      	mov	r0, r3
 80152ea:	f7f1 fd9d 	bl	8006e28 <pl_yellow_LED_count>
				}
				if (E_distanceL >= dis8) {
 80152ee:	4b49      	ldr	r3, [pc, #292]	; (8015414 <mode_decision+0x1e4>)
 80152f0:	edd3 7a00 	vldr	s15, [r3]
 80152f4:	ed97 7a02 	vldr	s14, [r7, #8]
 80152f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80152fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015300:	d813      	bhi.n	801532a <mode_decision+0xfa>
					if (main_modeL == 15) {
 8015302:	7bbb      	ldrb	r3, [r7, #14]
 8015304:	2b0f      	cmp	r3, #15
 8015306:	d102      	bne.n	801530e <mode_decision+0xde>
						main_modeL = 0;
 8015308:	2300      	movs	r3, #0
 801530a:	73bb      	strb	r3, [r7, #14]
 801530c:	e002      	b.n	8015314 <mode_decision+0xe4>
					} else {
						main_modeL = main_modeL + 1;
 801530e:	7bbb      	ldrb	r3, [r7, #14]
 8015310:	3301      	adds	r3, #1
 8015312:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 8015314:	f7eb fe42 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8015318:	7bbb      	ldrb	r3, [r7, #14]
 801531a:	011b      	lsls	r3, r3, #4
 801531c:	b2da      	uxtb	r2, r3
 801531e:	7bfb      	ldrb	r3, [r7, #15]
 8015320:	4413      	add	r3, r2
 8015322:	b2db      	uxtb	r3, r3
 8015324:	4618      	mov	r0, r3
 8015326:	f7f1 fd7f 	bl	8006e28 <pl_yellow_LED_count>
				}
				if (E_distanceL <= -dis8) {
 801532a:	edd7 7a02 	vldr	s15, [r7, #8]
 801532e:	eeb1 7a67 	vneg.f32	s14, s15
 8015332:	4b38      	ldr	r3, [pc, #224]	; (8015414 <mode_decision+0x1e4>)
 8015334:	edd3 7a00 	vldr	s15, [r3]
 8015338:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801533c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015340:	da00      	bge.n	8015344 <mode_decision+0x114>
 8015342:	e013      	b.n	801536c <mode_decision+0x13c>
					if (main_modeL == 0) {
 8015344:	7bbb      	ldrb	r3, [r7, #14]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d102      	bne.n	8015350 <mode_decision+0x120>
						main_modeL = 15;
 801534a:	230f      	movs	r3, #15
 801534c:	73bb      	strb	r3, [r7, #14]
 801534e:	e002      	b.n	8015356 <mode_decision+0x126>
					} else {
						main_modeL = main_modeL - 1;
 8015350:	7bbb      	ldrb	r3, [r7, #14]
 8015352:	3b01      	subs	r3, #1
 8015354:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 8015356:	f7eb fe21 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 801535a:	7bbb      	ldrb	r3, [r7, #14]
 801535c:	011b      	lsls	r3, r3, #4
 801535e:	b2da      	uxtb	r2, r3
 8015360:	7bfb      	ldrb	r3, [r7, #15]
 8015362:	4413      	add	r3, r2
 8015364:	b2db      	uxtb	r3, r3
 8015366:	4618      	mov	r0, r3
 8015368:	f7f1 fd5e 	bl	8006e28 <pl_yellow_LED_count>
			while (angle_speedx <= 400) {
 801536c:	4b2a      	ldr	r3, [pc, #168]	; (8015418 <mode_decision+0x1e8>)
 801536e:	edd3 7a00 	vldr	s15, [r3]
 8015372:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 801541c <mode_decision+0x1ec>
 8015376:	eef4 7ac7 	vcmpe.f32	s15, s14
 801537a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801537e:	f67f af75 	bls.w	801526c <mode_decision+0x3c>
				}
				//main_mode=main_modeL << 4 | main_modeR;
	//printf("main_mode=%x L=%x R=%x\n",main_mode,main_modeL,main_modeR);

			}
			pl_yellow_LED_off();
 8015382:	f7f1 fd17 	bl	8006db4 <pl_yellow_LED_off>
			pl_r_blue_LED(ON);
 8015386:	2001      	movs	r0, #1
 8015388:	f7f1 fdfe 	bl	8006f88 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 801538c:	2001      	movs	r0, #1
 801538e:	f7f1 fe0d 	bl	8006fac <pl_l_blue_LED>
			HAL_Delay(1000);
 8015392:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015396:	f003 fcdf 	bl	8018d58 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 801539a:	e011      	b.n	80153c0 <mode_decision+0x190>

				if (angle_speedx >= 400) {
 801539c:	4b1e      	ldr	r3, [pc, #120]	; (8015418 <mode_decision+0x1e8>)
 801539e:	edd3 7a00 	vldr	s15, [r3]
 80153a2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 801541c <mode_decision+0x1ec>
 80153a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80153aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153ae:	db04      	blt.n	80153ba <mode_decision+0x18a>
					main_modeL = 0;
 80153b0:	2300      	movs	r3, #0
 80153b2:	73bb      	strb	r3, [r7, #14]
					main_modeR = 0;
 80153b4:	2300      	movs	r3, #0
 80153b6:	73fb      	strb	r3, [r7, #15]
					break;
 80153b8:	e013      	b.n	80153e2 <mode_decision+0x1b2>
				}
				HAL_Delay(1);
 80153ba:	2001      	movs	r0, #1
 80153bc:	f003 fccc 	bl	8018d58 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 80153c0:	4b17      	ldr	r3, [pc, #92]	; (8015420 <mode_decision+0x1f0>)
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80153c8:	dde8      	ble.n	801539c <mode_decision+0x16c>
 80153ca:	4b15      	ldr	r3, [pc, #84]	; (8015420 <mode_decision+0x1f0>)
 80153cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80153d0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80153d4:	dde2      	ble.n	801539c <mode_decision+0x16c>
 80153d6:	4b12      	ldr	r3, [pc, #72]	; (8015420 <mode_decision+0x1f0>)
 80153d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80153dc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80153e0:	dddc      	ble.n	801539c <mode_decision+0x16c>
			}
			pl_r_blue_LED(OFF);
 80153e2:	2000      	movs	r0, #0
 80153e4:	f7f1 fdd0 	bl	8006f88 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80153e8:	2000      	movs	r0, #0
 80153ea:	f7f1 fddf 	bl	8006fac <pl_l_blue_LED>
			pl_yellow_LED_off();
 80153ee:	f7f1 fce1 	bl	8006db4 <pl_yellow_LED_off>

			main_mode=main_modeL << 4 | main_modeR;
 80153f2:	7bbb      	ldrb	r3, [r7, #14]
 80153f4:	011b      	lsls	r3, r3, #4
 80153f6:	b25a      	sxtb	r2, r3
 80153f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80153fc:	4313      	orrs	r3, r2
 80153fe:	b25b      	sxtb	r3, r3
 8015400:	737b      	strb	r3, [r7, #13]

return main_mode;
 8015402:	7b7b      	ldrb	r3, [r7, #13]
}
 8015404:	4618      	mov	r0, r3
 8015406:	3710      	adds	r7, #16
 8015408:	46bd      	mov	sp, r7
 801540a:	bd80      	pop	{r7, pc}
 801540c:	41200000 	.word	0x41200000
 8015410:	20000224 	.word	0x20000224
 8015414:	20000220 	.word	0x20000220
 8015418:	20000270 	.word	0x20000270
 801541c:	43c80000 	.word	0x43c80000
 8015420:	200002b8 	.word	0x200002b8

08015424 <mode_execution>:


void mode_execution(unsigned char now_mode){
 8015424:	b590      	push	{r4, r7, lr}
 8015426:	b0d7      	sub	sp, #348	; 0x15c
 8015428:	af52      	add	r7, sp, #328	; 0x148
 801542a:	4603      	mov	r3, r0
 801542c:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 801542e:	2300      	movs	r3, #0
 8015430:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 8015432:	2300      	movs	r3, #0
 8015434:	73bb      	strb	r3, [r7, #14]

main_modeR=now_mode & 0x0F;
 8015436:	79fb      	ldrb	r3, [r7, #7]
 8015438:	f003 030f 	and.w	r3, r3, #15
 801543c:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 801543e:	79fb      	ldrb	r3, [r7, #7]
 8015440:	091b      	lsrs	r3, r3, #4
 8015442:	73bb      	strb	r3, [r7, #14]


switch (main_modeL) {
 8015444:	7bbb      	ldrb	r3, [r7, #14]
 8015446:	2b0f      	cmp	r3, #15
 8015448:	f200 809e 	bhi.w	8015588 <mode_execution+0x164>
 801544c:	a201      	add	r2, pc, #4	; (adr r2, 8015454 <mode_execution+0x30>)
 801544e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015452:	bf00      	nop
 8015454:	08015495 	.word	0x08015495
 8015458:	0801549f 	.word	0x0801549f
 801545c:	08015587 	.word	0x08015587
 8015460:	080154a9 	.word	0x080154a9
 8015464:	080154b3 	.word	0x080154b3
 8015468:	080154bd 	.word	0x080154bd
 801546c:	080154ed 	.word	0x080154ed
 8015470:	080154f7 	.word	0x080154f7
 8015474:	08015527 	.word	0x08015527
 8015478:	08015557 	.word	0x08015557
 801547c:	08015587 	.word	0x08015587
 8015480:	08015587 	.word	0x08015587
 8015484:	08015587 	.word	0x08015587
 8015488:	08015587 	.word	0x08015587
 801548c:	08015587 	.word	0x08015587
 8015490:	08015587 	.word	0x08015587
	case 0b0000://PLテストモード1
		mode_PLtest(main_modeR);
 8015494:	7bfb      	ldrb	r3, [r7, #15]
 8015496:	4618      	mov	r0, r3
 8015498:	f000 f886 	bl	80155a8 <mode_PLtest>
	break;
 801549c:	e074      	b.n	8015588 <mode_execution+0x164>
	case 0b0001://実行モード1
		mode_Running(main_modeR);
 801549e:	7bfb      	ldrb	r3, [r7, #15]
 80154a0:	4618      	mov	r0, r3
 80154a2:	f000 fa41 	bl	8015928 <mode_Running>
	break;
 80154a6:	e06f      	b.n	8015588 <mode_execution+0x164>
	case 0b0010://実行モード2
	break;
	case 0b0011:
		mode_Tuning0(main_modeR);
 80154a8:	7bfb      	ldrb	r3, [r7, #15]
 80154aa:	4618      	mov	r0, r3
 80154ac:	f000 fc6a 	bl	8015d84 <mode_Tuning0>
	break;
 80154b0:	e06a      	b.n	8015588 <mode_execution+0x164>
	case 0b0100:
		mode_WallSensorTuning(main_modeR);
 80154b2:	7bfb      	ldrb	r3, [r7, #15]
 80154b4:	4618      	mov	r0, r3
 80154b6:	f000 ffa7 	bl	8016408 <mode_WallSensorTuning>
	break;
 80154ba:	e065      	b.n	8015588 <mode_execution+0x164>
	case 0b0101://試験モード
		testturning(speed600_shortest_mollifier,main_modeR,1,OFF,0.51,1);
 80154bc:	7bfb      	ldrb	r3, [r7, #15]
 80154be:	4c34      	ldr	r4, [pc, #208]	; (8015590 <mode_execution+0x16c>)
 80154c0:	2201      	movs	r2, #1
 80154c2:	9251      	str	r2, [sp, #324]	; 0x144
 80154c4:	2200      	movs	r2, #0
 80154c6:	9250      	str	r2, [sp, #320]	; 0x140
 80154c8:	2201      	movs	r2, #1
 80154ca:	924f      	str	r2, [sp, #316]	; 0x13c
 80154cc:	934e      	str	r3, [sp, #312]	; 0x138
 80154ce:	4668      	mov	r0, sp
 80154d0:	f104 0310 	add.w	r3, r4, #16
 80154d4:	f44f 729c 	mov.w	r2, #312	; 0x138
 80154d8:	4619      	mov	r1, r3
 80154da:	f00a ff0f 	bl	80202fc <memcpy>
 80154de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80154e2:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8015594 <mode_execution+0x170>
 80154e6:	f7f8 fb8b 	bl	800dc00 <testturning>
	break;
 80154ea:	e04d      	b.n	8015588 <mode_execution+0x164>
	case 0b0110:
		mode_WallSensorTuning_fast(main_modeR);
 80154ec:	7bfb      	ldrb	r3, [r7, #15]
 80154ee:	4618      	mov	r0, r3
 80154f0:	f001 f9c2 	bl	8016878 <mode_WallSensorTuning_fast>
	break;
 80154f4:	e048      	b.n	8015588 <mode_execution+0x164>
	case 0b0111:
		testturning(speed1000_shortest_mollifier,main_modeR,1,ON,0.99,1);
 80154f6:	7bfb      	ldrb	r3, [r7, #15]
 80154f8:	4c27      	ldr	r4, [pc, #156]	; (8015598 <mode_execution+0x174>)
 80154fa:	2201      	movs	r2, #1
 80154fc:	9251      	str	r2, [sp, #324]	; 0x144
 80154fe:	2201      	movs	r2, #1
 8015500:	9250      	str	r2, [sp, #320]	; 0x140
 8015502:	2201      	movs	r2, #1
 8015504:	924f      	str	r2, [sp, #316]	; 0x13c
 8015506:	934e      	str	r3, [sp, #312]	; 0x138
 8015508:	4668      	mov	r0, sp
 801550a:	f104 0310 	add.w	r3, r4, #16
 801550e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015512:	4619      	mov	r1, r3
 8015514:	f00a fef2 	bl	80202fc <memcpy>
 8015518:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801551c:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 801559c <mode_execution+0x178>
 8015520:	f7f8 fb6e 	bl	800dc00 <testturning>
	break;
 8015524:	e030      	b.n	8015588 <mode_execution+0x164>
	case 0b1000:
		testturning(speed1200_shortest_mollifier,main_modeR,1,ON,0.99,1);
 8015526:	7bfb      	ldrb	r3, [r7, #15]
 8015528:	4c1d      	ldr	r4, [pc, #116]	; (80155a0 <mode_execution+0x17c>)
 801552a:	2201      	movs	r2, #1
 801552c:	9251      	str	r2, [sp, #324]	; 0x144
 801552e:	2201      	movs	r2, #1
 8015530:	9250      	str	r2, [sp, #320]	; 0x140
 8015532:	2201      	movs	r2, #1
 8015534:	924f      	str	r2, [sp, #316]	; 0x13c
 8015536:	934e      	str	r3, [sp, #312]	; 0x138
 8015538:	4668      	mov	r0, sp
 801553a:	f104 0310 	add.w	r3, r4, #16
 801553e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015542:	4619      	mov	r1, r3
 8015544:	f00a feda 	bl	80202fc <memcpy>
 8015548:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801554c:	ed9f 0a13 	vldr	s0, [pc, #76]	; 801559c <mode_execution+0x178>
 8015550:	f7f8 fb56 	bl	800dc00 <testturning>
	break;
 8015554:	e018      	b.n	8015588 <mode_execution+0x164>
	case 0b1001:
		testturning(speed1600_shortest_mollifier,main_modeR,1,ON,0.99,1);
 8015556:	7bfb      	ldrb	r3, [r7, #15]
 8015558:	4c12      	ldr	r4, [pc, #72]	; (80155a4 <mode_execution+0x180>)
 801555a:	2201      	movs	r2, #1
 801555c:	9251      	str	r2, [sp, #324]	; 0x144
 801555e:	2201      	movs	r2, #1
 8015560:	9250      	str	r2, [sp, #320]	; 0x140
 8015562:	2201      	movs	r2, #1
 8015564:	924f      	str	r2, [sp, #316]	; 0x13c
 8015566:	934e      	str	r3, [sp, #312]	; 0x138
 8015568:	4668      	mov	r0, sp
 801556a:	f104 0310 	add.w	r3, r4, #16
 801556e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015572:	4619      	mov	r1, r3
 8015574:	f00a fec2 	bl	80202fc <memcpy>
 8015578:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801557c:	ed9f 0a07 	vldr	s0, [pc, #28]	; 801559c <mode_execution+0x178>
 8015580:	f7f8 fb3e 	bl	800dc00 <testturning>
	break;
 8015584:	e000      	b.n	8015588 <mode_execution+0x164>
	break;
 8015586:	bf00      	nop
	case 0b1110:
	break;
	case 0b1111:
	break;
}
}
 8015588:	bf00      	nop
 801558a:	3714      	adds	r7, #20
 801558c:	46bd      	mov	sp, r7
 801558e:	bd90      	pop	{r4, r7, pc}
 8015590:	2000f358 	.word	0x2000f358
 8015594:	3f028f5c 	.word	0x3f028f5c
 8015598:	2000f4a0 	.word	0x2000f4a0
 801559c:	3f7d70a4 	.word	0x3f7d70a4
 80155a0:	2000f5e8 	.word	0x2000f5e8
 80155a4:	2000f730 	.word	0x2000f730

080155a8 <mode_PLtest>:



void mode_PLtest(unsigned char main_modeR) {
 80155a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80155ac:	b092      	sub	sp, #72	; 0x48
 80155ae:	af0a      	add	r7, sp, #40	; 0x28
 80155b0:	4603      	mov	r3, r0
 80155b2:	75fb      	strb	r3, [r7, #23]
	int duty_L=0, duty_R=0;
 80155b4:	2300      	movs	r3, #0
 80155b6:	61fb      	str	r3, [r7, #28]
 80155b8:	2300      	movs	r3, #0
 80155ba:	61bb      	str	r3, [r7, #24]
	switch (main_modeR) {
 80155bc:	7dfb      	ldrb	r3, [r7, #23]
 80155be:	2b0f      	cmp	r3, #15
 80155c0:	f200 819f 	bhi.w	8015902 <mode_PLtest+0x35a>
 80155c4:	a201      	add	r2, pc, #4	; (adr r2, 80155cc <mode_PLtest+0x24>)
 80155c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155ca:	bf00      	nop
 80155cc:	08015901 	.word	0x08015901
 80155d0:	0801560d 	.word	0x0801560d
 80155d4:	0801563f 	.word	0x0801563f
 80155d8:	080156bb 	.word	0x080156bb
 80155dc:	0801571f 	.word	0x0801571f
 80155e0:	0801579f 	.word	0x0801579f
 80155e4:	080157a5 	.word	0x080157a5
 80155e8:	08015903 	.word	0x08015903
 80155ec:	08015903 	.word	0x08015903
 80155f0:	0801582b 	.word	0x0801582b
 80155f4:	08015893 	.word	0x08015893
 80155f8:	08015903 	.word	0x08015903
 80155fc:	08015903 	.word	0x08015903
 8015600:	08015903 	.word	0x08015903
 8015604:	08015903 	.word	0x08015903
 8015608:	080158fb 	.word	0x080158fb
	case 0b0000:
		//飛ばすerror
		break;
	case 0b0001:	//sensor
		while (1) {
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 801560c:	4bbf      	ldr	r3, [pc, #764]	; (801590c <mode_PLtest+0x364>)
 801560e:	6819      	ldr	r1, [r3, #0]
 8015610:	4bbe      	ldr	r3, [pc, #760]	; (801590c <mode_PLtest+0x364>)
 8015612:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8015614:	4bbd      	ldr	r3, [pc, #756]	; (801590c <mode_PLtest+0x364>)
 8015616:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 801561a:	4bbc      	ldr	r3, [pc, #752]	; (801590c <mode_PLtest+0x364>)
 801561c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8015620:	4aba      	ldr	r2, [pc, #744]	; (801590c <mode_PLtest+0x364>)
 8015622:	f8d2 2140 	ldr.w	r2, [r2, #320]	; 0x140
 8015626:	9201      	str	r2, [sp, #4]
 8015628:	9300      	str	r3, [sp, #0]
 801562a:	4623      	mov	r3, r4
 801562c:	4602      	mov	r2, r0
 801562e:	48b8      	ldr	r0, [pc, #736]	; (8015910 <mode_PLtest+0x368>)
 8015630:	f00b fae4 	bl	8020bfc <iprintf>
					g_sensor[1][0], g_sensor[2][0], g_sensor[3][0],
					g_sensor[4][0]);
			wait_ms(500);
 8015634:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015638:	f7f2 fc36 	bl	8007ea8 <wait_ms>
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 801563c:	e7e6      	b.n	801560c <mode_PLtest+0x64>
		}
		break;
	case 0b0010:	//encoder
		pl_r_blue_LED(ON);
 801563e:	2001      	movs	r0, #1
 8015640:	f7f1 fca2 	bl	8006f88 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8015644:	2001      	movs	r0, #1
 8015646:	f7f1 fcb1 	bl	8006fac <pl_l_blue_LED>
		record_mode = 1;
 801564a:	4bb2      	ldr	r3, [pc, #712]	; (8015914 <mode_PLtest+0x36c>)
 801564c:	2201      	movs	r2, #1
 801564e:	701a      	strb	r2, [r3, #0]
		pl_DriveMotor_duty(900, 900);
 8015650:	f44f 7161 	mov.w	r1, #900	; 0x384
 8015654:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015658:	f7f2 f9ae 	bl	80079b8 <pl_DriveMotor_duty>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 801565c:	2001      	movs	r0, #1
 801565e:	f7f2 f969 	bl	8007934 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 8015662:	2001      	movs	r0, #1
 8015664:	f7f2 f93e 	bl	80078e4 <pl_L_DriveMotor_mode>
		pl_DriveMotor_start();
 8015668:	f7f2 f98a 	bl	8007980 <pl_DriveMotor_start>
		wait_ms(2500);
 801566c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8015670:	f7f2 fc1a 	bl	8007ea8 <wait_ms>
		pl_DriveMotor_stop();
 8015674:	f7f2 f992 	bl	800799c <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 8015678:	2000      	movs	r0, #0
 801567a:	f7f1 fc85 	bl	8006f88 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 801567e:	2000      	movs	r0, #0
 8015680:	f7f1 fc94 	bl	8006fac <pl_l_blue_LED>
		record_mode = 0;
 8015684:	4ba3      	ldr	r3, [pc, #652]	; (8015914 <mode_PLtest+0x36c>)
 8015686:	2200      	movs	r2, #0
 8015688:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 801568a:	e002      	b.n	8015692 <mode_PLtest+0xea>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 801568c:	2001      	movs	r0, #1
 801568e:	f7f2 fc0b 	bl	8007ea8 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8015692:	4b9e      	ldr	r3, [pc, #632]	; (801590c <mode_PLtest+0x364>)
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801569a:	ddf7      	ble.n	801568c <mode_PLtest+0xe4>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 801569c:	4b9b      	ldr	r3, [pc, #620]	; (801590c <mode_PLtest+0x364>)
 801569e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80156a2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80156a6:	ddf1      	ble.n	801568c <mode_PLtest+0xe4>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 80156a8:	4b98      	ldr	r3, [pc, #608]	; (801590c <mode_PLtest+0x364>)
 80156aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80156ae:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80156b2:	ddeb      	ble.n	801568c <mode_PLtest+0xe4>
		}
		record_print();
 80156b4:	f001 fbd0 	bl	8016e58 <record_print>
		break;
 80156b8:	e123      	b.n	8015902 <mode_PLtest+0x35a>
	case 0b0011:	//gyro
		reset_gyro();
 80156ba:	f7ec f855 	bl	8001768 <reset_gyro>
		reset_speed();
 80156be:	f7eb fcab 	bl	8001018 <reset_speed>
		pl_r_blue_LED(ON);
 80156c2:	2001      	movs	r0, #1
 80156c4:	f7f1 fc60 	bl	8006f88 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 80156c8:	2001      	movs	r0, #1
 80156ca:	f7f1 fc6f 	bl	8006fac <pl_l_blue_LED>
		record_mode = 2;
 80156ce:	4b91      	ldr	r3, [pc, #580]	; (8015914 <mode_PLtest+0x36c>)
 80156d0:	2202      	movs	r2, #2
 80156d2:	701a      	strb	r2, [r3, #0]
		wait_ms(2500);
 80156d4:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80156d8:	f7f2 fbe6 	bl	8007ea8 <wait_ms>
		pl_r_blue_LED(OFF);
 80156dc:	2000      	movs	r0, #0
 80156de:	f7f1 fc53 	bl	8006f88 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 80156e2:	2000      	movs	r0, #0
 80156e4:	f7f1 fc62 	bl	8006fac <pl_l_blue_LED>
		record_mode = 0;
 80156e8:	4b8a      	ldr	r3, [pc, #552]	; (8015914 <mode_PLtest+0x36c>)
 80156ea:	2200      	movs	r2, #0
 80156ec:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 80156ee:	e002      	b.n	80156f6 <mode_PLtest+0x14e>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 80156f0:	2001      	movs	r0, #1
 80156f2:	f7f2 fbd9 	bl	8007ea8 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 80156f6:	4b85      	ldr	r3, [pc, #532]	; (801590c <mode_PLtest+0x364>)
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80156fe:	ddf7      	ble.n	80156f0 <mode_PLtest+0x148>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 8015700:	4b82      	ldr	r3, [pc, #520]	; (801590c <mode_PLtest+0x364>)
 8015702:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015706:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801570a:	ddf1      	ble.n	80156f0 <mode_PLtest+0x148>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 801570c:	4b7f      	ldr	r3, [pc, #508]	; (801590c <mode_PLtest+0x364>)
 801570e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015712:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015716:	ddeb      	ble.n	80156f0 <mode_PLtest+0x148>
		}
		record_print();
 8015718:	f001 fb9e 	bl	8016e58 <record_print>
		break;
 801571c:	e0f1      	b.n	8015902 <mode_PLtest+0x35a>
	case 0b0100://speaker
		while (1) {
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 801571e:	4b7e      	ldr	r3, [pc, #504]	; (8015918 <mode_PLtest+0x370>)
 8015720:	681b      	ldr	r3, [r3, #0]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015722:	4618      	mov	r0, r3
 8015724:	f7ea ff38 	bl	8000598 <__aeabi_f2d>
 8015728:	e9c7 0102 	strd	r0, r1, [r7, #8]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 801572c:	4b7a      	ldr	r3, [pc, #488]	; (8015918 <mode_PLtest+0x370>)
 801572e:	685b      	ldr	r3, [r3, #4]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015730:	4618      	mov	r0, r3
 8015732:	f7ea ff31 	bl	8000598 <__aeabi_f2d>
 8015736:	4604      	mov	r4, r0
 8015738:	460d      	mov	r5, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 801573a:	4b77      	ldr	r3, [pc, #476]	; (8015918 <mode_PLtest+0x370>)
 801573c:	689b      	ldr	r3, [r3, #8]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 801573e:	4618      	mov	r0, r3
 8015740:	f7ea ff2a 	bl	8000598 <__aeabi_f2d>
 8015744:	4680      	mov	r8, r0
 8015746:	4689      	mov	r9, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015748:	4b73      	ldr	r3, [pc, #460]	; (8015918 <mode_PLtest+0x370>)
 801574a:	68db      	ldr	r3, [r3, #12]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 801574c:	4618      	mov	r0, r3
 801574e:	f7ea ff23 	bl	8000598 <__aeabi_f2d>
 8015752:	4682      	mov	sl, r0
 8015754:	468b      	mov	fp, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015756:	4b70      	ldr	r3, [pc, #448]	; (8015918 <mode_PLtest+0x370>)
 8015758:	691b      	ldr	r3, [r3, #16]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 801575a:	4618      	mov	r0, r3
 801575c:	f7ea ff1c 	bl	8000598 <__aeabi_f2d>
 8015760:	e9c7 0100 	strd	r0, r1, [r7]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015764:	4b6c      	ldr	r3, [pc, #432]	; (8015918 <mode_PLtest+0x370>)
 8015766:	695b      	ldr	r3, [r3, #20]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015768:	4618      	mov	r0, r3
 801576a:	f7ea ff15 	bl	8000598 <__aeabi_f2d>
 801576e:	4602      	mov	r2, r0
 8015770:	460b      	mov	r3, r1
 8015772:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015776:	ed97 7b00 	vldr	d7, [r7]
 801577a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801577e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8015782:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8015786:	e9cd 4500 	strd	r4, r5, [sp]
 801578a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801578e:	4863      	ldr	r0, [pc, #396]	; (801591c <mode_PLtest+0x374>)
 8015790:	f00b fa34 	bl	8020bfc <iprintf>
			wait_ms(500);
 8015794:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015798:	f7f2 fb86 	bl	8007ea8 <wait_ms>
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 801579c:	e7bf      	b.n	801571e <mode_PLtest+0x176>
		}
	break;
	case 0b0101:
		test_flash();
 801579e:	f7f1 fd43 	bl	8007228 <test_flash>
		break;
 80157a2:	e0ae      	b.n	8015902 <mode_PLtest+0x35a>
	case 0b0110:
		record_mode=6;
 80157a4:	4b5b      	ldr	r3, [pc, #364]	; (8015914 <mode_PLtest+0x36c>)
 80157a6:	2206      	movs	r2, #6
 80157a8:	701a      	strb	r2, [r3, #0]
		pl_r_blue_LED(ON);
 80157aa:	2001      	movs	r0, #1
 80157ac:	f7f1 fbec 	bl	8006f88 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 80157b0:	2001      	movs	r0, #1
 80157b2:	f7f1 fbfb 	bl	8006fac <pl_l_blue_LED>
		get_duty(1.0, -1.0,&duty_L,&duty_R);
 80157b6:	f107 0218 	add.w	r2, r7, #24
 80157ba:	f107 031c 	add.w	r3, r7, #28
 80157be:	4611      	mov	r1, r2
 80157c0:	4618      	mov	r0, r3
 80157c2:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80157c6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80157ca:	f7ec fb33 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 80157ce:	69fb      	ldr	r3, [r7, #28]
 80157d0:	69ba      	ldr	r2, [r7, #24]
 80157d2:	4611      	mov	r1, r2
 80157d4:	4618      	mov	r0, r3
 80157d6:	f7f2 f8ef 	bl	80079b8 <pl_DriveMotor_duty>
		pl_DriveMotor_start();
 80157da:	f7f2 f8d1 	bl	8007980 <pl_DriveMotor_start>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80157de:	e00a      	b.n	80157f6 <mode_PLtest+0x24e>
			wait_ms(1);
 80157e0:	2001      	movs	r0, #1
 80157e2:	f7f2 fb61 	bl	8007ea8 <wait_ms>
			if(record_rupe_flag==1){
 80157e6:	4b4e      	ldr	r3, [pc, #312]	; (8015920 <mode_PLtest+0x378>)
 80157e8:	781b      	ldrb	r3, [r3, #0]
 80157ea:	2b01      	cmp	r3, #1
 80157ec:	d103      	bne.n	80157f6 <mode_PLtest+0x24e>
				record_mode=0;
 80157ee:	4b49      	ldr	r3, [pc, #292]	; (8015914 <mode_PLtest+0x36c>)
 80157f0:	2200      	movs	r2, #0
 80157f2:	701a      	strb	r2, [r3, #0]
				break;
 80157f4:	e010      	b.n	8015818 <mode_PLtest+0x270>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80157f6:	4b45      	ldr	r3, [pc, #276]	; (801590c <mode_PLtest+0x364>)
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80157fe:	ddef      	ble.n	80157e0 <mode_PLtest+0x238>
 8015800:	4b42      	ldr	r3, [pc, #264]	; (801590c <mode_PLtest+0x364>)
 8015802:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015806:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801580a:	dde9      	ble.n	80157e0 <mode_PLtest+0x238>
 801580c:	4b3f      	ldr	r3, [pc, #252]	; (801590c <mode_PLtest+0x364>)
 801580e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015812:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015816:	dde3      	ble.n	80157e0 <mode_PLtest+0x238>
			}
		}
		pl_DriveMotor_stop();
 8015818:	f7f2 f8c0 	bl	800799c <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 801581c:	2000      	movs	r0, #0
 801581e:	f7f1 fbb3 	bl	8006f88 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8015822:	2000      	movs	r0, #0
 8015824:	f7f1 fbc2 	bl	8006fac <pl_l_blue_LED>

		break;
 8015828:	e06b      	b.n	8015902 <mode_PLtest+0x35a>
	case 0b1001://fun
			pl_FunMotor_duty(0.5);
 801582a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801582e:	f7f2 f8ed 	bl	8007a0c <pl_FunMotor_duty>
			pl_FunMotor_start();
 8015832:	f7f2 f8d7 	bl	80079e4 <pl_FunMotor_start>
			HAL_Delay(2000);
 8015836:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801583a:	f003 fa8d 	bl	8018d58 <HAL_Delay>
			reset_gyro();
 801583e:	f7eb ff93 	bl	8001768 <reset_gyro>
			reset_speed();
 8015842:	f7eb fbe9 	bl	8001018 <reset_speed>
			clear_Ierror();
 8015846:	f7ee feb3 	bl	80045b0 <clear_Ierror>
			pl_r_blue_LED(ON);
 801584a:	2001      	movs	r0, #1
 801584c:	f7f1 fb9c 	bl	8006f88 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015850:	2001      	movs	r0, #1
 8015852:	f7f1 fbab 	bl	8006fac <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015856:	e002      	b.n	801585e <mode_PLtest+0x2b6>
				HAL_Delay(1);
 8015858:	2001      	movs	r0, #1
 801585a:	f003 fa7d 	bl	8018d58 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801585e:	4b2b      	ldr	r3, [pc, #172]	; (801590c <mode_PLtest+0x364>)
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015866:	ddf7      	ble.n	8015858 <mode_PLtest+0x2b0>
 8015868:	4b28      	ldr	r3, [pc, #160]	; (801590c <mode_PLtest+0x364>)
 801586a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801586e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015872:	ddf1      	ble.n	8015858 <mode_PLtest+0x2b0>
 8015874:	4b25      	ldr	r3, [pc, #148]	; (801590c <mode_PLtest+0x364>)
 8015876:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 801587a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801587e:	ddeb      	ble.n	8015858 <mode_PLtest+0x2b0>
			}
			pl_r_blue_LED(OFF);
 8015880:	2000      	movs	r0, #0
 8015882:	f7f1 fb81 	bl	8006f88 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015886:	2000      	movs	r0, #0
 8015888:	f7f1 fb90 	bl	8006fac <pl_l_blue_LED>
			pl_FunMotor_stop();
 801588c:	f7f2 f8b4 	bl	80079f8 <pl_FunMotor_stop>
		break;
 8015890:	e037      	b.n	8015902 <mode_PLtest+0x35a>
	case 0b1010://fun
			pl_FunMotor_duty(0.99);
 8015892:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8015924 <mode_PLtest+0x37c>
 8015896:	f7f2 f8b9 	bl	8007a0c <pl_FunMotor_duty>
			pl_FunMotor_start();
 801589a:	f7f2 f8a3 	bl	80079e4 <pl_FunMotor_start>
			HAL_Delay(2000);
 801589e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80158a2:	f003 fa59 	bl	8018d58 <HAL_Delay>
			reset_gyro();
 80158a6:	f7eb ff5f 	bl	8001768 <reset_gyro>
			reset_speed();
 80158aa:	f7eb fbb5 	bl	8001018 <reset_speed>
			clear_Ierror();
 80158ae:	f7ee fe7f 	bl	80045b0 <clear_Ierror>
			pl_r_blue_LED(ON);
 80158b2:	2001      	movs	r0, #1
 80158b4:	f7f1 fb68 	bl	8006f88 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 80158b8:	2001      	movs	r0, #1
 80158ba:	f7f1 fb77 	bl	8006fac <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80158be:	e002      	b.n	80158c6 <mode_PLtest+0x31e>
				HAL_Delay(1);
 80158c0:	2001      	movs	r0, #1
 80158c2:	f003 fa49 	bl	8018d58 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80158c6:	4b11      	ldr	r3, [pc, #68]	; (801590c <mode_PLtest+0x364>)
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80158ce:	ddf7      	ble.n	80158c0 <mode_PLtest+0x318>
 80158d0:	4b0e      	ldr	r3, [pc, #56]	; (801590c <mode_PLtest+0x364>)
 80158d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80158d6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80158da:	ddf1      	ble.n	80158c0 <mode_PLtest+0x318>
 80158dc:	4b0b      	ldr	r3, [pc, #44]	; (801590c <mode_PLtest+0x364>)
 80158de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80158e2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80158e6:	ddeb      	ble.n	80158c0 <mode_PLtest+0x318>
			}
			pl_r_blue_LED(OFF);
 80158e8:	2000      	movs	r0, #0
 80158ea:	f7f1 fb4d 	bl	8006f88 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80158ee:	2000      	movs	r0, #0
 80158f0:	f7f1 fb5c 	bl	8006fac <pl_l_blue_LED>
			pl_FunMotor_stop();
 80158f4:	f7f2 f880 	bl	80079f8 <pl_FunMotor_stop>
		break;
 80158f8:	e003      	b.n	8015902 <mode_PLtest+0x35a>
	case 0b1111:	//record_out
		record_print();
 80158fa:	f001 faad 	bl	8016e58 <record_print>
		break;
 80158fe:	e000      	b.n	8015902 <mode_PLtest+0x35a>
		break;
 8015900:	bf00      	nop
//			record_print();
//		break;
	}
//

}
 8015902:	bf00      	nop
 8015904:	3720      	adds	r7, #32
 8015906:	46bd      	mov	sp, r7
 8015908:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801590c:	200002b8 	.word	0x200002b8
 8015910:	08023678 	.word	0x08023678
 8015914:	2000edc0 	.word	0x2000edc0
 8015918:	200006e4 	.word	0x200006e4
 801591c:	080236a4 	.word	0x080236a4
 8015920:	2000edcc 	.word	0x2000edcc
 8015924:	3f7d70a4 	.word	0x3f7d70a4

08015928 <mode_Running>:


void mode_Running(unsigned char main_modeR){
 8015928:	b5b0      	push	{r4, r5, r7, lr}
 801592a:	b0da      	sub	sp, #360	; 0x168
 801592c:	af54      	add	r7, sp, #336	; 0x150
 801592e:	4603      	mov	r3, r0
 8015930:	71fb      	strb	r3, [r7, #7]
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015932:	2003      	movs	r0, #3
 8015934:	f7f1 ffd6 	bl	80078e4 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015938:	2003      	movs	r0, #3
 801593a:	f7f1 fffb 	bl	8007934 <pl_R_DriveMotor_mode>
	reset_gyro();
 801593e:	f7eb ff13 	bl	8001768 <reset_gyro>
	reset_speed();
 8015942:	f7eb fb69 	bl	8001018 <reset_speed>
	reset_distance();
 8015946:	f7eb fb29 	bl	8000f9c <reset_distance>
	clear_Ierror();
 801594a:	f7ee fe31 	bl	80045b0 <clear_Ierror>
	switch (main_modeR) {
 801594e:	79fb      	ldrb	r3, [r7, #7]
 8015950:	2b0f      	cmp	r3, #15
 8015952:	f200 81e3 	bhi.w	8015d1c <mode_Running+0x3f4>
 8015956:	a201      	add	r2, pc, #4	; (adr r2, 801595c <mode_Running+0x34>)
 8015958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801595c:	0801599d 	.word	0x0801599d
 8015960:	08015a4d 	.word	0x08015a4d
 8015964:	08015a85 	.word	0x08015a85
 8015968:	08015a8b 	.word	0x08015a8b
 801596c:	08015ac3 	.word	0x08015ac3
 8015970:	08015af5 	.word	0x08015af5
 8015974:	08015b27 	.word	0x08015b27
 8015978:	08015b59 	.word	0x08015b59
 801597c:	08015b8b 	.word	0x08015b8b
 8015980:	08015bbd 	.word	0x08015bbd
 8015984:	08015bef 	.word	0x08015bef
 8015988:	08015c21 	.word	0x08015c21
 801598c:	08015c53 	.word	0x08015c53
 8015990:	08015c85 	.word	0x08015c85
 8015994:	08015cb7 	.word	0x08015cb7
 8015998:	08015ce9 	.word	0x08015ce9
		case 0b0000://迷路表示
			//maze_maker2(1, 0, 0, 0, 7, 7);
			//record_out();
			//wall.row[8]=(1<<8);
			create_StepCountMap_queue();
 801599c:	f7fe fc1e 	bl	80141dc <create_StepCountMap_queue>
			maze_display();
 80159a0:	f7ff fa40 	bl	8014e24 <maze_display>

			create_DijkstraMap();
 80159a4:	f7fb fe98 	bl	80116d8 <create_DijkstraMap>
			maze_display_Dijkstra();
 80159a8:	f7ff fb5a 	bl	8015060 <maze_display_Dijkstra>

			route_Dijkstra();
 80159ac:	f7fd fbdc 	bl	8013168 <route_Dijkstra>
			create_StepCountMap_unknown();
 80159b0:	f7fe f8de 	bl	8013b70 <create_StepCountMap_unknown>
			maze_display();
 80159b4:	f7ff fa36 	bl	8014e24 <maze_display>

			tic_timer();
 80159b8:	f7f2 fa48 	bl	8007e4c <tic_timer>
			for(int j=0;j<5000;j++){
 80159bc:	2300      	movs	r3, #0
 80159be:	617b      	str	r3, [r7, #20]
 80159c0:	e004      	b.n	80159cc <mode_Running+0xa4>
			create_StepCountMap_queue();
 80159c2:	f7fe fc0b 	bl	80141dc <create_StepCountMap_queue>
			for(int j=0;j<5000;j++){
 80159c6:	697b      	ldr	r3, [r7, #20]
 80159c8:	3301      	adds	r3, #1
 80159ca:	617b      	str	r3, [r7, #20]
 80159cc:	697b      	ldr	r3, [r7, #20]
 80159ce:	f241 3287 	movw	r2, #4999	; 0x1387
 80159d2:	4293      	cmp	r3, r2
 80159d4:	ddf5      	ble.n	80159c2 <mode_Running+0x9a>
			}
			float tim2 = toc_timer();
 80159d6:	f7f2 fa4b 	bl	8007e70 <toc_timer>
 80159da:	ed87 0a03 	vstr	s0, [r7, #12]
			maze_display();
 80159de:	f7ff fa21 	bl	8014e24 <maze_display>
			printf("tim2=%f\n", tim2);
 80159e2:	68f8      	ldr	r0, [r7, #12]
 80159e4:	f7ea fdd8 	bl	8000598 <__aeabi_f2d>
 80159e8:	4602      	mov	r2, r0
 80159ea:	460b      	mov	r3, r1
 80159ec:	48cd      	ldr	r0, [pc, #820]	; (8015d24 <mode_Running+0x3fc>)
 80159ee:	f00b f905 	bl	8020bfc <iprintf>
			tic_timer();
 80159f2:	f7f2 fa2b 	bl	8007e4c <tic_timer>
			create_DijkstraMap();
 80159f6:	f7fb fe6f 	bl	80116d8 <create_DijkstraMap>
			for(int j=0;j<5000;j++){
 80159fa:	2300      	movs	r3, #0
 80159fc:	613b      	str	r3, [r7, #16]
 80159fe:	e006      	b.n	8015a0e <mode_Running+0xe6>
			//create_StepCountMap();
			//maze_clear();
			//create_DijkstraMap();
			route_Dijkstra();
 8015a00:	f7fd fbb2 	bl	8013168 <route_Dijkstra>
			create_StepCountMap_unknown();
 8015a04:	f7fe f8b4 	bl	8013b70 <create_StepCountMap_unknown>
			for(int j=0;j<5000;j++){
 8015a08:	693b      	ldr	r3, [r7, #16]
 8015a0a:	3301      	adds	r3, #1
 8015a0c:	613b      	str	r3, [r7, #16]
 8015a0e:	693b      	ldr	r3, [r7, #16]
 8015a10:	f241 3287 	movw	r2, #4999	; 0x1387
 8015a14:	4293      	cmp	r3, r2
 8015a16:	ddf3      	ble.n	8015a00 <mode_Running+0xd8>

			}
			float tim1 = toc_timer();
 8015a18:	f7f2 fa2a 	bl	8007e70 <toc_timer>
 8015a1c:	ed87 0a02 	vstr	s0, [r7, #8]
			maze_display();
 8015a20:	f7ff fa00 	bl	8014e24 <maze_display>
			maze_display_Dijkstra();
 8015a24:	f7ff fb1c 	bl	8015060 <maze_display_Dijkstra>
			printf("tim1=%f,tim2=%f\n", tim1, tim2);
 8015a28:	68b8      	ldr	r0, [r7, #8]
 8015a2a:	f7ea fdb5 	bl	8000598 <__aeabi_f2d>
 8015a2e:	4604      	mov	r4, r0
 8015a30:	460d      	mov	r5, r1
 8015a32:	68f8      	ldr	r0, [r7, #12]
 8015a34:	f7ea fdb0 	bl	8000598 <__aeabi_f2d>
 8015a38:	4602      	mov	r2, r0
 8015a3a:	460b      	mov	r3, r1
 8015a3c:	e9cd 2300 	strd	r2, r3, [sp]
 8015a40:	4622      	mov	r2, r4
 8015a42:	462b      	mov	r3, r5
 8015a44:	48b8      	ldr	r0, [pc, #736]	; (8015d28 <mode_Running+0x400>)
 8015a46:	f00b f8d9 	bl	8020bfc <iprintf>
		break;
 8015a4a:	e167      	b.n	8015d1c <mode_Running+0x3f4>
		case 0b0001://足立法(遅い)
			tic_timer();
 8015a4c:	f7f2 f9fe 	bl	8007e4c <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,0);
 8015a50:	4cb6      	ldr	r4, [pc, #728]	; (8015d2c <mode_Running+0x404>)
 8015a52:	2300      	movs	r3, #0
 8015a54:	934f      	str	r3, [sp, #316]	; 0x13c
 8015a56:	2301      	movs	r3, #1
 8015a58:	934e      	str	r3, [sp, #312]	; 0x138
 8015a5a:	4668      	mov	r0, sp
 8015a5c:	f104 0310 	add.w	r3, r4, #16
 8015a60:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015a64:	4619      	mov	r1, r3
 8015a66:	f00a fc49 	bl	80202fc <memcpy>
 8015a6a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015a6e:	eddf 1ab0 	vldr	s3, [pc, #704]	; 8015d30 <mode_Running+0x408>
 8015a72:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 8015d34 <mode_Running+0x40c>
 8015a76:	eddf 0ab0 	vldr	s1, [pc, #704]	; 8015d38 <mode_Running+0x410>
 8015a7a:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8015d3c <mode_Running+0x414>
 8015a7e:	f7f8 fa79 	bl	800df74 <AdatiWayReturn>
			//adati_wayreturn(400, 400, 3000, 13000);
		break;
 8015a82:	e14b      	b.n	8015d1c <mode_Running+0x3f4>
		case 0b0010://Flashから
			record_out();
 8015a84:	f7f1 fcee 	bl	8007464 <record_out>
		break;
 8015a88:	e148      	b.n	8015d1c <mode_Running+0x3f4>
		case 0b0011://ゴミ
			tic_timer();
 8015a8a:	f7f2 f9df 	bl	8007e4c <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,1);
 8015a8e:	4ca7      	ldr	r4, [pc, #668]	; (8015d2c <mode_Running+0x404>)
 8015a90:	2301      	movs	r3, #1
 8015a92:	934f      	str	r3, [sp, #316]	; 0x13c
 8015a94:	2301      	movs	r3, #1
 8015a96:	934e      	str	r3, [sp, #312]	; 0x138
 8015a98:	4668      	mov	r0, sp
 8015a9a:	f104 0310 	add.w	r3, r4, #16
 8015a9e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015aa2:	4619      	mov	r1, r3
 8015aa4:	f00a fc2a 	bl	80202fc <memcpy>
 8015aa8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015aac:	eddf 1aa0 	vldr	s3, [pc, #640]	; 8015d30 <mode_Running+0x408>
 8015ab0:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 8015d34 <mode_Running+0x40c>
 8015ab4:	eddf 0aa0 	vldr	s1, [pc, #640]	; 8015d38 <mode_Running+0x410>
 8015ab8:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8015d3c <mode_Running+0x414>
 8015abc:	f7f8 fa5a 	bl	800df74 <AdatiWayReturn>
		break;
 8015ac0:	e12c      	b.n	8015d1c <mode_Running+0x3f4>
		case 0b0100://ゴミ
			record_out();
 8015ac2:	f7f1 fccf 	bl	8007464 <record_out>
			run_shortest(1000,3000,0,TURN_OFF,FUN_OFF,SLANT_OFF,speed300_shortest,0.3,0);
 8015ac6:	2300      	movs	r3, #0
 8015ac8:	9352      	str	r3, [sp, #328]	; 0x148
 8015aca:	4a9d      	ldr	r2, [pc, #628]	; (8015d40 <mode_Running+0x418>)
 8015acc:	466b      	mov	r3, sp
 8015ace:	4611      	mov	r1, r2
 8015ad0:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	f00a fc11 	bl	80202fc <memcpy>
 8015ada:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 8015d44 <mode_Running+0x41c>
 8015ade:	2300      	movs	r3, #0
 8015ae0:	2200      	movs	r2, #0
 8015ae2:	2100      	movs	r1, #0
 8015ae4:	2000      	movs	r0, #0
 8015ae6:	eddf 0a92 	vldr	s1, [pc, #584]	; 8015d30 <mode_Running+0x408>
 8015aea:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8015d48 <mode_Running+0x420>
 8015aee:	f7f9 fb2f 	bl	800f150 <run_shortest>
		break;
 8015af2:	e113      	b.n	8015d1c <mode_Running+0x3f4>
		case 0b0101://
			record_out();
 8015af4:	f7f1 fcb6 	bl	8007464 <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_OFF,speed600_shortest_mollifier,0.3,1);
 8015af8:	2301      	movs	r3, #1
 8015afa:	9352      	str	r3, [sp, #328]	; 0x148
 8015afc:	4a93      	ldr	r2, [pc, #588]	; (8015d4c <mode_Running+0x424>)
 8015afe:	466b      	mov	r3, sp
 8015b00:	4611      	mov	r1, r2
 8015b02:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015b06:	4618      	mov	r0, r3
 8015b08:	f00a fbf8 	bl	80202fc <memcpy>
 8015b0c:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 8015d44 <mode_Running+0x41c>
 8015b10:	2300      	movs	r3, #0
 8015b12:	2200      	movs	r2, #0
 8015b14:	2101      	movs	r1, #1
 8015b16:	2000      	movs	r0, #0
 8015b18:	eddf 0a85 	vldr	s1, [pc, #532]	; 8015d30 <mode_Running+0x408>
 8015b1c:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 8015d48 <mode_Running+0x420>
 8015b20:	f7f9 fb16 	bl	800f150 <run_shortest>
		break;
 8015b24:	e0fa      	b.n	8015d1c <mode_Running+0x3f4>
		case 0b0110://吸引なしで斜め走行
			record_out();
 8015b26:	f7f1 fc9d 	bl	8007464 <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_ON,speed600_shortest_mollifier,0.3,1);
 8015b2a:	2301      	movs	r3, #1
 8015b2c:	9352      	str	r3, [sp, #328]	; 0x148
 8015b2e:	4a87      	ldr	r2, [pc, #540]	; (8015d4c <mode_Running+0x424>)
 8015b30:	466b      	mov	r3, sp
 8015b32:	4611      	mov	r1, r2
 8015b34:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015b38:	4618      	mov	r0, r3
 8015b3a:	f00a fbdf 	bl	80202fc <memcpy>
 8015b3e:	ed9f 1a81 	vldr	s2, [pc, #516]	; 8015d44 <mode_Running+0x41c>
 8015b42:	2301      	movs	r3, #1
 8015b44:	2200      	movs	r2, #0
 8015b46:	2101      	movs	r1, #1
 8015b48:	2000      	movs	r0, #0
 8015b4a:	eddf 0a79 	vldr	s1, [pc, #484]	; 8015d30 <mode_Running+0x408>
 8015b4e:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8015d48 <mode_Running+0x420>
 8015b52:	f7f9 fafd 	bl	800f150 <run_shortest>
		break;
 8015b56:	e0e1      	b.n	8015d1c <mode_Running+0x3f4>
		case 0b0111://吸引ありで斜め走行
			record_out();
 8015b58:	f7f1 fc84 	bl	8007464 <record_out>
			run_shortest(3000,10000,0,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1);
 8015b5c:	2301      	movs	r3, #1
 8015b5e:	9352      	str	r3, [sp, #328]	; 0x148
 8015b60:	4a7b      	ldr	r2, [pc, #492]	; (8015d50 <mode_Running+0x428>)
 8015b62:	466b      	mov	r3, sp
 8015b64:	4611      	mov	r1, r2
 8015b66:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015b6a:	4618      	mov	r0, r3
 8015b6c:	f00a fbc6 	bl	80202fc <memcpy>
 8015b70:	ed9f 1a78 	vldr	s2, [pc, #480]	; 8015d54 <mode_Running+0x42c>
 8015b74:	2301      	movs	r3, #1
 8015b76:	2201      	movs	r2, #1
 8015b78:	2101      	movs	r1, #1
 8015b7a:	2000      	movs	r0, #0
 8015b7c:	eddf 0a76 	vldr	s1, [pc, #472]	; 8015d58 <mode_Running+0x430>
 8015b80:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8015d30 <mode_Running+0x408>
 8015b84:	f7f9 fae4 	bl	800f150 <run_shortest>
		break;
 8015b88:	e0c8      	b.n	8015d1c <mode_Running+0x3f4>
		case 0b1000://
			record_out();
 8015b8a:	f7f1 fc6b 	bl	8007464 <record_out>
			run_shortest(3200,13000,0,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1);
 8015b8e:	2301      	movs	r3, #1
 8015b90:	9352      	str	r3, [sp, #328]	; 0x148
 8015b92:	4a6f      	ldr	r2, [pc, #444]	; (8015d50 <mode_Running+0x428>)
 8015b94:	466b      	mov	r3, sp
 8015b96:	4611      	mov	r1, r2
 8015b98:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	f00a fbad 	bl	80202fc <memcpy>
 8015ba2:	ed9f 1a6c 	vldr	s2, [pc, #432]	; 8015d54 <mode_Running+0x42c>
 8015ba6:	2301      	movs	r3, #1
 8015ba8:	2201      	movs	r2, #1
 8015baa:	2101      	movs	r1, #1
 8015bac:	2000      	movs	r0, #0
 8015bae:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8015d5c <mode_Running+0x434>
 8015bb2:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8015d60 <mode_Running+0x438>
 8015bb6:	f7f9 facb 	bl	800f150 <run_shortest>
		break;
 8015bba:	e0af      	b.n	8015d1c <mode_Running+0x3f4>
		case 0b1001:
			record_out();
 8015bbc:	f7f1 fc52 	bl	8007464 <record_out>
			run_shortest(3000,10000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1);
 8015bc0:	2301      	movs	r3, #1
 8015bc2:	9352      	str	r3, [sp, #328]	; 0x148
 8015bc4:	4a67      	ldr	r2, [pc, #412]	; (8015d64 <mode_Running+0x43c>)
 8015bc6:	466b      	mov	r3, sp
 8015bc8:	4611      	mov	r1, r2
 8015bca:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015bce:	4618      	mov	r0, r3
 8015bd0:	f00a fb94 	bl	80202fc <memcpy>
 8015bd4:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 8015d54 <mode_Running+0x42c>
 8015bd8:	2301      	movs	r3, #1
 8015bda:	2201      	movs	r2, #1
 8015bdc:	2101      	movs	r1, #1
 8015bde:	2000      	movs	r0, #0
 8015be0:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8015d58 <mode_Running+0x430>
 8015be4:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8015d30 <mode_Running+0x408>
 8015be8:	f7f9 fab2 	bl	800f150 <run_shortest>
		break;
 8015bec:	e096      	b.n	8015d1c <mode_Running+0x3f4>
		case 0b1010:
			record_out();
 8015bee:	f7f1 fc39 	bl	8007464 <record_out>
			run_shortest(3200,13000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1);
 8015bf2:	2301      	movs	r3, #1
 8015bf4:	9352      	str	r3, [sp, #328]	; 0x148
 8015bf6:	4a5b      	ldr	r2, [pc, #364]	; (8015d64 <mode_Running+0x43c>)
 8015bf8:	466b      	mov	r3, sp
 8015bfa:	4611      	mov	r1, r2
 8015bfc:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015c00:	4618      	mov	r0, r3
 8015c02:	f00a fb7b 	bl	80202fc <memcpy>
 8015c06:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8015d54 <mode_Running+0x42c>
 8015c0a:	2301      	movs	r3, #1
 8015c0c:	2201      	movs	r2, #1
 8015c0e:	2101      	movs	r1, #1
 8015c10:	2000      	movs	r0, #0
 8015c12:	eddf 0a52 	vldr	s1, [pc, #328]	; 8015d5c <mode_Running+0x434>
 8015c16:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8015d60 <mode_Running+0x438>
 8015c1a:	f7f9 fa99 	bl	800f150 <run_shortest>
		break;
 8015c1e:	e07d      	b.n	8015d1c <mode_Running+0x3f4>
		case 0b1011:
			record_out();
 8015c20:	f7f1 fc20 	bl	8007464 <record_out>
			run_shortest(4000,17000,0,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1);
 8015c24:	2301      	movs	r3, #1
 8015c26:	9352      	str	r3, [sp, #328]	; 0x148
 8015c28:	4a49      	ldr	r2, [pc, #292]	; (8015d50 <mode_Running+0x428>)
 8015c2a:	466b      	mov	r3, sp
 8015c2c:	4611      	mov	r1, r2
 8015c2e:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015c32:	4618      	mov	r0, r3
 8015c34:	f00a fb62 	bl	80202fc <memcpy>
 8015c38:	ed9f 1a46 	vldr	s2, [pc, #280]	; 8015d54 <mode_Running+0x42c>
 8015c3c:	2301      	movs	r3, #1
 8015c3e:	2201      	movs	r2, #1
 8015c40:	2101      	movs	r1, #1
 8015c42:	2000      	movs	r0, #0
 8015c44:	eddf 0a48 	vldr	s1, [pc, #288]	; 8015d68 <mode_Running+0x440>
 8015c48:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8015d6c <mode_Running+0x444>
 8015c4c:	f7f9 fa80 	bl	800f150 <run_shortest>
		break;
 8015c50:	e064      	b.n	8015d1c <mode_Running+0x3f4>
		case 0b1100:
			record_out();
 8015c52:	f7f1 fc07 	bl	8007464 <record_out>
			run_shortest(4000,17000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1);
 8015c56:	2301      	movs	r3, #1
 8015c58:	9352      	str	r3, [sp, #328]	; 0x148
 8015c5a:	4a42      	ldr	r2, [pc, #264]	; (8015d64 <mode_Running+0x43c>)
 8015c5c:	466b      	mov	r3, sp
 8015c5e:	4611      	mov	r1, r2
 8015c60:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015c64:	4618      	mov	r0, r3
 8015c66:	f00a fb49 	bl	80202fc <memcpy>
 8015c6a:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 8015d54 <mode_Running+0x42c>
 8015c6e:	2301      	movs	r3, #1
 8015c70:	2201      	movs	r2, #1
 8015c72:	2101      	movs	r1, #1
 8015c74:	2000      	movs	r0, #0
 8015c76:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8015d68 <mode_Running+0x440>
 8015c7a:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8015d6c <mode_Running+0x444>
 8015c7e:	f7f9 fa67 	bl	800f150 <run_shortest>
		break;
 8015c82:	e04b      	b.n	8015d1c <mode_Running+0x3f4>
		case 0b1101:
			record_out();
 8015c84:	f7f1 fbee 	bl	8007464 <record_out>
			run_shortest(3100,11000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest_mollifier,0.99,1);
 8015c88:	2301      	movs	r3, #1
 8015c8a:	9352      	str	r3, [sp, #328]	; 0x148
 8015c8c:	4a38      	ldr	r2, [pc, #224]	; (8015d70 <mode_Running+0x448>)
 8015c8e:	466b      	mov	r3, sp
 8015c90:	4611      	mov	r1, r2
 8015c92:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015c96:	4618      	mov	r0, r3
 8015c98:	f00a fb30 	bl	80202fc <memcpy>
 8015c9c:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 8015d54 <mode_Running+0x42c>
 8015ca0:	2301      	movs	r3, #1
 8015ca2:	2201      	movs	r2, #1
 8015ca4:	2101      	movs	r1, #1
 8015ca6:	2000      	movs	r0, #0
 8015ca8:	eddf 0a32 	vldr	s1, [pc, #200]	; 8015d74 <mode_Running+0x44c>
 8015cac:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8015d78 <mode_Running+0x450>
 8015cb0:	f7f9 fa4e 	bl	800f150 <run_shortest>
		break;
 8015cb4:	e032      	b.n	8015d1c <mode_Running+0x3f4>
		case 0b1110:
			record_out();
 8015cb6:	f7f1 fbd5 	bl	8007464 <record_out>
			run_shortest(4000,17000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest_mollifier,0.99,1);
 8015cba:	2301      	movs	r3, #1
 8015cbc:	9352      	str	r3, [sp, #328]	; 0x148
 8015cbe:	4a2c      	ldr	r2, [pc, #176]	; (8015d70 <mode_Running+0x448>)
 8015cc0:	466b      	mov	r3, sp
 8015cc2:	4611      	mov	r1, r2
 8015cc4:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015cc8:	4618      	mov	r0, r3
 8015cca:	f00a fb17 	bl	80202fc <memcpy>
 8015cce:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8015d54 <mode_Running+0x42c>
 8015cd2:	2301      	movs	r3, #1
 8015cd4:	2201      	movs	r2, #1
 8015cd6:	2101      	movs	r1, #1
 8015cd8:	2000      	movs	r0, #0
 8015cda:	eddf 0a23 	vldr	s1, [pc, #140]	; 8015d68 <mode_Running+0x440>
 8015cde:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8015d6c <mode_Running+0x444>
 8015ce2:	f7f9 fa35 	bl	800f150 <run_shortest>
		break;
 8015ce6:	e019      	b.n	8015d1c <mode_Running+0x3f4>
		case 0b1111:
			AdatiWayReturn(250,400,2000,3000,speed250_exploration,1,0);
 8015ce8:	4c24      	ldr	r4, [pc, #144]	; (8015d7c <mode_Running+0x454>)
 8015cea:	2300      	movs	r3, #0
 8015cec:	934f      	str	r3, [sp, #316]	; 0x13c
 8015cee:	2301      	movs	r3, #1
 8015cf0:	934e      	str	r3, [sp, #312]	; 0x138
 8015cf2:	4668      	mov	r0, sp
 8015cf4:	f104 0310 	add.w	r3, r4, #16
 8015cf8:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015cfc:	4619      	mov	r1, r3
 8015cfe:	f00a fafd 	bl	80202fc <memcpy>
 8015d02:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015d06:	eddf 1a0a 	vldr	s3, [pc, #40]	; 8015d30 <mode_Running+0x408>
 8015d0a:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8015d34 <mode_Running+0x40c>
 8015d0e:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8015d38 <mode_Running+0x410>
 8015d12:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8015d80 <mode_Running+0x458>
 8015d16:	f7f8 f92d 	bl	800df74 <AdatiWayReturn>
		break;
 8015d1a:	bf00      	nop
	}


}
 8015d1c:	bf00      	nop
 8015d1e:	3718      	adds	r7, #24
 8015d20:	46bd      	mov	sp, r7
 8015d22:	bdb0      	pop	{r4, r5, r7, pc}
 8015d24:	080236f0 	.word	0x080236f0
 8015d28:	080236fc 	.word	0x080236fc
 8015d2c:	2000ef80 	.word	0x2000ef80
 8015d30:	453b8000 	.word	0x453b8000
 8015d34:	44fa0000 	.word	0x44fa0000
 8015d38:	43c80000 	.word	0x43c80000
 8015d3c:	43960000 	.word	0x43960000
 8015d40:	2000f210 	.word	0x2000f210
 8015d44:	3e99999a 	.word	0x3e99999a
 8015d48:	447a0000 	.word	0x447a0000
 8015d4c:	2000f358 	.word	0x2000f358
 8015d50:	2000f4a0 	.word	0x2000f4a0
 8015d54:	3f7d70a4 	.word	0x3f7d70a4
 8015d58:	461c4000 	.word	0x461c4000
 8015d5c:	464b2000 	.word	0x464b2000
 8015d60:	45480000 	.word	0x45480000
 8015d64:	2000f5e8 	.word	0x2000f5e8
 8015d68:	4684d000 	.word	0x4684d000
 8015d6c:	457a0000 	.word	0x457a0000
 8015d70:	2000f730 	.word	0x2000f730
 8015d74:	462be000 	.word	0x462be000
 8015d78:	4541c000 	.word	0x4541c000
 8015d7c:	2000f0c8 	.word	0x2000f0c8
 8015d80:	437a0000 	.word	0x437a0000

08015d84 <mode_Tuning0>:





void mode_Tuning0(unsigned char main_modeR){
 8015d84:	b590      	push	{r4, r7, lr}
 8015d86:	b0db      	sub	sp, #364	; 0x16c
 8015d88:	af52      	add	r7, sp, #328	; 0x148
 8015d8a:	4603      	mov	r3, r0
 8015d8c:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	int duty_L=0, duty_R=0;
 8015d8e:	2300      	movs	r3, #0
 8015d90:	613b      	str	r3, [r7, #16]
 8015d92:	2300      	movs	r3, #0
 8015d94:	60fb      	str	r3, [r7, #12]
	mode.WallControlMode=0;
 8015d96:	2300      	movs	r3, #0
 8015d98:	753b      	strb	r3, [r7, #20]
	mode.WallControlStatus=0;
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	757b      	strb	r3, [r7, #21]
	mode.WallCutMode=0;
 8015d9e:	2300      	movs	r3, #0
 8015da0:	75fb      	strb	r3, [r7, #23]
	mode.calMazeMode=0;
 8015da2:	2300      	movs	r3, #0
 8015da4:	75bb      	strb	r3, [r7, #22]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015da6:	2003      	movs	r0, #3
 8015da8:	f7f1 fd9c 	bl	80078e4 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015dac:	2003      	movs	r0, #3
 8015dae:	f7f1 fdc1 	bl	8007934 <pl_R_DriveMotor_mode>
	reset_gyro();
 8015db2:	f7eb fcd9 	bl	8001768 <reset_gyro>
	reset_speed();
 8015db6:	f7eb f92f 	bl	8001018 <reset_speed>
	reset_distance();
 8015dba:	f7eb f8ef 	bl	8000f9c <reset_distance>
	clear_Ierror();
 8015dbe:	f7ee fbf7 	bl	80045b0 <clear_Ierror>

	switch (main_modeR) {
 8015dc2:	79fb      	ldrb	r3, [r7, #7]
 8015dc4:	2b0f      	cmp	r3, #15
 8015dc6:	f200 82c9 	bhi.w	801635c <mode_Tuning0+0x5d8>
 8015dca:	a201      	add	r2, pc, #4	; (adr r2, 8015dd0 <mode_Tuning0+0x4c>)
 8015dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015dd0:	08015e11 	.word	0x08015e11
 8015dd4:	08015e9b 	.word	0x08015e9b
 8015dd8:	08015ec1 	.word	0x08015ec1
 8015ddc:	08015ee7 	.word	0x08015ee7
 8015de0:	08015f17 	.word	0x08015f17
 8015de4:	08015f47 	.word	0x08015f47
 8015de8:	08015f6d 	.word	0x08015f6d
 8015dec:	08015f93 	.word	0x08015f93
 8015df0:	08015fb9 	.word	0x08015fb9
 8015df4:	08015fdd 	.word	0x08015fdd
 8015df8:	0801605f 	.word	0x0801605f
 8015dfc:	080160e5 	.word	0x080160e5
 8015e00:	0801610b 	.word	0x0801610b
 8015e04:	080161a5 	.word	0x080161a5
 8015e08:	080162bd 	.word	0x080162bd
 8015e0c:	0801630d 	.word	0x0801630d
		case 0://タイヤ径　エンコーダ+PID
			record_mode=3;
 8015e10:	4bca      	ldr	r3, [pc, #808]	; (801613c <mode_Tuning0+0x3b8>)
 8015e12:	2203      	movs	r2, #3
 8015e14:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015e16:	2300      	movs	r3, #0
 8015e18:	753b      	strb	r3, [r7, #20]
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			straight_table2(540, 0, 0, 1600, 13000,mode);
 8015e1a:	6978      	ldr	r0, [r7, #20]
 8015e1c:	ed9f 2ac8 	vldr	s4, [pc, #800]	; 8016140 <mode_Tuning0+0x3bc>
 8015e20:	eddf 1ac8 	vldr	s3, [pc, #800]	; 8016144 <mode_Tuning0+0x3c0>
 8015e24:	ed9f 1ac8 	vldr	s2, [pc, #800]	; 8016148 <mode_Tuning0+0x3c4>
 8015e28:	eddf 0ac7 	vldr	s1, [pc, #796]	; 8016148 <mode_Tuning0+0x3c4>
 8015e2c:	ed9f 0ac7 	vldr	s0, [pc, #796]	; 801614c <mode_Tuning0+0x3c8>
 8015e30:	f7ed f8d4 	bl	8002fdc <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 8015e34:	ed9f 2ac6 	vldr	s4, [pc, #792]	; 8016150 <mode_Tuning0+0x3cc>
 8015e38:	eddf 1ac6 	vldr	s3, [pc, #792]	; 8016154 <mode_Tuning0+0x3d0>
 8015e3c:	ed9f 1ac2 	vldr	s2, [pc, #776]	; 8016148 <mode_Tuning0+0x3c4>
 8015e40:	eddf 0ac1 	vldr	s1, [pc, #772]	; 8016148 <mode_Tuning0+0x3c4>
 8015e44:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 8016158 <mode_Tuning0+0x3d4>
 8015e48:	f7ed fdd6 	bl	80039f8 <turning_table2>
			straight_table2(540, 0, 0, 2000, 15000,mode);
 8015e4c:	6978      	ldr	r0, [r7, #20]
 8015e4e:	ed9f 2ac3 	vldr	s4, [pc, #780]	; 801615c <mode_Tuning0+0x3d8>
 8015e52:	eddf 1ac3 	vldr	s3, [pc, #780]	; 8016160 <mode_Tuning0+0x3dc>
 8015e56:	ed9f 1abc 	vldr	s2, [pc, #752]	; 8016148 <mode_Tuning0+0x3c4>
 8015e5a:	eddf 0abb 	vldr	s1, [pc, #748]	; 8016148 <mode_Tuning0+0x3c4>
 8015e5e:	ed9f 0abb 	vldr	s0, [pc, #748]	; 801614c <mode_Tuning0+0x3c8>
 8015e62:	f7ed f8bb 	bl	8002fdc <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 8015e66:	ed9f 2aba 	vldr	s4, [pc, #744]	; 8016150 <mode_Tuning0+0x3cc>
 8015e6a:	eddf 1aba 	vldr	s3, [pc, #744]	; 8016154 <mode_Tuning0+0x3d0>
 8015e6e:	ed9f 1ab6 	vldr	s2, [pc, #728]	; 8016148 <mode_Tuning0+0x3c4>
 8015e72:	eddf 0ab5 	vldr	s1, [pc, #724]	; 8016148 <mode_Tuning0+0x3c4>
 8015e76:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 8016158 <mode_Tuning0+0x3d4>
 8015e7a:	f7ed fdbd 	bl	80039f8 <turning_table2>
			straight_table2(540, 0, 0, 2400, 20000,mode);
 8015e7e:	6978      	ldr	r0, [r7, #20]
 8015e80:	ed9f 2ab8 	vldr	s4, [pc, #736]	; 8016164 <mode_Tuning0+0x3e0>
 8015e84:	eddf 1ab8 	vldr	s3, [pc, #736]	; 8016168 <mode_Tuning0+0x3e4>
 8015e88:	ed9f 1aaf 	vldr	s2, [pc, #700]	; 8016148 <mode_Tuning0+0x3c4>
 8015e8c:	eddf 0aae 	vldr	s1, [pc, #696]	; 8016148 <mode_Tuning0+0x3c4>
 8015e90:	ed9f 0aae 	vldr	s0, [pc, #696]	; 801614c <mode_Tuning0+0x3c8>
 8015e94:	f7ed f8a2 	bl	8002fdc <straight_table2>
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			//straight_table2(450, 0, 0, 1000, 13000,mode);
			//control_test_motor2(0,0,10);
		break;
 8015e98:	e260      	b.n	801635c <mode_Tuning0+0x5d8>
		case 1://トレッド幅??ジャイロ
			record_mode = 5;
 8015e9a:	4ba8      	ldr	r3, [pc, #672]	; (801613c <mode_Tuning0+0x3b8>)
 8015e9c:	2205      	movs	r2, #5
 8015e9e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015ea0:	2300      	movs	r3, #0
 8015ea2:	753b      	strb	r3, [r7, #20]
//			straight_table2(400, 0, 0, 400, 3000,mode);
			straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 8015ea4:	6978      	ldr	r0, [r7, #20]
 8015ea6:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 801616c <mode_Tuning0+0x3e8>
 8015eaa:	eddf 1ab1 	vldr	s3, [pc, #708]	; 8016170 <mode_Tuning0+0x3ec>
 8015eae:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 8016148 <mode_Tuning0+0x3c4>
 8015eb2:	eddf 0aa5 	vldr	s1, [pc, #660]	; 8016148 <mode_Tuning0+0x3c4>
 8015eb6:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 8016174 <mode_Tuning0+0x3f0>
 8015eba:	f7ed f88f 	bl	8002fdc <straight_table2>
			//turning_table2(360*10, 0, 0, 800, 8000);
			//control_test_motor2(1,0,5);
		break;
 8015ebe:	e24d      	b.n	801635c <mode_Tuning0+0x5d8>
		case 2://壁制御
			record_mode=6;
 8015ec0:	4b9e      	ldr	r3, [pc, #632]	; (801613c <mode_Tuning0+0x3b8>)
 8015ec2:	2206      	movs	r2, #6
 8015ec4:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8015ec6:	2301      	movs	r3, #1
 8015ec8:	753b      	strb	r3, [r7, #20]
			straight_table2(90*8, 0, 0, 300, 6000,mode);
 8015eca:	6978      	ldr	r0, [r7, #20]
 8015ecc:	ed9f 2aaa 	vldr	s4, [pc, #680]	; 8016178 <mode_Tuning0+0x3f4>
 8015ed0:	eddf 1aaa 	vldr	s3, [pc, #680]	; 801617c <mode_Tuning0+0x3f8>
 8015ed4:	ed9f 1a9c 	vldr	s2, [pc, #624]	; 8016148 <mode_Tuning0+0x3c4>
 8015ed8:	eddf 0a9b 	vldr	s1, [pc, #620]	; 8016148 <mode_Tuning0+0x3c4>
 8015edc:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 8016180 <mode_Tuning0+0x3fc>
 8015ee0:	f7ed f87c 	bl	8002fdc <straight_table2>
			//control_test_motor2(0,1,6);
		break;
 8015ee4:	e23a      	b.n	801635c <mode_Tuning0+0x5d8>
		case 3://右スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,-90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);

			testturning(speed300_exploration,0,0,0,0,0);
 8015ee6:	4ca7      	ldr	r4, [pc, #668]	; (8016184 <mode_Tuning0+0x400>)
 8015ee8:	2300      	movs	r3, #0
 8015eea:	9351      	str	r3, [sp, #324]	; 0x144
 8015eec:	2300      	movs	r3, #0
 8015eee:	9350      	str	r3, [sp, #320]	; 0x140
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	934f      	str	r3, [sp, #316]	; 0x13c
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	934e      	str	r3, [sp, #312]	; 0x138
 8015ef8:	4668      	mov	r0, sp
 8015efa:	f104 0310 	add.w	r3, r4, #16
 8015efe:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015f02:	4619      	mov	r1, r3
 8015f04:	f00a f9fa 	bl	80202fc <memcpy>
 8015f08:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015f0c:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8016148 <mode_Tuning0+0x3c4>
 8015f10:	f7f7 fe76 	bl	800dc00 <testturning>
		break;
 8015f14:	e222      	b.n	801635c <mode_Tuning0+0x5d8>
		case 4://左スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);
			testturning(speed300_exploration,1,0,0,0,0);
 8015f16:	4c9b      	ldr	r4, [pc, #620]	; (8016184 <mode_Tuning0+0x400>)
 8015f18:	2300      	movs	r3, #0
 8015f1a:	9351      	str	r3, [sp, #324]	; 0x144
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	9350      	str	r3, [sp, #320]	; 0x140
 8015f20:	2300      	movs	r3, #0
 8015f22:	934f      	str	r3, [sp, #316]	; 0x13c
 8015f24:	2301      	movs	r3, #1
 8015f26:	934e      	str	r3, [sp, #312]	; 0x138
 8015f28:	4668      	mov	r0, sp
 8015f2a:	f104 0310 	add.w	r3, r4, #16
 8015f2e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015f32:	4619      	mov	r1, r3
 8015f34:	f00a f9e2 	bl	80202fc <memcpy>
 8015f38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015f3c:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8016148 <mode_Tuning0+0x3c4>
 8015f40:	f7f7 fe5e 	bl	800dc00 <testturning>
		break;
 8015f44:	e20a      	b.n	801635c <mode_Tuning0+0x5d8>
		case 5://直進(制御なし)
			record_mode=7;
 8015f46:	4b7d      	ldr	r3, [pc, #500]	; (801613c <mode_Tuning0+0x3b8>)
 8015f48:	2207      	movs	r2, #7
 8015f4a:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	753b      	strb	r3, [r7, #20]
			straight_table2(180, 0, 0, 300, 6000,mode);
 8015f50:	6978      	ldr	r0, [r7, #20]
 8015f52:	ed9f 2a89 	vldr	s4, [pc, #548]	; 8016178 <mode_Tuning0+0x3f4>
 8015f56:	eddf 1a89 	vldr	s3, [pc, #548]	; 801617c <mode_Tuning0+0x3f8>
 8015f5a:	ed9f 1a7b 	vldr	s2, [pc, #492]	; 8016148 <mode_Tuning0+0x3c4>
 8015f5e:	eddf 0a7a 	vldr	s1, [pc, #488]	; 8016148 <mode_Tuning0+0x3c4>
 8015f62:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8016158 <mode_Tuning0+0x3d4>
 8015f66:	f7ed f839 	bl	8002fdc <straight_table2>
		break;
 8015f6a:	e1f7      	b.n	801635c <mode_Tuning0+0x5d8>
		case 6://斜め直進(制御あり)
			record_mode=7;//or3
 8015f6c:	4b73      	ldr	r3, [pc, #460]	; (801613c <mode_Tuning0+0x3b8>)
 8015f6e:	2207      	movs	r2, #7
 8015f70:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015f72:	2300      	movs	r3, #0
 8015f74:	753b      	strb	r3, [r7, #20]
			straight_table2(180*3*sqrt(2), 0, 0, 500, 6000,mode);
 8015f76:	6978      	ldr	r0, [r7, #20]
 8015f78:	ed9f 2a7f 	vldr	s4, [pc, #508]	; 8016178 <mode_Tuning0+0x3f4>
 8015f7c:	eddf 1a82 	vldr	s3, [pc, #520]	; 8016188 <mode_Tuning0+0x404>
 8015f80:	ed9f 1a71 	vldr	s2, [pc, #452]	; 8016148 <mode_Tuning0+0x3c4>
 8015f84:	eddf 0a70 	vldr	s1, [pc, #448]	; 8016148 <mode_Tuning0+0x3c4>
 8015f88:	ed9f 0a80 	vldr	s0, [pc, #512]	; 801618c <mode_Tuning0+0x408>
 8015f8c:	f7ed f826 	bl	8002fdc <straight_table2>
		break;
 8015f90:	e1e4      	b.n	801635c <mode_Tuning0+0x5d8>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=7;
 8015f92:	4b6a      	ldr	r3, [pc, #424]	; (801613c <mode_Tuning0+0x3b8>)
 8015f94:	2207      	movs	r2, #7
 8015f96:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8015f98:	2303      	movs	r3, #3
 8015f9a:	753b      	strb	r3, [r7, #20]
			straight_table2(180*3*sqrt(2), 0, 0, 2000, 6000,mode);
 8015f9c:	6978      	ldr	r0, [r7, #20]
 8015f9e:	ed9f 2a76 	vldr	s4, [pc, #472]	; 8016178 <mode_Tuning0+0x3f4>
 8015fa2:	eddf 1a6f 	vldr	s3, [pc, #444]	; 8016160 <mode_Tuning0+0x3dc>
 8015fa6:	ed9f 1a68 	vldr	s2, [pc, #416]	; 8016148 <mode_Tuning0+0x3c4>
 8015faa:	eddf 0a67 	vldr	s1, [pc, #412]	; 8016148 <mode_Tuning0+0x3c4>
 8015fae:	ed9f 0a77 	vldr	s0, [pc, #476]	; 801618c <mode_Tuning0+0x408>
 8015fb2:	f7ed f813 	bl	8002fdc <straight_table2>
		break;
 8015fb6:	e1d1      	b.n	801635c <mode_Tuning0+0x5d8>
		case 8://宴会芸
			record_mode=2;
 8015fb8:	4b60      	ldr	r3, [pc, #384]	; (801613c <mode_Tuning0+0x3b8>)
 8015fba:	2202      	movs	r2, #2
 8015fbc:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8015fbe:	2001      	movs	r0, #1
 8015fc0:	f7f0 ffe2 	bl	8006f88 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015fc4:	2001      	movs	r0, #1
 8015fc6:	f7f0 fff1 	bl	8006fac <pl_l_blue_LED>
			no_angle();
 8015fca:	f7ed ff29 	bl	8003e20 <no_angle>
			pl_r_blue_LED(OFF);
 8015fce:	2000      	movs	r0, #0
 8015fd0:	f7f0 ffda 	bl	8006f88 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015fd4:	2000      	movs	r0, #0
 8015fd6:	f7f0 ffe9 	bl	8006fac <pl_l_blue_LED>
		break;
 8015fda:	e1bf      	b.n	801635c <mode_Tuning0+0x5d8>
		case 9://システム同定enc
			record_mode=6;
 8015fdc:	4b57      	ldr	r3, [pc, #348]	; (801613c <mode_Tuning0+0x3b8>)
 8015fde:	2206      	movs	r2, #6
 8015fe0:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8015fe2:	2001      	movs	r0, #1
 8015fe4:	f7f0 ffd0 	bl	8006f88 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015fe8:	2001      	movs	r0, #1
 8015fea:	f7f0 ffdf 	bl	8006fac <pl_l_blue_LED>
//			straight_table_ff(90, 0, 300, 300, 500);
//			straight_table_ff(90, 300, 600, 600, 1500);
//			straight_table_ff(90, 600, 300, 600, 1500);
//			straight_table_ff(90, 300, 0, 300, 500);

			get_duty(1, 1,&duty_L,&duty_R);
 8015fee:	f107 020c 	add.w	r2, r7, #12
 8015ff2:	f107 0310 	add.w	r3, r7, #16
 8015ff6:	4611      	mov	r1, r2
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8015ffe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016002:	f7eb ff17 	bl	8001e34 <get_duty>
			pl_DriveMotor_duty(duty_L,duty_R);
 8016006:	693b      	ldr	r3, [r7, #16]
 8016008:	68fa      	ldr	r2, [r7, #12]
 801600a:	4611      	mov	r1, r2
 801600c:	4618      	mov	r0, r3
 801600e:	f7f1 fcd3 	bl	80079b8 <pl_DriveMotor_duty>
			pl_DriveMotor_start();
 8016012:	f7f1 fcb5 	bl	8007980 <pl_DriveMotor_start>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016016:	e006      	b.n	8016026 <mode_Tuning0+0x2a2>
				wait_ms(1);
 8016018:	2001      	movs	r0, #1
 801601a:	f7f1 ff45 	bl	8007ea8 <wait_ms>
				if(record_rupe_flag==1){
 801601e:	4b5c      	ldr	r3, [pc, #368]	; (8016190 <mode_Tuning0+0x40c>)
 8016020:	781b      	ldrb	r3, [r3, #0]
 8016022:	2b01      	cmp	r3, #1
 8016024:	d011      	beq.n	801604a <mode_Tuning0+0x2c6>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016026:	4b5b      	ldr	r3, [pc, #364]	; (8016194 <mode_Tuning0+0x410>)
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801602e:	ddf3      	ble.n	8016018 <mode_Tuning0+0x294>
 8016030:	4b58      	ldr	r3, [pc, #352]	; (8016194 <mode_Tuning0+0x410>)
 8016032:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016036:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801603a:	dded      	ble.n	8016018 <mode_Tuning0+0x294>
 801603c:	4b55      	ldr	r3, [pc, #340]	; (8016194 <mode_Tuning0+0x410>)
 801603e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016042:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016046:	dde7      	ble.n	8016018 <mode_Tuning0+0x294>
 8016048:	e000      	b.n	801604c <mode_Tuning0+0x2c8>
					break;
 801604a:	bf00      	nop
				}
			}
			pl_DriveMotor_stop();
 801604c:	f7f1 fca6 	bl	800799c <pl_DriveMotor_stop>
			pl_r_blue_LED(OFF);
 8016050:	2000      	movs	r0, #0
 8016052:	f7f0 ff99 	bl	8006f88 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8016056:	2000      	movs	r0, #0
 8016058:	f7f0 ffa8 	bl	8006fac <pl_l_blue_LED>
		break;
 801605c:	e17e      	b.n	801635c <mode_Tuning0+0x5d8>
		case 10://システム同定gyro
			record_mode=6;
 801605e:	4b37      	ldr	r3, [pc, #220]	; (801613c <mode_Tuning0+0x3b8>)
 8016060:	2206      	movs	r2, #6
 8016062:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8016064:	2001      	movs	r0, #1
 8016066:	f7f0 ff8f 	bl	8006f88 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 801606a:	2001      	movs	r0, #1
 801606c:	f7f0 ff9e 	bl	8006fac <pl_l_blue_LED>
//			turning_table_ff(90, 0, 300, 300, 500);
//			turning_table_ff(90, 300, 600, 600, 1500);
//			turning_table_ff(90, 600, 300, 600, 1500);
//			turning_table_ff(90, 300, 0, 300, 500);
			get_duty(-1.0, 1.0,&duty_L,&duty_R);
 8016070:	f107 020c 	add.w	r2, r7, #12
 8016074:	f107 0310 	add.w	r3, r7, #16
 8016078:	4611      	mov	r1, r2
 801607a:	4618      	mov	r0, r3
 801607c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8016080:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8016084:	f7eb fed6 	bl	8001e34 <get_duty>
			pl_DriveMotor_duty(duty_L,duty_R);
 8016088:	693b      	ldr	r3, [r7, #16]
 801608a:	68fa      	ldr	r2, [r7, #12]
 801608c:	4611      	mov	r1, r2
 801608e:	4618      	mov	r0, r3
 8016090:	f7f1 fc92 	bl	80079b8 <pl_DriveMotor_duty>
			pl_DriveMotor_start();
 8016094:	f7f1 fc74 	bl	8007980 <pl_DriveMotor_start>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016098:	e00a      	b.n	80160b0 <mode_Tuning0+0x32c>
				wait_ms(1);
 801609a:	2001      	movs	r0, #1
 801609c:	f7f1 ff04 	bl	8007ea8 <wait_ms>
				if(record_rupe_flag==1){
 80160a0:	4b3b      	ldr	r3, [pc, #236]	; (8016190 <mode_Tuning0+0x40c>)
 80160a2:	781b      	ldrb	r3, [r3, #0]
 80160a4:	2b01      	cmp	r3, #1
 80160a6:	d103      	bne.n	80160b0 <mode_Tuning0+0x32c>
					record_mode=0;
 80160a8:	4b24      	ldr	r3, [pc, #144]	; (801613c <mode_Tuning0+0x3b8>)
 80160aa:	2200      	movs	r2, #0
 80160ac:	701a      	strb	r2, [r3, #0]
					break;
 80160ae:	e010      	b.n	80160d2 <mode_Tuning0+0x34e>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80160b0:	4b38      	ldr	r3, [pc, #224]	; (8016194 <mode_Tuning0+0x410>)
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80160b8:	ddef      	ble.n	801609a <mode_Tuning0+0x316>
 80160ba:	4b36      	ldr	r3, [pc, #216]	; (8016194 <mode_Tuning0+0x410>)
 80160bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80160c0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80160c4:	dde9      	ble.n	801609a <mode_Tuning0+0x316>
 80160c6:	4b33      	ldr	r3, [pc, #204]	; (8016194 <mode_Tuning0+0x410>)
 80160c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80160cc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80160d0:	dde3      	ble.n	801609a <mode_Tuning0+0x316>
				}
			}
			pl_DriveMotor_stop();
 80160d2:	f7f1 fc63 	bl	800799c <pl_DriveMotor_stop>
			pl_r_blue_LED(OFF);
 80160d6:	2000      	movs	r0, #0
 80160d8:	f7f0 ff56 	bl	8006f88 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80160dc:	2000      	movs	r0, #0
 80160de:	f7f0 ff65 	bl	8006fac <pl_l_blue_LED>
		break;
 80160e2:	e13b      	b.n	801635c <mode_Tuning0+0x5d8>
		case 11:
		record_mode=1;
 80160e4:	4b15      	ldr	r3, [pc, #84]	; (801613c <mode_Tuning0+0x3b8>)
 80160e6:	2201      	movs	r2, #1
 80160e8:	701a      	strb	r2, [r3, #0]
		mode.WallControlMode=0;
 80160ea:	2300      	movs	r3, #0
 80160ec:	753b      	strb	r3, [r7, #20]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT, 0, 0, 300, 6000,mode);
 80160ee:	6978      	ldr	r0, [r7, #20]
 80160f0:	ed9f 2a21 	vldr	s4, [pc, #132]	; 8016178 <mode_Tuning0+0x3f4>
 80160f4:	eddf 1a21 	vldr	s3, [pc, #132]	; 801617c <mode_Tuning0+0x3f8>
 80160f8:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8016148 <mode_Tuning0+0x3c4>
 80160fc:	eddf 0a12 	vldr	s1, [pc, #72]	; 8016148 <mode_Tuning0+0x3c4>
 8016100:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8016198 <mode_Tuning0+0x414>
 8016104:	f7ec ff6a 	bl	8002fdc <straight_table2>
		break;
 8016108:	e128      	b.n	801635c <mode_Tuning0+0x5d8>
		case 12:
		record_mode=2;
 801610a:	4b0c      	ldr	r3, [pc, #48]	; (801613c <mode_Tuning0+0x3b8>)
 801610c:	2202      	movs	r2, #2
 801610e:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<40;i++){
 8016110:	2300      	movs	r3, #0
 8016112:	61fb      	str	r3, [r7, #28]
 8016114:	e00e      	b.n	8016134 <mode_Tuning0+0x3b0>
		turning_table2(90, 0, 0, 400, 3000);
 8016116:	ed9f 2a21 	vldr	s4, [pc, #132]	; 801619c <mode_Tuning0+0x418>
 801611a:	eddf 1a0e 	vldr	s3, [pc, #56]	; 8016154 <mode_Tuning0+0x3d0>
 801611e:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8016148 <mode_Tuning0+0x3c4>
 8016122:	eddf 0a09 	vldr	s1, [pc, #36]	; 8016148 <mode_Tuning0+0x3c4>
 8016126:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80161a0 <mode_Tuning0+0x41c>
 801612a:	f7ed fc65 	bl	80039f8 <turning_table2>
		for(int i=0;i<40;i++){
 801612e:	69fb      	ldr	r3, [r7, #28]
 8016130:	3301      	adds	r3, #1
 8016132:	61fb      	str	r3, [r7, #28]
 8016134:	69fb      	ldr	r3, [r7, #28]
 8016136:	2b27      	cmp	r3, #39	; 0x27
 8016138:	dded      	ble.n	8016116 <mode_Tuning0+0x392>
		}
		break;
 801613a:	e10f      	b.n	801635c <mode_Tuning0+0x5d8>
 801613c:	2000edc0 	.word	0x2000edc0
 8016140:	464b2000 	.word	0x464b2000
 8016144:	44c80000 	.word	0x44c80000
 8016148:	00000000 	.word	0x00000000
 801614c:	44070000 	.word	0x44070000
 8016150:	457a0000 	.word	0x457a0000
 8016154:	43c80000 	.word	0x43c80000
 8016158:	43340000 	.word	0x43340000
 801615c:	466a6000 	.word	0x466a6000
 8016160:	44fa0000 	.word	0x44fa0000
 8016164:	469c4000 	.word	0x469c4000
 8016168:	45160000 	.word	0x45160000
 801616c:	447a0000 	.word	0x447a0000
 8016170:	c3160000 	.word	0xc3160000
 8016174:	c1a40000 	.word	0xc1a40000
 8016178:	45bb8000 	.word	0x45bb8000
 801617c:	43960000 	.word	0x43960000
 8016180:	44340000 	.word	0x44340000
 8016184:	2000ef80 	.word	0x2000ef80
 8016188:	43fa0000 	.word	0x43fa0000
 801618c:	443eeb39 	.word	0x443eeb39
 8016190:	2000edcc 	.word	0x2000edcc
 8016194:	200002b8 	.word	0x200002b8
 8016198:	420a0000 	.word	0x420a0000
 801619c:	453b8000 	.word	0x453b8000
 80161a0:	42b40000 	.word	0x42b40000
		case 13:
			record_mode=2;
 80161a4:	4b8a      	ldr	r3, [pc, #552]	; (80163d0 <mode_Tuning0+0x64c>)
 80161a6:	2202      	movs	r2, #2
 80161a8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80161aa:	2301      	movs	r3, #1
 80161ac:	753b      	strb	r3, [r7, #20]
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 80161ae:	4b89      	ldr	r3, [pc, #548]	; (80163d4 <mode_Tuning0+0x650>)
 80161b0:	edd3 6a02 	vldr	s13, [r3, #8]
 80161b4:	4b87      	ldr	r3, [pc, #540]	; (80163d4 <mode_Tuning0+0x650>)
 80161b6:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 80161ba:	4b86      	ldr	r3, [pc, #536]	; (80163d4 <mode_Tuning0+0x650>)
 80161bc:	ed93 7a02 	vldr	s14, [r3, #8]
 80161c0:	4b84      	ldr	r3, [pc, #528]	; (80163d4 <mode_Tuning0+0x650>)
 80161c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80161c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80161ca:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80161ce:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 80161d2:	eddf 5a81 	vldr	s11, [pc, #516]	; 80163d8 <mode_Tuning0+0x654>
 80161d6:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 80161da:	6978      	ldr	r0, [r7, #20]
 80161dc:	eeb0 2a47 	vmov.f32	s4, s14
 80161e0:	eef0 1a46 	vmov.f32	s3, s12
 80161e4:	eeb0 1a66 	vmov.f32	s2, s13
 80161e8:	eddf 0a7c 	vldr	s1, [pc, #496]	; 80163dc <mode_Tuning0+0x658>
 80161ec:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 80163e0 <mode_Tuning0+0x65c>
 80161f0:	f7ec fef4 	bl	8002fdc <straight_table2>
			for(int i=0;i<40;i++){
 80161f4:	2300      	movs	r3, #0
 80161f6:	61bb      	str	r3, [r7, #24]
 80161f8:	e037      	b.n	801626a <mode_Tuning0+0x4e6>
			straight_table2(MAZE_OFFSET, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 80161fa:	4b76      	ldr	r3, [pc, #472]	; (80163d4 <mode_Tuning0+0x650>)
 80161fc:	edd3 6a02 	vldr	s13, [r3, #8]
 8016200:	4b74      	ldr	r3, [pc, #464]	; (80163d4 <mode_Tuning0+0x650>)
 8016202:	ed93 6a02 	vldr	s12, [r3, #8]
 8016206:	4b73      	ldr	r3, [pc, #460]	; (80163d4 <mode_Tuning0+0x650>)
 8016208:	edd3 5a02 	vldr	s11, [r3, #8]
									speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 801620c:	4b71      	ldr	r3, [pc, #452]	; (80163d4 <mode_Tuning0+0x650>)
 801620e:	ed93 7a02 	vldr	s14, [r3, #8]
 8016212:	4b70      	ldr	r3, [pc, #448]	; (80163d4 <mode_Tuning0+0x650>)
 8016214:	edd3 7a02 	vldr	s15, [r3, #8]
 8016218:	ee27 7a27 	vmul.f32	s14, s14, s15
 801621c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8016220:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(MAZE_OFFSET, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8016224:	ed9f 5a6c 	vldr	s10, [pc, #432]	; 80163d8 <mode_Tuning0+0x654>
 8016228:	ee87 7a85 	vdiv.f32	s14, s15, s10
 801622c:	6978      	ldr	r0, [r7, #20]
 801622e:	eeb0 2a47 	vmov.f32	s4, s14
 8016232:	eef0 1a65 	vmov.f32	s3, s11
 8016236:	eeb0 1a46 	vmov.f32	s2, s12
 801623a:	eef0 0a66 	vmov.f32	s1, s13
 801623e:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8016242:	f7ec fecb 	bl	8002fdc <straight_table2>
			slalomR(speed300_exploration.slalom_R, OFF,EXPLORATION,0,300);
 8016246:	4b63      	ldr	r3, [pc, #396]	; (80163d4 <mode_Tuning0+0x650>)
 8016248:	2200      	movs	r2, #0
 801624a:	9203      	str	r2, [sp, #12]
 801624c:	2200      	movs	r2, #0
 801624e:	9202      	str	r2, [sp, #8]
 8016250:	2200      	movs	r2, #0
 8016252:	9201      	str	r2, [sp, #4]
 8016254:	699a      	ldr	r2, [r3, #24]
 8016256:	9200      	str	r2, [sp, #0]
 8016258:	3308      	adds	r3, #8
 801625a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801625c:	ed9f 0a61 	vldr	s0, [pc, #388]	; 80163e4 <mode_Tuning0+0x660>
 8016260:	f7f3 fe8a 	bl	8009f78 <slalomR>
			for(int i=0;i<40;i++){
 8016264:	69bb      	ldr	r3, [r7, #24]
 8016266:	3301      	adds	r3, #1
 8016268:	61bb      	str	r3, [r7, #24]
 801626a:	69bb      	ldr	r3, [r7, #24]
 801626c:	2b27      	cmp	r3, #39	; 0x27
 801626e:	ddc4      	ble.n	80161fa <mode_Tuning0+0x476>
			}
			mode.WallControlMode=0;
 8016270:	2300      	movs	r3, #0
 8016272:	753b      	strb	r3, [r7, #20]
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 8016274:	4b57      	ldr	r3, [pc, #348]	; (80163d4 <mode_Tuning0+0x650>)
 8016276:	edd3 6a02 	vldr	s13, [r3, #8]
 801627a:	4b56      	ldr	r3, [pc, #344]	; (80163d4 <mode_Tuning0+0x650>)
 801627c:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 8016280:	4b54      	ldr	r3, [pc, #336]	; (80163d4 <mode_Tuning0+0x650>)
 8016282:	ed93 7a02 	vldr	s14, [r3, #8]
 8016286:	4b53      	ldr	r3, [pc, #332]	; (80163d4 <mode_Tuning0+0x650>)
 8016288:	edd3 7a02 	vldr	s15, [r3, #8]
 801628c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016290:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8016294:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 8016298:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80163d8 <mode_Tuning0+0x654>
 801629c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 80162a0:	6978      	ldr	r0, [r7, #20]
 80162a2:	eeb0 2a47 	vmov.f32	s4, s14
 80162a6:	eef0 1a46 	vmov.f32	s3, s12
 80162aa:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 80163dc <mode_Tuning0+0x658>
 80162ae:	eef0 0a66 	vmov.f32	s1, s13
 80162b2:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80163d8 <mode_Tuning0+0x654>
 80162b6:	f7ec fe91 	bl	8002fdc <straight_table2>
			//pl_r_blue_LED(ON);
			//pl_l_blue_LED(ON);
			//no_frontwall_straight();
			//pl_r_blue_LED(OFF);
			//pl_l_blue_LED(OFF);
		break;
 80162ba:	e04f      	b.n	801635c <mode_Tuning0+0x5d8>
		case 14://宴会芸＋吸引
//			record_mode=2;
//			for(int i=0;i<40;i++){
//			turning_table2(90, 0, 0, 930, 11000);
//			}
			highspeed_mode = 1;
 80162bc:	4b4a      	ldr	r3, [pc, #296]	; (80163e8 <mode_Tuning0+0x664>)
 80162be:	2201      	movs	r2, #1
 80162c0:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 80162c2:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 80163ec <mode_Tuning0+0x668>
 80162c6:	f7f1 fba1 	bl	8007a0c <pl_FunMotor_duty>
			pl_FunMotor_start();
 80162ca:	f7f1 fb8b 	bl	80079e4 <pl_FunMotor_start>
			HAL_Delay(600);
 80162ce:	f44f 7016 	mov.w	r0, #600	; 0x258
 80162d2:	f002 fd41 	bl	8018d58 <HAL_Delay>
			reset_gyro();
 80162d6:	f7eb fa47 	bl	8001768 <reset_gyro>
			reset_speed();
 80162da:	f7ea fe9d 	bl	8001018 <reset_speed>
			reset_distance();
 80162de:	f7ea fe5d 	bl	8000f9c <reset_distance>
			clear_Ierror();
 80162e2:	f7ee f965 	bl	80045b0 <clear_Ierror>
			record_mode=3;
 80162e6:	4b3a      	ldr	r3, [pc, #232]	; (80163d0 <mode_Tuning0+0x64c>)
 80162e8:	2203      	movs	r2, #3
 80162ea:	701a      	strb	r2, [r3, #0]
//			mode.WallControlMode=0;
//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
			mode.WallControlMode=1;
 80162ec:	2301      	movs	r3, #1
 80162ee:	753b      	strb	r3, [r7, #20]
			straight_table2(90*8, 0, 0, 4000, 17000,mode);
 80162f0:	6978      	ldr	r0, [r7, #20]
 80162f2:	ed9f 2a3f 	vldr	s4, [pc, #252]	; 80163f0 <mode_Tuning0+0x66c>
 80162f6:	eddf 1a3f 	vldr	s3, [pc, #252]	; 80163f4 <mode_Tuning0+0x670>
 80162fa:	ed9f 1a38 	vldr	s2, [pc, #224]	; 80163dc <mode_Tuning0+0x658>
 80162fe:	eddf 0a37 	vldr	s1, [pc, #220]	; 80163dc <mode_Tuning0+0x658>
 8016302:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 80163f8 <mode_Tuning0+0x674>
 8016306:	f7ec fe69 	bl	8002fdc <straight_table2>
		break;
 801630a:	e027      	b.n	801635c <mode_Tuning0+0x5d8>
		case 15:
			highspeed_mode = 1;
 801630c:	4b36      	ldr	r3, [pc, #216]	; (80163e8 <mode_Tuning0+0x664>)
 801630e:	2201      	movs	r2, #1
 8016310:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 8016312:	ed9f 0a36 	vldr	s0, [pc, #216]	; 80163ec <mode_Tuning0+0x668>
 8016316:	f7f1 fb79 	bl	8007a0c <pl_FunMotor_duty>
			pl_FunMotor_start();
 801631a:	f7f1 fb63 	bl	80079e4 <pl_FunMotor_start>
			HAL_Delay(600);
 801631e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8016322:	f002 fd19 	bl	8018d58 <HAL_Delay>
			reset_gyro();
 8016326:	f7eb fa1f 	bl	8001768 <reset_gyro>
			reset_speed();
 801632a:	f7ea fe75 	bl	8001018 <reset_speed>
			reset_distance();
 801632e:	f7ea fe35 	bl	8000f9c <reset_distance>
			clear_Ierror();
 8016332:	f7ee f93d 	bl	80045b0 <clear_Ierror>
			record_mode=3;
 8016336:	4b26      	ldr	r3, [pc, #152]	; (80163d0 <mode_Tuning0+0x64c>)
 8016338:	2203      	movs	r2, #3
 801633a:	701a      	strb	r2, [r3, #0]
//			mode.WallControlMode=0;
//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
			mode.WallControlMode=3;
 801633c:	2303      	movs	r3, #3
 801633e:	753b      	strb	r3, [r7, #20]
			straight_table2(90*7.5*sqrt(2), 0, 0, 4000, 20000,mode);
 8016340:	6978      	ldr	r0, [r7, #20]
 8016342:	ed9f 2a2e 	vldr	s4, [pc, #184]	; 80163fc <mode_Tuning0+0x678>
 8016346:	eddf 1a2b 	vldr	s3, [pc, #172]	; 80163f4 <mode_Tuning0+0x670>
 801634a:	ed9f 1a24 	vldr	s2, [pc, #144]	; 80163dc <mode_Tuning0+0x658>
 801634e:	eddf 0a23 	vldr	s1, [pc, #140]	; 80163dc <mode_Tuning0+0x658>
 8016352:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8016400 <mode_Tuning0+0x67c>
 8016356:	f7ec fe41 	bl	8002fdc <straight_table2>
//			record_mode=1;
//			mode.WallControlMode=0;
//			straight_table2(BACK_TO_CENTER_SLANT, 0, 0, 300, 6000,mode);
		break;
 801635a:	bf00      	nop
	}
	record_mode=0;
 801635c:	4b1c      	ldr	r3, [pc, #112]	; (80163d0 <mode_Tuning0+0x64c>)
 801635e:	2200      	movs	r2, #0
 8016360:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8016362:	2003      	movs	r0, #3
 8016364:	f7f1 fae6 	bl	8007934 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8016368:	2003      	movs	r0, #3
 801636a:	f7f1 fabb 	bl	80078e4 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 801636e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016372:	f7f1 fddd 	bl	8007f30 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8016376:	f7f1 fb3f 	bl	80079f8 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 801637a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801637e:	f7f1 fdd7 	bl	8007f30 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8016382:	2000      	movs	r0, #0
 8016384:	f7f1 faa4 	bl	80078d0 <pl_DriveMotor_standby>
	record_mode=0;
 8016388:	4b11      	ldr	r3, [pc, #68]	; (80163d0 <mode_Tuning0+0x64c>)
 801638a:	2200      	movs	r2, #0
 801638c:	701a      	strb	r2, [r3, #0]
	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801638e:	e002      	b.n	8016396 <mode_Tuning0+0x612>
		HAL_Delay(1);
 8016390:	2001      	movs	r0, #1
 8016392:	f002 fce1 	bl	8018d58 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016396:	4b1b      	ldr	r3, [pc, #108]	; (8016404 <mode_Tuning0+0x680>)
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801639e:	ddf7      	ble.n	8016390 <mode_Tuning0+0x60c>
 80163a0:	4b18      	ldr	r3, [pc, #96]	; (8016404 <mode_Tuning0+0x680>)
 80163a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80163a6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80163aa:	ddf1      	ble.n	8016390 <mode_Tuning0+0x60c>
 80163ac:	4b15      	ldr	r3, [pc, #84]	; (8016404 <mode_Tuning0+0x680>)
 80163ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80163b2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80163b6:	ddeb      	ble.n	8016390 <mode_Tuning0+0x60c>
	}
	pl_r_blue_LED(ON);
 80163b8:	2001      	movs	r0, #1
 80163ba:	f7f0 fde5 	bl	8006f88 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 80163be:	2001      	movs	r0, #1
 80163c0:	f7f0 fdf4 	bl	8006fac <pl_l_blue_LED>
	record_print();
 80163c4:	f000 fd48 	bl	8016e58 <record_print>



}
 80163c8:	bf00      	nop
 80163ca:	3724      	adds	r7, #36	; 0x24
 80163cc:	46bd      	mov	sp, r7
 80163ce:	bd90      	pop	{r4, r7, pc}
 80163d0:	2000edc0 	.word	0x2000edc0
 80163d4:	2000ef80 	.word	0x2000ef80
 80163d8:	42340000 	.word	0x42340000
 80163dc:	00000000 	.word	0x00000000
 80163e0:	431b8000 	.word	0x431b8000
 80163e4:	43960000 	.word	0x43960000
 80163e8:	20000808 	.word	0x20000808
 80163ec:	3f7d70a4 	.word	0x3f7d70a4
 80163f0:	4684d000 	.word	0x4684d000
 80163f4:	457a0000 	.word	0x457a0000
 80163f8:	44340000 	.word	0x44340000
 80163fc:	469c4000 	.word	0x469c4000
 8016400:	446ea607 	.word	0x446ea607
 8016404:	200002b8 	.word	0x200002b8

08016408 <mode_WallSensorTuning>:


void mode_WallSensorTuning(unsigned char main_modeR){
 8016408:	b580      	push	{r7, lr}
 801640a:	b084      	sub	sp, #16
 801640c:	af00      	add	r7, sp, #0
 801640e:	4603      	mov	r3, r0
 8016410:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 8016412:	2300      	movs	r3, #0
 8016414:	723b      	strb	r3, [r7, #8]
	mode.WallControlStatus=0;
 8016416:	2300      	movs	r3, #0
 8016418:	727b      	strb	r3, [r7, #9]
	mode.WallCutMode=0;
 801641a:	2300      	movs	r3, #0
 801641c:	72fb      	strb	r3, [r7, #11]
	mode.calMazeMode=0;
 801641e:	2300      	movs	r3, #0
 8016420:	72bb      	strb	r3, [r7, #10]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 8016422:	2001      	movs	r0, #1
 8016424:	f7f1 fa54 	bl	80078d0 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8016428:	2003      	movs	r0, #3
 801642a:	f7f1 fa5b 	bl	80078e4 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 801642e:	2003      	movs	r0, #3
 8016430:	f7f1 fa80 	bl	8007934 <pl_R_DriveMotor_mode>
	reset_gyro();
 8016434:	f7eb f998 	bl	8001768 <reset_gyro>
	reset_speed();
 8016438:	f7ea fdee 	bl	8001018 <reset_speed>
	clear_Ierror();
 801643c:	f7ee f8b8 	bl	80045b0 <clear_Ierror>

	switch (main_modeR) {
 8016440:	79fb      	ldrb	r3, [r7, #7]
 8016442:	2b0f      	cmp	r3, #15
 8016444:	f200 81b0 	bhi.w	80167a8 <mode_WallSensorTuning+0x3a0>
 8016448:	a201      	add	r2, pc, #4	; (adr r2, 8016450 <mode_WallSensorTuning+0x48>)
 801644a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801644e:	bf00      	nop
 8016450:	08016491 	.word	0x08016491
 8016454:	080164b7 	.word	0x080164b7
 8016458:	080164cf 	.word	0x080164cf
 801645c:	08016545 	.word	0x08016545
 8016460:	080165bb 	.word	0x080165bb
 8016464:	08016631 	.word	0x08016631
 8016468:	080166a1 	.word	0x080166a1
 801646c:	080166c7 	.word	0x080166c7
 8016470:	080166ed 	.word	0x080166ed
 8016474:	08016713 	.word	0x08016713
 8016478:	080167a9 	.word	0x080167a9
 801647c:	080167a9 	.word	0x080167a9
 8016480:	080167a9 	.word	0x080167a9
 8016484:	080167a9 	.word	0x080167a9
 8016488:	080167a9 	.word	0x080167a9
 801648c:	08016739 	.word	0x08016739
		case 0://横壁追従制御
			record_mode=16;
 8016490:	4bd2      	ldr	r3, [pc, #840]	; (80167dc <mode_WallSensorTuning+0x3d4>)
 8016492:	2210      	movs	r2, #16
 8016494:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8016496:	2301      	movs	r3, #1
 8016498:	723b      	strb	r3, [r7, #8]
			straight_table2(180*8, 0, 0, 500, 5000,mode);
 801649a:	68b8      	ldr	r0, [r7, #8]
 801649c:	ed9f 2ad0 	vldr	s4, [pc, #832]	; 80167e0 <mode_WallSensorTuning+0x3d8>
 80164a0:	eddf 1ad0 	vldr	s3, [pc, #832]	; 80167e4 <mode_WallSensorTuning+0x3dc>
 80164a4:	ed9f 1ad0 	vldr	s2, [pc, #832]	; 80167e8 <mode_WallSensorTuning+0x3e0>
 80164a8:	eddf 0acf 	vldr	s1, [pc, #828]	; 80167e8 <mode_WallSensorTuning+0x3e0>
 80164ac:	ed9f 0acf 	vldr	s0, [pc, #828]	; 80167ec <mode_WallSensorTuning+0x3e4>
 80164b0:	f7ec fd94 	bl	8002fdc <straight_table2>
		break;
 80164b4:	e178      	b.n	80167a8 <mode_WallSensorTuning+0x3a0>
		case 1://前壁制御
			for(int ii=0;ii<=20;ii++){
 80164b6:	2300      	movs	r3, #0
 80164b8:	60fb      	str	r3, [r7, #12]
 80164ba:	e004      	b.n	80164c6 <mode_WallSensorTuning+0xbe>
			no_frontwall_straight();
 80164bc:	f7ed fd98 	bl	8003ff0 <no_frontwall_straight>
			for(int ii=0;ii<=20;ii++){
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	3301      	adds	r3, #1
 80164c4:	60fb      	str	r3, [r7, #12]
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	2b14      	cmp	r3, #20
 80164ca:	ddf7      	ble.n	80164bc <mode_WallSensorTuning+0xb4>
			}
		break;
 80164cc:	e16c      	b.n	80167a8 <mode_WallSensorTuning+0x3a0>
		case 2://壁切れ90度
			record_mode = 7;
 80164ce:	4bc3      	ldr	r3, [pc, #780]	; (80167dc <mode_WallSensorTuning+0x3d4>)
 80164d0:	2207      	movs	r2, #7
 80164d2:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80164d4:	2300      	movs	r3, #0
 80164d6:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 80164d8:	2300      	movs	r3, #0
 80164da:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 80164dc:	2300      	movs	r3, #0
 80164de:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 80164e0:	2300      	movs	r3, #0
 80164e2:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 135, 0, 300, 300,3000,mode);
 80164e4:	68b8      	ldr	r0, [r7, #8]
 80164e6:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 80167f0 <mode_WallSensorTuning+0x3e8>
 80164ea:	eddf 1ac2 	vldr	s3, [pc, #776]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 80164ee:	ed9f 1ac1 	vldr	s2, [pc, #772]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 80164f2:	eddf 0abd 	vldr	s1, [pc, #756]	; 80167e8 <mode_WallSensorTuning+0x3e0>
 80164f6:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 80167f8 <mode_WallSensorTuning+0x3f0>
 80164fa:	f7ec fd6f 	bl	8002fdc <straight_table2>
			mode.WallCutMode=1;
 80164fe:	2301      	movs	r3, #1
 8016500:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8016502:	2300      	movs	r3, #0
 8016504:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 8016506:	68b8      	ldr	r0, [r7, #8]
 8016508:	ed9f 2ab9 	vldr	s4, [pc, #740]	; 80167f0 <mode_WallSensorTuning+0x3e8>
 801650c:	eddf 1ab9 	vldr	s3, [pc, #740]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 8016510:	ed9f 1ab8 	vldr	s2, [pc, #736]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 8016514:	eddf 0ab7 	vldr	s1, [pc, #732]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 8016518:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 80167fc <mode_WallSensorTuning+0x3f4>
 801651c:	f7ec fd5e 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 8016520:	2300      	movs	r3, #0
 8016522:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8016524:	2300      	movs	r3, #0
 8016526:	72fb      	strb	r3, [r7, #11]
			straight_table2(45 + 22.5, 300, 0, 300,3000,mode);
 8016528:	68b8      	ldr	r0, [r7, #8]
 801652a:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 80167f0 <mode_WallSensorTuning+0x3e8>
 801652e:	eddf 1ab1 	vldr	s3, [pc, #708]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 8016532:	ed9f 1aad 	vldr	s2, [pc, #692]	; 80167e8 <mode_WallSensorTuning+0x3e0>
 8016536:	eddf 0aaf 	vldr	s1, [pc, #700]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 801653a:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8016800 <mode_WallSensorTuning+0x3f8>
 801653e:	f7ec fd4d 	bl	8002fdc <straight_table2>
		break;
 8016542:	e131      	b.n	80167a8 <mode_WallSensorTuning+0x3a0>
		case 3://壁切れ45度//90°大回り
			record_mode = 8;
 8016544:	4ba5      	ldr	r3, [pc, #660]	; (80167dc <mode_WallSensorTuning+0x3d4>)
 8016546:	2208      	movs	r2, #8
 8016548:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 801654a:	2300      	movs	r3, #0
 801654c:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 801654e:	2300      	movs	r3, #0
 8016550:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016552:	2300      	movs	r3, #0
 8016554:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016556:	2300      	movs	r3, #0
 8016558:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 300, 300,3000,mode);
 801655a:	68b8      	ldr	r0, [r7, #8]
 801655c:	ed9f 2aa4 	vldr	s4, [pc, #656]	; 80167f0 <mode_WallSensorTuning+0x3e8>
 8016560:	eddf 1aa4 	vldr	s3, [pc, #656]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 8016564:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 8016568:	eddf 0a9f 	vldr	s1, [pc, #636]	; 80167e8 <mode_WallSensorTuning+0x3e0>
 801656c:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 8016804 <mode_WallSensorTuning+0x3fc>
 8016570:	f7ec fd34 	bl	8002fdc <straight_table2>
			mode.WallCutMode=2;
 8016574:	2302      	movs	r3, #2
 8016576:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8016578:	2300      	movs	r3, #0
 801657a:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 801657c:	68b8      	ldr	r0, [r7, #8]
 801657e:	ed9f 2a9c 	vldr	s4, [pc, #624]	; 80167f0 <mode_WallSensorTuning+0x3e8>
 8016582:	eddf 1a9c 	vldr	s3, [pc, #624]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 8016586:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 801658a:	eddf 0a9a 	vldr	s1, [pc, #616]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 801658e:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 80167fc <mode_WallSensorTuning+0x3f4>
 8016592:	f7ec fd23 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 8016596:	2300      	movs	r3, #0
 8016598:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 801659a:	2300      	movs	r3, #0
 801659c:	72fb      	strb	r3, [r7, #11]
			straight_table2(45+22.5, 300, 0, 300,3000,mode);
 801659e:	68b8      	ldr	r0, [r7, #8]
 80165a0:	ed9f 2a93 	vldr	s4, [pc, #588]	; 80167f0 <mode_WallSensorTuning+0x3e8>
 80165a4:	eddf 1a93 	vldr	s3, [pc, #588]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 80165a8:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 80167e8 <mode_WallSensorTuning+0x3e0>
 80165ac:	eddf 0a91 	vldr	s1, [pc, #580]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 80165b0:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8016800 <mode_WallSensorTuning+0x3f8>
 80165b4:	f7ec fd12 	bl	8002fdc <straight_table2>
		break;
 80165b8:	e0f6      	b.n	80167a8 <mode_WallSensorTuning+0x3a0>
		case 4://壁切れ45度斜め(考え中)
			record_mode = 8;
 80165ba:	4b88      	ldr	r3, [pc, #544]	; (80167dc <mode_WallSensorTuning+0x3d4>)
 80165bc:	2208      	movs	r2, #8
 80165be:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 80165c0:	2300      	movs	r3, #0
 80165c2:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 80165c4:	2300      	movs	r3, #0
 80165c6:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 80165c8:	2300      	movs	r3, #0
 80165ca:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 80165cc:	2300      	movs	r3, #0
 80165ce:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT + 90*sqrt(2), 0, 300, 300,3000,mode);
 80165d0:	68b8      	ldr	r0, [r7, #8]
 80165d2:	ed9f 2a87 	vldr	s4, [pc, #540]	; 80167f0 <mode_WallSensorTuning+0x3e8>
 80165d6:	eddf 1a87 	vldr	s3, [pc, #540]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 80165da:	ed9f 1a86 	vldr	s2, [pc, #536]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 80165de:	eddf 0a82 	vldr	s1, [pc, #520]	; 80167e8 <mode_WallSensorTuning+0x3e0>
 80165e2:	ed9f 0a89 	vldr	s0, [pc, #548]	; 8016808 <mode_WallSensorTuning+0x400>
 80165e6:	f7ec fcf9 	bl	8002fdc <straight_table2>
			mode.WallCutMode=3;
 80165ea:	2303      	movs	r3, #3
 80165ec:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 80165ee:	2300      	movs	r3, #0
 80165f0:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 80165f2:	68b8      	ldr	r0, [r7, #8]
 80165f4:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 80167f0 <mode_WallSensorTuning+0x3e8>
 80165f8:	eddf 1a7e 	vldr	s3, [pc, #504]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 80165fc:	ed9f 1a7d 	vldr	s2, [pc, #500]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 8016600:	eddf 0a7c 	vldr	s1, [pc, #496]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 8016604:	ed9f 0a81 	vldr	s0, [pc, #516]	; 801680c <mode_WallSensorTuning+0x404>
 8016608:	f7ec fce8 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 801660c:	2300      	movs	r3, #0
 801660e:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8016610:	2300      	movs	r3, #0
 8016612:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 8016614:	68b8      	ldr	r0, [r7, #8]
 8016616:	ed9f 2a76 	vldr	s4, [pc, #472]	; 80167f0 <mode_WallSensorTuning+0x3e8>
 801661a:	eddf 1a76 	vldr	s3, [pc, #472]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 801661e:	ed9f 1a72 	vldr	s2, [pc, #456]	; 80167e8 <mode_WallSensorTuning+0x3e0>
 8016622:	eddf 0a74 	vldr	s1, [pc, #464]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 8016626:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8016810 <mode_WallSensorTuning+0x408>
 801662a:	f7ec fcd7 	bl	8002fdc <straight_table2>
		break;
 801662e:	e0bb      	b.n	80167a8 <mode_WallSensorTuning+0x3a0>
		case 5://壁切れ45度斜め(考え中)
			mode.WallControlMode=0;//3でもいいかも
 8016630:	2300      	movs	r3, #0
 8016632:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8016634:	2300      	movs	r3, #0
 8016636:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016638:	2300      	movs	r3, #0
 801663a:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 801663c:	2300      	movs	r3, #0
 801663e:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT+90*sqrt(2), 0, 300, 300,3000,mode);
 8016640:	68b8      	ldr	r0, [r7, #8]
 8016642:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 80167f0 <mode_WallSensorTuning+0x3e8>
 8016646:	eddf 1a6b 	vldr	s3, [pc, #428]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 801664a:	ed9f 1a6a 	vldr	s2, [pc, #424]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 801664e:	eddf 0a66 	vldr	s1, [pc, #408]	; 80167e8 <mode_WallSensorTuning+0x3e0>
 8016652:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8016808 <mode_WallSensorTuning+0x400>
 8016656:	f7ec fcc1 	bl	8002fdc <straight_table2>
			mode.WallCutMode=4;
 801665a:	2304      	movs	r3, #4
 801665c:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 801665e:	2300      	movs	r3, #0
 8016660:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 8016662:	68b8      	ldr	r0, [r7, #8]
 8016664:	ed9f 2a62 	vldr	s4, [pc, #392]	; 80167f0 <mode_WallSensorTuning+0x3e8>
 8016668:	eddf 1a62 	vldr	s3, [pc, #392]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 801666c:	ed9f 1a61 	vldr	s2, [pc, #388]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 8016670:	eddf 0a60 	vldr	s1, [pc, #384]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 8016674:	ed9f 0a65 	vldr	s0, [pc, #404]	; 801680c <mode_WallSensorTuning+0x404>
 8016678:	f7ec fcb0 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 801667c:	2300      	movs	r3, #0
 801667e:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8016680:	2300      	movs	r3, #0
 8016682:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 8016684:	68b8      	ldr	r0, [r7, #8]
 8016686:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 80167f0 <mode_WallSensorTuning+0x3e8>
 801668a:	eddf 1a5a 	vldr	s3, [pc, #360]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 801668e:	ed9f 1a56 	vldr	s2, [pc, #344]	; 80167e8 <mode_WallSensorTuning+0x3e0>
 8016692:	eddf 0a58 	vldr	s1, [pc, #352]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 8016696:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8016810 <mode_WallSensorTuning+0x408>
 801669a:	f7ec fc9f 	bl	8002fdc <straight_table2>
		break;
 801669e:	e083      	b.n	80167a8 <mode_WallSensorTuning+0x3a0>
		case 6://斜め直進(90)
			record_mode=9;
 80166a0:	4b4e      	ldr	r3, [pc, #312]	; (80167dc <mode_WallSensorTuning+0x3d4>)
 80166a2:	2209      	movs	r2, #9
 80166a4:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80166a6:	2300      	movs	r3, #0
 80166a8:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 80166aa:	68b8      	ldr	r0, [r7, #8]
 80166ac:	ed9f 2a50 	vldr	s4, [pc, #320]	; 80167f0 <mode_WallSensorTuning+0x3e8>
 80166b0:	eddf 1a50 	vldr	s3, [pc, #320]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 80166b4:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 80167e8 <mode_WallSensorTuning+0x3e0>
 80166b8:	eddf 0a4b 	vldr	s1, [pc, #300]	; 80167e8 <mode_WallSensorTuning+0x3e0>
 80166bc:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8016814 <mode_WallSensorTuning+0x40c>
 80166c0:	f7ec fc8c 	bl	8002fdc <straight_table2>
		break;
 80166c4:	e070      	b.n	80167a8 <mode_WallSensorTuning+0x3a0>
		case 7://斜め直進(45)
			record_mode=10;
 80166c6:	4b45      	ldr	r3, [pc, #276]	; (80167dc <mode_WallSensorTuning+0x3d4>)
 80166c8:	220a      	movs	r2, #10
 80166ca:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80166cc:	2300      	movs	r3, #0
 80166ce:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 80166d0:	68b8      	ldr	r0, [r7, #8]
 80166d2:	ed9f 2a47 	vldr	s4, [pc, #284]	; 80167f0 <mode_WallSensorTuning+0x3e8>
 80166d6:	eddf 1a47 	vldr	s3, [pc, #284]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 80166da:	ed9f 1a43 	vldr	s2, [pc, #268]	; 80167e8 <mode_WallSensorTuning+0x3e0>
 80166de:	eddf 0a42 	vldr	s1, [pc, #264]	; 80167e8 <mode_WallSensorTuning+0x3e0>
 80166e2:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8016814 <mode_WallSensorTuning+0x40c>
 80166e6:	f7ec fc79 	bl	8002fdc <straight_table2>

		break;
 80166ea:	e05d      	b.n	80167a8 <mode_WallSensorTuning+0x3a0>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 80166ec:	4b3b      	ldr	r3, [pc, #236]	; (80167dc <mode_WallSensorTuning+0x3d4>)
 80166ee:	2207      	movs	r2, #7
 80166f0:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 80166f2:	2303      	movs	r3, #3
 80166f4:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 80166f6:	68b8      	ldr	r0, [r7, #8]
 80166f8:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 80167f0 <mode_WallSensorTuning+0x3e8>
 80166fc:	eddf 1a3d 	vldr	s3, [pc, #244]	; 80167f4 <mode_WallSensorTuning+0x3ec>
 8016700:	ed9f 1a39 	vldr	s2, [pc, #228]	; 80167e8 <mode_WallSensorTuning+0x3e0>
 8016704:	eddf 0a38 	vldr	s1, [pc, #224]	; 80167e8 <mode_WallSensorTuning+0x3e0>
 8016708:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8016814 <mode_WallSensorTuning+0x40c>
 801670c:	f7ec fc66 	bl	8002fdc <straight_table2>
		break;
 8016710:	e04a      	b.n	80167a8 <mode_WallSensorTuning+0x3a0>
		case 9:
			record_mode=8;
 8016712:	4b32      	ldr	r3, [pc, #200]	; (80167dc <mode_WallSensorTuning+0x3d4>)
 8016714:	2208      	movs	r2, #8
 8016716:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016718:	2303      	movs	r3, #3
 801671a:	723b      	strb	r3, [r7, #8]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 700, 10000,mode);
 801671c:	68b8      	ldr	r0, [r7, #8]
 801671e:	ed9f 2a3e 	vldr	s4, [pc, #248]	; 8016818 <mode_WallSensorTuning+0x410>
 8016722:	eddf 1a3e 	vldr	s3, [pc, #248]	; 801681c <mode_WallSensorTuning+0x414>
 8016726:	ed9f 1a30 	vldr	s2, [pc, #192]	; 80167e8 <mode_WallSensorTuning+0x3e0>
 801672a:	eddf 0a2f 	vldr	s1, [pc, #188]	; 80167e8 <mode_WallSensorTuning+0x3e0>
 801672e:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8016820 <mode_WallSensorTuning+0x418>
 8016732:	f7ec fc53 	bl	8002fdc <straight_table2>
		break;
 8016736:	e037      	b.n	80167a8 <mode_WallSensorTuning+0x3a0>
		case 10:
		break;
		case 11:
		break;
		case 15:
			mode.WallControlMode=5;
 8016738:	2305      	movs	r3, #5
 801673a:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 801673c:	2300      	movs	r3, #0
 801673e:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016740:	2300      	movs	r3, #0
 8016742:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016744:	2300      	movs	r3, #0
 8016746:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 180, 0, 500, 500,1500,mode);
 8016748:	68b8      	ldr	r0, [r7, #8]
 801674a:	ed9f 2a36 	vldr	s4, [pc, #216]	; 8016824 <mode_WallSensorTuning+0x41c>
 801674e:	eddf 1a25 	vldr	s3, [pc, #148]	; 80167e4 <mode_WallSensorTuning+0x3dc>
 8016752:	ed9f 1a24 	vldr	s2, [pc, #144]	; 80167e4 <mode_WallSensorTuning+0x3dc>
 8016756:	eddf 0a24 	vldr	s1, [pc, #144]	; 80167e8 <mode_WallSensorTuning+0x3e0>
 801675a:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8016828 <mode_WallSensorTuning+0x420>
 801675e:	f7ec fc3d 	bl	8002fdc <straight_table2>
			mode.WallCutMode=2;
 8016762:	2302      	movs	r3, #2
 8016764:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8016766:	2300      	movs	r3, #0
 8016768:	723b      	strb	r3, [r7, #8]
			straight_table2(45, 500, 500, 500,1500,mode);
 801676a:	68b8      	ldr	r0, [r7, #8]
 801676c:	ed9f 2a2d 	vldr	s4, [pc, #180]	; 8016824 <mode_WallSensorTuning+0x41c>
 8016770:	eddf 1a1c 	vldr	s3, [pc, #112]	; 80167e4 <mode_WallSensorTuning+0x3dc>
 8016774:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 80167e4 <mode_WallSensorTuning+0x3dc>
 8016778:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80167e4 <mode_WallSensorTuning+0x3dc>
 801677c:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 801682c <mode_WallSensorTuning+0x424>
 8016780:	f7ec fc2c 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 8016784:	2300      	movs	r3, #0
 8016786:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8016788:	2300      	movs	r3, #0
 801678a:	72fb      	strb	r3, [r7, #11]
			straight_table2(90+45, 500, 0, 500,1500,mode);
 801678c:	68b8      	ldr	r0, [r7, #8]
 801678e:	ed9f 2a25 	vldr	s4, [pc, #148]	; 8016824 <mode_WallSensorTuning+0x41c>
 8016792:	eddf 1a14 	vldr	s3, [pc, #80]	; 80167e4 <mode_WallSensorTuning+0x3dc>
 8016796:	ed9f 1a14 	vldr	s2, [pc, #80]	; 80167e8 <mode_WallSensorTuning+0x3e0>
 801679a:	eddf 0a12 	vldr	s1, [pc, #72]	; 80167e4 <mode_WallSensorTuning+0x3dc>
 801679e:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8016830 <mode_WallSensorTuning+0x428>
 80167a2:	f7ec fc1b 	bl	8002fdc <straight_table2>
		break;
 80167a6:	bf00      	nop
	}
	record_mode=0;
 80167a8:	4b0c      	ldr	r3, [pc, #48]	; (80167dc <mode_WallSensorTuning+0x3d4>)
 80167aa:	2200      	movs	r2, #0
 80167ac:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80167ae:	2003      	movs	r0, #3
 80167b0:	f7f1 f8c0 	bl	8007934 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80167b4:	2003      	movs	r0, #3
 80167b6:	f7f1 f895 	bl	80078e4 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 80167ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80167be:	f7f1 fbb7 	bl	8007f30 <wait_ms_NoReset>
	pl_FunMotor_stop();
 80167c2:	f7f1 f919 	bl	80079f8 <pl_FunMotor_stop>
	record_mode=0;
 80167c6:	4b05      	ldr	r3, [pc, #20]	; (80167dc <mode_WallSensorTuning+0x3d4>)
 80167c8:	2200      	movs	r2, #0
 80167ca:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 80167cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80167d0:	f7f1 fbae 	bl	8007f30 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 80167d4:	2000      	movs	r0, #0
 80167d6:	f7f1 f87b 	bl	80078d0 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80167da:	e02e      	b.n	801683a <mode_WallSensorTuning+0x432>
 80167dc:	2000edc0 	.word	0x2000edc0
 80167e0:	459c4000 	.word	0x459c4000
 80167e4:	43fa0000 	.word	0x43fa0000
 80167e8:	00000000 	.word	0x00000000
 80167ec:	44b40000 	.word	0x44b40000
 80167f0:	453b8000 	.word	0x453b8000
 80167f4:	43960000 	.word	0x43960000
 80167f8:	431b8000 	.word	0x431b8000
 80167fc:	41b40000 	.word	0x41b40000
 8016800:	42870000 	.word	0x42870000
 8016804:	42cd0000 	.word	0x42cd0000
 8016808:	4329c77b 	.word	0x4329c77b
 801680c:	41fe8ef6 	.word	0x41fe8ef6
 8016810:	42beeb39 	.word	0x42beeb39
 8016814:	43beeb39 	.word	0x43beeb39
 8016818:	461c4000 	.word	0x461c4000
 801681c:	442f0000 	.word	0x442f0000
 8016820:	4484977b 	.word	0x4484977b
 8016824:	44bb8000 	.word	0x44bb8000
 8016828:	43488000 	.word	0x43488000
 801682c:	42340000 	.word	0x42340000
 8016830:	43070000 	.word	0x43070000
		HAL_Delay(1);
 8016834:	2001      	movs	r0, #1
 8016836:	f002 fa8f 	bl	8018d58 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801683a:	4b0e      	ldr	r3, [pc, #56]	; (8016874 <mode_WallSensorTuning+0x46c>)
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016842:	ddf7      	ble.n	8016834 <mode_WallSensorTuning+0x42c>
 8016844:	4b0b      	ldr	r3, [pc, #44]	; (8016874 <mode_WallSensorTuning+0x46c>)
 8016846:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801684a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801684e:	ddf1      	ble.n	8016834 <mode_WallSensorTuning+0x42c>
 8016850:	4b08      	ldr	r3, [pc, #32]	; (8016874 <mode_WallSensorTuning+0x46c>)
 8016852:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016856:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801685a:	ddeb      	ble.n	8016834 <mode_WallSensorTuning+0x42c>
	}
	pl_r_blue_LED(ON);
 801685c:	2001      	movs	r0, #1
 801685e:	f7f0 fb93 	bl	8006f88 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8016862:	2001      	movs	r0, #1
 8016864:	f7f0 fba2 	bl	8006fac <pl_l_blue_LED>
	record_print();
 8016868:	f000 faf6 	bl	8016e58 <record_print>



}
 801686c:	bf00      	nop
 801686e:	3710      	adds	r7, #16
 8016870:	46bd      	mov	sp, r7
 8016872:	bd80      	pop	{r7, pc}
 8016874:	200002b8 	.word	0x200002b8

08016878 <mode_WallSensorTuning_fast>:





void mode_WallSensorTuning_fast(unsigned char main_modeR){
 8016878:	b580      	push	{r7, lr}
 801687a:	b084      	sub	sp, #16
 801687c:	af00      	add	r7, sp, #0
 801687e:	4603      	mov	r3, r0
 8016880:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 8016882:	2300      	movs	r3, #0
 8016884:	733b      	strb	r3, [r7, #12]
	mode.WallControlStatus=0;
 8016886:	2300      	movs	r3, #0
 8016888:	737b      	strb	r3, [r7, #13]
	mode.WallCutMode=0;
 801688a:	2300      	movs	r3, #0
 801688c:	73fb      	strb	r3, [r7, #15]
	mode.calMazeMode=0;
 801688e:	2300      	movs	r3, #0
 8016890:	73bb      	strb	r3, [r7, #14]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 8016892:	2001      	movs	r0, #1
 8016894:	f7f1 f81c 	bl	80078d0 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8016898:	2003      	movs	r0, #3
 801689a:	f7f1 f823 	bl	80078e4 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 801689e:	2003      	movs	r0, #3
 80168a0:	f7f1 f848 	bl	8007934 <pl_R_DriveMotor_mode>
	pl_FunMotor_duty(0.99);
 80168a4:	ed9f 0ae3 	vldr	s0, [pc, #908]	; 8016c34 <mode_WallSensorTuning_fast+0x3bc>
 80168a8:	f7f1 f8b0 	bl	8007a0c <pl_FunMotor_duty>
	pl_FunMotor_start();
 80168ac:	f7f1 f89a 	bl	80079e4 <pl_FunMotor_start>
	HAL_Delay(600);
 80168b0:	f44f 7016 	mov.w	r0, #600	; 0x258
 80168b4:	f002 fa50 	bl	8018d58 <HAL_Delay>
	reset_gyro();
 80168b8:	f7ea ff56 	bl	8001768 <reset_gyro>
	reset_speed();
 80168bc:	f7ea fbac 	bl	8001018 <reset_speed>
	clear_Ierror();
 80168c0:	f7ed fe76 	bl	80045b0 <clear_Ierror>
	angle=0;
 80168c4:	4bdc      	ldr	r3, [pc, #880]	; (8016c38 <mode_WallSensorTuning_fast+0x3c0>)
 80168c6:	f04f 0200 	mov.w	r2, #0
 80168ca:	601a      	str	r2, [r3, #0]

	switch (main_modeR) {
 80168cc:	79fb      	ldrb	r3, [r7, #7]
 80168ce:	2b0f      	cmp	r3, #15
 80168d0:	f200 821b 	bhi.w	8016d0a <mode_WallSensorTuning_fast+0x492>
 80168d4:	a201      	add	r2, pc, #4	; (adr r2, 80168dc <mode_WallSensorTuning_fast+0x64>)
 80168d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80168da:	bf00      	nop
 80168dc:	0801691d 	.word	0x0801691d
 80168e0:	0801694f 	.word	0x0801694f
 80168e4:	080169c5 	.word	0x080169c5
 80168e8:	08016a3b 	.word	0x08016a3b
 80168ec:	08016ab1 	.word	0x08016ab1
 80168f0:	08016b27 	.word	0x08016b27
 80168f4:	08016b9d 	.word	0x08016b9d
 80168f8:	08016bc3 	.word	0x08016bc3
 80168fc:	08016be9 	.word	0x08016be9
 8016900:	08016c0f 	.word	0x08016c0f
 8016904:	08016c99 	.word	0x08016c99
 8016908:	08016cbf 	.word	0x08016cbf
 801690c:	08016ce5 	.word	0x08016ce5
 8016910:	08016d0b 	.word	0x08016d0b
 8016914:	08016d0b 	.word	0x08016d0b
 8016918:	08016d0b 	.word	0x08016d0b
		case 0://横壁追従制御
			record_mode=15;
 801691c:	4bc7      	ldr	r3, [pc, #796]	; (8016c3c <mode_WallSensorTuning_fast+0x3c4>)
 801691e:	220f      	movs	r2, #15
 8016920:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8016922:	2301      	movs	r3, #1
 8016924:	733b      	strb	r3, [r7, #12]
			highspeed_mode=1;
 8016926:	4bc6      	ldr	r3, [pc, #792]	; (8016c40 <mode_WallSensorTuning_fast+0x3c8>)
 8016928:	2201      	movs	r2, #1
 801692a:	701a      	strb	r2, [r3, #0]
			straight_table2(BACK_TO_CENTER+180*10, 0, 0, 5000, 24000,mode);
 801692c:	68f8      	ldr	r0, [r7, #12]
 801692e:	ed9f 2ac5 	vldr	s4, [pc, #788]	; 8016c44 <mode_WallSensorTuning_fast+0x3cc>
 8016932:	eddf 1ac5 	vldr	s3, [pc, #788]	; 8016c48 <mode_WallSensorTuning_fast+0x3d0>
 8016936:	ed9f 1ac5 	vldr	s2, [pc, #788]	; 8016c4c <mode_WallSensorTuning_fast+0x3d4>
 801693a:	eddf 0ac4 	vldr	s1, [pc, #784]	; 8016c4c <mode_WallSensorTuning_fast+0x3d4>
 801693e:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 8016c50 <mode_WallSensorTuning_fast+0x3d8>
 8016942:	f7ec fb4b 	bl	8002fdc <straight_table2>
			highspeed_mode=0;
 8016946:	4bbe      	ldr	r3, [pc, #760]	; (8016c40 <mode_WallSensorTuning_fast+0x3c8>)
 8016948:	2200      	movs	r2, #0
 801694a:	701a      	strb	r2, [r3, #0]
		break;
 801694c:	e1dd      	b.n	8016d0a <mode_WallSensorTuning_fast+0x492>
		case 1://なし
			record_mode=8;
 801694e:	4bbb      	ldr	r3, [pc, #748]	; (8016c3c <mode_WallSensorTuning_fast+0x3c4>)
 8016950:	2208      	movs	r2, #8
 8016952:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8016954:	2301      	movs	r3, #1
 8016956:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8016958:	2300      	movs	r3, #0
 801695a:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 801695c:	2300      	movs	r3, #0
 801695e:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8016960:	2300      	movs	r3, #0
 8016962:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1000, 1000,10000,mode);
 8016964:	68f8      	ldr	r0, [r7, #12]
 8016966:	ed9f 2abb 	vldr	s4, [pc, #748]	; 8016c54 <mode_WallSensorTuning_fast+0x3dc>
 801696a:	eddf 1abb 	vldr	s3, [pc, #748]	; 8016c58 <mode_WallSensorTuning_fast+0x3e0>
 801696e:	ed9f 1aba 	vldr	s2, [pc, #744]	; 8016c58 <mode_WallSensorTuning_fast+0x3e0>
 8016972:	eddf 0ab6 	vldr	s1, [pc, #728]	; 8016c4c <mode_WallSensorTuning_fast+0x3d4>
 8016976:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8016c5c <mode_WallSensorTuning_fast+0x3e4>
 801697a:	f7ec fb2f 	bl	8002fdc <straight_table2>
			mode.WallCutMode=2;
 801697e:	2302      	movs	r3, #2
 8016980:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8016982:	2300      	movs	r3, #0
 8016984:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1000, 1000, 1000,10000,mode);
 8016986:	68f8      	ldr	r0, [r7, #12]
 8016988:	ed9f 2ab2 	vldr	s4, [pc, #712]	; 8016c54 <mode_WallSensorTuning_fast+0x3dc>
 801698c:	eddf 1ab2 	vldr	s3, [pc, #712]	; 8016c58 <mode_WallSensorTuning_fast+0x3e0>
 8016990:	ed9f 1ab1 	vldr	s2, [pc, #708]	; 8016c58 <mode_WallSensorTuning_fast+0x3e0>
 8016994:	eddf 0ab0 	vldr	s1, [pc, #704]	; 8016c58 <mode_WallSensorTuning_fast+0x3e0>
 8016998:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8016c60 <mode_WallSensorTuning_fast+0x3e8>
 801699c:	f7ec fb1e 	bl	8002fdc <straight_table2>
			mode.WallControlMode=1;
 80169a0:	2301      	movs	r3, #1
 80169a2:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 80169a4:	2300      	movs	r3, #0
 80169a6:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1000, 0, 1000,10000,mode);
 80169a8:	68f8      	ldr	r0, [r7, #12]
 80169aa:	ed9f 2aaa 	vldr	s4, [pc, #680]	; 8016c54 <mode_WallSensorTuning_fast+0x3dc>
 80169ae:	eddf 1aaa 	vldr	s3, [pc, #680]	; 8016c58 <mode_WallSensorTuning_fast+0x3e0>
 80169b2:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 8016c4c <mode_WallSensorTuning_fast+0x3d4>
 80169b6:	eddf 0aa8 	vldr	s1, [pc, #672]	; 8016c58 <mode_WallSensorTuning_fast+0x3e0>
 80169ba:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 8016c64 <mode_WallSensorTuning_fast+0x3ec>
 80169be:	f7ec fb0d 	bl	8002fdc <straight_table2>
		break;
 80169c2:	e1a2      	b.n	8016d0a <mode_WallSensorTuning_fast+0x492>
		case 2://なし
			record_mode=8;
 80169c4:	4b9d      	ldr	r3, [pc, #628]	; (8016c3c <mode_WallSensorTuning_fast+0x3c4>)
 80169c6:	2208      	movs	r2, #8
 80169c8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80169ca:	2301      	movs	r3, #1
 80169cc:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 80169ce:	2300      	movs	r3, #0
 80169d0:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 80169d2:	2300      	movs	r3, #0
 80169d4:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 80169d6:	2300      	movs	r3, #0
 80169d8:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1200, 1200,10000,mode);
 80169da:	68f8      	ldr	r0, [r7, #12]
 80169dc:	ed9f 2a9d 	vldr	s4, [pc, #628]	; 8016c54 <mode_WallSensorTuning_fast+0x3dc>
 80169e0:	eddf 1aa1 	vldr	s3, [pc, #644]	; 8016c68 <mode_WallSensorTuning_fast+0x3f0>
 80169e4:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 8016c68 <mode_WallSensorTuning_fast+0x3f0>
 80169e8:	eddf 0a98 	vldr	s1, [pc, #608]	; 8016c4c <mode_WallSensorTuning_fast+0x3d4>
 80169ec:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8016c5c <mode_WallSensorTuning_fast+0x3e4>
 80169f0:	f7ec faf4 	bl	8002fdc <straight_table2>
			mode.WallCutMode=2;
 80169f4:	2302      	movs	r3, #2
 80169f6:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 80169f8:	2300      	movs	r3, #0
 80169fa:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1200, 1200, 1200,10000,mode);
 80169fc:	68f8      	ldr	r0, [r7, #12]
 80169fe:	ed9f 2a95 	vldr	s4, [pc, #596]	; 8016c54 <mode_WallSensorTuning_fast+0x3dc>
 8016a02:	eddf 1a99 	vldr	s3, [pc, #612]	; 8016c68 <mode_WallSensorTuning_fast+0x3f0>
 8016a06:	ed9f 1a98 	vldr	s2, [pc, #608]	; 8016c68 <mode_WallSensorTuning_fast+0x3f0>
 8016a0a:	eddf 0a97 	vldr	s1, [pc, #604]	; 8016c68 <mode_WallSensorTuning_fast+0x3f0>
 8016a0e:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8016c60 <mode_WallSensorTuning_fast+0x3e8>
 8016a12:	f7ec fae3 	bl	8002fdc <straight_table2>
			mode.WallControlMode=1;
 8016a16:	2301      	movs	r3, #1
 8016a18:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1200, 0, 1200,10000,mode);
 8016a1e:	68f8      	ldr	r0, [r7, #12]
 8016a20:	ed9f 2a8c 	vldr	s4, [pc, #560]	; 8016c54 <mode_WallSensorTuning_fast+0x3dc>
 8016a24:	eddf 1a90 	vldr	s3, [pc, #576]	; 8016c68 <mode_WallSensorTuning_fast+0x3f0>
 8016a28:	ed9f 1a88 	vldr	s2, [pc, #544]	; 8016c4c <mode_WallSensorTuning_fast+0x3d4>
 8016a2c:	eddf 0a8e 	vldr	s1, [pc, #568]	; 8016c68 <mode_WallSensorTuning_fast+0x3f0>
 8016a30:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 8016c64 <mode_WallSensorTuning_fast+0x3ec>
 8016a34:	f7ec fad2 	bl	8002fdc <straight_table2>
		break;
 8016a38:	e167      	b.n	8016d0a <mode_WallSensorTuning_fast+0x492>
		case 3://壁切れ45度//90°大回り
			record_mode=8;
 8016a3a:	4b80      	ldr	r3, [pc, #512]	; (8016c3c <mode_WallSensorTuning_fast+0x3c4>)
 8016a3c:	2208      	movs	r2, #8
 8016a3e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8016a40:	2301      	movs	r3, #1
 8016a42:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8016a44:	2300      	movs	r3, #0
 8016a46:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8016a48:	2300      	movs	r3, #0
 8016a4a:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1500, 1500,13000,mode);
 8016a50:	68f8      	ldr	r0, [r7, #12]
 8016a52:	ed9f 2a86 	vldr	s4, [pc, #536]	; 8016c6c <mode_WallSensorTuning_fast+0x3f4>
 8016a56:	eddf 1a86 	vldr	s3, [pc, #536]	; 8016c70 <mode_WallSensorTuning_fast+0x3f8>
 8016a5a:	ed9f 1a85 	vldr	s2, [pc, #532]	; 8016c70 <mode_WallSensorTuning_fast+0x3f8>
 8016a5e:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8016c4c <mode_WallSensorTuning_fast+0x3d4>
 8016a62:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8016c5c <mode_WallSensorTuning_fast+0x3e4>
 8016a66:	f7ec fab9 	bl	8002fdc <straight_table2>
			mode.WallCutMode=2;
 8016a6a:	2302      	movs	r3, #2
 8016a6c:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8016a6e:	2300      	movs	r3, #0
 8016a70:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1500, 1500, 1500,13000,mode);
 8016a72:	68f8      	ldr	r0, [r7, #12]
 8016a74:	ed9f 2a7d 	vldr	s4, [pc, #500]	; 8016c6c <mode_WallSensorTuning_fast+0x3f4>
 8016a78:	eddf 1a7d 	vldr	s3, [pc, #500]	; 8016c70 <mode_WallSensorTuning_fast+0x3f8>
 8016a7c:	ed9f 1a7c 	vldr	s2, [pc, #496]	; 8016c70 <mode_WallSensorTuning_fast+0x3f8>
 8016a80:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8016c70 <mode_WallSensorTuning_fast+0x3f8>
 8016a84:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8016c60 <mode_WallSensorTuning_fast+0x3e8>
 8016a88:	f7ec faa8 	bl	8002fdc <straight_table2>
			mode.WallControlMode=1;
 8016a8c:	2301      	movs	r3, #1
 8016a8e:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8016a90:	2300      	movs	r3, #0
 8016a92:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1500, 0, 1500,13000,mode);
 8016a94:	68f8      	ldr	r0, [r7, #12]
 8016a96:	ed9f 2a75 	vldr	s4, [pc, #468]	; 8016c6c <mode_WallSensorTuning_fast+0x3f4>
 8016a9a:	eddf 1a75 	vldr	s3, [pc, #468]	; 8016c70 <mode_WallSensorTuning_fast+0x3f8>
 8016a9e:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 8016c4c <mode_WallSensorTuning_fast+0x3d4>
 8016aa2:	eddf 0a73 	vldr	s1, [pc, #460]	; 8016c70 <mode_WallSensorTuning_fast+0x3f8>
 8016aa6:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8016c64 <mode_WallSensorTuning_fast+0x3ec>
 8016aaa:	f7ec fa97 	bl	8002fdc <straight_table2>
		break;
 8016aae:	e12c      	b.n	8016d0a <mode_WallSensorTuning_fast+0x492>
		case 4://壁切れ45度斜め(考え中)右
			record_mode=8;
 8016ab0:	4b62      	ldr	r3, [pc, #392]	; (8016c3c <mode_WallSensorTuning_fast+0x3c4>)
 8016ab2:	2208      	movs	r2, #8
 8016ab4:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8016ab6:	2300      	movs	r3, #0
 8016ab8:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8016aba:	2300      	movs	r3, #0
 8016abc:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8016abe:	2300      	movs	r3, #0
 8016ac0:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8016ac2:	2300      	movs	r3, #0
 8016ac4:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 90*sqrt(2), 0, 1000, 1000,10000,mode);
 8016ac6:	68f8      	ldr	r0, [r7, #12]
 8016ac8:	ed9f 2a62 	vldr	s4, [pc, #392]	; 8016c54 <mode_WallSensorTuning_fast+0x3dc>
 8016acc:	eddf 1a62 	vldr	s3, [pc, #392]	; 8016c58 <mode_WallSensorTuning_fast+0x3e0>
 8016ad0:	ed9f 1a61 	vldr	s2, [pc, #388]	; 8016c58 <mode_WallSensorTuning_fast+0x3e0>
 8016ad4:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8016c4c <mode_WallSensorTuning_fast+0x3d4>
 8016ad8:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8016c74 <mode_WallSensorTuning_fast+0x3fc>
 8016adc:	f7ec fa7e 	bl	8002fdc <straight_table2>
			mode.WallCutMode=3;
 8016ae0:	2303      	movs	r3, #3
 8016ae2:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8016ae4:	2300      	movs	r3, #0
 8016ae6:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 1000, 1000, 1000,10000,mode);
 8016ae8:	68f8      	ldr	r0, [r7, #12]
 8016aea:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 8016c54 <mode_WallSensorTuning_fast+0x3dc>
 8016aee:	eddf 1a5a 	vldr	s3, [pc, #360]	; 8016c58 <mode_WallSensorTuning_fast+0x3e0>
 8016af2:	ed9f 1a59 	vldr	s2, [pc, #356]	; 8016c58 <mode_WallSensorTuning_fast+0x3e0>
 8016af6:	eddf 0a58 	vldr	s1, [pc, #352]	; 8016c58 <mode_WallSensorTuning_fast+0x3e0>
 8016afa:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8016c78 <mode_WallSensorTuning_fast+0x400>
 8016afe:	f7ec fa6d 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 8016b02:	2300      	movs	r3, #0
 8016b04:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8016b06:	2300      	movs	r3, #0
 8016b08:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 1000, 0, 1000,10000,mode);
 8016b0a:	68f8      	ldr	r0, [r7, #12]
 8016b0c:	ed9f 2a51 	vldr	s4, [pc, #324]	; 8016c54 <mode_WallSensorTuning_fast+0x3dc>
 8016b10:	eddf 1a51 	vldr	s3, [pc, #324]	; 8016c58 <mode_WallSensorTuning_fast+0x3e0>
 8016b14:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 8016c4c <mode_WallSensorTuning_fast+0x3d4>
 8016b18:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8016c58 <mode_WallSensorTuning_fast+0x3e0>
 8016b1c:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8016c7c <mode_WallSensorTuning_fast+0x404>
 8016b20:	f7ec fa5c 	bl	8002fdc <straight_table2>
		break;
 8016b24:	e0f1      	b.n	8016d0a <mode_WallSensorTuning_fast+0x492>
		case 5://壁切れ45度斜め(考え中)左
			record_mode=8;
 8016b26:	4b45      	ldr	r3, [pc, #276]	; (8016c3c <mode_WallSensorTuning_fast+0x3c4>)
 8016b28:	2208      	movs	r2, #8
 8016b2a:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8016b2c:	2300      	movs	r3, #0
 8016b2e:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8016b30:	2300      	movs	r3, #0
 8016b32:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8016b34:	2300      	movs	r3, #0
 8016b36:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8016b38:	2300      	movs	r3, #0
 8016b3a:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT+90*sqrt(2), 0, 1000, 1000,10000,mode);
 8016b3c:	68f8      	ldr	r0, [r7, #12]
 8016b3e:	ed9f 2a45 	vldr	s4, [pc, #276]	; 8016c54 <mode_WallSensorTuning_fast+0x3dc>
 8016b42:	eddf 1a45 	vldr	s3, [pc, #276]	; 8016c58 <mode_WallSensorTuning_fast+0x3e0>
 8016b46:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8016c58 <mode_WallSensorTuning_fast+0x3e0>
 8016b4a:	eddf 0a40 	vldr	s1, [pc, #256]	; 8016c4c <mode_WallSensorTuning_fast+0x3d4>
 8016b4e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8016c74 <mode_WallSensorTuning_fast+0x3fc>
 8016b52:	f7ec fa43 	bl	8002fdc <straight_table2>
			mode.WallCutMode=4;
 8016b56:	2304      	movs	r3, #4
 8016b58:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8016b5a:	2300      	movs	r3, #0
 8016b5c:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 1000, 1000, 1000,10000,mode);
 8016b5e:	68f8      	ldr	r0, [r7, #12]
 8016b60:	ed9f 2a3c 	vldr	s4, [pc, #240]	; 8016c54 <mode_WallSensorTuning_fast+0x3dc>
 8016b64:	eddf 1a3c 	vldr	s3, [pc, #240]	; 8016c58 <mode_WallSensorTuning_fast+0x3e0>
 8016b68:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 8016c58 <mode_WallSensorTuning_fast+0x3e0>
 8016b6c:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8016c58 <mode_WallSensorTuning_fast+0x3e0>
 8016b70:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8016c78 <mode_WallSensorTuning_fast+0x400>
 8016b74:	f7ec fa32 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 8016b78:	2300      	movs	r3, #0
 8016b7a:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8016b7c:	2300      	movs	r3, #0
 8016b7e:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 1000, 0, 1000,10000,mode);
 8016b80:	68f8      	ldr	r0, [r7, #12]
 8016b82:	ed9f 2a34 	vldr	s4, [pc, #208]	; 8016c54 <mode_WallSensorTuning_fast+0x3dc>
 8016b86:	eddf 1a34 	vldr	s3, [pc, #208]	; 8016c58 <mode_WallSensorTuning_fast+0x3e0>
 8016b8a:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8016c4c <mode_WallSensorTuning_fast+0x3d4>
 8016b8e:	eddf 0a32 	vldr	s1, [pc, #200]	; 8016c58 <mode_WallSensorTuning_fast+0x3e0>
 8016b92:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8016c7c <mode_WallSensorTuning_fast+0x404>
 8016b96:	f7ec fa21 	bl	8002fdc <straight_table2>
		break;
 8016b9a:	e0b6      	b.n	8016d0a <mode_WallSensorTuning_fast+0x492>
		case 6://斜め直進(制御なし計測用)
			record_mode=7;
 8016b9c:	4b27      	ldr	r3, [pc, #156]	; (8016c3c <mode_WallSensorTuning_fast+0x3c4>)
 8016b9e:	2207      	movs	r2, #7
 8016ba0:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016ba2:	2300      	movs	r3, #0
 8016ba4:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 8016ba6:	68f8      	ldr	r0, [r7, #12]
 8016ba8:	ed9f 2a35 	vldr	s4, [pc, #212]	; 8016c80 <mode_WallSensorTuning_fast+0x408>
 8016bac:	eddf 1a35 	vldr	s3, [pc, #212]	; 8016c84 <mode_WallSensorTuning_fast+0x40c>
 8016bb0:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8016c4c <mode_WallSensorTuning_fast+0x3d4>
 8016bb4:	eddf 0a25 	vldr	s1, [pc, #148]	; 8016c4c <mode_WallSensorTuning_fast+0x3d4>
 8016bb8:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8016c88 <mode_WallSensorTuning_fast+0x410>
 8016bbc:	f7ec fa0e 	bl	8002fdc <straight_table2>
		break;
 8016bc0:	e0a3      	b.n	8016d0a <mode_WallSensorTuning_fast+0x492>
		case 7://斜め直進(制御なし計測用)
			record_mode=9;
 8016bc2:	4b1e      	ldr	r3, [pc, #120]	; (8016c3c <mode_WallSensorTuning_fast+0x3c4>)
 8016bc4:	2209      	movs	r2, #9
 8016bc6:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016bc8:	2300      	movs	r3, #0
 8016bca:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 8016bcc:	68f8      	ldr	r0, [r7, #12]
 8016bce:	ed9f 2a2c 	vldr	s4, [pc, #176]	; 8016c80 <mode_WallSensorTuning_fast+0x408>
 8016bd2:	eddf 1a2c 	vldr	s3, [pc, #176]	; 8016c84 <mode_WallSensorTuning_fast+0x40c>
 8016bd6:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 8016c4c <mode_WallSensorTuning_fast+0x3d4>
 8016bda:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8016c4c <mode_WallSensorTuning_fast+0x3d4>
 8016bde:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8016c88 <mode_WallSensorTuning_fast+0x410>
 8016be2:	f7ec f9fb 	bl	8002fdc <straight_table2>

		break;
 8016be6:	e090      	b.n	8016d0a <mode_WallSensorTuning_fast+0x492>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 8016be8:	4b14      	ldr	r3, [pc, #80]	; (8016c3c <mode_WallSensorTuning_fast+0x3c4>)
 8016bea:	2207      	movs	r2, #7
 8016bec:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016bee:	2303      	movs	r3, #3
 8016bf0:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 8016bf2:	68f8      	ldr	r0, [r7, #12]
 8016bf4:	ed9f 2a22 	vldr	s4, [pc, #136]	; 8016c80 <mode_WallSensorTuning_fast+0x408>
 8016bf8:	eddf 1a24 	vldr	s3, [pc, #144]	; 8016c8c <mode_WallSensorTuning_fast+0x414>
 8016bfc:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8016c4c <mode_WallSensorTuning_fast+0x3d4>
 8016c00:	eddf 0a12 	vldr	s1, [pc, #72]	; 8016c4c <mode_WallSensorTuning_fast+0x3d4>
 8016c04:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8016c90 <mode_WallSensorTuning_fast+0x418>
 8016c08:	f7ec f9e8 	bl	8002fdc <straight_table2>
		break;
 8016c0c:	e07d      	b.n	8016d0a <mode_WallSensorTuning_fast+0x492>
		case 9:
			record_mode=8;
 8016c0e:	4b0b      	ldr	r3, [pc, #44]	; (8016c3c <mode_WallSensorTuning_fast+0x3c4>)
 8016c10:	2208      	movs	r2, #8
 8016c12:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016c14:	2303      	movs	r3, #3
 8016c16:	733b      	strb	r3, [r7, #12]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 3500, 20000,mode);
 8016c18:	68f8      	ldr	r0, [r7, #12]
 8016c1a:	ed9f 2a19 	vldr	s4, [pc, #100]	; 8016c80 <mode_WallSensorTuning_fast+0x408>
 8016c1e:	eddf 1a1b 	vldr	s3, [pc, #108]	; 8016c8c <mode_WallSensorTuning_fast+0x414>
 8016c22:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8016c4c <mode_WallSensorTuning_fast+0x3d4>
 8016c26:	eddf 0a09 	vldr	s1, [pc, #36]	; 8016c4c <mode_WallSensorTuning_fast+0x3d4>
 8016c2a:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8016c94 <mode_WallSensorTuning_fast+0x41c>
 8016c2e:	f7ec f9d5 	bl	8002fdc <straight_table2>
		break;
 8016c32:	e06a      	b.n	8016d0a <mode_WallSensorTuning_fast+0x492>
 8016c34:	3f7d70a4 	.word	0x3f7d70a4
 8016c38:	20000264 	.word	0x20000264
 8016c3c:	2000edc0 	.word	0x2000edc0
 8016c40:	20000808 	.word	0x20000808
 8016c44:	46bb8000 	.word	0x46bb8000
 8016c48:	459c4000 	.word	0x459c4000
 8016c4c:	00000000 	.word	0x00000000
 8016c50:	44e39000 	.word	0x44e39000
 8016c54:	461c4000 	.word	0x461c4000
 8016c58:	447a0000 	.word	0x447a0000
 8016c5c:	42cd0000 	.word	0x42cd0000
 8016c60:	41b40000 	.word	0x41b40000
 8016c64:	42e10000 	.word	0x42e10000
 8016c68:	44960000 	.word	0x44960000
 8016c6c:	464b2000 	.word	0x464b2000
 8016c70:	44bb8000 	.word	0x44bb8000
 8016c74:	4321c77b 	.word	0x4321c77b
 8016c78:	41fe8ef6 	.word	0x41fe8ef6
 8016c7c:	42beeb39 	.word	0x42beeb39
 8016c80:	469c4000 	.word	0x469c4000
 8016c84:	44fa0000 	.word	0x44fa0000
 8016c88:	445ebd17 	.word	0x445ebd17
 8016c8c:	455ac000 	.word	0x455ac000
 8016c90:	443eeb39 	.word	0x443eeb39
 8016c94:	4484977b 	.word	0x4484977b
		case 10:
			record_mode=10;
 8016c98:	4b39      	ldr	r3, [pc, #228]	; (8016d80 <mode_WallSensorTuning_fast+0x508>)
 8016c9a:	220a      	movs	r2, #10
 8016c9c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016c9e:	2303      	movs	r3, #3
 8016ca0:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 8016ca2:	68f8      	ldr	r0, [r7, #12]
 8016ca4:	ed9f 2a37 	vldr	s4, [pc, #220]	; 8016d84 <mode_WallSensorTuning_fast+0x50c>
 8016ca8:	eddf 1a37 	vldr	s3, [pc, #220]	; 8016d88 <mode_WallSensorTuning_fast+0x510>
 8016cac:	ed9f 1a37 	vldr	s2, [pc, #220]	; 8016d8c <mode_WallSensorTuning_fast+0x514>
 8016cb0:	eddf 0a36 	vldr	s1, [pc, #216]	; 8016d8c <mode_WallSensorTuning_fast+0x514>
 8016cb4:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8016d90 <mode_WallSensorTuning_fast+0x518>
 8016cb8:	f7ec f990 	bl	8002fdc <straight_table2>
		break;
 8016cbc:	e025      	b.n	8016d0a <mode_WallSensorTuning_fast+0x492>
		case 11:
			record_mode=11;
 8016cbe:	4b30      	ldr	r3, [pc, #192]	; (8016d80 <mode_WallSensorTuning_fast+0x508>)
 8016cc0:	220b      	movs	r2, #11
 8016cc2:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016cc4:	2303      	movs	r3, #3
 8016cc6:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 8016cc8:	68f8      	ldr	r0, [r7, #12]
 8016cca:	ed9f 2a32 	vldr	s4, [pc, #200]	; 8016d94 <mode_WallSensorTuning_fast+0x51c>
 8016cce:	eddf 1a32 	vldr	s3, [pc, #200]	; 8016d98 <mode_WallSensorTuning_fast+0x520>
 8016cd2:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8016d8c <mode_WallSensorTuning_fast+0x514>
 8016cd6:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8016d8c <mode_WallSensorTuning_fast+0x514>
 8016cda:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8016d90 <mode_WallSensorTuning_fast+0x518>
 8016cde:	f7ec f97d 	bl	8002fdc <straight_table2>
		break;
 8016ce2:	e012      	b.n	8016d0a <mode_WallSensorTuning_fast+0x492>
		case 12:
			record_mode=12;
 8016ce4:	4b26      	ldr	r3, [pc, #152]	; (8016d80 <mode_WallSensorTuning_fast+0x508>)
 8016ce6:	220c      	movs	r2, #12
 8016ce8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016cea:	2303      	movs	r3, #3
 8016cec:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 8016cee:	68f8      	ldr	r0, [r7, #12]
 8016cf0:	ed9f 2a28 	vldr	s4, [pc, #160]	; 8016d94 <mode_WallSensorTuning_fast+0x51c>
 8016cf4:	eddf 1a28 	vldr	s3, [pc, #160]	; 8016d98 <mode_WallSensorTuning_fast+0x520>
 8016cf8:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8016d8c <mode_WallSensorTuning_fast+0x514>
 8016cfc:	eddf 0a23 	vldr	s1, [pc, #140]	; 8016d8c <mode_WallSensorTuning_fast+0x514>
 8016d00:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8016d90 <mode_WallSensorTuning_fast+0x518>
 8016d04:	f7ec f96a 	bl	8002fdc <straight_table2>
		break;
 8016d08:	bf00      	nop
		case 15:
		break;
	}
	record_mode=0;
 8016d0a:	4b1d      	ldr	r3, [pc, #116]	; (8016d80 <mode_WallSensorTuning_fast+0x508>)
 8016d0c:	2200      	movs	r2, #0
 8016d0e:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8016d10:	2003      	movs	r0, #3
 8016d12:	f7f0 fe0f 	bl	8007934 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8016d16:	2003      	movs	r0, #3
 8016d18:	f7f0 fde4 	bl	80078e4 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8016d1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016d20:	f7f1 f906 	bl	8007f30 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8016d24:	f7f0 fe68 	bl	80079f8 <pl_FunMotor_stop>
	record_mode=0;
 8016d28:	4b15      	ldr	r3, [pc, #84]	; (8016d80 <mode_WallSensorTuning_fast+0x508>)
 8016d2a:	2200      	movs	r2, #0
 8016d2c:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 8016d2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016d32:	f7f1 f8fd 	bl	8007f30 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8016d36:	2000      	movs	r0, #0
 8016d38:	f7f0 fdca 	bl	80078d0 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016d3c:	e002      	b.n	8016d44 <mode_WallSensorTuning_fast+0x4cc>
		HAL_Delay(1);
 8016d3e:	2001      	movs	r0, #1
 8016d40:	f002 f80a 	bl	8018d58 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016d44:	4b15      	ldr	r3, [pc, #84]	; (8016d9c <mode_WallSensorTuning_fast+0x524>)
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016d4c:	ddf7      	ble.n	8016d3e <mode_WallSensorTuning_fast+0x4c6>
 8016d4e:	4b13      	ldr	r3, [pc, #76]	; (8016d9c <mode_WallSensorTuning_fast+0x524>)
 8016d50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016d54:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016d58:	ddf1      	ble.n	8016d3e <mode_WallSensorTuning_fast+0x4c6>
 8016d5a:	4b10      	ldr	r3, [pc, #64]	; (8016d9c <mode_WallSensorTuning_fast+0x524>)
 8016d5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016d60:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016d64:	ddeb      	ble.n	8016d3e <mode_WallSensorTuning_fast+0x4c6>
	}
	pl_r_blue_LED(ON);
 8016d66:	2001      	movs	r0, #1
 8016d68:	f7f0 f90e 	bl	8006f88 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8016d6c:	2001      	movs	r0, #1
 8016d6e:	f7f0 f91d 	bl	8006fac <pl_l_blue_LED>
	record_print();
 8016d72:	f000 f871 	bl	8016e58 <record_print>



}
 8016d76:	bf00      	nop
 8016d78:	3710      	adds	r7, #16
 8016d7a:	46bd      	mov	sp, r7
 8016d7c:	bd80      	pop	{r7, pc}
 8016d7e:	bf00      	nop
 8016d80:	2000edc0 	.word	0x2000edc0
 8016d84:	469c4000 	.word	0x469c4000
 8016d88:	455ac000 	.word	0x455ac000
 8016d8c:	00000000 	.word	0x00000000
 8016d90:	443eeb39 	.word	0x443eeb39
 8016d94:	466a6000 	.word	0x466a6000
 8016d98:	453b8000 	.word	0x453b8000
 8016d9c:	200002b8 	.word	0x200002b8

08016da0 <record_reset>:
char record_rupe_flag;

//int SEN_record[5][15];
//int SEN_recordD[5][15];

void record_reset(void) {
 8016da0:	b480      	push	{r7}
 8016da2:	af00      	add	r7, sp, #0
	record_mode = 0;
 8016da4:	4b06      	ldr	r3, [pc, #24]	; (8016dc0 <record_reset+0x20>)
 8016da6:	2200      	movs	r2, #0
 8016da8:	701a      	strb	r2, [r3, #0]
	record_time = 0;
 8016daa:	4b06      	ldr	r3, [pc, #24]	; (8016dc4 <record_reset+0x24>)
 8016dac:	2200      	movs	r2, #0
 8016dae:	601a      	str	r2, [r3, #0]
	record_rupe_flag = 0;
 8016db0:	4b05      	ldr	r3, [pc, #20]	; (8016dc8 <record_reset+0x28>)
 8016db2:	2200      	movs	r2, #0
 8016db4:	701a      	strb	r2, [r3, #0]
}
 8016db6:	bf00      	nop
 8016db8:	46bd      	mov	sp, r7
 8016dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dbe:	4770      	bx	lr
 8016dc0:	2000edc0 	.word	0x2000edc0
 8016dc4:	2000edc4 	.word	0x2000edc4
 8016dc8:	2000edcc 	.word	0x2000edcc

08016dcc <record_data>:

void record_data(float *input_record_data, int numlen) {
 8016dcc:	b490      	push	{r4, r7}
 8016dce:	b084      	sub	sp, #16
 8016dd0:	af00      	add	r7, sp, #0
 8016dd2:	6078      	str	r0, [r7, #4]
 8016dd4:	6039      	str	r1, [r7, #0]

	for (int record_count = 0; record_count < numlen; record_count++) {
 8016dd6:	2300      	movs	r3, #0
 8016dd8:	60fb      	str	r3, [r7, #12]
 8016dda:	e013      	b.n	8016e04 <record_data+0x38>
		record_value[record_count][record_time] =
				input_record_data[record_count];
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	009b      	lsls	r3, r3, #2
 8016de0:	687a      	ldr	r2, [r7, #4]
 8016de2:	441a      	add	r2, r3
		record_value[record_count][record_time] =
 8016de4:	4b18      	ldr	r3, [pc, #96]	; (8016e48 <record_data+0x7c>)
 8016de6:	681b      	ldr	r3, [r3, #0]
				input_record_data[record_count];
 8016de8:	6812      	ldr	r2, [r2, #0]
		record_value[record_count][record_time] =
 8016dea:	4818      	ldr	r0, [pc, #96]	; (8016e4c <record_data+0x80>)
 8016dec:	68f9      	ldr	r1, [r7, #12]
 8016dee:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8016df2:	fb04 f101 	mul.w	r1, r4, r1
 8016df6:	440b      	add	r3, r1
 8016df8:	009b      	lsls	r3, r3, #2
 8016dfa:	4403      	add	r3, r0
 8016dfc:	601a      	str	r2, [r3, #0]
	for (int record_count = 0; record_count < numlen; record_count++) {
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	3301      	adds	r3, #1
 8016e02:	60fb      	str	r3, [r7, #12]
 8016e04:	68fa      	ldr	r2, [r7, #12]
 8016e06:	683b      	ldr	r3, [r7, #0]
 8016e08:	429a      	cmp	r2, r3
 8016e0a:	dbe7      	blt.n	8016ddc <record_data+0x10>
	}
	if (record_rupe_flag == 1) {
 8016e0c:	4b10      	ldr	r3, [pc, #64]	; (8016e50 <record_data+0x84>)
 8016e0e:	781b      	ldrb	r3, [r3, #0]
 8016e10:	2b01      	cmp	r3, #1
 8016e12:	d103      	bne.n	8016e1c <record_data+0x50>
		record_end_point = record_time;
 8016e14:	4b0c      	ldr	r3, [pc, #48]	; (8016e48 <record_data+0x7c>)
 8016e16:	681b      	ldr	r3, [r3, #0]
 8016e18:	4a0e      	ldr	r2, [pc, #56]	; (8016e54 <record_data+0x88>)
 8016e1a:	6013      	str	r3, [r2, #0]
	}
	record_time++;
 8016e1c:	4b0a      	ldr	r3, [pc, #40]	; (8016e48 <record_data+0x7c>)
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	3301      	adds	r3, #1
 8016e22:	4a09      	ldr	r2, [pc, #36]	; (8016e48 <record_data+0x7c>)
 8016e24:	6013      	str	r3, [r2, #0]
	if (record_time >= max_record_time) {
 8016e26:	4b08      	ldr	r3, [pc, #32]	; (8016e48 <record_data+0x7c>)
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8016e2e:	4293      	cmp	r3, r2
 8016e30:	dd05      	ble.n	8016e3e <record_data+0x72>
		record_time = 0;
 8016e32:	4b05      	ldr	r3, [pc, #20]	; (8016e48 <record_data+0x7c>)
 8016e34:	2200      	movs	r2, #0
 8016e36:	601a      	str	r2, [r3, #0]
		record_rupe_flag = 1;
 8016e38:	4b05      	ldr	r3, [pc, #20]	; (8016e50 <record_data+0x84>)
 8016e3a:	2201      	movs	r2, #1
 8016e3c:	701a      	strb	r2, [r3, #0]
	}

}
 8016e3e:	bf00      	nop
 8016e40:	3710      	adds	r7, #16
 8016e42:	46bd      	mov	sp, r7
 8016e44:	bc90      	pop	{r4, r7}
 8016e46:	4770      	bx	lr
 8016e48:	2000edc4 	.word	0x2000edc4
 8016e4c:	20003240 	.word	0x20003240
 8016e50:	2000edcc 	.word	0x2000edcc
 8016e54:	2000edc8 	.word	0x2000edc8

08016e58 <record_print>:

void record_print(void) {
 8016e58:	b580      	push	{r7, lr}
 8016e5a:	b084      	sub	sp, #16
 8016e5c:	af00      	add	r7, sp, #0
	int a, time_index;
	if (record_rupe_flag == 0) {
 8016e5e:	4b3a      	ldr	r3, [pc, #232]	; (8016f48 <record_print+0xf0>)
 8016e60:	781b      	ldrb	r3, [r3, #0]
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d12e      	bne.n	8016ec4 <record_print+0x6c>
		for (a = 0; a <= record_time - 1; a++) {
 8016e66:	2300      	movs	r3, #0
 8016e68:	60fb      	str	r3, [r7, #12]
 8016e6a:	e025      	b.n	8016eb8 <record_print+0x60>

			printf("%d", a);
 8016e6c:	68f9      	ldr	r1, [r7, #12]
 8016e6e:	4837      	ldr	r0, [pc, #220]	; (8016f4c <record_print+0xf4>)
 8016e70:	f009 fec4 	bl	8020bfc <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 8016e74:	2300      	movs	r3, #0
 8016e76:	607b      	str	r3, [r7, #4]
 8016e78:	e015      	b.n	8016ea6 <record_print+0x4e>
					record_count++) {
				printf(",%f", record_value[record_count][a]);
 8016e7a:	4935      	ldr	r1, [pc, #212]	; (8016f50 <record_print+0xf8>)
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8016e82:	fb03 f202 	mul.w	r2, r3, r2
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	4413      	add	r3, r2
 8016e8a:	009b      	lsls	r3, r3, #2
 8016e8c:	440b      	add	r3, r1
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	4618      	mov	r0, r3
 8016e92:	f7e9 fb81 	bl	8000598 <__aeabi_f2d>
 8016e96:	4602      	mov	r2, r0
 8016e98:	460b      	mov	r3, r1
 8016e9a:	482e      	ldr	r0, [pc, #184]	; (8016f54 <record_print+0xfc>)
 8016e9c:	f009 feae 	bl	8020bfc <iprintf>
					record_count++) {
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	3301      	adds	r3, #1
 8016ea4:	607b      	str	r3, [r7, #4]
			for (int record_count = 0; record_count < max_record_num;
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	2b03      	cmp	r3, #3
 8016eaa:	dde6      	ble.n	8016e7a <record_print+0x22>
			}
			printf("\n");
 8016eac:	200a      	movs	r0, #10
 8016eae:	f009 febd 	bl	8020c2c <putchar>
		for (a = 0; a <= record_time - 1; a++) {
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	3301      	adds	r3, #1
 8016eb6:	60fb      	str	r3, [r7, #12]
 8016eb8:	4b27      	ldr	r3, [pc, #156]	; (8016f58 <record_print+0x100>)
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	68fa      	ldr	r2, [r7, #12]
 8016ebe:	429a      	cmp	r2, r3
 8016ec0:	dbd4      	blt.n	8016e6c <record_print+0x14>
			}
			printf("\n");
		}
	}

}
 8016ec2:	e03c      	b.n	8016f3e <record_print+0xe6>
		for (a = 0; a <= max_record_time - 1; a++) {
 8016ec4:	2300      	movs	r3, #0
 8016ec6:	60fb      	str	r3, [r7, #12]
 8016ec8:	e034      	b.n	8016f34 <record_print+0xdc>
			time_index = record_end_point + 1 + a;
 8016eca:	4b24      	ldr	r3, [pc, #144]	; (8016f5c <record_print+0x104>)
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	3301      	adds	r3, #1
 8016ed0:	68fa      	ldr	r2, [r7, #12]
 8016ed2:	4413      	add	r3, r2
 8016ed4:	60bb      	str	r3, [r7, #8]
			if (time_index >= max_record_time) {
 8016ed6:	68bb      	ldr	r3, [r7, #8]
 8016ed8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8016edc:	4293      	cmp	r3, r2
 8016ede:	dd03      	ble.n	8016ee8 <record_print+0x90>
				time_index -= max_record_time;
 8016ee0:	68bb      	ldr	r3, [r7, #8]
 8016ee2:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8016ee6:	60bb      	str	r3, [r7, #8]
			printf("%d", a);
 8016ee8:	68f9      	ldr	r1, [r7, #12]
 8016eea:	4818      	ldr	r0, [pc, #96]	; (8016f4c <record_print+0xf4>)
 8016eec:	f009 fe86 	bl	8020bfc <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 8016ef0:	2300      	movs	r3, #0
 8016ef2:	603b      	str	r3, [r7, #0]
 8016ef4:	e015      	b.n	8016f22 <record_print+0xca>
				printf(",%f", record_value[record_count][time_index]);
 8016ef6:	4916      	ldr	r1, [pc, #88]	; (8016f50 <record_print+0xf8>)
 8016ef8:	683b      	ldr	r3, [r7, #0]
 8016efa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8016efe:	fb03 f202 	mul.w	r2, r3, r2
 8016f02:	68bb      	ldr	r3, [r7, #8]
 8016f04:	4413      	add	r3, r2
 8016f06:	009b      	lsls	r3, r3, #2
 8016f08:	440b      	add	r3, r1
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	4618      	mov	r0, r3
 8016f0e:	f7e9 fb43 	bl	8000598 <__aeabi_f2d>
 8016f12:	4602      	mov	r2, r0
 8016f14:	460b      	mov	r3, r1
 8016f16:	480f      	ldr	r0, [pc, #60]	; (8016f54 <record_print+0xfc>)
 8016f18:	f009 fe70 	bl	8020bfc <iprintf>
					record_count++) {
 8016f1c:	683b      	ldr	r3, [r7, #0]
 8016f1e:	3301      	adds	r3, #1
 8016f20:	603b      	str	r3, [r7, #0]
			for (int record_count = 0; record_count < max_record_num;
 8016f22:	683b      	ldr	r3, [r7, #0]
 8016f24:	2b03      	cmp	r3, #3
 8016f26:	dde6      	ble.n	8016ef6 <record_print+0x9e>
			printf("\n");
 8016f28:	200a      	movs	r0, #10
 8016f2a:	f009 fe7f 	bl	8020c2c <putchar>
		for (a = 0; a <= max_record_time - 1; a++) {
 8016f2e:	68fb      	ldr	r3, [r7, #12]
 8016f30:	3301      	adds	r3, #1
 8016f32:	60fb      	str	r3, [r7, #12]
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8016f3a:	4293      	cmp	r3, r2
 8016f3c:	ddc5      	ble.n	8016eca <record_print+0x72>
}
 8016f3e:	bf00      	nop
 8016f40:	3710      	adds	r7, #16
 8016f42:	46bd      	mov	sp, r7
 8016f44:	bd80      	pop	{r7, pc}
 8016f46:	bf00      	nop
 8016f48:	2000edcc 	.word	0x2000edcc
 8016f4c:	08023710 	.word	0x08023710
 8016f50:	20003240 	.word	0x20003240
 8016f54:	08023714 	.word	0x08023714
 8016f58:	2000edc4 	.word	0x2000edc4
 8016f5c:	2000edc8 	.word	0x2000edc8

08016f60 <interrupt_record>:

void interrupt_record(void) {
 8016f60:	b580      	push	{r7, lr}
 8016f62:	b084      	sub	sp, #16
 8016f64:	af00      	add	r7, sp, #0

	float r_data[4];

	if (record_mode == 1) {
 8016f66:	4baf      	ldr	r3, [pc, #700]	; (8017224 <interrupt_record+0x2c4>)
 8016f68:	781b      	ldrb	r3, [r3, #0]
 8016f6a:	2b01      	cmp	r3, #1
 8016f6c:	d110      	bne.n	8016f90 <interrupt_record+0x30>
			r_data[0] = E_speedR;
 8016f6e:	4bae      	ldr	r3, [pc, #696]	; (8017228 <interrupt_record+0x2c8>)
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	603b      	str	r3, [r7, #0]
			r_data[1] = E_speedL;
 8016f74:	4bad      	ldr	r3, [pc, #692]	; (801722c <interrupt_record+0x2cc>)
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceR;
 8016f7a:	4bad      	ldr	r3, [pc, #692]	; (8017230 <interrupt_record+0x2d0>)
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	60bb      	str	r3, [r7, #8]
			r_data[3] = E_distanceL;
 8016f80:	4bac      	ldr	r3, [pc, #688]	; (8017234 <interrupt_record+0x2d4>)
 8016f82:	681b      	ldr	r3, [r3, #0]
 8016f84:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016f86:	463b      	mov	r3, r7
 8016f88:	2104      	movs	r1, #4
 8016f8a:	4618      	mov	r0, r3
 8016f8c:	f7ff ff1e 	bl	8016dcc <record_data>
		}
	if (record_mode == 2) {
 8016f90:	4ba4      	ldr	r3, [pc, #656]	; (8017224 <interrupt_record+0x2c4>)
 8016f92:	781b      	ldrb	r3, [r3, #0]
 8016f94:	2b02      	cmp	r3, #2
 8016f96:	d11b      	bne.n	8016fd0 <interrupt_record+0x70>
		r_data[0] = turning.velocity;
 8016f98:	4ba7      	ldr	r3, [pc, #668]	; (8017238 <interrupt_record+0x2d8>)
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	603b      	str	r3, [r7, #0]
		r_data[1] = angle_speed;
 8016f9e:	4ba7      	ldr	r3, [pc, #668]	; (801723c <interrupt_record+0x2dc>)
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	607b      	str	r3, [r7, #4]
		r_data[2] = straight.velocity;
 8016fa4:	4ba6      	ldr	r3, [pc, #664]	; (8017240 <interrupt_record+0x2e0>)
 8016fa6:	681b      	ldr	r3, [r3, #0]
 8016fa8:	60bb      	str	r3, [r7, #8]
		r_data[3] = (fusion_speedR + fusion_speedL) / 2;
 8016faa:	4ba6      	ldr	r3, [pc, #664]	; (8017244 <interrupt_record+0x2e4>)
 8016fac:	ed93 7a00 	vldr	s14, [r3]
 8016fb0:	4ba5      	ldr	r3, [pc, #660]	; (8017248 <interrupt_record+0x2e8>)
 8016fb2:	edd3 7a00 	vldr	s15, [r3]
 8016fb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016fba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016fbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016fc2:	edc7 7a03 	vstr	s15, [r7, #12]
				record_data(r_data, 4);
 8016fc6:	463b      	mov	r3, r7
 8016fc8:	2104      	movs	r1, #4
 8016fca:	4618      	mov	r0, r3
 8016fcc:	f7ff fefe 	bl	8016dcc <record_data>
		}
	if (record_mode == 3) {
 8016fd0:	4b94      	ldr	r3, [pc, #592]	; (8017224 <interrupt_record+0x2c4>)
 8016fd2:	781b      	ldrb	r3, [r3, #0]
 8016fd4:	2b03      	cmp	r3, #3
 8016fd6:	d126      	bne.n	8017026 <interrupt_record+0xc6>
			r_data[0] = straight.velocity;
 8016fd8:	4b99      	ldr	r3, [pc, #612]	; (8017240 <interrupt_record+0x2e0>)
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	603b      	str	r3, [r7, #0]
			r_data[1] = straight.displacement;
 8016fde:	4b98      	ldr	r3, [pc, #608]	; (8017240 <interrupt_record+0x2e0>)
 8016fe0:	689b      	ldr	r3, [r3, #8]
 8016fe2:	607b      	str	r3, [r7, #4]
			r_data[2] = (fusion_speedR + fusion_speedL) / 2;
 8016fe4:	4b97      	ldr	r3, [pc, #604]	; (8017244 <interrupt_record+0x2e4>)
 8016fe6:	ed93 7a00 	vldr	s14, [r3]
 8016fea:	4b97      	ldr	r3, [pc, #604]	; (8017248 <interrupt_record+0x2e8>)
 8016fec:	edd3 7a00 	vldr	s15, [r3]
 8016ff0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016ff4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016ff8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016ffc:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 8017000:	4b92      	ldr	r3, [pc, #584]	; (801724c <interrupt_record+0x2ec>)
 8017002:	ed93 7a00 	vldr	s14, [r3]
 8017006:	4b92      	ldr	r3, [pc, #584]	; (8017250 <interrupt_record+0x2f0>)
 8017008:	edd3 7a00 	vldr	s15, [r3]
 801700c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017010:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8017014:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8017018:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 801701c:	463b      	mov	r3, r7
 801701e:	2104      	movs	r1, #4
 8017020:	4618      	mov	r0, r3
 8017022:	f7ff fed3 	bl	8016dcc <record_data>
		}
	if (record_mode == 4) { //距離の比較
 8017026:	4b7f      	ldr	r3, [pc, #508]	; (8017224 <interrupt_record+0x2c4>)
 8017028:	781b      	ldrb	r3, [r3, #0]
 801702a:	2b04      	cmp	r3, #4
 801702c:	d126      	bne.n	801707c <interrupt_record+0x11c>
			r_data[0] = straight.displacement;
 801702e:	4b84      	ldr	r3, [pc, #528]	; (8017240 <interrupt_record+0x2e0>)
 8017030:	689b      	ldr	r3, [r3, #8]
 8017032:	603b      	str	r3, [r7, #0]
			r_data[1] = (E_distanceR + E_distanceL) / 2;
 8017034:	4b7e      	ldr	r3, [pc, #504]	; (8017230 <interrupt_record+0x2d0>)
 8017036:	ed93 7a00 	vldr	s14, [r3]
 801703a:	4b7e      	ldr	r3, [pc, #504]	; (8017234 <interrupt_record+0x2d4>)
 801703c:	edd3 7a00 	vldr	s15, [r3]
 8017040:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017044:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8017048:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801704c:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = gf_distance;
 8017050:	4b80      	ldr	r3, [pc, #512]	; (8017254 <interrupt_record+0x2f4>)
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	60bb      	str	r3, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 8017056:	4b7d      	ldr	r3, [pc, #500]	; (801724c <interrupt_record+0x2ec>)
 8017058:	ed93 7a00 	vldr	s14, [r3]
 801705c:	4b7c      	ldr	r3, [pc, #496]	; (8017250 <interrupt_record+0x2f0>)
 801705e:	edd3 7a00 	vldr	s15, [r3]
 8017062:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017066:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801706a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801706e:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8017072:	463b      	mov	r3, r7
 8017074:	2104      	movs	r1, #4
 8017076:	4618      	mov	r0, r3
 8017078:	f7ff fea8 	bl	8016dcc <record_data>
		}
	if (record_mode == 5) { //距離の比較
 801707c:	4b69      	ldr	r3, [pc, #420]	; (8017224 <interrupt_record+0x2c4>)
 801707e:	781b      	ldrb	r3, [r3, #0]
 8017080:	2b05      	cmp	r3, #5
 8017082:	d110      	bne.n	80170a6 <interrupt_record+0x146>
			r_data[0] = straight.displacement;
 8017084:	4b6e      	ldr	r3, [pc, #440]	; (8017240 <interrupt_record+0x2e0>)
 8017086:	689b      	ldr	r3, [r3, #8]
 8017088:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 801708a:	4b69      	ldr	r3, [pc, #420]	; (8017230 <interrupt_record+0x2d0>)
 801708c:	681b      	ldr	r3, [r3, #0]
 801708e:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 8017090:	4b68      	ldr	r3, [pc, #416]	; (8017234 <interrupt_record+0x2d4>)
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 8017096:	4b6f      	ldr	r3, [pc, #444]	; (8017254 <interrupt_record+0x2f4>)
 8017098:	681b      	ldr	r3, [r3, #0]
 801709a:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 801709c:	463b      	mov	r3, r7
 801709e:	2104      	movs	r1, #4
 80170a0:	4618      	mov	r0, r3
 80170a2:	f7ff fe93 	bl	8016dcc <record_data>
		}
	if (record_mode == 5) { //距離の比較
 80170a6:	4b5f      	ldr	r3, [pc, #380]	; (8017224 <interrupt_record+0x2c4>)
 80170a8:	781b      	ldrb	r3, [r3, #0]
 80170aa:	2b05      	cmp	r3, #5
 80170ac:	d110      	bne.n	80170d0 <interrupt_record+0x170>
			r_data[0] = g_V_L;
 80170ae:	4b6a      	ldr	r3, [pc, #424]	; (8017258 <interrupt_record+0x2f8>)
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 80170b4:	4b5e      	ldr	r3, [pc, #376]	; (8017230 <interrupt_record+0x2d0>)
 80170b6:	681b      	ldr	r3, [r3, #0]
 80170b8:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 80170ba:	4b5e      	ldr	r3, [pc, #376]	; (8017234 <interrupt_record+0x2d4>)
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 80170c0:	4b64      	ldr	r3, [pc, #400]	; (8017254 <interrupt_record+0x2f4>)
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 80170c6:	463b      	mov	r3, r7
 80170c8:	2104      	movs	r1, #4
 80170ca:	4618      	mov	r0, r3
 80170cc:	f7ff fe7e 	bl	8016dcc <record_data>
		}
	if (record_mode == 6) { //距離の比較
 80170d0:	4b54      	ldr	r3, [pc, #336]	; (8017224 <interrupt_record+0x2c4>)
 80170d2:	781b      	ldrb	r3, [r3, #0]
 80170d4:	2b06      	cmp	r3, #6
 80170d6:	d110      	bne.n	80170fa <interrupt_record+0x19a>
				r_data[0] = straight.velocity;
 80170d8:	4b59      	ldr	r3, [pc, #356]	; (8017240 <interrupt_record+0x2e0>)
 80170da:	681b      	ldr	r3, [r3, #0]
 80170dc:	603b      	str	r3, [r7, #0]
				r_data[1] = E_lpf_speedL;
 80170de:	4b5f      	ldr	r3, [pc, #380]	; (801725c <interrupt_record+0x2fc>)
 80170e0:	681b      	ldr	r3, [r3, #0]
 80170e2:	607b      	str	r3, [r7, #4]
				r_data[2] = E_lpf_speedR;
 80170e4:	4b5e      	ldr	r3, [pc, #376]	; (8017260 <interrupt_record+0x300>)
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	60bb      	str	r3, [r7, #8]
				r_data[3] = gf_speed;
 80170ea:	4b5e      	ldr	r3, [pc, #376]	; (8017264 <interrupt_record+0x304>)
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 80170f0:	463b      	mov	r3, r7
 80170f2:	2104      	movs	r1, #4
 80170f4:	4618      	mov	r0, r3
 80170f6:	f7ff fe69 	bl	8016dcc <record_data>
			}
	if (record_mode == 7) {
 80170fa:	4b4a      	ldr	r3, [pc, #296]	; (8017224 <interrupt_record+0x2c4>)
 80170fc:	781b      	ldrb	r3, [r3, #0]
 80170fe:	2b07      	cmp	r3, #7
 8017100:	d125      	bne.n	801714e <interrupt_record+0x1ee>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 8017102:	4b59      	ldr	r3, [pc, #356]	; (8017268 <interrupt_record+0x308>)
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	ee07 3a90 	vmov	s15, r3
 801710a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801710e:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff[SENSOR_LEFT];
 8017112:	4b56      	ldr	r3, [pc, #344]	; (801726c <interrupt_record+0x30c>)
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	ee07 3a90 	vmov	s15, r3
 801711a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801711e:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_RIGHT][0];
 8017122:	4b51      	ldr	r3, [pc, #324]	; (8017268 <interrupt_record+0x308>)
 8017124:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8017128:	ee07 3a90 	vmov	s15, r3
 801712c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017130:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff[SENSOR_RIGHT];
 8017134:	4b4d      	ldr	r3, [pc, #308]	; (801726c <interrupt_record+0x30c>)
 8017136:	691b      	ldr	r3, [r3, #16]
 8017138:	ee07 3a90 	vmov	s15, r3
 801713c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017140:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8017144:	463b      	mov	r3, r7
 8017146:	2104      	movs	r1, #4
 8017148:	4618      	mov	r0, r3
 801714a:	f7ff fe3f 	bl	8016dcc <record_data>
		}
	if (record_mode == 8) {
 801714e:	4b35      	ldr	r3, [pc, #212]	; (8017224 <interrupt_record+0x2c4>)
 8017150:	781b      	ldrb	r3, [r3, #0]
 8017152:	2b08      	cmp	r3, #8
 8017154:	d125      	bne.n	80171a2 <interrupt_record+0x242>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 8017156:	4b44      	ldr	r3, [pc, #272]	; (8017268 <interrupt_record+0x308>)
 8017158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801715a:	ee07 3a90 	vmov	s15, r3
 801715e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017162:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_LEFT];
 8017166:	4b42      	ldr	r3, [pc, #264]	; (8017270 <interrupt_record+0x310>)
 8017168:	685b      	ldr	r3, [r3, #4]
 801716a:	ee07 3a90 	vmov	s15, r3
 801716e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017172:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 8017176:	4b3c      	ldr	r3, [pc, #240]	; (8017268 <interrupt_record+0x308>)
 8017178:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801717c:	ee07 3a90 	vmov	s15, r3
 8017180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017184:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT];
 8017188:	4b39      	ldr	r3, [pc, #228]	; (8017270 <interrupt_record+0x310>)
 801718a:	68db      	ldr	r3, [r3, #12]
 801718c:	ee07 3a90 	vmov	s15, r3
 8017190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017194:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8017198:	463b      	mov	r3, r7
 801719a:	2104      	movs	r1, #4
 801719c:	4618      	mov	r0, r3
 801719e:	f7ff fe15 	bl	8016dcc <record_data>
		}
	if (record_mode == 9) { //90
 80171a2:	4b20      	ldr	r3, [pc, #128]	; (8017224 <interrupt_record+0x2c4>)
 80171a4:	781b      	ldrb	r3, [r3, #0]
 80171a6:	2b09      	cmp	r3, #9
 80171a8:	d11b      	bne.n	80171e2 <interrupt_record+0x282>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 80171aa:	4b2f      	ldr	r3, [pc, #188]	; (8017268 <interrupt_record+0x308>)
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	ee07 3a90 	vmov	s15, r3
 80171b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80171b6:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_RIGHT][0];
 80171ba:	4b2b      	ldr	r3, [pc, #172]	; (8017268 <interrupt_record+0x308>)
 80171bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80171c0:	ee07 3a90 	vmov	s15, r3
 80171c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80171c8:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 80171cc:	4b29      	ldr	r3, [pc, #164]	; (8017274 <interrupt_record+0x314>)
 80171ce:	681b      	ldr	r3, [r3, #0]
 80171d0:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 80171d2:	4b29      	ldr	r3, [pc, #164]	; (8017278 <interrupt_record+0x318>)
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 80171d8:	463b      	mov	r3, r7
 80171da:	2104      	movs	r1, #4
 80171dc:	4618      	mov	r0, r3
 80171de:	f7ff fdf5 	bl	8016dcc <record_data>
		}
	if (record_mode == 10) { //90
 80171e2:	4b10      	ldr	r3, [pc, #64]	; (8017224 <interrupt_record+0x2c4>)
 80171e4:	781b      	ldrb	r3, [r3, #0]
 80171e6:	2b0a      	cmp	r3, #10
 80171e8:	d148      	bne.n	801727c <interrupt_record+0x31c>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 80171ea:	4b1f      	ldr	r3, [pc, #124]	; (8017268 <interrupt_record+0x308>)
 80171ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80171ee:	ee07 3a90 	vmov	s15, r3
 80171f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80171f6:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 80171fa:	4b1b      	ldr	r3, [pc, #108]	; (8017268 <interrupt_record+0x308>)
 80171fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8017200:	ee07 3a90 	vmov	s15, r3
 8017204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017208:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 801720c:	4b19      	ldr	r3, [pc, #100]	; (8017274 <interrupt_record+0x314>)
 801720e:	681b      	ldr	r3, [r3, #0]
 8017210:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 8017212:	4b19      	ldr	r3, [pc, #100]	; (8017278 <interrupt_record+0x318>)
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8017218:	463b      	mov	r3, r7
 801721a:	2104      	movs	r1, #4
 801721c:	4618      	mov	r0, r3
 801721e:	f7ff fdd5 	bl	8016dcc <record_data>
 8017222:	e02b      	b.n	801727c <interrupt_record+0x31c>
 8017224:	2000edc0 	.word	0x2000edc0
 8017228:	2000022c 	.word	0x2000022c
 801722c:	20000228 	.word	0x20000228
 8017230:	20000224 	.word	0x20000224
 8017234:	20000220 	.word	0x20000220
 8017238:	200004e4 	.word	0x200004e4
 801723c:	20000268 	.word	0x20000268
 8017240:	200004d8 	.word	0x200004d8
 8017244:	2000025c 	.word	0x2000025c
 8017248:	20000258 	.word	0x20000258
 801724c:	20000254 	.word	0x20000254
 8017250:	20000250 	.word	0x20000250
 8017254:	2000027c 	.word	0x2000027c
 8017258:	2000052c 	.word	0x2000052c
 801725c:	20000238 	.word	0x20000238
 8017260:	2000023c 	.word	0x2000023c
 8017264:	20000278 	.word	0x20000278
 8017268:	200002b8 	.word	0x200002b8
 801726c:	20000448 	.word	0x20000448
 8017270:	2000045c 	.word	0x2000045c
 8017274:	200005e0 	.word	0x200005e0
 8017278:	200005dc 	.word	0x200005dc
		r_data[3] = g_V_L;
		record_data(r_data, 4);
	}
*/

}
 801727c:	bf00      	nop
 801727e:	3710      	adds	r7, #16
 8017280:	46bd      	mov	sp, r7
 8017282:	bd80      	pop	{r7, pc}

08017284 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8017284:	b580      	push	{r7, lr}
 8017286:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8017288:	4b1b      	ldr	r3, [pc, #108]	; (80172f8 <MX_SPI1_Init+0x74>)
 801728a:	4a1c      	ldr	r2, [pc, #112]	; (80172fc <MX_SPI1_Init+0x78>)
 801728c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801728e:	4b1a      	ldr	r3, [pc, #104]	; (80172f8 <MX_SPI1_Init+0x74>)
 8017290:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017294:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8017296:	4b18      	ldr	r3, [pc, #96]	; (80172f8 <MX_SPI1_Init+0x74>)
 8017298:	2200      	movs	r2, #0
 801729a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 801729c:	4b16      	ldr	r3, [pc, #88]	; (80172f8 <MX_SPI1_Init+0x74>)
 801729e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80172a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80172a4:	4b14      	ldr	r3, [pc, #80]	; (80172f8 <MX_SPI1_Init+0x74>)
 80172a6:	2200      	movs	r2, #0
 80172a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80172aa:	4b13      	ldr	r3, [pc, #76]	; (80172f8 <MX_SPI1_Init+0x74>)
 80172ac:	2200      	movs	r2, #0
 80172ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80172b0:	4b11      	ldr	r3, [pc, #68]	; (80172f8 <MX_SPI1_Init+0x74>)
 80172b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80172b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80172b8:	4b0f      	ldr	r3, [pc, #60]	; (80172f8 <MX_SPI1_Init+0x74>)
 80172ba:	2210      	movs	r2, #16
 80172bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80172be:	4b0e      	ldr	r3, [pc, #56]	; (80172f8 <MX_SPI1_Init+0x74>)
 80172c0:	2200      	movs	r2, #0
 80172c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80172c4:	4b0c      	ldr	r3, [pc, #48]	; (80172f8 <MX_SPI1_Init+0x74>)
 80172c6:	2200      	movs	r2, #0
 80172c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80172ca:	4b0b      	ldr	r3, [pc, #44]	; (80172f8 <MX_SPI1_Init+0x74>)
 80172cc:	2200      	movs	r2, #0
 80172ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80172d0:	4b09      	ldr	r3, [pc, #36]	; (80172f8 <MX_SPI1_Init+0x74>)
 80172d2:	2207      	movs	r2, #7
 80172d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80172d6:	4b08      	ldr	r3, [pc, #32]	; (80172f8 <MX_SPI1_Init+0x74>)
 80172d8:	2200      	movs	r2, #0
 80172da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80172dc:	4b06      	ldr	r3, [pc, #24]	; (80172f8 <MX_SPI1_Init+0x74>)
 80172de:	2208      	movs	r2, #8
 80172e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80172e2:	4805      	ldr	r0, [pc, #20]	; (80172f8 <MX_SPI1_Init+0x74>)
 80172e4:	f005 ff2c 	bl	801d140 <HAL_SPI_Init>
 80172e8:	4603      	mov	r3, r0
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d001      	beq.n	80172f2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80172ee:	f7f2 fd74 	bl	8009dda <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80172f2:	bf00      	nop
 80172f4:	bd80      	pop	{r7, pc}
 80172f6:	bf00      	nop
 80172f8:	2000edd0 	.word	0x2000edd0
 80172fc:	40013000 	.word	0x40013000

08017300 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8017300:	b580      	push	{r7, lr}
 8017302:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8017304:	4b1b      	ldr	r3, [pc, #108]	; (8017374 <MX_SPI3_Init+0x74>)
 8017306:	4a1c      	ldr	r2, [pc, #112]	; (8017378 <MX_SPI3_Init+0x78>)
 8017308:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 801730a:	4b1a      	ldr	r3, [pc, #104]	; (8017374 <MX_SPI3_Init+0x74>)
 801730c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017310:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8017312:	4b18      	ldr	r3, [pc, #96]	; (8017374 <MX_SPI3_Init+0x74>)
 8017314:	2200      	movs	r2, #0
 8017316:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8017318:	4b16      	ldr	r3, [pc, #88]	; (8017374 <MX_SPI3_Init+0x74>)
 801731a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 801731e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017320:	4b14      	ldr	r3, [pc, #80]	; (8017374 <MX_SPI3_Init+0x74>)
 8017322:	2200      	movs	r2, #0
 8017324:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8017326:	4b13      	ldr	r3, [pc, #76]	; (8017374 <MX_SPI3_Init+0x74>)
 8017328:	2201      	movs	r2, #1
 801732a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 801732c:	4b11      	ldr	r3, [pc, #68]	; (8017374 <MX_SPI3_Init+0x74>)
 801732e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017332:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8017334:	4b0f      	ldr	r3, [pc, #60]	; (8017374 <MX_SPI3_Init+0x74>)
 8017336:	2208      	movs	r2, #8
 8017338:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801733a:	4b0e      	ldr	r3, [pc, #56]	; (8017374 <MX_SPI3_Init+0x74>)
 801733c:	2200      	movs	r2, #0
 801733e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8017340:	4b0c      	ldr	r3, [pc, #48]	; (8017374 <MX_SPI3_Init+0x74>)
 8017342:	2200      	movs	r2, #0
 8017344:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017346:	4b0b      	ldr	r3, [pc, #44]	; (8017374 <MX_SPI3_Init+0x74>)
 8017348:	2200      	movs	r2, #0
 801734a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 801734c:	4b09      	ldr	r3, [pc, #36]	; (8017374 <MX_SPI3_Init+0x74>)
 801734e:	2207      	movs	r2, #7
 8017350:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8017352:	4b08      	ldr	r3, [pc, #32]	; (8017374 <MX_SPI3_Init+0x74>)
 8017354:	2200      	movs	r2, #0
 8017356:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8017358:	4b06      	ldr	r3, [pc, #24]	; (8017374 <MX_SPI3_Init+0x74>)
 801735a:	2200      	movs	r2, #0
 801735c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 801735e:	4805      	ldr	r0, [pc, #20]	; (8017374 <MX_SPI3_Init+0x74>)
 8017360:	f005 feee 	bl	801d140 <HAL_SPI_Init>
 8017364:	4603      	mov	r3, r0
 8017366:	2b00      	cmp	r3, #0
 8017368:	d001      	beq.n	801736e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 801736a:	f7f2 fd36 	bl	8009dda <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 801736e:	bf00      	nop
 8017370:	bd80      	pop	{r7, pc}
 8017372:	bf00      	nop
 8017374:	2000ee34 	.word	0x2000ee34
 8017378:	40003c00 	.word	0x40003c00

0801737c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 801737c:	b580      	push	{r7, lr}
 801737e:	b08c      	sub	sp, #48	; 0x30
 8017380:	af00      	add	r7, sp, #0
 8017382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017384:	f107 031c 	add.w	r3, r7, #28
 8017388:	2200      	movs	r2, #0
 801738a:	601a      	str	r2, [r3, #0]
 801738c:	605a      	str	r2, [r3, #4]
 801738e:	609a      	str	r2, [r3, #8]
 8017390:	60da      	str	r2, [r3, #12]
 8017392:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	4a3d      	ldr	r2, [pc, #244]	; (8017490 <HAL_SPI_MspInit+0x114>)
 801739a:	4293      	cmp	r3, r2
 801739c:	d129      	bne.n	80173f2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 801739e:	4b3d      	ldr	r3, [pc, #244]	; (8017494 <HAL_SPI_MspInit+0x118>)
 80173a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80173a2:	4a3c      	ldr	r2, [pc, #240]	; (8017494 <HAL_SPI_MspInit+0x118>)
 80173a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80173a8:	6613      	str	r3, [r2, #96]	; 0x60
 80173aa:	4b3a      	ldr	r3, [pc, #232]	; (8017494 <HAL_SPI_MspInit+0x118>)
 80173ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80173ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80173b2:	61bb      	str	r3, [r7, #24]
 80173b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80173b6:	4b37      	ldr	r3, [pc, #220]	; (8017494 <HAL_SPI_MspInit+0x118>)
 80173b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80173ba:	4a36      	ldr	r2, [pc, #216]	; (8017494 <HAL_SPI_MspInit+0x118>)
 80173bc:	f043 0301 	orr.w	r3, r3, #1
 80173c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80173c2:	4b34      	ldr	r3, [pc, #208]	; (8017494 <HAL_SPI_MspInit+0x118>)
 80173c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80173c6:	f003 0301 	and.w	r3, r3, #1
 80173ca:	617b      	str	r3, [r7, #20]
 80173cc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80173ce:	23e0      	movs	r3, #224	; 0xe0
 80173d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80173d2:	2302      	movs	r3, #2
 80173d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80173d6:	2300      	movs	r3, #0
 80173d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80173da:	2300      	movs	r3, #0
 80173dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80173de:	2305      	movs	r3, #5
 80173e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80173e2:	f107 031c 	add.w	r3, r7, #28
 80173e6:	4619      	mov	r1, r3
 80173e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80173ec:	f004 fcee 	bl	801bdcc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80173f0:	e049      	b.n	8017486 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	681b      	ldr	r3, [r3, #0]
 80173f6:	4a28      	ldr	r2, [pc, #160]	; (8017498 <HAL_SPI_MspInit+0x11c>)
 80173f8:	4293      	cmp	r3, r2
 80173fa:	d144      	bne.n	8017486 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80173fc:	4b25      	ldr	r3, [pc, #148]	; (8017494 <HAL_SPI_MspInit+0x118>)
 80173fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017400:	4a24      	ldr	r2, [pc, #144]	; (8017494 <HAL_SPI_MspInit+0x118>)
 8017402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017406:	6593      	str	r3, [r2, #88]	; 0x58
 8017408:	4b22      	ldr	r3, [pc, #136]	; (8017494 <HAL_SPI_MspInit+0x118>)
 801740a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801740c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017410:	613b      	str	r3, [r7, #16]
 8017412:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8017414:	4b1f      	ldr	r3, [pc, #124]	; (8017494 <HAL_SPI_MspInit+0x118>)
 8017416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017418:	4a1e      	ldr	r2, [pc, #120]	; (8017494 <HAL_SPI_MspInit+0x118>)
 801741a:	f043 0304 	orr.w	r3, r3, #4
 801741e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017420:	4b1c      	ldr	r3, [pc, #112]	; (8017494 <HAL_SPI_MspInit+0x118>)
 8017422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017424:	f003 0304 	and.w	r3, r3, #4
 8017428:	60fb      	str	r3, [r7, #12]
 801742a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801742c:	4b19      	ldr	r3, [pc, #100]	; (8017494 <HAL_SPI_MspInit+0x118>)
 801742e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017430:	4a18      	ldr	r2, [pc, #96]	; (8017494 <HAL_SPI_MspInit+0x118>)
 8017432:	f043 0302 	orr.w	r3, r3, #2
 8017436:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017438:	4b16      	ldr	r3, [pc, #88]	; (8017494 <HAL_SPI_MspInit+0x118>)
 801743a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801743c:	f003 0302 	and.w	r3, r3, #2
 8017440:	60bb      	str	r3, [r7, #8]
 8017442:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8017444:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8017448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801744a:	2302      	movs	r3, #2
 801744c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801744e:	2300      	movs	r3, #0
 8017450:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017452:	2300      	movs	r3, #0
 8017454:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8017456:	2306      	movs	r3, #6
 8017458:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801745a:	f107 031c 	add.w	r3, r7, #28
 801745e:	4619      	mov	r1, r3
 8017460:	480e      	ldr	r0, [pc, #56]	; (801749c <HAL_SPI_MspInit+0x120>)
 8017462:	f004 fcb3 	bl	801bdcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8017466:	2320      	movs	r3, #32
 8017468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801746a:	2302      	movs	r3, #2
 801746c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801746e:	2300      	movs	r3, #0
 8017470:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017472:	2300      	movs	r3, #0
 8017474:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8017476:	2306      	movs	r3, #6
 8017478:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801747a:	f107 031c 	add.w	r3, r7, #28
 801747e:	4619      	mov	r1, r3
 8017480:	4807      	ldr	r0, [pc, #28]	; (80174a0 <HAL_SPI_MspInit+0x124>)
 8017482:	f004 fca3 	bl	801bdcc <HAL_GPIO_Init>
}
 8017486:	bf00      	nop
 8017488:	3730      	adds	r7, #48	; 0x30
 801748a:	46bd      	mov	sp, r7
 801748c:	bd80      	pop	{r7, pc}
 801748e:	bf00      	nop
 8017490:	40013000 	.word	0x40013000
 8017494:	40021000 	.word	0x40021000
 8017498:	40003c00 	.word	0x40003c00
 801749c:	48000800 	.word	0x48000800
 80174a0:	48000400 	.word	0x48000400

080174a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80174a4:	b580      	push	{r7, lr}
 80174a6:	b082      	sub	sp, #8
 80174a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80174aa:	4b0f      	ldr	r3, [pc, #60]	; (80174e8 <HAL_MspInit+0x44>)
 80174ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80174ae:	4a0e      	ldr	r2, [pc, #56]	; (80174e8 <HAL_MspInit+0x44>)
 80174b0:	f043 0301 	orr.w	r3, r3, #1
 80174b4:	6613      	str	r3, [r2, #96]	; 0x60
 80174b6:	4b0c      	ldr	r3, [pc, #48]	; (80174e8 <HAL_MspInit+0x44>)
 80174b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80174ba:	f003 0301 	and.w	r3, r3, #1
 80174be:	607b      	str	r3, [r7, #4]
 80174c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80174c2:	4b09      	ldr	r3, [pc, #36]	; (80174e8 <HAL_MspInit+0x44>)
 80174c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80174c6:	4a08      	ldr	r2, [pc, #32]	; (80174e8 <HAL_MspInit+0x44>)
 80174c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80174cc:	6593      	str	r3, [r2, #88]	; 0x58
 80174ce:	4b06      	ldr	r3, [pc, #24]	; (80174e8 <HAL_MspInit+0x44>)
 80174d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80174d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80174d6:	603b      	str	r3, [r7, #0]
 80174d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80174da:	f004 feb5 	bl	801c248 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80174de:	bf00      	nop
 80174e0:	3708      	adds	r7, #8
 80174e2:	46bd      	mov	sp, r7
 80174e4:	bd80      	pop	{r7, pc}
 80174e6:	bf00      	nop
 80174e8:	40021000 	.word	0x40021000

080174ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80174ec:	b480      	push	{r7}
 80174ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80174f0:	e7fe      	b.n	80174f0 <NMI_Handler+0x4>

080174f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80174f2:	b480      	push	{r7}
 80174f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80174f6:	e7fe      	b.n	80174f6 <HardFault_Handler+0x4>

080174f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80174f8:	b480      	push	{r7}
 80174fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80174fc:	e7fe      	b.n	80174fc <MemManage_Handler+0x4>

080174fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80174fe:	b480      	push	{r7}
 8017500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8017502:	e7fe      	b.n	8017502 <BusFault_Handler+0x4>

08017504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8017504:	b480      	push	{r7}
 8017506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8017508:	e7fe      	b.n	8017508 <UsageFault_Handler+0x4>

0801750a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801750a:	b480      	push	{r7}
 801750c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801750e:	bf00      	nop
 8017510:	46bd      	mov	sp, r7
 8017512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017516:	4770      	bx	lr

08017518 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8017518:	b480      	push	{r7}
 801751a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801751c:	bf00      	nop
 801751e:	46bd      	mov	sp, r7
 8017520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017524:	4770      	bx	lr

08017526 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8017526:	b480      	push	{r7}
 8017528:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801752a:	bf00      	nop
 801752c:	46bd      	mov	sp, r7
 801752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017532:	4770      	bx	lr

08017534 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8017534:	b580      	push	{r7, lr}
 8017536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8017538:	f001 fbf0 	bl	8018d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801753c:	bf00      	nop
 801753e:	bd80      	pop	{r7, pc}

08017540 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8017540:	b580      	push	{r7, lr}
 8017542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8017544:	4802      	ldr	r0, [pc, #8]	; (8017550 <DMA1_Channel1_IRQHandler+0x10>)
 8017546:	f004 f889 	bl	801b65c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 801754a:	bf00      	nop
 801754c:	bd80      	pop	{r7, pc}
 801754e:	bf00      	nop
 8017550:	200007a0 	.word	0x200007a0

08017554 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8017554:	b580      	push	{r7, lr}
 8017556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8017558:	4802      	ldr	r0, [pc, #8]	; (8017564 <ADC1_2_IRQHandler+0x10>)
 801755a:	f002 fb8f 	bl	8019c7c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
//  pl_callback_getSensor();
  /* USER CODE END ADC1_2_IRQn 1 */
}
 801755e:	bf00      	nop
 8017560:	bd80      	pop	{r7, pc}
 8017562:	bf00      	nop
 8017564:	20000734 	.word	0x20000734

08017568 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8017568:	b580      	push	{r7, lr}
 801756a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 801756c:	480d      	ldr	r0, [pc, #52]	; (80175a4 <TIM6_DAC_IRQHandler+0x3c>)
 801756e:	f006 ffc7 	bl	801e500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  interrupt_timer();
 8017572:	f7f0 fc41 	bl	8007df8 <interrupt_timer>
  interupt_calSensor();
 8017576:	f7ea fb7d 	bl	8001c74 <interupt_calSensor>
  ICM20602_DataUpdate();
 801757a:	f7f0 f95f 	bl	800783c <ICM20602_DataUpdate>
  interrupt_calGyro();
 801757e:	f7ea f987 	bl	8001890 <interrupt_calGyro>
  AS5047_DataUpdate();
 8017582:	f7ef fe17 	bl	80071b4 <AS5047_DataUpdate>
  interupt_calEncoder();
 8017586:	f7e9 fd7b 	bl	8001080 <interupt_calEncoder>
  interupt_calFusion();
 801758a:	f7e9 ff89 	bl	80014a0 <interupt_calFusion>
  interrupt_WallCut();
 801758e:	f7ee fd7f 	bl	8006090 <interrupt_WallCut>
  interupt_DriveMotor();
 8017592:	f7ea fce1 	bl	8001f58 <interupt_DriveMotor>

  interrupt_FailSafe();
 8017596:	f7f2 f977 	bl	8009888 <interrupt_FailSafe>
  interrupt_record();
 801759a:	f7ff fce1 	bl	8016f60 <interrupt_record>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 801759e:	bf00      	nop
 80175a0:	bd80      	pop	{r7, pc}
 80175a2:	bf00      	nop
 80175a4:	2000ee9c 	.word	0x2000ee9c

080175a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80175a8:	b480      	push	{r7}
 80175aa:	af00      	add	r7, sp, #0
	return 1;
 80175ac:	2301      	movs	r3, #1
}
 80175ae:	4618      	mov	r0, r3
 80175b0:	46bd      	mov	sp, r7
 80175b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175b6:	4770      	bx	lr

080175b8 <_kill>:

int _kill(int pid, int sig)
{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	b082      	sub	sp, #8
 80175bc:	af00      	add	r7, sp, #0
 80175be:	6078      	str	r0, [r7, #4]
 80175c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80175c2:	f008 fe71 	bl	80202a8 <__errno>
 80175c6:	4603      	mov	r3, r0
 80175c8:	2216      	movs	r2, #22
 80175ca:	601a      	str	r2, [r3, #0]
	return -1;
 80175cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80175d0:	4618      	mov	r0, r3
 80175d2:	3708      	adds	r7, #8
 80175d4:	46bd      	mov	sp, r7
 80175d6:	bd80      	pop	{r7, pc}

080175d8 <_exit>:

void _exit (int status)
{
 80175d8:	b580      	push	{r7, lr}
 80175da:	b082      	sub	sp, #8
 80175dc:	af00      	add	r7, sp, #0
 80175de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80175e0:	f04f 31ff 	mov.w	r1, #4294967295
 80175e4:	6878      	ldr	r0, [r7, #4]
 80175e6:	f7ff ffe7 	bl	80175b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80175ea:	e7fe      	b.n	80175ea <_exit+0x12>

080175ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80175ec:	b580      	push	{r7, lr}
 80175ee:	b086      	sub	sp, #24
 80175f0:	af00      	add	r7, sp, #0
 80175f2:	60f8      	str	r0, [r7, #12]
 80175f4:	60b9      	str	r1, [r7, #8]
 80175f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80175f8:	2300      	movs	r3, #0
 80175fa:	617b      	str	r3, [r7, #20]
 80175fc:	e00a      	b.n	8017614 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80175fe:	f3af 8000 	nop.w
 8017602:	4601      	mov	r1, r0
 8017604:	68bb      	ldr	r3, [r7, #8]
 8017606:	1c5a      	adds	r2, r3, #1
 8017608:	60ba      	str	r2, [r7, #8]
 801760a:	b2ca      	uxtb	r2, r1
 801760c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801760e:	697b      	ldr	r3, [r7, #20]
 8017610:	3301      	adds	r3, #1
 8017612:	617b      	str	r3, [r7, #20]
 8017614:	697a      	ldr	r2, [r7, #20]
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	429a      	cmp	r2, r3
 801761a:	dbf0      	blt.n	80175fe <_read+0x12>
	}

return len;
 801761c:	687b      	ldr	r3, [r7, #4]
}
 801761e:	4618      	mov	r0, r3
 8017620:	3718      	adds	r7, #24
 8017622:	46bd      	mov	sp, r7
 8017624:	bd80      	pop	{r7, pc}
	...

08017628 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8017628:	b580      	push	{r7, lr}
 801762a:	b086      	sub	sp, #24
 801762c:	af00      	add	r7, sp, #0
 801762e:	60f8      	str	r0, [r7, #12]
 8017630:	60b9      	str	r1, [r7, #8]
 8017632:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017634:	2300      	movs	r3, #0
 8017636:	617b      	str	r3, [r7, #20]
 8017638:	e00a      	b.n	8017650 <_write+0x28>
	{
		HAL_UART_Transmit(&huart1, ptr++, 1, 1);
 801763a:	68b9      	ldr	r1, [r7, #8]
 801763c:	1c4b      	adds	r3, r1, #1
 801763e:	60bb      	str	r3, [r7, #8]
 8017640:	2301      	movs	r3, #1
 8017642:	2201      	movs	r2, #1
 8017644:	4807      	ldr	r0, [pc, #28]	; (8017664 <_write+0x3c>)
 8017646:	f007 ffe5 	bl	801f614 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801764a:	697b      	ldr	r3, [r7, #20]
 801764c:	3301      	adds	r3, #1
 801764e:	617b      	str	r3, [r7, #20]
 8017650:	697a      	ldr	r2, [r7, #20]
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	429a      	cmp	r2, r3
 8017656:	dbf0      	blt.n	801763a <_write+0x12>
	}
	return len;
 8017658:	687b      	ldr	r3, [r7, #4]
}
 801765a:	4618      	mov	r0, r3
 801765c:	3718      	adds	r7, #24
 801765e:	46bd      	mov	sp, r7
 8017660:	bd80      	pop	{r7, pc}
 8017662:	bf00      	nop
 8017664:	2000f878 	.word	0x2000f878

08017668 <_close>:

int _close(int file)
{
 8017668:	b480      	push	{r7}
 801766a:	b083      	sub	sp, #12
 801766c:	af00      	add	r7, sp, #0
 801766e:	6078      	str	r0, [r7, #4]
	return -1;
 8017670:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017674:	4618      	mov	r0, r3
 8017676:	370c      	adds	r7, #12
 8017678:	46bd      	mov	sp, r7
 801767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801767e:	4770      	bx	lr

08017680 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8017680:	b480      	push	{r7}
 8017682:	b083      	sub	sp, #12
 8017684:	af00      	add	r7, sp, #0
 8017686:	6078      	str	r0, [r7, #4]
 8017688:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801768a:	683b      	ldr	r3, [r7, #0]
 801768c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017690:	605a      	str	r2, [r3, #4]
	return 0;
 8017692:	2300      	movs	r3, #0
}
 8017694:	4618      	mov	r0, r3
 8017696:	370c      	adds	r7, #12
 8017698:	46bd      	mov	sp, r7
 801769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801769e:	4770      	bx	lr

080176a0 <_isatty>:

int _isatty(int file)
{
 80176a0:	b480      	push	{r7}
 80176a2:	b083      	sub	sp, #12
 80176a4:	af00      	add	r7, sp, #0
 80176a6:	6078      	str	r0, [r7, #4]
	return 1;
 80176a8:	2301      	movs	r3, #1
}
 80176aa:	4618      	mov	r0, r3
 80176ac:	370c      	adds	r7, #12
 80176ae:	46bd      	mov	sp, r7
 80176b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176b4:	4770      	bx	lr

080176b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80176b6:	b480      	push	{r7}
 80176b8:	b085      	sub	sp, #20
 80176ba:	af00      	add	r7, sp, #0
 80176bc:	60f8      	str	r0, [r7, #12]
 80176be:	60b9      	str	r1, [r7, #8]
 80176c0:	607a      	str	r2, [r7, #4]
	return 0;
 80176c2:	2300      	movs	r3, #0
}
 80176c4:	4618      	mov	r0, r3
 80176c6:	3714      	adds	r7, #20
 80176c8:	46bd      	mov	sp, r7
 80176ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ce:	4770      	bx	lr

080176d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80176d0:	b580      	push	{r7, lr}
 80176d2:	b086      	sub	sp, #24
 80176d4:	af00      	add	r7, sp, #0
 80176d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80176d8:	4a14      	ldr	r2, [pc, #80]	; (801772c <_sbrk+0x5c>)
 80176da:	4b15      	ldr	r3, [pc, #84]	; (8017730 <_sbrk+0x60>)
 80176dc:	1ad3      	subs	r3, r2, r3
 80176de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80176e0:	697b      	ldr	r3, [r7, #20]
 80176e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80176e4:	4b13      	ldr	r3, [pc, #76]	; (8017734 <_sbrk+0x64>)
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d102      	bne.n	80176f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80176ec:	4b11      	ldr	r3, [pc, #68]	; (8017734 <_sbrk+0x64>)
 80176ee:	4a12      	ldr	r2, [pc, #72]	; (8017738 <_sbrk+0x68>)
 80176f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80176f2:	4b10      	ldr	r3, [pc, #64]	; (8017734 <_sbrk+0x64>)
 80176f4:	681a      	ldr	r2, [r3, #0]
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	4413      	add	r3, r2
 80176fa:	693a      	ldr	r2, [r7, #16]
 80176fc:	429a      	cmp	r2, r3
 80176fe:	d207      	bcs.n	8017710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8017700:	f008 fdd2 	bl	80202a8 <__errno>
 8017704:	4603      	mov	r3, r0
 8017706:	220c      	movs	r2, #12
 8017708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801770a:	f04f 33ff 	mov.w	r3, #4294967295
 801770e:	e009      	b.n	8017724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8017710:	4b08      	ldr	r3, [pc, #32]	; (8017734 <_sbrk+0x64>)
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8017716:	4b07      	ldr	r3, [pc, #28]	; (8017734 <_sbrk+0x64>)
 8017718:	681a      	ldr	r2, [r3, #0]
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	4413      	add	r3, r2
 801771e:	4a05      	ldr	r2, [pc, #20]	; (8017734 <_sbrk+0x64>)
 8017720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8017722:	68fb      	ldr	r3, [r7, #12]
}
 8017724:	4618      	mov	r0, r3
 8017726:	3718      	adds	r7, #24
 8017728:	46bd      	mov	sp, r7
 801772a:	bd80      	pop	{r7, pc}
 801772c:	2001c000 	.word	0x2001c000
 8017730:	00000400 	.word	0x00000400
 8017734:	2000ee98 	.word	0x2000ee98
 8017738:	2000f920 	.word	0x2000f920

0801773c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 801773c:	b480      	push	{r7}
 801773e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8017740:	4b06      	ldr	r3, [pc, #24]	; (801775c <SystemInit+0x20>)
 8017742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017746:	4a05      	ldr	r2, [pc, #20]	; (801775c <SystemInit+0x20>)
 8017748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801774c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8017750:	bf00      	nop
 8017752:	46bd      	mov	sp, r7
 8017754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017758:	4770      	bx	lr
 801775a:	bf00      	nop
 801775c:	e000ed00 	.word	0xe000ed00

08017760 <MX_TIM6_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8017760:	b580      	push	{r7, lr}
 8017762:	b084      	sub	sp, #16
 8017764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017766:	1d3b      	adds	r3, r7, #4
 8017768:	2200      	movs	r2, #0
 801776a:	601a      	str	r2, [r3, #0]
 801776c:	605a      	str	r2, [r3, #4]
 801776e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8017770:	4b14      	ldr	r3, [pc, #80]	; (80177c4 <MX_TIM6_Init+0x64>)
 8017772:	4a15      	ldr	r2, [pc, #84]	; (80177c8 <MX_TIM6_Init+0x68>)
 8017774:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 85-1;
 8017776:	4b13      	ldr	r3, [pc, #76]	; (80177c4 <MX_TIM6_Init+0x64>)
 8017778:	2254      	movs	r2, #84	; 0x54
 801777a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 801777c:	4b11      	ldr	r3, [pc, #68]	; (80177c4 <MX_TIM6_Init+0x64>)
 801777e:	2200      	movs	r2, #0
 8017780:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8017782:	4b10      	ldr	r3, [pc, #64]	; (80177c4 <MX_TIM6_Init+0x64>)
 8017784:	f240 32e7 	movw	r2, #999	; 0x3e7
 8017788:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801778a:	4b0e      	ldr	r3, [pc, #56]	; (80177c4 <MX_TIM6_Init+0x64>)
 801778c:	2200      	movs	r2, #0
 801778e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8017790:	480c      	ldr	r0, [pc, #48]	; (80177c4 <MX_TIM6_Init+0x64>)
 8017792:	f006 fbed 	bl	801df70 <HAL_TIM_Base_Init>
 8017796:	4603      	mov	r3, r0
 8017798:	2b00      	cmp	r3, #0
 801779a:	d001      	beq.n	80177a0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 801779c:	f7f2 fb1d 	bl	8009dda <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80177a0:	2300      	movs	r3, #0
 80177a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80177a4:	2300      	movs	r3, #0
 80177a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80177a8:	1d3b      	adds	r3, r7, #4
 80177aa:	4619      	mov	r1, r3
 80177ac:	4805      	ldr	r0, [pc, #20]	; (80177c4 <MX_TIM6_Init+0x64>)
 80177ae:	f007 fd5b 	bl	801f268 <HAL_TIMEx_MasterConfigSynchronization>
 80177b2:	4603      	mov	r3, r0
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d001      	beq.n	80177bc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80177b8:	f7f2 fb0f 	bl	8009dda <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80177bc:	bf00      	nop
 80177be:	3710      	adds	r7, #16
 80177c0:	46bd      	mov	sp, r7
 80177c2:	bd80      	pop	{r7, pc}
 80177c4:	2000ee9c 	.word	0x2000ee9c
 80177c8:	40001000 	.word	0x40001000

080177cc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80177cc:	b580      	push	{r7, lr}
 80177ce:	b098      	sub	sp, #96	; 0x60
 80177d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80177d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80177d6:	2200      	movs	r2, #0
 80177d8:	601a      	str	r2, [r3, #0]
 80177da:	605a      	str	r2, [r3, #4]
 80177dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80177de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80177e2:	2200      	movs	r2, #0
 80177e4:	601a      	str	r2, [r3, #0]
 80177e6:	605a      	str	r2, [r3, #4]
 80177e8:	609a      	str	r2, [r3, #8]
 80177ea:	60da      	str	r2, [r3, #12]
 80177ec:	611a      	str	r2, [r3, #16]
 80177ee:	615a      	str	r2, [r3, #20]
 80177f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80177f2:	1d3b      	adds	r3, r7, #4
 80177f4:	2234      	movs	r2, #52	; 0x34
 80177f6:	2100      	movs	r1, #0
 80177f8:	4618      	mov	r0, r3
 80177fa:	f008 fd8d 	bl	8020318 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80177fe:	4b41      	ldr	r3, [pc, #260]	; (8017904 <MX_TIM8_Init+0x138>)
 8017800:	4a41      	ldr	r2, [pc, #260]	; (8017908 <MX_TIM8_Init+0x13c>)
 8017802:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 8017804:	4b3f      	ldr	r3, [pc, #252]	; (8017904 <MX_TIM8_Init+0x138>)
 8017806:	2201      	movs	r2, #1
 8017808:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 801780a:	4b3e      	ldr	r3, [pc, #248]	; (8017904 <MX_TIM8_Init+0x138>)
 801780c:	2200      	movs	r2, #0
 801780e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 8017810:	4b3c      	ldr	r3, [pc, #240]	; (8017904 <MX_TIM8_Init+0x138>)
 8017812:	f240 628f 	movw	r2, #1679	; 0x68f
 8017816:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017818:	4b3a      	ldr	r3, [pc, #232]	; (8017904 <MX_TIM8_Init+0x138>)
 801781a:	2200      	movs	r2, #0
 801781c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 801781e:	4b39      	ldr	r3, [pc, #228]	; (8017904 <MX_TIM8_Init+0x138>)
 8017820:	2200      	movs	r2, #0
 8017822:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017824:	4b37      	ldr	r3, [pc, #220]	; (8017904 <MX_TIM8_Init+0x138>)
 8017826:	2200      	movs	r2, #0
 8017828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 801782a:	4836      	ldr	r0, [pc, #216]	; (8017904 <MX_TIM8_Init+0x138>)
 801782c:	f006 fc68 	bl	801e100 <HAL_TIM_PWM_Init>
 8017830:	4603      	mov	r3, r0
 8017832:	2b00      	cmp	r3, #0
 8017834:	d001      	beq.n	801783a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8017836:	f7f2 fad0 	bl	8009dda <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801783a:	2300      	movs	r3, #0
 801783c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801783e:	2300      	movs	r3, #0
 8017840:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017842:	2300      	movs	r3, #0
 8017844:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8017846:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801784a:	4619      	mov	r1, r3
 801784c:	482d      	ldr	r0, [pc, #180]	; (8017904 <MX_TIM8_Init+0x138>)
 801784e:	f007 fd0b 	bl	801f268 <HAL_TIMEx_MasterConfigSynchronization>
 8017852:	4603      	mov	r3, r0
 8017854:	2b00      	cmp	r3, #0
 8017856:	d001      	beq.n	801785c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8017858:	f7f2 fabf 	bl	8009dda <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801785c:	2360      	movs	r3, #96	; 0x60
 801785e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 419;
 8017860:	f240 13a3 	movw	r3, #419	; 0x1a3
 8017864:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8017866:	2300      	movs	r3, #0
 8017868:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 801786a:	2300      	movs	r3, #0
 801786c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801786e:	2300      	movs	r3, #0
 8017870:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8017872:	2300      	movs	r3, #0
 8017874:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8017876:	2300      	movs	r3, #0
 8017878:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801787a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801787e:	2200      	movs	r2, #0
 8017880:	4619      	mov	r1, r3
 8017882:	4820      	ldr	r0, [pc, #128]	; (8017904 <MX_TIM8_Init+0x138>)
 8017884:	f006 ffbc 	bl	801e800 <HAL_TIM_PWM_ConfigChannel>
 8017888:	4603      	mov	r3, r0
 801788a:	2b00      	cmp	r3, #0
 801788c:	d001      	beq.n	8017892 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 801788e:	f7f2 faa4 	bl	8009dda <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8017892:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017896:	2208      	movs	r2, #8
 8017898:	4619      	mov	r1, r3
 801789a:	481a      	ldr	r0, [pc, #104]	; (8017904 <MX_TIM8_Init+0x138>)
 801789c:	f006 ffb0 	bl	801e800 <HAL_TIM_PWM_ConfigChannel>
 80178a0:	4603      	mov	r3, r0
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d001      	beq.n	80178aa <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 80178a6:	f7f2 fa98 	bl	8009dda <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80178aa:	2300      	movs	r3, #0
 80178ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80178ae:	2300      	movs	r3, #0
 80178b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80178b2:	2300      	movs	r3, #0
 80178b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80178b6:	2300      	movs	r3, #0
 80178b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80178ba:	2300      	movs	r3, #0
 80178bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80178be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80178c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80178c4:	2300      	movs	r3, #0
 80178c6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80178c8:	2300      	movs	r3, #0
 80178ca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80178cc:	2300      	movs	r3, #0
 80178ce:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80178d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80178d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80178d6:	2300      	movs	r3, #0
 80178d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80178da:	2300      	movs	r3, #0
 80178dc:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80178de:	2300      	movs	r3, #0
 80178e0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80178e2:	1d3b      	adds	r3, r7, #4
 80178e4:	4619      	mov	r1, r3
 80178e6:	4807      	ldr	r0, [pc, #28]	; (8017904 <MX_TIM8_Init+0x138>)
 80178e8:	f007 fd4c 	bl	801f384 <HAL_TIMEx_ConfigBreakDeadTime>
 80178ec:	4603      	mov	r3, r0
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	d001      	beq.n	80178f6 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 80178f2:	f7f2 fa72 	bl	8009dda <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80178f6:	4803      	ldr	r0, [pc, #12]	; (8017904 <MX_TIM8_Init+0x138>)
 80178f8:	f000 f8da 	bl	8017ab0 <HAL_TIM_MspPostInit>

}
 80178fc:	bf00      	nop
 80178fe:	3760      	adds	r7, #96	; 0x60
 8017900:	46bd      	mov	sp, r7
 8017902:	bd80      	pop	{r7, pc}
 8017904:	2000eee8 	.word	0x2000eee8
 8017908:	40013400 	.word	0x40013400

0801790c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 801790c:	b580      	push	{r7, lr}
 801790e:	b094      	sub	sp, #80	; 0x50
 8017910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8017912:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017916:	2200      	movs	r2, #0
 8017918:	601a      	str	r2, [r3, #0]
 801791a:	605a      	str	r2, [r3, #4]
 801791c:	609a      	str	r2, [r3, #8]
 801791e:	60da      	str	r2, [r3, #12]
 8017920:	611a      	str	r2, [r3, #16]
 8017922:	615a      	str	r2, [r3, #20]
 8017924:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8017926:	463b      	mov	r3, r7
 8017928:	2234      	movs	r2, #52	; 0x34
 801792a:	2100      	movs	r1, #0
 801792c:	4618      	mov	r0, r3
 801792e:	f008 fcf3 	bl	8020318 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8017932:	4b30      	ldr	r3, [pc, #192]	; (80179f4 <MX_TIM16_Init+0xe8>)
 8017934:	4a30      	ldr	r2, [pc, #192]	; (80179f8 <MX_TIM16_Init+0xec>)
 8017936:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2-1;
 8017938:	4b2e      	ldr	r3, [pc, #184]	; (80179f4 <MX_TIM16_Init+0xe8>)
 801793a:	2201      	movs	r2, #1
 801793c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 801793e:	4b2d      	ldr	r3, [pc, #180]	; (80179f4 <MX_TIM16_Init+0xe8>)
 8017940:	2200      	movs	r2, #0
 8017942:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 8017944:	4b2b      	ldr	r3, [pc, #172]	; (80179f4 <MX_TIM16_Init+0xe8>)
 8017946:	2264      	movs	r2, #100	; 0x64
 8017948:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801794a:	4b2a      	ldr	r3, [pc, #168]	; (80179f4 <MX_TIM16_Init+0xe8>)
 801794c:	2200      	movs	r2, #0
 801794e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8017950:	4b28      	ldr	r3, [pc, #160]	; (80179f4 <MX_TIM16_Init+0xe8>)
 8017952:	2200      	movs	r2, #0
 8017954:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017956:	4b27      	ldr	r3, [pc, #156]	; (80179f4 <MX_TIM16_Init+0xe8>)
 8017958:	2200      	movs	r2, #0
 801795a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 801795c:	4825      	ldr	r0, [pc, #148]	; (80179f4 <MX_TIM16_Init+0xe8>)
 801795e:	f006 fb07 	bl	801df70 <HAL_TIM_Base_Init>
 8017962:	4603      	mov	r3, r0
 8017964:	2b00      	cmp	r3, #0
 8017966:	d001      	beq.n	801796c <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8017968:	f7f2 fa37 	bl	8009dda <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 801796c:	4821      	ldr	r0, [pc, #132]	; (80179f4 <MX_TIM16_Init+0xe8>)
 801796e:	f006 fbc7 	bl	801e100 <HAL_TIM_PWM_Init>
 8017972:	4603      	mov	r3, r0
 8017974:	2b00      	cmp	r3, #0
 8017976:	d001      	beq.n	801797c <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8017978:	f7f2 fa2f 	bl	8009dda <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801797c:	2360      	movs	r3, #96	; 0x60
 801797e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 30;
 8017980:	231e      	movs	r3, #30
 8017982:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8017984:	2300      	movs	r3, #0
 8017986:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8017988:	2300      	movs	r3, #0
 801798a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801798c:	2300      	movs	r3, #0
 801798e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8017990:	2300      	movs	r3, #0
 8017992:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8017994:	2300      	movs	r3, #0
 8017996:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8017998:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801799c:	2200      	movs	r2, #0
 801799e:	4619      	mov	r1, r3
 80179a0:	4814      	ldr	r0, [pc, #80]	; (80179f4 <MX_TIM16_Init+0xe8>)
 80179a2:	f006 ff2d 	bl	801e800 <HAL_TIM_PWM_ConfigChannel>
 80179a6:	4603      	mov	r3, r0
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d001      	beq.n	80179b0 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 80179ac:	f7f2 fa15 	bl	8009dda <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80179b0:	2300      	movs	r3, #0
 80179b2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80179b4:	2300      	movs	r3, #0
 80179b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80179b8:	2300      	movs	r3, #0
 80179ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80179bc:	2300      	movs	r3, #0
 80179be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80179c0:	2300      	movs	r3, #0
 80179c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80179c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80179c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80179ca:	2300      	movs	r3, #0
 80179cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80179ce:	2300      	movs	r3, #0
 80179d0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80179d2:	463b      	mov	r3, r7
 80179d4:	4619      	mov	r1, r3
 80179d6:	4807      	ldr	r0, [pc, #28]	; (80179f4 <MX_TIM16_Init+0xe8>)
 80179d8:	f007 fcd4 	bl	801f384 <HAL_TIMEx_ConfigBreakDeadTime>
 80179dc:	4603      	mov	r3, r0
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d001      	beq.n	80179e6 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 80179e2:	f7f2 f9fa 	bl	8009dda <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80179e6:	4803      	ldr	r0, [pc, #12]	; (80179f4 <MX_TIM16_Init+0xe8>)
 80179e8:	f000 f862 	bl	8017ab0 <HAL_TIM_MspPostInit>

}
 80179ec:	bf00      	nop
 80179ee:	3750      	adds	r7, #80	; 0x50
 80179f0:	46bd      	mov	sp, r7
 80179f2:	bd80      	pop	{r7, pc}
 80179f4:	2000ef34 	.word	0x2000ef34
 80179f8:	40014400 	.word	0x40014400

080179fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80179fc:	b580      	push	{r7, lr}
 80179fe:	b084      	sub	sp, #16
 8017a00:	af00      	add	r7, sp, #0
 8017a02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	681b      	ldr	r3, [r3, #0]
 8017a08:	4a16      	ldr	r2, [pc, #88]	; (8017a64 <HAL_TIM_Base_MspInit+0x68>)
 8017a0a:	4293      	cmp	r3, r2
 8017a0c:	d114      	bne.n	8017a38 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8017a0e:	4b16      	ldr	r3, [pc, #88]	; (8017a68 <HAL_TIM_Base_MspInit+0x6c>)
 8017a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017a12:	4a15      	ldr	r2, [pc, #84]	; (8017a68 <HAL_TIM_Base_MspInit+0x6c>)
 8017a14:	f043 0310 	orr.w	r3, r3, #16
 8017a18:	6593      	str	r3, [r2, #88]	; 0x58
 8017a1a:	4b13      	ldr	r3, [pc, #76]	; (8017a68 <HAL_TIM_Base_MspInit+0x6c>)
 8017a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017a1e:	f003 0310 	and.w	r3, r3, #16
 8017a22:	60fb      	str	r3, [r7, #12]
 8017a24:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8017a26:	2200      	movs	r2, #0
 8017a28:	2103      	movs	r1, #3
 8017a2a:	2036      	movs	r0, #54	; 0x36
 8017a2c:	f003 fc65 	bl	801b2fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8017a30:	2036      	movs	r0, #54	; 0x36
 8017a32:	f003 fc7c 	bl	801b32e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8017a36:	e010      	b.n	8017a5a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM16)
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	681b      	ldr	r3, [r3, #0]
 8017a3c:	4a0b      	ldr	r2, [pc, #44]	; (8017a6c <HAL_TIM_Base_MspInit+0x70>)
 8017a3e:	4293      	cmp	r3, r2
 8017a40:	d10b      	bne.n	8017a5a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8017a42:	4b09      	ldr	r3, [pc, #36]	; (8017a68 <HAL_TIM_Base_MspInit+0x6c>)
 8017a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017a46:	4a08      	ldr	r2, [pc, #32]	; (8017a68 <HAL_TIM_Base_MspInit+0x6c>)
 8017a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017a4c:	6613      	str	r3, [r2, #96]	; 0x60
 8017a4e:	4b06      	ldr	r3, [pc, #24]	; (8017a68 <HAL_TIM_Base_MspInit+0x6c>)
 8017a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017a56:	60bb      	str	r3, [r7, #8]
 8017a58:	68bb      	ldr	r3, [r7, #8]
}
 8017a5a:	bf00      	nop
 8017a5c:	3710      	adds	r7, #16
 8017a5e:	46bd      	mov	sp, r7
 8017a60:	bd80      	pop	{r7, pc}
 8017a62:	bf00      	nop
 8017a64:	40001000 	.word	0x40001000
 8017a68:	40021000 	.word	0x40021000
 8017a6c:	40014400 	.word	0x40014400

08017a70 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8017a70:	b480      	push	{r7}
 8017a72:	b085      	sub	sp, #20
 8017a74:	af00      	add	r7, sp, #0
 8017a76:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	4a0a      	ldr	r2, [pc, #40]	; (8017aa8 <HAL_TIM_PWM_MspInit+0x38>)
 8017a7e:	4293      	cmp	r3, r2
 8017a80:	d10b      	bne.n	8017a9a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8017a82:	4b0a      	ldr	r3, [pc, #40]	; (8017aac <HAL_TIM_PWM_MspInit+0x3c>)
 8017a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017a86:	4a09      	ldr	r2, [pc, #36]	; (8017aac <HAL_TIM_PWM_MspInit+0x3c>)
 8017a88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017a8c:	6613      	str	r3, [r2, #96]	; 0x60
 8017a8e:	4b07      	ldr	r3, [pc, #28]	; (8017aac <HAL_TIM_PWM_MspInit+0x3c>)
 8017a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017a92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017a96:	60fb      	str	r3, [r7, #12]
 8017a98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8017a9a:	bf00      	nop
 8017a9c:	3714      	adds	r7, #20
 8017a9e:	46bd      	mov	sp, r7
 8017aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aa4:	4770      	bx	lr
 8017aa6:	bf00      	nop
 8017aa8:	40013400 	.word	0x40013400
 8017aac:	40021000 	.word	0x40021000

08017ab0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8017ab0:	b580      	push	{r7, lr}
 8017ab2:	b08a      	sub	sp, #40	; 0x28
 8017ab4:	af00      	add	r7, sp, #0
 8017ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017ab8:	f107 0314 	add.w	r3, r7, #20
 8017abc:	2200      	movs	r2, #0
 8017abe:	601a      	str	r2, [r3, #0]
 8017ac0:	605a      	str	r2, [r3, #4]
 8017ac2:	609a      	str	r2, [r3, #8]
 8017ac4:	60da      	str	r2, [r3, #12]
 8017ac6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	681b      	ldr	r3, [r3, #0]
 8017acc:	4a2b      	ldr	r2, [pc, #172]	; (8017b7c <HAL_TIM_MspPostInit+0xcc>)
 8017ace:	4293      	cmp	r3, r2
 8017ad0:	d12d      	bne.n	8017b2e <HAL_TIM_MspPostInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017ad2:	4b2b      	ldr	r3, [pc, #172]	; (8017b80 <HAL_TIM_MspPostInit+0xd0>)
 8017ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017ad6:	4a2a      	ldr	r2, [pc, #168]	; (8017b80 <HAL_TIM_MspPostInit+0xd0>)
 8017ad8:	f043 0302 	orr.w	r3, r3, #2
 8017adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017ade:	4b28      	ldr	r3, [pc, #160]	; (8017b80 <HAL_TIM_MspPostInit+0xd0>)
 8017ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017ae2:	f003 0302 	and.w	r3, r3, #2
 8017ae6:	613b      	str	r3, [r7, #16]
 8017ae8:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PB6     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_R_ENABLE_Pin;
 8017aea:	2340      	movs	r3, #64	; 0x40
 8017aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017aee:	2302      	movs	r3, #2
 8017af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017af2:	2300      	movs	r3, #0
 8017af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017af6:	2300      	movs	r3, #0
 8017af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8017afa:	2305      	movs	r3, #5
 8017afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_R_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8017afe:	f107 0314 	add.w	r3, r7, #20
 8017b02:	4619      	mov	r1, r3
 8017b04:	481f      	ldr	r0, [pc, #124]	; (8017b84 <HAL_TIM_MspPostInit+0xd4>)
 8017b06:	f004 f961 	bl	801bdcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_L_ENABLE_Pin;
 8017b0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017b10:	2302      	movs	r3, #2
 8017b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017b14:	2300      	movs	r3, #0
 8017b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017b18:	2300      	movs	r3, #0
 8017b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8017b1c:	230a      	movs	r3, #10
 8017b1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_L_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8017b20:	f107 0314 	add.w	r3, r7, #20
 8017b24:	4619      	mov	r1, r3
 8017b26:	4817      	ldr	r0, [pc, #92]	; (8017b84 <HAL_TIM_MspPostInit+0xd4>)
 8017b28:	f004 f950 	bl	801bdcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8017b2c:	e022      	b.n	8017b74 <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM16)
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	4a15      	ldr	r2, [pc, #84]	; (8017b88 <HAL_TIM_MspPostInit+0xd8>)
 8017b34:	4293      	cmp	r3, r2
 8017b36:	d11d      	bne.n	8017b74 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017b38:	4b11      	ldr	r3, [pc, #68]	; (8017b80 <HAL_TIM_MspPostInit+0xd0>)
 8017b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b3c:	4a10      	ldr	r2, [pc, #64]	; (8017b80 <HAL_TIM_MspPostInit+0xd0>)
 8017b3e:	f043 0301 	orr.w	r3, r3, #1
 8017b42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017b44:	4b0e      	ldr	r3, [pc, #56]	; (8017b80 <HAL_TIM_MspPostInit+0xd0>)
 8017b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b48:	f003 0301 	and.w	r3, r3, #1
 8017b4c:	60fb      	str	r3, [r7, #12]
 8017b4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_MOTOR_Pin;
 8017b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017b56:	2302      	movs	r3, #2
 8017b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017b5a:	2300      	movs	r3, #0
 8017b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017b5e:	2300      	movs	r3, #0
 8017b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8017b62:	2301      	movs	r3, #1
 8017b64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8017b66:	f107 0314 	add.w	r3, r7, #20
 8017b6a:	4619      	mov	r1, r3
 8017b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017b70:	f004 f92c 	bl	801bdcc <HAL_GPIO_Init>
}
 8017b74:	bf00      	nop
 8017b76:	3728      	adds	r7, #40	; 0x28
 8017b78:	46bd      	mov	sp, r7
 8017b7a:	bd80      	pop	{r7, pc}
 8017b7c:	40013400 	.word	0x40013400
 8017b80:	40021000 	.word	0x40021000
 8017b84:	48000400 	.word	0x48000400
 8017b88:	40014400 	.word	0x40014400

08017b8c <get_center_velocity>:
parameter_speed speed1000_shortest_mollifier;

parameter_speed speed1200_shortest_mollifier;
parameter_speed speed1600_shortest_mollifier;

float get_center_velocity(parameter_speed Howspeed, int pass_number) {
 8017b8c:	b084      	sub	sp, #16
 8017b8e:	b480      	push	{r7}
 8017b90:	b083      	sub	sp, #12
 8017b92:	af00      	add	r7, sp, #0
 8017b94:	f107 0c10 	add.w	ip, r7, #16
 8017b98:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float End_velocity;
	if (pass_number == -2) {
 8017b9c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017ba0:	f113 0f02 	cmn.w	r3, #2
 8017ba4:	d102      	bne.n	8017bac <get_center_velocity+0x20>
		End_velocity = Howspeed.slalom_R.g_speed;
 8017ba6:	69bb      	ldr	r3, [r7, #24]
 8017ba8:	607b      	str	r3, [r7, #4]
 8017baa:	e083      	b.n	8017cb4 <get_center_velocity+0x128>
	} else if (pass_number == -3) {
 8017bac:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017bb0:	f113 0f03 	cmn.w	r3, #3
 8017bb4:	d102      	bne.n	8017bbc <get_center_velocity+0x30>
		End_velocity = Howspeed.slalom_L.g_speed;
 8017bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bb8:	607b      	str	r3, [r7, #4]
 8017bba:	e07b      	b.n	8017cb4 <get_center_velocity+0x128>
	} else if (pass_number == -4) {
 8017bbc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017bc0:	f113 0f04 	cmn.w	r3, #4
 8017bc4:	d102      	bne.n	8017bcc <get_center_velocity+0x40>
		End_velocity = Howspeed.turn90_R.g_speed;
 8017bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017bc8:	607b      	str	r3, [r7, #4]
 8017bca:	e073      	b.n	8017cb4 <get_center_velocity+0x128>
	} else if (pass_number == -5) {
 8017bcc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017bd0:	f113 0f05 	cmn.w	r3, #5
 8017bd4:	d102      	bne.n	8017bdc <get_center_velocity+0x50>
		End_velocity = Howspeed.turn90_L.g_speed;
 8017bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017bd8:	607b      	str	r3, [r7, #4]
 8017bda:	e06b      	b.n	8017cb4 <get_center_velocity+0x128>
	} else if (pass_number == -6) {
 8017bdc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017be0:	f113 0f06 	cmn.w	r3, #6
 8017be4:	d102      	bne.n	8017bec <get_center_velocity+0x60>
		End_velocity = Howspeed.turn180_R.g_speed;
 8017be6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017be8:	607b      	str	r3, [r7, #4]
 8017bea:	e063      	b.n	8017cb4 <get_center_velocity+0x128>
	} else if (pass_number == -7) {
 8017bec:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017bf0:	f113 0f07 	cmn.w	r3, #7
 8017bf4:	d102      	bne.n	8017bfc <get_center_velocity+0x70>
		End_velocity = Howspeed.turn180_L.g_speed;
 8017bf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017bf8:	607b      	str	r3, [r7, #4]
 8017bfa:	e05b      	b.n	8017cb4 <get_center_velocity+0x128>
	} else if (pass_number == -8) {
 8017bfc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017c00:	f113 0f08 	cmn.w	r3, #8
 8017c04:	d103      	bne.n	8017c0e <get_center_velocity+0x82>
		End_velocity = Howspeed.turn45in_R.g_speed;
 8017c06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017c0a:	607b      	str	r3, [r7, #4]
 8017c0c:	e052      	b.n	8017cb4 <get_center_velocity+0x128>
	} else if (pass_number == -9) {
 8017c0e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017c12:	f113 0f09 	cmn.w	r3, #9
 8017c16:	d103      	bne.n	8017c20 <get_center_velocity+0x94>
		End_velocity = Howspeed.turn45in_L.g_speed;
 8017c18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017c1c:	607b      	str	r3, [r7, #4]
 8017c1e:	e049      	b.n	8017cb4 <get_center_velocity+0x128>
	} else if (pass_number == -10) {
 8017c20:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017c24:	f113 0f0a 	cmn.w	r3, #10
 8017c28:	d103      	bne.n	8017c32 <get_center_velocity+0xa6>
		End_velocity = Howspeed.turn135in_R.g_speed;
 8017c2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017c2e:	607b      	str	r3, [r7, #4]
 8017c30:	e040      	b.n	8017cb4 <get_center_velocity+0x128>
	} else if (pass_number == -11) {
 8017c32:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017c36:	f113 0f0b 	cmn.w	r3, #11
 8017c3a:	d103      	bne.n	8017c44 <get_center_velocity+0xb8>
		End_velocity = Howspeed.turn135in_L.g_speed;
 8017c3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8017c40:	607b      	str	r3, [r7, #4]
 8017c42:	e037      	b.n	8017cb4 <get_center_velocity+0x128>
	} else if (pass_number == -12) {
 8017c44:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017c48:	f113 0f0c 	cmn.w	r3, #12
 8017c4c:	d103      	bne.n	8017c56 <get_center_velocity+0xca>
		End_velocity = Howspeed.turn45out_R.g_speed;
 8017c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017c52:	607b      	str	r3, [r7, #4]
 8017c54:	e02e      	b.n	8017cb4 <get_center_velocity+0x128>
	} else if (pass_number == -13) {
 8017c56:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017c5a:	f113 0f0d 	cmn.w	r3, #13
 8017c5e:	d103      	bne.n	8017c68 <get_center_velocity+0xdc>
		End_velocity = Howspeed.turn45out_L.g_speed;
 8017c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017c64:	607b      	str	r3, [r7, #4]
 8017c66:	e025      	b.n	8017cb4 <get_center_velocity+0x128>
	} else if (pass_number == -14) {
 8017c68:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017c6c:	f113 0f0e 	cmn.w	r3, #14
 8017c70:	d103      	bne.n	8017c7a <get_center_velocity+0xee>
		End_velocity = Howspeed.turn135out_R.g_speed;
 8017c72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8017c76:	607b      	str	r3, [r7, #4]
 8017c78:	e01c      	b.n	8017cb4 <get_center_velocity+0x128>
	} else if (pass_number == -15) {
 8017c7a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017c7e:	f113 0f0f 	cmn.w	r3, #15
 8017c82:	d103      	bne.n	8017c8c <get_center_velocity+0x100>
		End_velocity = Howspeed.turn135out_L.g_speed;
 8017c84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8017c88:	607b      	str	r3, [r7, #4]
 8017c8a:	e013      	b.n	8017cb4 <get_center_velocity+0x128>
	} else if (pass_number == -16) {
 8017c8c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017c90:	f113 0f10 	cmn.w	r3, #16
 8017c94:	d103      	bne.n	8017c9e <get_center_velocity+0x112>
		End_velocity = Howspeed.V90_R.g_speed;
 8017c96:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8017c9a:	607b      	str	r3, [r7, #4]
 8017c9c:	e00a      	b.n	8017cb4 <get_center_velocity+0x128>
	} else if (pass_number == -17) {
 8017c9e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017ca2:	f113 0f11 	cmn.w	r3, #17
 8017ca6:	d103      	bne.n	8017cb0 <get_center_velocity+0x124>
		End_velocity = Howspeed.V90_L.g_speed;
 8017ca8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8017cac:	607b      	str	r3, [r7, #4]
 8017cae:	e001      	b.n	8017cb4 <get_center_velocity+0x128>
	} else {
		End_velocity = Howspeed.TurnCentervelocity;
 8017cb0:	697b      	ldr	r3, [r7, #20]
 8017cb2:	607b      	str	r3, [r7, #4]
	}

	return End_velocity;
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	ee07 3a90 	vmov	s15, r3
}
 8017cba:	eeb0 0a67 	vmov.f32	s0, s15
 8017cbe:	370c      	adds	r7, #12
 8017cc0:	46bd      	mov	sp, r7
 8017cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc6:	b004      	add	sp, #16
 8017cc8:	4770      	bx	lr
	...

08017ccc <input_parameter>:

void input_parameter(void) {
 8017ccc:	b480      	push	{r7}
 8017cce:	af00      	add	r7, sp, #0

	speed300_exploration.SlalomCentervelocity = 300;
 8017cd0:	4b8f      	ldr	r3, [pc, #572]	; (8017f10 <input_parameter+0x244>)
 8017cd2:	4a90      	ldr	r2, [pc, #576]	; (8017f14 <input_parameter+0x248>)
 8017cd4:	601a      	str	r2, [r3, #0]
	speed300_exploration.TurnCentervelocity = 300;
 8017cd6:	4b8e      	ldr	r3, [pc, #568]	; (8017f10 <input_parameter+0x244>)
 8017cd8:	4a8e      	ldr	r2, [pc, #568]	; (8017f14 <input_parameter+0x248>)
 8017cda:	605a      	str	r2, [r3, #4]

	speed300_exploration.slalom_R.g_speed =
			speed300_exploration.SlalomCentervelocity;
 8017cdc:	4b8c      	ldr	r3, [pc, #560]	; (8017f10 <input_parameter+0x244>)
 8017cde:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_R.g_speed =
 8017ce0:	4a8b      	ldr	r2, [pc, #556]	; (8017f10 <input_parameter+0x244>)
 8017ce2:	6093      	str	r3, [r2, #8]
	speed300_exploration.slalom_R.t_speed = 980; //550
 8017ce4:	4b8a      	ldr	r3, [pc, #552]	; (8017f10 <input_parameter+0x244>)
 8017ce6:	4a8c      	ldr	r2, [pc, #560]	; (8017f18 <input_parameter+0x24c>)
 8017ce8:	615a      	str	r2, [r3, #20]
	speed300_exploration.slalom_R.t_acc = 13000; //10000
 8017cea:	4b89      	ldr	r3, [pc, #548]	; (8017f10 <input_parameter+0x244>)
 8017cec:	4a8b      	ldr	r2, [pc, #556]	; (8017f1c <input_parameter+0x250>)
 8017cee:	619a      	str	r2, [r3, #24]
	speed300_exploration.slalom_R.f_ofset = 3; //55;
 8017cf0:	4b87      	ldr	r3, [pc, #540]	; (8017f10 <input_parameter+0x244>)
 8017cf2:	4a8b      	ldr	r2, [pc, #556]	; (8017f20 <input_parameter+0x254>)
 8017cf4:	60da      	str	r2, [r3, #12]
	speed300_exploration.slalom_R.e_ofset = 20;
 8017cf6:	4b86      	ldr	r3, [pc, #536]	; (8017f10 <input_parameter+0x244>)
 8017cf8:	4a8a      	ldr	r2, [pc, #552]	; (8017f24 <input_parameter+0x258>)
 8017cfa:	611a      	str	r2, [r3, #16]

	speed300_exploration.slalom_L.g_speed =
			speed300_exploration.SlalomCentervelocity;
 8017cfc:	4b84      	ldr	r3, [pc, #528]	; (8017f10 <input_parameter+0x244>)
 8017cfe:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_L.g_speed =
 8017d00:	4a83      	ldr	r2, [pc, #524]	; (8017f10 <input_parameter+0x244>)
 8017d02:	61d3      	str	r3, [r2, #28]
	speed300_exploration.slalom_L.t_speed = 980;
 8017d04:	4b82      	ldr	r3, [pc, #520]	; (8017f10 <input_parameter+0x244>)
 8017d06:	4a84      	ldr	r2, [pc, #528]	; (8017f18 <input_parameter+0x24c>)
 8017d08:	629a      	str	r2, [r3, #40]	; 0x28
	speed300_exploration.slalom_L.t_acc = 13000;
 8017d0a:	4b81      	ldr	r3, [pc, #516]	; (8017f10 <input_parameter+0x244>)
 8017d0c:	4a83      	ldr	r2, [pc, #524]	; (8017f1c <input_parameter+0x250>)
 8017d0e:	62da      	str	r2, [r3, #44]	; 0x2c
	speed300_exploration.slalom_L.f_ofset = 2; //50;
 8017d10:	4b7f      	ldr	r3, [pc, #508]	; (8017f10 <input_parameter+0x244>)
 8017d12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017d16:	621a      	str	r2, [r3, #32]
	speed300_exploration.slalom_L.e_ofset = 19;
 8017d18:	4b7d      	ldr	r3, [pc, #500]	; (8017f10 <input_parameter+0x244>)
 8017d1a:	4a83      	ldr	r2, [pc, #524]	; (8017f28 <input_parameter+0x25c>)
 8017d1c:	625a      	str	r2, [r3, #36]	; 0x24



	speed250_exploration.SlalomCentervelocity = 250;
 8017d1e:	4b83      	ldr	r3, [pc, #524]	; (8017f2c <input_parameter+0x260>)
 8017d20:	4a83      	ldr	r2, [pc, #524]	; (8017f30 <input_parameter+0x264>)
 8017d22:	601a      	str	r2, [r3, #0]
	speed250_exploration.TurnCentervelocity = 250;
 8017d24:	4b81      	ldr	r3, [pc, #516]	; (8017f2c <input_parameter+0x260>)
 8017d26:	4a82      	ldr	r2, [pc, #520]	; (8017f30 <input_parameter+0x264>)
 8017d28:	605a      	str	r2, [r3, #4]

	speed250_exploration.slalom_R.g_speed =
			speed250_exploration.SlalomCentervelocity;
 8017d2a:	4b80      	ldr	r3, [pc, #512]	; (8017f2c <input_parameter+0x260>)
 8017d2c:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_R.g_speed =
 8017d2e:	4a7f      	ldr	r2, [pc, #508]	; (8017f2c <input_parameter+0x260>)
 8017d30:	6093      	str	r3, [r2, #8]
	speed250_exploration.slalom_R.t_speed = 830; //550
 8017d32:	4b7e      	ldr	r3, [pc, #504]	; (8017f2c <input_parameter+0x260>)
 8017d34:	4a7f      	ldr	r2, [pc, #508]	; (8017f34 <input_parameter+0x268>)
 8017d36:	615a      	str	r2, [r3, #20]
	speed250_exploration.slalom_R.t_acc = 9000; //10000
 8017d38:	4b7c      	ldr	r3, [pc, #496]	; (8017f2c <input_parameter+0x260>)
 8017d3a:	4a7f      	ldr	r2, [pc, #508]	; (8017f38 <input_parameter+0x26c>)
 8017d3c:	619a      	str	r2, [r3, #24]
	speed250_exploration.slalom_R.f_ofset = 0.5; //55;
 8017d3e:	4b7b      	ldr	r3, [pc, #492]	; (8017f2c <input_parameter+0x260>)
 8017d40:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8017d44:	60da      	str	r2, [r3, #12]
	speed250_exploration.slalom_R.e_ofset = 20;
 8017d46:	4b79      	ldr	r3, [pc, #484]	; (8017f2c <input_parameter+0x260>)
 8017d48:	4a76      	ldr	r2, [pc, #472]	; (8017f24 <input_parameter+0x258>)
 8017d4a:	611a      	str	r2, [r3, #16]

	speed250_exploration.slalom_L.g_speed =
			speed250_exploration.SlalomCentervelocity;
 8017d4c:	4b77      	ldr	r3, [pc, #476]	; (8017f2c <input_parameter+0x260>)
 8017d4e:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_L.g_speed =
 8017d50:	4a76      	ldr	r2, [pc, #472]	; (8017f2c <input_parameter+0x260>)
 8017d52:	61d3      	str	r3, [r2, #28]
	speed250_exploration.slalom_L.t_speed = 730;
 8017d54:	4b75      	ldr	r3, [pc, #468]	; (8017f2c <input_parameter+0x260>)
 8017d56:	4a79      	ldr	r2, [pc, #484]	; (8017f3c <input_parameter+0x270>)
 8017d58:	629a      	str	r2, [r3, #40]	; 0x28
	speed250_exploration.slalom_L.t_acc = 9000;
 8017d5a:	4b74      	ldr	r3, [pc, #464]	; (8017f2c <input_parameter+0x260>)
 8017d5c:	4a76      	ldr	r2, [pc, #472]	; (8017f38 <input_parameter+0x26c>)
 8017d5e:	62da      	str	r2, [r3, #44]	; 0x2c
	speed250_exploration.slalom_L.f_ofset = 0.5; //50;
 8017d60:	4b72      	ldr	r3, [pc, #456]	; (8017f2c <input_parameter+0x260>)
 8017d62:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8017d66:	621a      	str	r2, [r3, #32]
	speed250_exploration.slalom_L.e_ofset = 19;
 8017d68:	4b70      	ldr	r3, [pc, #448]	; (8017f2c <input_parameter+0x260>)
 8017d6a:	4a6f      	ldr	r2, [pc, #444]	; (8017f28 <input_parameter+0x25c>)
 8017d6c:	625a      	str	r2, [r3, #36]	; 0x24


	speed300_shortest.SlalomCentervelocity =
			speed300_exploration.SlalomCentervelocity;
 8017d6e:	4b68      	ldr	r3, [pc, #416]	; (8017f10 <input_parameter+0x244>)
 8017d70:	681b      	ldr	r3, [r3, #0]
	speed300_shortest.SlalomCentervelocity =
 8017d72:	4a73      	ldr	r2, [pc, #460]	; (8017f40 <input_parameter+0x274>)
 8017d74:	6013      	str	r3, [r2, #0]
	speed300_shortest.TurnCentervelocity =
			speed300_exploration.TurnCentervelocity + 200;
 8017d76:	4b66      	ldr	r3, [pc, #408]	; (8017f10 <input_parameter+0x244>)
 8017d78:	edd3 7a01 	vldr	s15, [r3, #4]
 8017d7c:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8017f44 <input_parameter+0x278>
 8017d80:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.TurnCentervelocity =
 8017d84:	4b6e      	ldr	r3, [pc, #440]	; (8017f40 <input_parameter+0x274>)
 8017d86:	edc3 7a01 	vstr	s15, [r3, #4]

	speed300_shortest.slalom_R.g_speed = speed300_exploration.slalom_R.g_speed;
 8017d8a:	4b61      	ldr	r3, [pc, #388]	; (8017f10 <input_parameter+0x244>)
 8017d8c:	689b      	ldr	r3, [r3, #8]
 8017d8e:	4a6c      	ldr	r2, [pc, #432]	; (8017f40 <input_parameter+0x274>)
 8017d90:	6093      	str	r3, [r2, #8]
	speed300_shortest.slalom_R.t_speed = speed300_exploration.slalom_R.t_speed;
 8017d92:	4b5f      	ldr	r3, [pc, #380]	; (8017f10 <input_parameter+0x244>)
 8017d94:	695b      	ldr	r3, [r3, #20]
 8017d96:	4a6a      	ldr	r2, [pc, #424]	; (8017f40 <input_parameter+0x274>)
 8017d98:	6153      	str	r3, [r2, #20]
	speed300_shortest.slalom_R.t_acc = speed300_exploration.slalom_R.t_acc;
 8017d9a:	4b5d      	ldr	r3, [pc, #372]	; (8017f10 <input_parameter+0x244>)
 8017d9c:	699b      	ldr	r3, [r3, #24]
 8017d9e:	4a68      	ldr	r2, [pc, #416]	; (8017f40 <input_parameter+0x274>)
 8017da0:	6193      	str	r3, [r2, #24]
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 8017da2:	4b5b      	ldr	r3, [pc, #364]	; (8017f10 <input_parameter+0x244>)
 8017da4:	edd3 7a03 	vldr	s15, [r3, #12]
			+ MAZE_OFFSET; //55;
 8017da8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8017dac:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 8017db0:	4b63      	ldr	r3, [pc, #396]	; (8017f40 <input_parameter+0x274>)
 8017db2:	edc3 7a03 	vstr	s15, [r3, #12]
	speed300_shortest.slalom_R.e_ofset = speed300_exploration.slalom_R.e_ofset;
 8017db6:	4b56      	ldr	r3, [pc, #344]	; (8017f10 <input_parameter+0x244>)
 8017db8:	691b      	ldr	r3, [r3, #16]
 8017dba:	4a61      	ldr	r2, [pc, #388]	; (8017f40 <input_parameter+0x274>)
 8017dbc:	6113      	str	r3, [r2, #16]

	speed300_shortest.slalom_L.g_speed = speed300_exploration.slalom_L.g_speed;
 8017dbe:	4b54      	ldr	r3, [pc, #336]	; (8017f10 <input_parameter+0x244>)
 8017dc0:	69db      	ldr	r3, [r3, #28]
 8017dc2:	4a5f      	ldr	r2, [pc, #380]	; (8017f40 <input_parameter+0x274>)
 8017dc4:	61d3      	str	r3, [r2, #28]
	speed300_shortest.slalom_L.t_speed = speed300_exploration.slalom_L.t_speed;
 8017dc6:	4b52      	ldr	r3, [pc, #328]	; (8017f10 <input_parameter+0x244>)
 8017dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017dca:	4a5d      	ldr	r2, [pc, #372]	; (8017f40 <input_parameter+0x274>)
 8017dcc:	6293      	str	r3, [r2, #40]	; 0x28
	speed300_shortest.slalom_L.t_acc = speed300_exploration.slalom_L.t_acc;
 8017dce:	4b50      	ldr	r3, [pc, #320]	; (8017f10 <input_parameter+0x244>)
 8017dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017dd2:	4a5b      	ldr	r2, [pc, #364]	; (8017f40 <input_parameter+0x274>)
 8017dd4:	62d3      	str	r3, [r2, #44]	; 0x2c
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 8017dd6:	4b4e      	ldr	r3, [pc, #312]	; (8017f10 <input_parameter+0x244>)
 8017dd8:	edd3 7a08 	vldr	s15, [r3, #32]
			+ MAZE_OFFSET; //50;
 8017ddc:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8017de0:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 8017de4:	4b56      	ldr	r3, [pc, #344]	; (8017f40 <input_parameter+0x274>)
 8017de6:	edc3 7a08 	vstr	s15, [r3, #32]
	speed300_shortest.slalom_L.e_ofset = speed300_exploration.slalom_L.e_ofset;
 8017dea:	4b49      	ldr	r3, [pc, #292]	; (8017f10 <input_parameter+0x244>)
 8017dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dee:	4a54      	ldr	r2, [pc, #336]	; (8017f40 <input_parameter+0x274>)
 8017df0:	6253      	str	r3, [r2, #36]	; 0x24

	speed300_shortest.turn90_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017df2:	4b53      	ldr	r3, [pc, #332]	; (8017f40 <input_parameter+0x274>)
 8017df4:	685b      	ldr	r3, [r3, #4]
 8017df6:	4a52      	ldr	r2, [pc, #328]	; (8017f40 <input_parameter+0x274>)
 8017df8:	6313      	str	r3, [r2, #48]	; 0x30
	speed300_shortest.turn90_R.t_speed = 600;
 8017dfa:	4b51      	ldr	r3, [pc, #324]	; (8017f40 <input_parameter+0x274>)
 8017dfc:	4a52      	ldr	r2, [pc, #328]	; (8017f48 <input_parameter+0x27c>)
 8017dfe:	63da      	str	r2, [r3, #60]	; 0x3c
	speed300_shortest.turn90_R.t_acc = 10000;
 8017e00:	4b4f      	ldr	r3, [pc, #316]	; (8017f40 <input_parameter+0x274>)
 8017e02:	4a52      	ldr	r2, [pc, #328]	; (8017f4c <input_parameter+0x280>)
 8017e04:	641a      	str	r2, [r3, #64]	; 0x40
	speed300_shortest.turn90_R.f_ofset = 76;
 8017e06:	4b4e      	ldr	r3, [pc, #312]	; (8017f40 <input_parameter+0x274>)
 8017e08:	4a51      	ldr	r2, [pc, #324]	; (8017f50 <input_parameter+0x284>)
 8017e0a:	635a      	str	r2, [r3, #52]	; 0x34
	speed300_shortest.turn90_R.e_ofset = 107;
 8017e0c:	4b4c      	ldr	r3, [pc, #304]	; (8017f40 <input_parameter+0x274>)
 8017e0e:	4a51      	ldr	r2, [pc, #324]	; (8017f54 <input_parameter+0x288>)
 8017e10:	639a      	str	r2, [r3, #56]	; 0x38

	speed300_shortest.turn90_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017e12:	4b4b      	ldr	r3, [pc, #300]	; (8017f40 <input_parameter+0x274>)
 8017e14:	685b      	ldr	r3, [r3, #4]
 8017e16:	4a4a      	ldr	r2, [pc, #296]	; (8017f40 <input_parameter+0x274>)
 8017e18:	6453      	str	r3, [r2, #68]	; 0x44
	speed300_shortest.turn90_L.t_speed = 600;
 8017e1a:	4b49      	ldr	r3, [pc, #292]	; (8017f40 <input_parameter+0x274>)
 8017e1c:	4a4a      	ldr	r2, [pc, #296]	; (8017f48 <input_parameter+0x27c>)
 8017e1e:	651a      	str	r2, [r3, #80]	; 0x50
	speed300_shortest.turn90_L.t_acc = 10000;
 8017e20:	4b47      	ldr	r3, [pc, #284]	; (8017f40 <input_parameter+0x274>)
 8017e22:	4a4a      	ldr	r2, [pc, #296]	; (8017f4c <input_parameter+0x280>)
 8017e24:	655a      	str	r2, [r3, #84]	; 0x54
	speed300_shortest.turn90_L.f_ofset = 77;
 8017e26:	4b46      	ldr	r3, [pc, #280]	; (8017f40 <input_parameter+0x274>)
 8017e28:	4a4b      	ldr	r2, [pc, #300]	; (8017f58 <input_parameter+0x28c>)
 8017e2a:	649a      	str	r2, [r3, #72]	; 0x48
	speed300_shortest.turn90_L.e_ofset = 103;
 8017e2c:	4b44      	ldr	r3, [pc, #272]	; (8017f40 <input_parameter+0x274>)
 8017e2e:	4a4b      	ldr	r2, [pc, #300]	; (8017f5c <input_parameter+0x290>)
 8017e30:	64da      	str	r2, [r3, #76]	; 0x4c

	speed300_shortest.turn180_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017e32:	4b43      	ldr	r3, [pc, #268]	; (8017f40 <input_parameter+0x274>)
 8017e34:	685b      	ldr	r3, [r3, #4]
 8017e36:	4a42      	ldr	r2, [pc, #264]	; (8017f40 <input_parameter+0x274>)
 8017e38:	6593      	str	r3, [r2, #88]	; 0x58
	speed300_shortest.turn180_R.t_speed = 430;
 8017e3a:	4b41      	ldr	r3, [pc, #260]	; (8017f40 <input_parameter+0x274>)
 8017e3c:	4a48      	ldr	r2, [pc, #288]	; (8017f60 <input_parameter+0x294>)
 8017e3e:	665a      	str	r2, [r3, #100]	; 0x64
	speed300_shortest.turn180_R.t_acc = 8000;
 8017e40:	4b3f      	ldr	r3, [pc, #252]	; (8017f40 <input_parameter+0x274>)
 8017e42:	4a48      	ldr	r2, [pc, #288]	; (8017f64 <input_parameter+0x298>)
 8017e44:	669a      	str	r2, [r3, #104]	; 0x68
	speed300_shortest.turn180_R.f_ofset = 65;
 8017e46:	4b3e      	ldr	r3, [pc, #248]	; (8017f40 <input_parameter+0x274>)
 8017e48:	4a47      	ldr	r2, [pc, #284]	; (8017f68 <input_parameter+0x29c>)
 8017e4a:	65da      	str	r2, [r3, #92]	; 0x5c
	speed300_shortest.turn180_R.e_ofset = 80;
 8017e4c:	4b3c      	ldr	r3, [pc, #240]	; (8017f40 <input_parameter+0x274>)
 8017e4e:	4a47      	ldr	r2, [pc, #284]	; (8017f6c <input_parameter+0x2a0>)
 8017e50:	661a      	str	r2, [r3, #96]	; 0x60

	speed300_shortest.turn180_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017e52:	4b3b      	ldr	r3, [pc, #236]	; (8017f40 <input_parameter+0x274>)
 8017e54:	685b      	ldr	r3, [r3, #4]
 8017e56:	4a3a      	ldr	r2, [pc, #232]	; (8017f40 <input_parameter+0x274>)
 8017e58:	66d3      	str	r3, [r2, #108]	; 0x6c
	speed300_shortest.turn180_L.t_speed = 450;
 8017e5a:	4b39      	ldr	r3, [pc, #228]	; (8017f40 <input_parameter+0x274>)
 8017e5c:	4a44      	ldr	r2, [pc, #272]	; (8017f70 <input_parameter+0x2a4>)
 8017e5e:	679a      	str	r2, [r3, #120]	; 0x78
	speed300_shortest.turn180_L.t_acc = 8000;
 8017e60:	4b37      	ldr	r3, [pc, #220]	; (8017f40 <input_parameter+0x274>)
 8017e62:	4a40      	ldr	r2, [pc, #256]	; (8017f64 <input_parameter+0x298>)
 8017e64:	67da      	str	r2, [r3, #124]	; 0x7c
	speed300_shortest.turn180_L.f_ofset = 60;
 8017e66:	4b36      	ldr	r3, [pc, #216]	; (8017f40 <input_parameter+0x274>)
 8017e68:	4a42      	ldr	r2, [pc, #264]	; (8017f74 <input_parameter+0x2a8>)
 8017e6a:	671a      	str	r2, [r3, #112]	; 0x70
	speed300_shortest.turn180_L.e_ofset = 71;
 8017e6c:	4b34      	ldr	r3, [pc, #208]	; (8017f40 <input_parameter+0x274>)
 8017e6e:	4a42      	ldr	r2, [pc, #264]	; (8017f78 <input_parameter+0x2ac>)
 8017e70:	675a      	str	r2, [r3, #116]	; 0x74

	speed300_shortest.turn45in_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017e72:	4b33      	ldr	r3, [pc, #204]	; (8017f40 <input_parameter+0x274>)
 8017e74:	685b      	ldr	r3, [r3, #4]
 8017e76:	4a32      	ldr	r2, [pc, #200]	; (8017f40 <input_parameter+0x274>)
 8017e78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	speed300_shortest.turn45in_R.t_speed = 600;
 8017e7c:	4b30      	ldr	r3, [pc, #192]	; (8017f40 <input_parameter+0x274>)
 8017e7e:	4a32      	ldr	r2, [pc, #200]	; (8017f48 <input_parameter+0x27c>)
 8017e80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed300_shortest.turn45in_R.t_acc = 10000;
 8017e84:	4b2e      	ldr	r3, [pc, #184]	; (8017f40 <input_parameter+0x274>)
 8017e86:	4a31      	ldr	r2, [pc, #196]	; (8017f4c <input_parameter+0x280>)
 8017e88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed300_shortest.turn45in_R.f_ofset = 27;
 8017e8c:	4b2c      	ldr	r3, [pc, #176]	; (8017f40 <input_parameter+0x274>)
 8017e8e:	4a3b      	ldr	r2, [pc, #236]	; (8017f7c <input_parameter+0x2b0>)
 8017e90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed300_shortest.turn45in_R.e_ofset = 89;
 8017e94:	4b2a      	ldr	r3, [pc, #168]	; (8017f40 <input_parameter+0x274>)
 8017e96:	4a3a      	ldr	r2, [pc, #232]	; (8017f80 <input_parameter+0x2b4>)
 8017e98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed300_shortest.turn45in_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017e9c:	4b28      	ldr	r3, [pc, #160]	; (8017f40 <input_parameter+0x274>)
 8017e9e:	685b      	ldr	r3, [r3, #4]
 8017ea0:	4a27      	ldr	r2, [pc, #156]	; (8017f40 <input_parameter+0x274>)
 8017ea2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	speed300_shortest.turn45in_L.t_speed = 600;
 8017ea6:	4b26      	ldr	r3, [pc, #152]	; (8017f40 <input_parameter+0x274>)
 8017ea8:	4a27      	ldr	r2, [pc, #156]	; (8017f48 <input_parameter+0x27c>)
 8017eaa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed300_shortest.turn45in_L.t_acc = 10000;
 8017eae:	4b24      	ldr	r3, [pc, #144]	; (8017f40 <input_parameter+0x274>)
 8017eb0:	4a26      	ldr	r2, [pc, #152]	; (8017f4c <input_parameter+0x280>)
 8017eb2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed300_shortest.turn45in_L.f_ofset = 33;
 8017eb6:	4b22      	ldr	r3, [pc, #136]	; (8017f40 <input_parameter+0x274>)
 8017eb8:	4a32      	ldr	r2, [pc, #200]	; (8017f84 <input_parameter+0x2b8>)
 8017eba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed300_shortest.turn45in_L.e_ofset = 90;
 8017ebe:	4b20      	ldr	r3, [pc, #128]	; (8017f40 <input_parameter+0x274>)
 8017ec0:	4a31      	ldr	r2, [pc, #196]	; (8017f88 <input_parameter+0x2bc>)
 8017ec2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed300_shortest.turn135in_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017ec6:	4b1e      	ldr	r3, [pc, #120]	; (8017f40 <input_parameter+0x274>)
 8017ec8:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_R.g_speed =
 8017eca:	4a1d      	ldr	r2, [pc, #116]	; (8017f40 <input_parameter+0x274>)
 8017ecc:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	speed300_shortest.turn135in_R.t_speed = 610;
 8017ed0:	4b1b      	ldr	r3, [pc, #108]	; (8017f40 <input_parameter+0x274>)
 8017ed2:	4a2e      	ldr	r2, [pc, #184]	; (8017f8c <input_parameter+0x2c0>)
 8017ed4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed300_shortest.turn135in_R.t_acc = 8000;
 8017ed8:	4b19      	ldr	r3, [pc, #100]	; (8017f40 <input_parameter+0x274>)
 8017eda:	4a22      	ldr	r2, [pc, #136]	; (8017f64 <input_parameter+0x298>)
 8017edc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed300_shortest.turn135in_R.f_ofset = 67;
 8017ee0:	4b17      	ldr	r3, [pc, #92]	; (8017f40 <input_parameter+0x274>)
 8017ee2:	4a2b      	ldr	r2, [pc, #172]	; (8017f90 <input_parameter+0x2c4>)
 8017ee4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed300_shortest.turn135in_R.e_ofset = 73;
 8017ee8:	4b15      	ldr	r3, [pc, #84]	; (8017f40 <input_parameter+0x274>)
 8017eea:	4a2a      	ldr	r2, [pc, #168]	; (8017f94 <input_parameter+0x2c8>)
 8017eec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed300_shortest.turn135in_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017ef0:	4b13      	ldr	r3, [pc, #76]	; (8017f40 <input_parameter+0x274>)
 8017ef2:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_L.g_speed =
 8017ef4:	4a12      	ldr	r2, [pc, #72]	; (8017f40 <input_parameter+0x274>)
 8017ef6:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
	speed300_shortest.turn135in_L.t_speed = 610;
 8017efa:	4b11      	ldr	r3, [pc, #68]	; (8017f40 <input_parameter+0x274>)
 8017efc:	4a23      	ldr	r2, [pc, #140]	; (8017f8c <input_parameter+0x2c0>)
 8017efe:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed300_shortest.turn135in_L.t_acc = 8000;
 8017f02:	4b0f      	ldr	r3, [pc, #60]	; (8017f40 <input_parameter+0x274>)
 8017f04:	4a17      	ldr	r2, [pc, #92]	; (8017f64 <input_parameter+0x298>)
 8017f06:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	speed300_shortest.turn135in_L.f_ofset = 67;
 8017f0a:	4b0d      	ldr	r3, [pc, #52]	; (8017f40 <input_parameter+0x274>)
 8017f0c:	e044      	b.n	8017f98 <input_parameter+0x2cc>
 8017f0e:	bf00      	nop
 8017f10:	2000ef80 	.word	0x2000ef80
 8017f14:	43960000 	.word	0x43960000
 8017f18:	44750000 	.word	0x44750000
 8017f1c:	464b2000 	.word	0x464b2000
 8017f20:	40400000 	.word	0x40400000
 8017f24:	41a00000 	.word	0x41a00000
 8017f28:	41980000 	.word	0x41980000
 8017f2c:	2000f0c8 	.word	0x2000f0c8
 8017f30:	437a0000 	.word	0x437a0000
 8017f34:	444f8000 	.word	0x444f8000
 8017f38:	460ca000 	.word	0x460ca000
 8017f3c:	44368000 	.word	0x44368000
 8017f40:	2000f210 	.word	0x2000f210
 8017f44:	43480000 	.word	0x43480000
 8017f48:	44160000 	.word	0x44160000
 8017f4c:	461c4000 	.word	0x461c4000
 8017f50:	42980000 	.word	0x42980000
 8017f54:	42d60000 	.word	0x42d60000
 8017f58:	429a0000 	.word	0x429a0000
 8017f5c:	42ce0000 	.word	0x42ce0000
 8017f60:	43d70000 	.word	0x43d70000
 8017f64:	45fa0000 	.word	0x45fa0000
 8017f68:	42820000 	.word	0x42820000
 8017f6c:	42a00000 	.word	0x42a00000
 8017f70:	43e10000 	.word	0x43e10000
 8017f74:	42700000 	.word	0x42700000
 8017f78:	428e0000 	.word	0x428e0000
 8017f7c:	41d80000 	.word	0x41d80000
 8017f80:	42b20000 	.word	0x42b20000
 8017f84:	42040000 	.word	0x42040000
 8017f88:	42b40000 	.word	0x42b40000
 8017f8c:	44188000 	.word	0x44188000
 8017f90:	42860000 	.word	0x42860000
 8017f94:	42920000 	.word	0x42920000
 8017f98:	4a99      	ldr	r2, [pc, #612]	; (8018200 <input_parameter+0x534>)
 8017f9a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed300_shortest.turn135in_L.e_ofset = 73;
 8017f9e:	4b99      	ldr	r3, [pc, #612]	; (8018204 <input_parameter+0x538>)
 8017fa0:	4a99      	ldr	r2, [pc, #612]	; (8018208 <input_parameter+0x53c>)
 8017fa2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed300_shortest.turn45out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017fa6:	4b97      	ldr	r3, [pc, #604]	; (8018204 <input_parameter+0x538>)
 8017fa8:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_R.g_speed =
 8017faa:	4a96      	ldr	r2, [pc, #600]	; (8018204 <input_parameter+0x538>)
 8017fac:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
	speed300_shortest.turn45out_R.t_speed = 600;
 8017fb0:	4b94      	ldr	r3, [pc, #592]	; (8018204 <input_parameter+0x538>)
 8017fb2:	4a96      	ldr	r2, [pc, #600]	; (801820c <input_parameter+0x540>)
 8017fb4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed300_shortest.turn45out_R.t_acc = 10000;
 8017fb8:	4b92      	ldr	r3, [pc, #584]	; (8018204 <input_parameter+0x538>)
 8017fba:	4a95      	ldr	r2, [pc, #596]	; (8018210 <input_parameter+0x544>)
 8017fbc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed300_shortest.turn45out_R.f_ofset = 57;
 8017fc0:	4b90      	ldr	r3, [pc, #576]	; (8018204 <input_parameter+0x538>)
 8017fc2:	4a94      	ldr	r2, [pc, #592]	; (8018214 <input_parameter+0x548>)
 8017fc4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed300_shortest.turn45out_R.e_ofset = 57;
 8017fc8:	4b8e      	ldr	r3, [pc, #568]	; (8018204 <input_parameter+0x538>)
 8017fca:	4a92      	ldr	r2, [pc, #584]	; (8018214 <input_parameter+0x548>)
 8017fcc:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed300_shortest.turn45out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017fd0:	4b8c      	ldr	r3, [pc, #560]	; (8018204 <input_parameter+0x538>)
 8017fd2:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_L.g_speed =
 8017fd4:	4a8b      	ldr	r2, [pc, #556]	; (8018204 <input_parameter+0x538>)
 8017fd6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	speed300_shortest.turn45out_L.t_speed = 600;
 8017fda:	4b8a      	ldr	r3, [pc, #552]	; (8018204 <input_parameter+0x538>)
 8017fdc:	4a8b      	ldr	r2, [pc, #556]	; (801820c <input_parameter+0x540>)
 8017fde:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed300_shortest.turn45out_L.t_acc = 10000;
 8017fe2:	4b88      	ldr	r3, [pc, #544]	; (8018204 <input_parameter+0x538>)
 8017fe4:	4a8a      	ldr	r2, [pc, #552]	; (8018210 <input_parameter+0x544>)
 8017fe6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed300_shortest.turn45out_L.f_ofset = 64;
 8017fea:	4b86      	ldr	r3, [pc, #536]	; (8018204 <input_parameter+0x538>)
 8017fec:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 8017ff0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed300_shortest.turn45out_L.e_ofset = 52;
 8017ff4:	4b83      	ldr	r3, [pc, #524]	; (8018204 <input_parameter+0x538>)
 8017ff6:	4a88      	ldr	r2, [pc, #544]	; (8018218 <input_parameter+0x54c>)
 8017ff8:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed300_shortest.turn135out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017ffc:	4b81      	ldr	r3, [pc, #516]	; (8018204 <input_parameter+0x538>)
 8017ffe:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_R.g_speed =
 8018000:	4a80      	ldr	r2, [pc, #512]	; (8018204 <input_parameter+0x538>)
 8018002:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
	speed300_shortest.turn135out_R.t_speed = 660;
 8018006:	4b7f      	ldr	r3, [pc, #508]	; (8018204 <input_parameter+0x538>)
 8018008:	4a84      	ldr	r2, [pc, #528]	; (801821c <input_parameter+0x550>)
 801800a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed300_shortest.turn135out_R.t_acc = 8000;
 801800e:	4b7d      	ldr	r3, [pc, #500]	; (8018204 <input_parameter+0x538>)
 8018010:	4a83      	ldr	r2, [pc, #524]	; (8018220 <input_parameter+0x554>)
 8018012:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed300_shortest.turn135out_R.f_ofset = 55;
 8018016:	4b7b      	ldr	r3, [pc, #492]	; (8018204 <input_parameter+0x538>)
 8018018:	4a82      	ldr	r2, [pc, #520]	; (8018224 <input_parameter+0x558>)
 801801a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed300_shortest.turn135out_R.e_ofset = 100;
 801801e:	4b79      	ldr	r3, [pc, #484]	; (8018204 <input_parameter+0x538>)
 8018020:	4a81      	ldr	r2, [pc, #516]	; (8018228 <input_parameter+0x55c>)
 8018022:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed300_shortest.turn135out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8018026:	4b77      	ldr	r3, [pc, #476]	; (8018204 <input_parameter+0x538>)
 8018028:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_L.g_speed =
 801802a:	4a76      	ldr	r2, [pc, #472]	; (8018204 <input_parameter+0x538>)
 801802c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	speed300_shortest.turn135out_L.t_speed = 660;
 8018030:	4b74      	ldr	r3, [pc, #464]	; (8018204 <input_parameter+0x538>)
 8018032:	4a7a      	ldr	r2, [pc, #488]	; (801821c <input_parameter+0x550>)
 8018034:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed300_shortest.turn135out_L.t_acc = 8000;
 8018038:	4b72      	ldr	r3, [pc, #456]	; (8018204 <input_parameter+0x538>)
 801803a:	4a79      	ldr	r2, [pc, #484]	; (8018220 <input_parameter+0x554>)
 801803c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed300_shortest.turn135out_L.f_ofset = 55;
 8018040:	4b70      	ldr	r3, [pc, #448]	; (8018204 <input_parameter+0x538>)
 8018042:	4a78      	ldr	r2, [pc, #480]	; (8018224 <input_parameter+0x558>)
 8018044:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed300_shortest.turn135out_L.e_ofset = 103;
 8018048:	4b6e      	ldr	r3, [pc, #440]	; (8018204 <input_parameter+0x538>)
 801804a:	4a78      	ldr	r2, [pc, #480]	; (801822c <input_parameter+0x560>)
 801804c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed300_shortest.V90_R.g_speed = speed300_shortest.TurnCentervelocity;
 8018050:	4b6c      	ldr	r3, [pc, #432]	; (8018204 <input_parameter+0x538>)
 8018052:	685b      	ldr	r3, [r3, #4]
 8018054:	4a6b      	ldr	r2, [pc, #428]	; (8018204 <input_parameter+0x538>)
 8018056:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	speed300_shortest.V90_R.t_speed = 700;
 801805a:	4b6a      	ldr	r3, [pc, #424]	; (8018204 <input_parameter+0x538>)
 801805c:	4a74      	ldr	r2, [pc, #464]	; (8018230 <input_parameter+0x564>)
 801805e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed300_shortest.V90_R.t_acc = 11000;
 8018062:	4b68      	ldr	r3, [pc, #416]	; (8018204 <input_parameter+0x538>)
 8018064:	4a73      	ldr	r2, [pc, #460]	; (8018234 <input_parameter+0x568>)
 8018066:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed300_shortest.V90_R.f_ofset = 35;
 801806a:	4b66      	ldr	r3, [pc, #408]	; (8018204 <input_parameter+0x538>)
 801806c:	4a72      	ldr	r2, [pc, #456]	; (8018238 <input_parameter+0x56c>)
 801806e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed300_shortest.V90_R.e_ofset = 56;
 8018072:	4b64      	ldr	r3, [pc, #400]	; (8018204 <input_parameter+0x538>)
 8018074:	4a71      	ldr	r2, [pc, #452]	; (801823c <input_parameter+0x570>)
 8018076:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed300_shortest.V90_L.g_speed = speed300_shortest.TurnCentervelocity;
 801807a:	4b62      	ldr	r3, [pc, #392]	; (8018204 <input_parameter+0x538>)
 801807c:	685b      	ldr	r3, [r3, #4]
 801807e:	4a61      	ldr	r2, [pc, #388]	; (8018204 <input_parameter+0x538>)
 8018080:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	speed300_shortest.V90_L.t_speed = 700;
 8018084:	4b5f      	ldr	r3, [pc, #380]	; (8018204 <input_parameter+0x538>)
 8018086:	4a6a      	ldr	r2, [pc, #424]	; (8018230 <input_parameter+0x564>)
 8018088:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed300_shortest.V90_L.t_acc = 11000;
 801808c:	4b5d      	ldr	r3, [pc, #372]	; (8018204 <input_parameter+0x538>)
 801808e:	4a69      	ldr	r2, [pc, #420]	; (8018234 <input_parameter+0x568>)
 8018090:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed300_shortest.V90_L.f_ofset = 32;
 8018094:	4b5b      	ldr	r3, [pc, #364]	; (8018204 <input_parameter+0x538>)
 8018096:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 801809a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed300_shortest.V90_L.e_ofset = 60;
 801809e:	4b59      	ldr	r3, [pc, #356]	; (8018204 <input_parameter+0x538>)
 80180a0:	4a67      	ldr	r2, [pc, #412]	; (8018240 <input_parameter+0x574>)
 80180a2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c



//********************************600********************************************
	speed600_shortest_mollifier.SlalomCentervelocity = 600;
 80180a6:	4b67      	ldr	r3, [pc, #412]	; (8018244 <input_parameter+0x578>)
 80180a8:	4a58      	ldr	r2, [pc, #352]	; (801820c <input_parameter+0x540>)
 80180aa:	601a      	str	r2, [r3, #0]
	speed600_shortest_mollifier.TurnCentervelocity = 600;
 80180ac:	4b65      	ldr	r3, [pc, #404]	; (8018244 <input_parameter+0x578>)
 80180ae:	4a57      	ldr	r2, [pc, #348]	; (801820c <input_parameter+0x540>)
 80180b0:	605a      	str	r2, [r3, #4]

	speed600_shortest_mollifier.slalom_R.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 80180b2:	4b64      	ldr	r3, [pc, #400]	; (8018244 <input_parameter+0x578>)
 80180b4:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_R.g_speed =
 80180b6:	4a63      	ldr	r2, [pc, #396]	; (8018244 <input_parameter+0x578>)
 80180b8:	6093      	str	r3, [r2, #8]
	speed600_shortest_mollifier.slalom_R.t_speed = 1100;
 80180ba:	4b62      	ldr	r3, [pc, #392]	; (8018244 <input_parameter+0x578>)
 80180bc:	4a62      	ldr	r2, [pc, #392]	; (8018248 <input_parameter+0x57c>)
 80180be:	615a      	str	r2, [r3, #20]
	speed600_shortest_mollifier.slalom_R.t_acc = 60000;
 80180c0:	4b60      	ldr	r3, [pc, #384]	; (8018244 <input_parameter+0x578>)
 80180c2:	4a62      	ldr	r2, [pc, #392]	; (801824c <input_parameter+0x580>)
 80180c4:	619a      	str	r2, [r3, #24]
	speed600_shortest_mollifier.slalom_R.f_ofset = 5;
 80180c6:	4b5f      	ldr	r3, [pc, #380]	; (8018244 <input_parameter+0x578>)
 80180c8:	4a61      	ldr	r2, [pc, #388]	; (8018250 <input_parameter+0x584>)
 80180ca:	60da      	str	r2, [r3, #12]
	speed600_shortest_mollifier.slalom_R.e_ofset = 28;
 80180cc:	4b5d      	ldr	r3, [pc, #372]	; (8018244 <input_parameter+0x578>)
 80180ce:	4a61      	ldr	r2, [pc, #388]	; (8018254 <input_parameter+0x588>)
 80180d0:	611a      	str	r2, [r3, #16]

	speed600_shortest_mollifier.slalom_L.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 80180d2:	4b5c      	ldr	r3, [pc, #368]	; (8018244 <input_parameter+0x578>)
 80180d4:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_L.g_speed =
 80180d6:	4a5b      	ldr	r2, [pc, #364]	; (8018244 <input_parameter+0x578>)
 80180d8:	61d3      	str	r3, [r2, #28]
	speed600_shortest_mollifier.slalom_L.t_speed = 1100;
 80180da:	4b5a      	ldr	r3, [pc, #360]	; (8018244 <input_parameter+0x578>)
 80180dc:	4a5a      	ldr	r2, [pc, #360]	; (8018248 <input_parameter+0x57c>)
 80180de:	629a      	str	r2, [r3, #40]	; 0x28
	speed600_shortest_mollifier.slalom_L.t_acc = 60000;
 80180e0:	4b58      	ldr	r3, [pc, #352]	; (8018244 <input_parameter+0x578>)
 80180e2:	4a5a      	ldr	r2, [pc, #360]	; (801824c <input_parameter+0x580>)
 80180e4:	62da      	str	r2, [r3, #44]	; 0x2c
	speed600_shortest_mollifier.slalom_L.f_ofset = 5;
 80180e6:	4b57      	ldr	r3, [pc, #348]	; (8018244 <input_parameter+0x578>)
 80180e8:	4a59      	ldr	r2, [pc, #356]	; (8018250 <input_parameter+0x584>)
 80180ea:	621a      	str	r2, [r3, #32]
	speed600_shortest_mollifier.slalom_L.e_ofset = 32;
 80180ec:	4b55      	ldr	r3, [pc, #340]	; (8018244 <input_parameter+0x578>)
 80180ee:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80180f2:	625a      	str	r2, [r3, #36]	; 0x24

	speed600_shortest_mollifier.turn90_R.g_speed = 600;
 80180f4:	4b53      	ldr	r3, [pc, #332]	; (8018244 <input_parameter+0x578>)
 80180f6:	4a45      	ldr	r2, [pc, #276]	; (801820c <input_parameter+0x540>)
 80180f8:	631a      	str	r2, [r3, #48]	; 0x30
	speed600_shortest_mollifier.turn90_R.t_speed = 950;
 80180fa:	4b52      	ldr	r3, [pc, #328]	; (8018244 <input_parameter+0x578>)
 80180fc:	4a56      	ldr	r2, [pc, #344]	; (8018258 <input_parameter+0x58c>)
 80180fe:	63da      	str	r2, [r3, #60]	; 0x3c
	speed600_shortest_mollifier.turn90_R.t_acc = 15000;
 8018100:	4b50      	ldr	r3, [pc, #320]	; (8018244 <input_parameter+0x578>)
 8018102:	4a56      	ldr	r2, [pc, #344]	; (801825c <input_parameter+0x590>)
 8018104:	641a      	str	r2, [r3, #64]	; 0x40
	speed600_shortest_mollifier.turn90_R.f_ofset = 31;
 8018106:	4b4f      	ldr	r3, [pc, #316]	; (8018244 <input_parameter+0x578>)
 8018108:	4a55      	ldr	r2, [pc, #340]	; (8018260 <input_parameter+0x594>)
 801810a:	635a      	str	r2, [r3, #52]	; 0x34
	speed600_shortest_mollifier.turn90_R.e_ofset = 31;
 801810c:	4b4d      	ldr	r3, [pc, #308]	; (8018244 <input_parameter+0x578>)
 801810e:	4a54      	ldr	r2, [pc, #336]	; (8018260 <input_parameter+0x594>)
 8018110:	639a      	str	r2, [r3, #56]	; 0x38

	speed600_shortest_mollifier.turn90_L.g_speed = 600;
 8018112:	4b4c      	ldr	r3, [pc, #304]	; (8018244 <input_parameter+0x578>)
 8018114:	4a3d      	ldr	r2, [pc, #244]	; (801820c <input_parameter+0x540>)
 8018116:	645a      	str	r2, [r3, #68]	; 0x44
	speed600_shortest_mollifier.turn90_L.t_speed = 950;
 8018118:	4b4a      	ldr	r3, [pc, #296]	; (8018244 <input_parameter+0x578>)
 801811a:	4a4f      	ldr	r2, [pc, #316]	; (8018258 <input_parameter+0x58c>)
 801811c:	651a      	str	r2, [r3, #80]	; 0x50
	speed600_shortest_mollifier.turn90_L.t_acc = 15000;
 801811e:	4b49      	ldr	r3, [pc, #292]	; (8018244 <input_parameter+0x578>)
 8018120:	4a4e      	ldr	r2, [pc, #312]	; (801825c <input_parameter+0x590>)
 8018122:	655a      	str	r2, [r3, #84]	; 0x54
	speed600_shortest_mollifier.turn90_L.f_ofset = 31;
 8018124:	4b47      	ldr	r3, [pc, #284]	; (8018244 <input_parameter+0x578>)
 8018126:	4a4e      	ldr	r2, [pc, #312]	; (8018260 <input_parameter+0x594>)
 8018128:	649a      	str	r2, [r3, #72]	; 0x48
	speed600_shortest_mollifier.turn90_L.e_ofset = 35;
 801812a:	4b46      	ldr	r3, [pc, #280]	; (8018244 <input_parameter+0x578>)
 801812c:	4a42      	ldr	r2, [pc, #264]	; (8018238 <input_parameter+0x56c>)
 801812e:	64da      	str	r2, [r3, #76]	; 0x4c

	speed600_shortest_mollifier.turn180_R.g_speed =600;
 8018130:	4b44      	ldr	r3, [pc, #272]	; (8018244 <input_parameter+0x578>)
 8018132:	4a36      	ldr	r2, [pc, #216]	; (801820c <input_parameter+0x540>)
 8018134:	659a      	str	r2, [r3, #88]	; 0x58
	speed600_shortest_mollifier.turn180_R.t_speed = 840;
 8018136:	4b43      	ldr	r3, [pc, #268]	; (8018244 <input_parameter+0x578>)
 8018138:	4a4a      	ldr	r2, [pc, #296]	; (8018264 <input_parameter+0x598>)
 801813a:	665a      	str	r2, [r3, #100]	; 0x64
	speed600_shortest_mollifier.turn180_R.t_acc = 14000;
 801813c:	4b41      	ldr	r3, [pc, #260]	; (8018244 <input_parameter+0x578>)
 801813e:	4a4a      	ldr	r2, [pc, #296]	; (8018268 <input_parameter+0x59c>)
 8018140:	669a      	str	r2, [r3, #104]	; 0x68
	speed600_shortest_mollifier.turn180_R.f_ofset = 7;
 8018142:	4b40      	ldr	r3, [pc, #256]	; (8018244 <input_parameter+0x578>)
 8018144:	4a49      	ldr	r2, [pc, #292]	; (801826c <input_parameter+0x5a0>)
 8018146:	65da      	str	r2, [r3, #92]	; 0x5c
	speed600_shortest_mollifier.turn180_R.e_ofset = 20;
 8018148:	4b3e      	ldr	r3, [pc, #248]	; (8018244 <input_parameter+0x578>)
 801814a:	4a49      	ldr	r2, [pc, #292]	; (8018270 <input_parameter+0x5a4>)
 801814c:	661a      	str	r2, [r3, #96]	; 0x60

	speed600_shortest_mollifier.turn180_L.g_speed = 600;
 801814e:	4b3d      	ldr	r3, [pc, #244]	; (8018244 <input_parameter+0x578>)
 8018150:	4a2e      	ldr	r2, [pc, #184]	; (801820c <input_parameter+0x540>)
 8018152:	66da      	str	r2, [r3, #108]	; 0x6c
	speed600_shortest_mollifier.turn180_L.t_speed = 820;
 8018154:	4b3b      	ldr	r3, [pc, #236]	; (8018244 <input_parameter+0x578>)
 8018156:	4a47      	ldr	r2, [pc, #284]	; (8018274 <input_parameter+0x5a8>)
 8018158:	679a      	str	r2, [r3, #120]	; 0x78
	speed600_shortest_mollifier.turn180_L.t_acc = 14000;
 801815a:	4b3a      	ldr	r3, [pc, #232]	; (8018244 <input_parameter+0x578>)
 801815c:	4a42      	ldr	r2, [pc, #264]	; (8018268 <input_parameter+0x59c>)
 801815e:	67da      	str	r2, [r3, #124]	; 0x7c
	speed600_shortest_mollifier.turn180_L.f_ofset = 7;
 8018160:	4b38      	ldr	r3, [pc, #224]	; (8018244 <input_parameter+0x578>)
 8018162:	4a42      	ldr	r2, [pc, #264]	; (801826c <input_parameter+0x5a0>)
 8018164:	671a      	str	r2, [r3, #112]	; 0x70
	speed600_shortest_mollifier.turn180_L.e_ofset = 18;
 8018166:	4b37      	ldr	r3, [pc, #220]	; (8018244 <input_parameter+0x578>)
 8018168:	4a43      	ldr	r2, [pc, #268]	; (8018278 <input_parameter+0x5ac>)
 801816a:	675a      	str	r2, [r3, #116]	; 0x74

	speed600_shortest_mollifier.turn45in_R.g_speed = 600;
 801816c:	4b35      	ldr	r3, [pc, #212]	; (8018244 <input_parameter+0x578>)
 801816e:	4a27      	ldr	r2, [pc, #156]	; (801820c <input_parameter+0x540>)
 8018170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	speed600_shortest_mollifier.turn45in_R.t_speed = 830;
 8018174:	4b33      	ldr	r3, [pc, #204]	; (8018244 <input_parameter+0x578>)
 8018176:	4a41      	ldr	r2, [pc, #260]	; (801827c <input_parameter+0x5b0>)
 8018178:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed600_shortest_mollifier.turn45in_R.t_acc = 12000;
 801817c:	4b31      	ldr	r3, [pc, #196]	; (8018244 <input_parameter+0x578>)
 801817e:	4a40      	ldr	r2, [pc, #256]	; (8018280 <input_parameter+0x5b4>)
 8018180:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed600_shortest_mollifier.turn45in_R.f_ofset = 13;
 8018184:	4b2f      	ldr	r3, [pc, #188]	; (8018244 <input_parameter+0x578>)
 8018186:	4a3f      	ldr	r2, [pc, #252]	; (8018284 <input_parameter+0x5b8>)
 8018188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed600_shortest_mollifier.turn45in_R.e_ofset = 38;
 801818c:	4b2d      	ldr	r3, [pc, #180]	; (8018244 <input_parameter+0x578>)
 801818e:	4a3e      	ldr	r2, [pc, #248]	; (8018288 <input_parameter+0x5bc>)
 8018190:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed600_shortest_mollifier.turn45in_L.g_speed = 600;
 8018194:	4b2b      	ldr	r3, [pc, #172]	; (8018244 <input_parameter+0x578>)
 8018196:	4a1d      	ldr	r2, [pc, #116]	; (801820c <input_parameter+0x540>)
 8018198:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	speed600_shortest_mollifier.turn45in_L.t_speed = 898;
 801819c:	4b29      	ldr	r3, [pc, #164]	; (8018244 <input_parameter+0x578>)
 801819e:	4a3b      	ldr	r2, [pc, #236]	; (801828c <input_parameter+0x5c0>)
 80181a0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed600_shortest_mollifier.turn45in_L.t_acc = 12000;
 80181a4:	4b27      	ldr	r3, [pc, #156]	; (8018244 <input_parameter+0x578>)
 80181a6:	4a36      	ldr	r2, [pc, #216]	; (8018280 <input_parameter+0x5b4>)
 80181a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed600_shortest_mollifier.turn45in_L.f_ofset = 12;
 80181ac:	4b25      	ldr	r3, [pc, #148]	; (8018244 <input_parameter+0x578>)
 80181ae:	4a38      	ldr	r2, [pc, #224]	; (8018290 <input_parameter+0x5c4>)
 80181b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed600_shortest_mollifier.turn45in_L.e_ofset = 36;
 80181b4:	4b23      	ldr	r3, [pc, #140]	; (8018244 <input_parameter+0x578>)
 80181b6:	4a37      	ldr	r2, [pc, #220]	; (8018294 <input_parameter+0x5c8>)
 80181b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed600_shortest_mollifier.turn135in_R.g_speed = 600;
 80181bc:	4b21      	ldr	r3, [pc, #132]	; (8018244 <input_parameter+0x578>)
 80181be:	4a13      	ldr	r2, [pc, #76]	; (801820c <input_parameter+0x540>)
 80181c0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	speed600_shortest_mollifier.turn135in_R.t_speed = 940;
 80181c4:	4b1f      	ldr	r3, [pc, #124]	; (8018244 <input_parameter+0x578>)
 80181c6:	4a34      	ldr	r2, [pc, #208]	; (8018298 <input_parameter+0x5cc>)
 80181c8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed600_shortest_mollifier.turn135in_R.t_acc = 14000;
 80181cc:	4b1d      	ldr	r3, [pc, #116]	; (8018244 <input_parameter+0x578>)
 80181ce:	4a26      	ldr	r2, [pc, #152]	; (8018268 <input_parameter+0x59c>)
 80181d0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed600_shortest_mollifier.turn135in_R.f_ofset = 9.5;
 80181d4:	4b1b      	ldr	r3, [pc, #108]	; (8018244 <input_parameter+0x578>)
 80181d6:	4a31      	ldr	r2, [pc, #196]	; (801829c <input_parameter+0x5d0>)
 80181d8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed600_shortest_mollifier.turn135in_R.e_ofset = 36;
 80181dc:	4b19      	ldr	r3, [pc, #100]	; (8018244 <input_parameter+0x578>)
 80181de:	4a2d      	ldr	r2, [pc, #180]	; (8018294 <input_parameter+0x5c8>)
 80181e0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed600_shortest_mollifier.turn135in_L.g_speed = 600;
 80181e4:	4b17      	ldr	r3, [pc, #92]	; (8018244 <input_parameter+0x578>)
 80181e6:	4a09      	ldr	r2, [pc, #36]	; (801820c <input_parameter+0x540>)
 80181e8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	speed600_shortest_mollifier.turn135in_L.t_speed = 900;
 80181ec:	4b15      	ldr	r3, [pc, #84]	; (8018244 <input_parameter+0x578>)
 80181ee:	4a2c      	ldr	r2, [pc, #176]	; (80182a0 <input_parameter+0x5d4>)
 80181f0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed600_shortest_mollifier.turn135in_L.t_acc = 14000;
 80181f4:	4b13      	ldr	r3, [pc, #76]	; (8018244 <input_parameter+0x578>)
 80181f6:	4a1c      	ldr	r2, [pc, #112]	; (8018268 <input_parameter+0x59c>)
 80181f8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 80181fc:	e052      	b.n	80182a4 <input_parameter+0x5d8>
 80181fe:	bf00      	nop
 8018200:	42860000 	.word	0x42860000
 8018204:	2000f210 	.word	0x2000f210
 8018208:	42920000 	.word	0x42920000
 801820c:	44160000 	.word	0x44160000
 8018210:	461c4000 	.word	0x461c4000
 8018214:	42640000 	.word	0x42640000
 8018218:	42500000 	.word	0x42500000
 801821c:	44250000 	.word	0x44250000
 8018220:	45fa0000 	.word	0x45fa0000
 8018224:	425c0000 	.word	0x425c0000
 8018228:	42c80000 	.word	0x42c80000
 801822c:	42ce0000 	.word	0x42ce0000
 8018230:	442f0000 	.word	0x442f0000
 8018234:	462be000 	.word	0x462be000
 8018238:	420c0000 	.word	0x420c0000
 801823c:	42600000 	.word	0x42600000
 8018240:	42700000 	.word	0x42700000
 8018244:	2000f358 	.word	0x2000f358
 8018248:	44898000 	.word	0x44898000
 801824c:	476a6000 	.word	0x476a6000
 8018250:	40a00000 	.word	0x40a00000
 8018254:	41e00000 	.word	0x41e00000
 8018258:	446d8000 	.word	0x446d8000
 801825c:	466a6000 	.word	0x466a6000
 8018260:	41f80000 	.word	0x41f80000
 8018264:	44520000 	.word	0x44520000
 8018268:	465ac000 	.word	0x465ac000
 801826c:	40e00000 	.word	0x40e00000
 8018270:	41a00000 	.word	0x41a00000
 8018274:	444d0000 	.word	0x444d0000
 8018278:	41900000 	.word	0x41900000
 801827c:	444f8000 	.word	0x444f8000
 8018280:	463b8000 	.word	0x463b8000
 8018284:	41500000 	.word	0x41500000
 8018288:	42180000 	.word	0x42180000
 801828c:	44608000 	.word	0x44608000
 8018290:	41400000 	.word	0x41400000
 8018294:	42100000 	.word	0x42100000
 8018298:	446b0000 	.word	0x446b0000
 801829c:	41180000 	.word	0x41180000
 80182a0:	44610000 	.word	0x44610000
	speed600_shortest_mollifier.turn135in_L.f_ofset = 8;
 80182a4:	4b9d      	ldr	r3, [pc, #628]	; (801851c <input_parameter+0x850>)
 80182a6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80182aa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed600_shortest_mollifier.turn135in_L.e_ofset = 34;
 80182ae:	4b9b      	ldr	r3, [pc, #620]	; (801851c <input_parameter+0x850>)
 80182b0:	4a9b      	ldr	r2, [pc, #620]	; (8018520 <input_parameter+0x854>)
 80182b2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed600_shortest_mollifier.turn45out_R.g_speed = 600;
 80182b6:	4b99      	ldr	r3, [pc, #612]	; (801851c <input_parameter+0x850>)
 80182b8:	4a9a      	ldr	r2, [pc, #616]	; (8018524 <input_parameter+0x858>)
 80182ba:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	speed600_shortest_mollifier.turn45out_R.t_speed = 720;
 80182be:	4b97      	ldr	r3, [pc, #604]	; (801851c <input_parameter+0x850>)
 80182c0:	4a99      	ldr	r2, [pc, #612]	; (8018528 <input_parameter+0x85c>)
 80182c2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed600_shortest_mollifier.turn45out_R.t_acc = 12000;
 80182c6:	4b95      	ldr	r3, [pc, #596]	; (801851c <input_parameter+0x850>)
 80182c8:	4a98      	ldr	r2, [pc, #608]	; (801852c <input_parameter+0x860>)
 80182ca:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed600_shortest_mollifier.turn45out_R.f_ofset = 43;
 80182ce:	4b93      	ldr	r3, [pc, #588]	; (801851c <input_parameter+0x850>)
 80182d0:	4a97      	ldr	r2, [pc, #604]	; (8018530 <input_parameter+0x864>)
 80182d2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed600_shortest_mollifier.turn45out_R.e_ofset = 22;
 80182d6:	4b91      	ldr	r3, [pc, #580]	; (801851c <input_parameter+0x850>)
 80182d8:	4a96      	ldr	r2, [pc, #600]	; (8018534 <input_parameter+0x868>)
 80182da:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed600_shortest_mollifier.turn45out_L.g_speed = 600;
 80182de:	4b8f      	ldr	r3, [pc, #572]	; (801851c <input_parameter+0x850>)
 80182e0:	4a90      	ldr	r2, [pc, #576]	; (8018524 <input_parameter+0x858>)
 80182e2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	speed600_shortest_mollifier.turn45out_L.t_speed = 750;
 80182e6:	4b8d      	ldr	r3, [pc, #564]	; (801851c <input_parameter+0x850>)
 80182e8:	4a93      	ldr	r2, [pc, #588]	; (8018538 <input_parameter+0x86c>)
 80182ea:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed600_shortest_mollifier.turn45out_L.t_acc = 12000;
 80182ee:	4b8b      	ldr	r3, [pc, #556]	; (801851c <input_parameter+0x850>)
 80182f0:	4a8e      	ldr	r2, [pc, #568]	; (801852c <input_parameter+0x860>)
 80182f2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed600_shortest_mollifier.turn45out_L.f_ofset = 40;
 80182f6:	4b89      	ldr	r3, [pc, #548]	; (801851c <input_parameter+0x850>)
 80182f8:	4a90      	ldr	r2, [pc, #576]	; (801853c <input_parameter+0x870>)
 80182fa:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed600_shortest_mollifier.turn45out_L.e_ofset = 24;
 80182fe:	4b87      	ldr	r3, [pc, #540]	; (801851c <input_parameter+0x850>)
 8018300:	4a8f      	ldr	r2, [pc, #572]	; (8018540 <input_parameter+0x874>)
 8018302:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed600_shortest_mollifier.turn135out_R.g_speed = 600;
 8018306:	4b85      	ldr	r3, [pc, #532]	; (801851c <input_parameter+0x850>)
 8018308:	4a86      	ldr	r2, [pc, #536]	; (8018524 <input_parameter+0x858>)
 801830a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	speed600_shortest_mollifier.turn135out_R.t_speed = 920;
 801830e:	4b83      	ldr	r3, [pc, #524]	; (801851c <input_parameter+0x850>)
 8018310:	4a8c      	ldr	r2, [pc, #560]	; (8018544 <input_parameter+0x878>)
 8018312:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed600_shortest_mollifier.turn135out_R.t_acc = 15000;
 8018316:	4b81      	ldr	r3, [pc, #516]	; (801851c <input_parameter+0x850>)
 8018318:	4a8b      	ldr	r2, [pc, #556]	; (8018548 <input_parameter+0x87c>)
 801831a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed600_shortest_mollifier.turn135out_R.f_ofset = 5;
 801831e:	4b7f      	ldr	r3, [pc, #508]	; (801851c <input_parameter+0x850>)
 8018320:	4a8a      	ldr	r2, [pc, #552]	; (801854c <input_parameter+0x880>)
 8018322:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed600_shortest_mollifier.turn135out_R.e_ofset = 22;
 8018326:	4b7d      	ldr	r3, [pc, #500]	; (801851c <input_parameter+0x850>)
 8018328:	4a82      	ldr	r2, [pc, #520]	; (8018534 <input_parameter+0x868>)
 801832a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed600_shortest_mollifier.turn135out_L.g_speed = 600;
 801832e:	4b7b      	ldr	r3, [pc, #492]	; (801851c <input_parameter+0x850>)
 8018330:	4a7c      	ldr	r2, [pc, #496]	; (8018524 <input_parameter+0x858>)
 8018332:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	speed600_shortest_mollifier.turn135out_L.t_speed = 890;
 8018336:	4b79      	ldr	r3, [pc, #484]	; (801851c <input_parameter+0x850>)
 8018338:	4a85      	ldr	r2, [pc, #532]	; (8018550 <input_parameter+0x884>)
 801833a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed600_shortest_mollifier.turn135out_L.t_acc = 14000;
 801833e:	4b77      	ldr	r3, [pc, #476]	; (801851c <input_parameter+0x850>)
 8018340:	4a84      	ldr	r2, [pc, #528]	; (8018554 <input_parameter+0x888>)
 8018342:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed600_shortest_mollifier.turn135out_L.f_ofset = 8;
 8018346:	4b75      	ldr	r3, [pc, #468]	; (801851c <input_parameter+0x850>)
 8018348:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 801834c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed600_shortest_mollifier.turn135out_L.e_ofset = 36;
 8018350:	4b72      	ldr	r3, [pc, #456]	; (801851c <input_parameter+0x850>)
 8018352:	4a81      	ldr	r2, [pc, #516]	; (8018558 <input_parameter+0x88c>)
 8018354:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed600_shortest_mollifier.V90_R.g_speed = 600;
 8018358:	4b70      	ldr	r3, [pc, #448]	; (801851c <input_parameter+0x850>)
 801835a:	4a72      	ldr	r2, [pc, #456]	; (8018524 <input_parameter+0x858>)
 801835c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	speed600_shortest_mollifier.V90_R.t_speed = 940;
 8018360:	4b6e      	ldr	r3, [pc, #440]	; (801851c <input_parameter+0x850>)
 8018362:	4a7e      	ldr	r2, [pc, #504]	; (801855c <input_parameter+0x890>)
 8018364:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed600_shortest_mollifier.V90_R.t_acc = 15000;
 8018368:	4b6c      	ldr	r3, [pc, #432]	; (801851c <input_parameter+0x850>)
 801836a:	4a77      	ldr	r2, [pc, #476]	; (8018548 <input_parameter+0x87c>)
 801836c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed600_shortest_mollifier.V90_R.f_ofset = 17;
 8018370:	4b6a      	ldr	r3, [pc, #424]	; (801851c <input_parameter+0x850>)
 8018372:	4a7b      	ldr	r2, [pc, #492]	; (8018560 <input_parameter+0x894>)
 8018374:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed600_shortest_mollifier.V90_R.e_ofset = 20;
 8018378:	4b68      	ldr	r3, [pc, #416]	; (801851c <input_parameter+0x850>)
 801837a:	4a7a      	ldr	r2, [pc, #488]	; (8018564 <input_parameter+0x898>)
 801837c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed600_shortest_mollifier.V90_L.g_speed = 600;
 8018380:	4b66      	ldr	r3, [pc, #408]	; (801851c <input_parameter+0x850>)
 8018382:	4a68      	ldr	r2, [pc, #416]	; (8018524 <input_parameter+0x858>)
 8018384:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	speed600_shortest_mollifier.V90_L.t_speed = 960;
 8018388:	4b64      	ldr	r3, [pc, #400]	; (801851c <input_parameter+0x850>)
 801838a:	4a77      	ldr	r2, [pc, #476]	; (8018568 <input_parameter+0x89c>)
 801838c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed600_shortest_mollifier.V90_L.t_acc = 16000;
 8018390:	4b62      	ldr	r3, [pc, #392]	; (801851c <input_parameter+0x850>)
 8018392:	4a76      	ldr	r2, [pc, #472]	; (801856c <input_parameter+0x8a0>)
 8018394:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed600_shortest_mollifier.V90_L.f_ofset = 10;
 8018398:	4b60      	ldr	r3, [pc, #384]	; (801851c <input_parameter+0x850>)
 801839a:	4a75      	ldr	r2, [pc, #468]	; (8018570 <input_parameter+0x8a4>)
 801839c:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed600_shortest_mollifier.V90_L.e_ofset = 20;
 80183a0:	4b5e      	ldr	r3, [pc, #376]	; (801851c <input_parameter+0x850>)
 80183a2:	4a70      	ldr	r2, [pc, #448]	; (8018564 <input_parameter+0x898>)
 80183a4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c




	//********************************1000********************************************
		speed1000_shortest_mollifier.SlalomCentervelocity = 1000;
 80183a8:	4b72      	ldr	r3, [pc, #456]	; (8018574 <input_parameter+0x8a8>)
 80183aa:	4a73      	ldr	r2, [pc, #460]	; (8018578 <input_parameter+0x8ac>)
 80183ac:	601a      	str	r2, [r3, #0]
		speed1000_shortest_mollifier.TurnCentervelocity = 1000;
 80183ae:	4b71      	ldr	r3, [pc, #452]	; (8018574 <input_parameter+0x8a8>)
 80183b0:	4a71      	ldr	r2, [pc, #452]	; (8018578 <input_parameter+0x8ac>)
 80183b2:	605a      	str	r2, [r3, #4]

		speed1000_shortest_mollifier.slalom_R.g_speed =
				speed1000_shortest_mollifier.SlalomCentervelocity;
 80183b4:	4b6f      	ldr	r3, [pc, #444]	; (8018574 <input_parameter+0x8a8>)
 80183b6:	681b      	ldr	r3, [r3, #0]
		speed1000_shortest_mollifier.slalom_R.g_speed =
 80183b8:	4a6e      	ldr	r2, [pc, #440]	; (8018574 <input_parameter+0x8a8>)
 80183ba:	6093      	str	r3, [r2, #8]
		speed1000_shortest_mollifier.slalom_R.t_speed = 1100;
 80183bc:	4b6d      	ldr	r3, [pc, #436]	; (8018574 <input_parameter+0x8a8>)
 80183be:	4a6f      	ldr	r2, [pc, #444]	; (801857c <input_parameter+0x8b0>)
 80183c0:	615a      	str	r2, [r3, #20]
		speed1000_shortest_mollifier.slalom_R.f_ofset = 5;
 80183c2:	4b6c      	ldr	r3, [pc, #432]	; (8018574 <input_parameter+0x8a8>)
 80183c4:	4a61      	ldr	r2, [pc, #388]	; (801854c <input_parameter+0x880>)
 80183c6:	60da      	str	r2, [r3, #12]
		speed1000_shortest_mollifier.slalom_R.e_ofset = 28;
 80183c8:	4b6a      	ldr	r3, [pc, #424]	; (8018574 <input_parameter+0x8a8>)
 80183ca:	4a6d      	ldr	r2, [pc, #436]	; (8018580 <input_parameter+0x8b4>)
 80183cc:	611a      	str	r2, [r3, #16]

		speed1000_shortest_mollifier.slalom_L.g_speed =
				speed1000_shortest_mollifier.SlalomCentervelocity;
 80183ce:	4b69      	ldr	r3, [pc, #420]	; (8018574 <input_parameter+0x8a8>)
 80183d0:	681b      	ldr	r3, [r3, #0]
		speed1000_shortest_mollifier.slalom_L.g_speed =
 80183d2:	4a68      	ldr	r2, [pc, #416]	; (8018574 <input_parameter+0x8a8>)
 80183d4:	61d3      	str	r3, [r2, #28]
		speed1000_shortest_mollifier.slalom_L.t_speed = 1100;
 80183d6:	4b67      	ldr	r3, [pc, #412]	; (8018574 <input_parameter+0x8a8>)
 80183d8:	4a68      	ldr	r2, [pc, #416]	; (801857c <input_parameter+0x8b0>)
 80183da:	629a      	str	r2, [r3, #40]	; 0x28
		speed1000_shortest_mollifier.slalom_L.f_ofset = 5;
 80183dc:	4b65      	ldr	r3, [pc, #404]	; (8018574 <input_parameter+0x8a8>)
 80183de:	4a5b      	ldr	r2, [pc, #364]	; (801854c <input_parameter+0x880>)
 80183e0:	621a      	str	r2, [r3, #32]
		speed1000_shortest_mollifier.slalom_L.e_ofset = 32;
 80183e2:	4b64      	ldr	r3, [pc, #400]	; (8018574 <input_parameter+0x8a8>)
 80183e4:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80183e8:	625a      	str	r2, [r3, #36]	; 0x24

		speed1000_shortest_mollifier.turn90_R.g_speed = 1000;
 80183ea:	4b62      	ldr	r3, [pc, #392]	; (8018574 <input_parameter+0x8a8>)
 80183ec:	4a62      	ldr	r2, [pc, #392]	; (8018578 <input_parameter+0x8ac>)
 80183ee:	631a      	str	r2, [r3, #48]	; 0x30
		speed1000_shortest_mollifier.turn90_R.t_speed = 1450;
 80183f0:	4b60      	ldr	r3, [pc, #384]	; (8018574 <input_parameter+0x8a8>)
 80183f2:	4a64      	ldr	r2, [pc, #400]	; (8018584 <input_parameter+0x8b8>)
 80183f4:	63da      	str	r2, [r3, #60]	; 0x3c
		speed1000_shortest_mollifier.turn90_R.f_ofset = 29;
 80183f6:	4b5f      	ldr	r3, [pc, #380]	; (8018574 <input_parameter+0x8a8>)
 80183f8:	4a63      	ldr	r2, [pc, #396]	; (8018588 <input_parameter+0x8bc>)
 80183fa:	635a      	str	r2, [r3, #52]	; 0x34
		speed1000_shortest_mollifier.turn90_R.e_ofset = 31;
 80183fc:	4b5d      	ldr	r3, [pc, #372]	; (8018574 <input_parameter+0x8a8>)
 80183fe:	4a63      	ldr	r2, [pc, #396]	; (801858c <input_parameter+0x8c0>)
 8018400:	639a      	str	r2, [r3, #56]	; 0x38

		speed1000_shortest_mollifier.turn90_L.g_speed = 1000;
 8018402:	4b5c      	ldr	r3, [pc, #368]	; (8018574 <input_parameter+0x8a8>)
 8018404:	4a5c      	ldr	r2, [pc, #368]	; (8018578 <input_parameter+0x8ac>)
 8018406:	645a      	str	r2, [r3, #68]	; 0x44
		speed1000_shortest_mollifier.turn90_L.t_speed = 1450;
 8018408:	4b5a      	ldr	r3, [pc, #360]	; (8018574 <input_parameter+0x8a8>)
 801840a:	4a5e      	ldr	r2, [pc, #376]	; (8018584 <input_parameter+0x8b8>)
 801840c:	651a      	str	r2, [r3, #80]	; 0x50
		speed1000_shortest_mollifier.turn90_L.f_ofset = 29;
 801840e:	4b59      	ldr	r3, [pc, #356]	; (8018574 <input_parameter+0x8a8>)
 8018410:	4a5d      	ldr	r2, [pc, #372]	; (8018588 <input_parameter+0x8bc>)
 8018412:	649a      	str	r2, [r3, #72]	; 0x48
		speed1000_shortest_mollifier.turn90_L.e_ofset = 35;
 8018414:	4b57      	ldr	r3, [pc, #348]	; (8018574 <input_parameter+0x8a8>)
 8018416:	4a5e      	ldr	r2, [pc, #376]	; (8018590 <input_parameter+0x8c4>)
 8018418:	64da      	str	r2, [r3, #76]	; 0x4c

		speed1000_shortest_mollifier.turn180_R.g_speed =1000;
 801841a:	4b56      	ldr	r3, [pc, #344]	; (8018574 <input_parameter+0x8a8>)
 801841c:	4a56      	ldr	r2, [pc, #344]	; (8018578 <input_parameter+0x8ac>)
 801841e:	659a      	str	r2, [r3, #88]	; 0x58
		speed1000_shortest_mollifier.turn180_R.t_speed = 1400;
 8018420:	4b54      	ldr	r3, [pc, #336]	; (8018574 <input_parameter+0x8a8>)
 8018422:	4a5c      	ldr	r2, [pc, #368]	; (8018594 <input_parameter+0x8c8>)
 8018424:	665a      	str	r2, [r3, #100]	; 0x64
		speed1000_shortest_mollifier.turn180_R.f_ofset = 17;
 8018426:	4b53      	ldr	r3, [pc, #332]	; (8018574 <input_parameter+0x8a8>)
 8018428:	4a4d      	ldr	r2, [pc, #308]	; (8018560 <input_parameter+0x894>)
 801842a:	65da      	str	r2, [r3, #92]	; 0x5c
		speed1000_shortest_mollifier.turn180_R.e_ofset = 20;
 801842c:	4b51      	ldr	r3, [pc, #324]	; (8018574 <input_parameter+0x8a8>)
 801842e:	4a4d      	ldr	r2, [pc, #308]	; (8018564 <input_parameter+0x898>)
 8018430:	661a      	str	r2, [r3, #96]	; 0x60

		speed1000_shortest_mollifier.turn180_L.g_speed = 1000;
 8018432:	4b50      	ldr	r3, [pc, #320]	; (8018574 <input_parameter+0x8a8>)
 8018434:	4a50      	ldr	r2, [pc, #320]	; (8018578 <input_parameter+0x8ac>)
 8018436:	66da      	str	r2, [r3, #108]	; 0x6c
		speed1000_shortest_mollifier.turn180_L.t_speed = 1400;
 8018438:	4b4e      	ldr	r3, [pc, #312]	; (8018574 <input_parameter+0x8a8>)
 801843a:	4a56      	ldr	r2, [pc, #344]	; (8018594 <input_parameter+0x8c8>)
 801843c:	679a      	str	r2, [r3, #120]	; 0x78
		speed1000_shortest_mollifier.turn180_L.f_ofset = 17;
 801843e:	4b4d      	ldr	r3, [pc, #308]	; (8018574 <input_parameter+0x8a8>)
 8018440:	4a47      	ldr	r2, [pc, #284]	; (8018560 <input_parameter+0x894>)
 8018442:	671a      	str	r2, [r3, #112]	; 0x70
		speed1000_shortest_mollifier.turn180_L.e_ofset = 18;
 8018444:	4b4b      	ldr	r3, [pc, #300]	; (8018574 <input_parameter+0x8a8>)
 8018446:	4a54      	ldr	r2, [pc, #336]	; (8018598 <input_parameter+0x8cc>)
 8018448:	675a      	str	r2, [r3, #116]	; 0x74

		speed1000_shortest_mollifier.turn45in_R.g_speed = 1000;
 801844a:	4b4a      	ldr	r3, [pc, #296]	; (8018574 <input_parameter+0x8a8>)
 801844c:	4a4a      	ldr	r2, [pc, #296]	; (8018578 <input_parameter+0x8ac>)
 801844e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		speed1000_shortest_mollifier.turn45in_R.t_speed = 1300;
 8018452:	4b48      	ldr	r3, [pc, #288]	; (8018574 <input_parameter+0x8a8>)
 8018454:	4a51      	ldr	r2, [pc, #324]	; (801859c <input_parameter+0x8d0>)
 8018456:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		speed1000_shortest_mollifier.turn45in_R.f_ofset = 18;
 801845a:	4b46      	ldr	r3, [pc, #280]	; (8018574 <input_parameter+0x8a8>)
 801845c:	4a4e      	ldr	r2, [pc, #312]	; (8018598 <input_parameter+0x8cc>)
 801845e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		speed1000_shortest_mollifier.turn45in_R.e_ofset = 38;
 8018462:	4b44      	ldr	r3, [pc, #272]	; (8018574 <input_parameter+0x8a8>)
 8018464:	4a4e      	ldr	r2, [pc, #312]	; (80185a0 <input_parameter+0x8d4>)
 8018466:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

		speed1000_shortest_mollifier.turn45in_L.g_speed = 1000;
 801846a:	4b42      	ldr	r3, [pc, #264]	; (8018574 <input_parameter+0x8a8>)
 801846c:	4a42      	ldr	r2, [pc, #264]	; (8018578 <input_parameter+0x8ac>)
 801846e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		speed1000_shortest_mollifier.turn45in_L.t_speed = 1300;
 8018472:	4b40      	ldr	r3, [pc, #256]	; (8018574 <input_parameter+0x8a8>)
 8018474:	4a49      	ldr	r2, [pc, #292]	; (801859c <input_parameter+0x8d0>)
 8018476:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		speed1000_shortest_mollifier.turn45in_L.f_ofset = 17;
 801847a:	4b3e      	ldr	r3, [pc, #248]	; (8018574 <input_parameter+0x8a8>)
 801847c:	4a38      	ldr	r2, [pc, #224]	; (8018560 <input_parameter+0x894>)
 801847e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		speed1000_shortest_mollifier.turn45in_L.e_ofset = 36;
 8018482:	4b3c      	ldr	r3, [pc, #240]	; (8018574 <input_parameter+0x8a8>)
 8018484:	4a34      	ldr	r2, [pc, #208]	; (8018558 <input_parameter+0x88c>)
 8018486:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

		speed1000_shortest_mollifier.turn135in_R.g_speed = 1000;
 801848a:	4b3a      	ldr	r3, [pc, #232]	; (8018574 <input_parameter+0x8a8>)
 801848c:	4a3a      	ldr	r2, [pc, #232]	; (8018578 <input_parameter+0x8ac>)
 801848e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		speed1000_shortest_mollifier.turn135in_R.t_speed = 1590;
 8018492:	4b38      	ldr	r3, [pc, #224]	; (8018574 <input_parameter+0x8a8>)
 8018494:	4a43      	ldr	r2, [pc, #268]	; (80185a4 <input_parameter+0x8d8>)
 8018496:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		speed1000_shortest_mollifier.turn135in_R.f_ofset = 17;
 801849a:	4b36      	ldr	r3, [pc, #216]	; (8018574 <input_parameter+0x8a8>)
 801849c:	4a30      	ldr	r2, [pc, #192]	; (8018560 <input_parameter+0x894>)
 801849e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		speed1000_shortest_mollifier.turn135in_R.e_ofset = 15;
 80184a2:	4b34      	ldr	r3, [pc, #208]	; (8018574 <input_parameter+0x8a8>)
 80184a4:	4a40      	ldr	r2, [pc, #256]	; (80185a8 <input_parameter+0x8dc>)
 80184a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		speed1000_shortest_mollifier.turn135in_L.g_speed = 1000;
 80184aa:	4b32      	ldr	r3, [pc, #200]	; (8018574 <input_parameter+0x8a8>)
 80184ac:	4a32      	ldr	r2, [pc, #200]	; (8018578 <input_parameter+0x8ac>)
 80184ae:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		speed1000_shortest_mollifier.turn135in_L.t_speed = 1560;
 80184b2:	4b30      	ldr	r3, [pc, #192]	; (8018574 <input_parameter+0x8a8>)
 80184b4:	4a3d      	ldr	r2, [pc, #244]	; (80185ac <input_parameter+0x8e0>)
 80184b6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		speed1000_shortest_mollifier.turn135in_L.f_ofset = 14;
 80184ba:	4b2e      	ldr	r3, [pc, #184]	; (8018574 <input_parameter+0x8a8>)
 80184bc:	4a3c      	ldr	r2, [pc, #240]	; (80185b0 <input_parameter+0x8e4>)
 80184be:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		speed1000_shortest_mollifier.turn135in_L.e_ofset = 12;
 80184c2:	4b2c      	ldr	r3, [pc, #176]	; (8018574 <input_parameter+0x8a8>)
 80184c4:	4a3b      	ldr	r2, [pc, #236]	; (80185b4 <input_parameter+0x8e8>)
 80184c6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

		speed1000_shortest_mollifier.turn45out_R.g_speed = 1000;
 80184ca:	4b2a      	ldr	r3, [pc, #168]	; (8018574 <input_parameter+0x8a8>)
 80184cc:	4a2a      	ldr	r2, [pc, #168]	; (8018578 <input_parameter+0x8ac>)
 80184ce:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		speed1000_shortest_mollifier.turn45out_R.t_speed = 1300;
 80184d2:	4b28      	ldr	r3, [pc, #160]	; (8018574 <input_parameter+0x8a8>)
 80184d4:	4a31      	ldr	r2, [pc, #196]	; (801859c <input_parameter+0x8d0>)
 80184d6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		speed1000_shortest_mollifier.turn45out_R.f_ofset = 38;
 80184da:	4b26      	ldr	r3, [pc, #152]	; (8018574 <input_parameter+0x8a8>)
 80184dc:	4a30      	ldr	r2, [pc, #192]	; (80185a0 <input_parameter+0x8d4>)
 80184de:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		speed1000_shortest_mollifier.turn45out_R.e_ofset = 22;
 80184e2:	4b24      	ldr	r3, [pc, #144]	; (8018574 <input_parameter+0x8a8>)
 80184e4:	4a13      	ldr	r2, [pc, #76]	; (8018534 <input_parameter+0x868>)
 80184e6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

		speed1000_shortest_mollifier.turn45out_L.g_speed = 1000;
 80184ea:	4b22      	ldr	r3, [pc, #136]	; (8018574 <input_parameter+0x8a8>)
 80184ec:	4a22      	ldr	r2, [pc, #136]	; (8018578 <input_parameter+0x8ac>)
 80184ee:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		speed1000_shortest_mollifier.turn45out_L.t_speed = 1300;
 80184f2:	4b20      	ldr	r3, [pc, #128]	; (8018574 <input_parameter+0x8a8>)
 80184f4:	4a29      	ldr	r2, [pc, #164]	; (801859c <input_parameter+0x8d0>)
 80184f6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
		speed1000_shortest_mollifier.turn45out_L.f_ofset = 30;
 80184fa:	4b1e      	ldr	r3, [pc, #120]	; (8018574 <input_parameter+0x8a8>)
 80184fc:	4a2e      	ldr	r2, [pc, #184]	; (80185b8 <input_parameter+0x8ec>)
 80184fe:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		speed1000_shortest_mollifier.turn45out_L.e_ofset = 24;
 8018502:	4b1c      	ldr	r3, [pc, #112]	; (8018574 <input_parameter+0x8a8>)
 8018504:	4a0e      	ldr	r2, [pc, #56]	; (8018540 <input_parameter+0x874>)
 8018506:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

		speed1000_shortest_mollifier.turn135out_R.g_speed = 1000;
 801850a:	4b1a      	ldr	r3, [pc, #104]	; (8018574 <input_parameter+0x8a8>)
 801850c:	4a1a      	ldr	r2, [pc, #104]	; (8018578 <input_parameter+0x8ac>)
 801850e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
		speed1000_shortest_mollifier.turn135out_R.t_speed = 1660;
 8018512:	4b18      	ldr	r3, [pc, #96]	; (8018574 <input_parameter+0x8a8>)
 8018514:	4a29      	ldr	r2, [pc, #164]	; (80185bc <input_parameter+0x8f0>)
 8018516:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 801851a:	e051      	b.n	80185c0 <input_parameter+0x8f4>
 801851c:	2000f358 	.word	0x2000f358
 8018520:	42080000 	.word	0x42080000
 8018524:	44160000 	.word	0x44160000
 8018528:	44340000 	.word	0x44340000
 801852c:	463b8000 	.word	0x463b8000
 8018530:	422c0000 	.word	0x422c0000
 8018534:	41b00000 	.word	0x41b00000
 8018538:	443b8000 	.word	0x443b8000
 801853c:	42200000 	.word	0x42200000
 8018540:	41c00000 	.word	0x41c00000
 8018544:	44660000 	.word	0x44660000
 8018548:	466a6000 	.word	0x466a6000
 801854c:	40a00000 	.word	0x40a00000
 8018550:	445e8000 	.word	0x445e8000
 8018554:	465ac000 	.word	0x465ac000
 8018558:	42100000 	.word	0x42100000
 801855c:	446b0000 	.word	0x446b0000
 8018560:	41880000 	.word	0x41880000
 8018564:	41a00000 	.word	0x41a00000
 8018568:	44700000 	.word	0x44700000
 801856c:	467a0000 	.word	0x467a0000
 8018570:	41200000 	.word	0x41200000
 8018574:	2000f4a0 	.word	0x2000f4a0
 8018578:	447a0000 	.word	0x447a0000
 801857c:	44898000 	.word	0x44898000
 8018580:	41e00000 	.word	0x41e00000
 8018584:	44b54000 	.word	0x44b54000
 8018588:	41e80000 	.word	0x41e80000
 801858c:	41f80000 	.word	0x41f80000
 8018590:	420c0000 	.word	0x420c0000
 8018594:	44af0000 	.word	0x44af0000
 8018598:	41900000 	.word	0x41900000
 801859c:	44a28000 	.word	0x44a28000
 80185a0:	42180000 	.word	0x42180000
 80185a4:	44c6c000 	.word	0x44c6c000
 80185a8:	41700000 	.word	0x41700000
 80185ac:	44c30000 	.word	0x44c30000
 80185b0:	41600000 	.word	0x41600000
 80185b4:	41400000 	.word	0x41400000
 80185b8:	41f00000 	.word	0x41f00000
 80185bc:	44cf8000 	.word	0x44cf8000
		speed1000_shortest_mollifier.turn135out_R.f_ofset = 16;
 80185c0:	4b9e      	ldr	r3, [pc, #632]	; (801883c <input_parameter+0xb70>)
 80185c2:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80185c6:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		speed1000_shortest_mollifier.turn135out_R.e_ofset = 22;
 80185ca:	4b9c      	ldr	r3, [pc, #624]	; (801883c <input_parameter+0xb70>)
 80185cc:	4a9c      	ldr	r2, [pc, #624]	; (8018840 <input_parameter+0xb74>)
 80185ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		speed1000_shortest_mollifier.turn135out_L.g_speed = 1000;
 80185d2:	4b9a      	ldr	r3, [pc, #616]	; (801883c <input_parameter+0xb70>)
 80185d4:	4a9b      	ldr	r2, [pc, #620]	; (8018844 <input_parameter+0xb78>)
 80185d6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		speed1000_shortest_mollifier.turn135out_L.t_speed = 1660;
 80185da:	4b98      	ldr	r3, [pc, #608]	; (801883c <input_parameter+0xb70>)
 80185dc:	4a9a      	ldr	r2, [pc, #616]	; (8018848 <input_parameter+0xb7c>)
 80185de:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		speed1000_shortest_mollifier.turn135out_L.f_ofset = 10;
 80185e2:	4b96      	ldr	r3, [pc, #600]	; (801883c <input_parameter+0xb70>)
 80185e4:	4a99      	ldr	r2, [pc, #612]	; (801884c <input_parameter+0xb80>)
 80185e6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		speed1000_shortest_mollifier.turn135out_L.e_ofset = 30;
 80185ea:	4b94      	ldr	r3, [pc, #592]	; (801883c <input_parameter+0xb70>)
 80185ec:	4a98      	ldr	r2, [pc, #608]	; (8018850 <input_parameter+0xb84>)
 80185ee:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

		speed1000_shortest_mollifier.V90_R.g_speed = 1000;
 80185f2:	4b92      	ldr	r3, [pc, #584]	; (801883c <input_parameter+0xb70>)
 80185f4:	4a93      	ldr	r2, [pc, #588]	; (8018844 <input_parameter+0xb78>)
 80185f6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		speed1000_shortest_mollifier.V90_R.t_speed = 1750;
 80185fa:	4b90      	ldr	r3, [pc, #576]	; (801883c <input_parameter+0xb70>)
 80185fc:	4a95      	ldr	r2, [pc, #596]	; (8018854 <input_parameter+0xb88>)
 80185fe:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		speed1000_shortest_mollifier.V90_R.f_ofset = 16.5;
 8018602:	4b8e      	ldr	r3, [pc, #568]	; (801883c <input_parameter+0xb70>)
 8018604:	4a94      	ldr	r2, [pc, #592]	; (8018858 <input_parameter+0xb8c>)
 8018606:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		speed1000_shortest_mollifier.V90_R.e_ofset = 15;
 801860a:	4b8c      	ldr	r3, [pc, #560]	; (801883c <input_parameter+0xb70>)
 801860c:	4a93      	ldr	r2, [pc, #588]	; (801885c <input_parameter+0xb90>)
 801860e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

		speed1000_shortest_mollifier.V90_L.g_speed = 1000;
 8018612:	4b8a      	ldr	r3, [pc, #552]	; (801883c <input_parameter+0xb70>)
 8018614:	4a8b      	ldr	r2, [pc, #556]	; (8018844 <input_parameter+0xb78>)
 8018616:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		speed1000_shortest_mollifier.V90_L.t_speed = 1750;
 801861a:	4b88      	ldr	r3, [pc, #544]	; (801883c <input_parameter+0xb70>)
 801861c:	4a8d      	ldr	r2, [pc, #564]	; (8018854 <input_parameter+0xb88>)
 801861e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		speed1000_shortest_mollifier.V90_L.f_ofset = 14;
 8018622:	4b86      	ldr	r3, [pc, #536]	; (801883c <input_parameter+0xb70>)
 8018624:	4a8e      	ldr	r2, [pc, #568]	; (8018860 <input_parameter+0xb94>)
 8018626:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		speed1000_shortest_mollifier.V90_L.e_ofset = 18;
 801862a:	4b84      	ldr	r3, [pc, #528]	; (801883c <input_parameter+0xb70>)
 801862c:	4a8d      	ldr	r2, [pc, #564]	; (8018864 <input_parameter+0xb98>)
 801862e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


		//********************************1200********************************************
			speed1200_shortest_mollifier.SlalomCentervelocity = 1200;
 8018632:	4b8d      	ldr	r3, [pc, #564]	; (8018868 <input_parameter+0xb9c>)
 8018634:	4a8d      	ldr	r2, [pc, #564]	; (801886c <input_parameter+0xba0>)
 8018636:	601a      	str	r2, [r3, #0]
			speed1200_shortest_mollifier.TurnCentervelocity = 1200;
 8018638:	4b8b      	ldr	r3, [pc, #556]	; (8018868 <input_parameter+0xb9c>)
 801863a:	4a8c      	ldr	r2, [pc, #560]	; (801886c <input_parameter+0xba0>)
 801863c:	605a      	str	r2, [r3, #4]

			speed1200_shortest_mollifier.slalom_R.g_speed =
					speed1200_shortest_mollifier.SlalomCentervelocity;
 801863e:	4b8a      	ldr	r3, [pc, #552]	; (8018868 <input_parameter+0xb9c>)
 8018640:	681b      	ldr	r3, [r3, #0]
			speed1200_shortest_mollifier.slalom_R.g_speed =
 8018642:	4a89      	ldr	r2, [pc, #548]	; (8018868 <input_parameter+0xb9c>)
 8018644:	6093      	str	r3, [r2, #8]
			speed1200_shortest_mollifier.slalom_R.t_speed = 1100;
 8018646:	4b88      	ldr	r3, [pc, #544]	; (8018868 <input_parameter+0xb9c>)
 8018648:	4a89      	ldr	r2, [pc, #548]	; (8018870 <input_parameter+0xba4>)
 801864a:	615a      	str	r2, [r3, #20]
			speed1200_shortest_mollifier.slalom_R.f_ofset = 5;
 801864c:	4b86      	ldr	r3, [pc, #536]	; (8018868 <input_parameter+0xb9c>)
 801864e:	4a89      	ldr	r2, [pc, #548]	; (8018874 <input_parameter+0xba8>)
 8018650:	60da      	str	r2, [r3, #12]
			speed1200_shortest_mollifier.slalom_R.e_ofset = 28;
 8018652:	4b85      	ldr	r3, [pc, #532]	; (8018868 <input_parameter+0xb9c>)
 8018654:	4a88      	ldr	r2, [pc, #544]	; (8018878 <input_parameter+0xbac>)
 8018656:	611a      	str	r2, [r3, #16]

			speed1200_shortest_mollifier.slalom_L.g_speed =
					speed1200_shortest_mollifier.SlalomCentervelocity;
 8018658:	4b83      	ldr	r3, [pc, #524]	; (8018868 <input_parameter+0xb9c>)
 801865a:	681b      	ldr	r3, [r3, #0]
			speed1200_shortest_mollifier.slalom_L.g_speed =
 801865c:	4a82      	ldr	r2, [pc, #520]	; (8018868 <input_parameter+0xb9c>)
 801865e:	61d3      	str	r3, [r2, #28]
			speed1200_shortest_mollifier.slalom_L.t_speed = 1100;
 8018660:	4b81      	ldr	r3, [pc, #516]	; (8018868 <input_parameter+0xb9c>)
 8018662:	4a83      	ldr	r2, [pc, #524]	; (8018870 <input_parameter+0xba4>)
 8018664:	629a      	str	r2, [r3, #40]	; 0x28
			speed1200_shortest_mollifier.slalom_L.f_ofset = 5;
 8018666:	4b80      	ldr	r3, [pc, #512]	; (8018868 <input_parameter+0xb9c>)
 8018668:	4a82      	ldr	r2, [pc, #520]	; (8018874 <input_parameter+0xba8>)
 801866a:	621a      	str	r2, [r3, #32]
			speed1200_shortest_mollifier.slalom_L.e_ofset = 32;
 801866c:	4b7e      	ldr	r3, [pc, #504]	; (8018868 <input_parameter+0xb9c>)
 801866e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8018672:	625a      	str	r2, [r3, #36]	; 0x24

			speed1200_shortest_mollifier.turn90_R.g_speed = 1200;
 8018674:	4b7c      	ldr	r3, [pc, #496]	; (8018868 <input_parameter+0xb9c>)
 8018676:	4a7d      	ldr	r2, [pc, #500]	; (801886c <input_parameter+0xba0>)
 8018678:	631a      	str	r2, [r3, #48]	; 0x30
			speed1200_shortest_mollifier.turn90_R.t_speed = 1510;
 801867a:	4b7b      	ldr	r3, [pc, #492]	; (8018868 <input_parameter+0xb9c>)
 801867c:	4a7f      	ldr	r2, [pc, #508]	; (801887c <input_parameter+0xbb0>)
 801867e:	63da      	str	r2, [r3, #60]	; 0x3c
			speed1200_shortest_mollifier.turn90_R.f_ofset = 21;
 8018680:	4b79      	ldr	r3, [pc, #484]	; (8018868 <input_parameter+0xb9c>)
 8018682:	4a7f      	ldr	r2, [pc, #508]	; (8018880 <input_parameter+0xbb4>)
 8018684:	635a      	str	r2, [r3, #52]	; 0x34
			speed1200_shortest_mollifier.turn90_R.e_ofset = 20;
 8018686:	4b78      	ldr	r3, [pc, #480]	; (8018868 <input_parameter+0xb9c>)
 8018688:	4a7e      	ldr	r2, [pc, #504]	; (8018884 <input_parameter+0xbb8>)
 801868a:	639a      	str	r2, [r3, #56]	; 0x38

			speed1200_shortest_mollifier.turn90_L.g_speed = 1200;
 801868c:	4b76      	ldr	r3, [pc, #472]	; (8018868 <input_parameter+0xb9c>)
 801868e:	4a77      	ldr	r2, [pc, #476]	; (801886c <input_parameter+0xba0>)
 8018690:	645a      	str	r2, [r3, #68]	; 0x44
			speed1200_shortest_mollifier.turn90_L.t_speed = 1510;
 8018692:	4b75      	ldr	r3, [pc, #468]	; (8018868 <input_parameter+0xb9c>)
 8018694:	4a79      	ldr	r2, [pc, #484]	; (801887c <input_parameter+0xbb0>)
 8018696:	651a      	str	r2, [r3, #80]	; 0x50
			speed1200_shortest_mollifier.turn90_L.f_ofset = 20;
 8018698:	4b73      	ldr	r3, [pc, #460]	; (8018868 <input_parameter+0xb9c>)
 801869a:	4a7a      	ldr	r2, [pc, #488]	; (8018884 <input_parameter+0xbb8>)
 801869c:	649a      	str	r2, [r3, #72]	; 0x48
			speed1200_shortest_mollifier.turn90_L.e_ofset = 25;
 801869e:	4b72      	ldr	r3, [pc, #456]	; (8018868 <input_parameter+0xb9c>)
 80186a0:	4a79      	ldr	r2, [pc, #484]	; (8018888 <input_parameter+0xbbc>)
 80186a2:	64da      	str	r2, [r3, #76]	; 0x4c

			speed1200_shortest_mollifier.turn180_R.g_speed =1200;
 80186a4:	4b70      	ldr	r3, [pc, #448]	; (8018868 <input_parameter+0xb9c>)
 80186a6:	4a71      	ldr	r2, [pc, #452]	; (801886c <input_parameter+0xba0>)
 80186a8:	659a      	str	r2, [r3, #88]	; 0x58
			speed1200_shortest_mollifier.turn180_R.t_speed = 1650;
 80186aa:	4b6f      	ldr	r3, [pc, #444]	; (8018868 <input_parameter+0xb9c>)
 80186ac:	4a77      	ldr	r2, [pc, #476]	; (801888c <input_parameter+0xbc0>)
 80186ae:	665a      	str	r2, [r3, #100]	; 0x64
			speed1200_shortest_mollifier.turn180_R.f_ofset = 17;
 80186b0:	4b6d      	ldr	r3, [pc, #436]	; (8018868 <input_parameter+0xb9c>)
 80186b2:	4a77      	ldr	r2, [pc, #476]	; (8018890 <input_parameter+0xbc4>)
 80186b4:	65da      	str	r2, [r3, #92]	; 0x5c
			speed1200_shortest_mollifier.turn180_R.e_ofset = 20;
 80186b6:	4b6c      	ldr	r3, [pc, #432]	; (8018868 <input_parameter+0xb9c>)
 80186b8:	4a72      	ldr	r2, [pc, #456]	; (8018884 <input_parameter+0xbb8>)
 80186ba:	661a      	str	r2, [r3, #96]	; 0x60

			speed1200_shortest_mollifier.turn180_L.g_speed = 1200;
 80186bc:	4b6a      	ldr	r3, [pc, #424]	; (8018868 <input_parameter+0xb9c>)
 80186be:	4a6b      	ldr	r2, [pc, #428]	; (801886c <input_parameter+0xba0>)
 80186c0:	66da      	str	r2, [r3, #108]	; 0x6c
			speed1200_shortest_mollifier.turn180_L.t_speed = 1650;
 80186c2:	4b69      	ldr	r3, [pc, #420]	; (8018868 <input_parameter+0xb9c>)
 80186c4:	4a71      	ldr	r2, [pc, #452]	; (801888c <input_parameter+0xbc0>)
 80186c6:	679a      	str	r2, [r3, #120]	; 0x78
			speed1200_shortest_mollifier.turn180_L.f_ofset = 15;
 80186c8:	4b67      	ldr	r3, [pc, #412]	; (8018868 <input_parameter+0xb9c>)
 80186ca:	4a64      	ldr	r2, [pc, #400]	; (801885c <input_parameter+0xb90>)
 80186cc:	671a      	str	r2, [r3, #112]	; 0x70
			speed1200_shortest_mollifier.turn180_L.e_ofset = 8;
 80186ce:	4b66      	ldr	r3, [pc, #408]	; (8018868 <input_parameter+0xb9c>)
 80186d0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80186d4:	675a      	str	r2, [r3, #116]	; 0x74

			speed1200_shortest_mollifier.turn45in_R.g_speed = 1200;
 80186d6:	4b64      	ldr	r3, [pc, #400]	; (8018868 <input_parameter+0xb9c>)
 80186d8:	4a64      	ldr	r2, [pc, #400]	; (801886c <input_parameter+0xba0>)
 80186da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			speed1200_shortest_mollifier.turn45in_R.t_speed = 1550;
 80186de:	4b62      	ldr	r3, [pc, #392]	; (8018868 <input_parameter+0xb9c>)
 80186e0:	4a6c      	ldr	r2, [pc, #432]	; (8018894 <input_parameter+0xbc8>)
 80186e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			speed1200_shortest_mollifier.turn45in_R.f_ofset = 8;
 80186e6:	4b60      	ldr	r3, [pc, #384]	; (8018868 <input_parameter+0xb9c>)
 80186e8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80186ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			speed1200_shortest_mollifier.turn45in_R.e_ofset = 39;
 80186f0:	4b5d      	ldr	r3, [pc, #372]	; (8018868 <input_parameter+0xb9c>)
 80186f2:	4a69      	ldr	r2, [pc, #420]	; (8018898 <input_parameter+0xbcc>)
 80186f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

			speed1200_shortest_mollifier.turn45in_L.g_speed = 1200;
 80186f8:	4b5b      	ldr	r3, [pc, #364]	; (8018868 <input_parameter+0xb9c>)
 80186fa:	4a5c      	ldr	r2, [pc, #368]	; (801886c <input_parameter+0xba0>)
 80186fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			speed1200_shortest_mollifier.turn45in_L.t_speed = 1550;
 8018700:	4b59      	ldr	r3, [pc, #356]	; (8018868 <input_parameter+0xb9c>)
 8018702:	4a64      	ldr	r2, [pc, #400]	; (8018894 <input_parameter+0xbc8>)
 8018704:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			speed1200_shortest_mollifier.turn45in_L.f_ofset = 16;
 8018708:	4b57      	ldr	r3, [pc, #348]	; (8018868 <input_parameter+0xb9c>)
 801870a:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 801870e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			speed1200_shortest_mollifier.turn45in_L.e_ofset = 39;
 8018712:	4b55      	ldr	r3, [pc, #340]	; (8018868 <input_parameter+0xb9c>)
 8018714:	4a60      	ldr	r2, [pc, #384]	; (8018898 <input_parameter+0xbcc>)
 8018716:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

			speed1200_shortest_mollifier.turn135in_R.g_speed = 1200;
 801871a:	4b53      	ldr	r3, [pc, #332]	; (8018868 <input_parameter+0xb9c>)
 801871c:	4a53      	ldr	r2, [pc, #332]	; (801886c <input_parameter+0xba0>)
 801871e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			speed1200_shortest_mollifier.turn135in_R.t_speed = 1850;
 8018722:	4b51      	ldr	r3, [pc, #324]	; (8018868 <input_parameter+0xb9c>)
 8018724:	4a5d      	ldr	r2, [pc, #372]	; (801889c <input_parameter+0xbd0>)
 8018726:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			speed1200_shortest_mollifier.turn135in_R.f_ofset = 16;
 801872a:	4b4f      	ldr	r3, [pc, #316]	; (8018868 <input_parameter+0xb9c>)
 801872c:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8018730:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			speed1200_shortest_mollifier.turn135in_R.e_ofset = 22;
 8018734:	4b4c      	ldr	r3, [pc, #304]	; (8018868 <input_parameter+0xb9c>)
 8018736:	4a42      	ldr	r2, [pc, #264]	; (8018840 <input_parameter+0xb74>)
 8018738:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

			speed1200_shortest_mollifier.turn135in_L.g_speed = 1200;
 801873c:	4b4a      	ldr	r3, [pc, #296]	; (8018868 <input_parameter+0xb9c>)
 801873e:	4a4b      	ldr	r2, [pc, #300]	; (801886c <input_parameter+0xba0>)
 8018740:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			speed1200_shortest_mollifier.turn135in_L.t_speed = 1850;
 8018744:	4b48      	ldr	r3, [pc, #288]	; (8018868 <input_parameter+0xb9c>)
 8018746:	4a55      	ldr	r2, [pc, #340]	; (801889c <input_parameter+0xbd0>)
 8018748:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
			speed1200_shortest_mollifier.turn135in_L.f_ofset = 15;
 801874c:	4b46      	ldr	r3, [pc, #280]	; (8018868 <input_parameter+0xb9c>)
 801874e:	4a43      	ldr	r2, [pc, #268]	; (801885c <input_parameter+0xb90>)
 8018750:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			speed1200_shortest_mollifier.turn135in_L.e_ofset = 20;
 8018754:	4b44      	ldr	r3, [pc, #272]	; (8018868 <input_parameter+0xb9c>)
 8018756:	4a4b      	ldr	r2, [pc, #300]	; (8018884 <input_parameter+0xbb8>)
 8018758:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

			speed1200_shortest_mollifier.turn45out_R.g_speed = 1200;
 801875c:	4b42      	ldr	r3, [pc, #264]	; (8018868 <input_parameter+0xb9c>)
 801875e:	4a43      	ldr	r2, [pc, #268]	; (801886c <input_parameter+0xba0>)
 8018760:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
			speed1200_shortest_mollifier.turn45out_R.t_speed = 1400;
 8018764:	4b40      	ldr	r3, [pc, #256]	; (8018868 <input_parameter+0xb9c>)
 8018766:	4a4e      	ldr	r2, [pc, #312]	; (80188a0 <input_parameter+0xbd4>)
 8018768:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			speed1200_shortest_mollifier.turn45out_R.f_ofset = 33;
 801876c:	4b3e      	ldr	r3, [pc, #248]	; (8018868 <input_parameter+0xb9c>)
 801876e:	4a4d      	ldr	r2, [pc, #308]	; (80188a4 <input_parameter+0xbd8>)
 8018770:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			speed1200_shortest_mollifier.turn45out_R.e_ofset = 16;
 8018774:	4b3c      	ldr	r3, [pc, #240]	; (8018868 <input_parameter+0xb9c>)
 8018776:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 801877a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

			speed1200_shortest_mollifier.turn45out_L.g_speed = 1200;
 801877e:	4b3a      	ldr	r3, [pc, #232]	; (8018868 <input_parameter+0xb9c>)
 8018780:	4a3a      	ldr	r2, [pc, #232]	; (801886c <input_parameter+0xba0>)
 8018782:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			speed1200_shortest_mollifier.turn45out_L.t_speed = 1400;
 8018786:	4b38      	ldr	r3, [pc, #224]	; (8018868 <input_parameter+0xb9c>)
 8018788:	4a45      	ldr	r2, [pc, #276]	; (80188a0 <input_parameter+0xbd4>)
 801878a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
			speed1200_shortest_mollifier.turn45out_L.f_ofset = 24;
 801878e:	4b36      	ldr	r3, [pc, #216]	; (8018868 <input_parameter+0xb9c>)
 8018790:	4a45      	ldr	r2, [pc, #276]	; (80188a8 <input_parameter+0xbdc>)
 8018792:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
			speed1200_shortest_mollifier.turn45out_L.e_ofset = 16;
 8018796:	4b34      	ldr	r3, [pc, #208]	; (8018868 <input_parameter+0xb9c>)
 8018798:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 801879c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

			speed1200_shortest_mollifier.turn135out_R.g_speed = 1200;
 80187a0:	4b31      	ldr	r3, [pc, #196]	; (8018868 <input_parameter+0xb9c>)
 80187a2:	4a32      	ldr	r2, [pc, #200]	; (801886c <input_parameter+0xba0>)
 80187a4:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
			speed1200_shortest_mollifier.turn135out_R.t_speed = 1850;
 80187a8:	4b2f      	ldr	r3, [pc, #188]	; (8018868 <input_parameter+0xb9c>)
 80187aa:	4a3c      	ldr	r2, [pc, #240]	; (801889c <input_parameter+0xbd0>)
 80187ac:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
			speed1200_shortest_mollifier.turn135out_R.f_ofset = 8;
 80187b0:	4b2d      	ldr	r3, [pc, #180]	; (8018868 <input_parameter+0xb9c>)
 80187b2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80187b6:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
			speed1200_shortest_mollifier.turn135out_R.e_ofset = 30;
 80187ba:	4b2b      	ldr	r3, [pc, #172]	; (8018868 <input_parameter+0xb9c>)
 80187bc:	4a24      	ldr	r2, [pc, #144]	; (8018850 <input_parameter+0xb84>)
 80187be:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

			speed1200_shortest_mollifier.turn135out_L.g_speed = 1200;
 80187c2:	4b29      	ldr	r3, [pc, #164]	; (8018868 <input_parameter+0xb9c>)
 80187c4:	4a29      	ldr	r2, [pc, #164]	; (801886c <input_parameter+0xba0>)
 80187c6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
			speed1200_shortest_mollifier.turn135out_L.t_speed = 1850;
 80187ca:	4b27      	ldr	r3, [pc, #156]	; (8018868 <input_parameter+0xb9c>)
 80187cc:	4a33      	ldr	r2, [pc, #204]	; (801889c <input_parameter+0xbd0>)
 80187ce:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			speed1200_shortest_mollifier.turn135out_L.f_ofset = 10;
 80187d2:	4b25      	ldr	r3, [pc, #148]	; (8018868 <input_parameter+0xb9c>)
 80187d4:	4a1d      	ldr	r2, [pc, #116]	; (801884c <input_parameter+0xb80>)
 80187d6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			speed1200_shortest_mollifier.turn135out_L.e_ofset = 30;
 80187da:	4b23      	ldr	r3, [pc, #140]	; (8018868 <input_parameter+0xb9c>)
 80187dc:	4a1c      	ldr	r2, [pc, #112]	; (8018850 <input_parameter+0xb84>)
 80187de:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

			speed1200_shortest_mollifier.V90_R.g_speed = 1200;
 80187e2:	4b21      	ldr	r3, [pc, #132]	; (8018868 <input_parameter+0xb9c>)
 80187e4:	4a21      	ldr	r2, [pc, #132]	; (801886c <input_parameter+0xba0>)
 80187e6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			speed1200_shortest_mollifier.V90_R.t_speed = 1950;
 80187ea:	4b1f      	ldr	r3, [pc, #124]	; (8018868 <input_parameter+0xb9c>)
 80187ec:	4a2f      	ldr	r2, [pc, #188]	; (80188ac <input_parameter+0xbe0>)
 80187ee:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			speed1200_shortest_mollifier.V90_R.f_ofset = 14;
 80187f2:	4b1d      	ldr	r3, [pc, #116]	; (8018868 <input_parameter+0xb9c>)
 80187f4:	4a1a      	ldr	r2, [pc, #104]	; (8018860 <input_parameter+0xb94>)
 80187f6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
			speed1200_shortest_mollifier.V90_R.e_ofset = 20;
 80187fa:	4b1b      	ldr	r3, [pc, #108]	; (8018868 <input_parameter+0xb9c>)
 80187fc:	4a21      	ldr	r2, [pc, #132]	; (8018884 <input_parameter+0xbb8>)
 80187fe:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

			speed1200_shortest_mollifier.V90_L.g_speed = 1200;
 8018802:	4b19      	ldr	r3, [pc, #100]	; (8018868 <input_parameter+0xb9c>)
 8018804:	4a19      	ldr	r2, [pc, #100]	; (801886c <input_parameter+0xba0>)
 8018806:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
			speed1200_shortest_mollifier.V90_L.t_speed = 1950;
 801880a:	4b17      	ldr	r3, [pc, #92]	; (8018868 <input_parameter+0xb9c>)
 801880c:	4a27      	ldr	r2, [pc, #156]	; (80188ac <input_parameter+0xbe0>)
 801880e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			speed1200_shortest_mollifier.V90_L.f_ofset = 8.5;
 8018812:	4b15      	ldr	r3, [pc, #84]	; (8018868 <input_parameter+0xb9c>)
 8018814:	4a26      	ldr	r2, [pc, #152]	; (80188b0 <input_parameter+0xbe4>)
 8018816:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
			speed1200_shortest_mollifier.V90_L.e_ofset = 20;
 801881a:	4b13      	ldr	r3, [pc, #76]	; (8018868 <input_parameter+0xb9c>)
 801881c:	4a19      	ldr	r2, [pc, #100]	; (8018884 <input_parameter+0xbb8>)
 801881e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

//********************************1600********************************************
				speed1600_shortest_mollifier.SlalomCentervelocity = 1500;
 8018822:	4b24      	ldr	r3, [pc, #144]	; (80188b4 <input_parameter+0xbe8>)
 8018824:	4a24      	ldr	r2, [pc, #144]	; (80188b8 <input_parameter+0xbec>)
 8018826:	601a      	str	r2, [r3, #0]
				speed1600_shortest_mollifier.TurnCentervelocity = 1500;
 8018828:	4b22      	ldr	r3, [pc, #136]	; (80188b4 <input_parameter+0xbe8>)
 801882a:	4a23      	ldr	r2, [pc, #140]	; (80188b8 <input_parameter+0xbec>)
 801882c:	605a      	str	r2, [r3, #4]

				speed1600_shortest_mollifier.turn90_R.g_speed = 1500;
 801882e:	4b21      	ldr	r3, [pc, #132]	; (80188b4 <input_parameter+0xbe8>)
 8018830:	4a21      	ldr	r2, [pc, #132]	; (80188b8 <input_parameter+0xbec>)
 8018832:	631a      	str	r2, [r3, #48]	; 0x30
				speed1600_shortest_mollifier.turn90_R.t_speed = 1830;
 8018834:	4b1f      	ldr	r3, [pc, #124]	; (80188b4 <input_parameter+0xbe8>)
 8018836:	4a21      	ldr	r2, [pc, #132]	; (80188bc <input_parameter+0xbf0>)
 8018838:	63da      	str	r2, [r3, #60]	; 0x3c
 801883a:	e041      	b.n	80188c0 <input_parameter+0xbf4>
 801883c:	2000f4a0 	.word	0x2000f4a0
 8018840:	41b00000 	.word	0x41b00000
 8018844:	447a0000 	.word	0x447a0000
 8018848:	44cf8000 	.word	0x44cf8000
 801884c:	41200000 	.word	0x41200000
 8018850:	41f00000 	.word	0x41f00000
 8018854:	44dac000 	.word	0x44dac000
 8018858:	41840000 	.word	0x41840000
 801885c:	41700000 	.word	0x41700000
 8018860:	41600000 	.word	0x41600000
 8018864:	41900000 	.word	0x41900000
 8018868:	2000f5e8 	.word	0x2000f5e8
 801886c:	44960000 	.word	0x44960000
 8018870:	44898000 	.word	0x44898000
 8018874:	40a00000 	.word	0x40a00000
 8018878:	41e00000 	.word	0x41e00000
 801887c:	44bcc000 	.word	0x44bcc000
 8018880:	41a80000 	.word	0x41a80000
 8018884:	41a00000 	.word	0x41a00000
 8018888:	41c80000 	.word	0x41c80000
 801888c:	44ce4000 	.word	0x44ce4000
 8018890:	41880000 	.word	0x41880000
 8018894:	44c1c000 	.word	0x44c1c000
 8018898:	421c0000 	.word	0x421c0000
 801889c:	44e74000 	.word	0x44e74000
 80188a0:	44af0000 	.word	0x44af0000
 80188a4:	42040000 	.word	0x42040000
 80188a8:	41c00000 	.word	0x41c00000
 80188ac:	44f3c000 	.word	0x44f3c000
 80188b0:	41080000 	.word	0x41080000
 80188b4:	2000f730 	.word	0x2000f730
 80188b8:	44bb8000 	.word	0x44bb8000
 80188bc:	44e4c000 	.word	0x44e4c000
				speed1600_shortest_mollifier.turn90_R.f_ofset = 17;
 80188c0:	4b67      	ldr	r3, [pc, #412]	; (8018a60 <input_parameter+0xd94>)
 80188c2:	4a68      	ldr	r2, [pc, #416]	; (8018a64 <input_parameter+0xd98>)
 80188c4:	635a      	str	r2, [r3, #52]	; 0x34
				speed1600_shortest_mollifier.turn90_R.e_ofset = 31;
 80188c6:	4b66      	ldr	r3, [pc, #408]	; (8018a60 <input_parameter+0xd94>)
 80188c8:	4a67      	ldr	r2, [pc, #412]	; (8018a68 <input_parameter+0xd9c>)
 80188ca:	639a      	str	r2, [r3, #56]	; 0x38

				speed1600_shortest_mollifier.turn90_L.g_speed = 1500;
 80188cc:	4b64      	ldr	r3, [pc, #400]	; (8018a60 <input_parameter+0xd94>)
 80188ce:	4a67      	ldr	r2, [pc, #412]	; (8018a6c <input_parameter+0xda0>)
 80188d0:	645a      	str	r2, [r3, #68]	; 0x44
				speed1600_shortest_mollifier.turn90_L.t_speed = 1830;
 80188d2:	4b63      	ldr	r3, [pc, #396]	; (8018a60 <input_parameter+0xd94>)
 80188d4:	4a66      	ldr	r2, [pc, #408]	; (8018a70 <input_parameter+0xda4>)
 80188d6:	651a      	str	r2, [r3, #80]	; 0x50
				speed1600_shortest_mollifier.turn90_L.f_ofset = 15;
 80188d8:	4b61      	ldr	r3, [pc, #388]	; (8018a60 <input_parameter+0xd94>)
 80188da:	4a66      	ldr	r2, [pc, #408]	; (8018a74 <input_parameter+0xda8>)
 80188dc:	649a      	str	r2, [r3, #72]	; 0x48
				speed1600_shortest_mollifier.turn90_L.e_ofset = 35;
 80188de:	4b60      	ldr	r3, [pc, #384]	; (8018a60 <input_parameter+0xd94>)
 80188e0:	4a65      	ldr	r2, [pc, #404]	; (8018a78 <input_parameter+0xdac>)
 80188e2:	64da      	str	r2, [r3, #76]	; 0x4c

				speed1600_shortest_mollifier.turn180_R.g_speed =1500;
 80188e4:	4b5e      	ldr	r3, [pc, #376]	; (8018a60 <input_parameter+0xd94>)
 80188e6:	4a61      	ldr	r2, [pc, #388]	; (8018a6c <input_parameter+0xda0>)
 80188e8:	659a      	str	r2, [r3, #88]	; 0x58
				speed1600_shortest_mollifier.turn180_R.t_speed = 2000;
 80188ea:	4b5d      	ldr	r3, [pc, #372]	; (8018a60 <input_parameter+0xd94>)
 80188ec:	4a63      	ldr	r2, [pc, #396]	; (8018a7c <input_parameter+0xdb0>)
 80188ee:	665a      	str	r2, [r3, #100]	; 0x64
				speed1600_shortest_mollifier.turn180_R.f_ofset = 10;
 80188f0:	4b5b      	ldr	r3, [pc, #364]	; (8018a60 <input_parameter+0xd94>)
 80188f2:	4a63      	ldr	r2, [pc, #396]	; (8018a80 <input_parameter+0xdb4>)
 80188f4:	65da      	str	r2, [r3, #92]	; 0x5c
				speed1600_shortest_mollifier.turn180_R.e_ofset = 20;
 80188f6:	4b5a      	ldr	r3, [pc, #360]	; (8018a60 <input_parameter+0xd94>)
 80188f8:	4a62      	ldr	r2, [pc, #392]	; (8018a84 <input_parameter+0xdb8>)
 80188fa:	661a      	str	r2, [r3, #96]	; 0x60

				speed1600_shortest_mollifier.turn180_L.g_speed = 1500;
 80188fc:	4b58      	ldr	r3, [pc, #352]	; (8018a60 <input_parameter+0xd94>)
 80188fe:	4a5b      	ldr	r2, [pc, #364]	; (8018a6c <input_parameter+0xda0>)
 8018900:	66da      	str	r2, [r3, #108]	; 0x6c
				speed1600_shortest_mollifier.turn180_L.t_speed = 2000;
 8018902:	4b57      	ldr	r3, [pc, #348]	; (8018a60 <input_parameter+0xd94>)
 8018904:	4a5d      	ldr	r2, [pc, #372]	; (8018a7c <input_parameter+0xdb0>)
 8018906:	679a      	str	r2, [r3, #120]	; 0x78
				speed1600_shortest_mollifier.turn180_L.f_ofset = 10;
 8018908:	4b55      	ldr	r3, [pc, #340]	; (8018a60 <input_parameter+0xd94>)
 801890a:	4a5d      	ldr	r2, [pc, #372]	; (8018a80 <input_parameter+0xdb4>)
 801890c:	671a      	str	r2, [r3, #112]	; 0x70
				speed1600_shortest_mollifier.turn180_L.e_ofset = 18;
 801890e:	4b54      	ldr	r3, [pc, #336]	; (8018a60 <input_parameter+0xd94>)
 8018910:	4a5d      	ldr	r2, [pc, #372]	; (8018a88 <input_parameter+0xdbc>)
 8018912:	675a      	str	r2, [r3, #116]	; 0x74

				speed1600_shortest_mollifier.turn45in_R.g_speed = 1500;
 8018914:	4b52      	ldr	r3, [pc, #328]	; (8018a60 <input_parameter+0xd94>)
 8018916:	4a55      	ldr	r2, [pc, #340]	; (8018a6c <input_parameter+0xda0>)
 8018918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				speed1600_shortest_mollifier.turn45in_R.t_speed = 1850;
 801891c:	4b50      	ldr	r3, [pc, #320]	; (8018a60 <input_parameter+0xd94>)
 801891e:	4a5b      	ldr	r2, [pc, #364]	; (8018a8c <input_parameter+0xdc0>)
 8018920:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				speed1600_shortest_mollifier.turn45in_R.f_ofset = 12;
 8018924:	4b4e      	ldr	r3, [pc, #312]	; (8018a60 <input_parameter+0xd94>)
 8018926:	4a5a      	ldr	r2, [pc, #360]	; (8018a90 <input_parameter+0xdc4>)
 8018928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				speed1600_shortest_mollifier.turn45in_R.e_ofset = 38;
 801892c:	4b4c      	ldr	r3, [pc, #304]	; (8018a60 <input_parameter+0xd94>)
 801892e:	4a59      	ldr	r2, [pc, #356]	; (8018a94 <input_parameter+0xdc8>)
 8018930:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

				speed1600_shortest_mollifier.turn45in_L.g_speed = 1500;
 8018934:	4b4a      	ldr	r3, [pc, #296]	; (8018a60 <input_parameter+0xd94>)
 8018936:	4a4d      	ldr	r2, [pc, #308]	; (8018a6c <input_parameter+0xda0>)
 8018938:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
				speed1600_shortest_mollifier.turn45in_L.t_speed = 1850;
 801893c:	4b48      	ldr	r3, [pc, #288]	; (8018a60 <input_parameter+0xd94>)
 801893e:	4a53      	ldr	r2, [pc, #332]	; (8018a8c <input_parameter+0xdc0>)
 8018940:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				speed1600_shortest_mollifier.turn45in_L.f_ofset = 12;
 8018944:	4b46      	ldr	r3, [pc, #280]	; (8018a60 <input_parameter+0xd94>)
 8018946:	4a52      	ldr	r2, [pc, #328]	; (8018a90 <input_parameter+0xdc4>)
 8018948:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				speed1600_shortest_mollifier.turn45in_L.e_ofset = 36;
 801894c:	4b44      	ldr	r3, [pc, #272]	; (8018a60 <input_parameter+0xd94>)
 801894e:	4a52      	ldr	r2, [pc, #328]	; (8018a98 <input_parameter+0xdcc>)
 8018950:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

				speed1600_shortest_mollifier.turn135in_R.g_speed = 1500;
 8018954:	4b42      	ldr	r3, [pc, #264]	; (8018a60 <input_parameter+0xd94>)
 8018956:	4a45      	ldr	r2, [pc, #276]	; (8018a6c <input_parameter+0xda0>)
 8018958:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
				speed1600_shortest_mollifier.turn135in_R.t_speed = 2100;
 801895c:	4b40      	ldr	r3, [pc, #256]	; (8018a60 <input_parameter+0xd94>)
 801895e:	4a4f      	ldr	r2, [pc, #316]	; (8018a9c <input_parameter+0xdd0>)
 8018960:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				speed1600_shortest_mollifier.turn135in_R.f_ofset = 13;
 8018964:	4b3e      	ldr	r3, [pc, #248]	; (8018a60 <input_parameter+0xd94>)
 8018966:	4a4e      	ldr	r2, [pc, #312]	; (8018aa0 <input_parameter+0xdd4>)
 8018968:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				speed1600_shortest_mollifier.turn135in_R.e_ofset = 36;
 801896c:	4b3c      	ldr	r3, [pc, #240]	; (8018a60 <input_parameter+0xd94>)
 801896e:	4a4a      	ldr	r2, [pc, #296]	; (8018a98 <input_parameter+0xdcc>)
 8018970:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

				speed1600_shortest_mollifier.turn135in_L.g_speed = 1500;
 8018974:	4b3a      	ldr	r3, [pc, #232]	; (8018a60 <input_parameter+0xd94>)
 8018976:	4a3d      	ldr	r2, [pc, #244]	; (8018a6c <input_parameter+0xda0>)
 8018978:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
				speed1600_shortest_mollifier.turn135in_L.t_speed = 2100;
 801897c:	4b38      	ldr	r3, [pc, #224]	; (8018a60 <input_parameter+0xd94>)
 801897e:	4a47      	ldr	r2, [pc, #284]	; (8018a9c <input_parameter+0xdd0>)
 8018980:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
				speed1600_shortest_mollifier.turn135in_L.f_ofset = 13;
 8018984:	4b36      	ldr	r3, [pc, #216]	; (8018a60 <input_parameter+0xd94>)
 8018986:	4a46      	ldr	r2, [pc, #280]	; (8018aa0 <input_parameter+0xdd4>)
 8018988:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
				speed1600_shortest_mollifier.turn135in_L.e_ofset = 34;
 801898c:	4b34      	ldr	r3, [pc, #208]	; (8018a60 <input_parameter+0xd94>)
 801898e:	4a45      	ldr	r2, [pc, #276]	; (8018aa4 <input_parameter+0xdd8>)
 8018990:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

				speed1600_shortest_mollifier.turn45out_R.g_speed = 1500;
 8018994:	4b32      	ldr	r3, [pc, #200]	; (8018a60 <input_parameter+0xd94>)
 8018996:	4a35      	ldr	r2, [pc, #212]	; (8018a6c <input_parameter+0xda0>)
 8018998:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
				speed1600_shortest_mollifier.turn45out_R.t_speed = 1800;
 801899c:	4b30      	ldr	r3, [pc, #192]	; (8018a60 <input_parameter+0xd94>)
 801899e:	4a42      	ldr	r2, [pc, #264]	; (8018aa8 <input_parameter+0xddc>)
 80189a0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
				speed1600_shortest_mollifier.turn45out_R.f_ofset = 21;
 80189a4:	4b2e      	ldr	r3, [pc, #184]	; (8018a60 <input_parameter+0xd94>)
 80189a6:	4a41      	ldr	r2, [pc, #260]	; (8018aac <input_parameter+0xde0>)
 80189a8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
				speed1600_shortest_mollifier.turn45out_R.e_ofset = 22;
 80189ac:	4b2c      	ldr	r3, [pc, #176]	; (8018a60 <input_parameter+0xd94>)
 80189ae:	4a40      	ldr	r2, [pc, #256]	; (8018ab0 <input_parameter+0xde4>)
 80189b0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

				speed1600_shortest_mollifier.turn45out_L.g_speed = 1500;
 80189b4:	4b2a      	ldr	r3, [pc, #168]	; (8018a60 <input_parameter+0xd94>)
 80189b6:	4a2d      	ldr	r2, [pc, #180]	; (8018a6c <input_parameter+0xda0>)
 80189b8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				speed1600_shortest_mollifier.turn45out_L.t_speed = 1800;
 80189bc:	4b28      	ldr	r3, [pc, #160]	; (8018a60 <input_parameter+0xd94>)
 80189be:	4a3a      	ldr	r2, [pc, #232]	; (8018aa8 <input_parameter+0xddc>)
 80189c0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
				speed1600_shortest_mollifier.turn45out_L.f_ofset = 18;
 80189c4:	4b26      	ldr	r3, [pc, #152]	; (8018a60 <input_parameter+0xd94>)
 80189c6:	4a30      	ldr	r2, [pc, #192]	; (8018a88 <input_parameter+0xdbc>)
 80189c8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
				speed1600_shortest_mollifier.turn45out_L.e_ofset = 24;
 80189cc:	4b24      	ldr	r3, [pc, #144]	; (8018a60 <input_parameter+0xd94>)
 80189ce:	4a39      	ldr	r2, [pc, #228]	; (8018ab4 <input_parameter+0xde8>)
 80189d0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

				speed1600_shortest_mollifier.turn135out_R.g_speed = 1500;
 80189d4:	4b22      	ldr	r3, [pc, #136]	; (8018a60 <input_parameter+0xd94>)
 80189d6:	4a25      	ldr	r2, [pc, #148]	; (8018a6c <input_parameter+0xda0>)
 80189d8:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
				speed1600_shortest_mollifier.turn135out_R.t_speed = 2200;
 80189dc:	4b20      	ldr	r3, [pc, #128]	; (8018a60 <input_parameter+0xd94>)
 80189de:	4a36      	ldr	r2, [pc, #216]	; (8018ab8 <input_parameter+0xdec>)
 80189e0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
				speed1600_shortest_mollifier.turn135out_R.f_ofset = 7;
 80189e4:	4b1e      	ldr	r3, [pc, #120]	; (8018a60 <input_parameter+0xd94>)
 80189e6:	4a35      	ldr	r2, [pc, #212]	; (8018abc <input_parameter+0xdf0>)
 80189e8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
				speed1600_shortest_mollifier.turn135out_R.e_ofset = 22;
 80189ec:	4b1c      	ldr	r3, [pc, #112]	; (8018a60 <input_parameter+0xd94>)
 80189ee:	4a30      	ldr	r2, [pc, #192]	; (8018ab0 <input_parameter+0xde4>)
 80189f0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

				speed1600_shortest_mollifier.turn135out_L.g_speed = 1500;
 80189f4:	4b1a      	ldr	r3, [pc, #104]	; (8018a60 <input_parameter+0xd94>)
 80189f6:	4a1d      	ldr	r2, [pc, #116]	; (8018a6c <input_parameter+0xda0>)
 80189f8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
				speed1600_shortest_mollifier.turn135out_L.t_speed = 2200;
 80189fc:	4b18      	ldr	r3, [pc, #96]	; (8018a60 <input_parameter+0xd94>)
 80189fe:	4a2e      	ldr	r2, [pc, #184]	; (8018ab8 <input_parameter+0xdec>)
 8018a00:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				speed1600_shortest_mollifier.turn135out_L.f_ofset = 7;
 8018a04:	4b16      	ldr	r3, [pc, #88]	; (8018a60 <input_parameter+0xd94>)
 8018a06:	4a2d      	ldr	r2, [pc, #180]	; (8018abc <input_parameter+0xdf0>)
 8018a08:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
				speed1600_shortest_mollifier.turn135out_L.e_ofset = 30;
 8018a0c:	4b14      	ldr	r3, [pc, #80]	; (8018a60 <input_parameter+0xd94>)
 8018a0e:	4a2c      	ldr	r2, [pc, #176]	; (8018ac0 <input_parameter+0xdf4>)
 8018a10:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

				speed1600_shortest_mollifier.V90_R.g_speed = 1500;
 8018a14:	4b12      	ldr	r3, [pc, #72]	; (8018a60 <input_parameter+0xd94>)
 8018a16:	4a15      	ldr	r2, [pc, #84]	; (8018a6c <input_parameter+0xda0>)
 8018a18:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				speed1600_shortest_mollifier.V90_R.t_speed = 2150;
 8018a1c:	4b10      	ldr	r3, [pc, #64]	; (8018a60 <input_parameter+0xd94>)
 8018a1e:	4a29      	ldr	r2, [pc, #164]	; (8018ac4 <input_parameter+0xdf8>)
 8018a20:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
				speed1600_shortest_mollifier.V90_R.f_ofset = 3;
 8018a24:	4b0e      	ldr	r3, [pc, #56]	; (8018a60 <input_parameter+0xd94>)
 8018a26:	4a28      	ldr	r2, [pc, #160]	; (8018ac8 <input_parameter+0xdfc>)
 8018a28:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
				speed1600_shortest_mollifier.V90_R.e_ofset = 20;
 8018a2c:	4b0c      	ldr	r3, [pc, #48]	; (8018a60 <input_parameter+0xd94>)
 8018a2e:	4a15      	ldr	r2, [pc, #84]	; (8018a84 <input_parameter+0xdb8>)
 8018a30:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

				speed1600_shortest_mollifier.V90_L.g_speed = 1500;
 8018a34:	4b0a      	ldr	r3, [pc, #40]	; (8018a60 <input_parameter+0xd94>)
 8018a36:	4a0d      	ldr	r2, [pc, #52]	; (8018a6c <input_parameter+0xda0>)
 8018a38:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
				speed1600_shortest_mollifier.V90_L.t_speed = 2150;
 8018a3c:	4b08      	ldr	r3, [pc, #32]	; (8018a60 <input_parameter+0xd94>)
 8018a3e:	4a21      	ldr	r2, [pc, #132]	; (8018ac4 <input_parameter+0xdf8>)
 8018a40:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
				speed1600_shortest_mollifier.V90_L.f_ofset = 3;
 8018a44:	4b06      	ldr	r3, [pc, #24]	; (8018a60 <input_parameter+0xd94>)
 8018a46:	4a20      	ldr	r2, [pc, #128]	; (8018ac8 <input_parameter+0xdfc>)
 8018a48:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
				speed1600_shortest_mollifier.V90_L.e_ofset = 20;
 8018a4c:	4b04      	ldr	r3, [pc, #16]	; (8018a60 <input_parameter+0xd94>)
 8018a4e:	4a0d      	ldr	r2, [pc, #52]	; (8018a84 <input_parameter+0xdb8>)
 8018a50:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


}
 8018a54:	bf00      	nop
 8018a56:	46bd      	mov	sp, r7
 8018a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a5c:	4770      	bx	lr
 8018a5e:	bf00      	nop
 8018a60:	2000f730 	.word	0x2000f730
 8018a64:	41880000 	.word	0x41880000
 8018a68:	41f80000 	.word	0x41f80000
 8018a6c:	44bb8000 	.word	0x44bb8000
 8018a70:	44e4c000 	.word	0x44e4c000
 8018a74:	41700000 	.word	0x41700000
 8018a78:	420c0000 	.word	0x420c0000
 8018a7c:	44fa0000 	.word	0x44fa0000
 8018a80:	41200000 	.word	0x41200000
 8018a84:	41a00000 	.word	0x41a00000
 8018a88:	41900000 	.word	0x41900000
 8018a8c:	44e74000 	.word	0x44e74000
 8018a90:	41400000 	.word	0x41400000
 8018a94:	42180000 	.word	0x42180000
 8018a98:	42100000 	.word	0x42100000
 8018a9c:	45034000 	.word	0x45034000
 8018aa0:	41500000 	.word	0x41500000
 8018aa4:	42080000 	.word	0x42080000
 8018aa8:	44e10000 	.word	0x44e10000
 8018aac:	41a80000 	.word	0x41a80000
 8018ab0:	41b00000 	.word	0x41b00000
 8018ab4:	41c00000 	.word	0x41c00000
 8018ab8:	45098000 	.word	0x45098000
 8018abc:	40e00000 	.word	0x40e00000
 8018ac0:	41f00000 	.word	0x41f00000
 8018ac4:	45066000 	.word	0x45066000
 8018ac8:	40400000 	.word	0x40400000

08018acc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8018acc:	b580      	push	{r7, lr}
 8018ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8018ad0:	4b22      	ldr	r3, [pc, #136]	; (8018b5c <MX_USART1_UART_Init+0x90>)
 8018ad2:	4a23      	ldr	r2, [pc, #140]	; (8018b60 <MX_USART1_UART_Init+0x94>)
 8018ad4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8018ad6:	4b21      	ldr	r3, [pc, #132]	; (8018b5c <MX_USART1_UART_Init+0x90>)
 8018ad8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8018adc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8018ade:	4b1f      	ldr	r3, [pc, #124]	; (8018b5c <MX_USART1_UART_Init+0x90>)
 8018ae0:	2200      	movs	r2, #0
 8018ae2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8018ae4:	4b1d      	ldr	r3, [pc, #116]	; (8018b5c <MX_USART1_UART_Init+0x90>)
 8018ae6:	2200      	movs	r2, #0
 8018ae8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8018aea:	4b1c      	ldr	r3, [pc, #112]	; (8018b5c <MX_USART1_UART_Init+0x90>)
 8018aec:	2200      	movs	r2, #0
 8018aee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8018af0:	4b1a      	ldr	r3, [pc, #104]	; (8018b5c <MX_USART1_UART_Init+0x90>)
 8018af2:	220c      	movs	r2, #12
 8018af4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8018af6:	4b19      	ldr	r3, [pc, #100]	; (8018b5c <MX_USART1_UART_Init+0x90>)
 8018af8:	2200      	movs	r2, #0
 8018afa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8018afc:	4b17      	ldr	r3, [pc, #92]	; (8018b5c <MX_USART1_UART_Init+0x90>)
 8018afe:	2200      	movs	r2, #0
 8018b00:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8018b02:	4b16      	ldr	r3, [pc, #88]	; (8018b5c <MX_USART1_UART_Init+0x90>)
 8018b04:	2200      	movs	r2, #0
 8018b06:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8018b08:	4b14      	ldr	r3, [pc, #80]	; (8018b5c <MX_USART1_UART_Init+0x90>)
 8018b0a:	2200      	movs	r2, #0
 8018b0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8018b0e:	4b13      	ldr	r3, [pc, #76]	; (8018b5c <MX_USART1_UART_Init+0x90>)
 8018b10:	2200      	movs	r2, #0
 8018b12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8018b14:	4811      	ldr	r0, [pc, #68]	; (8018b5c <MX_USART1_UART_Init+0x90>)
 8018b16:	f006 fd2d 	bl	801f574 <HAL_UART_Init>
 8018b1a:	4603      	mov	r3, r0
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d001      	beq.n	8018b24 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8018b20:	f7f1 f95b 	bl	8009dda <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8018b24:	2100      	movs	r1, #0
 8018b26:	480d      	ldr	r0, [pc, #52]	; (8018b5c <MX_USART1_UART_Init+0x90>)
 8018b28:	f007 faf4 	bl	8020114 <HAL_UARTEx_SetTxFifoThreshold>
 8018b2c:	4603      	mov	r3, r0
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d001      	beq.n	8018b36 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8018b32:	f7f1 f952 	bl	8009dda <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8018b36:	2100      	movs	r1, #0
 8018b38:	4808      	ldr	r0, [pc, #32]	; (8018b5c <MX_USART1_UART_Init+0x90>)
 8018b3a:	f007 fb29 	bl	8020190 <HAL_UARTEx_SetRxFifoThreshold>
 8018b3e:	4603      	mov	r3, r0
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	d001      	beq.n	8018b48 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8018b44:	f7f1 f949 	bl	8009dda <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8018b48:	4804      	ldr	r0, [pc, #16]	; (8018b5c <MX_USART1_UART_Init+0x90>)
 8018b4a:	f007 faaa 	bl	80200a2 <HAL_UARTEx_DisableFifoMode>
 8018b4e:	4603      	mov	r3, r0
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d001      	beq.n	8018b58 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8018b54:	f7f1 f941 	bl	8009dda <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8018b58:	bf00      	nop
 8018b5a:	bd80      	pop	{r7, pc}
 8018b5c:	2000f878 	.word	0x2000f878
 8018b60:	40013800 	.word	0x40013800

08018b64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8018b64:	b580      	push	{r7, lr}
 8018b66:	b09e      	sub	sp, #120	; 0x78
 8018b68:	af00      	add	r7, sp, #0
 8018b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018b6c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018b70:	2200      	movs	r2, #0
 8018b72:	601a      	str	r2, [r3, #0]
 8018b74:	605a      	str	r2, [r3, #4]
 8018b76:	609a      	str	r2, [r3, #8]
 8018b78:	60da      	str	r2, [r3, #12]
 8018b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8018b7c:	f107 0314 	add.w	r3, r7, #20
 8018b80:	2250      	movs	r2, #80	; 0x50
 8018b82:	2100      	movs	r1, #0
 8018b84:	4618      	mov	r0, r3
 8018b86:	f007 fbc7 	bl	8020318 <memset>
  if(uartHandle->Instance==USART1)
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	4a1f      	ldr	r2, [pc, #124]	; (8018c0c <HAL_UART_MspInit+0xa8>)
 8018b90:	4293      	cmp	r3, r2
 8018b92:	d137      	bne.n	8018c04 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8018b94:	2301      	movs	r3, #1
 8018b96:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8018b98:	2300      	movs	r3, #0
 8018b9a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8018b9c:	f107 0314 	add.w	r3, r7, #20
 8018ba0:	4618      	mov	r0, r3
 8018ba2:	f004 f891 	bl	801ccc8 <HAL_RCCEx_PeriphCLKConfig>
 8018ba6:	4603      	mov	r3, r0
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	d001      	beq.n	8018bb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8018bac:	f7f1 f915 	bl	8009dda <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8018bb0:	4b17      	ldr	r3, [pc, #92]	; (8018c10 <HAL_UART_MspInit+0xac>)
 8018bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018bb4:	4a16      	ldr	r2, [pc, #88]	; (8018c10 <HAL_UART_MspInit+0xac>)
 8018bb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018bba:	6613      	str	r3, [r2, #96]	; 0x60
 8018bbc:	4b14      	ldr	r3, [pc, #80]	; (8018c10 <HAL_UART_MspInit+0xac>)
 8018bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018bc4:	613b      	str	r3, [r7, #16]
 8018bc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018bc8:	4b11      	ldr	r3, [pc, #68]	; (8018c10 <HAL_UART_MspInit+0xac>)
 8018bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018bcc:	4a10      	ldr	r2, [pc, #64]	; (8018c10 <HAL_UART_MspInit+0xac>)
 8018bce:	f043 0301 	orr.w	r3, r3, #1
 8018bd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8018bd4:	4b0e      	ldr	r3, [pc, #56]	; (8018c10 <HAL_UART_MspInit+0xac>)
 8018bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018bd8:	f003 0301 	and.w	r3, r3, #1
 8018bdc:	60fb      	str	r3, [r7, #12]
 8018bde:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8018be0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8018be4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018be6:	2302      	movs	r3, #2
 8018be8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018bea:	2300      	movs	r3, #0
 8018bec:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018bee:	2300      	movs	r3, #0
 8018bf0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8018bf2:	2307      	movs	r3, #7
 8018bf4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018bf6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018bfa:	4619      	mov	r1, r3
 8018bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8018c00:	f003 f8e4 	bl	801bdcc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8018c04:	bf00      	nop
 8018c06:	3778      	adds	r7, #120	; 0x78
 8018c08:	46bd      	mov	sp, r7
 8018c0a:	bd80      	pop	{r7, pc}
 8018c0c:	40013800 	.word	0x40013800
 8018c10:	40021000 	.word	0x40021000

08018c14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8018c14:	480d      	ldr	r0, [pc, #52]	; (8018c4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8018c16:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8018c18:	480d      	ldr	r0, [pc, #52]	; (8018c50 <LoopForever+0x6>)
  ldr r1, =_edata
 8018c1a:	490e      	ldr	r1, [pc, #56]	; (8018c54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8018c1c:	4a0e      	ldr	r2, [pc, #56]	; (8018c58 <LoopForever+0xe>)
  movs r3, #0
 8018c1e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8018c20:	e002      	b.n	8018c28 <LoopCopyDataInit>

08018c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8018c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8018c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8018c26:	3304      	adds	r3, #4

08018c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8018c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8018c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8018c2c:	d3f9      	bcc.n	8018c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8018c2e:	4a0b      	ldr	r2, [pc, #44]	; (8018c5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8018c30:	4c0b      	ldr	r4, [pc, #44]	; (8018c60 <LoopForever+0x16>)
  movs r3, #0
 8018c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8018c34:	e001      	b.n	8018c3a <LoopFillZerobss>

08018c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8018c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8018c38:	3204      	adds	r2, #4

08018c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8018c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8018c3c:	d3fb      	bcc.n	8018c36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8018c3e:	f7fe fd7d 	bl	801773c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8018c42:	f007 fb37 	bl	80202b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8018c46:	f7f0 ffcf 	bl	8009be8 <main>

08018c4a <LoopForever>:

LoopForever:
    b LoopForever
 8018c4a:	e7fe      	b.n	8018c4a <LoopForever>
  ldr   r0, =_estack
 8018c4c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8018c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8018c54:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8018c58:	08023b78 	.word	0x08023b78
  ldr r2, =_sbss
 8018c5c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8018c60:	2000f91c 	.word	0x2000f91c

08018c64 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8018c64:	e7fe      	b.n	8018c64 <ADC3_IRQHandler>
	...

08018c68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8018c68:	b580      	push	{r7, lr}
 8018c6a:	b082      	sub	sp, #8
 8018c6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8018c6e:	2300      	movs	r3, #0
 8018c70:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8018c72:	4b0c      	ldr	r3, [pc, #48]	; (8018ca4 <HAL_Init+0x3c>)
 8018c74:	681b      	ldr	r3, [r3, #0]
 8018c76:	4a0b      	ldr	r2, [pc, #44]	; (8018ca4 <HAL_Init+0x3c>)
 8018c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018c7c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8018c7e:	2003      	movs	r0, #3
 8018c80:	f002 fb30 	bl	801b2e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8018c84:	2000      	movs	r0, #0
 8018c86:	f000 f80f 	bl	8018ca8 <HAL_InitTick>
 8018c8a:	4603      	mov	r3, r0
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	d002      	beq.n	8018c96 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8018c90:	2301      	movs	r3, #1
 8018c92:	71fb      	strb	r3, [r7, #7]
 8018c94:	e001      	b.n	8018c9a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8018c96:	f7fe fc05 	bl	80174a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8018c9a:	79fb      	ldrb	r3, [r7, #7]

}
 8018c9c:	4618      	mov	r0, r3
 8018c9e:	3708      	adds	r7, #8
 8018ca0:	46bd      	mov	sp, r7
 8018ca2:	bd80      	pop	{r7, pc}
 8018ca4:	40022000 	.word	0x40022000

08018ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8018ca8:	b580      	push	{r7, lr}
 8018caa:	b084      	sub	sp, #16
 8018cac:	af00      	add	r7, sp, #0
 8018cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8018cb0:	2300      	movs	r3, #0
 8018cb2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8018cb4:	4b16      	ldr	r3, [pc, #88]	; (8018d10 <HAL_InitTick+0x68>)
 8018cb6:	681b      	ldr	r3, [r3, #0]
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	d022      	beq.n	8018d02 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8018cbc:	4b15      	ldr	r3, [pc, #84]	; (8018d14 <HAL_InitTick+0x6c>)
 8018cbe:	681a      	ldr	r2, [r3, #0]
 8018cc0:	4b13      	ldr	r3, [pc, #76]	; (8018d10 <HAL_InitTick+0x68>)
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018cc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8018ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8018cd0:	4618      	mov	r0, r3
 8018cd2:	f002 fb3a 	bl	801b34a <HAL_SYSTICK_Config>
 8018cd6:	4603      	mov	r3, r0
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d10f      	bne.n	8018cfc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	2b0f      	cmp	r3, #15
 8018ce0:	d809      	bhi.n	8018cf6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8018ce2:	2200      	movs	r2, #0
 8018ce4:	6879      	ldr	r1, [r7, #4]
 8018ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8018cea:	f002 fb06 	bl	801b2fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8018cee:	4a0a      	ldr	r2, [pc, #40]	; (8018d18 <HAL_InitTick+0x70>)
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	6013      	str	r3, [r2, #0]
 8018cf4:	e007      	b.n	8018d06 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8018cf6:	2301      	movs	r3, #1
 8018cf8:	73fb      	strb	r3, [r7, #15]
 8018cfa:	e004      	b.n	8018d06 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8018cfc:	2301      	movs	r3, #1
 8018cfe:	73fb      	strb	r3, [r7, #15]
 8018d00:	e001      	b.n	8018d06 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8018d02:	2301      	movs	r3, #1
 8018d04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8018d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8018d08:	4618      	mov	r0, r3
 8018d0a:	3710      	adds	r7, #16
 8018d0c:	46bd      	mov	sp, r7
 8018d0e:	bd80      	pop	{r7, pc}
 8018d10:	20000008 	.word	0x20000008
 8018d14:	20000000 	.word	0x20000000
 8018d18:	20000004 	.word	0x20000004

08018d1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8018d1c:	b480      	push	{r7}
 8018d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8018d20:	4b05      	ldr	r3, [pc, #20]	; (8018d38 <HAL_IncTick+0x1c>)
 8018d22:	681a      	ldr	r2, [r3, #0]
 8018d24:	4b05      	ldr	r3, [pc, #20]	; (8018d3c <HAL_IncTick+0x20>)
 8018d26:	681b      	ldr	r3, [r3, #0]
 8018d28:	4413      	add	r3, r2
 8018d2a:	4a03      	ldr	r2, [pc, #12]	; (8018d38 <HAL_IncTick+0x1c>)
 8018d2c:	6013      	str	r3, [r2, #0]
}
 8018d2e:	bf00      	nop
 8018d30:	46bd      	mov	sp, r7
 8018d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d36:	4770      	bx	lr
 8018d38:	2000f908 	.word	0x2000f908
 8018d3c:	20000008 	.word	0x20000008

08018d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8018d40:	b480      	push	{r7}
 8018d42:	af00      	add	r7, sp, #0
  return uwTick;
 8018d44:	4b03      	ldr	r3, [pc, #12]	; (8018d54 <HAL_GetTick+0x14>)
 8018d46:	681b      	ldr	r3, [r3, #0]
}
 8018d48:	4618      	mov	r0, r3
 8018d4a:	46bd      	mov	sp, r7
 8018d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d50:	4770      	bx	lr
 8018d52:	bf00      	nop
 8018d54:	2000f908 	.word	0x2000f908

08018d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8018d58:	b580      	push	{r7, lr}
 8018d5a:	b084      	sub	sp, #16
 8018d5c:	af00      	add	r7, sp, #0
 8018d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8018d60:	f7ff ffee 	bl	8018d40 <HAL_GetTick>
 8018d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8018d6a:	68fb      	ldr	r3, [r7, #12]
 8018d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d70:	d004      	beq.n	8018d7c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8018d72:	4b09      	ldr	r3, [pc, #36]	; (8018d98 <HAL_Delay+0x40>)
 8018d74:	681b      	ldr	r3, [r3, #0]
 8018d76:	68fa      	ldr	r2, [r7, #12]
 8018d78:	4413      	add	r3, r2
 8018d7a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8018d7c:	bf00      	nop
 8018d7e:	f7ff ffdf 	bl	8018d40 <HAL_GetTick>
 8018d82:	4602      	mov	r2, r0
 8018d84:	68bb      	ldr	r3, [r7, #8]
 8018d86:	1ad3      	subs	r3, r2, r3
 8018d88:	68fa      	ldr	r2, [r7, #12]
 8018d8a:	429a      	cmp	r2, r3
 8018d8c:	d8f7      	bhi.n	8018d7e <HAL_Delay+0x26>
  {
  }
}
 8018d8e:	bf00      	nop
 8018d90:	bf00      	nop
 8018d92:	3710      	adds	r7, #16
 8018d94:	46bd      	mov	sp, r7
 8018d96:	bd80      	pop	{r7, pc}
 8018d98:	20000008 	.word	0x20000008

08018d9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8018d9c:	b480      	push	{r7}
 8018d9e:	b083      	sub	sp, #12
 8018da0:	af00      	add	r7, sp, #0
 8018da2:	6078      	str	r0, [r7, #4]
 8018da4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	689b      	ldr	r3, [r3, #8]
 8018daa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8018dae:	683b      	ldr	r3, [r7, #0]
 8018db0:	431a      	orrs	r2, r3
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	609a      	str	r2, [r3, #8]
}
 8018db6:	bf00      	nop
 8018db8:	370c      	adds	r7, #12
 8018dba:	46bd      	mov	sp, r7
 8018dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dc0:	4770      	bx	lr

08018dc2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8018dc2:	b480      	push	{r7}
 8018dc4:	b083      	sub	sp, #12
 8018dc6:	af00      	add	r7, sp, #0
 8018dc8:	6078      	str	r0, [r7, #4]
 8018dca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	689b      	ldr	r3, [r3, #8]
 8018dd0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8018dd4:	683b      	ldr	r3, [r7, #0]
 8018dd6:	431a      	orrs	r2, r3
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	609a      	str	r2, [r3, #8]
}
 8018ddc:	bf00      	nop
 8018dde:	370c      	adds	r7, #12
 8018de0:	46bd      	mov	sp, r7
 8018de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018de6:	4770      	bx	lr

08018de8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8018de8:	b480      	push	{r7}
 8018dea:	b083      	sub	sp, #12
 8018dec:	af00      	add	r7, sp, #0
 8018dee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	689b      	ldr	r3, [r3, #8]
 8018df4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8018df8:	4618      	mov	r0, r3
 8018dfa:	370c      	adds	r7, #12
 8018dfc:	46bd      	mov	sp, r7
 8018dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e02:	4770      	bx	lr

08018e04 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8018e04:	b480      	push	{r7}
 8018e06:	b087      	sub	sp, #28
 8018e08:	af00      	add	r7, sp, #0
 8018e0a:	60f8      	str	r0, [r7, #12]
 8018e0c:	60b9      	str	r1, [r7, #8]
 8018e0e:	607a      	str	r2, [r7, #4]
 8018e10:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018e12:	68fb      	ldr	r3, [r7, #12]
 8018e14:	3360      	adds	r3, #96	; 0x60
 8018e16:	461a      	mov	r2, r3
 8018e18:	68bb      	ldr	r3, [r7, #8]
 8018e1a:	009b      	lsls	r3, r3, #2
 8018e1c:	4413      	add	r3, r2
 8018e1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018e20:	697b      	ldr	r3, [r7, #20]
 8018e22:	681a      	ldr	r2, [r3, #0]
 8018e24:	4b08      	ldr	r3, [pc, #32]	; (8018e48 <LL_ADC_SetOffset+0x44>)
 8018e26:	4013      	ands	r3, r2
 8018e28:	687a      	ldr	r2, [r7, #4]
 8018e2a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8018e2e:	683a      	ldr	r2, [r7, #0]
 8018e30:	430a      	orrs	r2, r1
 8018e32:	4313      	orrs	r3, r2
 8018e34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8018e38:	697b      	ldr	r3, [r7, #20]
 8018e3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8018e3c:	bf00      	nop
 8018e3e:	371c      	adds	r7, #28
 8018e40:	46bd      	mov	sp, r7
 8018e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e46:	4770      	bx	lr
 8018e48:	03fff000 	.word	0x03fff000

08018e4c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8018e4c:	b480      	push	{r7}
 8018e4e:	b085      	sub	sp, #20
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	6078      	str	r0, [r7, #4]
 8018e54:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	3360      	adds	r3, #96	; 0x60
 8018e5a:	461a      	mov	r2, r3
 8018e5c:	683b      	ldr	r3, [r7, #0]
 8018e5e:	009b      	lsls	r3, r3, #2
 8018e60:	4413      	add	r3, r2
 8018e62:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8018e64:	68fb      	ldr	r3, [r7, #12]
 8018e66:	681b      	ldr	r3, [r3, #0]
 8018e68:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8018e6c:	4618      	mov	r0, r3
 8018e6e:	3714      	adds	r7, #20
 8018e70:	46bd      	mov	sp, r7
 8018e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e76:	4770      	bx	lr

08018e78 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8018e78:	b480      	push	{r7}
 8018e7a:	b087      	sub	sp, #28
 8018e7c:	af00      	add	r7, sp, #0
 8018e7e:	60f8      	str	r0, [r7, #12]
 8018e80:	60b9      	str	r1, [r7, #8]
 8018e82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018e84:	68fb      	ldr	r3, [r7, #12]
 8018e86:	3360      	adds	r3, #96	; 0x60
 8018e88:	461a      	mov	r2, r3
 8018e8a:	68bb      	ldr	r3, [r7, #8]
 8018e8c:	009b      	lsls	r3, r3, #2
 8018e8e:	4413      	add	r3, r2
 8018e90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018e92:	697b      	ldr	r3, [r7, #20]
 8018e94:	681b      	ldr	r3, [r3, #0]
 8018e96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	431a      	orrs	r2, r3
 8018e9e:	697b      	ldr	r3, [r7, #20]
 8018ea0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8018ea2:	bf00      	nop
 8018ea4:	371c      	adds	r7, #28
 8018ea6:	46bd      	mov	sp, r7
 8018ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eac:	4770      	bx	lr

08018eae <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8018eae:	b480      	push	{r7}
 8018eb0:	b087      	sub	sp, #28
 8018eb2:	af00      	add	r7, sp, #0
 8018eb4:	60f8      	str	r0, [r7, #12]
 8018eb6:	60b9      	str	r1, [r7, #8]
 8018eb8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018eba:	68fb      	ldr	r3, [r7, #12]
 8018ebc:	3360      	adds	r3, #96	; 0x60
 8018ebe:	461a      	mov	r2, r3
 8018ec0:	68bb      	ldr	r3, [r7, #8]
 8018ec2:	009b      	lsls	r3, r3, #2
 8018ec4:	4413      	add	r3, r2
 8018ec6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018ec8:	697b      	ldr	r3, [r7, #20]
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	431a      	orrs	r2, r3
 8018ed4:	697b      	ldr	r3, [r7, #20]
 8018ed6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8018ed8:	bf00      	nop
 8018eda:	371c      	adds	r7, #28
 8018edc:	46bd      	mov	sp, r7
 8018ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ee2:	4770      	bx	lr

08018ee4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8018ee4:	b480      	push	{r7}
 8018ee6:	b087      	sub	sp, #28
 8018ee8:	af00      	add	r7, sp, #0
 8018eea:	60f8      	str	r0, [r7, #12]
 8018eec:	60b9      	str	r1, [r7, #8]
 8018eee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018ef0:	68fb      	ldr	r3, [r7, #12]
 8018ef2:	3360      	adds	r3, #96	; 0x60
 8018ef4:	461a      	mov	r2, r3
 8018ef6:	68bb      	ldr	r3, [r7, #8]
 8018ef8:	009b      	lsls	r3, r3, #2
 8018efa:	4413      	add	r3, r2
 8018efc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018efe:	697b      	ldr	r3, [r7, #20]
 8018f00:	681b      	ldr	r3, [r3, #0]
 8018f02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	431a      	orrs	r2, r3
 8018f0a:	697b      	ldr	r3, [r7, #20]
 8018f0c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8018f0e:	bf00      	nop
 8018f10:	371c      	adds	r7, #28
 8018f12:	46bd      	mov	sp, r7
 8018f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f18:	4770      	bx	lr

08018f1a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8018f1a:	b480      	push	{r7}
 8018f1c:	b083      	sub	sp, #12
 8018f1e:	af00      	add	r7, sp, #0
 8018f20:	6078      	str	r0, [r7, #4]
 8018f22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	695b      	ldr	r3, [r3, #20]
 8018f28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018f2c:	683b      	ldr	r3, [r7, #0]
 8018f2e:	431a      	orrs	r2, r3
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	615a      	str	r2, [r3, #20]
}
 8018f34:	bf00      	nop
 8018f36:	370c      	adds	r7, #12
 8018f38:	46bd      	mov	sp, r7
 8018f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f3e:	4770      	bx	lr

08018f40 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8018f40:	b480      	push	{r7}
 8018f42:	b083      	sub	sp, #12
 8018f44:	af00      	add	r7, sp, #0
 8018f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	68db      	ldr	r3, [r3, #12]
 8018f4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d101      	bne.n	8018f58 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8018f54:	2301      	movs	r3, #1
 8018f56:	e000      	b.n	8018f5a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8018f58:	2300      	movs	r3, #0
}
 8018f5a:	4618      	mov	r0, r3
 8018f5c:	370c      	adds	r7, #12
 8018f5e:	46bd      	mov	sp, r7
 8018f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f64:	4770      	bx	lr

08018f66 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8018f66:	b480      	push	{r7}
 8018f68:	b087      	sub	sp, #28
 8018f6a:	af00      	add	r7, sp, #0
 8018f6c:	60f8      	str	r0, [r7, #12]
 8018f6e:	60b9      	str	r1, [r7, #8]
 8018f70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8018f72:	68fb      	ldr	r3, [r7, #12]
 8018f74:	3330      	adds	r3, #48	; 0x30
 8018f76:	461a      	mov	r2, r3
 8018f78:	68bb      	ldr	r3, [r7, #8]
 8018f7a:	0a1b      	lsrs	r3, r3, #8
 8018f7c:	009b      	lsls	r3, r3, #2
 8018f7e:	f003 030c 	and.w	r3, r3, #12
 8018f82:	4413      	add	r3, r2
 8018f84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018f86:	697b      	ldr	r3, [r7, #20]
 8018f88:	681a      	ldr	r2, [r3, #0]
 8018f8a:	68bb      	ldr	r3, [r7, #8]
 8018f8c:	f003 031f 	and.w	r3, r3, #31
 8018f90:	211f      	movs	r1, #31
 8018f92:	fa01 f303 	lsl.w	r3, r1, r3
 8018f96:	43db      	mvns	r3, r3
 8018f98:	401a      	ands	r2, r3
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	0e9b      	lsrs	r3, r3, #26
 8018f9e:	f003 011f 	and.w	r1, r3, #31
 8018fa2:	68bb      	ldr	r3, [r7, #8]
 8018fa4:	f003 031f 	and.w	r3, r3, #31
 8018fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8018fac:	431a      	orrs	r2, r3
 8018fae:	697b      	ldr	r3, [r7, #20]
 8018fb0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8018fb2:	bf00      	nop
 8018fb4:	371c      	adds	r7, #28
 8018fb6:	46bd      	mov	sp, r7
 8018fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fbc:	4770      	bx	lr

08018fbe <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8018fbe:	b480      	push	{r7}
 8018fc0:	b083      	sub	sp, #12
 8018fc2:	af00      	add	r7, sp, #0
 8018fc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018fca:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8018fce:	2b00      	cmp	r3, #0
 8018fd0:	d101      	bne.n	8018fd6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8018fd2:	2301      	movs	r3, #1
 8018fd4:	e000      	b.n	8018fd8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8018fd6:	2300      	movs	r3, #0
}
 8018fd8:	4618      	mov	r0, r3
 8018fda:	370c      	adds	r7, #12
 8018fdc:	46bd      	mov	sp, r7
 8018fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fe2:	4770      	bx	lr

08018fe4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8018fe4:	b480      	push	{r7}
 8018fe6:	b087      	sub	sp, #28
 8018fe8:	af00      	add	r7, sp, #0
 8018fea:	60f8      	str	r0, [r7, #12]
 8018fec:	60b9      	str	r1, [r7, #8]
 8018fee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8018ff0:	68fb      	ldr	r3, [r7, #12]
 8018ff2:	3314      	adds	r3, #20
 8018ff4:	461a      	mov	r2, r3
 8018ff6:	68bb      	ldr	r3, [r7, #8]
 8018ff8:	0e5b      	lsrs	r3, r3, #25
 8018ffa:	009b      	lsls	r3, r3, #2
 8018ffc:	f003 0304 	and.w	r3, r3, #4
 8019000:	4413      	add	r3, r2
 8019002:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8019004:	697b      	ldr	r3, [r7, #20]
 8019006:	681a      	ldr	r2, [r3, #0]
 8019008:	68bb      	ldr	r3, [r7, #8]
 801900a:	0d1b      	lsrs	r3, r3, #20
 801900c:	f003 031f 	and.w	r3, r3, #31
 8019010:	2107      	movs	r1, #7
 8019012:	fa01 f303 	lsl.w	r3, r1, r3
 8019016:	43db      	mvns	r3, r3
 8019018:	401a      	ands	r2, r3
 801901a:	68bb      	ldr	r3, [r7, #8]
 801901c:	0d1b      	lsrs	r3, r3, #20
 801901e:	f003 031f 	and.w	r3, r3, #31
 8019022:	6879      	ldr	r1, [r7, #4]
 8019024:	fa01 f303 	lsl.w	r3, r1, r3
 8019028:	431a      	orrs	r2, r3
 801902a:	697b      	ldr	r3, [r7, #20]
 801902c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 801902e:	bf00      	nop
 8019030:	371c      	adds	r7, #28
 8019032:	46bd      	mov	sp, r7
 8019034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019038:	4770      	bx	lr
	...

0801903c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 801903c:	b480      	push	{r7}
 801903e:	b085      	sub	sp, #20
 8019040:	af00      	add	r7, sp, #0
 8019042:	60f8      	str	r0, [r7, #12]
 8019044:	60b9      	str	r1, [r7, #8]
 8019046:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	4a0f      	ldr	r2, [pc, #60]	; (8019088 <LL_ADC_SetChannelSingleDiff+0x4c>)
 801904c:	4293      	cmp	r3, r2
 801904e:	d10a      	bne.n	8019066 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8019050:	68fb      	ldr	r3, [r7, #12]
 8019052:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8019056:	68bb      	ldr	r3, [r7, #8]
 8019058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801905c:	431a      	orrs	r2, r3
 801905e:	68fb      	ldr	r3, [r7, #12]
 8019060:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8019064:	e00a      	b.n	801907c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8019066:	68fb      	ldr	r3, [r7, #12]
 8019068:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801906c:	68bb      	ldr	r3, [r7, #8]
 801906e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019072:	43db      	mvns	r3, r3
 8019074:	401a      	ands	r2, r3
 8019076:	68fb      	ldr	r3, [r7, #12]
 8019078:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 801907c:	bf00      	nop
 801907e:	3714      	adds	r7, #20
 8019080:	46bd      	mov	sp, r7
 8019082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019086:	4770      	bx	lr
 8019088:	407f0000 	.word	0x407f0000

0801908c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 801908c:	b480      	push	{r7}
 801908e:	b083      	sub	sp, #12
 8019090:	af00      	add	r7, sp, #0
 8019092:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	689b      	ldr	r3, [r3, #8]
 8019098:	f003 031f 	and.w	r3, r3, #31
}
 801909c:	4618      	mov	r0, r3
 801909e:	370c      	adds	r7, #12
 80190a0:	46bd      	mov	sp, r7
 80190a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190a6:	4770      	bx	lr

080190a8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80190a8:	b480      	push	{r7}
 80190aa:	b083      	sub	sp, #12
 80190ac:	af00      	add	r7, sp, #0
 80190ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	689b      	ldr	r3, [r3, #8]
 80190b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80190b8:	4618      	mov	r0, r3
 80190ba:	370c      	adds	r7, #12
 80190bc:	46bd      	mov	sp, r7
 80190be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190c2:	4770      	bx	lr

080190c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80190c4:	b480      	push	{r7}
 80190c6:	b083      	sub	sp, #12
 80190c8:	af00      	add	r7, sp, #0
 80190ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	689b      	ldr	r3, [r3, #8]
 80190d0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80190d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80190d8:	687a      	ldr	r2, [r7, #4]
 80190da:	6093      	str	r3, [r2, #8]
}
 80190dc:	bf00      	nop
 80190de:	370c      	adds	r7, #12
 80190e0:	46bd      	mov	sp, r7
 80190e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190e6:	4770      	bx	lr

080190e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80190e8:	b480      	push	{r7}
 80190ea:	b083      	sub	sp, #12
 80190ec:	af00      	add	r7, sp, #0
 80190ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	689b      	ldr	r3, [r3, #8]
 80190f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80190f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80190fc:	d101      	bne.n	8019102 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80190fe:	2301      	movs	r3, #1
 8019100:	e000      	b.n	8019104 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8019102:	2300      	movs	r3, #0
}
 8019104:	4618      	mov	r0, r3
 8019106:	370c      	adds	r7, #12
 8019108:	46bd      	mov	sp, r7
 801910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801910e:	4770      	bx	lr

08019110 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8019110:	b480      	push	{r7}
 8019112:	b083      	sub	sp, #12
 8019114:	af00      	add	r7, sp, #0
 8019116:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	689b      	ldr	r3, [r3, #8]
 801911c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8019120:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019124:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 801912c:	bf00      	nop
 801912e:	370c      	adds	r7, #12
 8019130:	46bd      	mov	sp, r7
 8019132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019136:	4770      	bx	lr

08019138 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8019138:	b480      	push	{r7}
 801913a:	b083      	sub	sp, #12
 801913c:	af00      	add	r7, sp, #0
 801913e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	689b      	ldr	r3, [r3, #8]
 8019144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019148:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801914c:	d101      	bne.n	8019152 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 801914e:	2301      	movs	r3, #1
 8019150:	e000      	b.n	8019154 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8019152:	2300      	movs	r3, #0
}
 8019154:	4618      	mov	r0, r3
 8019156:	370c      	adds	r7, #12
 8019158:	46bd      	mov	sp, r7
 801915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801915e:	4770      	bx	lr

08019160 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8019160:	b480      	push	{r7}
 8019162:	b083      	sub	sp, #12
 8019164:	af00      	add	r7, sp, #0
 8019166:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	689b      	ldr	r3, [r3, #8]
 801916c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019170:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019174:	f043 0201 	orr.w	r2, r3, #1
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 801917c:	bf00      	nop
 801917e:	370c      	adds	r7, #12
 8019180:	46bd      	mov	sp, r7
 8019182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019186:	4770      	bx	lr

08019188 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8019188:	b480      	push	{r7}
 801918a:	b083      	sub	sp, #12
 801918c:	af00      	add	r7, sp, #0
 801918e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	689b      	ldr	r3, [r3, #8]
 8019194:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019198:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801919c:	f043 0202 	orr.w	r2, r3, #2
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80191a4:	bf00      	nop
 80191a6:	370c      	adds	r7, #12
 80191a8:	46bd      	mov	sp, r7
 80191aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ae:	4770      	bx	lr

080191b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80191b0:	b480      	push	{r7}
 80191b2:	b083      	sub	sp, #12
 80191b4:	af00      	add	r7, sp, #0
 80191b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	689b      	ldr	r3, [r3, #8]
 80191bc:	f003 0301 	and.w	r3, r3, #1
 80191c0:	2b01      	cmp	r3, #1
 80191c2:	d101      	bne.n	80191c8 <LL_ADC_IsEnabled+0x18>
 80191c4:	2301      	movs	r3, #1
 80191c6:	e000      	b.n	80191ca <LL_ADC_IsEnabled+0x1a>
 80191c8:	2300      	movs	r3, #0
}
 80191ca:	4618      	mov	r0, r3
 80191cc:	370c      	adds	r7, #12
 80191ce:	46bd      	mov	sp, r7
 80191d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191d4:	4770      	bx	lr

080191d6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80191d6:	b480      	push	{r7}
 80191d8:	b083      	sub	sp, #12
 80191da:	af00      	add	r7, sp, #0
 80191dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	689b      	ldr	r3, [r3, #8]
 80191e2:	f003 0302 	and.w	r3, r3, #2
 80191e6:	2b02      	cmp	r3, #2
 80191e8:	d101      	bne.n	80191ee <LL_ADC_IsDisableOngoing+0x18>
 80191ea:	2301      	movs	r3, #1
 80191ec:	e000      	b.n	80191f0 <LL_ADC_IsDisableOngoing+0x1a>
 80191ee:	2300      	movs	r3, #0
}
 80191f0:	4618      	mov	r0, r3
 80191f2:	370c      	adds	r7, #12
 80191f4:	46bd      	mov	sp, r7
 80191f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191fa:	4770      	bx	lr

080191fc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80191fc:	b480      	push	{r7}
 80191fe:	b083      	sub	sp, #12
 8019200:	af00      	add	r7, sp, #0
 8019202:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	689b      	ldr	r3, [r3, #8]
 8019208:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801920c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019210:	f043 0204 	orr.w	r2, r3, #4
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8019218:	bf00      	nop
 801921a:	370c      	adds	r7, #12
 801921c:	46bd      	mov	sp, r7
 801921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019222:	4770      	bx	lr

08019224 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8019224:	b480      	push	{r7}
 8019226:	b083      	sub	sp, #12
 8019228:	af00      	add	r7, sp, #0
 801922a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	689b      	ldr	r3, [r3, #8]
 8019230:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019234:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019238:	f043 0210 	orr.w	r2, r3, #16
 801923c:	687b      	ldr	r3, [r7, #4]
 801923e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8019240:	bf00      	nop
 8019242:	370c      	adds	r7, #12
 8019244:	46bd      	mov	sp, r7
 8019246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801924a:	4770      	bx	lr

0801924c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 801924c:	b480      	push	{r7}
 801924e:	b083      	sub	sp, #12
 8019250:	af00      	add	r7, sp, #0
 8019252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	689b      	ldr	r3, [r3, #8]
 8019258:	f003 0304 	and.w	r3, r3, #4
 801925c:	2b04      	cmp	r3, #4
 801925e:	d101      	bne.n	8019264 <LL_ADC_REG_IsConversionOngoing+0x18>
 8019260:	2301      	movs	r3, #1
 8019262:	e000      	b.n	8019266 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8019264:	2300      	movs	r3, #0
}
 8019266:	4618      	mov	r0, r3
 8019268:	370c      	adds	r7, #12
 801926a:	46bd      	mov	sp, r7
 801926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019270:	4770      	bx	lr

08019272 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8019272:	b480      	push	{r7}
 8019274:	b083      	sub	sp, #12
 8019276:	af00      	add	r7, sp, #0
 8019278:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	689b      	ldr	r3, [r3, #8]
 801927e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019282:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019286:	f043 0220 	orr.w	r2, r3, #32
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 801928e:	bf00      	nop
 8019290:	370c      	adds	r7, #12
 8019292:	46bd      	mov	sp, r7
 8019294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019298:	4770      	bx	lr

0801929a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 801929a:	b480      	push	{r7}
 801929c:	b083      	sub	sp, #12
 801929e:	af00      	add	r7, sp, #0
 80192a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	689b      	ldr	r3, [r3, #8]
 80192a6:	f003 0308 	and.w	r3, r3, #8
 80192aa:	2b08      	cmp	r3, #8
 80192ac:	d101      	bne.n	80192b2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80192ae:	2301      	movs	r3, #1
 80192b0:	e000      	b.n	80192b4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80192b2:	2300      	movs	r3, #0
}
 80192b4:	4618      	mov	r0, r3
 80192b6:	370c      	adds	r7, #12
 80192b8:	46bd      	mov	sp, r7
 80192ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192be:	4770      	bx	lr

080192c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80192c0:	b590      	push	{r4, r7, lr}
 80192c2:	b089      	sub	sp, #36	; 0x24
 80192c4:	af00      	add	r7, sp, #0
 80192c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80192c8:	2300      	movs	r3, #0
 80192ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80192cc:	2300      	movs	r3, #0
 80192ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	d101      	bne.n	80192da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80192d6:	2301      	movs	r3, #1
 80192d8:	e1a1      	b.n	801961e <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	695b      	ldr	r3, [r3, #20]
 80192de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	d109      	bne.n	80192fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80192e8:	6878      	ldr	r0, [r7, #4]
 80192ea:	f7ee ff29 	bl	8008140 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	2200      	movs	r2, #0
 80192f2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	2200      	movs	r2, #0
 80192f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	681b      	ldr	r3, [r3, #0]
 8019300:	4618      	mov	r0, r3
 8019302:	f7ff fef1 	bl	80190e8 <LL_ADC_IsDeepPowerDownEnabled>
 8019306:	4603      	mov	r3, r0
 8019308:	2b00      	cmp	r3, #0
 801930a:	d004      	beq.n	8019316 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	4618      	mov	r0, r3
 8019312:	f7ff fed7 	bl	80190c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	4618      	mov	r0, r3
 801931c:	f7ff ff0c 	bl	8019138 <LL_ADC_IsInternalRegulatorEnabled>
 8019320:	4603      	mov	r3, r0
 8019322:	2b00      	cmp	r3, #0
 8019324:	d115      	bne.n	8019352 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8019326:	687b      	ldr	r3, [r7, #4]
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	4618      	mov	r0, r3
 801932c:	f7ff fef0 	bl	8019110 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8019330:	4b9a      	ldr	r3, [pc, #616]	; (801959c <HAL_ADC_Init+0x2dc>)
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	099b      	lsrs	r3, r3, #6
 8019336:	4a9a      	ldr	r2, [pc, #616]	; (80195a0 <HAL_ADC_Init+0x2e0>)
 8019338:	fba2 2303 	umull	r2, r3, r2, r3
 801933c:	099b      	lsrs	r3, r3, #6
 801933e:	3301      	adds	r3, #1
 8019340:	005b      	lsls	r3, r3, #1
 8019342:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8019344:	e002      	b.n	801934c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8019346:	68bb      	ldr	r3, [r7, #8]
 8019348:	3b01      	subs	r3, #1
 801934a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 801934c:	68bb      	ldr	r3, [r7, #8]
 801934e:	2b00      	cmp	r3, #0
 8019350:	d1f9      	bne.n	8019346 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	681b      	ldr	r3, [r3, #0]
 8019356:	4618      	mov	r0, r3
 8019358:	f7ff feee 	bl	8019138 <LL_ADC_IsInternalRegulatorEnabled>
 801935c:	4603      	mov	r3, r0
 801935e:	2b00      	cmp	r3, #0
 8019360:	d10d      	bne.n	801937e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019366:	f043 0210 	orr.w	r2, r3, #16
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019372:	f043 0201 	orr.w	r2, r3, #1
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 801937a:	2301      	movs	r3, #1
 801937c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	681b      	ldr	r3, [r3, #0]
 8019382:	4618      	mov	r0, r3
 8019384:	f7ff ff62 	bl	801924c <LL_ADC_REG_IsConversionOngoing>
 8019388:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801938e:	f003 0310 	and.w	r3, r3, #16
 8019392:	2b00      	cmp	r3, #0
 8019394:	f040 813a 	bne.w	801960c <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8019398:	697b      	ldr	r3, [r7, #20]
 801939a:	2b00      	cmp	r3, #0
 801939c:	f040 8136 	bne.w	801960c <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80193a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80193a8:	f043 0202 	orr.w	r2, r3, #2
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	4618      	mov	r0, r3
 80193b6:	f7ff fefb 	bl	80191b0 <LL_ADC_IsEnabled>
 80193ba:	4603      	mov	r3, r0
 80193bc:	2b00      	cmp	r3, #0
 80193be:	d137      	bne.n	8019430 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80193c8:	d004      	beq.n	80193d4 <HAL_ADC_Init+0x114>
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	4a75      	ldr	r2, [pc, #468]	; (80195a4 <HAL_ADC_Init+0x2e4>)
 80193d0:	4293      	cmp	r3, r2
 80193d2:	d10f      	bne.n	80193f4 <HAL_ADC_Init+0x134>
 80193d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80193d8:	f7ff feea 	bl	80191b0 <LL_ADC_IsEnabled>
 80193dc:	4604      	mov	r4, r0
 80193de:	4871      	ldr	r0, [pc, #452]	; (80195a4 <HAL_ADC_Init+0x2e4>)
 80193e0:	f7ff fee6 	bl	80191b0 <LL_ADC_IsEnabled>
 80193e4:	4603      	mov	r3, r0
 80193e6:	4323      	orrs	r3, r4
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	bf0c      	ite	eq
 80193ec:	2301      	moveq	r3, #1
 80193ee:	2300      	movne	r3, #0
 80193f0:	b2db      	uxtb	r3, r3
 80193f2:	e008      	b.n	8019406 <HAL_ADC_Init+0x146>
 80193f4:	486c      	ldr	r0, [pc, #432]	; (80195a8 <HAL_ADC_Init+0x2e8>)
 80193f6:	f7ff fedb 	bl	80191b0 <LL_ADC_IsEnabled>
 80193fa:	4603      	mov	r3, r0
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	bf0c      	ite	eq
 8019400:	2301      	moveq	r3, #1
 8019402:	2300      	movne	r3, #0
 8019404:	b2db      	uxtb	r3, r3
 8019406:	2b00      	cmp	r3, #0
 8019408:	d012      	beq.n	8019430 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	681b      	ldr	r3, [r3, #0]
 801940e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019412:	d004      	beq.n	801941e <HAL_ADC_Init+0x15e>
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	4a62      	ldr	r2, [pc, #392]	; (80195a4 <HAL_ADC_Init+0x2e4>)
 801941a:	4293      	cmp	r3, r2
 801941c:	d101      	bne.n	8019422 <HAL_ADC_Init+0x162>
 801941e:	4a63      	ldr	r2, [pc, #396]	; (80195ac <HAL_ADC_Init+0x2ec>)
 8019420:	e000      	b.n	8019424 <HAL_ADC_Init+0x164>
 8019422:	4a63      	ldr	r2, [pc, #396]	; (80195b0 <HAL_ADC_Init+0x2f0>)
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	685b      	ldr	r3, [r3, #4]
 8019428:	4619      	mov	r1, r3
 801942a:	4610      	mov	r0, r2
 801942c:	f7ff fcb6 	bl	8018d9c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	7f5b      	ldrb	r3, [r3, #29]
 8019434:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 801943a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8019440:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8019446:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801944e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8019450:	4313      	orrs	r3, r2
 8019452:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801945a:	2b01      	cmp	r3, #1
 801945c:	d106      	bne.n	801946c <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019462:	3b01      	subs	r3, #1
 8019464:	045b      	lsls	r3, r3, #17
 8019466:	69ba      	ldr	r2, [r7, #24]
 8019468:	4313      	orrs	r3, r2
 801946a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019470:	2b00      	cmp	r3, #0
 8019472:	d009      	beq.n	8019488 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019478:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019480:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8019482:	69ba      	ldr	r2, [r7, #24]
 8019484:	4313      	orrs	r3, r2
 8019486:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	681b      	ldr	r3, [r3, #0]
 801948c:	68da      	ldr	r2, [r3, #12]
 801948e:	4b49      	ldr	r3, [pc, #292]	; (80195b4 <HAL_ADC_Init+0x2f4>)
 8019490:	4013      	ands	r3, r2
 8019492:	687a      	ldr	r2, [r7, #4]
 8019494:	6812      	ldr	r2, [r2, #0]
 8019496:	69b9      	ldr	r1, [r7, #24]
 8019498:	430b      	orrs	r3, r1
 801949a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	681b      	ldr	r3, [r3, #0]
 80194a0:	691b      	ldr	r3, [r3, #16]
 80194a2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	681b      	ldr	r3, [r3, #0]
 80194ae:	430a      	orrs	r2, r1
 80194b0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	4618      	mov	r0, r3
 80194b8:	f7ff fec8 	bl	801924c <LL_ADC_REG_IsConversionOngoing>
 80194bc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	681b      	ldr	r3, [r3, #0]
 80194c2:	4618      	mov	r0, r3
 80194c4:	f7ff fee9 	bl	801929a <LL_ADC_INJ_IsConversionOngoing>
 80194c8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80194ca:	693b      	ldr	r3, [r7, #16]
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	d17b      	bne.n	80195c8 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80194d0:	68fb      	ldr	r3, [r7, #12]
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d178      	bne.n	80195c8 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80194da:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80194e2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80194e4:	4313      	orrs	r3, r2
 80194e6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	68db      	ldr	r3, [r3, #12]
 80194ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80194f2:	f023 0302 	bic.w	r3, r3, #2
 80194f6:	687a      	ldr	r2, [r7, #4]
 80194f8:	6812      	ldr	r2, [r2, #0]
 80194fa:	69b9      	ldr	r1, [r7, #24]
 80194fc:	430b      	orrs	r3, r1
 80194fe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	691b      	ldr	r3, [r3, #16]
 8019504:	2b00      	cmp	r3, #0
 8019506:	d017      	beq.n	8019538 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	681b      	ldr	r3, [r3, #0]
 801950c:	691a      	ldr	r2, [r3, #16]
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	681b      	ldr	r3, [r3, #0]
 8019512:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8019516:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	681b      	ldr	r3, [r3, #0]
 801951c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019520:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8019524:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019528:	687a      	ldr	r2, [r7, #4]
 801952a:	6911      	ldr	r1, [r2, #16]
 801952c:	687a      	ldr	r2, [r7, #4]
 801952e:	6812      	ldr	r2, [r2, #0]
 8019530:	430b      	orrs	r3, r1
 8019532:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8019536:	e013      	b.n	8019560 <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	681b      	ldr	r3, [r3, #0]
 801953c:	691a      	ldr	r2, [r3, #16]
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	681b      	ldr	r3, [r3, #0]
 8019542:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8019546:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	681b      	ldr	r3, [r3, #0]
 801954c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019550:	687a      	ldr	r2, [r7, #4]
 8019552:	6812      	ldr	r2, [r2, #0]
 8019554:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8019558:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801955c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8019566:	2b01      	cmp	r3, #1
 8019568:	d126      	bne.n	80195b8 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	681b      	ldr	r3, [r3, #0]
 801956e:	691b      	ldr	r3, [r3, #16]
 8019570:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8019574:	f023 0304 	bic.w	r3, r3, #4
 8019578:	687a      	ldr	r2, [r7, #4]
 801957a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 801957c:	687a      	ldr	r2, [r7, #4]
 801957e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8019580:	4311      	orrs	r1, r2
 8019582:	687a      	ldr	r2, [r7, #4]
 8019584:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8019586:	4311      	orrs	r1, r2
 8019588:	687a      	ldr	r2, [r7, #4]
 801958a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801958c:	430a      	orrs	r2, r1
 801958e:	431a      	orrs	r2, r3
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	681b      	ldr	r3, [r3, #0]
 8019594:	f042 0201 	orr.w	r2, r2, #1
 8019598:	611a      	str	r2, [r3, #16]
 801959a:	e015      	b.n	80195c8 <HAL_ADC_Init+0x308>
 801959c:	20000000 	.word	0x20000000
 80195a0:	053e2d63 	.word	0x053e2d63
 80195a4:	50000100 	.word	0x50000100
 80195a8:	50000400 	.word	0x50000400
 80195ac:	50000300 	.word	0x50000300
 80195b0:	50000700 	.word	0x50000700
 80195b4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	681b      	ldr	r3, [r3, #0]
 80195bc:	691a      	ldr	r2, [r3, #16]
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	681b      	ldr	r3, [r3, #0]
 80195c2:	f022 0201 	bic.w	r2, r2, #1
 80195c6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	695b      	ldr	r3, [r3, #20]
 80195cc:	2b01      	cmp	r3, #1
 80195ce:	d10c      	bne.n	80195ea <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	681b      	ldr	r3, [r3, #0]
 80195d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80195d6:	f023 010f 	bic.w	r1, r3, #15
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	6a1b      	ldr	r3, [r3, #32]
 80195de:	1e5a      	subs	r2, r3, #1
 80195e0:	687b      	ldr	r3, [r7, #4]
 80195e2:	681b      	ldr	r3, [r3, #0]
 80195e4:	430a      	orrs	r2, r1
 80195e6:	631a      	str	r2, [r3, #48]	; 0x30
 80195e8:	e007      	b.n	80195fa <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	681b      	ldr	r3, [r3, #0]
 80195ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	f022 020f 	bic.w	r2, r2, #15
 80195f8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80195fe:	f023 0303 	bic.w	r3, r3, #3
 8019602:	f043 0201 	orr.w	r2, r3, #1
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	65da      	str	r2, [r3, #92]	; 0x5c
 801960a:	e007      	b.n	801961c <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019610:	f043 0210 	orr.w	r2, r3, #16
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8019618:	2301      	movs	r3, #1
 801961a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 801961c:	7ffb      	ldrb	r3, [r7, #31]
}
 801961e:	4618      	mov	r0, r3
 8019620:	3724      	adds	r7, #36	; 0x24
 8019622:	46bd      	mov	sp, r7
 8019624:	bd90      	pop	{r4, r7, pc}
 8019626:	bf00      	nop

08019628 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8019628:	b580      	push	{r7, lr}
 801962a:	b086      	sub	sp, #24
 801962c:	af00      	add	r7, sp, #0
 801962e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	681b      	ldr	r3, [r3, #0]
 8019634:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019638:	d004      	beq.n	8019644 <HAL_ADC_Start+0x1c>
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	681b      	ldr	r3, [r3, #0]
 801963e:	4a5c      	ldr	r2, [pc, #368]	; (80197b0 <HAL_ADC_Start+0x188>)
 8019640:	4293      	cmp	r3, r2
 8019642:	d101      	bne.n	8019648 <HAL_ADC_Start+0x20>
 8019644:	4b5b      	ldr	r3, [pc, #364]	; (80197b4 <HAL_ADC_Start+0x18c>)
 8019646:	e000      	b.n	801964a <HAL_ADC_Start+0x22>
 8019648:	4b5b      	ldr	r3, [pc, #364]	; (80197b8 <HAL_ADC_Start+0x190>)
 801964a:	4618      	mov	r0, r3
 801964c:	f7ff fd1e 	bl	801908c <LL_ADC_GetMultimode>
 8019650:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	681b      	ldr	r3, [r3, #0]
 8019656:	4618      	mov	r0, r3
 8019658:	f7ff fdf8 	bl	801924c <LL_ADC_REG_IsConversionOngoing>
 801965c:	4603      	mov	r3, r0
 801965e:	2b00      	cmp	r3, #0
 8019660:	f040 809f 	bne.w	80197a2 <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801966a:	2b01      	cmp	r3, #1
 801966c:	d101      	bne.n	8019672 <HAL_ADC_Start+0x4a>
 801966e:	2302      	movs	r3, #2
 8019670:	e09a      	b.n	80197a8 <HAL_ADC_Start+0x180>
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	2201      	movs	r2, #1
 8019676:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 801967a:	6878      	ldr	r0, [r7, #4]
 801967c:	f001 fa3e 	bl	801aafc <ADC_Enable>
 8019680:	4603      	mov	r3, r0
 8019682:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8019684:	7dfb      	ldrb	r3, [r7, #23]
 8019686:	2b00      	cmp	r3, #0
 8019688:	f040 8086 	bne.w	8019798 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019690:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8019694:	f023 0301 	bic.w	r3, r3, #1
 8019698:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	681b      	ldr	r3, [r3, #0]
 80196a4:	4a42      	ldr	r2, [pc, #264]	; (80197b0 <HAL_ADC_Start+0x188>)
 80196a6:	4293      	cmp	r3, r2
 80196a8:	d002      	beq.n	80196b0 <HAL_ADC_Start+0x88>
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	681b      	ldr	r3, [r3, #0]
 80196ae:	e001      	b.n	80196b4 <HAL_ADC_Start+0x8c>
 80196b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80196b4:	687a      	ldr	r2, [r7, #4]
 80196b6:	6812      	ldr	r2, [r2, #0]
 80196b8:	4293      	cmp	r3, r2
 80196ba:	d002      	beq.n	80196c2 <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80196bc:	693b      	ldr	r3, [r7, #16]
 80196be:	2b00      	cmp	r3, #0
 80196c0:	d105      	bne.n	80196ce <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80196c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80196d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80196d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80196da:	d106      	bne.n	80196ea <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80196e0:	f023 0206 	bic.w	r2, r3, #6
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	661a      	str	r2, [r3, #96]	; 0x60
 80196e8:	e002      	b.n	80196f0 <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	2200      	movs	r2, #0
 80196ee:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	681b      	ldr	r3, [r3, #0]
 80196f4:	221c      	movs	r2, #28
 80196f6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	2200      	movs	r2, #0
 80196fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	681b      	ldr	r3, [r3, #0]
 8019704:	4a2a      	ldr	r2, [pc, #168]	; (80197b0 <HAL_ADC_Start+0x188>)
 8019706:	4293      	cmp	r3, r2
 8019708:	d002      	beq.n	8019710 <HAL_ADC_Start+0xe8>
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	681b      	ldr	r3, [r3, #0]
 801970e:	e001      	b.n	8019714 <HAL_ADC_Start+0xec>
 8019710:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019714:	687a      	ldr	r2, [r7, #4]
 8019716:	6812      	ldr	r2, [r2, #0]
 8019718:	4293      	cmp	r3, r2
 801971a:	d008      	beq.n	801972e <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801971c:	693b      	ldr	r3, [r7, #16]
 801971e:	2b00      	cmp	r3, #0
 8019720:	d005      	beq.n	801972e <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8019722:	693b      	ldr	r3, [r7, #16]
 8019724:	2b05      	cmp	r3, #5
 8019726:	d002      	beq.n	801972e <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8019728:	693b      	ldr	r3, [r7, #16]
 801972a:	2b09      	cmp	r3, #9
 801972c:	d114      	bne.n	8019758 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	681b      	ldr	r3, [r3, #0]
 8019732:	68db      	ldr	r3, [r3, #12]
 8019734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019738:	2b00      	cmp	r3, #0
 801973a:	d007      	beq.n	801974c <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019740:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8019744:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	4618      	mov	r0, r3
 8019752:	f7ff fd53 	bl	80191fc <LL_ADC_REG_StartConversion>
 8019756:	e026      	b.n	80197a6 <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801975c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	4a11      	ldr	r2, [pc, #68]	; (80197b0 <HAL_ADC_Start+0x188>)
 801976a:	4293      	cmp	r3, r2
 801976c:	d002      	beq.n	8019774 <HAL_ADC_Start+0x14c>
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	681b      	ldr	r3, [r3, #0]
 8019772:	e001      	b.n	8019778 <HAL_ADC_Start+0x150>
 8019774:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019778:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 801977a:	68fb      	ldr	r3, [r7, #12]
 801977c:	68db      	ldr	r3, [r3, #12]
 801977e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019782:	2b00      	cmp	r3, #0
 8019784:	d00f      	beq.n	80197a6 <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8019786:	687b      	ldr	r3, [r7, #4]
 8019788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801978a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801978e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	65da      	str	r2, [r3, #92]	; 0x5c
 8019796:	e006      	b.n	80197a6 <HAL_ADC_Start+0x17e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	2200      	movs	r2, #0
 801979c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80197a0:	e001      	b.n	80197a6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80197a2:	2302      	movs	r3, #2
 80197a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80197a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80197a8:	4618      	mov	r0, r3
 80197aa:	3718      	adds	r7, #24
 80197ac:	46bd      	mov	sp, r7
 80197ae:	bd80      	pop	{r7, pc}
 80197b0:	50000100 	.word	0x50000100
 80197b4:	50000300 	.word	0x50000300
 80197b8:	50000700 	.word	0x50000700

080197bc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80197bc:	b580      	push	{r7, lr}
 80197be:	b084      	sub	sp, #16
 80197c0:	af00      	add	r7, sp, #0
 80197c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80197ca:	2b01      	cmp	r3, #1
 80197cc:	d101      	bne.n	80197d2 <HAL_ADC_Stop+0x16>
 80197ce:	2302      	movs	r3, #2
 80197d0:	e023      	b.n	801981a <HAL_ADC_Stop+0x5e>
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	2201      	movs	r2, #1
 80197d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80197da:	2103      	movs	r1, #3
 80197dc:	6878      	ldr	r0, [r7, #4]
 80197de:	f001 f8d1 	bl	801a984 <ADC_ConversionStop>
 80197e2:	4603      	mov	r3, r0
 80197e4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80197e6:	7bfb      	ldrb	r3, [r7, #15]
 80197e8:	2b00      	cmp	r3, #0
 80197ea:	d111      	bne.n	8019810 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80197ec:	6878      	ldr	r0, [r7, #4]
 80197ee:	f001 f9e7 	bl	801abc0 <ADC_Disable>
 80197f2:	4603      	mov	r3, r0
 80197f4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80197f6:	7bfb      	ldrb	r3, [r7, #15]
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	d109      	bne.n	8019810 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019800:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8019804:	f023 0301 	bic.w	r3, r3, #1
 8019808:	f043 0201 	orr.w	r2, r3, #1
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	2200      	movs	r2, #0
 8019814:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8019818:	7bfb      	ldrb	r3, [r7, #15]
}
 801981a:	4618      	mov	r0, r3
 801981c:	3710      	adds	r7, #16
 801981e:	46bd      	mov	sp, r7
 8019820:	bd80      	pop	{r7, pc}
	...

08019824 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8019824:	b580      	push	{r7, lr}
 8019826:	b088      	sub	sp, #32
 8019828:	af00      	add	r7, sp, #0
 801982a:	6078      	str	r0, [r7, #4]
 801982c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	681b      	ldr	r3, [r3, #0]
 8019832:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019836:	d004      	beq.n	8019842 <HAL_ADC_PollForConversion+0x1e>
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	4a70      	ldr	r2, [pc, #448]	; (8019a00 <HAL_ADC_PollForConversion+0x1dc>)
 801983e:	4293      	cmp	r3, r2
 8019840:	d101      	bne.n	8019846 <HAL_ADC_PollForConversion+0x22>
 8019842:	4b70      	ldr	r3, [pc, #448]	; (8019a04 <HAL_ADC_PollForConversion+0x1e0>)
 8019844:	e000      	b.n	8019848 <HAL_ADC_PollForConversion+0x24>
 8019846:	4b70      	ldr	r3, [pc, #448]	; (8019a08 <HAL_ADC_PollForConversion+0x1e4>)
 8019848:	4618      	mov	r0, r3
 801984a:	f7ff fc1f 	bl	801908c <LL_ADC_GetMultimode>
 801984e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	699b      	ldr	r3, [r3, #24]
 8019854:	2b08      	cmp	r3, #8
 8019856:	d102      	bne.n	801985e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8019858:	2308      	movs	r3, #8
 801985a:	61fb      	str	r3, [r7, #28]
 801985c:	e037      	b.n	80198ce <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801985e:	697b      	ldr	r3, [r7, #20]
 8019860:	2b00      	cmp	r3, #0
 8019862:	d005      	beq.n	8019870 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8019864:	697b      	ldr	r3, [r7, #20]
 8019866:	2b05      	cmp	r3, #5
 8019868:	d002      	beq.n	8019870 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801986a:	697b      	ldr	r3, [r7, #20]
 801986c:	2b09      	cmp	r3, #9
 801986e:	d111      	bne.n	8019894 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	68db      	ldr	r3, [r3, #12]
 8019876:	f003 0301 	and.w	r3, r3, #1
 801987a:	2b00      	cmp	r3, #0
 801987c:	d007      	beq.n	801988e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019882:	f043 0220 	orr.w	r2, r3, #32
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 801988a:	2301      	movs	r3, #1
 801988c:	e0b3      	b.n	80199f6 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 801988e:	2304      	movs	r3, #4
 8019890:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8019892:	e01c      	b.n	80198ce <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	681b      	ldr	r3, [r3, #0]
 8019898:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801989c:	d004      	beq.n	80198a8 <HAL_ADC_PollForConversion+0x84>
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	4a57      	ldr	r2, [pc, #348]	; (8019a00 <HAL_ADC_PollForConversion+0x1dc>)
 80198a4:	4293      	cmp	r3, r2
 80198a6:	d101      	bne.n	80198ac <HAL_ADC_PollForConversion+0x88>
 80198a8:	4b56      	ldr	r3, [pc, #344]	; (8019a04 <HAL_ADC_PollForConversion+0x1e0>)
 80198aa:	e000      	b.n	80198ae <HAL_ADC_PollForConversion+0x8a>
 80198ac:	4b56      	ldr	r3, [pc, #344]	; (8019a08 <HAL_ADC_PollForConversion+0x1e4>)
 80198ae:	4618      	mov	r0, r3
 80198b0:	f7ff fbfa 	bl	80190a8 <LL_ADC_GetMultiDMATransfer>
 80198b4:	4603      	mov	r3, r0
 80198b6:	2b00      	cmp	r3, #0
 80198b8:	d007      	beq.n	80198ca <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80198be:	f043 0220 	orr.w	r2, r3, #32
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80198c6:	2301      	movs	r3, #1
 80198c8:	e095      	b.n	80199f6 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80198ca:	2304      	movs	r3, #4
 80198cc:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80198ce:	f7ff fa37 	bl	8018d40 <HAL_GetTick>
 80198d2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80198d4:	e021      	b.n	801991a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80198d6:	683b      	ldr	r3, [r7, #0]
 80198d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80198dc:	d01d      	beq.n	801991a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80198de:	f7ff fa2f 	bl	8018d40 <HAL_GetTick>
 80198e2:	4602      	mov	r2, r0
 80198e4:	693b      	ldr	r3, [r7, #16]
 80198e6:	1ad3      	subs	r3, r2, r3
 80198e8:	683a      	ldr	r2, [r7, #0]
 80198ea:	429a      	cmp	r2, r3
 80198ec:	d302      	bcc.n	80198f4 <HAL_ADC_PollForConversion+0xd0>
 80198ee:	683b      	ldr	r3, [r7, #0]
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	d112      	bne.n	801991a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	681b      	ldr	r3, [r3, #0]
 80198f8:	681a      	ldr	r2, [r3, #0]
 80198fa:	69fb      	ldr	r3, [r7, #28]
 80198fc:	4013      	ands	r3, r2
 80198fe:	2b00      	cmp	r3, #0
 8019900:	d10b      	bne.n	801991a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019906:	f043 0204 	orr.w	r2, r3, #4
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	2200      	movs	r2, #0
 8019912:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8019916:	2303      	movs	r3, #3
 8019918:	e06d      	b.n	80199f6 <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	681a      	ldr	r2, [r3, #0]
 8019920:	69fb      	ldr	r3, [r7, #28]
 8019922:	4013      	ands	r3, r2
 8019924:	2b00      	cmp	r3, #0
 8019926:	d0d6      	beq.n	80198d6 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801992c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	681b      	ldr	r3, [r3, #0]
 8019938:	4618      	mov	r0, r3
 801993a:	f7ff fb01 	bl	8018f40 <LL_ADC_REG_IsTriggerSourceSWStart>
 801993e:	4603      	mov	r3, r0
 8019940:	2b00      	cmp	r3, #0
 8019942:	d01c      	beq.n	801997e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	7f5b      	ldrb	r3, [r3, #29]
 8019948:	2b00      	cmp	r3, #0
 801994a:	d118      	bne.n	801997e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	681b      	ldr	r3, [r3, #0]
 8019950:	681b      	ldr	r3, [r3, #0]
 8019952:	f003 0308 	and.w	r3, r3, #8
 8019956:	2b08      	cmp	r3, #8
 8019958:	d111      	bne.n	801997e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801995e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801996a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801996e:	2b00      	cmp	r3, #0
 8019970:	d105      	bne.n	801997e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019976:	f043 0201 	orr.w	r2, r3, #1
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	681b      	ldr	r3, [r3, #0]
 8019982:	4a1f      	ldr	r2, [pc, #124]	; (8019a00 <HAL_ADC_PollForConversion+0x1dc>)
 8019984:	4293      	cmp	r3, r2
 8019986:	d002      	beq.n	801998e <HAL_ADC_PollForConversion+0x16a>
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	681b      	ldr	r3, [r3, #0]
 801998c:	e001      	b.n	8019992 <HAL_ADC_PollForConversion+0x16e>
 801998e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019992:	687a      	ldr	r2, [r7, #4]
 8019994:	6812      	ldr	r2, [r2, #0]
 8019996:	4293      	cmp	r3, r2
 8019998:	d008      	beq.n	80199ac <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801999a:	697b      	ldr	r3, [r7, #20]
 801999c:	2b00      	cmp	r3, #0
 801999e:	d005      	beq.n	80199ac <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80199a0:	697b      	ldr	r3, [r7, #20]
 80199a2:	2b05      	cmp	r3, #5
 80199a4:	d002      	beq.n	80199ac <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80199a6:	697b      	ldr	r3, [r7, #20]
 80199a8:	2b09      	cmp	r3, #9
 80199aa:	d104      	bne.n	80199b6 <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	681b      	ldr	r3, [r3, #0]
 80199b0:	68db      	ldr	r3, [r3, #12]
 80199b2:	61bb      	str	r3, [r7, #24]
 80199b4:	e00d      	b.n	80199d2 <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	4a11      	ldr	r2, [pc, #68]	; (8019a00 <HAL_ADC_PollForConversion+0x1dc>)
 80199bc:	4293      	cmp	r3, r2
 80199be:	d002      	beq.n	80199c6 <HAL_ADC_PollForConversion+0x1a2>
 80199c0:	687b      	ldr	r3, [r7, #4]
 80199c2:	681b      	ldr	r3, [r3, #0]
 80199c4:	e001      	b.n	80199ca <HAL_ADC_PollForConversion+0x1a6>
 80199c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80199ca:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80199cc:	68fb      	ldr	r3, [r7, #12]
 80199ce:	68db      	ldr	r3, [r3, #12]
 80199d0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80199d2:	69fb      	ldr	r3, [r7, #28]
 80199d4:	2b08      	cmp	r3, #8
 80199d6:	d104      	bne.n	80199e2 <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80199d8:	687b      	ldr	r3, [r7, #4]
 80199da:	681b      	ldr	r3, [r3, #0]
 80199dc:	2208      	movs	r2, #8
 80199de:	601a      	str	r2, [r3, #0]
 80199e0:	e008      	b.n	80199f4 <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80199e2:	69bb      	ldr	r3, [r7, #24]
 80199e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	d103      	bne.n	80199f4 <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	681b      	ldr	r3, [r3, #0]
 80199f0:	220c      	movs	r2, #12
 80199f2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80199f4:	2300      	movs	r3, #0
}
 80199f6:	4618      	mov	r0, r3
 80199f8:	3720      	adds	r7, #32
 80199fa:	46bd      	mov	sp, r7
 80199fc:	bd80      	pop	{r7, pc}
 80199fe:	bf00      	nop
 8019a00:	50000100 	.word	0x50000100
 8019a04:	50000300 	.word	0x50000300
 8019a08:	50000700 	.word	0x50000700

08019a0c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8019a0c:	b580      	push	{r7, lr}
 8019a0e:	b086      	sub	sp, #24
 8019a10:	af00      	add	r7, sp, #0
 8019a12:	60f8      	str	r0, [r7, #12]
 8019a14:	60b9      	str	r1, [r7, #8]
 8019a16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8019a18:	68fb      	ldr	r3, [r7, #12]
 8019a1a:	681b      	ldr	r3, [r3, #0]
 8019a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019a20:	d004      	beq.n	8019a2c <HAL_ADC_Start_DMA+0x20>
 8019a22:	68fb      	ldr	r3, [r7, #12]
 8019a24:	681b      	ldr	r3, [r3, #0]
 8019a26:	4a57      	ldr	r2, [pc, #348]	; (8019b84 <HAL_ADC_Start_DMA+0x178>)
 8019a28:	4293      	cmp	r3, r2
 8019a2a:	d101      	bne.n	8019a30 <HAL_ADC_Start_DMA+0x24>
 8019a2c:	4b56      	ldr	r3, [pc, #344]	; (8019b88 <HAL_ADC_Start_DMA+0x17c>)
 8019a2e:	e000      	b.n	8019a32 <HAL_ADC_Start_DMA+0x26>
 8019a30:	4b56      	ldr	r3, [pc, #344]	; (8019b8c <HAL_ADC_Start_DMA+0x180>)
 8019a32:	4618      	mov	r0, r3
 8019a34:	f7ff fb2a 	bl	801908c <LL_ADC_GetMultimode>
 8019a38:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8019a3a:	68fb      	ldr	r3, [r7, #12]
 8019a3c:	681b      	ldr	r3, [r3, #0]
 8019a3e:	4618      	mov	r0, r3
 8019a40:	f7ff fc04 	bl	801924c <LL_ADC_REG_IsConversionOngoing>
 8019a44:	4603      	mov	r3, r0
 8019a46:	2b00      	cmp	r3, #0
 8019a48:	f040 8094 	bne.w	8019b74 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8019a4c:	68fb      	ldr	r3, [r7, #12]
 8019a4e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019a52:	2b01      	cmp	r3, #1
 8019a54:	d101      	bne.n	8019a5a <HAL_ADC_Start_DMA+0x4e>
 8019a56:	2302      	movs	r3, #2
 8019a58:	e08f      	b.n	8019b7a <HAL_ADC_Start_DMA+0x16e>
 8019a5a:	68fb      	ldr	r3, [r7, #12]
 8019a5c:	2201      	movs	r2, #1
 8019a5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8019a62:	68fb      	ldr	r3, [r7, #12]
 8019a64:	681b      	ldr	r3, [r3, #0]
 8019a66:	4a4a      	ldr	r2, [pc, #296]	; (8019b90 <HAL_ADC_Start_DMA+0x184>)
 8019a68:	4293      	cmp	r3, r2
 8019a6a:	d008      	beq.n	8019a7e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019a6c:	693b      	ldr	r3, [r7, #16]
 8019a6e:	2b00      	cmp	r3, #0
 8019a70:	d005      	beq.n	8019a7e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8019a72:	693b      	ldr	r3, [r7, #16]
 8019a74:	2b05      	cmp	r3, #5
 8019a76:	d002      	beq.n	8019a7e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8019a78:	693b      	ldr	r3, [r7, #16]
 8019a7a:	2b09      	cmp	r3, #9
 8019a7c:	d173      	bne.n	8019b66 <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8019a7e:	68f8      	ldr	r0, [r7, #12]
 8019a80:	f001 f83c 	bl	801aafc <ADC_Enable>
 8019a84:	4603      	mov	r3, r0
 8019a86:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8019a88:	7dfb      	ldrb	r3, [r7, #23]
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d166      	bne.n	8019b5c <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8019a8e:	68fb      	ldr	r3, [r7, #12]
 8019a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a92:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8019a96:	f023 0301 	bic.w	r3, r3, #1
 8019a9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8019a9e:	68fb      	ldr	r3, [r7, #12]
 8019aa0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019aa2:	68fb      	ldr	r3, [r7, #12]
 8019aa4:	681b      	ldr	r3, [r3, #0]
 8019aa6:	4a37      	ldr	r2, [pc, #220]	; (8019b84 <HAL_ADC_Start_DMA+0x178>)
 8019aa8:	4293      	cmp	r3, r2
 8019aaa:	d002      	beq.n	8019ab2 <HAL_ADC_Start_DMA+0xa6>
 8019aac:	68fb      	ldr	r3, [r7, #12]
 8019aae:	681b      	ldr	r3, [r3, #0]
 8019ab0:	e001      	b.n	8019ab6 <HAL_ADC_Start_DMA+0xaa>
 8019ab2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019ab6:	68fa      	ldr	r2, [r7, #12]
 8019ab8:	6812      	ldr	r2, [r2, #0]
 8019aba:	4293      	cmp	r3, r2
 8019abc:	d002      	beq.n	8019ac4 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019abe:	693b      	ldr	r3, [r7, #16]
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	d105      	bne.n	8019ad0 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8019ac4:	68fb      	ldr	r3, [r7, #12]
 8019ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019ac8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8019acc:	68fb      	ldr	r3, [r7, #12]
 8019ace:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8019ad0:	68fb      	ldr	r3, [r7, #12]
 8019ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019ad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d006      	beq.n	8019aea <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8019adc:	68fb      	ldr	r3, [r7, #12]
 8019ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019ae0:	f023 0206 	bic.w	r2, r3, #6
 8019ae4:	68fb      	ldr	r3, [r7, #12]
 8019ae6:	661a      	str	r2, [r3, #96]	; 0x60
 8019ae8:	e002      	b.n	8019af0 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8019aea:	68fb      	ldr	r3, [r7, #12]
 8019aec:	2200      	movs	r2, #0
 8019aee:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8019af0:	68fb      	ldr	r3, [r7, #12]
 8019af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019af4:	4a27      	ldr	r2, [pc, #156]	; (8019b94 <HAL_ADC_Start_DMA+0x188>)
 8019af6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8019af8:	68fb      	ldr	r3, [r7, #12]
 8019afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019afc:	4a26      	ldr	r2, [pc, #152]	; (8019b98 <HAL_ADC_Start_DMA+0x18c>)
 8019afe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8019b00:	68fb      	ldr	r3, [r7, #12]
 8019b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019b04:	4a25      	ldr	r2, [pc, #148]	; (8019b9c <HAL_ADC_Start_DMA+0x190>)
 8019b06:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8019b08:	68fb      	ldr	r3, [r7, #12]
 8019b0a:	681b      	ldr	r3, [r3, #0]
 8019b0c:	221c      	movs	r2, #28
 8019b0e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8019b10:	68fb      	ldr	r3, [r7, #12]
 8019b12:	2200      	movs	r2, #0
 8019b14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8019b18:	68fb      	ldr	r3, [r7, #12]
 8019b1a:	681b      	ldr	r3, [r3, #0]
 8019b1c:	685a      	ldr	r2, [r3, #4]
 8019b1e:	68fb      	ldr	r3, [r7, #12]
 8019b20:	681b      	ldr	r3, [r3, #0]
 8019b22:	f042 0210 	orr.w	r2, r2, #16
 8019b26:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8019b28:	68fb      	ldr	r3, [r7, #12]
 8019b2a:	681b      	ldr	r3, [r3, #0]
 8019b2c:	68da      	ldr	r2, [r3, #12]
 8019b2e:	68fb      	ldr	r3, [r7, #12]
 8019b30:	681b      	ldr	r3, [r3, #0]
 8019b32:	f042 0201 	orr.w	r2, r2, #1
 8019b36:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8019b38:	68fb      	ldr	r3, [r7, #12]
 8019b3a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8019b3c:	68fb      	ldr	r3, [r7, #12]
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	3340      	adds	r3, #64	; 0x40
 8019b42:	4619      	mov	r1, r3
 8019b44:	68ba      	ldr	r2, [r7, #8]
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	f001 fcb4 	bl	801b4b4 <HAL_DMA_Start_IT>
 8019b4c:	4603      	mov	r3, r0
 8019b4e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8019b50:	68fb      	ldr	r3, [r7, #12]
 8019b52:	681b      	ldr	r3, [r3, #0]
 8019b54:	4618      	mov	r0, r3
 8019b56:	f7ff fb51 	bl	80191fc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8019b5a:	e00d      	b.n	8019b78 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8019b5c:	68fb      	ldr	r3, [r7, #12]
 8019b5e:	2200      	movs	r2, #0
 8019b60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8019b64:	e008      	b.n	8019b78 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8019b66:	2301      	movs	r3, #1
 8019b68:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8019b6a:	68fb      	ldr	r3, [r7, #12]
 8019b6c:	2200      	movs	r2, #0
 8019b6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8019b72:	e001      	b.n	8019b78 <HAL_ADC_Start_DMA+0x16c>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8019b74:	2302      	movs	r3, #2
 8019b76:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8019b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8019b7a:	4618      	mov	r0, r3
 8019b7c:	3718      	adds	r7, #24
 8019b7e:	46bd      	mov	sp, r7
 8019b80:	bd80      	pop	{r7, pc}
 8019b82:	bf00      	nop
 8019b84:	50000100 	.word	0x50000100
 8019b88:	50000300 	.word	0x50000300
 8019b8c:	50000700 	.word	0x50000700
 8019b90:	50000400 	.word	0x50000400
 8019b94:	0801ac7f 	.word	0x0801ac7f
 8019b98:	0801ad57 	.word	0x0801ad57
 8019b9c:	0801ad73 	.word	0x0801ad73

08019ba0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8019ba0:	b580      	push	{r7, lr}
 8019ba2:	b084      	sub	sp, #16
 8019ba4:	af00      	add	r7, sp, #0
 8019ba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019bae:	2b01      	cmp	r3, #1
 8019bb0:	d101      	bne.n	8019bb6 <HAL_ADC_Stop_DMA+0x16>
 8019bb2:	2302      	movs	r3, #2
 8019bb4:	e051      	b.n	8019c5a <HAL_ADC_Stop_DMA+0xba>
 8019bb6:	687b      	ldr	r3, [r7, #4]
 8019bb8:	2201      	movs	r2, #1
 8019bba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8019bbe:	2103      	movs	r1, #3
 8019bc0:	6878      	ldr	r0, [r7, #4]
 8019bc2:	f000 fedf 	bl	801a984 <ADC_ConversionStop>
 8019bc6:	4603      	mov	r3, r0
 8019bc8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8019bca:	7bfb      	ldrb	r3, [r7, #15]
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	d13f      	bne.n	8019c50 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	681b      	ldr	r3, [r3, #0]
 8019bd4:	68da      	ldr	r2, [r3, #12]
 8019bd6:	687b      	ldr	r3, [r7, #4]
 8019bd8:	681b      	ldr	r3, [r3, #0]
 8019bda:	f022 0201 	bic.w	r2, r2, #1
 8019bde:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019be4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8019be8:	b2db      	uxtb	r3, r3
 8019bea:	2b02      	cmp	r3, #2
 8019bec:	d10f      	bne.n	8019c0e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019bf2:	4618      	mov	r0, r3
 8019bf4:	f001 fcd9 	bl	801b5aa <HAL_DMA_Abort>
 8019bf8:	4603      	mov	r3, r0
 8019bfa:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8019bfc:	7bfb      	ldrb	r3, [r7, #15]
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d005      	beq.n	8019c0e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	681b      	ldr	r3, [r3, #0]
 8019c12:	685a      	ldr	r2, [r3, #4]
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	681b      	ldr	r3, [r3, #0]
 8019c18:	f022 0210 	bic.w	r2, r2, #16
 8019c1c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8019c1e:	7bfb      	ldrb	r3, [r7, #15]
 8019c20:	2b00      	cmp	r3, #0
 8019c22:	d105      	bne.n	8019c30 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8019c24:	6878      	ldr	r0, [r7, #4]
 8019c26:	f000 ffcb 	bl	801abc0 <ADC_Disable>
 8019c2a:	4603      	mov	r3, r0
 8019c2c:	73fb      	strb	r3, [r7, #15]
 8019c2e:	e002      	b.n	8019c36 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8019c30:	6878      	ldr	r0, [r7, #4]
 8019c32:	f000 ffc5 	bl	801abc0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8019c36:	7bfb      	ldrb	r3, [r7, #15]
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d109      	bne.n	8019c50 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c40:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8019c44:	f023 0301 	bic.w	r3, r3, #1
 8019c48:	f043 0201 	orr.w	r2, r3, #1
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8019c50:	687b      	ldr	r3, [r7, #4]
 8019c52:	2200      	movs	r2, #0
 8019c54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8019c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c5a:	4618      	mov	r0, r3
 8019c5c:	3710      	adds	r7, #16
 8019c5e:	46bd      	mov	sp, r7
 8019c60:	bd80      	pop	{r7, pc}

08019c62 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8019c62:	b480      	push	{r7}
 8019c64:	b083      	sub	sp, #12
 8019c66:	af00      	add	r7, sp, #0
 8019c68:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	681b      	ldr	r3, [r3, #0]
 8019c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8019c70:	4618      	mov	r0, r3
 8019c72:	370c      	adds	r7, #12
 8019c74:	46bd      	mov	sp, r7
 8019c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c7a:	4770      	bx	lr

08019c7c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8019c7c:	b580      	push	{r7, lr}
 8019c7e:	b08a      	sub	sp, #40	; 0x28
 8019c80:	af00      	add	r7, sp, #0
 8019c82:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8019c84:	2300      	movs	r3, #0
 8019c86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	681b      	ldr	r3, [r3, #0]
 8019c8c:	681b      	ldr	r3, [r3, #0]
 8019c8e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	685b      	ldr	r3, [r3, #4]
 8019c96:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019ca0:	d004      	beq.n	8019cac <HAL_ADC_IRQHandler+0x30>
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	681b      	ldr	r3, [r3, #0]
 8019ca6:	4a87      	ldr	r2, [pc, #540]	; (8019ec4 <HAL_ADC_IRQHandler+0x248>)
 8019ca8:	4293      	cmp	r3, r2
 8019caa:	d101      	bne.n	8019cb0 <HAL_ADC_IRQHandler+0x34>
 8019cac:	4b86      	ldr	r3, [pc, #536]	; (8019ec8 <HAL_ADC_IRQHandler+0x24c>)
 8019cae:	e000      	b.n	8019cb2 <HAL_ADC_IRQHandler+0x36>
 8019cb0:	4b86      	ldr	r3, [pc, #536]	; (8019ecc <HAL_ADC_IRQHandler+0x250>)
 8019cb2:	4618      	mov	r0, r3
 8019cb4:	f7ff f9ea 	bl	801908c <LL_ADC_GetMultimode>
 8019cb8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8019cba:	69fb      	ldr	r3, [r7, #28]
 8019cbc:	f003 0302 	and.w	r3, r3, #2
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	d017      	beq.n	8019cf4 <HAL_ADC_IRQHandler+0x78>
 8019cc4:	69bb      	ldr	r3, [r7, #24]
 8019cc6:	f003 0302 	and.w	r3, r3, #2
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	d012      	beq.n	8019cf4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019cd2:	f003 0310 	and.w	r3, r3, #16
 8019cd6:	2b00      	cmp	r3, #0
 8019cd8:	d105      	bne.n	8019ce6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019cde:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8019ce6:	6878      	ldr	r0, [r7, #4]
 8019ce8:	f001 f93a 	bl	801af60 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	2202      	movs	r2, #2
 8019cf2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8019cf4:	69fb      	ldr	r3, [r7, #28]
 8019cf6:	f003 0304 	and.w	r3, r3, #4
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	d004      	beq.n	8019d08 <HAL_ADC_IRQHandler+0x8c>
 8019cfe:	69bb      	ldr	r3, [r7, #24]
 8019d00:	f003 0304 	and.w	r3, r3, #4
 8019d04:	2b00      	cmp	r3, #0
 8019d06:	d10a      	bne.n	8019d1e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8019d08:	69fb      	ldr	r3, [r7, #28]
 8019d0a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	f000 8085 	beq.w	8019e1e <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8019d14:	69bb      	ldr	r3, [r7, #24]
 8019d16:	f003 0308 	and.w	r3, r3, #8
 8019d1a:	2b00      	cmp	r3, #0
 8019d1c:	d07f      	beq.n	8019e1e <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019d22:	f003 0310 	and.w	r3, r3, #16
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	d105      	bne.n	8019d36 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019d2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	681b      	ldr	r3, [r3, #0]
 8019d3a:	4618      	mov	r0, r3
 8019d3c:	f7ff f900 	bl	8018f40 <LL_ADC_REG_IsTriggerSourceSWStart>
 8019d40:	4603      	mov	r3, r0
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d064      	beq.n	8019e10 <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	681b      	ldr	r3, [r3, #0]
 8019d4a:	4a5e      	ldr	r2, [pc, #376]	; (8019ec4 <HAL_ADC_IRQHandler+0x248>)
 8019d4c:	4293      	cmp	r3, r2
 8019d4e:	d002      	beq.n	8019d56 <HAL_ADC_IRQHandler+0xda>
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	681b      	ldr	r3, [r3, #0]
 8019d54:	e001      	b.n	8019d5a <HAL_ADC_IRQHandler+0xde>
 8019d56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019d5a:	687a      	ldr	r2, [r7, #4]
 8019d5c:	6812      	ldr	r2, [r2, #0]
 8019d5e:	4293      	cmp	r3, r2
 8019d60:	d008      	beq.n	8019d74 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019d62:	697b      	ldr	r3, [r7, #20]
 8019d64:	2b00      	cmp	r3, #0
 8019d66:	d005      	beq.n	8019d74 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8019d68:	697b      	ldr	r3, [r7, #20]
 8019d6a:	2b05      	cmp	r3, #5
 8019d6c:	d002      	beq.n	8019d74 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8019d6e:	697b      	ldr	r3, [r7, #20]
 8019d70:	2b09      	cmp	r3, #9
 8019d72:	d104      	bne.n	8019d7e <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	681b      	ldr	r3, [r3, #0]
 8019d78:	68db      	ldr	r3, [r3, #12]
 8019d7a:	623b      	str	r3, [r7, #32]
 8019d7c:	e00d      	b.n	8019d9a <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	681b      	ldr	r3, [r3, #0]
 8019d82:	4a50      	ldr	r2, [pc, #320]	; (8019ec4 <HAL_ADC_IRQHandler+0x248>)
 8019d84:	4293      	cmp	r3, r2
 8019d86:	d002      	beq.n	8019d8e <HAL_ADC_IRQHandler+0x112>
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	681b      	ldr	r3, [r3, #0]
 8019d8c:	e001      	b.n	8019d92 <HAL_ADC_IRQHandler+0x116>
 8019d8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019d92:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8019d94:	693b      	ldr	r3, [r7, #16]
 8019d96:	68db      	ldr	r3, [r3, #12]
 8019d98:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8019d9a:	6a3b      	ldr	r3, [r7, #32]
 8019d9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	d135      	bne.n	8019e10 <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	681b      	ldr	r3, [r3, #0]
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	f003 0308 	and.w	r3, r3, #8
 8019dae:	2b08      	cmp	r3, #8
 8019db0:	d12e      	bne.n	8019e10 <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	681b      	ldr	r3, [r3, #0]
 8019db6:	4618      	mov	r0, r3
 8019db8:	f7ff fa48 	bl	801924c <LL_ADC_REG_IsConversionOngoing>
 8019dbc:	4603      	mov	r3, r0
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	d11a      	bne.n	8019df8 <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8019dc2:	687b      	ldr	r3, [r7, #4]
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	685a      	ldr	r2, [r3, #4]
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	f022 020c 	bic.w	r2, r2, #12
 8019dd0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019dd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8019dda:	687b      	ldr	r3, [r7, #4]
 8019ddc:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	d112      	bne.n	8019e10 <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019dee:	f043 0201 	orr.w	r2, r3, #1
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	65da      	str	r2, [r3, #92]	; 0x5c
 8019df6:	e00b      	b.n	8019e10 <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019dfc:	f043 0210 	orr.w	r2, r3, #16
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019e08:	f043 0201 	orr.w	r2, r3, #1
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8019e10:	6878      	ldr	r0, [r7, #4]
 8019e12:	f7ee fa3d 	bl	8008290 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	681b      	ldr	r3, [r3, #0]
 8019e1a:	220c      	movs	r2, #12
 8019e1c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8019e1e:	69fb      	ldr	r3, [r7, #28]
 8019e20:	f003 0320 	and.w	r3, r3, #32
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d004      	beq.n	8019e32 <HAL_ADC_IRQHandler+0x1b6>
 8019e28:	69bb      	ldr	r3, [r7, #24]
 8019e2a:	f003 0320 	and.w	r3, r3, #32
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	d10b      	bne.n	8019e4a <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8019e32:	69fb      	ldr	r3, [r7, #28]
 8019e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	f000 80a1 	beq.w	8019f80 <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8019e3e:	69bb      	ldr	r3, [r7, #24]
 8019e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	f000 809b 	beq.w	8019f80 <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019e4e:	f003 0310 	and.w	r3, r3, #16
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	d105      	bne.n	8019e62 <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019e5a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8019e62:	687b      	ldr	r3, [r7, #4]
 8019e64:	681b      	ldr	r3, [r3, #0]
 8019e66:	4618      	mov	r0, r3
 8019e68:	f7ff f8a9 	bl	8018fbe <LL_ADC_INJ_IsTriggerSourceSWStart>
 8019e6c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	681b      	ldr	r3, [r3, #0]
 8019e72:	4618      	mov	r0, r3
 8019e74:	f7ff f864 	bl	8018f40 <LL_ADC_REG_IsTriggerSourceSWStart>
 8019e78:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	681b      	ldr	r3, [r3, #0]
 8019e7e:	4a11      	ldr	r2, [pc, #68]	; (8019ec4 <HAL_ADC_IRQHandler+0x248>)
 8019e80:	4293      	cmp	r3, r2
 8019e82:	d002      	beq.n	8019e8a <HAL_ADC_IRQHandler+0x20e>
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	681b      	ldr	r3, [r3, #0]
 8019e88:	e001      	b.n	8019e8e <HAL_ADC_IRQHandler+0x212>
 8019e8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019e8e:	687a      	ldr	r2, [r7, #4]
 8019e90:	6812      	ldr	r2, [r2, #0]
 8019e92:	4293      	cmp	r3, r2
 8019e94:	d008      	beq.n	8019ea8 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019e96:	697b      	ldr	r3, [r7, #20]
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d005      	beq.n	8019ea8 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8019e9c:	697b      	ldr	r3, [r7, #20]
 8019e9e:	2b06      	cmp	r3, #6
 8019ea0:	d002      	beq.n	8019ea8 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8019ea2:	697b      	ldr	r3, [r7, #20]
 8019ea4:	2b07      	cmp	r3, #7
 8019ea6:	d104      	bne.n	8019eb2 <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	681b      	ldr	r3, [r3, #0]
 8019eac:	68db      	ldr	r3, [r3, #12]
 8019eae:	623b      	str	r3, [r7, #32]
 8019eb0:	e014      	b.n	8019edc <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	4a03      	ldr	r2, [pc, #12]	; (8019ec4 <HAL_ADC_IRQHandler+0x248>)
 8019eb8:	4293      	cmp	r3, r2
 8019eba:	d009      	beq.n	8019ed0 <HAL_ADC_IRQHandler+0x254>
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	681b      	ldr	r3, [r3, #0]
 8019ec0:	e008      	b.n	8019ed4 <HAL_ADC_IRQHandler+0x258>
 8019ec2:	bf00      	nop
 8019ec4:	50000100 	.word	0x50000100
 8019ec8:	50000300 	.word	0x50000300
 8019ecc:	50000700 	.word	0x50000700
 8019ed0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019ed4:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8019ed6:	693b      	ldr	r3, [r7, #16]
 8019ed8:	68db      	ldr	r3, [r3, #12]
 8019eda:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8019edc:	68fb      	ldr	r3, [r7, #12]
 8019ede:	2b00      	cmp	r3, #0
 8019ee0:	d047      	beq.n	8019f72 <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8019ee2:	6a3b      	ldr	r3, [r7, #32]
 8019ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019ee8:	2b00      	cmp	r3, #0
 8019eea:	d007      	beq.n	8019efc <HAL_ADC_IRQHandler+0x280>
 8019eec:	68bb      	ldr	r3, [r7, #8]
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	d03f      	beq.n	8019f72 <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8019ef2:	6a3b      	ldr	r3, [r7, #32]
 8019ef4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	d13a      	bne.n	8019f72 <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	681b      	ldr	r3, [r3, #0]
 8019f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019f06:	2b40      	cmp	r3, #64	; 0x40
 8019f08:	d133      	bne.n	8019f72 <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8019f0a:	6a3b      	ldr	r3, [r7, #32]
 8019f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	d12e      	bne.n	8019f72 <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	681b      	ldr	r3, [r3, #0]
 8019f18:	4618      	mov	r0, r3
 8019f1a:	f7ff f9be 	bl	801929a <LL_ADC_INJ_IsConversionOngoing>
 8019f1e:	4603      	mov	r3, r0
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	d11a      	bne.n	8019f5a <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	681b      	ldr	r3, [r3, #0]
 8019f28:	685a      	ldr	r2, [r3, #4]
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019f32:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8019f34:	687b      	ldr	r3, [r7, #4]
 8019f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019f38:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8019f3c:	687b      	ldr	r3, [r7, #4]
 8019f3e:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	d112      	bne.n	8019f72 <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019f50:	f043 0201 	orr.w	r2, r3, #1
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	65da      	str	r2, [r3, #92]	; 0x5c
 8019f58:	e00b      	b.n	8019f72 <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019f5e:	f043 0210 	orr.w	r2, r3, #16
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019f6a:	f043 0201 	orr.w	r2, r3, #1
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8019f72:	6878      	ldr	r0, [r7, #4]
 8019f74:	f000 ffcc 	bl	801af10 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	2260      	movs	r2, #96	; 0x60
 8019f7e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8019f80:	69fb      	ldr	r3, [r7, #28]
 8019f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019f86:	2b00      	cmp	r3, #0
 8019f88:	d011      	beq.n	8019fae <HAL_ADC_IRQHandler+0x332>
 8019f8a:	69bb      	ldr	r3, [r7, #24]
 8019f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d00c      	beq.n	8019fae <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019f98:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8019fa0:	6878      	ldr	r0, [r7, #4]
 8019fa2:	f000 f8af 	bl	801a104 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	2280      	movs	r2, #128	; 0x80
 8019fac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8019fae:	69fb      	ldr	r3, [r7, #28]
 8019fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019fb4:	2b00      	cmp	r3, #0
 8019fb6:	d012      	beq.n	8019fde <HAL_ADC_IRQHandler+0x362>
 8019fb8:	69bb      	ldr	r3, [r7, #24]
 8019fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	d00d      	beq.n	8019fde <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019fc6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8019fce:	6878      	ldr	r0, [r7, #4]
 8019fd0:	f000 ffb2 	bl	801af38 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	681b      	ldr	r3, [r3, #0]
 8019fd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019fdc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8019fde:	69fb      	ldr	r3, [r7, #28]
 8019fe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019fe4:	2b00      	cmp	r3, #0
 8019fe6:	d012      	beq.n	801a00e <HAL_ADC_IRQHandler+0x392>
 8019fe8:	69bb      	ldr	r3, [r7, #24]
 8019fea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019fee:	2b00      	cmp	r3, #0
 8019ff0:	d00d      	beq.n	801a00e <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8019ff2:	687b      	ldr	r3, [r7, #4]
 8019ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019ff6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8019ffe:	6878      	ldr	r0, [r7, #4]
 801a000:	f000 ffa4 	bl	801af4c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	681b      	ldr	r3, [r3, #0]
 801a008:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a00c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 801a00e:	69fb      	ldr	r3, [r7, #28]
 801a010:	f003 0310 	and.w	r3, r3, #16
 801a014:	2b00      	cmp	r3, #0
 801a016:	d043      	beq.n	801a0a0 <HAL_ADC_IRQHandler+0x424>
 801a018:	69bb      	ldr	r3, [r7, #24]
 801a01a:	f003 0310 	and.w	r3, r3, #16
 801a01e:	2b00      	cmp	r3, #0
 801a020:	d03e      	beq.n	801a0a0 <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a026:	2b00      	cmp	r3, #0
 801a028:	d102      	bne.n	801a030 <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 801a02a:	2301      	movs	r3, #1
 801a02c:	627b      	str	r3, [r7, #36]	; 0x24
 801a02e:	e021      	b.n	801a074 <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 801a030:	697b      	ldr	r3, [r7, #20]
 801a032:	2b00      	cmp	r3, #0
 801a034:	d015      	beq.n	801a062 <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	681b      	ldr	r3, [r3, #0]
 801a03a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a03e:	d004      	beq.n	801a04a <HAL_ADC_IRQHandler+0x3ce>
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	4a27      	ldr	r2, [pc, #156]	; (801a0e4 <HAL_ADC_IRQHandler+0x468>)
 801a046:	4293      	cmp	r3, r2
 801a048:	d101      	bne.n	801a04e <HAL_ADC_IRQHandler+0x3d2>
 801a04a:	4b27      	ldr	r3, [pc, #156]	; (801a0e8 <HAL_ADC_IRQHandler+0x46c>)
 801a04c:	e000      	b.n	801a050 <HAL_ADC_IRQHandler+0x3d4>
 801a04e:	4b27      	ldr	r3, [pc, #156]	; (801a0ec <HAL_ADC_IRQHandler+0x470>)
 801a050:	4618      	mov	r0, r3
 801a052:	f7ff f829 	bl	80190a8 <LL_ADC_GetMultiDMATransfer>
 801a056:	4603      	mov	r3, r0
 801a058:	2b00      	cmp	r3, #0
 801a05a:	d00b      	beq.n	801a074 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 801a05c:	2301      	movs	r3, #1
 801a05e:	627b      	str	r3, [r7, #36]	; 0x24
 801a060:	e008      	b.n	801a074 <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	681b      	ldr	r3, [r3, #0]
 801a066:	68db      	ldr	r3, [r3, #12]
 801a068:	f003 0301 	and.w	r3, r3, #1
 801a06c:	2b00      	cmp	r3, #0
 801a06e:	d001      	beq.n	801a074 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 801a070:	2301      	movs	r3, #1
 801a072:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 801a074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a076:	2b01      	cmp	r3, #1
 801a078:	d10e      	bne.n	801a098 <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a07e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a08a:	f043 0202 	orr.w	r2, r3, #2
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 801a092:	6878      	ldr	r0, [r7, #4]
 801a094:	f000 f840 	bl	801a118 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	2210      	movs	r2, #16
 801a09e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 801a0a0:	69fb      	ldr	r3, [r7, #28]
 801a0a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	d018      	beq.n	801a0dc <HAL_ADC_IRQHandler+0x460>
 801a0aa:	69bb      	ldr	r3, [r7, #24]
 801a0ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a0b0:	2b00      	cmp	r3, #0
 801a0b2:	d013      	beq.n	801a0dc <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 801a0b4:	687b      	ldr	r3, [r7, #4]
 801a0b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a0b8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a0c4:	f043 0208 	orr.w	r2, r3, #8
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	681b      	ldr	r3, [r3, #0]
 801a0d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a0d4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 801a0d6:	6878      	ldr	r0, [r7, #4]
 801a0d8:	f000 ff24 	bl	801af24 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 801a0dc:	bf00      	nop
 801a0de:	3728      	adds	r7, #40	; 0x28
 801a0e0:	46bd      	mov	sp, r7
 801a0e2:	bd80      	pop	{r7, pc}
 801a0e4:	50000100 	.word	0x50000100
 801a0e8:	50000300 	.word	0x50000300
 801a0ec:	50000700 	.word	0x50000700

0801a0f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 801a0f0:	b480      	push	{r7}
 801a0f2:	b083      	sub	sp, #12
 801a0f4:	af00      	add	r7, sp, #0
 801a0f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 801a0f8:	bf00      	nop
 801a0fa:	370c      	adds	r7, #12
 801a0fc:	46bd      	mov	sp, r7
 801a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a102:	4770      	bx	lr

0801a104 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 801a104:	b480      	push	{r7}
 801a106:	b083      	sub	sp, #12
 801a108:	af00      	add	r7, sp, #0
 801a10a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 801a10c:	bf00      	nop
 801a10e:	370c      	adds	r7, #12
 801a110:	46bd      	mov	sp, r7
 801a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a116:	4770      	bx	lr

0801a118 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801a118:	b480      	push	{r7}
 801a11a:	b083      	sub	sp, #12
 801a11c:	af00      	add	r7, sp, #0
 801a11e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 801a120:	bf00      	nop
 801a122:	370c      	adds	r7, #12
 801a124:	46bd      	mov	sp, r7
 801a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a12a:	4770      	bx	lr

0801a12c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 801a12c:	b580      	push	{r7, lr}
 801a12e:	b0b6      	sub	sp, #216	; 0xd8
 801a130:	af00      	add	r7, sp, #0
 801a132:	6078      	str	r0, [r7, #4]
 801a134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801a136:	2300      	movs	r3, #0
 801a138:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 801a13c:	2300      	movs	r3, #0
 801a13e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801a146:	2b01      	cmp	r3, #1
 801a148:	d102      	bne.n	801a150 <HAL_ADC_ConfigChannel+0x24>
 801a14a:	2302      	movs	r3, #2
 801a14c:	f000 bc04 	b.w	801a958 <HAL_ADC_ConfigChannel+0x82c>
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	2201      	movs	r2, #1
 801a154:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	681b      	ldr	r3, [r3, #0]
 801a15c:	4618      	mov	r0, r3
 801a15e:	f7ff f875 	bl	801924c <LL_ADC_REG_IsConversionOngoing>
 801a162:	4603      	mov	r3, r0
 801a164:	2b00      	cmp	r3, #0
 801a166:	f040 83e8 	bne.w	801a93a <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	6818      	ldr	r0, [r3, #0]
 801a16e:	683b      	ldr	r3, [r7, #0]
 801a170:	6859      	ldr	r1, [r3, #4]
 801a172:	683b      	ldr	r3, [r7, #0]
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	461a      	mov	r2, r3
 801a178:	f7fe fef5 	bl	8018f66 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	681b      	ldr	r3, [r3, #0]
 801a180:	4618      	mov	r0, r3
 801a182:	f7ff f863 	bl	801924c <LL_ADC_REG_IsConversionOngoing>
 801a186:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	681b      	ldr	r3, [r3, #0]
 801a18e:	4618      	mov	r0, r3
 801a190:	f7ff f883 	bl	801929a <LL_ADC_INJ_IsConversionOngoing>
 801a194:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 801a198:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801a19c:	2b00      	cmp	r3, #0
 801a19e:	f040 81d9 	bne.w	801a554 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 801a1a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801a1a6:	2b00      	cmp	r3, #0
 801a1a8:	f040 81d4 	bne.w	801a554 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 801a1ac:	683b      	ldr	r3, [r7, #0]
 801a1ae:	689b      	ldr	r3, [r3, #8]
 801a1b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a1b4:	d10f      	bne.n	801a1d6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	6818      	ldr	r0, [r3, #0]
 801a1ba:	683b      	ldr	r3, [r7, #0]
 801a1bc:	681b      	ldr	r3, [r3, #0]
 801a1be:	2200      	movs	r2, #0
 801a1c0:	4619      	mov	r1, r3
 801a1c2:	f7fe ff0f 	bl	8018fe4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801a1ce:	4618      	mov	r0, r3
 801a1d0:	f7fe fea3 	bl	8018f1a <LL_ADC_SetSamplingTimeCommonConfig>
 801a1d4:	e00e      	b.n	801a1f4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	6818      	ldr	r0, [r3, #0]
 801a1da:	683b      	ldr	r3, [r7, #0]
 801a1dc:	6819      	ldr	r1, [r3, #0]
 801a1de:	683b      	ldr	r3, [r7, #0]
 801a1e0:	689b      	ldr	r3, [r3, #8]
 801a1e2:	461a      	mov	r2, r3
 801a1e4:	f7fe fefe 	bl	8018fe4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	681b      	ldr	r3, [r3, #0]
 801a1ec:	2100      	movs	r1, #0
 801a1ee:	4618      	mov	r0, r3
 801a1f0:	f7fe fe93 	bl	8018f1a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 801a1f4:	683b      	ldr	r3, [r7, #0]
 801a1f6:	695a      	ldr	r2, [r3, #20]
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	681b      	ldr	r3, [r3, #0]
 801a1fc:	68db      	ldr	r3, [r3, #12]
 801a1fe:	08db      	lsrs	r3, r3, #3
 801a200:	f003 0303 	and.w	r3, r3, #3
 801a204:	005b      	lsls	r3, r3, #1
 801a206:	fa02 f303 	lsl.w	r3, r2, r3
 801a20a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 801a20e:	683b      	ldr	r3, [r7, #0]
 801a210:	691b      	ldr	r3, [r3, #16]
 801a212:	2b04      	cmp	r3, #4
 801a214:	d022      	beq.n	801a25c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 801a216:	687b      	ldr	r3, [r7, #4]
 801a218:	6818      	ldr	r0, [r3, #0]
 801a21a:	683b      	ldr	r3, [r7, #0]
 801a21c:	6919      	ldr	r1, [r3, #16]
 801a21e:	683b      	ldr	r3, [r7, #0]
 801a220:	681a      	ldr	r2, [r3, #0]
 801a222:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801a226:	f7fe fded 	bl	8018e04 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	6818      	ldr	r0, [r3, #0]
 801a22e:	683b      	ldr	r3, [r7, #0]
 801a230:	6919      	ldr	r1, [r3, #16]
 801a232:	683b      	ldr	r3, [r7, #0]
 801a234:	699b      	ldr	r3, [r3, #24]
 801a236:	461a      	mov	r2, r3
 801a238:	f7fe fe39 	bl	8018eae <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	6818      	ldr	r0, [r3, #0]
 801a240:	683b      	ldr	r3, [r7, #0]
 801a242:	6919      	ldr	r1, [r3, #16]
 801a244:	683b      	ldr	r3, [r7, #0]
 801a246:	7f1b      	ldrb	r3, [r3, #28]
 801a248:	2b01      	cmp	r3, #1
 801a24a:	d102      	bne.n	801a252 <HAL_ADC_ConfigChannel+0x126>
 801a24c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801a250:	e000      	b.n	801a254 <HAL_ADC_ConfigChannel+0x128>
 801a252:	2300      	movs	r3, #0
 801a254:	461a      	mov	r2, r3
 801a256:	f7fe fe45 	bl	8018ee4 <LL_ADC_SetOffsetSaturation>
 801a25a:	e17b      	b.n	801a554 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	681b      	ldr	r3, [r3, #0]
 801a260:	2100      	movs	r1, #0
 801a262:	4618      	mov	r0, r3
 801a264:	f7fe fdf2 	bl	8018e4c <LL_ADC_GetOffsetChannel>
 801a268:	4603      	mov	r3, r0
 801a26a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a26e:	2b00      	cmp	r3, #0
 801a270:	d10a      	bne.n	801a288 <HAL_ADC_ConfigChannel+0x15c>
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	681b      	ldr	r3, [r3, #0]
 801a276:	2100      	movs	r1, #0
 801a278:	4618      	mov	r0, r3
 801a27a:	f7fe fde7 	bl	8018e4c <LL_ADC_GetOffsetChannel>
 801a27e:	4603      	mov	r3, r0
 801a280:	0e9b      	lsrs	r3, r3, #26
 801a282:	f003 021f 	and.w	r2, r3, #31
 801a286:	e01e      	b.n	801a2c6 <HAL_ADC_ConfigChannel+0x19a>
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	681b      	ldr	r3, [r3, #0]
 801a28c:	2100      	movs	r1, #0
 801a28e:	4618      	mov	r0, r3
 801a290:	f7fe fddc 	bl	8018e4c <LL_ADC_GetOffsetChannel>
 801a294:	4603      	mov	r3, r0
 801a296:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a29a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801a29e:	fa93 f3a3 	rbit	r3, r3
 801a2a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 801a2a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801a2aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 801a2ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801a2b2:	2b00      	cmp	r3, #0
 801a2b4:	d101      	bne.n	801a2ba <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 801a2b6:	2320      	movs	r3, #32
 801a2b8:	e004      	b.n	801a2c4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 801a2ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801a2be:	fab3 f383 	clz	r3, r3
 801a2c2:	b2db      	uxtb	r3, r3
 801a2c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801a2c6:	683b      	ldr	r3, [r7, #0]
 801a2c8:	681b      	ldr	r3, [r3, #0]
 801a2ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	d105      	bne.n	801a2de <HAL_ADC_ConfigChannel+0x1b2>
 801a2d2:	683b      	ldr	r3, [r7, #0]
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	0e9b      	lsrs	r3, r3, #26
 801a2d8:	f003 031f 	and.w	r3, r3, #31
 801a2dc:	e018      	b.n	801a310 <HAL_ADC_ConfigChannel+0x1e4>
 801a2de:	683b      	ldr	r3, [r7, #0]
 801a2e0:	681b      	ldr	r3, [r3, #0]
 801a2e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a2e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a2ea:	fa93 f3a3 	rbit	r3, r3
 801a2ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 801a2f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801a2f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 801a2fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a2fe:	2b00      	cmp	r3, #0
 801a300:	d101      	bne.n	801a306 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 801a302:	2320      	movs	r3, #32
 801a304:	e004      	b.n	801a310 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 801a306:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a30a:	fab3 f383 	clz	r3, r3
 801a30e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 801a310:	429a      	cmp	r2, r3
 801a312:	d106      	bne.n	801a322 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 801a314:	687b      	ldr	r3, [r7, #4]
 801a316:	681b      	ldr	r3, [r3, #0]
 801a318:	2200      	movs	r2, #0
 801a31a:	2100      	movs	r1, #0
 801a31c:	4618      	mov	r0, r3
 801a31e:	f7fe fdab 	bl	8018e78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	681b      	ldr	r3, [r3, #0]
 801a326:	2101      	movs	r1, #1
 801a328:	4618      	mov	r0, r3
 801a32a:	f7fe fd8f 	bl	8018e4c <LL_ADC_GetOffsetChannel>
 801a32e:	4603      	mov	r3, r0
 801a330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a334:	2b00      	cmp	r3, #0
 801a336:	d10a      	bne.n	801a34e <HAL_ADC_ConfigChannel+0x222>
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	681b      	ldr	r3, [r3, #0]
 801a33c:	2101      	movs	r1, #1
 801a33e:	4618      	mov	r0, r3
 801a340:	f7fe fd84 	bl	8018e4c <LL_ADC_GetOffsetChannel>
 801a344:	4603      	mov	r3, r0
 801a346:	0e9b      	lsrs	r3, r3, #26
 801a348:	f003 021f 	and.w	r2, r3, #31
 801a34c:	e01e      	b.n	801a38c <HAL_ADC_ConfigChannel+0x260>
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	681b      	ldr	r3, [r3, #0]
 801a352:	2101      	movs	r1, #1
 801a354:	4618      	mov	r0, r3
 801a356:	f7fe fd79 	bl	8018e4c <LL_ADC_GetOffsetChannel>
 801a35a:	4603      	mov	r3, r0
 801a35c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a360:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801a364:	fa93 f3a3 	rbit	r3, r3
 801a368:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 801a36c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801a370:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 801a374:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801a378:	2b00      	cmp	r3, #0
 801a37a:	d101      	bne.n	801a380 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 801a37c:	2320      	movs	r3, #32
 801a37e:	e004      	b.n	801a38a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 801a380:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801a384:	fab3 f383 	clz	r3, r3
 801a388:	b2db      	uxtb	r3, r3
 801a38a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801a38c:	683b      	ldr	r3, [r7, #0]
 801a38e:	681b      	ldr	r3, [r3, #0]
 801a390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a394:	2b00      	cmp	r3, #0
 801a396:	d105      	bne.n	801a3a4 <HAL_ADC_ConfigChannel+0x278>
 801a398:	683b      	ldr	r3, [r7, #0]
 801a39a:	681b      	ldr	r3, [r3, #0]
 801a39c:	0e9b      	lsrs	r3, r3, #26
 801a39e:	f003 031f 	and.w	r3, r3, #31
 801a3a2:	e018      	b.n	801a3d6 <HAL_ADC_ConfigChannel+0x2aa>
 801a3a4:	683b      	ldr	r3, [r7, #0]
 801a3a6:	681b      	ldr	r3, [r3, #0]
 801a3a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a3ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801a3b0:	fa93 f3a3 	rbit	r3, r3
 801a3b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 801a3b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801a3bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 801a3c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	d101      	bne.n	801a3cc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 801a3c8:	2320      	movs	r3, #32
 801a3ca:	e004      	b.n	801a3d6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 801a3cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a3d0:	fab3 f383 	clz	r3, r3
 801a3d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 801a3d6:	429a      	cmp	r2, r3
 801a3d8:	d106      	bne.n	801a3e8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	681b      	ldr	r3, [r3, #0]
 801a3de:	2200      	movs	r2, #0
 801a3e0:	2101      	movs	r1, #1
 801a3e2:	4618      	mov	r0, r3
 801a3e4:	f7fe fd48 	bl	8018e78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	681b      	ldr	r3, [r3, #0]
 801a3ec:	2102      	movs	r1, #2
 801a3ee:	4618      	mov	r0, r3
 801a3f0:	f7fe fd2c 	bl	8018e4c <LL_ADC_GetOffsetChannel>
 801a3f4:	4603      	mov	r3, r0
 801a3f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a3fa:	2b00      	cmp	r3, #0
 801a3fc:	d10a      	bne.n	801a414 <HAL_ADC_ConfigChannel+0x2e8>
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	2102      	movs	r1, #2
 801a404:	4618      	mov	r0, r3
 801a406:	f7fe fd21 	bl	8018e4c <LL_ADC_GetOffsetChannel>
 801a40a:	4603      	mov	r3, r0
 801a40c:	0e9b      	lsrs	r3, r3, #26
 801a40e:	f003 021f 	and.w	r2, r3, #31
 801a412:	e01e      	b.n	801a452 <HAL_ADC_ConfigChannel+0x326>
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	2102      	movs	r1, #2
 801a41a:	4618      	mov	r0, r3
 801a41c:	f7fe fd16 	bl	8018e4c <LL_ADC_GetOffsetChannel>
 801a420:	4603      	mov	r3, r0
 801a422:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a426:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a42a:	fa93 f3a3 	rbit	r3, r3
 801a42e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 801a432:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801a436:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 801a43a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a43e:	2b00      	cmp	r3, #0
 801a440:	d101      	bne.n	801a446 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 801a442:	2320      	movs	r3, #32
 801a444:	e004      	b.n	801a450 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 801a446:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a44a:	fab3 f383 	clz	r3, r3
 801a44e:	b2db      	uxtb	r3, r3
 801a450:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801a452:	683b      	ldr	r3, [r7, #0]
 801a454:	681b      	ldr	r3, [r3, #0]
 801a456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	d105      	bne.n	801a46a <HAL_ADC_ConfigChannel+0x33e>
 801a45e:	683b      	ldr	r3, [r7, #0]
 801a460:	681b      	ldr	r3, [r3, #0]
 801a462:	0e9b      	lsrs	r3, r3, #26
 801a464:	f003 031f 	and.w	r3, r3, #31
 801a468:	e016      	b.n	801a498 <HAL_ADC_ConfigChannel+0x36c>
 801a46a:	683b      	ldr	r3, [r7, #0]
 801a46c:	681b      	ldr	r3, [r3, #0]
 801a46e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a472:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a476:	fa93 f3a3 	rbit	r3, r3
 801a47a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 801a47c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a47e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 801a482:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a486:	2b00      	cmp	r3, #0
 801a488:	d101      	bne.n	801a48e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 801a48a:	2320      	movs	r3, #32
 801a48c:	e004      	b.n	801a498 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 801a48e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a492:	fab3 f383 	clz	r3, r3
 801a496:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 801a498:	429a      	cmp	r2, r3
 801a49a:	d106      	bne.n	801a4aa <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 801a49c:	687b      	ldr	r3, [r7, #4]
 801a49e:	681b      	ldr	r3, [r3, #0]
 801a4a0:	2200      	movs	r2, #0
 801a4a2:	2102      	movs	r1, #2
 801a4a4:	4618      	mov	r0, r3
 801a4a6:	f7fe fce7 	bl	8018e78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	681b      	ldr	r3, [r3, #0]
 801a4ae:	2103      	movs	r1, #3
 801a4b0:	4618      	mov	r0, r3
 801a4b2:	f7fe fccb 	bl	8018e4c <LL_ADC_GetOffsetChannel>
 801a4b6:	4603      	mov	r3, r0
 801a4b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d10a      	bne.n	801a4d6 <HAL_ADC_ConfigChannel+0x3aa>
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	681b      	ldr	r3, [r3, #0]
 801a4c4:	2103      	movs	r1, #3
 801a4c6:	4618      	mov	r0, r3
 801a4c8:	f7fe fcc0 	bl	8018e4c <LL_ADC_GetOffsetChannel>
 801a4cc:	4603      	mov	r3, r0
 801a4ce:	0e9b      	lsrs	r3, r3, #26
 801a4d0:	f003 021f 	and.w	r2, r3, #31
 801a4d4:	e017      	b.n	801a506 <HAL_ADC_ConfigChannel+0x3da>
 801a4d6:	687b      	ldr	r3, [r7, #4]
 801a4d8:	681b      	ldr	r3, [r3, #0]
 801a4da:	2103      	movs	r1, #3
 801a4dc:	4618      	mov	r0, r3
 801a4de:	f7fe fcb5 	bl	8018e4c <LL_ADC_GetOffsetChannel>
 801a4e2:	4603      	mov	r3, r0
 801a4e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a4e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a4e8:	fa93 f3a3 	rbit	r3, r3
 801a4ec:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 801a4ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a4f0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 801a4f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	d101      	bne.n	801a4fc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 801a4f8:	2320      	movs	r3, #32
 801a4fa:	e003      	b.n	801a504 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 801a4fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a4fe:	fab3 f383 	clz	r3, r3
 801a502:	b2db      	uxtb	r3, r3
 801a504:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801a506:	683b      	ldr	r3, [r7, #0]
 801a508:	681b      	ldr	r3, [r3, #0]
 801a50a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a50e:	2b00      	cmp	r3, #0
 801a510:	d105      	bne.n	801a51e <HAL_ADC_ConfigChannel+0x3f2>
 801a512:	683b      	ldr	r3, [r7, #0]
 801a514:	681b      	ldr	r3, [r3, #0]
 801a516:	0e9b      	lsrs	r3, r3, #26
 801a518:	f003 031f 	and.w	r3, r3, #31
 801a51c:	e011      	b.n	801a542 <HAL_ADC_ConfigChannel+0x416>
 801a51e:	683b      	ldr	r3, [r7, #0]
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a524:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a526:	fa93 f3a3 	rbit	r3, r3
 801a52a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 801a52c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a52e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 801a530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a532:	2b00      	cmp	r3, #0
 801a534:	d101      	bne.n	801a53a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 801a536:	2320      	movs	r3, #32
 801a538:	e003      	b.n	801a542 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 801a53a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a53c:	fab3 f383 	clz	r3, r3
 801a540:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801a542:	429a      	cmp	r2, r3
 801a544:	d106      	bne.n	801a554 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	681b      	ldr	r3, [r3, #0]
 801a54a:	2200      	movs	r2, #0
 801a54c:	2103      	movs	r1, #3
 801a54e:	4618      	mov	r0, r3
 801a550:	f7fe fc92 	bl	8018e78 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	681b      	ldr	r3, [r3, #0]
 801a558:	4618      	mov	r0, r3
 801a55a:	f7fe fe29 	bl	80191b0 <LL_ADC_IsEnabled>
 801a55e:	4603      	mov	r3, r0
 801a560:	2b00      	cmp	r3, #0
 801a562:	f040 813d 	bne.w	801a7e0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 801a566:	687b      	ldr	r3, [r7, #4]
 801a568:	6818      	ldr	r0, [r3, #0]
 801a56a:	683b      	ldr	r3, [r7, #0]
 801a56c:	6819      	ldr	r1, [r3, #0]
 801a56e:	683b      	ldr	r3, [r7, #0]
 801a570:	68db      	ldr	r3, [r3, #12]
 801a572:	461a      	mov	r2, r3
 801a574:	f7fe fd62 	bl	801903c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 801a578:	683b      	ldr	r3, [r7, #0]
 801a57a:	68db      	ldr	r3, [r3, #12]
 801a57c:	4aa2      	ldr	r2, [pc, #648]	; (801a808 <HAL_ADC_ConfigChannel+0x6dc>)
 801a57e:	4293      	cmp	r3, r2
 801a580:	f040 812e 	bne.w	801a7e0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801a588:	683b      	ldr	r3, [r7, #0]
 801a58a:	681b      	ldr	r3, [r3, #0]
 801a58c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a590:	2b00      	cmp	r3, #0
 801a592:	d10b      	bne.n	801a5ac <HAL_ADC_ConfigChannel+0x480>
 801a594:	683b      	ldr	r3, [r7, #0]
 801a596:	681b      	ldr	r3, [r3, #0]
 801a598:	0e9b      	lsrs	r3, r3, #26
 801a59a:	3301      	adds	r3, #1
 801a59c:	f003 031f 	and.w	r3, r3, #31
 801a5a0:	2b09      	cmp	r3, #9
 801a5a2:	bf94      	ite	ls
 801a5a4:	2301      	movls	r3, #1
 801a5a6:	2300      	movhi	r3, #0
 801a5a8:	b2db      	uxtb	r3, r3
 801a5aa:	e019      	b.n	801a5e0 <HAL_ADC_ConfigChannel+0x4b4>
 801a5ac:	683b      	ldr	r3, [r7, #0]
 801a5ae:	681b      	ldr	r3, [r3, #0]
 801a5b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a5b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a5b4:	fa93 f3a3 	rbit	r3, r3
 801a5b8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 801a5ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a5bc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 801a5be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a5c0:	2b00      	cmp	r3, #0
 801a5c2:	d101      	bne.n	801a5c8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 801a5c4:	2320      	movs	r3, #32
 801a5c6:	e003      	b.n	801a5d0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 801a5c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a5ca:	fab3 f383 	clz	r3, r3
 801a5ce:	b2db      	uxtb	r3, r3
 801a5d0:	3301      	adds	r3, #1
 801a5d2:	f003 031f 	and.w	r3, r3, #31
 801a5d6:	2b09      	cmp	r3, #9
 801a5d8:	bf94      	ite	ls
 801a5da:	2301      	movls	r3, #1
 801a5dc:	2300      	movhi	r3, #0
 801a5de:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	d079      	beq.n	801a6d8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801a5e4:	683b      	ldr	r3, [r7, #0]
 801a5e6:	681b      	ldr	r3, [r3, #0]
 801a5e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	d107      	bne.n	801a600 <HAL_ADC_ConfigChannel+0x4d4>
 801a5f0:	683b      	ldr	r3, [r7, #0]
 801a5f2:	681b      	ldr	r3, [r3, #0]
 801a5f4:	0e9b      	lsrs	r3, r3, #26
 801a5f6:	3301      	adds	r3, #1
 801a5f8:	069b      	lsls	r3, r3, #26
 801a5fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801a5fe:	e015      	b.n	801a62c <HAL_ADC_ConfigChannel+0x500>
 801a600:	683b      	ldr	r3, [r7, #0]
 801a602:	681b      	ldr	r3, [r3, #0]
 801a604:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a608:	fa93 f3a3 	rbit	r3, r3
 801a60c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 801a60e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a610:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 801a612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a614:	2b00      	cmp	r3, #0
 801a616:	d101      	bne.n	801a61c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 801a618:	2320      	movs	r3, #32
 801a61a:	e003      	b.n	801a624 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 801a61c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a61e:	fab3 f383 	clz	r3, r3
 801a622:	b2db      	uxtb	r3, r3
 801a624:	3301      	adds	r3, #1
 801a626:	069b      	lsls	r3, r3, #26
 801a628:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801a62c:	683b      	ldr	r3, [r7, #0]
 801a62e:	681b      	ldr	r3, [r3, #0]
 801a630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a634:	2b00      	cmp	r3, #0
 801a636:	d109      	bne.n	801a64c <HAL_ADC_ConfigChannel+0x520>
 801a638:	683b      	ldr	r3, [r7, #0]
 801a63a:	681b      	ldr	r3, [r3, #0]
 801a63c:	0e9b      	lsrs	r3, r3, #26
 801a63e:	3301      	adds	r3, #1
 801a640:	f003 031f 	and.w	r3, r3, #31
 801a644:	2101      	movs	r1, #1
 801a646:	fa01 f303 	lsl.w	r3, r1, r3
 801a64a:	e017      	b.n	801a67c <HAL_ADC_ConfigChannel+0x550>
 801a64c:	683b      	ldr	r3, [r7, #0]
 801a64e:	681b      	ldr	r3, [r3, #0]
 801a650:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a654:	fa93 f3a3 	rbit	r3, r3
 801a658:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 801a65a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a65c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 801a65e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a660:	2b00      	cmp	r3, #0
 801a662:	d101      	bne.n	801a668 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 801a664:	2320      	movs	r3, #32
 801a666:	e003      	b.n	801a670 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 801a668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a66a:	fab3 f383 	clz	r3, r3
 801a66e:	b2db      	uxtb	r3, r3
 801a670:	3301      	adds	r3, #1
 801a672:	f003 031f 	and.w	r3, r3, #31
 801a676:	2101      	movs	r1, #1
 801a678:	fa01 f303 	lsl.w	r3, r1, r3
 801a67c:	ea42 0103 	orr.w	r1, r2, r3
 801a680:	683b      	ldr	r3, [r7, #0]
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a688:	2b00      	cmp	r3, #0
 801a68a:	d10a      	bne.n	801a6a2 <HAL_ADC_ConfigChannel+0x576>
 801a68c:	683b      	ldr	r3, [r7, #0]
 801a68e:	681b      	ldr	r3, [r3, #0]
 801a690:	0e9b      	lsrs	r3, r3, #26
 801a692:	3301      	adds	r3, #1
 801a694:	f003 021f 	and.w	r2, r3, #31
 801a698:	4613      	mov	r3, r2
 801a69a:	005b      	lsls	r3, r3, #1
 801a69c:	4413      	add	r3, r2
 801a69e:	051b      	lsls	r3, r3, #20
 801a6a0:	e018      	b.n	801a6d4 <HAL_ADC_ConfigChannel+0x5a8>
 801a6a2:	683b      	ldr	r3, [r7, #0]
 801a6a4:	681b      	ldr	r3, [r3, #0]
 801a6a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a6aa:	fa93 f3a3 	rbit	r3, r3
 801a6ae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 801a6b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a6b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 801a6b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d101      	bne.n	801a6be <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 801a6ba:	2320      	movs	r3, #32
 801a6bc:	e003      	b.n	801a6c6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 801a6be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a6c0:	fab3 f383 	clz	r3, r3
 801a6c4:	b2db      	uxtb	r3, r3
 801a6c6:	3301      	adds	r3, #1
 801a6c8:	f003 021f 	and.w	r2, r3, #31
 801a6cc:	4613      	mov	r3, r2
 801a6ce:	005b      	lsls	r3, r3, #1
 801a6d0:	4413      	add	r3, r2
 801a6d2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801a6d4:	430b      	orrs	r3, r1
 801a6d6:	e07e      	b.n	801a7d6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801a6d8:	683b      	ldr	r3, [r7, #0]
 801a6da:	681b      	ldr	r3, [r3, #0]
 801a6dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a6e0:	2b00      	cmp	r3, #0
 801a6e2:	d107      	bne.n	801a6f4 <HAL_ADC_ConfigChannel+0x5c8>
 801a6e4:	683b      	ldr	r3, [r7, #0]
 801a6e6:	681b      	ldr	r3, [r3, #0]
 801a6e8:	0e9b      	lsrs	r3, r3, #26
 801a6ea:	3301      	adds	r3, #1
 801a6ec:	069b      	lsls	r3, r3, #26
 801a6ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801a6f2:	e015      	b.n	801a720 <HAL_ADC_ConfigChannel+0x5f4>
 801a6f4:	683b      	ldr	r3, [r7, #0]
 801a6f6:	681b      	ldr	r3, [r3, #0]
 801a6f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6fc:	fa93 f3a3 	rbit	r3, r3
 801a700:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 801a702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a704:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 801a706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a708:	2b00      	cmp	r3, #0
 801a70a:	d101      	bne.n	801a710 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 801a70c:	2320      	movs	r3, #32
 801a70e:	e003      	b.n	801a718 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 801a710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a712:	fab3 f383 	clz	r3, r3
 801a716:	b2db      	uxtb	r3, r3
 801a718:	3301      	adds	r3, #1
 801a71a:	069b      	lsls	r3, r3, #26
 801a71c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801a720:	683b      	ldr	r3, [r7, #0]
 801a722:	681b      	ldr	r3, [r3, #0]
 801a724:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a728:	2b00      	cmp	r3, #0
 801a72a:	d109      	bne.n	801a740 <HAL_ADC_ConfigChannel+0x614>
 801a72c:	683b      	ldr	r3, [r7, #0]
 801a72e:	681b      	ldr	r3, [r3, #0]
 801a730:	0e9b      	lsrs	r3, r3, #26
 801a732:	3301      	adds	r3, #1
 801a734:	f003 031f 	and.w	r3, r3, #31
 801a738:	2101      	movs	r1, #1
 801a73a:	fa01 f303 	lsl.w	r3, r1, r3
 801a73e:	e017      	b.n	801a770 <HAL_ADC_ConfigChannel+0x644>
 801a740:	683b      	ldr	r3, [r7, #0]
 801a742:	681b      	ldr	r3, [r3, #0]
 801a744:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a746:	6a3b      	ldr	r3, [r7, #32]
 801a748:	fa93 f3a3 	rbit	r3, r3
 801a74c:	61fb      	str	r3, [r7, #28]
  return result;
 801a74e:	69fb      	ldr	r3, [r7, #28]
 801a750:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801a752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a754:	2b00      	cmp	r3, #0
 801a756:	d101      	bne.n	801a75c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 801a758:	2320      	movs	r3, #32
 801a75a:	e003      	b.n	801a764 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 801a75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a75e:	fab3 f383 	clz	r3, r3
 801a762:	b2db      	uxtb	r3, r3
 801a764:	3301      	adds	r3, #1
 801a766:	f003 031f 	and.w	r3, r3, #31
 801a76a:	2101      	movs	r1, #1
 801a76c:	fa01 f303 	lsl.w	r3, r1, r3
 801a770:	ea42 0103 	orr.w	r1, r2, r3
 801a774:	683b      	ldr	r3, [r7, #0]
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a77c:	2b00      	cmp	r3, #0
 801a77e:	d10d      	bne.n	801a79c <HAL_ADC_ConfigChannel+0x670>
 801a780:	683b      	ldr	r3, [r7, #0]
 801a782:	681b      	ldr	r3, [r3, #0]
 801a784:	0e9b      	lsrs	r3, r3, #26
 801a786:	3301      	adds	r3, #1
 801a788:	f003 021f 	and.w	r2, r3, #31
 801a78c:	4613      	mov	r3, r2
 801a78e:	005b      	lsls	r3, r3, #1
 801a790:	4413      	add	r3, r2
 801a792:	3b1e      	subs	r3, #30
 801a794:	051b      	lsls	r3, r3, #20
 801a796:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801a79a:	e01b      	b.n	801a7d4 <HAL_ADC_ConfigChannel+0x6a8>
 801a79c:	683b      	ldr	r3, [r7, #0]
 801a79e:	681b      	ldr	r3, [r3, #0]
 801a7a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a7a2:	697b      	ldr	r3, [r7, #20]
 801a7a4:	fa93 f3a3 	rbit	r3, r3
 801a7a8:	613b      	str	r3, [r7, #16]
  return result;
 801a7aa:	693b      	ldr	r3, [r7, #16]
 801a7ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801a7ae:	69bb      	ldr	r3, [r7, #24]
 801a7b0:	2b00      	cmp	r3, #0
 801a7b2:	d101      	bne.n	801a7b8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 801a7b4:	2320      	movs	r3, #32
 801a7b6:	e003      	b.n	801a7c0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 801a7b8:	69bb      	ldr	r3, [r7, #24]
 801a7ba:	fab3 f383 	clz	r3, r3
 801a7be:	b2db      	uxtb	r3, r3
 801a7c0:	3301      	adds	r3, #1
 801a7c2:	f003 021f 	and.w	r2, r3, #31
 801a7c6:	4613      	mov	r3, r2
 801a7c8:	005b      	lsls	r3, r3, #1
 801a7ca:	4413      	add	r3, r2
 801a7cc:	3b1e      	subs	r3, #30
 801a7ce:	051b      	lsls	r3, r3, #20
 801a7d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801a7d4:	430b      	orrs	r3, r1
 801a7d6:	683a      	ldr	r2, [r7, #0]
 801a7d8:	6892      	ldr	r2, [r2, #8]
 801a7da:	4619      	mov	r1, r3
 801a7dc:	f7fe fc02 	bl	8018fe4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 801a7e0:	683b      	ldr	r3, [r7, #0]
 801a7e2:	681a      	ldr	r2, [r3, #0]
 801a7e4:	4b09      	ldr	r3, [pc, #36]	; (801a80c <HAL_ADC_ConfigChannel+0x6e0>)
 801a7e6:	4013      	ands	r3, r2
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	f000 80af 	beq.w	801a94c <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a7f6:	d004      	beq.n	801a802 <HAL_ADC_ConfigChannel+0x6d6>
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	681b      	ldr	r3, [r3, #0]
 801a7fc:	4a04      	ldr	r2, [pc, #16]	; (801a810 <HAL_ADC_ConfigChannel+0x6e4>)
 801a7fe:	4293      	cmp	r3, r2
 801a800:	d10a      	bne.n	801a818 <HAL_ADC_ConfigChannel+0x6ec>
 801a802:	4b04      	ldr	r3, [pc, #16]	; (801a814 <HAL_ADC_ConfigChannel+0x6e8>)
 801a804:	e009      	b.n	801a81a <HAL_ADC_ConfigChannel+0x6ee>
 801a806:	bf00      	nop
 801a808:	407f0000 	.word	0x407f0000
 801a80c:	80080000 	.word	0x80080000
 801a810:	50000100 	.word	0x50000100
 801a814:	50000300 	.word	0x50000300
 801a818:	4b51      	ldr	r3, [pc, #324]	; (801a960 <HAL_ADC_ConfigChannel+0x834>)
 801a81a:	4618      	mov	r0, r3
 801a81c:	f7fe fae4 	bl	8018de8 <LL_ADC_GetCommonPathInternalCh>
 801a820:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 801a824:	683b      	ldr	r3, [r7, #0]
 801a826:	681b      	ldr	r3, [r3, #0]
 801a828:	4a4e      	ldr	r2, [pc, #312]	; (801a964 <HAL_ADC_ConfigChannel+0x838>)
 801a82a:	4293      	cmp	r3, r2
 801a82c:	d004      	beq.n	801a838 <HAL_ADC_ConfigChannel+0x70c>
 801a82e:	683b      	ldr	r3, [r7, #0]
 801a830:	681b      	ldr	r3, [r3, #0]
 801a832:	4a4d      	ldr	r2, [pc, #308]	; (801a968 <HAL_ADC_ConfigChannel+0x83c>)
 801a834:	4293      	cmp	r3, r2
 801a836:	d134      	bne.n	801a8a2 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 801a838:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a83c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801a840:	2b00      	cmp	r3, #0
 801a842:	d12e      	bne.n	801a8a2 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	681b      	ldr	r3, [r3, #0]
 801a848:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a84c:	d17e      	bne.n	801a94c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	681b      	ldr	r3, [r3, #0]
 801a852:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a856:	d004      	beq.n	801a862 <HAL_ADC_ConfigChannel+0x736>
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	681b      	ldr	r3, [r3, #0]
 801a85c:	4a43      	ldr	r2, [pc, #268]	; (801a96c <HAL_ADC_ConfigChannel+0x840>)
 801a85e:	4293      	cmp	r3, r2
 801a860:	d101      	bne.n	801a866 <HAL_ADC_ConfigChannel+0x73a>
 801a862:	4a43      	ldr	r2, [pc, #268]	; (801a970 <HAL_ADC_ConfigChannel+0x844>)
 801a864:	e000      	b.n	801a868 <HAL_ADC_ConfigChannel+0x73c>
 801a866:	4a3e      	ldr	r2, [pc, #248]	; (801a960 <HAL_ADC_ConfigChannel+0x834>)
 801a868:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a86c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801a870:	4619      	mov	r1, r3
 801a872:	4610      	mov	r0, r2
 801a874:	f7fe faa5 	bl	8018dc2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 801a878:	4b3e      	ldr	r3, [pc, #248]	; (801a974 <HAL_ADC_ConfigChannel+0x848>)
 801a87a:	681b      	ldr	r3, [r3, #0]
 801a87c:	099b      	lsrs	r3, r3, #6
 801a87e:	4a3e      	ldr	r2, [pc, #248]	; (801a978 <HAL_ADC_ConfigChannel+0x84c>)
 801a880:	fba2 2303 	umull	r2, r3, r2, r3
 801a884:	099b      	lsrs	r3, r3, #6
 801a886:	1c5a      	adds	r2, r3, #1
 801a888:	4613      	mov	r3, r2
 801a88a:	005b      	lsls	r3, r3, #1
 801a88c:	4413      	add	r3, r2
 801a88e:	009b      	lsls	r3, r3, #2
 801a890:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801a892:	e002      	b.n	801a89a <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 801a894:	68fb      	ldr	r3, [r7, #12]
 801a896:	3b01      	subs	r3, #1
 801a898:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801a89a:	68fb      	ldr	r3, [r7, #12]
 801a89c:	2b00      	cmp	r3, #0
 801a89e:	d1f9      	bne.n	801a894 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801a8a0:	e054      	b.n	801a94c <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 801a8a2:	683b      	ldr	r3, [r7, #0]
 801a8a4:	681b      	ldr	r3, [r3, #0]
 801a8a6:	4a35      	ldr	r2, [pc, #212]	; (801a97c <HAL_ADC_ConfigChannel+0x850>)
 801a8a8:	4293      	cmp	r3, r2
 801a8aa:	d120      	bne.n	801a8ee <HAL_ADC_ConfigChannel+0x7c2>
 801a8ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a8b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801a8b4:	2b00      	cmp	r3, #0
 801a8b6:	d11a      	bne.n	801a8ee <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	681b      	ldr	r3, [r3, #0]
 801a8bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a8c0:	d144      	bne.n	801a94c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801a8c2:	687b      	ldr	r3, [r7, #4]
 801a8c4:	681b      	ldr	r3, [r3, #0]
 801a8c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a8ca:	d004      	beq.n	801a8d6 <HAL_ADC_ConfigChannel+0x7aa>
 801a8cc:	687b      	ldr	r3, [r7, #4]
 801a8ce:	681b      	ldr	r3, [r3, #0]
 801a8d0:	4a26      	ldr	r2, [pc, #152]	; (801a96c <HAL_ADC_ConfigChannel+0x840>)
 801a8d2:	4293      	cmp	r3, r2
 801a8d4:	d101      	bne.n	801a8da <HAL_ADC_ConfigChannel+0x7ae>
 801a8d6:	4a26      	ldr	r2, [pc, #152]	; (801a970 <HAL_ADC_ConfigChannel+0x844>)
 801a8d8:	e000      	b.n	801a8dc <HAL_ADC_ConfigChannel+0x7b0>
 801a8da:	4a21      	ldr	r2, [pc, #132]	; (801a960 <HAL_ADC_ConfigChannel+0x834>)
 801a8dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a8e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801a8e4:	4619      	mov	r1, r3
 801a8e6:	4610      	mov	r0, r2
 801a8e8:	f7fe fa6b 	bl	8018dc2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801a8ec:	e02e      	b.n	801a94c <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 801a8ee:	683b      	ldr	r3, [r7, #0]
 801a8f0:	681b      	ldr	r3, [r3, #0]
 801a8f2:	4a23      	ldr	r2, [pc, #140]	; (801a980 <HAL_ADC_ConfigChannel+0x854>)
 801a8f4:	4293      	cmp	r3, r2
 801a8f6:	d129      	bne.n	801a94c <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 801a8f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a8fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a900:	2b00      	cmp	r3, #0
 801a902:	d123      	bne.n	801a94c <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	681b      	ldr	r3, [r3, #0]
 801a908:	4a18      	ldr	r2, [pc, #96]	; (801a96c <HAL_ADC_ConfigChannel+0x840>)
 801a90a:	4293      	cmp	r3, r2
 801a90c:	d01e      	beq.n	801a94c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	681b      	ldr	r3, [r3, #0]
 801a912:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a916:	d004      	beq.n	801a922 <HAL_ADC_ConfigChannel+0x7f6>
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	681b      	ldr	r3, [r3, #0]
 801a91c:	4a13      	ldr	r2, [pc, #76]	; (801a96c <HAL_ADC_ConfigChannel+0x840>)
 801a91e:	4293      	cmp	r3, r2
 801a920:	d101      	bne.n	801a926 <HAL_ADC_ConfigChannel+0x7fa>
 801a922:	4a13      	ldr	r2, [pc, #76]	; (801a970 <HAL_ADC_ConfigChannel+0x844>)
 801a924:	e000      	b.n	801a928 <HAL_ADC_ConfigChannel+0x7fc>
 801a926:	4a0e      	ldr	r2, [pc, #56]	; (801a960 <HAL_ADC_ConfigChannel+0x834>)
 801a928:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a92c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801a930:	4619      	mov	r1, r3
 801a932:	4610      	mov	r0, r2
 801a934:	f7fe fa45 	bl	8018dc2 <LL_ADC_SetCommonPathInternalCh>
 801a938:	e008      	b.n	801a94c <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a93e:	f043 0220 	orr.w	r2, r3, #32
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 801a946:	2301      	movs	r3, #1
 801a948:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	2200      	movs	r2, #0
 801a950:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801a954:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 801a958:	4618      	mov	r0, r3
 801a95a:	37d8      	adds	r7, #216	; 0xd8
 801a95c:	46bd      	mov	sp, r7
 801a95e:	bd80      	pop	{r7, pc}
 801a960:	50000700 	.word	0x50000700
 801a964:	c3210000 	.word	0xc3210000
 801a968:	90c00010 	.word	0x90c00010
 801a96c:	50000100 	.word	0x50000100
 801a970:	50000300 	.word	0x50000300
 801a974:	20000000 	.word	0x20000000
 801a978:	053e2d63 	.word	0x053e2d63
 801a97c:	c7520000 	.word	0xc7520000
 801a980:	cb840000 	.word	0xcb840000

0801a984 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 801a984:	b580      	push	{r7, lr}
 801a986:	b088      	sub	sp, #32
 801a988:	af00      	add	r7, sp, #0
 801a98a:	6078      	str	r0, [r7, #4]
 801a98c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 801a98e:	2300      	movs	r3, #0
 801a990:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 801a992:	683b      	ldr	r3, [r7, #0]
 801a994:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801a996:	687b      	ldr	r3, [r7, #4]
 801a998:	681b      	ldr	r3, [r3, #0]
 801a99a:	4618      	mov	r0, r3
 801a99c:	f7fe fc56 	bl	801924c <LL_ADC_REG_IsConversionOngoing>
 801a9a0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801a9a2:	687b      	ldr	r3, [r7, #4]
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	4618      	mov	r0, r3
 801a9a8:	f7fe fc77 	bl	801929a <LL_ADC_INJ_IsConversionOngoing>
 801a9ac:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 801a9ae:	693b      	ldr	r3, [r7, #16]
 801a9b0:	2b00      	cmp	r3, #0
 801a9b2:	d103      	bne.n	801a9bc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 801a9b4:	68fb      	ldr	r3, [r7, #12]
 801a9b6:	2b00      	cmp	r3, #0
 801a9b8:	f000 8098 	beq.w	801aaec <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 801a9bc:	687b      	ldr	r3, [r7, #4]
 801a9be:	681b      	ldr	r3, [r3, #0]
 801a9c0:	68db      	ldr	r3, [r3, #12]
 801a9c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a9c6:	2b00      	cmp	r3, #0
 801a9c8:	d02a      	beq.n	801aa20 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	7f5b      	ldrb	r3, [r3, #29]
 801a9ce:	2b01      	cmp	r3, #1
 801a9d0:	d126      	bne.n	801aa20 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	7f1b      	ldrb	r3, [r3, #28]
 801a9d6:	2b01      	cmp	r3, #1
 801a9d8:	d122      	bne.n	801aa20 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 801a9da:	2301      	movs	r3, #1
 801a9dc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801a9de:	e014      	b.n	801aa0a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 801a9e0:	69fb      	ldr	r3, [r7, #28]
 801a9e2:	4a45      	ldr	r2, [pc, #276]	; (801aaf8 <ADC_ConversionStop+0x174>)
 801a9e4:	4293      	cmp	r3, r2
 801a9e6:	d90d      	bls.n	801aa04 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a9ec:	f043 0210 	orr.w	r2, r3, #16
 801a9f0:	687b      	ldr	r3, [r7, #4]
 801a9f2:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a9f4:	687b      	ldr	r3, [r7, #4]
 801a9f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a9f8:	f043 0201 	orr.w	r2, r3, #1
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801aa00:	2301      	movs	r3, #1
 801aa02:	e074      	b.n	801aaee <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 801aa04:	69fb      	ldr	r3, [r7, #28]
 801aa06:	3301      	adds	r3, #1
 801aa08:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	681b      	ldr	r3, [r3, #0]
 801aa0e:	681b      	ldr	r3, [r3, #0]
 801aa10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801aa14:	2b40      	cmp	r3, #64	; 0x40
 801aa16:	d1e3      	bne.n	801a9e0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	681b      	ldr	r3, [r3, #0]
 801aa1c:	2240      	movs	r2, #64	; 0x40
 801aa1e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 801aa20:	69bb      	ldr	r3, [r7, #24]
 801aa22:	2b02      	cmp	r3, #2
 801aa24:	d014      	beq.n	801aa50 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	681b      	ldr	r3, [r3, #0]
 801aa2a:	4618      	mov	r0, r3
 801aa2c:	f7fe fc0e 	bl	801924c <LL_ADC_REG_IsConversionOngoing>
 801aa30:	4603      	mov	r3, r0
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d00c      	beq.n	801aa50 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	681b      	ldr	r3, [r3, #0]
 801aa3a:	4618      	mov	r0, r3
 801aa3c:	f7fe fbcb 	bl	80191d6 <LL_ADC_IsDisableOngoing>
 801aa40:	4603      	mov	r3, r0
 801aa42:	2b00      	cmp	r3, #0
 801aa44:	d104      	bne.n	801aa50 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	681b      	ldr	r3, [r3, #0]
 801aa4a:	4618      	mov	r0, r3
 801aa4c:	f7fe fbea 	bl	8019224 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 801aa50:	69bb      	ldr	r3, [r7, #24]
 801aa52:	2b01      	cmp	r3, #1
 801aa54:	d014      	beq.n	801aa80 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	681b      	ldr	r3, [r3, #0]
 801aa5a:	4618      	mov	r0, r3
 801aa5c:	f7fe fc1d 	bl	801929a <LL_ADC_INJ_IsConversionOngoing>
 801aa60:	4603      	mov	r3, r0
 801aa62:	2b00      	cmp	r3, #0
 801aa64:	d00c      	beq.n	801aa80 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 801aa66:	687b      	ldr	r3, [r7, #4]
 801aa68:	681b      	ldr	r3, [r3, #0]
 801aa6a:	4618      	mov	r0, r3
 801aa6c:	f7fe fbb3 	bl	80191d6 <LL_ADC_IsDisableOngoing>
 801aa70:	4603      	mov	r3, r0
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	d104      	bne.n	801aa80 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 801aa76:	687b      	ldr	r3, [r7, #4]
 801aa78:	681b      	ldr	r3, [r3, #0]
 801aa7a:	4618      	mov	r0, r3
 801aa7c:	f7fe fbf9 	bl	8019272 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 801aa80:	69bb      	ldr	r3, [r7, #24]
 801aa82:	2b02      	cmp	r3, #2
 801aa84:	d005      	beq.n	801aa92 <ADC_ConversionStop+0x10e>
 801aa86:	69bb      	ldr	r3, [r7, #24]
 801aa88:	2b03      	cmp	r3, #3
 801aa8a:	d105      	bne.n	801aa98 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 801aa8c:	230c      	movs	r3, #12
 801aa8e:	617b      	str	r3, [r7, #20]
        break;
 801aa90:	e005      	b.n	801aa9e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 801aa92:	2308      	movs	r3, #8
 801aa94:	617b      	str	r3, [r7, #20]
        break;
 801aa96:	e002      	b.n	801aa9e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 801aa98:	2304      	movs	r3, #4
 801aa9a:	617b      	str	r3, [r7, #20]
        break;
 801aa9c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 801aa9e:	f7fe f94f 	bl	8018d40 <HAL_GetTick>
 801aaa2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801aaa4:	e01b      	b.n	801aade <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 801aaa6:	f7fe f94b 	bl	8018d40 <HAL_GetTick>
 801aaaa:	4602      	mov	r2, r0
 801aaac:	68bb      	ldr	r3, [r7, #8]
 801aaae:	1ad3      	subs	r3, r2, r3
 801aab0:	2b05      	cmp	r3, #5
 801aab2:	d914      	bls.n	801aade <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	681b      	ldr	r3, [r3, #0]
 801aab8:	689a      	ldr	r2, [r3, #8]
 801aaba:	697b      	ldr	r3, [r7, #20]
 801aabc:	4013      	ands	r3, r2
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	d00d      	beq.n	801aade <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801aac2:	687b      	ldr	r3, [r7, #4]
 801aac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aac6:	f043 0210 	orr.w	r2, r3, #16
 801aaca:	687b      	ldr	r3, [r7, #4]
 801aacc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801aad2:	f043 0201 	orr.w	r2, r3, #1
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801aada:	2301      	movs	r3, #1
 801aadc:	e007      	b.n	801aaee <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801aade:	687b      	ldr	r3, [r7, #4]
 801aae0:	681b      	ldr	r3, [r3, #0]
 801aae2:	689a      	ldr	r2, [r3, #8]
 801aae4:	697b      	ldr	r3, [r7, #20]
 801aae6:	4013      	ands	r3, r2
 801aae8:	2b00      	cmp	r3, #0
 801aaea:	d1dc      	bne.n	801aaa6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 801aaec:	2300      	movs	r3, #0
}
 801aaee:	4618      	mov	r0, r3
 801aaf0:	3720      	adds	r7, #32
 801aaf2:	46bd      	mov	sp, r7
 801aaf4:	bd80      	pop	{r7, pc}
 801aaf6:	bf00      	nop
 801aaf8:	a33fffff 	.word	0xa33fffff

0801aafc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 801aafc:	b580      	push	{r7, lr}
 801aafe:	b084      	sub	sp, #16
 801ab00:	af00      	add	r7, sp, #0
 801ab02:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801ab04:	687b      	ldr	r3, [r7, #4]
 801ab06:	681b      	ldr	r3, [r3, #0]
 801ab08:	4618      	mov	r0, r3
 801ab0a:	f7fe fb51 	bl	80191b0 <LL_ADC_IsEnabled>
 801ab0e:	4603      	mov	r3, r0
 801ab10:	2b00      	cmp	r3, #0
 801ab12:	d14d      	bne.n	801abb0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	681b      	ldr	r3, [r3, #0]
 801ab18:	689a      	ldr	r2, [r3, #8]
 801ab1a:	4b28      	ldr	r3, [pc, #160]	; (801abbc <ADC_Enable+0xc0>)
 801ab1c:	4013      	ands	r3, r2
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	d00d      	beq.n	801ab3e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801ab22:	687b      	ldr	r3, [r7, #4]
 801ab24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ab26:	f043 0210 	orr.w	r2, r3, #16
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801ab2e:	687b      	ldr	r3, [r7, #4]
 801ab30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ab32:	f043 0201 	orr.w	r2, r3, #1
 801ab36:	687b      	ldr	r3, [r7, #4]
 801ab38:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 801ab3a:	2301      	movs	r3, #1
 801ab3c:	e039      	b.n	801abb2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 801ab3e:	687b      	ldr	r3, [r7, #4]
 801ab40:	681b      	ldr	r3, [r3, #0]
 801ab42:	4618      	mov	r0, r3
 801ab44:	f7fe fb0c 	bl	8019160 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 801ab48:	f7fe f8fa 	bl	8018d40 <HAL_GetTick>
 801ab4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801ab4e:	e028      	b.n	801aba2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801ab50:	687b      	ldr	r3, [r7, #4]
 801ab52:	681b      	ldr	r3, [r3, #0]
 801ab54:	4618      	mov	r0, r3
 801ab56:	f7fe fb2b 	bl	80191b0 <LL_ADC_IsEnabled>
 801ab5a:	4603      	mov	r3, r0
 801ab5c:	2b00      	cmp	r3, #0
 801ab5e:	d104      	bne.n	801ab6a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	681b      	ldr	r3, [r3, #0]
 801ab64:	4618      	mov	r0, r3
 801ab66:	f7fe fafb 	bl	8019160 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801ab6a:	f7fe f8e9 	bl	8018d40 <HAL_GetTick>
 801ab6e:	4602      	mov	r2, r0
 801ab70:	68fb      	ldr	r3, [r7, #12]
 801ab72:	1ad3      	subs	r3, r2, r3
 801ab74:	2b02      	cmp	r3, #2
 801ab76:	d914      	bls.n	801aba2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	681b      	ldr	r3, [r3, #0]
 801ab7c:	681b      	ldr	r3, [r3, #0]
 801ab7e:	f003 0301 	and.w	r3, r3, #1
 801ab82:	2b01      	cmp	r3, #1
 801ab84:	d00d      	beq.n	801aba2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801ab86:	687b      	ldr	r3, [r7, #4]
 801ab88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ab8a:	f043 0210 	orr.w	r2, r3, #16
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ab96:	f043 0201 	orr.w	r2, r3, #1
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801ab9e:	2301      	movs	r3, #1
 801aba0:	e007      	b.n	801abb2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	681b      	ldr	r3, [r3, #0]
 801aba6:	681b      	ldr	r3, [r3, #0]
 801aba8:	f003 0301 	and.w	r3, r3, #1
 801abac:	2b01      	cmp	r3, #1
 801abae:	d1cf      	bne.n	801ab50 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801abb0:	2300      	movs	r3, #0
}
 801abb2:	4618      	mov	r0, r3
 801abb4:	3710      	adds	r7, #16
 801abb6:	46bd      	mov	sp, r7
 801abb8:	bd80      	pop	{r7, pc}
 801abba:	bf00      	nop
 801abbc:	8000003f 	.word	0x8000003f

0801abc0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 801abc0:	b580      	push	{r7, lr}
 801abc2:	b084      	sub	sp, #16
 801abc4:	af00      	add	r7, sp, #0
 801abc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	681b      	ldr	r3, [r3, #0]
 801abcc:	4618      	mov	r0, r3
 801abce:	f7fe fb02 	bl	80191d6 <LL_ADC_IsDisableOngoing>
 801abd2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	681b      	ldr	r3, [r3, #0]
 801abd8:	4618      	mov	r0, r3
 801abda:	f7fe fae9 	bl	80191b0 <LL_ADC_IsEnabled>
 801abde:	4603      	mov	r3, r0
 801abe0:	2b00      	cmp	r3, #0
 801abe2:	d047      	beq.n	801ac74 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 801abe4:	68fb      	ldr	r3, [r7, #12]
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d144      	bne.n	801ac74 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	689b      	ldr	r3, [r3, #8]
 801abf0:	f003 030d 	and.w	r3, r3, #13
 801abf4:	2b01      	cmp	r3, #1
 801abf6:	d10c      	bne.n	801ac12 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	681b      	ldr	r3, [r3, #0]
 801abfc:	4618      	mov	r0, r3
 801abfe:	f7fe fac3 	bl	8019188 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	681b      	ldr	r3, [r3, #0]
 801ac06:	2203      	movs	r2, #3
 801ac08:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 801ac0a:	f7fe f899 	bl	8018d40 <HAL_GetTick>
 801ac0e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801ac10:	e029      	b.n	801ac66 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ac16:	f043 0210 	orr.w	r2, r3, #16
 801ac1a:	687b      	ldr	r3, [r7, #4]
 801ac1c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ac22:	f043 0201 	orr.w	r2, r3, #1
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 801ac2a:	2301      	movs	r3, #1
 801ac2c:	e023      	b.n	801ac76 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 801ac2e:	f7fe f887 	bl	8018d40 <HAL_GetTick>
 801ac32:	4602      	mov	r2, r0
 801ac34:	68bb      	ldr	r3, [r7, #8]
 801ac36:	1ad3      	subs	r3, r2, r3
 801ac38:	2b02      	cmp	r3, #2
 801ac3a:	d914      	bls.n	801ac66 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	689b      	ldr	r3, [r3, #8]
 801ac42:	f003 0301 	and.w	r3, r3, #1
 801ac46:	2b00      	cmp	r3, #0
 801ac48:	d00d      	beq.n	801ac66 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801ac4a:	687b      	ldr	r3, [r7, #4]
 801ac4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ac4e:	f043 0210 	orr.w	r2, r3, #16
 801ac52:	687b      	ldr	r3, [r7, #4]
 801ac54:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ac5a:	f043 0201 	orr.w	r2, r3, #1
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801ac62:	2301      	movs	r3, #1
 801ac64:	e007      	b.n	801ac76 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	681b      	ldr	r3, [r3, #0]
 801ac6a:	689b      	ldr	r3, [r3, #8]
 801ac6c:	f003 0301 	and.w	r3, r3, #1
 801ac70:	2b00      	cmp	r3, #0
 801ac72:	d1dc      	bne.n	801ac2e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801ac74:	2300      	movs	r3, #0
}
 801ac76:	4618      	mov	r0, r3
 801ac78:	3710      	adds	r7, #16
 801ac7a:	46bd      	mov	sp, r7
 801ac7c:	bd80      	pop	{r7, pc}

0801ac7e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 801ac7e:	b580      	push	{r7, lr}
 801ac80:	b084      	sub	sp, #16
 801ac82:	af00      	add	r7, sp, #0
 801ac84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801ac86:	687b      	ldr	r3, [r7, #4]
 801ac88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ac8a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 801ac8c:	68fb      	ldr	r3, [r7, #12]
 801ac8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ac90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801ac94:	2b00      	cmp	r3, #0
 801ac96:	d14b      	bne.n	801ad30 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801ac98:	68fb      	ldr	r3, [r7, #12]
 801ac9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ac9c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801aca0:	68fb      	ldr	r3, [r7, #12]
 801aca2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 801aca4:	68fb      	ldr	r3, [r7, #12]
 801aca6:	681b      	ldr	r3, [r3, #0]
 801aca8:	681b      	ldr	r3, [r3, #0]
 801acaa:	f003 0308 	and.w	r3, r3, #8
 801acae:	2b00      	cmp	r3, #0
 801acb0:	d021      	beq.n	801acf6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 801acb2:	68fb      	ldr	r3, [r7, #12]
 801acb4:	681b      	ldr	r3, [r3, #0]
 801acb6:	4618      	mov	r0, r3
 801acb8:	f7fe f942 	bl	8018f40 <LL_ADC_REG_IsTriggerSourceSWStart>
 801acbc:	4603      	mov	r3, r0
 801acbe:	2b00      	cmp	r3, #0
 801acc0:	d032      	beq.n	801ad28 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 801acc2:	68fb      	ldr	r3, [r7, #12]
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	68db      	ldr	r3, [r3, #12]
 801acc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801accc:	2b00      	cmp	r3, #0
 801acce:	d12b      	bne.n	801ad28 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801acd0:	68fb      	ldr	r3, [r7, #12]
 801acd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801acd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801acd8:	68fb      	ldr	r3, [r7, #12]
 801acda:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801acdc:	68fb      	ldr	r3, [r7, #12]
 801acde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ace0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801ace4:	2b00      	cmp	r3, #0
 801ace6:	d11f      	bne.n	801ad28 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801ace8:	68fb      	ldr	r3, [r7, #12]
 801acea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801acec:	f043 0201 	orr.w	r2, r3, #1
 801acf0:	68fb      	ldr	r3, [r7, #12]
 801acf2:	65da      	str	r2, [r3, #92]	; 0x5c
 801acf4:	e018      	b.n	801ad28 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 801acf6:	68fb      	ldr	r3, [r7, #12]
 801acf8:	681b      	ldr	r3, [r3, #0]
 801acfa:	68db      	ldr	r3, [r3, #12]
 801acfc:	f003 0302 	and.w	r3, r3, #2
 801ad00:	2b00      	cmp	r3, #0
 801ad02:	d111      	bne.n	801ad28 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801ad04:	68fb      	ldr	r3, [r7, #12]
 801ad06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ad08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801ad0c:	68fb      	ldr	r3, [r7, #12]
 801ad0e:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801ad10:	68fb      	ldr	r3, [r7, #12]
 801ad12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ad14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801ad18:	2b00      	cmp	r3, #0
 801ad1a:	d105      	bne.n	801ad28 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801ad1c:	68fb      	ldr	r3, [r7, #12]
 801ad1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ad20:	f043 0201 	orr.w	r2, r3, #1
 801ad24:	68fb      	ldr	r3, [r7, #12]
 801ad26:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801ad28:	68f8      	ldr	r0, [r7, #12]
 801ad2a:	f7ed fab1 	bl	8008290 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801ad2e:	e00e      	b.n	801ad4e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801ad30:	68fb      	ldr	r3, [r7, #12]
 801ad32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ad34:	f003 0310 	and.w	r3, r3, #16
 801ad38:	2b00      	cmp	r3, #0
 801ad3a:	d003      	beq.n	801ad44 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 801ad3c:	68f8      	ldr	r0, [r7, #12]
 801ad3e:	f7ff f9eb 	bl	801a118 <HAL_ADC_ErrorCallback>
}
 801ad42:	e004      	b.n	801ad4e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801ad44:	68fb      	ldr	r3, [r7, #12]
 801ad46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ad48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ad4a:	6878      	ldr	r0, [r7, #4]
 801ad4c:	4798      	blx	r3
}
 801ad4e:	bf00      	nop
 801ad50:	3710      	adds	r7, #16
 801ad52:	46bd      	mov	sp, r7
 801ad54:	bd80      	pop	{r7, pc}

0801ad56 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 801ad56:	b580      	push	{r7, lr}
 801ad58:	b084      	sub	sp, #16
 801ad5a:	af00      	add	r7, sp, #0
 801ad5c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ad62:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801ad64:	68f8      	ldr	r0, [r7, #12]
 801ad66:	f7ff f9c3 	bl	801a0f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801ad6a:	bf00      	nop
 801ad6c:	3710      	adds	r7, #16
 801ad6e:	46bd      	mov	sp, r7
 801ad70:	bd80      	pop	{r7, pc}

0801ad72 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 801ad72:	b580      	push	{r7, lr}
 801ad74:	b084      	sub	sp, #16
 801ad76:	af00      	add	r7, sp, #0
 801ad78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801ad7a:	687b      	ldr	r3, [r7, #4]
 801ad7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ad7e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 801ad80:	68fb      	ldr	r3, [r7, #12]
 801ad82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ad84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801ad88:	68fb      	ldr	r3, [r7, #12]
 801ad8a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 801ad8c:	68fb      	ldr	r3, [r7, #12]
 801ad8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ad90:	f043 0204 	orr.w	r2, r3, #4
 801ad94:	68fb      	ldr	r3, [r7, #12]
 801ad96:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801ad98:	68f8      	ldr	r0, [r7, #12]
 801ad9a:	f7ff f9bd 	bl	801a118 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801ad9e:	bf00      	nop
 801ada0:	3710      	adds	r7, #16
 801ada2:	46bd      	mov	sp, r7
 801ada4:	bd80      	pop	{r7, pc}

0801ada6 <LL_ADC_IsEnabled>:
{
 801ada6:	b480      	push	{r7}
 801ada8:	b083      	sub	sp, #12
 801adaa:	af00      	add	r7, sp, #0
 801adac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801adae:	687b      	ldr	r3, [r7, #4]
 801adb0:	689b      	ldr	r3, [r3, #8]
 801adb2:	f003 0301 	and.w	r3, r3, #1
 801adb6:	2b01      	cmp	r3, #1
 801adb8:	d101      	bne.n	801adbe <LL_ADC_IsEnabled+0x18>
 801adba:	2301      	movs	r3, #1
 801adbc:	e000      	b.n	801adc0 <LL_ADC_IsEnabled+0x1a>
 801adbe:	2300      	movs	r3, #0
}
 801adc0:	4618      	mov	r0, r3
 801adc2:	370c      	adds	r7, #12
 801adc4:	46bd      	mov	sp, r7
 801adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adca:	4770      	bx	lr

0801adcc <LL_ADC_StartCalibration>:
{
 801adcc:	b480      	push	{r7}
 801adce:	b083      	sub	sp, #12
 801add0:	af00      	add	r7, sp, #0
 801add2:	6078      	str	r0, [r7, #4]
 801add4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	689b      	ldr	r3, [r3, #8]
 801adda:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801adde:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801ade2:	683a      	ldr	r2, [r7, #0]
 801ade4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 801ade8:	4313      	orrs	r3, r2
 801adea:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	609a      	str	r2, [r3, #8]
}
 801adf2:	bf00      	nop
 801adf4:	370c      	adds	r7, #12
 801adf6:	46bd      	mov	sp, r7
 801adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adfc:	4770      	bx	lr

0801adfe <LL_ADC_IsCalibrationOnGoing>:
{
 801adfe:	b480      	push	{r7}
 801ae00:	b083      	sub	sp, #12
 801ae02:	af00      	add	r7, sp, #0
 801ae04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 801ae06:	687b      	ldr	r3, [r7, #4]
 801ae08:	689b      	ldr	r3, [r3, #8]
 801ae0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ae0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ae12:	d101      	bne.n	801ae18 <LL_ADC_IsCalibrationOnGoing+0x1a>
 801ae14:	2301      	movs	r3, #1
 801ae16:	e000      	b.n	801ae1a <LL_ADC_IsCalibrationOnGoing+0x1c>
 801ae18:	2300      	movs	r3, #0
}
 801ae1a:	4618      	mov	r0, r3
 801ae1c:	370c      	adds	r7, #12
 801ae1e:	46bd      	mov	sp, r7
 801ae20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae24:	4770      	bx	lr

0801ae26 <LL_ADC_REG_IsConversionOngoing>:
{
 801ae26:	b480      	push	{r7}
 801ae28:	b083      	sub	sp, #12
 801ae2a:	af00      	add	r7, sp, #0
 801ae2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	689b      	ldr	r3, [r3, #8]
 801ae32:	f003 0304 	and.w	r3, r3, #4
 801ae36:	2b04      	cmp	r3, #4
 801ae38:	d101      	bne.n	801ae3e <LL_ADC_REG_IsConversionOngoing+0x18>
 801ae3a:	2301      	movs	r3, #1
 801ae3c:	e000      	b.n	801ae40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 801ae3e:	2300      	movs	r3, #0
}
 801ae40:	4618      	mov	r0, r3
 801ae42:	370c      	adds	r7, #12
 801ae44:	46bd      	mov	sp, r7
 801ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae4a:	4770      	bx	lr

0801ae4c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 801ae4c:	b580      	push	{r7, lr}
 801ae4e:	b084      	sub	sp, #16
 801ae50:	af00      	add	r7, sp, #0
 801ae52:	6078      	str	r0, [r7, #4]
 801ae54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 801ae56:	2300      	movs	r3, #0
 801ae58:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801ae60:	2b01      	cmp	r3, #1
 801ae62:	d101      	bne.n	801ae68 <HAL_ADCEx_Calibration_Start+0x1c>
 801ae64:	2302      	movs	r3, #2
 801ae66:	e04d      	b.n	801af04 <HAL_ADCEx_Calibration_Start+0xb8>
 801ae68:	687b      	ldr	r3, [r7, #4]
 801ae6a:	2201      	movs	r2, #1
 801ae6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 801ae70:	6878      	ldr	r0, [r7, #4]
 801ae72:	f7ff fea5 	bl	801abc0 <ADC_Disable>
 801ae76:	4603      	mov	r3, r0
 801ae78:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 801ae7a:	7bfb      	ldrb	r3, [r7, #15]
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	d136      	bne.n	801aeee <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ae84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801ae88:	f023 0302 	bic.w	r3, r3, #2
 801ae8c:	f043 0202 	orr.w	r2, r3, #2
 801ae90:	687b      	ldr	r3, [r7, #4]
 801ae92:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	6839      	ldr	r1, [r7, #0]
 801ae9a:	4618      	mov	r0, r3
 801ae9c:	f7ff ff96 	bl	801adcc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 801aea0:	e014      	b.n	801aecc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 801aea2:	68bb      	ldr	r3, [r7, #8]
 801aea4:	3301      	adds	r3, #1
 801aea6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 801aea8:	68bb      	ldr	r3, [r7, #8]
 801aeaa:	4a18      	ldr	r2, [pc, #96]	; (801af0c <HAL_ADCEx_Calibration_Start+0xc0>)
 801aeac:	4293      	cmp	r3, r2
 801aeae:	d90d      	bls.n	801aecc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aeb4:	f023 0312 	bic.w	r3, r3, #18
 801aeb8:	f043 0210 	orr.w	r2, r3, #16
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	2200      	movs	r2, #0
 801aec4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 801aec8:	2301      	movs	r3, #1
 801aeca:	e01b      	b.n	801af04 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 801aecc:	687b      	ldr	r3, [r7, #4]
 801aece:	681b      	ldr	r3, [r3, #0]
 801aed0:	4618      	mov	r0, r3
 801aed2:	f7ff ff94 	bl	801adfe <LL_ADC_IsCalibrationOnGoing>
 801aed6:	4603      	mov	r3, r0
 801aed8:	2b00      	cmp	r3, #0
 801aeda:	d1e2      	bne.n	801aea2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aee0:	f023 0303 	bic.w	r3, r3, #3
 801aee4:	f043 0201 	orr.w	r2, r3, #1
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	65da      	str	r2, [r3, #92]	; 0x5c
 801aeec:	e005      	b.n	801aefa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801aeee:	687b      	ldr	r3, [r7, #4]
 801aef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aef2:	f043 0210 	orr.w	r2, r3, #16
 801aef6:	687b      	ldr	r3, [r7, #4]
 801aef8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	2200      	movs	r2, #0
 801aefe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801af02:	7bfb      	ldrb	r3, [r7, #15]
}
 801af04:	4618      	mov	r0, r3
 801af06:	3710      	adds	r7, #16
 801af08:	46bd      	mov	sp, r7
 801af0a:	bd80      	pop	{r7, pc}
 801af0c:	0004de01 	.word	0x0004de01

0801af10 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 801af10:	b480      	push	{r7}
 801af12:	b083      	sub	sp, #12
 801af14:	af00      	add	r7, sp, #0
 801af16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 801af18:	bf00      	nop
 801af1a:	370c      	adds	r7, #12
 801af1c:	46bd      	mov	sp, r7
 801af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af22:	4770      	bx	lr

0801af24 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 801af24:	b480      	push	{r7}
 801af26:	b083      	sub	sp, #12
 801af28:	af00      	add	r7, sp, #0
 801af2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 801af2c:	bf00      	nop
 801af2e:	370c      	adds	r7, #12
 801af30:	46bd      	mov	sp, r7
 801af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af36:	4770      	bx	lr

0801af38 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 801af38:	b480      	push	{r7}
 801af3a:	b083      	sub	sp, #12
 801af3c:	af00      	add	r7, sp, #0
 801af3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 801af40:	bf00      	nop
 801af42:	370c      	adds	r7, #12
 801af44:	46bd      	mov	sp, r7
 801af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af4a:	4770      	bx	lr

0801af4c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 801af4c:	b480      	push	{r7}
 801af4e:	b083      	sub	sp, #12
 801af50:	af00      	add	r7, sp, #0
 801af52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 801af54:	bf00      	nop
 801af56:	370c      	adds	r7, #12
 801af58:	46bd      	mov	sp, r7
 801af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af5e:	4770      	bx	lr

0801af60 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 801af60:	b480      	push	{r7}
 801af62:	b083      	sub	sp, #12
 801af64:	af00      	add	r7, sp, #0
 801af66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 801af68:	bf00      	nop
 801af6a:	370c      	adds	r7, #12
 801af6c:	46bd      	mov	sp, r7
 801af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af72:	4770      	bx	lr

0801af74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 801af74:	b590      	push	{r4, r7, lr}
 801af76:	b0a1      	sub	sp, #132	; 0x84
 801af78:	af00      	add	r7, sp, #0
 801af7a:	6078      	str	r0, [r7, #4]
 801af7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801af7e:	2300      	movs	r3, #0
 801af80:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801af8a:	2b01      	cmp	r3, #1
 801af8c:	d101      	bne.n	801af92 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 801af8e:	2302      	movs	r3, #2
 801af90:	e0cb      	b.n	801b12a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 801af92:	687b      	ldr	r3, [r7, #4]
 801af94:	2201      	movs	r2, #1
 801af96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 801af9a:	2300      	movs	r3, #0
 801af9c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 801af9e:	2300      	movs	r3, #0
 801afa0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801afaa:	d102      	bne.n	801afb2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 801afac:	4b61      	ldr	r3, [pc, #388]	; (801b134 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801afae:	60bb      	str	r3, [r7, #8]
 801afb0:	e001      	b.n	801afb6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 801afb2:	2300      	movs	r3, #0
 801afb4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 801afb6:	68bb      	ldr	r3, [r7, #8]
 801afb8:	2b00      	cmp	r3, #0
 801afba:	d10b      	bne.n	801afd4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801afc0:	f043 0220 	orr.w	r2, r3, #32
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	2200      	movs	r2, #0
 801afcc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 801afd0:	2301      	movs	r3, #1
 801afd2:	e0aa      	b.n	801b12a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 801afd4:	68bb      	ldr	r3, [r7, #8]
 801afd6:	4618      	mov	r0, r3
 801afd8:	f7ff ff25 	bl	801ae26 <LL_ADC_REG_IsConversionOngoing>
 801afdc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	681b      	ldr	r3, [r3, #0]
 801afe2:	4618      	mov	r0, r3
 801afe4:	f7ff ff1f 	bl	801ae26 <LL_ADC_REG_IsConversionOngoing>
 801afe8:	4603      	mov	r3, r0
 801afea:	2b00      	cmp	r3, #0
 801afec:	f040 808c 	bne.w	801b108 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 801aff0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801aff2:	2b00      	cmp	r3, #0
 801aff4:	f040 8088 	bne.w	801b108 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 801aff8:	687b      	ldr	r3, [r7, #4]
 801affa:	681b      	ldr	r3, [r3, #0]
 801affc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b000:	d004      	beq.n	801b00c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	681b      	ldr	r3, [r3, #0]
 801b006:	4a4b      	ldr	r2, [pc, #300]	; (801b134 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b008:	4293      	cmp	r3, r2
 801b00a:	d101      	bne.n	801b010 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 801b00c:	4b4a      	ldr	r3, [pc, #296]	; (801b138 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 801b00e:	e000      	b.n	801b012 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 801b010:	4b4a      	ldr	r3, [pc, #296]	; (801b13c <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 801b012:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801b014:	683b      	ldr	r3, [r7, #0]
 801b016:	681b      	ldr	r3, [r3, #0]
 801b018:	2b00      	cmp	r3, #0
 801b01a:	d041      	beq.n	801b0a0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 801b01c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b01e:	689b      	ldr	r3, [r3, #8]
 801b020:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801b024:	683b      	ldr	r3, [r7, #0]
 801b026:	6859      	ldr	r1, [r3, #4]
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801b02e:	035b      	lsls	r3, r3, #13
 801b030:	430b      	orrs	r3, r1
 801b032:	431a      	orrs	r2, r3
 801b034:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b036:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	681b      	ldr	r3, [r3, #0]
 801b03c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b040:	d004      	beq.n	801b04c <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 801b042:	687b      	ldr	r3, [r7, #4]
 801b044:	681b      	ldr	r3, [r3, #0]
 801b046:	4a3b      	ldr	r2, [pc, #236]	; (801b134 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b048:	4293      	cmp	r3, r2
 801b04a:	d10f      	bne.n	801b06c <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 801b04c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801b050:	f7ff fea9 	bl	801ada6 <LL_ADC_IsEnabled>
 801b054:	4604      	mov	r4, r0
 801b056:	4837      	ldr	r0, [pc, #220]	; (801b134 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b058:	f7ff fea5 	bl	801ada6 <LL_ADC_IsEnabled>
 801b05c:	4603      	mov	r3, r0
 801b05e:	4323      	orrs	r3, r4
 801b060:	2b00      	cmp	r3, #0
 801b062:	bf0c      	ite	eq
 801b064:	2301      	moveq	r3, #1
 801b066:	2300      	movne	r3, #0
 801b068:	b2db      	uxtb	r3, r3
 801b06a:	e008      	b.n	801b07e <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 801b06c:	4834      	ldr	r0, [pc, #208]	; (801b140 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 801b06e:	f7ff fe9a 	bl	801ada6 <LL_ADC_IsEnabled>
 801b072:	4603      	mov	r3, r0
 801b074:	2b00      	cmp	r3, #0
 801b076:	bf0c      	ite	eq
 801b078:	2301      	moveq	r3, #1
 801b07a:	2300      	movne	r3, #0
 801b07c:	b2db      	uxtb	r3, r3
 801b07e:	2b00      	cmp	r3, #0
 801b080:	d04c      	beq.n	801b11c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 801b082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b084:	689b      	ldr	r3, [r3, #8]
 801b086:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 801b08a:	f023 030f 	bic.w	r3, r3, #15
 801b08e:	683a      	ldr	r2, [r7, #0]
 801b090:	6811      	ldr	r1, [r2, #0]
 801b092:	683a      	ldr	r2, [r7, #0]
 801b094:	6892      	ldr	r2, [r2, #8]
 801b096:	430a      	orrs	r2, r1
 801b098:	431a      	orrs	r2, r3
 801b09a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b09c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801b09e:	e03d      	b.n	801b11c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 801b0a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b0a2:	689b      	ldr	r3, [r3, #8]
 801b0a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801b0a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b0aa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	681b      	ldr	r3, [r3, #0]
 801b0b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b0b4:	d004      	beq.n	801b0c0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	681b      	ldr	r3, [r3, #0]
 801b0ba:	4a1e      	ldr	r2, [pc, #120]	; (801b134 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b0bc:	4293      	cmp	r3, r2
 801b0be:	d10f      	bne.n	801b0e0 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 801b0c0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801b0c4:	f7ff fe6f 	bl	801ada6 <LL_ADC_IsEnabled>
 801b0c8:	4604      	mov	r4, r0
 801b0ca:	481a      	ldr	r0, [pc, #104]	; (801b134 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b0cc:	f7ff fe6b 	bl	801ada6 <LL_ADC_IsEnabled>
 801b0d0:	4603      	mov	r3, r0
 801b0d2:	4323      	orrs	r3, r4
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	bf0c      	ite	eq
 801b0d8:	2301      	moveq	r3, #1
 801b0da:	2300      	movne	r3, #0
 801b0dc:	b2db      	uxtb	r3, r3
 801b0de:	e008      	b.n	801b0f2 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 801b0e0:	4817      	ldr	r0, [pc, #92]	; (801b140 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 801b0e2:	f7ff fe60 	bl	801ada6 <LL_ADC_IsEnabled>
 801b0e6:	4603      	mov	r3, r0
 801b0e8:	2b00      	cmp	r3, #0
 801b0ea:	bf0c      	ite	eq
 801b0ec:	2301      	moveq	r3, #1
 801b0ee:	2300      	movne	r3, #0
 801b0f0:	b2db      	uxtb	r3, r3
 801b0f2:	2b00      	cmp	r3, #0
 801b0f4:	d012      	beq.n	801b11c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 801b0f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b0f8:	689b      	ldr	r3, [r3, #8]
 801b0fa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 801b0fe:	f023 030f 	bic.w	r3, r3, #15
 801b102:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801b104:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801b106:	e009      	b.n	801b11c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801b108:	687b      	ldr	r3, [r7, #4]
 801b10a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b10c:	f043 0220 	orr.w	r2, r3, #32
 801b110:	687b      	ldr	r3, [r7, #4]
 801b112:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 801b114:	2301      	movs	r3, #1
 801b116:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801b11a:	e000      	b.n	801b11e <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801b11c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801b11e:	687b      	ldr	r3, [r7, #4]
 801b120:	2200      	movs	r2, #0
 801b122:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801b126:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 801b12a:	4618      	mov	r0, r3
 801b12c:	3784      	adds	r7, #132	; 0x84
 801b12e:	46bd      	mov	sp, r7
 801b130:	bd90      	pop	{r4, r7, pc}
 801b132:	bf00      	nop
 801b134:	50000100 	.word	0x50000100
 801b138:	50000300 	.word	0x50000300
 801b13c:	50000700 	.word	0x50000700
 801b140:	50000400 	.word	0x50000400

0801b144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801b144:	b480      	push	{r7}
 801b146:	b085      	sub	sp, #20
 801b148:	af00      	add	r7, sp, #0
 801b14a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	f003 0307 	and.w	r3, r3, #7
 801b152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801b154:	4b0c      	ldr	r3, [pc, #48]	; (801b188 <__NVIC_SetPriorityGrouping+0x44>)
 801b156:	68db      	ldr	r3, [r3, #12]
 801b158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801b15a:	68ba      	ldr	r2, [r7, #8]
 801b15c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801b160:	4013      	ands	r3, r2
 801b162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801b164:	68fb      	ldr	r3, [r7, #12]
 801b166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801b168:	68bb      	ldr	r3, [r7, #8]
 801b16a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801b16c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801b170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801b174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801b176:	4a04      	ldr	r2, [pc, #16]	; (801b188 <__NVIC_SetPriorityGrouping+0x44>)
 801b178:	68bb      	ldr	r3, [r7, #8]
 801b17a:	60d3      	str	r3, [r2, #12]
}
 801b17c:	bf00      	nop
 801b17e:	3714      	adds	r7, #20
 801b180:	46bd      	mov	sp, r7
 801b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b186:	4770      	bx	lr
 801b188:	e000ed00 	.word	0xe000ed00

0801b18c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801b18c:	b480      	push	{r7}
 801b18e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801b190:	4b04      	ldr	r3, [pc, #16]	; (801b1a4 <__NVIC_GetPriorityGrouping+0x18>)
 801b192:	68db      	ldr	r3, [r3, #12]
 801b194:	0a1b      	lsrs	r3, r3, #8
 801b196:	f003 0307 	and.w	r3, r3, #7
}
 801b19a:	4618      	mov	r0, r3
 801b19c:	46bd      	mov	sp, r7
 801b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1a2:	4770      	bx	lr
 801b1a4:	e000ed00 	.word	0xe000ed00

0801b1a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801b1a8:	b480      	push	{r7}
 801b1aa:	b083      	sub	sp, #12
 801b1ac:	af00      	add	r7, sp, #0
 801b1ae:	4603      	mov	r3, r0
 801b1b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801b1b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	db0b      	blt.n	801b1d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b1ba:	79fb      	ldrb	r3, [r7, #7]
 801b1bc:	f003 021f 	and.w	r2, r3, #31
 801b1c0:	4907      	ldr	r1, [pc, #28]	; (801b1e0 <__NVIC_EnableIRQ+0x38>)
 801b1c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b1c6:	095b      	lsrs	r3, r3, #5
 801b1c8:	2001      	movs	r0, #1
 801b1ca:	fa00 f202 	lsl.w	r2, r0, r2
 801b1ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801b1d2:	bf00      	nop
 801b1d4:	370c      	adds	r7, #12
 801b1d6:	46bd      	mov	sp, r7
 801b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1dc:	4770      	bx	lr
 801b1de:	bf00      	nop
 801b1e0:	e000e100 	.word	0xe000e100

0801b1e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801b1e4:	b480      	push	{r7}
 801b1e6:	b083      	sub	sp, #12
 801b1e8:	af00      	add	r7, sp, #0
 801b1ea:	4603      	mov	r3, r0
 801b1ec:	6039      	str	r1, [r7, #0]
 801b1ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801b1f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b1f4:	2b00      	cmp	r3, #0
 801b1f6:	db0a      	blt.n	801b20e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b1f8:	683b      	ldr	r3, [r7, #0]
 801b1fa:	b2da      	uxtb	r2, r3
 801b1fc:	490c      	ldr	r1, [pc, #48]	; (801b230 <__NVIC_SetPriority+0x4c>)
 801b1fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b202:	0112      	lsls	r2, r2, #4
 801b204:	b2d2      	uxtb	r2, r2
 801b206:	440b      	add	r3, r1
 801b208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801b20c:	e00a      	b.n	801b224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b20e:	683b      	ldr	r3, [r7, #0]
 801b210:	b2da      	uxtb	r2, r3
 801b212:	4908      	ldr	r1, [pc, #32]	; (801b234 <__NVIC_SetPriority+0x50>)
 801b214:	79fb      	ldrb	r3, [r7, #7]
 801b216:	f003 030f 	and.w	r3, r3, #15
 801b21a:	3b04      	subs	r3, #4
 801b21c:	0112      	lsls	r2, r2, #4
 801b21e:	b2d2      	uxtb	r2, r2
 801b220:	440b      	add	r3, r1
 801b222:	761a      	strb	r2, [r3, #24]
}
 801b224:	bf00      	nop
 801b226:	370c      	adds	r7, #12
 801b228:	46bd      	mov	sp, r7
 801b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b22e:	4770      	bx	lr
 801b230:	e000e100 	.word	0xe000e100
 801b234:	e000ed00 	.word	0xe000ed00

0801b238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801b238:	b480      	push	{r7}
 801b23a:	b089      	sub	sp, #36	; 0x24
 801b23c:	af00      	add	r7, sp, #0
 801b23e:	60f8      	str	r0, [r7, #12]
 801b240:	60b9      	str	r1, [r7, #8]
 801b242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801b244:	68fb      	ldr	r3, [r7, #12]
 801b246:	f003 0307 	and.w	r3, r3, #7
 801b24a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801b24c:	69fb      	ldr	r3, [r7, #28]
 801b24e:	f1c3 0307 	rsb	r3, r3, #7
 801b252:	2b04      	cmp	r3, #4
 801b254:	bf28      	it	cs
 801b256:	2304      	movcs	r3, #4
 801b258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801b25a:	69fb      	ldr	r3, [r7, #28]
 801b25c:	3304      	adds	r3, #4
 801b25e:	2b06      	cmp	r3, #6
 801b260:	d902      	bls.n	801b268 <NVIC_EncodePriority+0x30>
 801b262:	69fb      	ldr	r3, [r7, #28]
 801b264:	3b03      	subs	r3, #3
 801b266:	e000      	b.n	801b26a <NVIC_EncodePriority+0x32>
 801b268:	2300      	movs	r3, #0
 801b26a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b26c:	f04f 32ff 	mov.w	r2, #4294967295
 801b270:	69bb      	ldr	r3, [r7, #24]
 801b272:	fa02 f303 	lsl.w	r3, r2, r3
 801b276:	43da      	mvns	r2, r3
 801b278:	68bb      	ldr	r3, [r7, #8]
 801b27a:	401a      	ands	r2, r3
 801b27c:	697b      	ldr	r3, [r7, #20]
 801b27e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801b280:	f04f 31ff 	mov.w	r1, #4294967295
 801b284:	697b      	ldr	r3, [r7, #20]
 801b286:	fa01 f303 	lsl.w	r3, r1, r3
 801b28a:	43d9      	mvns	r1, r3
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b290:	4313      	orrs	r3, r2
         );
}
 801b292:	4618      	mov	r0, r3
 801b294:	3724      	adds	r7, #36	; 0x24
 801b296:	46bd      	mov	sp, r7
 801b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b29c:	4770      	bx	lr
	...

0801b2a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801b2a0:	b580      	push	{r7, lr}
 801b2a2:	b082      	sub	sp, #8
 801b2a4:	af00      	add	r7, sp, #0
 801b2a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	3b01      	subs	r3, #1
 801b2ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801b2b0:	d301      	bcc.n	801b2b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801b2b2:	2301      	movs	r3, #1
 801b2b4:	e00f      	b.n	801b2d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801b2b6:	4a0a      	ldr	r2, [pc, #40]	; (801b2e0 <SysTick_Config+0x40>)
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	3b01      	subs	r3, #1
 801b2bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801b2be:	210f      	movs	r1, #15
 801b2c0:	f04f 30ff 	mov.w	r0, #4294967295
 801b2c4:	f7ff ff8e 	bl	801b1e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801b2c8:	4b05      	ldr	r3, [pc, #20]	; (801b2e0 <SysTick_Config+0x40>)
 801b2ca:	2200      	movs	r2, #0
 801b2cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801b2ce:	4b04      	ldr	r3, [pc, #16]	; (801b2e0 <SysTick_Config+0x40>)
 801b2d0:	2207      	movs	r2, #7
 801b2d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801b2d4:	2300      	movs	r3, #0
}
 801b2d6:	4618      	mov	r0, r3
 801b2d8:	3708      	adds	r7, #8
 801b2da:	46bd      	mov	sp, r7
 801b2dc:	bd80      	pop	{r7, pc}
 801b2de:	bf00      	nop
 801b2e0:	e000e010 	.word	0xe000e010

0801b2e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801b2e4:	b580      	push	{r7, lr}
 801b2e6:	b082      	sub	sp, #8
 801b2e8:	af00      	add	r7, sp, #0
 801b2ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801b2ec:	6878      	ldr	r0, [r7, #4]
 801b2ee:	f7ff ff29 	bl	801b144 <__NVIC_SetPriorityGrouping>
}
 801b2f2:	bf00      	nop
 801b2f4:	3708      	adds	r7, #8
 801b2f6:	46bd      	mov	sp, r7
 801b2f8:	bd80      	pop	{r7, pc}

0801b2fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801b2fa:	b580      	push	{r7, lr}
 801b2fc:	b086      	sub	sp, #24
 801b2fe:	af00      	add	r7, sp, #0
 801b300:	4603      	mov	r3, r0
 801b302:	60b9      	str	r1, [r7, #8]
 801b304:	607a      	str	r2, [r7, #4]
 801b306:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801b308:	f7ff ff40 	bl	801b18c <__NVIC_GetPriorityGrouping>
 801b30c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801b30e:	687a      	ldr	r2, [r7, #4]
 801b310:	68b9      	ldr	r1, [r7, #8]
 801b312:	6978      	ldr	r0, [r7, #20]
 801b314:	f7ff ff90 	bl	801b238 <NVIC_EncodePriority>
 801b318:	4602      	mov	r2, r0
 801b31a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b31e:	4611      	mov	r1, r2
 801b320:	4618      	mov	r0, r3
 801b322:	f7ff ff5f 	bl	801b1e4 <__NVIC_SetPriority>
}
 801b326:	bf00      	nop
 801b328:	3718      	adds	r7, #24
 801b32a:	46bd      	mov	sp, r7
 801b32c:	bd80      	pop	{r7, pc}

0801b32e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801b32e:	b580      	push	{r7, lr}
 801b330:	b082      	sub	sp, #8
 801b332:	af00      	add	r7, sp, #0
 801b334:	4603      	mov	r3, r0
 801b336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801b338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b33c:	4618      	mov	r0, r3
 801b33e:	f7ff ff33 	bl	801b1a8 <__NVIC_EnableIRQ>
}
 801b342:	bf00      	nop
 801b344:	3708      	adds	r7, #8
 801b346:	46bd      	mov	sp, r7
 801b348:	bd80      	pop	{r7, pc}

0801b34a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801b34a:	b580      	push	{r7, lr}
 801b34c:	b082      	sub	sp, #8
 801b34e:	af00      	add	r7, sp, #0
 801b350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801b352:	6878      	ldr	r0, [r7, #4]
 801b354:	f7ff ffa4 	bl	801b2a0 <SysTick_Config>
 801b358:	4603      	mov	r3, r0
}
 801b35a:	4618      	mov	r0, r3
 801b35c:	3708      	adds	r7, #8
 801b35e:	46bd      	mov	sp, r7
 801b360:	bd80      	pop	{r7, pc}
	...

0801b364 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801b364:	b580      	push	{r7, lr}
 801b366:	b084      	sub	sp, #16
 801b368:	af00      	add	r7, sp, #0
 801b36a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	2b00      	cmp	r3, #0
 801b370:	d101      	bne.n	801b376 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 801b372:	2301      	movs	r3, #1
 801b374:	e08d      	b.n	801b492 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	681b      	ldr	r3, [r3, #0]
 801b37a:	461a      	mov	r2, r3
 801b37c:	4b47      	ldr	r3, [pc, #284]	; (801b49c <HAL_DMA_Init+0x138>)
 801b37e:	429a      	cmp	r2, r3
 801b380:	d80f      	bhi.n	801b3a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	681b      	ldr	r3, [r3, #0]
 801b386:	461a      	mov	r2, r3
 801b388:	4b45      	ldr	r3, [pc, #276]	; (801b4a0 <HAL_DMA_Init+0x13c>)
 801b38a:	4413      	add	r3, r2
 801b38c:	4a45      	ldr	r2, [pc, #276]	; (801b4a4 <HAL_DMA_Init+0x140>)
 801b38e:	fba2 2303 	umull	r2, r3, r2, r3
 801b392:	091b      	lsrs	r3, r3, #4
 801b394:	009a      	lsls	r2, r3, #2
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	4a42      	ldr	r2, [pc, #264]	; (801b4a8 <HAL_DMA_Init+0x144>)
 801b39e:	641a      	str	r2, [r3, #64]	; 0x40
 801b3a0:	e00e      	b.n	801b3c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	681b      	ldr	r3, [r3, #0]
 801b3a6:	461a      	mov	r2, r3
 801b3a8:	4b40      	ldr	r3, [pc, #256]	; (801b4ac <HAL_DMA_Init+0x148>)
 801b3aa:	4413      	add	r3, r2
 801b3ac:	4a3d      	ldr	r2, [pc, #244]	; (801b4a4 <HAL_DMA_Init+0x140>)
 801b3ae:	fba2 2303 	umull	r2, r3, r2, r3
 801b3b2:	091b      	lsrs	r3, r3, #4
 801b3b4:	009a      	lsls	r2, r3, #2
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 801b3ba:	687b      	ldr	r3, [r7, #4]
 801b3bc:	4a3c      	ldr	r2, [pc, #240]	; (801b4b0 <HAL_DMA_Init+0x14c>)
 801b3be:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	2202      	movs	r2, #2
 801b3c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	681b      	ldr	r3, [r3, #0]
 801b3cc:	681b      	ldr	r3, [r3, #0]
 801b3ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 801b3d0:	68fb      	ldr	r3, [r7, #12]
 801b3d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 801b3d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b3da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 801b3e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	691b      	ldr	r3, [r3, #16]
 801b3ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801b3f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	699b      	ldr	r3, [r3, #24]
 801b3f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801b3fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	6a1b      	ldr	r3, [r3, #32]
 801b402:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 801b404:	68fa      	ldr	r2, [r7, #12]
 801b406:	4313      	orrs	r3, r2
 801b408:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 801b40a:	687b      	ldr	r3, [r7, #4]
 801b40c:	681b      	ldr	r3, [r3, #0]
 801b40e:	68fa      	ldr	r2, [r7, #12]
 801b410:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801b412:	6878      	ldr	r0, [r7, #4]
 801b414:	f000 fa10 	bl	801b838 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	689b      	ldr	r3, [r3, #8]
 801b41c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801b420:	d102      	bne.n	801b428 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	2200      	movs	r2, #0
 801b426:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801b428:	687b      	ldr	r3, [r7, #4]
 801b42a:	685a      	ldr	r2, [r3, #4]
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b430:	b2d2      	uxtb	r2, r2
 801b432:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b438:	687a      	ldr	r2, [r7, #4]
 801b43a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801b43c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	685b      	ldr	r3, [r3, #4]
 801b442:	2b00      	cmp	r3, #0
 801b444:	d010      	beq.n	801b468 <HAL_DMA_Init+0x104>
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	685b      	ldr	r3, [r3, #4]
 801b44a:	2b04      	cmp	r3, #4
 801b44c:	d80c      	bhi.n	801b468 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801b44e:	6878      	ldr	r0, [r7, #4]
 801b450:	f000 fa30 	bl	801b8b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b458:	2200      	movs	r2, #0
 801b45a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b45c:	687b      	ldr	r3, [r7, #4]
 801b45e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b460:	687a      	ldr	r2, [r7, #4]
 801b462:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801b464:	605a      	str	r2, [r3, #4]
 801b466:	e008      	b.n	801b47a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	2200      	movs	r2, #0
 801b46c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	2200      	movs	r2, #0
 801b472:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 801b474:	687b      	ldr	r3, [r7, #4]
 801b476:	2200      	movs	r2, #0
 801b478:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801b47a:	687b      	ldr	r3, [r7, #4]
 801b47c:	2200      	movs	r2, #0
 801b47e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 801b480:	687b      	ldr	r3, [r7, #4]
 801b482:	2201      	movs	r2, #1
 801b484:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 801b488:	687b      	ldr	r3, [r7, #4]
 801b48a:	2200      	movs	r2, #0
 801b48c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801b490:	2300      	movs	r3, #0
}
 801b492:	4618      	mov	r0, r3
 801b494:	3710      	adds	r7, #16
 801b496:	46bd      	mov	sp, r7
 801b498:	bd80      	pop	{r7, pc}
 801b49a:	bf00      	nop
 801b49c:	40020407 	.word	0x40020407
 801b4a0:	bffdfff8 	.word	0xbffdfff8
 801b4a4:	cccccccd 	.word	0xcccccccd
 801b4a8:	40020000 	.word	0x40020000
 801b4ac:	bffdfbf8 	.word	0xbffdfbf8
 801b4b0:	40020400 	.word	0x40020400

0801b4b4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 801b4b4:	b580      	push	{r7, lr}
 801b4b6:	b086      	sub	sp, #24
 801b4b8:	af00      	add	r7, sp, #0
 801b4ba:	60f8      	str	r0, [r7, #12]
 801b4bc:	60b9      	str	r1, [r7, #8]
 801b4be:	607a      	str	r2, [r7, #4]
 801b4c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801b4c2:	2300      	movs	r3, #0
 801b4c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 801b4c6:	68fb      	ldr	r3, [r7, #12]
 801b4c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b4cc:	2b01      	cmp	r3, #1
 801b4ce:	d101      	bne.n	801b4d4 <HAL_DMA_Start_IT+0x20>
 801b4d0:	2302      	movs	r3, #2
 801b4d2:	e066      	b.n	801b5a2 <HAL_DMA_Start_IT+0xee>
 801b4d4:	68fb      	ldr	r3, [r7, #12]
 801b4d6:	2201      	movs	r2, #1
 801b4d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 801b4dc:	68fb      	ldr	r3, [r7, #12]
 801b4de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801b4e2:	b2db      	uxtb	r3, r3
 801b4e4:	2b01      	cmp	r3, #1
 801b4e6:	d155      	bne.n	801b594 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801b4e8:	68fb      	ldr	r3, [r7, #12]
 801b4ea:	2202      	movs	r2, #2
 801b4ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801b4f0:	68fb      	ldr	r3, [r7, #12]
 801b4f2:	2200      	movs	r2, #0
 801b4f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801b4f6:	68fb      	ldr	r3, [r7, #12]
 801b4f8:	681b      	ldr	r3, [r3, #0]
 801b4fa:	681a      	ldr	r2, [r3, #0]
 801b4fc:	68fb      	ldr	r3, [r7, #12]
 801b4fe:	681b      	ldr	r3, [r3, #0]
 801b500:	f022 0201 	bic.w	r2, r2, #1
 801b504:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801b506:	683b      	ldr	r3, [r7, #0]
 801b508:	687a      	ldr	r2, [r7, #4]
 801b50a:	68b9      	ldr	r1, [r7, #8]
 801b50c:	68f8      	ldr	r0, [r7, #12]
 801b50e:	f000 f954 	bl	801b7ba <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 801b512:	68fb      	ldr	r3, [r7, #12]
 801b514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b516:	2b00      	cmp	r3, #0
 801b518:	d008      	beq.n	801b52c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b51a:	68fb      	ldr	r3, [r7, #12]
 801b51c:	681b      	ldr	r3, [r3, #0]
 801b51e:	681a      	ldr	r2, [r3, #0]
 801b520:	68fb      	ldr	r3, [r7, #12]
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	f042 020e 	orr.w	r2, r2, #14
 801b528:	601a      	str	r2, [r3, #0]
 801b52a:	e00f      	b.n	801b54c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801b52c:	68fb      	ldr	r3, [r7, #12]
 801b52e:	681b      	ldr	r3, [r3, #0]
 801b530:	681a      	ldr	r2, [r3, #0]
 801b532:	68fb      	ldr	r3, [r7, #12]
 801b534:	681b      	ldr	r3, [r3, #0]
 801b536:	f022 0204 	bic.w	r2, r2, #4
 801b53a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 801b53c:	68fb      	ldr	r3, [r7, #12]
 801b53e:	681b      	ldr	r3, [r3, #0]
 801b540:	681a      	ldr	r2, [r3, #0]
 801b542:	68fb      	ldr	r3, [r7, #12]
 801b544:	681b      	ldr	r3, [r3, #0]
 801b546:	f042 020a 	orr.w	r2, r2, #10
 801b54a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801b54c:	68fb      	ldr	r3, [r7, #12]
 801b54e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b550:	681b      	ldr	r3, [r3, #0]
 801b552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b556:	2b00      	cmp	r3, #0
 801b558:	d007      	beq.n	801b56a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801b55a:	68fb      	ldr	r3, [r7, #12]
 801b55c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b55e:	681a      	ldr	r2, [r3, #0]
 801b560:	68fb      	ldr	r3, [r7, #12]
 801b562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b564:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b568:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 801b56a:	68fb      	ldr	r3, [r7, #12]
 801b56c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b56e:	2b00      	cmp	r3, #0
 801b570:	d007      	beq.n	801b582 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 801b572:	68fb      	ldr	r3, [r7, #12]
 801b574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b576:	681a      	ldr	r2, [r3, #0]
 801b578:	68fb      	ldr	r3, [r7, #12]
 801b57a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b57c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b580:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801b582:	68fb      	ldr	r3, [r7, #12]
 801b584:	681b      	ldr	r3, [r3, #0]
 801b586:	681a      	ldr	r2, [r3, #0]
 801b588:	68fb      	ldr	r3, [r7, #12]
 801b58a:	681b      	ldr	r3, [r3, #0]
 801b58c:	f042 0201 	orr.w	r2, r2, #1
 801b590:	601a      	str	r2, [r3, #0]
 801b592:	e005      	b.n	801b5a0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b594:	68fb      	ldr	r3, [r7, #12]
 801b596:	2200      	movs	r2, #0
 801b598:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 801b59c:	2302      	movs	r3, #2
 801b59e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801b5a0:	7dfb      	ldrb	r3, [r7, #23]
}
 801b5a2:	4618      	mov	r0, r3
 801b5a4:	3718      	adds	r7, #24
 801b5a6:	46bd      	mov	sp, r7
 801b5a8:	bd80      	pop	{r7, pc}

0801b5aa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801b5aa:	b480      	push	{r7}
 801b5ac:	b085      	sub	sp, #20
 801b5ae:	af00      	add	r7, sp, #0
 801b5b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b5b2:	2300      	movs	r3, #0
 801b5b4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801b5b6:	687b      	ldr	r3, [r7, #4]
 801b5b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801b5bc:	b2db      	uxtb	r3, r3
 801b5be:	2b02      	cmp	r3, #2
 801b5c0:	d005      	beq.n	801b5ce <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	2204      	movs	r2, #4
 801b5c6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 801b5c8:	2301      	movs	r3, #1
 801b5ca:	73fb      	strb	r3, [r7, #15]
 801b5cc:	e037      	b.n	801b63e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	681b      	ldr	r3, [r3, #0]
 801b5d2:	681a      	ldr	r2, [r3, #0]
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	681b      	ldr	r3, [r3, #0]
 801b5d8:	f022 020e 	bic.w	r2, r2, #14
 801b5dc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801b5de:	687b      	ldr	r3, [r7, #4]
 801b5e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b5e2:	681a      	ldr	r2, [r3, #0]
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b5e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801b5ec:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	681b      	ldr	r3, [r3, #0]
 801b5f2:	681a      	ldr	r2, [r3, #0]
 801b5f4:	687b      	ldr	r3, [r7, #4]
 801b5f6:	681b      	ldr	r3, [r3, #0]
 801b5f8:	f022 0201 	bic.w	r2, r2, #1
 801b5fc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801b5fe:	687b      	ldr	r3, [r7, #4]
 801b600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b602:	f003 021f 	and.w	r2, r3, #31
 801b606:	687b      	ldr	r3, [r7, #4]
 801b608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b60a:	2101      	movs	r1, #1
 801b60c:	fa01 f202 	lsl.w	r2, r1, r2
 801b610:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b612:	687b      	ldr	r3, [r7, #4]
 801b614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b616:	687a      	ldr	r2, [r7, #4]
 801b618:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801b61a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b620:	2b00      	cmp	r3, #0
 801b622:	d00c      	beq.n	801b63e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b628:	681a      	ldr	r2, [r3, #0]
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b62e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801b632:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b634:	687b      	ldr	r3, [r7, #4]
 801b636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b638:	687a      	ldr	r2, [r7, #4]
 801b63a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801b63c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801b63e:	687b      	ldr	r3, [r7, #4]
 801b640:	2201      	movs	r2, #1
 801b642:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	2200      	movs	r2, #0
 801b64a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 801b64e:	7bfb      	ldrb	r3, [r7, #15]
}
 801b650:	4618      	mov	r0, r3
 801b652:	3714      	adds	r7, #20
 801b654:	46bd      	mov	sp, r7
 801b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b65a:	4770      	bx	lr

0801b65c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801b65c:	b580      	push	{r7, lr}
 801b65e:	b084      	sub	sp, #16
 801b660:	af00      	add	r7, sp, #0
 801b662:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b668:	681b      	ldr	r3, [r3, #0]
 801b66a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	681b      	ldr	r3, [r3, #0]
 801b670:	681b      	ldr	r3, [r3, #0]
 801b672:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 801b674:	687b      	ldr	r3, [r7, #4]
 801b676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b678:	f003 031f 	and.w	r3, r3, #31
 801b67c:	2204      	movs	r2, #4
 801b67e:	409a      	lsls	r2, r3
 801b680:	68fb      	ldr	r3, [r7, #12]
 801b682:	4013      	ands	r3, r2
 801b684:	2b00      	cmp	r3, #0
 801b686:	d026      	beq.n	801b6d6 <HAL_DMA_IRQHandler+0x7a>
 801b688:	68bb      	ldr	r3, [r7, #8]
 801b68a:	f003 0304 	and.w	r3, r3, #4
 801b68e:	2b00      	cmp	r3, #0
 801b690:	d021      	beq.n	801b6d6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801b692:	687b      	ldr	r3, [r7, #4]
 801b694:	681b      	ldr	r3, [r3, #0]
 801b696:	681b      	ldr	r3, [r3, #0]
 801b698:	f003 0320 	and.w	r3, r3, #32
 801b69c:	2b00      	cmp	r3, #0
 801b69e:	d107      	bne.n	801b6b0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801b6a0:	687b      	ldr	r3, [r7, #4]
 801b6a2:	681b      	ldr	r3, [r3, #0]
 801b6a4:	681a      	ldr	r2, [r3, #0]
 801b6a6:	687b      	ldr	r3, [r7, #4]
 801b6a8:	681b      	ldr	r3, [r3, #0]
 801b6aa:	f022 0204 	bic.w	r2, r2, #4
 801b6ae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 801b6b0:	687b      	ldr	r3, [r7, #4]
 801b6b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b6b4:	f003 021f 	and.w	r2, r3, #31
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b6bc:	2104      	movs	r1, #4
 801b6be:	fa01 f202 	lsl.w	r2, r1, r2
 801b6c2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b6c8:	2b00      	cmp	r3, #0
 801b6ca:	d071      	beq.n	801b7b0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b6d0:	6878      	ldr	r0, [r7, #4]
 801b6d2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 801b6d4:	e06c      	b.n	801b7b0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 801b6d6:	687b      	ldr	r3, [r7, #4]
 801b6d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b6da:	f003 031f 	and.w	r3, r3, #31
 801b6de:	2202      	movs	r2, #2
 801b6e0:	409a      	lsls	r2, r3
 801b6e2:	68fb      	ldr	r3, [r7, #12]
 801b6e4:	4013      	ands	r3, r2
 801b6e6:	2b00      	cmp	r3, #0
 801b6e8:	d02e      	beq.n	801b748 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 801b6ea:	68bb      	ldr	r3, [r7, #8]
 801b6ec:	f003 0302 	and.w	r3, r3, #2
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	d029      	beq.n	801b748 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801b6f4:	687b      	ldr	r3, [r7, #4]
 801b6f6:	681b      	ldr	r3, [r3, #0]
 801b6f8:	681b      	ldr	r3, [r3, #0]
 801b6fa:	f003 0320 	and.w	r3, r3, #32
 801b6fe:	2b00      	cmp	r3, #0
 801b700:	d10b      	bne.n	801b71a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	681b      	ldr	r3, [r3, #0]
 801b706:	681a      	ldr	r2, [r3, #0]
 801b708:	687b      	ldr	r3, [r7, #4]
 801b70a:	681b      	ldr	r3, [r3, #0]
 801b70c:	f022 020a 	bic.w	r2, r2, #10
 801b710:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801b712:	687b      	ldr	r3, [r7, #4]
 801b714:	2201      	movs	r2, #1
 801b716:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 801b71a:	687b      	ldr	r3, [r7, #4]
 801b71c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b71e:	f003 021f 	and.w	r2, r3, #31
 801b722:	687b      	ldr	r3, [r7, #4]
 801b724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b726:	2102      	movs	r1, #2
 801b728:	fa01 f202 	lsl.w	r2, r1, r2
 801b72c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b72e:	687b      	ldr	r3, [r7, #4]
 801b730:	2200      	movs	r2, #0
 801b732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 801b736:	687b      	ldr	r3, [r7, #4]
 801b738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b73a:	2b00      	cmp	r3, #0
 801b73c:	d038      	beq.n	801b7b0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 801b73e:	687b      	ldr	r3, [r7, #4]
 801b740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b742:	6878      	ldr	r0, [r7, #4]
 801b744:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 801b746:	e033      	b.n	801b7b0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 801b748:	687b      	ldr	r3, [r7, #4]
 801b74a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b74c:	f003 031f 	and.w	r3, r3, #31
 801b750:	2208      	movs	r2, #8
 801b752:	409a      	lsls	r2, r3
 801b754:	68fb      	ldr	r3, [r7, #12]
 801b756:	4013      	ands	r3, r2
 801b758:	2b00      	cmp	r3, #0
 801b75a:	d02a      	beq.n	801b7b2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 801b75c:	68bb      	ldr	r3, [r7, #8]
 801b75e:	f003 0308 	and.w	r3, r3, #8
 801b762:	2b00      	cmp	r3, #0
 801b764:	d025      	beq.n	801b7b2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b766:	687b      	ldr	r3, [r7, #4]
 801b768:	681b      	ldr	r3, [r3, #0]
 801b76a:	681a      	ldr	r2, [r3, #0]
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	681b      	ldr	r3, [r3, #0]
 801b770:	f022 020e 	bic.w	r2, r2, #14
 801b774:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b77a:	f003 021f 	and.w	r2, r3, #31
 801b77e:	687b      	ldr	r3, [r7, #4]
 801b780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b782:	2101      	movs	r1, #1
 801b784:	fa01 f202 	lsl.w	r2, r1, r2
 801b788:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801b78a:	687b      	ldr	r3, [r7, #4]
 801b78c:	2201      	movs	r2, #1
 801b78e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	2201      	movs	r2, #1
 801b794:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	2200      	movs	r2, #0
 801b79c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 801b7a0:	687b      	ldr	r3, [r7, #4]
 801b7a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b7a4:	2b00      	cmp	r3, #0
 801b7a6:	d004      	beq.n	801b7b2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b7ac:	6878      	ldr	r0, [r7, #4]
 801b7ae:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 801b7b0:	bf00      	nop
 801b7b2:	bf00      	nop
}
 801b7b4:	3710      	adds	r7, #16
 801b7b6:	46bd      	mov	sp, r7
 801b7b8:	bd80      	pop	{r7, pc}

0801b7ba <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801b7ba:	b480      	push	{r7}
 801b7bc:	b085      	sub	sp, #20
 801b7be:	af00      	add	r7, sp, #0
 801b7c0:	60f8      	str	r0, [r7, #12]
 801b7c2:	60b9      	str	r1, [r7, #8]
 801b7c4:	607a      	str	r2, [r7, #4]
 801b7c6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b7c8:	68fb      	ldr	r3, [r7, #12]
 801b7ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b7cc:	68fa      	ldr	r2, [r7, #12]
 801b7ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801b7d0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 801b7d2:	68fb      	ldr	r3, [r7, #12]
 801b7d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	d004      	beq.n	801b7e4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b7da:	68fb      	ldr	r3, [r7, #12]
 801b7dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b7de:	68fa      	ldr	r2, [r7, #12]
 801b7e0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801b7e2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801b7e4:	68fb      	ldr	r3, [r7, #12]
 801b7e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b7e8:	f003 021f 	and.w	r2, r3, #31
 801b7ec:	68fb      	ldr	r3, [r7, #12]
 801b7ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b7f0:	2101      	movs	r1, #1
 801b7f2:	fa01 f202 	lsl.w	r2, r1, r2
 801b7f6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801b7f8:	68fb      	ldr	r3, [r7, #12]
 801b7fa:	681b      	ldr	r3, [r3, #0]
 801b7fc:	683a      	ldr	r2, [r7, #0]
 801b7fe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801b800:	68fb      	ldr	r3, [r7, #12]
 801b802:	689b      	ldr	r3, [r3, #8]
 801b804:	2b10      	cmp	r3, #16
 801b806:	d108      	bne.n	801b81a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801b808:	68fb      	ldr	r3, [r7, #12]
 801b80a:	681b      	ldr	r3, [r3, #0]
 801b80c:	687a      	ldr	r2, [r7, #4]
 801b80e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 801b810:	68fb      	ldr	r3, [r7, #12]
 801b812:	681b      	ldr	r3, [r3, #0]
 801b814:	68ba      	ldr	r2, [r7, #8]
 801b816:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 801b818:	e007      	b.n	801b82a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 801b81a:	68fb      	ldr	r3, [r7, #12]
 801b81c:	681b      	ldr	r3, [r3, #0]
 801b81e:	68ba      	ldr	r2, [r7, #8]
 801b820:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 801b822:	68fb      	ldr	r3, [r7, #12]
 801b824:	681b      	ldr	r3, [r3, #0]
 801b826:	687a      	ldr	r2, [r7, #4]
 801b828:	60da      	str	r2, [r3, #12]
}
 801b82a:	bf00      	nop
 801b82c:	3714      	adds	r7, #20
 801b82e:	46bd      	mov	sp, r7
 801b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b834:	4770      	bx	lr
	...

0801b838 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801b838:	b480      	push	{r7}
 801b83a:	b087      	sub	sp, #28
 801b83c:	af00      	add	r7, sp, #0
 801b83e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	681b      	ldr	r3, [r3, #0]
 801b844:	461a      	mov	r2, r3
 801b846:	4b16      	ldr	r3, [pc, #88]	; (801b8a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 801b848:	429a      	cmp	r2, r3
 801b84a:	d802      	bhi.n	801b852 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 801b84c:	4b15      	ldr	r3, [pc, #84]	; (801b8a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 801b84e:	617b      	str	r3, [r7, #20]
 801b850:	e001      	b.n	801b856 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 801b852:	4b15      	ldr	r3, [pc, #84]	; (801b8a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 801b854:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 801b856:	697b      	ldr	r3, [r7, #20]
 801b858:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 801b85a:	687b      	ldr	r3, [r7, #4]
 801b85c:	681b      	ldr	r3, [r3, #0]
 801b85e:	b2db      	uxtb	r3, r3
 801b860:	3b08      	subs	r3, #8
 801b862:	4a12      	ldr	r2, [pc, #72]	; (801b8ac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 801b864:	fba2 2303 	umull	r2, r3, r2, r3
 801b868:	091b      	lsrs	r3, r3, #4
 801b86a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 801b86c:	687b      	ldr	r3, [r7, #4]
 801b86e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b870:	089b      	lsrs	r3, r3, #2
 801b872:	009a      	lsls	r2, r3, #2
 801b874:	693b      	ldr	r3, [r7, #16]
 801b876:	4413      	add	r3, r2
 801b878:	461a      	mov	r2, r3
 801b87a:	687b      	ldr	r3, [r7, #4]
 801b87c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801b87e:	687b      	ldr	r3, [r7, #4]
 801b880:	4a0b      	ldr	r2, [pc, #44]	; (801b8b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 801b882:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 801b884:	68fb      	ldr	r3, [r7, #12]
 801b886:	f003 031f 	and.w	r3, r3, #31
 801b88a:	2201      	movs	r2, #1
 801b88c:	409a      	lsls	r2, r3
 801b88e:	687b      	ldr	r3, [r7, #4]
 801b890:	651a      	str	r2, [r3, #80]	; 0x50
}
 801b892:	bf00      	nop
 801b894:	371c      	adds	r7, #28
 801b896:	46bd      	mov	sp, r7
 801b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b89c:	4770      	bx	lr
 801b89e:	bf00      	nop
 801b8a0:	40020407 	.word	0x40020407
 801b8a4:	40020800 	.word	0x40020800
 801b8a8:	40020820 	.word	0x40020820
 801b8ac:	cccccccd 	.word	0xcccccccd
 801b8b0:	40020880 	.word	0x40020880

0801b8b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801b8b4:	b480      	push	{r7}
 801b8b6:	b085      	sub	sp, #20
 801b8b8:	af00      	add	r7, sp, #0
 801b8ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	685b      	ldr	r3, [r3, #4]
 801b8c0:	b2db      	uxtb	r3, r3
 801b8c2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801b8c4:	68fa      	ldr	r2, [r7, #12]
 801b8c6:	4b0b      	ldr	r3, [pc, #44]	; (801b8f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 801b8c8:	4413      	add	r3, r2
 801b8ca:	009b      	lsls	r3, r3, #2
 801b8cc:	461a      	mov	r2, r3
 801b8ce:	687b      	ldr	r3, [r7, #4]
 801b8d0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801b8d2:	687b      	ldr	r3, [r7, #4]
 801b8d4:	4a08      	ldr	r2, [pc, #32]	; (801b8f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 801b8d6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 801b8d8:	68fb      	ldr	r3, [r7, #12]
 801b8da:	3b01      	subs	r3, #1
 801b8dc:	f003 031f 	and.w	r3, r3, #31
 801b8e0:	2201      	movs	r2, #1
 801b8e2:	409a      	lsls	r2, r3
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 801b8e8:	bf00      	nop
 801b8ea:	3714      	adds	r7, #20
 801b8ec:	46bd      	mov	sp, r7
 801b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8f2:	4770      	bx	lr
 801b8f4:	1000823f 	.word	0x1000823f
 801b8f8:	40020940 	.word	0x40020940

0801b8fc <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 801b8fc:	b580      	push	{r7, lr}
 801b8fe:	b086      	sub	sp, #24
 801b900:	af00      	add	r7, sp, #0
 801b902:	60f8      	str	r0, [r7, #12]
 801b904:	60b9      	str	r1, [r7, #8]
 801b906:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 801b90a:	2300      	movs	r3, #0
 801b90c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801b90e:	4b24      	ldr	r3, [pc, #144]	; (801b9a0 <HAL_FLASH_Program+0xa4>)
 801b910:	781b      	ldrb	r3, [r3, #0]
 801b912:	2b01      	cmp	r3, #1
 801b914:	d101      	bne.n	801b91a <HAL_FLASH_Program+0x1e>
 801b916:	2302      	movs	r3, #2
 801b918:	e03e      	b.n	801b998 <HAL_FLASH_Program+0x9c>
 801b91a:	4b21      	ldr	r3, [pc, #132]	; (801b9a0 <HAL_FLASH_Program+0xa4>)
 801b91c:	2201      	movs	r2, #1
 801b91e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b920:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b924:	f000 f87c 	bl	801ba20 <FLASH_WaitForLastOperation>
 801b928:	4603      	mov	r3, r0
 801b92a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 801b92c:	7dfb      	ldrb	r3, [r7, #23]
 801b92e:	2b00      	cmp	r3, #0
 801b930:	d12e      	bne.n	801b990 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801b932:	4b1b      	ldr	r3, [pc, #108]	; (801b9a0 <HAL_FLASH_Program+0xa4>)
 801b934:	2200      	movs	r2, #0
 801b936:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 801b938:	68fb      	ldr	r3, [r7, #12]
 801b93a:	2b00      	cmp	r3, #0
 801b93c:	d107      	bne.n	801b94e <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 801b93e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b942:	68b8      	ldr	r0, [r7, #8]
 801b944:	f000 f8c0 	bl	801bac8 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 801b948:	2301      	movs	r3, #1
 801b94a:	613b      	str	r3, [r7, #16]
 801b94c:	e010      	b.n	801b970 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 801b94e:	68fb      	ldr	r3, [r7, #12]
 801b950:	2b01      	cmp	r3, #1
 801b952:	d002      	beq.n	801b95a <HAL_FLASH_Program+0x5e>
 801b954:	68fb      	ldr	r3, [r7, #12]
 801b956:	2b02      	cmp	r3, #2
 801b958:	d10a      	bne.n	801b970 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 801b95a:	683b      	ldr	r3, [r7, #0]
 801b95c:	4619      	mov	r1, r3
 801b95e:	68b8      	ldr	r0, [r7, #8]
 801b960:	f000 f8d8 	bl	801bb14 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 801b964:	68fb      	ldr	r3, [r7, #12]
 801b966:	2b02      	cmp	r3, #2
 801b968:	d102      	bne.n	801b970 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 801b96a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801b96e:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b970:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b974:	f000 f854 	bl	801ba20 <FLASH_WaitForLastOperation>
 801b978:	4603      	mov	r3, r0
 801b97a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 801b97c:	693b      	ldr	r3, [r7, #16]
 801b97e:	2b00      	cmp	r3, #0
 801b980:	d006      	beq.n	801b990 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 801b982:	4b08      	ldr	r3, [pc, #32]	; (801b9a4 <HAL_FLASH_Program+0xa8>)
 801b984:	695a      	ldr	r2, [r3, #20]
 801b986:	693b      	ldr	r3, [r7, #16]
 801b988:	43db      	mvns	r3, r3
 801b98a:	4906      	ldr	r1, [pc, #24]	; (801b9a4 <HAL_FLASH_Program+0xa8>)
 801b98c:	4013      	ands	r3, r2
 801b98e:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801b990:	4b03      	ldr	r3, [pc, #12]	; (801b9a0 <HAL_FLASH_Program+0xa4>)
 801b992:	2200      	movs	r2, #0
 801b994:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 801b996:	7dfb      	ldrb	r3, [r7, #23]
}
 801b998:	4618      	mov	r0, r3
 801b99a:	3718      	adds	r7, #24
 801b99c:	46bd      	mov	sp, r7
 801b99e:	bd80      	pop	{r7, pc}
 801b9a0:	2000000c 	.word	0x2000000c
 801b9a4:	40022000 	.word	0x40022000

0801b9a8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 801b9a8:	b480      	push	{r7}
 801b9aa:	b083      	sub	sp, #12
 801b9ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801b9ae:	2300      	movs	r3, #0
 801b9b0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801b9b2:	4b0b      	ldr	r3, [pc, #44]	; (801b9e0 <HAL_FLASH_Unlock+0x38>)
 801b9b4:	695b      	ldr	r3, [r3, #20]
 801b9b6:	2b00      	cmp	r3, #0
 801b9b8:	da0b      	bge.n	801b9d2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801b9ba:	4b09      	ldr	r3, [pc, #36]	; (801b9e0 <HAL_FLASH_Unlock+0x38>)
 801b9bc:	4a09      	ldr	r2, [pc, #36]	; (801b9e4 <HAL_FLASH_Unlock+0x3c>)
 801b9be:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801b9c0:	4b07      	ldr	r3, [pc, #28]	; (801b9e0 <HAL_FLASH_Unlock+0x38>)
 801b9c2:	4a09      	ldr	r2, [pc, #36]	; (801b9e8 <HAL_FLASH_Unlock+0x40>)
 801b9c4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801b9c6:	4b06      	ldr	r3, [pc, #24]	; (801b9e0 <HAL_FLASH_Unlock+0x38>)
 801b9c8:	695b      	ldr	r3, [r3, #20]
 801b9ca:	2b00      	cmp	r3, #0
 801b9cc:	da01      	bge.n	801b9d2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801b9ce:	2301      	movs	r3, #1
 801b9d0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801b9d2:	79fb      	ldrb	r3, [r7, #7]
}
 801b9d4:	4618      	mov	r0, r3
 801b9d6:	370c      	adds	r7, #12
 801b9d8:	46bd      	mov	sp, r7
 801b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9de:	4770      	bx	lr
 801b9e0:	40022000 	.word	0x40022000
 801b9e4:	45670123 	.word	0x45670123
 801b9e8:	cdef89ab 	.word	0xcdef89ab

0801b9ec <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801b9ec:	b480      	push	{r7}
 801b9ee:	b083      	sub	sp, #12
 801b9f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 801b9f2:	2301      	movs	r3, #1
 801b9f4:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 801b9f6:	4b09      	ldr	r3, [pc, #36]	; (801ba1c <HAL_FLASH_Lock+0x30>)
 801b9f8:	695b      	ldr	r3, [r3, #20]
 801b9fa:	4a08      	ldr	r2, [pc, #32]	; (801ba1c <HAL_FLASH_Lock+0x30>)
 801b9fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801ba00:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801ba02:	4b06      	ldr	r3, [pc, #24]	; (801ba1c <HAL_FLASH_Lock+0x30>)
 801ba04:	695b      	ldr	r3, [r3, #20]
 801ba06:	2b00      	cmp	r3, #0
 801ba08:	da01      	bge.n	801ba0e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 801ba0a:	2300      	movs	r3, #0
 801ba0c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801ba0e:	79fb      	ldrb	r3, [r7, #7]
}
 801ba10:	4618      	mov	r0, r3
 801ba12:	370c      	adds	r7, #12
 801ba14:	46bd      	mov	sp, r7
 801ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba1a:	4770      	bx	lr
 801ba1c:	40022000 	.word	0x40022000

0801ba20 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 801ba20:	b580      	push	{r7, lr}
 801ba22:	b084      	sub	sp, #16
 801ba24:	af00      	add	r7, sp, #0
 801ba26:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 801ba28:	f7fd f98a 	bl	8018d40 <HAL_GetTick>
 801ba2c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801ba2e:	e009      	b.n	801ba44 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 801ba30:	f7fd f986 	bl	8018d40 <HAL_GetTick>
 801ba34:	4602      	mov	r2, r0
 801ba36:	68fb      	ldr	r3, [r7, #12]
 801ba38:	1ad3      	subs	r3, r2, r3
 801ba3a:	687a      	ldr	r2, [r7, #4]
 801ba3c:	429a      	cmp	r2, r3
 801ba3e:	d201      	bcs.n	801ba44 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 801ba40:	2303      	movs	r3, #3
 801ba42:	e038      	b.n	801bab6 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801ba44:	4b1e      	ldr	r3, [pc, #120]	; (801bac0 <FLASH_WaitForLastOperation+0xa0>)
 801ba46:	691b      	ldr	r3, [r3, #16]
 801ba48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801ba4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ba50:	d0ee      	beq.n	801ba30 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 801ba52:	4b1b      	ldr	r3, [pc, #108]	; (801bac0 <FLASH_WaitForLastOperation+0xa0>)
 801ba54:	691a      	ldr	r2, [r3, #16]
 801ba56:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 801ba5a:	4013      	ands	r3, r2
 801ba5c:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 801ba5e:	68bb      	ldr	r3, [r7, #8]
 801ba60:	2b00      	cmp	r3, #0
 801ba62:	d01e      	beq.n	801baa2 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 801ba64:	4b17      	ldr	r3, [pc, #92]	; (801bac4 <FLASH_WaitForLastOperation+0xa4>)
 801ba66:	685a      	ldr	r2, [r3, #4]
 801ba68:	68bb      	ldr	r3, [r7, #8]
 801ba6a:	4313      	orrs	r3, r2
 801ba6c:	4a15      	ldr	r2, [pc, #84]	; (801bac4 <FLASH_WaitForLastOperation+0xa4>)
 801ba6e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 801ba70:	68bb      	ldr	r3, [r7, #8]
 801ba72:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801ba76:	2b00      	cmp	r3, #0
 801ba78:	d007      	beq.n	801ba8a <FLASH_WaitForLastOperation+0x6a>
 801ba7a:	4b11      	ldr	r3, [pc, #68]	; (801bac0 <FLASH_WaitForLastOperation+0xa0>)
 801ba7c:	699a      	ldr	r2, [r3, #24]
 801ba7e:	68bb      	ldr	r3, [r7, #8]
 801ba80:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801ba84:	490e      	ldr	r1, [pc, #56]	; (801bac0 <FLASH_WaitForLastOperation+0xa0>)
 801ba86:	4313      	orrs	r3, r2
 801ba88:	618b      	str	r3, [r1, #24]
 801ba8a:	68bb      	ldr	r3, [r7, #8]
 801ba8c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801ba90:	2b00      	cmp	r3, #0
 801ba92:	d004      	beq.n	801ba9e <FLASH_WaitForLastOperation+0x7e>
 801ba94:	4a0a      	ldr	r2, [pc, #40]	; (801bac0 <FLASH_WaitForLastOperation+0xa0>)
 801ba96:	68bb      	ldr	r3, [r7, #8]
 801ba98:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801ba9c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 801ba9e:	2301      	movs	r3, #1
 801baa0:	e009      	b.n	801bab6 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801baa2:	4b07      	ldr	r3, [pc, #28]	; (801bac0 <FLASH_WaitForLastOperation+0xa0>)
 801baa4:	691b      	ldr	r3, [r3, #16]
 801baa6:	f003 0301 	and.w	r3, r3, #1
 801baaa:	2b01      	cmp	r3, #1
 801baac:	d102      	bne.n	801bab4 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801baae:	4b04      	ldr	r3, [pc, #16]	; (801bac0 <FLASH_WaitForLastOperation+0xa0>)
 801bab0:	2201      	movs	r2, #1
 801bab2:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 801bab4:	2300      	movs	r3, #0
}
 801bab6:	4618      	mov	r0, r3
 801bab8:	3710      	adds	r7, #16
 801baba:	46bd      	mov	sp, r7
 801babc:	bd80      	pop	{r7, pc}
 801babe:	bf00      	nop
 801bac0:	40022000 	.word	0x40022000
 801bac4:	2000000c 	.word	0x2000000c

0801bac8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 801bac8:	b480      	push	{r7}
 801baca:	b085      	sub	sp, #20
 801bacc:	af00      	add	r7, sp, #0
 801bace:	60f8      	str	r0, [r7, #12]
 801bad0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 801bad4:	4b0e      	ldr	r3, [pc, #56]	; (801bb10 <FLASH_Program_DoubleWord+0x48>)
 801bad6:	695b      	ldr	r3, [r3, #20]
 801bad8:	4a0d      	ldr	r2, [pc, #52]	; (801bb10 <FLASH_Program_DoubleWord+0x48>)
 801bada:	f043 0301 	orr.w	r3, r3, #1
 801bade:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 801bae0:	68fb      	ldr	r3, [r7, #12]
 801bae2:	683a      	ldr	r2, [r7, #0]
 801bae4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 801bae6:	f3bf 8f6f 	isb	sy
}
 801baea:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 801baec:	e9d7 0100 	ldrd	r0, r1, [r7]
 801baf0:	f04f 0200 	mov.w	r2, #0
 801baf4:	f04f 0300 	mov.w	r3, #0
 801baf8:	000a      	movs	r2, r1
 801bafa:	2300      	movs	r3, #0
 801bafc:	68f9      	ldr	r1, [r7, #12]
 801bafe:	3104      	adds	r1, #4
 801bb00:	4613      	mov	r3, r2
 801bb02:	600b      	str	r3, [r1, #0]
}
 801bb04:	bf00      	nop
 801bb06:	3714      	adds	r7, #20
 801bb08:	46bd      	mov	sp, r7
 801bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb0e:	4770      	bx	lr
 801bb10:	40022000 	.word	0x40022000

0801bb14 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 801bb14:	b480      	push	{r7}
 801bb16:	b089      	sub	sp, #36	; 0x24
 801bb18:	af00      	add	r7, sp, #0
 801bb1a:	6078      	str	r0, [r7, #4]
 801bb1c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 801bb1e:	2340      	movs	r3, #64	; 0x40
 801bb20:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 801bb22:	687b      	ldr	r3, [r7, #4]
 801bb24:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 801bb26:	683b      	ldr	r3, [r7, #0]
 801bb28:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 801bb2a:	4b14      	ldr	r3, [pc, #80]	; (801bb7c <FLASH_Program_Fast+0x68>)
 801bb2c:	695b      	ldr	r3, [r3, #20]
 801bb2e:	4a13      	ldr	r2, [pc, #76]	; (801bb7c <FLASH_Program_Fast+0x68>)
 801bb30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801bb34:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb36:	f3ef 8310 	mrs	r3, PRIMASK
 801bb3a:	60fb      	str	r3, [r7, #12]
  return(result);
 801bb3c:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 801bb3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb40:	b672      	cpsid	i
}
 801bb42:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 801bb44:	697b      	ldr	r3, [r7, #20]
 801bb46:	681a      	ldr	r2, [r3, #0]
 801bb48:	69bb      	ldr	r3, [r7, #24]
 801bb4a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 801bb4c:	69bb      	ldr	r3, [r7, #24]
 801bb4e:	3304      	adds	r3, #4
 801bb50:	61bb      	str	r3, [r7, #24]
    src_addr++;
 801bb52:	697b      	ldr	r3, [r7, #20]
 801bb54:	3304      	adds	r3, #4
 801bb56:	617b      	str	r3, [r7, #20]
    row_index--;
 801bb58:	7ffb      	ldrb	r3, [r7, #31]
 801bb5a:	3b01      	subs	r3, #1
 801bb5c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 801bb5e:	7ffb      	ldrb	r3, [r7, #31]
 801bb60:	2b00      	cmp	r3, #0
 801bb62:	d1ef      	bne.n	801bb44 <FLASH_Program_Fast+0x30>
 801bb64:	693b      	ldr	r3, [r7, #16]
 801bb66:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb68:	68bb      	ldr	r3, [r7, #8]
 801bb6a:	f383 8810 	msr	PRIMASK, r3
}
 801bb6e:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 801bb70:	bf00      	nop
 801bb72:	3724      	adds	r7, #36	; 0x24
 801bb74:	46bd      	mov	sp, r7
 801bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb7a:	4770      	bx	lr
 801bb7c:	40022000 	.word	0x40022000

0801bb80 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 801bb80:	b580      	push	{r7, lr}
 801bb82:	b084      	sub	sp, #16
 801bb84:	af00      	add	r7, sp, #0
 801bb86:	6078      	str	r0, [r7, #4]
 801bb88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801bb8a:	4b48      	ldr	r3, [pc, #288]	; (801bcac <HAL_FLASHEx_Erase+0x12c>)
 801bb8c:	781b      	ldrb	r3, [r3, #0]
 801bb8e:	2b01      	cmp	r3, #1
 801bb90:	d101      	bne.n	801bb96 <HAL_FLASHEx_Erase+0x16>
 801bb92:	2302      	movs	r3, #2
 801bb94:	e085      	b.n	801bca2 <HAL_FLASHEx_Erase+0x122>
 801bb96:	4b45      	ldr	r3, [pc, #276]	; (801bcac <HAL_FLASHEx_Erase+0x12c>)
 801bb98:	2201      	movs	r2, #1
 801bb9a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801bb9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801bba0:	f7ff ff3e 	bl	801ba20 <FLASH_WaitForLastOperation>
 801bba4:	4603      	mov	r3, r0
 801bba6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 801bba8:	7bfb      	ldrb	r3, [r7, #15]
 801bbaa:	2b00      	cmp	r3, #0
 801bbac:	d175      	bne.n	801bc9a <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801bbae:	4b3f      	ldr	r3, [pc, #252]	; (801bcac <HAL_FLASHEx_Erase+0x12c>)
 801bbb0:	2200      	movs	r2, #0
 801bbb2:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 801bbb4:	4b3e      	ldr	r3, [pc, #248]	; (801bcb0 <HAL_FLASHEx_Erase+0x130>)
 801bbb6:	681b      	ldr	r3, [r3, #0]
 801bbb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801bbbc:	2b00      	cmp	r3, #0
 801bbbe:	d013      	beq.n	801bbe8 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801bbc0:	4b3b      	ldr	r3, [pc, #236]	; (801bcb0 <HAL_FLASHEx_Erase+0x130>)
 801bbc2:	681b      	ldr	r3, [r3, #0]
 801bbc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bbc8:	2b00      	cmp	r3, #0
 801bbca:	d009      	beq.n	801bbe0 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 801bbcc:	4b38      	ldr	r3, [pc, #224]	; (801bcb0 <HAL_FLASHEx_Erase+0x130>)
 801bbce:	681b      	ldr	r3, [r3, #0]
 801bbd0:	4a37      	ldr	r2, [pc, #220]	; (801bcb0 <HAL_FLASHEx_Erase+0x130>)
 801bbd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801bbd6:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 801bbd8:	4b34      	ldr	r3, [pc, #208]	; (801bcac <HAL_FLASHEx_Erase+0x12c>)
 801bbda:	2203      	movs	r2, #3
 801bbdc:	771a      	strb	r2, [r3, #28]
 801bbde:	e016      	b.n	801bc0e <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 801bbe0:	4b32      	ldr	r3, [pc, #200]	; (801bcac <HAL_FLASHEx_Erase+0x12c>)
 801bbe2:	2201      	movs	r2, #1
 801bbe4:	771a      	strb	r2, [r3, #28]
 801bbe6:	e012      	b.n	801bc0e <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801bbe8:	4b31      	ldr	r3, [pc, #196]	; (801bcb0 <HAL_FLASHEx_Erase+0x130>)
 801bbea:	681b      	ldr	r3, [r3, #0]
 801bbec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bbf0:	2b00      	cmp	r3, #0
 801bbf2:	d009      	beq.n	801bc08 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 801bbf4:	4b2e      	ldr	r3, [pc, #184]	; (801bcb0 <HAL_FLASHEx_Erase+0x130>)
 801bbf6:	681b      	ldr	r3, [r3, #0]
 801bbf8:	4a2d      	ldr	r2, [pc, #180]	; (801bcb0 <HAL_FLASHEx_Erase+0x130>)
 801bbfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801bbfe:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 801bc00:	4b2a      	ldr	r3, [pc, #168]	; (801bcac <HAL_FLASHEx_Erase+0x12c>)
 801bc02:	2202      	movs	r2, #2
 801bc04:	771a      	strb	r2, [r3, #28]
 801bc06:	e002      	b.n	801bc0e <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801bc08:	4b28      	ldr	r3, [pc, #160]	; (801bcac <HAL_FLASHEx_Erase+0x12c>)
 801bc0a:	2200      	movs	r2, #0
 801bc0c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	681b      	ldr	r3, [r3, #0]
 801bc12:	2b01      	cmp	r3, #1
 801bc14:	d111      	bne.n	801bc3a <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 801bc16:	687b      	ldr	r3, [r7, #4]
 801bc18:	685b      	ldr	r3, [r3, #4]
 801bc1a:	4618      	mov	r0, r3
 801bc1c:	f000 f84a 	bl	801bcb4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801bc20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801bc24:	f7ff fefc 	bl	801ba20 <FLASH_WaitForLastOperation>
 801bc28:	4603      	mov	r3, r0
 801bc2a:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 801bc2c:	4b20      	ldr	r3, [pc, #128]	; (801bcb0 <HAL_FLASHEx_Erase+0x130>)
 801bc2e:	695b      	ldr	r3, [r3, #20]
 801bc30:	4a1f      	ldr	r2, [pc, #124]	; (801bcb0 <HAL_FLASHEx_Erase+0x130>)
 801bc32:	f023 0304 	bic.w	r3, r3, #4
 801bc36:	6153      	str	r3, [r2, #20]
 801bc38:	e02d      	b.n	801bc96 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 801bc3a:	683b      	ldr	r3, [r7, #0]
 801bc3c:	f04f 32ff 	mov.w	r2, #4294967295
 801bc40:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801bc42:	687b      	ldr	r3, [r7, #4]
 801bc44:	689b      	ldr	r3, [r3, #8]
 801bc46:	60bb      	str	r3, [r7, #8]
 801bc48:	e01d      	b.n	801bc86 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	685b      	ldr	r3, [r3, #4]
 801bc4e:	4619      	mov	r1, r3
 801bc50:	68b8      	ldr	r0, [r7, #8]
 801bc52:	f000 f84d 	bl	801bcf0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801bc56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801bc5a:	f7ff fee1 	bl	801ba20 <FLASH_WaitForLastOperation>
 801bc5e:	4603      	mov	r3, r0
 801bc60:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 801bc62:	4b13      	ldr	r3, [pc, #76]	; (801bcb0 <HAL_FLASHEx_Erase+0x130>)
 801bc64:	695b      	ldr	r3, [r3, #20]
 801bc66:	4a12      	ldr	r2, [pc, #72]	; (801bcb0 <HAL_FLASHEx_Erase+0x130>)
 801bc68:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801bc6c:	f023 0302 	bic.w	r3, r3, #2
 801bc70:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 801bc72:	7bfb      	ldrb	r3, [r7, #15]
 801bc74:	2b00      	cmp	r3, #0
 801bc76:	d003      	beq.n	801bc80 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 801bc78:	683b      	ldr	r3, [r7, #0]
 801bc7a:	68ba      	ldr	r2, [r7, #8]
 801bc7c:	601a      	str	r2, [r3, #0]
          break;
 801bc7e:	e00a      	b.n	801bc96 <HAL_FLASHEx_Erase+0x116>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801bc80:	68bb      	ldr	r3, [r7, #8]
 801bc82:	3301      	adds	r3, #1
 801bc84:	60bb      	str	r3, [r7, #8]
 801bc86:	687b      	ldr	r3, [r7, #4]
 801bc88:	689a      	ldr	r2, [r3, #8]
 801bc8a:	687b      	ldr	r3, [r7, #4]
 801bc8c:	68db      	ldr	r3, [r3, #12]
 801bc8e:	4413      	add	r3, r2
 801bc90:	68ba      	ldr	r2, [r7, #8]
 801bc92:	429a      	cmp	r2, r3
 801bc94:	d3d9      	bcc.n	801bc4a <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 801bc96:	f000 f84f 	bl	801bd38 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801bc9a:	4b04      	ldr	r3, [pc, #16]	; (801bcac <HAL_FLASHEx_Erase+0x12c>)
 801bc9c:	2200      	movs	r2, #0
 801bc9e:	701a      	strb	r2, [r3, #0]

  return status;
 801bca0:	7bfb      	ldrb	r3, [r7, #15]
}
 801bca2:	4618      	mov	r0, r3
 801bca4:	3710      	adds	r7, #16
 801bca6:	46bd      	mov	sp, r7
 801bca8:	bd80      	pop	{r7, pc}
 801bcaa:	bf00      	nop
 801bcac:	2000000c 	.word	0x2000000c
 801bcb0:	40022000 	.word	0x40022000

0801bcb4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 801bcb4:	b480      	push	{r7}
 801bcb6:	b083      	sub	sp, #12
 801bcb8:	af00      	add	r7, sp, #0
 801bcba:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 801bcbc:	687b      	ldr	r3, [r7, #4]
 801bcbe:	f003 0301 	and.w	r3, r3, #1
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	d005      	beq.n	801bcd2 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 801bcc6:	4b09      	ldr	r3, [pc, #36]	; (801bcec <FLASH_MassErase+0x38>)
 801bcc8:	695b      	ldr	r3, [r3, #20]
 801bcca:	4a08      	ldr	r2, [pc, #32]	; (801bcec <FLASH_MassErase+0x38>)
 801bccc:	f043 0304 	orr.w	r3, r3, #4
 801bcd0:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801bcd2:	4b06      	ldr	r3, [pc, #24]	; (801bcec <FLASH_MassErase+0x38>)
 801bcd4:	695b      	ldr	r3, [r3, #20]
 801bcd6:	4a05      	ldr	r2, [pc, #20]	; (801bcec <FLASH_MassErase+0x38>)
 801bcd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bcdc:	6153      	str	r3, [r2, #20]
}
 801bcde:	bf00      	nop
 801bce0:	370c      	adds	r7, #12
 801bce2:	46bd      	mov	sp, r7
 801bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bce8:	4770      	bx	lr
 801bcea:	bf00      	nop
 801bcec:	40022000 	.word	0x40022000

0801bcf0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 801bcf0:	b480      	push	{r7}
 801bcf2:	b083      	sub	sp, #12
 801bcf4:	af00      	add	r7, sp, #0
 801bcf6:	6078      	str	r0, [r7, #4]
 801bcf8:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 801bcfa:	4b0e      	ldr	r3, [pc, #56]	; (801bd34 <FLASH_PageErase+0x44>)
 801bcfc:	695b      	ldr	r3, [r3, #20]
 801bcfe:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	00db      	lsls	r3, r3, #3
 801bd06:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 801bd0a:	490a      	ldr	r1, [pc, #40]	; (801bd34 <FLASH_PageErase+0x44>)
 801bd0c:	4313      	orrs	r3, r2
 801bd0e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 801bd10:	4b08      	ldr	r3, [pc, #32]	; (801bd34 <FLASH_PageErase+0x44>)
 801bd12:	695b      	ldr	r3, [r3, #20]
 801bd14:	4a07      	ldr	r2, [pc, #28]	; (801bd34 <FLASH_PageErase+0x44>)
 801bd16:	f043 0302 	orr.w	r3, r3, #2
 801bd1a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801bd1c:	4b05      	ldr	r3, [pc, #20]	; (801bd34 <FLASH_PageErase+0x44>)
 801bd1e:	695b      	ldr	r3, [r3, #20]
 801bd20:	4a04      	ldr	r2, [pc, #16]	; (801bd34 <FLASH_PageErase+0x44>)
 801bd22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bd26:	6153      	str	r3, [r2, #20]
}
 801bd28:	bf00      	nop
 801bd2a:	370c      	adds	r7, #12
 801bd2c:	46bd      	mov	sp, r7
 801bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd32:	4770      	bx	lr
 801bd34:	40022000 	.word	0x40022000

0801bd38 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 801bd38:	b480      	push	{r7}
 801bd3a:	b083      	sub	sp, #12
 801bd3c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 801bd3e:	4b21      	ldr	r3, [pc, #132]	; (801bdc4 <FLASH_FlushCaches+0x8c>)
 801bd40:	7f1b      	ldrb	r3, [r3, #28]
 801bd42:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 801bd44:	79fb      	ldrb	r3, [r7, #7]
 801bd46:	2b01      	cmp	r3, #1
 801bd48:	d002      	beq.n	801bd50 <FLASH_FlushCaches+0x18>
 801bd4a:	79fb      	ldrb	r3, [r7, #7]
 801bd4c:	2b03      	cmp	r3, #3
 801bd4e:	d117      	bne.n	801bd80 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 801bd50:	4b1d      	ldr	r3, [pc, #116]	; (801bdc8 <FLASH_FlushCaches+0x90>)
 801bd52:	681b      	ldr	r3, [r3, #0]
 801bd54:	4a1c      	ldr	r2, [pc, #112]	; (801bdc8 <FLASH_FlushCaches+0x90>)
 801bd56:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801bd5a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801bd5c:	4b1a      	ldr	r3, [pc, #104]	; (801bdc8 <FLASH_FlushCaches+0x90>)
 801bd5e:	681b      	ldr	r3, [r3, #0]
 801bd60:	4a19      	ldr	r2, [pc, #100]	; (801bdc8 <FLASH_FlushCaches+0x90>)
 801bd62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801bd66:	6013      	str	r3, [r2, #0]
 801bd68:	4b17      	ldr	r3, [pc, #92]	; (801bdc8 <FLASH_FlushCaches+0x90>)
 801bd6a:	681b      	ldr	r3, [r3, #0]
 801bd6c:	4a16      	ldr	r2, [pc, #88]	; (801bdc8 <FLASH_FlushCaches+0x90>)
 801bd6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801bd72:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801bd74:	4b14      	ldr	r3, [pc, #80]	; (801bdc8 <FLASH_FlushCaches+0x90>)
 801bd76:	681b      	ldr	r3, [r3, #0]
 801bd78:	4a13      	ldr	r2, [pc, #76]	; (801bdc8 <FLASH_FlushCaches+0x90>)
 801bd7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801bd7e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 801bd80:	79fb      	ldrb	r3, [r7, #7]
 801bd82:	2b02      	cmp	r3, #2
 801bd84:	d002      	beq.n	801bd8c <FLASH_FlushCaches+0x54>
 801bd86:	79fb      	ldrb	r3, [r7, #7]
 801bd88:	2b03      	cmp	r3, #3
 801bd8a:	d111      	bne.n	801bdb0 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 801bd8c:	4b0e      	ldr	r3, [pc, #56]	; (801bdc8 <FLASH_FlushCaches+0x90>)
 801bd8e:	681b      	ldr	r3, [r3, #0]
 801bd90:	4a0d      	ldr	r2, [pc, #52]	; (801bdc8 <FLASH_FlushCaches+0x90>)
 801bd92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801bd96:	6013      	str	r3, [r2, #0]
 801bd98:	4b0b      	ldr	r3, [pc, #44]	; (801bdc8 <FLASH_FlushCaches+0x90>)
 801bd9a:	681b      	ldr	r3, [r3, #0]
 801bd9c:	4a0a      	ldr	r2, [pc, #40]	; (801bdc8 <FLASH_FlushCaches+0x90>)
 801bd9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bda2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801bda4:	4b08      	ldr	r3, [pc, #32]	; (801bdc8 <FLASH_FlushCaches+0x90>)
 801bda6:	681b      	ldr	r3, [r3, #0]
 801bda8:	4a07      	ldr	r2, [pc, #28]	; (801bdc8 <FLASH_FlushCaches+0x90>)
 801bdaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801bdae:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801bdb0:	4b04      	ldr	r3, [pc, #16]	; (801bdc4 <FLASH_FlushCaches+0x8c>)
 801bdb2:	2200      	movs	r2, #0
 801bdb4:	771a      	strb	r2, [r3, #28]
}
 801bdb6:	bf00      	nop
 801bdb8:	370c      	adds	r7, #12
 801bdba:	46bd      	mov	sp, r7
 801bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdc0:	4770      	bx	lr
 801bdc2:	bf00      	nop
 801bdc4:	2000000c 	.word	0x2000000c
 801bdc8:	40022000 	.word	0x40022000

0801bdcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801bdcc:	b480      	push	{r7}
 801bdce:	b087      	sub	sp, #28
 801bdd0:	af00      	add	r7, sp, #0
 801bdd2:	6078      	str	r0, [r7, #4]
 801bdd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801bdd6:	2300      	movs	r3, #0
 801bdd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 801bdda:	e15a      	b.n	801c092 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801bddc:	683b      	ldr	r3, [r7, #0]
 801bdde:	681a      	ldr	r2, [r3, #0]
 801bde0:	2101      	movs	r1, #1
 801bde2:	697b      	ldr	r3, [r7, #20]
 801bde4:	fa01 f303 	lsl.w	r3, r1, r3
 801bde8:	4013      	ands	r3, r2
 801bdea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 801bdec:	68fb      	ldr	r3, [r7, #12]
 801bdee:	2b00      	cmp	r3, #0
 801bdf0:	f000 814c 	beq.w	801c08c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801bdf4:	683b      	ldr	r3, [r7, #0]
 801bdf6:	685b      	ldr	r3, [r3, #4]
 801bdf8:	f003 0303 	and.w	r3, r3, #3
 801bdfc:	2b01      	cmp	r3, #1
 801bdfe:	d005      	beq.n	801be0c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801be00:	683b      	ldr	r3, [r7, #0]
 801be02:	685b      	ldr	r3, [r3, #4]
 801be04:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801be08:	2b02      	cmp	r3, #2
 801be0a:	d130      	bne.n	801be6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801be0c:	687b      	ldr	r3, [r7, #4]
 801be0e:	689b      	ldr	r3, [r3, #8]
 801be10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801be12:	697b      	ldr	r3, [r7, #20]
 801be14:	005b      	lsls	r3, r3, #1
 801be16:	2203      	movs	r2, #3
 801be18:	fa02 f303 	lsl.w	r3, r2, r3
 801be1c:	43db      	mvns	r3, r3
 801be1e:	693a      	ldr	r2, [r7, #16]
 801be20:	4013      	ands	r3, r2
 801be22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801be24:	683b      	ldr	r3, [r7, #0]
 801be26:	68da      	ldr	r2, [r3, #12]
 801be28:	697b      	ldr	r3, [r7, #20]
 801be2a:	005b      	lsls	r3, r3, #1
 801be2c:	fa02 f303 	lsl.w	r3, r2, r3
 801be30:	693a      	ldr	r2, [r7, #16]
 801be32:	4313      	orrs	r3, r2
 801be34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801be36:	687b      	ldr	r3, [r7, #4]
 801be38:	693a      	ldr	r2, [r7, #16]
 801be3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801be3c:	687b      	ldr	r3, [r7, #4]
 801be3e:	685b      	ldr	r3, [r3, #4]
 801be40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801be42:	2201      	movs	r2, #1
 801be44:	697b      	ldr	r3, [r7, #20]
 801be46:	fa02 f303 	lsl.w	r3, r2, r3
 801be4a:	43db      	mvns	r3, r3
 801be4c:	693a      	ldr	r2, [r7, #16]
 801be4e:	4013      	ands	r3, r2
 801be50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801be52:	683b      	ldr	r3, [r7, #0]
 801be54:	685b      	ldr	r3, [r3, #4]
 801be56:	091b      	lsrs	r3, r3, #4
 801be58:	f003 0201 	and.w	r2, r3, #1
 801be5c:	697b      	ldr	r3, [r7, #20]
 801be5e:	fa02 f303 	lsl.w	r3, r2, r3
 801be62:	693a      	ldr	r2, [r7, #16]
 801be64:	4313      	orrs	r3, r2
 801be66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801be68:	687b      	ldr	r3, [r7, #4]
 801be6a:	693a      	ldr	r2, [r7, #16]
 801be6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801be6e:	683b      	ldr	r3, [r7, #0]
 801be70:	685b      	ldr	r3, [r3, #4]
 801be72:	f003 0303 	and.w	r3, r3, #3
 801be76:	2b03      	cmp	r3, #3
 801be78:	d017      	beq.n	801beaa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	68db      	ldr	r3, [r3, #12]
 801be7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801be80:	697b      	ldr	r3, [r7, #20]
 801be82:	005b      	lsls	r3, r3, #1
 801be84:	2203      	movs	r2, #3
 801be86:	fa02 f303 	lsl.w	r3, r2, r3
 801be8a:	43db      	mvns	r3, r3
 801be8c:	693a      	ldr	r2, [r7, #16]
 801be8e:	4013      	ands	r3, r2
 801be90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801be92:	683b      	ldr	r3, [r7, #0]
 801be94:	689a      	ldr	r2, [r3, #8]
 801be96:	697b      	ldr	r3, [r7, #20]
 801be98:	005b      	lsls	r3, r3, #1
 801be9a:	fa02 f303 	lsl.w	r3, r2, r3
 801be9e:	693a      	ldr	r2, [r7, #16]
 801bea0:	4313      	orrs	r3, r2
 801bea2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 801bea4:	687b      	ldr	r3, [r7, #4]
 801bea6:	693a      	ldr	r2, [r7, #16]
 801bea8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801beaa:	683b      	ldr	r3, [r7, #0]
 801beac:	685b      	ldr	r3, [r3, #4]
 801beae:	f003 0303 	and.w	r3, r3, #3
 801beb2:	2b02      	cmp	r3, #2
 801beb4:	d123      	bne.n	801befe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801beb6:	697b      	ldr	r3, [r7, #20]
 801beb8:	08da      	lsrs	r2, r3, #3
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	3208      	adds	r2, #8
 801bebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bec2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801bec4:	697b      	ldr	r3, [r7, #20]
 801bec6:	f003 0307 	and.w	r3, r3, #7
 801beca:	009b      	lsls	r3, r3, #2
 801becc:	220f      	movs	r2, #15
 801bece:	fa02 f303 	lsl.w	r3, r2, r3
 801bed2:	43db      	mvns	r3, r3
 801bed4:	693a      	ldr	r2, [r7, #16]
 801bed6:	4013      	ands	r3, r2
 801bed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801beda:	683b      	ldr	r3, [r7, #0]
 801bedc:	691a      	ldr	r2, [r3, #16]
 801bede:	697b      	ldr	r3, [r7, #20]
 801bee0:	f003 0307 	and.w	r3, r3, #7
 801bee4:	009b      	lsls	r3, r3, #2
 801bee6:	fa02 f303 	lsl.w	r3, r2, r3
 801beea:	693a      	ldr	r2, [r7, #16]
 801beec:	4313      	orrs	r3, r2
 801beee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 801bef0:	697b      	ldr	r3, [r7, #20]
 801bef2:	08da      	lsrs	r2, r3, #3
 801bef4:	687b      	ldr	r3, [r7, #4]
 801bef6:	3208      	adds	r2, #8
 801bef8:	6939      	ldr	r1, [r7, #16]
 801befa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801befe:	687b      	ldr	r3, [r7, #4]
 801bf00:	681b      	ldr	r3, [r3, #0]
 801bf02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801bf04:	697b      	ldr	r3, [r7, #20]
 801bf06:	005b      	lsls	r3, r3, #1
 801bf08:	2203      	movs	r2, #3
 801bf0a:	fa02 f303 	lsl.w	r3, r2, r3
 801bf0e:	43db      	mvns	r3, r3
 801bf10:	693a      	ldr	r2, [r7, #16]
 801bf12:	4013      	ands	r3, r2
 801bf14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801bf16:	683b      	ldr	r3, [r7, #0]
 801bf18:	685b      	ldr	r3, [r3, #4]
 801bf1a:	f003 0203 	and.w	r2, r3, #3
 801bf1e:	697b      	ldr	r3, [r7, #20]
 801bf20:	005b      	lsls	r3, r3, #1
 801bf22:	fa02 f303 	lsl.w	r3, r2, r3
 801bf26:	693a      	ldr	r2, [r7, #16]
 801bf28:	4313      	orrs	r3, r2
 801bf2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801bf2c:	687b      	ldr	r3, [r7, #4]
 801bf2e:	693a      	ldr	r2, [r7, #16]
 801bf30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801bf32:	683b      	ldr	r3, [r7, #0]
 801bf34:	685b      	ldr	r3, [r3, #4]
 801bf36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801bf3a:	2b00      	cmp	r3, #0
 801bf3c:	f000 80a6 	beq.w	801c08c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801bf40:	4b5b      	ldr	r3, [pc, #364]	; (801c0b0 <HAL_GPIO_Init+0x2e4>)
 801bf42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bf44:	4a5a      	ldr	r2, [pc, #360]	; (801c0b0 <HAL_GPIO_Init+0x2e4>)
 801bf46:	f043 0301 	orr.w	r3, r3, #1
 801bf4a:	6613      	str	r3, [r2, #96]	; 0x60
 801bf4c:	4b58      	ldr	r3, [pc, #352]	; (801c0b0 <HAL_GPIO_Init+0x2e4>)
 801bf4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bf50:	f003 0301 	and.w	r3, r3, #1
 801bf54:	60bb      	str	r3, [r7, #8]
 801bf56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 801bf58:	4a56      	ldr	r2, [pc, #344]	; (801c0b4 <HAL_GPIO_Init+0x2e8>)
 801bf5a:	697b      	ldr	r3, [r7, #20]
 801bf5c:	089b      	lsrs	r3, r3, #2
 801bf5e:	3302      	adds	r3, #2
 801bf60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bf64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801bf66:	697b      	ldr	r3, [r7, #20]
 801bf68:	f003 0303 	and.w	r3, r3, #3
 801bf6c:	009b      	lsls	r3, r3, #2
 801bf6e:	220f      	movs	r2, #15
 801bf70:	fa02 f303 	lsl.w	r3, r2, r3
 801bf74:	43db      	mvns	r3, r3
 801bf76:	693a      	ldr	r2, [r7, #16]
 801bf78:	4013      	ands	r3, r2
 801bf7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801bf7c:	687b      	ldr	r3, [r7, #4]
 801bf7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801bf82:	d01f      	beq.n	801bfc4 <HAL_GPIO_Init+0x1f8>
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	4a4c      	ldr	r2, [pc, #304]	; (801c0b8 <HAL_GPIO_Init+0x2ec>)
 801bf88:	4293      	cmp	r3, r2
 801bf8a:	d019      	beq.n	801bfc0 <HAL_GPIO_Init+0x1f4>
 801bf8c:	687b      	ldr	r3, [r7, #4]
 801bf8e:	4a4b      	ldr	r2, [pc, #300]	; (801c0bc <HAL_GPIO_Init+0x2f0>)
 801bf90:	4293      	cmp	r3, r2
 801bf92:	d013      	beq.n	801bfbc <HAL_GPIO_Init+0x1f0>
 801bf94:	687b      	ldr	r3, [r7, #4]
 801bf96:	4a4a      	ldr	r2, [pc, #296]	; (801c0c0 <HAL_GPIO_Init+0x2f4>)
 801bf98:	4293      	cmp	r3, r2
 801bf9a:	d00d      	beq.n	801bfb8 <HAL_GPIO_Init+0x1ec>
 801bf9c:	687b      	ldr	r3, [r7, #4]
 801bf9e:	4a49      	ldr	r2, [pc, #292]	; (801c0c4 <HAL_GPIO_Init+0x2f8>)
 801bfa0:	4293      	cmp	r3, r2
 801bfa2:	d007      	beq.n	801bfb4 <HAL_GPIO_Init+0x1e8>
 801bfa4:	687b      	ldr	r3, [r7, #4]
 801bfa6:	4a48      	ldr	r2, [pc, #288]	; (801c0c8 <HAL_GPIO_Init+0x2fc>)
 801bfa8:	4293      	cmp	r3, r2
 801bfaa:	d101      	bne.n	801bfb0 <HAL_GPIO_Init+0x1e4>
 801bfac:	2305      	movs	r3, #5
 801bfae:	e00a      	b.n	801bfc6 <HAL_GPIO_Init+0x1fa>
 801bfb0:	2306      	movs	r3, #6
 801bfb2:	e008      	b.n	801bfc6 <HAL_GPIO_Init+0x1fa>
 801bfb4:	2304      	movs	r3, #4
 801bfb6:	e006      	b.n	801bfc6 <HAL_GPIO_Init+0x1fa>
 801bfb8:	2303      	movs	r3, #3
 801bfba:	e004      	b.n	801bfc6 <HAL_GPIO_Init+0x1fa>
 801bfbc:	2302      	movs	r3, #2
 801bfbe:	e002      	b.n	801bfc6 <HAL_GPIO_Init+0x1fa>
 801bfc0:	2301      	movs	r3, #1
 801bfc2:	e000      	b.n	801bfc6 <HAL_GPIO_Init+0x1fa>
 801bfc4:	2300      	movs	r3, #0
 801bfc6:	697a      	ldr	r2, [r7, #20]
 801bfc8:	f002 0203 	and.w	r2, r2, #3
 801bfcc:	0092      	lsls	r2, r2, #2
 801bfce:	4093      	lsls	r3, r2
 801bfd0:	693a      	ldr	r2, [r7, #16]
 801bfd2:	4313      	orrs	r3, r2
 801bfd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801bfd6:	4937      	ldr	r1, [pc, #220]	; (801c0b4 <HAL_GPIO_Init+0x2e8>)
 801bfd8:	697b      	ldr	r3, [r7, #20]
 801bfda:	089b      	lsrs	r3, r3, #2
 801bfdc:	3302      	adds	r3, #2
 801bfde:	693a      	ldr	r2, [r7, #16]
 801bfe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801bfe4:	4b39      	ldr	r3, [pc, #228]	; (801c0cc <HAL_GPIO_Init+0x300>)
 801bfe6:	689b      	ldr	r3, [r3, #8]
 801bfe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801bfea:	68fb      	ldr	r3, [r7, #12]
 801bfec:	43db      	mvns	r3, r3
 801bfee:	693a      	ldr	r2, [r7, #16]
 801bff0:	4013      	ands	r3, r2
 801bff2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801bff4:	683b      	ldr	r3, [r7, #0]
 801bff6:	685b      	ldr	r3, [r3, #4]
 801bff8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801bffc:	2b00      	cmp	r3, #0
 801bffe:	d003      	beq.n	801c008 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 801c000:	693a      	ldr	r2, [r7, #16]
 801c002:	68fb      	ldr	r3, [r7, #12]
 801c004:	4313      	orrs	r3, r2
 801c006:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801c008:	4a30      	ldr	r2, [pc, #192]	; (801c0cc <HAL_GPIO_Init+0x300>)
 801c00a:	693b      	ldr	r3, [r7, #16]
 801c00c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 801c00e:	4b2f      	ldr	r3, [pc, #188]	; (801c0cc <HAL_GPIO_Init+0x300>)
 801c010:	68db      	ldr	r3, [r3, #12]
 801c012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801c014:	68fb      	ldr	r3, [r7, #12]
 801c016:	43db      	mvns	r3, r3
 801c018:	693a      	ldr	r2, [r7, #16]
 801c01a:	4013      	ands	r3, r2
 801c01c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801c01e:	683b      	ldr	r3, [r7, #0]
 801c020:	685b      	ldr	r3, [r3, #4]
 801c022:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801c026:	2b00      	cmp	r3, #0
 801c028:	d003      	beq.n	801c032 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 801c02a:	693a      	ldr	r2, [r7, #16]
 801c02c:	68fb      	ldr	r3, [r7, #12]
 801c02e:	4313      	orrs	r3, r2
 801c030:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801c032:	4a26      	ldr	r2, [pc, #152]	; (801c0cc <HAL_GPIO_Init+0x300>)
 801c034:	693b      	ldr	r3, [r7, #16]
 801c036:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 801c038:	4b24      	ldr	r3, [pc, #144]	; (801c0cc <HAL_GPIO_Init+0x300>)
 801c03a:	685b      	ldr	r3, [r3, #4]
 801c03c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801c03e:	68fb      	ldr	r3, [r7, #12]
 801c040:	43db      	mvns	r3, r3
 801c042:	693a      	ldr	r2, [r7, #16]
 801c044:	4013      	ands	r3, r2
 801c046:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801c048:	683b      	ldr	r3, [r7, #0]
 801c04a:	685b      	ldr	r3, [r3, #4]
 801c04c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c050:	2b00      	cmp	r3, #0
 801c052:	d003      	beq.n	801c05c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 801c054:	693a      	ldr	r2, [r7, #16]
 801c056:	68fb      	ldr	r3, [r7, #12]
 801c058:	4313      	orrs	r3, r2
 801c05a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801c05c:	4a1b      	ldr	r2, [pc, #108]	; (801c0cc <HAL_GPIO_Init+0x300>)
 801c05e:	693b      	ldr	r3, [r7, #16]
 801c060:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 801c062:	4b1a      	ldr	r3, [pc, #104]	; (801c0cc <HAL_GPIO_Init+0x300>)
 801c064:	681b      	ldr	r3, [r3, #0]
 801c066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801c068:	68fb      	ldr	r3, [r7, #12]
 801c06a:	43db      	mvns	r3, r3
 801c06c:	693a      	ldr	r2, [r7, #16]
 801c06e:	4013      	ands	r3, r2
 801c070:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801c072:	683b      	ldr	r3, [r7, #0]
 801c074:	685b      	ldr	r3, [r3, #4]
 801c076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	d003      	beq.n	801c086 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 801c07e:	693a      	ldr	r2, [r7, #16]
 801c080:	68fb      	ldr	r3, [r7, #12]
 801c082:	4313      	orrs	r3, r2
 801c084:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801c086:	4a11      	ldr	r2, [pc, #68]	; (801c0cc <HAL_GPIO_Init+0x300>)
 801c088:	693b      	ldr	r3, [r7, #16]
 801c08a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 801c08c:	697b      	ldr	r3, [r7, #20]
 801c08e:	3301      	adds	r3, #1
 801c090:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 801c092:	683b      	ldr	r3, [r7, #0]
 801c094:	681a      	ldr	r2, [r3, #0]
 801c096:	697b      	ldr	r3, [r7, #20]
 801c098:	fa22 f303 	lsr.w	r3, r2, r3
 801c09c:	2b00      	cmp	r3, #0
 801c09e:	f47f ae9d 	bne.w	801bddc <HAL_GPIO_Init+0x10>
  }
}
 801c0a2:	bf00      	nop
 801c0a4:	bf00      	nop
 801c0a6:	371c      	adds	r7, #28
 801c0a8:	46bd      	mov	sp, r7
 801c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0ae:	4770      	bx	lr
 801c0b0:	40021000 	.word	0x40021000
 801c0b4:	40010000 	.word	0x40010000
 801c0b8:	48000400 	.word	0x48000400
 801c0bc:	48000800 	.word	0x48000800
 801c0c0:	48000c00 	.word	0x48000c00
 801c0c4:	48001000 	.word	0x48001000
 801c0c8:	48001400 	.word	0x48001400
 801c0cc:	40010400 	.word	0x40010400

0801c0d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801c0d0:	b480      	push	{r7}
 801c0d2:	b083      	sub	sp, #12
 801c0d4:	af00      	add	r7, sp, #0
 801c0d6:	6078      	str	r0, [r7, #4]
 801c0d8:	460b      	mov	r3, r1
 801c0da:	807b      	strh	r3, [r7, #2]
 801c0dc:	4613      	mov	r3, r2
 801c0de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801c0e0:	787b      	ldrb	r3, [r7, #1]
 801c0e2:	2b00      	cmp	r3, #0
 801c0e4:	d003      	beq.n	801c0ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801c0e6:	887a      	ldrh	r2, [r7, #2]
 801c0e8:	687b      	ldr	r3, [r7, #4]
 801c0ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801c0ec:	e002      	b.n	801c0f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801c0ee:	887a      	ldrh	r2, [r7, #2]
 801c0f0:	687b      	ldr	r3, [r7, #4]
 801c0f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 801c0f4:	bf00      	nop
 801c0f6:	370c      	adds	r7, #12
 801c0f8:	46bd      	mov	sp, r7
 801c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0fe:	4770      	bx	lr

0801c100 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801c100:	b480      	push	{r7}
 801c102:	b085      	sub	sp, #20
 801c104:	af00      	add	r7, sp, #0
 801c106:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 801c108:	687b      	ldr	r3, [r7, #4]
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	d141      	bne.n	801c192 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801c10e:	4b4b      	ldr	r3, [pc, #300]	; (801c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c110:	681b      	ldr	r3, [r3, #0]
 801c112:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801c116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c11a:	d131      	bne.n	801c180 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801c11c:	4b47      	ldr	r3, [pc, #284]	; (801c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c11e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c122:	4a46      	ldr	r2, [pc, #280]	; (801c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c128:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801c12c:	4b43      	ldr	r3, [pc, #268]	; (801c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c12e:	681b      	ldr	r3, [r3, #0]
 801c130:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801c134:	4a41      	ldr	r2, [pc, #260]	; (801c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801c13a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801c13c:	4b40      	ldr	r3, [pc, #256]	; (801c240 <HAL_PWREx_ControlVoltageScaling+0x140>)
 801c13e:	681b      	ldr	r3, [r3, #0]
 801c140:	2232      	movs	r2, #50	; 0x32
 801c142:	fb02 f303 	mul.w	r3, r2, r3
 801c146:	4a3f      	ldr	r2, [pc, #252]	; (801c244 <HAL_PWREx_ControlVoltageScaling+0x144>)
 801c148:	fba2 2303 	umull	r2, r3, r2, r3
 801c14c:	0c9b      	lsrs	r3, r3, #18
 801c14e:	3301      	adds	r3, #1
 801c150:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801c152:	e002      	b.n	801c15a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 801c154:	68fb      	ldr	r3, [r7, #12]
 801c156:	3b01      	subs	r3, #1
 801c158:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801c15a:	4b38      	ldr	r3, [pc, #224]	; (801c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c15c:	695b      	ldr	r3, [r3, #20]
 801c15e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c166:	d102      	bne.n	801c16e <HAL_PWREx_ControlVoltageScaling+0x6e>
 801c168:	68fb      	ldr	r3, [r7, #12]
 801c16a:	2b00      	cmp	r3, #0
 801c16c:	d1f2      	bne.n	801c154 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801c16e:	4b33      	ldr	r3, [pc, #204]	; (801c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c170:	695b      	ldr	r3, [r3, #20]
 801c172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c17a:	d158      	bne.n	801c22e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801c17c:	2303      	movs	r3, #3
 801c17e:	e057      	b.n	801c230 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801c180:	4b2e      	ldr	r3, [pc, #184]	; (801c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c186:	4a2d      	ldr	r2, [pc, #180]	; (801c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c18c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801c190:	e04d      	b.n	801c22e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 801c192:	687b      	ldr	r3, [r7, #4]
 801c194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c198:	d141      	bne.n	801c21e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801c19a:	4b28      	ldr	r3, [pc, #160]	; (801c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c19c:	681b      	ldr	r3, [r3, #0]
 801c19e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801c1a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c1a6:	d131      	bne.n	801c20c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801c1a8:	4b24      	ldr	r3, [pc, #144]	; (801c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c1aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c1ae:	4a23      	ldr	r2, [pc, #140]	; (801c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c1b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c1b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801c1b8:	4b20      	ldr	r3, [pc, #128]	; (801c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c1ba:	681b      	ldr	r3, [r3, #0]
 801c1bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801c1c0:	4a1e      	ldr	r2, [pc, #120]	; (801c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c1c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801c1c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801c1c8:	4b1d      	ldr	r3, [pc, #116]	; (801c240 <HAL_PWREx_ControlVoltageScaling+0x140>)
 801c1ca:	681b      	ldr	r3, [r3, #0]
 801c1cc:	2232      	movs	r2, #50	; 0x32
 801c1ce:	fb02 f303 	mul.w	r3, r2, r3
 801c1d2:	4a1c      	ldr	r2, [pc, #112]	; (801c244 <HAL_PWREx_ControlVoltageScaling+0x144>)
 801c1d4:	fba2 2303 	umull	r2, r3, r2, r3
 801c1d8:	0c9b      	lsrs	r3, r3, #18
 801c1da:	3301      	adds	r3, #1
 801c1dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801c1de:	e002      	b.n	801c1e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 801c1e0:	68fb      	ldr	r3, [r7, #12]
 801c1e2:	3b01      	subs	r3, #1
 801c1e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801c1e6:	4b15      	ldr	r3, [pc, #84]	; (801c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c1e8:	695b      	ldr	r3, [r3, #20]
 801c1ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c1ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c1f2:	d102      	bne.n	801c1fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 801c1f4:	68fb      	ldr	r3, [r7, #12]
 801c1f6:	2b00      	cmp	r3, #0
 801c1f8:	d1f2      	bne.n	801c1e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801c1fa:	4b10      	ldr	r3, [pc, #64]	; (801c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c1fc:	695b      	ldr	r3, [r3, #20]
 801c1fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c206:	d112      	bne.n	801c22e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801c208:	2303      	movs	r3, #3
 801c20a:	e011      	b.n	801c230 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801c20c:	4b0b      	ldr	r3, [pc, #44]	; (801c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c20e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c212:	4a0a      	ldr	r2, [pc, #40]	; (801c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c218:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801c21c:	e007      	b.n	801c22e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 801c21e:	4b07      	ldr	r3, [pc, #28]	; (801c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c220:	681b      	ldr	r3, [r3, #0]
 801c222:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801c226:	4a05      	ldr	r2, [pc, #20]	; (801c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c228:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801c22c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 801c22e:	2300      	movs	r3, #0
}
 801c230:	4618      	mov	r0, r3
 801c232:	3714      	adds	r7, #20
 801c234:	46bd      	mov	sp, r7
 801c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c23a:	4770      	bx	lr
 801c23c:	40007000 	.word	0x40007000
 801c240:	20000000 	.word	0x20000000
 801c244:	431bde83 	.word	0x431bde83

0801c248 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 801c248:	b480      	push	{r7}
 801c24a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 801c24c:	4b05      	ldr	r3, [pc, #20]	; (801c264 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801c24e:	689b      	ldr	r3, [r3, #8]
 801c250:	4a04      	ldr	r2, [pc, #16]	; (801c264 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801c252:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801c256:	6093      	str	r3, [r2, #8]
}
 801c258:	bf00      	nop
 801c25a:	46bd      	mov	sp, r7
 801c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c260:	4770      	bx	lr
 801c262:	bf00      	nop
 801c264:	40007000 	.word	0x40007000

0801c268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801c268:	b580      	push	{r7, lr}
 801c26a:	b088      	sub	sp, #32
 801c26c:	af00      	add	r7, sp, #0
 801c26e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801c270:	687b      	ldr	r3, [r7, #4]
 801c272:	2b00      	cmp	r3, #0
 801c274:	d101      	bne.n	801c27a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801c276:	2301      	movs	r3, #1
 801c278:	e306      	b.n	801c888 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801c27a:	687b      	ldr	r3, [r7, #4]
 801c27c:	681b      	ldr	r3, [r3, #0]
 801c27e:	f003 0301 	and.w	r3, r3, #1
 801c282:	2b00      	cmp	r3, #0
 801c284:	d075      	beq.n	801c372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c286:	4b97      	ldr	r3, [pc, #604]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c288:	689b      	ldr	r3, [r3, #8]
 801c28a:	f003 030c 	and.w	r3, r3, #12
 801c28e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801c290:	4b94      	ldr	r3, [pc, #592]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c292:	68db      	ldr	r3, [r3, #12]
 801c294:	f003 0303 	and.w	r3, r3, #3
 801c298:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 801c29a:	69bb      	ldr	r3, [r7, #24]
 801c29c:	2b0c      	cmp	r3, #12
 801c29e:	d102      	bne.n	801c2a6 <HAL_RCC_OscConfig+0x3e>
 801c2a0:	697b      	ldr	r3, [r7, #20]
 801c2a2:	2b03      	cmp	r3, #3
 801c2a4:	d002      	beq.n	801c2ac <HAL_RCC_OscConfig+0x44>
 801c2a6:	69bb      	ldr	r3, [r7, #24]
 801c2a8:	2b08      	cmp	r3, #8
 801c2aa:	d10b      	bne.n	801c2c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c2ac:	4b8d      	ldr	r3, [pc, #564]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c2ae:	681b      	ldr	r3, [r3, #0]
 801c2b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	d05b      	beq.n	801c370 <HAL_RCC_OscConfig+0x108>
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	685b      	ldr	r3, [r3, #4]
 801c2bc:	2b00      	cmp	r3, #0
 801c2be:	d157      	bne.n	801c370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801c2c0:	2301      	movs	r3, #1
 801c2c2:	e2e1      	b.n	801c888 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	685b      	ldr	r3, [r3, #4]
 801c2c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c2cc:	d106      	bne.n	801c2dc <HAL_RCC_OscConfig+0x74>
 801c2ce:	4b85      	ldr	r3, [pc, #532]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c2d0:	681b      	ldr	r3, [r3, #0]
 801c2d2:	4a84      	ldr	r2, [pc, #528]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c2d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c2d8:	6013      	str	r3, [r2, #0]
 801c2da:	e01d      	b.n	801c318 <HAL_RCC_OscConfig+0xb0>
 801c2dc:	687b      	ldr	r3, [r7, #4]
 801c2de:	685b      	ldr	r3, [r3, #4]
 801c2e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801c2e4:	d10c      	bne.n	801c300 <HAL_RCC_OscConfig+0x98>
 801c2e6:	4b7f      	ldr	r3, [pc, #508]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c2e8:	681b      	ldr	r3, [r3, #0]
 801c2ea:	4a7e      	ldr	r2, [pc, #504]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c2ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801c2f0:	6013      	str	r3, [r2, #0]
 801c2f2:	4b7c      	ldr	r3, [pc, #496]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c2f4:	681b      	ldr	r3, [r3, #0]
 801c2f6:	4a7b      	ldr	r2, [pc, #492]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c2f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c2fc:	6013      	str	r3, [r2, #0]
 801c2fe:	e00b      	b.n	801c318 <HAL_RCC_OscConfig+0xb0>
 801c300:	4b78      	ldr	r3, [pc, #480]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c302:	681b      	ldr	r3, [r3, #0]
 801c304:	4a77      	ldr	r2, [pc, #476]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c30a:	6013      	str	r3, [r2, #0]
 801c30c:	4b75      	ldr	r3, [pc, #468]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c30e:	681b      	ldr	r3, [r3, #0]
 801c310:	4a74      	ldr	r2, [pc, #464]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801c316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801c318:	687b      	ldr	r3, [r7, #4]
 801c31a:	685b      	ldr	r3, [r3, #4]
 801c31c:	2b00      	cmp	r3, #0
 801c31e:	d013      	beq.n	801c348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c320:	f7fc fd0e 	bl	8018d40 <HAL_GetTick>
 801c324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c326:	e008      	b.n	801c33a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c328:	f7fc fd0a 	bl	8018d40 <HAL_GetTick>
 801c32c:	4602      	mov	r2, r0
 801c32e:	693b      	ldr	r3, [r7, #16]
 801c330:	1ad3      	subs	r3, r2, r3
 801c332:	2b64      	cmp	r3, #100	; 0x64
 801c334:	d901      	bls.n	801c33a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801c336:	2303      	movs	r3, #3
 801c338:	e2a6      	b.n	801c888 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c33a:	4b6a      	ldr	r3, [pc, #424]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c33c:	681b      	ldr	r3, [r3, #0]
 801c33e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c342:	2b00      	cmp	r3, #0
 801c344:	d0f0      	beq.n	801c328 <HAL_RCC_OscConfig+0xc0>
 801c346:	e014      	b.n	801c372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c348:	f7fc fcfa 	bl	8018d40 <HAL_GetTick>
 801c34c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801c34e:	e008      	b.n	801c362 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c350:	f7fc fcf6 	bl	8018d40 <HAL_GetTick>
 801c354:	4602      	mov	r2, r0
 801c356:	693b      	ldr	r3, [r7, #16]
 801c358:	1ad3      	subs	r3, r2, r3
 801c35a:	2b64      	cmp	r3, #100	; 0x64
 801c35c:	d901      	bls.n	801c362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801c35e:	2303      	movs	r3, #3
 801c360:	e292      	b.n	801c888 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801c362:	4b60      	ldr	r3, [pc, #384]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c364:	681b      	ldr	r3, [r3, #0]
 801c366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c36a:	2b00      	cmp	r3, #0
 801c36c:	d1f0      	bne.n	801c350 <HAL_RCC_OscConfig+0xe8>
 801c36e:	e000      	b.n	801c372 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801c372:	687b      	ldr	r3, [r7, #4]
 801c374:	681b      	ldr	r3, [r3, #0]
 801c376:	f003 0302 	and.w	r3, r3, #2
 801c37a:	2b00      	cmp	r3, #0
 801c37c:	d075      	beq.n	801c46a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c37e:	4b59      	ldr	r3, [pc, #356]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c380:	689b      	ldr	r3, [r3, #8]
 801c382:	f003 030c 	and.w	r3, r3, #12
 801c386:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801c388:	4b56      	ldr	r3, [pc, #344]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c38a:	68db      	ldr	r3, [r3, #12]
 801c38c:	f003 0303 	and.w	r3, r3, #3
 801c390:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 801c392:	69bb      	ldr	r3, [r7, #24]
 801c394:	2b0c      	cmp	r3, #12
 801c396:	d102      	bne.n	801c39e <HAL_RCC_OscConfig+0x136>
 801c398:	697b      	ldr	r3, [r7, #20]
 801c39a:	2b02      	cmp	r3, #2
 801c39c:	d002      	beq.n	801c3a4 <HAL_RCC_OscConfig+0x13c>
 801c39e:	69bb      	ldr	r3, [r7, #24]
 801c3a0:	2b04      	cmp	r3, #4
 801c3a2:	d11f      	bne.n	801c3e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c3a4:	4b4f      	ldr	r3, [pc, #316]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c3a6:	681b      	ldr	r3, [r3, #0]
 801c3a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c3ac:	2b00      	cmp	r3, #0
 801c3ae:	d005      	beq.n	801c3bc <HAL_RCC_OscConfig+0x154>
 801c3b0:	687b      	ldr	r3, [r7, #4]
 801c3b2:	68db      	ldr	r3, [r3, #12]
 801c3b4:	2b00      	cmp	r3, #0
 801c3b6:	d101      	bne.n	801c3bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 801c3b8:	2301      	movs	r3, #1
 801c3ba:	e265      	b.n	801c888 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c3bc:	4b49      	ldr	r3, [pc, #292]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c3be:	685b      	ldr	r3, [r3, #4]
 801c3c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801c3c4:	687b      	ldr	r3, [r7, #4]
 801c3c6:	691b      	ldr	r3, [r3, #16]
 801c3c8:	061b      	lsls	r3, r3, #24
 801c3ca:	4946      	ldr	r1, [pc, #280]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c3cc:	4313      	orrs	r3, r2
 801c3ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801c3d0:	4b45      	ldr	r3, [pc, #276]	; (801c4e8 <HAL_RCC_OscConfig+0x280>)
 801c3d2:	681b      	ldr	r3, [r3, #0]
 801c3d4:	4618      	mov	r0, r3
 801c3d6:	f7fc fc67 	bl	8018ca8 <HAL_InitTick>
 801c3da:	4603      	mov	r3, r0
 801c3dc:	2b00      	cmp	r3, #0
 801c3de:	d043      	beq.n	801c468 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 801c3e0:	2301      	movs	r3, #1
 801c3e2:	e251      	b.n	801c888 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801c3e4:	687b      	ldr	r3, [r7, #4]
 801c3e6:	68db      	ldr	r3, [r3, #12]
 801c3e8:	2b00      	cmp	r3, #0
 801c3ea:	d023      	beq.n	801c434 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801c3ec:	4b3d      	ldr	r3, [pc, #244]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c3ee:	681b      	ldr	r3, [r3, #0]
 801c3f0:	4a3c      	ldr	r2, [pc, #240]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c3f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c3f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c3f8:	f7fc fca2 	bl	8018d40 <HAL_GetTick>
 801c3fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c3fe:	e008      	b.n	801c412 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c400:	f7fc fc9e 	bl	8018d40 <HAL_GetTick>
 801c404:	4602      	mov	r2, r0
 801c406:	693b      	ldr	r3, [r7, #16]
 801c408:	1ad3      	subs	r3, r2, r3
 801c40a:	2b02      	cmp	r3, #2
 801c40c:	d901      	bls.n	801c412 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801c40e:	2303      	movs	r3, #3
 801c410:	e23a      	b.n	801c888 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c412:	4b34      	ldr	r3, [pc, #208]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c414:	681b      	ldr	r3, [r3, #0]
 801c416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c41a:	2b00      	cmp	r3, #0
 801c41c:	d0f0      	beq.n	801c400 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c41e:	4b31      	ldr	r3, [pc, #196]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c420:	685b      	ldr	r3, [r3, #4]
 801c422:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801c426:	687b      	ldr	r3, [r7, #4]
 801c428:	691b      	ldr	r3, [r3, #16]
 801c42a:	061b      	lsls	r3, r3, #24
 801c42c:	492d      	ldr	r1, [pc, #180]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c42e:	4313      	orrs	r3, r2
 801c430:	604b      	str	r3, [r1, #4]
 801c432:	e01a      	b.n	801c46a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801c434:	4b2b      	ldr	r3, [pc, #172]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c436:	681b      	ldr	r3, [r3, #0]
 801c438:	4a2a      	ldr	r2, [pc, #168]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c43a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c43e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c440:	f7fc fc7e 	bl	8018d40 <HAL_GetTick>
 801c444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801c446:	e008      	b.n	801c45a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c448:	f7fc fc7a 	bl	8018d40 <HAL_GetTick>
 801c44c:	4602      	mov	r2, r0
 801c44e:	693b      	ldr	r3, [r7, #16]
 801c450:	1ad3      	subs	r3, r2, r3
 801c452:	2b02      	cmp	r3, #2
 801c454:	d901      	bls.n	801c45a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 801c456:	2303      	movs	r3, #3
 801c458:	e216      	b.n	801c888 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801c45a:	4b22      	ldr	r3, [pc, #136]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c45c:	681b      	ldr	r3, [r3, #0]
 801c45e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c462:	2b00      	cmp	r3, #0
 801c464:	d1f0      	bne.n	801c448 <HAL_RCC_OscConfig+0x1e0>
 801c466:	e000      	b.n	801c46a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c468:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801c46a:	687b      	ldr	r3, [r7, #4]
 801c46c:	681b      	ldr	r3, [r3, #0]
 801c46e:	f003 0308 	and.w	r3, r3, #8
 801c472:	2b00      	cmp	r3, #0
 801c474:	d041      	beq.n	801c4fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801c476:	687b      	ldr	r3, [r7, #4]
 801c478:	695b      	ldr	r3, [r3, #20]
 801c47a:	2b00      	cmp	r3, #0
 801c47c:	d01c      	beq.n	801c4b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801c47e:	4b19      	ldr	r3, [pc, #100]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c480:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c484:	4a17      	ldr	r2, [pc, #92]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c486:	f043 0301 	orr.w	r3, r3, #1
 801c48a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c48e:	f7fc fc57 	bl	8018d40 <HAL_GetTick>
 801c492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801c494:	e008      	b.n	801c4a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c496:	f7fc fc53 	bl	8018d40 <HAL_GetTick>
 801c49a:	4602      	mov	r2, r0
 801c49c:	693b      	ldr	r3, [r7, #16]
 801c49e:	1ad3      	subs	r3, r2, r3
 801c4a0:	2b02      	cmp	r3, #2
 801c4a2:	d901      	bls.n	801c4a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801c4a4:	2303      	movs	r3, #3
 801c4a6:	e1ef      	b.n	801c888 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801c4a8:	4b0e      	ldr	r3, [pc, #56]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c4aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c4ae:	f003 0302 	and.w	r3, r3, #2
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	d0ef      	beq.n	801c496 <HAL_RCC_OscConfig+0x22e>
 801c4b6:	e020      	b.n	801c4fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801c4b8:	4b0a      	ldr	r3, [pc, #40]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c4ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c4be:	4a09      	ldr	r2, [pc, #36]	; (801c4e4 <HAL_RCC_OscConfig+0x27c>)
 801c4c0:	f023 0301 	bic.w	r3, r3, #1
 801c4c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c4c8:	f7fc fc3a 	bl	8018d40 <HAL_GetTick>
 801c4cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801c4ce:	e00d      	b.n	801c4ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c4d0:	f7fc fc36 	bl	8018d40 <HAL_GetTick>
 801c4d4:	4602      	mov	r2, r0
 801c4d6:	693b      	ldr	r3, [r7, #16]
 801c4d8:	1ad3      	subs	r3, r2, r3
 801c4da:	2b02      	cmp	r3, #2
 801c4dc:	d906      	bls.n	801c4ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 801c4de:	2303      	movs	r3, #3
 801c4e0:	e1d2      	b.n	801c888 <HAL_RCC_OscConfig+0x620>
 801c4e2:	bf00      	nop
 801c4e4:	40021000 	.word	0x40021000
 801c4e8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801c4ec:	4b8c      	ldr	r3, [pc, #560]	; (801c720 <HAL_RCC_OscConfig+0x4b8>)
 801c4ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c4f2:	f003 0302 	and.w	r3, r3, #2
 801c4f6:	2b00      	cmp	r3, #0
 801c4f8:	d1ea      	bne.n	801c4d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801c4fa:	687b      	ldr	r3, [r7, #4]
 801c4fc:	681b      	ldr	r3, [r3, #0]
 801c4fe:	f003 0304 	and.w	r3, r3, #4
 801c502:	2b00      	cmp	r3, #0
 801c504:	f000 80a6 	beq.w	801c654 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 801c508:	2300      	movs	r3, #0
 801c50a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801c50c:	4b84      	ldr	r3, [pc, #528]	; (801c720 <HAL_RCC_OscConfig+0x4b8>)
 801c50e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c514:	2b00      	cmp	r3, #0
 801c516:	d101      	bne.n	801c51c <HAL_RCC_OscConfig+0x2b4>
 801c518:	2301      	movs	r3, #1
 801c51a:	e000      	b.n	801c51e <HAL_RCC_OscConfig+0x2b6>
 801c51c:	2300      	movs	r3, #0
 801c51e:	2b00      	cmp	r3, #0
 801c520:	d00d      	beq.n	801c53e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801c522:	4b7f      	ldr	r3, [pc, #508]	; (801c720 <HAL_RCC_OscConfig+0x4b8>)
 801c524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c526:	4a7e      	ldr	r2, [pc, #504]	; (801c720 <HAL_RCC_OscConfig+0x4b8>)
 801c528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c52c:	6593      	str	r3, [r2, #88]	; 0x58
 801c52e:	4b7c      	ldr	r3, [pc, #496]	; (801c720 <HAL_RCC_OscConfig+0x4b8>)
 801c530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c536:	60fb      	str	r3, [r7, #12]
 801c538:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 801c53a:	2301      	movs	r3, #1
 801c53c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c53e:	4b79      	ldr	r3, [pc, #484]	; (801c724 <HAL_RCC_OscConfig+0x4bc>)
 801c540:	681b      	ldr	r3, [r3, #0]
 801c542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c546:	2b00      	cmp	r3, #0
 801c548:	d118      	bne.n	801c57c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801c54a:	4b76      	ldr	r3, [pc, #472]	; (801c724 <HAL_RCC_OscConfig+0x4bc>)
 801c54c:	681b      	ldr	r3, [r3, #0]
 801c54e:	4a75      	ldr	r2, [pc, #468]	; (801c724 <HAL_RCC_OscConfig+0x4bc>)
 801c550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801c556:	f7fc fbf3 	bl	8018d40 <HAL_GetTick>
 801c55a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c55c:	e008      	b.n	801c570 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c55e:	f7fc fbef 	bl	8018d40 <HAL_GetTick>
 801c562:	4602      	mov	r2, r0
 801c564:	693b      	ldr	r3, [r7, #16]
 801c566:	1ad3      	subs	r3, r2, r3
 801c568:	2b02      	cmp	r3, #2
 801c56a:	d901      	bls.n	801c570 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 801c56c:	2303      	movs	r3, #3
 801c56e:	e18b      	b.n	801c888 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c570:	4b6c      	ldr	r3, [pc, #432]	; (801c724 <HAL_RCC_OscConfig+0x4bc>)
 801c572:	681b      	ldr	r3, [r3, #0]
 801c574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c578:	2b00      	cmp	r3, #0
 801c57a:	d0f0      	beq.n	801c55e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	689b      	ldr	r3, [r3, #8]
 801c580:	2b01      	cmp	r3, #1
 801c582:	d108      	bne.n	801c596 <HAL_RCC_OscConfig+0x32e>
 801c584:	4b66      	ldr	r3, [pc, #408]	; (801c720 <HAL_RCC_OscConfig+0x4b8>)
 801c586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c58a:	4a65      	ldr	r2, [pc, #404]	; (801c720 <HAL_RCC_OscConfig+0x4b8>)
 801c58c:	f043 0301 	orr.w	r3, r3, #1
 801c590:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c594:	e024      	b.n	801c5e0 <HAL_RCC_OscConfig+0x378>
 801c596:	687b      	ldr	r3, [r7, #4]
 801c598:	689b      	ldr	r3, [r3, #8]
 801c59a:	2b05      	cmp	r3, #5
 801c59c:	d110      	bne.n	801c5c0 <HAL_RCC_OscConfig+0x358>
 801c59e:	4b60      	ldr	r3, [pc, #384]	; (801c720 <HAL_RCC_OscConfig+0x4b8>)
 801c5a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c5a4:	4a5e      	ldr	r2, [pc, #376]	; (801c720 <HAL_RCC_OscConfig+0x4b8>)
 801c5a6:	f043 0304 	orr.w	r3, r3, #4
 801c5aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c5ae:	4b5c      	ldr	r3, [pc, #368]	; (801c720 <HAL_RCC_OscConfig+0x4b8>)
 801c5b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c5b4:	4a5a      	ldr	r2, [pc, #360]	; (801c720 <HAL_RCC_OscConfig+0x4b8>)
 801c5b6:	f043 0301 	orr.w	r3, r3, #1
 801c5ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c5be:	e00f      	b.n	801c5e0 <HAL_RCC_OscConfig+0x378>
 801c5c0:	4b57      	ldr	r3, [pc, #348]	; (801c720 <HAL_RCC_OscConfig+0x4b8>)
 801c5c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c5c6:	4a56      	ldr	r2, [pc, #344]	; (801c720 <HAL_RCC_OscConfig+0x4b8>)
 801c5c8:	f023 0301 	bic.w	r3, r3, #1
 801c5cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c5d0:	4b53      	ldr	r3, [pc, #332]	; (801c720 <HAL_RCC_OscConfig+0x4b8>)
 801c5d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c5d6:	4a52      	ldr	r2, [pc, #328]	; (801c720 <HAL_RCC_OscConfig+0x4b8>)
 801c5d8:	f023 0304 	bic.w	r3, r3, #4
 801c5dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	689b      	ldr	r3, [r3, #8]
 801c5e4:	2b00      	cmp	r3, #0
 801c5e6:	d016      	beq.n	801c616 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c5e8:	f7fc fbaa 	bl	8018d40 <HAL_GetTick>
 801c5ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c5ee:	e00a      	b.n	801c606 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c5f0:	f7fc fba6 	bl	8018d40 <HAL_GetTick>
 801c5f4:	4602      	mov	r2, r0
 801c5f6:	693b      	ldr	r3, [r7, #16]
 801c5f8:	1ad3      	subs	r3, r2, r3
 801c5fa:	f241 3288 	movw	r2, #5000	; 0x1388
 801c5fe:	4293      	cmp	r3, r2
 801c600:	d901      	bls.n	801c606 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 801c602:	2303      	movs	r3, #3
 801c604:	e140      	b.n	801c888 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c606:	4b46      	ldr	r3, [pc, #280]	; (801c720 <HAL_RCC_OscConfig+0x4b8>)
 801c608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c60c:	f003 0302 	and.w	r3, r3, #2
 801c610:	2b00      	cmp	r3, #0
 801c612:	d0ed      	beq.n	801c5f0 <HAL_RCC_OscConfig+0x388>
 801c614:	e015      	b.n	801c642 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c616:	f7fc fb93 	bl	8018d40 <HAL_GetTick>
 801c61a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801c61c:	e00a      	b.n	801c634 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c61e:	f7fc fb8f 	bl	8018d40 <HAL_GetTick>
 801c622:	4602      	mov	r2, r0
 801c624:	693b      	ldr	r3, [r7, #16]
 801c626:	1ad3      	subs	r3, r2, r3
 801c628:	f241 3288 	movw	r2, #5000	; 0x1388
 801c62c:	4293      	cmp	r3, r2
 801c62e:	d901      	bls.n	801c634 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 801c630:	2303      	movs	r3, #3
 801c632:	e129      	b.n	801c888 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801c634:	4b3a      	ldr	r3, [pc, #232]	; (801c720 <HAL_RCC_OscConfig+0x4b8>)
 801c636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c63a:	f003 0302 	and.w	r3, r3, #2
 801c63e:	2b00      	cmp	r3, #0
 801c640:	d1ed      	bne.n	801c61e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801c642:	7ffb      	ldrb	r3, [r7, #31]
 801c644:	2b01      	cmp	r3, #1
 801c646:	d105      	bne.n	801c654 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801c648:	4b35      	ldr	r3, [pc, #212]	; (801c720 <HAL_RCC_OscConfig+0x4b8>)
 801c64a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c64c:	4a34      	ldr	r2, [pc, #208]	; (801c720 <HAL_RCC_OscConfig+0x4b8>)
 801c64e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c652:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801c654:	687b      	ldr	r3, [r7, #4]
 801c656:	681b      	ldr	r3, [r3, #0]
 801c658:	f003 0320 	and.w	r3, r3, #32
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	d03c      	beq.n	801c6da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801c660:	687b      	ldr	r3, [r7, #4]
 801c662:	699b      	ldr	r3, [r3, #24]
 801c664:	2b00      	cmp	r3, #0
 801c666:	d01c      	beq.n	801c6a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801c668:	4b2d      	ldr	r3, [pc, #180]	; (801c720 <HAL_RCC_OscConfig+0x4b8>)
 801c66a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c66e:	4a2c      	ldr	r2, [pc, #176]	; (801c720 <HAL_RCC_OscConfig+0x4b8>)
 801c670:	f043 0301 	orr.w	r3, r3, #1
 801c674:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c678:	f7fc fb62 	bl	8018d40 <HAL_GetTick>
 801c67c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801c67e:	e008      	b.n	801c692 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c680:	f7fc fb5e 	bl	8018d40 <HAL_GetTick>
 801c684:	4602      	mov	r2, r0
 801c686:	693b      	ldr	r3, [r7, #16]
 801c688:	1ad3      	subs	r3, r2, r3
 801c68a:	2b02      	cmp	r3, #2
 801c68c:	d901      	bls.n	801c692 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 801c68e:	2303      	movs	r3, #3
 801c690:	e0fa      	b.n	801c888 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801c692:	4b23      	ldr	r3, [pc, #140]	; (801c720 <HAL_RCC_OscConfig+0x4b8>)
 801c694:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c698:	f003 0302 	and.w	r3, r3, #2
 801c69c:	2b00      	cmp	r3, #0
 801c69e:	d0ef      	beq.n	801c680 <HAL_RCC_OscConfig+0x418>
 801c6a0:	e01b      	b.n	801c6da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801c6a2:	4b1f      	ldr	r3, [pc, #124]	; (801c720 <HAL_RCC_OscConfig+0x4b8>)
 801c6a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c6a8:	4a1d      	ldr	r2, [pc, #116]	; (801c720 <HAL_RCC_OscConfig+0x4b8>)
 801c6aa:	f023 0301 	bic.w	r3, r3, #1
 801c6ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c6b2:	f7fc fb45 	bl	8018d40 <HAL_GetTick>
 801c6b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801c6b8:	e008      	b.n	801c6cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c6ba:	f7fc fb41 	bl	8018d40 <HAL_GetTick>
 801c6be:	4602      	mov	r2, r0
 801c6c0:	693b      	ldr	r3, [r7, #16]
 801c6c2:	1ad3      	subs	r3, r2, r3
 801c6c4:	2b02      	cmp	r3, #2
 801c6c6:	d901      	bls.n	801c6cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 801c6c8:	2303      	movs	r3, #3
 801c6ca:	e0dd      	b.n	801c888 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801c6cc:	4b14      	ldr	r3, [pc, #80]	; (801c720 <HAL_RCC_OscConfig+0x4b8>)
 801c6ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c6d2:	f003 0302 	and.w	r3, r3, #2
 801c6d6:	2b00      	cmp	r3, #0
 801c6d8:	d1ef      	bne.n	801c6ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801c6da:	687b      	ldr	r3, [r7, #4]
 801c6dc:	69db      	ldr	r3, [r3, #28]
 801c6de:	2b00      	cmp	r3, #0
 801c6e0:	f000 80d1 	beq.w	801c886 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801c6e4:	4b0e      	ldr	r3, [pc, #56]	; (801c720 <HAL_RCC_OscConfig+0x4b8>)
 801c6e6:	689b      	ldr	r3, [r3, #8]
 801c6e8:	f003 030c 	and.w	r3, r3, #12
 801c6ec:	2b0c      	cmp	r3, #12
 801c6ee:	f000 808b 	beq.w	801c808 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801c6f2:	687b      	ldr	r3, [r7, #4]
 801c6f4:	69db      	ldr	r3, [r3, #28]
 801c6f6:	2b02      	cmp	r3, #2
 801c6f8:	d15e      	bne.n	801c7b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c6fa:	4b09      	ldr	r3, [pc, #36]	; (801c720 <HAL_RCC_OscConfig+0x4b8>)
 801c6fc:	681b      	ldr	r3, [r3, #0]
 801c6fe:	4a08      	ldr	r2, [pc, #32]	; (801c720 <HAL_RCC_OscConfig+0x4b8>)
 801c700:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801c704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c706:	f7fc fb1b 	bl	8018d40 <HAL_GetTick>
 801c70a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c70c:	e00c      	b.n	801c728 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c70e:	f7fc fb17 	bl	8018d40 <HAL_GetTick>
 801c712:	4602      	mov	r2, r0
 801c714:	693b      	ldr	r3, [r7, #16]
 801c716:	1ad3      	subs	r3, r2, r3
 801c718:	2b02      	cmp	r3, #2
 801c71a:	d905      	bls.n	801c728 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 801c71c:	2303      	movs	r3, #3
 801c71e:	e0b3      	b.n	801c888 <HAL_RCC_OscConfig+0x620>
 801c720:	40021000 	.word	0x40021000
 801c724:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c728:	4b59      	ldr	r3, [pc, #356]	; (801c890 <HAL_RCC_OscConfig+0x628>)
 801c72a:	681b      	ldr	r3, [r3, #0]
 801c72c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c730:	2b00      	cmp	r3, #0
 801c732:	d1ec      	bne.n	801c70e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801c734:	4b56      	ldr	r3, [pc, #344]	; (801c890 <HAL_RCC_OscConfig+0x628>)
 801c736:	68da      	ldr	r2, [r3, #12]
 801c738:	4b56      	ldr	r3, [pc, #344]	; (801c894 <HAL_RCC_OscConfig+0x62c>)
 801c73a:	4013      	ands	r3, r2
 801c73c:	687a      	ldr	r2, [r7, #4]
 801c73e:	6a11      	ldr	r1, [r2, #32]
 801c740:	687a      	ldr	r2, [r7, #4]
 801c742:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801c744:	3a01      	subs	r2, #1
 801c746:	0112      	lsls	r2, r2, #4
 801c748:	4311      	orrs	r1, r2
 801c74a:	687a      	ldr	r2, [r7, #4]
 801c74c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801c74e:	0212      	lsls	r2, r2, #8
 801c750:	4311      	orrs	r1, r2
 801c752:	687a      	ldr	r2, [r7, #4]
 801c754:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801c756:	0852      	lsrs	r2, r2, #1
 801c758:	3a01      	subs	r2, #1
 801c75a:	0552      	lsls	r2, r2, #21
 801c75c:	4311      	orrs	r1, r2
 801c75e:	687a      	ldr	r2, [r7, #4]
 801c760:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801c762:	0852      	lsrs	r2, r2, #1
 801c764:	3a01      	subs	r2, #1
 801c766:	0652      	lsls	r2, r2, #25
 801c768:	4311      	orrs	r1, r2
 801c76a:	687a      	ldr	r2, [r7, #4]
 801c76c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801c76e:	06d2      	lsls	r2, r2, #27
 801c770:	430a      	orrs	r2, r1
 801c772:	4947      	ldr	r1, [pc, #284]	; (801c890 <HAL_RCC_OscConfig+0x628>)
 801c774:	4313      	orrs	r3, r2
 801c776:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801c778:	4b45      	ldr	r3, [pc, #276]	; (801c890 <HAL_RCC_OscConfig+0x628>)
 801c77a:	681b      	ldr	r3, [r3, #0]
 801c77c:	4a44      	ldr	r2, [pc, #272]	; (801c890 <HAL_RCC_OscConfig+0x628>)
 801c77e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c782:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801c784:	4b42      	ldr	r3, [pc, #264]	; (801c890 <HAL_RCC_OscConfig+0x628>)
 801c786:	68db      	ldr	r3, [r3, #12]
 801c788:	4a41      	ldr	r2, [pc, #260]	; (801c890 <HAL_RCC_OscConfig+0x628>)
 801c78a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c78e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c790:	f7fc fad6 	bl	8018d40 <HAL_GetTick>
 801c794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c796:	e008      	b.n	801c7aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c798:	f7fc fad2 	bl	8018d40 <HAL_GetTick>
 801c79c:	4602      	mov	r2, r0
 801c79e:	693b      	ldr	r3, [r7, #16]
 801c7a0:	1ad3      	subs	r3, r2, r3
 801c7a2:	2b02      	cmp	r3, #2
 801c7a4:	d901      	bls.n	801c7aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 801c7a6:	2303      	movs	r3, #3
 801c7a8:	e06e      	b.n	801c888 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c7aa:	4b39      	ldr	r3, [pc, #228]	; (801c890 <HAL_RCC_OscConfig+0x628>)
 801c7ac:	681b      	ldr	r3, [r3, #0]
 801c7ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c7b2:	2b00      	cmp	r3, #0
 801c7b4:	d0f0      	beq.n	801c798 <HAL_RCC_OscConfig+0x530>
 801c7b6:	e066      	b.n	801c886 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c7b8:	4b35      	ldr	r3, [pc, #212]	; (801c890 <HAL_RCC_OscConfig+0x628>)
 801c7ba:	681b      	ldr	r3, [r3, #0]
 801c7bc:	4a34      	ldr	r2, [pc, #208]	; (801c890 <HAL_RCC_OscConfig+0x628>)
 801c7be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801c7c2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 801c7c4:	4b32      	ldr	r3, [pc, #200]	; (801c890 <HAL_RCC_OscConfig+0x628>)
 801c7c6:	68db      	ldr	r3, [r3, #12]
 801c7c8:	4a31      	ldr	r2, [pc, #196]	; (801c890 <HAL_RCC_OscConfig+0x628>)
 801c7ca:	f023 0303 	bic.w	r3, r3, #3
 801c7ce:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 801c7d0:	4b2f      	ldr	r3, [pc, #188]	; (801c890 <HAL_RCC_OscConfig+0x628>)
 801c7d2:	68db      	ldr	r3, [r3, #12]
 801c7d4:	4a2e      	ldr	r2, [pc, #184]	; (801c890 <HAL_RCC_OscConfig+0x628>)
 801c7d6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 801c7da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c7de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c7e0:	f7fc faae 	bl	8018d40 <HAL_GetTick>
 801c7e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c7e6:	e008      	b.n	801c7fa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c7e8:	f7fc faaa 	bl	8018d40 <HAL_GetTick>
 801c7ec:	4602      	mov	r2, r0
 801c7ee:	693b      	ldr	r3, [r7, #16]
 801c7f0:	1ad3      	subs	r3, r2, r3
 801c7f2:	2b02      	cmp	r3, #2
 801c7f4:	d901      	bls.n	801c7fa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 801c7f6:	2303      	movs	r3, #3
 801c7f8:	e046      	b.n	801c888 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c7fa:	4b25      	ldr	r3, [pc, #148]	; (801c890 <HAL_RCC_OscConfig+0x628>)
 801c7fc:	681b      	ldr	r3, [r3, #0]
 801c7fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c802:	2b00      	cmp	r3, #0
 801c804:	d1f0      	bne.n	801c7e8 <HAL_RCC_OscConfig+0x580>
 801c806:	e03e      	b.n	801c886 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801c808:	687b      	ldr	r3, [r7, #4]
 801c80a:	69db      	ldr	r3, [r3, #28]
 801c80c:	2b01      	cmp	r3, #1
 801c80e:	d101      	bne.n	801c814 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 801c810:	2301      	movs	r3, #1
 801c812:	e039      	b.n	801c888 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 801c814:	4b1e      	ldr	r3, [pc, #120]	; (801c890 <HAL_RCC_OscConfig+0x628>)
 801c816:	68db      	ldr	r3, [r3, #12]
 801c818:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c81a:	697b      	ldr	r3, [r7, #20]
 801c81c:	f003 0203 	and.w	r2, r3, #3
 801c820:	687b      	ldr	r3, [r7, #4]
 801c822:	6a1b      	ldr	r3, [r3, #32]
 801c824:	429a      	cmp	r2, r3
 801c826:	d12c      	bne.n	801c882 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801c828:	697b      	ldr	r3, [r7, #20]
 801c82a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801c82e:	687b      	ldr	r3, [r7, #4]
 801c830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c832:	3b01      	subs	r3, #1
 801c834:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c836:	429a      	cmp	r2, r3
 801c838:	d123      	bne.n	801c882 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801c83a:	697b      	ldr	r3, [r7, #20]
 801c83c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 801c840:	687b      	ldr	r3, [r7, #4]
 801c842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c844:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801c846:	429a      	cmp	r2, r3
 801c848:	d11b      	bne.n	801c882 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801c84a:	697b      	ldr	r3, [r7, #20]
 801c84c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 801c850:	687b      	ldr	r3, [r7, #4]
 801c852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c854:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801c856:	429a      	cmp	r2, r3
 801c858:	d113      	bne.n	801c882 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c85a:	697b      	ldr	r3, [r7, #20]
 801c85c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 801c860:	687b      	ldr	r3, [r7, #4]
 801c862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c864:	085b      	lsrs	r3, r3, #1
 801c866:	3b01      	subs	r3, #1
 801c868:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801c86a:	429a      	cmp	r2, r3
 801c86c:	d109      	bne.n	801c882 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801c86e:	697b      	ldr	r3, [r7, #20]
 801c870:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 801c874:	687b      	ldr	r3, [r7, #4]
 801c876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c878:	085b      	lsrs	r3, r3, #1
 801c87a:	3b01      	subs	r3, #1
 801c87c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c87e:	429a      	cmp	r2, r3
 801c880:	d001      	beq.n	801c886 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 801c882:	2301      	movs	r3, #1
 801c884:	e000      	b.n	801c888 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 801c886:	2300      	movs	r3, #0
}
 801c888:	4618      	mov	r0, r3
 801c88a:	3720      	adds	r7, #32
 801c88c:	46bd      	mov	sp, r7
 801c88e:	bd80      	pop	{r7, pc}
 801c890:	40021000 	.word	0x40021000
 801c894:	019f800c 	.word	0x019f800c

0801c898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801c898:	b580      	push	{r7, lr}
 801c89a:	b086      	sub	sp, #24
 801c89c:	af00      	add	r7, sp, #0
 801c89e:	6078      	str	r0, [r7, #4]
 801c8a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 801c8a2:	2300      	movs	r3, #0
 801c8a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801c8a6:	687b      	ldr	r3, [r7, #4]
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	d101      	bne.n	801c8b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 801c8ac:	2301      	movs	r3, #1
 801c8ae:	e11e      	b.n	801caee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801c8b0:	4b91      	ldr	r3, [pc, #580]	; (801caf8 <HAL_RCC_ClockConfig+0x260>)
 801c8b2:	681b      	ldr	r3, [r3, #0]
 801c8b4:	f003 030f 	and.w	r3, r3, #15
 801c8b8:	683a      	ldr	r2, [r7, #0]
 801c8ba:	429a      	cmp	r2, r3
 801c8bc:	d910      	bls.n	801c8e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c8be:	4b8e      	ldr	r3, [pc, #568]	; (801caf8 <HAL_RCC_ClockConfig+0x260>)
 801c8c0:	681b      	ldr	r3, [r3, #0]
 801c8c2:	f023 020f 	bic.w	r2, r3, #15
 801c8c6:	498c      	ldr	r1, [pc, #560]	; (801caf8 <HAL_RCC_ClockConfig+0x260>)
 801c8c8:	683b      	ldr	r3, [r7, #0]
 801c8ca:	4313      	orrs	r3, r2
 801c8cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c8ce:	4b8a      	ldr	r3, [pc, #552]	; (801caf8 <HAL_RCC_ClockConfig+0x260>)
 801c8d0:	681b      	ldr	r3, [r3, #0]
 801c8d2:	f003 030f 	and.w	r3, r3, #15
 801c8d6:	683a      	ldr	r2, [r7, #0]
 801c8d8:	429a      	cmp	r2, r3
 801c8da:	d001      	beq.n	801c8e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801c8dc:	2301      	movs	r3, #1
 801c8de:	e106      	b.n	801caee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801c8e0:	687b      	ldr	r3, [r7, #4]
 801c8e2:	681b      	ldr	r3, [r3, #0]
 801c8e4:	f003 0301 	and.w	r3, r3, #1
 801c8e8:	2b00      	cmp	r3, #0
 801c8ea:	d073      	beq.n	801c9d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801c8ec:	687b      	ldr	r3, [r7, #4]
 801c8ee:	685b      	ldr	r3, [r3, #4]
 801c8f0:	2b03      	cmp	r3, #3
 801c8f2:	d129      	bne.n	801c948 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c8f4:	4b81      	ldr	r3, [pc, #516]	; (801cafc <HAL_RCC_ClockConfig+0x264>)
 801c8f6:	681b      	ldr	r3, [r3, #0]
 801c8f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c8fc:	2b00      	cmp	r3, #0
 801c8fe:	d101      	bne.n	801c904 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 801c900:	2301      	movs	r3, #1
 801c902:	e0f4      	b.n	801caee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 801c904:	f000 f99c 	bl	801cc40 <RCC_GetSysClockFreqFromPLLSource>
 801c908:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 801c90a:	693b      	ldr	r3, [r7, #16]
 801c90c:	4a7c      	ldr	r2, [pc, #496]	; (801cb00 <HAL_RCC_ClockConfig+0x268>)
 801c90e:	4293      	cmp	r3, r2
 801c910:	d93f      	bls.n	801c992 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801c912:	4b7a      	ldr	r3, [pc, #488]	; (801cafc <HAL_RCC_ClockConfig+0x264>)
 801c914:	689b      	ldr	r3, [r3, #8]
 801c916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c91a:	2b00      	cmp	r3, #0
 801c91c:	d009      	beq.n	801c932 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801c91e:	687b      	ldr	r3, [r7, #4]
 801c920:	681b      	ldr	r3, [r3, #0]
 801c922:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801c926:	2b00      	cmp	r3, #0
 801c928:	d033      	beq.n	801c992 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 801c92a:	687b      	ldr	r3, [r7, #4]
 801c92c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801c92e:	2b00      	cmp	r3, #0
 801c930:	d12f      	bne.n	801c992 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801c932:	4b72      	ldr	r3, [pc, #456]	; (801cafc <HAL_RCC_ClockConfig+0x264>)
 801c934:	689b      	ldr	r3, [r3, #8]
 801c936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801c93a:	4a70      	ldr	r2, [pc, #448]	; (801cafc <HAL_RCC_ClockConfig+0x264>)
 801c93c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c940:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 801c942:	2380      	movs	r3, #128	; 0x80
 801c944:	617b      	str	r3, [r7, #20]
 801c946:	e024      	b.n	801c992 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801c948:	687b      	ldr	r3, [r7, #4]
 801c94a:	685b      	ldr	r3, [r3, #4]
 801c94c:	2b02      	cmp	r3, #2
 801c94e:	d107      	bne.n	801c960 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c950:	4b6a      	ldr	r3, [pc, #424]	; (801cafc <HAL_RCC_ClockConfig+0x264>)
 801c952:	681b      	ldr	r3, [r3, #0]
 801c954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c958:	2b00      	cmp	r3, #0
 801c95a:	d109      	bne.n	801c970 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801c95c:	2301      	movs	r3, #1
 801c95e:	e0c6      	b.n	801caee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c960:	4b66      	ldr	r3, [pc, #408]	; (801cafc <HAL_RCC_ClockConfig+0x264>)
 801c962:	681b      	ldr	r3, [r3, #0]
 801c964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c968:	2b00      	cmp	r3, #0
 801c96a:	d101      	bne.n	801c970 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801c96c:	2301      	movs	r3, #1
 801c96e:	e0be      	b.n	801caee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 801c970:	f000 f8ce 	bl	801cb10 <HAL_RCC_GetSysClockFreq>
 801c974:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 801c976:	693b      	ldr	r3, [r7, #16]
 801c978:	4a61      	ldr	r2, [pc, #388]	; (801cb00 <HAL_RCC_ClockConfig+0x268>)
 801c97a:	4293      	cmp	r3, r2
 801c97c:	d909      	bls.n	801c992 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801c97e:	4b5f      	ldr	r3, [pc, #380]	; (801cafc <HAL_RCC_ClockConfig+0x264>)
 801c980:	689b      	ldr	r3, [r3, #8]
 801c982:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801c986:	4a5d      	ldr	r2, [pc, #372]	; (801cafc <HAL_RCC_ClockConfig+0x264>)
 801c988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c98c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 801c98e:	2380      	movs	r3, #128	; 0x80
 801c990:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801c992:	4b5a      	ldr	r3, [pc, #360]	; (801cafc <HAL_RCC_ClockConfig+0x264>)
 801c994:	689b      	ldr	r3, [r3, #8]
 801c996:	f023 0203 	bic.w	r2, r3, #3
 801c99a:	687b      	ldr	r3, [r7, #4]
 801c99c:	685b      	ldr	r3, [r3, #4]
 801c99e:	4957      	ldr	r1, [pc, #348]	; (801cafc <HAL_RCC_ClockConfig+0x264>)
 801c9a0:	4313      	orrs	r3, r2
 801c9a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c9a4:	f7fc f9cc 	bl	8018d40 <HAL_GetTick>
 801c9a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c9aa:	e00a      	b.n	801c9c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801c9ac:	f7fc f9c8 	bl	8018d40 <HAL_GetTick>
 801c9b0:	4602      	mov	r2, r0
 801c9b2:	68fb      	ldr	r3, [r7, #12]
 801c9b4:	1ad3      	subs	r3, r2, r3
 801c9b6:	f241 3288 	movw	r2, #5000	; 0x1388
 801c9ba:	4293      	cmp	r3, r2
 801c9bc:	d901      	bls.n	801c9c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 801c9be:	2303      	movs	r3, #3
 801c9c0:	e095      	b.n	801caee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c9c2:	4b4e      	ldr	r3, [pc, #312]	; (801cafc <HAL_RCC_ClockConfig+0x264>)
 801c9c4:	689b      	ldr	r3, [r3, #8]
 801c9c6:	f003 020c 	and.w	r2, r3, #12
 801c9ca:	687b      	ldr	r3, [r7, #4]
 801c9cc:	685b      	ldr	r3, [r3, #4]
 801c9ce:	009b      	lsls	r3, r3, #2
 801c9d0:	429a      	cmp	r2, r3
 801c9d2:	d1eb      	bne.n	801c9ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801c9d4:	687b      	ldr	r3, [r7, #4]
 801c9d6:	681b      	ldr	r3, [r3, #0]
 801c9d8:	f003 0302 	and.w	r3, r3, #2
 801c9dc:	2b00      	cmp	r3, #0
 801c9de:	d023      	beq.n	801ca28 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c9e0:	687b      	ldr	r3, [r7, #4]
 801c9e2:	681b      	ldr	r3, [r3, #0]
 801c9e4:	f003 0304 	and.w	r3, r3, #4
 801c9e8:	2b00      	cmp	r3, #0
 801c9ea:	d005      	beq.n	801c9f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801c9ec:	4b43      	ldr	r3, [pc, #268]	; (801cafc <HAL_RCC_ClockConfig+0x264>)
 801c9ee:	689b      	ldr	r3, [r3, #8]
 801c9f0:	4a42      	ldr	r2, [pc, #264]	; (801cafc <HAL_RCC_ClockConfig+0x264>)
 801c9f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801c9f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c9f8:	687b      	ldr	r3, [r7, #4]
 801c9fa:	681b      	ldr	r3, [r3, #0]
 801c9fc:	f003 0308 	and.w	r3, r3, #8
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	d007      	beq.n	801ca14 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 801ca04:	4b3d      	ldr	r3, [pc, #244]	; (801cafc <HAL_RCC_ClockConfig+0x264>)
 801ca06:	689b      	ldr	r3, [r3, #8]
 801ca08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801ca0c:	4a3b      	ldr	r2, [pc, #236]	; (801cafc <HAL_RCC_ClockConfig+0x264>)
 801ca0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801ca12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801ca14:	4b39      	ldr	r3, [pc, #228]	; (801cafc <HAL_RCC_ClockConfig+0x264>)
 801ca16:	689b      	ldr	r3, [r3, #8]
 801ca18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801ca1c:	687b      	ldr	r3, [r7, #4]
 801ca1e:	689b      	ldr	r3, [r3, #8]
 801ca20:	4936      	ldr	r1, [pc, #216]	; (801cafc <HAL_RCC_ClockConfig+0x264>)
 801ca22:	4313      	orrs	r3, r2
 801ca24:	608b      	str	r3, [r1, #8]
 801ca26:	e008      	b.n	801ca3a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 801ca28:	697b      	ldr	r3, [r7, #20]
 801ca2a:	2b80      	cmp	r3, #128	; 0x80
 801ca2c:	d105      	bne.n	801ca3a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 801ca2e:	4b33      	ldr	r3, [pc, #204]	; (801cafc <HAL_RCC_ClockConfig+0x264>)
 801ca30:	689b      	ldr	r3, [r3, #8]
 801ca32:	4a32      	ldr	r2, [pc, #200]	; (801cafc <HAL_RCC_ClockConfig+0x264>)
 801ca34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801ca38:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801ca3a:	4b2f      	ldr	r3, [pc, #188]	; (801caf8 <HAL_RCC_ClockConfig+0x260>)
 801ca3c:	681b      	ldr	r3, [r3, #0]
 801ca3e:	f003 030f 	and.w	r3, r3, #15
 801ca42:	683a      	ldr	r2, [r7, #0]
 801ca44:	429a      	cmp	r2, r3
 801ca46:	d21d      	bcs.n	801ca84 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801ca48:	4b2b      	ldr	r3, [pc, #172]	; (801caf8 <HAL_RCC_ClockConfig+0x260>)
 801ca4a:	681b      	ldr	r3, [r3, #0]
 801ca4c:	f023 020f 	bic.w	r2, r3, #15
 801ca50:	4929      	ldr	r1, [pc, #164]	; (801caf8 <HAL_RCC_ClockConfig+0x260>)
 801ca52:	683b      	ldr	r3, [r7, #0]
 801ca54:	4313      	orrs	r3, r2
 801ca56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801ca58:	f7fc f972 	bl	8018d40 <HAL_GetTick>
 801ca5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ca5e:	e00a      	b.n	801ca76 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ca60:	f7fc f96e 	bl	8018d40 <HAL_GetTick>
 801ca64:	4602      	mov	r2, r0
 801ca66:	68fb      	ldr	r3, [r7, #12]
 801ca68:	1ad3      	subs	r3, r2, r3
 801ca6a:	f241 3288 	movw	r2, #5000	; 0x1388
 801ca6e:	4293      	cmp	r3, r2
 801ca70:	d901      	bls.n	801ca76 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 801ca72:	2303      	movs	r3, #3
 801ca74:	e03b      	b.n	801caee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ca76:	4b20      	ldr	r3, [pc, #128]	; (801caf8 <HAL_RCC_ClockConfig+0x260>)
 801ca78:	681b      	ldr	r3, [r3, #0]
 801ca7a:	f003 030f 	and.w	r3, r3, #15
 801ca7e:	683a      	ldr	r2, [r7, #0]
 801ca80:	429a      	cmp	r2, r3
 801ca82:	d1ed      	bne.n	801ca60 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801ca84:	687b      	ldr	r3, [r7, #4]
 801ca86:	681b      	ldr	r3, [r3, #0]
 801ca88:	f003 0304 	and.w	r3, r3, #4
 801ca8c:	2b00      	cmp	r3, #0
 801ca8e:	d008      	beq.n	801caa2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801ca90:	4b1a      	ldr	r3, [pc, #104]	; (801cafc <HAL_RCC_ClockConfig+0x264>)
 801ca92:	689b      	ldr	r3, [r3, #8]
 801ca94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801ca98:	687b      	ldr	r3, [r7, #4]
 801ca9a:	68db      	ldr	r3, [r3, #12]
 801ca9c:	4917      	ldr	r1, [pc, #92]	; (801cafc <HAL_RCC_ClockConfig+0x264>)
 801ca9e:	4313      	orrs	r3, r2
 801caa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801caa2:	687b      	ldr	r3, [r7, #4]
 801caa4:	681b      	ldr	r3, [r3, #0]
 801caa6:	f003 0308 	and.w	r3, r3, #8
 801caaa:	2b00      	cmp	r3, #0
 801caac:	d009      	beq.n	801cac2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801caae:	4b13      	ldr	r3, [pc, #76]	; (801cafc <HAL_RCC_ClockConfig+0x264>)
 801cab0:	689b      	ldr	r3, [r3, #8]
 801cab2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801cab6:	687b      	ldr	r3, [r7, #4]
 801cab8:	691b      	ldr	r3, [r3, #16]
 801caba:	00db      	lsls	r3, r3, #3
 801cabc:	490f      	ldr	r1, [pc, #60]	; (801cafc <HAL_RCC_ClockConfig+0x264>)
 801cabe:	4313      	orrs	r3, r2
 801cac0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801cac2:	f000 f825 	bl	801cb10 <HAL_RCC_GetSysClockFreq>
 801cac6:	4602      	mov	r2, r0
 801cac8:	4b0c      	ldr	r3, [pc, #48]	; (801cafc <HAL_RCC_ClockConfig+0x264>)
 801caca:	689b      	ldr	r3, [r3, #8]
 801cacc:	091b      	lsrs	r3, r3, #4
 801cace:	f003 030f 	and.w	r3, r3, #15
 801cad2:	490c      	ldr	r1, [pc, #48]	; (801cb04 <HAL_RCC_ClockConfig+0x26c>)
 801cad4:	5ccb      	ldrb	r3, [r1, r3]
 801cad6:	f003 031f 	and.w	r3, r3, #31
 801cada:	fa22 f303 	lsr.w	r3, r2, r3
 801cade:	4a0a      	ldr	r2, [pc, #40]	; (801cb08 <HAL_RCC_ClockConfig+0x270>)
 801cae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 801cae2:	4b0a      	ldr	r3, [pc, #40]	; (801cb0c <HAL_RCC_ClockConfig+0x274>)
 801cae4:	681b      	ldr	r3, [r3, #0]
 801cae6:	4618      	mov	r0, r3
 801cae8:	f7fc f8de 	bl	8018ca8 <HAL_InitTick>
 801caec:	4603      	mov	r3, r0
}
 801caee:	4618      	mov	r0, r3
 801caf0:	3718      	adds	r7, #24
 801caf2:	46bd      	mov	sp, r7
 801caf4:	bd80      	pop	{r7, pc}
 801caf6:	bf00      	nop
 801caf8:	40022000 	.word	0x40022000
 801cafc:	40021000 	.word	0x40021000
 801cb00:	04c4b400 	.word	0x04c4b400
 801cb04:	08023718 	.word	0x08023718
 801cb08:	20000000 	.word	0x20000000
 801cb0c:	20000004 	.word	0x20000004

0801cb10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801cb10:	b480      	push	{r7}
 801cb12:	b087      	sub	sp, #28
 801cb14:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 801cb16:	4b2c      	ldr	r3, [pc, #176]	; (801cbc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 801cb18:	689b      	ldr	r3, [r3, #8]
 801cb1a:	f003 030c 	and.w	r3, r3, #12
 801cb1e:	2b04      	cmp	r3, #4
 801cb20:	d102      	bne.n	801cb28 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801cb22:	4b2a      	ldr	r3, [pc, #168]	; (801cbcc <HAL_RCC_GetSysClockFreq+0xbc>)
 801cb24:	613b      	str	r3, [r7, #16]
 801cb26:	e047      	b.n	801cbb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 801cb28:	4b27      	ldr	r3, [pc, #156]	; (801cbc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 801cb2a:	689b      	ldr	r3, [r3, #8]
 801cb2c:	f003 030c 	and.w	r3, r3, #12
 801cb30:	2b08      	cmp	r3, #8
 801cb32:	d102      	bne.n	801cb3a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801cb34:	4b25      	ldr	r3, [pc, #148]	; (801cbcc <HAL_RCC_GetSysClockFreq+0xbc>)
 801cb36:	613b      	str	r3, [r7, #16]
 801cb38:	e03e      	b.n	801cbb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 801cb3a:	4b23      	ldr	r3, [pc, #140]	; (801cbc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 801cb3c:	689b      	ldr	r3, [r3, #8]
 801cb3e:	f003 030c 	and.w	r3, r3, #12
 801cb42:	2b0c      	cmp	r3, #12
 801cb44:	d136      	bne.n	801cbb4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801cb46:	4b20      	ldr	r3, [pc, #128]	; (801cbc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 801cb48:	68db      	ldr	r3, [r3, #12]
 801cb4a:	f003 0303 	and.w	r3, r3, #3
 801cb4e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801cb50:	4b1d      	ldr	r3, [pc, #116]	; (801cbc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 801cb52:	68db      	ldr	r3, [r3, #12]
 801cb54:	091b      	lsrs	r3, r3, #4
 801cb56:	f003 030f 	and.w	r3, r3, #15
 801cb5a:	3301      	adds	r3, #1
 801cb5c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 801cb5e:	68fb      	ldr	r3, [r7, #12]
 801cb60:	2b03      	cmp	r3, #3
 801cb62:	d10c      	bne.n	801cb7e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801cb64:	4a19      	ldr	r2, [pc, #100]	; (801cbcc <HAL_RCC_GetSysClockFreq+0xbc>)
 801cb66:	68bb      	ldr	r3, [r7, #8]
 801cb68:	fbb2 f3f3 	udiv	r3, r2, r3
 801cb6c:	4a16      	ldr	r2, [pc, #88]	; (801cbc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 801cb6e:	68d2      	ldr	r2, [r2, #12]
 801cb70:	0a12      	lsrs	r2, r2, #8
 801cb72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801cb76:	fb02 f303 	mul.w	r3, r2, r3
 801cb7a:	617b      	str	r3, [r7, #20]
      break;
 801cb7c:	e00c      	b.n	801cb98 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801cb7e:	4a13      	ldr	r2, [pc, #76]	; (801cbcc <HAL_RCC_GetSysClockFreq+0xbc>)
 801cb80:	68bb      	ldr	r3, [r7, #8]
 801cb82:	fbb2 f3f3 	udiv	r3, r2, r3
 801cb86:	4a10      	ldr	r2, [pc, #64]	; (801cbc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 801cb88:	68d2      	ldr	r2, [r2, #12]
 801cb8a:	0a12      	lsrs	r2, r2, #8
 801cb8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801cb90:	fb02 f303 	mul.w	r3, r2, r3
 801cb94:	617b      	str	r3, [r7, #20]
      break;
 801cb96:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801cb98:	4b0b      	ldr	r3, [pc, #44]	; (801cbc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 801cb9a:	68db      	ldr	r3, [r3, #12]
 801cb9c:	0e5b      	lsrs	r3, r3, #25
 801cb9e:	f003 0303 	and.w	r3, r3, #3
 801cba2:	3301      	adds	r3, #1
 801cba4:	005b      	lsls	r3, r3, #1
 801cba6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 801cba8:	697a      	ldr	r2, [r7, #20]
 801cbaa:	687b      	ldr	r3, [r7, #4]
 801cbac:	fbb2 f3f3 	udiv	r3, r2, r3
 801cbb0:	613b      	str	r3, [r7, #16]
 801cbb2:	e001      	b.n	801cbb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 801cbb4:	2300      	movs	r3, #0
 801cbb6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 801cbb8:	693b      	ldr	r3, [r7, #16]
}
 801cbba:	4618      	mov	r0, r3
 801cbbc:	371c      	adds	r7, #28
 801cbbe:	46bd      	mov	sp, r7
 801cbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbc4:	4770      	bx	lr
 801cbc6:	bf00      	nop
 801cbc8:	40021000 	.word	0x40021000
 801cbcc:	00f42400 	.word	0x00f42400

0801cbd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801cbd0:	b480      	push	{r7}
 801cbd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801cbd4:	4b03      	ldr	r3, [pc, #12]	; (801cbe4 <HAL_RCC_GetHCLKFreq+0x14>)
 801cbd6:	681b      	ldr	r3, [r3, #0]
}
 801cbd8:	4618      	mov	r0, r3
 801cbda:	46bd      	mov	sp, r7
 801cbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbe0:	4770      	bx	lr
 801cbe2:	bf00      	nop
 801cbe4:	20000000 	.word	0x20000000

0801cbe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801cbe8:	b580      	push	{r7, lr}
 801cbea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801cbec:	f7ff fff0 	bl	801cbd0 <HAL_RCC_GetHCLKFreq>
 801cbf0:	4602      	mov	r2, r0
 801cbf2:	4b06      	ldr	r3, [pc, #24]	; (801cc0c <HAL_RCC_GetPCLK1Freq+0x24>)
 801cbf4:	689b      	ldr	r3, [r3, #8]
 801cbf6:	0a1b      	lsrs	r3, r3, #8
 801cbf8:	f003 0307 	and.w	r3, r3, #7
 801cbfc:	4904      	ldr	r1, [pc, #16]	; (801cc10 <HAL_RCC_GetPCLK1Freq+0x28>)
 801cbfe:	5ccb      	ldrb	r3, [r1, r3]
 801cc00:	f003 031f 	and.w	r3, r3, #31
 801cc04:	fa22 f303 	lsr.w	r3, r2, r3
}
 801cc08:	4618      	mov	r0, r3
 801cc0a:	bd80      	pop	{r7, pc}
 801cc0c:	40021000 	.word	0x40021000
 801cc10:	08023728 	.word	0x08023728

0801cc14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801cc14:	b580      	push	{r7, lr}
 801cc16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 801cc18:	f7ff ffda 	bl	801cbd0 <HAL_RCC_GetHCLKFreq>
 801cc1c:	4602      	mov	r2, r0
 801cc1e:	4b06      	ldr	r3, [pc, #24]	; (801cc38 <HAL_RCC_GetPCLK2Freq+0x24>)
 801cc20:	689b      	ldr	r3, [r3, #8]
 801cc22:	0adb      	lsrs	r3, r3, #11
 801cc24:	f003 0307 	and.w	r3, r3, #7
 801cc28:	4904      	ldr	r1, [pc, #16]	; (801cc3c <HAL_RCC_GetPCLK2Freq+0x28>)
 801cc2a:	5ccb      	ldrb	r3, [r1, r3]
 801cc2c:	f003 031f 	and.w	r3, r3, #31
 801cc30:	fa22 f303 	lsr.w	r3, r2, r3
}
 801cc34:	4618      	mov	r0, r3
 801cc36:	bd80      	pop	{r7, pc}
 801cc38:	40021000 	.word	0x40021000
 801cc3c:	08023728 	.word	0x08023728

0801cc40 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 801cc40:	b480      	push	{r7}
 801cc42:	b087      	sub	sp, #28
 801cc44:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801cc46:	4b1e      	ldr	r3, [pc, #120]	; (801ccc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801cc48:	68db      	ldr	r3, [r3, #12]
 801cc4a:	f003 0303 	and.w	r3, r3, #3
 801cc4e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801cc50:	4b1b      	ldr	r3, [pc, #108]	; (801ccc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801cc52:	68db      	ldr	r3, [r3, #12]
 801cc54:	091b      	lsrs	r3, r3, #4
 801cc56:	f003 030f 	and.w	r3, r3, #15
 801cc5a:	3301      	adds	r3, #1
 801cc5c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 801cc5e:	693b      	ldr	r3, [r7, #16]
 801cc60:	2b03      	cmp	r3, #3
 801cc62:	d10c      	bne.n	801cc7e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801cc64:	4a17      	ldr	r2, [pc, #92]	; (801ccc4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801cc66:	68fb      	ldr	r3, [r7, #12]
 801cc68:	fbb2 f3f3 	udiv	r3, r2, r3
 801cc6c:	4a14      	ldr	r2, [pc, #80]	; (801ccc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801cc6e:	68d2      	ldr	r2, [r2, #12]
 801cc70:	0a12      	lsrs	r2, r2, #8
 801cc72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801cc76:	fb02 f303 	mul.w	r3, r2, r3
 801cc7a:	617b      	str	r3, [r7, #20]
    break;
 801cc7c:	e00c      	b.n	801cc98 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801cc7e:	4a11      	ldr	r2, [pc, #68]	; (801ccc4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801cc80:	68fb      	ldr	r3, [r7, #12]
 801cc82:	fbb2 f3f3 	udiv	r3, r2, r3
 801cc86:	4a0e      	ldr	r2, [pc, #56]	; (801ccc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801cc88:	68d2      	ldr	r2, [r2, #12]
 801cc8a:	0a12      	lsrs	r2, r2, #8
 801cc8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801cc90:	fb02 f303 	mul.w	r3, r2, r3
 801cc94:	617b      	str	r3, [r7, #20]
    break;
 801cc96:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801cc98:	4b09      	ldr	r3, [pc, #36]	; (801ccc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801cc9a:	68db      	ldr	r3, [r3, #12]
 801cc9c:	0e5b      	lsrs	r3, r3, #25
 801cc9e:	f003 0303 	and.w	r3, r3, #3
 801cca2:	3301      	adds	r3, #1
 801cca4:	005b      	lsls	r3, r3, #1
 801cca6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 801cca8:	697a      	ldr	r2, [r7, #20]
 801ccaa:	68bb      	ldr	r3, [r7, #8]
 801ccac:	fbb2 f3f3 	udiv	r3, r2, r3
 801ccb0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 801ccb2:	687b      	ldr	r3, [r7, #4]
}
 801ccb4:	4618      	mov	r0, r3
 801ccb6:	371c      	adds	r7, #28
 801ccb8:	46bd      	mov	sp, r7
 801ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccbe:	4770      	bx	lr
 801ccc0:	40021000 	.word	0x40021000
 801ccc4:	00f42400 	.word	0x00f42400

0801ccc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801ccc8:	b580      	push	{r7, lr}
 801ccca:	b086      	sub	sp, #24
 801cccc:	af00      	add	r7, sp, #0
 801ccce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801ccd0:	2300      	movs	r3, #0
 801ccd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801ccd4:	2300      	movs	r3, #0
 801ccd6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801ccd8:	687b      	ldr	r3, [r7, #4]
 801ccda:	681b      	ldr	r3, [r3, #0]
 801ccdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801cce0:	2b00      	cmp	r3, #0
 801cce2:	f000 8098 	beq.w	801ce16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801cce6:	2300      	movs	r3, #0
 801cce8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801ccea:	4b43      	ldr	r3, [pc, #268]	; (801cdf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ccec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ccee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	d10d      	bne.n	801cd12 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801ccf6:	4b40      	ldr	r3, [pc, #256]	; (801cdf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ccf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ccfa:	4a3f      	ldr	r2, [pc, #252]	; (801cdf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ccfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801cd00:	6593      	str	r3, [r2, #88]	; 0x58
 801cd02:	4b3d      	ldr	r3, [pc, #244]	; (801cdf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cd04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cd06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801cd0a:	60bb      	str	r3, [r7, #8]
 801cd0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801cd0e:	2301      	movs	r3, #1
 801cd10:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801cd12:	4b3a      	ldr	r3, [pc, #232]	; (801cdfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801cd14:	681b      	ldr	r3, [r3, #0]
 801cd16:	4a39      	ldr	r2, [pc, #228]	; (801cdfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801cd18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801cd1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801cd1e:	f7fc f80f 	bl	8018d40 <HAL_GetTick>
 801cd22:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801cd24:	e009      	b.n	801cd3a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801cd26:	f7fc f80b 	bl	8018d40 <HAL_GetTick>
 801cd2a:	4602      	mov	r2, r0
 801cd2c:	68fb      	ldr	r3, [r7, #12]
 801cd2e:	1ad3      	subs	r3, r2, r3
 801cd30:	2b02      	cmp	r3, #2
 801cd32:	d902      	bls.n	801cd3a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 801cd34:	2303      	movs	r3, #3
 801cd36:	74fb      	strb	r3, [r7, #19]
        break;
 801cd38:	e005      	b.n	801cd46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801cd3a:	4b30      	ldr	r3, [pc, #192]	; (801cdfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801cd3c:	681b      	ldr	r3, [r3, #0]
 801cd3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cd42:	2b00      	cmp	r3, #0
 801cd44:	d0ef      	beq.n	801cd26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 801cd46:	7cfb      	ldrb	r3, [r7, #19]
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	d159      	bne.n	801ce00 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801cd4c:	4b2a      	ldr	r3, [pc, #168]	; (801cdf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cd4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cd52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801cd56:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801cd58:	697b      	ldr	r3, [r7, #20]
 801cd5a:	2b00      	cmp	r3, #0
 801cd5c:	d01e      	beq.n	801cd9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 801cd5e:	687b      	ldr	r3, [r7, #4]
 801cd60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cd62:	697a      	ldr	r2, [r7, #20]
 801cd64:	429a      	cmp	r2, r3
 801cd66:	d019      	beq.n	801cd9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801cd68:	4b23      	ldr	r3, [pc, #140]	; (801cdf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cd6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cd6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801cd72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801cd74:	4b20      	ldr	r3, [pc, #128]	; (801cdf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cd76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cd7a:	4a1f      	ldr	r2, [pc, #124]	; (801cdf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cd7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801cd80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801cd84:	4b1c      	ldr	r3, [pc, #112]	; (801cdf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cd86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cd8a:	4a1b      	ldr	r2, [pc, #108]	; (801cdf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cd8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801cd90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801cd94:	4a18      	ldr	r2, [pc, #96]	; (801cdf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cd96:	697b      	ldr	r3, [r7, #20]
 801cd98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801cd9c:	697b      	ldr	r3, [r7, #20]
 801cd9e:	f003 0301 	and.w	r3, r3, #1
 801cda2:	2b00      	cmp	r3, #0
 801cda4:	d016      	beq.n	801cdd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cda6:	f7fb ffcb 	bl	8018d40 <HAL_GetTick>
 801cdaa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801cdac:	e00b      	b.n	801cdc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801cdae:	f7fb ffc7 	bl	8018d40 <HAL_GetTick>
 801cdb2:	4602      	mov	r2, r0
 801cdb4:	68fb      	ldr	r3, [r7, #12]
 801cdb6:	1ad3      	subs	r3, r2, r3
 801cdb8:	f241 3288 	movw	r2, #5000	; 0x1388
 801cdbc:	4293      	cmp	r3, r2
 801cdbe:	d902      	bls.n	801cdc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 801cdc0:	2303      	movs	r3, #3
 801cdc2:	74fb      	strb	r3, [r7, #19]
            break;
 801cdc4:	e006      	b.n	801cdd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801cdc6:	4b0c      	ldr	r3, [pc, #48]	; (801cdf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cdc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cdcc:	f003 0302 	and.w	r3, r3, #2
 801cdd0:	2b00      	cmp	r3, #0
 801cdd2:	d0ec      	beq.n	801cdae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 801cdd4:	7cfb      	ldrb	r3, [r7, #19]
 801cdd6:	2b00      	cmp	r3, #0
 801cdd8:	d10b      	bne.n	801cdf2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801cdda:	4b07      	ldr	r3, [pc, #28]	; (801cdf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cde0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801cde4:	687b      	ldr	r3, [r7, #4]
 801cde6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cde8:	4903      	ldr	r1, [pc, #12]	; (801cdf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cdea:	4313      	orrs	r3, r2
 801cdec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801cdf0:	e008      	b.n	801ce04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801cdf2:	7cfb      	ldrb	r3, [r7, #19]
 801cdf4:	74bb      	strb	r3, [r7, #18]
 801cdf6:	e005      	b.n	801ce04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 801cdf8:	40021000 	.word	0x40021000
 801cdfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ce00:	7cfb      	ldrb	r3, [r7, #19]
 801ce02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801ce04:	7c7b      	ldrb	r3, [r7, #17]
 801ce06:	2b01      	cmp	r3, #1
 801ce08:	d105      	bne.n	801ce16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801ce0a:	4ba7      	ldr	r3, [pc, #668]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ce0e:	4aa6      	ldr	r2, [pc, #664]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801ce14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801ce16:	687b      	ldr	r3, [r7, #4]
 801ce18:	681b      	ldr	r3, [r3, #0]
 801ce1a:	f003 0301 	and.w	r3, r3, #1
 801ce1e:	2b00      	cmp	r3, #0
 801ce20:	d00a      	beq.n	801ce38 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801ce22:	4ba1      	ldr	r3, [pc, #644]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ce28:	f023 0203 	bic.w	r2, r3, #3
 801ce2c:	687b      	ldr	r3, [r7, #4]
 801ce2e:	685b      	ldr	r3, [r3, #4]
 801ce30:	499d      	ldr	r1, [pc, #628]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce32:	4313      	orrs	r3, r2
 801ce34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801ce38:	687b      	ldr	r3, [r7, #4]
 801ce3a:	681b      	ldr	r3, [r3, #0]
 801ce3c:	f003 0302 	and.w	r3, r3, #2
 801ce40:	2b00      	cmp	r3, #0
 801ce42:	d00a      	beq.n	801ce5a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801ce44:	4b98      	ldr	r3, [pc, #608]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ce4a:	f023 020c 	bic.w	r2, r3, #12
 801ce4e:	687b      	ldr	r3, [r7, #4]
 801ce50:	689b      	ldr	r3, [r3, #8]
 801ce52:	4995      	ldr	r1, [pc, #596]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce54:	4313      	orrs	r3, r2
 801ce56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801ce5a:	687b      	ldr	r3, [r7, #4]
 801ce5c:	681b      	ldr	r3, [r3, #0]
 801ce5e:	f003 0304 	and.w	r3, r3, #4
 801ce62:	2b00      	cmp	r3, #0
 801ce64:	d00a      	beq.n	801ce7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801ce66:	4b90      	ldr	r3, [pc, #576]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ce6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801ce70:	687b      	ldr	r3, [r7, #4]
 801ce72:	68db      	ldr	r3, [r3, #12]
 801ce74:	498c      	ldr	r1, [pc, #560]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce76:	4313      	orrs	r3, r2
 801ce78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801ce7c:	687b      	ldr	r3, [r7, #4]
 801ce7e:	681b      	ldr	r3, [r3, #0]
 801ce80:	f003 0308 	and.w	r3, r3, #8
 801ce84:	2b00      	cmp	r3, #0
 801ce86:	d00a      	beq.n	801ce9e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801ce88:	4b87      	ldr	r3, [pc, #540]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ce8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801ce92:	687b      	ldr	r3, [r7, #4]
 801ce94:	691b      	ldr	r3, [r3, #16]
 801ce96:	4984      	ldr	r1, [pc, #528]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce98:	4313      	orrs	r3, r2
 801ce9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	681b      	ldr	r3, [r3, #0]
 801cea2:	f003 0310 	and.w	r3, r3, #16
 801cea6:	2b00      	cmp	r3, #0
 801cea8:	d00a      	beq.n	801cec0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801ceaa:	4b7f      	ldr	r3, [pc, #508]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ceac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ceb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	695b      	ldr	r3, [r3, #20]
 801ceb8:	497b      	ldr	r1, [pc, #492]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ceba:	4313      	orrs	r3, r2
 801cebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801cec0:	687b      	ldr	r3, [r7, #4]
 801cec2:	681b      	ldr	r3, [r3, #0]
 801cec4:	f003 0320 	and.w	r3, r3, #32
 801cec8:	2b00      	cmp	r3, #0
 801ceca:	d00a      	beq.n	801cee2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801cecc:	4b76      	ldr	r3, [pc, #472]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ced2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801ced6:	687b      	ldr	r3, [r7, #4]
 801ced8:	699b      	ldr	r3, [r3, #24]
 801ceda:	4973      	ldr	r1, [pc, #460]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cedc:	4313      	orrs	r3, r2
 801cede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801cee2:	687b      	ldr	r3, [r7, #4]
 801cee4:	681b      	ldr	r3, [r3, #0]
 801cee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ceea:	2b00      	cmp	r3, #0
 801ceec:	d00a      	beq.n	801cf04 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801ceee:	4b6e      	ldr	r3, [pc, #440]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cef4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801cef8:	687b      	ldr	r3, [r7, #4]
 801cefa:	69db      	ldr	r3, [r3, #28]
 801cefc:	496a      	ldr	r1, [pc, #424]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cefe:	4313      	orrs	r3, r2
 801cf00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801cf04:	687b      	ldr	r3, [r7, #4]
 801cf06:	681b      	ldr	r3, [r3, #0]
 801cf08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cf0c:	2b00      	cmp	r3, #0
 801cf0e:	d00a      	beq.n	801cf26 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801cf10:	4b65      	ldr	r3, [pc, #404]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf16:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801cf1a:	687b      	ldr	r3, [r7, #4]
 801cf1c:	6a1b      	ldr	r3, [r3, #32]
 801cf1e:	4962      	ldr	r1, [pc, #392]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf20:	4313      	orrs	r3, r2
 801cf22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801cf26:	687b      	ldr	r3, [r7, #4]
 801cf28:	681b      	ldr	r3, [r3, #0]
 801cf2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	d00a      	beq.n	801cf48 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801cf32:	4b5d      	ldr	r3, [pc, #372]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801cf3c:	687b      	ldr	r3, [r7, #4]
 801cf3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cf40:	4959      	ldr	r1, [pc, #356]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf42:	4313      	orrs	r3, r2
 801cf44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801cf48:	687b      	ldr	r3, [r7, #4]
 801cf4a:	681b      	ldr	r3, [r3, #0]
 801cf4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801cf50:	2b00      	cmp	r3, #0
 801cf52:	d00a      	beq.n	801cf6a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801cf54:	4b54      	ldr	r3, [pc, #336]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf5a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801cf5e:	687b      	ldr	r3, [r7, #4]
 801cf60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf62:	4951      	ldr	r1, [pc, #324]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf64:	4313      	orrs	r3, r2
 801cf66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801cf6a:	687b      	ldr	r3, [r7, #4]
 801cf6c:	681b      	ldr	r3, [r3, #0]
 801cf6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cf72:	2b00      	cmp	r3, #0
 801cf74:	d015      	beq.n	801cfa2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801cf76:	4b4c      	ldr	r3, [pc, #304]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801cf80:	687b      	ldr	r3, [r7, #4]
 801cf82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf84:	4948      	ldr	r1, [pc, #288]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf86:	4313      	orrs	r3, r2
 801cf88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 801cf8c:	687b      	ldr	r3, [r7, #4]
 801cf8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801cf94:	d105      	bne.n	801cfa2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801cf96:	4b44      	ldr	r3, [pc, #272]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf98:	68db      	ldr	r3, [r3, #12]
 801cf9a:	4a43      	ldr	r2, [pc, #268]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cfa0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 801cfa2:	687b      	ldr	r3, [r7, #4]
 801cfa4:	681b      	ldr	r3, [r3, #0]
 801cfa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801cfaa:	2b00      	cmp	r3, #0
 801cfac:	d015      	beq.n	801cfda <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801cfae:	4b3e      	ldr	r3, [pc, #248]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cfb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cfb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801cfb8:	687b      	ldr	r3, [r7, #4]
 801cfba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cfbc:	493a      	ldr	r1, [pc, #232]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cfbe:	4313      	orrs	r3, r2
 801cfc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 801cfc4:	687b      	ldr	r3, [r7, #4]
 801cfc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cfc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801cfcc:	d105      	bne.n	801cfda <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801cfce:	4b36      	ldr	r3, [pc, #216]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cfd0:	68db      	ldr	r3, [r3, #12]
 801cfd2:	4a35      	ldr	r2, [pc, #212]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cfd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cfd8:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801cfda:	687b      	ldr	r3, [r7, #4]
 801cfdc:	681b      	ldr	r3, [r3, #0]
 801cfde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801cfe2:	2b00      	cmp	r3, #0
 801cfe4:	d015      	beq.n	801d012 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801cfe6:	4b30      	ldr	r3, [pc, #192]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cfe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cfec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801cff0:	687b      	ldr	r3, [r7, #4]
 801cff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cff4:	492c      	ldr	r1, [pc, #176]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cff6:	4313      	orrs	r3, r2
 801cff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 801cffc:	687b      	ldr	r3, [r7, #4]
 801cffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d000:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801d004:	d105      	bne.n	801d012 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d006:	4b28      	ldr	r3, [pc, #160]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d008:	68db      	ldr	r3, [r3, #12]
 801d00a:	4a27      	ldr	r2, [pc, #156]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d00c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d010:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801d012:	687b      	ldr	r3, [r7, #4]
 801d014:	681b      	ldr	r3, [r3, #0]
 801d016:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d01a:	2b00      	cmp	r3, #0
 801d01c:	d015      	beq.n	801d04a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801d01e:	4b22      	ldr	r3, [pc, #136]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d024:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801d028:	687b      	ldr	r3, [r7, #4]
 801d02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d02c:	491e      	ldr	r1, [pc, #120]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d02e:	4313      	orrs	r3, r2
 801d030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801d034:	687b      	ldr	r3, [r7, #4]
 801d036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d038:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d03c:	d105      	bne.n	801d04a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d03e:	4b1a      	ldr	r3, [pc, #104]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d040:	68db      	ldr	r3, [r3, #12]
 801d042:	4a19      	ldr	r2, [pc, #100]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d044:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d048:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801d04a:	687b      	ldr	r3, [r7, #4]
 801d04c:	681b      	ldr	r3, [r3, #0]
 801d04e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801d052:	2b00      	cmp	r3, #0
 801d054:	d015      	beq.n	801d082 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801d056:	4b14      	ldr	r3, [pc, #80]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d05c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801d060:	687b      	ldr	r3, [r7, #4]
 801d062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d064:	4910      	ldr	r1, [pc, #64]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d066:	4313      	orrs	r3, r2
 801d068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801d06c:	687b      	ldr	r3, [r7, #4]
 801d06e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d070:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d074:	d105      	bne.n	801d082 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d076:	4b0c      	ldr	r3, [pc, #48]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d078:	68db      	ldr	r3, [r3, #12]
 801d07a:	4a0b      	ldr	r2, [pc, #44]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d07c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d080:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 801d082:	687b      	ldr	r3, [r7, #4]
 801d084:	681b      	ldr	r3, [r3, #0]
 801d086:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801d08a:	2b00      	cmp	r3, #0
 801d08c:	d018      	beq.n	801d0c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 801d08e:	4b06      	ldr	r3, [pc, #24]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d094:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d09c:	4902      	ldr	r1, [pc, #8]	; (801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d09e:	4313      	orrs	r3, r2
 801d0a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 801d0a4:	687b      	ldr	r3, [r7, #4]
 801d0a6:	e001      	b.n	801d0ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 801d0a8:	40021000 	.word	0x40021000
 801d0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d0ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d0b2:	d105      	bne.n	801d0c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801d0b4:	4b21      	ldr	r3, [pc, #132]	; (801d13c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d0b6:	68db      	ldr	r3, [r3, #12]
 801d0b8:	4a20      	ldr	r2, [pc, #128]	; (801d13c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d0ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d0be:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 801d0c0:	687b      	ldr	r3, [r7, #4]
 801d0c2:	681b      	ldr	r3, [r3, #0]
 801d0c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801d0c8:	2b00      	cmp	r3, #0
 801d0ca:	d015      	beq.n	801d0f8 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 801d0cc:	4b1b      	ldr	r3, [pc, #108]	; (801d13c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d0ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d0d2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 801d0d6:	687b      	ldr	r3, [r7, #4]
 801d0d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d0da:	4918      	ldr	r1, [pc, #96]	; (801d13c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d0dc:	4313      	orrs	r3, r2
 801d0de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 801d0e2:	687b      	ldr	r3, [r7, #4]
 801d0e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d0e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d0ea:	d105      	bne.n	801d0f8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801d0ec:	4b13      	ldr	r3, [pc, #76]	; (801d13c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d0ee:	68db      	ldr	r3, [r3, #12]
 801d0f0:	4a12      	ldr	r2, [pc, #72]	; (801d13c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d0f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d0f6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801d0f8:	687b      	ldr	r3, [r7, #4]
 801d0fa:	681b      	ldr	r3, [r3, #0]
 801d0fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801d100:	2b00      	cmp	r3, #0
 801d102:	d015      	beq.n	801d130 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801d104:	4b0d      	ldr	r3, [pc, #52]	; (801d13c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d106:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801d10a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801d10e:	687b      	ldr	r3, [r7, #4]
 801d110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d112:	490a      	ldr	r1, [pc, #40]	; (801d13c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d114:	4313      	orrs	r3, r2
 801d116:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 801d11a:	687b      	ldr	r3, [r7, #4]
 801d11c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d11e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801d122:	d105      	bne.n	801d130 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d124:	4b05      	ldr	r3, [pc, #20]	; (801d13c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d126:	68db      	ldr	r3, [r3, #12]
 801d128:	4a04      	ldr	r2, [pc, #16]	; (801d13c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d12a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d12e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 801d130:	7cbb      	ldrb	r3, [r7, #18]
}
 801d132:	4618      	mov	r0, r3
 801d134:	3718      	adds	r7, #24
 801d136:	46bd      	mov	sp, r7
 801d138:	bd80      	pop	{r7, pc}
 801d13a:	bf00      	nop
 801d13c:	40021000 	.word	0x40021000

0801d140 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801d140:	b580      	push	{r7, lr}
 801d142:	b084      	sub	sp, #16
 801d144:	af00      	add	r7, sp, #0
 801d146:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801d148:	687b      	ldr	r3, [r7, #4]
 801d14a:	2b00      	cmp	r3, #0
 801d14c:	d101      	bne.n	801d152 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801d14e:	2301      	movs	r3, #1
 801d150:	e09d      	b.n	801d28e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801d152:	687b      	ldr	r3, [r7, #4]
 801d154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d156:	2b00      	cmp	r3, #0
 801d158:	d108      	bne.n	801d16c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801d15a:	687b      	ldr	r3, [r7, #4]
 801d15c:	685b      	ldr	r3, [r3, #4]
 801d15e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d162:	d009      	beq.n	801d178 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801d164:	687b      	ldr	r3, [r7, #4]
 801d166:	2200      	movs	r2, #0
 801d168:	61da      	str	r2, [r3, #28]
 801d16a:	e005      	b.n	801d178 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801d16c:	687b      	ldr	r3, [r7, #4]
 801d16e:	2200      	movs	r2, #0
 801d170:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801d172:	687b      	ldr	r3, [r7, #4]
 801d174:	2200      	movs	r2, #0
 801d176:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801d178:	687b      	ldr	r3, [r7, #4]
 801d17a:	2200      	movs	r2, #0
 801d17c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801d17e:	687b      	ldr	r3, [r7, #4]
 801d180:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d184:	b2db      	uxtb	r3, r3
 801d186:	2b00      	cmp	r3, #0
 801d188:	d106      	bne.n	801d198 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801d18a:	687b      	ldr	r3, [r7, #4]
 801d18c:	2200      	movs	r2, #0
 801d18e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801d192:	6878      	ldr	r0, [r7, #4]
 801d194:	f7fa f8f2 	bl	801737c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801d198:	687b      	ldr	r3, [r7, #4]
 801d19a:	2202      	movs	r2, #2
 801d19c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801d1a0:	687b      	ldr	r3, [r7, #4]
 801d1a2:	681b      	ldr	r3, [r3, #0]
 801d1a4:	681a      	ldr	r2, [r3, #0]
 801d1a6:	687b      	ldr	r3, [r7, #4]
 801d1a8:	681b      	ldr	r3, [r3, #0]
 801d1aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d1ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d1b0:	687b      	ldr	r3, [r7, #4]
 801d1b2:	68db      	ldr	r3, [r3, #12]
 801d1b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d1b8:	d902      	bls.n	801d1c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801d1ba:	2300      	movs	r3, #0
 801d1bc:	60fb      	str	r3, [r7, #12]
 801d1be:	e002      	b.n	801d1c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801d1c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d1c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801d1c6:	687b      	ldr	r3, [r7, #4]
 801d1c8:	68db      	ldr	r3, [r3, #12]
 801d1ca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801d1ce:	d007      	beq.n	801d1e0 <HAL_SPI_Init+0xa0>
 801d1d0:	687b      	ldr	r3, [r7, #4]
 801d1d2:	68db      	ldr	r3, [r3, #12]
 801d1d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d1d8:	d002      	beq.n	801d1e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801d1da:	687b      	ldr	r3, [r7, #4]
 801d1dc:	2200      	movs	r2, #0
 801d1de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801d1e0:	687b      	ldr	r3, [r7, #4]
 801d1e2:	685b      	ldr	r3, [r3, #4]
 801d1e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801d1e8:	687b      	ldr	r3, [r7, #4]
 801d1ea:	689b      	ldr	r3, [r3, #8]
 801d1ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801d1f0:	431a      	orrs	r2, r3
 801d1f2:	687b      	ldr	r3, [r7, #4]
 801d1f4:	691b      	ldr	r3, [r3, #16]
 801d1f6:	f003 0302 	and.w	r3, r3, #2
 801d1fa:	431a      	orrs	r2, r3
 801d1fc:	687b      	ldr	r3, [r7, #4]
 801d1fe:	695b      	ldr	r3, [r3, #20]
 801d200:	f003 0301 	and.w	r3, r3, #1
 801d204:	431a      	orrs	r2, r3
 801d206:	687b      	ldr	r3, [r7, #4]
 801d208:	699b      	ldr	r3, [r3, #24]
 801d20a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801d20e:	431a      	orrs	r2, r3
 801d210:	687b      	ldr	r3, [r7, #4]
 801d212:	69db      	ldr	r3, [r3, #28]
 801d214:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801d218:	431a      	orrs	r2, r3
 801d21a:	687b      	ldr	r3, [r7, #4]
 801d21c:	6a1b      	ldr	r3, [r3, #32]
 801d21e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d222:	ea42 0103 	orr.w	r1, r2, r3
 801d226:	687b      	ldr	r3, [r7, #4]
 801d228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d22a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801d22e:	687b      	ldr	r3, [r7, #4]
 801d230:	681b      	ldr	r3, [r3, #0]
 801d232:	430a      	orrs	r2, r1
 801d234:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801d236:	687b      	ldr	r3, [r7, #4]
 801d238:	699b      	ldr	r3, [r3, #24]
 801d23a:	0c1b      	lsrs	r3, r3, #16
 801d23c:	f003 0204 	and.w	r2, r3, #4
 801d240:	687b      	ldr	r3, [r7, #4]
 801d242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d244:	f003 0310 	and.w	r3, r3, #16
 801d248:	431a      	orrs	r2, r3
 801d24a:	687b      	ldr	r3, [r7, #4]
 801d24c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d24e:	f003 0308 	and.w	r3, r3, #8
 801d252:	431a      	orrs	r2, r3
 801d254:	687b      	ldr	r3, [r7, #4]
 801d256:	68db      	ldr	r3, [r3, #12]
 801d258:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801d25c:	ea42 0103 	orr.w	r1, r2, r3
 801d260:	68fb      	ldr	r3, [r7, #12]
 801d262:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801d266:	687b      	ldr	r3, [r7, #4]
 801d268:	681b      	ldr	r3, [r3, #0]
 801d26a:	430a      	orrs	r2, r1
 801d26c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801d26e:	687b      	ldr	r3, [r7, #4]
 801d270:	681b      	ldr	r3, [r3, #0]
 801d272:	69da      	ldr	r2, [r3, #28]
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	681b      	ldr	r3, [r3, #0]
 801d278:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801d27c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801d27e:	687b      	ldr	r3, [r7, #4]
 801d280:	2200      	movs	r2, #0
 801d282:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801d284:	687b      	ldr	r3, [r7, #4]
 801d286:	2201      	movs	r2, #1
 801d288:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801d28c:	2300      	movs	r3, #0
}
 801d28e:	4618      	mov	r0, r3
 801d290:	3710      	adds	r7, #16
 801d292:	46bd      	mov	sp, r7
 801d294:	bd80      	pop	{r7, pc}

0801d296 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801d296:	b580      	push	{r7, lr}
 801d298:	b088      	sub	sp, #32
 801d29a:	af00      	add	r7, sp, #0
 801d29c:	60f8      	str	r0, [r7, #12]
 801d29e:	60b9      	str	r1, [r7, #8]
 801d2a0:	603b      	str	r3, [r7, #0]
 801d2a2:	4613      	mov	r3, r2
 801d2a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801d2a6:	2300      	movs	r3, #0
 801d2a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801d2aa:	68fb      	ldr	r3, [r7, #12]
 801d2ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801d2b0:	2b01      	cmp	r3, #1
 801d2b2:	d101      	bne.n	801d2b8 <HAL_SPI_Transmit+0x22>
 801d2b4:	2302      	movs	r3, #2
 801d2b6:	e158      	b.n	801d56a <HAL_SPI_Transmit+0x2d4>
 801d2b8:	68fb      	ldr	r3, [r7, #12]
 801d2ba:	2201      	movs	r2, #1
 801d2bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801d2c0:	f7fb fd3e 	bl	8018d40 <HAL_GetTick>
 801d2c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801d2c6:	88fb      	ldrh	r3, [r7, #6]
 801d2c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801d2ca:	68fb      	ldr	r3, [r7, #12]
 801d2cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d2d0:	b2db      	uxtb	r3, r3
 801d2d2:	2b01      	cmp	r3, #1
 801d2d4:	d002      	beq.n	801d2dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801d2d6:	2302      	movs	r3, #2
 801d2d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 801d2da:	e13d      	b.n	801d558 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801d2dc:	68bb      	ldr	r3, [r7, #8]
 801d2de:	2b00      	cmp	r3, #0
 801d2e0:	d002      	beq.n	801d2e8 <HAL_SPI_Transmit+0x52>
 801d2e2:	88fb      	ldrh	r3, [r7, #6]
 801d2e4:	2b00      	cmp	r3, #0
 801d2e6:	d102      	bne.n	801d2ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801d2e8:	2301      	movs	r3, #1
 801d2ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 801d2ec:	e134      	b.n	801d558 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801d2ee:	68fb      	ldr	r3, [r7, #12]
 801d2f0:	2203      	movs	r2, #3
 801d2f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801d2f6:	68fb      	ldr	r3, [r7, #12]
 801d2f8:	2200      	movs	r2, #0
 801d2fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801d2fc:	68fb      	ldr	r3, [r7, #12]
 801d2fe:	68ba      	ldr	r2, [r7, #8]
 801d300:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801d302:	68fb      	ldr	r3, [r7, #12]
 801d304:	88fa      	ldrh	r2, [r7, #6]
 801d306:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801d308:	68fb      	ldr	r3, [r7, #12]
 801d30a:	88fa      	ldrh	r2, [r7, #6]
 801d30c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801d30e:	68fb      	ldr	r3, [r7, #12]
 801d310:	2200      	movs	r2, #0
 801d312:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801d314:	68fb      	ldr	r3, [r7, #12]
 801d316:	2200      	movs	r2, #0
 801d318:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801d31c:	68fb      	ldr	r3, [r7, #12]
 801d31e:	2200      	movs	r2, #0
 801d320:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801d324:	68fb      	ldr	r3, [r7, #12]
 801d326:	2200      	movs	r2, #0
 801d328:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801d32a:	68fb      	ldr	r3, [r7, #12]
 801d32c:	2200      	movs	r2, #0
 801d32e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d330:	68fb      	ldr	r3, [r7, #12]
 801d332:	689b      	ldr	r3, [r3, #8]
 801d334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d338:	d10f      	bne.n	801d35a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801d33a:	68fb      	ldr	r3, [r7, #12]
 801d33c:	681b      	ldr	r3, [r3, #0]
 801d33e:	681a      	ldr	r2, [r3, #0]
 801d340:	68fb      	ldr	r3, [r7, #12]
 801d342:	681b      	ldr	r3, [r3, #0]
 801d344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d348:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801d34a:	68fb      	ldr	r3, [r7, #12]
 801d34c:	681b      	ldr	r3, [r3, #0]
 801d34e:	681a      	ldr	r2, [r3, #0]
 801d350:	68fb      	ldr	r3, [r7, #12]
 801d352:	681b      	ldr	r3, [r3, #0]
 801d354:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801d358:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801d35a:	68fb      	ldr	r3, [r7, #12]
 801d35c:	681b      	ldr	r3, [r3, #0]
 801d35e:	681b      	ldr	r3, [r3, #0]
 801d360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d364:	2b40      	cmp	r3, #64	; 0x40
 801d366:	d007      	beq.n	801d378 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801d368:	68fb      	ldr	r3, [r7, #12]
 801d36a:	681b      	ldr	r3, [r3, #0]
 801d36c:	681a      	ldr	r2, [r3, #0]
 801d36e:	68fb      	ldr	r3, [r7, #12]
 801d370:	681b      	ldr	r3, [r3, #0]
 801d372:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801d376:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d378:	68fb      	ldr	r3, [r7, #12]
 801d37a:	68db      	ldr	r3, [r3, #12]
 801d37c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d380:	d94b      	bls.n	801d41a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801d382:	68fb      	ldr	r3, [r7, #12]
 801d384:	685b      	ldr	r3, [r3, #4]
 801d386:	2b00      	cmp	r3, #0
 801d388:	d002      	beq.n	801d390 <HAL_SPI_Transmit+0xfa>
 801d38a:	8afb      	ldrh	r3, [r7, #22]
 801d38c:	2b01      	cmp	r3, #1
 801d38e:	d13e      	bne.n	801d40e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d390:	68fb      	ldr	r3, [r7, #12]
 801d392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d394:	881a      	ldrh	r2, [r3, #0]
 801d396:	68fb      	ldr	r3, [r7, #12]
 801d398:	681b      	ldr	r3, [r3, #0]
 801d39a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801d39c:	68fb      	ldr	r3, [r7, #12]
 801d39e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d3a0:	1c9a      	adds	r2, r3, #2
 801d3a2:	68fb      	ldr	r3, [r7, #12]
 801d3a4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801d3a6:	68fb      	ldr	r3, [r7, #12]
 801d3a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d3aa:	b29b      	uxth	r3, r3
 801d3ac:	3b01      	subs	r3, #1
 801d3ae:	b29a      	uxth	r2, r3
 801d3b0:	68fb      	ldr	r3, [r7, #12]
 801d3b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801d3b4:	e02b      	b.n	801d40e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801d3b6:	68fb      	ldr	r3, [r7, #12]
 801d3b8:	681b      	ldr	r3, [r3, #0]
 801d3ba:	689b      	ldr	r3, [r3, #8]
 801d3bc:	f003 0302 	and.w	r3, r3, #2
 801d3c0:	2b02      	cmp	r3, #2
 801d3c2:	d112      	bne.n	801d3ea <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d3c4:	68fb      	ldr	r3, [r7, #12]
 801d3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d3c8:	881a      	ldrh	r2, [r3, #0]
 801d3ca:	68fb      	ldr	r3, [r7, #12]
 801d3cc:	681b      	ldr	r3, [r3, #0]
 801d3ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801d3d0:	68fb      	ldr	r3, [r7, #12]
 801d3d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d3d4:	1c9a      	adds	r2, r3, #2
 801d3d6:	68fb      	ldr	r3, [r7, #12]
 801d3d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801d3da:	68fb      	ldr	r3, [r7, #12]
 801d3dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d3de:	b29b      	uxth	r3, r3
 801d3e0:	3b01      	subs	r3, #1
 801d3e2:	b29a      	uxth	r2, r3
 801d3e4:	68fb      	ldr	r3, [r7, #12]
 801d3e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d3e8:	e011      	b.n	801d40e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d3ea:	f7fb fca9 	bl	8018d40 <HAL_GetTick>
 801d3ee:	4602      	mov	r2, r0
 801d3f0:	69bb      	ldr	r3, [r7, #24]
 801d3f2:	1ad3      	subs	r3, r2, r3
 801d3f4:	683a      	ldr	r2, [r7, #0]
 801d3f6:	429a      	cmp	r2, r3
 801d3f8:	d803      	bhi.n	801d402 <HAL_SPI_Transmit+0x16c>
 801d3fa:	683b      	ldr	r3, [r7, #0]
 801d3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d400:	d102      	bne.n	801d408 <HAL_SPI_Transmit+0x172>
 801d402:	683b      	ldr	r3, [r7, #0]
 801d404:	2b00      	cmp	r3, #0
 801d406:	d102      	bne.n	801d40e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801d408:	2303      	movs	r3, #3
 801d40a:	77fb      	strb	r3, [r7, #31]
          goto error;
 801d40c:	e0a4      	b.n	801d558 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801d40e:	68fb      	ldr	r3, [r7, #12]
 801d410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d412:	b29b      	uxth	r3, r3
 801d414:	2b00      	cmp	r3, #0
 801d416:	d1ce      	bne.n	801d3b6 <HAL_SPI_Transmit+0x120>
 801d418:	e07c      	b.n	801d514 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801d41a:	68fb      	ldr	r3, [r7, #12]
 801d41c:	685b      	ldr	r3, [r3, #4]
 801d41e:	2b00      	cmp	r3, #0
 801d420:	d002      	beq.n	801d428 <HAL_SPI_Transmit+0x192>
 801d422:	8afb      	ldrh	r3, [r7, #22]
 801d424:	2b01      	cmp	r3, #1
 801d426:	d170      	bne.n	801d50a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801d428:	68fb      	ldr	r3, [r7, #12]
 801d42a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d42c:	b29b      	uxth	r3, r3
 801d42e:	2b01      	cmp	r3, #1
 801d430:	d912      	bls.n	801d458 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d432:	68fb      	ldr	r3, [r7, #12]
 801d434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d436:	881a      	ldrh	r2, [r3, #0]
 801d438:	68fb      	ldr	r3, [r7, #12]
 801d43a:	681b      	ldr	r3, [r3, #0]
 801d43c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801d43e:	68fb      	ldr	r3, [r7, #12]
 801d440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d442:	1c9a      	adds	r2, r3, #2
 801d444:	68fb      	ldr	r3, [r7, #12]
 801d446:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801d448:	68fb      	ldr	r3, [r7, #12]
 801d44a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d44c:	b29b      	uxth	r3, r3
 801d44e:	3b02      	subs	r3, #2
 801d450:	b29a      	uxth	r2, r3
 801d452:	68fb      	ldr	r3, [r7, #12]
 801d454:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d456:	e058      	b.n	801d50a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801d458:	68fb      	ldr	r3, [r7, #12]
 801d45a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d45c:	68fb      	ldr	r3, [r7, #12]
 801d45e:	681b      	ldr	r3, [r3, #0]
 801d460:	330c      	adds	r3, #12
 801d462:	7812      	ldrb	r2, [r2, #0]
 801d464:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801d466:	68fb      	ldr	r3, [r7, #12]
 801d468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d46a:	1c5a      	adds	r2, r3, #1
 801d46c:	68fb      	ldr	r3, [r7, #12]
 801d46e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801d470:	68fb      	ldr	r3, [r7, #12]
 801d472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d474:	b29b      	uxth	r3, r3
 801d476:	3b01      	subs	r3, #1
 801d478:	b29a      	uxth	r2, r3
 801d47a:	68fb      	ldr	r3, [r7, #12]
 801d47c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801d47e:	e044      	b.n	801d50a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801d480:	68fb      	ldr	r3, [r7, #12]
 801d482:	681b      	ldr	r3, [r3, #0]
 801d484:	689b      	ldr	r3, [r3, #8]
 801d486:	f003 0302 	and.w	r3, r3, #2
 801d48a:	2b02      	cmp	r3, #2
 801d48c:	d12b      	bne.n	801d4e6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801d48e:	68fb      	ldr	r3, [r7, #12]
 801d490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d492:	b29b      	uxth	r3, r3
 801d494:	2b01      	cmp	r3, #1
 801d496:	d912      	bls.n	801d4be <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d498:	68fb      	ldr	r3, [r7, #12]
 801d49a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d49c:	881a      	ldrh	r2, [r3, #0]
 801d49e:	68fb      	ldr	r3, [r7, #12]
 801d4a0:	681b      	ldr	r3, [r3, #0]
 801d4a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801d4a4:	68fb      	ldr	r3, [r7, #12]
 801d4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4a8:	1c9a      	adds	r2, r3, #2
 801d4aa:	68fb      	ldr	r3, [r7, #12]
 801d4ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801d4ae:	68fb      	ldr	r3, [r7, #12]
 801d4b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d4b2:	b29b      	uxth	r3, r3
 801d4b4:	3b02      	subs	r3, #2
 801d4b6:	b29a      	uxth	r2, r3
 801d4b8:	68fb      	ldr	r3, [r7, #12]
 801d4ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d4bc:	e025      	b.n	801d50a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801d4be:	68fb      	ldr	r3, [r7, #12]
 801d4c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d4c2:	68fb      	ldr	r3, [r7, #12]
 801d4c4:	681b      	ldr	r3, [r3, #0]
 801d4c6:	330c      	adds	r3, #12
 801d4c8:	7812      	ldrb	r2, [r2, #0]
 801d4ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801d4cc:	68fb      	ldr	r3, [r7, #12]
 801d4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4d0:	1c5a      	adds	r2, r3, #1
 801d4d2:	68fb      	ldr	r3, [r7, #12]
 801d4d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801d4d6:	68fb      	ldr	r3, [r7, #12]
 801d4d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d4da:	b29b      	uxth	r3, r3
 801d4dc:	3b01      	subs	r3, #1
 801d4de:	b29a      	uxth	r2, r3
 801d4e0:	68fb      	ldr	r3, [r7, #12]
 801d4e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d4e4:	e011      	b.n	801d50a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d4e6:	f7fb fc2b 	bl	8018d40 <HAL_GetTick>
 801d4ea:	4602      	mov	r2, r0
 801d4ec:	69bb      	ldr	r3, [r7, #24]
 801d4ee:	1ad3      	subs	r3, r2, r3
 801d4f0:	683a      	ldr	r2, [r7, #0]
 801d4f2:	429a      	cmp	r2, r3
 801d4f4:	d803      	bhi.n	801d4fe <HAL_SPI_Transmit+0x268>
 801d4f6:	683b      	ldr	r3, [r7, #0]
 801d4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d4fc:	d102      	bne.n	801d504 <HAL_SPI_Transmit+0x26e>
 801d4fe:	683b      	ldr	r3, [r7, #0]
 801d500:	2b00      	cmp	r3, #0
 801d502:	d102      	bne.n	801d50a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801d504:	2303      	movs	r3, #3
 801d506:	77fb      	strb	r3, [r7, #31]
          goto error;
 801d508:	e026      	b.n	801d558 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801d50a:	68fb      	ldr	r3, [r7, #12]
 801d50c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d50e:	b29b      	uxth	r3, r3
 801d510:	2b00      	cmp	r3, #0
 801d512:	d1b5      	bne.n	801d480 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801d514:	69ba      	ldr	r2, [r7, #24]
 801d516:	6839      	ldr	r1, [r7, #0]
 801d518:	68f8      	ldr	r0, [r7, #12]
 801d51a:	f000 fce3 	bl	801dee4 <SPI_EndRxTxTransaction>
 801d51e:	4603      	mov	r3, r0
 801d520:	2b00      	cmp	r3, #0
 801d522:	d002      	beq.n	801d52a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801d524:	68fb      	ldr	r3, [r7, #12]
 801d526:	2220      	movs	r2, #32
 801d528:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801d52a:	68fb      	ldr	r3, [r7, #12]
 801d52c:	689b      	ldr	r3, [r3, #8]
 801d52e:	2b00      	cmp	r3, #0
 801d530:	d10a      	bne.n	801d548 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801d532:	2300      	movs	r3, #0
 801d534:	613b      	str	r3, [r7, #16]
 801d536:	68fb      	ldr	r3, [r7, #12]
 801d538:	681b      	ldr	r3, [r3, #0]
 801d53a:	68db      	ldr	r3, [r3, #12]
 801d53c:	613b      	str	r3, [r7, #16]
 801d53e:	68fb      	ldr	r3, [r7, #12]
 801d540:	681b      	ldr	r3, [r3, #0]
 801d542:	689b      	ldr	r3, [r3, #8]
 801d544:	613b      	str	r3, [r7, #16]
 801d546:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801d548:	68fb      	ldr	r3, [r7, #12]
 801d54a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d54c:	2b00      	cmp	r3, #0
 801d54e:	d002      	beq.n	801d556 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801d550:	2301      	movs	r3, #1
 801d552:	77fb      	strb	r3, [r7, #31]
 801d554:	e000      	b.n	801d558 <HAL_SPI_Transmit+0x2c2>
  }

error:
 801d556:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801d558:	68fb      	ldr	r3, [r7, #12]
 801d55a:	2201      	movs	r2, #1
 801d55c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801d560:	68fb      	ldr	r3, [r7, #12]
 801d562:	2200      	movs	r2, #0
 801d564:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801d568:	7ffb      	ldrb	r3, [r7, #31]
}
 801d56a:	4618      	mov	r0, r3
 801d56c:	3720      	adds	r7, #32
 801d56e:	46bd      	mov	sp, r7
 801d570:	bd80      	pop	{r7, pc}

0801d572 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801d572:	b580      	push	{r7, lr}
 801d574:	b088      	sub	sp, #32
 801d576:	af02      	add	r7, sp, #8
 801d578:	60f8      	str	r0, [r7, #12]
 801d57a:	60b9      	str	r1, [r7, #8]
 801d57c:	603b      	str	r3, [r7, #0]
 801d57e:	4613      	mov	r3, r2
 801d580:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801d582:	2300      	movs	r3, #0
 801d584:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801d586:	68fb      	ldr	r3, [r7, #12]
 801d588:	685b      	ldr	r3, [r3, #4]
 801d58a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d58e:	d112      	bne.n	801d5b6 <HAL_SPI_Receive+0x44>
 801d590:	68fb      	ldr	r3, [r7, #12]
 801d592:	689b      	ldr	r3, [r3, #8]
 801d594:	2b00      	cmp	r3, #0
 801d596:	d10e      	bne.n	801d5b6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801d598:	68fb      	ldr	r3, [r7, #12]
 801d59a:	2204      	movs	r2, #4
 801d59c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801d5a0:	88fa      	ldrh	r2, [r7, #6]
 801d5a2:	683b      	ldr	r3, [r7, #0]
 801d5a4:	9300      	str	r3, [sp, #0]
 801d5a6:	4613      	mov	r3, r2
 801d5a8:	68ba      	ldr	r2, [r7, #8]
 801d5aa:	68b9      	ldr	r1, [r7, #8]
 801d5ac:	68f8      	ldr	r0, [r7, #12]
 801d5ae:	f000 f910 	bl	801d7d2 <HAL_SPI_TransmitReceive>
 801d5b2:	4603      	mov	r3, r0
 801d5b4:	e109      	b.n	801d7ca <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801d5b6:	68fb      	ldr	r3, [r7, #12]
 801d5b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801d5bc:	2b01      	cmp	r3, #1
 801d5be:	d101      	bne.n	801d5c4 <HAL_SPI_Receive+0x52>
 801d5c0:	2302      	movs	r3, #2
 801d5c2:	e102      	b.n	801d7ca <HAL_SPI_Receive+0x258>
 801d5c4:	68fb      	ldr	r3, [r7, #12]
 801d5c6:	2201      	movs	r2, #1
 801d5c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801d5cc:	f7fb fbb8 	bl	8018d40 <HAL_GetTick>
 801d5d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801d5d2:	68fb      	ldr	r3, [r7, #12]
 801d5d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d5d8:	b2db      	uxtb	r3, r3
 801d5da:	2b01      	cmp	r3, #1
 801d5dc:	d002      	beq.n	801d5e4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801d5de:	2302      	movs	r3, #2
 801d5e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 801d5e2:	e0e9      	b.n	801d7b8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801d5e4:	68bb      	ldr	r3, [r7, #8]
 801d5e6:	2b00      	cmp	r3, #0
 801d5e8:	d002      	beq.n	801d5f0 <HAL_SPI_Receive+0x7e>
 801d5ea:	88fb      	ldrh	r3, [r7, #6]
 801d5ec:	2b00      	cmp	r3, #0
 801d5ee:	d102      	bne.n	801d5f6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801d5f0:	2301      	movs	r3, #1
 801d5f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 801d5f4:	e0e0      	b.n	801d7b8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801d5f6:	68fb      	ldr	r3, [r7, #12]
 801d5f8:	2204      	movs	r2, #4
 801d5fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801d5fe:	68fb      	ldr	r3, [r7, #12]
 801d600:	2200      	movs	r2, #0
 801d602:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801d604:	68fb      	ldr	r3, [r7, #12]
 801d606:	68ba      	ldr	r2, [r7, #8]
 801d608:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801d60a:	68fb      	ldr	r3, [r7, #12]
 801d60c:	88fa      	ldrh	r2, [r7, #6]
 801d60e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801d612:	68fb      	ldr	r3, [r7, #12]
 801d614:	88fa      	ldrh	r2, [r7, #6]
 801d616:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801d61a:	68fb      	ldr	r3, [r7, #12]
 801d61c:	2200      	movs	r2, #0
 801d61e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801d620:	68fb      	ldr	r3, [r7, #12]
 801d622:	2200      	movs	r2, #0
 801d624:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801d626:	68fb      	ldr	r3, [r7, #12]
 801d628:	2200      	movs	r2, #0
 801d62a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801d62c:	68fb      	ldr	r3, [r7, #12]
 801d62e:	2200      	movs	r2, #0
 801d630:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801d632:	68fb      	ldr	r3, [r7, #12]
 801d634:	2200      	movs	r2, #0
 801d636:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d638:	68fb      	ldr	r3, [r7, #12]
 801d63a:	68db      	ldr	r3, [r3, #12]
 801d63c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d640:	d908      	bls.n	801d654 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d642:	68fb      	ldr	r3, [r7, #12]
 801d644:	681b      	ldr	r3, [r3, #0]
 801d646:	685a      	ldr	r2, [r3, #4]
 801d648:	68fb      	ldr	r3, [r7, #12]
 801d64a:	681b      	ldr	r3, [r3, #0]
 801d64c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801d650:	605a      	str	r2, [r3, #4]
 801d652:	e007      	b.n	801d664 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d654:	68fb      	ldr	r3, [r7, #12]
 801d656:	681b      	ldr	r3, [r3, #0]
 801d658:	685a      	ldr	r2, [r3, #4]
 801d65a:	68fb      	ldr	r3, [r7, #12]
 801d65c:	681b      	ldr	r3, [r3, #0]
 801d65e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801d662:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d664:	68fb      	ldr	r3, [r7, #12]
 801d666:	689b      	ldr	r3, [r3, #8]
 801d668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d66c:	d10f      	bne.n	801d68e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801d66e:	68fb      	ldr	r3, [r7, #12]
 801d670:	681b      	ldr	r3, [r3, #0]
 801d672:	681a      	ldr	r2, [r3, #0]
 801d674:	68fb      	ldr	r3, [r7, #12]
 801d676:	681b      	ldr	r3, [r3, #0]
 801d678:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d67c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801d67e:	68fb      	ldr	r3, [r7, #12]
 801d680:	681b      	ldr	r3, [r3, #0]
 801d682:	681a      	ldr	r2, [r3, #0]
 801d684:	68fb      	ldr	r3, [r7, #12]
 801d686:	681b      	ldr	r3, [r3, #0]
 801d688:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801d68c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801d68e:	68fb      	ldr	r3, [r7, #12]
 801d690:	681b      	ldr	r3, [r3, #0]
 801d692:	681b      	ldr	r3, [r3, #0]
 801d694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d698:	2b40      	cmp	r3, #64	; 0x40
 801d69a:	d007      	beq.n	801d6ac <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801d69c:	68fb      	ldr	r3, [r7, #12]
 801d69e:	681b      	ldr	r3, [r3, #0]
 801d6a0:	681a      	ldr	r2, [r3, #0]
 801d6a2:	68fb      	ldr	r3, [r7, #12]
 801d6a4:	681b      	ldr	r3, [r3, #0]
 801d6a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801d6aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801d6ac:	68fb      	ldr	r3, [r7, #12]
 801d6ae:	68db      	ldr	r3, [r3, #12]
 801d6b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d6b4:	d867      	bhi.n	801d786 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801d6b6:	e030      	b.n	801d71a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801d6b8:	68fb      	ldr	r3, [r7, #12]
 801d6ba:	681b      	ldr	r3, [r3, #0]
 801d6bc:	689b      	ldr	r3, [r3, #8]
 801d6be:	f003 0301 	and.w	r3, r3, #1
 801d6c2:	2b01      	cmp	r3, #1
 801d6c4:	d117      	bne.n	801d6f6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801d6c6:	68fb      	ldr	r3, [r7, #12]
 801d6c8:	681b      	ldr	r3, [r3, #0]
 801d6ca:	f103 020c 	add.w	r2, r3, #12
 801d6ce:	68fb      	ldr	r3, [r7, #12]
 801d6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d6d2:	7812      	ldrb	r2, [r2, #0]
 801d6d4:	b2d2      	uxtb	r2, r2
 801d6d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801d6d8:	68fb      	ldr	r3, [r7, #12]
 801d6da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d6dc:	1c5a      	adds	r2, r3, #1
 801d6de:	68fb      	ldr	r3, [r7, #12]
 801d6e0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801d6e2:	68fb      	ldr	r3, [r7, #12]
 801d6e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d6e8:	b29b      	uxth	r3, r3
 801d6ea:	3b01      	subs	r3, #1
 801d6ec:	b29a      	uxth	r2, r3
 801d6ee:	68fb      	ldr	r3, [r7, #12]
 801d6f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801d6f4:	e011      	b.n	801d71a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d6f6:	f7fb fb23 	bl	8018d40 <HAL_GetTick>
 801d6fa:	4602      	mov	r2, r0
 801d6fc:	693b      	ldr	r3, [r7, #16]
 801d6fe:	1ad3      	subs	r3, r2, r3
 801d700:	683a      	ldr	r2, [r7, #0]
 801d702:	429a      	cmp	r2, r3
 801d704:	d803      	bhi.n	801d70e <HAL_SPI_Receive+0x19c>
 801d706:	683b      	ldr	r3, [r7, #0]
 801d708:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d70c:	d102      	bne.n	801d714 <HAL_SPI_Receive+0x1a2>
 801d70e:	683b      	ldr	r3, [r7, #0]
 801d710:	2b00      	cmp	r3, #0
 801d712:	d102      	bne.n	801d71a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801d714:	2303      	movs	r3, #3
 801d716:	75fb      	strb	r3, [r7, #23]
          goto error;
 801d718:	e04e      	b.n	801d7b8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801d71a:	68fb      	ldr	r3, [r7, #12]
 801d71c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d720:	b29b      	uxth	r3, r3
 801d722:	2b00      	cmp	r3, #0
 801d724:	d1c8      	bne.n	801d6b8 <HAL_SPI_Receive+0x146>
 801d726:	e034      	b.n	801d792 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801d728:	68fb      	ldr	r3, [r7, #12]
 801d72a:	681b      	ldr	r3, [r3, #0]
 801d72c:	689b      	ldr	r3, [r3, #8]
 801d72e:	f003 0301 	and.w	r3, r3, #1
 801d732:	2b01      	cmp	r3, #1
 801d734:	d115      	bne.n	801d762 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801d736:	68fb      	ldr	r3, [r7, #12]
 801d738:	681b      	ldr	r3, [r3, #0]
 801d73a:	68da      	ldr	r2, [r3, #12]
 801d73c:	68fb      	ldr	r3, [r7, #12]
 801d73e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d740:	b292      	uxth	r2, r2
 801d742:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801d744:	68fb      	ldr	r3, [r7, #12]
 801d746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d748:	1c9a      	adds	r2, r3, #2
 801d74a:	68fb      	ldr	r3, [r7, #12]
 801d74c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801d74e:	68fb      	ldr	r3, [r7, #12]
 801d750:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d754:	b29b      	uxth	r3, r3
 801d756:	3b01      	subs	r3, #1
 801d758:	b29a      	uxth	r2, r3
 801d75a:	68fb      	ldr	r3, [r7, #12]
 801d75c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801d760:	e011      	b.n	801d786 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d762:	f7fb faed 	bl	8018d40 <HAL_GetTick>
 801d766:	4602      	mov	r2, r0
 801d768:	693b      	ldr	r3, [r7, #16]
 801d76a:	1ad3      	subs	r3, r2, r3
 801d76c:	683a      	ldr	r2, [r7, #0]
 801d76e:	429a      	cmp	r2, r3
 801d770:	d803      	bhi.n	801d77a <HAL_SPI_Receive+0x208>
 801d772:	683b      	ldr	r3, [r7, #0]
 801d774:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d778:	d102      	bne.n	801d780 <HAL_SPI_Receive+0x20e>
 801d77a:	683b      	ldr	r3, [r7, #0]
 801d77c:	2b00      	cmp	r3, #0
 801d77e:	d102      	bne.n	801d786 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801d780:	2303      	movs	r3, #3
 801d782:	75fb      	strb	r3, [r7, #23]
          goto error;
 801d784:	e018      	b.n	801d7b8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801d786:	68fb      	ldr	r3, [r7, #12]
 801d788:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d78c:	b29b      	uxth	r3, r3
 801d78e:	2b00      	cmp	r3, #0
 801d790:	d1ca      	bne.n	801d728 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801d792:	693a      	ldr	r2, [r7, #16]
 801d794:	6839      	ldr	r1, [r7, #0]
 801d796:	68f8      	ldr	r0, [r7, #12]
 801d798:	f000 fb4c 	bl	801de34 <SPI_EndRxTransaction>
 801d79c:	4603      	mov	r3, r0
 801d79e:	2b00      	cmp	r3, #0
 801d7a0:	d002      	beq.n	801d7a8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801d7a2:	68fb      	ldr	r3, [r7, #12]
 801d7a4:	2220      	movs	r2, #32
 801d7a6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801d7a8:	68fb      	ldr	r3, [r7, #12]
 801d7aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d7ac:	2b00      	cmp	r3, #0
 801d7ae:	d002      	beq.n	801d7b6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801d7b0:	2301      	movs	r3, #1
 801d7b2:	75fb      	strb	r3, [r7, #23]
 801d7b4:	e000      	b.n	801d7b8 <HAL_SPI_Receive+0x246>
  }

error :
 801d7b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801d7b8:	68fb      	ldr	r3, [r7, #12]
 801d7ba:	2201      	movs	r2, #1
 801d7bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801d7c0:	68fb      	ldr	r3, [r7, #12]
 801d7c2:	2200      	movs	r2, #0
 801d7c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801d7c8:	7dfb      	ldrb	r3, [r7, #23]
}
 801d7ca:	4618      	mov	r0, r3
 801d7cc:	3718      	adds	r7, #24
 801d7ce:	46bd      	mov	sp, r7
 801d7d0:	bd80      	pop	{r7, pc}

0801d7d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801d7d2:	b580      	push	{r7, lr}
 801d7d4:	b08a      	sub	sp, #40	; 0x28
 801d7d6:	af00      	add	r7, sp, #0
 801d7d8:	60f8      	str	r0, [r7, #12]
 801d7da:	60b9      	str	r1, [r7, #8]
 801d7dc:	607a      	str	r2, [r7, #4]
 801d7de:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801d7e0:	2301      	movs	r3, #1
 801d7e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801d7e4:	2300      	movs	r3, #0
 801d7e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801d7ea:	68fb      	ldr	r3, [r7, #12]
 801d7ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801d7f0:	2b01      	cmp	r3, #1
 801d7f2:	d101      	bne.n	801d7f8 <HAL_SPI_TransmitReceive+0x26>
 801d7f4:	2302      	movs	r3, #2
 801d7f6:	e1fb      	b.n	801dbf0 <HAL_SPI_TransmitReceive+0x41e>
 801d7f8:	68fb      	ldr	r3, [r7, #12]
 801d7fa:	2201      	movs	r2, #1
 801d7fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801d800:	f7fb fa9e 	bl	8018d40 <HAL_GetTick>
 801d804:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801d806:	68fb      	ldr	r3, [r7, #12]
 801d808:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d80c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801d80e:	68fb      	ldr	r3, [r7, #12]
 801d810:	685b      	ldr	r3, [r3, #4]
 801d812:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801d814:	887b      	ldrh	r3, [r7, #2]
 801d816:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801d818:	887b      	ldrh	r3, [r7, #2]
 801d81a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801d81c:	7efb      	ldrb	r3, [r7, #27]
 801d81e:	2b01      	cmp	r3, #1
 801d820:	d00e      	beq.n	801d840 <HAL_SPI_TransmitReceive+0x6e>
 801d822:	697b      	ldr	r3, [r7, #20]
 801d824:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d828:	d106      	bne.n	801d838 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801d82a:	68fb      	ldr	r3, [r7, #12]
 801d82c:	689b      	ldr	r3, [r3, #8]
 801d82e:	2b00      	cmp	r3, #0
 801d830:	d102      	bne.n	801d838 <HAL_SPI_TransmitReceive+0x66>
 801d832:	7efb      	ldrb	r3, [r7, #27]
 801d834:	2b04      	cmp	r3, #4
 801d836:	d003      	beq.n	801d840 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801d838:	2302      	movs	r3, #2
 801d83a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801d83e:	e1cd      	b.n	801dbdc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801d840:	68bb      	ldr	r3, [r7, #8]
 801d842:	2b00      	cmp	r3, #0
 801d844:	d005      	beq.n	801d852 <HAL_SPI_TransmitReceive+0x80>
 801d846:	687b      	ldr	r3, [r7, #4]
 801d848:	2b00      	cmp	r3, #0
 801d84a:	d002      	beq.n	801d852 <HAL_SPI_TransmitReceive+0x80>
 801d84c:	887b      	ldrh	r3, [r7, #2]
 801d84e:	2b00      	cmp	r3, #0
 801d850:	d103      	bne.n	801d85a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801d852:	2301      	movs	r3, #1
 801d854:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801d858:	e1c0      	b.n	801dbdc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801d85a:	68fb      	ldr	r3, [r7, #12]
 801d85c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d860:	b2db      	uxtb	r3, r3
 801d862:	2b04      	cmp	r3, #4
 801d864:	d003      	beq.n	801d86e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801d866:	68fb      	ldr	r3, [r7, #12]
 801d868:	2205      	movs	r2, #5
 801d86a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801d86e:	68fb      	ldr	r3, [r7, #12]
 801d870:	2200      	movs	r2, #0
 801d872:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801d874:	68fb      	ldr	r3, [r7, #12]
 801d876:	687a      	ldr	r2, [r7, #4]
 801d878:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801d87a:	68fb      	ldr	r3, [r7, #12]
 801d87c:	887a      	ldrh	r2, [r7, #2]
 801d87e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801d882:	68fb      	ldr	r3, [r7, #12]
 801d884:	887a      	ldrh	r2, [r7, #2]
 801d886:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801d88a:	68fb      	ldr	r3, [r7, #12]
 801d88c:	68ba      	ldr	r2, [r7, #8]
 801d88e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801d890:	68fb      	ldr	r3, [r7, #12]
 801d892:	887a      	ldrh	r2, [r7, #2]
 801d894:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801d896:	68fb      	ldr	r3, [r7, #12]
 801d898:	887a      	ldrh	r2, [r7, #2]
 801d89a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801d89c:	68fb      	ldr	r3, [r7, #12]
 801d89e:	2200      	movs	r2, #0
 801d8a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801d8a2:	68fb      	ldr	r3, [r7, #12]
 801d8a4:	2200      	movs	r2, #0
 801d8a6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801d8a8:	68fb      	ldr	r3, [r7, #12]
 801d8aa:	68db      	ldr	r3, [r3, #12]
 801d8ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d8b0:	d802      	bhi.n	801d8b8 <HAL_SPI_TransmitReceive+0xe6>
 801d8b2:	8a3b      	ldrh	r3, [r7, #16]
 801d8b4:	2b01      	cmp	r3, #1
 801d8b6:	d908      	bls.n	801d8ca <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d8b8:	68fb      	ldr	r3, [r7, #12]
 801d8ba:	681b      	ldr	r3, [r3, #0]
 801d8bc:	685a      	ldr	r2, [r3, #4]
 801d8be:	68fb      	ldr	r3, [r7, #12]
 801d8c0:	681b      	ldr	r3, [r3, #0]
 801d8c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801d8c6:	605a      	str	r2, [r3, #4]
 801d8c8:	e007      	b.n	801d8da <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d8ca:	68fb      	ldr	r3, [r7, #12]
 801d8cc:	681b      	ldr	r3, [r3, #0]
 801d8ce:	685a      	ldr	r2, [r3, #4]
 801d8d0:	68fb      	ldr	r3, [r7, #12]
 801d8d2:	681b      	ldr	r3, [r3, #0]
 801d8d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801d8d8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801d8da:	68fb      	ldr	r3, [r7, #12]
 801d8dc:	681b      	ldr	r3, [r3, #0]
 801d8de:	681b      	ldr	r3, [r3, #0]
 801d8e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d8e4:	2b40      	cmp	r3, #64	; 0x40
 801d8e6:	d007      	beq.n	801d8f8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801d8e8:	68fb      	ldr	r3, [r7, #12]
 801d8ea:	681b      	ldr	r3, [r3, #0]
 801d8ec:	681a      	ldr	r2, [r3, #0]
 801d8ee:	68fb      	ldr	r3, [r7, #12]
 801d8f0:	681b      	ldr	r3, [r3, #0]
 801d8f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801d8f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d8f8:	68fb      	ldr	r3, [r7, #12]
 801d8fa:	68db      	ldr	r3, [r3, #12]
 801d8fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d900:	d97c      	bls.n	801d9fc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801d902:	68fb      	ldr	r3, [r7, #12]
 801d904:	685b      	ldr	r3, [r3, #4]
 801d906:	2b00      	cmp	r3, #0
 801d908:	d002      	beq.n	801d910 <HAL_SPI_TransmitReceive+0x13e>
 801d90a:	8a7b      	ldrh	r3, [r7, #18]
 801d90c:	2b01      	cmp	r3, #1
 801d90e:	d169      	bne.n	801d9e4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d910:	68fb      	ldr	r3, [r7, #12]
 801d912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d914:	881a      	ldrh	r2, [r3, #0]
 801d916:	68fb      	ldr	r3, [r7, #12]
 801d918:	681b      	ldr	r3, [r3, #0]
 801d91a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801d91c:	68fb      	ldr	r3, [r7, #12]
 801d91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d920:	1c9a      	adds	r2, r3, #2
 801d922:	68fb      	ldr	r3, [r7, #12]
 801d924:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801d926:	68fb      	ldr	r3, [r7, #12]
 801d928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d92a:	b29b      	uxth	r3, r3
 801d92c:	3b01      	subs	r3, #1
 801d92e:	b29a      	uxth	r2, r3
 801d930:	68fb      	ldr	r3, [r7, #12]
 801d932:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801d934:	e056      	b.n	801d9e4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801d936:	68fb      	ldr	r3, [r7, #12]
 801d938:	681b      	ldr	r3, [r3, #0]
 801d93a:	689b      	ldr	r3, [r3, #8]
 801d93c:	f003 0302 	and.w	r3, r3, #2
 801d940:	2b02      	cmp	r3, #2
 801d942:	d11b      	bne.n	801d97c <HAL_SPI_TransmitReceive+0x1aa>
 801d944:	68fb      	ldr	r3, [r7, #12]
 801d946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d948:	b29b      	uxth	r3, r3
 801d94a:	2b00      	cmp	r3, #0
 801d94c:	d016      	beq.n	801d97c <HAL_SPI_TransmitReceive+0x1aa>
 801d94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d950:	2b01      	cmp	r3, #1
 801d952:	d113      	bne.n	801d97c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d954:	68fb      	ldr	r3, [r7, #12]
 801d956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d958:	881a      	ldrh	r2, [r3, #0]
 801d95a:	68fb      	ldr	r3, [r7, #12]
 801d95c:	681b      	ldr	r3, [r3, #0]
 801d95e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801d960:	68fb      	ldr	r3, [r7, #12]
 801d962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d964:	1c9a      	adds	r2, r3, #2
 801d966:	68fb      	ldr	r3, [r7, #12]
 801d968:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801d96a:	68fb      	ldr	r3, [r7, #12]
 801d96c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d96e:	b29b      	uxth	r3, r3
 801d970:	3b01      	subs	r3, #1
 801d972:	b29a      	uxth	r2, r3
 801d974:	68fb      	ldr	r3, [r7, #12]
 801d976:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801d978:	2300      	movs	r3, #0
 801d97a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801d97c:	68fb      	ldr	r3, [r7, #12]
 801d97e:	681b      	ldr	r3, [r3, #0]
 801d980:	689b      	ldr	r3, [r3, #8]
 801d982:	f003 0301 	and.w	r3, r3, #1
 801d986:	2b01      	cmp	r3, #1
 801d988:	d11c      	bne.n	801d9c4 <HAL_SPI_TransmitReceive+0x1f2>
 801d98a:	68fb      	ldr	r3, [r7, #12]
 801d98c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d990:	b29b      	uxth	r3, r3
 801d992:	2b00      	cmp	r3, #0
 801d994:	d016      	beq.n	801d9c4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801d996:	68fb      	ldr	r3, [r7, #12]
 801d998:	681b      	ldr	r3, [r3, #0]
 801d99a:	68da      	ldr	r2, [r3, #12]
 801d99c:	68fb      	ldr	r3, [r7, #12]
 801d99e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d9a0:	b292      	uxth	r2, r2
 801d9a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801d9a4:	68fb      	ldr	r3, [r7, #12]
 801d9a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d9a8:	1c9a      	adds	r2, r3, #2
 801d9aa:	68fb      	ldr	r3, [r7, #12]
 801d9ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801d9ae:	68fb      	ldr	r3, [r7, #12]
 801d9b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d9b4:	b29b      	uxth	r3, r3
 801d9b6:	3b01      	subs	r3, #1
 801d9b8:	b29a      	uxth	r2, r3
 801d9ba:	68fb      	ldr	r3, [r7, #12]
 801d9bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801d9c0:	2301      	movs	r3, #1
 801d9c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801d9c4:	f7fb f9bc 	bl	8018d40 <HAL_GetTick>
 801d9c8:	4602      	mov	r2, r0
 801d9ca:	69fb      	ldr	r3, [r7, #28]
 801d9cc:	1ad3      	subs	r3, r2, r3
 801d9ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d9d0:	429a      	cmp	r2, r3
 801d9d2:	d807      	bhi.n	801d9e4 <HAL_SPI_TransmitReceive+0x212>
 801d9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d9da:	d003      	beq.n	801d9e4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801d9dc:	2303      	movs	r3, #3
 801d9de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801d9e2:	e0fb      	b.n	801dbdc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801d9e4:	68fb      	ldr	r3, [r7, #12]
 801d9e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d9e8:	b29b      	uxth	r3, r3
 801d9ea:	2b00      	cmp	r3, #0
 801d9ec:	d1a3      	bne.n	801d936 <HAL_SPI_TransmitReceive+0x164>
 801d9ee:	68fb      	ldr	r3, [r7, #12]
 801d9f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d9f4:	b29b      	uxth	r3, r3
 801d9f6:	2b00      	cmp	r3, #0
 801d9f8:	d19d      	bne.n	801d936 <HAL_SPI_TransmitReceive+0x164>
 801d9fa:	e0df      	b.n	801dbbc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801d9fc:	68fb      	ldr	r3, [r7, #12]
 801d9fe:	685b      	ldr	r3, [r3, #4]
 801da00:	2b00      	cmp	r3, #0
 801da02:	d003      	beq.n	801da0c <HAL_SPI_TransmitReceive+0x23a>
 801da04:	8a7b      	ldrh	r3, [r7, #18]
 801da06:	2b01      	cmp	r3, #1
 801da08:	f040 80cb 	bne.w	801dba2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801da0c:	68fb      	ldr	r3, [r7, #12]
 801da0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801da10:	b29b      	uxth	r3, r3
 801da12:	2b01      	cmp	r3, #1
 801da14:	d912      	bls.n	801da3c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801da16:	68fb      	ldr	r3, [r7, #12]
 801da18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da1a:	881a      	ldrh	r2, [r3, #0]
 801da1c:	68fb      	ldr	r3, [r7, #12]
 801da1e:	681b      	ldr	r3, [r3, #0]
 801da20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801da22:	68fb      	ldr	r3, [r7, #12]
 801da24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da26:	1c9a      	adds	r2, r3, #2
 801da28:	68fb      	ldr	r3, [r7, #12]
 801da2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801da2c:	68fb      	ldr	r3, [r7, #12]
 801da2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801da30:	b29b      	uxth	r3, r3
 801da32:	3b02      	subs	r3, #2
 801da34:	b29a      	uxth	r2, r3
 801da36:	68fb      	ldr	r3, [r7, #12]
 801da38:	87da      	strh	r2, [r3, #62]	; 0x3e
 801da3a:	e0b2      	b.n	801dba2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801da3c:	68fb      	ldr	r3, [r7, #12]
 801da3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801da40:	68fb      	ldr	r3, [r7, #12]
 801da42:	681b      	ldr	r3, [r3, #0]
 801da44:	330c      	adds	r3, #12
 801da46:	7812      	ldrb	r2, [r2, #0]
 801da48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801da4a:	68fb      	ldr	r3, [r7, #12]
 801da4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da4e:	1c5a      	adds	r2, r3, #1
 801da50:	68fb      	ldr	r3, [r7, #12]
 801da52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801da54:	68fb      	ldr	r3, [r7, #12]
 801da56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801da58:	b29b      	uxth	r3, r3
 801da5a:	3b01      	subs	r3, #1
 801da5c:	b29a      	uxth	r2, r3
 801da5e:	68fb      	ldr	r3, [r7, #12]
 801da60:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801da62:	e09e      	b.n	801dba2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801da64:	68fb      	ldr	r3, [r7, #12]
 801da66:	681b      	ldr	r3, [r3, #0]
 801da68:	689b      	ldr	r3, [r3, #8]
 801da6a:	f003 0302 	and.w	r3, r3, #2
 801da6e:	2b02      	cmp	r3, #2
 801da70:	d134      	bne.n	801dadc <HAL_SPI_TransmitReceive+0x30a>
 801da72:	68fb      	ldr	r3, [r7, #12]
 801da74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801da76:	b29b      	uxth	r3, r3
 801da78:	2b00      	cmp	r3, #0
 801da7a:	d02f      	beq.n	801dadc <HAL_SPI_TransmitReceive+0x30a>
 801da7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da7e:	2b01      	cmp	r3, #1
 801da80:	d12c      	bne.n	801dadc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801da82:	68fb      	ldr	r3, [r7, #12]
 801da84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801da86:	b29b      	uxth	r3, r3
 801da88:	2b01      	cmp	r3, #1
 801da8a:	d912      	bls.n	801dab2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801da8c:	68fb      	ldr	r3, [r7, #12]
 801da8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da90:	881a      	ldrh	r2, [r3, #0]
 801da92:	68fb      	ldr	r3, [r7, #12]
 801da94:	681b      	ldr	r3, [r3, #0]
 801da96:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801da98:	68fb      	ldr	r3, [r7, #12]
 801da9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da9c:	1c9a      	adds	r2, r3, #2
 801da9e:	68fb      	ldr	r3, [r7, #12]
 801daa0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801daa2:	68fb      	ldr	r3, [r7, #12]
 801daa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801daa6:	b29b      	uxth	r3, r3
 801daa8:	3b02      	subs	r3, #2
 801daaa:	b29a      	uxth	r2, r3
 801daac:	68fb      	ldr	r3, [r7, #12]
 801daae:	87da      	strh	r2, [r3, #62]	; 0x3e
 801dab0:	e012      	b.n	801dad8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801dab2:	68fb      	ldr	r3, [r7, #12]
 801dab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801dab6:	68fb      	ldr	r3, [r7, #12]
 801dab8:	681b      	ldr	r3, [r3, #0]
 801daba:	330c      	adds	r3, #12
 801dabc:	7812      	ldrb	r2, [r2, #0]
 801dabe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801dac0:	68fb      	ldr	r3, [r7, #12]
 801dac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dac4:	1c5a      	adds	r2, r3, #1
 801dac6:	68fb      	ldr	r3, [r7, #12]
 801dac8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801daca:	68fb      	ldr	r3, [r7, #12]
 801dacc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dace:	b29b      	uxth	r3, r3
 801dad0:	3b01      	subs	r3, #1
 801dad2:	b29a      	uxth	r2, r3
 801dad4:	68fb      	ldr	r3, [r7, #12]
 801dad6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801dad8:	2300      	movs	r3, #0
 801dada:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801dadc:	68fb      	ldr	r3, [r7, #12]
 801dade:	681b      	ldr	r3, [r3, #0]
 801dae0:	689b      	ldr	r3, [r3, #8]
 801dae2:	f003 0301 	and.w	r3, r3, #1
 801dae6:	2b01      	cmp	r3, #1
 801dae8:	d148      	bne.n	801db7c <HAL_SPI_TransmitReceive+0x3aa>
 801daea:	68fb      	ldr	r3, [r7, #12]
 801daec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801daf0:	b29b      	uxth	r3, r3
 801daf2:	2b00      	cmp	r3, #0
 801daf4:	d042      	beq.n	801db7c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801daf6:	68fb      	ldr	r3, [r7, #12]
 801daf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801dafc:	b29b      	uxth	r3, r3
 801dafe:	2b01      	cmp	r3, #1
 801db00:	d923      	bls.n	801db4a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801db02:	68fb      	ldr	r3, [r7, #12]
 801db04:	681b      	ldr	r3, [r3, #0]
 801db06:	68da      	ldr	r2, [r3, #12]
 801db08:	68fb      	ldr	r3, [r7, #12]
 801db0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801db0c:	b292      	uxth	r2, r2
 801db0e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801db10:	68fb      	ldr	r3, [r7, #12]
 801db12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801db14:	1c9a      	adds	r2, r3, #2
 801db16:	68fb      	ldr	r3, [r7, #12]
 801db18:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801db1a:	68fb      	ldr	r3, [r7, #12]
 801db1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801db20:	b29b      	uxth	r3, r3
 801db22:	3b02      	subs	r3, #2
 801db24:	b29a      	uxth	r2, r3
 801db26:	68fb      	ldr	r3, [r7, #12]
 801db28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801db2c:	68fb      	ldr	r3, [r7, #12]
 801db2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801db32:	b29b      	uxth	r3, r3
 801db34:	2b01      	cmp	r3, #1
 801db36:	d81f      	bhi.n	801db78 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801db38:	68fb      	ldr	r3, [r7, #12]
 801db3a:	681b      	ldr	r3, [r3, #0]
 801db3c:	685a      	ldr	r2, [r3, #4]
 801db3e:	68fb      	ldr	r3, [r7, #12]
 801db40:	681b      	ldr	r3, [r3, #0]
 801db42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801db46:	605a      	str	r2, [r3, #4]
 801db48:	e016      	b.n	801db78 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801db4a:	68fb      	ldr	r3, [r7, #12]
 801db4c:	681b      	ldr	r3, [r3, #0]
 801db4e:	f103 020c 	add.w	r2, r3, #12
 801db52:	68fb      	ldr	r3, [r7, #12]
 801db54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801db56:	7812      	ldrb	r2, [r2, #0]
 801db58:	b2d2      	uxtb	r2, r2
 801db5a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801db5c:	68fb      	ldr	r3, [r7, #12]
 801db5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801db60:	1c5a      	adds	r2, r3, #1
 801db62:	68fb      	ldr	r3, [r7, #12]
 801db64:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801db66:	68fb      	ldr	r3, [r7, #12]
 801db68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801db6c:	b29b      	uxth	r3, r3
 801db6e:	3b01      	subs	r3, #1
 801db70:	b29a      	uxth	r2, r3
 801db72:	68fb      	ldr	r3, [r7, #12]
 801db74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801db78:	2301      	movs	r3, #1
 801db7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801db7c:	f7fb f8e0 	bl	8018d40 <HAL_GetTick>
 801db80:	4602      	mov	r2, r0
 801db82:	69fb      	ldr	r3, [r7, #28]
 801db84:	1ad3      	subs	r3, r2, r3
 801db86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801db88:	429a      	cmp	r2, r3
 801db8a:	d803      	bhi.n	801db94 <HAL_SPI_TransmitReceive+0x3c2>
 801db8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801db92:	d102      	bne.n	801db9a <HAL_SPI_TransmitReceive+0x3c8>
 801db94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db96:	2b00      	cmp	r3, #0
 801db98:	d103      	bne.n	801dba2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801db9a:	2303      	movs	r3, #3
 801db9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801dba0:	e01c      	b.n	801dbdc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801dba2:	68fb      	ldr	r3, [r7, #12]
 801dba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dba6:	b29b      	uxth	r3, r3
 801dba8:	2b00      	cmp	r3, #0
 801dbaa:	f47f af5b 	bne.w	801da64 <HAL_SPI_TransmitReceive+0x292>
 801dbae:	68fb      	ldr	r3, [r7, #12]
 801dbb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801dbb4:	b29b      	uxth	r3, r3
 801dbb6:	2b00      	cmp	r3, #0
 801dbb8:	f47f af54 	bne.w	801da64 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801dbbc:	69fa      	ldr	r2, [r7, #28]
 801dbbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801dbc0:	68f8      	ldr	r0, [r7, #12]
 801dbc2:	f000 f98f 	bl	801dee4 <SPI_EndRxTxTransaction>
 801dbc6:	4603      	mov	r3, r0
 801dbc8:	2b00      	cmp	r3, #0
 801dbca:	d006      	beq.n	801dbda <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801dbcc:	2301      	movs	r3, #1
 801dbce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801dbd2:	68fb      	ldr	r3, [r7, #12]
 801dbd4:	2220      	movs	r2, #32
 801dbd6:	661a      	str	r2, [r3, #96]	; 0x60
 801dbd8:	e000      	b.n	801dbdc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801dbda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801dbdc:	68fb      	ldr	r3, [r7, #12]
 801dbde:	2201      	movs	r2, #1
 801dbe0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801dbe4:	68fb      	ldr	r3, [r7, #12]
 801dbe6:	2200      	movs	r2, #0
 801dbe8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801dbec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801dbf0:	4618      	mov	r0, r3
 801dbf2:	3728      	adds	r7, #40	; 0x28
 801dbf4:	46bd      	mov	sp, r7
 801dbf6:	bd80      	pop	{r7, pc}

0801dbf8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801dbf8:	b580      	push	{r7, lr}
 801dbfa:	b088      	sub	sp, #32
 801dbfc:	af00      	add	r7, sp, #0
 801dbfe:	60f8      	str	r0, [r7, #12]
 801dc00:	60b9      	str	r1, [r7, #8]
 801dc02:	603b      	str	r3, [r7, #0]
 801dc04:	4613      	mov	r3, r2
 801dc06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801dc08:	f7fb f89a 	bl	8018d40 <HAL_GetTick>
 801dc0c:	4602      	mov	r2, r0
 801dc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc10:	1a9b      	subs	r3, r3, r2
 801dc12:	683a      	ldr	r2, [r7, #0]
 801dc14:	4413      	add	r3, r2
 801dc16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801dc18:	f7fb f892 	bl	8018d40 <HAL_GetTick>
 801dc1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801dc1e:	4b39      	ldr	r3, [pc, #228]	; (801dd04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801dc20:	681b      	ldr	r3, [r3, #0]
 801dc22:	015b      	lsls	r3, r3, #5
 801dc24:	0d1b      	lsrs	r3, r3, #20
 801dc26:	69fa      	ldr	r2, [r7, #28]
 801dc28:	fb02 f303 	mul.w	r3, r2, r3
 801dc2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801dc2e:	e054      	b.n	801dcda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801dc30:	683b      	ldr	r3, [r7, #0]
 801dc32:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dc36:	d050      	beq.n	801dcda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801dc38:	f7fb f882 	bl	8018d40 <HAL_GetTick>
 801dc3c:	4602      	mov	r2, r0
 801dc3e:	69bb      	ldr	r3, [r7, #24]
 801dc40:	1ad3      	subs	r3, r2, r3
 801dc42:	69fa      	ldr	r2, [r7, #28]
 801dc44:	429a      	cmp	r2, r3
 801dc46:	d902      	bls.n	801dc4e <SPI_WaitFlagStateUntilTimeout+0x56>
 801dc48:	69fb      	ldr	r3, [r7, #28]
 801dc4a:	2b00      	cmp	r3, #0
 801dc4c:	d13d      	bne.n	801dcca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801dc4e:	68fb      	ldr	r3, [r7, #12]
 801dc50:	681b      	ldr	r3, [r3, #0]
 801dc52:	685a      	ldr	r2, [r3, #4]
 801dc54:	68fb      	ldr	r3, [r7, #12]
 801dc56:	681b      	ldr	r3, [r3, #0]
 801dc58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801dc5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801dc5e:	68fb      	ldr	r3, [r7, #12]
 801dc60:	685b      	ldr	r3, [r3, #4]
 801dc62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801dc66:	d111      	bne.n	801dc8c <SPI_WaitFlagStateUntilTimeout+0x94>
 801dc68:	68fb      	ldr	r3, [r7, #12]
 801dc6a:	689b      	ldr	r3, [r3, #8]
 801dc6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801dc70:	d004      	beq.n	801dc7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801dc72:	68fb      	ldr	r3, [r7, #12]
 801dc74:	689b      	ldr	r3, [r3, #8]
 801dc76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801dc7a:	d107      	bne.n	801dc8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801dc7c:	68fb      	ldr	r3, [r7, #12]
 801dc7e:	681b      	ldr	r3, [r3, #0]
 801dc80:	681a      	ldr	r2, [r3, #0]
 801dc82:	68fb      	ldr	r3, [r7, #12]
 801dc84:	681b      	ldr	r3, [r3, #0]
 801dc86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801dc8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801dc8c:	68fb      	ldr	r3, [r7, #12]
 801dc8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dc90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801dc94:	d10f      	bne.n	801dcb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801dc96:	68fb      	ldr	r3, [r7, #12]
 801dc98:	681b      	ldr	r3, [r3, #0]
 801dc9a:	681a      	ldr	r2, [r3, #0]
 801dc9c:	68fb      	ldr	r3, [r7, #12]
 801dc9e:	681b      	ldr	r3, [r3, #0]
 801dca0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801dca4:	601a      	str	r2, [r3, #0]
 801dca6:	68fb      	ldr	r3, [r7, #12]
 801dca8:	681b      	ldr	r3, [r3, #0]
 801dcaa:	681a      	ldr	r2, [r3, #0]
 801dcac:	68fb      	ldr	r3, [r7, #12]
 801dcae:	681b      	ldr	r3, [r3, #0]
 801dcb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801dcb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801dcb6:	68fb      	ldr	r3, [r7, #12]
 801dcb8:	2201      	movs	r2, #1
 801dcba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801dcbe:	68fb      	ldr	r3, [r7, #12]
 801dcc0:	2200      	movs	r2, #0
 801dcc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801dcc6:	2303      	movs	r3, #3
 801dcc8:	e017      	b.n	801dcfa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801dcca:	697b      	ldr	r3, [r7, #20]
 801dccc:	2b00      	cmp	r3, #0
 801dcce:	d101      	bne.n	801dcd4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801dcd0:	2300      	movs	r3, #0
 801dcd2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801dcd4:	697b      	ldr	r3, [r7, #20]
 801dcd6:	3b01      	subs	r3, #1
 801dcd8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801dcda:	68fb      	ldr	r3, [r7, #12]
 801dcdc:	681b      	ldr	r3, [r3, #0]
 801dcde:	689a      	ldr	r2, [r3, #8]
 801dce0:	68bb      	ldr	r3, [r7, #8]
 801dce2:	4013      	ands	r3, r2
 801dce4:	68ba      	ldr	r2, [r7, #8]
 801dce6:	429a      	cmp	r2, r3
 801dce8:	bf0c      	ite	eq
 801dcea:	2301      	moveq	r3, #1
 801dcec:	2300      	movne	r3, #0
 801dcee:	b2db      	uxtb	r3, r3
 801dcf0:	461a      	mov	r2, r3
 801dcf2:	79fb      	ldrb	r3, [r7, #7]
 801dcf4:	429a      	cmp	r2, r3
 801dcf6:	d19b      	bne.n	801dc30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801dcf8:	2300      	movs	r3, #0
}
 801dcfa:	4618      	mov	r0, r3
 801dcfc:	3720      	adds	r7, #32
 801dcfe:	46bd      	mov	sp, r7
 801dd00:	bd80      	pop	{r7, pc}
 801dd02:	bf00      	nop
 801dd04:	20000000 	.word	0x20000000

0801dd08 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801dd08:	b580      	push	{r7, lr}
 801dd0a:	b08a      	sub	sp, #40	; 0x28
 801dd0c:	af00      	add	r7, sp, #0
 801dd0e:	60f8      	str	r0, [r7, #12]
 801dd10:	60b9      	str	r1, [r7, #8]
 801dd12:	607a      	str	r2, [r7, #4]
 801dd14:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801dd16:	2300      	movs	r3, #0
 801dd18:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801dd1a:	f7fb f811 	bl	8018d40 <HAL_GetTick>
 801dd1e:	4602      	mov	r2, r0
 801dd20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd22:	1a9b      	subs	r3, r3, r2
 801dd24:	683a      	ldr	r2, [r7, #0]
 801dd26:	4413      	add	r3, r2
 801dd28:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801dd2a:	f7fb f809 	bl	8018d40 <HAL_GetTick>
 801dd2e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801dd30:	68fb      	ldr	r3, [r7, #12]
 801dd32:	681b      	ldr	r3, [r3, #0]
 801dd34:	330c      	adds	r3, #12
 801dd36:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801dd38:	4b3d      	ldr	r3, [pc, #244]	; (801de30 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801dd3a:	681a      	ldr	r2, [r3, #0]
 801dd3c:	4613      	mov	r3, r2
 801dd3e:	009b      	lsls	r3, r3, #2
 801dd40:	4413      	add	r3, r2
 801dd42:	00da      	lsls	r2, r3, #3
 801dd44:	1ad3      	subs	r3, r2, r3
 801dd46:	0d1b      	lsrs	r3, r3, #20
 801dd48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dd4a:	fb02 f303 	mul.w	r3, r2, r3
 801dd4e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801dd50:	e060      	b.n	801de14 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801dd52:	68bb      	ldr	r3, [r7, #8]
 801dd54:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801dd58:	d107      	bne.n	801dd6a <SPI_WaitFifoStateUntilTimeout+0x62>
 801dd5a:	687b      	ldr	r3, [r7, #4]
 801dd5c:	2b00      	cmp	r3, #0
 801dd5e:	d104      	bne.n	801dd6a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801dd60:	69fb      	ldr	r3, [r7, #28]
 801dd62:	781b      	ldrb	r3, [r3, #0]
 801dd64:	b2db      	uxtb	r3, r3
 801dd66:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801dd68:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801dd6a:	683b      	ldr	r3, [r7, #0]
 801dd6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dd70:	d050      	beq.n	801de14 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801dd72:	f7fa ffe5 	bl	8018d40 <HAL_GetTick>
 801dd76:	4602      	mov	r2, r0
 801dd78:	6a3b      	ldr	r3, [r7, #32]
 801dd7a:	1ad3      	subs	r3, r2, r3
 801dd7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dd7e:	429a      	cmp	r2, r3
 801dd80:	d902      	bls.n	801dd88 <SPI_WaitFifoStateUntilTimeout+0x80>
 801dd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd84:	2b00      	cmp	r3, #0
 801dd86:	d13d      	bne.n	801de04 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801dd88:	68fb      	ldr	r3, [r7, #12]
 801dd8a:	681b      	ldr	r3, [r3, #0]
 801dd8c:	685a      	ldr	r2, [r3, #4]
 801dd8e:	68fb      	ldr	r3, [r7, #12]
 801dd90:	681b      	ldr	r3, [r3, #0]
 801dd92:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801dd96:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801dd98:	68fb      	ldr	r3, [r7, #12]
 801dd9a:	685b      	ldr	r3, [r3, #4]
 801dd9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801dda0:	d111      	bne.n	801ddc6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 801dda2:	68fb      	ldr	r3, [r7, #12]
 801dda4:	689b      	ldr	r3, [r3, #8]
 801dda6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ddaa:	d004      	beq.n	801ddb6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801ddac:	68fb      	ldr	r3, [r7, #12]
 801ddae:	689b      	ldr	r3, [r3, #8]
 801ddb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ddb4:	d107      	bne.n	801ddc6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801ddb6:	68fb      	ldr	r3, [r7, #12]
 801ddb8:	681b      	ldr	r3, [r3, #0]
 801ddba:	681a      	ldr	r2, [r3, #0]
 801ddbc:	68fb      	ldr	r3, [r7, #12]
 801ddbe:	681b      	ldr	r3, [r3, #0]
 801ddc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801ddc4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801ddc6:	68fb      	ldr	r3, [r7, #12]
 801ddc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ddca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801ddce:	d10f      	bne.n	801ddf0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801ddd0:	68fb      	ldr	r3, [r7, #12]
 801ddd2:	681b      	ldr	r3, [r3, #0]
 801ddd4:	681a      	ldr	r2, [r3, #0]
 801ddd6:	68fb      	ldr	r3, [r7, #12]
 801ddd8:	681b      	ldr	r3, [r3, #0]
 801ddda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801ddde:	601a      	str	r2, [r3, #0]
 801dde0:	68fb      	ldr	r3, [r7, #12]
 801dde2:	681b      	ldr	r3, [r3, #0]
 801dde4:	681a      	ldr	r2, [r3, #0]
 801dde6:	68fb      	ldr	r3, [r7, #12]
 801dde8:	681b      	ldr	r3, [r3, #0]
 801ddea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801ddee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801ddf0:	68fb      	ldr	r3, [r7, #12]
 801ddf2:	2201      	movs	r2, #1
 801ddf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801ddf8:	68fb      	ldr	r3, [r7, #12]
 801ddfa:	2200      	movs	r2, #0
 801ddfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801de00:	2303      	movs	r3, #3
 801de02:	e010      	b.n	801de26 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801de04:	69bb      	ldr	r3, [r7, #24]
 801de06:	2b00      	cmp	r3, #0
 801de08:	d101      	bne.n	801de0e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801de0a:	2300      	movs	r3, #0
 801de0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801de0e:	69bb      	ldr	r3, [r7, #24]
 801de10:	3b01      	subs	r3, #1
 801de12:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801de14:	68fb      	ldr	r3, [r7, #12]
 801de16:	681b      	ldr	r3, [r3, #0]
 801de18:	689a      	ldr	r2, [r3, #8]
 801de1a:	68bb      	ldr	r3, [r7, #8]
 801de1c:	4013      	ands	r3, r2
 801de1e:	687a      	ldr	r2, [r7, #4]
 801de20:	429a      	cmp	r2, r3
 801de22:	d196      	bne.n	801dd52 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801de24:	2300      	movs	r3, #0
}
 801de26:	4618      	mov	r0, r3
 801de28:	3728      	adds	r7, #40	; 0x28
 801de2a:	46bd      	mov	sp, r7
 801de2c:	bd80      	pop	{r7, pc}
 801de2e:	bf00      	nop
 801de30:	20000000 	.word	0x20000000

0801de34 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801de34:	b580      	push	{r7, lr}
 801de36:	b086      	sub	sp, #24
 801de38:	af02      	add	r7, sp, #8
 801de3a:	60f8      	str	r0, [r7, #12]
 801de3c:	60b9      	str	r1, [r7, #8]
 801de3e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801de40:	68fb      	ldr	r3, [r7, #12]
 801de42:	685b      	ldr	r3, [r3, #4]
 801de44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801de48:	d111      	bne.n	801de6e <SPI_EndRxTransaction+0x3a>
 801de4a:	68fb      	ldr	r3, [r7, #12]
 801de4c:	689b      	ldr	r3, [r3, #8]
 801de4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801de52:	d004      	beq.n	801de5e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801de54:	68fb      	ldr	r3, [r7, #12]
 801de56:	689b      	ldr	r3, [r3, #8]
 801de58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801de5c:	d107      	bne.n	801de6e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801de5e:	68fb      	ldr	r3, [r7, #12]
 801de60:	681b      	ldr	r3, [r3, #0]
 801de62:	681a      	ldr	r2, [r3, #0]
 801de64:	68fb      	ldr	r3, [r7, #12]
 801de66:	681b      	ldr	r3, [r3, #0]
 801de68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801de6c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801de6e:	687b      	ldr	r3, [r7, #4]
 801de70:	9300      	str	r3, [sp, #0]
 801de72:	68bb      	ldr	r3, [r7, #8]
 801de74:	2200      	movs	r2, #0
 801de76:	2180      	movs	r1, #128	; 0x80
 801de78:	68f8      	ldr	r0, [r7, #12]
 801de7a:	f7ff febd 	bl	801dbf8 <SPI_WaitFlagStateUntilTimeout>
 801de7e:	4603      	mov	r3, r0
 801de80:	2b00      	cmp	r3, #0
 801de82:	d007      	beq.n	801de94 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801de84:	68fb      	ldr	r3, [r7, #12]
 801de86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801de88:	f043 0220 	orr.w	r2, r3, #32
 801de8c:	68fb      	ldr	r3, [r7, #12]
 801de8e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801de90:	2303      	movs	r3, #3
 801de92:	e023      	b.n	801dedc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801de94:	68fb      	ldr	r3, [r7, #12]
 801de96:	685b      	ldr	r3, [r3, #4]
 801de98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801de9c:	d11d      	bne.n	801deda <SPI_EndRxTransaction+0xa6>
 801de9e:	68fb      	ldr	r3, [r7, #12]
 801dea0:	689b      	ldr	r3, [r3, #8]
 801dea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801dea6:	d004      	beq.n	801deb2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801dea8:	68fb      	ldr	r3, [r7, #12]
 801deaa:	689b      	ldr	r3, [r3, #8]
 801deac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801deb0:	d113      	bne.n	801deda <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801deb2:	687b      	ldr	r3, [r7, #4]
 801deb4:	9300      	str	r3, [sp, #0]
 801deb6:	68bb      	ldr	r3, [r7, #8]
 801deb8:	2200      	movs	r2, #0
 801deba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801debe:	68f8      	ldr	r0, [r7, #12]
 801dec0:	f7ff ff22 	bl	801dd08 <SPI_WaitFifoStateUntilTimeout>
 801dec4:	4603      	mov	r3, r0
 801dec6:	2b00      	cmp	r3, #0
 801dec8:	d007      	beq.n	801deda <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801deca:	68fb      	ldr	r3, [r7, #12]
 801decc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dece:	f043 0220 	orr.w	r2, r3, #32
 801ded2:	68fb      	ldr	r3, [r7, #12]
 801ded4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801ded6:	2303      	movs	r3, #3
 801ded8:	e000      	b.n	801dedc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 801deda:	2300      	movs	r3, #0
}
 801dedc:	4618      	mov	r0, r3
 801dede:	3710      	adds	r7, #16
 801dee0:	46bd      	mov	sp, r7
 801dee2:	bd80      	pop	{r7, pc}

0801dee4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801dee4:	b580      	push	{r7, lr}
 801dee6:	b086      	sub	sp, #24
 801dee8:	af02      	add	r7, sp, #8
 801deea:	60f8      	str	r0, [r7, #12]
 801deec:	60b9      	str	r1, [r7, #8]
 801deee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801def0:	687b      	ldr	r3, [r7, #4]
 801def2:	9300      	str	r3, [sp, #0]
 801def4:	68bb      	ldr	r3, [r7, #8]
 801def6:	2200      	movs	r2, #0
 801def8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801defc:	68f8      	ldr	r0, [r7, #12]
 801defe:	f7ff ff03 	bl	801dd08 <SPI_WaitFifoStateUntilTimeout>
 801df02:	4603      	mov	r3, r0
 801df04:	2b00      	cmp	r3, #0
 801df06:	d007      	beq.n	801df18 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801df08:	68fb      	ldr	r3, [r7, #12]
 801df0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801df0c:	f043 0220 	orr.w	r2, r3, #32
 801df10:	68fb      	ldr	r3, [r7, #12]
 801df12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801df14:	2303      	movs	r3, #3
 801df16:	e027      	b.n	801df68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801df18:	687b      	ldr	r3, [r7, #4]
 801df1a:	9300      	str	r3, [sp, #0]
 801df1c:	68bb      	ldr	r3, [r7, #8]
 801df1e:	2200      	movs	r2, #0
 801df20:	2180      	movs	r1, #128	; 0x80
 801df22:	68f8      	ldr	r0, [r7, #12]
 801df24:	f7ff fe68 	bl	801dbf8 <SPI_WaitFlagStateUntilTimeout>
 801df28:	4603      	mov	r3, r0
 801df2a:	2b00      	cmp	r3, #0
 801df2c:	d007      	beq.n	801df3e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801df2e:	68fb      	ldr	r3, [r7, #12]
 801df30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801df32:	f043 0220 	orr.w	r2, r3, #32
 801df36:	68fb      	ldr	r3, [r7, #12]
 801df38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801df3a:	2303      	movs	r3, #3
 801df3c:	e014      	b.n	801df68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801df3e:	687b      	ldr	r3, [r7, #4]
 801df40:	9300      	str	r3, [sp, #0]
 801df42:	68bb      	ldr	r3, [r7, #8]
 801df44:	2200      	movs	r2, #0
 801df46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801df4a:	68f8      	ldr	r0, [r7, #12]
 801df4c:	f7ff fedc 	bl	801dd08 <SPI_WaitFifoStateUntilTimeout>
 801df50:	4603      	mov	r3, r0
 801df52:	2b00      	cmp	r3, #0
 801df54:	d007      	beq.n	801df66 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801df56:	68fb      	ldr	r3, [r7, #12]
 801df58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801df5a:	f043 0220 	orr.w	r2, r3, #32
 801df5e:	68fb      	ldr	r3, [r7, #12]
 801df60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801df62:	2303      	movs	r3, #3
 801df64:	e000      	b.n	801df68 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801df66:	2300      	movs	r3, #0
}
 801df68:	4618      	mov	r0, r3
 801df6a:	3710      	adds	r7, #16
 801df6c:	46bd      	mov	sp, r7
 801df6e:	bd80      	pop	{r7, pc}

0801df70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801df70:	b580      	push	{r7, lr}
 801df72:	b082      	sub	sp, #8
 801df74:	af00      	add	r7, sp, #0
 801df76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801df78:	687b      	ldr	r3, [r7, #4]
 801df7a:	2b00      	cmp	r3, #0
 801df7c:	d101      	bne.n	801df82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801df7e:	2301      	movs	r3, #1
 801df80:	e049      	b.n	801e016 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801df82:	687b      	ldr	r3, [r7, #4]
 801df84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801df88:	b2db      	uxtb	r3, r3
 801df8a:	2b00      	cmp	r3, #0
 801df8c:	d106      	bne.n	801df9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801df8e:	687b      	ldr	r3, [r7, #4]
 801df90:	2200      	movs	r2, #0
 801df92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801df96:	6878      	ldr	r0, [r7, #4]
 801df98:	f7f9 fd30 	bl	80179fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801df9c:	687b      	ldr	r3, [r7, #4]
 801df9e:	2202      	movs	r2, #2
 801dfa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801dfa4:	687b      	ldr	r3, [r7, #4]
 801dfa6:	681a      	ldr	r2, [r3, #0]
 801dfa8:	687b      	ldr	r3, [r7, #4]
 801dfaa:	3304      	adds	r3, #4
 801dfac:	4619      	mov	r1, r3
 801dfae:	4610      	mov	r0, r2
 801dfb0:	f000 fd6c 	bl	801ea8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801dfb4:	687b      	ldr	r3, [r7, #4]
 801dfb6:	2201      	movs	r2, #1
 801dfb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801dfbc:	687b      	ldr	r3, [r7, #4]
 801dfbe:	2201      	movs	r2, #1
 801dfc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801dfc4:	687b      	ldr	r3, [r7, #4]
 801dfc6:	2201      	movs	r2, #1
 801dfc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801dfcc:	687b      	ldr	r3, [r7, #4]
 801dfce:	2201      	movs	r2, #1
 801dfd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801dfd4:	687b      	ldr	r3, [r7, #4]
 801dfd6:	2201      	movs	r2, #1
 801dfd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801dfdc:	687b      	ldr	r3, [r7, #4]
 801dfde:	2201      	movs	r2, #1
 801dfe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801dfe4:	687b      	ldr	r3, [r7, #4]
 801dfe6:	2201      	movs	r2, #1
 801dfe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801dfec:	687b      	ldr	r3, [r7, #4]
 801dfee:	2201      	movs	r2, #1
 801dff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801dff4:	687b      	ldr	r3, [r7, #4]
 801dff6:	2201      	movs	r2, #1
 801dff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801dffc:	687b      	ldr	r3, [r7, #4]
 801dffe:	2201      	movs	r2, #1
 801e000:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801e004:	687b      	ldr	r3, [r7, #4]
 801e006:	2201      	movs	r2, #1
 801e008:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801e00c:	687b      	ldr	r3, [r7, #4]
 801e00e:	2201      	movs	r2, #1
 801e010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801e014:	2300      	movs	r3, #0
}
 801e016:	4618      	mov	r0, r3
 801e018:	3708      	adds	r7, #8
 801e01a:	46bd      	mov	sp, r7
 801e01c:	bd80      	pop	{r7, pc}
	...

0801e020 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801e020:	b480      	push	{r7}
 801e022:	b085      	sub	sp, #20
 801e024:	af00      	add	r7, sp, #0
 801e026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801e028:	687b      	ldr	r3, [r7, #4]
 801e02a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e02e:	b2db      	uxtb	r3, r3
 801e030:	2b01      	cmp	r3, #1
 801e032:	d001      	beq.n	801e038 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801e034:	2301      	movs	r3, #1
 801e036:	e04f      	b.n	801e0d8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e038:	687b      	ldr	r3, [r7, #4]
 801e03a:	2202      	movs	r2, #2
 801e03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801e040:	687b      	ldr	r3, [r7, #4]
 801e042:	681b      	ldr	r3, [r3, #0]
 801e044:	68da      	ldr	r2, [r3, #12]
 801e046:	687b      	ldr	r3, [r7, #4]
 801e048:	681b      	ldr	r3, [r3, #0]
 801e04a:	f042 0201 	orr.w	r2, r2, #1
 801e04e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e050:	687b      	ldr	r3, [r7, #4]
 801e052:	681b      	ldr	r3, [r3, #0]
 801e054:	4a23      	ldr	r2, [pc, #140]	; (801e0e4 <HAL_TIM_Base_Start_IT+0xc4>)
 801e056:	4293      	cmp	r3, r2
 801e058:	d01d      	beq.n	801e096 <HAL_TIM_Base_Start_IT+0x76>
 801e05a:	687b      	ldr	r3, [r7, #4]
 801e05c:	681b      	ldr	r3, [r3, #0]
 801e05e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e062:	d018      	beq.n	801e096 <HAL_TIM_Base_Start_IT+0x76>
 801e064:	687b      	ldr	r3, [r7, #4]
 801e066:	681b      	ldr	r3, [r3, #0]
 801e068:	4a1f      	ldr	r2, [pc, #124]	; (801e0e8 <HAL_TIM_Base_Start_IT+0xc8>)
 801e06a:	4293      	cmp	r3, r2
 801e06c:	d013      	beq.n	801e096 <HAL_TIM_Base_Start_IT+0x76>
 801e06e:	687b      	ldr	r3, [r7, #4]
 801e070:	681b      	ldr	r3, [r3, #0]
 801e072:	4a1e      	ldr	r2, [pc, #120]	; (801e0ec <HAL_TIM_Base_Start_IT+0xcc>)
 801e074:	4293      	cmp	r3, r2
 801e076:	d00e      	beq.n	801e096 <HAL_TIM_Base_Start_IT+0x76>
 801e078:	687b      	ldr	r3, [r7, #4]
 801e07a:	681b      	ldr	r3, [r3, #0]
 801e07c:	4a1c      	ldr	r2, [pc, #112]	; (801e0f0 <HAL_TIM_Base_Start_IT+0xd0>)
 801e07e:	4293      	cmp	r3, r2
 801e080:	d009      	beq.n	801e096 <HAL_TIM_Base_Start_IT+0x76>
 801e082:	687b      	ldr	r3, [r7, #4]
 801e084:	681b      	ldr	r3, [r3, #0]
 801e086:	4a1b      	ldr	r2, [pc, #108]	; (801e0f4 <HAL_TIM_Base_Start_IT+0xd4>)
 801e088:	4293      	cmp	r3, r2
 801e08a:	d004      	beq.n	801e096 <HAL_TIM_Base_Start_IT+0x76>
 801e08c:	687b      	ldr	r3, [r7, #4]
 801e08e:	681b      	ldr	r3, [r3, #0]
 801e090:	4a19      	ldr	r2, [pc, #100]	; (801e0f8 <HAL_TIM_Base_Start_IT+0xd8>)
 801e092:	4293      	cmp	r3, r2
 801e094:	d115      	bne.n	801e0c2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801e096:	687b      	ldr	r3, [r7, #4]
 801e098:	681b      	ldr	r3, [r3, #0]
 801e09a:	689a      	ldr	r2, [r3, #8]
 801e09c:	4b17      	ldr	r3, [pc, #92]	; (801e0fc <HAL_TIM_Base_Start_IT+0xdc>)
 801e09e:	4013      	ands	r3, r2
 801e0a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e0a2:	68fb      	ldr	r3, [r7, #12]
 801e0a4:	2b06      	cmp	r3, #6
 801e0a6:	d015      	beq.n	801e0d4 <HAL_TIM_Base_Start_IT+0xb4>
 801e0a8:	68fb      	ldr	r3, [r7, #12]
 801e0aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e0ae:	d011      	beq.n	801e0d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801e0b0:	687b      	ldr	r3, [r7, #4]
 801e0b2:	681b      	ldr	r3, [r3, #0]
 801e0b4:	681a      	ldr	r2, [r3, #0]
 801e0b6:	687b      	ldr	r3, [r7, #4]
 801e0b8:	681b      	ldr	r3, [r3, #0]
 801e0ba:	f042 0201 	orr.w	r2, r2, #1
 801e0be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e0c0:	e008      	b.n	801e0d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801e0c2:	687b      	ldr	r3, [r7, #4]
 801e0c4:	681b      	ldr	r3, [r3, #0]
 801e0c6:	681a      	ldr	r2, [r3, #0]
 801e0c8:	687b      	ldr	r3, [r7, #4]
 801e0ca:	681b      	ldr	r3, [r3, #0]
 801e0cc:	f042 0201 	orr.w	r2, r2, #1
 801e0d0:	601a      	str	r2, [r3, #0]
 801e0d2:	e000      	b.n	801e0d6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e0d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801e0d6:	2300      	movs	r3, #0
}
 801e0d8:	4618      	mov	r0, r3
 801e0da:	3714      	adds	r7, #20
 801e0dc:	46bd      	mov	sp, r7
 801e0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0e2:	4770      	bx	lr
 801e0e4:	40012c00 	.word	0x40012c00
 801e0e8:	40000400 	.word	0x40000400
 801e0ec:	40000800 	.word	0x40000800
 801e0f0:	40013400 	.word	0x40013400
 801e0f4:	40014000 	.word	0x40014000
 801e0f8:	40015000 	.word	0x40015000
 801e0fc:	00010007 	.word	0x00010007

0801e100 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801e100:	b580      	push	{r7, lr}
 801e102:	b082      	sub	sp, #8
 801e104:	af00      	add	r7, sp, #0
 801e106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801e108:	687b      	ldr	r3, [r7, #4]
 801e10a:	2b00      	cmp	r3, #0
 801e10c:	d101      	bne.n	801e112 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801e10e:	2301      	movs	r3, #1
 801e110:	e049      	b.n	801e1a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801e112:	687b      	ldr	r3, [r7, #4]
 801e114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e118:	b2db      	uxtb	r3, r3
 801e11a:	2b00      	cmp	r3, #0
 801e11c:	d106      	bne.n	801e12c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801e11e:	687b      	ldr	r3, [r7, #4]
 801e120:	2200      	movs	r2, #0
 801e122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801e126:	6878      	ldr	r0, [r7, #4]
 801e128:	f7f9 fca2 	bl	8017a70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e12c:	687b      	ldr	r3, [r7, #4]
 801e12e:	2202      	movs	r2, #2
 801e130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801e134:	687b      	ldr	r3, [r7, #4]
 801e136:	681a      	ldr	r2, [r3, #0]
 801e138:	687b      	ldr	r3, [r7, #4]
 801e13a:	3304      	adds	r3, #4
 801e13c:	4619      	mov	r1, r3
 801e13e:	4610      	mov	r0, r2
 801e140:	f000 fca4 	bl	801ea8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801e144:	687b      	ldr	r3, [r7, #4]
 801e146:	2201      	movs	r2, #1
 801e148:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e14c:	687b      	ldr	r3, [r7, #4]
 801e14e:	2201      	movs	r2, #1
 801e150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e154:	687b      	ldr	r3, [r7, #4]
 801e156:	2201      	movs	r2, #1
 801e158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e15c:	687b      	ldr	r3, [r7, #4]
 801e15e:	2201      	movs	r2, #1
 801e160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e164:	687b      	ldr	r3, [r7, #4]
 801e166:	2201      	movs	r2, #1
 801e168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e16c:	687b      	ldr	r3, [r7, #4]
 801e16e:	2201      	movs	r2, #1
 801e170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e174:	687b      	ldr	r3, [r7, #4]
 801e176:	2201      	movs	r2, #1
 801e178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e17c:	687b      	ldr	r3, [r7, #4]
 801e17e:	2201      	movs	r2, #1
 801e180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e184:	687b      	ldr	r3, [r7, #4]
 801e186:	2201      	movs	r2, #1
 801e188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801e18c:	687b      	ldr	r3, [r7, #4]
 801e18e:	2201      	movs	r2, #1
 801e190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801e194:	687b      	ldr	r3, [r7, #4]
 801e196:	2201      	movs	r2, #1
 801e198:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801e19c:	687b      	ldr	r3, [r7, #4]
 801e19e:	2201      	movs	r2, #1
 801e1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801e1a4:	2300      	movs	r3, #0
}
 801e1a6:	4618      	mov	r0, r3
 801e1a8:	3708      	adds	r7, #8
 801e1aa:	46bd      	mov	sp, r7
 801e1ac:	bd80      	pop	{r7, pc}
	...

0801e1b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801e1b0:	b580      	push	{r7, lr}
 801e1b2:	b084      	sub	sp, #16
 801e1b4:	af00      	add	r7, sp, #0
 801e1b6:	6078      	str	r0, [r7, #4]
 801e1b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801e1ba:	683b      	ldr	r3, [r7, #0]
 801e1bc:	2b00      	cmp	r3, #0
 801e1be:	d109      	bne.n	801e1d4 <HAL_TIM_PWM_Start+0x24>
 801e1c0:	687b      	ldr	r3, [r7, #4]
 801e1c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e1c6:	b2db      	uxtb	r3, r3
 801e1c8:	2b01      	cmp	r3, #1
 801e1ca:	bf14      	ite	ne
 801e1cc:	2301      	movne	r3, #1
 801e1ce:	2300      	moveq	r3, #0
 801e1d0:	b2db      	uxtb	r3, r3
 801e1d2:	e03c      	b.n	801e24e <HAL_TIM_PWM_Start+0x9e>
 801e1d4:	683b      	ldr	r3, [r7, #0]
 801e1d6:	2b04      	cmp	r3, #4
 801e1d8:	d109      	bne.n	801e1ee <HAL_TIM_PWM_Start+0x3e>
 801e1da:	687b      	ldr	r3, [r7, #4]
 801e1dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801e1e0:	b2db      	uxtb	r3, r3
 801e1e2:	2b01      	cmp	r3, #1
 801e1e4:	bf14      	ite	ne
 801e1e6:	2301      	movne	r3, #1
 801e1e8:	2300      	moveq	r3, #0
 801e1ea:	b2db      	uxtb	r3, r3
 801e1ec:	e02f      	b.n	801e24e <HAL_TIM_PWM_Start+0x9e>
 801e1ee:	683b      	ldr	r3, [r7, #0]
 801e1f0:	2b08      	cmp	r3, #8
 801e1f2:	d109      	bne.n	801e208 <HAL_TIM_PWM_Start+0x58>
 801e1f4:	687b      	ldr	r3, [r7, #4]
 801e1f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801e1fa:	b2db      	uxtb	r3, r3
 801e1fc:	2b01      	cmp	r3, #1
 801e1fe:	bf14      	ite	ne
 801e200:	2301      	movne	r3, #1
 801e202:	2300      	moveq	r3, #0
 801e204:	b2db      	uxtb	r3, r3
 801e206:	e022      	b.n	801e24e <HAL_TIM_PWM_Start+0x9e>
 801e208:	683b      	ldr	r3, [r7, #0]
 801e20a:	2b0c      	cmp	r3, #12
 801e20c:	d109      	bne.n	801e222 <HAL_TIM_PWM_Start+0x72>
 801e20e:	687b      	ldr	r3, [r7, #4]
 801e210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801e214:	b2db      	uxtb	r3, r3
 801e216:	2b01      	cmp	r3, #1
 801e218:	bf14      	ite	ne
 801e21a:	2301      	movne	r3, #1
 801e21c:	2300      	moveq	r3, #0
 801e21e:	b2db      	uxtb	r3, r3
 801e220:	e015      	b.n	801e24e <HAL_TIM_PWM_Start+0x9e>
 801e222:	683b      	ldr	r3, [r7, #0]
 801e224:	2b10      	cmp	r3, #16
 801e226:	d109      	bne.n	801e23c <HAL_TIM_PWM_Start+0x8c>
 801e228:	687b      	ldr	r3, [r7, #4]
 801e22a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e22e:	b2db      	uxtb	r3, r3
 801e230:	2b01      	cmp	r3, #1
 801e232:	bf14      	ite	ne
 801e234:	2301      	movne	r3, #1
 801e236:	2300      	moveq	r3, #0
 801e238:	b2db      	uxtb	r3, r3
 801e23a:	e008      	b.n	801e24e <HAL_TIM_PWM_Start+0x9e>
 801e23c:	687b      	ldr	r3, [r7, #4]
 801e23e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801e242:	b2db      	uxtb	r3, r3
 801e244:	2b01      	cmp	r3, #1
 801e246:	bf14      	ite	ne
 801e248:	2301      	movne	r3, #1
 801e24a:	2300      	moveq	r3, #0
 801e24c:	b2db      	uxtb	r3, r3
 801e24e:	2b00      	cmp	r3, #0
 801e250:	d001      	beq.n	801e256 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801e252:	2301      	movs	r3, #1
 801e254:	e0a1      	b.n	801e39a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801e256:	683b      	ldr	r3, [r7, #0]
 801e258:	2b00      	cmp	r3, #0
 801e25a:	d104      	bne.n	801e266 <HAL_TIM_PWM_Start+0xb6>
 801e25c:	687b      	ldr	r3, [r7, #4]
 801e25e:	2202      	movs	r2, #2
 801e260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e264:	e023      	b.n	801e2ae <HAL_TIM_PWM_Start+0xfe>
 801e266:	683b      	ldr	r3, [r7, #0]
 801e268:	2b04      	cmp	r3, #4
 801e26a:	d104      	bne.n	801e276 <HAL_TIM_PWM_Start+0xc6>
 801e26c:	687b      	ldr	r3, [r7, #4]
 801e26e:	2202      	movs	r2, #2
 801e270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e274:	e01b      	b.n	801e2ae <HAL_TIM_PWM_Start+0xfe>
 801e276:	683b      	ldr	r3, [r7, #0]
 801e278:	2b08      	cmp	r3, #8
 801e27a:	d104      	bne.n	801e286 <HAL_TIM_PWM_Start+0xd6>
 801e27c:	687b      	ldr	r3, [r7, #4]
 801e27e:	2202      	movs	r2, #2
 801e280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e284:	e013      	b.n	801e2ae <HAL_TIM_PWM_Start+0xfe>
 801e286:	683b      	ldr	r3, [r7, #0]
 801e288:	2b0c      	cmp	r3, #12
 801e28a:	d104      	bne.n	801e296 <HAL_TIM_PWM_Start+0xe6>
 801e28c:	687b      	ldr	r3, [r7, #4]
 801e28e:	2202      	movs	r2, #2
 801e290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e294:	e00b      	b.n	801e2ae <HAL_TIM_PWM_Start+0xfe>
 801e296:	683b      	ldr	r3, [r7, #0]
 801e298:	2b10      	cmp	r3, #16
 801e29a:	d104      	bne.n	801e2a6 <HAL_TIM_PWM_Start+0xf6>
 801e29c:	687b      	ldr	r3, [r7, #4]
 801e29e:	2202      	movs	r2, #2
 801e2a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e2a4:	e003      	b.n	801e2ae <HAL_TIM_PWM_Start+0xfe>
 801e2a6:	687b      	ldr	r3, [r7, #4]
 801e2a8:	2202      	movs	r2, #2
 801e2aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801e2ae:	687b      	ldr	r3, [r7, #4]
 801e2b0:	681b      	ldr	r3, [r3, #0]
 801e2b2:	2201      	movs	r2, #1
 801e2b4:	6839      	ldr	r1, [r7, #0]
 801e2b6:	4618      	mov	r0, r3
 801e2b8:	f000 ffb0 	bl	801f21c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801e2bc:	687b      	ldr	r3, [r7, #4]
 801e2be:	681b      	ldr	r3, [r3, #0]
 801e2c0:	4a38      	ldr	r2, [pc, #224]	; (801e3a4 <HAL_TIM_PWM_Start+0x1f4>)
 801e2c2:	4293      	cmp	r3, r2
 801e2c4:	d018      	beq.n	801e2f8 <HAL_TIM_PWM_Start+0x148>
 801e2c6:	687b      	ldr	r3, [r7, #4]
 801e2c8:	681b      	ldr	r3, [r3, #0]
 801e2ca:	4a37      	ldr	r2, [pc, #220]	; (801e3a8 <HAL_TIM_PWM_Start+0x1f8>)
 801e2cc:	4293      	cmp	r3, r2
 801e2ce:	d013      	beq.n	801e2f8 <HAL_TIM_PWM_Start+0x148>
 801e2d0:	687b      	ldr	r3, [r7, #4]
 801e2d2:	681b      	ldr	r3, [r3, #0]
 801e2d4:	4a35      	ldr	r2, [pc, #212]	; (801e3ac <HAL_TIM_PWM_Start+0x1fc>)
 801e2d6:	4293      	cmp	r3, r2
 801e2d8:	d00e      	beq.n	801e2f8 <HAL_TIM_PWM_Start+0x148>
 801e2da:	687b      	ldr	r3, [r7, #4]
 801e2dc:	681b      	ldr	r3, [r3, #0]
 801e2de:	4a34      	ldr	r2, [pc, #208]	; (801e3b0 <HAL_TIM_PWM_Start+0x200>)
 801e2e0:	4293      	cmp	r3, r2
 801e2e2:	d009      	beq.n	801e2f8 <HAL_TIM_PWM_Start+0x148>
 801e2e4:	687b      	ldr	r3, [r7, #4]
 801e2e6:	681b      	ldr	r3, [r3, #0]
 801e2e8:	4a32      	ldr	r2, [pc, #200]	; (801e3b4 <HAL_TIM_PWM_Start+0x204>)
 801e2ea:	4293      	cmp	r3, r2
 801e2ec:	d004      	beq.n	801e2f8 <HAL_TIM_PWM_Start+0x148>
 801e2ee:	687b      	ldr	r3, [r7, #4]
 801e2f0:	681b      	ldr	r3, [r3, #0]
 801e2f2:	4a31      	ldr	r2, [pc, #196]	; (801e3b8 <HAL_TIM_PWM_Start+0x208>)
 801e2f4:	4293      	cmp	r3, r2
 801e2f6:	d101      	bne.n	801e2fc <HAL_TIM_PWM_Start+0x14c>
 801e2f8:	2301      	movs	r3, #1
 801e2fa:	e000      	b.n	801e2fe <HAL_TIM_PWM_Start+0x14e>
 801e2fc:	2300      	movs	r3, #0
 801e2fe:	2b00      	cmp	r3, #0
 801e300:	d007      	beq.n	801e312 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801e302:	687b      	ldr	r3, [r7, #4]
 801e304:	681b      	ldr	r3, [r3, #0]
 801e306:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e308:	687b      	ldr	r3, [r7, #4]
 801e30a:	681b      	ldr	r3, [r3, #0]
 801e30c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801e310:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e312:	687b      	ldr	r3, [r7, #4]
 801e314:	681b      	ldr	r3, [r3, #0]
 801e316:	4a23      	ldr	r2, [pc, #140]	; (801e3a4 <HAL_TIM_PWM_Start+0x1f4>)
 801e318:	4293      	cmp	r3, r2
 801e31a:	d01d      	beq.n	801e358 <HAL_TIM_PWM_Start+0x1a8>
 801e31c:	687b      	ldr	r3, [r7, #4]
 801e31e:	681b      	ldr	r3, [r3, #0]
 801e320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e324:	d018      	beq.n	801e358 <HAL_TIM_PWM_Start+0x1a8>
 801e326:	687b      	ldr	r3, [r7, #4]
 801e328:	681b      	ldr	r3, [r3, #0]
 801e32a:	4a24      	ldr	r2, [pc, #144]	; (801e3bc <HAL_TIM_PWM_Start+0x20c>)
 801e32c:	4293      	cmp	r3, r2
 801e32e:	d013      	beq.n	801e358 <HAL_TIM_PWM_Start+0x1a8>
 801e330:	687b      	ldr	r3, [r7, #4]
 801e332:	681b      	ldr	r3, [r3, #0]
 801e334:	4a22      	ldr	r2, [pc, #136]	; (801e3c0 <HAL_TIM_PWM_Start+0x210>)
 801e336:	4293      	cmp	r3, r2
 801e338:	d00e      	beq.n	801e358 <HAL_TIM_PWM_Start+0x1a8>
 801e33a:	687b      	ldr	r3, [r7, #4]
 801e33c:	681b      	ldr	r3, [r3, #0]
 801e33e:	4a1a      	ldr	r2, [pc, #104]	; (801e3a8 <HAL_TIM_PWM_Start+0x1f8>)
 801e340:	4293      	cmp	r3, r2
 801e342:	d009      	beq.n	801e358 <HAL_TIM_PWM_Start+0x1a8>
 801e344:	687b      	ldr	r3, [r7, #4]
 801e346:	681b      	ldr	r3, [r3, #0]
 801e348:	4a18      	ldr	r2, [pc, #96]	; (801e3ac <HAL_TIM_PWM_Start+0x1fc>)
 801e34a:	4293      	cmp	r3, r2
 801e34c:	d004      	beq.n	801e358 <HAL_TIM_PWM_Start+0x1a8>
 801e34e:	687b      	ldr	r3, [r7, #4]
 801e350:	681b      	ldr	r3, [r3, #0]
 801e352:	4a19      	ldr	r2, [pc, #100]	; (801e3b8 <HAL_TIM_PWM_Start+0x208>)
 801e354:	4293      	cmp	r3, r2
 801e356:	d115      	bne.n	801e384 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801e358:	687b      	ldr	r3, [r7, #4]
 801e35a:	681b      	ldr	r3, [r3, #0]
 801e35c:	689a      	ldr	r2, [r3, #8]
 801e35e:	4b19      	ldr	r3, [pc, #100]	; (801e3c4 <HAL_TIM_PWM_Start+0x214>)
 801e360:	4013      	ands	r3, r2
 801e362:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e364:	68fb      	ldr	r3, [r7, #12]
 801e366:	2b06      	cmp	r3, #6
 801e368:	d015      	beq.n	801e396 <HAL_TIM_PWM_Start+0x1e6>
 801e36a:	68fb      	ldr	r3, [r7, #12]
 801e36c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e370:	d011      	beq.n	801e396 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 801e372:	687b      	ldr	r3, [r7, #4]
 801e374:	681b      	ldr	r3, [r3, #0]
 801e376:	681a      	ldr	r2, [r3, #0]
 801e378:	687b      	ldr	r3, [r7, #4]
 801e37a:	681b      	ldr	r3, [r3, #0]
 801e37c:	f042 0201 	orr.w	r2, r2, #1
 801e380:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e382:	e008      	b.n	801e396 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801e384:	687b      	ldr	r3, [r7, #4]
 801e386:	681b      	ldr	r3, [r3, #0]
 801e388:	681a      	ldr	r2, [r3, #0]
 801e38a:	687b      	ldr	r3, [r7, #4]
 801e38c:	681b      	ldr	r3, [r3, #0]
 801e38e:	f042 0201 	orr.w	r2, r2, #1
 801e392:	601a      	str	r2, [r3, #0]
 801e394:	e000      	b.n	801e398 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e396:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801e398:	2300      	movs	r3, #0
}
 801e39a:	4618      	mov	r0, r3
 801e39c:	3710      	adds	r7, #16
 801e39e:	46bd      	mov	sp, r7
 801e3a0:	bd80      	pop	{r7, pc}
 801e3a2:	bf00      	nop
 801e3a4:	40012c00 	.word	0x40012c00
 801e3a8:	40013400 	.word	0x40013400
 801e3ac:	40014000 	.word	0x40014000
 801e3b0:	40014400 	.word	0x40014400
 801e3b4:	40014800 	.word	0x40014800
 801e3b8:	40015000 	.word	0x40015000
 801e3bc:	40000400 	.word	0x40000400
 801e3c0:	40000800 	.word	0x40000800
 801e3c4:	00010007 	.word	0x00010007

0801e3c8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801e3c8:	b580      	push	{r7, lr}
 801e3ca:	b082      	sub	sp, #8
 801e3cc:	af00      	add	r7, sp, #0
 801e3ce:	6078      	str	r0, [r7, #4]
 801e3d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801e3d2:	687b      	ldr	r3, [r7, #4]
 801e3d4:	681b      	ldr	r3, [r3, #0]
 801e3d6:	2200      	movs	r2, #0
 801e3d8:	6839      	ldr	r1, [r7, #0]
 801e3da:	4618      	mov	r0, r3
 801e3dc:	f000 ff1e 	bl	801f21c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801e3e0:	687b      	ldr	r3, [r7, #4]
 801e3e2:	681b      	ldr	r3, [r3, #0]
 801e3e4:	4a40      	ldr	r2, [pc, #256]	; (801e4e8 <HAL_TIM_PWM_Stop+0x120>)
 801e3e6:	4293      	cmp	r3, r2
 801e3e8:	d018      	beq.n	801e41c <HAL_TIM_PWM_Stop+0x54>
 801e3ea:	687b      	ldr	r3, [r7, #4]
 801e3ec:	681b      	ldr	r3, [r3, #0]
 801e3ee:	4a3f      	ldr	r2, [pc, #252]	; (801e4ec <HAL_TIM_PWM_Stop+0x124>)
 801e3f0:	4293      	cmp	r3, r2
 801e3f2:	d013      	beq.n	801e41c <HAL_TIM_PWM_Stop+0x54>
 801e3f4:	687b      	ldr	r3, [r7, #4]
 801e3f6:	681b      	ldr	r3, [r3, #0]
 801e3f8:	4a3d      	ldr	r2, [pc, #244]	; (801e4f0 <HAL_TIM_PWM_Stop+0x128>)
 801e3fa:	4293      	cmp	r3, r2
 801e3fc:	d00e      	beq.n	801e41c <HAL_TIM_PWM_Stop+0x54>
 801e3fe:	687b      	ldr	r3, [r7, #4]
 801e400:	681b      	ldr	r3, [r3, #0]
 801e402:	4a3c      	ldr	r2, [pc, #240]	; (801e4f4 <HAL_TIM_PWM_Stop+0x12c>)
 801e404:	4293      	cmp	r3, r2
 801e406:	d009      	beq.n	801e41c <HAL_TIM_PWM_Stop+0x54>
 801e408:	687b      	ldr	r3, [r7, #4]
 801e40a:	681b      	ldr	r3, [r3, #0]
 801e40c:	4a3a      	ldr	r2, [pc, #232]	; (801e4f8 <HAL_TIM_PWM_Stop+0x130>)
 801e40e:	4293      	cmp	r3, r2
 801e410:	d004      	beq.n	801e41c <HAL_TIM_PWM_Stop+0x54>
 801e412:	687b      	ldr	r3, [r7, #4]
 801e414:	681b      	ldr	r3, [r3, #0]
 801e416:	4a39      	ldr	r2, [pc, #228]	; (801e4fc <HAL_TIM_PWM_Stop+0x134>)
 801e418:	4293      	cmp	r3, r2
 801e41a:	d101      	bne.n	801e420 <HAL_TIM_PWM_Stop+0x58>
 801e41c:	2301      	movs	r3, #1
 801e41e:	e000      	b.n	801e422 <HAL_TIM_PWM_Stop+0x5a>
 801e420:	2300      	movs	r3, #0
 801e422:	2b00      	cmp	r3, #0
 801e424:	d017      	beq.n	801e456 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801e426:	687b      	ldr	r3, [r7, #4]
 801e428:	681b      	ldr	r3, [r3, #0]
 801e42a:	6a1a      	ldr	r2, [r3, #32]
 801e42c:	f241 1311 	movw	r3, #4369	; 0x1111
 801e430:	4013      	ands	r3, r2
 801e432:	2b00      	cmp	r3, #0
 801e434:	d10f      	bne.n	801e456 <HAL_TIM_PWM_Stop+0x8e>
 801e436:	687b      	ldr	r3, [r7, #4]
 801e438:	681b      	ldr	r3, [r3, #0]
 801e43a:	6a1a      	ldr	r2, [r3, #32]
 801e43c:	f244 4344 	movw	r3, #17476	; 0x4444
 801e440:	4013      	ands	r3, r2
 801e442:	2b00      	cmp	r3, #0
 801e444:	d107      	bne.n	801e456 <HAL_TIM_PWM_Stop+0x8e>
 801e446:	687b      	ldr	r3, [r7, #4]
 801e448:	681b      	ldr	r3, [r3, #0]
 801e44a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e44c:	687b      	ldr	r3, [r7, #4]
 801e44e:	681b      	ldr	r3, [r3, #0]
 801e450:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801e454:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801e456:	687b      	ldr	r3, [r7, #4]
 801e458:	681b      	ldr	r3, [r3, #0]
 801e45a:	6a1a      	ldr	r2, [r3, #32]
 801e45c:	f241 1311 	movw	r3, #4369	; 0x1111
 801e460:	4013      	ands	r3, r2
 801e462:	2b00      	cmp	r3, #0
 801e464:	d10f      	bne.n	801e486 <HAL_TIM_PWM_Stop+0xbe>
 801e466:	687b      	ldr	r3, [r7, #4]
 801e468:	681b      	ldr	r3, [r3, #0]
 801e46a:	6a1a      	ldr	r2, [r3, #32]
 801e46c:	f244 4344 	movw	r3, #17476	; 0x4444
 801e470:	4013      	ands	r3, r2
 801e472:	2b00      	cmp	r3, #0
 801e474:	d107      	bne.n	801e486 <HAL_TIM_PWM_Stop+0xbe>
 801e476:	687b      	ldr	r3, [r7, #4]
 801e478:	681b      	ldr	r3, [r3, #0]
 801e47a:	681a      	ldr	r2, [r3, #0]
 801e47c:	687b      	ldr	r3, [r7, #4]
 801e47e:	681b      	ldr	r3, [r3, #0]
 801e480:	f022 0201 	bic.w	r2, r2, #1
 801e484:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801e486:	683b      	ldr	r3, [r7, #0]
 801e488:	2b00      	cmp	r3, #0
 801e48a:	d104      	bne.n	801e496 <HAL_TIM_PWM_Stop+0xce>
 801e48c:	687b      	ldr	r3, [r7, #4]
 801e48e:	2201      	movs	r2, #1
 801e490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e494:	e023      	b.n	801e4de <HAL_TIM_PWM_Stop+0x116>
 801e496:	683b      	ldr	r3, [r7, #0]
 801e498:	2b04      	cmp	r3, #4
 801e49a:	d104      	bne.n	801e4a6 <HAL_TIM_PWM_Stop+0xde>
 801e49c:	687b      	ldr	r3, [r7, #4]
 801e49e:	2201      	movs	r2, #1
 801e4a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e4a4:	e01b      	b.n	801e4de <HAL_TIM_PWM_Stop+0x116>
 801e4a6:	683b      	ldr	r3, [r7, #0]
 801e4a8:	2b08      	cmp	r3, #8
 801e4aa:	d104      	bne.n	801e4b6 <HAL_TIM_PWM_Stop+0xee>
 801e4ac:	687b      	ldr	r3, [r7, #4]
 801e4ae:	2201      	movs	r2, #1
 801e4b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e4b4:	e013      	b.n	801e4de <HAL_TIM_PWM_Stop+0x116>
 801e4b6:	683b      	ldr	r3, [r7, #0]
 801e4b8:	2b0c      	cmp	r3, #12
 801e4ba:	d104      	bne.n	801e4c6 <HAL_TIM_PWM_Stop+0xfe>
 801e4bc:	687b      	ldr	r3, [r7, #4]
 801e4be:	2201      	movs	r2, #1
 801e4c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e4c4:	e00b      	b.n	801e4de <HAL_TIM_PWM_Stop+0x116>
 801e4c6:	683b      	ldr	r3, [r7, #0]
 801e4c8:	2b10      	cmp	r3, #16
 801e4ca:	d104      	bne.n	801e4d6 <HAL_TIM_PWM_Stop+0x10e>
 801e4cc:	687b      	ldr	r3, [r7, #4]
 801e4ce:	2201      	movs	r2, #1
 801e4d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e4d4:	e003      	b.n	801e4de <HAL_TIM_PWM_Stop+0x116>
 801e4d6:	687b      	ldr	r3, [r7, #4]
 801e4d8:	2201      	movs	r2, #1
 801e4da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 801e4de:	2300      	movs	r3, #0
}
 801e4e0:	4618      	mov	r0, r3
 801e4e2:	3708      	adds	r7, #8
 801e4e4:	46bd      	mov	sp, r7
 801e4e6:	bd80      	pop	{r7, pc}
 801e4e8:	40012c00 	.word	0x40012c00
 801e4ec:	40013400 	.word	0x40013400
 801e4f0:	40014000 	.word	0x40014000
 801e4f4:	40014400 	.word	0x40014400
 801e4f8:	40014800 	.word	0x40014800
 801e4fc:	40015000 	.word	0x40015000

0801e500 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801e500:	b580      	push	{r7, lr}
 801e502:	b082      	sub	sp, #8
 801e504:	af00      	add	r7, sp, #0
 801e506:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801e508:	687b      	ldr	r3, [r7, #4]
 801e50a:	681b      	ldr	r3, [r3, #0]
 801e50c:	691b      	ldr	r3, [r3, #16]
 801e50e:	f003 0302 	and.w	r3, r3, #2
 801e512:	2b02      	cmp	r3, #2
 801e514:	d122      	bne.n	801e55c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801e516:	687b      	ldr	r3, [r7, #4]
 801e518:	681b      	ldr	r3, [r3, #0]
 801e51a:	68db      	ldr	r3, [r3, #12]
 801e51c:	f003 0302 	and.w	r3, r3, #2
 801e520:	2b02      	cmp	r3, #2
 801e522:	d11b      	bne.n	801e55c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801e524:	687b      	ldr	r3, [r7, #4]
 801e526:	681b      	ldr	r3, [r3, #0]
 801e528:	f06f 0202 	mvn.w	r2, #2
 801e52c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801e52e:	687b      	ldr	r3, [r7, #4]
 801e530:	2201      	movs	r2, #1
 801e532:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801e534:	687b      	ldr	r3, [r7, #4]
 801e536:	681b      	ldr	r3, [r3, #0]
 801e538:	699b      	ldr	r3, [r3, #24]
 801e53a:	f003 0303 	and.w	r3, r3, #3
 801e53e:	2b00      	cmp	r3, #0
 801e540:	d003      	beq.n	801e54a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801e542:	6878      	ldr	r0, [r7, #4]
 801e544:	f000 fa84 	bl	801ea50 <HAL_TIM_IC_CaptureCallback>
 801e548:	e005      	b.n	801e556 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801e54a:	6878      	ldr	r0, [r7, #4]
 801e54c:	f000 fa76 	bl	801ea3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e550:	6878      	ldr	r0, [r7, #4]
 801e552:	f000 fa87 	bl	801ea64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e556:	687b      	ldr	r3, [r7, #4]
 801e558:	2200      	movs	r2, #0
 801e55a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801e55c:	687b      	ldr	r3, [r7, #4]
 801e55e:	681b      	ldr	r3, [r3, #0]
 801e560:	691b      	ldr	r3, [r3, #16]
 801e562:	f003 0304 	and.w	r3, r3, #4
 801e566:	2b04      	cmp	r3, #4
 801e568:	d122      	bne.n	801e5b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801e56a:	687b      	ldr	r3, [r7, #4]
 801e56c:	681b      	ldr	r3, [r3, #0]
 801e56e:	68db      	ldr	r3, [r3, #12]
 801e570:	f003 0304 	and.w	r3, r3, #4
 801e574:	2b04      	cmp	r3, #4
 801e576:	d11b      	bne.n	801e5b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801e578:	687b      	ldr	r3, [r7, #4]
 801e57a:	681b      	ldr	r3, [r3, #0]
 801e57c:	f06f 0204 	mvn.w	r2, #4
 801e580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801e582:	687b      	ldr	r3, [r7, #4]
 801e584:	2202      	movs	r2, #2
 801e586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801e588:	687b      	ldr	r3, [r7, #4]
 801e58a:	681b      	ldr	r3, [r3, #0]
 801e58c:	699b      	ldr	r3, [r3, #24]
 801e58e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e592:	2b00      	cmp	r3, #0
 801e594:	d003      	beq.n	801e59e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e596:	6878      	ldr	r0, [r7, #4]
 801e598:	f000 fa5a 	bl	801ea50 <HAL_TIM_IC_CaptureCallback>
 801e59c:	e005      	b.n	801e5aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e59e:	6878      	ldr	r0, [r7, #4]
 801e5a0:	f000 fa4c 	bl	801ea3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e5a4:	6878      	ldr	r0, [r7, #4]
 801e5a6:	f000 fa5d 	bl	801ea64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e5aa:	687b      	ldr	r3, [r7, #4]
 801e5ac:	2200      	movs	r2, #0
 801e5ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801e5b0:	687b      	ldr	r3, [r7, #4]
 801e5b2:	681b      	ldr	r3, [r3, #0]
 801e5b4:	691b      	ldr	r3, [r3, #16]
 801e5b6:	f003 0308 	and.w	r3, r3, #8
 801e5ba:	2b08      	cmp	r3, #8
 801e5bc:	d122      	bne.n	801e604 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801e5be:	687b      	ldr	r3, [r7, #4]
 801e5c0:	681b      	ldr	r3, [r3, #0]
 801e5c2:	68db      	ldr	r3, [r3, #12]
 801e5c4:	f003 0308 	and.w	r3, r3, #8
 801e5c8:	2b08      	cmp	r3, #8
 801e5ca:	d11b      	bne.n	801e604 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801e5cc:	687b      	ldr	r3, [r7, #4]
 801e5ce:	681b      	ldr	r3, [r3, #0]
 801e5d0:	f06f 0208 	mvn.w	r2, #8
 801e5d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801e5d6:	687b      	ldr	r3, [r7, #4]
 801e5d8:	2204      	movs	r2, #4
 801e5da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801e5dc:	687b      	ldr	r3, [r7, #4]
 801e5de:	681b      	ldr	r3, [r3, #0]
 801e5e0:	69db      	ldr	r3, [r3, #28]
 801e5e2:	f003 0303 	and.w	r3, r3, #3
 801e5e6:	2b00      	cmp	r3, #0
 801e5e8:	d003      	beq.n	801e5f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e5ea:	6878      	ldr	r0, [r7, #4]
 801e5ec:	f000 fa30 	bl	801ea50 <HAL_TIM_IC_CaptureCallback>
 801e5f0:	e005      	b.n	801e5fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e5f2:	6878      	ldr	r0, [r7, #4]
 801e5f4:	f000 fa22 	bl	801ea3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e5f8:	6878      	ldr	r0, [r7, #4]
 801e5fa:	f000 fa33 	bl	801ea64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e5fe:	687b      	ldr	r3, [r7, #4]
 801e600:	2200      	movs	r2, #0
 801e602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801e604:	687b      	ldr	r3, [r7, #4]
 801e606:	681b      	ldr	r3, [r3, #0]
 801e608:	691b      	ldr	r3, [r3, #16]
 801e60a:	f003 0310 	and.w	r3, r3, #16
 801e60e:	2b10      	cmp	r3, #16
 801e610:	d122      	bne.n	801e658 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801e612:	687b      	ldr	r3, [r7, #4]
 801e614:	681b      	ldr	r3, [r3, #0]
 801e616:	68db      	ldr	r3, [r3, #12]
 801e618:	f003 0310 	and.w	r3, r3, #16
 801e61c:	2b10      	cmp	r3, #16
 801e61e:	d11b      	bne.n	801e658 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801e620:	687b      	ldr	r3, [r7, #4]
 801e622:	681b      	ldr	r3, [r3, #0]
 801e624:	f06f 0210 	mvn.w	r2, #16
 801e628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801e62a:	687b      	ldr	r3, [r7, #4]
 801e62c:	2208      	movs	r2, #8
 801e62e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801e630:	687b      	ldr	r3, [r7, #4]
 801e632:	681b      	ldr	r3, [r3, #0]
 801e634:	69db      	ldr	r3, [r3, #28]
 801e636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e63a:	2b00      	cmp	r3, #0
 801e63c:	d003      	beq.n	801e646 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e63e:	6878      	ldr	r0, [r7, #4]
 801e640:	f000 fa06 	bl	801ea50 <HAL_TIM_IC_CaptureCallback>
 801e644:	e005      	b.n	801e652 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e646:	6878      	ldr	r0, [r7, #4]
 801e648:	f000 f9f8 	bl	801ea3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e64c:	6878      	ldr	r0, [r7, #4]
 801e64e:	f000 fa09 	bl	801ea64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e652:	687b      	ldr	r3, [r7, #4]
 801e654:	2200      	movs	r2, #0
 801e656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801e658:	687b      	ldr	r3, [r7, #4]
 801e65a:	681b      	ldr	r3, [r3, #0]
 801e65c:	691b      	ldr	r3, [r3, #16]
 801e65e:	f003 0301 	and.w	r3, r3, #1
 801e662:	2b01      	cmp	r3, #1
 801e664:	d10e      	bne.n	801e684 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801e666:	687b      	ldr	r3, [r7, #4]
 801e668:	681b      	ldr	r3, [r3, #0]
 801e66a:	68db      	ldr	r3, [r3, #12]
 801e66c:	f003 0301 	and.w	r3, r3, #1
 801e670:	2b01      	cmp	r3, #1
 801e672:	d107      	bne.n	801e684 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801e674:	687b      	ldr	r3, [r7, #4]
 801e676:	681b      	ldr	r3, [r3, #0]
 801e678:	f06f 0201 	mvn.w	r2, #1
 801e67c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801e67e:	6878      	ldr	r0, [r7, #4]
 801e680:	f000 f9d2 	bl	801ea28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801e684:	687b      	ldr	r3, [r7, #4]
 801e686:	681b      	ldr	r3, [r3, #0]
 801e688:	691b      	ldr	r3, [r3, #16]
 801e68a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e68e:	2b80      	cmp	r3, #128	; 0x80
 801e690:	d10e      	bne.n	801e6b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801e692:	687b      	ldr	r3, [r7, #4]
 801e694:	681b      	ldr	r3, [r3, #0]
 801e696:	68db      	ldr	r3, [r3, #12]
 801e698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e69c:	2b80      	cmp	r3, #128	; 0x80
 801e69e:	d107      	bne.n	801e6b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801e6a0:	687b      	ldr	r3, [r7, #4]
 801e6a2:	681b      	ldr	r3, [r3, #0]
 801e6a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801e6a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801e6aa:	6878      	ldr	r0, [r7, #4]
 801e6ac:	f000 ff26 	bl	801f4fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801e6b0:	687b      	ldr	r3, [r7, #4]
 801e6b2:	681b      	ldr	r3, [r3, #0]
 801e6b4:	691b      	ldr	r3, [r3, #16]
 801e6b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e6ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e6be:	d10e      	bne.n	801e6de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801e6c0:	687b      	ldr	r3, [r7, #4]
 801e6c2:	681b      	ldr	r3, [r3, #0]
 801e6c4:	68db      	ldr	r3, [r3, #12]
 801e6c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e6ca:	2b80      	cmp	r3, #128	; 0x80
 801e6cc:	d107      	bne.n	801e6de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801e6ce:	687b      	ldr	r3, [r7, #4]
 801e6d0:	681b      	ldr	r3, [r3, #0]
 801e6d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801e6d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801e6d8:	6878      	ldr	r0, [r7, #4]
 801e6da:	f000 ff19 	bl	801f510 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801e6de:	687b      	ldr	r3, [r7, #4]
 801e6e0:	681b      	ldr	r3, [r3, #0]
 801e6e2:	691b      	ldr	r3, [r3, #16]
 801e6e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e6e8:	2b40      	cmp	r3, #64	; 0x40
 801e6ea:	d10e      	bne.n	801e70a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801e6ec:	687b      	ldr	r3, [r7, #4]
 801e6ee:	681b      	ldr	r3, [r3, #0]
 801e6f0:	68db      	ldr	r3, [r3, #12]
 801e6f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e6f6:	2b40      	cmp	r3, #64	; 0x40
 801e6f8:	d107      	bne.n	801e70a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801e6fa:	687b      	ldr	r3, [r7, #4]
 801e6fc:	681b      	ldr	r3, [r3, #0]
 801e6fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801e702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801e704:	6878      	ldr	r0, [r7, #4]
 801e706:	f000 f9b7 	bl	801ea78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801e70a:	687b      	ldr	r3, [r7, #4]
 801e70c:	681b      	ldr	r3, [r3, #0]
 801e70e:	691b      	ldr	r3, [r3, #16]
 801e710:	f003 0320 	and.w	r3, r3, #32
 801e714:	2b20      	cmp	r3, #32
 801e716:	d10e      	bne.n	801e736 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801e718:	687b      	ldr	r3, [r7, #4]
 801e71a:	681b      	ldr	r3, [r3, #0]
 801e71c:	68db      	ldr	r3, [r3, #12]
 801e71e:	f003 0320 	and.w	r3, r3, #32
 801e722:	2b20      	cmp	r3, #32
 801e724:	d107      	bne.n	801e736 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801e726:	687b      	ldr	r3, [r7, #4]
 801e728:	681b      	ldr	r3, [r3, #0]
 801e72a:	f06f 0220 	mvn.w	r2, #32
 801e72e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801e730:	6878      	ldr	r0, [r7, #4]
 801e732:	f000 fed9 	bl	801f4e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 801e736:	687b      	ldr	r3, [r7, #4]
 801e738:	681b      	ldr	r3, [r3, #0]
 801e73a:	691b      	ldr	r3, [r3, #16]
 801e73c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801e740:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e744:	d10f      	bne.n	801e766 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 801e746:	687b      	ldr	r3, [r7, #4]
 801e748:	681b      	ldr	r3, [r3, #0]
 801e74a:	68db      	ldr	r3, [r3, #12]
 801e74c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801e750:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e754:	d107      	bne.n	801e766 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 801e756:	687b      	ldr	r3, [r7, #4]
 801e758:	681b      	ldr	r3, [r3, #0]
 801e75a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 801e75e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 801e760:	6878      	ldr	r0, [r7, #4]
 801e762:	f000 fedf 	bl	801f524 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 801e766:	687b      	ldr	r3, [r7, #4]
 801e768:	681b      	ldr	r3, [r3, #0]
 801e76a:	691b      	ldr	r3, [r3, #16]
 801e76c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801e770:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801e774:	d10f      	bne.n	801e796 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 801e776:	687b      	ldr	r3, [r7, #4]
 801e778:	681b      	ldr	r3, [r3, #0]
 801e77a:	68db      	ldr	r3, [r3, #12]
 801e77c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801e780:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801e784:	d107      	bne.n	801e796 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 801e786:	687b      	ldr	r3, [r7, #4]
 801e788:	681b      	ldr	r3, [r3, #0]
 801e78a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 801e78e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 801e790:	6878      	ldr	r0, [r7, #4]
 801e792:	f000 fed1 	bl	801f538 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 801e796:	687b      	ldr	r3, [r7, #4]
 801e798:	681b      	ldr	r3, [r3, #0]
 801e79a:	691b      	ldr	r3, [r3, #16]
 801e79c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801e7a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801e7a4:	d10f      	bne.n	801e7c6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 801e7a6:	687b      	ldr	r3, [r7, #4]
 801e7a8:	681b      	ldr	r3, [r3, #0]
 801e7aa:	68db      	ldr	r3, [r3, #12]
 801e7ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801e7b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801e7b4:	d107      	bne.n	801e7c6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 801e7b6:	687b      	ldr	r3, [r7, #4]
 801e7b8:	681b      	ldr	r3, [r3, #0]
 801e7ba:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 801e7be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 801e7c0:	6878      	ldr	r0, [r7, #4]
 801e7c2:	f000 fec3 	bl	801f54c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 801e7c6:	687b      	ldr	r3, [r7, #4]
 801e7c8:	681b      	ldr	r3, [r3, #0]
 801e7ca:	691b      	ldr	r3, [r3, #16]
 801e7cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801e7d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801e7d4:	d10f      	bne.n	801e7f6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 801e7d6:	687b      	ldr	r3, [r7, #4]
 801e7d8:	681b      	ldr	r3, [r3, #0]
 801e7da:	68db      	ldr	r3, [r3, #12]
 801e7dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801e7e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801e7e4:	d107      	bne.n	801e7f6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 801e7e6:	687b      	ldr	r3, [r7, #4]
 801e7e8:	681b      	ldr	r3, [r3, #0]
 801e7ea:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 801e7ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 801e7f0:	6878      	ldr	r0, [r7, #4]
 801e7f2:	f000 feb5 	bl	801f560 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801e7f6:	bf00      	nop
 801e7f8:	3708      	adds	r7, #8
 801e7fa:	46bd      	mov	sp, r7
 801e7fc:	bd80      	pop	{r7, pc}
	...

0801e800 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801e800:	b580      	push	{r7, lr}
 801e802:	b086      	sub	sp, #24
 801e804:	af00      	add	r7, sp, #0
 801e806:	60f8      	str	r0, [r7, #12]
 801e808:	60b9      	str	r1, [r7, #8]
 801e80a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801e80c:	2300      	movs	r3, #0
 801e80e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801e810:	68fb      	ldr	r3, [r7, #12]
 801e812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801e816:	2b01      	cmp	r3, #1
 801e818:	d101      	bne.n	801e81e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801e81a:	2302      	movs	r3, #2
 801e81c:	e0ff      	b.n	801ea1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 801e81e:	68fb      	ldr	r3, [r7, #12]
 801e820:	2201      	movs	r2, #1
 801e822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801e826:	687b      	ldr	r3, [r7, #4]
 801e828:	2b14      	cmp	r3, #20
 801e82a:	f200 80f0 	bhi.w	801ea0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 801e82e:	a201      	add	r2, pc, #4	; (adr r2, 801e834 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801e830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e834:	0801e889 	.word	0x0801e889
 801e838:	0801ea0f 	.word	0x0801ea0f
 801e83c:	0801ea0f 	.word	0x0801ea0f
 801e840:	0801ea0f 	.word	0x0801ea0f
 801e844:	0801e8c9 	.word	0x0801e8c9
 801e848:	0801ea0f 	.word	0x0801ea0f
 801e84c:	0801ea0f 	.word	0x0801ea0f
 801e850:	0801ea0f 	.word	0x0801ea0f
 801e854:	0801e90b 	.word	0x0801e90b
 801e858:	0801ea0f 	.word	0x0801ea0f
 801e85c:	0801ea0f 	.word	0x0801ea0f
 801e860:	0801ea0f 	.word	0x0801ea0f
 801e864:	0801e94b 	.word	0x0801e94b
 801e868:	0801ea0f 	.word	0x0801ea0f
 801e86c:	0801ea0f 	.word	0x0801ea0f
 801e870:	0801ea0f 	.word	0x0801ea0f
 801e874:	0801e98d 	.word	0x0801e98d
 801e878:	0801ea0f 	.word	0x0801ea0f
 801e87c:	0801ea0f 	.word	0x0801ea0f
 801e880:	0801ea0f 	.word	0x0801ea0f
 801e884:	0801e9cd 	.word	0x0801e9cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801e888:	68fb      	ldr	r3, [r7, #12]
 801e88a:	681b      	ldr	r3, [r3, #0]
 801e88c:	68b9      	ldr	r1, [r7, #8]
 801e88e:	4618      	mov	r0, r3
 801e890:	f000 f99a 	bl	801ebc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801e894:	68fb      	ldr	r3, [r7, #12]
 801e896:	681b      	ldr	r3, [r3, #0]
 801e898:	699a      	ldr	r2, [r3, #24]
 801e89a:	68fb      	ldr	r3, [r7, #12]
 801e89c:	681b      	ldr	r3, [r3, #0]
 801e89e:	f042 0208 	orr.w	r2, r2, #8
 801e8a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801e8a4:	68fb      	ldr	r3, [r7, #12]
 801e8a6:	681b      	ldr	r3, [r3, #0]
 801e8a8:	699a      	ldr	r2, [r3, #24]
 801e8aa:	68fb      	ldr	r3, [r7, #12]
 801e8ac:	681b      	ldr	r3, [r3, #0]
 801e8ae:	f022 0204 	bic.w	r2, r2, #4
 801e8b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801e8b4:	68fb      	ldr	r3, [r7, #12]
 801e8b6:	681b      	ldr	r3, [r3, #0]
 801e8b8:	6999      	ldr	r1, [r3, #24]
 801e8ba:	68bb      	ldr	r3, [r7, #8]
 801e8bc:	691a      	ldr	r2, [r3, #16]
 801e8be:	68fb      	ldr	r3, [r7, #12]
 801e8c0:	681b      	ldr	r3, [r3, #0]
 801e8c2:	430a      	orrs	r2, r1
 801e8c4:	619a      	str	r2, [r3, #24]
      break;
 801e8c6:	e0a5      	b.n	801ea14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801e8c8:	68fb      	ldr	r3, [r7, #12]
 801e8ca:	681b      	ldr	r3, [r3, #0]
 801e8cc:	68b9      	ldr	r1, [r7, #8]
 801e8ce:	4618      	mov	r0, r3
 801e8d0:	f000 fa14 	bl	801ecfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801e8d4:	68fb      	ldr	r3, [r7, #12]
 801e8d6:	681b      	ldr	r3, [r3, #0]
 801e8d8:	699a      	ldr	r2, [r3, #24]
 801e8da:	68fb      	ldr	r3, [r7, #12]
 801e8dc:	681b      	ldr	r3, [r3, #0]
 801e8de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e8e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801e8e4:	68fb      	ldr	r3, [r7, #12]
 801e8e6:	681b      	ldr	r3, [r3, #0]
 801e8e8:	699a      	ldr	r2, [r3, #24]
 801e8ea:	68fb      	ldr	r3, [r7, #12]
 801e8ec:	681b      	ldr	r3, [r3, #0]
 801e8ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e8f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801e8f4:	68fb      	ldr	r3, [r7, #12]
 801e8f6:	681b      	ldr	r3, [r3, #0]
 801e8f8:	6999      	ldr	r1, [r3, #24]
 801e8fa:	68bb      	ldr	r3, [r7, #8]
 801e8fc:	691b      	ldr	r3, [r3, #16]
 801e8fe:	021a      	lsls	r2, r3, #8
 801e900:	68fb      	ldr	r3, [r7, #12]
 801e902:	681b      	ldr	r3, [r3, #0]
 801e904:	430a      	orrs	r2, r1
 801e906:	619a      	str	r2, [r3, #24]
      break;
 801e908:	e084      	b.n	801ea14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801e90a:	68fb      	ldr	r3, [r7, #12]
 801e90c:	681b      	ldr	r3, [r3, #0]
 801e90e:	68b9      	ldr	r1, [r7, #8]
 801e910:	4618      	mov	r0, r3
 801e912:	f000 fa87 	bl	801ee24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801e916:	68fb      	ldr	r3, [r7, #12]
 801e918:	681b      	ldr	r3, [r3, #0]
 801e91a:	69da      	ldr	r2, [r3, #28]
 801e91c:	68fb      	ldr	r3, [r7, #12]
 801e91e:	681b      	ldr	r3, [r3, #0]
 801e920:	f042 0208 	orr.w	r2, r2, #8
 801e924:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801e926:	68fb      	ldr	r3, [r7, #12]
 801e928:	681b      	ldr	r3, [r3, #0]
 801e92a:	69da      	ldr	r2, [r3, #28]
 801e92c:	68fb      	ldr	r3, [r7, #12]
 801e92e:	681b      	ldr	r3, [r3, #0]
 801e930:	f022 0204 	bic.w	r2, r2, #4
 801e934:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801e936:	68fb      	ldr	r3, [r7, #12]
 801e938:	681b      	ldr	r3, [r3, #0]
 801e93a:	69d9      	ldr	r1, [r3, #28]
 801e93c:	68bb      	ldr	r3, [r7, #8]
 801e93e:	691a      	ldr	r2, [r3, #16]
 801e940:	68fb      	ldr	r3, [r7, #12]
 801e942:	681b      	ldr	r3, [r3, #0]
 801e944:	430a      	orrs	r2, r1
 801e946:	61da      	str	r2, [r3, #28]
      break;
 801e948:	e064      	b.n	801ea14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801e94a:	68fb      	ldr	r3, [r7, #12]
 801e94c:	681b      	ldr	r3, [r3, #0]
 801e94e:	68b9      	ldr	r1, [r7, #8]
 801e950:	4618      	mov	r0, r3
 801e952:	f000 faf9 	bl	801ef48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801e956:	68fb      	ldr	r3, [r7, #12]
 801e958:	681b      	ldr	r3, [r3, #0]
 801e95a:	69da      	ldr	r2, [r3, #28]
 801e95c:	68fb      	ldr	r3, [r7, #12]
 801e95e:	681b      	ldr	r3, [r3, #0]
 801e960:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e964:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801e966:	68fb      	ldr	r3, [r7, #12]
 801e968:	681b      	ldr	r3, [r3, #0]
 801e96a:	69da      	ldr	r2, [r3, #28]
 801e96c:	68fb      	ldr	r3, [r7, #12]
 801e96e:	681b      	ldr	r3, [r3, #0]
 801e970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e974:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801e976:	68fb      	ldr	r3, [r7, #12]
 801e978:	681b      	ldr	r3, [r3, #0]
 801e97a:	69d9      	ldr	r1, [r3, #28]
 801e97c:	68bb      	ldr	r3, [r7, #8]
 801e97e:	691b      	ldr	r3, [r3, #16]
 801e980:	021a      	lsls	r2, r3, #8
 801e982:	68fb      	ldr	r3, [r7, #12]
 801e984:	681b      	ldr	r3, [r3, #0]
 801e986:	430a      	orrs	r2, r1
 801e988:	61da      	str	r2, [r3, #28]
      break;
 801e98a:	e043      	b.n	801ea14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801e98c:	68fb      	ldr	r3, [r7, #12]
 801e98e:	681b      	ldr	r3, [r3, #0]
 801e990:	68b9      	ldr	r1, [r7, #8]
 801e992:	4618      	mov	r0, r3
 801e994:	f000 fb6c 	bl	801f070 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801e998:	68fb      	ldr	r3, [r7, #12]
 801e99a:	681b      	ldr	r3, [r3, #0]
 801e99c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e99e:	68fb      	ldr	r3, [r7, #12]
 801e9a0:	681b      	ldr	r3, [r3, #0]
 801e9a2:	f042 0208 	orr.w	r2, r2, #8
 801e9a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801e9a8:	68fb      	ldr	r3, [r7, #12]
 801e9aa:	681b      	ldr	r3, [r3, #0]
 801e9ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e9ae:	68fb      	ldr	r3, [r7, #12]
 801e9b0:	681b      	ldr	r3, [r3, #0]
 801e9b2:	f022 0204 	bic.w	r2, r2, #4
 801e9b6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801e9b8:	68fb      	ldr	r3, [r7, #12]
 801e9ba:	681b      	ldr	r3, [r3, #0]
 801e9bc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801e9be:	68bb      	ldr	r3, [r7, #8]
 801e9c0:	691a      	ldr	r2, [r3, #16]
 801e9c2:	68fb      	ldr	r3, [r7, #12]
 801e9c4:	681b      	ldr	r3, [r3, #0]
 801e9c6:	430a      	orrs	r2, r1
 801e9c8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801e9ca:	e023      	b.n	801ea14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801e9cc:	68fb      	ldr	r3, [r7, #12]
 801e9ce:	681b      	ldr	r3, [r3, #0]
 801e9d0:	68b9      	ldr	r1, [r7, #8]
 801e9d2:	4618      	mov	r0, r3
 801e9d4:	f000 fbb6 	bl	801f144 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801e9d8:	68fb      	ldr	r3, [r7, #12]
 801e9da:	681b      	ldr	r3, [r3, #0]
 801e9dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e9de:	68fb      	ldr	r3, [r7, #12]
 801e9e0:	681b      	ldr	r3, [r3, #0]
 801e9e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e9e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801e9e8:	68fb      	ldr	r3, [r7, #12]
 801e9ea:	681b      	ldr	r3, [r3, #0]
 801e9ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e9ee:	68fb      	ldr	r3, [r7, #12]
 801e9f0:	681b      	ldr	r3, [r3, #0]
 801e9f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e9f6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801e9f8:	68fb      	ldr	r3, [r7, #12]
 801e9fa:	681b      	ldr	r3, [r3, #0]
 801e9fc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801e9fe:	68bb      	ldr	r3, [r7, #8]
 801ea00:	691b      	ldr	r3, [r3, #16]
 801ea02:	021a      	lsls	r2, r3, #8
 801ea04:	68fb      	ldr	r3, [r7, #12]
 801ea06:	681b      	ldr	r3, [r3, #0]
 801ea08:	430a      	orrs	r2, r1
 801ea0a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801ea0c:	e002      	b.n	801ea14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801ea0e:	2301      	movs	r3, #1
 801ea10:	75fb      	strb	r3, [r7, #23]
      break;
 801ea12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801ea14:	68fb      	ldr	r3, [r7, #12]
 801ea16:	2200      	movs	r2, #0
 801ea18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801ea1c:	7dfb      	ldrb	r3, [r7, #23]
}
 801ea1e:	4618      	mov	r0, r3
 801ea20:	3718      	adds	r7, #24
 801ea22:	46bd      	mov	sp, r7
 801ea24:	bd80      	pop	{r7, pc}
 801ea26:	bf00      	nop

0801ea28 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801ea28:	b480      	push	{r7}
 801ea2a:	b083      	sub	sp, #12
 801ea2c:	af00      	add	r7, sp, #0
 801ea2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801ea30:	bf00      	nop
 801ea32:	370c      	adds	r7, #12
 801ea34:	46bd      	mov	sp, r7
 801ea36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea3a:	4770      	bx	lr

0801ea3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801ea3c:	b480      	push	{r7}
 801ea3e:	b083      	sub	sp, #12
 801ea40:	af00      	add	r7, sp, #0
 801ea42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801ea44:	bf00      	nop
 801ea46:	370c      	adds	r7, #12
 801ea48:	46bd      	mov	sp, r7
 801ea4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea4e:	4770      	bx	lr

0801ea50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801ea50:	b480      	push	{r7}
 801ea52:	b083      	sub	sp, #12
 801ea54:	af00      	add	r7, sp, #0
 801ea56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801ea58:	bf00      	nop
 801ea5a:	370c      	adds	r7, #12
 801ea5c:	46bd      	mov	sp, r7
 801ea5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea62:	4770      	bx	lr

0801ea64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801ea64:	b480      	push	{r7}
 801ea66:	b083      	sub	sp, #12
 801ea68:	af00      	add	r7, sp, #0
 801ea6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801ea6c:	bf00      	nop
 801ea6e:	370c      	adds	r7, #12
 801ea70:	46bd      	mov	sp, r7
 801ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea76:	4770      	bx	lr

0801ea78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801ea78:	b480      	push	{r7}
 801ea7a:	b083      	sub	sp, #12
 801ea7c:	af00      	add	r7, sp, #0
 801ea7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801ea80:	bf00      	nop
 801ea82:	370c      	adds	r7, #12
 801ea84:	46bd      	mov	sp, r7
 801ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea8a:	4770      	bx	lr

0801ea8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801ea8c:	b480      	push	{r7}
 801ea8e:	b085      	sub	sp, #20
 801ea90:	af00      	add	r7, sp, #0
 801ea92:	6078      	str	r0, [r7, #4]
 801ea94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801ea96:	687b      	ldr	r3, [r7, #4]
 801ea98:	681b      	ldr	r3, [r3, #0]
 801ea9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801ea9c:	687b      	ldr	r3, [r7, #4]
 801ea9e:	4a42      	ldr	r2, [pc, #264]	; (801eba8 <TIM_Base_SetConfig+0x11c>)
 801eaa0:	4293      	cmp	r3, r2
 801eaa2:	d013      	beq.n	801eacc <TIM_Base_SetConfig+0x40>
 801eaa4:	687b      	ldr	r3, [r7, #4]
 801eaa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801eaaa:	d00f      	beq.n	801eacc <TIM_Base_SetConfig+0x40>
 801eaac:	687b      	ldr	r3, [r7, #4]
 801eaae:	4a3f      	ldr	r2, [pc, #252]	; (801ebac <TIM_Base_SetConfig+0x120>)
 801eab0:	4293      	cmp	r3, r2
 801eab2:	d00b      	beq.n	801eacc <TIM_Base_SetConfig+0x40>
 801eab4:	687b      	ldr	r3, [r7, #4]
 801eab6:	4a3e      	ldr	r2, [pc, #248]	; (801ebb0 <TIM_Base_SetConfig+0x124>)
 801eab8:	4293      	cmp	r3, r2
 801eaba:	d007      	beq.n	801eacc <TIM_Base_SetConfig+0x40>
 801eabc:	687b      	ldr	r3, [r7, #4]
 801eabe:	4a3d      	ldr	r2, [pc, #244]	; (801ebb4 <TIM_Base_SetConfig+0x128>)
 801eac0:	4293      	cmp	r3, r2
 801eac2:	d003      	beq.n	801eacc <TIM_Base_SetConfig+0x40>
 801eac4:	687b      	ldr	r3, [r7, #4]
 801eac6:	4a3c      	ldr	r2, [pc, #240]	; (801ebb8 <TIM_Base_SetConfig+0x12c>)
 801eac8:	4293      	cmp	r3, r2
 801eaca:	d108      	bne.n	801eade <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801eacc:	68fb      	ldr	r3, [r7, #12]
 801eace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ead2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801ead4:	683b      	ldr	r3, [r7, #0]
 801ead6:	685b      	ldr	r3, [r3, #4]
 801ead8:	68fa      	ldr	r2, [r7, #12]
 801eada:	4313      	orrs	r3, r2
 801eadc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801eade:	687b      	ldr	r3, [r7, #4]
 801eae0:	4a31      	ldr	r2, [pc, #196]	; (801eba8 <TIM_Base_SetConfig+0x11c>)
 801eae2:	4293      	cmp	r3, r2
 801eae4:	d01f      	beq.n	801eb26 <TIM_Base_SetConfig+0x9a>
 801eae6:	687b      	ldr	r3, [r7, #4]
 801eae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801eaec:	d01b      	beq.n	801eb26 <TIM_Base_SetConfig+0x9a>
 801eaee:	687b      	ldr	r3, [r7, #4]
 801eaf0:	4a2e      	ldr	r2, [pc, #184]	; (801ebac <TIM_Base_SetConfig+0x120>)
 801eaf2:	4293      	cmp	r3, r2
 801eaf4:	d017      	beq.n	801eb26 <TIM_Base_SetConfig+0x9a>
 801eaf6:	687b      	ldr	r3, [r7, #4]
 801eaf8:	4a2d      	ldr	r2, [pc, #180]	; (801ebb0 <TIM_Base_SetConfig+0x124>)
 801eafa:	4293      	cmp	r3, r2
 801eafc:	d013      	beq.n	801eb26 <TIM_Base_SetConfig+0x9a>
 801eafe:	687b      	ldr	r3, [r7, #4]
 801eb00:	4a2c      	ldr	r2, [pc, #176]	; (801ebb4 <TIM_Base_SetConfig+0x128>)
 801eb02:	4293      	cmp	r3, r2
 801eb04:	d00f      	beq.n	801eb26 <TIM_Base_SetConfig+0x9a>
 801eb06:	687b      	ldr	r3, [r7, #4]
 801eb08:	4a2c      	ldr	r2, [pc, #176]	; (801ebbc <TIM_Base_SetConfig+0x130>)
 801eb0a:	4293      	cmp	r3, r2
 801eb0c:	d00b      	beq.n	801eb26 <TIM_Base_SetConfig+0x9a>
 801eb0e:	687b      	ldr	r3, [r7, #4]
 801eb10:	4a2b      	ldr	r2, [pc, #172]	; (801ebc0 <TIM_Base_SetConfig+0x134>)
 801eb12:	4293      	cmp	r3, r2
 801eb14:	d007      	beq.n	801eb26 <TIM_Base_SetConfig+0x9a>
 801eb16:	687b      	ldr	r3, [r7, #4]
 801eb18:	4a2a      	ldr	r2, [pc, #168]	; (801ebc4 <TIM_Base_SetConfig+0x138>)
 801eb1a:	4293      	cmp	r3, r2
 801eb1c:	d003      	beq.n	801eb26 <TIM_Base_SetConfig+0x9a>
 801eb1e:	687b      	ldr	r3, [r7, #4]
 801eb20:	4a25      	ldr	r2, [pc, #148]	; (801ebb8 <TIM_Base_SetConfig+0x12c>)
 801eb22:	4293      	cmp	r3, r2
 801eb24:	d108      	bne.n	801eb38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801eb26:	68fb      	ldr	r3, [r7, #12]
 801eb28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801eb2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801eb2e:	683b      	ldr	r3, [r7, #0]
 801eb30:	68db      	ldr	r3, [r3, #12]
 801eb32:	68fa      	ldr	r2, [r7, #12]
 801eb34:	4313      	orrs	r3, r2
 801eb36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801eb38:	68fb      	ldr	r3, [r7, #12]
 801eb3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801eb3e:	683b      	ldr	r3, [r7, #0]
 801eb40:	695b      	ldr	r3, [r3, #20]
 801eb42:	4313      	orrs	r3, r2
 801eb44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801eb46:	687b      	ldr	r3, [r7, #4]
 801eb48:	68fa      	ldr	r2, [r7, #12]
 801eb4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801eb4c:	683b      	ldr	r3, [r7, #0]
 801eb4e:	689a      	ldr	r2, [r3, #8]
 801eb50:	687b      	ldr	r3, [r7, #4]
 801eb52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801eb54:	683b      	ldr	r3, [r7, #0]
 801eb56:	681a      	ldr	r2, [r3, #0]
 801eb58:	687b      	ldr	r3, [r7, #4]
 801eb5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801eb5c:	687b      	ldr	r3, [r7, #4]
 801eb5e:	4a12      	ldr	r2, [pc, #72]	; (801eba8 <TIM_Base_SetConfig+0x11c>)
 801eb60:	4293      	cmp	r3, r2
 801eb62:	d013      	beq.n	801eb8c <TIM_Base_SetConfig+0x100>
 801eb64:	687b      	ldr	r3, [r7, #4]
 801eb66:	4a13      	ldr	r2, [pc, #76]	; (801ebb4 <TIM_Base_SetConfig+0x128>)
 801eb68:	4293      	cmp	r3, r2
 801eb6a:	d00f      	beq.n	801eb8c <TIM_Base_SetConfig+0x100>
 801eb6c:	687b      	ldr	r3, [r7, #4]
 801eb6e:	4a13      	ldr	r2, [pc, #76]	; (801ebbc <TIM_Base_SetConfig+0x130>)
 801eb70:	4293      	cmp	r3, r2
 801eb72:	d00b      	beq.n	801eb8c <TIM_Base_SetConfig+0x100>
 801eb74:	687b      	ldr	r3, [r7, #4]
 801eb76:	4a12      	ldr	r2, [pc, #72]	; (801ebc0 <TIM_Base_SetConfig+0x134>)
 801eb78:	4293      	cmp	r3, r2
 801eb7a:	d007      	beq.n	801eb8c <TIM_Base_SetConfig+0x100>
 801eb7c:	687b      	ldr	r3, [r7, #4]
 801eb7e:	4a11      	ldr	r2, [pc, #68]	; (801ebc4 <TIM_Base_SetConfig+0x138>)
 801eb80:	4293      	cmp	r3, r2
 801eb82:	d003      	beq.n	801eb8c <TIM_Base_SetConfig+0x100>
 801eb84:	687b      	ldr	r3, [r7, #4]
 801eb86:	4a0c      	ldr	r2, [pc, #48]	; (801ebb8 <TIM_Base_SetConfig+0x12c>)
 801eb88:	4293      	cmp	r3, r2
 801eb8a:	d103      	bne.n	801eb94 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801eb8c:	683b      	ldr	r3, [r7, #0]
 801eb8e:	691a      	ldr	r2, [r3, #16]
 801eb90:	687b      	ldr	r3, [r7, #4]
 801eb92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801eb94:	687b      	ldr	r3, [r7, #4]
 801eb96:	2201      	movs	r2, #1
 801eb98:	615a      	str	r2, [r3, #20]
}
 801eb9a:	bf00      	nop
 801eb9c:	3714      	adds	r7, #20
 801eb9e:	46bd      	mov	sp, r7
 801eba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eba4:	4770      	bx	lr
 801eba6:	bf00      	nop
 801eba8:	40012c00 	.word	0x40012c00
 801ebac:	40000400 	.word	0x40000400
 801ebb0:	40000800 	.word	0x40000800
 801ebb4:	40013400 	.word	0x40013400
 801ebb8:	40015000 	.word	0x40015000
 801ebbc:	40014000 	.word	0x40014000
 801ebc0:	40014400 	.word	0x40014400
 801ebc4:	40014800 	.word	0x40014800

0801ebc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801ebc8:	b480      	push	{r7}
 801ebca:	b087      	sub	sp, #28
 801ebcc:	af00      	add	r7, sp, #0
 801ebce:	6078      	str	r0, [r7, #4]
 801ebd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801ebd2:	687b      	ldr	r3, [r7, #4]
 801ebd4:	6a1b      	ldr	r3, [r3, #32]
 801ebd6:	f023 0201 	bic.w	r2, r3, #1
 801ebda:	687b      	ldr	r3, [r7, #4]
 801ebdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ebde:	687b      	ldr	r3, [r7, #4]
 801ebe0:	6a1b      	ldr	r3, [r3, #32]
 801ebe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ebe4:	687b      	ldr	r3, [r7, #4]
 801ebe6:	685b      	ldr	r3, [r3, #4]
 801ebe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801ebea:	687b      	ldr	r3, [r7, #4]
 801ebec:	699b      	ldr	r3, [r3, #24]
 801ebee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801ebf0:	68fb      	ldr	r3, [r7, #12]
 801ebf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ebf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ebfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801ebfc:	68fb      	ldr	r3, [r7, #12]
 801ebfe:	f023 0303 	bic.w	r3, r3, #3
 801ec02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801ec04:	683b      	ldr	r3, [r7, #0]
 801ec06:	681b      	ldr	r3, [r3, #0]
 801ec08:	68fa      	ldr	r2, [r7, #12]
 801ec0a:	4313      	orrs	r3, r2
 801ec0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801ec0e:	697b      	ldr	r3, [r7, #20]
 801ec10:	f023 0302 	bic.w	r3, r3, #2
 801ec14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801ec16:	683b      	ldr	r3, [r7, #0]
 801ec18:	689b      	ldr	r3, [r3, #8]
 801ec1a:	697a      	ldr	r2, [r7, #20]
 801ec1c:	4313      	orrs	r3, r2
 801ec1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801ec20:	687b      	ldr	r3, [r7, #4]
 801ec22:	4a30      	ldr	r2, [pc, #192]	; (801ece4 <TIM_OC1_SetConfig+0x11c>)
 801ec24:	4293      	cmp	r3, r2
 801ec26:	d013      	beq.n	801ec50 <TIM_OC1_SetConfig+0x88>
 801ec28:	687b      	ldr	r3, [r7, #4]
 801ec2a:	4a2f      	ldr	r2, [pc, #188]	; (801ece8 <TIM_OC1_SetConfig+0x120>)
 801ec2c:	4293      	cmp	r3, r2
 801ec2e:	d00f      	beq.n	801ec50 <TIM_OC1_SetConfig+0x88>
 801ec30:	687b      	ldr	r3, [r7, #4]
 801ec32:	4a2e      	ldr	r2, [pc, #184]	; (801ecec <TIM_OC1_SetConfig+0x124>)
 801ec34:	4293      	cmp	r3, r2
 801ec36:	d00b      	beq.n	801ec50 <TIM_OC1_SetConfig+0x88>
 801ec38:	687b      	ldr	r3, [r7, #4]
 801ec3a:	4a2d      	ldr	r2, [pc, #180]	; (801ecf0 <TIM_OC1_SetConfig+0x128>)
 801ec3c:	4293      	cmp	r3, r2
 801ec3e:	d007      	beq.n	801ec50 <TIM_OC1_SetConfig+0x88>
 801ec40:	687b      	ldr	r3, [r7, #4]
 801ec42:	4a2c      	ldr	r2, [pc, #176]	; (801ecf4 <TIM_OC1_SetConfig+0x12c>)
 801ec44:	4293      	cmp	r3, r2
 801ec46:	d003      	beq.n	801ec50 <TIM_OC1_SetConfig+0x88>
 801ec48:	687b      	ldr	r3, [r7, #4]
 801ec4a:	4a2b      	ldr	r2, [pc, #172]	; (801ecf8 <TIM_OC1_SetConfig+0x130>)
 801ec4c:	4293      	cmp	r3, r2
 801ec4e:	d10c      	bne.n	801ec6a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801ec50:	697b      	ldr	r3, [r7, #20]
 801ec52:	f023 0308 	bic.w	r3, r3, #8
 801ec56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801ec58:	683b      	ldr	r3, [r7, #0]
 801ec5a:	68db      	ldr	r3, [r3, #12]
 801ec5c:	697a      	ldr	r2, [r7, #20]
 801ec5e:	4313      	orrs	r3, r2
 801ec60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801ec62:	697b      	ldr	r3, [r7, #20]
 801ec64:	f023 0304 	bic.w	r3, r3, #4
 801ec68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ec6a:	687b      	ldr	r3, [r7, #4]
 801ec6c:	4a1d      	ldr	r2, [pc, #116]	; (801ece4 <TIM_OC1_SetConfig+0x11c>)
 801ec6e:	4293      	cmp	r3, r2
 801ec70:	d013      	beq.n	801ec9a <TIM_OC1_SetConfig+0xd2>
 801ec72:	687b      	ldr	r3, [r7, #4]
 801ec74:	4a1c      	ldr	r2, [pc, #112]	; (801ece8 <TIM_OC1_SetConfig+0x120>)
 801ec76:	4293      	cmp	r3, r2
 801ec78:	d00f      	beq.n	801ec9a <TIM_OC1_SetConfig+0xd2>
 801ec7a:	687b      	ldr	r3, [r7, #4]
 801ec7c:	4a1b      	ldr	r2, [pc, #108]	; (801ecec <TIM_OC1_SetConfig+0x124>)
 801ec7e:	4293      	cmp	r3, r2
 801ec80:	d00b      	beq.n	801ec9a <TIM_OC1_SetConfig+0xd2>
 801ec82:	687b      	ldr	r3, [r7, #4]
 801ec84:	4a1a      	ldr	r2, [pc, #104]	; (801ecf0 <TIM_OC1_SetConfig+0x128>)
 801ec86:	4293      	cmp	r3, r2
 801ec88:	d007      	beq.n	801ec9a <TIM_OC1_SetConfig+0xd2>
 801ec8a:	687b      	ldr	r3, [r7, #4]
 801ec8c:	4a19      	ldr	r2, [pc, #100]	; (801ecf4 <TIM_OC1_SetConfig+0x12c>)
 801ec8e:	4293      	cmp	r3, r2
 801ec90:	d003      	beq.n	801ec9a <TIM_OC1_SetConfig+0xd2>
 801ec92:	687b      	ldr	r3, [r7, #4]
 801ec94:	4a18      	ldr	r2, [pc, #96]	; (801ecf8 <TIM_OC1_SetConfig+0x130>)
 801ec96:	4293      	cmp	r3, r2
 801ec98:	d111      	bne.n	801ecbe <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801ec9a:	693b      	ldr	r3, [r7, #16]
 801ec9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801eca0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801eca2:	693b      	ldr	r3, [r7, #16]
 801eca4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801eca8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801ecaa:	683b      	ldr	r3, [r7, #0]
 801ecac:	695b      	ldr	r3, [r3, #20]
 801ecae:	693a      	ldr	r2, [r7, #16]
 801ecb0:	4313      	orrs	r3, r2
 801ecb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801ecb4:	683b      	ldr	r3, [r7, #0]
 801ecb6:	699b      	ldr	r3, [r3, #24]
 801ecb8:	693a      	ldr	r2, [r7, #16]
 801ecba:	4313      	orrs	r3, r2
 801ecbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ecbe:	687b      	ldr	r3, [r7, #4]
 801ecc0:	693a      	ldr	r2, [r7, #16]
 801ecc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801ecc4:	687b      	ldr	r3, [r7, #4]
 801ecc6:	68fa      	ldr	r2, [r7, #12]
 801ecc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801ecca:	683b      	ldr	r3, [r7, #0]
 801eccc:	685a      	ldr	r2, [r3, #4]
 801ecce:	687b      	ldr	r3, [r7, #4]
 801ecd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ecd2:	687b      	ldr	r3, [r7, #4]
 801ecd4:	697a      	ldr	r2, [r7, #20]
 801ecd6:	621a      	str	r2, [r3, #32]
}
 801ecd8:	bf00      	nop
 801ecda:	371c      	adds	r7, #28
 801ecdc:	46bd      	mov	sp, r7
 801ecde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ece2:	4770      	bx	lr
 801ece4:	40012c00 	.word	0x40012c00
 801ece8:	40013400 	.word	0x40013400
 801ecec:	40014000 	.word	0x40014000
 801ecf0:	40014400 	.word	0x40014400
 801ecf4:	40014800 	.word	0x40014800
 801ecf8:	40015000 	.word	0x40015000

0801ecfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801ecfc:	b480      	push	{r7}
 801ecfe:	b087      	sub	sp, #28
 801ed00:	af00      	add	r7, sp, #0
 801ed02:	6078      	str	r0, [r7, #4]
 801ed04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801ed06:	687b      	ldr	r3, [r7, #4]
 801ed08:	6a1b      	ldr	r3, [r3, #32]
 801ed0a:	f023 0210 	bic.w	r2, r3, #16
 801ed0e:	687b      	ldr	r3, [r7, #4]
 801ed10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ed12:	687b      	ldr	r3, [r7, #4]
 801ed14:	6a1b      	ldr	r3, [r3, #32]
 801ed16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ed18:	687b      	ldr	r3, [r7, #4]
 801ed1a:	685b      	ldr	r3, [r3, #4]
 801ed1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801ed1e:	687b      	ldr	r3, [r7, #4]
 801ed20:	699b      	ldr	r3, [r3, #24]
 801ed22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801ed24:	68fb      	ldr	r3, [r7, #12]
 801ed26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801ed2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801ed2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801ed30:	68fb      	ldr	r3, [r7, #12]
 801ed32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801ed36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801ed38:	683b      	ldr	r3, [r7, #0]
 801ed3a:	681b      	ldr	r3, [r3, #0]
 801ed3c:	021b      	lsls	r3, r3, #8
 801ed3e:	68fa      	ldr	r2, [r7, #12]
 801ed40:	4313      	orrs	r3, r2
 801ed42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801ed44:	697b      	ldr	r3, [r7, #20]
 801ed46:	f023 0320 	bic.w	r3, r3, #32
 801ed4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801ed4c:	683b      	ldr	r3, [r7, #0]
 801ed4e:	689b      	ldr	r3, [r3, #8]
 801ed50:	011b      	lsls	r3, r3, #4
 801ed52:	697a      	ldr	r2, [r7, #20]
 801ed54:	4313      	orrs	r3, r2
 801ed56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801ed58:	687b      	ldr	r3, [r7, #4]
 801ed5a:	4a2c      	ldr	r2, [pc, #176]	; (801ee0c <TIM_OC2_SetConfig+0x110>)
 801ed5c:	4293      	cmp	r3, r2
 801ed5e:	d007      	beq.n	801ed70 <TIM_OC2_SetConfig+0x74>
 801ed60:	687b      	ldr	r3, [r7, #4]
 801ed62:	4a2b      	ldr	r2, [pc, #172]	; (801ee10 <TIM_OC2_SetConfig+0x114>)
 801ed64:	4293      	cmp	r3, r2
 801ed66:	d003      	beq.n	801ed70 <TIM_OC2_SetConfig+0x74>
 801ed68:	687b      	ldr	r3, [r7, #4]
 801ed6a:	4a2a      	ldr	r2, [pc, #168]	; (801ee14 <TIM_OC2_SetConfig+0x118>)
 801ed6c:	4293      	cmp	r3, r2
 801ed6e:	d10d      	bne.n	801ed8c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801ed70:	697b      	ldr	r3, [r7, #20]
 801ed72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801ed76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801ed78:	683b      	ldr	r3, [r7, #0]
 801ed7a:	68db      	ldr	r3, [r3, #12]
 801ed7c:	011b      	lsls	r3, r3, #4
 801ed7e:	697a      	ldr	r2, [r7, #20]
 801ed80:	4313      	orrs	r3, r2
 801ed82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801ed84:	697b      	ldr	r3, [r7, #20]
 801ed86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801ed8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ed8c:	687b      	ldr	r3, [r7, #4]
 801ed8e:	4a1f      	ldr	r2, [pc, #124]	; (801ee0c <TIM_OC2_SetConfig+0x110>)
 801ed90:	4293      	cmp	r3, r2
 801ed92:	d013      	beq.n	801edbc <TIM_OC2_SetConfig+0xc0>
 801ed94:	687b      	ldr	r3, [r7, #4]
 801ed96:	4a1e      	ldr	r2, [pc, #120]	; (801ee10 <TIM_OC2_SetConfig+0x114>)
 801ed98:	4293      	cmp	r3, r2
 801ed9a:	d00f      	beq.n	801edbc <TIM_OC2_SetConfig+0xc0>
 801ed9c:	687b      	ldr	r3, [r7, #4]
 801ed9e:	4a1e      	ldr	r2, [pc, #120]	; (801ee18 <TIM_OC2_SetConfig+0x11c>)
 801eda0:	4293      	cmp	r3, r2
 801eda2:	d00b      	beq.n	801edbc <TIM_OC2_SetConfig+0xc0>
 801eda4:	687b      	ldr	r3, [r7, #4]
 801eda6:	4a1d      	ldr	r2, [pc, #116]	; (801ee1c <TIM_OC2_SetConfig+0x120>)
 801eda8:	4293      	cmp	r3, r2
 801edaa:	d007      	beq.n	801edbc <TIM_OC2_SetConfig+0xc0>
 801edac:	687b      	ldr	r3, [r7, #4]
 801edae:	4a1c      	ldr	r2, [pc, #112]	; (801ee20 <TIM_OC2_SetConfig+0x124>)
 801edb0:	4293      	cmp	r3, r2
 801edb2:	d003      	beq.n	801edbc <TIM_OC2_SetConfig+0xc0>
 801edb4:	687b      	ldr	r3, [r7, #4]
 801edb6:	4a17      	ldr	r2, [pc, #92]	; (801ee14 <TIM_OC2_SetConfig+0x118>)
 801edb8:	4293      	cmp	r3, r2
 801edba:	d113      	bne.n	801ede4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801edbc:	693b      	ldr	r3, [r7, #16]
 801edbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801edc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801edc4:	693b      	ldr	r3, [r7, #16]
 801edc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801edca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801edcc:	683b      	ldr	r3, [r7, #0]
 801edce:	695b      	ldr	r3, [r3, #20]
 801edd0:	009b      	lsls	r3, r3, #2
 801edd2:	693a      	ldr	r2, [r7, #16]
 801edd4:	4313      	orrs	r3, r2
 801edd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801edd8:	683b      	ldr	r3, [r7, #0]
 801edda:	699b      	ldr	r3, [r3, #24]
 801eddc:	009b      	lsls	r3, r3, #2
 801edde:	693a      	ldr	r2, [r7, #16]
 801ede0:	4313      	orrs	r3, r2
 801ede2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ede4:	687b      	ldr	r3, [r7, #4]
 801ede6:	693a      	ldr	r2, [r7, #16]
 801ede8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801edea:	687b      	ldr	r3, [r7, #4]
 801edec:	68fa      	ldr	r2, [r7, #12]
 801edee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801edf0:	683b      	ldr	r3, [r7, #0]
 801edf2:	685a      	ldr	r2, [r3, #4]
 801edf4:	687b      	ldr	r3, [r7, #4]
 801edf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801edf8:	687b      	ldr	r3, [r7, #4]
 801edfa:	697a      	ldr	r2, [r7, #20]
 801edfc:	621a      	str	r2, [r3, #32]
}
 801edfe:	bf00      	nop
 801ee00:	371c      	adds	r7, #28
 801ee02:	46bd      	mov	sp, r7
 801ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee08:	4770      	bx	lr
 801ee0a:	bf00      	nop
 801ee0c:	40012c00 	.word	0x40012c00
 801ee10:	40013400 	.word	0x40013400
 801ee14:	40015000 	.word	0x40015000
 801ee18:	40014000 	.word	0x40014000
 801ee1c:	40014400 	.word	0x40014400
 801ee20:	40014800 	.word	0x40014800

0801ee24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801ee24:	b480      	push	{r7}
 801ee26:	b087      	sub	sp, #28
 801ee28:	af00      	add	r7, sp, #0
 801ee2a:	6078      	str	r0, [r7, #4]
 801ee2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801ee2e:	687b      	ldr	r3, [r7, #4]
 801ee30:	6a1b      	ldr	r3, [r3, #32]
 801ee32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801ee36:	687b      	ldr	r3, [r7, #4]
 801ee38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ee3a:	687b      	ldr	r3, [r7, #4]
 801ee3c:	6a1b      	ldr	r3, [r3, #32]
 801ee3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ee40:	687b      	ldr	r3, [r7, #4]
 801ee42:	685b      	ldr	r3, [r3, #4]
 801ee44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801ee46:	687b      	ldr	r3, [r7, #4]
 801ee48:	69db      	ldr	r3, [r3, #28]
 801ee4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801ee4c:	68fb      	ldr	r3, [r7, #12]
 801ee4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ee52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ee56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801ee58:	68fb      	ldr	r3, [r7, #12]
 801ee5a:	f023 0303 	bic.w	r3, r3, #3
 801ee5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801ee60:	683b      	ldr	r3, [r7, #0]
 801ee62:	681b      	ldr	r3, [r3, #0]
 801ee64:	68fa      	ldr	r2, [r7, #12]
 801ee66:	4313      	orrs	r3, r2
 801ee68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801ee6a:	697b      	ldr	r3, [r7, #20]
 801ee6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801ee70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801ee72:	683b      	ldr	r3, [r7, #0]
 801ee74:	689b      	ldr	r3, [r3, #8]
 801ee76:	021b      	lsls	r3, r3, #8
 801ee78:	697a      	ldr	r2, [r7, #20]
 801ee7a:	4313      	orrs	r3, r2
 801ee7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801ee7e:	687b      	ldr	r3, [r7, #4]
 801ee80:	4a2b      	ldr	r2, [pc, #172]	; (801ef30 <TIM_OC3_SetConfig+0x10c>)
 801ee82:	4293      	cmp	r3, r2
 801ee84:	d007      	beq.n	801ee96 <TIM_OC3_SetConfig+0x72>
 801ee86:	687b      	ldr	r3, [r7, #4]
 801ee88:	4a2a      	ldr	r2, [pc, #168]	; (801ef34 <TIM_OC3_SetConfig+0x110>)
 801ee8a:	4293      	cmp	r3, r2
 801ee8c:	d003      	beq.n	801ee96 <TIM_OC3_SetConfig+0x72>
 801ee8e:	687b      	ldr	r3, [r7, #4]
 801ee90:	4a29      	ldr	r2, [pc, #164]	; (801ef38 <TIM_OC3_SetConfig+0x114>)
 801ee92:	4293      	cmp	r3, r2
 801ee94:	d10d      	bne.n	801eeb2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801ee96:	697b      	ldr	r3, [r7, #20]
 801ee98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801ee9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801ee9e:	683b      	ldr	r3, [r7, #0]
 801eea0:	68db      	ldr	r3, [r3, #12]
 801eea2:	021b      	lsls	r3, r3, #8
 801eea4:	697a      	ldr	r2, [r7, #20]
 801eea6:	4313      	orrs	r3, r2
 801eea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801eeaa:	697b      	ldr	r3, [r7, #20]
 801eeac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801eeb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801eeb2:	687b      	ldr	r3, [r7, #4]
 801eeb4:	4a1e      	ldr	r2, [pc, #120]	; (801ef30 <TIM_OC3_SetConfig+0x10c>)
 801eeb6:	4293      	cmp	r3, r2
 801eeb8:	d013      	beq.n	801eee2 <TIM_OC3_SetConfig+0xbe>
 801eeba:	687b      	ldr	r3, [r7, #4]
 801eebc:	4a1d      	ldr	r2, [pc, #116]	; (801ef34 <TIM_OC3_SetConfig+0x110>)
 801eebe:	4293      	cmp	r3, r2
 801eec0:	d00f      	beq.n	801eee2 <TIM_OC3_SetConfig+0xbe>
 801eec2:	687b      	ldr	r3, [r7, #4]
 801eec4:	4a1d      	ldr	r2, [pc, #116]	; (801ef3c <TIM_OC3_SetConfig+0x118>)
 801eec6:	4293      	cmp	r3, r2
 801eec8:	d00b      	beq.n	801eee2 <TIM_OC3_SetConfig+0xbe>
 801eeca:	687b      	ldr	r3, [r7, #4]
 801eecc:	4a1c      	ldr	r2, [pc, #112]	; (801ef40 <TIM_OC3_SetConfig+0x11c>)
 801eece:	4293      	cmp	r3, r2
 801eed0:	d007      	beq.n	801eee2 <TIM_OC3_SetConfig+0xbe>
 801eed2:	687b      	ldr	r3, [r7, #4]
 801eed4:	4a1b      	ldr	r2, [pc, #108]	; (801ef44 <TIM_OC3_SetConfig+0x120>)
 801eed6:	4293      	cmp	r3, r2
 801eed8:	d003      	beq.n	801eee2 <TIM_OC3_SetConfig+0xbe>
 801eeda:	687b      	ldr	r3, [r7, #4]
 801eedc:	4a16      	ldr	r2, [pc, #88]	; (801ef38 <TIM_OC3_SetConfig+0x114>)
 801eede:	4293      	cmp	r3, r2
 801eee0:	d113      	bne.n	801ef0a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801eee2:	693b      	ldr	r3, [r7, #16]
 801eee4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801eee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801eeea:	693b      	ldr	r3, [r7, #16]
 801eeec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801eef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801eef2:	683b      	ldr	r3, [r7, #0]
 801eef4:	695b      	ldr	r3, [r3, #20]
 801eef6:	011b      	lsls	r3, r3, #4
 801eef8:	693a      	ldr	r2, [r7, #16]
 801eefa:	4313      	orrs	r3, r2
 801eefc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801eefe:	683b      	ldr	r3, [r7, #0]
 801ef00:	699b      	ldr	r3, [r3, #24]
 801ef02:	011b      	lsls	r3, r3, #4
 801ef04:	693a      	ldr	r2, [r7, #16]
 801ef06:	4313      	orrs	r3, r2
 801ef08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ef0a:	687b      	ldr	r3, [r7, #4]
 801ef0c:	693a      	ldr	r2, [r7, #16]
 801ef0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801ef10:	687b      	ldr	r3, [r7, #4]
 801ef12:	68fa      	ldr	r2, [r7, #12]
 801ef14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801ef16:	683b      	ldr	r3, [r7, #0]
 801ef18:	685a      	ldr	r2, [r3, #4]
 801ef1a:	687b      	ldr	r3, [r7, #4]
 801ef1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ef1e:	687b      	ldr	r3, [r7, #4]
 801ef20:	697a      	ldr	r2, [r7, #20]
 801ef22:	621a      	str	r2, [r3, #32]
}
 801ef24:	bf00      	nop
 801ef26:	371c      	adds	r7, #28
 801ef28:	46bd      	mov	sp, r7
 801ef2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef2e:	4770      	bx	lr
 801ef30:	40012c00 	.word	0x40012c00
 801ef34:	40013400 	.word	0x40013400
 801ef38:	40015000 	.word	0x40015000
 801ef3c:	40014000 	.word	0x40014000
 801ef40:	40014400 	.word	0x40014400
 801ef44:	40014800 	.word	0x40014800

0801ef48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801ef48:	b480      	push	{r7}
 801ef4a:	b087      	sub	sp, #28
 801ef4c:	af00      	add	r7, sp, #0
 801ef4e:	6078      	str	r0, [r7, #4]
 801ef50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801ef52:	687b      	ldr	r3, [r7, #4]
 801ef54:	6a1b      	ldr	r3, [r3, #32]
 801ef56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801ef5a:	687b      	ldr	r3, [r7, #4]
 801ef5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ef5e:	687b      	ldr	r3, [r7, #4]
 801ef60:	6a1b      	ldr	r3, [r3, #32]
 801ef62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ef64:	687b      	ldr	r3, [r7, #4]
 801ef66:	685b      	ldr	r3, [r3, #4]
 801ef68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801ef6a:	687b      	ldr	r3, [r7, #4]
 801ef6c:	69db      	ldr	r3, [r3, #28]
 801ef6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801ef70:	68fb      	ldr	r3, [r7, #12]
 801ef72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801ef76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801ef7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801ef7c:	68fb      	ldr	r3, [r7, #12]
 801ef7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801ef82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801ef84:	683b      	ldr	r3, [r7, #0]
 801ef86:	681b      	ldr	r3, [r3, #0]
 801ef88:	021b      	lsls	r3, r3, #8
 801ef8a:	68fa      	ldr	r2, [r7, #12]
 801ef8c:	4313      	orrs	r3, r2
 801ef8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801ef90:	697b      	ldr	r3, [r7, #20]
 801ef92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801ef96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801ef98:	683b      	ldr	r3, [r7, #0]
 801ef9a:	689b      	ldr	r3, [r3, #8]
 801ef9c:	031b      	lsls	r3, r3, #12
 801ef9e:	697a      	ldr	r2, [r7, #20]
 801efa0:	4313      	orrs	r3, r2
 801efa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 801efa4:	687b      	ldr	r3, [r7, #4]
 801efa6:	4a2c      	ldr	r2, [pc, #176]	; (801f058 <TIM_OC4_SetConfig+0x110>)
 801efa8:	4293      	cmp	r3, r2
 801efaa:	d007      	beq.n	801efbc <TIM_OC4_SetConfig+0x74>
 801efac:	687b      	ldr	r3, [r7, #4]
 801efae:	4a2b      	ldr	r2, [pc, #172]	; (801f05c <TIM_OC4_SetConfig+0x114>)
 801efb0:	4293      	cmp	r3, r2
 801efb2:	d003      	beq.n	801efbc <TIM_OC4_SetConfig+0x74>
 801efb4:	687b      	ldr	r3, [r7, #4]
 801efb6:	4a2a      	ldr	r2, [pc, #168]	; (801f060 <TIM_OC4_SetConfig+0x118>)
 801efb8:	4293      	cmp	r3, r2
 801efba:	d10d      	bne.n	801efd8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 801efbc:	697b      	ldr	r3, [r7, #20]
 801efbe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801efc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 801efc4:	683b      	ldr	r3, [r7, #0]
 801efc6:	68db      	ldr	r3, [r3, #12]
 801efc8:	031b      	lsls	r3, r3, #12
 801efca:	697a      	ldr	r2, [r7, #20]
 801efcc:	4313      	orrs	r3, r2
 801efce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 801efd0:	697b      	ldr	r3, [r7, #20]
 801efd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801efd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801efd8:	687b      	ldr	r3, [r7, #4]
 801efda:	4a1f      	ldr	r2, [pc, #124]	; (801f058 <TIM_OC4_SetConfig+0x110>)
 801efdc:	4293      	cmp	r3, r2
 801efde:	d013      	beq.n	801f008 <TIM_OC4_SetConfig+0xc0>
 801efe0:	687b      	ldr	r3, [r7, #4]
 801efe2:	4a1e      	ldr	r2, [pc, #120]	; (801f05c <TIM_OC4_SetConfig+0x114>)
 801efe4:	4293      	cmp	r3, r2
 801efe6:	d00f      	beq.n	801f008 <TIM_OC4_SetConfig+0xc0>
 801efe8:	687b      	ldr	r3, [r7, #4]
 801efea:	4a1e      	ldr	r2, [pc, #120]	; (801f064 <TIM_OC4_SetConfig+0x11c>)
 801efec:	4293      	cmp	r3, r2
 801efee:	d00b      	beq.n	801f008 <TIM_OC4_SetConfig+0xc0>
 801eff0:	687b      	ldr	r3, [r7, #4]
 801eff2:	4a1d      	ldr	r2, [pc, #116]	; (801f068 <TIM_OC4_SetConfig+0x120>)
 801eff4:	4293      	cmp	r3, r2
 801eff6:	d007      	beq.n	801f008 <TIM_OC4_SetConfig+0xc0>
 801eff8:	687b      	ldr	r3, [r7, #4]
 801effa:	4a1c      	ldr	r2, [pc, #112]	; (801f06c <TIM_OC4_SetConfig+0x124>)
 801effc:	4293      	cmp	r3, r2
 801effe:	d003      	beq.n	801f008 <TIM_OC4_SetConfig+0xc0>
 801f000:	687b      	ldr	r3, [r7, #4]
 801f002:	4a17      	ldr	r2, [pc, #92]	; (801f060 <TIM_OC4_SetConfig+0x118>)
 801f004:	4293      	cmp	r3, r2
 801f006:	d113      	bne.n	801f030 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801f008:	693b      	ldr	r3, [r7, #16]
 801f00a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801f00e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 801f010:	693b      	ldr	r3, [r7, #16]
 801f012:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801f016:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801f018:	683b      	ldr	r3, [r7, #0]
 801f01a:	695b      	ldr	r3, [r3, #20]
 801f01c:	019b      	lsls	r3, r3, #6
 801f01e:	693a      	ldr	r2, [r7, #16]
 801f020:	4313      	orrs	r3, r2
 801f022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 801f024:	683b      	ldr	r3, [r7, #0]
 801f026:	699b      	ldr	r3, [r3, #24]
 801f028:	019b      	lsls	r3, r3, #6
 801f02a:	693a      	ldr	r2, [r7, #16]
 801f02c:	4313      	orrs	r3, r2
 801f02e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f030:	687b      	ldr	r3, [r7, #4]
 801f032:	693a      	ldr	r2, [r7, #16]
 801f034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801f036:	687b      	ldr	r3, [r7, #4]
 801f038:	68fa      	ldr	r2, [r7, #12]
 801f03a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801f03c:	683b      	ldr	r3, [r7, #0]
 801f03e:	685a      	ldr	r2, [r3, #4]
 801f040:	687b      	ldr	r3, [r7, #4]
 801f042:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f044:	687b      	ldr	r3, [r7, #4]
 801f046:	697a      	ldr	r2, [r7, #20]
 801f048:	621a      	str	r2, [r3, #32]
}
 801f04a:	bf00      	nop
 801f04c:	371c      	adds	r7, #28
 801f04e:	46bd      	mov	sp, r7
 801f050:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f054:	4770      	bx	lr
 801f056:	bf00      	nop
 801f058:	40012c00 	.word	0x40012c00
 801f05c:	40013400 	.word	0x40013400
 801f060:	40015000 	.word	0x40015000
 801f064:	40014000 	.word	0x40014000
 801f068:	40014400 	.word	0x40014400
 801f06c:	40014800 	.word	0x40014800

0801f070 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801f070:	b480      	push	{r7}
 801f072:	b087      	sub	sp, #28
 801f074:	af00      	add	r7, sp, #0
 801f076:	6078      	str	r0, [r7, #4]
 801f078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801f07a:	687b      	ldr	r3, [r7, #4]
 801f07c:	6a1b      	ldr	r3, [r3, #32]
 801f07e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801f082:	687b      	ldr	r3, [r7, #4]
 801f084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f086:	687b      	ldr	r3, [r7, #4]
 801f088:	6a1b      	ldr	r3, [r3, #32]
 801f08a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f08c:	687b      	ldr	r3, [r7, #4]
 801f08e:	685b      	ldr	r3, [r3, #4]
 801f090:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801f092:	687b      	ldr	r3, [r7, #4]
 801f094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801f098:	68fb      	ldr	r3, [r7, #12]
 801f09a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801f09e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801f0a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801f0a4:	683b      	ldr	r3, [r7, #0]
 801f0a6:	681b      	ldr	r3, [r3, #0]
 801f0a8:	68fa      	ldr	r2, [r7, #12]
 801f0aa:	4313      	orrs	r3, r2
 801f0ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801f0ae:	693b      	ldr	r3, [r7, #16]
 801f0b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801f0b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801f0b6:	683b      	ldr	r3, [r7, #0]
 801f0b8:	689b      	ldr	r3, [r3, #8]
 801f0ba:	041b      	lsls	r3, r3, #16
 801f0bc:	693a      	ldr	r2, [r7, #16]
 801f0be:	4313      	orrs	r3, r2
 801f0c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f0c2:	687b      	ldr	r3, [r7, #4]
 801f0c4:	4a19      	ldr	r2, [pc, #100]	; (801f12c <TIM_OC5_SetConfig+0xbc>)
 801f0c6:	4293      	cmp	r3, r2
 801f0c8:	d013      	beq.n	801f0f2 <TIM_OC5_SetConfig+0x82>
 801f0ca:	687b      	ldr	r3, [r7, #4]
 801f0cc:	4a18      	ldr	r2, [pc, #96]	; (801f130 <TIM_OC5_SetConfig+0xc0>)
 801f0ce:	4293      	cmp	r3, r2
 801f0d0:	d00f      	beq.n	801f0f2 <TIM_OC5_SetConfig+0x82>
 801f0d2:	687b      	ldr	r3, [r7, #4]
 801f0d4:	4a17      	ldr	r2, [pc, #92]	; (801f134 <TIM_OC5_SetConfig+0xc4>)
 801f0d6:	4293      	cmp	r3, r2
 801f0d8:	d00b      	beq.n	801f0f2 <TIM_OC5_SetConfig+0x82>
 801f0da:	687b      	ldr	r3, [r7, #4]
 801f0dc:	4a16      	ldr	r2, [pc, #88]	; (801f138 <TIM_OC5_SetConfig+0xc8>)
 801f0de:	4293      	cmp	r3, r2
 801f0e0:	d007      	beq.n	801f0f2 <TIM_OC5_SetConfig+0x82>
 801f0e2:	687b      	ldr	r3, [r7, #4]
 801f0e4:	4a15      	ldr	r2, [pc, #84]	; (801f13c <TIM_OC5_SetConfig+0xcc>)
 801f0e6:	4293      	cmp	r3, r2
 801f0e8:	d003      	beq.n	801f0f2 <TIM_OC5_SetConfig+0x82>
 801f0ea:	687b      	ldr	r3, [r7, #4]
 801f0ec:	4a14      	ldr	r2, [pc, #80]	; (801f140 <TIM_OC5_SetConfig+0xd0>)
 801f0ee:	4293      	cmp	r3, r2
 801f0f0:	d109      	bne.n	801f106 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801f0f2:	697b      	ldr	r3, [r7, #20]
 801f0f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801f0f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801f0fa:	683b      	ldr	r3, [r7, #0]
 801f0fc:	695b      	ldr	r3, [r3, #20]
 801f0fe:	021b      	lsls	r3, r3, #8
 801f100:	697a      	ldr	r2, [r7, #20]
 801f102:	4313      	orrs	r3, r2
 801f104:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f106:	687b      	ldr	r3, [r7, #4]
 801f108:	697a      	ldr	r2, [r7, #20]
 801f10a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801f10c:	687b      	ldr	r3, [r7, #4]
 801f10e:	68fa      	ldr	r2, [r7, #12]
 801f110:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801f112:	683b      	ldr	r3, [r7, #0]
 801f114:	685a      	ldr	r2, [r3, #4]
 801f116:	687b      	ldr	r3, [r7, #4]
 801f118:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f11a:	687b      	ldr	r3, [r7, #4]
 801f11c:	693a      	ldr	r2, [r7, #16]
 801f11e:	621a      	str	r2, [r3, #32]
}
 801f120:	bf00      	nop
 801f122:	371c      	adds	r7, #28
 801f124:	46bd      	mov	sp, r7
 801f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f12a:	4770      	bx	lr
 801f12c:	40012c00 	.word	0x40012c00
 801f130:	40013400 	.word	0x40013400
 801f134:	40014000 	.word	0x40014000
 801f138:	40014400 	.word	0x40014400
 801f13c:	40014800 	.word	0x40014800
 801f140:	40015000 	.word	0x40015000

0801f144 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801f144:	b480      	push	{r7}
 801f146:	b087      	sub	sp, #28
 801f148:	af00      	add	r7, sp, #0
 801f14a:	6078      	str	r0, [r7, #4]
 801f14c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801f14e:	687b      	ldr	r3, [r7, #4]
 801f150:	6a1b      	ldr	r3, [r3, #32]
 801f152:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801f156:	687b      	ldr	r3, [r7, #4]
 801f158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f15a:	687b      	ldr	r3, [r7, #4]
 801f15c:	6a1b      	ldr	r3, [r3, #32]
 801f15e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f160:	687b      	ldr	r3, [r7, #4]
 801f162:	685b      	ldr	r3, [r3, #4]
 801f164:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801f166:	687b      	ldr	r3, [r7, #4]
 801f168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f16a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801f16c:	68fb      	ldr	r3, [r7, #12]
 801f16e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801f172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801f176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801f178:	683b      	ldr	r3, [r7, #0]
 801f17a:	681b      	ldr	r3, [r3, #0]
 801f17c:	021b      	lsls	r3, r3, #8
 801f17e:	68fa      	ldr	r2, [r7, #12]
 801f180:	4313      	orrs	r3, r2
 801f182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801f184:	693b      	ldr	r3, [r7, #16]
 801f186:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801f18a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801f18c:	683b      	ldr	r3, [r7, #0]
 801f18e:	689b      	ldr	r3, [r3, #8]
 801f190:	051b      	lsls	r3, r3, #20
 801f192:	693a      	ldr	r2, [r7, #16]
 801f194:	4313      	orrs	r3, r2
 801f196:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f198:	687b      	ldr	r3, [r7, #4]
 801f19a:	4a1a      	ldr	r2, [pc, #104]	; (801f204 <TIM_OC6_SetConfig+0xc0>)
 801f19c:	4293      	cmp	r3, r2
 801f19e:	d013      	beq.n	801f1c8 <TIM_OC6_SetConfig+0x84>
 801f1a0:	687b      	ldr	r3, [r7, #4]
 801f1a2:	4a19      	ldr	r2, [pc, #100]	; (801f208 <TIM_OC6_SetConfig+0xc4>)
 801f1a4:	4293      	cmp	r3, r2
 801f1a6:	d00f      	beq.n	801f1c8 <TIM_OC6_SetConfig+0x84>
 801f1a8:	687b      	ldr	r3, [r7, #4]
 801f1aa:	4a18      	ldr	r2, [pc, #96]	; (801f20c <TIM_OC6_SetConfig+0xc8>)
 801f1ac:	4293      	cmp	r3, r2
 801f1ae:	d00b      	beq.n	801f1c8 <TIM_OC6_SetConfig+0x84>
 801f1b0:	687b      	ldr	r3, [r7, #4]
 801f1b2:	4a17      	ldr	r2, [pc, #92]	; (801f210 <TIM_OC6_SetConfig+0xcc>)
 801f1b4:	4293      	cmp	r3, r2
 801f1b6:	d007      	beq.n	801f1c8 <TIM_OC6_SetConfig+0x84>
 801f1b8:	687b      	ldr	r3, [r7, #4]
 801f1ba:	4a16      	ldr	r2, [pc, #88]	; (801f214 <TIM_OC6_SetConfig+0xd0>)
 801f1bc:	4293      	cmp	r3, r2
 801f1be:	d003      	beq.n	801f1c8 <TIM_OC6_SetConfig+0x84>
 801f1c0:	687b      	ldr	r3, [r7, #4]
 801f1c2:	4a15      	ldr	r2, [pc, #84]	; (801f218 <TIM_OC6_SetConfig+0xd4>)
 801f1c4:	4293      	cmp	r3, r2
 801f1c6:	d109      	bne.n	801f1dc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801f1c8:	697b      	ldr	r3, [r7, #20]
 801f1ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801f1ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801f1d0:	683b      	ldr	r3, [r7, #0]
 801f1d2:	695b      	ldr	r3, [r3, #20]
 801f1d4:	029b      	lsls	r3, r3, #10
 801f1d6:	697a      	ldr	r2, [r7, #20]
 801f1d8:	4313      	orrs	r3, r2
 801f1da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f1dc:	687b      	ldr	r3, [r7, #4]
 801f1de:	697a      	ldr	r2, [r7, #20]
 801f1e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801f1e2:	687b      	ldr	r3, [r7, #4]
 801f1e4:	68fa      	ldr	r2, [r7, #12]
 801f1e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801f1e8:	683b      	ldr	r3, [r7, #0]
 801f1ea:	685a      	ldr	r2, [r3, #4]
 801f1ec:	687b      	ldr	r3, [r7, #4]
 801f1ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f1f0:	687b      	ldr	r3, [r7, #4]
 801f1f2:	693a      	ldr	r2, [r7, #16]
 801f1f4:	621a      	str	r2, [r3, #32]
}
 801f1f6:	bf00      	nop
 801f1f8:	371c      	adds	r7, #28
 801f1fa:	46bd      	mov	sp, r7
 801f1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f200:	4770      	bx	lr
 801f202:	bf00      	nop
 801f204:	40012c00 	.word	0x40012c00
 801f208:	40013400 	.word	0x40013400
 801f20c:	40014000 	.word	0x40014000
 801f210:	40014400 	.word	0x40014400
 801f214:	40014800 	.word	0x40014800
 801f218:	40015000 	.word	0x40015000

0801f21c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801f21c:	b480      	push	{r7}
 801f21e:	b087      	sub	sp, #28
 801f220:	af00      	add	r7, sp, #0
 801f222:	60f8      	str	r0, [r7, #12]
 801f224:	60b9      	str	r1, [r7, #8]
 801f226:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801f228:	68bb      	ldr	r3, [r7, #8]
 801f22a:	f003 031f 	and.w	r3, r3, #31
 801f22e:	2201      	movs	r2, #1
 801f230:	fa02 f303 	lsl.w	r3, r2, r3
 801f234:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801f236:	68fb      	ldr	r3, [r7, #12]
 801f238:	6a1a      	ldr	r2, [r3, #32]
 801f23a:	697b      	ldr	r3, [r7, #20]
 801f23c:	43db      	mvns	r3, r3
 801f23e:	401a      	ands	r2, r3
 801f240:	68fb      	ldr	r3, [r7, #12]
 801f242:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801f244:	68fb      	ldr	r3, [r7, #12]
 801f246:	6a1a      	ldr	r2, [r3, #32]
 801f248:	68bb      	ldr	r3, [r7, #8]
 801f24a:	f003 031f 	and.w	r3, r3, #31
 801f24e:	6879      	ldr	r1, [r7, #4]
 801f250:	fa01 f303 	lsl.w	r3, r1, r3
 801f254:	431a      	orrs	r2, r3
 801f256:	68fb      	ldr	r3, [r7, #12]
 801f258:	621a      	str	r2, [r3, #32]
}
 801f25a:	bf00      	nop
 801f25c:	371c      	adds	r7, #28
 801f25e:	46bd      	mov	sp, r7
 801f260:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f264:	4770      	bx	lr
	...

0801f268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801f268:	b480      	push	{r7}
 801f26a:	b085      	sub	sp, #20
 801f26c:	af00      	add	r7, sp, #0
 801f26e:	6078      	str	r0, [r7, #4]
 801f270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801f272:	687b      	ldr	r3, [r7, #4]
 801f274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f278:	2b01      	cmp	r3, #1
 801f27a:	d101      	bne.n	801f280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801f27c:	2302      	movs	r3, #2
 801f27e:	e06f      	b.n	801f360 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 801f280:	687b      	ldr	r3, [r7, #4]
 801f282:	2201      	movs	r2, #1
 801f284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f288:	687b      	ldr	r3, [r7, #4]
 801f28a:	2202      	movs	r2, #2
 801f28c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801f290:	687b      	ldr	r3, [r7, #4]
 801f292:	681b      	ldr	r3, [r3, #0]
 801f294:	685b      	ldr	r3, [r3, #4]
 801f296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801f298:	687b      	ldr	r3, [r7, #4]
 801f29a:	681b      	ldr	r3, [r3, #0]
 801f29c:	689b      	ldr	r3, [r3, #8]
 801f29e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801f2a0:	687b      	ldr	r3, [r7, #4]
 801f2a2:	681b      	ldr	r3, [r3, #0]
 801f2a4:	4a31      	ldr	r2, [pc, #196]	; (801f36c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801f2a6:	4293      	cmp	r3, r2
 801f2a8:	d009      	beq.n	801f2be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801f2aa:	687b      	ldr	r3, [r7, #4]
 801f2ac:	681b      	ldr	r3, [r3, #0]
 801f2ae:	4a30      	ldr	r2, [pc, #192]	; (801f370 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801f2b0:	4293      	cmp	r3, r2
 801f2b2:	d004      	beq.n	801f2be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801f2b4:	687b      	ldr	r3, [r7, #4]
 801f2b6:	681b      	ldr	r3, [r3, #0]
 801f2b8:	4a2e      	ldr	r2, [pc, #184]	; (801f374 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801f2ba:	4293      	cmp	r3, r2
 801f2bc:	d108      	bne.n	801f2d0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801f2be:	68fb      	ldr	r3, [r7, #12]
 801f2c0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801f2c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801f2c6:	683b      	ldr	r3, [r7, #0]
 801f2c8:	685b      	ldr	r3, [r3, #4]
 801f2ca:	68fa      	ldr	r2, [r7, #12]
 801f2cc:	4313      	orrs	r3, r2
 801f2ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801f2d0:	68fb      	ldr	r3, [r7, #12]
 801f2d2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 801f2d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801f2da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801f2dc:	683b      	ldr	r3, [r7, #0]
 801f2de:	681b      	ldr	r3, [r3, #0]
 801f2e0:	68fa      	ldr	r2, [r7, #12]
 801f2e2:	4313      	orrs	r3, r2
 801f2e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801f2e6:	687b      	ldr	r3, [r7, #4]
 801f2e8:	681b      	ldr	r3, [r3, #0]
 801f2ea:	68fa      	ldr	r2, [r7, #12]
 801f2ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801f2ee:	687b      	ldr	r3, [r7, #4]
 801f2f0:	681b      	ldr	r3, [r3, #0]
 801f2f2:	4a1e      	ldr	r2, [pc, #120]	; (801f36c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801f2f4:	4293      	cmp	r3, r2
 801f2f6:	d01d      	beq.n	801f334 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f2f8:	687b      	ldr	r3, [r7, #4]
 801f2fa:	681b      	ldr	r3, [r3, #0]
 801f2fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f300:	d018      	beq.n	801f334 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f302:	687b      	ldr	r3, [r7, #4]
 801f304:	681b      	ldr	r3, [r3, #0]
 801f306:	4a1c      	ldr	r2, [pc, #112]	; (801f378 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801f308:	4293      	cmp	r3, r2
 801f30a:	d013      	beq.n	801f334 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f30c:	687b      	ldr	r3, [r7, #4]
 801f30e:	681b      	ldr	r3, [r3, #0]
 801f310:	4a1a      	ldr	r2, [pc, #104]	; (801f37c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801f312:	4293      	cmp	r3, r2
 801f314:	d00e      	beq.n	801f334 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f316:	687b      	ldr	r3, [r7, #4]
 801f318:	681b      	ldr	r3, [r3, #0]
 801f31a:	4a15      	ldr	r2, [pc, #84]	; (801f370 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801f31c:	4293      	cmp	r3, r2
 801f31e:	d009      	beq.n	801f334 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f320:	687b      	ldr	r3, [r7, #4]
 801f322:	681b      	ldr	r3, [r3, #0]
 801f324:	4a16      	ldr	r2, [pc, #88]	; (801f380 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801f326:	4293      	cmp	r3, r2
 801f328:	d004      	beq.n	801f334 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f32a:	687b      	ldr	r3, [r7, #4]
 801f32c:	681b      	ldr	r3, [r3, #0]
 801f32e:	4a11      	ldr	r2, [pc, #68]	; (801f374 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801f330:	4293      	cmp	r3, r2
 801f332:	d10c      	bne.n	801f34e <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801f334:	68bb      	ldr	r3, [r7, #8]
 801f336:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801f33a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801f33c:	683b      	ldr	r3, [r7, #0]
 801f33e:	689b      	ldr	r3, [r3, #8]
 801f340:	68ba      	ldr	r2, [r7, #8]
 801f342:	4313      	orrs	r3, r2
 801f344:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801f346:	687b      	ldr	r3, [r7, #4]
 801f348:	681b      	ldr	r3, [r3, #0]
 801f34a:	68ba      	ldr	r2, [r7, #8]
 801f34c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801f34e:	687b      	ldr	r3, [r7, #4]
 801f350:	2201      	movs	r2, #1
 801f352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801f356:	687b      	ldr	r3, [r7, #4]
 801f358:	2200      	movs	r2, #0
 801f35a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801f35e:	2300      	movs	r3, #0
}
 801f360:	4618      	mov	r0, r3
 801f362:	3714      	adds	r7, #20
 801f364:	46bd      	mov	sp, r7
 801f366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f36a:	4770      	bx	lr
 801f36c:	40012c00 	.word	0x40012c00
 801f370:	40013400 	.word	0x40013400
 801f374:	40015000 	.word	0x40015000
 801f378:	40000400 	.word	0x40000400
 801f37c:	40000800 	.word	0x40000800
 801f380:	40014000 	.word	0x40014000

0801f384 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801f384:	b480      	push	{r7}
 801f386:	b085      	sub	sp, #20
 801f388:	af00      	add	r7, sp, #0
 801f38a:	6078      	str	r0, [r7, #4]
 801f38c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801f38e:	2300      	movs	r3, #0
 801f390:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801f392:	687b      	ldr	r3, [r7, #4]
 801f394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f398:	2b01      	cmp	r3, #1
 801f39a:	d101      	bne.n	801f3a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801f39c:	2302      	movs	r3, #2
 801f39e:	e096      	b.n	801f4ce <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 801f3a0:	687b      	ldr	r3, [r7, #4]
 801f3a2:	2201      	movs	r2, #1
 801f3a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801f3a8:	68fb      	ldr	r3, [r7, #12]
 801f3aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801f3ae:	683b      	ldr	r3, [r7, #0]
 801f3b0:	68db      	ldr	r3, [r3, #12]
 801f3b2:	4313      	orrs	r3, r2
 801f3b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801f3b6:	68fb      	ldr	r3, [r7, #12]
 801f3b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801f3bc:	683b      	ldr	r3, [r7, #0]
 801f3be:	689b      	ldr	r3, [r3, #8]
 801f3c0:	4313      	orrs	r3, r2
 801f3c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801f3c4:	68fb      	ldr	r3, [r7, #12]
 801f3c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801f3ca:	683b      	ldr	r3, [r7, #0]
 801f3cc:	685b      	ldr	r3, [r3, #4]
 801f3ce:	4313      	orrs	r3, r2
 801f3d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801f3d2:	68fb      	ldr	r3, [r7, #12]
 801f3d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801f3d8:	683b      	ldr	r3, [r7, #0]
 801f3da:	681b      	ldr	r3, [r3, #0]
 801f3dc:	4313      	orrs	r3, r2
 801f3de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801f3e0:	68fb      	ldr	r3, [r7, #12]
 801f3e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801f3e6:	683b      	ldr	r3, [r7, #0]
 801f3e8:	691b      	ldr	r3, [r3, #16]
 801f3ea:	4313      	orrs	r3, r2
 801f3ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801f3ee:	68fb      	ldr	r3, [r7, #12]
 801f3f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801f3f4:	683b      	ldr	r3, [r7, #0]
 801f3f6:	695b      	ldr	r3, [r3, #20]
 801f3f8:	4313      	orrs	r3, r2
 801f3fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801f3fc:	68fb      	ldr	r3, [r7, #12]
 801f3fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801f402:	683b      	ldr	r3, [r7, #0]
 801f404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f406:	4313      	orrs	r3, r2
 801f408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801f40a:	68fb      	ldr	r3, [r7, #12]
 801f40c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801f410:	683b      	ldr	r3, [r7, #0]
 801f412:	699b      	ldr	r3, [r3, #24]
 801f414:	041b      	lsls	r3, r3, #16
 801f416:	4313      	orrs	r3, r2
 801f418:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801f41a:	687b      	ldr	r3, [r7, #4]
 801f41c:	681b      	ldr	r3, [r3, #0]
 801f41e:	4a2f      	ldr	r2, [pc, #188]	; (801f4dc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801f420:	4293      	cmp	r3, r2
 801f422:	d009      	beq.n	801f438 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801f424:	687b      	ldr	r3, [r7, #4]
 801f426:	681b      	ldr	r3, [r3, #0]
 801f428:	4a2d      	ldr	r2, [pc, #180]	; (801f4e0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801f42a:	4293      	cmp	r3, r2
 801f42c:	d004      	beq.n	801f438 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801f42e:	687b      	ldr	r3, [r7, #4]
 801f430:	681b      	ldr	r3, [r3, #0]
 801f432:	4a2c      	ldr	r2, [pc, #176]	; (801f4e4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801f434:	4293      	cmp	r3, r2
 801f436:	d106      	bne.n	801f446 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801f438:	68fb      	ldr	r3, [r7, #12]
 801f43a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801f43e:	683b      	ldr	r3, [r7, #0]
 801f440:	69db      	ldr	r3, [r3, #28]
 801f442:	4313      	orrs	r3, r2
 801f444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801f446:	687b      	ldr	r3, [r7, #4]
 801f448:	681b      	ldr	r3, [r3, #0]
 801f44a:	4a24      	ldr	r2, [pc, #144]	; (801f4dc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801f44c:	4293      	cmp	r3, r2
 801f44e:	d009      	beq.n	801f464 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801f450:	687b      	ldr	r3, [r7, #4]
 801f452:	681b      	ldr	r3, [r3, #0]
 801f454:	4a22      	ldr	r2, [pc, #136]	; (801f4e0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801f456:	4293      	cmp	r3, r2
 801f458:	d004      	beq.n	801f464 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801f45a:	687b      	ldr	r3, [r7, #4]
 801f45c:	681b      	ldr	r3, [r3, #0]
 801f45e:	4a21      	ldr	r2, [pc, #132]	; (801f4e4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801f460:	4293      	cmp	r3, r2
 801f462:	d12b      	bne.n	801f4bc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801f464:	68fb      	ldr	r3, [r7, #12]
 801f466:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801f46a:	683b      	ldr	r3, [r7, #0]
 801f46c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f46e:	051b      	lsls	r3, r3, #20
 801f470:	4313      	orrs	r3, r2
 801f472:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801f474:	68fb      	ldr	r3, [r7, #12]
 801f476:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801f47a:	683b      	ldr	r3, [r7, #0]
 801f47c:	6a1b      	ldr	r3, [r3, #32]
 801f47e:	4313      	orrs	r3, r2
 801f480:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801f482:	68fb      	ldr	r3, [r7, #12]
 801f484:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801f488:	683b      	ldr	r3, [r7, #0]
 801f48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f48c:	4313      	orrs	r3, r2
 801f48e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801f490:	687b      	ldr	r3, [r7, #4]
 801f492:	681b      	ldr	r3, [r3, #0]
 801f494:	4a11      	ldr	r2, [pc, #68]	; (801f4dc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801f496:	4293      	cmp	r3, r2
 801f498:	d009      	beq.n	801f4ae <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801f49a:	687b      	ldr	r3, [r7, #4]
 801f49c:	681b      	ldr	r3, [r3, #0]
 801f49e:	4a10      	ldr	r2, [pc, #64]	; (801f4e0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801f4a0:	4293      	cmp	r3, r2
 801f4a2:	d004      	beq.n	801f4ae <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801f4a4:	687b      	ldr	r3, [r7, #4]
 801f4a6:	681b      	ldr	r3, [r3, #0]
 801f4a8:	4a0e      	ldr	r2, [pc, #56]	; (801f4e4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801f4aa:	4293      	cmp	r3, r2
 801f4ac:	d106      	bne.n	801f4bc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801f4ae:	68fb      	ldr	r3, [r7, #12]
 801f4b0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801f4b4:	683b      	ldr	r3, [r7, #0]
 801f4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f4b8:	4313      	orrs	r3, r2
 801f4ba:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801f4bc:	687b      	ldr	r3, [r7, #4]
 801f4be:	681b      	ldr	r3, [r3, #0]
 801f4c0:	68fa      	ldr	r2, [r7, #12]
 801f4c2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801f4c4:	687b      	ldr	r3, [r7, #4]
 801f4c6:	2200      	movs	r2, #0
 801f4c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801f4cc:	2300      	movs	r3, #0
}
 801f4ce:	4618      	mov	r0, r3
 801f4d0:	3714      	adds	r7, #20
 801f4d2:	46bd      	mov	sp, r7
 801f4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4d8:	4770      	bx	lr
 801f4da:	bf00      	nop
 801f4dc:	40012c00 	.word	0x40012c00
 801f4e0:	40013400 	.word	0x40013400
 801f4e4:	40015000 	.word	0x40015000

0801f4e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801f4e8:	b480      	push	{r7}
 801f4ea:	b083      	sub	sp, #12
 801f4ec:	af00      	add	r7, sp, #0
 801f4ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801f4f0:	bf00      	nop
 801f4f2:	370c      	adds	r7, #12
 801f4f4:	46bd      	mov	sp, r7
 801f4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4fa:	4770      	bx	lr

0801f4fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801f4fc:	b480      	push	{r7}
 801f4fe:	b083      	sub	sp, #12
 801f500:	af00      	add	r7, sp, #0
 801f502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801f504:	bf00      	nop
 801f506:	370c      	adds	r7, #12
 801f508:	46bd      	mov	sp, r7
 801f50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f50e:	4770      	bx	lr

0801f510 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801f510:	b480      	push	{r7}
 801f512:	b083      	sub	sp, #12
 801f514:	af00      	add	r7, sp, #0
 801f516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801f518:	bf00      	nop
 801f51a:	370c      	adds	r7, #12
 801f51c:	46bd      	mov	sp, r7
 801f51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f522:	4770      	bx	lr

0801f524 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 801f524:	b480      	push	{r7}
 801f526:	b083      	sub	sp, #12
 801f528:	af00      	add	r7, sp, #0
 801f52a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 801f52c:	bf00      	nop
 801f52e:	370c      	adds	r7, #12
 801f530:	46bd      	mov	sp, r7
 801f532:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f536:	4770      	bx	lr

0801f538 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 801f538:	b480      	push	{r7}
 801f53a:	b083      	sub	sp, #12
 801f53c:	af00      	add	r7, sp, #0
 801f53e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 801f540:	bf00      	nop
 801f542:	370c      	adds	r7, #12
 801f544:	46bd      	mov	sp, r7
 801f546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f54a:	4770      	bx	lr

0801f54c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 801f54c:	b480      	push	{r7}
 801f54e:	b083      	sub	sp, #12
 801f550:	af00      	add	r7, sp, #0
 801f552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 801f554:	bf00      	nop
 801f556:	370c      	adds	r7, #12
 801f558:	46bd      	mov	sp, r7
 801f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f55e:	4770      	bx	lr

0801f560 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 801f560:	b480      	push	{r7}
 801f562:	b083      	sub	sp, #12
 801f564:	af00      	add	r7, sp, #0
 801f566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 801f568:	bf00      	nop
 801f56a:	370c      	adds	r7, #12
 801f56c:	46bd      	mov	sp, r7
 801f56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f572:	4770      	bx	lr

0801f574 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801f574:	b580      	push	{r7, lr}
 801f576:	b082      	sub	sp, #8
 801f578:	af00      	add	r7, sp, #0
 801f57a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801f57c:	687b      	ldr	r3, [r7, #4]
 801f57e:	2b00      	cmp	r3, #0
 801f580:	d101      	bne.n	801f586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801f582:	2301      	movs	r3, #1
 801f584:	e042      	b.n	801f60c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801f586:	687b      	ldr	r3, [r7, #4]
 801f588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f58c:	2b00      	cmp	r3, #0
 801f58e:	d106      	bne.n	801f59e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801f590:	687b      	ldr	r3, [r7, #4]
 801f592:	2200      	movs	r2, #0
 801f594:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801f598:	6878      	ldr	r0, [r7, #4]
 801f59a:	f7f9 fae3 	bl	8018b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801f59e:	687b      	ldr	r3, [r7, #4]
 801f5a0:	2224      	movs	r2, #36	; 0x24
 801f5a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 801f5a6:	687b      	ldr	r3, [r7, #4]
 801f5a8:	681b      	ldr	r3, [r3, #0]
 801f5aa:	681a      	ldr	r2, [r3, #0]
 801f5ac:	687b      	ldr	r3, [r7, #4]
 801f5ae:	681b      	ldr	r3, [r3, #0]
 801f5b0:	f022 0201 	bic.w	r2, r2, #1
 801f5b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801f5b6:	6878      	ldr	r0, [r7, #4]
 801f5b8:	f000 f8c2 	bl	801f740 <UART_SetConfig>
 801f5bc:	4603      	mov	r3, r0
 801f5be:	2b01      	cmp	r3, #1
 801f5c0:	d101      	bne.n	801f5c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801f5c2:	2301      	movs	r3, #1
 801f5c4:	e022      	b.n	801f60c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801f5c6:	687b      	ldr	r3, [r7, #4]
 801f5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f5ca:	2b00      	cmp	r3, #0
 801f5cc:	d002      	beq.n	801f5d4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801f5ce:	6878      	ldr	r0, [r7, #4]
 801f5d0:	f000 fbb2 	bl	801fd38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801f5d4:	687b      	ldr	r3, [r7, #4]
 801f5d6:	681b      	ldr	r3, [r3, #0]
 801f5d8:	685a      	ldr	r2, [r3, #4]
 801f5da:	687b      	ldr	r3, [r7, #4]
 801f5dc:	681b      	ldr	r3, [r3, #0]
 801f5de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801f5e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801f5e4:	687b      	ldr	r3, [r7, #4]
 801f5e6:	681b      	ldr	r3, [r3, #0]
 801f5e8:	689a      	ldr	r2, [r3, #8]
 801f5ea:	687b      	ldr	r3, [r7, #4]
 801f5ec:	681b      	ldr	r3, [r3, #0]
 801f5ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801f5f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801f5f4:	687b      	ldr	r3, [r7, #4]
 801f5f6:	681b      	ldr	r3, [r3, #0]
 801f5f8:	681a      	ldr	r2, [r3, #0]
 801f5fa:	687b      	ldr	r3, [r7, #4]
 801f5fc:	681b      	ldr	r3, [r3, #0]
 801f5fe:	f042 0201 	orr.w	r2, r2, #1
 801f602:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801f604:	6878      	ldr	r0, [r7, #4]
 801f606:	f000 fc39 	bl	801fe7c <UART_CheckIdleState>
 801f60a:	4603      	mov	r3, r0
}
 801f60c:	4618      	mov	r0, r3
 801f60e:	3708      	adds	r7, #8
 801f610:	46bd      	mov	sp, r7
 801f612:	bd80      	pop	{r7, pc}

0801f614 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801f614:	b580      	push	{r7, lr}
 801f616:	b08a      	sub	sp, #40	; 0x28
 801f618:	af02      	add	r7, sp, #8
 801f61a:	60f8      	str	r0, [r7, #12]
 801f61c:	60b9      	str	r1, [r7, #8]
 801f61e:	603b      	str	r3, [r7, #0]
 801f620:	4613      	mov	r3, r2
 801f622:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801f624:	68fb      	ldr	r3, [r7, #12]
 801f626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f62a:	2b20      	cmp	r3, #32
 801f62c:	f040 8083 	bne.w	801f736 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 801f630:	68bb      	ldr	r3, [r7, #8]
 801f632:	2b00      	cmp	r3, #0
 801f634:	d002      	beq.n	801f63c <HAL_UART_Transmit+0x28>
 801f636:	88fb      	ldrh	r3, [r7, #6]
 801f638:	2b00      	cmp	r3, #0
 801f63a:	d101      	bne.n	801f640 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801f63c:	2301      	movs	r3, #1
 801f63e:	e07b      	b.n	801f738 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 801f640:	68fb      	ldr	r3, [r7, #12]
 801f642:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801f646:	2b01      	cmp	r3, #1
 801f648:	d101      	bne.n	801f64e <HAL_UART_Transmit+0x3a>
 801f64a:	2302      	movs	r3, #2
 801f64c:	e074      	b.n	801f738 <HAL_UART_Transmit+0x124>
 801f64e:	68fb      	ldr	r3, [r7, #12]
 801f650:	2201      	movs	r2, #1
 801f652:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f656:	68fb      	ldr	r3, [r7, #12]
 801f658:	2200      	movs	r2, #0
 801f65a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801f65e:	68fb      	ldr	r3, [r7, #12]
 801f660:	2221      	movs	r2, #33	; 0x21
 801f662:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801f666:	f7f9 fb6b 	bl	8018d40 <HAL_GetTick>
 801f66a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801f66c:	68fb      	ldr	r3, [r7, #12]
 801f66e:	88fa      	ldrh	r2, [r7, #6]
 801f670:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801f674:	68fb      	ldr	r3, [r7, #12]
 801f676:	88fa      	ldrh	r2, [r7, #6]
 801f678:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801f67c:	68fb      	ldr	r3, [r7, #12]
 801f67e:	689b      	ldr	r3, [r3, #8]
 801f680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f684:	d108      	bne.n	801f698 <HAL_UART_Transmit+0x84>
 801f686:	68fb      	ldr	r3, [r7, #12]
 801f688:	691b      	ldr	r3, [r3, #16]
 801f68a:	2b00      	cmp	r3, #0
 801f68c:	d104      	bne.n	801f698 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 801f68e:	2300      	movs	r3, #0
 801f690:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801f692:	68bb      	ldr	r3, [r7, #8]
 801f694:	61bb      	str	r3, [r7, #24]
 801f696:	e003      	b.n	801f6a0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 801f698:	68bb      	ldr	r3, [r7, #8]
 801f69a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801f69c:	2300      	movs	r3, #0
 801f69e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 801f6a0:	68fb      	ldr	r3, [r7, #12]
 801f6a2:	2200      	movs	r2, #0
 801f6a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 801f6a8:	e02c      	b.n	801f704 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801f6aa:	683b      	ldr	r3, [r7, #0]
 801f6ac:	9300      	str	r3, [sp, #0]
 801f6ae:	697b      	ldr	r3, [r7, #20]
 801f6b0:	2200      	movs	r2, #0
 801f6b2:	2180      	movs	r1, #128	; 0x80
 801f6b4:	68f8      	ldr	r0, [r7, #12]
 801f6b6:	f000 fc2c 	bl	801ff12 <UART_WaitOnFlagUntilTimeout>
 801f6ba:	4603      	mov	r3, r0
 801f6bc:	2b00      	cmp	r3, #0
 801f6be:	d001      	beq.n	801f6c4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 801f6c0:	2303      	movs	r3, #3
 801f6c2:	e039      	b.n	801f738 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 801f6c4:	69fb      	ldr	r3, [r7, #28]
 801f6c6:	2b00      	cmp	r3, #0
 801f6c8:	d10b      	bne.n	801f6e2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801f6ca:	69bb      	ldr	r3, [r7, #24]
 801f6cc:	881b      	ldrh	r3, [r3, #0]
 801f6ce:	461a      	mov	r2, r3
 801f6d0:	68fb      	ldr	r3, [r7, #12]
 801f6d2:	681b      	ldr	r3, [r3, #0]
 801f6d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801f6d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801f6da:	69bb      	ldr	r3, [r7, #24]
 801f6dc:	3302      	adds	r3, #2
 801f6de:	61bb      	str	r3, [r7, #24]
 801f6e0:	e007      	b.n	801f6f2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801f6e2:	69fb      	ldr	r3, [r7, #28]
 801f6e4:	781a      	ldrb	r2, [r3, #0]
 801f6e6:	68fb      	ldr	r3, [r7, #12]
 801f6e8:	681b      	ldr	r3, [r3, #0]
 801f6ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801f6ec:	69fb      	ldr	r3, [r7, #28]
 801f6ee:	3301      	adds	r3, #1
 801f6f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801f6f2:	68fb      	ldr	r3, [r7, #12]
 801f6f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801f6f8:	b29b      	uxth	r3, r3
 801f6fa:	3b01      	subs	r3, #1
 801f6fc:	b29a      	uxth	r2, r3
 801f6fe:	68fb      	ldr	r3, [r7, #12]
 801f700:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801f704:	68fb      	ldr	r3, [r7, #12]
 801f706:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801f70a:	b29b      	uxth	r3, r3
 801f70c:	2b00      	cmp	r3, #0
 801f70e:	d1cc      	bne.n	801f6aa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801f710:	683b      	ldr	r3, [r7, #0]
 801f712:	9300      	str	r3, [sp, #0]
 801f714:	697b      	ldr	r3, [r7, #20]
 801f716:	2200      	movs	r2, #0
 801f718:	2140      	movs	r1, #64	; 0x40
 801f71a:	68f8      	ldr	r0, [r7, #12]
 801f71c:	f000 fbf9 	bl	801ff12 <UART_WaitOnFlagUntilTimeout>
 801f720:	4603      	mov	r3, r0
 801f722:	2b00      	cmp	r3, #0
 801f724:	d001      	beq.n	801f72a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 801f726:	2303      	movs	r3, #3
 801f728:	e006      	b.n	801f738 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801f72a:	68fb      	ldr	r3, [r7, #12]
 801f72c:	2220      	movs	r2, #32
 801f72e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 801f732:	2300      	movs	r3, #0
 801f734:	e000      	b.n	801f738 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 801f736:	2302      	movs	r3, #2
  }
}
 801f738:	4618      	mov	r0, r3
 801f73a:	3720      	adds	r7, #32
 801f73c:	46bd      	mov	sp, r7
 801f73e:	bd80      	pop	{r7, pc}

0801f740 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801f740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801f744:	b08c      	sub	sp, #48	; 0x30
 801f746:	af00      	add	r7, sp, #0
 801f748:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801f74a:	2300      	movs	r3, #0
 801f74c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801f750:	697b      	ldr	r3, [r7, #20]
 801f752:	689a      	ldr	r2, [r3, #8]
 801f754:	697b      	ldr	r3, [r7, #20]
 801f756:	691b      	ldr	r3, [r3, #16]
 801f758:	431a      	orrs	r2, r3
 801f75a:	697b      	ldr	r3, [r7, #20]
 801f75c:	695b      	ldr	r3, [r3, #20]
 801f75e:	431a      	orrs	r2, r3
 801f760:	697b      	ldr	r3, [r7, #20]
 801f762:	69db      	ldr	r3, [r3, #28]
 801f764:	4313      	orrs	r3, r2
 801f766:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801f768:	697b      	ldr	r3, [r7, #20]
 801f76a:	681b      	ldr	r3, [r3, #0]
 801f76c:	681a      	ldr	r2, [r3, #0]
 801f76e:	4baa      	ldr	r3, [pc, #680]	; (801fa18 <UART_SetConfig+0x2d8>)
 801f770:	4013      	ands	r3, r2
 801f772:	697a      	ldr	r2, [r7, #20]
 801f774:	6812      	ldr	r2, [r2, #0]
 801f776:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f778:	430b      	orrs	r3, r1
 801f77a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801f77c:	697b      	ldr	r3, [r7, #20]
 801f77e:	681b      	ldr	r3, [r3, #0]
 801f780:	685b      	ldr	r3, [r3, #4]
 801f782:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801f786:	697b      	ldr	r3, [r7, #20]
 801f788:	68da      	ldr	r2, [r3, #12]
 801f78a:	697b      	ldr	r3, [r7, #20]
 801f78c:	681b      	ldr	r3, [r3, #0]
 801f78e:	430a      	orrs	r2, r1
 801f790:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801f792:	697b      	ldr	r3, [r7, #20]
 801f794:	699b      	ldr	r3, [r3, #24]
 801f796:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801f798:	697b      	ldr	r3, [r7, #20]
 801f79a:	681b      	ldr	r3, [r3, #0]
 801f79c:	4a9f      	ldr	r2, [pc, #636]	; (801fa1c <UART_SetConfig+0x2dc>)
 801f79e:	4293      	cmp	r3, r2
 801f7a0:	d004      	beq.n	801f7ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801f7a2:	697b      	ldr	r3, [r7, #20]
 801f7a4:	6a1b      	ldr	r3, [r3, #32]
 801f7a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f7a8:	4313      	orrs	r3, r2
 801f7aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801f7ac:	697b      	ldr	r3, [r7, #20]
 801f7ae:	681b      	ldr	r3, [r3, #0]
 801f7b0:	689b      	ldr	r3, [r3, #8]
 801f7b2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801f7b6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801f7ba:	697a      	ldr	r2, [r7, #20]
 801f7bc:	6812      	ldr	r2, [r2, #0]
 801f7be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f7c0:	430b      	orrs	r3, r1
 801f7c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801f7c4:	697b      	ldr	r3, [r7, #20]
 801f7c6:	681b      	ldr	r3, [r3, #0]
 801f7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f7ca:	f023 010f 	bic.w	r1, r3, #15
 801f7ce:	697b      	ldr	r3, [r7, #20]
 801f7d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f7d2:	697b      	ldr	r3, [r7, #20]
 801f7d4:	681b      	ldr	r3, [r3, #0]
 801f7d6:	430a      	orrs	r2, r1
 801f7d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801f7da:	697b      	ldr	r3, [r7, #20]
 801f7dc:	681b      	ldr	r3, [r3, #0]
 801f7de:	4a90      	ldr	r2, [pc, #576]	; (801fa20 <UART_SetConfig+0x2e0>)
 801f7e0:	4293      	cmp	r3, r2
 801f7e2:	d125      	bne.n	801f830 <UART_SetConfig+0xf0>
 801f7e4:	4b8f      	ldr	r3, [pc, #572]	; (801fa24 <UART_SetConfig+0x2e4>)
 801f7e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f7ea:	f003 0303 	and.w	r3, r3, #3
 801f7ee:	2b03      	cmp	r3, #3
 801f7f0:	d81a      	bhi.n	801f828 <UART_SetConfig+0xe8>
 801f7f2:	a201      	add	r2, pc, #4	; (adr r2, 801f7f8 <UART_SetConfig+0xb8>)
 801f7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f7f8:	0801f809 	.word	0x0801f809
 801f7fc:	0801f819 	.word	0x0801f819
 801f800:	0801f811 	.word	0x0801f811
 801f804:	0801f821 	.word	0x0801f821
 801f808:	2301      	movs	r3, #1
 801f80a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f80e:	e116      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801f810:	2302      	movs	r3, #2
 801f812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f816:	e112      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801f818:	2304      	movs	r3, #4
 801f81a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f81e:	e10e      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801f820:	2308      	movs	r3, #8
 801f822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f826:	e10a      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801f828:	2310      	movs	r3, #16
 801f82a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f82e:	e106      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801f830:	697b      	ldr	r3, [r7, #20]
 801f832:	681b      	ldr	r3, [r3, #0]
 801f834:	4a7c      	ldr	r2, [pc, #496]	; (801fa28 <UART_SetConfig+0x2e8>)
 801f836:	4293      	cmp	r3, r2
 801f838:	d138      	bne.n	801f8ac <UART_SetConfig+0x16c>
 801f83a:	4b7a      	ldr	r3, [pc, #488]	; (801fa24 <UART_SetConfig+0x2e4>)
 801f83c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f840:	f003 030c 	and.w	r3, r3, #12
 801f844:	2b0c      	cmp	r3, #12
 801f846:	d82d      	bhi.n	801f8a4 <UART_SetConfig+0x164>
 801f848:	a201      	add	r2, pc, #4	; (adr r2, 801f850 <UART_SetConfig+0x110>)
 801f84a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f84e:	bf00      	nop
 801f850:	0801f885 	.word	0x0801f885
 801f854:	0801f8a5 	.word	0x0801f8a5
 801f858:	0801f8a5 	.word	0x0801f8a5
 801f85c:	0801f8a5 	.word	0x0801f8a5
 801f860:	0801f895 	.word	0x0801f895
 801f864:	0801f8a5 	.word	0x0801f8a5
 801f868:	0801f8a5 	.word	0x0801f8a5
 801f86c:	0801f8a5 	.word	0x0801f8a5
 801f870:	0801f88d 	.word	0x0801f88d
 801f874:	0801f8a5 	.word	0x0801f8a5
 801f878:	0801f8a5 	.word	0x0801f8a5
 801f87c:	0801f8a5 	.word	0x0801f8a5
 801f880:	0801f89d 	.word	0x0801f89d
 801f884:	2300      	movs	r3, #0
 801f886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f88a:	e0d8      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801f88c:	2302      	movs	r3, #2
 801f88e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f892:	e0d4      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801f894:	2304      	movs	r3, #4
 801f896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f89a:	e0d0      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801f89c:	2308      	movs	r3, #8
 801f89e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f8a2:	e0cc      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801f8a4:	2310      	movs	r3, #16
 801f8a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f8aa:	e0c8      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801f8ac:	697b      	ldr	r3, [r7, #20]
 801f8ae:	681b      	ldr	r3, [r3, #0]
 801f8b0:	4a5e      	ldr	r2, [pc, #376]	; (801fa2c <UART_SetConfig+0x2ec>)
 801f8b2:	4293      	cmp	r3, r2
 801f8b4:	d125      	bne.n	801f902 <UART_SetConfig+0x1c2>
 801f8b6:	4b5b      	ldr	r3, [pc, #364]	; (801fa24 <UART_SetConfig+0x2e4>)
 801f8b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f8bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801f8c0:	2b30      	cmp	r3, #48	; 0x30
 801f8c2:	d016      	beq.n	801f8f2 <UART_SetConfig+0x1b2>
 801f8c4:	2b30      	cmp	r3, #48	; 0x30
 801f8c6:	d818      	bhi.n	801f8fa <UART_SetConfig+0x1ba>
 801f8c8:	2b20      	cmp	r3, #32
 801f8ca:	d00a      	beq.n	801f8e2 <UART_SetConfig+0x1a2>
 801f8cc:	2b20      	cmp	r3, #32
 801f8ce:	d814      	bhi.n	801f8fa <UART_SetConfig+0x1ba>
 801f8d0:	2b00      	cmp	r3, #0
 801f8d2:	d002      	beq.n	801f8da <UART_SetConfig+0x19a>
 801f8d4:	2b10      	cmp	r3, #16
 801f8d6:	d008      	beq.n	801f8ea <UART_SetConfig+0x1aa>
 801f8d8:	e00f      	b.n	801f8fa <UART_SetConfig+0x1ba>
 801f8da:	2300      	movs	r3, #0
 801f8dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f8e0:	e0ad      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801f8e2:	2302      	movs	r3, #2
 801f8e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f8e8:	e0a9      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801f8ea:	2304      	movs	r3, #4
 801f8ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f8f0:	e0a5      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801f8f2:	2308      	movs	r3, #8
 801f8f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f8f8:	e0a1      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801f8fa:	2310      	movs	r3, #16
 801f8fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f900:	e09d      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801f902:	697b      	ldr	r3, [r7, #20]
 801f904:	681b      	ldr	r3, [r3, #0]
 801f906:	4a4a      	ldr	r2, [pc, #296]	; (801fa30 <UART_SetConfig+0x2f0>)
 801f908:	4293      	cmp	r3, r2
 801f90a:	d125      	bne.n	801f958 <UART_SetConfig+0x218>
 801f90c:	4b45      	ldr	r3, [pc, #276]	; (801fa24 <UART_SetConfig+0x2e4>)
 801f90e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f912:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801f916:	2bc0      	cmp	r3, #192	; 0xc0
 801f918:	d016      	beq.n	801f948 <UART_SetConfig+0x208>
 801f91a:	2bc0      	cmp	r3, #192	; 0xc0
 801f91c:	d818      	bhi.n	801f950 <UART_SetConfig+0x210>
 801f91e:	2b80      	cmp	r3, #128	; 0x80
 801f920:	d00a      	beq.n	801f938 <UART_SetConfig+0x1f8>
 801f922:	2b80      	cmp	r3, #128	; 0x80
 801f924:	d814      	bhi.n	801f950 <UART_SetConfig+0x210>
 801f926:	2b00      	cmp	r3, #0
 801f928:	d002      	beq.n	801f930 <UART_SetConfig+0x1f0>
 801f92a:	2b40      	cmp	r3, #64	; 0x40
 801f92c:	d008      	beq.n	801f940 <UART_SetConfig+0x200>
 801f92e:	e00f      	b.n	801f950 <UART_SetConfig+0x210>
 801f930:	2300      	movs	r3, #0
 801f932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f936:	e082      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801f938:	2302      	movs	r3, #2
 801f93a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f93e:	e07e      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801f940:	2304      	movs	r3, #4
 801f942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f946:	e07a      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801f948:	2308      	movs	r3, #8
 801f94a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f94e:	e076      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801f950:	2310      	movs	r3, #16
 801f952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f956:	e072      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801f958:	697b      	ldr	r3, [r7, #20]
 801f95a:	681b      	ldr	r3, [r3, #0]
 801f95c:	4a35      	ldr	r2, [pc, #212]	; (801fa34 <UART_SetConfig+0x2f4>)
 801f95e:	4293      	cmp	r3, r2
 801f960:	d12a      	bne.n	801f9b8 <UART_SetConfig+0x278>
 801f962:	4b30      	ldr	r3, [pc, #192]	; (801fa24 <UART_SetConfig+0x2e4>)
 801f964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f968:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801f96c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801f970:	d01a      	beq.n	801f9a8 <UART_SetConfig+0x268>
 801f972:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801f976:	d81b      	bhi.n	801f9b0 <UART_SetConfig+0x270>
 801f978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f97c:	d00c      	beq.n	801f998 <UART_SetConfig+0x258>
 801f97e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f982:	d815      	bhi.n	801f9b0 <UART_SetConfig+0x270>
 801f984:	2b00      	cmp	r3, #0
 801f986:	d003      	beq.n	801f990 <UART_SetConfig+0x250>
 801f988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f98c:	d008      	beq.n	801f9a0 <UART_SetConfig+0x260>
 801f98e:	e00f      	b.n	801f9b0 <UART_SetConfig+0x270>
 801f990:	2300      	movs	r3, #0
 801f992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f996:	e052      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801f998:	2302      	movs	r3, #2
 801f99a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f99e:	e04e      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801f9a0:	2304      	movs	r3, #4
 801f9a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f9a6:	e04a      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801f9a8:	2308      	movs	r3, #8
 801f9aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f9ae:	e046      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801f9b0:	2310      	movs	r3, #16
 801f9b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f9b6:	e042      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801f9b8:	697b      	ldr	r3, [r7, #20]
 801f9ba:	681b      	ldr	r3, [r3, #0]
 801f9bc:	4a17      	ldr	r2, [pc, #92]	; (801fa1c <UART_SetConfig+0x2dc>)
 801f9be:	4293      	cmp	r3, r2
 801f9c0:	d13a      	bne.n	801fa38 <UART_SetConfig+0x2f8>
 801f9c2:	4b18      	ldr	r3, [pc, #96]	; (801fa24 <UART_SetConfig+0x2e4>)
 801f9c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f9c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801f9cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801f9d0:	d01a      	beq.n	801fa08 <UART_SetConfig+0x2c8>
 801f9d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801f9d6:	d81b      	bhi.n	801fa10 <UART_SetConfig+0x2d0>
 801f9d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f9dc:	d00c      	beq.n	801f9f8 <UART_SetConfig+0x2b8>
 801f9de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f9e2:	d815      	bhi.n	801fa10 <UART_SetConfig+0x2d0>
 801f9e4:	2b00      	cmp	r3, #0
 801f9e6:	d003      	beq.n	801f9f0 <UART_SetConfig+0x2b0>
 801f9e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f9ec:	d008      	beq.n	801fa00 <UART_SetConfig+0x2c0>
 801f9ee:	e00f      	b.n	801fa10 <UART_SetConfig+0x2d0>
 801f9f0:	2300      	movs	r3, #0
 801f9f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f9f6:	e022      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801f9f8:	2302      	movs	r3, #2
 801f9fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f9fe:	e01e      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801fa00:	2304      	movs	r3, #4
 801fa02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801fa06:	e01a      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801fa08:	2308      	movs	r3, #8
 801fa0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801fa0e:	e016      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801fa10:	2310      	movs	r3, #16
 801fa12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801fa16:	e012      	b.n	801fa3e <UART_SetConfig+0x2fe>
 801fa18:	cfff69f3 	.word	0xcfff69f3
 801fa1c:	40008000 	.word	0x40008000
 801fa20:	40013800 	.word	0x40013800
 801fa24:	40021000 	.word	0x40021000
 801fa28:	40004400 	.word	0x40004400
 801fa2c:	40004800 	.word	0x40004800
 801fa30:	40004c00 	.word	0x40004c00
 801fa34:	40005000 	.word	0x40005000
 801fa38:	2310      	movs	r3, #16
 801fa3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801fa3e:	697b      	ldr	r3, [r7, #20]
 801fa40:	681b      	ldr	r3, [r3, #0]
 801fa42:	4aae      	ldr	r2, [pc, #696]	; (801fcfc <UART_SetConfig+0x5bc>)
 801fa44:	4293      	cmp	r3, r2
 801fa46:	f040 8097 	bne.w	801fb78 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801fa4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fa4e:	2b08      	cmp	r3, #8
 801fa50:	d823      	bhi.n	801fa9a <UART_SetConfig+0x35a>
 801fa52:	a201      	add	r2, pc, #4	; (adr r2, 801fa58 <UART_SetConfig+0x318>)
 801fa54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fa58:	0801fa7d 	.word	0x0801fa7d
 801fa5c:	0801fa9b 	.word	0x0801fa9b
 801fa60:	0801fa85 	.word	0x0801fa85
 801fa64:	0801fa9b 	.word	0x0801fa9b
 801fa68:	0801fa8b 	.word	0x0801fa8b
 801fa6c:	0801fa9b 	.word	0x0801fa9b
 801fa70:	0801fa9b 	.word	0x0801fa9b
 801fa74:	0801fa9b 	.word	0x0801fa9b
 801fa78:	0801fa93 	.word	0x0801fa93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801fa7c:	f7fd f8b4 	bl	801cbe8 <HAL_RCC_GetPCLK1Freq>
 801fa80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fa82:	e010      	b.n	801faa6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801fa84:	4b9e      	ldr	r3, [pc, #632]	; (801fd00 <UART_SetConfig+0x5c0>)
 801fa86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801fa88:	e00d      	b.n	801faa6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801fa8a:	f7fd f841 	bl	801cb10 <HAL_RCC_GetSysClockFreq>
 801fa8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fa90:	e009      	b.n	801faa6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801fa92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801fa96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801fa98:	e005      	b.n	801faa6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 801fa9a:	2300      	movs	r3, #0
 801fa9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801fa9e:	2301      	movs	r3, #1
 801faa0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801faa4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801faa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801faa8:	2b00      	cmp	r3, #0
 801faaa:	f000 8130 	beq.w	801fd0e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801faae:	697b      	ldr	r3, [r7, #20]
 801fab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fab2:	4a94      	ldr	r2, [pc, #592]	; (801fd04 <UART_SetConfig+0x5c4>)
 801fab4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801fab8:	461a      	mov	r2, r3
 801faba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fabc:	fbb3 f3f2 	udiv	r3, r3, r2
 801fac0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801fac2:	697b      	ldr	r3, [r7, #20]
 801fac4:	685a      	ldr	r2, [r3, #4]
 801fac6:	4613      	mov	r3, r2
 801fac8:	005b      	lsls	r3, r3, #1
 801faca:	4413      	add	r3, r2
 801facc:	69ba      	ldr	r2, [r7, #24]
 801face:	429a      	cmp	r2, r3
 801fad0:	d305      	bcc.n	801fade <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801fad2:	697b      	ldr	r3, [r7, #20]
 801fad4:	685b      	ldr	r3, [r3, #4]
 801fad6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801fad8:	69ba      	ldr	r2, [r7, #24]
 801fada:	429a      	cmp	r2, r3
 801fadc:	d903      	bls.n	801fae6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 801fade:	2301      	movs	r3, #1
 801fae0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801fae4:	e113      	b.n	801fd0e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801fae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fae8:	2200      	movs	r2, #0
 801faea:	60bb      	str	r3, [r7, #8]
 801faec:	60fa      	str	r2, [r7, #12]
 801faee:	697b      	ldr	r3, [r7, #20]
 801faf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801faf2:	4a84      	ldr	r2, [pc, #528]	; (801fd04 <UART_SetConfig+0x5c4>)
 801faf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801faf8:	b29b      	uxth	r3, r3
 801fafa:	2200      	movs	r2, #0
 801fafc:	603b      	str	r3, [r7, #0]
 801fafe:	607a      	str	r2, [r7, #4]
 801fb00:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fb04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801fb08:	f7e1 f8c6 	bl	8000c98 <__aeabi_uldivmod>
 801fb0c:	4602      	mov	r2, r0
 801fb0e:	460b      	mov	r3, r1
 801fb10:	4610      	mov	r0, r2
 801fb12:	4619      	mov	r1, r3
 801fb14:	f04f 0200 	mov.w	r2, #0
 801fb18:	f04f 0300 	mov.w	r3, #0
 801fb1c:	020b      	lsls	r3, r1, #8
 801fb1e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801fb22:	0202      	lsls	r2, r0, #8
 801fb24:	6979      	ldr	r1, [r7, #20]
 801fb26:	6849      	ldr	r1, [r1, #4]
 801fb28:	0849      	lsrs	r1, r1, #1
 801fb2a:	2000      	movs	r0, #0
 801fb2c:	460c      	mov	r4, r1
 801fb2e:	4605      	mov	r5, r0
 801fb30:	eb12 0804 	adds.w	r8, r2, r4
 801fb34:	eb43 0905 	adc.w	r9, r3, r5
 801fb38:	697b      	ldr	r3, [r7, #20]
 801fb3a:	685b      	ldr	r3, [r3, #4]
 801fb3c:	2200      	movs	r2, #0
 801fb3e:	469a      	mov	sl, r3
 801fb40:	4693      	mov	fp, r2
 801fb42:	4652      	mov	r2, sl
 801fb44:	465b      	mov	r3, fp
 801fb46:	4640      	mov	r0, r8
 801fb48:	4649      	mov	r1, r9
 801fb4a:	f7e1 f8a5 	bl	8000c98 <__aeabi_uldivmod>
 801fb4e:	4602      	mov	r2, r0
 801fb50:	460b      	mov	r3, r1
 801fb52:	4613      	mov	r3, r2
 801fb54:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801fb56:	6a3b      	ldr	r3, [r7, #32]
 801fb58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801fb5c:	d308      	bcc.n	801fb70 <UART_SetConfig+0x430>
 801fb5e:	6a3b      	ldr	r3, [r7, #32]
 801fb60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801fb64:	d204      	bcs.n	801fb70 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 801fb66:	697b      	ldr	r3, [r7, #20]
 801fb68:	681b      	ldr	r3, [r3, #0]
 801fb6a:	6a3a      	ldr	r2, [r7, #32]
 801fb6c:	60da      	str	r2, [r3, #12]
 801fb6e:	e0ce      	b.n	801fd0e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 801fb70:	2301      	movs	r3, #1
 801fb72:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801fb76:	e0ca      	b.n	801fd0e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801fb78:	697b      	ldr	r3, [r7, #20]
 801fb7a:	69db      	ldr	r3, [r3, #28]
 801fb7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801fb80:	d166      	bne.n	801fc50 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 801fb82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fb86:	2b08      	cmp	r3, #8
 801fb88:	d827      	bhi.n	801fbda <UART_SetConfig+0x49a>
 801fb8a:	a201      	add	r2, pc, #4	; (adr r2, 801fb90 <UART_SetConfig+0x450>)
 801fb8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fb90:	0801fbb5 	.word	0x0801fbb5
 801fb94:	0801fbbd 	.word	0x0801fbbd
 801fb98:	0801fbc5 	.word	0x0801fbc5
 801fb9c:	0801fbdb 	.word	0x0801fbdb
 801fba0:	0801fbcb 	.word	0x0801fbcb
 801fba4:	0801fbdb 	.word	0x0801fbdb
 801fba8:	0801fbdb 	.word	0x0801fbdb
 801fbac:	0801fbdb 	.word	0x0801fbdb
 801fbb0:	0801fbd3 	.word	0x0801fbd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801fbb4:	f7fd f818 	bl	801cbe8 <HAL_RCC_GetPCLK1Freq>
 801fbb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fbba:	e014      	b.n	801fbe6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801fbbc:	f7fd f82a 	bl	801cc14 <HAL_RCC_GetPCLK2Freq>
 801fbc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fbc2:	e010      	b.n	801fbe6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801fbc4:	4b4e      	ldr	r3, [pc, #312]	; (801fd00 <UART_SetConfig+0x5c0>)
 801fbc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801fbc8:	e00d      	b.n	801fbe6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801fbca:	f7fc ffa1 	bl	801cb10 <HAL_RCC_GetSysClockFreq>
 801fbce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fbd0:	e009      	b.n	801fbe6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801fbd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801fbd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801fbd8:	e005      	b.n	801fbe6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 801fbda:	2300      	movs	r3, #0
 801fbdc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801fbde:	2301      	movs	r3, #1
 801fbe0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801fbe4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801fbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbe8:	2b00      	cmp	r3, #0
 801fbea:	f000 8090 	beq.w	801fd0e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801fbee:	697b      	ldr	r3, [r7, #20]
 801fbf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fbf2:	4a44      	ldr	r2, [pc, #272]	; (801fd04 <UART_SetConfig+0x5c4>)
 801fbf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801fbf8:	461a      	mov	r2, r3
 801fbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbfc:	fbb3 f3f2 	udiv	r3, r3, r2
 801fc00:	005a      	lsls	r2, r3, #1
 801fc02:	697b      	ldr	r3, [r7, #20]
 801fc04:	685b      	ldr	r3, [r3, #4]
 801fc06:	085b      	lsrs	r3, r3, #1
 801fc08:	441a      	add	r2, r3
 801fc0a:	697b      	ldr	r3, [r7, #20]
 801fc0c:	685b      	ldr	r3, [r3, #4]
 801fc0e:	fbb2 f3f3 	udiv	r3, r2, r3
 801fc12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801fc14:	6a3b      	ldr	r3, [r7, #32]
 801fc16:	2b0f      	cmp	r3, #15
 801fc18:	d916      	bls.n	801fc48 <UART_SetConfig+0x508>
 801fc1a:	6a3b      	ldr	r3, [r7, #32]
 801fc1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801fc20:	d212      	bcs.n	801fc48 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801fc22:	6a3b      	ldr	r3, [r7, #32]
 801fc24:	b29b      	uxth	r3, r3
 801fc26:	f023 030f 	bic.w	r3, r3, #15
 801fc2a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801fc2c:	6a3b      	ldr	r3, [r7, #32]
 801fc2e:	085b      	lsrs	r3, r3, #1
 801fc30:	b29b      	uxth	r3, r3
 801fc32:	f003 0307 	and.w	r3, r3, #7
 801fc36:	b29a      	uxth	r2, r3
 801fc38:	8bfb      	ldrh	r3, [r7, #30]
 801fc3a:	4313      	orrs	r3, r2
 801fc3c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801fc3e:	697b      	ldr	r3, [r7, #20]
 801fc40:	681b      	ldr	r3, [r3, #0]
 801fc42:	8bfa      	ldrh	r2, [r7, #30]
 801fc44:	60da      	str	r2, [r3, #12]
 801fc46:	e062      	b.n	801fd0e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 801fc48:	2301      	movs	r3, #1
 801fc4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801fc4e:	e05e      	b.n	801fd0e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 801fc50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fc54:	2b08      	cmp	r3, #8
 801fc56:	d828      	bhi.n	801fcaa <UART_SetConfig+0x56a>
 801fc58:	a201      	add	r2, pc, #4	; (adr r2, 801fc60 <UART_SetConfig+0x520>)
 801fc5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fc5e:	bf00      	nop
 801fc60:	0801fc85 	.word	0x0801fc85
 801fc64:	0801fc8d 	.word	0x0801fc8d
 801fc68:	0801fc95 	.word	0x0801fc95
 801fc6c:	0801fcab 	.word	0x0801fcab
 801fc70:	0801fc9b 	.word	0x0801fc9b
 801fc74:	0801fcab 	.word	0x0801fcab
 801fc78:	0801fcab 	.word	0x0801fcab
 801fc7c:	0801fcab 	.word	0x0801fcab
 801fc80:	0801fca3 	.word	0x0801fca3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801fc84:	f7fc ffb0 	bl	801cbe8 <HAL_RCC_GetPCLK1Freq>
 801fc88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fc8a:	e014      	b.n	801fcb6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801fc8c:	f7fc ffc2 	bl	801cc14 <HAL_RCC_GetPCLK2Freq>
 801fc90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fc92:	e010      	b.n	801fcb6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801fc94:	4b1a      	ldr	r3, [pc, #104]	; (801fd00 <UART_SetConfig+0x5c0>)
 801fc96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801fc98:	e00d      	b.n	801fcb6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801fc9a:	f7fc ff39 	bl	801cb10 <HAL_RCC_GetSysClockFreq>
 801fc9e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fca0:	e009      	b.n	801fcb6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801fca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801fca6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801fca8:	e005      	b.n	801fcb6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 801fcaa:	2300      	movs	r3, #0
 801fcac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801fcae:	2301      	movs	r3, #1
 801fcb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801fcb4:	bf00      	nop
    }

    if (pclk != 0U)
 801fcb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fcb8:	2b00      	cmp	r3, #0
 801fcba:	d028      	beq.n	801fd0e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801fcbc:	697b      	ldr	r3, [r7, #20]
 801fcbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fcc0:	4a10      	ldr	r2, [pc, #64]	; (801fd04 <UART_SetConfig+0x5c4>)
 801fcc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801fcc6:	461a      	mov	r2, r3
 801fcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fcca:	fbb3 f2f2 	udiv	r2, r3, r2
 801fcce:	697b      	ldr	r3, [r7, #20]
 801fcd0:	685b      	ldr	r3, [r3, #4]
 801fcd2:	085b      	lsrs	r3, r3, #1
 801fcd4:	441a      	add	r2, r3
 801fcd6:	697b      	ldr	r3, [r7, #20]
 801fcd8:	685b      	ldr	r3, [r3, #4]
 801fcda:	fbb2 f3f3 	udiv	r3, r2, r3
 801fcde:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801fce0:	6a3b      	ldr	r3, [r7, #32]
 801fce2:	2b0f      	cmp	r3, #15
 801fce4:	d910      	bls.n	801fd08 <UART_SetConfig+0x5c8>
 801fce6:	6a3b      	ldr	r3, [r7, #32]
 801fce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801fcec:	d20c      	bcs.n	801fd08 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801fcee:	6a3b      	ldr	r3, [r7, #32]
 801fcf0:	b29a      	uxth	r2, r3
 801fcf2:	697b      	ldr	r3, [r7, #20]
 801fcf4:	681b      	ldr	r3, [r3, #0]
 801fcf6:	60da      	str	r2, [r3, #12]
 801fcf8:	e009      	b.n	801fd0e <UART_SetConfig+0x5ce>
 801fcfa:	bf00      	nop
 801fcfc:	40008000 	.word	0x40008000
 801fd00:	00f42400 	.word	0x00f42400
 801fd04:	08023730 	.word	0x08023730
      }
      else
      {
        ret = HAL_ERROR;
 801fd08:	2301      	movs	r3, #1
 801fd0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801fd0e:	697b      	ldr	r3, [r7, #20]
 801fd10:	2201      	movs	r2, #1
 801fd12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801fd16:	697b      	ldr	r3, [r7, #20]
 801fd18:	2201      	movs	r2, #1
 801fd1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801fd1e:	697b      	ldr	r3, [r7, #20]
 801fd20:	2200      	movs	r2, #0
 801fd22:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801fd24:	697b      	ldr	r3, [r7, #20]
 801fd26:	2200      	movs	r2, #0
 801fd28:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 801fd2a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801fd2e:	4618      	mov	r0, r3
 801fd30:	3730      	adds	r7, #48	; 0x30
 801fd32:	46bd      	mov	sp, r7
 801fd34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801fd38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801fd38:	b480      	push	{r7}
 801fd3a:	b083      	sub	sp, #12
 801fd3c:	af00      	add	r7, sp, #0
 801fd3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801fd40:	687b      	ldr	r3, [r7, #4]
 801fd42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fd44:	f003 0301 	and.w	r3, r3, #1
 801fd48:	2b00      	cmp	r3, #0
 801fd4a:	d00a      	beq.n	801fd62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801fd4c:	687b      	ldr	r3, [r7, #4]
 801fd4e:	681b      	ldr	r3, [r3, #0]
 801fd50:	685b      	ldr	r3, [r3, #4]
 801fd52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801fd56:	687b      	ldr	r3, [r7, #4]
 801fd58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fd5a:	687b      	ldr	r3, [r7, #4]
 801fd5c:	681b      	ldr	r3, [r3, #0]
 801fd5e:	430a      	orrs	r2, r1
 801fd60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801fd62:	687b      	ldr	r3, [r7, #4]
 801fd64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fd66:	f003 0302 	and.w	r3, r3, #2
 801fd6a:	2b00      	cmp	r3, #0
 801fd6c:	d00a      	beq.n	801fd84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801fd6e:	687b      	ldr	r3, [r7, #4]
 801fd70:	681b      	ldr	r3, [r3, #0]
 801fd72:	685b      	ldr	r3, [r3, #4]
 801fd74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801fd78:	687b      	ldr	r3, [r7, #4]
 801fd7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801fd7c:	687b      	ldr	r3, [r7, #4]
 801fd7e:	681b      	ldr	r3, [r3, #0]
 801fd80:	430a      	orrs	r2, r1
 801fd82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801fd84:	687b      	ldr	r3, [r7, #4]
 801fd86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fd88:	f003 0304 	and.w	r3, r3, #4
 801fd8c:	2b00      	cmp	r3, #0
 801fd8e:	d00a      	beq.n	801fda6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801fd90:	687b      	ldr	r3, [r7, #4]
 801fd92:	681b      	ldr	r3, [r3, #0]
 801fd94:	685b      	ldr	r3, [r3, #4]
 801fd96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801fd9a:	687b      	ldr	r3, [r7, #4]
 801fd9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801fd9e:	687b      	ldr	r3, [r7, #4]
 801fda0:	681b      	ldr	r3, [r3, #0]
 801fda2:	430a      	orrs	r2, r1
 801fda4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801fda6:	687b      	ldr	r3, [r7, #4]
 801fda8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fdaa:	f003 0308 	and.w	r3, r3, #8
 801fdae:	2b00      	cmp	r3, #0
 801fdb0:	d00a      	beq.n	801fdc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801fdb2:	687b      	ldr	r3, [r7, #4]
 801fdb4:	681b      	ldr	r3, [r3, #0]
 801fdb6:	685b      	ldr	r3, [r3, #4]
 801fdb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801fdbc:	687b      	ldr	r3, [r7, #4]
 801fdbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801fdc0:	687b      	ldr	r3, [r7, #4]
 801fdc2:	681b      	ldr	r3, [r3, #0]
 801fdc4:	430a      	orrs	r2, r1
 801fdc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801fdc8:	687b      	ldr	r3, [r7, #4]
 801fdca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fdcc:	f003 0310 	and.w	r3, r3, #16
 801fdd0:	2b00      	cmp	r3, #0
 801fdd2:	d00a      	beq.n	801fdea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801fdd4:	687b      	ldr	r3, [r7, #4]
 801fdd6:	681b      	ldr	r3, [r3, #0]
 801fdd8:	689b      	ldr	r3, [r3, #8]
 801fdda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801fdde:	687b      	ldr	r3, [r7, #4]
 801fde0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801fde2:	687b      	ldr	r3, [r7, #4]
 801fde4:	681b      	ldr	r3, [r3, #0]
 801fde6:	430a      	orrs	r2, r1
 801fde8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801fdea:	687b      	ldr	r3, [r7, #4]
 801fdec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fdee:	f003 0320 	and.w	r3, r3, #32
 801fdf2:	2b00      	cmp	r3, #0
 801fdf4:	d00a      	beq.n	801fe0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801fdf6:	687b      	ldr	r3, [r7, #4]
 801fdf8:	681b      	ldr	r3, [r3, #0]
 801fdfa:	689b      	ldr	r3, [r3, #8]
 801fdfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801fe00:	687b      	ldr	r3, [r7, #4]
 801fe02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801fe04:	687b      	ldr	r3, [r7, #4]
 801fe06:	681b      	ldr	r3, [r3, #0]
 801fe08:	430a      	orrs	r2, r1
 801fe0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801fe0c:	687b      	ldr	r3, [r7, #4]
 801fe0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fe10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fe14:	2b00      	cmp	r3, #0
 801fe16:	d01a      	beq.n	801fe4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801fe18:	687b      	ldr	r3, [r7, #4]
 801fe1a:	681b      	ldr	r3, [r3, #0]
 801fe1c:	685b      	ldr	r3, [r3, #4]
 801fe1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801fe22:	687b      	ldr	r3, [r7, #4]
 801fe24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801fe26:	687b      	ldr	r3, [r7, #4]
 801fe28:	681b      	ldr	r3, [r3, #0]
 801fe2a:	430a      	orrs	r2, r1
 801fe2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801fe2e:	687b      	ldr	r3, [r7, #4]
 801fe30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fe32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801fe36:	d10a      	bne.n	801fe4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801fe38:	687b      	ldr	r3, [r7, #4]
 801fe3a:	681b      	ldr	r3, [r3, #0]
 801fe3c:	685b      	ldr	r3, [r3, #4]
 801fe3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801fe42:	687b      	ldr	r3, [r7, #4]
 801fe44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801fe46:	687b      	ldr	r3, [r7, #4]
 801fe48:	681b      	ldr	r3, [r3, #0]
 801fe4a:	430a      	orrs	r2, r1
 801fe4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801fe4e:	687b      	ldr	r3, [r7, #4]
 801fe50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fe52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801fe56:	2b00      	cmp	r3, #0
 801fe58:	d00a      	beq.n	801fe70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801fe5a:	687b      	ldr	r3, [r7, #4]
 801fe5c:	681b      	ldr	r3, [r3, #0]
 801fe5e:	685b      	ldr	r3, [r3, #4]
 801fe60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801fe64:	687b      	ldr	r3, [r7, #4]
 801fe66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fe68:	687b      	ldr	r3, [r7, #4]
 801fe6a:	681b      	ldr	r3, [r3, #0]
 801fe6c:	430a      	orrs	r2, r1
 801fe6e:	605a      	str	r2, [r3, #4]
  }
}
 801fe70:	bf00      	nop
 801fe72:	370c      	adds	r7, #12
 801fe74:	46bd      	mov	sp, r7
 801fe76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe7a:	4770      	bx	lr

0801fe7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801fe7c:	b580      	push	{r7, lr}
 801fe7e:	b086      	sub	sp, #24
 801fe80:	af02      	add	r7, sp, #8
 801fe82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801fe84:	687b      	ldr	r3, [r7, #4]
 801fe86:	2200      	movs	r2, #0
 801fe88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801fe8c:	f7f8 ff58 	bl	8018d40 <HAL_GetTick>
 801fe90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801fe92:	687b      	ldr	r3, [r7, #4]
 801fe94:	681b      	ldr	r3, [r3, #0]
 801fe96:	681b      	ldr	r3, [r3, #0]
 801fe98:	f003 0308 	and.w	r3, r3, #8
 801fe9c:	2b08      	cmp	r3, #8
 801fe9e:	d10e      	bne.n	801febe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801fea0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801fea4:	9300      	str	r3, [sp, #0]
 801fea6:	68fb      	ldr	r3, [r7, #12]
 801fea8:	2200      	movs	r2, #0
 801feaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801feae:	6878      	ldr	r0, [r7, #4]
 801feb0:	f000 f82f 	bl	801ff12 <UART_WaitOnFlagUntilTimeout>
 801feb4:	4603      	mov	r3, r0
 801feb6:	2b00      	cmp	r3, #0
 801feb8:	d001      	beq.n	801febe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801feba:	2303      	movs	r3, #3
 801febc:	e025      	b.n	801ff0a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801febe:	687b      	ldr	r3, [r7, #4]
 801fec0:	681b      	ldr	r3, [r3, #0]
 801fec2:	681b      	ldr	r3, [r3, #0]
 801fec4:	f003 0304 	and.w	r3, r3, #4
 801fec8:	2b04      	cmp	r3, #4
 801feca:	d10e      	bne.n	801feea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801fecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801fed0:	9300      	str	r3, [sp, #0]
 801fed2:	68fb      	ldr	r3, [r7, #12]
 801fed4:	2200      	movs	r2, #0
 801fed6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801feda:	6878      	ldr	r0, [r7, #4]
 801fedc:	f000 f819 	bl	801ff12 <UART_WaitOnFlagUntilTimeout>
 801fee0:	4603      	mov	r3, r0
 801fee2:	2b00      	cmp	r3, #0
 801fee4:	d001      	beq.n	801feea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801fee6:	2303      	movs	r3, #3
 801fee8:	e00f      	b.n	801ff0a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801feea:	687b      	ldr	r3, [r7, #4]
 801feec:	2220      	movs	r2, #32
 801feee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801fef2:	687b      	ldr	r3, [r7, #4]
 801fef4:	2220      	movs	r2, #32
 801fef6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801fefa:	687b      	ldr	r3, [r7, #4]
 801fefc:	2200      	movs	r2, #0
 801fefe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801ff00:	687b      	ldr	r3, [r7, #4]
 801ff02:	2200      	movs	r2, #0
 801ff04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801ff08:	2300      	movs	r3, #0
}
 801ff0a:	4618      	mov	r0, r3
 801ff0c:	3710      	adds	r7, #16
 801ff0e:	46bd      	mov	sp, r7
 801ff10:	bd80      	pop	{r7, pc}

0801ff12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801ff12:	b580      	push	{r7, lr}
 801ff14:	b09c      	sub	sp, #112	; 0x70
 801ff16:	af00      	add	r7, sp, #0
 801ff18:	60f8      	str	r0, [r7, #12]
 801ff1a:	60b9      	str	r1, [r7, #8]
 801ff1c:	603b      	str	r3, [r7, #0]
 801ff1e:	4613      	mov	r3, r2
 801ff20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ff22:	e0a9      	b.n	8020078 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801ff24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ff26:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ff2a:	f000 80a5 	beq.w	8020078 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ff2e:	f7f8 ff07 	bl	8018d40 <HAL_GetTick>
 801ff32:	4602      	mov	r2, r0
 801ff34:	683b      	ldr	r3, [r7, #0]
 801ff36:	1ad3      	subs	r3, r2, r3
 801ff38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801ff3a:	429a      	cmp	r2, r3
 801ff3c:	d302      	bcc.n	801ff44 <UART_WaitOnFlagUntilTimeout+0x32>
 801ff3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ff40:	2b00      	cmp	r3, #0
 801ff42:	d140      	bne.n	801ffc6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801ff44:	68fb      	ldr	r3, [r7, #12]
 801ff46:	681b      	ldr	r3, [r3, #0]
 801ff48:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ff4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ff4c:	e853 3f00 	ldrex	r3, [r3]
 801ff50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801ff52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ff54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801ff58:	667b      	str	r3, [r7, #100]	; 0x64
 801ff5a:	68fb      	ldr	r3, [r7, #12]
 801ff5c:	681b      	ldr	r3, [r3, #0]
 801ff5e:	461a      	mov	r2, r3
 801ff60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ff62:	65fb      	str	r3, [r7, #92]	; 0x5c
 801ff64:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ff66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801ff68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801ff6a:	e841 2300 	strex	r3, r2, [r1]
 801ff6e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801ff70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ff72:	2b00      	cmp	r3, #0
 801ff74:	d1e6      	bne.n	801ff44 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ff76:	68fb      	ldr	r3, [r7, #12]
 801ff78:	681b      	ldr	r3, [r3, #0]
 801ff7a:	3308      	adds	r3, #8
 801ff7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ff7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ff80:	e853 3f00 	ldrex	r3, [r3]
 801ff84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801ff86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ff88:	f023 0301 	bic.w	r3, r3, #1
 801ff8c:	663b      	str	r3, [r7, #96]	; 0x60
 801ff8e:	68fb      	ldr	r3, [r7, #12]
 801ff90:	681b      	ldr	r3, [r3, #0]
 801ff92:	3308      	adds	r3, #8
 801ff94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801ff96:	64ba      	str	r2, [r7, #72]	; 0x48
 801ff98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ff9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801ff9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ff9e:	e841 2300 	strex	r3, r2, [r1]
 801ffa2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801ffa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ffa6:	2b00      	cmp	r3, #0
 801ffa8:	d1e5      	bne.n	801ff76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801ffaa:	68fb      	ldr	r3, [r7, #12]
 801ffac:	2220      	movs	r2, #32
 801ffae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801ffb2:	68fb      	ldr	r3, [r7, #12]
 801ffb4:	2220      	movs	r2, #32
 801ffb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801ffba:	68fb      	ldr	r3, [r7, #12]
 801ffbc:	2200      	movs	r2, #0
 801ffbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801ffc2:	2303      	movs	r3, #3
 801ffc4:	e069      	b.n	802009a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801ffc6:	68fb      	ldr	r3, [r7, #12]
 801ffc8:	681b      	ldr	r3, [r3, #0]
 801ffca:	681b      	ldr	r3, [r3, #0]
 801ffcc:	f003 0304 	and.w	r3, r3, #4
 801ffd0:	2b00      	cmp	r3, #0
 801ffd2:	d051      	beq.n	8020078 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801ffd4:	68fb      	ldr	r3, [r7, #12]
 801ffd6:	681b      	ldr	r3, [r3, #0]
 801ffd8:	69db      	ldr	r3, [r3, #28]
 801ffda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ffde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ffe2:	d149      	bne.n	8020078 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801ffe4:	68fb      	ldr	r3, [r7, #12]
 801ffe6:	681b      	ldr	r3, [r3, #0]
 801ffe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801ffec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801ffee:	68fb      	ldr	r3, [r7, #12]
 801fff0:	681b      	ldr	r3, [r3, #0]
 801fff2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fff6:	e853 3f00 	ldrex	r3, [r3]
 801fffa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801fffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fffe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8020002:	66fb      	str	r3, [r7, #108]	; 0x6c
 8020004:	68fb      	ldr	r3, [r7, #12]
 8020006:	681b      	ldr	r3, [r3, #0]
 8020008:	461a      	mov	r2, r3
 802000a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802000c:	637b      	str	r3, [r7, #52]	; 0x34
 802000e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020010:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8020012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8020014:	e841 2300 	strex	r3, r2, [r1]
 8020018:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 802001a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802001c:	2b00      	cmp	r3, #0
 802001e:	d1e6      	bne.n	801ffee <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020020:	68fb      	ldr	r3, [r7, #12]
 8020022:	681b      	ldr	r3, [r3, #0]
 8020024:	3308      	adds	r3, #8
 8020026:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020028:	697b      	ldr	r3, [r7, #20]
 802002a:	e853 3f00 	ldrex	r3, [r3]
 802002e:	613b      	str	r3, [r7, #16]
   return(result);
 8020030:	693b      	ldr	r3, [r7, #16]
 8020032:	f023 0301 	bic.w	r3, r3, #1
 8020036:	66bb      	str	r3, [r7, #104]	; 0x68
 8020038:	68fb      	ldr	r3, [r7, #12]
 802003a:	681b      	ldr	r3, [r3, #0]
 802003c:	3308      	adds	r3, #8
 802003e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8020040:	623a      	str	r2, [r7, #32]
 8020042:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020044:	69f9      	ldr	r1, [r7, #28]
 8020046:	6a3a      	ldr	r2, [r7, #32]
 8020048:	e841 2300 	strex	r3, r2, [r1]
 802004c:	61bb      	str	r3, [r7, #24]
   return(result);
 802004e:	69bb      	ldr	r3, [r7, #24]
 8020050:	2b00      	cmp	r3, #0
 8020052:	d1e5      	bne.n	8020020 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8020054:	68fb      	ldr	r3, [r7, #12]
 8020056:	2220      	movs	r2, #32
 8020058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 802005c:	68fb      	ldr	r3, [r7, #12]
 802005e:	2220      	movs	r2, #32
 8020060:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8020064:	68fb      	ldr	r3, [r7, #12]
 8020066:	2220      	movs	r2, #32
 8020068:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 802006c:	68fb      	ldr	r3, [r7, #12]
 802006e:	2200      	movs	r2, #0
 8020070:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8020074:	2303      	movs	r3, #3
 8020076:	e010      	b.n	802009a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8020078:	68fb      	ldr	r3, [r7, #12]
 802007a:	681b      	ldr	r3, [r3, #0]
 802007c:	69da      	ldr	r2, [r3, #28]
 802007e:	68bb      	ldr	r3, [r7, #8]
 8020080:	4013      	ands	r3, r2
 8020082:	68ba      	ldr	r2, [r7, #8]
 8020084:	429a      	cmp	r2, r3
 8020086:	bf0c      	ite	eq
 8020088:	2301      	moveq	r3, #1
 802008a:	2300      	movne	r3, #0
 802008c:	b2db      	uxtb	r3, r3
 802008e:	461a      	mov	r2, r3
 8020090:	79fb      	ldrb	r3, [r7, #7]
 8020092:	429a      	cmp	r2, r3
 8020094:	f43f af46 	beq.w	801ff24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8020098:	2300      	movs	r3, #0
}
 802009a:	4618      	mov	r0, r3
 802009c:	3770      	adds	r7, #112	; 0x70
 802009e:	46bd      	mov	sp, r7
 80200a0:	bd80      	pop	{r7, pc}

080200a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80200a2:	b480      	push	{r7}
 80200a4:	b085      	sub	sp, #20
 80200a6:	af00      	add	r7, sp, #0
 80200a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80200aa:	687b      	ldr	r3, [r7, #4]
 80200ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80200b0:	2b01      	cmp	r3, #1
 80200b2:	d101      	bne.n	80200b8 <HAL_UARTEx_DisableFifoMode+0x16>
 80200b4:	2302      	movs	r3, #2
 80200b6:	e027      	b.n	8020108 <HAL_UARTEx_DisableFifoMode+0x66>
 80200b8:	687b      	ldr	r3, [r7, #4]
 80200ba:	2201      	movs	r2, #1
 80200bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80200c0:	687b      	ldr	r3, [r7, #4]
 80200c2:	2224      	movs	r2, #36	; 0x24
 80200c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80200c8:	687b      	ldr	r3, [r7, #4]
 80200ca:	681b      	ldr	r3, [r3, #0]
 80200cc:	681b      	ldr	r3, [r3, #0]
 80200ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80200d0:	687b      	ldr	r3, [r7, #4]
 80200d2:	681b      	ldr	r3, [r3, #0]
 80200d4:	681a      	ldr	r2, [r3, #0]
 80200d6:	687b      	ldr	r3, [r7, #4]
 80200d8:	681b      	ldr	r3, [r3, #0]
 80200da:	f022 0201 	bic.w	r2, r2, #1
 80200de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80200e0:	68fb      	ldr	r3, [r7, #12]
 80200e2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80200e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80200e8:	687b      	ldr	r3, [r7, #4]
 80200ea:	2200      	movs	r2, #0
 80200ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80200ee:	687b      	ldr	r3, [r7, #4]
 80200f0:	681b      	ldr	r3, [r3, #0]
 80200f2:	68fa      	ldr	r2, [r7, #12]
 80200f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80200f6:	687b      	ldr	r3, [r7, #4]
 80200f8:	2220      	movs	r2, #32
 80200fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80200fe:	687b      	ldr	r3, [r7, #4]
 8020100:	2200      	movs	r2, #0
 8020102:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8020106:	2300      	movs	r3, #0
}
 8020108:	4618      	mov	r0, r3
 802010a:	3714      	adds	r7, #20
 802010c:	46bd      	mov	sp, r7
 802010e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020112:	4770      	bx	lr

08020114 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8020114:	b580      	push	{r7, lr}
 8020116:	b084      	sub	sp, #16
 8020118:	af00      	add	r7, sp, #0
 802011a:	6078      	str	r0, [r7, #4]
 802011c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 802011e:	687b      	ldr	r3, [r7, #4]
 8020120:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8020124:	2b01      	cmp	r3, #1
 8020126:	d101      	bne.n	802012c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8020128:	2302      	movs	r3, #2
 802012a:	e02d      	b.n	8020188 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 802012c:	687b      	ldr	r3, [r7, #4]
 802012e:	2201      	movs	r2, #1
 8020130:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8020134:	687b      	ldr	r3, [r7, #4]
 8020136:	2224      	movs	r2, #36	; 0x24
 8020138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802013c:	687b      	ldr	r3, [r7, #4]
 802013e:	681b      	ldr	r3, [r3, #0]
 8020140:	681b      	ldr	r3, [r3, #0]
 8020142:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8020144:	687b      	ldr	r3, [r7, #4]
 8020146:	681b      	ldr	r3, [r3, #0]
 8020148:	681a      	ldr	r2, [r3, #0]
 802014a:	687b      	ldr	r3, [r7, #4]
 802014c:	681b      	ldr	r3, [r3, #0]
 802014e:	f022 0201 	bic.w	r2, r2, #1
 8020152:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8020154:	687b      	ldr	r3, [r7, #4]
 8020156:	681b      	ldr	r3, [r3, #0]
 8020158:	689b      	ldr	r3, [r3, #8]
 802015a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 802015e:	687b      	ldr	r3, [r7, #4]
 8020160:	681b      	ldr	r3, [r3, #0]
 8020162:	683a      	ldr	r2, [r7, #0]
 8020164:	430a      	orrs	r2, r1
 8020166:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8020168:	6878      	ldr	r0, [r7, #4]
 802016a:	f000 f84f 	bl	802020c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802016e:	687b      	ldr	r3, [r7, #4]
 8020170:	681b      	ldr	r3, [r3, #0]
 8020172:	68fa      	ldr	r2, [r7, #12]
 8020174:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8020176:	687b      	ldr	r3, [r7, #4]
 8020178:	2220      	movs	r2, #32
 802017a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802017e:	687b      	ldr	r3, [r7, #4]
 8020180:	2200      	movs	r2, #0
 8020182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8020186:	2300      	movs	r3, #0
}
 8020188:	4618      	mov	r0, r3
 802018a:	3710      	adds	r7, #16
 802018c:	46bd      	mov	sp, r7
 802018e:	bd80      	pop	{r7, pc}

08020190 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8020190:	b580      	push	{r7, lr}
 8020192:	b084      	sub	sp, #16
 8020194:	af00      	add	r7, sp, #0
 8020196:	6078      	str	r0, [r7, #4]
 8020198:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 802019a:	687b      	ldr	r3, [r7, #4]
 802019c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80201a0:	2b01      	cmp	r3, #1
 80201a2:	d101      	bne.n	80201a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80201a4:	2302      	movs	r3, #2
 80201a6:	e02d      	b.n	8020204 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80201a8:	687b      	ldr	r3, [r7, #4]
 80201aa:	2201      	movs	r2, #1
 80201ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80201b0:	687b      	ldr	r3, [r7, #4]
 80201b2:	2224      	movs	r2, #36	; 0x24
 80201b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80201b8:	687b      	ldr	r3, [r7, #4]
 80201ba:	681b      	ldr	r3, [r3, #0]
 80201bc:	681b      	ldr	r3, [r3, #0]
 80201be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80201c0:	687b      	ldr	r3, [r7, #4]
 80201c2:	681b      	ldr	r3, [r3, #0]
 80201c4:	681a      	ldr	r2, [r3, #0]
 80201c6:	687b      	ldr	r3, [r7, #4]
 80201c8:	681b      	ldr	r3, [r3, #0]
 80201ca:	f022 0201 	bic.w	r2, r2, #1
 80201ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80201d0:	687b      	ldr	r3, [r7, #4]
 80201d2:	681b      	ldr	r3, [r3, #0]
 80201d4:	689b      	ldr	r3, [r3, #8]
 80201d6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80201da:	687b      	ldr	r3, [r7, #4]
 80201dc:	681b      	ldr	r3, [r3, #0]
 80201de:	683a      	ldr	r2, [r7, #0]
 80201e0:	430a      	orrs	r2, r1
 80201e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80201e4:	6878      	ldr	r0, [r7, #4]
 80201e6:	f000 f811 	bl	802020c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80201ea:	687b      	ldr	r3, [r7, #4]
 80201ec:	681b      	ldr	r3, [r3, #0]
 80201ee:	68fa      	ldr	r2, [r7, #12]
 80201f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80201f2:	687b      	ldr	r3, [r7, #4]
 80201f4:	2220      	movs	r2, #32
 80201f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80201fa:	687b      	ldr	r3, [r7, #4]
 80201fc:	2200      	movs	r2, #0
 80201fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8020202:	2300      	movs	r3, #0
}
 8020204:	4618      	mov	r0, r3
 8020206:	3710      	adds	r7, #16
 8020208:	46bd      	mov	sp, r7
 802020a:	bd80      	pop	{r7, pc}

0802020c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 802020c:	b480      	push	{r7}
 802020e:	b085      	sub	sp, #20
 8020210:	af00      	add	r7, sp, #0
 8020212:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8020214:	687b      	ldr	r3, [r7, #4]
 8020216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8020218:	2b00      	cmp	r3, #0
 802021a:	d108      	bne.n	802022e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 802021c:	687b      	ldr	r3, [r7, #4]
 802021e:	2201      	movs	r2, #1
 8020220:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8020224:	687b      	ldr	r3, [r7, #4]
 8020226:	2201      	movs	r2, #1
 8020228:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 802022c:	e031      	b.n	8020292 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 802022e:	2308      	movs	r3, #8
 8020230:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8020232:	2308      	movs	r3, #8
 8020234:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8020236:	687b      	ldr	r3, [r7, #4]
 8020238:	681b      	ldr	r3, [r3, #0]
 802023a:	689b      	ldr	r3, [r3, #8]
 802023c:	0e5b      	lsrs	r3, r3, #25
 802023e:	b2db      	uxtb	r3, r3
 8020240:	f003 0307 	and.w	r3, r3, #7
 8020244:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8020246:	687b      	ldr	r3, [r7, #4]
 8020248:	681b      	ldr	r3, [r3, #0]
 802024a:	689b      	ldr	r3, [r3, #8]
 802024c:	0f5b      	lsrs	r3, r3, #29
 802024e:	b2db      	uxtb	r3, r3
 8020250:	f003 0307 	and.w	r3, r3, #7
 8020254:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8020256:	7bbb      	ldrb	r3, [r7, #14]
 8020258:	7b3a      	ldrb	r2, [r7, #12]
 802025a:	4911      	ldr	r1, [pc, #68]	; (80202a0 <UARTEx_SetNbDataToProcess+0x94>)
 802025c:	5c8a      	ldrb	r2, [r1, r2]
 802025e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8020262:	7b3a      	ldrb	r2, [r7, #12]
 8020264:	490f      	ldr	r1, [pc, #60]	; (80202a4 <UARTEx_SetNbDataToProcess+0x98>)
 8020266:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8020268:	fb93 f3f2 	sdiv	r3, r3, r2
 802026c:	b29a      	uxth	r2, r3
 802026e:	687b      	ldr	r3, [r7, #4]
 8020270:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8020274:	7bfb      	ldrb	r3, [r7, #15]
 8020276:	7b7a      	ldrb	r2, [r7, #13]
 8020278:	4909      	ldr	r1, [pc, #36]	; (80202a0 <UARTEx_SetNbDataToProcess+0x94>)
 802027a:	5c8a      	ldrb	r2, [r1, r2]
 802027c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8020280:	7b7a      	ldrb	r2, [r7, #13]
 8020282:	4908      	ldr	r1, [pc, #32]	; (80202a4 <UARTEx_SetNbDataToProcess+0x98>)
 8020284:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8020286:	fb93 f3f2 	sdiv	r3, r3, r2
 802028a:	b29a      	uxth	r2, r3
 802028c:	687b      	ldr	r3, [r7, #4]
 802028e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8020292:	bf00      	nop
 8020294:	3714      	adds	r7, #20
 8020296:	46bd      	mov	sp, r7
 8020298:	f85d 7b04 	ldr.w	r7, [sp], #4
 802029c:	4770      	bx	lr
 802029e:	bf00      	nop
 80202a0:	08023748 	.word	0x08023748
 80202a4:	08023750 	.word	0x08023750

080202a8 <__errno>:
 80202a8:	4b01      	ldr	r3, [pc, #4]	; (80202b0 <__errno+0x8>)
 80202aa:	6818      	ldr	r0, [r3, #0]
 80202ac:	4770      	bx	lr
 80202ae:	bf00      	nop
 80202b0:	2000002c 	.word	0x2000002c

080202b4 <__libc_init_array>:
 80202b4:	b570      	push	{r4, r5, r6, lr}
 80202b6:	4d0d      	ldr	r5, [pc, #52]	; (80202ec <__libc_init_array+0x38>)
 80202b8:	4c0d      	ldr	r4, [pc, #52]	; (80202f0 <__libc_init_array+0x3c>)
 80202ba:	1b64      	subs	r4, r4, r5
 80202bc:	10a4      	asrs	r4, r4, #2
 80202be:	2600      	movs	r6, #0
 80202c0:	42a6      	cmp	r6, r4
 80202c2:	d109      	bne.n	80202d8 <__libc_init_array+0x24>
 80202c4:	4d0b      	ldr	r5, [pc, #44]	; (80202f4 <__libc_init_array+0x40>)
 80202c6:	4c0c      	ldr	r4, [pc, #48]	; (80202f8 <__libc_init_array+0x44>)
 80202c8:	f003 f8ac 	bl	8023424 <_init>
 80202cc:	1b64      	subs	r4, r4, r5
 80202ce:	10a4      	asrs	r4, r4, #2
 80202d0:	2600      	movs	r6, #0
 80202d2:	42a6      	cmp	r6, r4
 80202d4:	d105      	bne.n	80202e2 <__libc_init_array+0x2e>
 80202d6:	bd70      	pop	{r4, r5, r6, pc}
 80202d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80202dc:	4798      	blx	r3
 80202de:	3601      	adds	r6, #1
 80202e0:	e7ee      	b.n	80202c0 <__libc_init_array+0xc>
 80202e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80202e6:	4798      	blx	r3
 80202e8:	3601      	adds	r6, #1
 80202ea:	e7f2      	b.n	80202d2 <__libc_init_array+0x1e>
 80202ec:	08023b70 	.word	0x08023b70
 80202f0:	08023b70 	.word	0x08023b70
 80202f4:	08023b70 	.word	0x08023b70
 80202f8:	08023b74 	.word	0x08023b74

080202fc <memcpy>:
 80202fc:	440a      	add	r2, r1
 80202fe:	4291      	cmp	r1, r2
 8020300:	f100 33ff 	add.w	r3, r0, #4294967295
 8020304:	d100      	bne.n	8020308 <memcpy+0xc>
 8020306:	4770      	bx	lr
 8020308:	b510      	push	{r4, lr}
 802030a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802030e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020312:	4291      	cmp	r1, r2
 8020314:	d1f9      	bne.n	802030a <memcpy+0xe>
 8020316:	bd10      	pop	{r4, pc}

08020318 <memset>:
 8020318:	4402      	add	r2, r0
 802031a:	4603      	mov	r3, r0
 802031c:	4293      	cmp	r3, r2
 802031e:	d100      	bne.n	8020322 <memset+0xa>
 8020320:	4770      	bx	lr
 8020322:	f803 1b01 	strb.w	r1, [r3], #1
 8020326:	e7f9      	b.n	802031c <memset+0x4>

08020328 <__cvt>:
 8020328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802032c:	ec55 4b10 	vmov	r4, r5, d0
 8020330:	2d00      	cmp	r5, #0
 8020332:	460e      	mov	r6, r1
 8020334:	4619      	mov	r1, r3
 8020336:	462b      	mov	r3, r5
 8020338:	bfbb      	ittet	lt
 802033a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 802033e:	461d      	movlt	r5, r3
 8020340:	2300      	movge	r3, #0
 8020342:	232d      	movlt	r3, #45	; 0x2d
 8020344:	700b      	strb	r3, [r1, #0]
 8020346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020348:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 802034c:	4691      	mov	r9, r2
 802034e:	f023 0820 	bic.w	r8, r3, #32
 8020352:	bfbc      	itt	lt
 8020354:	4622      	movlt	r2, r4
 8020356:	4614      	movlt	r4, r2
 8020358:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 802035c:	d005      	beq.n	802036a <__cvt+0x42>
 802035e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8020362:	d100      	bne.n	8020366 <__cvt+0x3e>
 8020364:	3601      	adds	r6, #1
 8020366:	2102      	movs	r1, #2
 8020368:	e000      	b.n	802036c <__cvt+0x44>
 802036a:	2103      	movs	r1, #3
 802036c:	ab03      	add	r3, sp, #12
 802036e:	9301      	str	r3, [sp, #4]
 8020370:	ab02      	add	r3, sp, #8
 8020372:	9300      	str	r3, [sp, #0]
 8020374:	ec45 4b10 	vmov	d0, r4, r5
 8020378:	4653      	mov	r3, sl
 802037a:	4632      	mov	r2, r6
 802037c:	f000 fe30 	bl	8020fe0 <_dtoa_r>
 8020380:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8020384:	4607      	mov	r7, r0
 8020386:	d102      	bne.n	802038e <__cvt+0x66>
 8020388:	f019 0f01 	tst.w	r9, #1
 802038c:	d022      	beq.n	80203d4 <__cvt+0xac>
 802038e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8020392:	eb07 0906 	add.w	r9, r7, r6
 8020396:	d110      	bne.n	80203ba <__cvt+0x92>
 8020398:	783b      	ldrb	r3, [r7, #0]
 802039a:	2b30      	cmp	r3, #48	; 0x30
 802039c:	d10a      	bne.n	80203b4 <__cvt+0x8c>
 802039e:	2200      	movs	r2, #0
 80203a0:	2300      	movs	r3, #0
 80203a2:	4620      	mov	r0, r4
 80203a4:	4629      	mov	r1, r5
 80203a6:	f7e0 fbb7 	bl	8000b18 <__aeabi_dcmpeq>
 80203aa:	b918      	cbnz	r0, 80203b4 <__cvt+0x8c>
 80203ac:	f1c6 0601 	rsb	r6, r6, #1
 80203b0:	f8ca 6000 	str.w	r6, [sl]
 80203b4:	f8da 3000 	ldr.w	r3, [sl]
 80203b8:	4499      	add	r9, r3
 80203ba:	2200      	movs	r2, #0
 80203bc:	2300      	movs	r3, #0
 80203be:	4620      	mov	r0, r4
 80203c0:	4629      	mov	r1, r5
 80203c2:	f7e0 fba9 	bl	8000b18 <__aeabi_dcmpeq>
 80203c6:	b108      	cbz	r0, 80203cc <__cvt+0xa4>
 80203c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80203cc:	2230      	movs	r2, #48	; 0x30
 80203ce:	9b03      	ldr	r3, [sp, #12]
 80203d0:	454b      	cmp	r3, r9
 80203d2:	d307      	bcc.n	80203e4 <__cvt+0xbc>
 80203d4:	9b03      	ldr	r3, [sp, #12]
 80203d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80203d8:	1bdb      	subs	r3, r3, r7
 80203da:	4638      	mov	r0, r7
 80203dc:	6013      	str	r3, [r2, #0]
 80203de:	b004      	add	sp, #16
 80203e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80203e4:	1c59      	adds	r1, r3, #1
 80203e6:	9103      	str	r1, [sp, #12]
 80203e8:	701a      	strb	r2, [r3, #0]
 80203ea:	e7f0      	b.n	80203ce <__cvt+0xa6>

080203ec <__exponent>:
 80203ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80203ee:	4603      	mov	r3, r0
 80203f0:	2900      	cmp	r1, #0
 80203f2:	bfb8      	it	lt
 80203f4:	4249      	neglt	r1, r1
 80203f6:	f803 2b02 	strb.w	r2, [r3], #2
 80203fa:	bfb4      	ite	lt
 80203fc:	222d      	movlt	r2, #45	; 0x2d
 80203fe:	222b      	movge	r2, #43	; 0x2b
 8020400:	2909      	cmp	r1, #9
 8020402:	7042      	strb	r2, [r0, #1]
 8020404:	dd2a      	ble.n	802045c <__exponent+0x70>
 8020406:	f10d 0407 	add.w	r4, sp, #7
 802040a:	46a4      	mov	ip, r4
 802040c:	270a      	movs	r7, #10
 802040e:	46a6      	mov	lr, r4
 8020410:	460a      	mov	r2, r1
 8020412:	fb91 f6f7 	sdiv	r6, r1, r7
 8020416:	fb07 1516 	mls	r5, r7, r6, r1
 802041a:	3530      	adds	r5, #48	; 0x30
 802041c:	2a63      	cmp	r2, #99	; 0x63
 802041e:	f104 34ff 	add.w	r4, r4, #4294967295
 8020422:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8020426:	4631      	mov	r1, r6
 8020428:	dcf1      	bgt.n	802040e <__exponent+0x22>
 802042a:	3130      	adds	r1, #48	; 0x30
 802042c:	f1ae 0502 	sub.w	r5, lr, #2
 8020430:	f804 1c01 	strb.w	r1, [r4, #-1]
 8020434:	1c44      	adds	r4, r0, #1
 8020436:	4629      	mov	r1, r5
 8020438:	4561      	cmp	r1, ip
 802043a:	d30a      	bcc.n	8020452 <__exponent+0x66>
 802043c:	f10d 0209 	add.w	r2, sp, #9
 8020440:	eba2 020e 	sub.w	r2, r2, lr
 8020444:	4565      	cmp	r5, ip
 8020446:	bf88      	it	hi
 8020448:	2200      	movhi	r2, #0
 802044a:	4413      	add	r3, r2
 802044c:	1a18      	subs	r0, r3, r0
 802044e:	b003      	add	sp, #12
 8020450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020452:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020456:	f804 2f01 	strb.w	r2, [r4, #1]!
 802045a:	e7ed      	b.n	8020438 <__exponent+0x4c>
 802045c:	2330      	movs	r3, #48	; 0x30
 802045e:	3130      	adds	r1, #48	; 0x30
 8020460:	7083      	strb	r3, [r0, #2]
 8020462:	70c1      	strb	r1, [r0, #3]
 8020464:	1d03      	adds	r3, r0, #4
 8020466:	e7f1      	b.n	802044c <__exponent+0x60>

08020468 <_printf_float>:
 8020468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802046c:	ed2d 8b02 	vpush	{d8}
 8020470:	b08d      	sub	sp, #52	; 0x34
 8020472:	460c      	mov	r4, r1
 8020474:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8020478:	4616      	mov	r6, r2
 802047a:	461f      	mov	r7, r3
 802047c:	4605      	mov	r5, r0
 802047e:	f001 fd55 	bl	8021f2c <_localeconv_r>
 8020482:	f8d0 a000 	ldr.w	sl, [r0]
 8020486:	4650      	mov	r0, sl
 8020488:	f7df feca 	bl	8000220 <strlen>
 802048c:	2300      	movs	r3, #0
 802048e:	930a      	str	r3, [sp, #40]	; 0x28
 8020490:	6823      	ldr	r3, [r4, #0]
 8020492:	9305      	str	r3, [sp, #20]
 8020494:	f8d8 3000 	ldr.w	r3, [r8]
 8020498:	f894 b018 	ldrb.w	fp, [r4, #24]
 802049c:	3307      	adds	r3, #7
 802049e:	f023 0307 	bic.w	r3, r3, #7
 80204a2:	f103 0208 	add.w	r2, r3, #8
 80204a6:	f8c8 2000 	str.w	r2, [r8]
 80204aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80204b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80204b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80204ba:	9307      	str	r3, [sp, #28]
 80204bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80204c0:	ee08 0a10 	vmov	s16, r0
 80204c4:	4b9f      	ldr	r3, [pc, #636]	; (8020744 <_printf_float+0x2dc>)
 80204c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80204ca:	f04f 32ff 	mov.w	r2, #4294967295
 80204ce:	f7e0 fb55 	bl	8000b7c <__aeabi_dcmpun>
 80204d2:	bb88      	cbnz	r0, 8020538 <_printf_float+0xd0>
 80204d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80204d8:	4b9a      	ldr	r3, [pc, #616]	; (8020744 <_printf_float+0x2dc>)
 80204da:	f04f 32ff 	mov.w	r2, #4294967295
 80204de:	f7e0 fb2f 	bl	8000b40 <__aeabi_dcmple>
 80204e2:	bb48      	cbnz	r0, 8020538 <_printf_float+0xd0>
 80204e4:	2200      	movs	r2, #0
 80204e6:	2300      	movs	r3, #0
 80204e8:	4640      	mov	r0, r8
 80204ea:	4649      	mov	r1, r9
 80204ec:	f7e0 fb1e 	bl	8000b2c <__aeabi_dcmplt>
 80204f0:	b110      	cbz	r0, 80204f8 <_printf_float+0x90>
 80204f2:	232d      	movs	r3, #45	; 0x2d
 80204f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80204f8:	4b93      	ldr	r3, [pc, #588]	; (8020748 <_printf_float+0x2e0>)
 80204fa:	4894      	ldr	r0, [pc, #592]	; (802074c <_printf_float+0x2e4>)
 80204fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8020500:	bf94      	ite	ls
 8020502:	4698      	movls	r8, r3
 8020504:	4680      	movhi	r8, r0
 8020506:	2303      	movs	r3, #3
 8020508:	6123      	str	r3, [r4, #16]
 802050a:	9b05      	ldr	r3, [sp, #20]
 802050c:	f023 0204 	bic.w	r2, r3, #4
 8020510:	6022      	str	r2, [r4, #0]
 8020512:	f04f 0900 	mov.w	r9, #0
 8020516:	9700      	str	r7, [sp, #0]
 8020518:	4633      	mov	r3, r6
 802051a:	aa0b      	add	r2, sp, #44	; 0x2c
 802051c:	4621      	mov	r1, r4
 802051e:	4628      	mov	r0, r5
 8020520:	f000 f9d8 	bl	80208d4 <_printf_common>
 8020524:	3001      	adds	r0, #1
 8020526:	f040 8090 	bne.w	802064a <_printf_float+0x1e2>
 802052a:	f04f 30ff 	mov.w	r0, #4294967295
 802052e:	b00d      	add	sp, #52	; 0x34
 8020530:	ecbd 8b02 	vpop	{d8}
 8020534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020538:	4642      	mov	r2, r8
 802053a:	464b      	mov	r3, r9
 802053c:	4640      	mov	r0, r8
 802053e:	4649      	mov	r1, r9
 8020540:	f7e0 fb1c 	bl	8000b7c <__aeabi_dcmpun>
 8020544:	b140      	cbz	r0, 8020558 <_printf_float+0xf0>
 8020546:	464b      	mov	r3, r9
 8020548:	2b00      	cmp	r3, #0
 802054a:	bfbc      	itt	lt
 802054c:	232d      	movlt	r3, #45	; 0x2d
 802054e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8020552:	487f      	ldr	r0, [pc, #508]	; (8020750 <_printf_float+0x2e8>)
 8020554:	4b7f      	ldr	r3, [pc, #508]	; (8020754 <_printf_float+0x2ec>)
 8020556:	e7d1      	b.n	80204fc <_printf_float+0x94>
 8020558:	6863      	ldr	r3, [r4, #4]
 802055a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 802055e:	9206      	str	r2, [sp, #24]
 8020560:	1c5a      	adds	r2, r3, #1
 8020562:	d13f      	bne.n	80205e4 <_printf_float+0x17c>
 8020564:	2306      	movs	r3, #6
 8020566:	6063      	str	r3, [r4, #4]
 8020568:	9b05      	ldr	r3, [sp, #20]
 802056a:	6861      	ldr	r1, [r4, #4]
 802056c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8020570:	2300      	movs	r3, #0
 8020572:	9303      	str	r3, [sp, #12]
 8020574:	ab0a      	add	r3, sp, #40	; 0x28
 8020576:	e9cd b301 	strd	fp, r3, [sp, #4]
 802057a:	ab09      	add	r3, sp, #36	; 0x24
 802057c:	ec49 8b10 	vmov	d0, r8, r9
 8020580:	9300      	str	r3, [sp, #0]
 8020582:	6022      	str	r2, [r4, #0]
 8020584:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8020588:	4628      	mov	r0, r5
 802058a:	f7ff fecd 	bl	8020328 <__cvt>
 802058e:	9b06      	ldr	r3, [sp, #24]
 8020590:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020592:	2b47      	cmp	r3, #71	; 0x47
 8020594:	4680      	mov	r8, r0
 8020596:	d108      	bne.n	80205aa <_printf_float+0x142>
 8020598:	1cc8      	adds	r0, r1, #3
 802059a:	db02      	blt.n	80205a2 <_printf_float+0x13a>
 802059c:	6863      	ldr	r3, [r4, #4]
 802059e:	4299      	cmp	r1, r3
 80205a0:	dd41      	ble.n	8020626 <_printf_float+0x1be>
 80205a2:	f1ab 0b02 	sub.w	fp, fp, #2
 80205a6:	fa5f fb8b 	uxtb.w	fp, fp
 80205aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80205ae:	d820      	bhi.n	80205f2 <_printf_float+0x18a>
 80205b0:	3901      	subs	r1, #1
 80205b2:	465a      	mov	r2, fp
 80205b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80205b8:	9109      	str	r1, [sp, #36]	; 0x24
 80205ba:	f7ff ff17 	bl	80203ec <__exponent>
 80205be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80205c0:	1813      	adds	r3, r2, r0
 80205c2:	2a01      	cmp	r2, #1
 80205c4:	4681      	mov	r9, r0
 80205c6:	6123      	str	r3, [r4, #16]
 80205c8:	dc02      	bgt.n	80205d0 <_printf_float+0x168>
 80205ca:	6822      	ldr	r2, [r4, #0]
 80205cc:	07d2      	lsls	r2, r2, #31
 80205ce:	d501      	bpl.n	80205d4 <_printf_float+0x16c>
 80205d0:	3301      	adds	r3, #1
 80205d2:	6123      	str	r3, [r4, #16]
 80205d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80205d8:	2b00      	cmp	r3, #0
 80205da:	d09c      	beq.n	8020516 <_printf_float+0xae>
 80205dc:	232d      	movs	r3, #45	; 0x2d
 80205de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80205e2:	e798      	b.n	8020516 <_printf_float+0xae>
 80205e4:	9a06      	ldr	r2, [sp, #24]
 80205e6:	2a47      	cmp	r2, #71	; 0x47
 80205e8:	d1be      	bne.n	8020568 <_printf_float+0x100>
 80205ea:	2b00      	cmp	r3, #0
 80205ec:	d1bc      	bne.n	8020568 <_printf_float+0x100>
 80205ee:	2301      	movs	r3, #1
 80205f0:	e7b9      	b.n	8020566 <_printf_float+0xfe>
 80205f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80205f6:	d118      	bne.n	802062a <_printf_float+0x1c2>
 80205f8:	2900      	cmp	r1, #0
 80205fa:	6863      	ldr	r3, [r4, #4]
 80205fc:	dd0b      	ble.n	8020616 <_printf_float+0x1ae>
 80205fe:	6121      	str	r1, [r4, #16]
 8020600:	b913      	cbnz	r3, 8020608 <_printf_float+0x1a0>
 8020602:	6822      	ldr	r2, [r4, #0]
 8020604:	07d0      	lsls	r0, r2, #31
 8020606:	d502      	bpl.n	802060e <_printf_float+0x1a6>
 8020608:	3301      	adds	r3, #1
 802060a:	440b      	add	r3, r1
 802060c:	6123      	str	r3, [r4, #16]
 802060e:	65a1      	str	r1, [r4, #88]	; 0x58
 8020610:	f04f 0900 	mov.w	r9, #0
 8020614:	e7de      	b.n	80205d4 <_printf_float+0x16c>
 8020616:	b913      	cbnz	r3, 802061e <_printf_float+0x1b6>
 8020618:	6822      	ldr	r2, [r4, #0]
 802061a:	07d2      	lsls	r2, r2, #31
 802061c:	d501      	bpl.n	8020622 <_printf_float+0x1ba>
 802061e:	3302      	adds	r3, #2
 8020620:	e7f4      	b.n	802060c <_printf_float+0x1a4>
 8020622:	2301      	movs	r3, #1
 8020624:	e7f2      	b.n	802060c <_printf_float+0x1a4>
 8020626:	f04f 0b67 	mov.w	fp, #103	; 0x67
 802062a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802062c:	4299      	cmp	r1, r3
 802062e:	db05      	blt.n	802063c <_printf_float+0x1d4>
 8020630:	6823      	ldr	r3, [r4, #0]
 8020632:	6121      	str	r1, [r4, #16]
 8020634:	07d8      	lsls	r0, r3, #31
 8020636:	d5ea      	bpl.n	802060e <_printf_float+0x1a6>
 8020638:	1c4b      	adds	r3, r1, #1
 802063a:	e7e7      	b.n	802060c <_printf_float+0x1a4>
 802063c:	2900      	cmp	r1, #0
 802063e:	bfd4      	ite	le
 8020640:	f1c1 0202 	rsble	r2, r1, #2
 8020644:	2201      	movgt	r2, #1
 8020646:	4413      	add	r3, r2
 8020648:	e7e0      	b.n	802060c <_printf_float+0x1a4>
 802064a:	6823      	ldr	r3, [r4, #0]
 802064c:	055a      	lsls	r2, r3, #21
 802064e:	d407      	bmi.n	8020660 <_printf_float+0x1f8>
 8020650:	6923      	ldr	r3, [r4, #16]
 8020652:	4642      	mov	r2, r8
 8020654:	4631      	mov	r1, r6
 8020656:	4628      	mov	r0, r5
 8020658:	47b8      	blx	r7
 802065a:	3001      	adds	r0, #1
 802065c:	d12c      	bne.n	80206b8 <_printf_float+0x250>
 802065e:	e764      	b.n	802052a <_printf_float+0xc2>
 8020660:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8020664:	f240 80e0 	bls.w	8020828 <_printf_float+0x3c0>
 8020668:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802066c:	2200      	movs	r2, #0
 802066e:	2300      	movs	r3, #0
 8020670:	f7e0 fa52 	bl	8000b18 <__aeabi_dcmpeq>
 8020674:	2800      	cmp	r0, #0
 8020676:	d034      	beq.n	80206e2 <_printf_float+0x27a>
 8020678:	4a37      	ldr	r2, [pc, #220]	; (8020758 <_printf_float+0x2f0>)
 802067a:	2301      	movs	r3, #1
 802067c:	4631      	mov	r1, r6
 802067e:	4628      	mov	r0, r5
 8020680:	47b8      	blx	r7
 8020682:	3001      	adds	r0, #1
 8020684:	f43f af51 	beq.w	802052a <_printf_float+0xc2>
 8020688:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802068c:	429a      	cmp	r2, r3
 802068e:	db02      	blt.n	8020696 <_printf_float+0x22e>
 8020690:	6823      	ldr	r3, [r4, #0]
 8020692:	07d8      	lsls	r0, r3, #31
 8020694:	d510      	bpl.n	80206b8 <_printf_float+0x250>
 8020696:	ee18 3a10 	vmov	r3, s16
 802069a:	4652      	mov	r2, sl
 802069c:	4631      	mov	r1, r6
 802069e:	4628      	mov	r0, r5
 80206a0:	47b8      	blx	r7
 80206a2:	3001      	adds	r0, #1
 80206a4:	f43f af41 	beq.w	802052a <_printf_float+0xc2>
 80206a8:	f04f 0800 	mov.w	r8, #0
 80206ac:	f104 091a 	add.w	r9, r4, #26
 80206b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80206b2:	3b01      	subs	r3, #1
 80206b4:	4543      	cmp	r3, r8
 80206b6:	dc09      	bgt.n	80206cc <_printf_float+0x264>
 80206b8:	6823      	ldr	r3, [r4, #0]
 80206ba:	079b      	lsls	r3, r3, #30
 80206bc:	f100 8105 	bmi.w	80208ca <_printf_float+0x462>
 80206c0:	68e0      	ldr	r0, [r4, #12]
 80206c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80206c4:	4298      	cmp	r0, r3
 80206c6:	bfb8      	it	lt
 80206c8:	4618      	movlt	r0, r3
 80206ca:	e730      	b.n	802052e <_printf_float+0xc6>
 80206cc:	2301      	movs	r3, #1
 80206ce:	464a      	mov	r2, r9
 80206d0:	4631      	mov	r1, r6
 80206d2:	4628      	mov	r0, r5
 80206d4:	47b8      	blx	r7
 80206d6:	3001      	adds	r0, #1
 80206d8:	f43f af27 	beq.w	802052a <_printf_float+0xc2>
 80206dc:	f108 0801 	add.w	r8, r8, #1
 80206e0:	e7e6      	b.n	80206b0 <_printf_float+0x248>
 80206e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80206e4:	2b00      	cmp	r3, #0
 80206e6:	dc39      	bgt.n	802075c <_printf_float+0x2f4>
 80206e8:	4a1b      	ldr	r2, [pc, #108]	; (8020758 <_printf_float+0x2f0>)
 80206ea:	2301      	movs	r3, #1
 80206ec:	4631      	mov	r1, r6
 80206ee:	4628      	mov	r0, r5
 80206f0:	47b8      	blx	r7
 80206f2:	3001      	adds	r0, #1
 80206f4:	f43f af19 	beq.w	802052a <_printf_float+0xc2>
 80206f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80206fc:	4313      	orrs	r3, r2
 80206fe:	d102      	bne.n	8020706 <_printf_float+0x29e>
 8020700:	6823      	ldr	r3, [r4, #0]
 8020702:	07d9      	lsls	r1, r3, #31
 8020704:	d5d8      	bpl.n	80206b8 <_printf_float+0x250>
 8020706:	ee18 3a10 	vmov	r3, s16
 802070a:	4652      	mov	r2, sl
 802070c:	4631      	mov	r1, r6
 802070e:	4628      	mov	r0, r5
 8020710:	47b8      	blx	r7
 8020712:	3001      	adds	r0, #1
 8020714:	f43f af09 	beq.w	802052a <_printf_float+0xc2>
 8020718:	f04f 0900 	mov.w	r9, #0
 802071c:	f104 0a1a 	add.w	sl, r4, #26
 8020720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020722:	425b      	negs	r3, r3
 8020724:	454b      	cmp	r3, r9
 8020726:	dc01      	bgt.n	802072c <_printf_float+0x2c4>
 8020728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802072a:	e792      	b.n	8020652 <_printf_float+0x1ea>
 802072c:	2301      	movs	r3, #1
 802072e:	4652      	mov	r2, sl
 8020730:	4631      	mov	r1, r6
 8020732:	4628      	mov	r0, r5
 8020734:	47b8      	blx	r7
 8020736:	3001      	adds	r0, #1
 8020738:	f43f aef7 	beq.w	802052a <_printf_float+0xc2>
 802073c:	f109 0901 	add.w	r9, r9, #1
 8020740:	e7ee      	b.n	8020720 <_printf_float+0x2b8>
 8020742:	bf00      	nop
 8020744:	7fefffff 	.word	0x7fefffff
 8020748:	0802375c 	.word	0x0802375c
 802074c:	08023760 	.word	0x08023760
 8020750:	08023768 	.word	0x08023768
 8020754:	08023764 	.word	0x08023764
 8020758:	0802376c 	.word	0x0802376c
 802075c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802075e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8020760:	429a      	cmp	r2, r3
 8020762:	bfa8      	it	ge
 8020764:	461a      	movge	r2, r3
 8020766:	2a00      	cmp	r2, #0
 8020768:	4691      	mov	r9, r2
 802076a:	dc37      	bgt.n	80207dc <_printf_float+0x374>
 802076c:	f04f 0b00 	mov.w	fp, #0
 8020770:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8020774:	f104 021a 	add.w	r2, r4, #26
 8020778:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802077a:	9305      	str	r3, [sp, #20]
 802077c:	eba3 0309 	sub.w	r3, r3, r9
 8020780:	455b      	cmp	r3, fp
 8020782:	dc33      	bgt.n	80207ec <_printf_float+0x384>
 8020784:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8020788:	429a      	cmp	r2, r3
 802078a:	db3b      	blt.n	8020804 <_printf_float+0x39c>
 802078c:	6823      	ldr	r3, [r4, #0]
 802078e:	07da      	lsls	r2, r3, #31
 8020790:	d438      	bmi.n	8020804 <_printf_float+0x39c>
 8020792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020794:	9a05      	ldr	r2, [sp, #20]
 8020796:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020798:	1a9a      	subs	r2, r3, r2
 802079a:	eba3 0901 	sub.w	r9, r3, r1
 802079e:	4591      	cmp	r9, r2
 80207a0:	bfa8      	it	ge
 80207a2:	4691      	movge	r9, r2
 80207a4:	f1b9 0f00 	cmp.w	r9, #0
 80207a8:	dc35      	bgt.n	8020816 <_printf_float+0x3ae>
 80207aa:	f04f 0800 	mov.w	r8, #0
 80207ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80207b2:	f104 0a1a 	add.w	sl, r4, #26
 80207b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80207ba:	1a9b      	subs	r3, r3, r2
 80207bc:	eba3 0309 	sub.w	r3, r3, r9
 80207c0:	4543      	cmp	r3, r8
 80207c2:	f77f af79 	ble.w	80206b8 <_printf_float+0x250>
 80207c6:	2301      	movs	r3, #1
 80207c8:	4652      	mov	r2, sl
 80207ca:	4631      	mov	r1, r6
 80207cc:	4628      	mov	r0, r5
 80207ce:	47b8      	blx	r7
 80207d0:	3001      	adds	r0, #1
 80207d2:	f43f aeaa 	beq.w	802052a <_printf_float+0xc2>
 80207d6:	f108 0801 	add.w	r8, r8, #1
 80207da:	e7ec      	b.n	80207b6 <_printf_float+0x34e>
 80207dc:	4613      	mov	r3, r2
 80207de:	4631      	mov	r1, r6
 80207e0:	4642      	mov	r2, r8
 80207e2:	4628      	mov	r0, r5
 80207e4:	47b8      	blx	r7
 80207e6:	3001      	adds	r0, #1
 80207e8:	d1c0      	bne.n	802076c <_printf_float+0x304>
 80207ea:	e69e      	b.n	802052a <_printf_float+0xc2>
 80207ec:	2301      	movs	r3, #1
 80207ee:	4631      	mov	r1, r6
 80207f0:	4628      	mov	r0, r5
 80207f2:	9205      	str	r2, [sp, #20]
 80207f4:	47b8      	blx	r7
 80207f6:	3001      	adds	r0, #1
 80207f8:	f43f ae97 	beq.w	802052a <_printf_float+0xc2>
 80207fc:	9a05      	ldr	r2, [sp, #20]
 80207fe:	f10b 0b01 	add.w	fp, fp, #1
 8020802:	e7b9      	b.n	8020778 <_printf_float+0x310>
 8020804:	ee18 3a10 	vmov	r3, s16
 8020808:	4652      	mov	r2, sl
 802080a:	4631      	mov	r1, r6
 802080c:	4628      	mov	r0, r5
 802080e:	47b8      	blx	r7
 8020810:	3001      	adds	r0, #1
 8020812:	d1be      	bne.n	8020792 <_printf_float+0x32a>
 8020814:	e689      	b.n	802052a <_printf_float+0xc2>
 8020816:	9a05      	ldr	r2, [sp, #20]
 8020818:	464b      	mov	r3, r9
 802081a:	4442      	add	r2, r8
 802081c:	4631      	mov	r1, r6
 802081e:	4628      	mov	r0, r5
 8020820:	47b8      	blx	r7
 8020822:	3001      	adds	r0, #1
 8020824:	d1c1      	bne.n	80207aa <_printf_float+0x342>
 8020826:	e680      	b.n	802052a <_printf_float+0xc2>
 8020828:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802082a:	2a01      	cmp	r2, #1
 802082c:	dc01      	bgt.n	8020832 <_printf_float+0x3ca>
 802082e:	07db      	lsls	r3, r3, #31
 8020830:	d538      	bpl.n	80208a4 <_printf_float+0x43c>
 8020832:	2301      	movs	r3, #1
 8020834:	4642      	mov	r2, r8
 8020836:	4631      	mov	r1, r6
 8020838:	4628      	mov	r0, r5
 802083a:	47b8      	blx	r7
 802083c:	3001      	adds	r0, #1
 802083e:	f43f ae74 	beq.w	802052a <_printf_float+0xc2>
 8020842:	ee18 3a10 	vmov	r3, s16
 8020846:	4652      	mov	r2, sl
 8020848:	4631      	mov	r1, r6
 802084a:	4628      	mov	r0, r5
 802084c:	47b8      	blx	r7
 802084e:	3001      	adds	r0, #1
 8020850:	f43f ae6b 	beq.w	802052a <_printf_float+0xc2>
 8020854:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8020858:	2200      	movs	r2, #0
 802085a:	2300      	movs	r3, #0
 802085c:	f7e0 f95c 	bl	8000b18 <__aeabi_dcmpeq>
 8020860:	b9d8      	cbnz	r0, 802089a <_printf_float+0x432>
 8020862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020864:	f108 0201 	add.w	r2, r8, #1
 8020868:	3b01      	subs	r3, #1
 802086a:	4631      	mov	r1, r6
 802086c:	4628      	mov	r0, r5
 802086e:	47b8      	blx	r7
 8020870:	3001      	adds	r0, #1
 8020872:	d10e      	bne.n	8020892 <_printf_float+0x42a>
 8020874:	e659      	b.n	802052a <_printf_float+0xc2>
 8020876:	2301      	movs	r3, #1
 8020878:	4652      	mov	r2, sl
 802087a:	4631      	mov	r1, r6
 802087c:	4628      	mov	r0, r5
 802087e:	47b8      	blx	r7
 8020880:	3001      	adds	r0, #1
 8020882:	f43f ae52 	beq.w	802052a <_printf_float+0xc2>
 8020886:	f108 0801 	add.w	r8, r8, #1
 802088a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802088c:	3b01      	subs	r3, #1
 802088e:	4543      	cmp	r3, r8
 8020890:	dcf1      	bgt.n	8020876 <_printf_float+0x40e>
 8020892:	464b      	mov	r3, r9
 8020894:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8020898:	e6dc      	b.n	8020654 <_printf_float+0x1ec>
 802089a:	f04f 0800 	mov.w	r8, #0
 802089e:	f104 0a1a 	add.w	sl, r4, #26
 80208a2:	e7f2      	b.n	802088a <_printf_float+0x422>
 80208a4:	2301      	movs	r3, #1
 80208a6:	4642      	mov	r2, r8
 80208a8:	e7df      	b.n	802086a <_printf_float+0x402>
 80208aa:	2301      	movs	r3, #1
 80208ac:	464a      	mov	r2, r9
 80208ae:	4631      	mov	r1, r6
 80208b0:	4628      	mov	r0, r5
 80208b2:	47b8      	blx	r7
 80208b4:	3001      	adds	r0, #1
 80208b6:	f43f ae38 	beq.w	802052a <_printf_float+0xc2>
 80208ba:	f108 0801 	add.w	r8, r8, #1
 80208be:	68e3      	ldr	r3, [r4, #12]
 80208c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80208c2:	1a5b      	subs	r3, r3, r1
 80208c4:	4543      	cmp	r3, r8
 80208c6:	dcf0      	bgt.n	80208aa <_printf_float+0x442>
 80208c8:	e6fa      	b.n	80206c0 <_printf_float+0x258>
 80208ca:	f04f 0800 	mov.w	r8, #0
 80208ce:	f104 0919 	add.w	r9, r4, #25
 80208d2:	e7f4      	b.n	80208be <_printf_float+0x456>

080208d4 <_printf_common>:
 80208d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80208d8:	4616      	mov	r6, r2
 80208da:	4699      	mov	r9, r3
 80208dc:	688a      	ldr	r2, [r1, #8]
 80208de:	690b      	ldr	r3, [r1, #16]
 80208e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80208e4:	4293      	cmp	r3, r2
 80208e6:	bfb8      	it	lt
 80208e8:	4613      	movlt	r3, r2
 80208ea:	6033      	str	r3, [r6, #0]
 80208ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80208f0:	4607      	mov	r7, r0
 80208f2:	460c      	mov	r4, r1
 80208f4:	b10a      	cbz	r2, 80208fa <_printf_common+0x26>
 80208f6:	3301      	adds	r3, #1
 80208f8:	6033      	str	r3, [r6, #0]
 80208fa:	6823      	ldr	r3, [r4, #0]
 80208fc:	0699      	lsls	r1, r3, #26
 80208fe:	bf42      	ittt	mi
 8020900:	6833      	ldrmi	r3, [r6, #0]
 8020902:	3302      	addmi	r3, #2
 8020904:	6033      	strmi	r3, [r6, #0]
 8020906:	6825      	ldr	r5, [r4, #0]
 8020908:	f015 0506 	ands.w	r5, r5, #6
 802090c:	d106      	bne.n	802091c <_printf_common+0x48>
 802090e:	f104 0a19 	add.w	sl, r4, #25
 8020912:	68e3      	ldr	r3, [r4, #12]
 8020914:	6832      	ldr	r2, [r6, #0]
 8020916:	1a9b      	subs	r3, r3, r2
 8020918:	42ab      	cmp	r3, r5
 802091a:	dc26      	bgt.n	802096a <_printf_common+0x96>
 802091c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8020920:	1e13      	subs	r3, r2, #0
 8020922:	6822      	ldr	r2, [r4, #0]
 8020924:	bf18      	it	ne
 8020926:	2301      	movne	r3, #1
 8020928:	0692      	lsls	r2, r2, #26
 802092a:	d42b      	bmi.n	8020984 <_printf_common+0xb0>
 802092c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020930:	4649      	mov	r1, r9
 8020932:	4638      	mov	r0, r7
 8020934:	47c0      	blx	r8
 8020936:	3001      	adds	r0, #1
 8020938:	d01e      	beq.n	8020978 <_printf_common+0xa4>
 802093a:	6823      	ldr	r3, [r4, #0]
 802093c:	68e5      	ldr	r5, [r4, #12]
 802093e:	6832      	ldr	r2, [r6, #0]
 8020940:	f003 0306 	and.w	r3, r3, #6
 8020944:	2b04      	cmp	r3, #4
 8020946:	bf08      	it	eq
 8020948:	1aad      	subeq	r5, r5, r2
 802094a:	68a3      	ldr	r3, [r4, #8]
 802094c:	6922      	ldr	r2, [r4, #16]
 802094e:	bf0c      	ite	eq
 8020950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020954:	2500      	movne	r5, #0
 8020956:	4293      	cmp	r3, r2
 8020958:	bfc4      	itt	gt
 802095a:	1a9b      	subgt	r3, r3, r2
 802095c:	18ed      	addgt	r5, r5, r3
 802095e:	2600      	movs	r6, #0
 8020960:	341a      	adds	r4, #26
 8020962:	42b5      	cmp	r5, r6
 8020964:	d11a      	bne.n	802099c <_printf_common+0xc8>
 8020966:	2000      	movs	r0, #0
 8020968:	e008      	b.n	802097c <_printf_common+0xa8>
 802096a:	2301      	movs	r3, #1
 802096c:	4652      	mov	r2, sl
 802096e:	4649      	mov	r1, r9
 8020970:	4638      	mov	r0, r7
 8020972:	47c0      	blx	r8
 8020974:	3001      	adds	r0, #1
 8020976:	d103      	bne.n	8020980 <_printf_common+0xac>
 8020978:	f04f 30ff 	mov.w	r0, #4294967295
 802097c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020980:	3501      	adds	r5, #1
 8020982:	e7c6      	b.n	8020912 <_printf_common+0x3e>
 8020984:	18e1      	adds	r1, r4, r3
 8020986:	1c5a      	adds	r2, r3, #1
 8020988:	2030      	movs	r0, #48	; 0x30
 802098a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802098e:	4422      	add	r2, r4
 8020990:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020994:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020998:	3302      	adds	r3, #2
 802099a:	e7c7      	b.n	802092c <_printf_common+0x58>
 802099c:	2301      	movs	r3, #1
 802099e:	4622      	mov	r2, r4
 80209a0:	4649      	mov	r1, r9
 80209a2:	4638      	mov	r0, r7
 80209a4:	47c0      	blx	r8
 80209a6:	3001      	adds	r0, #1
 80209a8:	d0e6      	beq.n	8020978 <_printf_common+0xa4>
 80209aa:	3601      	adds	r6, #1
 80209ac:	e7d9      	b.n	8020962 <_printf_common+0x8e>
	...

080209b0 <_printf_i>:
 80209b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80209b4:	7e0f      	ldrb	r7, [r1, #24]
 80209b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80209b8:	2f78      	cmp	r7, #120	; 0x78
 80209ba:	4691      	mov	r9, r2
 80209bc:	4680      	mov	r8, r0
 80209be:	460c      	mov	r4, r1
 80209c0:	469a      	mov	sl, r3
 80209c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80209c6:	d807      	bhi.n	80209d8 <_printf_i+0x28>
 80209c8:	2f62      	cmp	r7, #98	; 0x62
 80209ca:	d80a      	bhi.n	80209e2 <_printf_i+0x32>
 80209cc:	2f00      	cmp	r7, #0
 80209ce:	f000 80d8 	beq.w	8020b82 <_printf_i+0x1d2>
 80209d2:	2f58      	cmp	r7, #88	; 0x58
 80209d4:	f000 80a3 	beq.w	8020b1e <_printf_i+0x16e>
 80209d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80209dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80209e0:	e03a      	b.n	8020a58 <_printf_i+0xa8>
 80209e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80209e6:	2b15      	cmp	r3, #21
 80209e8:	d8f6      	bhi.n	80209d8 <_printf_i+0x28>
 80209ea:	a101      	add	r1, pc, #4	; (adr r1, 80209f0 <_printf_i+0x40>)
 80209ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80209f0:	08020a49 	.word	0x08020a49
 80209f4:	08020a5d 	.word	0x08020a5d
 80209f8:	080209d9 	.word	0x080209d9
 80209fc:	080209d9 	.word	0x080209d9
 8020a00:	080209d9 	.word	0x080209d9
 8020a04:	080209d9 	.word	0x080209d9
 8020a08:	08020a5d 	.word	0x08020a5d
 8020a0c:	080209d9 	.word	0x080209d9
 8020a10:	080209d9 	.word	0x080209d9
 8020a14:	080209d9 	.word	0x080209d9
 8020a18:	080209d9 	.word	0x080209d9
 8020a1c:	08020b69 	.word	0x08020b69
 8020a20:	08020a8d 	.word	0x08020a8d
 8020a24:	08020b4b 	.word	0x08020b4b
 8020a28:	080209d9 	.word	0x080209d9
 8020a2c:	080209d9 	.word	0x080209d9
 8020a30:	08020b8b 	.word	0x08020b8b
 8020a34:	080209d9 	.word	0x080209d9
 8020a38:	08020a8d 	.word	0x08020a8d
 8020a3c:	080209d9 	.word	0x080209d9
 8020a40:	080209d9 	.word	0x080209d9
 8020a44:	08020b53 	.word	0x08020b53
 8020a48:	682b      	ldr	r3, [r5, #0]
 8020a4a:	1d1a      	adds	r2, r3, #4
 8020a4c:	681b      	ldr	r3, [r3, #0]
 8020a4e:	602a      	str	r2, [r5, #0]
 8020a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020a54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020a58:	2301      	movs	r3, #1
 8020a5a:	e0a3      	b.n	8020ba4 <_printf_i+0x1f4>
 8020a5c:	6820      	ldr	r0, [r4, #0]
 8020a5e:	6829      	ldr	r1, [r5, #0]
 8020a60:	0606      	lsls	r6, r0, #24
 8020a62:	f101 0304 	add.w	r3, r1, #4
 8020a66:	d50a      	bpl.n	8020a7e <_printf_i+0xce>
 8020a68:	680e      	ldr	r6, [r1, #0]
 8020a6a:	602b      	str	r3, [r5, #0]
 8020a6c:	2e00      	cmp	r6, #0
 8020a6e:	da03      	bge.n	8020a78 <_printf_i+0xc8>
 8020a70:	232d      	movs	r3, #45	; 0x2d
 8020a72:	4276      	negs	r6, r6
 8020a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020a78:	485e      	ldr	r0, [pc, #376]	; (8020bf4 <_printf_i+0x244>)
 8020a7a:	230a      	movs	r3, #10
 8020a7c:	e019      	b.n	8020ab2 <_printf_i+0x102>
 8020a7e:	680e      	ldr	r6, [r1, #0]
 8020a80:	602b      	str	r3, [r5, #0]
 8020a82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020a86:	bf18      	it	ne
 8020a88:	b236      	sxthne	r6, r6
 8020a8a:	e7ef      	b.n	8020a6c <_printf_i+0xbc>
 8020a8c:	682b      	ldr	r3, [r5, #0]
 8020a8e:	6820      	ldr	r0, [r4, #0]
 8020a90:	1d19      	adds	r1, r3, #4
 8020a92:	6029      	str	r1, [r5, #0]
 8020a94:	0601      	lsls	r1, r0, #24
 8020a96:	d501      	bpl.n	8020a9c <_printf_i+0xec>
 8020a98:	681e      	ldr	r6, [r3, #0]
 8020a9a:	e002      	b.n	8020aa2 <_printf_i+0xf2>
 8020a9c:	0646      	lsls	r6, r0, #25
 8020a9e:	d5fb      	bpl.n	8020a98 <_printf_i+0xe8>
 8020aa0:	881e      	ldrh	r6, [r3, #0]
 8020aa2:	4854      	ldr	r0, [pc, #336]	; (8020bf4 <_printf_i+0x244>)
 8020aa4:	2f6f      	cmp	r7, #111	; 0x6f
 8020aa6:	bf0c      	ite	eq
 8020aa8:	2308      	moveq	r3, #8
 8020aaa:	230a      	movne	r3, #10
 8020aac:	2100      	movs	r1, #0
 8020aae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020ab2:	6865      	ldr	r5, [r4, #4]
 8020ab4:	60a5      	str	r5, [r4, #8]
 8020ab6:	2d00      	cmp	r5, #0
 8020ab8:	bfa2      	ittt	ge
 8020aba:	6821      	ldrge	r1, [r4, #0]
 8020abc:	f021 0104 	bicge.w	r1, r1, #4
 8020ac0:	6021      	strge	r1, [r4, #0]
 8020ac2:	b90e      	cbnz	r6, 8020ac8 <_printf_i+0x118>
 8020ac4:	2d00      	cmp	r5, #0
 8020ac6:	d04d      	beq.n	8020b64 <_printf_i+0x1b4>
 8020ac8:	4615      	mov	r5, r2
 8020aca:	fbb6 f1f3 	udiv	r1, r6, r3
 8020ace:	fb03 6711 	mls	r7, r3, r1, r6
 8020ad2:	5dc7      	ldrb	r7, [r0, r7]
 8020ad4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8020ad8:	4637      	mov	r7, r6
 8020ada:	42bb      	cmp	r3, r7
 8020adc:	460e      	mov	r6, r1
 8020ade:	d9f4      	bls.n	8020aca <_printf_i+0x11a>
 8020ae0:	2b08      	cmp	r3, #8
 8020ae2:	d10b      	bne.n	8020afc <_printf_i+0x14c>
 8020ae4:	6823      	ldr	r3, [r4, #0]
 8020ae6:	07de      	lsls	r6, r3, #31
 8020ae8:	d508      	bpl.n	8020afc <_printf_i+0x14c>
 8020aea:	6923      	ldr	r3, [r4, #16]
 8020aec:	6861      	ldr	r1, [r4, #4]
 8020aee:	4299      	cmp	r1, r3
 8020af0:	bfde      	ittt	le
 8020af2:	2330      	movle	r3, #48	; 0x30
 8020af4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8020af8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8020afc:	1b52      	subs	r2, r2, r5
 8020afe:	6122      	str	r2, [r4, #16]
 8020b00:	f8cd a000 	str.w	sl, [sp]
 8020b04:	464b      	mov	r3, r9
 8020b06:	aa03      	add	r2, sp, #12
 8020b08:	4621      	mov	r1, r4
 8020b0a:	4640      	mov	r0, r8
 8020b0c:	f7ff fee2 	bl	80208d4 <_printf_common>
 8020b10:	3001      	adds	r0, #1
 8020b12:	d14c      	bne.n	8020bae <_printf_i+0x1fe>
 8020b14:	f04f 30ff 	mov.w	r0, #4294967295
 8020b18:	b004      	add	sp, #16
 8020b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b1e:	4835      	ldr	r0, [pc, #212]	; (8020bf4 <_printf_i+0x244>)
 8020b20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8020b24:	6829      	ldr	r1, [r5, #0]
 8020b26:	6823      	ldr	r3, [r4, #0]
 8020b28:	f851 6b04 	ldr.w	r6, [r1], #4
 8020b2c:	6029      	str	r1, [r5, #0]
 8020b2e:	061d      	lsls	r5, r3, #24
 8020b30:	d514      	bpl.n	8020b5c <_printf_i+0x1ac>
 8020b32:	07df      	lsls	r7, r3, #31
 8020b34:	bf44      	itt	mi
 8020b36:	f043 0320 	orrmi.w	r3, r3, #32
 8020b3a:	6023      	strmi	r3, [r4, #0]
 8020b3c:	b91e      	cbnz	r6, 8020b46 <_printf_i+0x196>
 8020b3e:	6823      	ldr	r3, [r4, #0]
 8020b40:	f023 0320 	bic.w	r3, r3, #32
 8020b44:	6023      	str	r3, [r4, #0]
 8020b46:	2310      	movs	r3, #16
 8020b48:	e7b0      	b.n	8020aac <_printf_i+0xfc>
 8020b4a:	6823      	ldr	r3, [r4, #0]
 8020b4c:	f043 0320 	orr.w	r3, r3, #32
 8020b50:	6023      	str	r3, [r4, #0]
 8020b52:	2378      	movs	r3, #120	; 0x78
 8020b54:	4828      	ldr	r0, [pc, #160]	; (8020bf8 <_printf_i+0x248>)
 8020b56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020b5a:	e7e3      	b.n	8020b24 <_printf_i+0x174>
 8020b5c:	0659      	lsls	r1, r3, #25
 8020b5e:	bf48      	it	mi
 8020b60:	b2b6      	uxthmi	r6, r6
 8020b62:	e7e6      	b.n	8020b32 <_printf_i+0x182>
 8020b64:	4615      	mov	r5, r2
 8020b66:	e7bb      	b.n	8020ae0 <_printf_i+0x130>
 8020b68:	682b      	ldr	r3, [r5, #0]
 8020b6a:	6826      	ldr	r6, [r4, #0]
 8020b6c:	6961      	ldr	r1, [r4, #20]
 8020b6e:	1d18      	adds	r0, r3, #4
 8020b70:	6028      	str	r0, [r5, #0]
 8020b72:	0635      	lsls	r5, r6, #24
 8020b74:	681b      	ldr	r3, [r3, #0]
 8020b76:	d501      	bpl.n	8020b7c <_printf_i+0x1cc>
 8020b78:	6019      	str	r1, [r3, #0]
 8020b7a:	e002      	b.n	8020b82 <_printf_i+0x1d2>
 8020b7c:	0670      	lsls	r0, r6, #25
 8020b7e:	d5fb      	bpl.n	8020b78 <_printf_i+0x1c8>
 8020b80:	8019      	strh	r1, [r3, #0]
 8020b82:	2300      	movs	r3, #0
 8020b84:	6123      	str	r3, [r4, #16]
 8020b86:	4615      	mov	r5, r2
 8020b88:	e7ba      	b.n	8020b00 <_printf_i+0x150>
 8020b8a:	682b      	ldr	r3, [r5, #0]
 8020b8c:	1d1a      	adds	r2, r3, #4
 8020b8e:	602a      	str	r2, [r5, #0]
 8020b90:	681d      	ldr	r5, [r3, #0]
 8020b92:	6862      	ldr	r2, [r4, #4]
 8020b94:	2100      	movs	r1, #0
 8020b96:	4628      	mov	r0, r5
 8020b98:	f7df fb4a 	bl	8000230 <memchr>
 8020b9c:	b108      	cbz	r0, 8020ba2 <_printf_i+0x1f2>
 8020b9e:	1b40      	subs	r0, r0, r5
 8020ba0:	6060      	str	r0, [r4, #4]
 8020ba2:	6863      	ldr	r3, [r4, #4]
 8020ba4:	6123      	str	r3, [r4, #16]
 8020ba6:	2300      	movs	r3, #0
 8020ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020bac:	e7a8      	b.n	8020b00 <_printf_i+0x150>
 8020bae:	6923      	ldr	r3, [r4, #16]
 8020bb0:	462a      	mov	r2, r5
 8020bb2:	4649      	mov	r1, r9
 8020bb4:	4640      	mov	r0, r8
 8020bb6:	47d0      	blx	sl
 8020bb8:	3001      	adds	r0, #1
 8020bba:	d0ab      	beq.n	8020b14 <_printf_i+0x164>
 8020bbc:	6823      	ldr	r3, [r4, #0]
 8020bbe:	079b      	lsls	r3, r3, #30
 8020bc0:	d413      	bmi.n	8020bea <_printf_i+0x23a>
 8020bc2:	68e0      	ldr	r0, [r4, #12]
 8020bc4:	9b03      	ldr	r3, [sp, #12]
 8020bc6:	4298      	cmp	r0, r3
 8020bc8:	bfb8      	it	lt
 8020bca:	4618      	movlt	r0, r3
 8020bcc:	e7a4      	b.n	8020b18 <_printf_i+0x168>
 8020bce:	2301      	movs	r3, #1
 8020bd0:	4632      	mov	r2, r6
 8020bd2:	4649      	mov	r1, r9
 8020bd4:	4640      	mov	r0, r8
 8020bd6:	47d0      	blx	sl
 8020bd8:	3001      	adds	r0, #1
 8020bda:	d09b      	beq.n	8020b14 <_printf_i+0x164>
 8020bdc:	3501      	adds	r5, #1
 8020bde:	68e3      	ldr	r3, [r4, #12]
 8020be0:	9903      	ldr	r1, [sp, #12]
 8020be2:	1a5b      	subs	r3, r3, r1
 8020be4:	42ab      	cmp	r3, r5
 8020be6:	dcf2      	bgt.n	8020bce <_printf_i+0x21e>
 8020be8:	e7eb      	b.n	8020bc2 <_printf_i+0x212>
 8020bea:	2500      	movs	r5, #0
 8020bec:	f104 0619 	add.w	r6, r4, #25
 8020bf0:	e7f5      	b.n	8020bde <_printf_i+0x22e>
 8020bf2:	bf00      	nop
 8020bf4:	0802376e 	.word	0x0802376e
 8020bf8:	0802377f 	.word	0x0802377f

08020bfc <iprintf>:
 8020bfc:	b40f      	push	{r0, r1, r2, r3}
 8020bfe:	4b0a      	ldr	r3, [pc, #40]	; (8020c28 <iprintf+0x2c>)
 8020c00:	b513      	push	{r0, r1, r4, lr}
 8020c02:	681c      	ldr	r4, [r3, #0]
 8020c04:	b124      	cbz	r4, 8020c10 <iprintf+0x14>
 8020c06:	69a3      	ldr	r3, [r4, #24]
 8020c08:	b913      	cbnz	r3, 8020c10 <iprintf+0x14>
 8020c0a:	4620      	mov	r0, r4
 8020c0c:	f001 f8f0 	bl	8021df0 <__sinit>
 8020c10:	ab05      	add	r3, sp, #20
 8020c12:	9a04      	ldr	r2, [sp, #16]
 8020c14:	68a1      	ldr	r1, [r4, #8]
 8020c16:	9301      	str	r3, [sp, #4]
 8020c18:	4620      	mov	r0, r4
 8020c1a:	f001 fe9f 	bl	802295c <_vfiprintf_r>
 8020c1e:	b002      	add	sp, #8
 8020c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020c24:	b004      	add	sp, #16
 8020c26:	4770      	bx	lr
 8020c28:	2000002c 	.word	0x2000002c

08020c2c <putchar>:
 8020c2c:	4b09      	ldr	r3, [pc, #36]	; (8020c54 <putchar+0x28>)
 8020c2e:	b513      	push	{r0, r1, r4, lr}
 8020c30:	681c      	ldr	r4, [r3, #0]
 8020c32:	4601      	mov	r1, r0
 8020c34:	b134      	cbz	r4, 8020c44 <putchar+0x18>
 8020c36:	69a3      	ldr	r3, [r4, #24]
 8020c38:	b923      	cbnz	r3, 8020c44 <putchar+0x18>
 8020c3a:	9001      	str	r0, [sp, #4]
 8020c3c:	4620      	mov	r0, r4
 8020c3e:	f001 f8d7 	bl	8021df0 <__sinit>
 8020c42:	9901      	ldr	r1, [sp, #4]
 8020c44:	68a2      	ldr	r2, [r4, #8]
 8020c46:	4620      	mov	r0, r4
 8020c48:	b002      	add	sp, #8
 8020c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020c4e:	f001 bfb5 	b.w	8022bbc <_putc_r>
 8020c52:	bf00      	nop
 8020c54:	2000002c 	.word	0x2000002c

08020c58 <_puts_r>:
 8020c58:	b570      	push	{r4, r5, r6, lr}
 8020c5a:	460e      	mov	r6, r1
 8020c5c:	4605      	mov	r5, r0
 8020c5e:	b118      	cbz	r0, 8020c68 <_puts_r+0x10>
 8020c60:	6983      	ldr	r3, [r0, #24]
 8020c62:	b90b      	cbnz	r3, 8020c68 <_puts_r+0x10>
 8020c64:	f001 f8c4 	bl	8021df0 <__sinit>
 8020c68:	69ab      	ldr	r3, [r5, #24]
 8020c6a:	68ac      	ldr	r4, [r5, #8]
 8020c6c:	b913      	cbnz	r3, 8020c74 <_puts_r+0x1c>
 8020c6e:	4628      	mov	r0, r5
 8020c70:	f001 f8be 	bl	8021df0 <__sinit>
 8020c74:	4b2c      	ldr	r3, [pc, #176]	; (8020d28 <_puts_r+0xd0>)
 8020c76:	429c      	cmp	r4, r3
 8020c78:	d120      	bne.n	8020cbc <_puts_r+0x64>
 8020c7a:	686c      	ldr	r4, [r5, #4]
 8020c7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020c7e:	07db      	lsls	r3, r3, #31
 8020c80:	d405      	bmi.n	8020c8e <_puts_r+0x36>
 8020c82:	89a3      	ldrh	r3, [r4, #12]
 8020c84:	0598      	lsls	r0, r3, #22
 8020c86:	d402      	bmi.n	8020c8e <_puts_r+0x36>
 8020c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020c8a:	f001 f954 	bl	8021f36 <__retarget_lock_acquire_recursive>
 8020c8e:	89a3      	ldrh	r3, [r4, #12]
 8020c90:	0719      	lsls	r1, r3, #28
 8020c92:	d51d      	bpl.n	8020cd0 <_puts_r+0x78>
 8020c94:	6923      	ldr	r3, [r4, #16]
 8020c96:	b1db      	cbz	r3, 8020cd0 <_puts_r+0x78>
 8020c98:	3e01      	subs	r6, #1
 8020c9a:	68a3      	ldr	r3, [r4, #8]
 8020c9c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020ca0:	3b01      	subs	r3, #1
 8020ca2:	60a3      	str	r3, [r4, #8]
 8020ca4:	bb39      	cbnz	r1, 8020cf6 <_puts_r+0x9e>
 8020ca6:	2b00      	cmp	r3, #0
 8020ca8:	da38      	bge.n	8020d1c <_puts_r+0xc4>
 8020caa:	4622      	mov	r2, r4
 8020cac:	210a      	movs	r1, #10
 8020cae:	4628      	mov	r0, r5
 8020cb0:	f000 f848 	bl	8020d44 <__swbuf_r>
 8020cb4:	3001      	adds	r0, #1
 8020cb6:	d011      	beq.n	8020cdc <_puts_r+0x84>
 8020cb8:	250a      	movs	r5, #10
 8020cba:	e011      	b.n	8020ce0 <_puts_r+0x88>
 8020cbc:	4b1b      	ldr	r3, [pc, #108]	; (8020d2c <_puts_r+0xd4>)
 8020cbe:	429c      	cmp	r4, r3
 8020cc0:	d101      	bne.n	8020cc6 <_puts_r+0x6e>
 8020cc2:	68ac      	ldr	r4, [r5, #8]
 8020cc4:	e7da      	b.n	8020c7c <_puts_r+0x24>
 8020cc6:	4b1a      	ldr	r3, [pc, #104]	; (8020d30 <_puts_r+0xd8>)
 8020cc8:	429c      	cmp	r4, r3
 8020cca:	bf08      	it	eq
 8020ccc:	68ec      	ldreq	r4, [r5, #12]
 8020cce:	e7d5      	b.n	8020c7c <_puts_r+0x24>
 8020cd0:	4621      	mov	r1, r4
 8020cd2:	4628      	mov	r0, r5
 8020cd4:	f000 f888 	bl	8020de8 <__swsetup_r>
 8020cd8:	2800      	cmp	r0, #0
 8020cda:	d0dd      	beq.n	8020c98 <_puts_r+0x40>
 8020cdc:	f04f 35ff 	mov.w	r5, #4294967295
 8020ce0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020ce2:	07da      	lsls	r2, r3, #31
 8020ce4:	d405      	bmi.n	8020cf2 <_puts_r+0x9a>
 8020ce6:	89a3      	ldrh	r3, [r4, #12]
 8020ce8:	059b      	lsls	r3, r3, #22
 8020cea:	d402      	bmi.n	8020cf2 <_puts_r+0x9a>
 8020cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020cee:	f001 f923 	bl	8021f38 <__retarget_lock_release_recursive>
 8020cf2:	4628      	mov	r0, r5
 8020cf4:	bd70      	pop	{r4, r5, r6, pc}
 8020cf6:	2b00      	cmp	r3, #0
 8020cf8:	da04      	bge.n	8020d04 <_puts_r+0xac>
 8020cfa:	69a2      	ldr	r2, [r4, #24]
 8020cfc:	429a      	cmp	r2, r3
 8020cfe:	dc06      	bgt.n	8020d0e <_puts_r+0xb6>
 8020d00:	290a      	cmp	r1, #10
 8020d02:	d004      	beq.n	8020d0e <_puts_r+0xb6>
 8020d04:	6823      	ldr	r3, [r4, #0]
 8020d06:	1c5a      	adds	r2, r3, #1
 8020d08:	6022      	str	r2, [r4, #0]
 8020d0a:	7019      	strb	r1, [r3, #0]
 8020d0c:	e7c5      	b.n	8020c9a <_puts_r+0x42>
 8020d0e:	4622      	mov	r2, r4
 8020d10:	4628      	mov	r0, r5
 8020d12:	f000 f817 	bl	8020d44 <__swbuf_r>
 8020d16:	3001      	adds	r0, #1
 8020d18:	d1bf      	bne.n	8020c9a <_puts_r+0x42>
 8020d1a:	e7df      	b.n	8020cdc <_puts_r+0x84>
 8020d1c:	6823      	ldr	r3, [r4, #0]
 8020d1e:	250a      	movs	r5, #10
 8020d20:	1c5a      	adds	r2, r3, #1
 8020d22:	6022      	str	r2, [r4, #0]
 8020d24:	701d      	strb	r5, [r3, #0]
 8020d26:	e7db      	b.n	8020ce0 <_puts_r+0x88>
 8020d28:	08023840 	.word	0x08023840
 8020d2c:	08023860 	.word	0x08023860
 8020d30:	08023820 	.word	0x08023820

08020d34 <puts>:
 8020d34:	4b02      	ldr	r3, [pc, #8]	; (8020d40 <puts+0xc>)
 8020d36:	4601      	mov	r1, r0
 8020d38:	6818      	ldr	r0, [r3, #0]
 8020d3a:	f7ff bf8d 	b.w	8020c58 <_puts_r>
 8020d3e:	bf00      	nop
 8020d40:	2000002c 	.word	0x2000002c

08020d44 <__swbuf_r>:
 8020d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020d46:	460e      	mov	r6, r1
 8020d48:	4614      	mov	r4, r2
 8020d4a:	4605      	mov	r5, r0
 8020d4c:	b118      	cbz	r0, 8020d56 <__swbuf_r+0x12>
 8020d4e:	6983      	ldr	r3, [r0, #24]
 8020d50:	b90b      	cbnz	r3, 8020d56 <__swbuf_r+0x12>
 8020d52:	f001 f84d 	bl	8021df0 <__sinit>
 8020d56:	4b21      	ldr	r3, [pc, #132]	; (8020ddc <__swbuf_r+0x98>)
 8020d58:	429c      	cmp	r4, r3
 8020d5a:	d12b      	bne.n	8020db4 <__swbuf_r+0x70>
 8020d5c:	686c      	ldr	r4, [r5, #4]
 8020d5e:	69a3      	ldr	r3, [r4, #24]
 8020d60:	60a3      	str	r3, [r4, #8]
 8020d62:	89a3      	ldrh	r3, [r4, #12]
 8020d64:	071a      	lsls	r2, r3, #28
 8020d66:	d52f      	bpl.n	8020dc8 <__swbuf_r+0x84>
 8020d68:	6923      	ldr	r3, [r4, #16]
 8020d6a:	b36b      	cbz	r3, 8020dc8 <__swbuf_r+0x84>
 8020d6c:	6923      	ldr	r3, [r4, #16]
 8020d6e:	6820      	ldr	r0, [r4, #0]
 8020d70:	1ac0      	subs	r0, r0, r3
 8020d72:	6963      	ldr	r3, [r4, #20]
 8020d74:	b2f6      	uxtb	r6, r6
 8020d76:	4283      	cmp	r3, r0
 8020d78:	4637      	mov	r7, r6
 8020d7a:	dc04      	bgt.n	8020d86 <__swbuf_r+0x42>
 8020d7c:	4621      	mov	r1, r4
 8020d7e:	4628      	mov	r0, r5
 8020d80:	f000 ffa2 	bl	8021cc8 <_fflush_r>
 8020d84:	bb30      	cbnz	r0, 8020dd4 <__swbuf_r+0x90>
 8020d86:	68a3      	ldr	r3, [r4, #8]
 8020d88:	3b01      	subs	r3, #1
 8020d8a:	60a3      	str	r3, [r4, #8]
 8020d8c:	6823      	ldr	r3, [r4, #0]
 8020d8e:	1c5a      	adds	r2, r3, #1
 8020d90:	6022      	str	r2, [r4, #0]
 8020d92:	701e      	strb	r6, [r3, #0]
 8020d94:	6963      	ldr	r3, [r4, #20]
 8020d96:	3001      	adds	r0, #1
 8020d98:	4283      	cmp	r3, r0
 8020d9a:	d004      	beq.n	8020da6 <__swbuf_r+0x62>
 8020d9c:	89a3      	ldrh	r3, [r4, #12]
 8020d9e:	07db      	lsls	r3, r3, #31
 8020da0:	d506      	bpl.n	8020db0 <__swbuf_r+0x6c>
 8020da2:	2e0a      	cmp	r6, #10
 8020da4:	d104      	bne.n	8020db0 <__swbuf_r+0x6c>
 8020da6:	4621      	mov	r1, r4
 8020da8:	4628      	mov	r0, r5
 8020daa:	f000 ff8d 	bl	8021cc8 <_fflush_r>
 8020dae:	b988      	cbnz	r0, 8020dd4 <__swbuf_r+0x90>
 8020db0:	4638      	mov	r0, r7
 8020db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020db4:	4b0a      	ldr	r3, [pc, #40]	; (8020de0 <__swbuf_r+0x9c>)
 8020db6:	429c      	cmp	r4, r3
 8020db8:	d101      	bne.n	8020dbe <__swbuf_r+0x7a>
 8020dba:	68ac      	ldr	r4, [r5, #8]
 8020dbc:	e7cf      	b.n	8020d5e <__swbuf_r+0x1a>
 8020dbe:	4b09      	ldr	r3, [pc, #36]	; (8020de4 <__swbuf_r+0xa0>)
 8020dc0:	429c      	cmp	r4, r3
 8020dc2:	bf08      	it	eq
 8020dc4:	68ec      	ldreq	r4, [r5, #12]
 8020dc6:	e7ca      	b.n	8020d5e <__swbuf_r+0x1a>
 8020dc8:	4621      	mov	r1, r4
 8020dca:	4628      	mov	r0, r5
 8020dcc:	f000 f80c 	bl	8020de8 <__swsetup_r>
 8020dd0:	2800      	cmp	r0, #0
 8020dd2:	d0cb      	beq.n	8020d6c <__swbuf_r+0x28>
 8020dd4:	f04f 37ff 	mov.w	r7, #4294967295
 8020dd8:	e7ea      	b.n	8020db0 <__swbuf_r+0x6c>
 8020dda:	bf00      	nop
 8020ddc:	08023840 	.word	0x08023840
 8020de0:	08023860 	.word	0x08023860
 8020de4:	08023820 	.word	0x08023820

08020de8 <__swsetup_r>:
 8020de8:	4b32      	ldr	r3, [pc, #200]	; (8020eb4 <__swsetup_r+0xcc>)
 8020dea:	b570      	push	{r4, r5, r6, lr}
 8020dec:	681d      	ldr	r5, [r3, #0]
 8020dee:	4606      	mov	r6, r0
 8020df0:	460c      	mov	r4, r1
 8020df2:	b125      	cbz	r5, 8020dfe <__swsetup_r+0x16>
 8020df4:	69ab      	ldr	r3, [r5, #24]
 8020df6:	b913      	cbnz	r3, 8020dfe <__swsetup_r+0x16>
 8020df8:	4628      	mov	r0, r5
 8020dfa:	f000 fff9 	bl	8021df0 <__sinit>
 8020dfe:	4b2e      	ldr	r3, [pc, #184]	; (8020eb8 <__swsetup_r+0xd0>)
 8020e00:	429c      	cmp	r4, r3
 8020e02:	d10f      	bne.n	8020e24 <__swsetup_r+0x3c>
 8020e04:	686c      	ldr	r4, [r5, #4]
 8020e06:	89a3      	ldrh	r3, [r4, #12]
 8020e08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020e0c:	0719      	lsls	r1, r3, #28
 8020e0e:	d42c      	bmi.n	8020e6a <__swsetup_r+0x82>
 8020e10:	06dd      	lsls	r5, r3, #27
 8020e12:	d411      	bmi.n	8020e38 <__swsetup_r+0x50>
 8020e14:	2309      	movs	r3, #9
 8020e16:	6033      	str	r3, [r6, #0]
 8020e18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020e1c:	81a3      	strh	r3, [r4, #12]
 8020e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8020e22:	e03e      	b.n	8020ea2 <__swsetup_r+0xba>
 8020e24:	4b25      	ldr	r3, [pc, #148]	; (8020ebc <__swsetup_r+0xd4>)
 8020e26:	429c      	cmp	r4, r3
 8020e28:	d101      	bne.n	8020e2e <__swsetup_r+0x46>
 8020e2a:	68ac      	ldr	r4, [r5, #8]
 8020e2c:	e7eb      	b.n	8020e06 <__swsetup_r+0x1e>
 8020e2e:	4b24      	ldr	r3, [pc, #144]	; (8020ec0 <__swsetup_r+0xd8>)
 8020e30:	429c      	cmp	r4, r3
 8020e32:	bf08      	it	eq
 8020e34:	68ec      	ldreq	r4, [r5, #12]
 8020e36:	e7e6      	b.n	8020e06 <__swsetup_r+0x1e>
 8020e38:	0758      	lsls	r0, r3, #29
 8020e3a:	d512      	bpl.n	8020e62 <__swsetup_r+0x7a>
 8020e3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020e3e:	b141      	cbz	r1, 8020e52 <__swsetup_r+0x6a>
 8020e40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020e44:	4299      	cmp	r1, r3
 8020e46:	d002      	beq.n	8020e4e <__swsetup_r+0x66>
 8020e48:	4630      	mov	r0, r6
 8020e4a:	f001 fc7d 	bl	8022748 <_free_r>
 8020e4e:	2300      	movs	r3, #0
 8020e50:	6363      	str	r3, [r4, #52]	; 0x34
 8020e52:	89a3      	ldrh	r3, [r4, #12]
 8020e54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020e58:	81a3      	strh	r3, [r4, #12]
 8020e5a:	2300      	movs	r3, #0
 8020e5c:	6063      	str	r3, [r4, #4]
 8020e5e:	6923      	ldr	r3, [r4, #16]
 8020e60:	6023      	str	r3, [r4, #0]
 8020e62:	89a3      	ldrh	r3, [r4, #12]
 8020e64:	f043 0308 	orr.w	r3, r3, #8
 8020e68:	81a3      	strh	r3, [r4, #12]
 8020e6a:	6923      	ldr	r3, [r4, #16]
 8020e6c:	b94b      	cbnz	r3, 8020e82 <__swsetup_r+0x9a>
 8020e6e:	89a3      	ldrh	r3, [r4, #12]
 8020e70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020e78:	d003      	beq.n	8020e82 <__swsetup_r+0x9a>
 8020e7a:	4621      	mov	r1, r4
 8020e7c:	4630      	mov	r0, r6
 8020e7e:	f001 f881 	bl	8021f84 <__smakebuf_r>
 8020e82:	89a0      	ldrh	r0, [r4, #12]
 8020e84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020e88:	f010 0301 	ands.w	r3, r0, #1
 8020e8c:	d00a      	beq.n	8020ea4 <__swsetup_r+0xbc>
 8020e8e:	2300      	movs	r3, #0
 8020e90:	60a3      	str	r3, [r4, #8]
 8020e92:	6963      	ldr	r3, [r4, #20]
 8020e94:	425b      	negs	r3, r3
 8020e96:	61a3      	str	r3, [r4, #24]
 8020e98:	6923      	ldr	r3, [r4, #16]
 8020e9a:	b943      	cbnz	r3, 8020eae <__swsetup_r+0xc6>
 8020e9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020ea0:	d1ba      	bne.n	8020e18 <__swsetup_r+0x30>
 8020ea2:	bd70      	pop	{r4, r5, r6, pc}
 8020ea4:	0781      	lsls	r1, r0, #30
 8020ea6:	bf58      	it	pl
 8020ea8:	6963      	ldrpl	r3, [r4, #20]
 8020eaa:	60a3      	str	r3, [r4, #8]
 8020eac:	e7f4      	b.n	8020e98 <__swsetup_r+0xb0>
 8020eae:	2000      	movs	r0, #0
 8020eb0:	e7f7      	b.n	8020ea2 <__swsetup_r+0xba>
 8020eb2:	bf00      	nop
 8020eb4:	2000002c 	.word	0x2000002c
 8020eb8:	08023840 	.word	0x08023840
 8020ebc:	08023860 	.word	0x08023860
 8020ec0:	08023820 	.word	0x08023820

08020ec4 <quorem>:
 8020ec4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ec8:	6903      	ldr	r3, [r0, #16]
 8020eca:	690c      	ldr	r4, [r1, #16]
 8020ecc:	42a3      	cmp	r3, r4
 8020ece:	4607      	mov	r7, r0
 8020ed0:	f2c0 8081 	blt.w	8020fd6 <quorem+0x112>
 8020ed4:	3c01      	subs	r4, #1
 8020ed6:	f101 0814 	add.w	r8, r1, #20
 8020eda:	f100 0514 	add.w	r5, r0, #20
 8020ede:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020ee2:	9301      	str	r3, [sp, #4]
 8020ee4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8020ee8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020eec:	3301      	adds	r3, #1
 8020eee:	429a      	cmp	r2, r3
 8020ef0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8020ef4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8020ef8:	fbb2 f6f3 	udiv	r6, r2, r3
 8020efc:	d331      	bcc.n	8020f62 <quorem+0x9e>
 8020efe:	f04f 0e00 	mov.w	lr, #0
 8020f02:	4640      	mov	r0, r8
 8020f04:	46ac      	mov	ip, r5
 8020f06:	46f2      	mov	sl, lr
 8020f08:	f850 2b04 	ldr.w	r2, [r0], #4
 8020f0c:	b293      	uxth	r3, r2
 8020f0e:	fb06 e303 	mla	r3, r6, r3, lr
 8020f12:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8020f16:	b29b      	uxth	r3, r3
 8020f18:	ebaa 0303 	sub.w	r3, sl, r3
 8020f1c:	f8dc a000 	ldr.w	sl, [ip]
 8020f20:	0c12      	lsrs	r2, r2, #16
 8020f22:	fa13 f38a 	uxtah	r3, r3, sl
 8020f26:	fb06 e202 	mla	r2, r6, r2, lr
 8020f2a:	9300      	str	r3, [sp, #0]
 8020f2c:	9b00      	ldr	r3, [sp, #0]
 8020f2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020f32:	b292      	uxth	r2, r2
 8020f34:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8020f38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020f3c:	f8bd 3000 	ldrh.w	r3, [sp]
 8020f40:	4581      	cmp	r9, r0
 8020f42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020f46:	f84c 3b04 	str.w	r3, [ip], #4
 8020f4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8020f4e:	d2db      	bcs.n	8020f08 <quorem+0x44>
 8020f50:	f855 300b 	ldr.w	r3, [r5, fp]
 8020f54:	b92b      	cbnz	r3, 8020f62 <quorem+0x9e>
 8020f56:	9b01      	ldr	r3, [sp, #4]
 8020f58:	3b04      	subs	r3, #4
 8020f5a:	429d      	cmp	r5, r3
 8020f5c:	461a      	mov	r2, r3
 8020f5e:	d32e      	bcc.n	8020fbe <quorem+0xfa>
 8020f60:	613c      	str	r4, [r7, #16]
 8020f62:	4638      	mov	r0, r7
 8020f64:	f001 fad8 	bl	8022518 <__mcmp>
 8020f68:	2800      	cmp	r0, #0
 8020f6a:	db24      	blt.n	8020fb6 <quorem+0xf2>
 8020f6c:	3601      	adds	r6, #1
 8020f6e:	4628      	mov	r0, r5
 8020f70:	f04f 0c00 	mov.w	ip, #0
 8020f74:	f858 2b04 	ldr.w	r2, [r8], #4
 8020f78:	f8d0 e000 	ldr.w	lr, [r0]
 8020f7c:	b293      	uxth	r3, r2
 8020f7e:	ebac 0303 	sub.w	r3, ip, r3
 8020f82:	0c12      	lsrs	r2, r2, #16
 8020f84:	fa13 f38e 	uxtah	r3, r3, lr
 8020f88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8020f8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020f90:	b29b      	uxth	r3, r3
 8020f92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020f96:	45c1      	cmp	r9, r8
 8020f98:	f840 3b04 	str.w	r3, [r0], #4
 8020f9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8020fa0:	d2e8      	bcs.n	8020f74 <quorem+0xb0>
 8020fa2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020fa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020faa:	b922      	cbnz	r2, 8020fb6 <quorem+0xf2>
 8020fac:	3b04      	subs	r3, #4
 8020fae:	429d      	cmp	r5, r3
 8020fb0:	461a      	mov	r2, r3
 8020fb2:	d30a      	bcc.n	8020fca <quorem+0x106>
 8020fb4:	613c      	str	r4, [r7, #16]
 8020fb6:	4630      	mov	r0, r6
 8020fb8:	b003      	add	sp, #12
 8020fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fbe:	6812      	ldr	r2, [r2, #0]
 8020fc0:	3b04      	subs	r3, #4
 8020fc2:	2a00      	cmp	r2, #0
 8020fc4:	d1cc      	bne.n	8020f60 <quorem+0x9c>
 8020fc6:	3c01      	subs	r4, #1
 8020fc8:	e7c7      	b.n	8020f5a <quorem+0x96>
 8020fca:	6812      	ldr	r2, [r2, #0]
 8020fcc:	3b04      	subs	r3, #4
 8020fce:	2a00      	cmp	r2, #0
 8020fd0:	d1f0      	bne.n	8020fb4 <quorem+0xf0>
 8020fd2:	3c01      	subs	r4, #1
 8020fd4:	e7eb      	b.n	8020fae <quorem+0xea>
 8020fd6:	2000      	movs	r0, #0
 8020fd8:	e7ee      	b.n	8020fb8 <quorem+0xf4>
 8020fda:	0000      	movs	r0, r0
 8020fdc:	0000      	movs	r0, r0
	...

08020fe0 <_dtoa_r>:
 8020fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fe4:	ed2d 8b04 	vpush	{d8-d9}
 8020fe8:	ec57 6b10 	vmov	r6, r7, d0
 8020fec:	b093      	sub	sp, #76	; 0x4c
 8020fee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8020ff0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8020ff4:	9106      	str	r1, [sp, #24]
 8020ff6:	ee10 aa10 	vmov	sl, s0
 8020ffa:	4604      	mov	r4, r0
 8020ffc:	9209      	str	r2, [sp, #36]	; 0x24
 8020ffe:	930c      	str	r3, [sp, #48]	; 0x30
 8021000:	46bb      	mov	fp, r7
 8021002:	b975      	cbnz	r5, 8021022 <_dtoa_r+0x42>
 8021004:	2010      	movs	r0, #16
 8021006:	f000 fffd 	bl	8022004 <malloc>
 802100a:	4602      	mov	r2, r0
 802100c:	6260      	str	r0, [r4, #36]	; 0x24
 802100e:	b920      	cbnz	r0, 802101a <_dtoa_r+0x3a>
 8021010:	4ba7      	ldr	r3, [pc, #668]	; (80212b0 <_dtoa_r+0x2d0>)
 8021012:	21ea      	movs	r1, #234	; 0xea
 8021014:	48a7      	ldr	r0, [pc, #668]	; (80212b4 <_dtoa_r+0x2d4>)
 8021016:	f001 fe7f 	bl	8022d18 <__assert_func>
 802101a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802101e:	6005      	str	r5, [r0, #0]
 8021020:	60c5      	str	r5, [r0, #12]
 8021022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021024:	6819      	ldr	r1, [r3, #0]
 8021026:	b151      	cbz	r1, 802103e <_dtoa_r+0x5e>
 8021028:	685a      	ldr	r2, [r3, #4]
 802102a:	604a      	str	r2, [r1, #4]
 802102c:	2301      	movs	r3, #1
 802102e:	4093      	lsls	r3, r2
 8021030:	608b      	str	r3, [r1, #8]
 8021032:	4620      	mov	r0, r4
 8021034:	f001 f82e 	bl	8022094 <_Bfree>
 8021038:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802103a:	2200      	movs	r2, #0
 802103c:	601a      	str	r2, [r3, #0]
 802103e:	1e3b      	subs	r3, r7, #0
 8021040:	bfaa      	itet	ge
 8021042:	2300      	movge	r3, #0
 8021044:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8021048:	f8c8 3000 	strge.w	r3, [r8]
 802104c:	4b9a      	ldr	r3, [pc, #616]	; (80212b8 <_dtoa_r+0x2d8>)
 802104e:	bfbc      	itt	lt
 8021050:	2201      	movlt	r2, #1
 8021052:	f8c8 2000 	strlt.w	r2, [r8]
 8021056:	ea33 030b 	bics.w	r3, r3, fp
 802105a:	d11b      	bne.n	8021094 <_dtoa_r+0xb4>
 802105c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802105e:	f242 730f 	movw	r3, #9999	; 0x270f
 8021062:	6013      	str	r3, [r2, #0]
 8021064:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8021068:	4333      	orrs	r3, r6
 802106a:	f000 8592 	beq.w	8021b92 <_dtoa_r+0xbb2>
 802106e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021070:	b963      	cbnz	r3, 802108c <_dtoa_r+0xac>
 8021072:	4b92      	ldr	r3, [pc, #584]	; (80212bc <_dtoa_r+0x2dc>)
 8021074:	e022      	b.n	80210bc <_dtoa_r+0xdc>
 8021076:	4b92      	ldr	r3, [pc, #584]	; (80212c0 <_dtoa_r+0x2e0>)
 8021078:	9301      	str	r3, [sp, #4]
 802107a:	3308      	adds	r3, #8
 802107c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802107e:	6013      	str	r3, [r2, #0]
 8021080:	9801      	ldr	r0, [sp, #4]
 8021082:	b013      	add	sp, #76	; 0x4c
 8021084:	ecbd 8b04 	vpop	{d8-d9}
 8021088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802108c:	4b8b      	ldr	r3, [pc, #556]	; (80212bc <_dtoa_r+0x2dc>)
 802108e:	9301      	str	r3, [sp, #4]
 8021090:	3303      	adds	r3, #3
 8021092:	e7f3      	b.n	802107c <_dtoa_r+0x9c>
 8021094:	2200      	movs	r2, #0
 8021096:	2300      	movs	r3, #0
 8021098:	4650      	mov	r0, sl
 802109a:	4659      	mov	r1, fp
 802109c:	f7df fd3c 	bl	8000b18 <__aeabi_dcmpeq>
 80210a0:	ec4b ab19 	vmov	d9, sl, fp
 80210a4:	4680      	mov	r8, r0
 80210a6:	b158      	cbz	r0, 80210c0 <_dtoa_r+0xe0>
 80210a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80210aa:	2301      	movs	r3, #1
 80210ac:	6013      	str	r3, [r2, #0]
 80210ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80210b0:	2b00      	cmp	r3, #0
 80210b2:	f000 856b 	beq.w	8021b8c <_dtoa_r+0xbac>
 80210b6:	4883      	ldr	r0, [pc, #524]	; (80212c4 <_dtoa_r+0x2e4>)
 80210b8:	6018      	str	r0, [r3, #0]
 80210ba:	1e43      	subs	r3, r0, #1
 80210bc:	9301      	str	r3, [sp, #4]
 80210be:	e7df      	b.n	8021080 <_dtoa_r+0xa0>
 80210c0:	ec4b ab10 	vmov	d0, sl, fp
 80210c4:	aa10      	add	r2, sp, #64	; 0x40
 80210c6:	a911      	add	r1, sp, #68	; 0x44
 80210c8:	4620      	mov	r0, r4
 80210ca:	f001 facb 	bl	8022664 <__d2b>
 80210ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80210d2:	ee08 0a10 	vmov	s16, r0
 80210d6:	2d00      	cmp	r5, #0
 80210d8:	f000 8084 	beq.w	80211e4 <_dtoa_r+0x204>
 80210dc:	ee19 3a90 	vmov	r3, s19
 80210e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80210e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80210e8:	4656      	mov	r6, sl
 80210ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80210ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80210f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80210f6:	4b74      	ldr	r3, [pc, #464]	; (80212c8 <_dtoa_r+0x2e8>)
 80210f8:	2200      	movs	r2, #0
 80210fa:	4630      	mov	r0, r6
 80210fc:	4639      	mov	r1, r7
 80210fe:	f7df f8eb 	bl	80002d8 <__aeabi_dsub>
 8021102:	a365      	add	r3, pc, #404	; (adr r3, 8021298 <_dtoa_r+0x2b8>)
 8021104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021108:	f7df fa9e 	bl	8000648 <__aeabi_dmul>
 802110c:	a364      	add	r3, pc, #400	; (adr r3, 80212a0 <_dtoa_r+0x2c0>)
 802110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021112:	f7df f8e3 	bl	80002dc <__adddf3>
 8021116:	4606      	mov	r6, r0
 8021118:	4628      	mov	r0, r5
 802111a:	460f      	mov	r7, r1
 802111c:	f7df fa2a 	bl	8000574 <__aeabi_i2d>
 8021120:	a361      	add	r3, pc, #388	; (adr r3, 80212a8 <_dtoa_r+0x2c8>)
 8021122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021126:	f7df fa8f 	bl	8000648 <__aeabi_dmul>
 802112a:	4602      	mov	r2, r0
 802112c:	460b      	mov	r3, r1
 802112e:	4630      	mov	r0, r6
 8021130:	4639      	mov	r1, r7
 8021132:	f7df f8d3 	bl	80002dc <__adddf3>
 8021136:	4606      	mov	r6, r0
 8021138:	460f      	mov	r7, r1
 802113a:	f7df fd35 	bl	8000ba8 <__aeabi_d2iz>
 802113e:	2200      	movs	r2, #0
 8021140:	9000      	str	r0, [sp, #0]
 8021142:	2300      	movs	r3, #0
 8021144:	4630      	mov	r0, r6
 8021146:	4639      	mov	r1, r7
 8021148:	f7df fcf0 	bl	8000b2c <__aeabi_dcmplt>
 802114c:	b150      	cbz	r0, 8021164 <_dtoa_r+0x184>
 802114e:	9800      	ldr	r0, [sp, #0]
 8021150:	f7df fa10 	bl	8000574 <__aeabi_i2d>
 8021154:	4632      	mov	r2, r6
 8021156:	463b      	mov	r3, r7
 8021158:	f7df fcde 	bl	8000b18 <__aeabi_dcmpeq>
 802115c:	b910      	cbnz	r0, 8021164 <_dtoa_r+0x184>
 802115e:	9b00      	ldr	r3, [sp, #0]
 8021160:	3b01      	subs	r3, #1
 8021162:	9300      	str	r3, [sp, #0]
 8021164:	9b00      	ldr	r3, [sp, #0]
 8021166:	2b16      	cmp	r3, #22
 8021168:	d85a      	bhi.n	8021220 <_dtoa_r+0x240>
 802116a:	9a00      	ldr	r2, [sp, #0]
 802116c:	4b57      	ldr	r3, [pc, #348]	; (80212cc <_dtoa_r+0x2ec>)
 802116e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021176:	ec51 0b19 	vmov	r0, r1, d9
 802117a:	f7df fcd7 	bl	8000b2c <__aeabi_dcmplt>
 802117e:	2800      	cmp	r0, #0
 8021180:	d050      	beq.n	8021224 <_dtoa_r+0x244>
 8021182:	9b00      	ldr	r3, [sp, #0]
 8021184:	3b01      	subs	r3, #1
 8021186:	9300      	str	r3, [sp, #0]
 8021188:	2300      	movs	r3, #0
 802118a:	930b      	str	r3, [sp, #44]	; 0x2c
 802118c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802118e:	1b5d      	subs	r5, r3, r5
 8021190:	1e6b      	subs	r3, r5, #1
 8021192:	9305      	str	r3, [sp, #20]
 8021194:	bf45      	ittet	mi
 8021196:	f1c5 0301 	rsbmi	r3, r5, #1
 802119a:	9304      	strmi	r3, [sp, #16]
 802119c:	2300      	movpl	r3, #0
 802119e:	2300      	movmi	r3, #0
 80211a0:	bf4c      	ite	mi
 80211a2:	9305      	strmi	r3, [sp, #20]
 80211a4:	9304      	strpl	r3, [sp, #16]
 80211a6:	9b00      	ldr	r3, [sp, #0]
 80211a8:	2b00      	cmp	r3, #0
 80211aa:	db3d      	blt.n	8021228 <_dtoa_r+0x248>
 80211ac:	9b05      	ldr	r3, [sp, #20]
 80211ae:	9a00      	ldr	r2, [sp, #0]
 80211b0:	920a      	str	r2, [sp, #40]	; 0x28
 80211b2:	4413      	add	r3, r2
 80211b4:	9305      	str	r3, [sp, #20]
 80211b6:	2300      	movs	r3, #0
 80211b8:	9307      	str	r3, [sp, #28]
 80211ba:	9b06      	ldr	r3, [sp, #24]
 80211bc:	2b09      	cmp	r3, #9
 80211be:	f200 8089 	bhi.w	80212d4 <_dtoa_r+0x2f4>
 80211c2:	2b05      	cmp	r3, #5
 80211c4:	bfc4      	itt	gt
 80211c6:	3b04      	subgt	r3, #4
 80211c8:	9306      	strgt	r3, [sp, #24]
 80211ca:	9b06      	ldr	r3, [sp, #24]
 80211cc:	f1a3 0302 	sub.w	r3, r3, #2
 80211d0:	bfcc      	ite	gt
 80211d2:	2500      	movgt	r5, #0
 80211d4:	2501      	movle	r5, #1
 80211d6:	2b03      	cmp	r3, #3
 80211d8:	f200 8087 	bhi.w	80212ea <_dtoa_r+0x30a>
 80211dc:	e8df f003 	tbb	[pc, r3]
 80211e0:	59383a2d 	.word	0x59383a2d
 80211e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80211e8:	441d      	add	r5, r3
 80211ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80211ee:	2b20      	cmp	r3, #32
 80211f0:	bfc1      	itttt	gt
 80211f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80211f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80211fa:	fa0b f303 	lslgt.w	r3, fp, r3
 80211fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8021202:	bfda      	itte	le
 8021204:	f1c3 0320 	rsble	r3, r3, #32
 8021208:	fa06 f003 	lslle.w	r0, r6, r3
 802120c:	4318      	orrgt	r0, r3
 802120e:	f7df f9a1 	bl	8000554 <__aeabi_ui2d>
 8021212:	2301      	movs	r3, #1
 8021214:	4606      	mov	r6, r0
 8021216:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 802121a:	3d01      	subs	r5, #1
 802121c:	930e      	str	r3, [sp, #56]	; 0x38
 802121e:	e76a      	b.n	80210f6 <_dtoa_r+0x116>
 8021220:	2301      	movs	r3, #1
 8021222:	e7b2      	b.n	802118a <_dtoa_r+0x1aa>
 8021224:	900b      	str	r0, [sp, #44]	; 0x2c
 8021226:	e7b1      	b.n	802118c <_dtoa_r+0x1ac>
 8021228:	9b04      	ldr	r3, [sp, #16]
 802122a:	9a00      	ldr	r2, [sp, #0]
 802122c:	1a9b      	subs	r3, r3, r2
 802122e:	9304      	str	r3, [sp, #16]
 8021230:	4253      	negs	r3, r2
 8021232:	9307      	str	r3, [sp, #28]
 8021234:	2300      	movs	r3, #0
 8021236:	930a      	str	r3, [sp, #40]	; 0x28
 8021238:	e7bf      	b.n	80211ba <_dtoa_r+0x1da>
 802123a:	2300      	movs	r3, #0
 802123c:	9308      	str	r3, [sp, #32]
 802123e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021240:	2b00      	cmp	r3, #0
 8021242:	dc55      	bgt.n	80212f0 <_dtoa_r+0x310>
 8021244:	2301      	movs	r3, #1
 8021246:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802124a:	461a      	mov	r2, r3
 802124c:	9209      	str	r2, [sp, #36]	; 0x24
 802124e:	e00c      	b.n	802126a <_dtoa_r+0x28a>
 8021250:	2301      	movs	r3, #1
 8021252:	e7f3      	b.n	802123c <_dtoa_r+0x25c>
 8021254:	2300      	movs	r3, #0
 8021256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021258:	9308      	str	r3, [sp, #32]
 802125a:	9b00      	ldr	r3, [sp, #0]
 802125c:	4413      	add	r3, r2
 802125e:	9302      	str	r3, [sp, #8]
 8021260:	3301      	adds	r3, #1
 8021262:	2b01      	cmp	r3, #1
 8021264:	9303      	str	r3, [sp, #12]
 8021266:	bfb8      	it	lt
 8021268:	2301      	movlt	r3, #1
 802126a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802126c:	2200      	movs	r2, #0
 802126e:	6042      	str	r2, [r0, #4]
 8021270:	2204      	movs	r2, #4
 8021272:	f102 0614 	add.w	r6, r2, #20
 8021276:	429e      	cmp	r6, r3
 8021278:	6841      	ldr	r1, [r0, #4]
 802127a:	d93d      	bls.n	80212f8 <_dtoa_r+0x318>
 802127c:	4620      	mov	r0, r4
 802127e:	f000 fec9 	bl	8022014 <_Balloc>
 8021282:	9001      	str	r0, [sp, #4]
 8021284:	2800      	cmp	r0, #0
 8021286:	d13b      	bne.n	8021300 <_dtoa_r+0x320>
 8021288:	4b11      	ldr	r3, [pc, #68]	; (80212d0 <_dtoa_r+0x2f0>)
 802128a:	4602      	mov	r2, r0
 802128c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8021290:	e6c0      	b.n	8021014 <_dtoa_r+0x34>
 8021292:	2301      	movs	r3, #1
 8021294:	e7df      	b.n	8021256 <_dtoa_r+0x276>
 8021296:	bf00      	nop
 8021298:	636f4361 	.word	0x636f4361
 802129c:	3fd287a7 	.word	0x3fd287a7
 80212a0:	8b60c8b3 	.word	0x8b60c8b3
 80212a4:	3fc68a28 	.word	0x3fc68a28
 80212a8:	509f79fb 	.word	0x509f79fb
 80212ac:	3fd34413 	.word	0x3fd34413
 80212b0:	0802379d 	.word	0x0802379d
 80212b4:	080237b4 	.word	0x080237b4
 80212b8:	7ff00000 	.word	0x7ff00000
 80212bc:	08023799 	.word	0x08023799
 80212c0:	08023790 	.word	0x08023790
 80212c4:	0802376d 	.word	0x0802376d
 80212c8:	3ff80000 	.word	0x3ff80000
 80212cc:	08023908 	.word	0x08023908
 80212d0:	0802380f 	.word	0x0802380f
 80212d4:	2501      	movs	r5, #1
 80212d6:	2300      	movs	r3, #0
 80212d8:	9306      	str	r3, [sp, #24]
 80212da:	9508      	str	r5, [sp, #32]
 80212dc:	f04f 33ff 	mov.w	r3, #4294967295
 80212e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80212e4:	2200      	movs	r2, #0
 80212e6:	2312      	movs	r3, #18
 80212e8:	e7b0      	b.n	802124c <_dtoa_r+0x26c>
 80212ea:	2301      	movs	r3, #1
 80212ec:	9308      	str	r3, [sp, #32]
 80212ee:	e7f5      	b.n	80212dc <_dtoa_r+0x2fc>
 80212f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80212f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80212f6:	e7b8      	b.n	802126a <_dtoa_r+0x28a>
 80212f8:	3101      	adds	r1, #1
 80212fa:	6041      	str	r1, [r0, #4]
 80212fc:	0052      	lsls	r2, r2, #1
 80212fe:	e7b8      	b.n	8021272 <_dtoa_r+0x292>
 8021300:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021302:	9a01      	ldr	r2, [sp, #4]
 8021304:	601a      	str	r2, [r3, #0]
 8021306:	9b03      	ldr	r3, [sp, #12]
 8021308:	2b0e      	cmp	r3, #14
 802130a:	f200 809d 	bhi.w	8021448 <_dtoa_r+0x468>
 802130e:	2d00      	cmp	r5, #0
 8021310:	f000 809a 	beq.w	8021448 <_dtoa_r+0x468>
 8021314:	9b00      	ldr	r3, [sp, #0]
 8021316:	2b00      	cmp	r3, #0
 8021318:	dd32      	ble.n	8021380 <_dtoa_r+0x3a0>
 802131a:	4ab7      	ldr	r2, [pc, #732]	; (80215f8 <_dtoa_r+0x618>)
 802131c:	f003 030f 	and.w	r3, r3, #15
 8021320:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8021324:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021328:	9b00      	ldr	r3, [sp, #0]
 802132a:	05d8      	lsls	r0, r3, #23
 802132c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8021330:	d516      	bpl.n	8021360 <_dtoa_r+0x380>
 8021332:	4bb2      	ldr	r3, [pc, #712]	; (80215fc <_dtoa_r+0x61c>)
 8021334:	ec51 0b19 	vmov	r0, r1, d9
 8021338:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802133c:	f7df faae 	bl	800089c <__aeabi_ddiv>
 8021340:	f007 070f 	and.w	r7, r7, #15
 8021344:	4682      	mov	sl, r0
 8021346:	468b      	mov	fp, r1
 8021348:	2503      	movs	r5, #3
 802134a:	4eac      	ldr	r6, [pc, #688]	; (80215fc <_dtoa_r+0x61c>)
 802134c:	b957      	cbnz	r7, 8021364 <_dtoa_r+0x384>
 802134e:	4642      	mov	r2, r8
 8021350:	464b      	mov	r3, r9
 8021352:	4650      	mov	r0, sl
 8021354:	4659      	mov	r1, fp
 8021356:	f7df faa1 	bl	800089c <__aeabi_ddiv>
 802135a:	4682      	mov	sl, r0
 802135c:	468b      	mov	fp, r1
 802135e:	e028      	b.n	80213b2 <_dtoa_r+0x3d2>
 8021360:	2502      	movs	r5, #2
 8021362:	e7f2      	b.n	802134a <_dtoa_r+0x36a>
 8021364:	07f9      	lsls	r1, r7, #31
 8021366:	d508      	bpl.n	802137a <_dtoa_r+0x39a>
 8021368:	4640      	mov	r0, r8
 802136a:	4649      	mov	r1, r9
 802136c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8021370:	f7df f96a 	bl	8000648 <__aeabi_dmul>
 8021374:	3501      	adds	r5, #1
 8021376:	4680      	mov	r8, r0
 8021378:	4689      	mov	r9, r1
 802137a:	107f      	asrs	r7, r7, #1
 802137c:	3608      	adds	r6, #8
 802137e:	e7e5      	b.n	802134c <_dtoa_r+0x36c>
 8021380:	f000 809b 	beq.w	80214ba <_dtoa_r+0x4da>
 8021384:	9b00      	ldr	r3, [sp, #0]
 8021386:	4f9d      	ldr	r7, [pc, #628]	; (80215fc <_dtoa_r+0x61c>)
 8021388:	425e      	negs	r6, r3
 802138a:	4b9b      	ldr	r3, [pc, #620]	; (80215f8 <_dtoa_r+0x618>)
 802138c:	f006 020f 	and.w	r2, r6, #15
 8021390:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021398:	ec51 0b19 	vmov	r0, r1, d9
 802139c:	f7df f954 	bl	8000648 <__aeabi_dmul>
 80213a0:	1136      	asrs	r6, r6, #4
 80213a2:	4682      	mov	sl, r0
 80213a4:	468b      	mov	fp, r1
 80213a6:	2300      	movs	r3, #0
 80213a8:	2502      	movs	r5, #2
 80213aa:	2e00      	cmp	r6, #0
 80213ac:	d17a      	bne.n	80214a4 <_dtoa_r+0x4c4>
 80213ae:	2b00      	cmp	r3, #0
 80213b0:	d1d3      	bne.n	802135a <_dtoa_r+0x37a>
 80213b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80213b4:	2b00      	cmp	r3, #0
 80213b6:	f000 8082 	beq.w	80214be <_dtoa_r+0x4de>
 80213ba:	4b91      	ldr	r3, [pc, #580]	; (8021600 <_dtoa_r+0x620>)
 80213bc:	2200      	movs	r2, #0
 80213be:	4650      	mov	r0, sl
 80213c0:	4659      	mov	r1, fp
 80213c2:	f7df fbb3 	bl	8000b2c <__aeabi_dcmplt>
 80213c6:	2800      	cmp	r0, #0
 80213c8:	d079      	beq.n	80214be <_dtoa_r+0x4de>
 80213ca:	9b03      	ldr	r3, [sp, #12]
 80213cc:	2b00      	cmp	r3, #0
 80213ce:	d076      	beq.n	80214be <_dtoa_r+0x4de>
 80213d0:	9b02      	ldr	r3, [sp, #8]
 80213d2:	2b00      	cmp	r3, #0
 80213d4:	dd36      	ble.n	8021444 <_dtoa_r+0x464>
 80213d6:	9b00      	ldr	r3, [sp, #0]
 80213d8:	4650      	mov	r0, sl
 80213da:	4659      	mov	r1, fp
 80213dc:	1e5f      	subs	r7, r3, #1
 80213de:	2200      	movs	r2, #0
 80213e0:	4b88      	ldr	r3, [pc, #544]	; (8021604 <_dtoa_r+0x624>)
 80213e2:	f7df f931 	bl	8000648 <__aeabi_dmul>
 80213e6:	9e02      	ldr	r6, [sp, #8]
 80213e8:	4682      	mov	sl, r0
 80213ea:	468b      	mov	fp, r1
 80213ec:	3501      	adds	r5, #1
 80213ee:	4628      	mov	r0, r5
 80213f0:	f7df f8c0 	bl	8000574 <__aeabi_i2d>
 80213f4:	4652      	mov	r2, sl
 80213f6:	465b      	mov	r3, fp
 80213f8:	f7df f926 	bl	8000648 <__aeabi_dmul>
 80213fc:	4b82      	ldr	r3, [pc, #520]	; (8021608 <_dtoa_r+0x628>)
 80213fe:	2200      	movs	r2, #0
 8021400:	f7de ff6c 	bl	80002dc <__adddf3>
 8021404:	46d0      	mov	r8, sl
 8021406:	46d9      	mov	r9, fp
 8021408:	4682      	mov	sl, r0
 802140a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 802140e:	2e00      	cmp	r6, #0
 8021410:	d158      	bne.n	80214c4 <_dtoa_r+0x4e4>
 8021412:	4b7e      	ldr	r3, [pc, #504]	; (802160c <_dtoa_r+0x62c>)
 8021414:	2200      	movs	r2, #0
 8021416:	4640      	mov	r0, r8
 8021418:	4649      	mov	r1, r9
 802141a:	f7de ff5d 	bl	80002d8 <__aeabi_dsub>
 802141e:	4652      	mov	r2, sl
 8021420:	465b      	mov	r3, fp
 8021422:	4680      	mov	r8, r0
 8021424:	4689      	mov	r9, r1
 8021426:	f7df fb9f 	bl	8000b68 <__aeabi_dcmpgt>
 802142a:	2800      	cmp	r0, #0
 802142c:	f040 8295 	bne.w	802195a <_dtoa_r+0x97a>
 8021430:	4652      	mov	r2, sl
 8021432:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8021436:	4640      	mov	r0, r8
 8021438:	4649      	mov	r1, r9
 802143a:	f7df fb77 	bl	8000b2c <__aeabi_dcmplt>
 802143e:	2800      	cmp	r0, #0
 8021440:	f040 8289 	bne.w	8021956 <_dtoa_r+0x976>
 8021444:	ec5b ab19 	vmov	sl, fp, d9
 8021448:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802144a:	2b00      	cmp	r3, #0
 802144c:	f2c0 8148 	blt.w	80216e0 <_dtoa_r+0x700>
 8021450:	9a00      	ldr	r2, [sp, #0]
 8021452:	2a0e      	cmp	r2, #14
 8021454:	f300 8144 	bgt.w	80216e0 <_dtoa_r+0x700>
 8021458:	4b67      	ldr	r3, [pc, #412]	; (80215f8 <_dtoa_r+0x618>)
 802145a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802145e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021464:	2b00      	cmp	r3, #0
 8021466:	f280 80d5 	bge.w	8021614 <_dtoa_r+0x634>
 802146a:	9b03      	ldr	r3, [sp, #12]
 802146c:	2b00      	cmp	r3, #0
 802146e:	f300 80d1 	bgt.w	8021614 <_dtoa_r+0x634>
 8021472:	f040 826f 	bne.w	8021954 <_dtoa_r+0x974>
 8021476:	4b65      	ldr	r3, [pc, #404]	; (802160c <_dtoa_r+0x62c>)
 8021478:	2200      	movs	r2, #0
 802147a:	4640      	mov	r0, r8
 802147c:	4649      	mov	r1, r9
 802147e:	f7df f8e3 	bl	8000648 <__aeabi_dmul>
 8021482:	4652      	mov	r2, sl
 8021484:	465b      	mov	r3, fp
 8021486:	f7df fb65 	bl	8000b54 <__aeabi_dcmpge>
 802148a:	9e03      	ldr	r6, [sp, #12]
 802148c:	4637      	mov	r7, r6
 802148e:	2800      	cmp	r0, #0
 8021490:	f040 8245 	bne.w	802191e <_dtoa_r+0x93e>
 8021494:	9d01      	ldr	r5, [sp, #4]
 8021496:	2331      	movs	r3, #49	; 0x31
 8021498:	f805 3b01 	strb.w	r3, [r5], #1
 802149c:	9b00      	ldr	r3, [sp, #0]
 802149e:	3301      	adds	r3, #1
 80214a0:	9300      	str	r3, [sp, #0]
 80214a2:	e240      	b.n	8021926 <_dtoa_r+0x946>
 80214a4:	07f2      	lsls	r2, r6, #31
 80214a6:	d505      	bpl.n	80214b4 <_dtoa_r+0x4d4>
 80214a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80214ac:	f7df f8cc 	bl	8000648 <__aeabi_dmul>
 80214b0:	3501      	adds	r5, #1
 80214b2:	2301      	movs	r3, #1
 80214b4:	1076      	asrs	r6, r6, #1
 80214b6:	3708      	adds	r7, #8
 80214b8:	e777      	b.n	80213aa <_dtoa_r+0x3ca>
 80214ba:	2502      	movs	r5, #2
 80214bc:	e779      	b.n	80213b2 <_dtoa_r+0x3d2>
 80214be:	9f00      	ldr	r7, [sp, #0]
 80214c0:	9e03      	ldr	r6, [sp, #12]
 80214c2:	e794      	b.n	80213ee <_dtoa_r+0x40e>
 80214c4:	9901      	ldr	r1, [sp, #4]
 80214c6:	4b4c      	ldr	r3, [pc, #304]	; (80215f8 <_dtoa_r+0x618>)
 80214c8:	4431      	add	r1, r6
 80214ca:	910d      	str	r1, [sp, #52]	; 0x34
 80214cc:	9908      	ldr	r1, [sp, #32]
 80214ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80214d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80214d6:	2900      	cmp	r1, #0
 80214d8:	d043      	beq.n	8021562 <_dtoa_r+0x582>
 80214da:	494d      	ldr	r1, [pc, #308]	; (8021610 <_dtoa_r+0x630>)
 80214dc:	2000      	movs	r0, #0
 80214de:	f7df f9dd 	bl	800089c <__aeabi_ddiv>
 80214e2:	4652      	mov	r2, sl
 80214e4:	465b      	mov	r3, fp
 80214e6:	f7de fef7 	bl	80002d8 <__aeabi_dsub>
 80214ea:	9d01      	ldr	r5, [sp, #4]
 80214ec:	4682      	mov	sl, r0
 80214ee:	468b      	mov	fp, r1
 80214f0:	4649      	mov	r1, r9
 80214f2:	4640      	mov	r0, r8
 80214f4:	f7df fb58 	bl	8000ba8 <__aeabi_d2iz>
 80214f8:	4606      	mov	r6, r0
 80214fa:	f7df f83b 	bl	8000574 <__aeabi_i2d>
 80214fe:	4602      	mov	r2, r0
 8021500:	460b      	mov	r3, r1
 8021502:	4640      	mov	r0, r8
 8021504:	4649      	mov	r1, r9
 8021506:	f7de fee7 	bl	80002d8 <__aeabi_dsub>
 802150a:	3630      	adds	r6, #48	; 0x30
 802150c:	f805 6b01 	strb.w	r6, [r5], #1
 8021510:	4652      	mov	r2, sl
 8021512:	465b      	mov	r3, fp
 8021514:	4680      	mov	r8, r0
 8021516:	4689      	mov	r9, r1
 8021518:	f7df fb08 	bl	8000b2c <__aeabi_dcmplt>
 802151c:	2800      	cmp	r0, #0
 802151e:	d163      	bne.n	80215e8 <_dtoa_r+0x608>
 8021520:	4642      	mov	r2, r8
 8021522:	464b      	mov	r3, r9
 8021524:	4936      	ldr	r1, [pc, #216]	; (8021600 <_dtoa_r+0x620>)
 8021526:	2000      	movs	r0, #0
 8021528:	f7de fed6 	bl	80002d8 <__aeabi_dsub>
 802152c:	4652      	mov	r2, sl
 802152e:	465b      	mov	r3, fp
 8021530:	f7df fafc 	bl	8000b2c <__aeabi_dcmplt>
 8021534:	2800      	cmp	r0, #0
 8021536:	f040 80b5 	bne.w	80216a4 <_dtoa_r+0x6c4>
 802153a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802153c:	429d      	cmp	r5, r3
 802153e:	d081      	beq.n	8021444 <_dtoa_r+0x464>
 8021540:	4b30      	ldr	r3, [pc, #192]	; (8021604 <_dtoa_r+0x624>)
 8021542:	2200      	movs	r2, #0
 8021544:	4650      	mov	r0, sl
 8021546:	4659      	mov	r1, fp
 8021548:	f7df f87e 	bl	8000648 <__aeabi_dmul>
 802154c:	4b2d      	ldr	r3, [pc, #180]	; (8021604 <_dtoa_r+0x624>)
 802154e:	4682      	mov	sl, r0
 8021550:	468b      	mov	fp, r1
 8021552:	4640      	mov	r0, r8
 8021554:	4649      	mov	r1, r9
 8021556:	2200      	movs	r2, #0
 8021558:	f7df f876 	bl	8000648 <__aeabi_dmul>
 802155c:	4680      	mov	r8, r0
 802155e:	4689      	mov	r9, r1
 8021560:	e7c6      	b.n	80214f0 <_dtoa_r+0x510>
 8021562:	4650      	mov	r0, sl
 8021564:	4659      	mov	r1, fp
 8021566:	f7df f86f 	bl	8000648 <__aeabi_dmul>
 802156a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802156c:	9d01      	ldr	r5, [sp, #4]
 802156e:	930f      	str	r3, [sp, #60]	; 0x3c
 8021570:	4682      	mov	sl, r0
 8021572:	468b      	mov	fp, r1
 8021574:	4649      	mov	r1, r9
 8021576:	4640      	mov	r0, r8
 8021578:	f7df fb16 	bl	8000ba8 <__aeabi_d2iz>
 802157c:	4606      	mov	r6, r0
 802157e:	f7de fff9 	bl	8000574 <__aeabi_i2d>
 8021582:	3630      	adds	r6, #48	; 0x30
 8021584:	4602      	mov	r2, r0
 8021586:	460b      	mov	r3, r1
 8021588:	4640      	mov	r0, r8
 802158a:	4649      	mov	r1, r9
 802158c:	f7de fea4 	bl	80002d8 <__aeabi_dsub>
 8021590:	f805 6b01 	strb.w	r6, [r5], #1
 8021594:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021596:	429d      	cmp	r5, r3
 8021598:	4680      	mov	r8, r0
 802159a:	4689      	mov	r9, r1
 802159c:	f04f 0200 	mov.w	r2, #0
 80215a0:	d124      	bne.n	80215ec <_dtoa_r+0x60c>
 80215a2:	4b1b      	ldr	r3, [pc, #108]	; (8021610 <_dtoa_r+0x630>)
 80215a4:	4650      	mov	r0, sl
 80215a6:	4659      	mov	r1, fp
 80215a8:	f7de fe98 	bl	80002dc <__adddf3>
 80215ac:	4602      	mov	r2, r0
 80215ae:	460b      	mov	r3, r1
 80215b0:	4640      	mov	r0, r8
 80215b2:	4649      	mov	r1, r9
 80215b4:	f7df fad8 	bl	8000b68 <__aeabi_dcmpgt>
 80215b8:	2800      	cmp	r0, #0
 80215ba:	d173      	bne.n	80216a4 <_dtoa_r+0x6c4>
 80215bc:	4652      	mov	r2, sl
 80215be:	465b      	mov	r3, fp
 80215c0:	4913      	ldr	r1, [pc, #76]	; (8021610 <_dtoa_r+0x630>)
 80215c2:	2000      	movs	r0, #0
 80215c4:	f7de fe88 	bl	80002d8 <__aeabi_dsub>
 80215c8:	4602      	mov	r2, r0
 80215ca:	460b      	mov	r3, r1
 80215cc:	4640      	mov	r0, r8
 80215ce:	4649      	mov	r1, r9
 80215d0:	f7df faac 	bl	8000b2c <__aeabi_dcmplt>
 80215d4:	2800      	cmp	r0, #0
 80215d6:	f43f af35 	beq.w	8021444 <_dtoa_r+0x464>
 80215da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80215dc:	1e6b      	subs	r3, r5, #1
 80215de:	930f      	str	r3, [sp, #60]	; 0x3c
 80215e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80215e4:	2b30      	cmp	r3, #48	; 0x30
 80215e6:	d0f8      	beq.n	80215da <_dtoa_r+0x5fa>
 80215e8:	9700      	str	r7, [sp, #0]
 80215ea:	e049      	b.n	8021680 <_dtoa_r+0x6a0>
 80215ec:	4b05      	ldr	r3, [pc, #20]	; (8021604 <_dtoa_r+0x624>)
 80215ee:	f7df f82b 	bl	8000648 <__aeabi_dmul>
 80215f2:	4680      	mov	r8, r0
 80215f4:	4689      	mov	r9, r1
 80215f6:	e7bd      	b.n	8021574 <_dtoa_r+0x594>
 80215f8:	08023908 	.word	0x08023908
 80215fc:	080238e0 	.word	0x080238e0
 8021600:	3ff00000 	.word	0x3ff00000
 8021604:	40240000 	.word	0x40240000
 8021608:	401c0000 	.word	0x401c0000
 802160c:	40140000 	.word	0x40140000
 8021610:	3fe00000 	.word	0x3fe00000
 8021614:	9d01      	ldr	r5, [sp, #4]
 8021616:	4656      	mov	r6, sl
 8021618:	465f      	mov	r7, fp
 802161a:	4642      	mov	r2, r8
 802161c:	464b      	mov	r3, r9
 802161e:	4630      	mov	r0, r6
 8021620:	4639      	mov	r1, r7
 8021622:	f7df f93b 	bl	800089c <__aeabi_ddiv>
 8021626:	f7df fabf 	bl	8000ba8 <__aeabi_d2iz>
 802162a:	4682      	mov	sl, r0
 802162c:	f7de ffa2 	bl	8000574 <__aeabi_i2d>
 8021630:	4642      	mov	r2, r8
 8021632:	464b      	mov	r3, r9
 8021634:	f7df f808 	bl	8000648 <__aeabi_dmul>
 8021638:	4602      	mov	r2, r0
 802163a:	460b      	mov	r3, r1
 802163c:	4630      	mov	r0, r6
 802163e:	4639      	mov	r1, r7
 8021640:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8021644:	f7de fe48 	bl	80002d8 <__aeabi_dsub>
 8021648:	f805 6b01 	strb.w	r6, [r5], #1
 802164c:	9e01      	ldr	r6, [sp, #4]
 802164e:	9f03      	ldr	r7, [sp, #12]
 8021650:	1bae      	subs	r6, r5, r6
 8021652:	42b7      	cmp	r7, r6
 8021654:	4602      	mov	r2, r0
 8021656:	460b      	mov	r3, r1
 8021658:	d135      	bne.n	80216c6 <_dtoa_r+0x6e6>
 802165a:	f7de fe3f 	bl	80002dc <__adddf3>
 802165e:	4642      	mov	r2, r8
 8021660:	464b      	mov	r3, r9
 8021662:	4606      	mov	r6, r0
 8021664:	460f      	mov	r7, r1
 8021666:	f7df fa7f 	bl	8000b68 <__aeabi_dcmpgt>
 802166a:	b9d0      	cbnz	r0, 80216a2 <_dtoa_r+0x6c2>
 802166c:	4642      	mov	r2, r8
 802166e:	464b      	mov	r3, r9
 8021670:	4630      	mov	r0, r6
 8021672:	4639      	mov	r1, r7
 8021674:	f7df fa50 	bl	8000b18 <__aeabi_dcmpeq>
 8021678:	b110      	cbz	r0, 8021680 <_dtoa_r+0x6a0>
 802167a:	f01a 0f01 	tst.w	sl, #1
 802167e:	d110      	bne.n	80216a2 <_dtoa_r+0x6c2>
 8021680:	4620      	mov	r0, r4
 8021682:	ee18 1a10 	vmov	r1, s16
 8021686:	f000 fd05 	bl	8022094 <_Bfree>
 802168a:	2300      	movs	r3, #0
 802168c:	9800      	ldr	r0, [sp, #0]
 802168e:	702b      	strb	r3, [r5, #0]
 8021690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021692:	3001      	adds	r0, #1
 8021694:	6018      	str	r0, [r3, #0]
 8021696:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021698:	2b00      	cmp	r3, #0
 802169a:	f43f acf1 	beq.w	8021080 <_dtoa_r+0xa0>
 802169e:	601d      	str	r5, [r3, #0]
 80216a0:	e4ee      	b.n	8021080 <_dtoa_r+0xa0>
 80216a2:	9f00      	ldr	r7, [sp, #0]
 80216a4:	462b      	mov	r3, r5
 80216a6:	461d      	mov	r5, r3
 80216a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80216ac:	2a39      	cmp	r2, #57	; 0x39
 80216ae:	d106      	bne.n	80216be <_dtoa_r+0x6de>
 80216b0:	9a01      	ldr	r2, [sp, #4]
 80216b2:	429a      	cmp	r2, r3
 80216b4:	d1f7      	bne.n	80216a6 <_dtoa_r+0x6c6>
 80216b6:	9901      	ldr	r1, [sp, #4]
 80216b8:	2230      	movs	r2, #48	; 0x30
 80216ba:	3701      	adds	r7, #1
 80216bc:	700a      	strb	r2, [r1, #0]
 80216be:	781a      	ldrb	r2, [r3, #0]
 80216c0:	3201      	adds	r2, #1
 80216c2:	701a      	strb	r2, [r3, #0]
 80216c4:	e790      	b.n	80215e8 <_dtoa_r+0x608>
 80216c6:	4ba6      	ldr	r3, [pc, #664]	; (8021960 <_dtoa_r+0x980>)
 80216c8:	2200      	movs	r2, #0
 80216ca:	f7de ffbd 	bl	8000648 <__aeabi_dmul>
 80216ce:	2200      	movs	r2, #0
 80216d0:	2300      	movs	r3, #0
 80216d2:	4606      	mov	r6, r0
 80216d4:	460f      	mov	r7, r1
 80216d6:	f7df fa1f 	bl	8000b18 <__aeabi_dcmpeq>
 80216da:	2800      	cmp	r0, #0
 80216dc:	d09d      	beq.n	802161a <_dtoa_r+0x63a>
 80216de:	e7cf      	b.n	8021680 <_dtoa_r+0x6a0>
 80216e0:	9a08      	ldr	r2, [sp, #32]
 80216e2:	2a00      	cmp	r2, #0
 80216e4:	f000 80d7 	beq.w	8021896 <_dtoa_r+0x8b6>
 80216e8:	9a06      	ldr	r2, [sp, #24]
 80216ea:	2a01      	cmp	r2, #1
 80216ec:	f300 80ba 	bgt.w	8021864 <_dtoa_r+0x884>
 80216f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80216f2:	2a00      	cmp	r2, #0
 80216f4:	f000 80b2 	beq.w	802185c <_dtoa_r+0x87c>
 80216f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80216fc:	9e07      	ldr	r6, [sp, #28]
 80216fe:	9d04      	ldr	r5, [sp, #16]
 8021700:	9a04      	ldr	r2, [sp, #16]
 8021702:	441a      	add	r2, r3
 8021704:	9204      	str	r2, [sp, #16]
 8021706:	9a05      	ldr	r2, [sp, #20]
 8021708:	2101      	movs	r1, #1
 802170a:	441a      	add	r2, r3
 802170c:	4620      	mov	r0, r4
 802170e:	9205      	str	r2, [sp, #20]
 8021710:	f000 fd78 	bl	8022204 <__i2b>
 8021714:	4607      	mov	r7, r0
 8021716:	2d00      	cmp	r5, #0
 8021718:	dd0c      	ble.n	8021734 <_dtoa_r+0x754>
 802171a:	9b05      	ldr	r3, [sp, #20]
 802171c:	2b00      	cmp	r3, #0
 802171e:	dd09      	ble.n	8021734 <_dtoa_r+0x754>
 8021720:	42ab      	cmp	r3, r5
 8021722:	9a04      	ldr	r2, [sp, #16]
 8021724:	bfa8      	it	ge
 8021726:	462b      	movge	r3, r5
 8021728:	1ad2      	subs	r2, r2, r3
 802172a:	9204      	str	r2, [sp, #16]
 802172c:	9a05      	ldr	r2, [sp, #20]
 802172e:	1aed      	subs	r5, r5, r3
 8021730:	1ad3      	subs	r3, r2, r3
 8021732:	9305      	str	r3, [sp, #20]
 8021734:	9b07      	ldr	r3, [sp, #28]
 8021736:	b31b      	cbz	r3, 8021780 <_dtoa_r+0x7a0>
 8021738:	9b08      	ldr	r3, [sp, #32]
 802173a:	2b00      	cmp	r3, #0
 802173c:	f000 80af 	beq.w	802189e <_dtoa_r+0x8be>
 8021740:	2e00      	cmp	r6, #0
 8021742:	dd13      	ble.n	802176c <_dtoa_r+0x78c>
 8021744:	4639      	mov	r1, r7
 8021746:	4632      	mov	r2, r6
 8021748:	4620      	mov	r0, r4
 802174a:	f000 fe1b 	bl	8022384 <__pow5mult>
 802174e:	ee18 2a10 	vmov	r2, s16
 8021752:	4601      	mov	r1, r0
 8021754:	4607      	mov	r7, r0
 8021756:	4620      	mov	r0, r4
 8021758:	f000 fd6a 	bl	8022230 <__multiply>
 802175c:	ee18 1a10 	vmov	r1, s16
 8021760:	4680      	mov	r8, r0
 8021762:	4620      	mov	r0, r4
 8021764:	f000 fc96 	bl	8022094 <_Bfree>
 8021768:	ee08 8a10 	vmov	s16, r8
 802176c:	9b07      	ldr	r3, [sp, #28]
 802176e:	1b9a      	subs	r2, r3, r6
 8021770:	d006      	beq.n	8021780 <_dtoa_r+0x7a0>
 8021772:	ee18 1a10 	vmov	r1, s16
 8021776:	4620      	mov	r0, r4
 8021778:	f000 fe04 	bl	8022384 <__pow5mult>
 802177c:	ee08 0a10 	vmov	s16, r0
 8021780:	2101      	movs	r1, #1
 8021782:	4620      	mov	r0, r4
 8021784:	f000 fd3e 	bl	8022204 <__i2b>
 8021788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802178a:	2b00      	cmp	r3, #0
 802178c:	4606      	mov	r6, r0
 802178e:	f340 8088 	ble.w	80218a2 <_dtoa_r+0x8c2>
 8021792:	461a      	mov	r2, r3
 8021794:	4601      	mov	r1, r0
 8021796:	4620      	mov	r0, r4
 8021798:	f000 fdf4 	bl	8022384 <__pow5mult>
 802179c:	9b06      	ldr	r3, [sp, #24]
 802179e:	2b01      	cmp	r3, #1
 80217a0:	4606      	mov	r6, r0
 80217a2:	f340 8081 	ble.w	80218a8 <_dtoa_r+0x8c8>
 80217a6:	f04f 0800 	mov.w	r8, #0
 80217aa:	6933      	ldr	r3, [r6, #16]
 80217ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80217b0:	6918      	ldr	r0, [r3, #16]
 80217b2:	f000 fcd7 	bl	8022164 <__hi0bits>
 80217b6:	f1c0 0020 	rsb	r0, r0, #32
 80217ba:	9b05      	ldr	r3, [sp, #20]
 80217bc:	4418      	add	r0, r3
 80217be:	f010 001f 	ands.w	r0, r0, #31
 80217c2:	f000 8092 	beq.w	80218ea <_dtoa_r+0x90a>
 80217c6:	f1c0 0320 	rsb	r3, r0, #32
 80217ca:	2b04      	cmp	r3, #4
 80217cc:	f340 808a 	ble.w	80218e4 <_dtoa_r+0x904>
 80217d0:	f1c0 001c 	rsb	r0, r0, #28
 80217d4:	9b04      	ldr	r3, [sp, #16]
 80217d6:	4403      	add	r3, r0
 80217d8:	9304      	str	r3, [sp, #16]
 80217da:	9b05      	ldr	r3, [sp, #20]
 80217dc:	4403      	add	r3, r0
 80217de:	4405      	add	r5, r0
 80217e0:	9305      	str	r3, [sp, #20]
 80217e2:	9b04      	ldr	r3, [sp, #16]
 80217e4:	2b00      	cmp	r3, #0
 80217e6:	dd07      	ble.n	80217f8 <_dtoa_r+0x818>
 80217e8:	ee18 1a10 	vmov	r1, s16
 80217ec:	461a      	mov	r2, r3
 80217ee:	4620      	mov	r0, r4
 80217f0:	f000 fe22 	bl	8022438 <__lshift>
 80217f4:	ee08 0a10 	vmov	s16, r0
 80217f8:	9b05      	ldr	r3, [sp, #20]
 80217fa:	2b00      	cmp	r3, #0
 80217fc:	dd05      	ble.n	802180a <_dtoa_r+0x82a>
 80217fe:	4631      	mov	r1, r6
 8021800:	461a      	mov	r2, r3
 8021802:	4620      	mov	r0, r4
 8021804:	f000 fe18 	bl	8022438 <__lshift>
 8021808:	4606      	mov	r6, r0
 802180a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802180c:	2b00      	cmp	r3, #0
 802180e:	d06e      	beq.n	80218ee <_dtoa_r+0x90e>
 8021810:	ee18 0a10 	vmov	r0, s16
 8021814:	4631      	mov	r1, r6
 8021816:	f000 fe7f 	bl	8022518 <__mcmp>
 802181a:	2800      	cmp	r0, #0
 802181c:	da67      	bge.n	80218ee <_dtoa_r+0x90e>
 802181e:	9b00      	ldr	r3, [sp, #0]
 8021820:	3b01      	subs	r3, #1
 8021822:	ee18 1a10 	vmov	r1, s16
 8021826:	9300      	str	r3, [sp, #0]
 8021828:	220a      	movs	r2, #10
 802182a:	2300      	movs	r3, #0
 802182c:	4620      	mov	r0, r4
 802182e:	f000 fc53 	bl	80220d8 <__multadd>
 8021832:	9b08      	ldr	r3, [sp, #32]
 8021834:	ee08 0a10 	vmov	s16, r0
 8021838:	2b00      	cmp	r3, #0
 802183a:	f000 81b1 	beq.w	8021ba0 <_dtoa_r+0xbc0>
 802183e:	2300      	movs	r3, #0
 8021840:	4639      	mov	r1, r7
 8021842:	220a      	movs	r2, #10
 8021844:	4620      	mov	r0, r4
 8021846:	f000 fc47 	bl	80220d8 <__multadd>
 802184a:	9b02      	ldr	r3, [sp, #8]
 802184c:	2b00      	cmp	r3, #0
 802184e:	4607      	mov	r7, r0
 8021850:	f300 808e 	bgt.w	8021970 <_dtoa_r+0x990>
 8021854:	9b06      	ldr	r3, [sp, #24]
 8021856:	2b02      	cmp	r3, #2
 8021858:	dc51      	bgt.n	80218fe <_dtoa_r+0x91e>
 802185a:	e089      	b.n	8021970 <_dtoa_r+0x990>
 802185c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802185e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8021862:	e74b      	b.n	80216fc <_dtoa_r+0x71c>
 8021864:	9b03      	ldr	r3, [sp, #12]
 8021866:	1e5e      	subs	r6, r3, #1
 8021868:	9b07      	ldr	r3, [sp, #28]
 802186a:	42b3      	cmp	r3, r6
 802186c:	bfbf      	itttt	lt
 802186e:	9b07      	ldrlt	r3, [sp, #28]
 8021870:	9607      	strlt	r6, [sp, #28]
 8021872:	1af2      	sublt	r2, r6, r3
 8021874:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8021876:	bfb6      	itet	lt
 8021878:	189b      	addlt	r3, r3, r2
 802187a:	1b9e      	subge	r6, r3, r6
 802187c:	930a      	strlt	r3, [sp, #40]	; 0x28
 802187e:	9b03      	ldr	r3, [sp, #12]
 8021880:	bfb8      	it	lt
 8021882:	2600      	movlt	r6, #0
 8021884:	2b00      	cmp	r3, #0
 8021886:	bfb7      	itett	lt
 8021888:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 802188c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8021890:	1a9d      	sublt	r5, r3, r2
 8021892:	2300      	movlt	r3, #0
 8021894:	e734      	b.n	8021700 <_dtoa_r+0x720>
 8021896:	9e07      	ldr	r6, [sp, #28]
 8021898:	9d04      	ldr	r5, [sp, #16]
 802189a:	9f08      	ldr	r7, [sp, #32]
 802189c:	e73b      	b.n	8021716 <_dtoa_r+0x736>
 802189e:	9a07      	ldr	r2, [sp, #28]
 80218a0:	e767      	b.n	8021772 <_dtoa_r+0x792>
 80218a2:	9b06      	ldr	r3, [sp, #24]
 80218a4:	2b01      	cmp	r3, #1
 80218a6:	dc18      	bgt.n	80218da <_dtoa_r+0x8fa>
 80218a8:	f1ba 0f00 	cmp.w	sl, #0
 80218ac:	d115      	bne.n	80218da <_dtoa_r+0x8fa>
 80218ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80218b2:	b993      	cbnz	r3, 80218da <_dtoa_r+0x8fa>
 80218b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80218b8:	0d1b      	lsrs	r3, r3, #20
 80218ba:	051b      	lsls	r3, r3, #20
 80218bc:	b183      	cbz	r3, 80218e0 <_dtoa_r+0x900>
 80218be:	9b04      	ldr	r3, [sp, #16]
 80218c0:	3301      	adds	r3, #1
 80218c2:	9304      	str	r3, [sp, #16]
 80218c4:	9b05      	ldr	r3, [sp, #20]
 80218c6:	3301      	adds	r3, #1
 80218c8:	9305      	str	r3, [sp, #20]
 80218ca:	f04f 0801 	mov.w	r8, #1
 80218ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80218d0:	2b00      	cmp	r3, #0
 80218d2:	f47f af6a 	bne.w	80217aa <_dtoa_r+0x7ca>
 80218d6:	2001      	movs	r0, #1
 80218d8:	e76f      	b.n	80217ba <_dtoa_r+0x7da>
 80218da:	f04f 0800 	mov.w	r8, #0
 80218de:	e7f6      	b.n	80218ce <_dtoa_r+0x8ee>
 80218e0:	4698      	mov	r8, r3
 80218e2:	e7f4      	b.n	80218ce <_dtoa_r+0x8ee>
 80218e4:	f43f af7d 	beq.w	80217e2 <_dtoa_r+0x802>
 80218e8:	4618      	mov	r0, r3
 80218ea:	301c      	adds	r0, #28
 80218ec:	e772      	b.n	80217d4 <_dtoa_r+0x7f4>
 80218ee:	9b03      	ldr	r3, [sp, #12]
 80218f0:	2b00      	cmp	r3, #0
 80218f2:	dc37      	bgt.n	8021964 <_dtoa_r+0x984>
 80218f4:	9b06      	ldr	r3, [sp, #24]
 80218f6:	2b02      	cmp	r3, #2
 80218f8:	dd34      	ble.n	8021964 <_dtoa_r+0x984>
 80218fa:	9b03      	ldr	r3, [sp, #12]
 80218fc:	9302      	str	r3, [sp, #8]
 80218fe:	9b02      	ldr	r3, [sp, #8]
 8021900:	b96b      	cbnz	r3, 802191e <_dtoa_r+0x93e>
 8021902:	4631      	mov	r1, r6
 8021904:	2205      	movs	r2, #5
 8021906:	4620      	mov	r0, r4
 8021908:	f000 fbe6 	bl	80220d8 <__multadd>
 802190c:	4601      	mov	r1, r0
 802190e:	4606      	mov	r6, r0
 8021910:	ee18 0a10 	vmov	r0, s16
 8021914:	f000 fe00 	bl	8022518 <__mcmp>
 8021918:	2800      	cmp	r0, #0
 802191a:	f73f adbb 	bgt.w	8021494 <_dtoa_r+0x4b4>
 802191e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021920:	9d01      	ldr	r5, [sp, #4]
 8021922:	43db      	mvns	r3, r3
 8021924:	9300      	str	r3, [sp, #0]
 8021926:	f04f 0800 	mov.w	r8, #0
 802192a:	4631      	mov	r1, r6
 802192c:	4620      	mov	r0, r4
 802192e:	f000 fbb1 	bl	8022094 <_Bfree>
 8021932:	2f00      	cmp	r7, #0
 8021934:	f43f aea4 	beq.w	8021680 <_dtoa_r+0x6a0>
 8021938:	f1b8 0f00 	cmp.w	r8, #0
 802193c:	d005      	beq.n	802194a <_dtoa_r+0x96a>
 802193e:	45b8      	cmp	r8, r7
 8021940:	d003      	beq.n	802194a <_dtoa_r+0x96a>
 8021942:	4641      	mov	r1, r8
 8021944:	4620      	mov	r0, r4
 8021946:	f000 fba5 	bl	8022094 <_Bfree>
 802194a:	4639      	mov	r1, r7
 802194c:	4620      	mov	r0, r4
 802194e:	f000 fba1 	bl	8022094 <_Bfree>
 8021952:	e695      	b.n	8021680 <_dtoa_r+0x6a0>
 8021954:	2600      	movs	r6, #0
 8021956:	4637      	mov	r7, r6
 8021958:	e7e1      	b.n	802191e <_dtoa_r+0x93e>
 802195a:	9700      	str	r7, [sp, #0]
 802195c:	4637      	mov	r7, r6
 802195e:	e599      	b.n	8021494 <_dtoa_r+0x4b4>
 8021960:	40240000 	.word	0x40240000
 8021964:	9b08      	ldr	r3, [sp, #32]
 8021966:	2b00      	cmp	r3, #0
 8021968:	f000 80ca 	beq.w	8021b00 <_dtoa_r+0xb20>
 802196c:	9b03      	ldr	r3, [sp, #12]
 802196e:	9302      	str	r3, [sp, #8]
 8021970:	2d00      	cmp	r5, #0
 8021972:	dd05      	ble.n	8021980 <_dtoa_r+0x9a0>
 8021974:	4639      	mov	r1, r7
 8021976:	462a      	mov	r2, r5
 8021978:	4620      	mov	r0, r4
 802197a:	f000 fd5d 	bl	8022438 <__lshift>
 802197e:	4607      	mov	r7, r0
 8021980:	f1b8 0f00 	cmp.w	r8, #0
 8021984:	d05b      	beq.n	8021a3e <_dtoa_r+0xa5e>
 8021986:	6879      	ldr	r1, [r7, #4]
 8021988:	4620      	mov	r0, r4
 802198a:	f000 fb43 	bl	8022014 <_Balloc>
 802198e:	4605      	mov	r5, r0
 8021990:	b928      	cbnz	r0, 802199e <_dtoa_r+0x9be>
 8021992:	4b87      	ldr	r3, [pc, #540]	; (8021bb0 <_dtoa_r+0xbd0>)
 8021994:	4602      	mov	r2, r0
 8021996:	f240 21ea 	movw	r1, #746	; 0x2ea
 802199a:	f7ff bb3b 	b.w	8021014 <_dtoa_r+0x34>
 802199e:	693a      	ldr	r2, [r7, #16]
 80219a0:	3202      	adds	r2, #2
 80219a2:	0092      	lsls	r2, r2, #2
 80219a4:	f107 010c 	add.w	r1, r7, #12
 80219a8:	300c      	adds	r0, #12
 80219aa:	f7fe fca7 	bl	80202fc <memcpy>
 80219ae:	2201      	movs	r2, #1
 80219b0:	4629      	mov	r1, r5
 80219b2:	4620      	mov	r0, r4
 80219b4:	f000 fd40 	bl	8022438 <__lshift>
 80219b8:	9b01      	ldr	r3, [sp, #4]
 80219ba:	f103 0901 	add.w	r9, r3, #1
 80219be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80219c2:	4413      	add	r3, r2
 80219c4:	9305      	str	r3, [sp, #20]
 80219c6:	f00a 0301 	and.w	r3, sl, #1
 80219ca:	46b8      	mov	r8, r7
 80219cc:	9304      	str	r3, [sp, #16]
 80219ce:	4607      	mov	r7, r0
 80219d0:	4631      	mov	r1, r6
 80219d2:	ee18 0a10 	vmov	r0, s16
 80219d6:	f7ff fa75 	bl	8020ec4 <quorem>
 80219da:	4641      	mov	r1, r8
 80219dc:	9002      	str	r0, [sp, #8]
 80219de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80219e2:	ee18 0a10 	vmov	r0, s16
 80219e6:	f000 fd97 	bl	8022518 <__mcmp>
 80219ea:	463a      	mov	r2, r7
 80219ec:	9003      	str	r0, [sp, #12]
 80219ee:	4631      	mov	r1, r6
 80219f0:	4620      	mov	r0, r4
 80219f2:	f000 fdad 	bl	8022550 <__mdiff>
 80219f6:	68c2      	ldr	r2, [r0, #12]
 80219f8:	f109 3bff 	add.w	fp, r9, #4294967295
 80219fc:	4605      	mov	r5, r0
 80219fe:	bb02      	cbnz	r2, 8021a42 <_dtoa_r+0xa62>
 8021a00:	4601      	mov	r1, r0
 8021a02:	ee18 0a10 	vmov	r0, s16
 8021a06:	f000 fd87 	bl	8022518 <__mcmp>
 8021a0a:	4602      	mov	r2, r0
 8021a0c:	4629      	mov	r1, r5
 8021a0e:	4620      	mov	r0, r4
 8021a10:	9207      	str	r2, [sp, #28]
 8021a12:	f000 fb3f 	bl	8022094 <_Bfree>
 8021a16:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8021a1a:	ea43 0102 	orr.w	r1, r3, r2
 8021a1e:	9b04      	ldr	r3, [sp, #16]
 8021a20:	430b      	orrs	r3, r1
 8021a22:	464d      	mov	r5, r9
 8021a24:	d10f      	bne.n	8021a46 <_dtoa_r+0xa66>
 8021a26:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8021a2a:	d02a      	beq.n	8021a82 <_dtoa_r+0xaa2>
 8021a2c:	9b03      	ldr	r3, [sp, #12]
 8021a2e:	2b00      	cmp	r3, #0
 8021a30:	dd02      	ble.n	8021a38 <_dtoa_r+0xa58>
 8021a32:	9b02      	ldr	r3, [sp, #8]
 8021a34:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8021a38:	f88b a000 	strb.w	sl, [fp]
 8021a3c:	e775      	b.n	802192a <_dtoa_r+0x94a>
 8021a3e:	4638      	mov	r0, r7
 8021a40:	e7ba      	b.n	80219b8 <_dtoa_r+0x9d8>
 8021a42:	2201      	movs	r2, #1
 8021a44:	e7e2      	b.n	8021a0c <_dtoa_r+0xa2c>
 8021a46:	9b03      	ldr	r3, [sp, #12]
 8021a48:	2b00      	cmp	r3, #0
 8021a4a:	db04      	blt.n	8021a56 <_dtoa_r+0xa76>
 8021a4c:	9906      	ldr	r1, [sp, #24]
 8021a4e:	430b      	orrs	r3, r1
 8021a50:	9904      	ldr	r1, [sp, #16]
 8021a52:	430b      	orrs	r3, r1
 8021a54:	d122      	bne.n	8021a9c <_dtoa_r+0xabc>
 8021a56:	2a00      	cmp	r2, #0
 8021a58:	ddee      	ble.n	8021a38 <_dtoa_r+0xa58>
 8021a5a:	ee18 1a10 	vmov	r1, s16
 8021a5e:	2201      	movs	r2, #1
 8021a60:	4620      	mov	r0, r4
 8021a62:	f000 fce9 	bl	8022438 <__lshift>
 8021a66:	4631      	mov	r1, r6
 8021a68:	ee08 0a10 	vmov	s16, r0
 8021a6c:	f000 fd54 	bl	8022518 <__mcmp>
 8021a70:	2800      	cmp	r0, #0
 8021a72:	dc03      	bgt.n	8021a7c <_dtoa_r+0xa9c>
 8021a74:	d1e0      	bne.n	8021a38 <_dtoa_r+0xa58>
 8021a76:	f01a 0f01 	tst.w	sl, #1
 8021a7a:	d0dd      	beq.n	8021a38 <_dtoa_r+0xa58>
 8021a7c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8021a80:	d1d7      	bne.n	8021a32 <_dtoa_r+0xa52>
 8021a82:	2339      	movs	r3, #57	; 0x39
 8021a84:	f88b 3000 	strb.w	r3, [fp]
 8021a88:	462b      	mov	r3, r5
 8021a8a:	461d      	mov	r5, r3
 8021a8c:	3b01      	subs	r3, #1
 8021a8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8021a92:	2a39      	cmp	r2, #57	; 0x39
 8021a94:	d071      	beq.n	8021b7a <_dtoa_r+0xb9a>
 8021a96:	3201      	adds	r2, #1
 8021a98:	701a      	strb	r2, [r3, #0]
 8021a9a:	e746      	b.n	802192a <_dtoa_r+0x94a>
 8021a9c:	2a00      	cmp	r2, #0
 8021a9e:	dd07      	ble.n	8021ab0 <_dtoa_r+0xad0>
 8021aa0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8021aa4:	d0ed      	beq.n	8021a82 <_dtoa_r+0xaa2>
 8021aa6:	f10a 0301 	add.w	r3, sl, #1
 8021aaa:	f88b 3000 	strb.w	r3, [fp]
 8021aae:	e73c      	b.n	802192a <_dtoa_r+0x94a>
 8021ab0:	9b05      	ldr	r3, [sp, #20]
 8021ab2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8021ab6:	4599      	cmp	r9, r3
 8021ab8:	d047      	beq.n	8021b4a <_dtoa_r+0xb6a>
 8021aba:	ee18 1a10 	vmov	r1, s16
 8021abe:	2300      	movs	r3, #0
 8021ac0:	220a      	movs	r2, #10
 8021ac2:	4620      	mov	r0, r4
 8021ac4:	f000 fb08 	bl	80220d8 <__multadd>
 8021ac8:	45b8      	cmp	r8, r7
 8021aca:	ee08 0a10 	vmov	s16, r0
 8021ace:	f04f 0300 	mov.w	r3, #0
 8021ad2:	f04f 020a 	mov.w	r2, #10
 8021ad6:	4641      	mov	r1, r8
 8021ad8:	4620      	mov	r0, r4
 8021ada:	d106      	bne.n	8021aea <_dtoa_r+0xb0a>
 8021adc:	f000 fafc 	bl	80220d8 <__multadd>
 8021ae0:	4680      	mov	r8, r0
 8021ae2:	4607      	mov	r7, r0
 8021ae4:	f109 0901 	add.w	r9, r9, #1
 8021ae8:	e772      	b.n	80219d0 <_dtoa_r+0x9f0>
 8021aea:	f000 faf5 	bl	80220d8 <__multadd>
 8021aee:	4639      	mov	r1, r7
 8021af0:	4680      	mov	r8, r0
 8021af2:	2300      	movs	r3, #0
 8021af4:	220a      	movs	r2, #10
 8021af6:	4620      	mov	r0, r4
 8021af8:	f000 faee 	bl	80220d8 <__multadd>
 8021afc:	4607      	mov	r7, r0
 8021afe:	e7f1      	b.n	8021ae4 <_dtoa_r+0xb04>
 8021b00:	9b03      	ldr	r3, [sp, #12]
 8021b02:	9302      	str	r3, [sp, #8]
 8021b04:	9d01      	ldr	r5, [sp, #4]
 8021b06:	ee18 0a10 	vmov	r0, s16
 8021b0a:	4631      	mov	r1, r6
 8021b0c:	f7ff f9da 	bl	8020ec4 <quorem>
 8021b10:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8021b14:	9b01      	ldr	r3, [sp, #4]
 8021b16:	f805 ab01 	strb.w	sl, [r5], #1
 8021b1a:	1aea      	subs	r2, r5, r3
 8021b1c:	9b02      	ldr	r3, [sp, #8]
 8021b1e:	4293      	cmp	r3, r2
 8021b20:	dd09      	ble.n	8021b36 <_dtoa_r+0xb56>
 8021b22:	ee18 1a10 	vmov	r1, s16
 8021b26:	2300      	movs	r3, #0
 8021b28:	220a      	movs	r2, #10
 8021b2a:	4620      	mov	r0, r4
 8021b2c:	f000 fad4 	bl	80220d8 <__multadd>
 8021b30:	ee08 0a10 	vmov	s16, r0
 8021b34:	e7e7      	b.n	8021b06 <_dtoa_r+0xb26>
 8021b36:	9b02      	ldr	r3, [sp, #8]
 8021b38:	2b00      	cmp	r3, #0
 8021b3a:	bfc8      	it	gt
 8021b3c:	461d      	movgt	r5, r3
 8021b3e:	9b01      	ldr	r3, [sp, #4]
 8021b40:	bfd8      	it	le
 8021b42:	2501      	movle	r5, #1
 8021b44:	441d      	add	r5, r3
 8021b46:	f04f 0800 	mov.w	r8, #0
 8021b4a:	ee18 1a10 	vmov	r1, s16
 8021b4e:	2201      	movs	r2, #1
 8021b50:	4620      	mov	r0, r4
 8021b52:	f000 fc71 	bl	8022438 <__lshift>
 8021b56:	4631      	mov	r1, r6
 8021b58:	ee08 0a10 	vmov	s16, r0
 8021b5c:	f000 fcdc 	bl	8022518 <__mcmp>
 8021b60:	2800      	cmp	r0, #0
 8021b62:	dc91      	bgt.n	8021a88 <_dtoa_r+0xaa8>
 8021b64:	d102      	bne.n	8021b6c <_dtoa_r+0xb8c>
 8021b66:	f01a 0f01 	tst.w	sl, #1
 8021b6a:	d18d      	bne.n	8021a88 <_dtoa_r+0xaa8>
 8021b6c:	462b      	mov	r3, r5
 8021b6e:	461d      	mov	r5, r3
 8021b70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021b74:	2a30      	cmp	r2, #48	; 0x30
 8021b76:	d0fa      	beq.n	8021b6e <_dtoa_r+0xb8e>
 8021b78:	e6d7      	b.n	802192a <_dtoa_r+0x94a>
 8021b7a:	9a01      	ldr	r2, [sp, #4]
 8021b7c:	429a      	cmp	r2, r3
 8021b7e:	d184      	bne.n	8021a8a <_dtoa_r+0xaaa>
 8021b80:	9b00      	ldr	r3, [sp, #0]
 8021b82:	3301      	adds	r3, #1
 8021b84:	9300      	str	r3, [sp, #0]
 8021b86:	2331      	movs	r3, #49	; 0x31
 8021b88:	7013      	strb	r3, [r2, #0]
 8021b8a:	e6ce      	b.n	802192a <_dtoa_r+0x94a>
 8021b8c:	4b09      	ldr	r3, [pc, #36]	; (8021bb4 <_dtoa_r+0xbd4>)
 8021b8e:	f7ff ba95 	b.w	80210bc <_dtoa_r+0xdc>
 8021b92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021b94:	2b00      	cmp	r3, #0
 8021b96:	f47f aa6e 	bne.w	8021076 <_dtoa_r+0x96>
 8021b9a:	4b07      	ldr	r3, [pc, #28]	; (8021bb8 <_dtoa_r+0xbd8>)
 8021b9c:	f7ff ba8e 	b.w	80210bc <_dtoa_r+0xdc>
 8021ba0:	9b02      	ldr	r3, [sp, #8]
 8021ba2:	2b00      	cmp	r3, #0
 8021ba4:	dcae      	bgt.n	8021b04 <_dtoa_r+0xb24>
 8021ba6:	9b06      	ldr	r3, [sp, #24]
 8021ba8:	2b02      	cmp	r3, #2
 8021baa:	f73f aea8 	bgt.w	80218fe <_dtoa_r+0x91e>
 8021bae:	e7a9      	b.n	8021b04 <_dtoa_r+0xb24>
 8021bb0:	0802380f 	.word	0x0802380f
 8021bb4:	0802376c 	.word	0x0802376c
 8021bb8:	08023790 	.word	0x08023790

08021bbc <__sflush_r>:
 8021bbc:	898a      	ldrh	r2, [r1, #12]
 8021bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021bc2:	4605      	mov	r5, r0
 8021bc4:	0710      	lsls	r0, r2, #28
 8021bc6:	460c      	mov	r4, r1
 8021bc8:	d458      	bmi.n	8021c7c <__sflush_r+0xc0>
 8021bca:	684b      	ldr	r3, [r1, #4]
 8021bcc:	2b00      	cmp	r3, #0
 8021bce:	dc05      	bgt.n	8021bdc <__sflush_r+0x20>
 8021bd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8021bd2:	2b00      	cmp	r3, #0
 8021bd4:	dc02      	bgt.n	8021bdc <__sflush_r+0x20>
 8021bd6:	2000      	movs	r0, #0
 8021bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021bdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021bde:	2e00      	cmp	r6, #0
 8021be0:	d0f9      	beq.n	8021bd6 <__sflush_r+0x1a>
 8021be2:	2300      	movs	r3, #0
 8021be4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8021be8:	682f      	ldr	r7, [r5, #0]
 8021bea:	602b      	str	r3, [r5, #0]
 8021bec:	d032      	beq.n	8021c54 <__sflush_r+0x98>
 8021bee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8021bf0:	89a3      	ldrh	r3, [r4, #12]
 8021bf2:	075a      	lsls	r2, r3, #29
 8021bf4:	d505      	bpl.n	8021c02 <__sflush_r+0x46>
 8021bf6:	6863      	ldr	r3, [r4, #4]
 8021bf8:	1ac0      	subs	r0, r0, r3
 8021bfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021bfc:	b10b      	cbz	r3, 8021c02 <__sflush_r+0x46>
 8021bfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021c00:	1ac0      	subs	r0, r0, r3
 8021c02:	2300      	movs	r3, #0
 8021c04:	4602      	mov	r2, r0
 8021c06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021c08:	6a21      	ldr	r1, [r4, #32]
 8021c0a:	4628      	mov	r0, r5
 8021c0c:	47b0      	blx	r6
 8021c0e:	1c43      	adds	r3, r0, #1
 8021c10:	89a3      	ldrh	r3, [r4, #12]
 8021c12:	d106      	bne.n	8021c22 <__sflush_r+0x66>
 8021c14:	6829      	ldr	r1, [r5, #0]
 8021c16:	291d      	cmp	r1, #29
 8021c18:	d82c      	bhi.n	8021c74 <__sflush_r+0xb8>
 8021c1a:	4a2a      	ldr	r2, [pc, #168]	; (8021cc4 <__sflush_r+0x108>)
 8021c1c:	40ca      	lsrs	r2, r1
 8021c1e:	07d6      	lsls	r6, r2, #31
 8021c20:	d528      	bpl.n	8021c74 <__sflush_r+0xb8>
 8021c22:	2200      	movs	r2, #0
 8021c24:	6062      	str	r2, [r4, #4]
 8021c26:	04d9      	lsls	r1, r3, #19
 8021c28:	6922      	ldr	r2, [r4, #16]
 8021c2a:	6022      	str	r2, [r4, #0]
 8021c2c:	d504      	bpl.n	8021c38 <__sflush_r+0x7c>
 8021c2e:	1c42      	adds	r2, r0, #1
 8021c30:	d101      	bne.n	8021c36 <__sflush_r+0x7a>
 8021c32:	682b      	ldr	r3, [r5, #0]
 8021c34:	b903      	cbnz	r3, 8021c38 <__sflush_r+0x7c>
 8021c36:	6560      	str	r0, [r4, #84]	; 0x54
 8021c38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021c3a:	602f      	str	r7, [r5, #0]
 8021c3c:	2900      	cmp	r1, #0
 8021c3e:	d0ca      	beq.n	8021bd6 <__sflush_r+0x1a>
 8021c40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021c44:	4299      	cmp	r1, r3
 8021c46:	d002      	beq.n	8021c4e <__sflush_r+0x92>
 8021c48:	4628      	mov	r0, r5
 8021c4a:	f000 fd7d 	bl	8022748 <_free_r>
 8021c4e:	2000      	movs	r0, #0
 8021c50:	6360      	str	r0, [r4, #52]	; 0x34
 8021c52:	e7c1      	b.n	8021bd8 <__sflush_r+0x1c>
 8021c54:	6a21      	ldr	r1, [r4, #32]
 8021c56:	2301      	movs	r3, #1
 8021c58:	4628      	mov	r0, r5
 8021c5a:	47b0      	blx	r6
 8021c5c:	1c41      	adds	r1, r0, #1
 8021c5e:	d1c7      	bne.n	8021bf0 <__sflush_r+0x34>
 8021c60:	682b      	ldr	r3, [r5, #0]
 8021c62:	2b00      	cmp	r3, #0
 8021c64:	d0c4      	beq.n	8021bf0 <__sflush_r+0x34>
 8021c66:	2b1d      	cmp	r3, #29
 8021c68:	d001      	beq.n	8021c6e <__sflush_r+0xb2>
 8021c6a:	2b16      	cmp	r3, #22
 8021c6c:	d101      	bne.n	8021c72 <__sflush_r+0xb6>
 8021c6e:	602f      	str	r7, [r5, #0]
 8021c70:	e7b1      	b.n	8021bd6 <__sflush_r+0x1a>
 8021c72:	89a3      	ldrh	r3, [r4, #12]
 8021c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021c78:	81a3      	strh	r3, [r4, #12]
 8021c7a:	e7ad      	b.n	8021bd8 <__sflush_r+0x1c>
 8021c7c:	690f      	ldr	r7, [r1, #16]
 8021c7e:	2f00      	cmp	r7, #0
 8021c80:	d0a9      	beq.n	8021bd6 <__sflush_r+0x1a>
 8021c82:	0793      	lsls	r3, r2, #30
 8021c84:	680e      	ldr	r6, [r1, #0]
 8021c86:	bf08      	it	eq
 8021c88:	694b      	ldreq	r3, [r1, #20]
 8021c8a:	600f      	str	r7, [r1, #0]
 8021c8c:	bf18      	it	ne
 8021c8e:	2300      	movne	r3, #0
 8021c90:	eba6 0807 	sub.w	r8, r6, r7
 8021c94:	608b      	str	r3, [r1, #8]
 8021c96:	f1b8 0f00 	cmp.w	r8, #0
 8021c9a:	dd9c      	ble.n	8021bd6 <__sflush_r+0x1a>
 8021c9c:	6a21      	ldr	r1, [r4, #32]
 8021c9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021ca0:	4643      	mov	r3, r8
 8021ca2:	463a      	mov	r2, r7
 8021ca4:	4628      	mov	r0, r5
 8021ca6:	47b0      	blx	r6
 8021ca8:	2800      	cmp	r0, #0
 8021caa:	dc06      	bgt.n	8021cba <__sflush_r+0xfe>
 8021cac:	89a3      	ldrh	r3, [r4, #12]
 8021cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021cb2:	81a3      	strh	r3, [r4, #12]
 8021cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8021cb8:	e78e      	b.n	8021bd8 <__sflush_r+0x1c>
 8021cba:	4407      	add	r7, r0
 8021cbc:	eba8 0800 	sub.w	r8, r8, r0
 8021cc0:	e7e9      	b.n	8021c96 <__sflush_r+0xda>
 8021cc2:	bf00      	nop
 8021cc4:	20400001 	.word	0x20400001

08021cc8 <_fflush_r>:
 8021cc8:	b538      	push	{r3, r4, r5, lr}
 8021cca:	690b      	ldr	r3, [r1, #16]
 8021ccc:	4605      	mov	r5, r0
 8021cce:	460c      	mov	r4, r1
 8021cd0:	b913      	cbnz	r3, 8021cd8 <_fflush_r+0x10>
 8021cd2:	2500      	movs	r5, #0
 8021cd4:	4628      	mov	r0, r5
 8021cd6:	bd38      	pop	{r3, r4, r5, pc}
 8021cd8:	b118      	cbz	r0, 8021ce2 <_fflush_r+0x1a>
 8021cda:	6983      	ldr	r3, [r0, #24]
 8021cdc:	b90b      	cbnz	r3, 8021ce2 <_fflush_r+0x1a>
 8021cde:	f000 f887 	bl	8021df0 <__sinit>
 8021ce2:	4b14      	ldr	r3, [pc, #80]	; (8021d34 <_fflush_r+0x6c>)
 8021ce4:	429c      	cmp	r4, r3
 8021ce6:	d11b      	bne.n	8021d20 <_fflush_r+0x58>
 8021ce8:	686c      	ldr	r4, [r5, #4]
 8021cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021cee:	2b00      	cmp	r3, #0
 8021cf0:	d0ef      	beq.n	8021cd2 <_fflush_r+0xa>
 8021cf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8021cf4:	07d0      	lsls	r0, r2, #31
 8021cf6:	d404      	bmi.n	8021d02 <_fflush_r+0x3a>
 8021cf8:	0599      	lsls	r1, r3, #22
 8021cfa:	d402      	bmi.n	8021d02 <_fflush_r+0x3a>
 8021cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021cfe:	f000 f91a 	bl	8021f36 <__retarget_lock_acquire_recursive>
 8021d02:	4628      	mov	r0, r5
 8021d04:	4621      	mov	r1, r4
 8021d06:	f7ff ff59 	bl	8021bbc <__sflush_r>
 8021d0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021d0c:	07da      	lsls	r2, r3, #31
 8021d0e:	4605      	mov	r5, r0
 8021d10:	d4e0      	bmi.n	8021cd4 <_fflush_r+0xc>
 8021d12:	89a3      	ldrh	r3, [r4, #12]
 8021d14:	059b      	lsls	r3, r3, #22
 8021d16:	d4dd      	bmi.n	8021cd4 <_fflush_r+0xc>
 8021d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021d1a:	f000 f90d 	bl	8021f38 <__retarget_lock_release_recursive>
 8021d1e:	e7d9      	b.n	8021cd4 <_fflush_r+0xc>
 8021d20:	4b05      	ldr	r3, [pc, #20]	; (8021d38 <_fflush_r+0x70>)
 8021d22:	429c      	cmp	r4, r3
 8021d24:	d101      	bne.n	8021d2a <_fflush_r+0x62>
 8021d26:	68ac      	ldr	r4, [r5, #8]
 8021d28:	e7df      	b.n	8021cea <_fflush_r+0x22>
 8021d2a:	4b04      	ldr	r3, [pc, #16]	; (8021d3c <_fflush_r+0x74>)
 8021d2c:	429c      	cmp	r4, r3
 8021d2e:	bf08      	it	eq
 8021d30:	68ec      	ldreq	r4, [r5, #12]
 8021d32:	e7da      	b.n	8021cea <_fflush_r+0x22>
 8021d34:	08023840 	.word	0x08023840
 8021d38:	08023860 	.word	0x08023860
 8021d3c:	08023820 	.word	0x08023820

08021d40 <std>:
 8021d40:	2300      	movs	r3, #0
 8021d42:	b510      	push	{r4, lr}
 8021d44:	4604      	mov	r4, r0
 8021d46:	e9c0 3300 	strd	r3, r3, [r0]
 8021d4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021d4e:	6083      	str	r3, [r0, #8]
 8021d50:	8181      	strh	r1, [r0, #12]
 8021d52:	6643      	str	r3, [r0, #100]	; 0x64
 8021d54:	81c2      	strh	r2, [r0, #14]
 8021d56:	6183      	str	r3, [r0, #24]
 8021d58:	4619      	mov	r1, r3
 8021d5a:	2208      	movs	r2, #8
 8021d5c:	305c      	adds	r0, #92	; 0x5c
 8021d5e:	f7fe fadb 	bl	8020318 <memset>
 8021d62:	4b05      	ldr	r3, [pc, #20]	; (8021d78 <std+0x38>)
 8021d64:	6263      	str	r3, [r4, #36]	; 0x24
 8021d66:	4b05      	ldr	r3, [pc, #20]	; (8021d7c <std+0x3c>)
 8021d68:	62a3      	str	r3, [r4, #40]	; 0x28
 8021d6a:	4b05      	ldr	r3, [pc, #20]	; (8021d80 <std+0x40>)
 8021d6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021d6e:	4b05      	ldr	r3, [pc, #20]	; (8021d84 <std+0x44>)
 8021d70:	6224      	str	r4, [r4, #32]
 8021d72:	6323      	str	r3, [r4, #48]	; 0x30
 8021d74:	bd10      	pop	{r4, pc}
 8021d76:	bf00      	nop
 8021d78:	08022c6d 	.word	0x08022c6d
 8021d7c:	08022c8f 	.word	0x08022c8f
 8021d80:	08022cc7 	.word	0x08022cc7
 8021d84:	08022ceb 	.word	0x08022ceb

08021d88 <_cleanup_r>:
 8021d88:	4901      	ldr	r1, [pc, #4]	; (8021d90 <_cleanup_r+0x8>)
 8021d8a:	f000 b8af 	b.w	8021eec <_fwalk_reent>
 8021d8e:	bf00      	nop
 8021d90:	08021cc9 	.word	0x08021cc9

08021d94 <__sfmoreglue>:
 8021d94:	b570      	push	{r4, r5, r6, lr}
 8021d96:	2268      	movs	r2, #104	; 0x68
 8021d98:	1e4d      	subs	r5, r1, #1
 8021d9a:	4355      	muls	r5, r2
 8021d9c:	460e      	mov	r6, r1
 8021d9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8021da2:	f000 fd3d 	bl	8022820 <_malloc_r>
 8021da6:	4604      	mov	r4, r0
 8021da8:	b140      	cbz	r0, 8021dbc <__sfmoreglue+0x28>
 8021daa:	2100      	movs	r1, #0
 8021dac:	e9c0 1600 	strd	r1, r6, [r0]
 8021db0:	300c      	adds	r0, #12
 8021db2:	60a0      	str	r0, [r4, #8]
 8021db4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8021db8:	f7fe faae 	bl	8020318 <memset>
 8021dbc:	4620      	mov	r0, r4
 8021dbe:	bd70      	pop	{r4, r5, r6, pc}

08021dc0 <__sfp_lock_acquire>:
 8021dc0:	4801      	ldr	r0, [pc, #4]	; (8021dc8 <__sfp_lock_acquire+0x8>)
 8021dc2:	f000 b8b8 	b.w	8021f36 <__retarget_lock_acquire_recursive>
 8021dc6:	bf00      	nop
 8021dc8:	2000f90d 	.word	0x2000f90d

08021dcc <__sfp_lock_release>:
 8021dcc:	4801      	ldr	r0, [pc, #4]	; (8021dd4 <__sfp_lock_release+0x8>)
 8021dce:	f000 b8b3 	b.w	8021f38 <__retarget_lock_release_recursive>
 8021dd2:	bf00      	nop
 8021dd4:	2000f90d 	.word	0x2000f90d

08021dd8 <__sinit_lock_acquire>:
 8021dd8:	4801      	ldr	r0, [pc, #4]	; (8021de0 <__sinit_lock_acquire+0x8>)
 8021dda:	f000 b8ac 	b.w	8021f36 <__retarget_lock_acquire_recursive>
 8021dde:	bf00      	nop
 8021de0:	2000f90e 	.word	0x2000f90e

08021de4 <__sinit_lock_release>:
 8021de4:	4801      	ldr	r0, [pc, #4]	; (8021dec <__sinit_lock_release+0x8>)
 8021de6:	f000 b8a7 	b.w	8021f38 <__retarget_lock_release_recursive>
 8021dea:	bf00      	nop
 8021dec:	2000f90e 	.word	0x2000f90e

08021df0 <__sinit>:
 8021df0:	b510      	push	{r4, lr}
 8021df2:	4604      	mov	r4, r0
 8021df4:	f7ff fff0 	bl	8021dd8 <__sinit_lock_acquire>
 8021df8:	69a3      	ldr	r3, [r4, #24]
 8021dfa:	b11b      	cbz	r3, 8021e04 <__sinit+0x14>
 8021dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021e00:	f7ff bff0 	b.w	8021de4 <__sinit_lock_release>
 8021e04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8021e08:	6523      	str	r3, [r4, #80]	; 0x50
 8021e0a:	4b13      	ldr	r3, [pc, #76]	; (8021e58 <__sinit+0x68>)
 8021e0c:	4a13      	ldr	r2, [pc, #76]	; (8021e5c <__sinit+0x6c>)
 8021e0e:	681b      	ldr	r3, [r3, #0]
 8021e10:	62a2      	str	r2, [r4, #40]	; 0x28
 8021e12:	42a3      	cmp	r3, r4
 8021e14:	bf04      	itt	eq
 8021e16:	2301      	moveq	r3, #1
 8021e18:	61a3      	streq	r3, [r4, #24]
 8021e1a:	4620      	mov	r0, r4
 8021e1c:	f000 f820 	bl	8021e60 <__sfp>
 8021e20:	6060      	str	r0, [r4, #4]
 8021e22:	4620      	mov	r0, r4
 8021e24:	f000 f81c 	bl	8021e60 <__sfp>
 8021e28:	60a0      	str	r0, [r4, #8]
 8021e2a:	4620      	mov	r0, r4
 8021e2c:	f000 f818 	bl	8021e60 <__sfp>
 8021e30:	2200      	movs	r2, #0
 8021e32:	60e0      	str	r0, [r4, #12]
 8021e34:	2104      	movs	r1, #4
 8021e36:	6860      	ldr	r0, [r4, #4]
 8021e38:	f7ff ff82 	bl	8021d40 <std>
 8021e3c:	68a0      	ldr	r0, [r4, #8]
 8021e3e:	2201      	movs	r2, #1
 8021e40:	2109      	movs	r1, #9
 8021e42:	f7ff ff7d 	bl	8021d40 <std>
 8021e46:	68e0      	ldr	r0, [r4, #12]
 8021e48:	2202      	movs	r2, #2
 8021e4a:	2112      	movs	r1, #18
 8021e4c:	f7ff ff78 	bl	8021d40 <std>
 8021e50:	2301      	movs	r3, #1
 8021e52:	61a3      	str	r3, [r4, #24]
 8021e54:	e7d2      	b.n	8021dfc <__sinit+0xc>
 8021e56:	bf00      	nop
 8021e58:	08023758 	.word	0x08023758
 8021e5c:	08021d89 	.word	0x08021d89

08021e60 <__sfp>:
 8021e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021e62:	4607      	mov	r7, r0
 8021e64:	f7ff ffac 	bl	8021dc0 <__sfp_lock_acquire>
 8021e68:	4b1e      	ldr	r3, [pc, #120]	; (8021ee4 <__sfp+0x84>)
 8021e6a:	681e      	ldr	r6, [r3, #0]
 8021e6c:	69b3      	ldr	r3, [r6, #24]
 8021e6e:	b913      	cbnz	r3, 8021e76 <__sfp+0x16>
 8021e70:	4630      	mov	r0, r6
 8021e72:	f7ff ffbd 	bl	8021df0 <__sinit>
 8021e76:	3648      	adds	r6, #72	; 0x48
 8021e78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8021e7c:	3b01      	subs	r3, #1
 8021e7e:	d503      	bpl.n	8021e88 <__sfp+0x28>
 8021e80:	6833      	ldr	r3, [r6, #0]
 8021e82:	b30b      	cbz	r3, 8021ec8 <__sfp+0x68>
 8021e84:	6836      	ldr	r6, [r6, #0]
 8021e86:	e7f7      	b.n	8021e78 <__sfp+0x18>
 8021e88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8021e8c:	b9d5      	cbnz	r5, 8021ec4 <__sfp+0x64>
 8021e8e:	4b16      	ldr	r3, [pc, #88]	; (8021ee8 <__sfp+0x88>)
 8021e90:	60e3      	str	r3, [r4, #12]
 8021e92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8021e96:	6665      	str	r5, [r4, #100]	; 0x64
 8021e98:	f000 f84c 	bl	8021f34 <__retarget_lock_init_recursive>
 8021e9c:	f7ff ff96 	bl	8021dcc <__sfp_lock_release>
 8021ea0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8021ea4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8021ea8:	6025      	str	r5, [r4, #0]
 8021eaa:	61a5      	str	r5, [r4, #24]
 8021eac:	2208      	movs	r2, #8
 8021eae:	4629      	mov	r1, r5
 8021eb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021eb4:	f7fe fa30 	bl	8020318 <memset>
 8021eb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8021ebc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8021ec0:	4620      	mov	r0, r4
 8021ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021ec4:	3468      	adds	r4, #104	; 0x68
 8021ec6:	e7d9      	b.n	8021e7c <__sfp+0x1c>
 8021ec8:	2104      	movs	r1, #4
 8021eca:	4638      	mov	r0, r7
 8021ecc:	f7ff ff62 	bl	8021d94 <__sfmoreglue>
 8021ed0:	4604      	mov	r4, r0
 8021ed2:	6030      	str	r0, [r6, #0]
 8021ed4:	2800      	cmp	r0, #0
 8021ed6:	d1d5      	bne.n	8021e84 <__sfp+0x24>
 8021ed8:	f7ff ff78 	bl	8021dcc <__sfp_lock_release>
 8021edc:	230c      	movs	r3, #12
 8021ede:	603b      	str	r3, [r7, #0]
 8021ee0:	e7ee      	b.n	8021ec0 <__sfp+0x60>
 8021ee2:	bf00      	nop
 8021ee4:	08023758 	.word	0x08023758
 8021ee8:	ffff0001 	.word	0xffff0001

08021eec <_fwalk_reent>:
 8021eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021ef0:	4606      	mov	r6, r0
 8021ef2:	4688      	mov	r8, r1
 8021ef4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8021ef8:	2700      	movs	r7, #0
 8021efa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021efe:	f1b9 0901 	subs.w	r9, r9, #1
 8021f02:	d505      	bpl.n	8021f10 <_fwalk_reent+0x24>
 8021f04:	6824      	ldr	r4, [r4, #0]
 8021f06:	2c00      	cmp	r4, #0
 8021f08:	d1f7      	bne.n	8021efa <_fwalk_reent+0xe>
 8021f0a:	4638      	mov	r0, r7
 8021f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021f10:	89ab      	ldrh	r3, [r5, #12]
 8021f12:	2b01      	cmp	r3, #1
 8021f14:	d907      	bls.n	8021f26 <_fwalk_reent+0x3a>
 8021f16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021f1a:	3301      	adds	r3, #1
 8021f1c:	d003      	beq.n	8021f26 <_fwalk_reent+0x3a>
 8021f1e:	4629      	mov	r1, r5
 8021f20:	4630      	mov	r0, r6
 8021f22:	47c0      	blx	r8
 8021f24:	4307      	orrs	r7, r0
 8021f26:	3568      	adds	r5, #104	; 0x68
 8021f28:	e7e9      	b.n	8021efe <_fwalk_reent+0x12>
	...

08021f2c <_localeconv_r>:
 8021f2c:	4800      	ldr	r0, [pc, #0]	; (8021f30 <_localeconv_r+0x4>)
 8021f2e:	4770      	bx	lr
 8021f30:	20000180 	.word	0x20000180

08021f34 <__retarget_lock_init_recursive>:
 8021f34:	4770      	bx	lr

08021f36 <__retarget_lock_acquire_recursive>:
 8021f36:	4770      	bx	lr

08021f38 <__retarget_lock_release_recursive>:
 8021f38:	4770      	bx	lr

08021f3a <__swhatbuf_r>:
 8021f3a:	b570      	push	{r4, r5, r6, lr}
 8021f3c:	460e      	mov	r6, r1
 8021f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021f42:	2900      	cmp	r1, #0
 8021f44:	b096      	sub	sp, #88	; 0x58
 8021f46:	4614      	mov	r4, r2
 8021f48:	461d      	mov	r5, r3
 8021f4a:	da08      	bge.n	8021f5e <__swhatbuf_r+0x24>
 8021f4c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8021f50:	2200      	movs	r2, #0
 8021f52:	602a      	str	r2, [r5, #0]
 8021f54:	061a      	lsls	r2, r3, #24
 8021f56:	d410      	bmi.n	8021f7a <__swhatbuf_r+0x40>
 8021f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021f5c:	e00e      	b.n	8021f7c <__swhatbuf_r+0x42>
 8021f5e:	466a      	mov	r2, sp
 8021f60:	f000 ff1a 	bl	8022d98 <_fstat_r>
 8021f64:	2800      	cmp	r0, #0
 8021f66:	dbf1      	blt.n	8021f4c <__swhatbuf_r+0x12>
 8021f68:	9a01      	ldr	r2, [sp, #4]
 8021f6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8021f6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8021f72:	425a      	negs	r2, r3
 8021f74:	415a      	adcs	r2, r3
 8021f76:	602a      	str	r2, [r5, #0]
 8021f78:	e7ee      	b.n	8021f58 <__swhatbuf_r+0x1e>
 8021f7a:	2340      	movs	r3, #64	; 0x40
 8021f7c:	2000      	movs	r0, #0
 8021f7e:	6023      	str	r3, [r4, #0]
 8021f80:	b016      	add	sp, #88	; 0x58
 8021f82:	bd70      	pop	{r4, r5, r6, pc}

08021f84 <__smakebuf_r>:
 8021f84:	898b      	ldrh	r3, [r1, #12]
 8021f86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021f88:	079d      	lsls	r5, r3, #30
 8021f8a:	4606      	mov	r6, r0
 8021f8c:	460c      	mov	r4, r1
 8021f8e:	d507      	bpl.n	8021fa0 <__smakebuf_r+0x1c>
 8021f90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021f94:	6023      	str	r3, [r4, #0]
 8021f96:	6123      	str	r3, [r4, #16]
 8021f98:	2301      	movs	r3, #1
 8021f9a:	6163      	str	r3, [r4, #20]
 8021f9c:	b002      	add	sp, #8
 8021f9e:	bd70      	pop	{r4, r5, r6, pc}
 8021fa0:	ab01      	add	r3, sp, #4
 8021fa2:	466a      	mov	r2, sp
 8021fa4:	f7ff ffc9 	bl	8021f3a <__swhatbuf_r>
 8021fa8:	9900      	ldr	r1, [sp, #0]
 8021faa:	4605      	mov	r5, r0
 8021fac:	4630      	mov	r0, r6
 8021fae:	f000 fc37 	bl	8022820 <_malloc_r>
 8021fb2:	b948      	cbnz	r0, 8021fc8 <__smakebuf_r+0x44>
 8021fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021fb8:	059a      	lsls	r2, r3, #22
 8021fba:	d4ef      	bmi.n	8021f9c <__smakebuf_r+0x18>
 8021fbc:	f023 0303 	bic.w	r3, r3, #3
 8021fc0:	f043 0302 	orr.w	r3, r3, #2
 8021fc4:	81a3      	strh	r3, [r4, #12]
 8021fc6:	e7e3      	b.n	8021f90 <__smakebuf_r+0xc>
 8021fc8:	4b0d      	ldr	r3, [pc, #52]	; (8022000 <__smakebuf_r+0x7c>)
 8021fca:	62b3      	str	r3, [r6, #40]	; 0x28
 8021fcc:	89a3      	ldrh	r3, [r4, #12]
 8021fce:	6020      	str	r0, [r4, #0]
 8021fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021fd4:	81a3      	strh	r3, [r4, #12]
 8021fd6:	9b00      	ldr	r3, [sp, #0]
 8021fd8:	6163      	str	r3, [r4, #20]
 8021fda:	9b01      	ldr	r3, [sp, #4]
 8021fdc:	6120      	str	r0, [r4, #16]
 8021fde:	b15b      	cbz	r3, 8021ff8 <__smakebuf_r+0x74>
 8021fe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021fe4:	4630      	mov	r0, r6
 8021fe6:	f000 fee9 	bl	8022dbc <_isatty_r>
 8021fea:	b128      	cbz	r0, 8021ff8 <__smakebuf_r+0x74>
 8021fec:	89a3      	ldrh	r3, [r4, #12]
 8021fee:	f023 0303 	bic.w	r3, r3, #3
 8021ff2:	f043 0301 	orr.w	r3, r3, #1
 8021ff6:	81a3      	strh	r3, [r4, #12]
 8021ff8:	89a0      	ldrh	r0, [r4, #12]
 8021ffa:	4305      	orrs	r5, r0
 8021ffc:	81a5      	strh	r5, [r4, #12]
 8021ffe:	e7cd      	b.n	8021f9c <__smakebuf_r+0x18>
 8022000:	08021d89 	.word	0x08021d89

08022004 <malloc>:
 8022004:	4b02      	ldr	r3, [pc, #8]	; (8022010 <malloc+0xc>)
 8022006:	4601      	mov	r1, r0
 8022008:	6818      	ldr	r0, [r3, #0]
 802200a:	f000 bc09 	b.w	8022820 <_malloc_r>
 802200e:	bf00      	nop
 8022010:	2000002c 	.word	0x2000002c

08022014 <_Balloc>:
 8022014:	b570      	push	{r4, r5, r6, lr}
 8022016:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8022018:	4604      	mov	r4, r0
 802201a:	460d      	mov	r5, r1
 802201c:	b976      	cbnz	r6, 802203c <_Balloc+0x28>
 802201e:	2010      	movs	r0, #16
 8022020:	f7ff fff0 	bl	8022004 <malloc>
 8022024:	4602      	mov	r2, r0
 8022026:	6260      	str	r0, [r4, #36]	; 0x24
 8022028:	b920      	cbnz	r0, 8022034 <_Balloc+0x20>
 802202a:	4b18      	ldr	r3, [pc, #96]	; (802208c <_Balloc+0x78>)
 802202c:	4818      	ldr	r0, [pc, #96]	; (8022090 <_Balloc+0x7c>)
 802202e:	2166      	movs	r1, #102	; 0x66
 8022030:	f000 fe72 	bl	8022d18 <__assert_func>
 8022034:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8022038:	6006      	str	r6, [r0, #0]
 802203a:	60c6      	str	r6, [r0, #12]
 802203c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802203e:	68f3      	ldr	r3, [r6, #12]
 8022040:	b183      	cbz	r3, 8022064 <_Balloc+0x50>
 8022042:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022044:	68db      	ldr	r3, [r3, #12]
 8022046:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802204a:	b9b8      	cbnz	r0, 802207c <_Balloc+0x68>
 802204c:	2101      	movs	r1, #1
 802204e:	fa01 f605 	lsl.w	r6, r1, r5
 8022052:	1d72      	adds	r2, r6, #5
 8022054:	0092      	lsls	r2, r2, #2
 8022056:	4620      	mov	r0, r4
 8022058:	f000 fb60 	bl	802271c <_calloc_r>
 802205c:	b160      	cbz	r0, 8022078 <_Balloc+0x64>
 802205e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8022062:	e00e      	b.n	8022082 <_Balloc+0x6e>
 8022064:	2221      	movs	r2, #33	; 0x21
 8022066:	2104      	movs	r1, #4
 8022068:	4620      	mov	r0, r4
 802206a:	f000 fb57 	bl	802271c <_calloc_r>
 802206e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022070:	60f0      	str	r0, [r6, #12]
 8022072:	68db      	ldr	r3, [r3, #12]
 8022074:	2b00      	cmp	r3, #0
 8022076:	d1e4      	bne.n	8022042 <_Balloc+0x2e>
 8022078:	2000      	movs	r0, #0
 802207a:	bd70      	pop	{r4, r5, r6, pc}
 802207c:	6802      	ldr	r2, [r0, #0]
 802207e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8022082:	2300      	movs	r3, #0
 8022084:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8022088:	e7f7      	b.n	802207a <_Balloc+0x66>
 802208a:	bf00      	nop
 802208c:	0802379d 	.word	0x0802379d
 8022090:	08023880 	.word	0x08023880

08022094 <_Bfree>:
 8022094:	b570      	push	{r4, r5, r6, lr}
 8022096:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8022098:	4605      	mov	r5, r0
 802209a:	460c      	mov	r4, r1
 802209c:	b976      	cbnz	r6, 80220bc <_Bfree+0x28>
 802209e:	2010      	movs	r0, #16
 80220a0:	f7ff ffb0 	bl	8022004 <malloc>
 80220a4:	4602      	mov	r2, r0
 80220a6:	6268      	str	r0, [r5, #36]	; 0x24
 80220a8:	b920      	cbnz	r0, 80220b4 <_Bfree+0x20>
 80220aa:	4b09      	ldr	r3, [pc, #36]	; (80220d0 <_Bfree+0x3c>)
 80220ac:	4809      	ldr	r0, [pc, #36]	; (80220d4 <_Bfree+0x40>)
 80220ae:	218a      	movs	r1, #138	; 0x8a
 80220b0:	f000 fe32 	bl	8022d18 <__assert_func>
 80220b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80220b8:	6006      	str	r6, [r0, #0]
 80220ba:	60c6      	str	r6, [r0, #12]
 80220bc:	b13c      	cbz	r4, 80220ce <_Bfree+0x3a>
 80220be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80220c0:	6862      	ldr	r2, [r4, #4]
 80220c2:	68db      	ldr	r3, [r3, #12]
 80220c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80220c8:	6021      	str	r1, [r4, #0]
 80220ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80220ce:	bd70      	pop	{r4, r5, r6, pc}
 80220d0:	0802379d 	.word	0x0802379d
 80220d4:	08023880 	.word	0x08023880

080220d8 <__multadd>:
 80220d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80220dc:	690d      	ldr	r5, [r1, #16]
 80220de:	4607      	mov	r7, r0
 80220e0:	460c      	mov	r4, r1
 80220e2:	461e      	mov	r6, r3
 80220e4:	f101 0c14 	add.w	ip, r1, #20
 80220e8:	2000      	movs	r0, #0
 80220ea:	f8dc 3000 	ldr.w	r3, [ip]
 80220ee:	b299      	uxth	r1, r3
 80220f0:	fb02 6101 	mla	r1, r2, r1, r6
 80220f4:	0c1e      	lsrs	r6, r3, #16
 80220f6:	0c0b      	lsrs	r3, r1, #16
 80220f8:	fb02 3306 	mla	r3, r2, r6, r3
 80220fc:	b289      	uxth	r1, r1
 80220fe:	3001      	adds	r0, #1
 8022100:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8022104:	4285      	cmp	r5, r0
 8022106:	f84c 1b04 	str.w	r1, [ip], #4
 802210a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802210e:	dcec      	bgt.n	80220ea <__multadd+0x12>
 8022110:	b30e      	cbz	r6, 8022156 <__multadd+0x7e>
 8022112:	68a3      	ldr	r3, [r4, #8]
 8022114:	42ab      	cmp	r3, r5
 8022116:	dc19      	bgt.n	802214c <__multadd+0x74>
 8022118:	6861      	ldr	r1, [r4, #4]
 802211a:	4638      	mov	r0, r7
 802211c:	3101      	adds	r1, #1
 802211e:	f7ff ff79 	bl	8022014 <_Balloc>
 8022122:	4680      	mov	r8, r0
 8022124:	b928      	cbnz	r0, 8022132 <__multadd+0x5a>
 8022126:	4602      	mov	r2, r0
 8022128:	4b0c      	ldr	r3, [pc, #48]	; (802215c <__multadd+0x84>)
 802212a:	480d      	ldr	r0, [pc, #52]	; (8022160 <__multadd+0x88>)
 802212c:	21b5      	movs	r1, #181	; 0xb5
 802212e:	f000 fdf3 	bl	8022d18 <__assert_func>
 8022132:	6922      	ldr	r2, [r4, #16]
 8022134:	3202      	adds	r2, #2
 8022136:	f104 010c 	add.w	r1, r4, #12
 802213a:	0092      	lsls	r2, r2, #2
 802213c:	300c      	adds	r0, #12
 802213e:	f7fe f8dd 	bl	80202fc <memcpy>
 8022142:	4621      	mov	r1, r4
 8022144:	4638      	mov	r0, r7
 8022146:	f7ff ffa5 	bl	8022094 <_Bfree>
 802214a:	4644      	mov	r4, r8
 802214c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8022150:	3501      	adds	r5, #1
 8022152:	615e      	str	r6, [r3, #20]
 8022154:	6125      	str	r5, [r4, #16]
 8022156:	4620      	mov	r0, r4
 8022158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802215c:	0802380f 	.word	0x0802380f
 8022160:	08023880 	.word	0x08023880

08022164 <__hi0bits>:
 8022164:	0c03      	lsrs	r3, r0, #16
 8022166:	041b      	lsls	r3, r3, #16
 8022168:	b9d3      	cbnz	r3, 80221a0 <__hi0bits+0x3c>
 802216a:	0400      	lsls	r0, r0, #16
 802216c:	2310      	movs	r3, #16
 802216e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8022172:	bf04      	itt	eq
 8022174:	0200      	lsleq	r0, r0, #8
 8022176:	3308      	addeq	r3, #8
 8022178:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802217c:	bf04      	itt	eq
 802217e:	0100      	lsleq	r0, r0, #4
 8022180:	3304      	addeq	r3, #4
 8022182:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8022186:	bf04      	itt	eq
 8022188:	0080      	lsleq	r0, r0, #2
 802218a:	3302      	addeq	r3, #2
 802218c:	2800      	cmp	r0, #0
 802218e:	db05      	blt.n	802219c <__hi0bits+0x38>
 8022190:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8022194:	f103 0301 	add.w	r3, r3, #1
 8022198:	bf08      	it	eq
 802219a:	2320      	moveq	r3, #32
 802219c:	4618      	mov	r0, r3
 802219e:	4770      	bx	lr
 80221a0:	2300      	movs	r3, #0
 80221a2:	e7e4      	b.n	802216e <__hi0bits+0xa>

080221a4 <__lo0bits>:
 80221a4:	6803      	ldr	r3, [r0, #0]
 80221a6:	f013 0207 	ands.w	r2, r3, #7
 80221aa:	4601      	mov	r1, r0
 80221ac:	d00b      	beq.n	80221c6 <__lo0bits+0x22>
 80221ae:	07da      	lsls	r2, r3, #31
 80221b0:	d423      	bmi.n	80221fa <__lo0bits+0x56>
 80221b2:	0798      	lsls	r0, r3, #30
 80221b4:	bf49      	itett	mi
 80221b6:	085b      	lsrmi	r3, r3, #1
 80221b8:	089b      	lsrpl	r3, r3, #2
 80221ba:	2001      	movmi	r0, #1
 80221bc:	600b      	strmi	r3, [r1, #0]
 80221be:	bf5c      	itt	pl
 80221c0:	600b      	strpl	r3, [r1, #0]
 80221c2:	2002      	movpl	r0, #2
 80221c4:	4770      	bx	lr
 80221c6:	b298      	uxth	r0, r3
 80221c8:	b9a8      	cbnz	r0, 80221f6 <__lo0bits+0x52>
 80221ca:	0c1b      	lsrs	r3, r3, #16
 80221cc:	2010      	movs	r0, #16
 80221ce:	b2da      	uxtb	r2, r3
 80221d0:	b90a      	cbnz	r2, 80221d6 <__lo0bits+0x32>
 80221d2:	3008      	adds	r0, #8
 80221d4:	0a1b      	lsrs	r3, r3, #8
 80221d6:	071a      	lsls	r2, r3, #28
 80221d8:	bf04      	itt	eq
 80221da:	091b      	lsreq	r3, r3, #4
 80221dc:	3004      	addeq	r0, #4
 80221de:	079a      	lsls	r2, r3, #30
 80221e0:	bf04      	itt	eq
 80221e2:	089b      	lsreq	r3, r3, #2
 80221e4:	3002      	addeq	r0, #2
 80221e6:	07da      	lsls	r2, r3, #31
 80221e8:	d403      	bmi.n	80221f2 <__lo0bits+0x4e>
 80221ea:	085b      	lsrs	r3, r3, #1
 80221ec:	f100 0001 	add.w	r0, r0, #1
 80221f0:	d005      	beq.n	80221fe <__lo0bits+0x5a>
 80221f2:	600b      	str	r3, [r1, #0]
 80221f4:	4770      	bx	lr
 80221f6:	4610      	mov	r0, r2
 80221f8:	e7e9      	b.n	80221ce <__lo0bits+0x2a>
 80221fa:	2000      	movs	r0, #0
 80221fc:	4770      	bx	lr
 80221fe:	2020      	movs	r0, #32
 8022200:	4770      	bx	lr
	...

08022204 <__i2b>:
 8022204:	b510      	push	{r4, lr}
 8022206:	460c      	mov	r4, r1
 8022208:	2101      	movs	r1, #1
 802220a:	f7ff ff03 	bl	8022014 <_Balloc>
 802220e:	4602      	mov	r2, r0
 8022210:	b928      	cbnz	r0, 802221e <__i2b+0x1a>
 8022212:	4b05      	ldr	r3, [pc, #20]	; (8022228 <__i2b+0x24>)
 8022214:	4805      	ldr	r0, [pc, #20]	; (802222c <__i2b+0x28>)
 8022216:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802221a:	f000 fd7d 	bl	8022d18 <__assert_func>
 802221e:	2301      	movs	r3, #1
 8022220:	6144      	str	r4, [r0, #20]
 8022222:	6103      	str	r3, [r0, #16]
 8022224:	bd10      	pop	{r4, pc}
 8022226:	bf00      	nop
 8022228:	0802380f 	.word	0x0802380f
 802222c:	08023880 	.word	0x08023880

08022230 <__multiply>:
 8022230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022234:	4691      	mov	r9, r2
 8022236:	690a      	ldr	r2, [r1, #16]
 8022238:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802223c:	429a      	cmp	r2, r3
 802223e:	bfb8      	it	lt
 8022240:	460b      	movlt	r3, r1
 8022242:	460c      	mov	r4, r1
 8022244:	bfbc      	itt	lt
 8022246:	464c      	movlt	r4, r9
 8022248:	4699      	movlt	r9, r3
 802224a:	6927      	ldr	r7, [r4, #16]
 802224c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8022250:	68a3      	ldr	r3, [r4, #8]
 8022252:	6861      	ldr	r1, [r4, #4]
 8022254:	eb07 060a 	add.w	r6, r7, sl
 8022258:	42b3      	cmp	r3, r6
 802225a:	b085      	sub	sp, #20
 802225c:	bfb8      	it	lt
 802225e:	3101      	addlt	r1, #1
 8022260:	f7ff fed8 	bl	8022014 <_Balloc>
 8022264:	b930      	cbnz	r0, 8022274 <__multiply+0x44>
 8022266:	4602      	mov	r2, r0
 8022268:	4b44      	ldr	r3, [pc, #272]	; (802237c <__multiply+0x14c>)
 802226a:	4845      	ldr	r0, [pc, #276]	; (8022380 <__multiply+0x150>)
 802226c:	f240 115d 	movw	r1, #349	; 0x15d
 8022270:	f000 fd52 	bl	8022d18 <__assert_func>
 8022274:	f100 0514 	add.w	r5, r0, #20
 8022278:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802227c:	462b      	mov	r3, r5
 802227e:	2200      	movs	r2, #0
 8022280:	4543      	cmp	r3, r8
 8022282:	d321      	bcc.n	80222c8 <__multiply+0x98>
 8022284:	f104 0314 	add.w	r3, r4, #20
 8022288:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 802228c:	f109 0314 	add.w	r3, r9, #20
 8022290:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8022294:	9202      	str	r2, [sp, #8]
 8022296:	1b3a      	subs	r2, r7, r4
 8022298:	3a15      	subs	r2, #21
 802229a:	f022 0203 	bic.w	r2, r2, #3
 802229e:	3204      	adds	r2, #4
 80222a0:	f104 0115 	add.w	r1, r4, #21
 80222a4:	428f      	cmp	r7, r1
 80222a6:	bf38      	it	cc
 80222a8:	2204      	movcc	r2, #4
 80222aa:	9201      	str	r2, [sp, #4]
 80222ac:	9a02      	ldr	r2, [sp, #8]
 80222ae:	9303      	str	r3, [sp, #12]
 80222b0:	429a      	cmp	r2, r3
 80222b2:	d80c      	bhi.n	80222ce <__multiply+0x9e>
 80222b4:	2e00      	cmp	r6, #0
 80222b6:	dd03      	ble.n	80222c0 <__multiply+0x90>
 80222b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80222bc:	2b00      	cmp	r3, #0
 80222be:	d05a      	beq.n	8022376 <__multiply+0x146>
 80222c0:	6106      	str	r6, [r0, #16]
 80222c2:	b005      	add	sp, #20
 80222c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80222c8:	f843 2b04 	str.w	r2, [r3], #4
 80222cc:	e7d8      	b.n	8022280 <__multiply+0x50>
 80222ce:	f8b3 a000 	ldrh.w	sl, [r3]
 80222d2:	f1ba 0f00 	cmp.w	sl, #0
 80222d6:	d024      	beq.n	8022322 <__multiply+0xf2>
 80222d8:	f104 0e14 	add.w	lr, r4, #20
 80222dc:	46a9      	mov	r9, r5
 80222de:	f04f 0c00 	mov.w	ip, #0
 80222e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80222e6:	f8d9 1000 	ldr.w	r1, [r9]
 80222ea:	fa1f fb82 	uxth.w	fp, r2
 80222ee:	b289      	uxth	r1, r1
 80222f0:	fb0a 110b 	mla	r1, sl, fp, r1
 80222f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80222f8:	f8d9 2000 	ldr.w	r2, [r9]
 80222fc:	4461      	add	r1, ip
 80222fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8022302:	fb0a c20b 	mla	r2, sl, fp, ip
 8022306:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802230a:	b289      	uxth	r1, r1
 802230c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8022310:	4577      	cmp	r7, lr
 8022312:	f849 1b04 	str.w	r1, [r9], #4
 8022316:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802231a:	d8e2      	bhi.n	80222e2 <__multiply+0xb2>
 802231c:	9a01      	ldr	r2, [sp, #4]
 802231e:	f845 c002 	str.w	ip, [r5, r2]
 8022322:	9a03      	ldr	r2, [sp, #12]
 8022324:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8022328:	3304      	adds	r3, #4
 802232a:	f1b9 0f00 	cmp.w	r9, #0
 802232e:	d020      	beq.n	8022372 <__multiply+0x142>
 8022330:	6829      	ldr	r1, [r5, #0]
 8022332:	f104 0c14 	add.w	ip, r4, #20
 8022336:	46ae      	mov	lr, r5
 8022338:	f04f 0a00 	mov.w	sl, #0
 802233c:	f8bc b000 	ldrh.w	fp, [ip]
 8022340:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8022344:	fb09 220b 	mla	r2, r9, fp, r2
 8022348:	4492      	add	sl, r2
 802234a:	b289      	uxth	r1, r1
 802234c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8022350:	f84e 1b04 	str.w	r1, [lr], #4
 8022354:	f85c 2b04 	ldr.w	r2, [ip], #4
 8022358:	f8be 1000 	ldrh.w	r1, [lr]
 802235c:	0c12      	lsrs	r2, r2, #16
 802235e:	fb09 1102 	mla	r1, r9, r2, r1
 8022362:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8022366:	4567      	cmp	r7, ip
 8022368:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802236c:	d8e6      	bhi.n	802233c <__multiply+0x10c>
 802236e:	9a01      	ldr	r2, [sp, #4]
 8022370:	50a9      	str	r1, [r5, r2]
 8022372:	3504      	adds	r5, #4
 8022374:	e79a      	b.n	80222ac <__multiply+0x7c>
 8022376:	3e01      	subs	r6, #1
 8022378:	e79c      	b.n	80222b4 <__multiply+0x84>
 802237a:	bf00      	nop
 802237c:	0802380f 	.word	0x0802380f
 8022380:	08023880 	.word	0x08023880

08022384 <__pow5mult>:
 8022384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022388:	4615      	mov	r5, r2
 802238a:	f012 0203 	ands.w	r2, r2, #3
 802238e:	4606      	mov	r6, r0
 8022390:	460f      	mov	r7, r1
 8022392:	d007      	beq.n	80223a4 <__pow5mult+0x20>
 8022394:	4c25      	ldr	r4, [pc, #148]	; (802242c <__pow5mult+0xa8>)
 8022396:	3a01      	subs	r2, #1
 8022398:	2300      	movs	r3, #0
 802239a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802239e:	f7ff fe9b 	bl	80220d8 <__multadd>
 80223a2:	4607      	mov	r7, r0
 80223a4:	10ad      	asrs	r5, r5, #2
 80223a6:	d03d      	beq.n	8022424 <__pow5mult+0xa0>
 80223a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80223aa:	b97c      	cbnz	r4, 80223cc <__pow5mult+0x48>
 80223ac:	2010      	movs	r0, #16
 80223ae:	f7ff fe29 	bl	8022004 <malloc>
 80223b2:	4602      	mov	r2, r0
 80223b4:	6270      	str	r0, [r6, #36]	; 0x24
 80223b6:	b928      	cbnz	r0, 80223c4 <__pow5mult+0x40>
 80223b8:	4b1d      	ldr	r3, [pc, #116]	; (8022430 <__pow5mult+0xac>)
 80223ba:	481e      	ldr	r0, [pc, #120]	; (8022434 <__pow5mult+0xb0>)
 80223bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80223c0:	f000 fcaa 	bl	8022d18 <__assert_func>
 80223c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80223c8:	6004      	str	r4, [r0, #0]
 80223ca:	60c4      	str	r4, [r0, #12]
 80223cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80223d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80223d4:	b94c      	cbnz	r4, 80223ea <__pow5mult+0x66>
 80223d6:	f240 2171 	movw	r1, #625	; 0x271
 80223da:	4630      	mov	r0, r6
 80223dc:	f7ff ff12 	bl	8022204 <__i2b>
 80223e0:	2300      	movs	r3, #0
 80223e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80223e6:	4604      	mov	r4, r0
 80223e8:	6003      	str	r3, [r0, #0]
 80223ea:	f04f 0900 	mov.w	r9, #0
 80223ee:	07eb      	lsls	r3, r5, #31
 80223f0:	d50a      	bpl.n	8022408 <__pow5mult+0x84>
 80223f2:	4639      	mov	r1, r7
 80223f4:	4622      	mov	r2, r4
 80223f6:	4630      	mov	r0, r6
 80223f8:	f7ff ff1a 	bl	8022230 <__multiply>
 80223fc:	4639      	mov	r1, r7
 80223fe:	4680      	mov	r8, r0
 8022400:	4630      	mov	r0, r6
 8022402:	f7ff fe47 	bl	8022094 <_Bfree>
 8022406:	4647      	mov	r7, r8
 8022408:	106d      	asrs	r5, r5, #1
 802240a:	d00b      	beq.n	8022424 <__pow5mult+0xa0>
 802240c:	6820      	ldr	r0, [r4, #0]
 802240e:	b938      	cbnz	r0, 8022420 <__pow5mult+0x9c>
 8022410:	4622      	mov	r2, r4
 8022412:	4621      	mov	r1, r4
 8022414:	4630      	mov	r0, r6
 8022416:	f7ff ff0b 	bl	8022230 <__multiply>
 802241a:	6020      	str	r0, [r4, #0]
 802241c:	f8c0 9000 	str.w	r9, [r0]
 8022420:	4604      	mov	r4, r0
 8022422:	e7e4      	b.n	80223ee <__pow5mult+0x6a>
 8022424:	4638      	mov	r0, r7
 8022426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802242a:	bf00      	nop
 802242c:	080239d0 	.word	0x080239d0
 8022430:	0802379d 	.word	0x0802379d
 8022434:	08023880 	.word	0x08023880

08022438 <__lshift>:
 8022438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802243c:	460c      	mov	r4, r1
 802243e:	6849      	ldr	r1, [r1, #4]
 8022440:	6923      	ldr	r3, [r4, #16]
 8022442:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8022446:	68a3      	ldr	r3, [r4, #8]
 8022448:	4607      	mov	r7, r0
 802244a:	4691      	mov	r9, r2
 802244c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8022450:	f108 0601 	add.w	r6, r8, #1
 8022454:	42b3      	cmp	r3, r6
 8022456:	db0b      	blt.n	8022470 <__lshift+0x38>
 8022458:	4638      	mov	r0, r7
 802245a:	f7ff fddb 	bl	8022014 <_Balloc>
 802245e:	4605      	mov	r5, r0
 8022460:	b948      	cbnz	r0, 8022476 <__lshift+0x3e>
 8022462:	4602      	mov	r2, r0
 8022464:	4b2a      	ldr	r3, [pc, #168]	; (8022510 <__lshift+0xd8>)
 8022466:	482b      	ldr	r0, [pc, #172]	; (8022514 <__lshift+0xdc>)
 8022468:	f240 11d9 	movw	r1, #473	; 0x1d9
 802246c:	f000 fc54 	bl	8022d18 <__assert_func>
 8022470:	3101      	adds	r1, #1
 8022472:	005b      	lsls	r3, r3, #1
 8022474:	e7ee      	b.n	8022454 <__lshift+0x1c>
 8022476:	2300      	movs	r3, #0
 8022478:	f100 0114 	add.w	r1, r0, #20
 802247c:	f100 0210 	add.w	r2, r0, #16
 8022480:	4618      	mov	r0, r3
 8022482:	4553      	cmp	r3, sl
 8022484:	db37      	blt.n	80224f6 <__lshift+0xbe>
 8022486:	6920      	ldr	r0, [r4, #16]
 8022488:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802248c:	f104 0314 	add.w	r3, r4, #20
 8022490:	f019 091f 	ands.w	r9, r9, #31
 8022494:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8022498:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 802249c:	d02f      	beq.n	80224fe <__lshift+0xc6>
 802249e:	f1c9 0e20 	rsb	lr, r9, #32
 80224a2:	468a      	mov	sl, r1
 80224a4:	f04f 0c00 	mov.w	ip, #0
 80224a8:	681a      	ldr	r2, [r3, #0]
 80224aa:	fa02 f209 	lsl.w	r2, r2, r9
 80224ae:	ea42 020c 	orr.w	r2, r2, ip
 80224b2:	f84a 2b04 	str.w	r2, [sl], #4
 80224b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80224ba:	4298      	cmp	r0, r3
 80224bc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80224c0:	d8f2      	bhi.n	80224a8 <__lshift+0x70>
 80224c2:	1b03      	subs	r3, r0, r4
 80224c4:	3b15      	subs	r3, #21
 80224c6:	f023 0303 	bic.w	r3, r3, #3
 80224ca:	3304      	adds	r3, #4
 80224cc:	f104 0215 	add.w	r2, r4, #21
 80224d0:	4290      	cmp	r0, r2
 80224d2:	bf38      	it	cc
 80224d4:	2304      	movcc	r3, #4
 80224d6:	f841 c003 	str.w	ip, [r1, r3]
 80224da:	f1bc 0f00 	cmp.w	ip, #0
 80224de:	d001      	beq.n	80224e4 <__lshift+0xac>
 80224e0:	f108 0602 	add.w	r6, r8, #2
 80224e4:	3e01      	subs	r6, #1
 80224e6:	4638      	mov	r0, r7
 80224e8:	612e      	str	r6, [r5, #16]
 80224ea:	4621      	mov	r1, r4
 80224ec:	f7ff fdd2 	bl	8022094 <_Bfree>
 80224f0:	4628      	mov	r0, r5
 80224f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80224f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80224fa:	3301      	adds	r3, #1
 80224fc:	e7c1      	b.n	8022482 <__lshift+0x4a>
 80224fe:	3904      	subs	r1, #4
 8022500:	f853 2b04 	ldr.w	r2, [r3], #4
 8022504:	f841 2f04 	str.w	r2, [r1, #4]!
 8022508:	4298      	cmp	r0, r3
 802250a:	d8f9      	bhi.n	8022500 <__lshift+0xc8>
 802250c:	e7ea      	b.n	80224e4 <__lshift+0xac>
 802250e:	bf00      	nop
 8022510:	0802380f 	.word	0x0802380f
 8022514:	08023880 	.word	0x08023880

08022518 <__mcmp>:
 8022518:	b530      	push	{r4, r5, lr}
 802251a:	6902      	ldr	r2, [r0, #16]
 802251c:	690c      	ldr	r4, [r1, #16]
 802251e:	1b12      	subs	r2, r2, r4
 8022520:	d10e      	bne.n	8022540 <__mcmp+0x28>
 8022522:	f100 0314 	add.w	r3, r0, #20
 8022526:	3114      	adds	r1, #20
 8022528:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802252c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8022530:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8022534:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8022538:	42a5      	cmp	r5, r4
 802253a:	d003      	beq.n	8022544 <__mcmp+0x2c>
 802253c:	d305      	bcc.n	802254a <__mcmp+0x32>
 802253e:	2201      	movs	r2, #1
 8022540:	4610      	mov	r0, r2
 8022542:	bd30      	pop	{r4, r5, pc}
 8022544:	4283      	cmp	r3, r0
 8022546:	d3f3      	bcc.n	8022530 <__mcmp+0x18>
 8022548:	e7fa      	b.n	8022540 <__mcmp+0x28>
 802254a:	f04f 32ff 	mov.w	r2, #4294967295
 802254e:	e7f7      	b.n	8022540 <__mcmp+0x28>

08022550 <__mdiff>:
 8022550:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022554:	460c      	mov	r4, r1
 8022556:	4606      	mov	r6, r0
 8022558:	4611      	mov	r1, r2
 802255a:	4620      	mov	r0, r4
 802255c:	4690      	mov	r8, r2
 802255e:	f7ff ffdb 	bl	8022518 <__mcmp>
 8022562:	1e05      	subs	r5, r0, #0
 8022564:	d110      	bne.n	8022588 <__mdiff+0x38>
 8022566:	4629      	mov	r1, r5
 8022568:	4630      	mov	r0, r6
 802256a:	f7ff fd53 	bl	8022014 <_Balloc>
 802256e:	b930      	cbnz	r0, 802257e <__mdiff+0x2e>
 8022570:	4b3a      	ldr	r3, [pc, #232]	; (802265c <__mdiff+0x10c>)
 8022572:	4602      	mov	r2, r0
 8022574:	f240 2132 	movw	r1, #562	; 0x232
 8022578:	4839      	ldr	r0, [pc, #228]	; (8022660 <__mdiff+0x110>)
 802257a:	f000 fbcd 	bl	8022d18 <__assert_func>
 802257e:	2301      	movs	r3, #1
 8022580:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8022584:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022588:	bfa4      	itt	ge
 802258a:	4643      	movge	r3, r8
 802258c:	46a0      	movge	r8, r4
 802258e:	4630      	mov	r0, r6
 8022590:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8022594:	bfa6      	itte	ge
 8022596:	461c      	movge	r4, r3
 8022598:	2500      	movge	r5, #0
 802259a:	2501      	movlt	r5, #1
 802259c:	f7ff fd3a 	bl	8022014 <_Balloc>
 80225a0:	b920      	cbnz	r0, 80225ac <__mdiff+0x5c>
 80225a2:	4b2e      	ldr	r3, [pc, #184]	; (802265c <__mdiff+0x10c>)
 80225a4:	4602      	mov	r2, r0
 80225a6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80225aa:	e7e5      	b.n	8022578 <__mdiff+0x28>
 80225ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80225b0:	6926      	ldr	r6, [r4, #16]
 80225b2:	60c5      	str	r5, [r0, #12]
 80225b4:	f104 0914 	add.w	r9, r4, #20
 80225b8:	f108 0514 	add.w	r5, r8, #20
 80225bc:	f100 0e14 	add.w	lr, r0, #20
 80225c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80225c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80225c8:	f108 0210 	add.w	r2, r8, #16
 80225cc:	46f2      	mov	sl, lr
 80225ce:	2100      	movs	r1, #0
 80225d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80225d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80225d8:	fa1f f883 	uxth.w	r8, r3
 80225dc:	fa11 f18b 	uxtah	r1, r1, fp
 80225e0:	0c1b      	lsrs	r3, r3, #16
 80225e2:	eba1 0808 	sub.w	r8, r1, r8
 80225e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80225ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80225ee:	fa1f f888 	uxth.w	r8, r8
 80225f2:	1419      	asrs	r1, r3, #16
 80225f4:	454e      	cmp	r6, r9
 80225f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80225fa:	f84a 3b04 	str.w	r3, [sl], #4
 80225fe:	d8e7      	bhi.n	80225d0 <__mdiff+0x80>
 8022600:	1b33      	subs	r3, r6, r4
 8022602:	3b15      	subs	r3, #21
 8022604:	f023 0303 	bic.w	r3, r3, #3
 8022608:	3304      	adds	r3, #4
 802260a:	3415      	adds	r4, #21
 802260c:	42a6      	cmp	r6, r4
 802260e:	bf38      	it	cc
 8022610:	2304      	movcc	r3, #4
 8022612:	441d      	add	r5, r3
 8022614:	4473      	add	r3, lr
 8022616:	469e      	mov	lr, r3
 8022618:	462e      	mov	r6, r5
 802261a:	4566      	cmp	r6, ip
 802261c:	d30e      	bcc.n	802263c <__mdiff+0xec>
 802261e:	f10c 0203 	add.w	r2, ip, #3
 8022622:	1b52      	subs	r2, r2, r5
 8022624:	f022 0203 	bic.w	r2, r2, #3
 8022628:	3d03      	subs	r5, #3
 802262a:	45ac      	cmp	ip, r5
 802262c:	bf38      	it	cc
 802262e:	2200      	movcc	r2, #0
 8022630:	441a      	add	r2, r3
 8022632:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8022636:	b17b      	cbz	r3, 8022658 <__mdiff+0x108>
 8022638:	6107      	str	r7, [r0, #16]
 802263a:	e7a3      	b.n	8022584 <__mdiff+0x34>
 802263c:	f856 8b04 	ldr.w	r8, [r6], #4
 8022640:	fa11 f288 	uxtah	r2, r1, r8
 8022644:	1414      	asrs	r4, r2, #16
 8022646:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802264a:	b292      	uxth	r2, r2
 802264c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8022650:	f84e 2b04 	str.w	r2, [lr], #4
 8022654:	1421      	asrs	r1, r4, #16
 8022656:	e7e0      	b.n	802261a <__mdiff+0xca>
 8022658:	3f01      	subs	r7, #1
 802265a:	e7ea      	b.n	8022632 <__mdiff+0xe2>
 802265c:	0802380f 	.word	0x0802380f
 8022660:	08023880 	.word	0x08023880

08022664 <__d2b>:
 8022664:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022668:	4689      	mov	r9, r1
 802266a:	2101      	movs	r1, #1
 802266c:	ec57 6b10 	vmov	r6, r7, d0
 8022670:	4690      	mov	r8, r2
 8022672:	f7ff fccf 	bl	8022014 <_Balloc>
 8022676:	4604      	mov	r4, r0
 8022678:	b930      	cbnz	r0, 8022688 <__d2b+0x24>
 802267a:	4602      	mov	r2, r0
 802267c:	4b25      	ldr	r3, [pc, #148]	; (8022714 <__d2b+0xb0>)
 802267e:	4826      	ldr	r0, [pc, #152]	; (8022718 <__d2b+0xb4>)
 8022680:	f240 310a 	movw	r1, #778	; 0x30a
 8022684:	f000 fb48 	bl	8022d18 <__assert_func>
 8022688:	f3c7 550a 	ubfx	r5, r7, #20, #11
 802268c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8022690:	bb35      	cbnz	r5, 80226e0 <__d2b+0x7c>
 8022692:	2e00      	cmp	r6, #0
 8022694:	9301      	str	r3, [sp, #4]
 8022696:	d028      	beq.n	80226ea <__d2b+0x86>
 8022698:	4668      	mov	r0, sp
 802269a:	9600      	str	r6, [sp, #0]
 802269c:	f7ff fd82 	bl	80221a4 <__lo0bits>
 80226a0:	9900      	ldr	r1, [sp, #0]
 80226a2:	b300      	cbz	r0, 80226e6 <__d2b+0x82>
 80226a4:	9a01      	ldr	r2, [sp, #4]
 80226a6:	f1c0 0320 	rsb	r3, r0, #32
 80226aa:	fa02 f303 	lsl.w	r3, r2, r3
 80226ae:	430b      	orrs	r3, r1
 80226b0:	40c2      	lsrs	r2, r0
 80226b2:	6163      	str	r3, [r4, #20]
 80226b4:	9201      	str	r2, [sp, #4]
 80226b6:	9b01      	ldr	r3, [sp, #4]
 80226b8:	61a3      	str	r3, [r4, #24]
 80226ba:	2b00      	cmp	r3, #0
 80226bc:	bf14      	ite	ne
 80226be:	2202      	movne	r2, #2
 80226c0:	2201      	moveq	r2, #1
 80226c2:	6122      	str	r2, [r4, #16]
 80226c4:	b1d5      	cbz	r5, 80226fc <__d2b+0x98>
 80226c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80226ca:	4405      	add	r5, r0
 80226cc:	f8c9 5000 	str.w	r5, [r9]
 80226d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80226d4:	f8c8 0000 	str.w	r0, [r8]
 80226d8:	4620      	mov	r0, r4
 80226da:	b003      	add	sp, #12
 80226dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80226e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80226e4:	e7d5      	b.n	8022692 <__d2b+0x2e>
 80226e6:	6161      	str	r1, [r4, #20]
 80226e8:	e7e5      	b.n	80226b6 <__d2b+0x52>
 80226ea:	a801      	add	r0, sp, #4
 80226ec:	f7ff fd5a 	bl	80221a4 <__lo0bits>
 80226f0:	9b01      	ldr	r3, [sp, #4]
 80226f2:	6163      	str	r3, [r4, #20]
 80226f4:	2201      	movs	r2, #1
 80226f6:	6122      	str	r2, [r4, #16]
 80226f8:	3020      	adds	r0, #32
 80226fa:	e7e3      	b.n	80226c4 <__d2b+0x60>
 80226fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8022700:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8022704:	f8c9 0000 	str.w	r0, [r9]
 8022708:	6918      	ldr	r0, [r3, #16]
 802270a:	f7ff fd2b 	bl	8022164 <__hi0bits>
 802270e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8022712:	e7df      	b.n	80226d4 <__d2b+0x70>
 8022714:	0802380f 	.word	0x0802380f
 8022718:	08023880 	.word	0x08023880

0802271c <_calloc_r>:
 802271c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802271e:	fba1 2402 	umull	r2, r4, r1, r2
 8022722:	b94c      	cbnz	r4, 8022738 <_calloc_r+0x1c>
 8022724:	4611      	mov	r1, r2
 8022726:	9201      	str	r2, [sp, #4]
 8022728:	f000 f87a 	bl	8022820 <_malloc_r>
 802272c:	9a01      	ldr	r2, [sp, #4]
 802272e:	4605      	mov	r5, r0
 8022730:	b930      	cbnz	r0, 8022740 <_calloc_r+0x24>
 8022732:	4628      	mov	r0, r5
 8022734:	b003      	add	sp, #12
 8022736:	bd30      	pop	{r4, r5, pc}
 8022738:	220c      	movs	r2, #12
 802273a:	6002      	str	r2, [r0, #0]
 802273c:	2500      	movs	r5, #0
 802273e:	e7f8      	b.n	8022732 <_calloc_r+0x16>
 8022740:	4621      	mov	r1, r4
 8022742:	f7fd fde9 	bl	8020318 <memset>
 8022746:	e7f4      	b.n	8022732 <_calloc_r+0x16>

08022748 <_free_r>:
 8022748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802274a:	2900      	cmp	r1, #0
 802274c:	d044      	beq.n	80227d8 <_free_r+0x90>
 802274e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022752:	9001      	str	r0, [sp, #4]
 8022754:	2b00      	cmp	r3, #0
 8022756:	f1a1 0404 	sub.w	r4, r1, #4
 802275a:	bfb8      	it	lt
 802275c:	18e4      	addlt	r4, r4, r3
 802275e:	f000 fb61 	bl	8022e24 <__malloc_lock>
 8022762:	4a1e      	ldr	r2, [pc, #120]	; (80227dc <_free_r+0x94>)
 8022764:	9801      	ldr	r0, [sp, #4]
 8022766:	6813      	ldr	r3, [r2, #0]
 8022768:	b933      	cbnz	r3, 8022778 <_free_r+0x30>
 802276a:	6063      	str	r3, [r4, #4]
 802276c:	6014      	str	r4, [r2, #0]
 802276e:	b003      	add	sp, #12
 8022770:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022774:	f000 bb5c 	b.w	8022e30 <__malloc_unlock>
 8022778:	42a3      	cmp	r3, r4
 802277a:	d908      	bls.n	802278e <_free_r+0x46>
 802277c:	6825      	ldr	r5, [r4, #0]
 802277e:	1961      	adds	r1, r4, r5
 8022780:	428b      	cmp	r3, r1
 8022782:	bf01      	itttt	eq
 8022784:	6819      	ldreq	r1, [r3, #0]
 8022786:	685b      	ldreq	r3, [r3, #4]
 8022788:	1949      	addeq	r1, r1, r5
 802278a:	6021      	streq	r1, [r4, #0]
 802278c:	e7ed      	b.n	802276a <_free_r+0x22>
 802278e:	461a      	mov	r2, r3
 8022790:	685b      	ldr	r3, [r3, #4]
 8022792:	b10b      	cbz	r3, 8022798 <_free_r+0x50>
 8022794:	42a3      	cmp	r3, r4
 8022796:	d9fa      	bls.n	802278e <_free_r+0x46>
 8022798:	6811      	ldr	r1, [r2, #0]
 802279a:	1855      	adds	r5, r2, r1
 802279c:	42a5      	cmp	r5, r4
 802279e:	d10b      	bne.n	80227b8 <_free_r+0x70>
 80227a0:	6824      	ldr	r4, [r4, #0]
 80227a2:	4421      	add	r1, r4
 80227a4:	1854      	adds	r4, r2, r1
 80227a6:	42a3      	cmp	r3, r4
 80227a8:	6011      	str	r1, [r2, #0]
 80227aa:	d1e0      	bne.n	802276e <_free_r+0x26>
 80227ac:	681c      	ldr	r4, [r3, #0]
 80227ae:	685b      	ldr	r3, [r3, #4]
 80227b0:	6053      	str	r3, [r2, #4]
 80227b2:	4421      	add	r1, r4
 80227b4:	6011      	str	r1, [r2, #0]
 80227b6:	e7da      	b.n	802276e <_free_r+0x26>
 80227b8:	d902      	bls.n	80227c0 <_free_r+0x78>
 80227ba:	230c      	movs	r3, #12
 80227bc:	6003      	str	r3, [r0, #0]
 80227be:	e7d6      	b.n	802276e <_free_r+0x26>
 80227c0:	6825      	ldr	r5, [r4, #0]
 80227c2:	1961      	adds	r1, r4, r5
 80227c4:	428b      	cmp	r3, r1
 80227c6:	bf04      	itt	eq
 80227c8:	6819      	ldreq	r1, [r3, #0]
 80227ca:	685b      	ldreq	r3, [r3, #4]
 80227cc:	6063      	str	r3, [r4, #4]
 80227ce:	bf04      	itt	eq
 80227d0:	1949      	addeq	r1, r1, r5
 80227d2:	6021      	streq	r1, [r4, #0]
 80227d4:	6054      	str	r4, [r2, #4]
 80227d6:	e7ca      	b.n	802276e <_free_r+0x26>
 80227d8:	b003      	add	sp, #12
 80227da:	bd30      	pop	{r4, r5, pc}
 80227dc:	2000f910 	.word	0x2000f910

080227e0 <sbrk_aligned>:
 80227e0:	b570      	push	{r4, r5, r6, lr}
 80227e2:	4e0e      	ldr	r6, [pc, #56]	; (802281c <sbrk_aligned+0x3c>)
 80227e4:	460c      	mov	r4, r1
 80227e6:	6831      	ldr	r1, [r6, #0]
 80227e8:	4605      	mov	r5, r0
 80227ea:	b911      	cbnz	r1, 80227f2 <sbrk_aligned+0x12>
 80227ec:	f000 fa2e 	bl	8022c4c <_sbrk_r>
 80227f0:	6030      	str	r0, [r6, #0]
 80227f2:	4621      	mov	r1, r4
 80227f4:	4628      	mov	r0, r5
 80227f6:	f000 fa29 	bl	8022c4c <_sbrk_r>
 80227fa:	1c43      	adds	r3, r0, #1
 80227fc:	d00a      	beq.n	8022814 <sbrk_aligned+0x34>
 80227fe:	1cc4      	adds	r4, r0, #3
 8022800:	f024 0403 	bic.w	r4, r4, #3
 8022804:	42a0      	cmp	r0, r4
 8022806:	d007      	beq.n	8022818 <sbrk_aligned+0x38>
 8022808:	1a21      	subs	r1, r4, r0
 802280a:	4628      	mov	r0, r5
 802280c:	f000 fa1e 	bl	8022c4c <_sbrk_r>
 8022810:	3001      	adds	r0, #1
 8022812:	d101      	bne.n	8022818 <sbrk_aligned+0x38>
 8022814:	f04f 34ff 	mov.w	r4, #4294967295
 8022818:	4620      	mov	r0, r4
 802281a:	bd70      	pop	{r4, r5, r6, pc}
 802281c:	2000f914 	.word	0x2000f914

08022820 <_malloc_r>:
 8022820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022824:	1ccd      	adds	r5, r1, #3
 8022826:	f025 0503 	bic.w	r5, r5, #3
 802282a:	3508      	adds	r5, #8
 802282c:	2d0c      	cmp	r5, #12
 802282e:	bf38      	it	cc
 8022830:	250c      	movcc	r5, #12
 8022832:	2d00      	cmp	r5, #0
 8022834:	4607      	mov	r7, r0
 8022836:	db01      	blt.n	802283c <_malloc_r+0x1c>
 8022838:	42a9      	cmp	r1, r5
 802283a:	d905      	bls.n	8022848 <_malloc_r+0x28>
 802283c:	230c      	movs	r3, #12
 802283e:	603b      	str	r3, [r7, #0]
 8022840:	2600      	movs	r6, #0
 8022842:	4630      	mov	r0, r6
 8022844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022848:	4e2e      	ldr	r6, [pc, #184]	; (8022904 <_malloc_r+0xe4>)
 802284a:	f000 faeb 	bl	8022e24 <__malloc_lock>
 802284e:	6833      	ldr	r3, [r6, #0]
 8022850:	461c      	mov	r4, r3
 8022852:	bb34      	cbnz	r4, 80228a2 <_malloc_r+0x82>
 8022854:	4629      	mov	r1, r5
 8022856:	4638      	mov	r0, r7
 8022858:	f7ff ffc2 	bl	80227e0 <sbrk_aligned>
 802285c:	1c43      	adds	r3, r0, #1
 802285e:	4604      	mov	r4, r0
 8022860:	d14d      	bne.n	80228fe <_malloc_r+0xde>
 8022862:	6834      	ldr	r4, [r6, #0]
 8022864:	4626      	mov	r6, r4
 8022866:	2e00      	cmp	r6, #0
 8022868:	d140      	bne.n	80228ec <_malloc_r+0xcc>
 802286a:	6823      	ldr	r3, [r4, #0]
 802286c:	4631      	mov	r1, r6
 802286e:	4638      	mov	r0, r7
 8022870:	eb04 0803 	add.w	r8, r4, r3
 8022874:	f000 f9ea 	bl	8022c4c <_sbrk_r>
 8022878:	4580      	cmp	r8, r0
 802287a:	d13a      	bne.n	80228f2 <_malloc_r+0xd2>
 802287c:	6821      	ldr	r1, [r4, #0]
 802287e:	3503      	adds	r5, #3
 8022880:	1a6d      	subs	r5, r5, r1
 8022882:	f025 0503 	bic.w	r5, r5, #3
 8022886:	3508      	adds	r5, #8
 8022888:	2d0c      	cmp	r5, #12
 802288a:	bf38      	it	cc
 802288c:	250c      	movcc	r5, #12
 802288e:	4629      	mov	r1, r5
 8022890:	4638      	mov	r0, r7
 8022892:	f7ff ffa5 	bl	80227e0 <sbrk_aligned>
 8022896:	3001      	adds	r0, #1
 8022898:	d02b      	beq.n	80228f2 <_malloc_r+0xd2>
 802289a:	6823      	ldr	r3, [r4, #0]
 802289c:	442b      	add	r3, r5
 802289e:	6023      	str	r3, [r4, #0]
 80228a0:	e00e      	b.n	80228c0 <_malloc_r+0xa0>
 80228a2:	6822      	ldr	r2, [r4, #0]
 80228a4:	1b52      	subs	r2, r2, r5
 80228a6:	d41e      	bmi.n	80228e6 <_malloc_r+0xc6>
 80228a8:	2a0b      	cmp	r2, #11
 80228aa:	d916      	bls.n	80228da <_malloc_r+0xba>
 80228ac:	1961      	adds	r1, r4, r5
 80228ae:	42a3      	cmp	r3, r4
 80228b0:	6025      	str	r5, [r4, #0]
 80228b2:	bf18      	it	ne
 80228b4:	6059      	strne	r1, [r3, #4]
 80228b6:	6863      	ldr	r3, [r4, #4]
 80228b8:	bf08      	it	eq
 80228ba:	6031      	streq	r1, [r6, #0]
 80228bc:	5162      	str	r2, [r4, r5]
 80228be:	604b      	str	r3, [r1, #4]
 80228c0:	4638      	mov	r0, r7
 80228c2:	f104 060b 	add.w	r6, r4, #11
 80228c6:	f000 fab3 	bl	8022e30 <__malloc_unlock>
 80228ca:	f026 0607 	bic.w	r6, r6, #7
 80228ce:	1d23      	adds	r3, r4, #4
 80228d0:	1af2      	subs	r2, r6, r3
 80228d2:	d0b6      	beq.n	8022842 <_malloc_r+0x22>
 80228d4:	1b9b      	subs	r3, r3, r6
 80228d6:	50a3      	str	r3, [r4, r2]
 80228d8:	e7b3      	b.n	8022842 <_malloc_r+0x22>
 80228da:	6862      	ldr	r2, [r4, #4]
 80228dc:	42a3      	cmp	r3, r4
 80228de:	bf0c      	ite	eq
 80228e0:	6032      	streq	r2, [r6, #0]
 80228e2:	605a      	strne	r2, [r3, #4]
 80228e4:	e7ec      	b.n	80228c0 <_malloc_r+0xa0>
 80228e6:	4623      	mov	r3, r4
 80228e8:	6864      	ldr	r4, [r4, #4]
 80228ea:	e7b2      	b.n	8022852 <_malloc_r+0x32>
 80228ec:	4634      	mov	r4, r6
 80228ee:	6876      	ldr	r6, [r6, #4]
 80228f0:	e7b9      	b.n	8022866 <_malloc_r+0x46>
 80228f2:	230c      	movs	r3, #12
 80228f4:	603b      	str	r3, [r7, #0]
 80228f6:	4638      	mov	r0, r7
 80228f8:	f000 fa9a 	bl	8022e30 <__malloc_unlock>
 80228fc:	e7a1      	b.n	8022842 <_malloc_r+0x22>
 80228fe:	6025      	str	r5, [r4, #0]
 8022900:	e7de      	b.n	80228c0 <_malloc_r+0xa0>
 8022902:	bf00      	nop
 8022904:	2000f910 	.word	0x2000f910

08022908 <__sfputc_r>:
 8022908:	6893      	ldr	r3, [r2, #8]
 802290a:	3b01      	subs	r3, #1
 802290c:	2b00      	cmp	r3, #0
 802290e:	b410      	push	{r4}
 8022910:	6093      	str	r3, [r2, #8]
 8022912:	da08      	bge.n	8022926 <__sfputc_r+0x1e>
 8022914:	6994      	ldr	r4, [r2, #24]
 8022916:	42a3      	cmp	r3, r4
 8022918:	db01      	blt.n	802291e <__sfputc_r+0x16>
 802291a:	290a      	cmp	r1, #10
 802291c:	d103      	bne.n	8022926 <__sfputc_r+0x1e>
 802291e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022922:	f7fe ba0f 	b.w	8020d44 <__swbuf_r>
 8022926:	6813      	ldr	r3, [r2, #0]
 8022928:	1c58      	adds	r0, r3, #1
 802292a:	6010      	str	r0, [r2, #0]
 802292c:	7019      	strb	r1, [r3, #0]
 802292e:	4608      	mov	r0, r1
 8022930:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022934:	4770      	bx	lr

08022936 <__sfputs_r>:
 8022936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022938:	4606      	mov	r6, r0
 802293a:	460f      	mov	r7, r1
 802293c:	4614      	mov	r4, r2
 802293e:	18d5      	adds	r5, r2, r3
 8022940:	42ac      	cmp	r4, r5
 8022942:	d101      	bne.n	8022948 <__sfputs_r+0x12>
 8022944:	2000      	movs	r0, #0
 8022946:	e007      	b.n	8022958 <__sfputs_r+0x22>
 8022948:	f814 1b01 	ldrb.w	r1, [r4], #1
 802294c:	463a      	mov	r2, r7
 802294e:	4630      	mov	r0, r6
 8022950:	f7ff ffda 	bl	8022908 <__sfputc_r>
 8022954:	1c43      	adds	r3, r0, #1
 8022956:	d1f3      	bne.n	8022940 <__sfputs_r+0xa>
 8022958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802295c <_vfiprintf_r>:
 802295c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022960:	460d      	mov	r5, r1
 8022962:	b09d      	sub	sp, #116	; 0x74
 8022964:	4614      	mov	r4, r2
 8022966:	4698      	mov	r8, r3
 8022968:	4606      	mov	r6, r0
 802296a:	b118      	cbz	r0, 8022974 <_vfiprintf_r+0x18>
 802296c:	6983      	ldr	r3, [r0, #24]
 802296e:	b90b      	cbnz	r3, 8022974 <_vfiprintf_r+0x18>
 8022970:	f7ff fa3e 	bl	8021df0 <__sinit>
 8022974:	4b89      	ldr	r3, [pc, #548]	; (8022b9c <_vfiprintf_r+0x240>)
 8022976:	429d      	cmp	r5, r3
 8022978:	d11b      	bne.n	80229b2 <_vfiprintf_r+0x56>
 802297a:	6875      	ldr	r5, [r6, #4]
 802297c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802297e:	07d9      	lsls	r1, r3, #31
 8022980:	d405      	bmi.n	802298e <_vfiprintf_r+0x32>
 8022982:	89ab      	ldrh	r3, [r5, #12]
 8022984:	059a      	lsls	r2, r3, #22
 8022986:	d402      	bmi.n	802298e <_vfiprintf_r+0x32>
 8022988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802298a:	f7ff fad4 	bl	8021f36 <__retarget_lock_acquire_recursive>
 802298e:	89ab      	ldrh	r3, [r5, #12]
 8022990:	071b      	lsls	r3, r3, #28
 8022992:	d501      	bpl.n	8022998 <_vfiprintf_r+0x3c>
 8022994:	692b      	ldr	r3, [r5, #16]
 8022996:	b9eb      	cbnz	r3, 80229d4 <_vfiprintf_r+0x78>
 8022998:	4629      	mov	r1, r5
 802299a:	4630      	mov	r0, r6
 802299c:	f7fe fa24 	bl	8020de8 <__swsetup_r>
 80229a0:	b1c0      	cbz	r0, 80229d4 <_vfiprintf_r+0x78>
 80229a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80229a4:	07dc      	lsls	r4, r3, #31
 80229a6:	d50e      	bpl.n	80229c6 <_vfiprintf_r+0x6a>
 80229a8:	f04f 30ff 	mov.w	r0, #4294967295
 80229ac:	b01d      	add	sp, #116	; 0x74
 80229ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80229b2:	4b7b      	ldr	r3, [pc, #492]	; (8022ba0 <_vfiprintf_r+0x244>)
 80229b4:	429d      	cmp	r5, r3
 80229b6:	d101      	bne.n	80229bc <_vfiprintf_r+0x60>
 80229b8:	68b5      	ldr	r5, [r6, #8]
 80229ba:	e7df      	b.n	802297c <_vfiprintf_r+0x20>
 80229bc:	4b79      	ldr	r3, [pc, #484]	; (8022ba4 <_vfiprintf_r+0x248>)
 80229be:	429d      	cmp	r5, r3
 80229c0:	bf08      	it	eq
 80229c2:	68f5      	ldreq	r5, [r6, #12]
 80229c4:	e7da      	b.n	802297c <_vfiprintf_r+0x20>
 80229c6:	89ab      	ldrh	r3, [r5, #12]
 80229c8:	0598      	lsls	r0, r3, #22
 80229ca:	d4ed      	bmi.n	80229a8 <_vfiprintf_r+0x4c>
 80229cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80229ce:	f7ff fab3 	bl	8021f38 <__retarget_lock_release_recursive>
 80229d2:	e7e9      	b.n	80229a8 <_vfiprintf_r+0x4c>
 80229d4:	2300      	movs	r3, #0
 80229d6:	9309      	str	r3, [sp, #36]	; 0x24
 80229d8:	2320      	movs	r3, #32
 80229da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80229de:	f8cd 800c 	str.w	r8, [sp, #12]
 80229e2:	2330      	movs	r3, #48	; 0x30
 80229e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022ba8 <_vfiprintf_r+0x24c>
 80229e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80229ec:	f04f 0901 	mov.w	r9, #1
 80229f0:	4623      	mov	r3, r4
 80229f2:	469a      	mov	sl, r3
 80229f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80229f8:	b10a      	cbz	r2, 80229fe <_vfiprintf_r+0xa2>
 80229fa:	2a25      	cmp	r2, #37	; 0x25
 80229fc:	d1f9      	bne.n	80229f2 <_vfiprintf_r+0x96>
 80229fe:	ebba 0b04 	subs.w	fp, sl, r4
 8022a02:	d00b      	beq.n	8022a1c <_vfiprintf_r+0xc0>
 8022a04:	465b      	mov	r3, fp
 8022a06:	4622      	mov	r2, r4
 8022a08:	4629      	mov	r1, r5
 8022a0a:	4630      	mov	r0, r6
 8022a0c:	f7ff ff93 	bl	8022936 <__sfputs_r>
 8022a10:	3001      	adds	r0, #1
 8022a12:	f000 80aa 	beq.w	8022b6a <_vfiprintf_r+0x20e>
 8022a16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022a18:	445a      	add	r2, fp
 8022a1a:	9209      	str	r2, [sp, #36]	; 0x24
 8022a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8022a20:	2b00      	cmp	r3, #0
 8022a22:	f000 80a2 	beq.w	8022b6a <_vfiprintf_r+0x20e>
 8022a26:	2300      	movs	r3, #0
 8022a28:	f04f 32ff 	mov.w	r2, #4294967295
 8022a2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022a30:	f10a 0a01 	add.w	sl, sl, #1
 8022a34:	9304      	str	r3, [sp, #16]
 8022a36:	9307      	str	r3, [sp, #28]
 8022a38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022a3c:	931a      	str	r3, [sp, #104]	; 0x68
 8022a3e:	4654      	mov	r4, sl
 8022a40:	2205      	movs	r2, #5
 8022a42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022a46:	4858      	ldr	r0, [pc, #352]	; (8022ba8 <_vfiprintf_r+0x24c>)
 8022a48:	f7dd fbf2 	bl	8000230 <memchr>
 8022a4c:	9a04      	ldr	r2, [sp, #16]
 8022a4e:	b9d8      	cbnz	r0, 8022a88 <_vfiprintf_r+0x12c>
 8022a50:	06d1      	lsls	r1, r2, #27
 8022a52:	bf44      	itt	mi
 8022a54:	2320      	movmi	r3, #32
 8022a56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022a5a:	0713      	lsls	r3, r2, #28
 8022a5c:	bf44      	itt	mi
 8022a5e:	232b      	movmi	r3, #43	; 0x2b
 8022a60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022a64:	f89a 3000 	ldrb.w	r3, [sl]
 8022a68:	2b2a      	cmp	r3, #42	; 0x2a
 8022a6a:	d015      	beq.n	8022a98 <_vfiprintf_r+0x13c>
 8022a6c:	9a07      	ldr	r2, [sp, #28]
 8022a6e:	4654      	mov	r4, sl
 8022a70:	2000      	movs	r0, #0
 8022a72:	f04f 0c0a 	mov.w	ip, #10
 8022a76:	4621      	mov	r1, r4
 8022a78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022a7c:	3b30      	subs	r3, #48	; 0x30
 8022a7e:	2b09      	cmp	r3, #9
 8022a80:	d94e      	bls.n	8022b20 <_vfiprintf_r+0x1c4>
 8022a82:	b1b0      	cbz	r0, 8022ab2 <_vfiprintf_r+0x156>
 8022a84:	9207      	str	r2, [sp, #28]
 8022a86:	e014      	b.n	8022ab2 <_vfiprintf_r+0x156>
 8022a88:	eba0 0308 	sub.w	r3, r0, r8
 8022a8c:	fa09 f303 	lsl.w	r3, r9, r3
 8022a90:	4313      	orrs	r3, r2
 8022a92:	9304      	str	r3, [sp, #16]
 8022a94:	46a2      	mov	sl, r4
 8022a96:	e7d2      	b.n	8022a3e <_vfiprintf_r+0xe2>
 8022a98:	9b03      	ldr	r3, [sp, #12]
 8022a9a:	1d19      	adds	r1, r3, #4
 8022a9c:	681b      	ldr	r3, [r3, #0]
 8022a9e:	9103      	str	r1, [sp, #12]
 8022aa0:	2b00      	cmp	r3, #0
 8022aa2:	bfbb      	ittet	lt
 8022aa4:	425b      	neglt	r3, r3
 8022aa6:	f042 0202 	orrlt.w	r2, r2, #2
 8022aaa:	9307      	strge	r3, [sp, #28]
 8022aac:	9307      	strlt	r3, [sp, #28]
 8022aae:	bfb8      	it	lt
 8022ab0:	9204      	strlt	r2, [sp, #16]
 8022ab2:	7823      	ldrb	r3, [r4, #0]
 8022ab4:	2b2e      	cmp	r3, #46	; 0x2e
 8022ab6:	d10c      	bne.n	8022ad2 <_vfiprintf_r+0x176>
 8022ab8:	7863      	ldrb	r3, [r4, #1]
 8022aba:	2b2a      	cmp	r3, #42	; 0x2a
 8022abc:	d135      	bne.n	8022b2a <_vfiprintf_r+0x1ce>
 8022abe:	9b03      	ldr	r3, [sp, #12]
 8022ac0:	1d1a      	adds	r2, r3, #4
 8022ac2:	681b      	ldr	r3, [r3, #0]
 8022ac4:	9203      	str	r2, [sp, #12]
 8022ac6:	2b00      	cmp	r3, #0
 8022ac8:	bfb8      	it	lt
 8022aca:	f04f 33ff 	movlt.w	r3, #4294967295
 8022ace:	3402      	adds	r4, #2
 8022ad0:	9305      	str	r3, [sp, #20]
 8022ad2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022bb8 <_vfiprintf_r+0x25c>
 8022ad6:	7821      	ldrb	r1, [r4, #0]
 8022ad8:	2203      	movs	r2, #3
 8022ada:	4650      	mov	r0, sl
 8022adc:	f7dd fba8 	bl	8000230 <memchr>
 8022ae0:	b140      	cbz	r0, 8022af4 <_vfiprintf_r+0x198>
 8022ae2:	2340      	movs	r3, #64	; 0x40
 8022ae4:	eba0 000a 	sub.w	r0, r0, sl
 8022ae8:	fa03 f000 	lsl.w	r0, r3, r0
 8022aec:	9b04      	ldr	r3, [sp, #16]
 8022aee:	4303      	orrs	r3, r0
 8022af0:	3401      	adds	r4, #1
 8022af2:	9304      	str	r3, [sp, #16]
 8022af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022af8:	482c      	ldr	r0, [pc, #176]	; (8022bac <_vfiprintf_r+0x250>)
 8022afa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022afe:	2206      	movs	r2, #6
 8022b00:	f7dd fb96 	bl	8000230 <memchr>
 8022b04:	2800      	cmp	r0, #0
 8022b06:	d03f      	beq.n	8022b88 <_vfiprintf_r+0x22c>
 8022b08:	4b29      	ldr	r3, [pc, #164]	; (8022bb0 <_vfiprintf_r+0x254>)
 8022b0a:	bb1b      	cbnz	r3, 8022b54 <_vfiprintf_r+0x1f8>
 8022b0c:	9b03      	ldr	r3, [sp, #12]
 8022b0e:	3307      	adds	r3, #7
 8022b10:	f023 0307 	bic.w	r3, r3, #7
 8022b14:	3308      	adds	r3, #8
 8022b16:	9303      	str	r3, [sp, #12]
 8022b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022b1a:	443b      	add	r3, r7
 8022b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8022b1e:	e767      	b.n	80229f0 <_vfiprintf_r+0x94>
 8022b20:	fb0c 3202 	mla	r2, ip, r2, r3
 8022b24:	460c      	mov	r4, r1
 8022b26:	2001      	movs	r0, #1
 8022b28:	e7a5      	b.n	8022a76 <_vfiprintf_r+0x11a>
 8022b2a:	2300      	movs	r3, #0
 8022b2c:	3401      	adds	r4, #1
 8022b2e:	9305      	str	r3, [sp, #20]
 8022b30:	4619      	mov	r1, r3
 8022b32:	f04f 0c0a 	mov.w	ip, #10
 8022b36:	4620      	mov	r0, r4
 8022b38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022b3c:	3a30      	subs	r2, #48	; 0x30
 8022b3e:	2a09      	cmp	r2, #9
 8022b40:	d903      	bls.n	8022b4a <_vfiprintf_r+0x1ee>
 8022b42:	2b00      	cmp	r3, #0
 8022b44:	d0c5      	beq.n	8022ad2 <_vfiprintf_r+0x176>
 8022b46:	9105      	str	r1, [sp, #20]
 8022b48:	e7c3      	b.n	8022ad2 <_vfiprintf_r+0x176>
 8022b4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8022b4e:	4604      	mov	r4, r0
 8022b50:	2301      	movs	r3, #1
 8022b52:	e7f0      	b.n	8022b36 <_vfiprintf_r+0x1da>
 8022b54:	ab03      	add	r3, sp, #12
 8022b56:	9300      	str	r3, [sp, #0]
 8022b58:	462a      	mov	r2, r5
 8022b5a:	4b16      	ldr	r3, [pc, #88]	; (8022bb4 <_vfiprintf_r+0x258>)
 8022b5c:	a904      	add	r1, sp, #16
 8022b5e:	4630      	mov	r0, r6
 8022b60:	f7fd fc82 	bl	8020468 <_printf_float>
 8022b64:	4607      	mov	r7, r0
 8022b66:	1c78      	adds	r0, r7, #1
 8022b68:	d1d6      	bne.n	8022b18 <_vfiprintf_r+0x1bc>
 8022b6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022b6c:	07d9      	lsls	r1, r3, #31
 8022b6e:	d405      	bmi.n	8022b7c <_vfiprintf_r+0x220>
 8022b70:	89ab      	ldrh	r3, [r5, #12]
 8022b72:	059a      	lsls	r2, r3, #22
 8022b74:	d402      	bmi.n	8022b7c <_vfiprintf_r+0x220>
 8022b76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022b78:	f7ff f9de 	bl	8021f38 <__retarget_lock_release_recursive>
 8022b7c:	89ab      	ldrh	r3, [r5, #12]
 8022b7e:	065b      	lsls	r3, r3, #25
 8022b80:	f53f af12 	bmi.w	80229a8 <_vfiprintf_r+0x4c>
 8022b84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022b86:	e711      	b.n	80229ac <_vfiprintf_r+0x50>
 8022b88:	ab03      	add	r3, sp, #12
 8022b8a:	9300      	str	r3, [sp, #0]
 8022b8c:	462a      	mov	r2, r5
 8022b8e:	4b09      	ldr	r3, [pc, #36]	; (8022bb4 <_vfiprintf_r+0x258>)
 8022b90:	a904      	add	r1, sp, #16
 8022b92:	4630      	mov	r0, r6
 8022b94:	f7fd ff0c 	bl	80209b0 <_printf_i>
 8022b98:	e7e4      	b.n	8022b64 <_vfiprintf_r+0x208>
 8022b9a:	bf00      	nop
 8022b9c:	08023840 	.word	0x08023840
 8022ba0:	08023860 	.word	0x08023860
 8022ba4:	08023820 	.word	0x08023820
 8022ba8:	080239dc 	.word	0x080239dc
 8022bac:	080239e6 	.word	0x080239e6
 8022bb0:	08020469 	.word	0x08020469
 8022bb4:	08022937 	.word	0x08022937
 8022bb8:	080239e2 	.word	0x080239e2

08022bbc <_putc_r>:
 8022bbc:	b570      	push	{r4, r5, r6, lr}
 8022bbe:	460d      	mov	r5, r1
 8022bc0:	4614      	mov	r4, r2
 8022bc2:	4606      	mov	r6, r0
 8022bc4:	b118      	cbz	r0, 8022bce <_putc_r+0x12>
 8022bc6:	6983      	ldr	r3, [r0, #24]
 8022bc8:	b90b      	cbnz	r3, 8022bce <_putc_r+0x12>
 8022bca:	f7ff f911 	bl	8021df0 <__sinit>
 8022bce:	4b1c      	ldr	r3, [pc, #112]	; (8022c40 <_putc_r+0x84>)
 8022bd0:	429c      	cmp	r4, r3
 8022bd2:	d124      	bne.n	8022c1e <_putc_r+0x62>
 8022bd4:	6874      	ldr	r4, [r6, #4]
 8022bd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022bd8:	07d8      	lsls	r0, r3, #31
 8022bda:	d405      	bmi.n	8022be8 <_putc_r+0x2c>
 8022bdc:	89a3      	ldrh	r3, [r4, #12]
 8022bde:	0599      	lsls	r1, r3, #22
 8022be0:	d402      	bmi.n	8022be8 <_putc_r+0x2c>
 8022be2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022be4:	f7ff f9a7 	bl	8021f36 <__retarget_lock_acquire_recursive>
 8022be8:	68a3      	ldr	r3, [r4, #8]
 8022bea:	3b01      	subs	r3, #1
 8022bec:	2b00      	cmp	r3, #0
 8022bee:	60a3      	str	r3, [r4, #8]
 8022bf0:	da05      	bge.n	8022bfe <_putc_r+0x42>
 8022bf2:	69a2      	ldr	r2, [r4, #24]
 8022bf4:	4293      	cmp	r3, r2
 8022bf6:	db1c      	blt.n	8022c32 <_putc_r+0x76>
 8022bf8:	b2eb      	uxtb	r3, r5
 8022bfa:	2b0a      	cmp	r3, #10
 8022bfc:	d019      	beq.n	8022c32 <_putc_r+0x76>
 8022bfe:	6823      	ldr	r3, [r4, #0]
 8022c00:	1c5a      	adds	r2, r3, #1
 8022c02:	6022      	str	r2, [r4, #0]
 8022c04:	701d      	strb	r5, [r3, #0]
 8022c06:	b2ed      	uxtb	r5, r5
 8022c08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022c0a:	07da      	lsls	r2, r3, #31
 8022c0c:	d405      	bmi.n	8022c1a <_putc_r+0x5e>
 8022c0e:	89a3      	ldrh	r3, [r4, #12]
 8022c10:	059b      	lsls	r3, r3, #22
 8022c12:	d402      	bmi.n	8022c1a <_putc_r+0x5e>
 8022c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022c16:	f7ff f98f 	bl	8021f38 <__retarget_lock_release_recursive>
 8022c1a:	4628      	mov	r0, r5
 8022c1c:	bd70      	pop	{r4, r5, r6, pc}
 8022c1e:	4b09      	ldr	r3, [pc, #36]	; (8022c44 <_putc_r+0x88>)
 8022c20:	429c      	cmp	r4, r3
 8022c22:	d101      	bne.n	8022c28 <_putc_r+0x6c>
 8022c24:	68b4      	ldr	r4, [r6, #8]
 8022c26:	e7d6      	b.n	8022bd6 <_putc_r+0x1a>
 8022c28:	4b07      	ldr	r3, [pc, #28]	; (8022c48 <_putc_r+0x8c>)
 8022c2a:	429c      	cmp	r4, r3
 8022c2c:	bf08      	it	eq
 8022c2e:	68f4      	ldreq	r4, [r6, #12]
 8022c30:	e7d1      	b.n	8022bd6 <_putc_r+0x1a>
 8022c32:	4629      	mov	r1, r5
 8022c34:	4622      	mov	r2, r4
 8022c36:	4630      	mov	r0, r6
 8022c38:	f7fe f884 	bl	8020d44 <__swbuf_r>
 8022c3c:	4605      	mov	r5, r0
 8022c3e:	e7e3      	b.n	8022c08 <_putc_r+0x4c>
 8022c40:	08023840 	.word	0x08023840
 8022c44:	08023860 	.word	0x08023860
 8022c48:	08023820 	.word	0x08023820

08022c4c <_sbrk_r>:
 8022c4c:	b538      	push	{r3, r4, r5, lr}
 8022c4e:	4d06      	ldr	r5, [pc, #24]	; (8022c68 <_sbrk_r+0x1c>)
 8022c50:	2300      	movs	r3, #0
 8022c52:	4604      	mov	r4, r0
 8022c54:	4608      	mov	r0, r1
 8022c56:	602b      	str	r3, [r5, #0]
 8022c58:	f7f4 fd3a 	bl	80176d0 <_sbrk>
 8022c5c:	1c43      	adds	r3, r0, #1
 8022c5e:	d102      	bne.n	8022c66 <_sbrk_r+0x1a>
 8022c60:	682b      	ldr	r3, [r5, #0]
 8022c62:	b103      	cbz	r3, 8022c66 <_sbrk_r+0x1a>
 8022c64:	6023      	str	r3, [r4, #0]
 8022c66:	bd38      	pop	{r3, r4, r5, pc}
 8022c68:	2000f918 	.word	0x2000f918

08022c6c <__sread>:
 8022c6c:	b510      	push	{r4, lr}
 8022c6e:	460c      	mov	r4, r1
 8022c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022c74:	f000 f8e2 	bl	8022e3c <_read_r>
 8022c78:	2800      	cmp	r0, #0
 8022c7a:	bfab      	itete	ge
 8022c7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8022c7e:	89a3      	ldrhlt	r3, [r4, #12]
 8022c80:	181b      	addge	r3, r3, r0
 8022c82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8022c86:	bfac      	ite	ge
 8022c88:	6563      	strge	r3, [r4, #84]	; 0x54
 8022c8a:	81a3      	strhlt	r3, [r4, #12]
 8022c8c:	bd10      	pop	{r4, pc}

08022c8e <__swrite>:
 8022c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022c92:	461f      	mov	r7, r3
 8022c94:	898b      	ldrh	r3, [r1, #12]
 8022c96:	05db      	lsls	r3, r3, #23
 8022c98:	4605      	mov	r5, r0
 8022c9a:	460c      	mov	r4, r1
 8022c9c:	4616      	mov	r6, r2
 8022c9e:	d505      	bpl.n	8022cac <__swrite+0x1e>
 8022ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022ca4:	2302      	movs	r3, #2
 8022ca6:	2200      	movs	r2, #0
 8022ca8:	f000 f898 	bl	8022ddc <_lseek_r>
 8022cac:	89a3      	ldrh	r3, [r4, #12]
 8022cae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022cb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8022cb6:	81a3      	strh	r3, [r4, #12]
 8022cb8:	4632      	mov	r2, r6
 8022cba:	463b      	mov	r3, r7
 8022cbc:	4628      	mov	r0, r5
 8022cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022cc2:	f000 b817 	b.w	8022cf4 <_write_r>

08022cc6 <__sseek>:
 8022cc6:	b510      	push	{r4, lr}
 8022cc8:	460c      	mov	r4, r1
 8022cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022cce:	f000 f885 	bl	8022ddc <_lseek_r>
 8022cd2:	1c43      	adds	r3, r0, #1
 8022cd4:	89a3      	ldrh	r3, [r4, #12]
 8022cd6:	bf15      	itete	ne
 8022cd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8022cda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8022cde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8022ce2:	81a3      	strheq	r3, [r4, #12]
 8022ce4:	bf18      	it	ne
 8022ce6:	81a3      	strhne	r3, [r4, #12]
 8022ce8:	bd10      	pop	{r4, pc}

08022cea <__sclose>:
 8022cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022cee:	f000 b831 	b.w	8022d54 <_close_r>
	...

08022cf4 <_write_r>:
 8022cf4:	b538      	push	{r3, r4, r5, lr}
 8022cf6:	4d07      	ldr	r5, [pc, #28]	; (8022d14 <_write_r+0x20>)
 8022cf8:	4604      	mov	r4, r0
 8022cfa:	4608      	mov	r0, r1
 8022cfc:	4611      	mov	r1, r2
 8022cfe:	2200      	movs	r2, #0
 8022d00:	602a      	str	r2, [r5, #0]
 8022d02:	461a      	mov	r2, r3
 8022d04:	f7f4 fc90 	bl	8017628 <_write>
 8022d08:	1c43      	adds	r3, r0, #1
 8022d0a:	d102      	bne.n	8022d12 <_write_r+0x1e>
 8022d0c:	682b      	ldr	r3, [r5, #0]
 8022d0e:	b103      	cbz	r3, 8022d12 <_write_r+0x1e>
 8022d10:	6023      	str	r3, [r4, #0]
 8022d12:	bd38      	pop	{r3, r4, r5, pc}
 8022d14:	2000f918 	.word	0x2000f918

08022d18 <__assert_func>:
 8022d18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022d1a:	4614      	mov	r4, r2
 8022d1c:	461a      	mov	r2, r3
 8022d1e:	4b09      	ldr	r3, [pc, #36]	; (8022d44 <__assert_func+0x2c>)
 8022d20:	681b      	ldr	r3, [r3, #0]
 8022d22:	4605      	mov	r5, r0
 8022d24:	68d8      	ldr	r0, [r3, #12]
 8022d26:	b14c      	cbz	r4, 8022d3c <__assert_func+0x24>
 8022d28:	4b07      	ldr	r3, [pc, #28]	; (8022d48 <__assert_func+0x30>)
 8022d2a:	9100      	str	r1, [sp, #0]
 8022d2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022d30:	4906      	ldr	r1, [pc, #24]	; (8022d4c <__assert_func+0x34>)
 8022d32:	462b      	mov	r3, r5
 8022d34:	f000 f81e 	bl	8022d74 <fiprintf>
 8022d38:	f000 f89f 	bl	8022e7a <abort>
 8022d3c:	4b04      	ldr	r3, [pc, #16]	; (8022d50 <__assert_func+0x38>)
 8022d3e:	461c      	mov	r4, r3
 8022d40:	e7f3      	b.n	8022d2a <__assert_func+0x12>
 8022d42:	bf00      	nop
 8022d44:	2000002c 	.word	0x2000002c
 8022d48:	080239ed 	.word	0x080239ed
 8022d4c:	080239fa 	.word	0x080239fa
 8022d50:	08023a28 	.word	0x08023a28

08022d54 <_close_r>:
 8022d54:	b538      	push	{r3, r4, r5, lr}
 8022d56:	4d06      	ldr	r5, [pc, #24]	; (8022d70 <_close_r+0x1c>)
 8022d58:	2300      	movs	r3, #0
 8022d5a:	4604      	mov	r4, r0
 8022d5c:	4608      	mov	r0, r1
 8022d5e:	602b      	str	r3, [r5, #0]
 8022d60:	f7f4 fc82 	bl	8017668 <_close>
 8022d64:	1c43      	adds	r3, r0, #1
 8022d66:	d102      	bne.n	8022d6e <_close_r+0x1a>
 8022d68:	682b      	ldr	r3, [r5, #0]
 8022d6a:	b103      	cbz	r3, 8022d6e <_close_r+0x1a>
 8022d6c:	6023      	str	r3, [r4, #0]
 8022d6e:	bd38      	pop	{r3, r4, r5, pc}
 8022d70:	2000f918 	.word	0x2000f918

08022d74 <fiprintf>:
 8022d74:	b40e      	push	{r1, r2, r3}
 8022d76:	b503      	push	{r0, r1, lr}
 8022d78:	4601      	mov	r1, r0
 8022d7a:	ab03      	add	r3, sp, #12
 8022d7c:	4805      	ldr	r0, [pc, #20]	; (8022d94 <fiprintf+0x20>)
 8022d7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8022d82:	6800      	ldr	r0, [r0, #0]
 8022d84:	9301      	str	r3, [sp, #4]
 8022d86:	f7ff fde9 	bl	802295c <_vfiprintf_r>
 8022d8a:	b002      	add	sp, #8
 8022d8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8022d90:	b003      	add	sp, #12
 8022d92:	4770      	bx	lr
 8022d94:	2000002c 	.word	0x2000002c

08022d98 <_fstat_r>:
 8022d98:	b538      	push	{r3, r4, r5, lr}
 8022d9a:	4d07      	ldr	r5, [pc, #28]	; (8022db8 <_fstat_r+0x20>)
 8022d9c:	2300      	movs	r3, #0
 8022d9e:	4604      	mov	r4, r0
 8022da0:	4608      	mov	r0, r1
 8022da2:	4611      	mov	r1, r2
 8022da4:	602b      	str	r3, [r5, #0]
 8022da6:	f7f4 fc6b 	bl	8017680 <_fstat>
 8022daa:	1c43      	adds	r3, r0, #1
 8022dac:	d102      	bne.n	8022db4 <_fstat_r+0x1c>
 8022dae:	682b      	ldr	r3, [r5, #0]
 8022db0:	b103      	cbz	r3, 8022db4 <_fstat_r+0x1c>
 8022db2:	6023      	str	r3, [r4, #0]
 8022db4:	bd38      	pop	{r3, r4, r5, pc}
 8022db6:	bf00      	nop
 8022db8:	2000f918 	.word	0x2000f918

08022dbc <_isatty_r>:
 8022dbc:	b538      	push	{r3, r4, r5, lr}
 8022dbe:	4d06      	ldr	r5, [pc, #24]	; (8022dd8 <_isatty_r+0x1c>)
 8022dc0:	2300      	movs	r3, #0
 8022dc2:	4604      	mov	r4, r0
 8022dc4:	4608      	mov	r0, r1
 8022dc6:	602b      	str	r3, [r5, #0]
 8022dc8:	f7f4 fc6a 	bl	80176a0 <_isatty>
 8022dcc:	1c43      	adds	r3, r0, #1
 8022dce:	d102      	bne.n	8022dd6 <_isatty_r+0x1a>
 8022dd0:	682b      	ldr	r3, [r5, #0]
 8022dd2:	b103      	cbz	r3, 8022dd6 <_isatty_r+0x1a>
 8022dd4:	6023      	str	r3, [r4, #0]
 8022dd6:	bd38      	pop	{r3, r4, r5, pc}
 8022dd8:	2000f918 	.word	0x2000f918

08022ddc <_lseek_r>:
 8022ddc:	b538      	push	{r3, r4, r5, lr}
 8022dde:	4d07      	ldr	r5, [pc, #28]	; (8022dfc <_lseek_r+0x20>)
 8022de0:	4604      	mov	r4, r0
 8022de2:	4608      	mov	r0, r1
 8022de4:	4611      	mov	r1, r2
 8022de6:	2200      	movs	r2, #0
 8022de8:	602a      	str	r2, [r5, #0]
 8022dea:	461a      	mov	r2, r3
 8022dec:	f7f4 fc63 	bl	80176b6 <_lseek>
 8022df0:	1c43      	adds	r3, r0, #1
 8022df2:	d102      	bne.n	8022dfa <_lseek_r+0x1e>
 8022df4:	682b      	ldr	r3, [r5, #0]
 8022df6:	b103      	cbz	r3, 8022dfa <_lseek_r+0x1e>
 8022df8:	6023      	str	r3, [r4, #0]
 8022dfa:	bd38      	pop	{r3, r4, r5, pc}
 8022dfc:	2000f918 	.word	0x2000f918

08022e00 <__ascii_mbtowc>:
 8022e00:	b082      	sub	sp, #8
 8022e02:	b901      	cbnz	r1, 8022e06 <__ascii_mbtowc+0x6>
 8022e04:	a901      	add	r1, sp, #4
 8022e06:	b142      	cbz	r2, 8022e1a <__ascii_mbtowc+0x1a>
 8022e08:	b14b      	cbz	r3, 8022e1e <__ascii_mbtowc+0x1e>
 8022e0a:	7813      	ldrb	r3, [r2, #0]
 8022e0c:	600b      	str	r3, [r1, #0]
 8022e0e:	7812      	ldrb	r2, [r2, #0]
 8022e10:	1e10      	subs	r0, r2, #0
 8022e12:	bf18      	it	ne
 8022e14:	2001      	movne	r0, #1
 8022e16:	b002      	add	sp, #8
 8022e18:	4770      	bx	lr
 8022e1a:	4610      	mov	r0, r2
 8022e1c:	e7fb      	b.n	8022e16 <__ascii_mbtowc+0x16>
 8022e1e:	f06f 0001 	mvn.w	r0, #1
 8022e22:	e7f8      	b.n	8022e16 <__ascii_mbtowc+0x16>

08022e24 <__malloc_lock>:
 8022e24:	4801      	ldr	r0, [pc, #4]	; (8022e2c <__malloc_lock+0x8>)
 8022e26:	f7ff b886 	b.w	8021f36 <__retarget_lock_acquire_recursive>
 8022e2a:	bf00      	nop
 8022e2c:	2000f90c 	.word	0x2000f90c

08022e30 <__malloc_unlock>:
 8022e30:	4801      	ldr	r0, [pc, #4]	; (8022e38 <__malloc_unlock+0x8>)
 8022e32:	f7ff b881 	b.w	8021f38 <__retarget_lock_release_recursive>
 8022e36:	bf00      	nop
 8022e38:	2000f90c 	.word	0x2000f90c

08022e3c <_read_r>:
 8022e3c:	b538      	push	{r3, r4, r5, lr}
 8022e3e:	4d07      	ldr	r5, [pc, #28]	; (8022e5c <_read_r+0x20>)
 8022e40:	4604      	mov	r4, r0
 8022e42:	4608      	mov	r0, r1
 8022e44:	4611      	mov	r1, r2
 8022e46:	2200      	movs	r2, #0
 8022e48:	602a      	str	r2, [r5, #0]
 8022e4a:	461a      	mov	r2, r3
 8022e4c:	f7f4 fbce 	bl	80175ec <_read>
 8022e50:	1c43      	adds	r3, r0, #1
 8022e52:	d102      	bne.n	8022e5a <_read_r+0x1e>
 8022e54:	682b      	ldr	r3, [r5, #0]
 8022e56:	b103      	cbz	r3, 8022e5a <_read_r+0x1e>
 8022e58:	6023      	str	r3, [r4, #0]
 8022e5a:	bd38      	pop	{r3, r4, r5, pc}
 8022e5c:	2000f918 	.word	0x2000f918

08022e60 <__ascii_wctomb>:
 8022e60:	b149      	cbz	r1, 8022e76 <__ascii_wctomb+0x16>
 8022e62:	2aff      	cmp	r2, #255	; 0xff
 8022e64:	bf85      	ittet	hi
 8022e66:	238a      	movhi	r3, #138	; 0x8a
 8022e68:	6003      	strhi	r3, [r0, #0]
 8022e6a:	700a      	strbls	r2, [r1, #0]
 8022e6c:	f04f 30ff 	movhi.w	r0, #4294967295
 8022e70:	bf98      	it	ls
 8022e72:	2001      	movls	r0, #1
 8022e74:	4770      	bx	lr
 8022e76:	4608      	mov	r0, r1
 8022e78:	4770      	bx	lr

08022e7a <abort>:
 8022e7a:	b508      	push	{r3, lr}
 8022e7c:	2006      	movs	r0, #6
 8022e7e:	f000 f82b 	bl	8022ed8 <raise>
 8022e82:	2001      	movs	r0, #1
 8022e84:	f7f4 fba8 	bl	80175d8 <_exit>

08022e88 <_raise_r>:
 8022e88:	291f      	cmp	r1, #31
 8022e8a:	b538      	push	{r3, r4, r5, lr}
 8022e8c:	4604      	mov	r4, r0
 8022e8e:	460d      	mov	r5, r1
 8022e90:	d904      	bls.n	8022e9c <_raise_r+0x14>
 8022e92:	2316      	movs	r3, #22
 8022e94:	6003      	str	r3, [r0, #0]
 8022e96:	f04f 30ff 	mov.w	r0, #4294967295
 8022e9a:	bd38      	pop	{r3, r4, r5, pc}
 8022e9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8022e9e:	b112      	cbz	r2, 8022ea6 <_raise_r+0x1e>
 8022ea0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022ea4:	b94b      	cbnz	r3, 8022eba <_raise_r+0x32>
 8022ea6:	4620      	mov	r0, r4
 8022ea8:	f000 f830 	bl	8022f0c <_getpid_r>
 8022eac:	462a      	mov	r2, r5
 8022eae:	4601      	mov	r1, r0
 8022eb0:	4620      	mov	r0, r4
 8022eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022eb6:	f000 b817 	b.w	8022ee8 <_kill_r>
 8022eba:	2b01      	cmp	r3, #1
 8022ebc:	d00a      	beq.n	8022ed4 <_raise_r+0x4c>
 8022ebe:	1c59      	adds	r1, r3, #1
 8022ec0:	d103      	bne.n	8022eca <_raise_r+0x42>
 8022ec2:	2316      	movs	r3, #22
 8022ec4:	6003      	str	r3, [r0, #0]
 8022ec6:	2001      	movs	r0, #1
 8022ec8:	e7e7      	b.n	8022e9a <_raise_r+0x12>
 8022eca:	2400      	movs	r4, #0
 8022ecc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8022ed0:	4628      	mov	r0, r5
 8022ed2:	4798      	blx	r3
 8022ed4:	2000      	movs	r0, #0
 8022ed6:	e7e0      	b.n	8022e9a <_raise_r+0x12>

08022ed8 <raise>:
 8022ed8:	4b02      	ldr	r3, [pc, #8]	; (8022ee4 <raise+0xc>)
 8022eda:	4601      	mov	r1, r0
 8022edc:	6818      	ldr	r0, [r3, #0]
 8022ede:	f7ff bfd3 	b.w	8022e88 <_raise_r>
 8022ee2:	bf00      	nop
 8022ee4:	2000002c 	.word	0x2000002c

08022ee8 <_kill_r>:
 8022ee8:	b538      	push	{r3, r4, r5, lr}
 8022eea:	4d07      	ldr	r5, [pc, #28]	; (8022f08 <_kill_r+0x20>)
 8022eec:	2300      	movs	r3, #0
 8022eee:	4604      	mov	r4, r0
 8022ef0:	4608      	mov	r0, r1
 8022ef2:	4611      	mov	r1, r2
 8022ef4:	602b      	str	r3, [r5, #0]
 8022ef6:	f7f4 fb5f 	bl	80175b8 <_kill>
 8022efa:	1c43      	adds	r3, r0, #1
 8022efc:	d102      	bne.n	8022f04 <_kill_r+0x1c>
 8022efe:	682b      	ldr	r3, [r5, #0]
 8022f00:	b103      	cbz	r3, 8022f04 <_kill_r+0x1c>
 8022f02:	6023      	str	r3, [r4, #0]
 8022f04:	bd38      	pop	{r3, r4, r5, pc}
 8022f06:	bf00      	nop
 8022f08:	2000f918 	.word	0x2000f918

08022f0c <_getpid_r>:
 8022f0c:	f7f4 bb4c 	b.w	80175a8 <_getpid>

08022f10 <ceil>:
 8022f10:	ec51 0b10 	vmov	r0, r1, d0
 8022f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022f18:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8022f1c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8022f20:	2e13      	cmp	r6, #19
 8022f22:	ee10 5a10 	vmov	r5, s0
 8022f26:	ee10 8a10 	vmov	r8, s0
 8022f2a:	460c      	mov	r4, r1
 8022f2c:	dc30      	bgt.n	8022f90 <ceil+0x80>
 8022f2e:	2e00      	cmp	r6, #0
 8022f30:	da12      	bge.n	8022f58 <ceil+0x48>
 8022f32:	a335      	add	r3, pc, #212	; (adr r3, 8023008 <ceil+0xf8>)
 8022f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f38:	f7dd f9d0 	bl	80002dc <__adddf3>
 8022f3c:	2200      	movs	r2, #0
 8022f3e:	2300      	movs	r3, #0
 8022f40:	f7dd fe12 	bl	8000b68 <__aeabi_dcmpgt>
 8022f44:	b128      	cbz	r0, 8022f52 <ceil+0x42>
 8022f46:	2c00      	cmp	r4, #0
 8022f48:	db55      	blt.n	8022ff6 <ceil+0xe6>
 8022f4a:	432c      	orrs	r4, r5
 8022f4c:	d057      	beq.n	8022ffe <ceil+0xee>
 8022f4e:	4c30      	ldr	r4, [pc, #192]	; (8023010 <ceil+0x100>)
 8022f50:	2500      	movs	r5, #0
 8022f52:	4621      	mov	r1, r4
 8022f54:	4628      	mov	r0, r5
 8022f56:	e025      	b.n	8022fa4 <ceil+0x94>
 8022f58:	4f2e      	ldr	r7, [pc, #184]	; (8023014 <ceil+0x104>)
 8022f5a:	4137      	asrs	r7, r6
 8022f5c:	ea01 0307 	and.w	r3, r1, r7
 8022f60:	4303      	orrs	r3, r0
 8022f62:	d01f      	beq.n	8022fa4 <ceil+0x94>
 8022f64:	a328      	add	r3, pc, #160	; (adr r3, 8023008 <ceil+0xf8>)
 8022f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f6a:	f7dd f9b7 	bl	80002dc <__adddf3>
 8022f6e:	2200      	movs	r2, #0
 8022f70:	2300      	movs	r3, #0
 8022f72:	f7dd fdf9 	bl	8000b68 <__aeabi_dcmpgt>
 8022f76:	2800      	cmp	r0, #0
 8022f78:	d0eb      	beq.n	8022f52 <ceil+0x42>
 8022f7a:	2c00      	cmp	r4, #0
 8022f7c:	bfc2      	ittt	gt
 8022f7e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8022f82:	fa43 f606 	asrgt.w	r6, r3, r6
 8022f86:	19a4      	addgt	r4, r4, r6
 8022f88:	ea24 0407 	bic.w	r4, r4, r7
 8022f8c:	2500      	movs	r5, #0
 8022f8e:	e7e0      	b.n	8022f52 <ceil+0x42>
 8022f90:	2e33      	cmp	r6, #51	; 0x33
 8022f92:	dd0b      	ble.n	8022fac <ceil+0x9c>
 8022f94:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8022f98:	d104      	bne.n	8022fa4 <ceil+0x94>
 8022f9a:	ee10 2a10 	vmov	r2, s0
 8022f9e:	460b      	mov	r3, r1
 8022fa0:	f7dd f99c 	bl	80002dc <__adddf3>
 8022fa4:	ec41 0b10 	vmov	d0, r0, r1
 8022fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022fac:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8022fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8022fb4:	fa23 f707 	lsr.w	r7, r3, r7
 8022fb8:	4207      	tst	r7, r0
 8022fba:	d0f3      	beq.n	8022fa4 <ceil+0x94>
 8022fbc:	a312      	add	r3, pc, #72	; (adr r3, 8023008 <ceil+0xf8>)
 8022fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fc2:	f7dd f98b 	bl	80002dc <__adddf3>
 8022fc6:	2200      	movs	r2, #0
 8022fc8:	2300      	movs	r3, #0
 8022fca:	f7dd fdcd 	bl	8000b68 <__aeabi_dcmpgt>
 8022fce:	2800      	cmp	r0, #0
 8022fd0:	d0bf      	beq.n	8022f52 <ceil+0x42>
 8022fd2:	2c00      	cmp	r4, #0
 8022fd4:	dd02      	ble.n	8022fdc <ceil+0xcc>
 8022fd6:	2e14      	cmp	r6, #20
 8022fd8:	d103      	bne.n	8022fe2 <ceil+0xd2>
 8022fda:	3401      	adds	r4, #1
 8022fdc:	ea25 0507 	bic.w	r5, r5, r7
 8022fe0:	e7b7      	b.n	8022f52 <ceil+0x42>
 8022fe2:	2301      	movs	r3, #1
 8022fe4:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8022fe8:	fa03 f606 	lsl.w	r6, r3, r6
 8022fec:	4435      	add	r5, r6
 8022fee:	4545      	cmp	r5, r8
 8022ff0:	bf38      	it	cc
 8022ff2:	18e4      	addcc	r4, r4, r3
 8022ff4:	e7f2      	b.n	8022fdc <ceil+0xcc>
 8022ff6:	2500      	movs	r5, #0
 8022ff8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8022ffc:	e7a9      	b.n	8022f52 <ceil+0x42>
 8022ffe:	4625      	mov	r5, r4
 8023000:	e7a7      	b.n	8022f52 <ceil+0x42>
 8023002:	bf00      	nop
 8023004:	f3af 8000 	nop.w
 8023008:	8800759c 	.word	0x8800759c
 802300c:	7e37e43c 	.word	0x7e37e43c
 8023010:	3ff00000 	.word	0x3ff00000
 8023014:	000fffff 	.word	0x000fffff

08023018 <exp>:
 8023018:	b538      	push	{r3, r4, r5, lr}
 802301a:	ed2d 8b02 	vpush	{d8}
 802301e:	ec55 4b10 	vmov	r4, r5, d0
 8023022:	f000 f841 	bl	80230a8 <__ieee754_exp>
 8023026:	eeb0 8a40 	vmov.f32	s16, s0
 802302a:	eef0 8a60 	vmov.f32	s17, s1
 802302e:	ec45 4b10 	vmov	d0, r4, r5
 8023032:	f000 f9eb 	bl	802340c <finite>
 8023036:	b168      	cbz	r0, 8023054 <exp+0x3c>
 8023038:	a317      	add	r3, pc, #92	; (adr r3, 8023098 <exp+0x80>)
 802303a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802303e:	4620      	mov	r0, r4
 8023040:	4629      	mov	r1, r5
 8023042:	f7dd fd91 	bl	8000b68 <__aeabi_dcmpgt>
 8023046:	b160      	cbz	r0, 8023062 <exp+0x4a>
 8023048:	f7fd f92e 	bl	80202a8 <__errno>
 802304c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8023088 <exp+0x70>
 8023050:	2322      	movs	r3, #34	; 0x22
 8023052:	6003      	str	r3, [r0, #0]
 8023054:	eeb0 0a48 	vmov.f32	s0, s16
 8023058:	eef0 0a68 	vmov.f32	s1, s17
 802305c:	ecbd 8b02 	vpop	{d8}
 8023060:	bd38      	pop	{r3, r4, r5, pc}
 8023062:	a30f      	add	r3, pc, #60	; (adr r3, 80230a0 <exp+0x88>)
 8023064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023068:	4620      	mov	r0, r4
 802306a:	4629      	mov	r1, r5
 802306c:	f7dd fd5e 	bl	8000b2c <__aeabi_dcmplt>
 8023070:	2800      	cmp	r0, #0
 8023072:	d0ef      	beq.n	8023054 <exp+0x3c>
 8023074:	f7fd f918 	bl	80202a8 <__errno>
 8023078:	2322      	movs	r3, #34	; 0x22
 802307a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8023090 <exp+0x78>
 802307e:	6003      	str	r3, [r0, #0]
 8023080:	e7e8      	b.n	8023054 <exp+0x3c>
 8023082:	bf00      	nop
 8023084:	f3af 8000 	nop.w
 8023088:	00000000 	.word	0x00000000
 802308c:	7ff00000 	.word	0x7ff00000
	...
 8023098:	fefa39ef 	.word	0xfefa39ef
 802309c:	40862e42 	.word	0x40862e42
 80230a0:	d52d3051 	.word	0xd52d3051
 80230a4:	c0874910 	.word	0xc0874910

080230a8 <__ieee754_exp>:
 80230a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80230ac:	ec55 4b10 	vmov	r4, r5, d0
 80230b0:	49b5      	ldr	r1, [pc, #724]	; (8023388 <__ieee754_exp+0x2e0>)
 80230b2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80230b6:	428b      	cmp	r3, r1
 80230b8:	ed2d 8b04 	vpush	{d8-d9}
 80230bc:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80230c0:	d93d      	bls.n	802313e <__ieee754_exp+0x96>
 80230c2:	49b2      	ldr	r1, [pc, #712]	; (802338c <__ieee754_exp+0x2e4>)
 80230c4:	428b      	cmp	r3, r1
 80230c6:	d918      	bls.n	80230fa <__ieee754_exp+0x52>
 80230c8:	ee10 3a10 	vmov	r3, s0
 80230cc:	f3c5 0213 	ubfx	r2, r5, #0, #20
 80230d0:	4313      	orrs	r3, r2
 80230d2:	d009      	beq.n	80230e8 <__ieee754_exp+0x40>
 80230d4:	ee10 2a10 	vmov	r2, s0
 80230d8:	462b      	mov	r3, r5
 80230da:	4620      	mov	r0, r4
 80230dc:	4629      	mov	r1, r5
 80230de:	f7dd f8fd 	bl	80002dc <__adddf3>
 80230e2:	4604      	mov	r4, r0
 80230e4:	460d      	mov	r5, r1
 80230e6:	e002      	b.n	80230ee <__ieee754_exp+0x46>
 80230e8:	b10e      	cbz	r6, 80230ee <__ieee754_exp+0x46>
 80230ea:	2400      	movs	r4, #0
 80230ec:	2500      	movs	r5, #0
 80230ee:	ecbd 8b04 	vpop	{d8-d9}
 80230f2:	ec45 4b10 	vmov	d0, r4, r5
 80230f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80230fa:	a38d      	add	r3, pc, #564	; (adr r3, 8023330 <__ieee754_exp+0x288>)
 80230fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023100:	ee10 0a10 	vmov	r0, s0
 8023104:	4629      	mov	r1, r5
 8023106:	f7dd fd2f 	bl	8000b68 <__aeabi_dcmpgt>
 802310a:	4607      	mov	r7, r0
 802310c:	b130      	cbz	r0, 802311c <__ieee754_exp+0x74>
 802310e:	ecbd 8b04 	vpop	{d8-d9}
 8023112:	2000      	movs	r0, #0
 8023114:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023118:	f000 b96f 	b.w	80233fa <__math_oflow>
 802311c:	a386      	add	r3, pc, #536	; (adr r3, 8023338 <__ieee754_exp+0x290>)
 802311e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023122:	4620      	mov	r0, r4
 8023124:	4629      	mov	r1, r5
 8023126:	f7dd fd01 	bl	8000b2c <__aeabi_dcmplt>
 802312a:	2800      	cmp	r0, #0
 802312c:	f000 808b 	beq.w	8023246 <__ieee754_exp+0x19e>
 8023130:	ecbd 8b04 	vpop	{d8-d9}
 8023134:	4638      	mov	r0, r7
 8023136:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802313a:	f000 b955 	b.w	80233e8 <__math_uflow>
 802313e:	4a94      	ldr	r2, [pc, #592]	; (8023390 <__ieee754_exp+0x2e8>)
 8023140:	4293      	cmp	r3, r2
 8023142:	f240 80ac 	bls.w	802329e <__ieee754_exp+0x1f6>
 8023146:	4a93      	ldr	r2, [pc, #588]	; (8023394 <__ieee754_exp+0x2ec>)
 8023148:	4293      	cmp	r3, r2
 802314a:	d87c      	bhi.n	8023246 <__ieee754_exp+0x19e>
 802314c:	4b92      	ldr	r3, [pc, #584]	; (8023398 <__ieee754_exp+0x2f0>)
 802314e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8023152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023156:	ee10 0a10 	vmov	r0, s0
 802315a:	4629      	mov	r1, r5
 802315c:	f7dd f8bc 	bl	80002d8 <__aeabi_dsub>
 8023160:	4b8e      	ldr	r3, [pc, #568]	; (802339c <__ieee754_exp+0x2f4>)
 8023162:	00f7      	lsls	r7, r6, #3
 8023164:	443b      	add	r3, r7
 8023166:	ed93 7b00 	vldr	d7, [r3]
 802316a:	f1c6 0a01 	rsb	sl, r6, #1
 802316e:	4680      	mov	r8, r0
 8023170:	4689      	mov	r9, r1
 8023172:	ebaa 0a06 	sub.w	sl, sl, r6
 8023176:	eeb0 8a47 	vmov.f32	s16, s14
 802317a:	eef0 8a67 	vmov.f32	s17, s15
 802317e:	ec53 2b18 	vmov	r2, r3, d8
 8023182:	4640      	mov	r0, r8
 8023184:	4649      	mov	r1, r9
 8023186:	f7dd f8a7 	bl	80002d8 <__aeabi_dsub>
 802318a:	4604      	mov	r4, r0
 802318c:	460d      	mov	r5, r1
 802318e:	4622      	mov	r2, r4
 8023190:	462b      	mov	r3, r5
 8023192:	4620      	mov	r0, r4
 8023194:	4629      	mov	r1, r5
 8023196:	f7dd fa57 	bl	8000648 <__aeabi_dmul>
 802319a:	a369      	add	r3, pc, #420	; (adr r3, 8023340 <__ieee754_exp+0x298>)
 802319c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231a0:	4606      	mov	r6, r0
 80231a2:	460f      	mov	r7, r1
 80231a4:	f7dd fa50 	bl	8000648 <__aeabi_dmul>
 80231a8:	a367      	add	r3, pc, #412	; (adr r3, 8023348 <__ieee754_exp+0x2a0>)
 80231aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231ae:	f7dd f893 	bl	80002d8 <__aeabi_dsub>
 80231b2:	4632      	mov	r2, r6
 80231b4:	463b      	mov	r3, r7
 80231b6:	f7dd fa47 	bl	8000648 <__aeabi_dmul>
 80231ba:	a365      	add	r3, pc, #404	; (adr r3, 8023350 <__ieee754_exp+0x2a8>)
 80231bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231c0:	f7dd f88c 	bl	80002dc <__adddf3>
 80231c4:	4632      	mov	r2, r6
 80231c6:	463b      	mov	r3, r7
 80231c8:	f7dd fa3e 	bl	8000648 <__aeabi_dmul>
 80231cc:	a362      	add	r3, pc, #392	; (adr r3, 8023358 <__ieee754_exp+0x2b0>)
 80231ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231d2:	f7dd f881 	bl	80002d8 <__aeabi_dsub>
 80231d6:	4632      	mov	r2, r6
 80231d8:	463b      	mov	r3, r7
 80231da:	f7dd fa35 	bl	8000648 <__aeabi_dmul>
 80231de:	a360      	add	r3, pc, #384	; (adr r3, 8023360 <__ieee754_exp+0x2b8>)
 80231e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231e4:	f7dd f87a 	bl	80002dc <__adddf3>
 80231e8:	4632      	mov	r2, r6
 80231ea:	463b      	mov	r3, r7
 80231ec:	f7dd fa2c 	bl	8000648 <__aeabi_dmul>
 80231f0:	4602      	mov	r2, r0
 80231f2:	460b      	mov	r3, r1
 80231f4:	4620      	mov	r0, r4
 80231f6:	4629      	mov	r1, r5
 80231f8:	f7dd f86e 	bl	80002d8 <__aeabi_dsub>
 80231fc:	4602      	mov	r2, r0
 80231fe:	460b      	mov	r3, r1
 8023200:	4606      	mov	r6, r0
 8023202:	460f      	mov	r7, r1
 8023204:	4620      	mov	r0, r4
 8023206:	4629      	mov	r1, r5
 8023208:	f7dd fa1e 	bl	8000648 <__aeabi_dmul>
 802320c:	ec41 0b19 	vmov	d9, r0, r1
 8023210:	f1ba 0f00 	cmp.w	sl, #0
 8023214:	d15d      	bne.n	80232d2 <__ieee754_exp+0x22a>
 8023216:	2200      	movs	r2, #0
 8023218:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802321c:	4630      	mov	r0, r6
 802321e:	4639      	mov	r1, r7
 8023220:	f7dd f85a 	bl	80002d8 <__aeabi_dsub>
 8023224:	4602      	mov	r2, r0
 8023226:	460b      	mov	r3, r1
 8023228:	ec51 0b19 	vmov	r0, r1, d9
 802322c:	f7dd fb36 	bl	800089c <__aeabi_ddiv>
 8023230:	4622      	mov	r2, r4
 8023232:	462b      	mov	r3, r5
 8023234:	f7dd f850 	bl	80002d8 <__aeabi_dsub>
 8023238:	4602      	mov	r2, r0
 802323a:	460b      	mov	r3, r1
 802323c:	2000      	movs	r0, #0
 802323e:	4958      	ldr	r1, [pc, #352]	; (80233a0 <__ieee754_exp+0x2f8>)
 8023240:	f7dd f84a 	bl	80002d8 <__aeabi_dsub>
 8023244:	e74d      	b.n	80230e2 <__ieee754_exp+0x3a>
 8023246:	4857      	ldr	r0, [pc, #348]	; (80233a4 <__ieee754_exp+0x2fc>)
 8023248:	a347      	add	r3, pc, #284	; (adr r3, 8023368 <__ieee754_exp+0x2c0>)
 802324a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802324e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8023252:	4629      	mov	r1, r5
 8023254:	4620      	mov	r0, r4
 8023256:	f7dd f9f7 	bl	8000648 <__aeabi_dmul>
 802325a:	e9d6 2300 	ldrd	r2, r3, [r6]
 802325e:	f7dd f83d 	bl	80002dc <__adddf3>
 8023262:	f7dd fca1 	bl	8000ba8 <__aeabi_d2iz>
 8023266:	4682      	mov	sl, r0
 8023268:	f7dd f984 	bl	8000574 <__aeabi_i2d>
 802326c:	a340      	add	r3, pc, #256	; (adr r3, 8023370 <__ieee754_exp+0x2c8>)
 802326e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023272:	4606      	mov	r6, r0
 8023274:	460f      	mov	r7, r1
 8023276:	f7dd f9e7 	bl	8000648 <__aeabi_dmul>
 802327a:	4602      	mov	r2, r0
 802327c:	460b      	mov	r3, r1
 802327e:	4620      	mov	r0, r4
 8023280:	4629      	mov	r1, r5
 8023282:	f7dd f829 	bl	80002d8 <__aeabi_dsub>
 8023286:	a33c      	add	r3, pc, #240	; (adr r3, 8023378 <__ieee754_exp+0x2d0>)
 8023288:	e9d3 2300 	ldrd	r2, r3, [r3]
 802328c:	4680      	mov	r8, r0
 802328e:	4689      	mov	r9, r1
 8023290:	4630      	mov	r0, r6
 8023292:	4639      	mov	r1, r7
 8023294:	f7dd f9d8 	bl	8000648 <__aeabi_dmul>
 8023298:	ec41 0b18 	vmov	d8, r0, r1
 802329c:	e76f      	b.n	802317e <__ieee754_exp+0xd6>
 802329e:	4a42      	ldr	r2, [pc, #264]	; (80233a8 <__ieee754_exp+0x300>)
 80232a0:	4293      	cmp	r3, r2
 80232a2:	d811      	bhi.n	80232c8 <__ieee754_exp+0x220>
 80232a4:	a336      	add	r3, pc, #216	; (adr r3, 8023380 <__ieee754_exp+0x2d8>)
 80232a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232aa:	ee10 0a10 	vmov	r0, s0
 80232ae:	4629      	mov	r1, r5
 80232b0:	f7dd f814 	bl	80002dc <__adddf3>
 80232b4:	4b3a      	ldr	r3, [pc, #232]	; (80233a0 <__ieee754_exp+0x2f8>)
 80232b6:	2200      	movs	r2, #0
 80232b8:	f7dd fc56 	bl	8000b68 <__aeabi_dcmpgt>
 80232bc:	b138      	cbz	r0, 80232ce <__ieee754_exp+0x226>
 80232be:	4b38      	ldr	r3, [pc, #224]	; (80233a0 <__ieee754_exp+0x2f8>)
 80232c0:	2200      	movs	r2, #0
 80232c2:	4620      	mov	r0, r4
 80232c4:	4629      	mov	r1, r5
 80232c6:	e70a      	b.n	80230de <__ieee754_exp+0x36>
 80232c8:	f04f 0a00 	mov.w	sl, #0
 80232cc:	e75f      	b.n	802318e <__ieee754_exp+0xe6>
 80232ce:	4682      	mov	sl, r0
 80232d0:	e75d      	b.n	802318e <__ieee754_exp+0xe6>
 80232d2:	4632      	mov	r2, r6
 80232d4:	463b      	mov	r3, r7
 80232d6:	2000      	movs	r0, #0
 80232d8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80232dc:	f7dc fffc 	bl	80002d8 <__aeabi_dsub>
 80232e0:	4602      	mov	r2, r0
 80232e2:	460b      	mov	r3, r1
 80232e4:	ec51 0b19 	vmov	r0, r1, d9
 80232e8:	f7dd fad8 	bl	800089c <__aeabi_ddiv>
 80232ec:	4602      	mov	r2, r0
 80232ee:	460b      	mov	r3, r1
 80232f0:	ec51 0b18 	vmov	r0, r1, d8
 80232f4:	f7dc fff0 	bl	80002d8 <__aeabi_dsub>
 80232f8:	4642      	mov	r2, r8
 80232fa:	464b      	mov	r3, r9
 80232fc:	f7dc ffec 	bl	80002d8 <__aeabi_dsub>
 8023300:	4602      	mov	r2, r0
 8023302:	460b      	mov	r3, r1
 8023304:	2000      	movs	r0, #0
 8023306:	4926      	ldr	r1, [pc, #152]	; (80233a0 <__ieee754_exp+0x2f8>)
 8023308:	f7dc ffe6 	bl	80002d8 <__aeabi_dsub>
 802330c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8023310:	4592      	cmp	sl, r2
 8023312:	db02      	blt.n	802331a <__ieee754_exp+0x272>
 8023314:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8023318:	e6e3      	b.n	80230e2 <__ieee754_exp+0x3a>
 802331a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 802331e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8023322:	2200      	movs	r2, #0
 8023324:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8023328:	f7dd f98e 	bl	8000648 <__aeabi_dmul>
 802332c:	e6d9      	b.n	80230e2 <__ieee754_exp+0x3a>
 802332e:	bf00      	nop
 8023330:	fefa39ef 	.word	0xfefa39ef
 8023334:	40862e42 	.word	0x40862e42
 8023338:	d52d3051 	.word	0xd52d3051
 802333c:	c0874910 	.word	0xc0874910
 8023340:	72bea4d0 	.word	0x72bea4d0
 8023344:	3e663769 	.word	0x3e663769
 8023348:	c5d26bf1 	.word	0xc5d26bf1
 802334c:	3ebbbd41 	.word	0x3ebbbd41
 8023350:	af25de2c 	.word	0xaf25de2c
 8023354:	3f11566a 	.word	0x3f11566a
 8023358:	16bebd93 	.word	0x16bebd93
 802335c:	3f66c16c 	.word	0x3f66c16c
 8023360:	5555553e 	.word	0x5555553e
 8023364:	3fc55555 	.word	0x3fc55555
 8023368:	652b82fe 	.word	0x652b82fe
 802336c:	3ff71547 	.word	0x3ff71547
 8023370:	fee00000 	.word	0xfee00000
 8023374:	3fe62e42 	.word	0x3fe62e42
 8023378:	35793c76 	.word	0x35793c76
 802337c:	3dea39ef 	.word	0x3dea39ef
 8023380:	8800759c 	.word	0x8800759c
 8023384:	7e37e43c 	.word	0x7e37e43c
 8023388:	40862e41 	.word	0x40862e41
 802338c:	7fefffff 	.word	0x7fefffff
 8023390:	3fd62e42 	.word	0x3fd62e42
 8023394:	3ff0a2b1 	.word	0x3ff0a2b1
 8023398:	08023b48 	.word	0x08023b48
 802339c:	08023b58 	.word	0x08023b58
 80233a0:	3ff00000 	.word	0x3ff00000
 80233a4:	08023b38 	.word	0x08023b38
 80233a8:	3defffff 	.word	0x3defffff

080233ac <with_errno>:
 80233ac:	b570      	push	{r4, r5, r6, lr}
 80233ae:	4604      	mov	r4, r0
 80233b0:	460d      	mov	r5, r1
 80233b2:	4616      	mov	r6, r2
 80233b4:	f7fc ff78 	bl	80202a8 <__errno>
 80233b8:	4629      	mov	r1, r5
 80233ba:	6006      	str	r6, [r0, #0]
 80233bc:	4620      	mov	r0, r4
 80233be:	bd70      	pop	{r4, r5, r6, pc}

080233c0 <xflow>:
 80233c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80233c2:	4614      	mov	r4, r2
 80233c4:	461d      	mov	r5, r3
 80233c6:	b108      	cbz	r0, 80233cc <xflow+0xc>
 80233c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80233cc:	e9cd 2300 	strd	r2, r3, [sp]
 80233d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80233d4:	4620      	mov	r0, r4
 80233d6:	4629      	mov	r1, r5
 80233d8:	f7dd f936 	bl	8000648 <__aeabi_dmul>
 80233dc:	2222      	movs	r2, #34	; 0x22
 80233de:	b003      	add	sp, #12
 80233e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80233e4:	f7ff bfe2 	b.w	80233ac <with_errno>

080233e8 <__math_uflow>:
 80233e8:	b508      	push	{r3, lr}
 80233ea:	2200      	movs	r2, #0
 80233ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80233f0:	f7ff ffe6 	bl	80233c0 <xflow>
 80233f4:	ec41 0b10 	vmov	d0, r0, r1
 80233f8:	bd08      	pop	{r3, pc}

080233fa <__math_oflow>:
 80233fa:	b508      	push	{r3, lr}
 80233fc:	2200      	movs	r2, #0
 80233fe:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8023402:	f7ff ffdd 	bl	80233c0 <xflow>
 8023406:	ec41 0b10 	vmov	d0, r0, r1
 802340a:	bd08      	pop	{r3, pc}

0802340c <finite>:
 802340c:	b082      	sub	sp, #8
 802340e:	ed8d 0b00 	vstr	d0, [sp]
 8023412:	9801      	ldr	r0, [sp, #4]
 8023414:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8023418:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 802341c:	0fc0      	lsrs	r0, r0, #31
 802341e:	b002      	add	sp, #8
 8023420:	4770      	bx	lr
	...

08023424 <_init>:
 8023424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023426:	bf00      	nop
 8023428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802342a:	bc08      	pop	{r3}
 802342c:	469e      	mov	lr, r3
 802342e:	4770      	bx	lr

08023430 <_fini>:
 8023430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023432:	bf00      	nop
 8023434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023436:	bc08      	pop	{r3}
 8023438:	469e      	mov	lr, r3
 802343a:	4770      	bx	lr
