/*
 * mode_select.c
 *
 *  Created on: Jan 11, 2023
 *      Author: sf199
 */



#include "mode_select.h"

#include "PL_LED.h"
#include "PL_sensor.h"
#include "PL_encoder.h"
#include "PL_gyro.h"
//#include "PL_motor.h"

#include "CL_gyro.h"
#include "CL_encoder.h"
#include "CL_sensor.h"
//#include "motor_control.h"

//#include "turning.h"

//#include "record.h"
//#include "wait_ms.h"
#include "define.h"
//#include "math.h"
//#include "fail_safe.h"



unsigned char mode_decision(unsigned char now_mode){

unsigned char main_modeR=0;
unsigned char main_modeL=0;
unsigned char main_mode=0;
float dis8 =10;
main_modeR=now_mode & 0x0F;
main_modeL=now_mode >> 4;

	pl_yellow_LED_count(main_modeL * 16 + main_modeR);
			//pl_play_oneSound(main_modeR);
			//モード選択*************************************************************************
			while (angle_speedx <= 200) {
				HAL_Delay(1);
				if (E_distanceR >= dis8) {
					if (main_modeR == 15) {
						main_modeR = 0;
					} else {
						main_modeR++;
					}
					reset_distance();

					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
				}
				if (E_distanceR <= -dis8) {
					if (main_modeR == 0) {
						main_modeR = 15;
					} else {
						main_modeR = main_modeR - 1;
					}
					reset_distance();
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
				}
				if (E_distanceL >= dis8) {
					if (main_modeL == 15) {
						main_modeL = 0;
					} else {
						main_modeL = main_modeL + 1;
					}
					reset_distance();
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
				}
				if (E_distanceL <= -dis8) {
					if (main_modeL == 0) {
						main_modeL = 15;
					} else {
						main_modeL = main_modeL - 1;
					}
					reset_distance();
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
				}
				//main_mode=main_modeL << 4 | main_modeR;
	//printf("main_mode=%x L=%x R=%x\n",main_mode,main_modeL,main_modeR);

			}
			pl_yellow_LED_on();
			pl_r_blue_LED(ON);
			pl_l_blue_LED(ON);
			HAL_Delay(1000);
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//

				if (angle_speedx >= 200) {
					main_modeL = 0;
					main_modeR = 0;
					break;
				}
				HAL_Delay(1);
			}
			pl_r_blue_LED(OFF);
			pl_l_blue_LED(OFF);
			pl_yellow_LED_off();

			main_mode=main_modeL << 4 | main_modeR;

return main_mode;
}


void mode_execution(unsigned char now_mode){

unsigned char main_modeR=0;
unsigned char main_modeL=0;

main_modeR=now_mode & 0x0F;
main_modeL=now_mode >> 4;


switch (main_modeL) {
	case 0b0000://PLテストモード1
		mode_PLtest(main_modeR);
	break;
	case 0b0001://実行モード1

	break;
	case 0b0010://実行モード2
	break;
	case 0b0011:
	break;
	case 0b0100:
	break;
	case 0b0101://試験モード
	break;
	case 0b0110:
	break;
	case 0b0111:
	break;
	case 0b1000:
	break;
	case 0b1001:
	break;
	case 0b1010:
	break;
	case 0b1011:
	break;
	case 0b1100:
	break;
	case 0b1101:
	break;
	case 0b1110:
	break;
	case 0b1111:
	break;
}
}



void mode_PLtest(unsigned char main_modeR){

	switch (main_modeR) {
		case 0b0000:
			//飛ばすerror
		break;
		case 0b0001://sensor
			while (1) {
				printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
						g_sensor[1][0], g_sensor[2][0], g_sensor[3][0], g_sensor[4][0]);
				wait_ms(500);
			}
		break;
		case 0b0010://gyro
			reset_gyro();
			reset_speed();
			pl_r_blue_LED(ON);
			pl_l_blue_LED(ON);
			record_mode = 2;
			wait_ms(2000);
			pl_r_blue_LED(OFF);
			pl_l_blue_LED(OFF);
			record_mode = 0;
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
				wait_ms(1);
			}
			record_print();
		break;
		case 0b0011://speaker
			pl_play_Music(169, unknow_story);
		break;
		case 0b0100://speaker
			speaker_mode = 1;
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
				wait_ms(1);
							if (g_sensor[2][0] > SENSOR_FINGER_2){
								speaker_mode++;
								wait_ms(1000);
							}

						}
			speaker_mode = 101;
		break;
		case 0b0101://gyro
			reset_gyro();
			reset_speed();
			pl_r_blue_LED(ON);
			pl_l_blue_LED(ON);
			record_mode = 2;
			wait_ms(2000);
			pl_r_blue_LED(OFF);
			pl_l_blue_LED(OFF);
			record_mode = 0;
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
				wait_ms(1);
			}
				record_print();
		break;
		case 0b0110://gyro
			pl_FunMotor_duty(0.35);
			pl_FunMotor_start();
			wait_ms(1000);
			reset_gyro();
			reset_speed();
			record_mode = 1;
			wait_ms(2000);
			record_mode = 0;
			pl_FunMotor_stop();
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
				wait_ms(1);
			}
				record_print();

		break;
		case 0b0111://宴会芸(別のほうがいいかも)
			//pl_FunMotor_duty(150);
			//pl_FunMotor_start();
			HAL_Delay(1000);
			reset_gyro();
			reset_speed();
			pl_r_blue_LED(ON);
			pl_l_blue_LED(ON);
			pl_DriveMotor_standby(ON);
			clear_Ierror();
			no_angle();
			pl_R_DriveMotor_mode(MOTOR_STOP);
			pl_L_DriveMotor_mode(MOTOR_STOP);
			pl_DriveMotor_standby(OFF);
			pl_r_blue_LED(OFF);
			pl_l_blue_LED(OFF);
			//pl_FunMotor_stop();
		break;
		case 0b1000://printfalldata
			while (1) {
				//	printf("SENSOR_ON  SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n",
				//	g_sensor_on[0], g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
//				printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
//						g_sensor[1][0], g_sensor[2][0], g_sensor[3][0], g_sensor[4][0]);
				HAL_Delay(500);
				//	printf("SENSOR_OFF  SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n",
				//					g_sensor_off[0], g_sensor_off[1], g_sensor_off[2], g_sensor_off[3],g_sensor_off[4]);
//				printf("R  dis=%f,speed=%f,   L  dis=%f,speed=%f\n",
//						E_distanceR, E_speedR, E_distanceL, E_speedL);

				printf(
						"gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
						gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,
						gyro.accel_y, gyro.accel_z);
				//pl_yellow_LED_on();
				//printf("R  dis=%f,speed=%f,   L  dis=%f,speed=%f\n",E_distanceR,E_speedR,E_distanceL,E_speedL);
				//printf("angle=%f,angle_speed=%f\n", angle, angle_speed);
			}
		break;
		case 0b1001://fun
			pl_DriveMotor_standby(ON);
			pl_R_DriveMotor_mode(MOTOR_BREAK);
			pl_L_DriveMotor_mode(MOTOR_BREAK);
			wait_ms_NoReset(500);
			pl_FunMotor_duty(0.51);
			pl_FunMotor_start();
			HAL_Delay(2000);
			reset_gyro();
			reset_speed();
			clear_Ierror();
			record_mode=2;
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {

				HAL_Delay(1);
			}
			record_mode=0;
			pl_FunMotor_stop();
			pl_R_DriveMotor_mode(MOTOR_BREAK);
			pl_L_DriveMotor_mode(MOTOR_BREAK);
			wait_ms_NoReset(500);
			pl_DriveMotor_standby(OFF);
			//pl_FunMotor_stop();
				while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
					HAL_Delay(1);
				}
				pl_r_blue_LED(ON);
				pl_l_blue_LED(ON);
				record_print();

		break;
		case 0b1010://センサーの線形化
			sensor_line();
		break;
		case 0b1011://バッテリー
			while (1) {
				printf("BATT=%f,BATT_Mena=%f,%f\n", g_V_battery[0],g_V_battery_mean,g_V_batt);
				wait_ms(500);
			}
		break;
		case 0b1100:
			sensor_line();
		break;
		case 0b1101:
			sensor_line45();
		break;
		case 0b1110:
			sensor_line45_slant();
		break;
		case 0b1111:
			record_print();
		break;
	}


}


:/*/
