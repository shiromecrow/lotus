/*
 * PID_EncoderGyro.c
 *
 *  Created on: Jan 14, 2023
 *      Author: sf199
 */

#include "PID_EncoderGyro.h"
#include "CL_encoder.h"
#include "CL_gyro.h"
#include "CL_sensor.h"
#include "PL_LED.h"
#include "Control_motor.h"
#include "define.h"

//#include "fail_safe.h"

#include "stdio.h"
#include "math.h"

struct PID enc;
struct PID Gyro;

float Ksp, Ksi, Ksd;
float Ktp, Kti, Ktd;

void PID_Init(void) {

	Ksp = 3.1; //3//P項の制御量直進*****************************************************
	Ksi = 0.08; //80//5//43//I項の制御量直進*****************************************************
	Ksd = 0.00; //D項の制御量直進*****************************************************
	Ktp = 1.6; //295//P項の制御量旋回*****************************************************
	Kti = 0.05; //1//.6//I項の制御量旋回*****************************************************
	Ktd = 0.002; //205//D項の制御量旋回*****************************************************
	enc.sigma_error = 0;
	Gyro.sigma_error = 0;

}

void clear_Ierror(void) {
	enc.sigma_error = 0;
	Gyro.sigma_error = 0;
}


void EncoderGyro_PID(float *PID_s, float *PID_t,float straight_velocity,float turning_velocity) {
	float PID_stra = 0;
	float PID_turn = 0;


	if (straight_velocity == 0) {
		reset_speed();
	}
	//straight.velocity>=2500 && fabs(angle_speed)<100
	if (fabs(angle_speed) < 120 && straight_velocity >= 100 && modeacc!=4) {
		enc.error = (straight_velocity - (fusion_speedR + fusion_speedL) / 2);
	} else {
		enc.error = (straight_velocity - (E_speedR + E_speedL) / 2);
		fusion_speedL = E_lpf_speedL;
		fusion_speedR = E_lpf_speedR;
	}
	//enc.error = (straight.velocity - (fusion_speedR + fusion_speedL) / 2);
	enc.delta_error = enc.error - enc.old_error;
	enc.old_error = enc.error;
	enc.sigma_error += enc.error;
	PID_stra = Ksp * enc.error + Ksi * enc.sigma_error + Ksd * enc.delta_error;




//	if ((g_WallControl_mode == 3 || g_WallControl_mode == 1)
//			&& (highspeed_mode == 1)) {
		Gyro.error = (turning_velocity - angle_speed);
		Gyro.delta_error = Gyro.error - Gyro.old_error;
		Gyro.old_error = Gyro.error;
		Gyro.sigma_error += Gyro.error;
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
				+ Ktd * Gyro.delta_error;

	//	} else {
//		Gyro.error = (turning.velocity + PID_wall - angle_speed);
//		Gyro.delta_error = Gyro.error - Gyro.old_error;
//		Gyro.old_error = Gyro.error;
//		Gyro.sigma_error += Gyro.error;
//		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
//				+ Ktd * Gyro.delta_error;
//
//		*PID_all_R += PID_turn;
//		*PID_all_L -= PID_turn;
//	}

	*PID_s = PID_stra / MAXMOTOR * g_V_battery_mean;
	*PID_t = PID_turn / MAXMOTOR * g_V_battery_mean;

}





